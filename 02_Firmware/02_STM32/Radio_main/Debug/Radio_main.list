
Radio_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e24c  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000050c  0800e500  0800e500  0000f500  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ea0c  0800ea0c  0000fa0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ea14  0800ea14  0000fa14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800ea18  0800ea18  0000fa18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001dc  24000000  0800ea1c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004ca4  240001dc  0800ebf8  000101dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24004e80  0800ebf8  00010e80  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000101dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002a4d7  00000000  00000000  0001020a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004e1d  00000000  00000000  0003a6e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001cb8  00000000  00000000  0003f500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000164c  00000000  00000000  000411b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003692e  00000000  00000000  00042804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002736e  00000000  00000000  00079132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00150cb5  00000000  00000000  000a04a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f1155  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008cb0  00000000  00000000  001f1198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008b  00000000  00000000  001f9e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240001dc 	.word	0x240001dc
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800e4e4 	.word	0x0800e4e4

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240001e0 	.word	0x240001e0
 80002ec:	0800e4e4 	.word	0x0800e4e4

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <strlen>:
 8000390:	4603      	mov	r3, r0
 8000392:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000396:	2a00      	cmp	r2, #0
 8000398:	d1fb      	bne.n	8000392 <strlen+0x2>
 800039a:	1a18      	subs	r0, r3, r0
 800039c:	3801      	subs	r0, #1
 800039e:	4770      	bx	lr

080003a0 <__aeabi_drsub>:
 80003a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003a4:	e002      	b.n	80003ac <__adddf3>
 80003a6:	bf00      	nop

080003a8 <__aeabi_dsub>:
 80003a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003ac <__adddf3>:
 80003ac:	b530      	push	{r4, r5, lr}
 80003ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003b6:	ea94 0f05 	teq	r4, r5
 80003ba:	bf08      	it	eq
 80003bc:	ea90 0f02 	teqeq	r0, r2
 80003c0:	bf1f      	itttt	ne
 80003c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d2:	f000 80e2 	beq.w	800059a <__adddf3+0x1ee>
 80003d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003de:	bfb8      	it	lt
 80003e0:	426d      	neglt	r5, r5
 80003e2:	dd0c      	ble.n	80003fe <__adddf3+0x52>
 80003e4:	442c      	add	r4, r5
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	ea82 0000 	eor.w	r0, r2, r0
 80003f2:	ea83 0101 	eor.w	r1, r3, r1
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	2d36      	cmp	r5, #54	@ 0x36
 8000400:	bf88      	it	hi
 8000402:	bd30      	pophi	{r4, r5, pc}
 8000404:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000408:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800040c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000410:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000414:	d002      	beq.n	800041c <__adddf3+0x70>
 8000416:	4240      	negs	r0, r0
 8000418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800041c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000420:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000424:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x84>
 800042a:	4252      	negs	r2, r2
 800042c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000430:	ea94 0f05 	teq	r4, r5
 8000434:	f000 80a7 	beq.w	8000586 <__adddf3+0x1da>
 8000438:	f1a4 0401 	sub.w	r4, r4, #1
 800043c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000440:	db0d      	blt.n	800045e <__adddf3+0xb2>
 8000442:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000446:	fa22 f205 	lsr.w	r2, r2, r5
 800044a:	1880      	adds	r0, r0, r2
 800044c:	f141 0100 	adc.w	r1, r1, #0
 8000450:	fa03 f20e 	lsl.w	r2, r3, lr
 8000454:	1880      	adds	r0, r0, r2
 8000456:	fa43 f305 	asr.w	r3, r3, r5
 800045a:	4159      	adcs	r1, r3
 800045c:	e00e      	b.n	800047c <__adddf3+0xd0>
 800045e:	f1a5 0520 	sub.w	r5, r5, #32
 8000462:	f10e 0e20 	add.w	lr, lr, #32
 8000466:	2a01      	cmp	r2, #1
 8000468:	fa03 fc0e 	lsl.w	ip, r3, lr
 800046c:	bf28      	it	cs
 800046e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000472:	fa43 f305 	asr.w	r3, r3, r5
 8000476:	18c0      	adds	r0, r0, r3
 8000478:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000480:	d507      	bpl.n	8000492 <__adddf3+0xe6>
 8000482:	f04f 0e00 	mov.w	lr, #0
 8000486:	f1dc 0c00 	rsbs	ip, ip, #0
 800048a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800048e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000492:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000496:	d31b      	bcc.n	80004d0 <__adddf3+0x124>
 8000498:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800049c:	d30c      	bcc.n	80004b8 <__adddf3+0x10c>
 800049e:	0849      	lsrs	r1, r1, #1
 80004a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004a8:	f104 0401 	add.w	r4, r4, #1
 80004ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004b4:	f080 809a 	bcs.w	80005ec <__adddf3+0x240>
 80004b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004bc:	bf08      	it	eq
 80004be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c2:	f150 0000 	adcs.w	r0, r0, #0
 80004c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ca:	ea41 0105 	orr.w	r1, r1, r5
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d4:	4140      	adcs	r0, r0
 80004d6:	eb41 0101 	adc.w	r1, r1, r1
 80004da:	3c01      	subs	r4, #1
 80004dc:	bf28      	it	cs
 80004de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004e2:	d2e9      	bcs.n	80004b8 <__adddf3+0x10c>
 80004e4:	f091 0f00 	teq	r1, #0
 80004e8:	bf04      	itt	eq
 80004ea:	4601      	moveq	r1, r0
 80004ec:	2000      	moveq	r0, #0
 80004ee:	fab1 f381 	clz	r3, r1
 80004f2:	bf08      	it	eq
 80004f4:	3320      	addeq	r3, #32
 80004f6:	f1a3 030b 	sub.w	r3, r3, #11
 80004fa:	f1b3 0220 	subs.w	r2, r3, #32
 80004fe:	da0c      	bge.n	800051a <__adddf3+0x16e>
 8000500:	320c      	adds	r2, #12
 8000502:	dd08      	ble.n	8000516 <__adddf3+0x16a>
 8000504:	f102 0c14 	add.w	ip, r2, #20
 8000508:	f1c2 020c 	rsb	r2, r2, #12
 800050c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000510:	fa21 f102 	lsr.w	r1, r1, r2
 8000514:	e00c      	b.n	8000530 <__adddf3+0x184>
 8000516:	f102 0214 	add.w	r2, r2, #20
 800051a:	bfd8      	it	le
 800051c:	f1c2 0c20 	rsble	ip, r2, #32
 8000520:	fa01 f102 	lsl.w	r1, r1, r2
 8000524:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000528:	bfdc      	itt	le
 800052a:	ea41 010c 	orrle.w	r1, r1, ip
 800052e:	4090      	lslle	r0, r2
 8000530:	1ae4      	subs	r4, r4, r3
 8000532:	bfa2      	ittt	ge
 8000534:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000538:	4329      	orrge	r1, r5
 800053a:	bd30      	popge	{r4, r5, pc}
 800053c:	ea6f 0404 	mvn.w	r4, r4
 8000540:	3c1f      	subs	r4, #31
 8000542:	da1c      	bge.n	800057e <__adddf3+0x1d2>
 8000544:	340c      	adds	r4, #12
 8000546:	dc0e      	bgt.n	8000566 <__adddf3+0x1ba>
 8000548:	f104 0414 	add.w	r4, r4, #20
 800054c:	f1c4 0220 	rsb	r2, r4, #32
 8000550:	fa20 f004 	lsr.w	r0, r0, r4
 8000554:	fa01 f302 	lsl.w	r3, r1, r2
 8000558:	ea40 0003 	orr.w	r0, r0, r3
 800055c:	fa21 f304 	lsr.w	r3, r1, r4
 8000560:	ea45 0103 	orr.w	r1, r5, r3
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f1c4 040c 	rsb	r4, r4, #12
 800056a:	f1c4 0220 	rsb	r2, r4, #32
 800056e:	fa20 f002 	lsr.w	r0, r0, r2
 8000572:	fa01 f304 	lsl.w	r3, r1, r4
 8000576:	ea40 0003 	orr.w	r0, r0, r3
 800057a:	4629      	mov	r1, r5
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	fa21 f004 	lsr.w	r0, r1, r4
 8000582:	4629      	mov	r1, r5
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f094 0f00 	teq	r4, #0
 800058a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800058e:	bf06      	itte	eq
 8000590:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000594:	3401      	addeq	r4, #1
 8000596:	3d01      	subne	r5, #1
 8000598:	e74e      	b.n	8000438 <__adddf3+0x8c>
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf18      	it	ne
 80005a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a4:	d029      	beq.n	80005fa <__adddf3+0x24e>
 80005a6:	ea94 0f05 	teq	r4, r5
 80005aa:	bf08      	it	eq
 80005ac:	ea90 0f02 	teqeq	r0, r2
 80005b0:	d005      	beq.n	80005be <__adddf3+0x212>
 80005b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005b6:	bf04      	itt	eq
 80005b8:	4619      	moveq	r1, r3
 80005ba:	4610      	moveq	r0, r2
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	ea91 0f03 	teq	r1, r3
 80005c2:	bf1e      	ittt	ne
 80005c4:	2100      	movne	r1, #0
 80005c6:	2000      	movne	r0, #0
 80005c8:	bd30      	popne	{r4, r5, pc}
 80005ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ce:	d105      	bne.n	80005dc <__adddf3+0x230>
 80005d0:	0040      	lsls	r0, r0, #1
 80005d2:	4149      	adcs	r1, r1
 80005d4:	bf28      	it	cs
 80005d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd30      	pop	{r4, r5, pc}
 80005dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005e0:	bf3c      	itt	cc
 80005e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005e6:	bd30      	popcc	{r4, r5, pc}
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005fe:	bf1a      	itte	ne
 8000600:	4619      	movne	r1, r3
 8000602:	4610      	movne	r0, r2
 8000604:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000608:	bf1c      	itt	ne
 800060a:	460b      	movne	r3, r1
 800060c:	4602      	movne	r2, r0
 800060e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000612:	bf06      	itte	eq
 8000614:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000618:	ea91 0f03 	teqeq	r1, r3
 800061c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop

08000624 <__aeabi_ui2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f04f 0500 	mov.w	r5, #0
 800063c:	f04f 0100 	mov.w	r1, #0
 8000640:	e750      	b.n	80004e4 <__adddf3+0x138>
 8000642:	bf00      	nop

08000644 <__aeabi_i2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800065c:	bf48      	it	mi
 800065e:	4240      	negmi	r0, r0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e73e      	b.n	80004e4 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_f2d>:
 8000668:	0042      	lsls	r2, r0, #1
 800066a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800066e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000672:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000676:	bf1f      	itttt	ne
 8000678:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800067c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000680:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000684:	4770      	bxne	lr
 8000686:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800068a:	bf08      	it	eq
 800068c:	4770      	bxeq	lr
 800068e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000692:	bf04      	itt	eq
 8000694:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000698:	4770      	bxeq	lr
 800069a:	b530      	push	{r4, r5, lr}
 800069c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	e71c      	b.n	80004e4 <__adddf3+0x138>
 80006aa:	bf00      	nop

080006ac <__aeabi_ul2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	e00a      	b.n	80006d2 <__aeabi_l2d+0x16>

080006bc <__aeabi_l2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ca:	d502      	bpl.n	80006d2 <__aeabi_l2d+0x16>
 80006cc:	4240      	negs	r0, r0
 80006ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006de:	f43f aed8 	beq.w	8000492 <__adddf3+0xe6>
 80006e2:	f04f 0203 	mov.w	r2, #3
 80006e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ea:	bf18      	it	ne
 80006ec:	3203      	addne	r2, #3
 80006ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f2:	bf18      	it	ne
 80006f4:	3203      	addne	r2, #3
 80006f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fa:	f1c2 0320 	rsb	r3, r2, #32
 80006fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 fe03 	lsl.w	lr, r1, r3
 800070a:	ea40 000e 	orr.w	r0, r0, lr
 800070e:	fa21 f102 	lsr.w	r1, r1, r2
 8000712:	4414      	add	r4, r2
 8000714:	e6bd      	b.n	8000492 <__adddf3+0xe6>
 8000716:	bf00      	nop

08000718 <__aeabi_uldivmod>:
 8000718:	b953      	cbnz	r3, 8000730 <__aeabi_uldivmod+0x18>
 800071a:	b94a      	cbnz	r2, 8000730 <__aeabi_uldivmod+0x18>
 800071c:	2900      	cmp	r1, #0
 800071e:	bf08      	it	eq
 8000720:	2800      	cmpeq	r0, #0
 8000722:	bf1c      	itt	ne
 8000724:	f04f 31ff 	movne.w	r1, #4294967295
 8000728:	f04f 30ff 	movne.w	r0, #4294967295
 800072c:	f000 b9a2 	b.w	8000a74 <__aeabi_idiv0>
 8000730:	f1ad 0c08 	sub.w	ip, sp, #8
 8000734:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000738:	f000 f83e 	bl	80007b8 <__udivmoddi4>
 800073c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000740:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000744:	b004      	add	sp, #16
 8000746:	4770      	bx	lr

08000748 <__aeabi_d2lz>:
 8000748:	b508      	push	{r3, lr}
 800074a:	4602      	mov	r2, r0
 800074c:	460b      	mov	r3, r1
 800074e:	ec43 2b17 	vmov	d7, r2, r3
 8000752:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800075a:	d403      	bmi.n	8000764 <__aeabi_d2lz+0x1c>
 800075c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000760:	f000 b80a 	b.w	8000778 <__aeabi_d2ulz>
 8000764:	eeb1 7b47 	vneg.f64	d7, d7
 8000768:	ec51 0b17 	vmov	r0, r1, d7
 800076c:	f000 f804 	bl	8000778 <__aeabi_d2ulz>
 8000770:	4240      	negs	r0, r0
 8000772:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000776:	bd08      	pop	{r3, pc}

08000778 <__aeabi_d2ulz>:
 8000778:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007a8 <__aeabi_d2ulz+0x30>
 800077c:	ec41 0b17 	vmov	d7, r0, r1
 8000780:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007b0 <__aeabi_d2ulz+0x38>
 8000784:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000788:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800078c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000790:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000794:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000798:	ee16 1a10 	vmov	r1, s12
 800079c:	ee17 0a90 	vmov	r0, s15
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	f3af 8000 	nop.w
 80007a8:	00000000 	.word	0x00000000
 80007ac:	3df00000 	.word	0x3df00000
 80007b0:	00000000 	.word	0x00000000
 80007b4:	41f00000 	.word	0x41f00000

080007b8 <__udivmoddi4>:
 80007b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007bc:	9d08      	ldr	r5, [sp, #32]
 80007be:	460c      	mov	r4, r1
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d14e      	bne.n	8000862 <__udivmoddi4+0xaa>
 80007c4:	4694      	mov	ip, r2
 80007c6:	458c      	cmp	ip, r1
 80007c8:	4686      	mov	lr, r0
 80007ca:	fab2 f282 	clz	r2, r2
 80007ce:	d962      	bls.n	8000896 <__udivmoddi4+0xde>
 80007d0:	b14a      	cbz	r2, 80007e6 <__udivmoddi4+0x2e>
 80007d2:	f1c2 0320 	rsb	r3, r2, #32
 80007d6:	4091      	lsls	r1, r2
 80007d8:	fa20 f303 	lsr.w	r3, r0, r3
 80007dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007e0:	4319      	orrs	r1, r3
 80007e2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007e6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007ea:	fa1f f68c 	uxth.w	r6, ip
 80007ee:	fbb1 f4f7 	udiv	r4, r1, r7
 80007f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007f6:	fb07 1114 	mls	r1, r7, r4, r1
 80007fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007fe:	fb04 f106 	mul.w	r1, r4, r6
 8000802:	4299      	cmp	r1, r3
 8000804:	d90a      	bls.n	800081c <__udivmoddi4+0x64>
 8000806:	eb1c 0303 	adds.w	r3, ip, r3
 800080a:	f104 30ff 	add.w	r0, r4, #4294967295
 800080e:	f080 8112 	bcs.w	8000a36 <__udivmoddi4+0x27e>
 8000812:	4299      	cmp	r1, r3
 8000814:	f240 810f 	bls.w	8000a36 <__udivmoddi4+0x27e>
 8000818:	3c02      	subs	r4, #2
 800081a:	4463      	add	r3, ip
 800081c:	1a59      	subs	r1, r3, r1
 800081e:	fa1f f38e 	uxth.w	r3, lr
 8000822:	fbb1 f0f7 	udiv	r0, r1, r7
 8000826:	fb07 1110 	mls	r1, r7, r0, r1
 800082a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800082e:	fb00 f606 	mul.w	r6, r0, r6
 8000832:	429e      	cmp	r6, r3
 8000834:	d90a      	bls.n	800084c <__udivmoddi4+0x94>
 8000836:	eb1c 0303 	adds.w	r3, ip, r3
 800083a:	f100 31ff 	add.w	r1, r0, #4294967295
 800083e:	f080 80fc 	bcs.w	8000a3a <__udivmoddi4+0x282>
 8000842:	429e      	cmp	r6, r3
 8000844:	f240 80f9 	bls.w	8000a3a <__udivmoddi4+0x282>
 8000848:	4463      	add	r3, ip
 800084a:	3802      	subs	r0, #2
 800084c:	1b9b      	subs	r3, r3, r6
 800084e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000852:	2100      	movs	r1, #0
 8000854:	b11d      	cbz	r5, 800085e <__udivmoddi4+0xa6>
 8000856:	40d3      	lsrs	r3, r2
 8000858:	2200      	movs	r2, #0
 800085a:	e9c5 3200 	strd	r3, r2, [r5]
 800085e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000862:	428b      	cmp	r3, r1
 8000864:	d905      	bls.n	8000872 <__udivmoddi4+0xba>
 8000866:	b10d      	cbz	r5, 800086c <__udivmoddi4+0xb4>
 8000868:	e9c5 0100 	strd	r0, r1, [r5]
 800086c:	2100      	movs	r1, #0
 800086e:	4608      	mov	r0, r1
 8000870:	e7f5      	b.n	800085e <__udivmoddi4+0xa6>
 8000872:	fab3 f183 	clz	r1, r3
 8000876:	2900      	cmp	r1, #0
 8000878:	d146      	bne.n	8000908 <__udivmoddi4+0x150>
 800087a:	42a3      	cmp	r3, r4
 800087c:	d302      	bcc.n	8000884 <__udivmoddi4+0xcc>
 800087e:	4290      	cmp	r0, r2
 8000880:	f0c0 80f0 	bcc.w	8000a64 <__udivmoddi4+0x2ac>
 8000884:	1a86      	subs	r6, r0, r2
 8000886:	eb64 0303 	sbc.w	r3, r4, r3
 800088a:	2001      	movs	r0, #1
 800088c:	2d00      	cmp	r5, #0
 800088e:	d0e6      	beq.n	800085e <__udivmoddi4+0xa6>
 8000890:	e9c5 6300 	strd	r6, r3, [r5]
 8000894:	e7e3      	b.n	800085e <__udivmoddi4+0xa6>
 8000896:	2a00      	cmp	r2, #0
 8000898:	f040 8090 	bne.w	80009bc <__udivmoddi4+0x204>
 800089c:	eba1 040c 	sub.w	r4, r1, ip
 80008a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008a4:	fa1f f78c 	uxth.w	r7, ip
 80008a8:	2101      	movs	r1, #1
 80008aa:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008b2:	fb08 4416 	mls	r4, r8, r6, r4
 80008b6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008ba:	fb07 f006 	mul.w	r0, r7, r6
 80008be:	4298      	cmp	r0, r3
 80008c0:	d908      	bls.n	80008d4 <__udivmoddi4+0x11c>
 80008c2:	eb1c 0303 	adds.w	r3, ip, r3
 80008c6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ca:	d202      	bcs.n	80008d2 <__udivmoddi4+0x11a>
 80008cc:	4298      	cmp	r0, r3
 80008ce:	f200 80cd 	bhi.w	8000a6c <__udivmoddi4+0x2b4>
 80008d2:	4626      	mov	r6, r4
 80008d4:	1a1c      	subs	r4, r3, r0
 80008d6:	fa1f f38e 	uxth.w	r3, lr
 80008da:	fbb4 f0f8 	udiv	r0, r4, r8
 80008de:	fb08 4410 	mls	r4, r8, r0, r4
 80008e2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008e6:	fb00 f707 	mul.w	r7, r0, r7
 80008ea:	429f      	cmp	r7, r3
 80008ec:	d908      	bls.n	8000900 <__udivmoddi4+0x148>
 80008ee:	eb1c 0303 	adds.w	r3, ip, r3
 80008f2:	f100 34ff 	add.w	r4, r0, #4294967295
 80008f6:	d202      	bcs.n	80008fe <__udivmoddi4+0x146>
 80008f8:	429f      	cmp	r7, r3
 80008fa:	f200 80b0 	bhi.w	8000a5e <__udivmoddi4+0x2a6>
 80008fe:	4620      	mov	r0, r4
 8000900:	1bdb      	subs	r3, r3, r7
 8000902:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000906:	e7a5      	b.n	8000854 <__udivmoddi4+0x9c>
 8000908:	f1c1 0620 	rsb	r6, r1, #32
 800090c:	408b      	lsls	r3, r1
 800090e:	fa22 f706 	lsr.w	r7, r2, r6
 8000912:	431f      	orrs	r7, r3
 8000914:	fa20 fc06 	lsr.w	ip, r0, r6
 8000918:	fa04 f301 	lsl.w	r3, r4, r1
 800091c:	ea43 030c 	orr.w	r3, r3, ip
 8000920:	40f4      	lsrs	r4, r6
 8000922:	fa00 f801 	lsl.w	r8, r0, r1
 8000926:	0c38      	lsrs	r0, r7, #16
 8000928:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800092c:	fbb4 fef0 	udiv	lr, r4, r0
 8000930:	fa1f fc87 	uxth.w	ip, r7
 8000934:	fb00 441e 	mls	r4, r0, lr, r4
 8000938:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800093c:	fb0e f90c 	mul.w	r9, lr, ip
 8000940:	45a1      	cmp	r9, r4
 8000942:	fa02 f201 	lsl.w	r2, r2, r1
 8000946:	d90a      	bls.n	800095e <__udivmoddi4+0x1a6>
 8000948:	193c      	adds	r4, r7, r4
 800094a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800094e:	f080 8084 	bcs.w	8000a5a <__udivmoddi4+0x2a2>
 8000952:	45a1      	cmp	r9, r4
 8000954:	f240 8081 	bls.w	8000a5a <__udivmoddi4+0x2a2>
 8000958:	f1ae 0e02 	sub.w	lr, lr, #2
 800095c:	443c      	add	r4, r7
 800095e:	eba4 0409 	sub.w	r4, r4, r9
 8000962:	fa1f f983 	uxth.w	r9, r3
 8000966:	fbb4 f3f0 	udiv	r3, r4, r0
 800096a:	fb00 4413 	mls	r4, r0, r3, r4
 800096e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000972:	fb03 fc0c 	mul.w	ip, r3, ip
 8000976:	45a4      	cmp	ip, r4
 8000978:	d907      	bls.n	800098a <__udivmoddi4+0x1d2>
 800097a:	193c      	adds	r4, r7, r4
 800097c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000980:	d267      	bcs.n	8000a52 <__udivmoddi4+0x29a>
 8000982:	45a4      	cmp	ip, r4
 8000984:	d965      	bls.n	8000a52 <__udivmoddi4+0x29a>
 8000986:	3b02      	subs	r3, #2
 8000988:	443c      	add	r4, r7
 800098a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800098e:	fba0 9302 	umull	r9, r3, r0, r2
 8000992:	eba4 040c 	sub.w	r4, r4, ip
 8000996:	429c      	cmp	r4, r3
 8000998:	46ce      	mov	lr, r9
 800099a:	469c      	mov	ip, r3
 800099c:	d351      	bcc.n	8000a42 <__udivmoddi4+0x28a>
 800099e:	d04e      	beq.n	8000a3e <__udivmoddi4+0x286>
 80009a0:	b155      	cbz	r5, 80009b8 <__udivmoddi4+0x200>
 80009a2:	ebb8 030e 	subs.w	r3, r8, lr
 80009a6:	eb64 040c 	sbc.w	r4, r4, ip
 80009aa:	fa04 f606 	lsl.w	r6, r4, r6
 80009ae:	40cb      	lsrs	r3, r1
 80009b0:	431e      	orrs	r6, r3
 80009b2:	40cc      	lsrs	r4, r1
 80009b4:	e9c5 6400 	strd	r6, r4, [r5]
 80009b8:	2100      	movs	r1, #0
 80009ba:	e750      	b.n	800085e <__udivmoddi4+0xa6>
 80009bc:	f1c2 0320 	rsb	r3, r2, #32
 80009c0:	fa20 f103 	lsr.w	r1, r0, r3
 80009c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009c8:	fa24 f303 	lsr.w	r3, r4, r3
 80009cc:	4094      	lsls	r4, r2
 80009ce:	430c      	orrs	r4, r1
 80009d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009d4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009d8:	fa1f f78c 	uxth.w	r7, ip
 80009dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009e0:	fb08 3110 	mls	r1, r8, r0, r3
 80009e4:	0c23      	lsrs	r3, r4, #16
 80009e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009ea:	fb00 f107 	mul.w	r1, r0, r7
 80009ee:	4299      	cmp	r1, r3
 80009f0:	d908      	bls.n	8000a04 <__udivmoddi4+0x24c>
 80009f2:	eb1c 0303 	adds.w	r3, ip, r3
 80009f6:	f100 36ff 	add.w	r6, r0, #4294967295
 80009fa:	d22c      	bcs.n	8000a56 <__udivmoddi4+0x29e>
 80009fc:	4299      	cmp	r1, r3
 80009fe:	d92a      	bls.n	8000a56 <__udivmoddi4+0x29e>
 8000a00:	3802      	subs	r0, #2
 8000a02:	4463      	add	r3, ip
 8000a04:	1a5b      	subs	r3, r3, r1
 8000a06:	b2a4      	uxth	r4, r4
 8000a08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a14:	fb01 f307 	mul.w	r3, r1, r7
 8000a18:	42a3      	cmp	r3, r4
 8000a1a:	d908      	bls.n	8000a2e <__udivmoddi4+0x276>
 8000a1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a24:	d213      	bcs.n	8000a4e <__udivmoddi4+0x296>
 8000a26:	42a3      	cmp	r3, r4
 8000a28:	d911      	bls.n	8000a4e <__udivmoddi4+0x296>
 8000a2a:	3902      	subs	r1, #2
 8000a2c:	4464      	add	r4, ip
 8000a2e:	1ae4      	subs	r4, r4, r3
 8000a30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a34:	e739      	b.n	80008aa <__udivmoddi4+0xf2>
 8000a36:	4604      	mov	r4, r0
 8000a38:	e6f0      	b.n	800081c <__udivmoddi4+0x64>
 8000a3a:	4608      	mov	r0, r1
 8000a3c:	e706      	b.n	800084c <__udivmoddi4+0x94>
 8000a3e:	45c8      	cmp	r8, r9
 8000a40:	d2ae      	bcs.n	80009a0 <__udivmoddi4+0x1e8>
 8000a42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a4a:	3801      	subs	r0, #1
 8000a4c:	e7a8      	b.n	80009a0 <__udivmoddi4+0x1e8>
 8000a4e:	4631      	mov	r1, r6
 8000a50:	e7ed      	b.n	8000a2e <__udivmoddi4+0x276>
 8000a52:	4603      	mov	r3, r0
 8000a54:	e799      	b.n	800098a <__udivmoddi4+0x1d2>
 8000a56:	4630      	mov	r0, r6
 8000a58:	e7d4      	b.n	8000a04 <__udivmoddi4+0x24c>
 8000a5a:	46d6      	mov	lr, sl
 8000a5c:	e77f      	b.n	800095e <__udivmoddi4+0x1a6>
 8000a5e:	4463      	add	r3, ip
 8000a60:	3802      	subs	r0, #2
 8000a62:	e74d      	b.n	8000900 <__udivmoddi4+0x148>
 8000a64:	4606      	mov	r6, r0
 8000a66:	4623      	mov	r3, r4
 8000a68:	4608      	mov	r0, r1
 8000a6a:	e70f      	b.n	800088c <__udivmoddi4+0xd4>
 8000a6c:	3e02      	subs	r6, #2
 8000a6e:	4463      	add	r3, ip
 8000a70:	e730      	b.n	80008d4 <__udivmoddi4+0x11c>
 8000a72:	bf00      	nop

08000a74 <__aeabi_idiv0>:
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <PreSleepProcessing>:

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8000a80:	bf00      	nop
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8000a94:	bf00      	nop
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr

08000aa0 <_Z16MX_FREERTOS_Initv>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000aa4:	4a04      	ldr	r2, [pc, #16]	@ (8000ab8 <_Z16MX_FREERTOS_Initv+0x18>)
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	4804      	ldr	r0, [pc, #16]	@ (8000abc <_Z16MX_FREERTOS_Initv+0x1c>)
 8000aaa:	f005 ffa5 	bl	80069f8 <osThreadNew>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	4a03      	ldr	r2, [pc, #12]	@ (8000ac0 <_Z16MX_FREERTOS_Initv+0x20>)
 8000ab2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	0800e584 	.word	0x0800e584
 8000abc:	08000ac5 	.word	0x08000ac5
 8000ac0:	240001f8 	.word	0x240001f8

08000ac4 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000acc:	2001      	movs	r0, #1
 8000ace:	f006 f825 	bl	8006b1c <osDelay>
 8000ad2:	e7fb      	b.n	8000acc <_Z16StartDefaultTaskPv+0x8>

08000ad4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b088      	sub	sp, #32
 8000ad8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ada:	f107 030c 	add.w	r3, r7, #12
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
 8000ae8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aea:	4b1b      	ldr	r3, [pc, #108]	@ (8000b58 <MX_GPIO_Init+0x84>)
 8000aec:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000af0:	4a19      	ldr	r2, [pc, #100]	@ (8000b58 <MX_GPIO_Init+0x84>)
 8000af2:	f043 0302 	orr.w	r3, r3, #2
 8000af6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000afa:	4b17      	ldr	r3, [pc, #92]	@ (8000b58 <MX_GPIO_Init+0x84>)
 8000afc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b00:	f003 0302 	and.w	r3, r3, #2
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b08:	4b13      	ldr	r3, [pc, #76]	@ (8000b58 <MX_GPIO_Init+0x84>)
 8000b0a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b0e:	4a12      	ldr	r2, [pc, #72]	@ (8000b58 <MX_GPIO_Init+0x84>)
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000b18:	4b0f      	ldr	r3, [pc, #60]	@ (8000b58 <MX_GPIO_Init+0x84>)
 8000b1a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = esp32i2cInterruptReqest_Pin;
 8000b26:	2320      	movs	r3, #32
 8000b28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b2a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(esp32i2cInterruptReqest_GPIO_Port, &GPIO_InitStruct);
 8000b34:	f107 030c 	add.w	r3, r7, #12
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4808      	ldr	r0, [pc, #32]	@ (8000b5c <MX_GPIO_Init+0x88>)
 8000b3c:	f000 fe30 	bl	80017a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000b40:	2200      	movs	r2, #0
 8000b42:	2105      	movs	r1, #5
 8000b44:	2017      	movs	r0, #23
 8000b46:	f000 fe03 	bl	8001750 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b4a:	2017      	movs	r0, #23
 8000b4c:	f000 fe1a 	bl	8001784 <HAL_NVIC_EnableIRQ>

}
 8000b50:	bf00      	nop
 8000b52:	3720      	adds	r7, #32
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	58024400 	.word	0x58024400
 8000b5c:	58020400 	.word	0x58020400

08000b60 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b64:	4b1b      	ldr	r3, [pc, #108]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b66:	4a1c      	ldr	r2, [pc, #112]	@ (8000bd8 <MX_I2C1_Init+0x78>)
 8000b68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B0CCFF;
 8000b6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b6c:	4a1b      	ldr	r2, [pc, #108]	@ (8000bdc <MX_I2C1_Init+0x7c>)
 8000b6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b70:	4b18      	ldr	r3, [pc, #96]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b76:	4b17      	ldr	r3, [pc, #92]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b7c:	4b15      	ldr	r3, [pc, #84]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b82:	4b14      	ldr	r3, [pc, #80]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b88:	4b12      	ldr	r3, [pc, #72]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b8e:	4b11      	ldr	r3, [pc, #68]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8000b94:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b96:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000b9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b9c:	480d      	ldr	r0, [pc, #52]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b9e:	f000 ffc9 	bl	8001b34 <HAL_I2C_Init>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ba8:	f000 f930 	bl	8000e0c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bac:	2100      	movs	r1, #0
 8000bae:	4809      	ldr	r0, [pc, #36]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000bb0:	f001 faa6 	bl	8002100 <HAL_I2CEx_ConfigAnalogFilter>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000bba:	f000 f927 	bl	8000e0c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4804      	ldr	r0, [pc, #16]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000bc2:	f001 fae8 	bl	8002196 <HAL_I2CEx_ConfigDigitalFilter>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000bcc:	f000 f91e 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	240001fc 	.word	0x240001fc
 8000bd8:	40005400 	.word	0x40005400
 8000bdc:	20b0ccff 	.word	0x20b0ccff

08000be0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b0ba      	sub	sp, #232	@ 0xe8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bf8:	f107 0310 	add.w	r3, r7, #16
 8000bfc:	22c0      	movs	r2, #192	@ 0xc0
 8000bfe:	2100      	movs	r1, #0
 8000c00:	4618      	mov	r0, r3
 8000c02:	f00a fa81 	bl	800b108 <memset>
  if(i2cHandle->Instance==I2C1)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a27      	ldr	r2, [pc, #156]	@ (8000ca8 <HAL_I2C_MspInit+0xc8>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d146      	bne.n	8000c9e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c10:	f04f 0208 	mov.w	r2, #8
 8000c14:	f04f 0300 	mov.w	r3, #0
 8000c18:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c22:	f107 0310 	add.w	r3, r7, #16
 8000c26:	4618      	mov	r0, r3
 8000c28:	f002 fb3c 	bl	80032a4 <HAL_RCCEx_PeriphCLKConfig>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000c32:	f000 f8eb 	bl	8000e0c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c36:	4b1d      	ldr	r3, [pc, #116]	@ (8000cac <HAL_I2C_MspInit+0xcc>)
 8000c38:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c3c:	4a1b      	ldr	r2, [pc, #108]	@ (8000cac <HAL_I2C_MspInit+0xcc>)
 8000c3e:	f043 0302 	orr.w	r3, r3, #2
 8000c42:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c46:	4b19      	ldr	r3, [pc, #100]	@ (8000cac <HAL_I2C_MspInit+0xcc>)
 8000c48:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c4c:	f003 0302 	and.w	r3, r3, #2
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c54:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c58:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c5c:	2312      	movs	r3, #18
 8000c5e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c6e:	2304      	movs	r3, #4
 8000c70:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c74:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000c78:	4619      	mov	r1, r3
 8000c7a:	480d      	ldr	r0, [pc, #52]	@ (8000cb0 <HAL_I2C_MspInit+0xd0>)
 8000c7c:	f000 fd90 	bl	80017a0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c80:	4b0a      	ldr	r3, [pc, #40]	@ (8000cac <HAL_I2C_MspInit+0xcc>)
 8000c82:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000c86:	4a09      	ldr	r2, [pc, #36]	@ (8000cac <HAL_I2C_MspInit+0xcc>)
 8000c88:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c8c:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000c90:	4b06      	ldr	r3, [pc, #24]	@ (8000cac <HAL_I2C_MspInit+0xcc>)
 8000c92:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000c96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c9e:	bf00      	nop
 8000ca0:	37e8      	adds	r7, #232	@ 0xe8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40005400 	.word	0x40005400
 8000cac:	58024400 	.word	0x58024400
 8000cb0:	58020400 	.word	0x58020400

08000cb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cb8:	f000 fc36 	bl	8001528 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cbc:	f000 f810 	bl	8000ce0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cc0:	f7ff ff08 	bl	8000ad4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000cc4:	f000 fb50 	bl	8001368 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000cc8:	f7ff ff4a 	bl	8000b60 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  initTaskFunctions();
 8000ccc:	f000 fabc 	bl	8001248 <_Z17initTaskFunctionsv>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000cd0:	f005 fe48 	bl	8006964 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000cd4:	f7ff fee4 	bl	8000aa0 <_Z16MX_FREERTOS_Initv>

  /* Start scheduler */
  osKernelStart();
 8000cd8:	f005 fe68 	bl	80069ac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cdc:	bf00      	nop
 8000cde:	e7fd      	b.n	8000cdc <main+0x28>

08000ce0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b09c      	sub	sp, #112	@ 0x70
 8000ce4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ce6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cea:	224c      	movs	r2, #76	@ 0x4c
 8000cec:	2100      	movs	r1, #0
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f00a fa0a 	bl	800b108 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	2220      	movs	r2, #32
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f00a fa04 	bl	800b108 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000d00:	4b37      	ldr	r3, [pc, #220]	@ (8000de0 <_Z18SystemClock_Configv+0x100>)
 8000d02:	f04f 32ff 	mov.w	r2, #4294967295
 8000d06:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d0a:	2002      	movs	r0, #2
 8000d0c:	f001 fa90 	bl	8002230 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000d10:	2300      	movs	r3, #0
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	4b33      	ldr	r3, [pc, #204]	@ (8000de4 <_Z18SystemClock_Configv+0x104>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	4a32      	ldr	r2, [pc, #200]	@ (8000de4 <_Z18SystemClock_Configv+0x104>)
 8000d1a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d1e:	6193      	str	r3, [r2, #24]
 8000d20:	4b30      	ldr	r3, [pc, #192]	@ (8000de4 <_Z18SystemClock_Configv+0x104>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d28:	603b      	str	r3, [r7, #0]
 8000d2a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d2c:	bf00      	nop
 8000d2e:	4b2d      	ldr	r3, [pc, #180]	@ (8000de4 <_Z18SystemClock_Configv+0x104>)
 8000d30:	699b      	ldr	r3, [r3, #24]
 8000d32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d3a:	bf14      	ite	ne
 8000d3c:	2301      	movne	r3, #1
 8000d3e:	2300      	moveq	r3, #0
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d1f3      	bne.n	8000d2e <_Z18SystemClock_Configv+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d46:	2302      	movs	r3, #2
 8000d48:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000d4e:	2340      	movs	r3, #64	@ 0x40
 8000d50:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d52:	2302      	movs	r3, #2
 8000d54:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d56:	2300      	movs	r3, #0
 8000d58:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d5a:	2304      	movs	r3, #4
 8000d5c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8000d5e:	2323      	movs	r3, #35	@ 0x23
 8000d60:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d62:	2302      	movs	r3, #2
 8000d64:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d66:	2302      	movs	r3, #2
 8000d68:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d6e:	230c      	movs	r3, #12
 8000d70:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d72:	2300      	movs	r3, #0
 8000d74:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f001 fa90 	bl	80022a4 <HAL_RCC_OscConfig>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	bf14      	ite	ne
 8000d8a:	2301      	movne	r3, #1
 8000d8c:	2300      	moveq	r3, #0
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <_Z18SystemClock_Configv+0xb8>
  {
    Error_Handler();
 8000d94:	f000 f83a 	bl	8000e0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d98:	233f      	movs	r3, #63	@ 0x3f
 8000d9a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000da0:	2300      	movs	r3, #0
 8000da2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000da4:	2300      	movs	r3, #0
 8000da6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000da8:	2340      	movs	r3, #64	@ 0x40
 8000daa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000dac:	2340      	movs	r3, #64	@ 0x40
 8000dae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000db0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000db4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000db6:	2340      	movs	r3, #64	@ 0x40
 8000db8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	2106      	movs	r1, #6
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f001 fea2 	bl	8002b08 <HAL_RCC_ClockConfig>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	bf14      	ite	ne
 8000dca:	2301      	movne	r3, #1
 8000dcc:	2300      	moveq	r3, #0
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <_Z18SystemClock_Configv+0xf8>
  {
    Error_Handler();
 8000dd4:	f000 f81a 	bl	8000e0c <Error_Handler>
  }
}
 8000dd8:	bf00      	nop
 8000dda:	3770      	adds	r7, #112	@ 0x70
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	58024400 	.word	0x58024400
 8000de4:	58024800 	.word	0x58024800

08000de8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a04      	ldr	r2, [pc, #16]	@ (8000e08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d101      	bne.n	8000dfe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000dfa:	f000 fbd1 	bl	80015a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40010000 	.word	0x40010000

08000e0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e10:	b672      	cpsid	i
}
 8000e12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <Error_Handler+0x8>

08000e18 <__io_putchar>:

#include <printfRedirect.h>


//printf to uart redirection
void __io_putchar(uint8_t ch) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, &ch, 1, 0xffff);
 8000e22:	1df9      	adds	r1, r7, #7
 8000e24:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e28:	2201      	movs	r2, #1
 8000e2a:	4803      	ldr	r0, [pc, #12]	@ (8000e38 <__io_putchar+0x20>)
 8000e2c:	f004 fb38 	bl	80054a0 <HAL_UART_Transmit>
}
 8000e30:	bf00      	nop
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	240002a8 	.word	0x240002a8

08000e3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e42:	4b0c      	ldr	r3, [pc, #48]	@ (8000e74 <HAL_MspInit+0x38>)
 8000e44:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000e48:	4a0a      	ldr	r2, [pc, #40]	@ (8000e74 <HAL_MspInit+0x38>)
 8000e4a:	f043 0302 	orr.w	r3, r3, #2
 8000e4e:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000e52:	4b08      	ldr	r3, [pc, #32]	@ (8000e74 <HAL_MspInit+0x38>)
 8000e54:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000e58:	f003 0302 	and.w	r3, r3, #2
 8000e5c:	607b      	str	r3, [r7, #4]
 8000e5e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e60:	2200      	movs	r2, #0
 8000e62:	210f      	movs	r1, #15
 8000e64:	f06f 0001 	mvn.w	r0, #1
 8000e68:	f000 fc72 	bl	8001750 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e6c:	bf00      	nop
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	58024400 	.word	0x58024400

08000e78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08e      	sub	sp, #56	@ 0x38
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2b0f      	cmp	r3, #15
 8000e84:	d844      	bhi.n	8000f10 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8000e86:	2200      	movs	r2, #0
 8000e88:	6879      	ldr	r1, [r7, #4]
 8000e8a:	2019      	movs	r0, #25
 8000e8c:	f000 fc60 	bl	8001750 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000e90:	2019      	movs	r0, #25
 8000e92:	f000 fc77 	bl	8001784 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000e96:	4a24      	ldr	r2, [pc, #144]	@ (8000f28 <HAL_InitTick+0xb0>)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e9c:	4b23      	ldr	r3, [pc, #140]	@ (8000f2c <HAL_InitTick+0xb4>)
 8000e9e:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000ea2:	4a22      	ldr	r2, [pc, #136]	@ (8000f2c <HAL_InitTick+0xb4>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8000eac:	4b1f      	ldr	r3, [pc, #124]	@ (8000f2c <HAL_InitTick+0xb4>)
 8000eae:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	60bb      	str	r3, [r7, #8]
 8000eb8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000eba:	f107 020c 	add.w	r2, r7, #12
 8000ebe:	f107 0310 	add.w	r3, r7, #16
 8000ec2:	4611      	mov	r1, r2
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f002 f9ab 	bl	8003220 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000eca:	f002 f993 	bl	80031f4 <HAL_RCC_GetPCLK2Freq>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ed4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ed6:	4a16      	ldr	r2, [pc, #88]	@ (8000f30 <HAL_InitTick+0xb8>)
 8000ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8000edc:	0c9b      	lsrs	r3, r3, #18
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ee2:	4b14      	ldr	r3, [pc, #80]	@ (8000f34 <HAL_InitTick+0xbc>)
 8000ee4:	4a14      	ldr	r2, [pc, #80]	@ (8000f38 <HAL_InitTick+0xc0>)
 8000ee6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000ee8:	4b12      	ldr	r3, [pc, #72]	@ (8000f34 <HAL_InitTick+0xbc>)
 8000eea:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000eee:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ef0:	4a10      	ldr	r2, [pc, #64]	@ (8000f34 <HAL_InitTick+0xbc>)
 8000ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ef4:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ef6:	4b0f      	ldr	r3, [pc, #60]	@ (8000f34 <HAL_InitTick+0xbc>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000efc:	4b0d      	ldr	r3, [pc, #52]	@ (8000f34 <HAL_InitTick+0xbc>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000f02:	480c      	ldr	r0, [pc, #48]	@ (8000f34 <HAL_InitTick+0xbc>)
 8000f04:	f003 ffae 	bl	8004e64 <HAL_TIM_Base_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d107      	bne.n	8000f1e <HAL_InitTick+0xa6>
 8000f0e:	e001      	b.n	8000f14 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8000f10:	2301      	movs	r3, #1
 8000f12:	e005      	b.n	8000f20 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000f14:	4807      	ldr	r0, [pc, #28]	@ (8000f34 <HAL_InitTick+0xbc>)
 8000f16:	f004 f807 	bl	8004f28 <HAL_TIM_Base_Start_IT>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	e000      	b.n	8000f20 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3738      	adds	r7, #56	@ 0x38
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	24000008 	.word	0x24000008
 8000f2c:	58024400 	.word	0x58024400
 8000f30:	431bde83 	.word	0x431bde83
 8000f34:	24000250 	.word	0x24000250
 8000f38:	40010000 	.word	0x40010000

08000f3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f40:	bf00      	nop
 8000f42:	e7fd      	b.n	8000f40 <NMI_Handler+0x4>

08000f44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f48:	bf00      	nop
 8000f4a:	e7fd      	b.n	8000f48 <HardFault_Handler+0x4>

08000f4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f50:	bf00      	nop
 8000f52:	e7fd      	b.n	8000f50 <MemManage_Handler+0x4>

08000f54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <BusFault_Handler+0x4>

08000f5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <UsageFault_Handler+0x4>

08000f64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(esp32i2cInterruptReqest_Pin);
 8000f76:	2020      	movs	r0, #32
 8000f78:	f000 fdc2 	bl	8001b00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f84:	4802      	ldr	r0, [pc, #8]	@ (8000f90 <TIM1_UP_IRQHandler+0x10>)
 8000f86:	f004 f847 	bl	8005018 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	24000250 	.word	0x24000250

08000f94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return 1;
 8000f98:	2301      	movs	r3, #1
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <_kill>:

int _kill(int pid, int sig)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000fae:	f00a f9a7 	bl	800b300 <__errno>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2216      	movs	r2, #22
 8000fb6:	601a      	str	r2, [r3, #0]
  return -1;
 8000fb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <_exit>:

void _exit (int status)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f7ff ffe7 	bl	8000fa4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000fd6:	bf00      	nop
 8000fd8:	e7fd      	b.n	8000fd6 <_exit+0x12>

08000fda <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b086      	sub	sp, #24
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	60f8      	str	r0, [r7, #12]
 8000fe2:	60b9      	str	r1, [r7, #8]
 8000fe4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
 8000fea:	e00a      	b.n	8001002 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fec:	f3af 8000 	nop.w
 8000ff0:	4601      	mov	r1, r0
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	1c5a      	adds	r2, r3, #1
 8000ff6:	60ba      	str	r2, [r7, #8]
 8000ff8:	b2ca      	uxtb	r2, r1
 8000ffa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	3301      	adds	r3, #1
 8001000:	617b      	str	r3, [r7, #20]
 8001002:	697a      	ldr	r2, [r7, #20]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	429a      	cmp	r2, r3
 8001008:	dbf0      	blt.n	8000fec <_read+0x12>
  }

  return len;
 800100a:	687b      	ldr	r3, [r7, #4]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3718      	adds	r7, #24
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]
 8001024:	e009      	b.n	800103a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	1c5a      	adds	r2, r3, #1
 800102a:	60ba      	str	r2, [r7, #8]
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff fef2 	bl	8000e18 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	3301      	adds	r3, #1
 8001038:	617b      	str	r3, [r7, #20]
 800103a:	697a      	ldr	r2, [r7, #20]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	429a      	cmp	r2, r3
 8001040:	dbf1      	blt.n	8001026 <_write+0x12>
  }
  return len;
 8001042:	687b      	ldr	r3, [r7, #4]
}
 8001044:	4618      	mov	r0, r3
 8001046:	3718      	adds	r7, #24
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <_close>:

int _close(int file)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001054:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001058:	4618      	mov	r0, r3
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001074:	605a      	str	r2, [r3, #4]
  return 0;
 8001076:	2300      	movs	r3, #0
}
 8001078:	4618      	mov	r0, r3
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <_isatty>:

int _isatty(int file)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800108c:	2301      	movs	r3, #1
}
 800108e:	4618      	mov	r0, r3
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800109a:	b480      	push	{r7}
 800109c:	b085      	sub	sp, #20
 800109e:	af00      	add	r7, sp, #0
 80010a0:	60f8      	str	r0, [r7, #12]
 80010a2:	60b9      	str	r1, [r7, #8]
 80010a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010a6:	2300      	movs	r3, #0
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010bc:	4a14      	ldr	r2, [pc, #80]	@ (8001110 <_sbrk+0x5c>)
 80010be:	4b15      	ldr	r3, [pc, #84]	@ (8001114 <_sbrk+0x60>)
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010c8:	4b13      	ldr	r3, [pc, #76]	@ (8001118 <_sbrk+0x64>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d102      	bne.n	80010d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010d0:	4b11      	ldr	r3, [pc, #68]	@ (8001118 <_sbrk+0x64>)
 80010d2:	4a12      	ldr	r2, [pc, #72]	@ (800111c <_sbrk+0x68>)
 80010d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010d6:	4b10      	ldr	r3, [pc, #64]	@ (8001118 <_sbrk+0x64>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4413      	add	r3, r2
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d207      	bcs.n	80010f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010e4:	f00a f90c 	bl	800b300 <__errno>
 80010e8:	4603      	mov	r3, r0
 80010ea:	220c      	movs	r2, #12
 80010ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ee:	f04f 33ff 	mov.w	r3, #4294967295
 80010f2:	e009      	b.n	8001108 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010f4:	4b08      	ldr	r3, [pc, #32]	@ (8001118 <_sbrk+0x64>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010fa:	4b07      	ldr	r3, [pc, #28]	@ (8001118 <_sbrk+0x64>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4413      	add	r3, r2
 8001102:	4a05      	ldr	r2, [pc, #20]	@ (8001118 <_sbrk+0x64>)
 8001104:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001106:	68fb      	ldr	r3, [r7, #12]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3718      	adds	r7, #24
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	24100000 	.word	0x24100000
 8001114:	00000400 	.word	0x00000400
 8001118:	2400029c 	.word	0x2400029c
 800111c:	24004e80 	.word	0x24004e80

08001120 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001124:	4b32      	ldr	r3, [pc, #200]	@ (80011f0 <SystemInit+0xd0>)
 8001126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800112a:	4a31      	ldr	r2, [pc, #196]	@ (80011f0 <SystemInit+0xd0>)
 800112c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001130:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001134:	4b2f      	ldr	r3, [pc, #188]	@ (80011f4 <SystemInit+0xd4>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 030f 	and.w	r3, r3, #15
 800113c:	2b02      	cmp	r3, #2
 800113e:	d807      	bhi.n	8001150 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001140:	4b2c      	ldr	r3, [pc, #176]	@ (80011f4 <SystemInit+0xd4>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f023 030f 	bic.w	r3, r3, #15
 8001148:	4a2a      	ldr	r2, [pc, #168]	@ (80011f4 <SystemInit+0xd4>)
 800114a:	f043 0303 	orr.w	r3, r3, #3
 800114e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001150:	4b29      	ldr	r3, [pc, #164]	@ (80011f8 <SystemInit+0xd8>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a28      	ldr	r2, [pc, #160]	@ (80011f8 <SystemInit+0xd8>)
 8001156:	f043 0301 	orr.w	r3, r3, #1
 800115a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800115c:	4b26      	ldr	r3, [pc, #152]	@ (80011f8 <SystemInit+0xd8>)
 800115e:	2200      	movs	r2, #0
 8001160:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001162:	4b25      	ldr	r3, [pc, #148]	@ (80011f8 <SystemInit+0xd8>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	4924      	ldr	r1, [pc, #144]	@ (80011f8 <SystemInit+0xd8>)
 8001168:	4b24      	ldr	r3, [pc, #144]	@ (80011fc <SystemInit+0xdc>)
 800116a:	4013      	ands	r3, r2
 800116c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800116e:	4b21      	ldr	r3, [pc, #132]	@ (80011f4 <SystemInit+0xd4>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 030c 	and.w	r3, r3, #12
 8001176:	2b00      	cmp	r3, #0
 8001178:	d007      	beq.n	800118a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800117a:	4b1e      	ldr	r3, [pc, #120]	@ (80011f4 <SystemInit+0xd4>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f023 030f 	bic.w	r3, r3, #15
 8001182:	4a1c      	ldr	r2, [pc, #112]	@ (80011f4 <SystemInit+0xd4>)
 8001184:	f043 0303 	orr.w	r3, r3, #3
 8001188:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800118a:	4b1b      	ldr	r3, [pc, #108]	@ (80011f8 <SystemInit+0xd8>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001190:	4b19      	ldr	r3, [pc, #100]	@ (80011f8 <SystemInit+0xd8>)
 8001192:	2200      	movs	r2, #0
 8001194:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001196:	4b18      	ldr	r3, [pc, #96]	@ (80011f8 <SystemInit+0xd8>)
 8001198:	2200      	movs	r2, #0
 800119a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800119c:	4b16      	ldr	r3, [pc, #88]	@ (80011f8 <SystemInit+0xd8>)
 800119e:	4a18      	ldr	r2, [pc, #96]	@ (8001200 <SystemInit+0xe0>)
 80011a0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80011a2:	4b15      	ldr	r3, [pc, #84]	@ (80011f8 <SystemInit+0xd8>)
 80011a4:	4a17      	ldr	r2, [pc, #92]	@ (8001204 <SystemInit+0xe4>)
 80011a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80011a8:	4b13      	ldr	r3, [pc, #76]	@ (80011f8 <SystemInit+0xd8>)
 80011aa:	4a17      	ldr	r2, [pc, #92]	@ (8001208 <SystemInit+0xe8>)
 80011ac:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80011ae:	4b12      	ldr	r3, [pc, #72]	@ (80011f8 <SystemInit+0xd8>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80011b4:	4b10      	ldr	r3, [pc, #64]	@ (80011f8 <SystemInit+0xd8>)
 80011b6:	4a14      	ldr	r2, [pc, #80]	@ (8001208 <SystemInit+0xe8>)
 80011b8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80011ba:	4b0f      	ldr	r3, [pc, #60]	@ (80011f8 <SystemInit+0xd8>)
 80011bc:	2200      	movs	r2, #0
 80011be:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80011c0:	4b0d      	ldr	r3, [pc, #52]	@ (80011f8 <SystemInit+0xd8>)
 80011c2:	4a11      	ldr	r2, [pc, #68]	@ (8001208 <SystemInit+0xe8>)
 80011c4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80011c6:	4b0c      	ldr	r3, [pc, #48]	@ (80011f8 <SystemInit+0xd8>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011cc:	4b0a      	ldr	r3, [pc, #40]	@ (80011f8 <SystemInit+0xd8>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a09      	ldr	r2, [pc, #36]	@ (80011f8 <SystemInit+0xd8>)
 80011d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011d6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011d8:	4b07      	ldr	r3, [pc, #28]	@ (80011f8 <SystemInit+0xd8>)
 80011da:	2200      	movs	r2, #0
 80011dc:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80011de:	4b0b      	ldr	r3, [pc, #44]	@ (800120c <SystemInit+0xec>)
 80011e0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80011e4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80011e6:	bf00      	nop
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	e000ed00 	.word	0xe000ed00
 80011f4:	52002000 	.word	0x52002000
 80011f8:	58024400 	.word	0x58024400
 80011fc:	eaf6ed7f 	.word	0xeaf6ed7f
 8001200:	02020200 	.word	0x02020200
 8001204:	01ff0000 	.word	0x01ff0000
 8001208:	01010280 	.word	0x01010280
 800120c:	52004000 	.word	0x52004000

08001210 <_Z29esp32IntrrruptRequestCallbackPv>:
static SemaphoreHandle_t esp32IntrrruptRequest_CountingSemaphore;




void esp32IntrrruptRequestCallback(void *pNothing){
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]


	//uint32_t taskNotifierVal;
	while(1){
		if (xSemaphoreTake(esp32IntrrruptRequest_CountingSemaphore, portMAX_DELAY) == pdTRUE){
 8001218:	4b09      	ldr	r3, [pc, #36]	@ (8001240 <_Z29esp32IntrrruptRequestCallbackPv+0x30>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f04f 31ff 	mov.w	r1, #4294967295
 8001220:	4618      	mov	r0, r3
 8001222:	f006 fa0b 	bl	800763c <xQueueSemaphoreTake>
 8001226:	4603      	mov	r3, r0
 8001228:	2b01      	cmp	r3, #1
 800122a:	bf0c      	ite	eq
 800122c:	2301      	moveq	r3, #1
 800122e:	2300      	movne	r3, #0
 8001230:	b2db      	uxtb	r3, r3
 8001232:	2b00      	cmp	r3, #0
 8001234:	d0f0      	beq.n	8001218 <_Z29esp32IntrrruptRequestCallbackPv+0x8>
			printf("High prior task \r\n");
 8001236:	4803      	ldr	r0, [pc, #12]	@ (8001244 <_Z29esp32IntrrruptRequestCallbackPv+0x34>)
 8001238:	f009 fe66 	bl	800af08 <puts>
		if (xSemaphoreTake(esp32IntrrruptRequest_CountingSemaphore, portMAX_DELAY) == pdTRUE){
 800123c:	e7ec      	b.n	8001218 <_Z29esp32IntrrruptRequestCallbackPv+0x8>
 800123e:	bf00      	nop
 8001240:	240002a4 	.word	0x240002a4
 8001244:	0800e50c 	.word	0x0800e50c

08001248 <_Z17initTaskFunctionsv>:

void initTaskFunctionsAdnISR(void){

}

void initTaskFunctions(void){
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af02      	add	r7, sp, #8
	printf("Radio main firmware version: %.2f\r\n", FW_VERSION);
 800124e:	a333      	add	r3, pc, #204	@ (adr r3, 800131c <_Z17initTaskFunctionsv+0xd4>)
 8001250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001254:	482a      	ldr	r0, [pc, #168]	@ (8001300 <_Z17initTaskFunctionsv+0xb8>)
 8001256:	f009 fdef 	bl	800ae38 <iprintf>

	configASSERT(esp32IntrrruptRequest_CountingSemaphore = xSemaphoreCreateCounting(100, 0));
 800125a:	2100      	movs	r1, #0
 800125c:	2064      	movs	r0, #100	@ 0x64
 800125e:	f005 fea6 	bl	8006fae <xQueueCreateCountingSemaphore>
 8001262:	4603      	mov	r3, r0
 8001264:	4a27      	ldr	r2, [pc, #156]	@ (8001304 <_Z17initTaskFunctionsv+0xbc>)
 8001266:	6013      	str	r3, [r2, #0]
 8001268:	4b26      	ldr	r3, [pc, #152]	@ (8001304 <_Z17initTaskFunctionsv+0xbc>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	bf0c      	ite	eq
 8001270:	2301      	moveq	r3, #1
 8001272:	2300      	movne	r3, #0
 8001274:	b2db      	uxtb	r3, r3
 8001276:	2b00      	cmp	r3, #0
 8001278:	d00b      	beq.n	8001292 <_Z17initTaskFunctionsv+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800127a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800127e:	f383 8811 	msr	BASEPRI, r3
 8001282:	f3bf 8f6f 	isb	sy
 8001286:	f3bf 8f4f 	dsb	sy
 800128a:	607b      	str	r3, [r7, #4]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800128c:	bf00      	nop
 800128e:	bf00      	nop
 8001290:	e7fd      	b.n	800128e <_Z17initTaskFunctionsv+0x46>

	//tworzy task callback na przerwanie od ESP32 informującę, że ESP32 ma jakieś dane do wysłania
	configASSERT(xTaskCreate(esp32IntrrruptRequestCallback, "esp32IntReq", 3*128, NULL, tskIDLE_PRIORITY+1, &taskHandle_esp32IntrrruptRequest));
 8001292:	4b1d      	ldr	r3, [pc, #116]	@ (8001308 <_Z17initTaskFunctionsv+0xc0>)
 8001294:	9301      	str	r3, [sp, #4]
 8001296:	2301      	movs	r3, #1
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	2300      	movs	r3, #0
 800129c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80012a0:	491a      	ldr	r1, [pc, #104]	@ (800130c <_Z17initTaskFunctionsv+0xc4>)
 80012a2:	481b      	ldr	r0, [pc, #108]	@ (8001310 <_Z17initTaskFunctionsv+0xc8>)
 80012a4:	f006 fcc0 	bl	8007c28 <xTaskCreate>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	bf0c      	ite	eq
 80012ae:	2301      	moveq	r3, #1
 80012b0:	2300      	movne	r3, #0
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d00b      	beq.n	80012d0 <_Z17initTaskFunctionsv+0x88>
	__asm volatile
 80012b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80012bc:	f383 8811 	msr	BASEPRI, r3
 80012c0:	f3bf 8f6f 	isb	sy
 80012c4:	f3bf 8f4f 	dsb	sy
 80012c8:	603b      	str	r3, [r7, #0]
}
 80012ca:	bf00      	nop
 80012cc:	bf00      	nop
 80012ce:	e7fd      	b.n	80012cc <_Z17initTaskFunctionsv+0x84>

	if(HAL_I2C_IsDeviceReady(&hi2c1, I2C_SLAVE_ADDRESS<<1, 100, 5000)==HAL_OK){
 80012d0:	f241 3388 	movw	r3, #5000	@ 0x1388
 80012d4:	2264      	movs	r2, #100	@ 0x64
 80012d6:	2178      	movs	r1, #120	@ 0x78
 80012d8:	480e      	ldr	r0, [pc, #56]	@ (8001314 <_Z17initTaskFunctionsv+0xcc>)
 80012da:	f000 fcc7 	bl	8001c6c <HAL_I2C_IsDeviceReady>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	bf0c      	ite	eq
 80012e4:	2301      	moveq	r3, #1
 80012e6:	2300      	movne	r3, #0
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d002      	beq.n	80012f4 <_Z17initTaskFunctionsv+0xac>
		printf("ESP32 i2c slave avaliable\r\n");
 80012ee:	480a      	ldr	r0, [pc, #40]	@ (8001318 <_Z17initTaskFunctionsv+0xd0>)
 80012f0:	f009 fe0a 	bl	800af08 <puts>
	}


}
 80012f4:	bf00      	nop
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	f3af 8000 	nop.w
 8001300:	0800e520 	.word	0x0800e520
 8001304:	240002a4 	.word	0x240002a4
 8001308:	240002a0 	.word	0x240002a0
 800130c:	0800e544 	.word	0x0800e544
 8001310:	08001211 	.word	0x08001211
 8001314:	240001fc 	.word	0x240001fc
 8001318:	0800e550 	.word	0x0800e550
 800131c:	9999999a 	.word	0x9999999a
 8001320:	3fb99999 	.word	0x3fb99999

08001324 <HAL_GPIO_EXTI_Callback>:


//#define I2C_SLAVE_TRANSMIT_REQUEST_STARTED		GPIO_PIN_RESET
//#define I2C_SLAVE_TRANSMIT_REQUEST_STOPPED		GPIO_PIN_SET
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	80fb      	strh	r3, [r7, #6]
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
		xSemaphoreGiveFromISR(esp32IntrrruptRequest_CountingSemaphore, &xHigherPriorityTaskWoken);
 8001332:	4b0b      	ldr	r3, [pc, #44]	@ (8001360 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f107 020c 	add.w	r2, r7, #12
 800133a:	4611      	mov	r1, r2
 800133c:	4618      	mov	r0, r3
 800133e:	f006 f80b 	bl	8007358 <xQueueGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d007      	beq.n	8001358 <HAL_GPIO_EXTI_Callback+0x34>
 8001348:	4b06      	ldr	r3, [pc, #24]	@ (8001364 <HAL_GPIO_EXTI_Callback+0x40>)
 800134a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	f3bf 8f4f 	dsb	sy
 8001354:	f3bf 8f6f 	isb	sy


  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001358:	bf00      	nop
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	240002a4 	.word	0x240002a4
 8001364:	e000ed04 	.word	0xe000ed04

08001368 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800136c:	4b22      	ldr	r3, [pc, #136]	@ (80013f8 <MX_USART1_UART_Init+0x90>)
 800136e:	4a23      	ldr	r2, [pc, #140]	@ (80013fc <MX_USART1_UART_Init+0x94>)
 8001370:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001372:	4b21      	ldr	r3, [pc, #132]	@ (80013f8 <MX_USART1_UART_Init+0x90>)
 8001374:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001378:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800137a:	4b1f      	ldr	r3, [pc, #124]	@ (80013f8 <MX_USART1_UART_Init+0x90>)
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001380:	4b1d      	ldr	r3, [pc, #116]	@ (80013f8 <MX_USART1_UART_Init+0x90>)
 8001382:	2200      	movs	r2, #0
 8001384:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001386:	4b1c      	ldr	r3, [pc, #112]	@ (80013f8 <MX_USART1_UART_Init+0x90>)
 8001388:	2200      	movs	r2, #0
 800138a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800138c:	4b1a      	ldr	r3, [pc, #104]	@ (80013f8 <MX_USART1_UART_Init+0x90>)
 800138e:	220c      	movs	r2, #12
 8001390:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001392:	4b19      	ldr	r3, [pc, #100]	@ (80013f8 <MX_USART1_UART_Init+0x90>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001398:	4b17      	ldr	r3, [pc, #92]	@ (80013f8 <MX_USART1_UART_Init+0x90>)
 800139a:	2200      	movs	r2, #0
 800139c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800139e:	4b16      	ldr	r3, [pc, #88]	@ (80013f8 <MX_USART1_UART_Init+0x90>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013a4:	4b14      	ldr	r3, [pc, #80]	@ (80013f8 <MX_USART1_UART_Init+0x90>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013aa:	4b13      	ldr	r3, [pc, #76]	@ (80013f8 <MX_USART1_UART_Init+0x90>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013b0:	4811      	ldr	r0, [pc, #68]	@ (80013f8 <MX_USART1_UART_Init+0x90>)
 80013b2:	f004 f825 	bl	8005400 <HAL_UART_Init>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80013bc:	f7ff fd26 	bl	8000e0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013c0:	2100      	movs	r1, #0
 80013c2:	480d      	ldr	r0, [pc, #52]	@ (80013f8 <MX_USART1_UART_Init+0x90>)
 80013c4:	f005 f9bf 	bl	8006746 <HAL_UARTEx_SetTxFifoThreshold>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80013ce:	f7ff fd1d 	bl	8000e0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013d2:	2100      	movs	r1, #0
 80013d4:	4808      	ldr	r0, [pc, #32]	@ (80013f8 <MX_USART1_UART_Init+0x90>)
 80013d6:	f005 f9f4 	bl	80067c2 <HAL_UARTEx_SetRxFifoThreshold>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80013e0:	f7ff fd14 	bl	8000e0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80013e4:	4804      	ldr	r0, [pc, #16]	@ (80013f8 <MX_USART1_UART_Init+0x90>)
 80013e6:	f005 f975 	bl	80066d4 <HAL_UARTEx_DisableFifoMode>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80013f0:	f7ff fd0c 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	240002a8 	.word	0x240002a8
 80013fc:	40011000 	.word	0x40011000

08001400 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b0ba      	sub	sp, #232	@ 0xe8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001408:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001418:	f107 0310 	add.w	r3, r7, #16
 800141c:	22c0      	movs	r2, #192	@ 0xc0
 800141e:	2100      	movs	r1, #0
 8001420:	4618      	mov	r0, r3
 8001422:	f009 fe71 	bl	800b108 <memset>
  if(uartHandle->Instance==USART1)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a27      	ldr	r2, [pc, #156]	@ (80014c8 <HAL_UART_MspInit+0xc8>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d146      	bne.n	80014be <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001430:	f04f 0201 	mov.w	r2, #1
 8001434:	f04f 0300 	mov.w	r3, #0
 8001438:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800143c:	2300      	movs	r3, #0
 800143e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001442:	f107 0310 	add.w	r3, r7, #16
 8001446:	4618      	mov	r0, r3
 8001448:	f001 ff2c 	bl	80032a4 <HAL_RCCEx_PeriphCLKConfig>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001452:	f7ff fcdb 	bl	8000e0c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001456:	4b1d      	ldr	r3, [pc, #116]	@ (80014cc <HAL_UART_MspInit+0xcc>)
 8001458:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800145c:	4a1b      	ldr	r2, [pc, #108]	@ (80014cc <HAL_UART_MspInit+0xcc>)
 800145e:	f043 0310 	orr.w	r3, r3, #16
 8001462:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8001466:	4b19      	ldr	r3, [pc, #100]	@ (80014cc <HAL_UART_MspInit+0xcc>)
 8001468:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800146c:	f003 0310 	and.w	r3, r3, #16
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001474:	4b15      	ldr	r3, [pc, #84]	@ (80014cc <HAL_UART_MspInit+0xcc>)
 8001476:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800147a:	4a14      	ldr	r2, [pc, #80]	@ (80014cc <HAL_UART_MspInit+0xcc>)
 800147c:	f043 0302 	orr.w	r3, r3, #2
 8001480:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001484:	4b11      	ldr	r3, [pc, #68]	@ (80014cc <HAL_UART_MspInit+0xcc>)
 8001486:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	60bb      	str	r3, [r7, #8]
 8001490:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = dbg_UART_TX_Pin|dbg_UART_RX_Pin;
 8001492:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001496:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149a:	2302      	movs	r3, #2
 800149c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a6:	2300      	movs	r3, #0
 80014a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80014ac:	2304      	movs	r3, #4
 80014ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80014b6:	4619      	mov	r1, r3
 80014b8:	4805      	ldr	r0, [pc, #20]	@ (80014d0 <HAL_UART_MspInit+0xd0>)
 80014ba:	f000 f971 	bl	80017a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80014be:	bf00      	nop
 80014c0:	37e8      	adds	r7, #232	@ 0xe8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40011000 	.word	0x40011000
 80014cc:	58024400 	.word	0x58024400
 80014d0:	58020400 	.word	0x58020400

080014d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80014d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800150c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014d8:	f7ff fe22 	bl	8001120 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014dc:	480c      	ldr	r0, [pc, #48]	@ (8001510 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014de:	490d      	ldr	r1, [pc, #52]	@ (8001514 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001518 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014e4:	e002      	b.n	80014ec <LoopCopyDataInit>

080014e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ea:	3304      	adds	r3, #4

080014ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f0:	d3f9      	bcc.n	80014e6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014f2:	4a0a      	ldr	r2, [pc, #40]	@ (800151c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014f4:	4c0a      	ldr	r4, [pc, #40]	@ (8001520 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f8:	e001      	b.n	80014fe <LoopFillZerobss>

080014fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014fc:	3204      	adds	r2, #4

080014fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001500:	d3fb      	bcc.n	80014fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001502:	f009 ff03 	bl	800b30c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001506:	f7ff fbd5 	bl	8000cb4 <main>
  bx  lr
 800150a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800150c:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001510:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001514:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 8001518:	0800ea1c 	.word	0x0800ea1c
  ldr r2, =_sbss
 800151c:	240001dc 	.word	0x240001dc
  ldr r4, =_ebss
 8001520:	24004e80 	.word	0x24004e80

08001524 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001524:	e7fe      	b.n	8001524 <ADC_IRQHandler>
	...

08001528 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800152e:	2003      	movs	r0, #3
 8001530:	f000 f903 	bl	800173a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001534:	f001 fc9e 	bl	8002e74 <HAL_RCC_GetSysClockFreq>
 8001538:	4602      	mov	r2, r0
 800153a:	4b15      	ldr	r3, [pc, #84]	@ (8001590 <HAL_Init+0x68>)
 800153c:	699b      	ldr	r3, [r3, #24]
 800153e:	0a1b      	lsrs	r3, r3, #8
 8001540:	f003 030f 	and.w	r3, r3, #15
 8001544:	4913      	ldr	r1, [pc, #76]	@ (8001594 <HAL_Init+0x6c>)
 8001546:	5ccb      	ldrb	r3, [r1, r3]
 8001548:	f003 031f 	and.w	r3, r3, #31
 800154c:	fa22 f303 	lsr.w	r3, r2, r3
 8001550:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001552:	4b0f      	ldr	r3, [pc, #60]	@ (8001590 <HAL_Init+0x68>)
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	f003 030f 	and.w	r3, r3, #15
 800155a:	4a0e      	ldr	r2, [pc, #56]	@ (8001594 <HAL_Init+0x6c>)
 800155c:	5cd3      	ldrb	r3, [r2, r3]
 800155e:	f003 031f 	and.w	r3, r3, #31
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	fa22 f303 	lsr.w	r3, r2, r3
 8001568:	4a0b      	ldr	r2, [pc, #44]	@ (8001598 <HAL_Init+0x70>)
 800156a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800156c:	4a0b      	ldr	r2, [pc, #44]	@ (800159c <HAL_Init+0x74>)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001572:	200f      	movs	r0, #15
 8001574:	f7ff fc80 	bl	8000e78 <HAL_InitTick>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e002      	b.n	8001588 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001582:	f7ff fc5b 	bl	8000e3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001586:	2300      	movs	r3, #0
}
 8001588:	4618      	mov	r0, r3
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	58024400 	.word	0x58024400
 8001594:	0800e5a8 	.word	0x0800e5a8
 8001598:	24000004 	.word	0x24000004
 800159c:	24000000 	.word	0x24000000

080015a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015a4:	4b06      	ldr	r3, [pc, #24]	@ (80015c0 <HAL_IncTick+0x20>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	461a      	mov	r2, r3
 80015aa:	4b06      	ldr	r3, [pc, #24]	@ (80015c4 <HAL_IncTick+0x24>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4413      	add	r3, r2
 80015b0:	4a04      	ldr	r2, [pc, #16]	@ (80015c4 <HAL_IncTick+0x24>)
 80015b2:	6013      	str	r3, [r2, #0]
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	2400000c 	.word	0x2400000c
 80015c4:	2400033c 	.word	0x2400033c

080015c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  return uwTick;
 80015cc:	4b03      	ldr	r3, [pc, #12]	@ (80015dc <HAL_GetTick+0x14>)
 80015ce:	681b      	ldr	r3, [r3, #0]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	2400033c 	.word	0x2400033c

080015e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001620 <__NVIC_SetPriorityGrouping+0x40>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015f6:	68ba      	ldr	r2, [r7, #8]
 80015f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015fc:	4013      	ands	r3, r2
 80015fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001608:	4b06      	ldr	r3, [pc, #24]	@ (8001624 <__NVIC_SetPriorityGrouping+0x44>)
 800160a:	4313      	orrs	r3, r2
 800160c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800160e:	4a04      	ldr	r2, [pc, #16]	@ (8001620 <__NVIC_SetPriorityGrouping+0x40>)
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	60d3      	str	r3, [r2, #12]
}
 8001614:	bf00      	nop
 8001616:	3714      	adds	r7, #20
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	e000ed00 	.word	0xe000ed00
 8001624:	05fa0000 	.word	0x05fa0000

08001628 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800162c:	4b04      	ldr	r3, [pc, #16]	@ (8001640 <__NVIC_GetPriorityGrouping+0x18>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	0a1b      	lsrs	r3, r3, #8
 8001632:	f003 0307 	and.w	r3, r3, #7
}
 8001636:	4618      	mov	r0, r3
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800164e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001652:	2b00      	cmp	r3, #0
 8001654:	db0b      	blt.n	800166e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001656:	88fb      	ldrh	r3, [r7, #6]
 8001658:	f003 021f 	and.w	r2, r3, #31
 800165c:	4907      	ldr	r1, [pc, #28]	@ (800167c <__NVIC_EnableIRQ+0x38>)
 800165e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001662:	095b      	lsrs	r3, r3, #5
 8001664:	2001      	movs	r0, #1
 8001666:	fa00 f202 	lsl.w	r2, r0, r2
 800166a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	e000e100 	.word	0xe000e100

08001680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	6039      	str	r1, [r7, #0]
 800168a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800168c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001690:	2b00      	cmp	r3, #0
 8001692:	db0a      	blt.n	80016aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	b2da      	uxtb	r2, r3
 8001698:	490c      	ldr	r1, [pc, #48]	@ (80016cc <__NVIC_SetPriority+0x4c>)
 800169a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800169e:	0112      	lsls	r2, r2, #4
 80016a0:	b2d2      	uxtb	r2, r2
 80016a2:	440b      	add	r3, r1
 80016a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016a8:	e00a      	b.n	80016c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	4908      	ldr	r1, [pc, #32]	@ (80016d0 <__NVIC_SetPriority+0x50>)
 80016b0:	88fb      	ldrh	r3, [r7, #6]
 80016b2:	f003 030f 	and.w	r3, r3, #15
 80016b6:	3b04      	subs	r3, #4
 80016b8:	0112      	lsls	r2, r2, #4
 80016ba:	b2d2      	uxtb	r2, r2
 80016bc:	440b      	add	r3, r1
 80016be:	761a      	strb	r2, [r3, #24]
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	e000e100 	.word	0xe000e100
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b089      	sub	sp, #36	@ 0x24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	f1c3 0307 	rsb	r3, r3, #7
 80016ee:	2b04      	cmp	r3, #4
 80016f0:	bf28      	it	cs
 80016f2:	2304      	movcs	r3, #4
 80016f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	3304      	adds	r3, #4
 80016fa:	2b06      	cmp	r3, #6
 80016fc:	d902      	bls.n	8001704 <NVIC_EncodePriority+0x30>
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	3b03      	subs	r3, #3
 8001702:	e000      	b.n	8001706 <NVIC_EncodePriority+0x32>
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001708:	f04f 32ff 	mov.w	r2, #4294967295
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43da      	mvns	r2, r3
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	401a      	ands	r2, r3
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800171c:	f04f 31ff 	mov.w	r1, #4294967295
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	fa01 f303 	lsl.w	r3, r1, r3
 8001726:	43d9      	mvns	r1, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800172c:	4313      	orrs	r3, r2
         );
}
 800172e:	4618      	mov	r0, r3
 8001730:	3724      	adds	r7, #36	@ 0x24
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b082      	sub	sp, #8
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff ff4c 	bl	80015e0 <__NVIC_SetPriorityGrouping>
}
 8001748:	bf00      	nop
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
 800175c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800175e:	f7ff ff63 	bl	8001628 <__NVIC_GetPriorityGrouping>
 8001762:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	68b9      	ldr	r1, [r7, #8]
 8001768:	6978      	ldr	r0, [r7, #20]
 800176a:	f7ff ffb3 	bl	80016d4 <NVIC_EncodePriority>
 800176e:	4602      	mov	r2, r0
 8001770:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001774:	4611      	mov	r1, r2
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff ff82 	bl	8001680 <__NVIC_SetPriority>
}
 800177c:	bf00      	nop
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800178e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff ff56 	bl	8001644 <__NVIC_EnableIRQ>
}
 8001798:	bf00      	nop
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b089      	sub	sp, #36	@ 0x24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80017ae:	4b89      	ldr	r3, [pc, #548]	@ (80019d4 <HAL_GPIO_Init+0x234>)
 80017b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80017b2:	e194      	b.n	8001ade <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	2101      	movs	r1, #1
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	fa01 f303 	lsl.w	r3, r1, r3
 80017c0:	4013      	ands	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f000 8186 	beq.w	8001ad8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f003 0303 	and.w	r3, r3, #3
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d005      	beq.n	80017e4 <HAL_GPIO_Init+0x44>
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f003 0303 	and.w	r3, r3, #3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d130      	bne.n	8001846 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	2203      	movs	r2, #3
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	4013      	ands	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	68da      	ldr	r2, [r3, #12]
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	4313      	orrs	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800181a:	2201      	movs	r2, #1
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	43db      	mvns	r3, r3
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	4013      	ands	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	091b      	lsrs	r3, r3, #4
 8001830:	f003 0201 	and.w	r2, r3, #1
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4313      	orrs	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f003 0303 	and.w	r3, r3, #3
 800184e:	2b03      	cmp	r3, #3
 8001850:	d017      	beq.n	8001882 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	2203      	movs	r2, #3
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	43db      	mvns	r3, r3
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	4013      	ands	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	689a      	ldr	r2, [r3, #8]
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	4313      	orrs	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f003 0303 	and.w	r3, r3, #3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d123      	bne.n	80018d6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	08da      	lsrs	r2, r3, #3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	3208      	adds	r2, #8
 8001896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800189a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	220f      	movs	r2, #15
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	43db      	mvns	r3, r3
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4013      	ands	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	691a      	ldr	r2, [r3, #16]
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	f003 0307 	and.w	r3, r3, #7
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	08da      	lsrs	r2, r3, #3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3208      	adds	r2, #8
 80018d0:	69b9      	ldr	r1, [r7, #24]
 80018d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	2203      	movs	r2, #3
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	43db      	mvns	r3, r3
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	4013      	ands	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f003 0203 	and.w	r2, r3, #3
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4313      	orrs	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001912:	2b00      	cmp	r3, #0
 8001914:	f000 80e0 	beq.w	8001ad8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001918:	4b2f      	ldr	r3, [pc, #188]	@ (80019d8 <HAL_GPIO_Init+0x238>)
 800191a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800191e:	4a2e      	ldr	r2, [pc, #184]	@ (80019d8 <HAL_GPIO_Init+0x238>)
 8001920:	f043 0302 	orr.w	r3, r3, #2
 8001924:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001928:	4b2b      	ldr	r3, [pc, #172]	@ (80019d8 <HAL_GPIO_Init+0x238>)
 800192a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001936:	4a29      	ldr	r2, [pc, #164]	@ (80019dc <HAL_GPIO_Init+0x23c>)
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	089b      	lsrs	r3, r3, #2
 800193c:	3302      	adds	r3, #2
 800193e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001942:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	f003 0303 	and.w	r3, r3, #3
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	220f      	movs	r2, #15
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	43db      	mvns	r3, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4013      	ands	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a20      	ldr	r2, [pc, #128]	@ (80019e0 <HAL_GPIO_Init+0x240>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d052      	beq.n	8001a08 <HAL_GPIO_Init+0x268>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a1f      	ldr	r2, [pc, #124]	@ (80019e4 <HAL_GPIO_Init+0x244>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d031      	beq.n	80019ce <HAL_GPIO_Init+0x22e>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a1e      	ldr	r2, [pc, #120]	@ (80019e8 <HAL_GPIO_Init+0x248>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d02b      	beq.n	80019ca <HAL_GPIO_Init+0x22a>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a1d      	ldr	r2, [pc, #116]	@ (80019ec <HAL_GPIO_Init+0x24c>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d025      	beq.n	80019c6 <HAL_GPIO_Init+0x226>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a1c      	ldr	r2, [pc, #112]	@ (80019f0 <HAL_GPIO_Init+0x250>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d01f      	beq.n	80019c2 <HAL_GPIO_Init+0x222>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a1b      	ldr	r2, [pc, #108]	@ (80019f4 <HAL_GPIO_Init+0x254>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d019      	beq.n	80019be <HAL_GPIO_Init+0x21e>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a1a      	ldr	r2, [pc, #104]	@ (80019f8 <HAL_GPIO_Init+0x258>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d013      	beq.n	80019ba <HAL_GPIO_Init+0x21a>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a19      	ldr	r2, [pc, #100]	@ (80019fc <HAL_GPIO_Init+0x25c>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d00d      	beq.n	80019b6 <HAL_GPIO_Init+0x216>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a18      	ldr	r2, [pc, #96]	@ (8001a00 <HAL_GPIO_Init+0x260>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d007      	beq.n	80019b2 <HAL_GPIO_Init+0x212>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a17      	ldr	r2, [pc, #92]	@ (8001a04 <HAL_GPIO_Init+0x264>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d101      	bne.n	80019ae <HAL_GPIO_Init+0x20e>
 80019aa:	2309      	movs	r3, #9
 80019ac:	e02d      	b.n	8001a0a <HAL_GPIO_Init+0x26a>
 80019ae:	230a      	movs	r3, #10
 80019b0:	e02b      	b.n	8001a0a <HAL_GPIO_Init+0x26a>
 80019b2:	2308      	movs	r3, #8
 80019b4:	e029      	b.n	8001a0a <HAL_GPIO_Init+0x26a>
 80019b6:	2307      	movs	r3, #7
 80019b8:	e027      	b.n	8001a0a <HAL_GPIO_Init+0x26a>
 80019ba:	2306      	movs	r3, #6
 80019bc:	e025      	b.n	8001a0a <HAL_GPIO_Init+0x26a>
 80019be:	2305      	movs	r3, #5
 80019c0:	e023      	b.n	8001a0a <HAL_GPIO_Init+0x26a>
 80019c2:	2304      	movs	r3, #4
 80019c4:	e021      	b.n	8001a0a <HAL_GPIO_Init+0x26a>
 80019c6:	2303      	movs	r3, #3
 80019c8:	e01f      	b.n	8001a0a <HAL_GPIO_Init+0x26a>
 80019ca:	2302      	movs	r3, #2
 80019cc:	e01d      	b.n	8001a0a <HAL_GPIO_Init+0x26a>
 80019ce:	2301      	movs	r3, #1
 80019d0:	e01b      	b.n	8001a0a <HAL_GPIO_Init+0x26a>
 80019d2:	bf00      	nop
 80019d4:	58000080 	.word	0x58000080
 80019d8:	58024400 	.word	0x58024400
 80019dc:	58000400 	.word	0x58000400
 80019e0:	58020000 	.word	0x58020000
 80019e4:	58020400 	.word	0x58020400
 80019e8:	58020800 	.word	0x58020800
 80019ec:	58020c00 	.word	0x58020c00
 80019f0:	58021000 	.word	0x58021000
 80019f4:	58021400 	.word	0x58021400
 80019f8:	58021800 	.word	0x58021800
 80019fc:	58021c00 	.word	0x58021c00
 8001a00:	58022000 	.word	0x58022000
 8001a04:	58022400 	.word	0x58022400
 8001a08:	2300      	movs	r3, #0
 8001a0a:	69fa      	ldr	r2, [r7, #28]
 8001a0c:	f002 0203 	and.w	r2, r2, #3
 8001a10:	0092      	lsls	r2, r2, #2
 8001a12:	4093      	lsls	r3, r2
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a1a:	4938      	ldr	r1, [pc, #224]	@ (8001afc <HAL_GPIO_Init+0x35c>)
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	089b      	lsrs	r3, r3, #2
 8001a20:	3302      	adds	r3, #2
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	43db      	mvns	r3, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4013      	ands	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001a4e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001a56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	43db      	mvns	r3, r3
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4013      	ands	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d003      	beq.n	8001a7c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001a7c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	4013      	ands	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d003      	beq.n	8001aa8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4013      	ands	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	3301      	adds	r3, #1
 8001adc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f47f ae63 	bne.w	80017b4 <HAL_GPIO_Init+0x14>
  }
}
 8001aee:	bf00      	nop
 8001af0:	bf00      	nop
 8001af2:	3724      	adds	r7, #36	@ 0x24
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	58000400 	.word	0x58000400

08001b00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8001b0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b0e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001b12:	88fb      	ldrh	r3, [r7, #6]
 8001b14:	4013      	ands	r3, r2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d008      	beq.n	8001b2c <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b1a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b1e:	88fb      	ldrh	r3, [r7, #6]
 8001b20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b24:	88fb      	ldrh	r3, [r7, #6]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff fbfc 	bl	8001324 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8001b2c:	bf00      	nop
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e08b      	b.n	8001c5e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d106      	bne.n	8001b60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7ff f840 	bl	8000be0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2224      	movs	r2, #36	@ 0x24
 8001b64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f022 0201 	bic.w	r2, r2, #1
 8001b76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685a      	ldr	r2, [r3, #4]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b84:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	689a      	ldr	r2, [r3, #8]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b94:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d107      	bne.n	8001bae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	689a      	ldr	r2, [r3, #8]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	e006      	b.n	8001bbc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	689a      	ldr	r2, [r3, #8]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001bba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d108      	bne.n	8001bd6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	685a      	ldr	r2, [r3, #4]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001bd2:	605a      	str	r2, [r3, #4]
 8001bd4:	e007      	b.n	8001be6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001be4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	6859      	ldr	r1, [r3, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	4b1d      	ldr	r3, [pc, #116]	@ (8001c68 <HAL_I2C_Init+0x134>)
 8001bf2:	430b      	orrs	r3, r1
 8001bf4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	68da      	ldr	r2, [r3, #12]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c04:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	691a      	ldr	r2, [r3, #16]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	69d9      	ldr	r1, [r3, #28]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a1a      	ldr	r2, [r3, #32]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f042 0201 	orr.w	r2, r2, #1
 8001c3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2220      	movs	r2, #32
 8001c4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	02008000 	.word	0x02008000

08001c6c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b08a      	sub	sp, #40	@ 0x28
 8001c70:	af02      	add	r7, sp, #8
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	607a      	str	r2, [r7, #4]
 8001c76:	603b      	str	r3, [r7, #0]
 8001c78:	460b      	mov	r3, r1
 8001c7a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2b20      	cmp	r3, #32
 8001c8a:	f040 80d2 	bne.w	8001e32 <HAL_I2C_IsDeviceReady+0x1c6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c9c:	d101      	bne.n	8001ca2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	e0c8      	b.n	8001e34 <HAL_I2C_IsDeviceReady+0x1c8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d101      	bne.n	8001cb0 <HAL_I2C_IsDeviceReady+0x44>
 8001cac:	2302      	movs	r3, #2
 8001cae:	e0c1      	b.n	8001e34 <HAL_I2C_IsDeviceReady+0x1c8>
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2224      	movs	r2, #36	@ 0x24
 8001cbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d105      	bne.n	8001cda <HAL_I2C_IsDeviceReady+0x6e>
 8001cce:	897b      	ldrh	r3, [r7, #10]
 8001cd0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001cd4:	4b59      	ldr	r3, [pc, #356]	@ (8001e3c <HAL_I2C_IsDeviceReady+0x1d0>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	e004      	b.n	8001ce4 <HAL_I2C_IsDeviceReady+0x78>
 8001cda:	897b      	ldrh	r3, [r7, #10]
 8001cdc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ce0:	4b57      	ldr	r3, [pc, #348]	@ (8001e40 <HAL_I2C_IsDeviceReady+0x1d4>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	68fa      	ldr	r2, [r7, #12]
 8001ce6:	6812      	ldr	r2, [r2, #0]
 8001ce8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001cea:	f7ff fc6d 	bl	80015c8 <HAL_GetTick>
 8001cee:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	f003 0320 	and.w	r3, r3, #32
 8001cfa:	2b20      	cmp	r3, #32
 8001cfc:	bf0c      	ite	eq
 8001cfe:	2301      	moveq	r3, #1
 8001d00:	2300      	movne	r3, #0
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	f003 0310 	and.w	r3, r3, #16
 8001d10:	2b10      	cmp	r3, #16
 8001d12:	bf0c      	ite	eq
 8001d14:	2301      	moveq	r3, #1
 8001d16:	2300      	movne	r3, #0
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001d1c:	e034      	b.n	8001d88 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d24:	d01a      	beq.n	8001d5c <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001d26:	f7ff fc4f 	bl	80015c8 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	683a      	ldr	r2, [r7, #0]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d302      	bcc.n	8001d3c <HAL_I2C_IsDeviceReady+0xd0>
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d10f      	bne.n	8001d5c <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2220      	movs	r2, #32
 8001d40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d48:	f043 0220 	orr.w	r2, r3, #32
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e06b      	b.n	8001e34 <HAL_I2C_IsDeviceReady+0x1c8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	f003 0320 	and.w	r3, r3, #32
 8001d66:	2b20      	cmp	r3, #32
 8001d68:	bf0c      	ite	eq
 8001d6a:	2301      	moveq	r3, #1
 8001d6c:	2300      	movne	r3, #0
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	f003 0310 	and.w	r3, r3, #16
 8001d7c:	2b10      	cmp	r3, #16
 8001d7e:	bf0c      	ite	eq
 8001d80:	2301      	moveq	r3, #1
 8001d82:	2300      	movne	r3, #0
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001d88:	7ffb      	ldrb	r3, [r7, #31]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d102      	bne.n	8001d94 <HAL_I2C_IsDeviceReady+0x128>
 8001d8e:	7fbb      	ldrb	r3, [r7, #30]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0c4      	beq.n	8001d1e <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	f003 0310 	and.w	r3, r3, #16
 8001d9e:	2b10      	cmp	r3, #16
 8001da0:	d01a      	beq.n	8001dd8 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	9300      	str	r3, [sp, #0]
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	2200      	movs	r2, #0
 8001daa:	2120      	movs	r1, #32
 8001dac:	68f8      	ldr	r0, [r7, #12]
 8001dae:	f000 f86d 	bl	8001e8c <I2C_WaitOnFlagUntilTimeout>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e03b      	b.n	8001e34 <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2220      	movs	r2, #32
 8001dc2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2220      	movs	r2, #32
 8001dc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	e02d      	b.n	8001e34 <HAL_I2C_IsDeviceReady+0x1c8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	9300      	str	r3, [sp, #0]
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	2200      	movs	r2, #0
 8001de0:	2120      	movs	r1, #32
 8001de2:	68f8      	ldr	r0, [r7, #12]
 8001de4:	f000 f852 	bl	8001e8c <I2C_WaitOnFlagUntilTimeout>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e020      	b.n	8001e34 <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2210      	movs	r2, #16
 8001df8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2220      	movs	r2, #32
 8001e00:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	3301      	adds	r3, #1
 8001e06:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	f63f af5a 	bhi.w	8001cc6 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2220      	movs	r2, #32
 8001e16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e1e:	f043 0220 	orr.w	r2, r3, #32
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <HAL_I2C_IsDeviceReady+0x1c8>
  }
  else
  {
    return HAL_BUSY;
 8001e32:	2302      	movs	r3, #2
  }
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3720      	adds	r7, #32
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	02002000 	.word	0x02002000
 8001e40:	02002800 	.word	0x02002800

08001e44 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d103      	bne.n	8001e62 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d007      	beq.n	8001e80 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	699a      	ldr	r2, [r3, #24]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f042 0201 	orr.w	r2, r2, #1
 8001e7e:	619a      	str	r2, [r3, #24]
  }
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	603b      	str	r3, [r7, #0]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e9c:	e03b      	b.n	8001f16 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	6839      	ldr	r1, [r7, #0]
 8001ea2:	68f8      	ldr	r0, [r7, #12]
 8001ea4:	f000 f84c 	bl	8001f40 <I2C_IsErrorOccurred>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e041      	b.n	8001f36 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb8:	d02d      	beq.n	8001f16 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eba:	f7ff fb85 	bl	80015c8 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d302      	bcc.n	8001ed0 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d122      	bne.n	8001f16 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	699a      	ldr	r2, [r3, #24]
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	68ba      	ldr	r2, [r7, #8]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	bf0c      	ite	eq
 8001ee0:	2301      	moveq	r3, #1
 8001ee2:	2300      	movne	r3, #0
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	79fb      	ldrb	r3, [r7, #7]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d113      	bne.n	8001f16 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef2:	f043 0220 	orr.w	r2, r3, #32
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2220      	movs	r2, #32
 8001efe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e00f      	b.n	8001f36 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	699a      	ldr	r2, [r3, #24]
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	68ba      	ldr	r2, [r7, #8]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	bf0c      	ite	eq
 8001f26:	2301      	moveq	r3, #1
 8001f28:	2300      	movne	r3, #0
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	79fb      	ldrb	r3, [r7, #7]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d0b4      	beq.n	8001e9e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
	...

08001f40 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b08a      	sub	sp, #40	@ 0x28
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	f003 0310 	and.w	r3, r3, #16
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d068      	beq.n	800203e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2210      	movs	r2, #16
 8001f72:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001f74:	e049      	b.n	800200a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f7c:	d045      	beq.n	800200a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001f7e:	f7ff fb23 	bl	80015c8 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	68ba      	ldr	r2, [r7, #8]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d302      	bcc.n	8001f94 <I2C_IsErrorOccurred+0x54>
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d13a      	bne.n	800200a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f9e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001fa6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001fb2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001fb6:	d121      	bne.n	8001ffc <I2C_IsErrorOccurred+0xbc>
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001fbe:	d01d      	beq.n	8001ffc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001fc0:	7cfb      	ldrb	r3, [r7, #19]
 8001fc2:	2b20      	cmp	r3, #32
 8001fc4:	d01a      	beq.n	8001ffc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	685a      	ldr	r2, [r3, #4]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001fd4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001fd6:	f7ff faf7 	bl	80015c8 <HAL_GetTick>
 8001fda:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fdc:	e00e      	b.n	8001ffc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001fde:	f7ff faf3 	bl	80015c8 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b19      	cmp	r3, #25
 8001fea:	d907      	bls.n	8001ffc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001fec:	6a3b      	ldr	r3, [r7, #32]
 8001fee:	f043 0320 	orr.w	r3, r3, #32
 8001ff2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001ffa:	e006      	b.n	800200a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	f003 0320 	and.w	r3, r3, #32
 8002006:	2b20      	cmp	r3, #32
 8002008:	d1e9      	bne.n	8001fde <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	f003 0320 	and.w	r3, r3, #32
 8002014:	2b20      	cmp	r3, #32
 8002016:	d003      	beq.n	8002020 <I2C_IsErrorOccurred+0xe0>
 8002018:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800201c:	2b00      	cmp	r3, #0
 800201e:	d0aa      	beq.n	8001f76 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002020:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002024:	2b00      	cmp	r3, #0
 8002026:	d103      	bne.n	8002030 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2220      	movs	r2, #32
 800202e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002030:	6a3b      	ldr	r3, [r7, #32]
 8002032:	f043 0304 	orr.w	r3, r3, #4
 8002036:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800204c:	2b00      	cmp	r3, #0
 800204e:	d00b      	beq.n	8002068 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002050:	6a3b      	ldr	r3, [r7, #32]
 8002052:	f043 0301 	orr.w	r3, r3, #1
 8002056:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002060:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00b      	beq.n	800208a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002072:	6a3b      	ldr	r3, [r7, #32]
 8002074:	f043 0308 	orr.w	r3, r3, #8
 8002078:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002082:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002090:	2b00      	cmp	r3, #0
 8002092:	d00b      	beq.n	80020ac <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002094:	6a3b      	ldr	r3, [r7, #32]
 8002096:	f043 0302 	orr.w	r3, r3, #2
 800209a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80020ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d01c      	beq.n	80020ee <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80020b4:	68f8      	ldr	r0, [r7, #12]
 80020b6:	f7ff fec5 	bl	8001e44 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6859      	ldr	r1, [r3, #4]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	4b0d      	ldr	r3, [pc, #52]	@ (80020fc <I2C_IsErrorOccurred+0x1bc>)
 80020c6:	400b      	ands	r3, r1
 80020c8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80020ce:	6a3b      	ldr	r3, [r7, #32]
 80020d0:	431a      	orrs	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2220      	movs	r2, #32
 80020da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80020ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3728      	adds	r7, #40	@ 0x28
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	fe00e800 	.word	0xfe00e800

08002100 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b20      	cmp	r3, #32
 8002114:	d138      	bne.n	8002188 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800211c:	2b01      	cmp	r3, #1
 800211e:	d101      	bne.n	8002124 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002120:	2302      	movs	r3, #2
 8002122:	e032      	b.n	800218a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2224      	movs	r2, #36	@ 0x24
 8002130:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f022 0201 	bic.w	r2, r2, #1
 8002142:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002152:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6819      	ldr	r1, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	430a      	orrs	r2, r1
 8002162:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f042 0201 	orr.w	r2, r2, #1
 8002172:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2220      	movs	r2, #32
 8002178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002184:	2300      	movs	r3, #0
 8002186:	e000      	b.n	800218a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002188:	2302      	movs	r3, #2
  }
}
 800218a:	4618      	mov	r0, r3
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002196:	b480      	push	{r7}
 8002198:	b085      	sub	sp, #20
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
 800219e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	2b20      	cmp	r3, #32
 80021aa:	d139      	bne.n	8002220 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d101      	bne.n	80021ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80021b6:	2302      	movs	r3, #2
 80021b8:	e033      	b.n	8002222 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2201      	movs	r2, #1
 80021be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2224      	movs	r2, #36	@ 0x24
 80021c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 0201 	bic.w	r2, r2, #1
 80021d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80021e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	021b      	lsls	r3, r3, #8
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f042 0201 	orr.w	r2, r2, #1
 800220a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2220      	movs	r2, #32
 8002210:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800221c:	2300      	movs	r3, #0
 800221e:	e000      	b.n	8002222 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002220:	2302      	movs	r3, #2
  }
}
 8002222:	4618      	mov	r0, r3
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
	...

08002230 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002238:	4b19      	ldr	r3, [pc, #100]	@ (80022a0 <HAL_PWREx_ConfigSupply+0x70>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	2b04      	cmp	r3, #4
 8002242:	d00a      	beq.n	800225a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002244:	4b16      	ldr	r3, [pc, #88]	@ (80022a0 <HAL_PWREx_ConfigSupply+0x70>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	f003 0307 	and.w	r3, r3, #7
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	429a      	cmp	r2, r3
 8002250:	d001      	beq.n	8002256 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e01f      	b.n	8002296 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002256:	2300      	movs	r3, #0
 8002258:	e01d      	b.n	8002296 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800225a:	4b11      	ldr	r3, [pc, #68]	@ (80022a0 <HAL_PWREx_ConfigSupply+0x70>)
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	f023 0207 	bic.w	r2, r3, #7
 8002262:	490f      	ldr	r1, [pc, #60]	@ (80022a0 <HAL_PWREx_ConfigSupply+0x70>)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4313      	orrs	r3, r2
 8002268:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800226a:	f7ff f9ad 	bl	80015c8 <HAL_GetTick>
 800226e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002270:	e009      	b.n	8002286 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002272:	f7ff f9a9 	bl	80015c8 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002280:	d901      	bls.n	8002286 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e007      	b.n	8002296 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002286:	4b06      	ldr	r3, [pc, #24]	@ (80022a0 <HAL_PWREx_ConfigSupply+0x70>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800228e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002292:	d1ee      	bne.n	8002272 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	58024800 	.word	0x58024800

080022a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08c      	sub	sp, #48	@ 0x30
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d102      	bne.n	80022b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	f000 bc1f 	b.w	8002af6 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0301 	and.w	r3, r3, #1
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f000 80b3 	beq.w	800242c <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022c6:	4b95      	ldr	r3, [pc, #596]	@ (800251c <HAL_RCC_OscConfig+0x278>)
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80022ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80022d0:	4b92      	ldr	r3, [pc, #584]	@ (800251c <HAL_RCC_OscConfig+0x278>)
 80022d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80022d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022d8:	2b10      	cmp	r3, #16
 80022da:	d007      	beq.n	80022ec <HAL_RCC_OscConfig+0x48>
 80022dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022de:	2b18      	cmp	r3, #24
 80022e0:	d112      	bne.n	8002308 <HAL_RCC_OscConfig+0x64>
 80022e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022e4:	f003 0303 	and.w	r3, r3, #3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d10d      	bne.n	8002308 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ec:	4b8b      	ldr	r3, [pc, #556]	@ (800251c <HAL_RCC_OscConfig+0x278>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f000 8098 	beq.w	800242a <HAL_RCC_OscConfig+0x186>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f040 8093 	bne.w	800242a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e3f6      	b.n	8002af6 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002310:	d106      	bne.n	8002320 <HAL_RCC_OscConfig+0x7c>
 8002312:	4b82      	ldr	r3, [pc, #520]	@ (800251c <HAL_RCC_OscConfig+0x278>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a81      	ldr	r2, [pc, #516]	@ (800251c <HAL_RCC_OscConfig+0x278>)
 8002318:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800231c:	6013      	str	r3, [r2, #0]
 800231e:	e058      	b.n	80023d2 <HAL_RCC_OscConfig+0x12e>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d112      	bne.n	800234e <HAL_RCC_OscConfig+0xaa>
 8002328:	4b7c      	ldr	r3, [pc, #496]	@ (800251c <HAL_RCC_OscConfig+0x278>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a7b      	ldr	r2, [pc, #492]	@ (800251c <HAL_RCC_OscConfig+0x278>)
 800232e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002332:	6013      	str	r3, [r2, #0]
 8002334:	4b79      	ldr	r3, [pc, #484]	@ (800251c <HAL_RCC_OscConfig+0x278>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a78      	ldr	r2, [pc, #480]	@ (800251c <HAL_RCC_OscConfig+0x278>)
 800233a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800233e:	6013      	str	r3, [r2, #0]
 8002340:	4b76      	ldr	r3, [pc, #472]	@ (800251c <HAL_RCC_OscConfig+0x278>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a75      	ldr	r2, [pc, #468]	@ (800251c <HAL_RCC_OscConfig+0x278>)
 8002346:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800234a:	6013      	str	r3, [r2, #0]
 800234c:	e041      	b.n	80023d2 <HAL_RCC_OscConfig+0x12e>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002356:	d112      	bne.n	800237e <HAL_RCC_OscConfig+0xda>
 8002358:	4b70      	ldr	r3, [pc, #448]	@ (800251c <HAL_RCC_OscConfig+0x278>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a6f      	ldr	r2, [pc, #444]	@ (800251c <HAL_RCC_OscConfig+0x278>)
 800235e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002362:	6013      	str	r3, [r2, #0]
 8002364:	4b6d      	ldr	r3, [pc, #436]	@ (800251c <HAL_RCC_OscConfig+0x278>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a6c      	ldr	r2, [pc, #432]	@ (800251c <HAL_RCC_OscConfig+0x278>)
 800236a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800236e:	6013      	str	r3, [r2, #0]
 8002370:	4b6a      	ldr	r3, [pc, #424]	@ (800251c <HAL_RCC_OscConfig+0x278>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a69      	ldr	r2, [pc, #420]	@ (800251c <HAL_RCC_OscConfig+0x278>)
 8002376:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800237a:	6013      	str	r3, [r2, #0]
 800237c:	e029      	b.n	80023d2 <HAL_RCC_OscConfig+0x12e>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002386:	d112      	bne.n	80023ae <HAL_RCC_OscConfig+0x10a>
 8002388:	4b64      	ldr	r3, [pc, #400]	@ (800251c <HAL_RCC_OscConfig+0x278>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a63      	ldr	r2, [pc, #396]	@ (800251c <HAL_RCC_OscConfig+0x278>)
 800238e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002392:	6013      	str	r3, [r2, #0]
 8002394:	4b61      	ldr	r3, [pc, #388]	@ (800251c <HAL_RCC_OscConfig+0x278>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a60      	ldr	r2, [pc, #384]	@ (800251c <HAL_RCC_OscConfig+0x278>)
 800239a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800239e:	6013      	str	r3, [r2, #0]
 80023a0:	4b5e      	ldr	r3, [pc, #376]	@ (800251c <HAL_RCC_OscConfig+0x278>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a5d      	ldr	r2, [pc, #372]	@ (800251c <HAL_RCC_OscConfig+0x278>)
 80023a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023aa:	6013      	str	r3, [r2, #0]
 80023ac:	e011      	b.n	80023d2 <HAL_RCC_OscConfig+0x12e>
 80023ae:	4b5b      	ldr	r3, [pc, #364]	@ (800251c <HAL_RCC_OscConfig+0x278>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a5a      	ldr	r2, [pc, #360]	@ (800251c <HAL_RCC_OscConfig+0x278>)
 80023b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023b8:	6013      	str	r3, [r2, #0]
 80023ba:	4b58      	ldr	r3, [pc, #352]	@ (800251c <HAL_RCC_OscConfig+0x278>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a57      	ldr	r2, [pc, #348]	@ (800251c <HAL_RCC_OscConfig+0x278>)
 80023c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023c4:	6013      	str	r3, [r2, #0]
 80023c6:	4b55      	ldr	r3, [pc, #340]	@ (800251c <HAL_RCC_OscConfig+0x278>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a54      	ldr	r2, [pc, #336]	@ (800251c <HAL_RCC_OscConfig+0x278>)
 80023cc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80023d0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d013      	beq.n	8002402 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023da:	f7ff f8f5 	bl	80015c8 <HAL_GetTick>
 80023de:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023e0:	e008      	b.n	80023f4 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023e2:	f7ff f8f1 	bl	80015c8 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b64      	cmp	r3, #100	@ 0x64
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e380      	b.n	8002af6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023f4:	4b49      	ldr	r3, [pc, #292]	@ (800251c <HAL_RCC_OscConfig+0x278>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d0f0      	beq.n	80023e2 <HAL_RCC_OscConfig+0x13e>
 8002400:	e014      	b.n	800242c <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002402:	f7ff f8e1 	bl	80015c8 <HAL_GetTick>
 8002406:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002408:	e008      	b.n	800241c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800240a:	f7ff f8dd 	bl	80015c8 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b64      	cmp	r3, #100	@ 0x64
 8002416:	d901      	bls.n	800241c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e36c      	b.n	8002af6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800241c:	4b3f      	ldr	r3, [pc, #252]	@ (800251c <HAL_RCC_OscConfig+0x278>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d1f0      	bne.n	800240a <HAL_RCC_OscConfig+0x166>
 8002428:	e000      	b.n	800242c <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800242a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	f000 808c 	beq.w	8002552 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800243a:	4b38      	ldr	r3, [pc, #224]	@ (800251c <HAL_RCC_OscConfig+0x278>)
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002442:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002444:	4b35      	ldr	r3, [pc, #212]	@ (800251c <HAL_RCC_OscConfig+0x278>)
 8002446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002448:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800244a:	6a3b      	ldr	r3, [r7, #32]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d007      	beq.n	8002460 <HAL_RCC_OscConfig+0x1bc>
 8002450:	6a3b      	ldr	r3, [r7, #32]
 8002452:	2b18      	cmp	r3, #24
 8002454:	d137      	bne.n	80024c6 <HAL_RCC_OscConfig+0x222>
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	f003 0303 	and.w	r3, r3, #3
 800245c:	2b00      	cmp	r3, #0
 800245e:	d132      	bne.n	80024c6 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002460:	4b2e      	ldr	r3, [pc, #184]	@ (800251c <HAL_RCC_OscConfig+0x278>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b00      	cmp	r3, #0
 800246a:	d005      	beq.n	8002478 <HAL_RCC_OscConfig+0x1d4>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e33e      	b.n	8002af6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002478:	4b28      	ldr	r3, [pc, #160]	@ (800251c <HAL_RCC_OscConfig+0x278>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f023 0219 	bic.w	r2, r3, #25
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	4925      	ldr	r1, [pc, #148]	@ (800251c <HAL_RCC_OscConfig+0x278>)
 8002486:	4313      	orrs	r3, r2
 8002488:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248a:	f7ff f89d 	bl	80015c8 <HAL_GetTick>
 800248e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002490:	e008      	b.n	80024a4 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002492:	f7ff f899 	bl	80015c8 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e328      	b.n	8002af6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024a4:	4b1d      	ldr	r3, [pc, #116]	@ (800251c <HAL_RCC_OscConfig+0x278>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d0f0      	beq.n	8002492 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024b0:	4b1a      	ldr	r3, [pc, #104]	@ (800251c <HAL_RCC_OscConfig+0x278>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	061b      	lsls	r3, r3, #24
 80024be:	4917      	ldr	r1, [pc, #92]	@ (800251c <HAL_RCC_OscConfig+0x278>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024c4:	e045      	b.n	8002552 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d028      	beq.n	8002520 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80024ce:	4b13      	ldr	r3, [pc, #76]	@ (800251c <HAL_RCC_OscConfig+0x278>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f023 0219 	bic.w	r2, r3, #25
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	4910      	ldr	r1, [pc, #64]	@ (800251c <HAL_RCC_OscConfig+0x278>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e0:	f7ff f872 	bl	80015c8 <HAL_GetTick>
 80024e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024e8:	f7ff f86e 	bl	80015c8 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e2fd      	b.n	8002af6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024fa:	4b08      	ldr	r3, [pc, #32]	@ (800251c <HAL_RCC_OscConfig+0x278>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0304 	and.w	r3, r3, #4
 8002502:	2b00      	cmp	r3, #0
 8002504:	d0f0      	beq.n	80024e8 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002506:	4b05      	ldr	r3, [pc, #20]	@ (800251c <HAL_RCC_OscConfig+0x278>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	061b      	lsls	r3, r3, #24
 8002514:	4901      	ldr	r1, [pc, #4]	@ (800251c <HAL_RCC_OscConfig+0x278>)
 8002516:	4313      	orrs	r3, r2
 8002518:	604b      	str	r3, [r1, #4]
 800251a:	e01a      	b.n	8002552 <HAL_RCC_OscConfig+0x2ae>
 800251c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002520:	4b97      	ldr	r3, [pc, #604]	@ (8002780 <HAL_RCC_OscConfig+0x4dc>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a96      	ldr	r2, [pc, #600]	@ (8002780 <HAL_RCC_OscConfig+0x4dc>)
 8002526:	f023 0301 	bic.w	r3, r3, #1
 800252a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252c:	f7ff f84c 	bl	80015c8 <HAL_GetTick>
 8002530:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002534:	f7ff f848 	bl	80015c8 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e2d7      	b.n	8002af6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002546:	4b8e      	ldr	r3, [pc, #568]	@ (8002780 <HAL_RCC_OscConfig+0x4dc>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1f0      	bne.n	8002534 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0310 	and.w	r3, r3, #16
 800255a:	2b00      	cmp	r3, #0
 800255c:	d06a      	beq.n	8002634 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800255e:	4b88      	ldr	r3, [pc, #544]	@ (8002780 <HAL_RCC_OscConfig+0x4dc>)
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002566:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002568:	4b85      	ldr	r3, [pc, #532]	@ (8002780 <HAL_RCC_OscConfig+0x4dc>)
 800256a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800256c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	2b08      	cmp	r3, #8
 8002572:	d007      	beq.n	8002584 <HAL_RCC_OscConfig+0x2e0>
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	2b18      	cmp	r3, #24
 8002578:	d11b      	bne.n	80025b2 <HAL_RCC_OscConfig+0x30e>
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	f003 0303 	and.w	r3, r3, #3
 8002580:	2b01      	cmp	r3, #1
 8002582:	d116      	bne.n	80025b2 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002584:	4b7e      	ldr	r3, [pc, #504]	@ (8002780 <HAL_RCC_OscConfig+0x4dc>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800258c:	2b00      	cmp	r3, #0
 800258e:	d005      	beq.n	800259c <HAL_RCC_OscConfig+0x2f8>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	69db      	ldr	r3, [r3, #28]
 8002594:	2b80      	cmp	r3, #128	@ 0x80
 8002596:	d001      	beq.n	800259c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e2ac      	b.n	8002af6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800259c:	4b78      	ldr	r3, [pc, #480]	@ (8002780 <HAL_RCC_OscConfig+0x4dc>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	061b      	lsls	r3, r3, #24
 80025aa:	4975      	ldr	r1, [pc, #468]	@ (8002780 <HAL_RCC_OscConfig+0x4dc>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025b0:	e040      	b.n	8002634 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d023      	beq.n	8002602 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80025ba:	4b71      	ldr	r3, [pc, #452]	@ (8002780 <HAL_RCC_OscConfig+0x4dc>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a70      	ldr	r2, [pc, #448]	@ (8002780 <HAL_RCC_OscConfig+0x4dc>)
 80025c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c6:	f7fe ffff 	bl	80015c8 <HAL_GetTick>
 80025ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025cc:	e008      	b.n	80025e0 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80025ce:	f7fe fffb 	bl	80015c8 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e28a      	b.n	8002af6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025e0:	4b67      	ldr	r3, [pc, #412]	@ (8002780 <HAL_RCC_OscConfig+0x4dc>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d0f0      	beq.n	80025ce <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025ec:	4b64      	ldr	r3, [pc, #400]	@ (8002780 <HAL_RCC_OscConfig+0x4dc>)
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	061b      	lsls	r3, r3, #24
 80025fa:	4961      	ldr	r1, [pc, #388]	@ (8002780 <HAL_RCC_OscConfig+0x4dc>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	60cb      	str	r3, [r1, #12]
 8002600:	e018      	b.n	8002634 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002602:	4b5f      	ldr	r3, [pc, #380]	@ (8002780 <HAL_RCC_OscConfig+0x4dc>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a5e      	ldr	r2, [pc, #376]	@ (8002780 <HAL_RCC_OscConfig+0x4dc>)
 8002608:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800260c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260e:	f7fe ffdb 	bl	80015c8 <HAL_GetTick>
 8002612:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002614:	e008      	b.n	8002628 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002616:	f7fe ffd7 	bl	80015c8 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e266      	b.n	8002af6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002628:	4b55      	ldr	r3, [pc, #340]	@ (8002780 <HAL_RCC_OscConfig+0x4dc>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002630:	2b00      	cmp	r3, #0
 8002632:	d1f0      	bne.n	8002616 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0308 	and.w	r3, r3, #8
 800263c:	2b00      	cmp	r3, #0
 800263e:	d036      	beq.n	80026ae <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d019      	beq.n	800267c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002648:	4b4d      	ldr	r3, [pc, #308]	@ (8002780 <HAL_RCC_OscConfig+0x4dc>)
 800264a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800264c:	4a4c      	ldr	r2, [pc, #304]	@ (8002780 <HAL_RCC_OscConfig+0x4dc>)
 800264e:	f043 0301 	orr.w	r3, r3, #1
 8002652:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002654:	f7fe ffb8 	bl	80015c8 <HAL_GetTick>
 8002658:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800265c:	f7fe ffb4 	bl	80015c8 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e243      	b.n	8002af6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800266e:	4b44      	ldr	r3, [pc, #272]	@ (8002780 <HAL_RCC_OscConfig+0x4dc>)
 8002670:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d0f0      	beq.n	800265c <HAL_RCC_OscConfig+0x3b8>
 800267a:	e018      	b.n	80026ae <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800267c:	4b40      	ldr	r3, [pc, #256]	@ (8002780 <HAL_RCC_OscConfig+0x4dc>)
 800267e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002680:	4a3f      	ldr	r2, [pc, #252]	@ (8002780 <HAL_RCC_OscConfig+0x4dc>)
 8002682:	f023 0301 	bic.w	r3, r3, #1
 8002686:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002688:	f7fe ff9e 	bl	80015c8 <HAL_GetTick>
 800268c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002690:	f7fe ff9a 	bl	80015c8 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e229      	b.n	8002af6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026a2:	4b37      	ldr	r3, [pc, #220]	@ (8002780 <HAL_RCC_OscConfig+0x4dc>)
 80026a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1f0      	bne.n	8002690 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0320 	and.w	r3, r3, #32
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d036      	beq.n	8002728 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d019      	beq.n	80026f6 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80026c2:	4b2f      	ldr	r3, [pc, #188]	@ (8002780 <HAL_RCC_OscConfig+0x4dc>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a2e      	ldr	r2, [pc, #184]	@ (8002780 <HAL_RCC_OscConfig+0x4dc>)
 80026c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80026cc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80026ce:	f7fe ff7b 	bl	80015c8 <HAL_GetTick>
 80026d2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80026d4:	e008      	b.n	80026e8 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026d6:	f7fe ff77 	bl	80015c8 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e206      	b.n	8002af6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80026e8:	4b25      	ldr	r3, [pc, #148]	@ (8002780 <HAL_RCC_OscConfig+0x4dc>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0f0      	beq.n	80026d6 <HAL_RCC_OscConfig+0x432>
 80026f4:	e018      	b.n	8002728 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80026f6:	4b22      	ldr	r3, [pc, #136]	@ (8002780 <HAL_RCC_OscConfig+0x4dc>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a21      	ldr	r2, [pc, #132]	@ (8002780 <HAL_RCC_OscConfig+0x4dc>)
 80026fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002700:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002702:	f7fe ff61 	bl	80015c8 <HAL_GetTick>
 8002706:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002708:	e008      	b.n	800271c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800270a:	f7fe ff5d 	bl	80015c8 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e1ec      	b.n	8002af6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800271c:	4b18      	ldr	r3, [pc, #96]	@ (8002780 <HAL_RCC_OscConfig+0x4dc>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1f0      	bne.n	800270a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0304 	and.w	r3, r3, #4
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 80af 	beq.w	8002894 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002736:	4b13      	ldr	r3, [pc, #76]	@ (8002784 <HAL_RCC_OscConfig+0x4e0>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a12      	ldr	r2, [pc, #72]	@ (8002784 <HAL_RCC_OscConfig+0x4e0>)
 800273c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002740:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002742:	f7fe ff41 	bl	80015c8 <HAL_GetTick>
 8002746:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002748:	e008      	b.n	800275c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800274a:	f7fe ff3d 	bl	80015c8 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b64      	cmp	r3, #100	@ 0x64
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e1cc      	b.n	8002af6 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800275c:	4b09      	ldr	r3, [pc, #36]	@ (8002784 <HAL_RCC_OscConfig+0x4e0>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002764:	2b00      	cmp	r3, #0
 8002766:	d0f0      	beq.n	800274a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d10b      	bne.n	8002788 <HAL_RCC_OscConfig+0x4e4>
 8002770:	4b03      	ldr	r3, [pc, #12]	@ (8002780 <HAL_RCC_OscConfig+0x4dc>)
 8002772:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002774:	4a02      	ldr	r2, [pc, #8]	@ (8002780 <HAL_RCC_OscConfig+0x4dc>)
 8002776:	f043 0301 	orr.w	r3, r3, #1
 800277a:	6713      	str	r3, [r2, #112]	@ 0x70
 800277c:	e05b      	b.n	8002836 <HAL_RCC_OscConfig+0x592>
 800277e:	bf00      	nop
 8002780:	58024400 	.word	0x58024400
 8002784:	58024800 	.word	0x58024800
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d112      	bne.n	80027b6 <HAL_RCC_OscConfig+0x512>
 8002790:	4b9d      	ldr	r3, [pc, #628]	@ (8002a08 <HAL_RCC_OscConfig+0x764>)
 8002792:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002794:	4a9c      	ldr	r2, [pc, #624]	@ (8002a08 <HAL_RCC_OscConfig+0x764>)
 8002796:	f023 0301 	bic.w	r3, r3, #1
 800279a:	6713      	str	r3, [r2, #112]	@ 0x70
 800279c:	4b9a      	ldr	r3, [pc, #616]	@ (8002a08 <HAL_RCC_OscConfig+0x764>)
 800279e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027a0:	4a99      	ldr	r2, [pc, #612]	@ (8002a08 <HAL_RCC_OscConfig+0x764>)
 80027a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80027a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80027a8:	4b97      	ldr	r3, [pc, #604]	@ (8002a08 <HAL_RCC_OscConfig+0x764>)
 80027aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ac:	4a96      	ldr	r2, [pc, #600]	@ (8002a08 <HAL_RCC_OscConfig+0x764>)
 80027ae:	f023 0304 	bic.w	r3, r3, #4
 80027b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80027b4:	e03f      	b.n	8002836 <HAL_RCC_OscConfig+0x592>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	2b05      	cmp	r3, #5
 80027bc:	d112      	bne.n	80027e4 <HAL_RCC_OscConfig+0x540>
 80027be:	4b92      	ldr	r3, [pc, #584]	@ (8002a08 <HAL_RCC_OscConfig+0x764>)
 80027c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027c2:	4a91      	ldr	r2, [pc, #580]	@ (8002a08 <HAL_RCC_OscConfig+0x764>)
 80027c4:	f043 0304 	orr.w	r3, r3, #4
 80027c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80027ca:	4b8f      	ldr	r3, [pc, #572]	@ (8002a08 <HAL_RCC_OscConfig+0x764>)
 80027cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ce:	4a8e      	ldr	r2, [pc, #568]	@ (8002a08 <HAL_RCC_OscConfig+0x764>)
 80027d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80027d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80027d6:	4b8c      	ldr	r3, [pc, #560]	@ (8002a08 <HAL_RCC_OscConfig+0x764>)
 80027d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027da:	4a8b      	ldr	r2, [pc, #556]	@ (8002a08 <HAL_RCC_OscConfig+0x764>)
 80027dc:	f043 0301 	orr.w	r3, r3, #1
 80027e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80027e2:	e028      	b.n	8002836 <HAL_RCC_OscConfig+0x592>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	2b85      	cmp	r3, #133	@ 0x85
 80027ea:	d112      	bne.n	8002812 <HAL_RCC_OscConfig+0x56e>
 80027ec:	4b86      	ldr	r3, [pc, #536]	@ (8002a08 <HAL_RCC_OscConfig+0x764>)
 80027ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027f0:	4a85      	ldr	r2, [pc, #532]	@ (8002a08 <HAL_RCC_OscConfig+0x764>)
 80027f2:	f043 0304 	orr.w	r3, r3, #4
 80027f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80027f8:	4b83      	ldr	r3, [pc, #524]	@ (8002a08 <HAL_RCC_OscConfig+0x764>)
 80027fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027fc:	4a82      	ldr	r2, [pc, #520]	@ (8002a08 <HAL_RCC_OscConfig+0x764>)
 80027fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002802:	6713      	str	r3, [r2, #112]	@ 0x70
 8002804:	4b80      	ldr	r3, [pc, #512]	@ (8002a08 <HAL_RCC_OscConfig+0x764>)
 8002806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002808:	4a7f      	ldr	r2, [pc, #508]	@ (8002a08 <HAL_RCC_OscConfig+0x764>)
 800280a:	f043 0301 	orr.w	r3, r3, #1
 800280e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002810:	e011      	b.n	8002836 <HAL_RCC_OscConfig+0x592>
 8002812:	4b7d      	ldr	r3, [pc, #500]	@ (8002a08 <HAL_RCC_OscConfig+0x764>)
 8002814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002816:	4a7c      	ldr	r2, [pc, #496]	@ (8002a08 <HAL_RCC_OscConfig+0x764>)
 8002818:	f023 0301 	bic.w	r3, r3, #1
 800281c:	6713      	str	r3, [r2, #112]	@ 0x70
 800281e:	4b7a      	ldr	r3, [pc, #488]	@ (8002a08 <HAL_RCC_OscConfig+0x764>)
 8002820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002822:	4a79      	ldr	r2, [pc, #484]	@ (8002a08 <HAL_RCC_OscConfig+0x764>)
 8002824:	f023 0304 	bic.w	r3, r3, #4
 8002828:	6713      	str	r3, [r2, #112]	@ 0x70
 800282a:	4b77      	ldr	r3, [pc, #476]	@ (8002a08 <HAL_RCC_OscConfig+0x764>)
 800282c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800282e:	4a76      	ldr	r2, [pc, #472]	@ (8002a08 <HAL_RCC_OscConfig+0x764>)
 8002830:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002834:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d015      	beq.n	800286a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800283e:	f7fe fec3 	bl	80015c8 <HAL_GetTick>
 8002842:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002844:	e00a      	b.n	800285c <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002846:	f7fe febf 	bl	80015c8 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002854:	4293      	cmp	r3, r2
 8002856:	d901      	bls.n	800285c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e14c      	b.n	8002af6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800285c:	4b6a      	ldr	r3, [pc, #424]	@ (8002a08 <HAL_RCC_OscConfig+0x764>)
 800285e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d0ee      	beq.n	8002846 <HAL_RCC_OscConfig+0x5a2>
 8002868:	e014      	b.n	8002894 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800286a:	f7fe fead 	bl	80015c8 <HAL_GetTick>
 800286e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002870:	e00a      	b.n	8002888 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002872:	f7fe fea9 	bl	80015c8 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002880:	4293      	cmp	r3, r2
 8002882:	d901      	bls.n	8002888 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e136      	b.n	8002af6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002888:	4b5f      	ldr	r3, [pc, #380]	@ (8002a08 <HAL_RCC_OscConfig+0x764>)
 800288a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1ee      	bne.n	8002872 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002898:	2b00      	cmp	r3, #0
 800289a:	f000 812b 	beq.w	8002af4 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800289e:	4b5a      	ldr	r3, [pc, #360]	@ (8002a08 <HAL_RCC_OscConfig+0x764>)
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80028a6:	2b18      	cmp	r3, #24
 80028a8:	f000 80bb 	beq.w	8002a22 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	f040 8095 	bne.w	80029e0 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028b6:	4b54      	ldr	r3, [pc, #336]	@ (8002a08 <HAL_RCC_OscConfig+0x764>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a53      	ldr	r2, [pc, #332]	@ (8002a08 <HAL_RCC_OscConfig+0x764>)
 80028bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c2:	f7fe fe81 	bl	80015c8 <HAL_GetTick>
 80028c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028c8:	e008      	b.n	80028dc <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ca:	f7fe fe7d 	bl	80015c8 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d901      	bls.n	80028dc <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e10c      	b.n	8002af6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028dc:	4b4a      	ldr	r3, [pc, #296]	@ (8002a08 <HAL_RCC_OscConfig+0x764>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1f0      	bne.n	80028ca <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028e8:	4b47      	ldr	r3, [pc, #284]	@ (8002a08 <HAL_RCC_OscConfig+0x764>)
 80028ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80028ec:	4b47      	ldr	r3, [pc, #284]	@ (8002a0c <HAL_RCC_OscConfig+0x768>)
 80028ee:	4013      	ands	r3, r2
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80028f8:	0112      	lsls	r2, r2, #4
 80028fa:	430a      	orrs	r2, r1
 80028fc:	4942      	ldr	r1, [pc, #264]	@ (8002a08 <HAL_RCC_OscConfig+0x764>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	628b      	str	r3, [r1, #40]	@ 0x28
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002906:	3b01      	subs	r3, #1
 8002908:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002910:	3b01      	subs	r3, #1
 8002912:	025b      	lsls	r3, r3, #9
 8002914:	b29b      	uxth	r3, r3
 8002916:	431a      	orrs	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800291c:	3b01      	subs	r3, #1
 800291e:	041b      	lsls	r3, r3, #16
 8002920:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002924:	431a      	orrs	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800292a:	3b01      	subs	r3, #1
 800292c:	061b      	lsls	r3, r3, #24
 800292e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002932:	4935      	ldr	r1, [pc, #212]	@ (8002a08 <HAL_RCC_OscConfig+0x764>)
 8002934:	4313      	orrs	r3, r2
 8002936:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002938:	4b33      	ldr	r3, [pc, #204]	@ (8002a08 <HAL_RCC_OscConfig+0x764>)
 800293a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800293c:	4a32      	ldr	r2, [pc, #200]	@ (8002a08 <HAL_RCC_OscConfig+0x764>)
 800293e:	f023 0301 	bic.w	r3, r3, #1
 8002942:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002944:	4b30      	ldr	r3, [pc, #192]	@ (8002a08 <HAL_RCC_OscConfig+0x764>)
 8002946:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002948:	4b31      	ldr	r3, [pc, #196]	@ (8002a10 <HAL_RCC_OscConfig+0x76c>)
 800294a:	4013      	ands	r3, r2
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002950:	00d2      	lsls	r2, r2, #3
 8002952:	492d      	ldr	r1, [pc, #180]	@ (8002a08 <HAL_RCC_OscConfig+0x764>)
 8002954:	4313      	orrs	r3, r2
 8002956:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002958:	4b2b      	ldr	r3, [pc, #172]	@ (8002a08 <HAL_RCC_OscConfig+0x764>)
 800295a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800295c:	f023 020c 	bic.w	r2, r3, #12
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002964:	4928      	ldr	r1, [pc, #160]	@ (8002a08 <HAL_RCC_OscConfig+0x764>)
 8002966:	4313      	orrs	r3, r2
 8002968:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800296a:	4b27      	ldr	r3, [pc, #156]	@ (8002a08 <HAL_RCC_OscConfig+0x764>)
 800296c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800296e:	f023 0202 	bic.w	r2, r3, #2
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002976:	4924      	ldr	r1, [pc, #144]	@ (8002a08 <HAL_RCC_OscConfig+0x764>)
 8002978:	4313      	orrs	r3, r2
 800297a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800297c:	4b22      	ldr	r3, [pc, #136]	@ (8002a08 <HAL_RCC_OscConfig+0x764>)
 800297e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002980:	4a21      	ldr	r2, [pc, #132]	@ (8002a08 <HAL_RCC_OscConfig+0x764>)
 8002982:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002986:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002988:	4b1f      	ldr	r3, [pc, #124]	@ (8002a08 <HAL_RCC_OscConfig+0x764>)
 800298a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800298c:	4a1e      	ldr	r2, [pc, #120]	@ (8002a08 <HAL_RCC_OscConfig+0x764>)
 800298e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002992:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002994:	4b1c      	ldr	r3, [pc, #112]	@ (8002a08 <HAL_RCC_OscConfig+0x764>)
 8002996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002998:	4a1b      	ldr	r2, [pc, #108]	@ (8002a08 <HAL_RCC_OscConfig+0x764>)
 800299a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800299e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80029a0:	4b19      	ldr	r3, [pc, #100]	@ (8002a08 <HAL_RCC_OscConfig+0x764>)
 80029a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029a4:	4a18      	ldr	r2, [pc, #96]	@ (8002a08 <HAL_RCC_OscConfig+0x764>)
 80029a6:	f043 0301 	orr.w	r3, r3, #1
 80029aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029ac:	4b16      	ldr	r3, [pc, #88]	@ (8002a08 <HAL_RCC_OscConfig+0x764>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a15      	ldr	r2, [pc, #84]	@ (8002a08 <HAL_RCC_OscConfig+0x764>)
 80029b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b8:	f7fe fe06 	bl	80015c8 <HAL_GetTick>
 80029bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029c0:	f7fe fe02 	bl	80015c8 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e091      	b.n	8002af6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002a08 <HAL_RCC_OscConfig+0x764>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d0f0      	beq.n	80029c0 <HAL_RCC_OscConfig+0x71c>
 80029de:	e089      	b.n	8002af4 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029e0:	4b09      	ldr	r3, [pc, #36]	@ (8002a08 <HAL_RCC_OscConfig+0x764>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a08      	ldr	r2, [pc, #32]	@ (8002a08 <HAL_RCC_OscConfig+0x764>)
 80029e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ec:	f7fe fdec 	bl	80015c8 <HAL_GetTick>
 80029f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029f2:	e00f      	b.n	8002a14 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029f4:	f7fe fde8 	bl	80015c8 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d908      	bls.n	8002a14 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e077      	b.n	8002af6 <HAL_RCC_OscConfig+0x852>
 8002a06:	bf00      	nop
 8002a08:	58024400 	.word	0x58024400
 8002a0c:	fffffc0c 	.word	0xfffffc0c
 8002a10:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a14:	4b3a      	ldr	r3, [pc, #232]	@ (8002b00 <HAL_RCC_OscConfig+0x85c>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1e9      	bne.n	80029f4 <HAL_RCC_OscConfig+0x750>
 8002a20:	e068      	b.n	8002af4 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002a22:	4b37      	ldr	r3, [pc, #220]	@ (8002b00 <HAL_RCC_OscConfig+0x85c>)
 8002a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a26:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002a28:	4b35      	ldr	r3, [pc, #212]	@ (8002b00 <HAL_RCC_OscConfig+0x85c>)
 8002a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2c:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d031      	beq.n	8002a9a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	f003 0203 	and.w	r2, r3, #3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d12a      	bne.n	8002a9a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	091b      	lsrs	r3, r3, #4
 8002a48:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d122      	bne.n	8002a9a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d11a      	bne.n	8002a9a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	0a5b      	lsrs	r3, r3, #9
 8002a68:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a70:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d111      	bne.n	8002a9a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	0c1b      	lsrs	r3, r3, #16
 8002a7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a82:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d108      	bne.n	8002a9a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	0e1b      	lsrs	r3, r3, #24
 8002a8c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a94:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d001      	beq.n	8002a9e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e02b      	b.n	8002af6 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002a9e:	4b18      	ldr	r3, [pc, #96]	@ (8002b00 <HAL_RCC_OscConfig+0x85c>)
 8002aa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aa2:	08db      	lsrs	r3, r3, #3
 8002aa4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002aa8:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d01f      	beq.n	8002af4 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002ab4:	4b12      	ldr	r3, [pc, #72]	@ (8002b00 <HAL_RCC_OscConfig+0x85c>)
 8002ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab8:	4a11      	ldr	r2, [pc, #68]	@ (8002b00 <HAL_RCC_OscConfig+0x85c>)
 8002aba:	f023 0301 	bic.w	r3, r3, #1
 8002abe:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ac0:	f7fe fd82 	bl	80015c8 <HAL_GetTick>
 8002ac4:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002ac6:	bf00      	nop
 8002ac8:	f7fe fd7e 	bl	80015c8 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d0f9      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ad4:	4b0a      	ldr	r3, [pc, #40]	@ (8002b00 <HAL_RCC_OscConfig+0x85c>)
 8002ad6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8002b04 <HAL_RCC_OscConfig+0x860>)
 8002ada:	4013      	ands	r3, r2
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002ae0:	00d2      	lsls	r2, r2, #3
 8002ae2:	4907      	ldr	r1, [pc, #28]	@ (8002b00 <HAL_RCC_OscConfig+0x85c>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002ae8:	4b05      	ldr	r3, [pc, #20]	@ (8002b00 <HAL_RCC_OscConfig+0x85c>)
 8002aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aec:	4a04      	ldr	r2, [pc, #16]	@ (8002b00 <HAL_RCC_OscConfig+0x85c>)
 8002aee:	f043 0301 	orr.w	r3, r3, #1
 8002af2:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3730      	adds	r7, #48	@ 0x30
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	58024400 	.word	0x58024400
 8002b04:	ffff0007 	.word	0xffff0007

08002b08 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d101      	bne.n	8002b1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e19c      	b.n	8002e56 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b1c:	4b8a      	ldr	r3, [pc, #552]	@ (8002d48 <HAL_RCC_ClockConfig+0x240>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 030f 	and.w	r3, r3, #15
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d910      	bls.n	8002b4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b2a:	4b87      	ldr	r3, [pc, #540]	@ (8002d48 <HAL_RCC_ClockConfig+0x240>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f023 020f 	bic.w	r2, r3, #15
 8002b32:	4985      	ldr	r1, [pc, #532]	@ (8002d48 <HAL_RCC_ClockConfig+0x240>)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b3a:	4b83      	ldr	r3, [pc, #524]	@ (8002d48 <HAL_RCC_ClockConfig+0x240>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 030f 	and.w	r3, r3, #15
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d001      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e184      	b.n	8002e56 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0304 	and.w	r3, r3, #4
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d010      	beq.n	8002b7a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	691a      	ldr	r2, [r3, #16]
 8002b5c:	4b7b      	ldr	r3, [pc, #492]	@ (8002d4c <HAL_RCC_ClockConfig+0x244>)
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d908      	bls.n	8002b7a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002b68:	4b78      	ldr	r3, [pc, #480]	@ (8002d4c <HAL_RCC_ClockConfig+0x244>)
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	4975      	ldr	r1, [pc, #468]	@ (8002d4c <HAL_RCC_ClockConfig+0x244>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0308 	and.w	r3, r3, #8
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d010      	beq.n	8002ba8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	695a      	ldr	r2, [r3, #20]
 8002b8a:	4b70      	ldr	r3, [pc, #448]	@ (8002d4c <HAL_RCC_ClockConfig+0x244>)
 8002b8c:	69db      	ldr	r3, [r3, #28]
 8002b8e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d908      	bls.n	8002ba8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002b96:	4b6d      	ldr	r3, [pc, #436]	@ (8002d4c <HAL_RCC_ClockConfig+0x244>)
 8002b98:	69db      	ldr	r3, [r3, #28]
 8002b9a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	496a      	ldr	r1, [pc, #424]	@ (8002d4c <HAL_RCC_ClockConfig+0x244>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0310 	and.w	r3, r3, #16
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d010      	beq.n	8002bd6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	699a      	ldr	r2, [r3, #24]
 8002bb8:	4b64      	ldr	r3, [pc, #400]	@ (8002d4c <HAL_RCC_ClockConfig+0x244>)
 8002bba:	69db      	ldr	r3, [r3, #28]
 8002bbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d908      	bls.n	8002bd6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002bc4:	4b61      	ldr	r3, [pc, #388]	@ (8002d4c <HAL_RCC_ClockConfig+0x244>)
 8002bc6:	69db      	ldr	r3, [r3, #28]
 8002bc8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	495e      	ldr	r1, [pc, #376]	@ (8002d4c <HAL_RCC_ClockConfig+0x244>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0320 	and.w	r3, r3, #32
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d010      	beq.n	8002c04 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	69da      	ldr	r2, [r3, #28]
 8002be6:	4b59      	ldr	r3, [pc, #356]	@ (8002d4c <HAL_RCC_ClockConfig+0x244>)
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d908      	bls.n	8002c04 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002bf2:	4b56      	ldr	r3, [pc, #344]	@ (8002d4c <HAL_RCC_ClockConfig+0x244>)
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	69db      	ldr	r3, [r3, #28]
 8002bfe:	4953      	ldr	r1, [pc, #332]	@ (8002d4c <HAL_RCC_ClockConfig+0x244>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d010      	beq.n	8002c32 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68da      	ldr	r2, [r3, #12]
 8002c14:	4b4d      	ldr	r3, [pc, #308]	@ (8002d4c <HAL_RCC_ClockConfig+0x244>)
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	f003 030f 	and.w	r3, r3, #15
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d908      	bls.n	8002c32 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c20:	4b4a      	ldr	r3, [pc, #296]	@ (8002d4c <HAL_RCC_ClockConfig+0x244>)
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	f023 020f 	bic.w	r2, r3, #15
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	4947      	ldr	r1, [pc, #284]	@ (8002d4c <HAL_RCC_ClockConfig+0x244>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d055      	beq.n	8002cea <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002c3e:	4b43      	ldr	r3, [pc, #268]	@ (8002d4c <HAL_RCC_ClockConfig+0x244>)
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	4940      	ldr	r1, [pc, #256]	@ (8002d4c <HAL_RCC_ClockConfig+0x244>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d107      	bne.n	8002c68 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c58:	4b3c      	ldr	r3, [pc, #240]	@ (8002d4c <HAL_RCC_ClockConfig+0x244>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d121      	bne.n	8002ca8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e0f6      	b.n	8002e56 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	2b03      	cmp	r3, #3
 8002c6e:	d107      	bne.n	8002c80 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c70:	4b36      	ldr	r3, [pc, #216]	@ (8002d4c <HAL_RCC_ClockConfig+0x244>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d115      	bne.n	8002ca8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e0ea      	b.n	8002e56 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d107      	bne.n	8002c98 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c88:	4b30      	ldr	r3, [pc, #192]	@ (8002d4c <HAL_RCC_ClockConfig+0x244>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d109      	bne.n	8002ca8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e0de      	b.n	8002e56 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c98:	4b2c      	ldr	r3, [pc, #176]	@ (8002d4c <HAL_RCC_ClockConfig+0x244>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d101      	bne.n	8002ca8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e0d6      	b.n	8002e56 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ca8:	4b28      	ldr	r3, [pc, #160]	@ (8002d4c <HAL_RCC_ClockConfig+0x244>)
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	f023 0207 	bic.w	r2, r3, #7
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	4925      	ldr	r1, [pc, #148]	@ (8002d4c <HAL_RCC_ClockConfig+0x244>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cba:	f7fe fc85 	bl	80015c8 <HAL_GetTick>
 8002cbe:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cc0:	e00a      	b.n	8002cd8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cc2:	f7fe fc81 	bl	80015c8 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e0be      	b.n	8002e56 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cd8:	4b1c      	ldr	r3, [pc, #112]	@ (8002d4c <HAL_RCC_ClockConfig+0x244>)
 8002cda:	691b      	ldr	r3, [r3, #16]
 8002cdc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d1eb      	bne.n	8002cc2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d010      	beq.n	8002d18 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68da      	ldr	r2, [r3, #12]
 8002cfa:	4b14      	ldr	r3, [pc, #80]	@ (8002d4c <HAL_RCC_ClockConfig+0x244>)
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	f003 030f 	and.w	r3, r3, #15
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d208      	bcs.n	8002d18 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d06:	4b11      	ldr	r3, [pc, #68]	@ (8002d4c <HAL_RCC_ClockConfig+0x244>)
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	f023 020f 	bic.w	r2, r3, #15
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	490e      	ldr	r1, [pc, #56]	@ (8002d4c <HAL_RCC_ClockConfig+0x244>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d18:	4b0b      	ldr	r3, [pc, #44]	@ (8002d48 <HAL_RCC_ClockConfig+0x240>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 030f 	and.w	r3, r3, #15
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d214      	bcs.n	8002d50 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d26:	4b08      	ldr	r3, [pc, #32]	@ (8002d48 <HAL_RCC_ClockConfig+0x240>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f023 020f 	bic.w	r2, r3, #15
 8002d2e:	4906      	ldr	r1, [pc, #24]	@ (8002d48 <HAL_RCC_ClockConfig+0x240>)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d36:	4b04      	ldr	r3, [pc, #16]	@ (8002d48 <HAL_RCC_ClockConfig+0x240>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 030f 	and.w	r3, r3, #15
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d005      	beq.n	8002d50 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e086      	b.n	8002e56 <HAL_RCC_ClockConfig+0x34e>
 8002d48:	52002000 	.word	0x52002000
 8002d4c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d010      	beq.n	8002d7e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	691a      	ldr	r2, [r3, #16]
 8002d60:	4b3f      	ldr	r3, [pc, #252]	@ (8002e60 <HAL_RCC_ClockConfig+0x358>)
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d208      	bcs.n	8002d7e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d6c:	4b3c      	ldr	r3, [pc, #240]	@ (8002e60 <HAL_RCC_ClockConfig+0x358>)
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	4939      	ldr	r1, [pc, #228]	@ (8002e60 <HAL_RCC_ClockConfig+0x358>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0308 	and.w	r3, r3, #8
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d010      	beq.n	8002dac <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	695a      	ldr	r2, [r3, #20]
 8002d8e:	4b34      	ldr	r3, [pc, #208]	@ (8002e60 <HAL_RCC_ClockConfig+0x358>)
 8002d90:	69db      	ldr	r3, [r3, #28]
 8002d92:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d208      	bcs.n	8002dac <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d9a:	4b31      	ldr	r3, [pc, #196]	@ (8002e60 <HAL_RCC_ClockConfig+0x358>)
 8002d9c:	69db      	ldr	r3, [r3, #28]
 8002d9e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	492e      	ldr	r1, [pc, #184]	@ (8002e60 <HAL_RCC_ClockConfig+0x358>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0310 	and.w	r3, r3, #16
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d010      	beq.n	8002dda <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	699a      	ldr	r2, [r3, #24]
 8002dbc:	4b28      	ldr	r3, [pc, #160]	@ (8002e60 <HAL_RCC_ClockConfig+0x358>)
 8002dbe:	69db      	ldr	r3, [r3, #28]
 8002dc0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d208      	bcs.n	8002dda <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002dc8:	4b25      	ldr	r3, [pc, #148]	@ (8002e60 <HAL_RCC_ClockConfig+0x358>)
 8002dca:	69db      	ldr	r3, [r3, #28]
 8002dcc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	4922      	ldr	r1, [pc, #136]	@ (8002e60 <HAL_RCC_ClockConfig+0x358>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0320 	and.w	r3, r3, #32
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d010      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	69da      	ldr	r2, [r3, #28]
 8002dea:	4b1d      	ldr	r3, [pc, #116]	@ (8002e60 <HAL_RCC_ClockConfig+0x358>)
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d208      	bcs.n	8002e08 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002df6:	4b1a      	ldr	r3, [pc, #104]	@ (8002e60 <HAL_RCC_ClockConfig+0x358>)
 8002df8:	6a1b      	ldr	r3, [r3, #32]
 8002dfa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	69db      	ldr	r3, [r3, #28]
 8002e02:	4917      	ldr	r1, [pc, #92]	@ (8002e60 <HAL_RCC_ClockConfig+0x358>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002e08:	f000 f834 	bl	8002e74 <HAL_RCC_GetSysClockFreq>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	4b14      	ldr	r3, [pc, #80]	@ (8002e60 <HAL_RCC_ClockConfig+0x358>)
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	0a1b      	lsrs	r3, r3, #8
 8002e14:	f003 030f 	and.w	r3, r3, #15
 8002e18:	4912      	ldr	r1, [pc, #72]	@ (8002e64 <HAL_RCC_ClockConfig+0x35c>)
 8002e1a:	5ccb      	ldrb	r3, [r1, r3]
 8002e1c:	f003 031f 	and.w	r3, r3, #31
 8002e20:	fa22 f303 	lsr.w	r3, r2, r3
 8002e24:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002e26:	4b0e      	ldr	r3, [pc, #56]	@ (8002e60 <HAL_RCC_ClockConfig+0x358>)
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	f003 030f 	and.w	r3, r3, #15
 8002e2e:	4a0d      	ldr	r2, [pc, #52]	@ (8002e64 <HAL_RCC_ClockConfig+0x35c>)
 8002e30:	5cd3      	ldrb	r3, [r2, r3]
 8002e32:	f003 031f 	and.w	r3, r3, #31
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	fa22 f303 	lsr.w	r3, r2, r3
 8002e3c:	4a0a      	ldr	r2, [pc, #40]	@ (8002e68 <HAL_RCC_ClockConfig+0x360>)
 8002e3e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e40:	4a0a      	ldr	r2, [pc, #40]	@ (8002e6c <HAL_RCC_ClockConfig+0x364>)
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002e46:	4b0a      	ldr	r3, [pc, #40]	@ (8002e70 <HAL_RCC_ClockConfig+0x368>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7fe f814 	bl	8000e78 <HAL_InitTick>
 8002e50:	4603      	mov	r3, r0
 8002e52:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3718      	adds	r7, #24
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	58024400 	.word	0x58024400
 8002e64:	0800e5a8 	.word	0x0800e5a8
 8002e68:	24000004 	.word	0x24000004
 8002e6c:	24000000 	.word	0x24000000
 8002e70:	24000008 	.word	0x24000008

08002e74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b089      	sub	sp, #36	@ 0x24
 8002e78:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e7a:	4bb3      	ldr	r3, [pc, #716]	@ (8003148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e82:	2b18      	cmp	r3, #24
 8002e84:	f200 8155 	bhi.w	8003132 <HAL_RCC_GetSysClockFreq+0x2be>
 8002e88:	a201      	add	r2, pc, #4	@ (adr r2, 8002e90 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e8e:	bf00      	nop
 8002e90:	08002ef5 	.word	0x08002ef5
 8002e94:	08003133 	.word	0x08003133
 8002e98:	08003133 	.word	0x08003133
 8002e9c:	08003133 	.word	0x08003133
 8002ea0:	08003133 	.word	0x08003133
 8002ea4:	08003133 	.word	0x08003133
 8002ea8:	08003133 	.word	0x08003133
 8002eac:	08003133 	.word	0x08003133
 8002eb0:	08002f1b 	.word	0x08002f1b
 8002eb4:	08003133 	.word	0x08003133
 8002eb8:	08003133 	.word	0x08003133
 8002ebc:	08003133 	.word	0x08003133
 8002ec0:	08003133 	.word	0x08003133
 8002ec4:	08003133 	.word	0x08003133
 8002ec8:	08003133 	.word	0x08003133
 8002ecc:	08003133 	.word	0x08003133
 8002ed0:	08002f21 	.word	0x08002f21
 8002ed4:	08003133 	.word	0x08003133
 8002ed8:	08003133 	.word	0x08003133
 8002edc:	08003133 	.word	0x08003133
 8002ee0:	08003133 	.word	0x08003133
 8002ee4:	08003133 	.word	0x08003133
 8002ee8:	08003133 	.word	0x08003133
 8002eec:	08003133 	.word	0x08003133
 8002ef0:	08002f27 	.word	0x08002f27
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ef4:	4b94      	ldr	r3, [pc, #592]	@ (8003148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0320 	and.w	r3, r3, #32
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d009      	beq.n	8002f14 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002f00:	4b91      	ldr	r3, [pc, #580]	@ (8003148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	08db      	lsrs	r3, r3, #3
 8002f06:	f003 0303 	and.w	r3, r3, #3
 8002f0a:	4a90      	ldr	r2, [pc, #576]	@ (800314c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f10:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002f12:	e111      	b.n	8003138 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002f14:	4b8d      	ldr	r3, [pc, #564]	@ (800314c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f16:	61bb      	str	r3, [r7, #24]
      break;
 8002f18:	e10e      	b.n	8003138 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002f1a:	4b8d      	ldr	r3, [pc, #564]	@ (8003150 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002f1c:	61bb      	str	r3, [r7, #24]
      break;
 8002f1e:	e10b      	b.n	8003138 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002f20:	4b8c      	ldr	r3, [pc, #560]	@ (8003154 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002f22:	61bb      	str	r3, [r7, #24]
      break;
 8002f24:	e108      	b.n	8003138 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002f26:	4b88      	ldr	r3, [pc, #544]	@ (8003148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f2a:	f003 0303 	and.w	r3, r3, #3
 8002f2e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002f30:	4b85      	ldr	r3, [pc, #532]	@ (8003148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f34:	091b      	lsrs	r3, r3, #4
 8002f36:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f3a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002f3c:	4b82      	ldr	r3, [pc, #520]	@ (8003148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002f46:	4b80      	ldr	r3, [pc, #512]	@ (8003148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f4a:	08db      	lsrs	r3, r3, #3
 8002f4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	fb02 f303 	mul.w	r3, r2, r3
 8002f56:	ee07 3a90 	vmov	s15, r3
 8002f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f5e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f000 80e1 	beq.w	800312c <HAL_RCC_GetSysClockFreq+0x2b8>
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	f000 8083 	beq.w	8003078 <HAL_RCC_GetSysClockFreq+0x204>
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	f200 80a1 	bhi.w	80030bc <HAL_RCC_GetSysClockFreq+0x248>
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d003      	beq.n	8002f88 <HAL_RCC_GetSysClockFreq+0x114>
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d056      	beq.n	8003034 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002f86:	e099      	b.n	80030bc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f88:	4b6f      	ldr	r3, [pc, #444]	@ (8003148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0320 	and.w	r3, r3, #32
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d02d      	beq.n	8002ff0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002f94:	4b6c      	ldr	r3, [pc, #432]	@ (8003148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	08db      	lsrs	r3, r3, #3
 8002f9a:	f003 0303 	and.w	r3, r3, #3
 8002f9e:	4a6b      	ldr	r2, [pc, #428]	@ (800314c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8002fa4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	ee07 3a90 	vmov	s15, r3
 8002fac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	ee07 3a90 	vmov	s15, r3
 8002fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fbe:	4b62      	ldr	r3, [pc, #392]	@ (8003148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fc6:	ee07 3a90 	vmov	s15, r3
 8002fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fce:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fd2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003158 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002fe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fea:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002fee:	e087      	b.n	8003100 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	ee07 3a90 	vmov	s15, r3
 8002ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ffa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800315c <HAL_RCC_GetSysClockFreq+0x2e8>
 8002ffe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003002:	4b51      	ldr	r3, [pc, #324]	@ (8003148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800300a:	ee07 3a90 	vmov	s15, r3
 800300e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003012:	ed97 6a02 	vldr	s12, [r7, #8]
 8003016:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003158 <HAL_RCC_GetSysClockFreq+0x2e4>
 800301a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800301e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003022:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800302a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800302e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003032:	e065      	b.n	8003100 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	ee07 3a90 	vmov	s15, r3
 800303a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800303e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003160 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003042:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003046:	4b40      	ldr	r3, [pc, #256]	@ (8003148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800304e:	ee07 3a90 	vmov	s15, r3
 8003052:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003056:	ed97 6a02 	vldr	s12, [r7, #8]
 800305a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003158 <HAL_RCC_GetSysClockFreq+0x2e4>
 800305e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003062:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003066:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800306a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800306e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003072:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003076:	e043      	b.n	8003100 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	ee07 3a90 	vmov	s15, r3
 800307e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003082:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003164 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800308a:	4b2f      	ldr	r3, [pc, #188]	@ (8003148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800308c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800308e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003092:	ee07 3a90 	vmov	s15, r3
 8003096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800309a:	ed97 6a02 	vldr	s12, [r7, #8]
 800309e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003158 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80030ba:	e021      	b.n	8003100 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	ee07 3a90 	vmov	s15, r3
 80030c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030c6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003160 <HAL_RCC_GetSysClockFreq+0x2ec>
 80030ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030ce:	4b1e      	ldr	r3, [pc, #120]	@ (8003148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030d6:	ee07 3a90 	vmov	s15, r3
 80030da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030de:	ed97 6a02 	vldr	s12, [r7, #8]
 80030e2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003158 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80030fe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003100:	4b11      	ldr	r3, [pc, #68]	@ (8003148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003104:	0a5b      	lsrs	r3, r3, #9
 8003106:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800310a:	3301      	adds	r3, #1
 800310c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	ee07 3a90 	vmov	s15, r3
 8003114:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003118:	edd7 6a07 	vldr	s13, [r7, #28]
 800311c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003120:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003124:	ee17 3a90 	vmov	r3, s15
 8003128:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800312a:	e005      	b.n	8003138 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800312c:	2300      	movs	r3, #0
 800312e:	61bb      	str	r3, [r7, #24]
      break;
 8003130:	e002      	b.n	8003138 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003132:	4b07      	ldr	r3, [pc, #28]	@ (8003150 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003134:	61bb      	str	r3, [r7, #24]
      break;
 8003136:	bf00      	nop
  }

  return sysclockfreq;
 8003138:	69bb      	ldr	r3, [r7, #24]
}
 800313a:	4618      	mov	r0, r3
 800313c:	3724      	adds	r7, #36	@ 0x24
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	58024400 	.word	0x58024400
 800314c:	03d09000 	.word	0x03d09000
 8003150:	003d0900 	.word	0x003d0900
 8003154:	016e3600 	.word	0x016e3600
 8003158:	46000000 	.word	0x46000000
 800315c:	4c742400 	.word	0x4c742400
 8003160:	4a742400 	.word	0x4a742400
 8003164:	4bb71b00 	.word	0x4bb71b00

08003168 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800316e:	f7ff fe81 	bl	8002e74 <HAL_RCC_GetSysClockFreq>
 8003172:	4602      	mov	r2, r0
 8003174:	4b10      	ldr	r3, [pc, #64]	@ (80031b8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	0a1b      	lsrs	r3, r3, #8
 800317a:	f003 030f 	and.w	r3, r3, #15
 800317e:	490f      	ldr	r1, [pc, #60]	@ (80031bc <HAL_RCC_GetHCLKFreq+0x54>)
 8003180:	5ccb      	ldrb	r3, [r1, r3]
 8003182:	f003 031f 	and.w	r3, r3, #31
 8003186:	fa22 f303 	lsr.w	r3, r2, r3
 800318a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800318c:	4b0a      	ldr	r3, [pc, #40]	@ (80031b8 <HAL_RCC_GetHCLKFreq+0x50>)
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	f003 030f 	and.w	r3, r3, #15
 8003194:	4a09      	ldr	r2, [pc, #36]	@ (80031bc <HAL_RCC_GetHCLKFreq+0x54>)
 8003196:	5cd3      	ldrb	r3, [r2, r3]
 8003198:	f003 031f 	and.w	r3, r3, #31
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	fa22 f303 	lsr.w	r3, r2, r3
 80031a2:	4a07      	ldr	r2, [pc, #28]	@ (80031c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80031a4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80031a6:	4a07      	ldr	r2, [pc, #28]	@ (80031c4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80031ac:	4b04      	ldr	r3, [pc, #16]	@ (80031c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80031ae:	681b      	ldr	r3, [r3, #0]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3708      	adds	r7, #8
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	58024400 	.word	0x58024400
 80031bc:	0800e5a8 	.word	0x0800e5a8
 80031c0:	24000004 	.word	0x24000004
 80031c4:	24000000 	.word	0x24000000

080031c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80031cc:	f7ff ffcc 	bl	8003168 <HAL_RCC_GetHCLKFreq>
 80031d0:	4602      	mov	r2, r0
 80031d2:	4b06      	ldr	r3, [pc, #24]	@ (80031ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	091b      	lsrs	r3, r3, #4
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	4904      	ldr	r1, [pc, #16]	@ (80031f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031de:	5ccb      	ldrb	r3, [r1, r3]
 80031e0:	f003 031f 	and.w	r3, r3, #31
 80031e4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	58024400 	.word	0x58024400
 80031f0:	0800e5a8 	.word	0x0800e5a8

080031f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80031f8:	f7ff ffb6 	bl	8003168 <HAL_RCC_GetHCLKFreq>
 80031fc:	4602      	mov	r2, r0
 80031fe:	4b06      	ldr	r3, [pc, #24]	@ (8003218 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003200:	69db      	ldr	r3, [r3, #28]
 8003202:	0a1b      	lsrs	r3, r3, #8
 8003204:	f003 0307 	and.w	r3, r3, #7
 8003208:	4904      	ldr	r1, [pc, #16]	@ (800321c <HAL_RCC_GetPCLK2Freq+0x28>)
 800320a:	5ccb      	ldrb	r3, [r1, r3]
 800320c:	f003 031f 	and.w	r3, r3, #31
 8003210:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003214:	4618      	mov	r0, r3
 8003216:	bd80      	pop	{r7, pc}
 8003218:	58024400 	.word	0x58024400
 800321c:	0800e5a8 	.word	0x0800e5a8

08003220 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	223f      	movs	r2, #63	@ 0x3f
 800322e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003230:	4b1a      	ldr	r3, [pc, #104]	@ (800329c <HAL_RCC_GetClockConfig+0x7c>)
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	f003 0207 	and.w	r2, r3, #7
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 800323c:	4b17      	ldr	r3, [pc, #92]	@ (800329c <HAL_RCC_GetClockConfig+0x7c>)
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 8003248:	4b14      	ldr	r3, [pc, #80]	@ (800329c <HAL_RCC_GetClockConfig+0x7c>)
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	f003 020f 	and.w	r2, r3, #15
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 8003254:	4b11      	ldr	r3, [pc, #68]	@ (800329c <HAL_RCC_GetClockConfig+0x7c>)
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 8003260:	4b0e      	ldr	r3, [pc, #56]	@ (800329c <HAL_RCC_GetClockConfig+0x7c>)
 8003262:	69db      	ldr	r3, [r3, #28]
 8003264:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 800326c:	4b0b      	ldr	r3, [pc, #44]	@ (800329c <HAL_RCC_GetClockConfig+0x7c>)
 800326e:	69db      	ldr	r3, [r3, #28]
 8003270:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 8003278:	4b08      	ldr	r3, [pc, #32]	@ (800329c <HAL_RCC_GetClockConfig+0x7c>)
 800327a:	6a1b      	ldr	r3, [r3, #32]
 800327c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003284:	4b06      	ldr	r3, [pc, #24]	@ (80032a0 <HAL_RCC_GetClockConfig+0x80>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 020f 	and.w	r2, r3, #15
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	601a      	str	r2, [r3, #0]
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr
 800329c:	58024400 	.word	0x58024400
 80032a0:	52002000 	.word	0x52002000

080032a4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032a8:	b0c8      	sub	sp, #288	@ 0x120
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032b0:	2300      	movs	r3, #0
 80032b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032b6:	2300      	movs	r3, #0
 80032b8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80032bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80032c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80032c8:	2500      	movs	r5, #0
 80032ca:	ea54 0305 	orrs.w	r3, r4, r5
 80032ce:	d049      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80032d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80032d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032d6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80032da:	d02f      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80032dc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80032e0:	d828      	bhi.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80032e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80032e6:	d01a      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80032e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80032ec:	d822      	bhi.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d003      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x56>
 80032f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032f6:	d007      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80032f8:	e01c      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032fa:	4ba7      	ldr	r3, [pc, #668]	@ (8003598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032fe:	4aa6      	ldr	r2, [pc, #664]	@ (8003598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003300:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003304:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003306:	e01a      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003308:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800330c:	3308      	adds	r3, #8
 800330e:	2102      	movs	r1, #2
 8003310:	4618      	mov	r0, r3
 8003312:	f001 fc43 	bl	8004b9c <RCCEx_PLL2_Config>
 8003316:	4603      	mov	r3, r0
 8003318:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800331c:	e00f      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800331e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003322:	3328      	adds	r3, #40	@ 0x28
 8003324:	2102      	movs	r1, #2
 8003326:	4618      	mov	r0, r3
 8003328:	f001 fcea 	bl	8004d00 <RCCEx_PLL3_Config>
 800332c:	4603      	mov	r3, r0
 800332e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003332:	e004      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800333a:	e000      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800333c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800333e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10a      	bne.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003346:	4b94      	ldr	r3, [pc, #592]	@ (8003598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003348:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800334a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800334e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003352:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003354:	4a90      	ldr	r2, [pc, #576]	@ (8003598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003356:	430b      	orrs	r3, r1
 8003358:	6513      	str	r3, [r2, #80]	@ 0x50
 800335a:	e003      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800335c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003360:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003364:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800336c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003370:	f04f 0900 	mov.w	r9, #0
 8003374:	ea58 0309 	orrs.w	r3, r8, r9
 8003378:	d047      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800337a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800337e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003380:	2b04      	cmp	r3, #4
 8003382:	d82a      	bhi.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003384:	a201      	add	r2, pc, #4	@ (adr r2, 800338c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800338a:	bf00      	nop
 800338c:	080033a1 	.word	0x080033a1
 8003390:	080033af 	.word	0x080033af
 8003394:	080033c5 	.word	0x080033c5
 8003398:	080033e3 	.word	0x080033e3
 800339c:	080033e3 	.word	0x080033e3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033a0:	4b7d      	ldr	r3, [pc, #500]	@ (8003598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a4:	4a7c      	ldr	r2, [pc, #496]	@ (8003598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033ac:	e01a      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80033b2:	3308      	adds	r3, #8
 80033b4:	2100      	movs	r1, #0
 80033b6:	4618      	mov	r0, r3
 80033b8:	f001 fbf0 	bl	8004b9c <RCCEx_PLL2_Config>
 80033bc:	4603      	mov	r3, r0
 80033be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033c2:	e00f      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80033c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80033c8:	3328      	adds	r3, #40	@ 0x28
 80033ca:	2100      	movs	r1, #0
 80033cc:	4618      	mov	r0, r3
 80033ce:	f001 fc97 	bl	8004d00 <RCCEx_PLL3_Config>
 80033d2:	4603      	mov	r3, r0
 80033d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033d8:	e004      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80033e0:	e000      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80033e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10a      	bne.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033ec:	4b6a      	ldr	r3, [pc, #424]	@ (8003598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033f0:	f023 0107 	bic.w	r1, r3, #7
 80033f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80033f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033fa:	4a67      	ldr	r2, [pc, #412]	@ (8003598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033fc:	430b      	orrs	r3, r1
 80033fe:	6513      	str	r3, [r2, #80]	@ 0x50
 8003400:	e003      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003402:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003406:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800340a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800340e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003412:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003416:	f04f 0b00 	mov.w	fp, #0
 800341a:	ea5a 030b 	orrs.w	r3, sl, fp
 800341e:	d054      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8003420:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003424:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003426:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800342a:	d036      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800342c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003430:	d82f      	bhi.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003432:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003436:	d032      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003438:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800343c:	d829      	bhi.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800343e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003440:	d02f      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8003442:	2bc0      	cmp	r3, #192	@ 0xc0
 8003444:	d825      	bhi.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003446:	2b80      	cmp	r3, #128	@ 0x80
 8003448:	d018      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800344a:	2b80      	cmp	r3, #128	@ 0x80
 800344c:	d821      	bhi.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800344e:	2b00      	cmp	r3, #0
 8003450:	d002      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003452:	2b40      	cmp	r3, #64	@ 0x40
 8003454:	d007      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8003456:	e01c      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003458:	4b4f      	ldr	r3, [pc, #316]	@ (8003598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800345a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800345c:	4a4e      	ldr	r2, [pc, #312]	@ (8003598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800345e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003462:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003464:	e01e      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003466:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800346a:	3308      	adds	r3, #8
 800346c:	2100      	movs	r1, #0
 800346e:	4618      	mov	r0, r3
 8003470:	f001 fb94 	bl	8004b9c <RCCEx_PLL2_Config>
 8003474:	4603      	mov	r3, r0
 8003476:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800347a:	e013      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800347c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003480:	3328      	adds	r3, #40	@ 0x28
 8003482:	2100      	movs	r1, #0
 8003484:	4618      	mov	r0, r3
 8003486:	f001 fc3b 	bl	8004d00 <RCCEx_PLL3_Config>
 800348a:	4603      	mov	r3, r0
 800348c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003490:	e008      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003498:	e004      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800349a:	bf00      	nop
 800349c:	e002      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800349e:	bf00      	nop
 80034a0:	e000      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80034a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d10a      	bne.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80034ac:	4b3a      	ldr	r3, [pc, #232]	@ (8003598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034b0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80034b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ba:	4a37      	ldr	r2, [pc, #220]	@ (8003598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034bc:	430b      	orrs	r3, r1
 80034be:	6513      	str	r3, [r2, #80]	@ 0x50
 80034c0:	e003      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034c2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80034c6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80034ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80034d6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80034da:	2300      	movs	r3, #0
 80034dc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80034e0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80034e4:	460b      	mov	r3, r1
 80034e6:	4313      	orrs	r3, r2
 80034e8:	d05c      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80034ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034f0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80034f4:	d03b      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80034f6:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80034fa:	d834      	bhi.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80034fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003500:	d037      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8003502:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003506:	d82e      	bhi.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003508:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800350c:	d033      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800350e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003512:	d828      	bhi.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003514:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003518:	d01a      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800351a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800351e:	d822      	bhi.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003520:	2b00      	cmp	r3, #0
 8003522:	d003      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8003524:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003528:	d007      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800352a:	e01c      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800352c:	4b1a      	ldr	r3, [pc, #104]	@ (8003598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800352e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003530:	4a19      	ldr	r2, [pc, #100]	@ (8003598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003532:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003536:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003538:	e01e      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800353a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800353e:	3308      	adds	r3, #8
 8003540:	2100      	movs	r1, #0
 8003542:	4618      	mov	r0, r3
 8003544:	f001 fb2a 	bl	8004b9c <RCCEx_PLL2_Config>
 8003548:	4603      	mov	r3, r0
 800354a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800354e:	e013      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003550:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003554:	3328      	adds	r3, #40	@ 0x28
 8003556:	2100      	movs	r1, #0
 8003558:	4618      	mov	r0, r3
 800355a:	f001 fbd1 	bl	8004d00 <RCCEx_PLL3_Config>
 800355e:	4603      	mov	r3, r0
 8003560:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003564:	e008      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800356c:	e004      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800356e:	bf00      	nop
 8003570:	e002      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003572:	bf00      	nop
 8003574:	e000      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003576:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003578:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800357c:	2b00      	cmp	r3, #0
 800357e:	d10d      	bne.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003580:	4b05      	ldr	r3, [pc, #20]	@ (8003598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003582:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003584:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8003588:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800358c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800358e:	4a02      	ldr	r2, [pc, #8]	@ (8003598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003590:	430b      	orrs	r3, r1
 8003592:	6513      	str	r3, [r2, #80]	@ 0x50
 8003594:	e006      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8003596:	bf00      	nop
 8003598:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800359c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80035a0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80035a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ac:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80035b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80035b4:	2300      	movs	r3, #0
 80035b6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80035ba:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80035be:	460b      	mov	r3, r1
 80035c0:	4313      	orrs	r3, r2
 80035c2:	d03a      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80035c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035ca:	2b30      	cmp	r3, #48	@ 0x30
 80035cc:	d01f      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80035ce:	2b30      	cmp	r3, #48	@ 0x30
 80035d0:	d819      	bhi.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80035d2:	2b20      	cmp	r3, #32
 80035d4:	d00c      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80035d6:	2b20      	cmp	r3, #32
 80035d8:	d815      	bhi.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d019      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80035de:	2b10      	cmp	r3, #16
 80035e0:	d111      	bne.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035e2:	4bae      	ldr	r3, [pc, #696]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80035e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e6:	4aad      	ldr	r2, [pc, #692]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80035e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80035ee:	e011      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80035f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035f4:	3308      	adds	r3, #8
 80035f6:	2102      	movs	r1, #2
 80035f8:	4618      	mov	r0, r3
 80035fa:	f001 facf 	bl	8004b9c <RCCEx_PLL2_Config>
 80035fe:	4603      	mov	r3, r0
 8003600:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003604:	e006      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800360c:	e002      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800360e:	bf00      	nop
 8003610:	e000      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003612:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003614:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003618:	2b00      	cmp	r3, #0
 800361a:	d10a      	bne.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800361c:	4b9f      	ldr	r3, [pc, #636]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800361e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003620:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003624:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800362a:	4a9c      	ldr	r2, [pc, #624]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800362c:	430b      	orrs	r3, r1
 800362e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003630:	e003      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003632:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003636:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800363a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800363e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003642:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003646:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800364a:	2300      	movs	r3, #0
 800364c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003650:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003654:	460b      	mov	r3, r1
 8003656:	4313      	orrs	r3, r2
 8003658:	d051      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800365a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800365e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003660:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003664:	d035      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003666:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800366a:	d82e      	bhi.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x426>
 800366c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003670:	d031      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8003672:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003676:	d828      	bhi.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003678:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800367c:	d01a      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800367e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003682:	d822      	bhi.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003684:	2b00      	cmp	r3, #0
 8003686:	d003      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8003688:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800368c:	d007      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800368e:	e01c      	b.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003690:	4b82      	ldr	r3, [pc, #520]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003694:	4a81      	ldr	r2, [pc, #516]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003696:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800369a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800369c:	e01c      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800369e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036a2:	3308      	adds	r3, #8
 80036a4:	2100      	movs	r1, #0
 80036a6:	4618      	mov	r0, r3
 80036a8:	f001 fa78 	bl	8004b9c <RCCEx_PLL2_Config>
 80036ac:	4603      	mov	r3, r0
 80036ae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80036b2:	e011      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036b8:	3328      	adds	r3, #40	@ 0x28
 80036ba:	2100      	movs	r1, #0
 80036bc:	4618      	mov	r0, r3
 80036be:	f001 fb1f 	bl	8004d00 <RCCEx_PLL3_Config>
 80036c2:	4603      	mov	r3, r0
 80036c4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80036c8:	e006      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80036d0:	e002      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80036d2:	bf00      	nop
 80036d4:	e000      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80036d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10a      	bne.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80036e0:	4b6e      	ldr	r3, [pc, #440]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036e4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80036e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036ee:	4a6b      	ldr	r2, [pc, #428]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036f0:	430b      	orrs	r3, r1
 80036f2:	6513      	str	r3, [r2, #80]	@ 0x50
 80036f4:	e003      	b.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80036fa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80036fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003706:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800370a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800370e:	2300      	movs	r3, #0
 8003710:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003714:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003718:	460b      	mov	r3, r1
 800371a:	4313      	orrs	r3, r2
 800371c:	d053      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800371e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003722:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003724:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003728:	d033      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800372a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800372e:	d82c      	bhi.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003730:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003734:	d02f      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8003736:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800373a:	d826      	bhi.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800373c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003740:	d02b      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003742:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003746:	d820      	bhi.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003748:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800374c:	d012      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800374e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003752:	d81a      	bhi.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003754:	2b00      	cmp	r3, #0
 8003756:	d022      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8003758:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800375c:	d115      	bne.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800375e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003762:	3308      	adds	r3, #8
 8003764:	2101      	movs	r1, #1
 8003766:	4618      	mov	r0, r3
 8003768:	f001 fa18 	bl	8004b9c <RCCEx_PLL2_Config>
 800376c:	4603      	mov	r3, r0
 800376e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003772:	e015      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003774:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003778:	3328      	adds	r3, #40	@ 0x28
 800377a:	2101      	movs	r1, #1
 800377c:	4618      	mov	r0, r3
 800377e:	f001 fabf 	bl	8004d00 <RCCEx_PLL3_Config>
 8003782:	4603      	mov	r3, r0
 8003784:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003788:	e00a      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003790:	e006      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003792:	bf00      	nop
 8003794:	e004      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003796:	bf00      	nop
 8003798:	e002      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800379a:	bf00      	nop
 800379c:	e000      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800379e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d10a      	bne.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80037a8:	4b3c      	ldr	r3, [pc, #240]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037ac:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80037b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037b6:	4a39      	ldr	r2, [pc, #228]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037b8:	430b      	orrs	r3, r1
 80037ba:	6513      	str	r3, [r2, #80]	@ 0x50
 80037bc:	e003      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037be:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80037c2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80037c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ce:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80037d2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80037d6:	2300      	movs	r3, #0
 80037d8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80037dc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80037e0:	460b      	mov	r3, r1
 80037e2:	4313      	orrs	r3, r2
 80037e4:	d060      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80037e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80037ee:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80037f2:	d039      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80037f4:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80037f8:	d832      	bhi.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80037fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037fe:	d035      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003800:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003804:	d82c      	bhi.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003806:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800380a:	d031      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800380c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003810:	d826      	bhi.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003812:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003816:	d02d      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003818:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800381c:	d820      	bhi.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800381e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003822:	d012      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003824:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003828:	d81a      	bhi.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800382a:	2b00      	cmp	r3, #0
 800382c:	d024      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800382e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003832:	d115      	bne.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003834:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003838:	3308      	adds	r3, #8
 800383a:	2101      	movs	r1, #1
 800383c:	4618      	mov	r0, r3
 800383e:	f001 f9ad 	bl	8004b9c <RCCEx_PLL2_Config>
 8003842:	4603      	mov	r3, r0
 8003844:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003848:	e017      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800384a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800384e:	3328      	adds	r3, #40	@ 0x28
 8003850:	2101      	movs	r1, #1
 8003852:	4618      	mov	r0, r3
 8003854:	f001 fa54 	bl	8004d00 <RCCEx_PLL3_Config>
 8003858:	4603      	mov	r3, r0
 800385a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800385e:	e00c      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003866:	e008      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003868:	bf00      	nop
 800386a:	e006      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800386c:	bf00      	nop
 800386e:	e004      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003870:	bf00      	nop
 8003872:	e002      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003874:	bf00      	nop
 8003876:	e000      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003878:	bf00      	nop
    }

    if (ret == HAL_OK)
 800387a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800387e:	2b00      	cmp	r3, #0
 8003880:	d10e      	bne.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003882:	4b06      	ldr	r3, [pc, #24]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003886:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800388a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800388e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003892:	4a02      	ldr	r2, [pc, #8]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003894:	430b      	orrs	r3, r1
 8003896:	6593      	str	r3, [r2, #88]	@ 0x58
 8003898:	e006      	b.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800389a:	bf00      	nop
 800389c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80038a4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80038a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80038b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80038b8:	2300      	movs	r3, #0
 80038ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80038be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80038c2:	460b      	mov	r3, r1
 80038c4:	4313      	orrs	r3, r2
 80038c6:	d037      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80038c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038d2:	d00e      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80038d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038d8:	d816      	bhi.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d018      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80038de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80038e2:	d111      	bne.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038e4:	4bc4      	ldr	r3, [pc, #784]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038e8:	4ac3      	ldr	r2, [pc, #780]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80038f0:	e00f      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038f6:	3308      	adds	r3, #8
 80038f8:	2101      	movs	r1, #1
 80038fa:	4618      	mov	r0, r3
 80038fc:	f001 f94e 	bl	8004b9c <RCCEx_PLL2_Config>
 8003900:	4603      	mov	r3, r0
 8003902:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003906:	e004      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800390e:	e000      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003910:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003912:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10a      	bne.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800391a:	4bb7      	ldr	r3, [pc, #732]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800391c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800391e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003922:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003926:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003928:	4ab3      	ldr	r2, [pc, #716]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800392a:	430b      	orrs	r3, r1
 800392c:	6513      	str	r3, [r2, #80]	@ 0x50
 800392e:	e003      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003930:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003934:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003938:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800393c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003940:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003944:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003948:	2300      	movs	r3, #0
 800394a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800394e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003952:	460b      	mov	r3, r1
 8003954:	4313      	orrs	r3, r2
 8003956:	d039      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003958:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800395c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800395e:	2b03      	cmp	r3, #3
 8003960:	d81c      	bhi.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003962:	a201      	add	r2, pc, #4	@ (adr r2, 8003968 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003968:	080039a5 	.word	0x080039a5
 800396c:	08003979 	.word	0x08003979
 8003970:	08003987 	.word	0x08003987
 8003974:	080039a5 	.word	0x080039a5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003978:	4b9f      	ldr	r3, [pc, #636]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800397a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800397c:	4a9e      	ldr	r2, [pc, #632]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800397e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003982:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003984:	e00f      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003986:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800398a:	3308      	adds	r3, #8
 800398c:	2102      	movs	r1, #2
 800398e:	4618      	mov	r0, r3
 8003990:	f001 f904 	bl	8004b9c <RCCEx_PLL2_Config>
 8003994:	4603      	mov	r3, r0
 8003996:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800399a:	e004      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80039a2:	e000      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80039a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039a6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d10a      	bne.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80039ae:	4b92      	ldr	r3, [pc, #584]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039b2:	f023 0103 	bic.w	r1, r3, #3
 80039b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039bc:	4a8e      	ldr	r2, [pc, #568]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039be:	430b      	orrs	r3, r1
 80039c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039c2:	e003      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039c4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80039c8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80039d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80039dc:	2300      	movs	r3, #0
 80039de:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80039e2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80039e6:	460b      	mov	r3, r1
 80039e8:	4313      	orrs	r3, r2
 80039ea:	f000 8099 	beq.w	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039ee:	4b83      	ldr	r3, [pc, #524]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a82      	ldr	r2, [pc, #520]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80039f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039fa:	f7fd fde5 	bl	80015c8 <HAL_GetTick>
 80039fe:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a02:	e00b      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a04:	f7fd fde0 	bl	80015c8 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	2b64      	cmp	r3, #100	@ 0x64
 8003a12:	d903      	bls.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003a1a:	e005      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a1c:	4b77      	ldr	r3, [pc, #476]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d0ed      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003a28:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d173      	bne.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003a30:	4b71      	ldr	r3, [pc, #452]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a32:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003a34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a38:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003a3c:	4053      	eors	r3, r2
 8003a3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d015      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a46:	4b6c      	ldr	r3, [pc, #432]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a4e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a52:	4b69      	ldr	r3, [pc, #420]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a56:	4a68      	ldr	r2, [pc, #416]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a5c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a5e:	4b66      	ldr	r3, [pc, #408]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a62:	4a65      	ldr	r2, [pc, #404]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a68:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003a6a:	4a63      	ldr	r2, [pc, #396]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a70:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003a72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a76:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003a7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a7e:	d118      	bne.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a80:	f7fd fda2 	bl	80015c8 <HAL_GetTick>
 8003a84:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a88:	e00d      	b.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a8a:	f7fd fd9d 	bl	80015c8 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003a94:	1ad2      	subs	r2, r2, r3
 8003a96:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d903      	bls.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8003aa4:	e005      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003aa6:	4b54      	ldr	r3, [pc, #336]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d0eb      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003ab2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d129      	bne.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003aba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003abe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003ac2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ac6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003aca:	d10e      	bne.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003acc:	4b4a      	ldr	r3, [pc, #296]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003ad4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ad8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003adc:	091a      	lsrs	r2, r3, #4
 8003ade:	4b48      	ldr	r3, [pc, #288]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	4a45      	ldr	r2, [pc, #276]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ae4:	430b      	orrs	r3, r1
 8003ae6:	6113      	str	r3, [r2, #16]
 8003ae8:	e005      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003aea:	4b43      	ldr	r3, [pc, #268]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	4a42      	ldr	r2, [pc, #264]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003af0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003af4:	6113      	str	r3, [r2, #16]
 8003af6:	4b40      	ldr	r3, [pc, #256]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003af8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003afa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003afe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b06:	4a3c      	ldr	r2, [pc, #240]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b08:	430b      	orrs	r3, r1
 8003b0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b0c:	e008      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b0e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003b12:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8003b16:	e003      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b18:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003b1c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003b20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b28:	f002 0301 	and.w	r3, r2, #1
 8003b2c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b30:	2300      	movs	r3, #0
 8003b32:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b36:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	f000 8090 	beq.w	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003b42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b4a:	2b28      	cmp	r3, #40	@ 0x28
 8003b4c:	d870      	bhi.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003b4e:	a201      	add	r2, pc, #4	@ (adr r2, 8003b54 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b54:	08003c39 	.word	0x08003c39
 8003b58:	08003c31 	.word	0x08003c31
 8003b5c:	08003c31 	.word	0x08003c31
 8003b60:	08003c31 	.word	0x08003c31
 8003b64:	08003c31 	.word	0x08003c31
 8003b68:	08003c31 	.word	0x08003c31
 8003b6c:	08003c31 	.word	0x08003c31
 8003b70:	08003c31 	.word	0x08003c31
 8003b74:	08003c05 	.word	0x08003c05
 8003b78:	08003c31 	.word	0x08003c31
 8003b7c:	08003c31 	.word	0x08003c31
 8003b80:	08003c31 	.word	0x08003c31
 8003b84:	08003c31 	.word	0x08003c31
 8003b88:	08003c31 	.word	0x08003c31
 8003b8c:	08003c31 	.word	0x08003c31
 8003b90:	08003c31 	.word	0x08003c31
 8003b94:	08003c1b 	.word	0x08003c1b
 8003b98:	08003c31 	.word	0x08003c31
 8003b9c:	08003c31 	.word	0x08003c31
 8003ba0:	08003c31 	.word	0x08003c31
 8003ba4:	08003c31 	.word	0x08003c31
 8003ba8:	08003c31 	.word	0x08003c31
 8003bac:	08003c31 	.word	0x08003c31
 8003bb0:	08003c31 	.word	0x08003c31
 8003bb4:	08003c39 	.word	0x08003c39
 8003bb8:	08003c31 	.word	0x08003c31
 8003bbc:	08003c31 	.word	0x08003c31
 8003bc0:	08003c31 	.word	0x08003c31
 8003bc4:	08003c31 	.word	0x08003c31
 8003bc8:	08003c31 	.word	0x08003c31
 8003bcc:	08003c31 	.word	0x08003c31
 8003bd0:	08003c31 	.word	0x08003c31
 8003bd4:	08003c39 	.word	0x08003c39
 8003bd8:	08003c31 	.word	0x08003c31
 8003bdc:	08003c31 	.word	0x08003c31
 8003be0:	08003c31 	.word	0x08003c31
 8003be4:	08003c31 	.word	0x08003c31
 8003be8:	08003c31 	.word	0x08003c31
 8003bec:	08003c31 	.word	0x08003c31
 8003bf0:	08003c31 	.word	0x08003c31
 8003bf4:	08003c39 	.word	0x08003c39
 8003bf8:	58024400 	.word	0x58024400
 8003bfc:	58024800 	.word	0x58024800
 8003c00:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c08:	3308      	adds	r3, #8
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f000 ffc5 	bl	8004b9c <RCCEx_PLL2_Config>
 8003c12:	4603      	mov	r3, r0
 8003c14:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003c18:	e00f      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c1e:	3328      	adds	r3, #40	@ 0x28
 8003c20:	2101      	movs	r1, #1
 8003c22:	4618      	mov	r0, r3
 8003c24:	f001 f86c 	bl	8004d00 <RCCEx_PLL3_Config>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003c2e:	e004      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003c36:	e000      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003c38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c3a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10b      	bne.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003c42:	4bc0      	ldr	r3, [pc, #768]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003c44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c46:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003c4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c52:	4abc      	ldr	r2, [pc, #752]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003c54:	430b      	orrs	r3, r1
 8003c56:	6553      	str	r3, [r2, #84]	@ 0x54
 8003c58:	e003      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c5a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003c5e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003c62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6a:	f002 0302 	and.w	r3, r2, #2
 8003c6e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c72:	2300      	movs	r3, #0
 8003c74:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003c78:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	d043      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003c82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c8a:	2b05      	cmp	r3, #5
 8003c8c:	d824      	bhi.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8003c8e:	a201      	add	r2, pc, #4	@ (adr r2, 8003c94 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8003c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c94:	08003ce1 	.word	0x08003ce1
 8003c98:	08003cad 	.word	0x08003cad
 8003c9c:	08003cc3 	.word	0x08003cc3
 8003ca0:	08003ce1 	.word	0x08003ce1
 8003ca4:	08003ce1 	.word	0x08003ce1
 8003ca8:	08003ce1 	.word	0x08003ce1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003cac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003cb0:	3308      	adds	r3, #8
 8003cb2:	2101      	movs	r1, #1
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f000 ff71 	bl	8004b9c <RCCEx_PLL2_Config>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003cc0:	e00f      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003cc6:	3328      	adds	r3, #40	@ 0x28
 8003cc8:	2101      	movs	r1, #1
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f001 f818 	bl	8004d00 <RCCEx_PLL3_Config>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003cd6:	e004      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003cde:	e000      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8003ce0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ce2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10b      	bne.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003cea:	4b96      	ldr	r3, [pc, #600]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003cec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cee:	f023 0107 	bic.w	r1, r3, #7
 8003cf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003cf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cfa:	4a92      	ldr	r2, [pc, #584]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003cfc:	430b      	orrs	r3, r1
 8003cfe:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d00:	e003      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d02:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003d06:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d12:	f002 0304 	and.w	r3, r2, #4
 8003d16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d20:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003d24:	460b      	mov	r3, r1
 8003d26:	4313      	orrs	r3, r2
 8003d28:	d043      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003d2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d32:	2b05      	cmp	r3, #5
 8003d34:	d824      	bhi.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8003d36:	a201      	add	r2, pc, #4	@ (adr r2, 8003d3c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8003d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d3c:	08003d89 	.word	0x08003d89
 8003d40:	08003d55 	.word	0x08003d55
 8003d44:	08003d6b 	.word	0x08003d6b
 8003d48:	08003d89 	.word	0x08003d89
 8003d4c:	08003d89 	.word	0x08003d89
 8003d50:	08003d89 	.word	0x08003d89
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d58:	3308      	adds	r3, #8
 8003d5a:	2101      	movs	r1, #1
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f000 ff1d 	bl	8004b9c <RCCEx_PLL2_Config>
 8003d62:	4603      	mov	r3, r0
 8003d64:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003d68:	e00f      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d6e:	3328      	adds	r3, #40	@ 0x28
 8003d70:	2101      	movs	r1, #1
 8003d72:	4618      	mov	r0, r3
 8003d74:	f000 ffc4 	bl	8004d00 <RCCEx_PLL3_Config>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003d7e:	e004      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003d86:	e000      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8003d88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d8a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d10b      	bne.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d92:	4b6c      	ldr	r3, [pc, #432]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d96:	f023 0107 	bic.w	r1, r3, #7
 8003d9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003da2:	4a68      	ldr	r2, [pc, #416]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003da4:	430b      	orrs	r3, r1
 8003da6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003da8:	e003      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003daa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003dae:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003db2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dba:	f002 0320 	and.w	r3, r2, #32
 8003dbe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003dc8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003dcc:	460b      	mov	r3, r1
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	d055      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003dd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003dd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003dda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003dde:	d033      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003de0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003de4:	d82c      	bhi.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003de6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dea:	d02f      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003dec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003df0:	d826      	bhi.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003df2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003df6:	d02b      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003df8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003dfc:	d820      	bhi.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003dfe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e02:	d012      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8003e04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e08:	d81a      	bhi.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d022      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8003e0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e12:	d115      	bne.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e18:	3308      	adds	r3, #8
 8003e1a:	2100      	movs	r1, #0
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f000 febd 	bl	8004b9c <RCCEx_PLL2_Config>
 8003e22:	4603      	mov	r3, r0
 8003e24:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003e28:	e015      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e2e:	3328      	adds	r3, #40	@ 0x28
 8003e30:	2102      	movs	r1, #2
 8003e32:	4618      	mov	r0, r3
 8003e34:	f000 ff64 	bl	8004d00 <RCCEx_PLL3_Config>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003e3e:	e00a      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003e46:	e006      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003e48:	bf00      	nop
 8003e4a:	e004      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003e4c:	bf00      	nop
 8003e4e:	e002      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003e50:	bf00      	nop
 8003e52:	e000      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003e54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e56:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10b      	bne.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e5e:	4b39      	ldr	r3, [pc, #228]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003e60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e62:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003e66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e6e:	4a35      	ldr	r2, [pc, #212]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003e70:	430b      	orrs	r3, r1
 8003e72:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e74:	e003      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e76:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003e7a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003e7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e86:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003e8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003e8e:	2300      	movs	r3, #0
 8003e90:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003e94:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003e98:	460b      	mov	r3, r1
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	d058      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003e9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ea2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003ea6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003eaa:	d033      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003eac:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003eb0:	d82c      	bhi.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003eb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eb6:	d02f      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003eb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ebc:	d826      	bhi.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003ebe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ec2:	d02b      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003ec4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ec8:	d820      	bhi.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003eca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ece:	d012      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8003ed0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ed4:	d81a      	bhi.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d022      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8003eda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ede:	d115      	bne.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ee0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ee4:	3308      	adds	r3, #8
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f000 fe57 	bl	8004b9c <RCCEx_PLL2_Config>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003ef4:	e015      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ef6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003efa:	3328      	adds	r3, #40	@ 0x28
 8003efc:	2102      	movs	r1, #2
 8003efe:	4618      	mov	r0, r3
 8003f00:	f000 fefe 	bl	8004d00 <RCCEx_PLL3_Config>
 8003f04:	4603      	mov	r3, r0
 8003f06:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003f0a:	e00a      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003f12:	e006      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003f14:	bf00      	nop
 8003f16:	e004      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003f18:	bf00      	nop
 8003f1a:	e002      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003f1c:	bf00      	nop
 8003f1e:	e000      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003f20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f22:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10e      	bne.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f2a:	4b06      	ldr	r3, [pc, #24]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f2e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003f32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f36:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003f3a:	4a02      	ldr	r2, [pc, #8]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003f3c:	430b      	orrs	r3, r1
 8003f3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f40:	e006      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8003f42:	bf00      	nop
 8003f44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f48:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003f4c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003f50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f58:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003f5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003f60:	2300      	movs	r3, #0
 8003f62:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003f66:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	d055      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003f70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f74:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003f78:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003f7c:	d033      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003f7e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003f82:	d82c      	bhi.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003f84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f88:	d02f      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003f8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f8e:	d826      	bhi.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003f90:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003f94:	d02b      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003f96:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003f9a:	d820      	bhi.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003f9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fa0:	d012      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8003fa2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fa6:	d81a      	bhi.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d022      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8003fac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fb0:	d115      	bne.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fb6:	3308      	adds	r3, #8
 8003fb8:	2100      	movs	r1, #0
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 fdee 	bl	8004b9c <RCCEx_PLL2_Config>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003fc6:	e015      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fcc:	3328      	adds	r3, #40	@ 0x28
 8003fce:	2102      	movs	r1, #2
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f000 fe95 	bl	8004d00 <RCCEx_PLL3_Config>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003fdc:	e00a      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003fe4:	e006      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003fe6:	bf00      	nop
 8003fe8:	e004      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003fea:	bf00      	nop
 8003fec:	e002      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003fee:	bf00      	nop
 8003ff0:	e000      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003ff2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ff4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d10b      	bne.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003ffc:	4ba1      	ldr	r3, [pc, #644]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003ffe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004000:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004004:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004008:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800400c:	4a9d      	ldr	r2, [pc, #628]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800400e:	430b      	orrs	r3, r1
 8004010:	6593      	str	r3, [r2, #88]	@ 0x58
 8004012:	e003      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004014:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004018:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800401c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004024:	f002 0308 	and.w	r3, r2, #8
 8004028:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800402c:	2300      	movs	r3, #0
 800402e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004032:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004036:	460b      	mov	r3, r1
 8004038:	4313      	orrs	r3, r2
 800403a:	d01e      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800403c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004040:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004044:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004048:	d10c      	bne.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800404a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800404e:	3328      	adds	r3, #40	@ 0x28
 8004050:	2102      	movs	r1, #2
 8004052:	4618      	mov	r0, r3
 8004054:	f000 fe54 	bl	8004d00 <RCCEx_PLL3_Config>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d002      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004064:	4b87      	ldr	r3, [pc, #540]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004066:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004068:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800406c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004070:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004074:	4a83      	ldr	r2, [pc, #524]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004076:	430b      	orrs	r3, r1
 8004078:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800407a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800407e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004082:	f002 0310 	and.w	r3, r2, #16
 8004086:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800408a:	2300      	movs	r3, #0
 800408c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004090:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004094:	460b      	mov	r3, r1
 8004096:	4313      	orrs	r3, r2
 8004098:	d01e      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800409a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800409e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80040a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040a6:	d10c      	bne.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80040a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040ac:	3328      	adds	r3, #40	@ 0x28
 80040ae:	2102      	movs	r1, #2
 80040b0:	4618      	mov	r0, r3
 80040b2:	f000 fe25 	bl	8004d00 <RCCEx_PLL3_Config>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d002      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040c2:	4b70      	ldr	r3, [pc, #448]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80040c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040c6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80040ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80040d2:	4a6c      	ldr	r2, [pc, #432]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80040d4:	430b      	orrs	r3, r1
 80040d6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80040e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80040e8:	2300      	movs	r3, #0
 80040ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80040ee:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80040f2:	460b      	mov	r3, r1
 80040f4:	4313      	orrs	r3, r2
 80040f6:	d03e      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80040f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040fc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004100:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004104:	d022      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8004106:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800410a:	d81b      	bhi.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800410c:	2b00      	cmp	r3, #0
 800410e:	d003      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8004110:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004114:	d00b      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8004116:	e015      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004118:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800411c:	3308      	adds	r3, #8
 800411e:	2100      	movs	r1, #0
 8004120:	4618      	mov	r0, r3
 8004122:	f000 fd3b 	bl	8004b9c <RCCEx_PLL2_Config>
 8004126:	4603      	mov	r3, r0
 8004128:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800412c:	e00f      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800412e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004132:	3328      	adds	r3, #40	@ 0x28
 8004134:	2102      	movs	r1, #2
 8004136:	4618      	mov	r0, r3
 8004138:	f000 fde2 	bl	8004d00 <RCCEx_PLL3_Config>
 800413c:	4603      	mov	r3, r0
 800413e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004142:	e004      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800414a:	e000      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800414c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800414e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10b      	bne.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004156:	4b4b      	ldr	r3, [pc, #300]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800415a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800415e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004162:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004166:	4a47      	ldr	r2, [pc, #284]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004168:	430b      	orrs	r3, r1
 800416a:	6593      	str	r3, [r2, #88]	@ 0x58
 800416c:	e003      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800416e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004172:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004176:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800417a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800417e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004182:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004184:	2300      	movs	r3, #0
 8004186:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004188:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800418c:	460b      	mov	r3, r1
 800418e:	4313      	orrs	r3, r2
 8004190:	d03b      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004192:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800419a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800419e:	d01f      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80041a0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80041a4:	d818      	bhi.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80041a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041aa:	d003      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80041ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80041b0:	d007      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80041b2:	e011      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041b4:	4b33      	ldr	r3, [pc, #204]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80041b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b8:	4a32      	ldr	r2, [pc, #200]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80041ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80041c0:	e00f      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041c6:	3328      	adds	r3, #40	@ 0x28
 80041c8:	2101      	movs	r1, #1
 80041ca:	4618      	mov	r0, r3
 80041cc:	f000 fd98 	bl	8004d00 <RCCEx_PLL3_Config>
 80041d0:	4603      	mov	r3, r0
 80041d2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80041d6:	e004      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80041de:	e000      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80041e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041e2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10b      	bne.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041ea:	4b26      	ldr	r3, [pc, #152]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80041ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80041f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041fa:	4a22      	ldr	r2, [pc, #136]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80041fc:	430b      	orrs	r3, r1
 80041fe:	6553      	str	r3, [r2, #84]	@ 0x54
 8004200:	e003      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004202:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004206:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800420a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800420e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004212:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004216:	673b      	str	r3, [r7, #112]	@ 0x70
 8004218:	2300      	movs	r3, #0
 800421a:	677b      	str	r3, [r7, #116]	@ 0x74
 800421c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004220:	460b      	mov	r3, r1
 8004222:	4313      	orrs	r3, r2
 8004224:	d034      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004226:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800422a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800422c:	2b00      	cmp	r3, #0
 800422e:	d003      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8004230:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004234:	d007      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8004236:	e011      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004238:	4b12      	ldr	r3, [pc, #72]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800423a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800423c:	4a11      	ldr	r2, [pc, #68]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800423e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004242:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004244:	e00e      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004246:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800424a:	3308      	adds	r3, #8
 800424c:	2102      	movs	r1, #2
 800424e:	4618      	mov	r0, r3
 8004250:	f000 fca4 	bl	8004b9c <RCCEx_PLL2_Config>
 8004254:	4603      	mov	r3, r0
 8004256:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800425a:	e003      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004262:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004264:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004268:	2b00      	cmp	r3, #0
 800426a:	d10d      	bne.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800426c:	4b05      	ldr	r3, [pc, #20]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800426e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004270:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004274:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004278:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800427a:	4a02      	ldr	r2, [pc, #8]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800427c:	430b      	orrs	r3, r1
 800427e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004280:	e006      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8004282:	bf00      	nop
 8004284:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004288:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800428c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004290:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004298:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800429c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800429e:	2300      	movs	r3, #0
 80042a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80042a2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80042a6:	460b      	mov	r3, r1
 80042a8:	4313      	orrs	r3, r2
 80042aa:	d00c      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80042ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042b0:	3328      	adds	r3, #40	@ 0x28
 80042b2:	2102      	movs	r1, #2
 80042b4:	4618      	mov	r0, r3
 80042b6:	f000 fd23 	bl	8004d00 <RCCEx_PLL3_Config>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d002      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80042c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ce:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80042d2:	663b      	str	r3, [r7, #96]	@ 0x60
 80042d4:	2300      	movs	r3, #0
 80042d6:	667b      	str	r3, [r7, #100]	@ 0x64
 80042d8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80042dc:	460b      	mov	r3, r1
 80042de:	4313      	orrs	r3, r2
 80042e0:	d038      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80042e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042ee:	d018      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80042f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042f4:	d811      	bhi.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80042f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042fa:	d014      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80042fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004300:	d80b      	bhi.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004302:	2b00      	cmp	r3, #0
 8004304:	d011      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8004306:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800430a:	d106      	bne.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800430c:	4bc3      	ldr	r3, [pc, #780]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800430e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004310:	4ac2      	ldr	r2, [pc, #776]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004312:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004316:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004318:	e008      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004320:	e004      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004322:	bf00      	nop
 8004324:	e002      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004326:	bf00      	nop
 8004328:	e000      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800432a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800432c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004330:	2b00      	cmp	r3, #0
 8004332:	d10b      	bne.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004334:	4bb9      	ldr	r3, [pc, #740]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004336:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004338:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800433c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004340:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004344:	4ab5      	ldr	r2, [pc, #724]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004346:	430b      	orrs	r3, r1
 8004348:	6553      	str	r3, [r2, #84]	@ 0x54
 800434a:	e003      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800434c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004350:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004354:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004360:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004362:	2300      	movs	r3, #0
 8004364:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004366:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800436a:	460b      	mov	r3, r1
 800436c:	4313      	orrs	r3, r2
 800436e:	d009      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004370:	4baa      	ldr	r3, [pc, #680]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004372:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004374:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004378:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800437c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800437e:	4aa7      	ldr	r2, [pc, #668]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004380:	430b      	orrs	r3, r1
 8004382:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004384:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004390:	653b      	str	r3, [r7, #80]	@ 0x50
 8004392:	2300      	movs	r3, #0
 8004394:	657b      	str	r3, [r7, #84]	@ 0x54
 8004396:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800439a:	460b      	mov	r3, r1
 800439c:	4313      	orrs	r3, r2
 800439e:	d009      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80043a0:	4b9e      	ldr	r3, [pc, #632]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80043a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043a4:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80043a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ae:	4a9b      	ldr	r2, [pc, #620]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80043b0:	430b      	orrs	r3, r1
 80043b2:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80043b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043bc:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80043c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043c2:	2300      	movs	r3, #0
 80043c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043c6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80043ca:	460b      	mov	r3, r1
 80043cc:	4313      	orrs	r3, r2
 80043ce:	d009      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80043d0:	4b92      	ldr	r3, [pc, #584]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80043d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043d4:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 80043d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043de:	4a8f      	ldr	r2, [pc, #572]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80043e0:	430b      	orrs	r3, r1
 80043e2:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80043e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ec:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80043f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80043f2:	2300      	movs	r3, #0
 80043f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80043f6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80043fa:	460b      	mov	r3, r1
 80043fc:	4313      	orrs	r3, r2
 80043fe:	d00e      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004400:	4b86      	ldr	r3, [pc, #536]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	4a85      	ldr	r2, [pc, #532]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004406:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800440a:	6113      	str	r3, [r2, #16]
 800440c:	4b83      	ldr	r3, [pc, #524]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800440e:	6919      	ldr	r1, [r3, #16]
 8004410:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004414:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004418:	4a80      	ldr	r2, [pc, #512]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800441a:	430b      	orrs	r3, r1
 800441c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800441e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004426:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800442a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800442c:	2300      	movs	r3, #0
 800442e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004430:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004434:	460b      	mov	r3, r1
 8004436:	4313      	orrs	r3, r2
 8004438:	d009      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800443a:	4b78      	ldr	r3, [pc, #480]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800443c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800443e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004442:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004446:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004448:	4a74      	ldr	r2, [pc, #464]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800444a:	430b      	orrs	r3, r1
 800444c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800444e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004456:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800445a:	633b      	str	r3, [r7, #48]	@ 0x30
 800445c:	2300      	movs	r3, #0
 800445e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004460:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004464:	460b      	mov	r3, r1
 8004466:	4313      	orrs	r3, r2
 8004468:	d00a      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800446a:	4b6c      	ldr	r3, [pc, #432]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800446c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800446e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004472:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004476:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800447a:	4a68      	ldr	r2, [pc, #416]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800447c:	430b      	orrs	r3, r1
 800447e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004480:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004488:	2100      	movs	r1, #0
 800448a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800448c:	f003 0301 	and.w	r3, r3, #1
 8004490:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004492:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004496:	460b      	mov	r3, r1
 8004498:	4313      	orrs	r3, r2
 800449a:	d011      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800449c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044a0:	3308      	adds	r3, #8
 80044a2:	2100      	movs	r1, #0
 80044a4:	4618      	mov	r0, r3
 80044a6:	f000 fb79 	bl	8004b9c <RCCEx_PLL2_Config>
 80044aa:	4603      	mov	r3, r0
 80044ac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80044b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d003      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044b8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80044bc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80044c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c8:	2100      	movs	r1, #0
 80044ca:	6239      	str	r1, [r7, #32]
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80044d2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80044d6:	460b      	mov	r3, r1
 80044d8:	4313      	orrs	r3, r2
 80044da:	d011      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80044dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044e0:	3308      	adds	r3, #8
 80044e2:	2101      	movs	r1, #1
 80044e4:	4618      	mov	r0, r3
 80044e6:	f000 fb59 	bl	8004b9c <RCCEx_PLL2_Config>
 80044ea:	4603      	mov	r3, r0
 80044ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80044f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d003      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044f8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80044fc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004500:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004508:	2100      	movs	r1, #0
 800450a:	61b9      	str	r1, [r7, #24]
 800450c:	f003 0304 	and.w	r3, r3, #4
 8004510:	61fb      	str	r3, [r7, #28]
 8004512:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004516:	460b      	mov	r3, r1
 8004518:	4313      	orrs	r3, r2
 800451a:	d011      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800451c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004520:	3308      	adds	r3, #8
 8004522:	2102      	movs	r1, #2
 8004524:	4618      	mov	r0, r3
 8004526:	f000 fb39 	bl	8004b9c <RCCEx_PLL2_Config>
 800452a:	4603      	mov	r3, r0
 800452c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004530:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004534:	2b00      	cmp	r3, #0
 8004536:	d003      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004538:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800453c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004540:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004548:	2100      	movs	r1, #0
 800454a:	6139      	str	r1, [r7, #16]
 800454c:	f003 0308 	and.w	r3, r3, #8
 8004550:	617b      	str	r3, [r7, #20]
 8004552:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004556:	460b      	mov	r3, r1
 8004558:	4313      	orrs	r3, r2
 800455a:	d011      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800455c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004560:	3328      	adds	r3, #40	@ 0x28
 8004562:	2100      	movs	r1, #0
 8004564:	4618      	mov	r0, r3
 8004566:	f000 fbcb 	bl	8004d00 <RCCEx_PLL3_Config>
 800456a:	4603      	mov	r3, r0
 800456c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8004570:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004574:	2b00      	cmp	r3, #0
 8004576:	d003      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004578:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800457c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004580:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004588:	2100      	movs	r1, #0
 800458a:	60b9      	str	r1, [r7, #8]
 800458c:	f003 0310 	and.w	r3, r3, #16
 8004590:	60fb      	str	r3, [r7, #12]
 8004592:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004596:	460b      	mov	r3, r1
 8004598:	4313      	orrs	r3, r2
 800459a:	d011      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800459c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045a0:	3328      	adds	r3, #40	@ 0x28
 80045a2:	2101      	movs	r1, #1
 80045a4:	4618      	mov	r0, r3
 80045a6:	f000 fbab 	bl	8004d00 <RCCEx_PLL3_Config>
 80045aa:	4603      	mov	r3, r0
 80045ac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80045b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d003      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045b8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80045bc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80045c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c8:	2100      	movs	r1, #0
 80045ca:	6039      	str	r1, [r7, #0]
 80045cc:	f003 0320 	and.w	r3, r3, #32
 80045d0:	607b      	str	r3, [r7, #4]
 80045d2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80045d6:	460b      	mov	r3, r1
 80045d8:	4313      	orrs	r3, r2
 80045da:	d011      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80045dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045e0:	3328      	adds	r3, #40	@ 0x28
 80045e2:	2102      	movs	r1, #2
 80045e4:	4618      	mov	r0, r3
 80045e6:	f000 fb8b 	bl	8004d00 <RCCEx_PLL3_Config>
 80045ea:	4603      	mov	r3, r0
 80045ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80045f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d003      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045f8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80045fc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8004600:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004604:	2b00      	cmp	r3, #0
 8004606:	d101      	bne.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8004608:	2300      	movs	r3, #0
 800460a:	e000      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
}
 800460e:	4618      	mov	r0, r3
 8004610:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8004614:	46bd      	mov	sp, r7
 8004616:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800461a:	bf00      	nop
 800461c:	58024400 	.word	0x58024400

08004620 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8004624:	f7fe fda0 	bl	8003168 <HAL_RCC_GetHCLKFreq>
 8004628:	4602      	mov	r2, r0
 800462a:	4b06      	ldr	r3, [pc, #24]	@ (8004644 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	091b      	lsrs	r3, r3, #4
 8004630:	f003 0307 	and.w	r3, r3, #7
 8004634:	4904      	ldr	r1, [pc, #16]	@ (8004648 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004636:	5ccb      	ldrb	r3, [r1, r3]
 8004638:	f003 031f 	and.w	r3, r3, #31
 800463c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004640:	4618      	mov	r0, r3
 8004642:	bd80      	pop	{r7, pc}
 8004644:	58024400 	.word	0x58024400
 8004648:	0800e5a8 	.word	0x0800e5a8

0800464c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800464c:	b480      	push	{r7}
 800464e:	b089      	sub	sp, #36	@ 0x24
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004654:	4ba1      	ldr	r3, [pc, #644]	@ (80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004658:	f003 0303 	and.w	r3, r3, #3
 800465c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800465e:	4b9f      	ldr	r3, [pc, #636]	@ (80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004662:	0b1b      	lsrs	r3, r3, #12
 8004664:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004668:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800466a:	4b9c      	ldr	r3, [pc, #624]	@ (80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800466c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800466e:	091b      	lsrs	r3, r3, #4
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004676:	4b99      	ldr	r3, [pc, #612]	@ (80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004678:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800467a:	08db      	lsrs	r3, r3, #3
 800467c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004680:	693a      	ldr	r2, [r7, #16]
 8004682:	fb02 f303 	mul.w	r3, r2, r3
 8004686:	ee07 3a90 	vmov	s15, r3
 800468a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800468e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	2b00      	cmp	r3, #0
 8004696:	f000 8111 	beq.w	80048bc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	2b02      	cmp	r3, #2
 800469e:	f000 8083 	beq.w	80047a8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	f200 80a1 	bhi.w	80047ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d003      	beq.n	80046b8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d056      	beq.n	8004764 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80046b6:	e099      	b.n	80047ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046b8:	4b88      	ldr	r3, [pc, #544]	@ (80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0320 	and.w	r3, r3, #32
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d02d      	beq.n	8004720 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80046c4:	4b85      	ldr	r3, [pc, #532]	@ (80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	08db      	lsrs	r3, r3, #3
 80046ca:	f003 0303 	and.w	r3, r3, #3
 80046ce:	4a84      	ldr	r2, [pc, #528]	@ (80048e0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80046d0:	fa22 f303 	lsr.w	r3, r2, r3
 80046d4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	ee07 3a90 	vmov	s15, r3
 80046dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	ee07 3a90 	vmov	s15, r3
 80046e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046ee:	4b7b      	ldr	r3, [pc, #492]	@ (80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046f6:	ee07 3a90 	vmov	s15, r3
 80046fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004702:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80048e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004706:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800470a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800470e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800471a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800471e:	e087      	b.n	8004830 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	ee07 3a90 	vmov	s15, r3
 8004726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800472a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80048e8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800472e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004732:	4b6a      	ldr	r3, [pc, #424]	@ (80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800473a:	ee07 3a90 	vmov	s15, r3
 800473e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004742:	ed97 6a03 	vldr	s12, [r7, #12]
 8004746:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80048e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800474a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800474e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004752:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800475a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800475e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004762:	e065      	b.n	8004830 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	ee07 3a90 	vmov	s15, r3
 800476a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800476e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80048ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004776:	4b59      	ldr	r3, [pc, #356]	@ (80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004778:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800477a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800477e:	ee07 3a90 	vmov	s15, r3
 8004782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004786:	ed97 6a03 	vldr	s12, [r7, #12]
 800478a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80048e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800478e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004792:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004796:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800479a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800479e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047a6:	e043      	b.n	8004830 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	ee07 3a90 	vmov	s15, r3
 80047ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047b2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80048f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80047b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047ba:	4b48      	ldr	r3, [pc, #288]	@ (80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047c2:	ee07 3a90 	vmov	s15, r3
 80047c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80047ce:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80048e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047ea:	e021      	b.n	8004830 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	ee07 3a90 	vmov	s15, r3
 80047f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047f6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80048ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80047fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047fe:	4b37      	ldr	r3, [pc, #220]	@ (80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004800:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004806:	ee07 3a90 	vmov	s15, r3
 800480a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800480e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004812:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80048e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800481a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800481e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800482a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800482e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004830:	4b2a      	ldr	r3, [pc, #168]	@ (80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004834:	0a5b      	lsrs	r3, r3, #9
 8004836:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800483a:	ee07 3a90 	vmov	s15, r3
 800483e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004842:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004846:	ee37 7a87 	vadd.f32	s14, s15, s14
 800484a:	edd7 6a07 	vldr	s13, [r7, #28]
 800484e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004852:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004856:	ee17 2a90 	vmov	r2, s15
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800485e:	4b1f      	ldr	r3, [pc, #124]	@ (80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004862:	0c1b      	lsrs	r3, r3, #16
 8004864:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004868:	ee07 3a90 	vmov	s15, r3
 800486c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004870:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004874:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004878:	edd7 6a07 	vldr	s13, [r7, #28]
 800487c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004880:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004884:	ee17 2a90 	vmov	r2, s15
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800488c:	4b13      	ldr	r3, [pc, #76]	@ (80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800488e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004890:	0e1b      	lsrs	r3, r3, #24
 8004892:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004896:	ee07 3a90 	vmov	s15, r3
 800489a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800489e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80048a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80048aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048b2:	ee17 2a90 	vmov	r2, s15
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80048ba:	e008      	b.n	80048ce <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	609a      	str	r2, [r3, #8]
}
 80048ce:	bf00      	nop
 80048d0:	3724      	adds	r7, #36	@ 0x24
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	58024400 	.word	0x58024400
 80048e0:	03d09000 	.word	0x03d09000
 80048e4:	46000000 	.word	0x46000000
 80048e8:	4c742400 	.word	0x4c742400
 80048ec:	4a742400 	.word	0x4a742400
 80048f0:	4bb71b00 	.word	0x4bb71b00

080048f4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b089      	sub	sp, #36	@ 0x24
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80048fc:	4ba1      	ldr	r3, [pc, #644]	@ (8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004900:	f003 0303 	and.w	r3, r3, #3
 8004904:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004906:	4b9f      	ldr	r3, [pc, #636]	@ (8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800490a:	0d1b      	lsrs	r3, r3, #20
 800490c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004910:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004912:	4b9c      	ldr	r3, [pc, #624]	@ (8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004916:	0a1b      	lsrs	r3, r3, #8
 8004918:	f003 0301 	and.w	r3, r3, #1
 800491c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800491e:	4b99      	ldr	r3, [pc, #612]	@ (8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004922:	08db      	lsrs	r3, r3, #3
 8004924:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004928:	693a      	ldr	r2, [r7, #16]
 800492a:	fb02 f303 	mul.w	r3, r2, r3
 800492e:	ee07 3a90 	vmov	s15, r3
 8004932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004936:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	2b00      	cmp	r3, #0
 800493e:	f000 8111 	beq.w	8004b64 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	2b02      	cmp	r3, #2
 8004946:	f000 8083 	beq.w	8004a50 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	2b02      	cmp	r3, #2
 800494e:	f200 80a1 	bhi.w	8004a94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d003      	beq.n	8004960 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d056      	beq.n	8004a0c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800495e:	e099      	b.n	8004a94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004960:	4b88      	ldr	r3, [pc, #544]	@ (8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0320 	and.w	r3, r3, #32
 8004968:	2b00      	cmp	r3, #0
 800496a:	d02d      	beq.n	80049c8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800496c:	4b85      	ldr	r3, [pc, #532]	@ (8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	08db      	lsrs	r3, r3, #3
 8004972:	f003 0303 	and.w	r3, r3, #3
 8004976:	4a84      	ldr	r2, [pc, #528]	@ (8004b88 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004978:	fa22 f303 	lsr.w	r3, r2, r3
 800497c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	ee07 3a90 	vmov	s15, r3
 8004984:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	ee07 3a90 	vmov	s15, r3
 800498e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004992:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004996:	4b7b      	ldr	r3, [pc, #492]	@ (8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800499a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800499e:	ee07 3a90 	vmov	s15, r3
 80049a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80049aa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004b8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80049ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049c2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80049c6:	e087      	b.n	8004ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	ee07 3a90 	vmov	s15, r3
 80049ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049d2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004b90 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80049d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049da:	4b6a      	ldr	r3, [pc, #424]	@ (8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049e2:	ee07 3a90 	vmov	s15, r3
 80049e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80049ee:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004b8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80049f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a0a:	e065      	b.n	8004ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	ee07 3a90 	vmov	s15, r3
 8004a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a16:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004b94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004a1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a1e:	4b59      	ldr	r3, [pc, #356]	@ (8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a26:	ee07 3a90 	vmov	s15, r3
 8004a2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a32:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004b8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a4e:	e043      	b.n	8004ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	ee07 3a90 	vmov	s15, r3
 8004a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a5a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004b98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004a5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a62:	4b48      	ldr	r3, [pc, #288]	@ (8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a6a:	ee07 3a90 	vmov	s15, r3
 8004a6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a72:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a76:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004b8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a92:	e021      	b.n	8004ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	ee07 3a90 	vmov	s15, r3
 8004a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a9e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004b94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004aa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aa6:	4b37      	ldr	r3, [pc, #220]	@ (8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aae:	ee07 3a90 	vmov	s15, r3
 8004ab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ab6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004aba:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004b8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004abe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ac6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004aca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ad2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ad6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004ad8:	4b2a      	ldr	r3, [pc, #168]	@ (8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004adc:	0a5b      	lsrs	r3, r3, #9
 8004ade:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ae2:	ee07 3a90 	vmov	s15, r3
 8004ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004aee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004af2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004af6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004afa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004afe:	ee17 2a90 	vmov	r2, s15
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004b06:	4b1f      	ldr	r3, [pc, #124]	@ (8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b0a:	0c1b      	lsrs	r3, r3, #16
 8004b0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b10:	ee07 3a90 	vmov	s15, r3
 8004b14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b18:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b20:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b2c:	ee17 2a90 	vmov	r2, s15
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004b34:	4b13      	ldr	r3, [pc, #76]	@ (8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b38:	0e1b      	lsrs	r3, r3, #24
 8004b3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b3e:	ee07 3a90 	vmov	s15, r3
 8004b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b5a:	ee17 2a90 	vmov	r2, s15
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004b62:	e008      	b.n	8004b76 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	609a      	str	r2, [r3, #8]
}
 8004b76:	bf00      	nop
 8004b78:	3724      	adds	r7, #36	@ 0x24
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	58024400 	.word	0x58024400
 8004b88:	03d09000 	.word	0x03d09000
 8004b8c:	46000000 	.word	0x46000000
 8004b90:	4c742400 	.word	0x4c742400
 8004b94:	4a742400 	.word	0x4a742400
 8004b98:	4bb71b00 	.word	0x4bb71b00

08004b9c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004baa:	4b53      	ldr	r3, [pc, #332]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bae:	f003 0303 	and.w	r3, r3, #3
 8004bb2:	2b03      	cmp	r3, #3
 8004bb4:	d101      	bne.n	8004bba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e099      	b.n	8004cee <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004bba:	4b4f      	ldr	r3, [pc, #316]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a4e      	ldr	r2, [pc, #312]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004bc0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004bc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bc6:	f7fc fcff 	bl	80015c8 <HAL_GetTick>
 8004bca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004bcc:	e008      	b.n	8004be0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004bce:	f7fc fcfb 	bl	80015c8 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d901      	bls.n	8004be0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e086      	b.n	8004cee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004be0:	4b45      	ldr	r3, [pc, #276]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1f0      	bne.n	8004bce <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004bec:	4b42      	ldr	r3, [pc, #264]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	031b      	lsls	r3, r3, #12
 8004bfa:	493f      	ldr	r1, [pc, #252]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	628b      	str	r3, [r1, #40]	@ 0x28
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	3b01      	subs	r3, #1
 8004c06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	025b      	lsls	r3, r3, #9
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	431a      	orrs	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	041b      	lsls	r3, r3, #16
 8004c1e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004c22:	431a      	orrs	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	3b01      	subs	r3, #1
 8004c2a:	061b      	lsls	r3, r3, #24
 8004c2c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004c30:	4931      	ldr	r1, [pc, #196]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004c36:	4b30      	ldr	r3, [pc, #192]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c3a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	492d      	ldr	r1, [pc, #180]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004c44:	4313      	orrs	r3, r2
 8004c46:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004c48:	4b2b      	ldr	r3, [pc, #172]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c4c:	f023 0220 	bic.w	r2, r3, #32
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	4928      	ldr	r1, [pc, #160]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004c5a:	4b27      	ldr	r3, [pc, #156]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c5e:	4a26      	ldr	r2, [pc, #152]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004c60:	f023 0310 	bic.w	r3, r3, #16
 8004c64:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004c66:	4b24      	ldr	r3, [pc, #144]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004c68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c6a:	4b24      	ldr	r3, [pc, #144]	@ (8004cfc <RCCEx_PLL2_Config+0x160>)
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	69d2      	ldr	r2, [r2, #28]
 8004c72:	00d2      	lsls	r2, r2, #3
 8004c74:	4920      	ldr	r1, [pc, #128]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004c7a:	4b1f      	ldr	r3, [pc, #124]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c7e:	4a1e      	ldr	r2, [pc, #120]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004c80:	f043 0310 	orr.w	r3, r3, #16
 8004c84:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d106      	bne.n	8004c9a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004c8c:	4b1a      	ldr	r3, [pc, #104]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c90:	4a19      	ldr	r2, [pc, #100]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004c92:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004c96:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004c98:	e00f      	b.n	8004cba <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d106      	bne.n	8004cae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004ca0:	4b15      	ldr	r3, [pc, #84]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca4:	4a14      	ldr	r2, [pc, #80]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004ca6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004caa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004cac:	e005      	b.n	8004cba <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004cae:	4b12      	ldr	r3, [pc, #72]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb2:	4a11      	ldr	r2, [pc, #68]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004cb4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004cb8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004cba:	4b0f      	ldr	r3, [pc, #60]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a0e      	ldr	r2, [pc, #56]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004cc0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004cc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cc6:	f7fc fc7f 	bl	80015c8 <HAL_GetTick>
 8004cca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004ccc:	e008      	b.n	8004ce0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004cce:	f7fc fc7b 	bl	80015c8 <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d901      	bls.n	8004ce0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e006      	b.n	8004cee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004ce0:	4b05      	ldr	r3, [pc, #20]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d0f0      	beq.n	8004cce <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3710      	adds	r7, #16
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	58024400 	.word	0x58024400
 8004cfc:	ffff0007 	.word	0xffff0007

08004d00 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d0e:	4b53      	ldr	r3, [pc, #332]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d12:	f003 0303 	and.w	r3, r3, #3
 8004d16:	2b03      	cmp	r3, #3
 8004d18:	d101      	bne.n	8004d1e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e099      	b.n	8004e52 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004d1e:	4b4f      	ldr	r3, [pc, #316]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a4e      	ldr	r2, [pc, #312]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004d24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d2a:	f7fc fc4d 	bl	80015c8 <HAL_GetTick>
 8004d2e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004d30:	e008      	b.n	8004d44 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004d32:	f7fc fc49 	bl	80015c8 <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d901      	bls.n	8004d44 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e086      	b.n	8004e52 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004d44:	4b45      	ldr	r3, [pc, #276]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1f0      	bne.n	8004d32 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004d50:	4b42      	ldr	r3, [pc, #264]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d54:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	051b      	lsls	r3, r3, #20
 8004d5e:	493f      	ldr	r1, [pc, #252]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004d60:	4313      	orrs	r3, r2
 8004d62:	628b      	str	r3, [r1, #40]	@ 0x28
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	3b01      	subs	r3, #1
 8004d74:	025b      	lsls	r3, r3, #9
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	431a      	orrs	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	041b      	lsls	r3, r3, #16
 8004d82:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004d86:	431a      	orrs	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	061b      	lsls	r3, r3, #24
 8004d90:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004d94:	4931      	ldr	r1, [pc, #196]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004d9a:	4b30      	ldr	r3, [pc, #192]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d9e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	492d      	ldr	r1, [pc, #180]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004dac:	4b2b      	ldr	r3, [pc, #172]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	4928      	ldr	r1, [pc, #160]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004dbe:	4b27      	ldr	r3, [pc, #156]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc2:	4a26      	ldr	r2, [pc, #152]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004dc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004dc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004dca:	4b24      	ldr	r3, [pc, #144]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004dcc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004dce:	4b24      	ldr	r3, [pc, #144]	@ (8004e60 <RCCEx_PLL3_Config+0x160>)
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	69d2      	ldr	r2, [r2, #28]
 8004dd6:	00d2      	lsls	r2, r2, #3
 8004dd8:	4920      	ldr	r1, [pc, #128]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004dde:	4b1f      	ldr	r3, [pc, #124]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de2:	4a1e      	ldr	r2, [pc, #120]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004de4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004de8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d106      	bne.n	8004dfe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004df0:	4b1a      	ldr	r3, [pc, #104]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df4:	4a19      	ldr	r2, [pc, #100]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004df6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004dfa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004dfc:	e00f      	b.n	8004e1e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d106      	bne.n	8004e12 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004e04:	4b15      	ldr	r3, [pc, #84]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e08:	4a14      	ldr	r2, [pc, #80]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004e0a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004e0e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e10:	e005      	b.n	8004e1e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004e12:	4b12      	ldr	r3, [pc, #72]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e16:	4a11      	ldr	r2, [pc, #68]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004e18:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e1c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004e1e:	4b0f      	ldr	r3, [pc, #60]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a0e      	ldr	r2, [pc, #56]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004e24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e2a:	f7fc fbcd 	bl	80015c8 <HAL_GetTick>
 8004e2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004e30:	e008      	b.n	8004e44 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004e32:	f7fc fbc9 	bl	80015c8 <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d901      	bls.n	8004e44 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e006      	b.n	8004e52 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004e44:	4b05      	ldr	r3, [pc, #20]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d0f0      	beq.n	8004e32 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3710      	adds	r7, #16
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	58024400 	.word	0x58024400
 8004e60:	ffff0007 	.word	0xffff0007

08004e64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d101      	bne.n	8004e76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e049      	b.n	8004f0a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d106      	bne.n	8004e90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 f841 	bl	8004f12 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2202      	movs	r2, #2
 8004e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	3304      	adds	r3, #4
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	4610      	mov	r0, r2
 8004ea4:	f000 f9e8 	bl	8005278 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3708      	adds	r7, #8
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}

08004f12 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004f12:	b480      	push	{r7}
 8004f14:	b083      	sub	sp, #12
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004f1a:	bf00      	nop
 8004f1c:	370c      	adds	r7, #12
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
	...

08004f28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d001      	beq.n	8004f40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e054      	b.n	8004fea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2202      	movs	r2, #2
 8004f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68da      	ldr	r2, [r3, #12]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f042 0201 	orr.w	r2, r2, #1
 8004f56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a26      	ldr	r2, [pc, #152]	@ (8004ff8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d022      	beq.n	8004fa8 <HAL_TIM_Base_Start_IT+0x80>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f6a:	d01d      	beq.n	8004fa8 <HAL_TIM_Base_Start_IT+0x80>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a22      	ldr	r2, [pc, #136]	@ (8004ffc <HAL_TIM_Base_Start_IT+0xd4>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d018      	beq.n	8004fa8 <HAL_TIM_Base_Start_IT+0x80>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a21      	ldr	r2, [pc, #132]	@ (8005000 <HAL_TIM_Base_Start_IT+0xd8>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d013      	beq.n	8004fa8 <HAL_TIM_Base_Start_IT+0x80>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a1f      	ldr	r2, [pc, #124]	@ (8005004 <HAL_TIM_Base_Start_IT+0xdc>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d00e      	beq.n	8004fa8 <HAL_TIM_Base_Start_IT+0x80>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a1e      	ldr	r2, [pc, #120]	@ (8005008 <HAL_TIM_Base_Start_IT+0xe0>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d009      	beq.n	8004fa8 <HAL_TIM_Base_Start_IT+0x80>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a1c      	ldr	r2, [pc, #112]	@ (800500c <HAL_TIM_Base_Start_IT+0xe4>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d004      	beq.n	8004fa8 <HAL_TIM_Base_Start_IT+0x80>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a1b      	ldr	r2, [pc, #108]	@ (8005010 <HAL_TIM_Base_Start_IT+0xe8>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d115      	bne.n	8004fd4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	689a      	ldr	r2, [r3, #8]
 8004fae:	4b19      	ldr	r3, [pc, #100]	@ (8005014 <HAL_TIM_Base_Start_IT+0xec>)
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2b06      	cmp	r3, #6
 8004fb8:	d015      	beq.n	8004fe6 <HAL_TIM_Base_Start_IT+0xbe>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fc0:	d011      	beq.n	8004fe6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f042 0201 	orr.w	r2, r2, #1
 8004fd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fd2:	e008      	b.n	8004fe6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f042 0201 	orr.w	r2, r2, #1
 8004fe2:	601a      	str	r2, [r3, #0]
 8004fe4:	e000      	b.n	8004fe8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fe6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3714      	adds	r7, #20
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	40010000 	.word	0x40010000
 8004ffc:	40000400 	.word	0x40000400
 8005000:	40000800 	.word	0x40000800
 8005004:	40000c00 	.word	0x40000c00
 8005008:	40010400 	.word	0x40010400
 800500c:	40001800 	.word	0x40001800
 8005010:	40014000 	.word	0x40014000
 8005014:	00010007 	.word	0x00010007

08005018 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	f003 0302 	and.w	r3, r3, #2
 8005036:	2b00      	cmp	r3, #0
 8005038:	d020      	beq.n	800507c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f003 0302 	and.w	r3, r3, #2
 8005040:	2b00      	cmp	r3, #0
 8005042:	d01b      	beq.n	800507c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f06f 0202 	mvn.w	r2, #2
 800504c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2201      	movs	r2, #1
 8005052:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	f003 0303 	and.w	r3, r3, #3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d003      	beq.n	800506a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 f8e9 	bl	800523a <HAL_TIM_IC_CaptureCallback>
 8005068:	e005      	b.n	8005076 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 f8db 	bl	8005226 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 f8ec 	bl	800524e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	f003 0304 	and.w	r3, r3, #4
 8005082:	2b00      	cmp	r3, #0
 8005084:	d020      	beq.n	80050c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f003 0304 	and.w	r3, r3, #4
 800508c:	2b00      	cmp	r3, #0
 800508e:	d01b      	beq.n	80050c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f06f 0204 	mvn.w	r2, #4
 8005098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2202      	movs	r2, #2
 800509e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	699b      	ldr	r3, [r3, #24]
 80050a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d003      	beq.n	80050b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 f8c3 	bl	800523a <HAL_TIM_IC_CaptureCallback>
 80050b4:	e005      	b.n	80050c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 f8b5 	bl	8005226 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 f8c6 	bl	800524e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	f003 0308 	and.w	r3, r3, #8
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d020      	beq.n	8005114 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f003 0308 	and.w	r3, r3, #8
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d01b      	beq.n	8005114 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f06f 0208 	mvn.w	r2, #8
 80050e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2204      	movs	r2, #4
 80050ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	69db      	ldr	r3, [r3, #28]
 80050f2:	f003 0303 	and.w	r3, r3, #3
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d003      	beq.n	8005102 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 f89d 	bl	800523a <HAL_TIM_IC_CaptureCallback>
 8005100:	e005      	b.n	800510e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f88f 	bl	8005226 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f000 f8a0 	bl	800524e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	f003 0310 	and.w	r3, r3, #16
 800511a:	2b00      	cmp	r3, #0
 800511c:	d020      	beq.n	8005160 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f003 0310 	and.w	r3, r3, #16
 8005124:	2b00      	cmp	r3, #0
 8005126:	d01b      	beq.n	8005160 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f06f 0210 	mvn.w	r2, #16
 8005130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2208      	movs	r2, #8
 8005136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	69db      	ldr	r3, [r3, #28]
 800513e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005142:	2b00      	cmp	r3, #0
 8005144:	d003      	beq.n	800514e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 f877 	bl	800523a <HAL_TIM_IC_CaptureCallback>
 800514c:	e005      	b.n	800515a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 f869 	bl	8005226 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 f87a 	bl	800524e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	f003 0301 	and.w	r3, r3, #1
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00c      	beq.n	8005184 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f003 0301 	and.w	r3, r3, #1
 8005170:	2b00      	cmp	r3, #0
 8005172:	d007      	beq.n	8005184 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f06f 0201 	mvn.w	r2, #1
 800517c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f7fb fe32 	bl	8000de8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800518a:	2b00      	cmp	r3, #0
 800518c:	d104      	bne.n	8005198 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005194:	2b00      	cmp	r3, #0
 8005196:	d00c      	beq.n	80051b2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d007      	beq.n	80051b2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80051aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f000 f913 	bl	80053d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d00c      	beq.n	80051d6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d007      	beq.n	80051d6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80051ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 f90b 	bl	80053ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00c      	beq.n	80051fa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d007      	beq.n	80051fa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80051f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f000 f834 	bl	8005262 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	f003 0320 	and.w	r3, r3, #32
 8005200:	2b00      	cmp	r3, #0
 8005202:	d00c      	beq.n	800521e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f003 0320 	and.w	r3, r3, #32
 800520a:	2b00      	cmp	r3, #0
 800520c:	d007      	beq.n	800521e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f06f 0220 	mvn.w	r2, #32
 8005216:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 f8d3 	bl	80053c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800521e:	bf00      	nop
 8005220:	3710      	adds	r7, #16
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005226:	b480      	push	{r7}
 8005228:	b083      	sub	sp, #12
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800522e:	bf00      	nop
 8005230:	370c      	adds	r7, #12
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr

0800523a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800523a:	b480      	push	{r7}
 800523c:	b083      	sub	sp, #12
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005242:	bf00      	nop
 8005244:	370c      	adds	r7, #12
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr

0800524e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800524e:	b480      	push	{r7}
 8005250:	b083      	sub	sp, #12
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005256:	bf00      	nop
 8005258:	370c      	adds	r7, #12
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr

08005262 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005262:	b480      	push	{r7}
 8005264:	b083      	sub	sp, #12
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800526a:	bf00      	nop
 800526c:	370c      	adds	r7, #12
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr
	...

08005278 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005278:	b480      	push	{r7}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a46      	ldr	r2, [pc, #280]	@ (80053a4 <TIM_Base_SetConfig+0x12c>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d013      	beq.n	80052b8 <TIM_Base_SetConfig+0x40>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005296:	d00f      	beq.n	80052b8 <TIM_Base_SetConfig+0x40>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a43      	ldr	r2, [pc, #268]	@ (80053a8 <TIM_Base_SetConfig+0x130>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d00b      	beq.n	80052b8 <TIM_Base_SetConfig+0x40>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a42      	ldr	r2, [pc, #264]	@ (80053ac <TIM_Base_SetConfig+0x134>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d007      	beq.n	80052b8 <TIM_Base_SetConfig+0x40>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a41      	ldr	r2, [pc, #260]	@ (80053b0 <TIM_Base_SetConfig+0x138>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d003      	beq.n	80052b8 <TIM_Base_SetConfig+0x40>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a40      	ldr	r2, [pc, #256]	@ (80053b4 <TIM_Base_SetConfig+0x13c>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d108      	bne.n	80052ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a35      	ldr	r2, [pc, #212]	@ (80053a4 <TIM_Base_SetConfig+0x12c>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d01f      	beq.n	8005312 <TIM_Base_SetConfig+0x9a>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052d8:	d01b      	beq.n	8005312 <TIM_Base_SetConfig+0x9a>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a32      	ldr	r2, [pc, #200]	@ (80053a8 <TIM_Base_SetConfig+0x130>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d017      	beq.n	8005312 <TIM_Base_SetConfig+0x9a>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a31      	ldr	r2, [pc, #196]	@ (80053ac <TIM_Base_SetConfig+0x134>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d013      	beq.n	8005312 <TIM_Base_SetConfig+0x9a>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a30      	ldr	r2, [pc, #192]	@ (80053b0 <TIM_Base_SetConfig+0x138>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d00f      	beq.n	8005312 <TIM_Base_SetConfig+0x9a>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a2f      	ldr	r2, [pc, #188]	@ (80053b4 <TIM_Base_SetConfig+0x13c>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d00b      	beq.n	8005312 <TIM_Base_SetConfig+0x9a>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a2e      	ldr	r2, [pc, #184]	@ (80053b8 <TIM_Base_SetConfig+0x140>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d007      	beq.n	8005312 <TIM_Base_SetConfig+0x9a>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a2d      	ldr	r2, [pc, #180]	@ (80053bc <TIM_Base_SetConfig+0x144>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d003      	beq.n	8005312 <TIM_Base_SetConfig+0x9a>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a2c      	ldr	r2, [pc, #176]	@ (80053c0 <TIM_Base_SetConfig+0x148>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d108      	bne.n	8005324 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005318:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	4313      	orrs	r3, r2
 8005322:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	4313      	orrs	r3, r2
 8005330:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	689a      	ldr	r2, [r3, #8]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a16      	ldr	r2, [pc, #88]	@ (80053a4 <TIM_Base_SetConfig+0x12c>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d00f      	beq.n	8005370 <TIM_Base_SetConfig+0xf8>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a18      	ldr	r2, [pc, #96]	@ (80053b4 <TIM_Base_SetConfig+0x13c>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d00b      	beq.n	8005370 <TIM_Base_SetConfig+0xf8>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a17      	ldr	r2, [pc, #92]	@ (80053b8 <TIM_Base_SetConfig+0x140>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d007      	beq.n	8005370 <TIM_Base_SetConfig+0xf8>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a16      	ldr	r2, [pc, #88]	@ (80053bc <TIM_Base_SetConfig+0x144>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d003      	beq.n	8005370 <TIM_Base_SetConfig+0xf8>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a15      	ldr	r2, [pc, #84]	@ (80053c0 <TIM_Base_SetConfig+0x148>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d103      	bne.n	8005378 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	691a      	ldr	r2, [r3, #16]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	2b01      	cmp	r3, #1
 8005388:	d105      	bne.n	8005396 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	f023 0201 	bic.w	r2, r3, #1
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	611a      	str	r2, [r3, #16]
  }
}
 8005396:	bf00      	nop
 8005398:	3714      	adds	r7, #20
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	40010000 	.word	0x40010000
 80053a8:	40000400 	.word	0x40000400
 80053ac:	40000800 	.word	0x40000800
 80053b0:	40000c00 	.word	0x40000c00
 80053b4:	40010400 	.word	0x40010400
 80053b8:	40014000 	.word	0x40014000
 80053bc:	40014400 	.word	0x40014400
 80053c0:	40014800 	.word	0x40014800

080053c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053cc:	bf00      	nop
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053e0:	bf00      	nop
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80053f4:	bf00      	nop
 80053f6:	370c      	adds	r7, #12
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d101      	bne.n	8005412 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e042      	b.n	8005498 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005418:	2b00      	cmp	r3, #0
 800541a:	d106      	bne.n	800542a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f7fb ffeb 	bl	8001400 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2224      	movs	r2, #36	@ 0x24
 800542e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f022 0201 	bic.w	r2, r2, #1
 8005440:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005446:	2b00      	cmp	r3, #0
 8005448:	d002      	beq.n	8005450 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 ff22 	bl	8006294 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 f8b3 	bl	80055bc <UART_SetConfig>
 8005456:	4603      	mov	r3, r0
 8005458:	2b01      	cmp	r3, #1
 800545a:	d101      	bne.n	8005460 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e01b      	b.n	8005498 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	685a      	ldr	r2, [r3, #4]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800546e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	689a      	ldr	r2, [r3, #8]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800547e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f042 0201 	orr.w	r2, r2, #1
 800548e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 ffa1 	bl	80063d8 <UART_CheckIdleState>
 8005496:	4603      	mov	r3, r0
}
 8005498:	4618      	mov	r0, r3
 800549a:	3708      	adds	r7, #8
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b08a      	sub	sp, #40	@ 0x28
 80054a4:	af02      	add	r7, sp, #8
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	603b      	str	r3, [r7, #0]
 80054ac:	4613      	mov	r3, r2
 80054ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054b6:	2b20      	cmp	r3, #32
 80054b8:	d17b      	bne.n	80055b2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d002      	beq.n	80054c6 <HAL_UART_Transmit+0x26>
 80054c0:	88fb      	ldrh	r3, [r7, #6]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d101      	bne.n	80054ca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e074      	b.n	80055b4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2221      	movs	r2, #33	@ 0x21
 80054d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054da:	f7fc f875 	bl	80015c8 <HAL_GetTick>
 80054de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	88fa      	ldrh	r2, [r7, #6]
 80054e4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	88fa      	ldrh	r2, [r7, #6]
 80054ec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054f8:	d108      	bne.n	800550c <HAL_UART_Transmit+0x6c>
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d104      	bne.n	800550c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005502:	2300      	movs	r3, #0
 8005504:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	61bb      	str	r3, [r7, #24]
 800550a:	e003      	b.n	8005514 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005510:	2300      	movs	r3, #0
 8005512:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005514:	e030      	b.n	8005578 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	9300      	str	r3, [sp, #0]
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	2200      	movs	r2, #0
 800551e:	2180      	movs	r1, #128	@ 0x80
 8005520:	68f8      	ldr	r0, [r7, #12]
 8005522:	f001 f803 	bl	800652c <UART_WaitOnFlagUntilTimeout>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d005      	beq.n	8005538 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2220      	movs	r2, #32
 8005530:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e03d      	b.n	80055b4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10b      	bne.n	8005556 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	881b      	ldrh	r3, [r3, #0]
 8005542:	461a      	mov	r2, r3
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800554c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	3302      	adds	r3, #2
 8005552:	61bb      	str	r3, [r7, #24]
 8005554:	e007      	b.n	8005566 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	781a      	ldrb	r2, [r3, #0]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	3301      	adds	r3, #1
 8005564:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800556c:	b29b      	uxth	r3, r3
 800556e:	3b01      	subs	r3, #1
 8005570:	b29a      	uxth	r2, r3
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800557e:	b29b      	uxth	r3, r3
 8005580:	2b00      	cmp	r3, #0
 8005582:	d1c8      	bne.n	8005516 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	9300      	str	r3, [sp, #0]
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	2200      	movs	r2, #0
 800558c:	2140      	movs	r1, #64	@ 0x40
 800558e:	68f8      	ldr	r0, [r7, #12]
 8005590:	f000 ffcc 	bl	800652c <UART_WaitOnFlagUntilTimeout>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d005      	beq.n	80055a6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2220      	movs	r2, #32
 800559e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e006      	b.n	80055b4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2220      	movs	r2, #32
 80055aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80055ae:	2300      	movs	r3, #0
 80055b0:	e000      	b.n	80055b4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80055b2:	2302      	movs	r3, #2
  }
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3720      	adds	r7, #32
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055c0:	b092      	sub	sp, #72	@ 0x48
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80055c6:	2300      	movs	r3, #0
 80055c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	689a      	ldr	r2, [r3, #8]
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	431a      	orrs	r2, r3
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	431a      	orrs	r2, r3
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	69db      	ldr	r3, [r3, #28]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	4bbe      	ldr	r3, [pc, #760]	@ (80058e4 <UART_SetConfig+0x328>)
 80055ec:	4013      	ands	r3, r2
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	6812      	ldr	r2, [r2, #0]
 80055f2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80055f4:	430b      	orrs	r3, r1
 80055f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	68da      	ldr	r2, [r3, #12]
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	430a      	orrs	r2, r1
 800560c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4ab3      	ldr	r2, [pc, #716]	@ (80058e8 <UART_SetConfig+0x32c>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d004      	beq.n	8005628 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	6a1b      	ldr	r3, [r3, #32]
 8005622:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005624:	4313      	orrs	r3, r2
 8005626:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	689a      	ldr	r2, [r3, #8]
 800562e:	4baf      	ldr	r3, [pc, #700]	@ (80058ec <UART_SetConfig+0x330>)
 8005630:	4013      	ands	r3, r2
 8005632:	697a      	ldr	r2, [r7, #20]
 8005634:	6812      	ldr	r2, [r2, #0]
 8005636:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005638:	430b      	orrs	r3, r1
 800563a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005642:	f023 010f 	bic.w	r1, r3, #15
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	430a      	orrs	r2, r1
 8005650:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4aa6      	ldr	r2, [pc, #664]	@ (80058f0 <UART_SetConfig+0x334>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d177      	bne.n	800574c <UART_SetConfig+0x190>
 800565c:	4ba5      	ldr	r3, [pc, #660]	@ (80058f4 <UART_SetConfig+0x338>)
 800565e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005660:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005664:	2b28      	cmp	r3, #40	@ 0x28
 8005666:	d86d      	bhi.n	8005744 <UART_SetConfig+0x188>
 8005668:	a201      	add	r2, pc, #4	@ (adr r2, 8005670 <UART_SetConfig+0xb4>)
 800566a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800566e:	bf00      	nop
 8005670:	08005715 	.word	0x08005715
 8005674:	08005745 	.word	0x08005745
 8005678:	08005745 	.word	0x08005745
 800567c:	08005745 	.word	0x08005745
 8005680:	08005745 	.word	0x08005745
 8005684:	08005745 	.word	0x08005745
 8005688:	08005745 	.word	0x08005745
 800568c:	08005745 	.word	0x08005745
 8005690:	0800571d 	.word	0x0800571d
 8005694:	08005745 	.word	0x08005745
 8005698:	08005745 	.word	0x08005745
 800569c:	08005745 	.word	0x08005745
 80056a0:	08005745 	.word	0x08005745
 80056a4:	08005745 	.word	0x08005745
 80056a8:	08005745 	.word	0x08005745
 80056ac:	08005745 	.word	0x08005745
 80056b0:	08005725 	.word	0x08005725
 80056b4:	08005745 	.word	0x08005745
 80056b8:	08005745 	.word	0x08005745
 80056bc:	08005745 	.word	0x08005745
 80056c0:	08005745 	.word	0x08005745
 80056c4:	08005745 	.word	0x08005745
 80056c8:	08005745 	.word	0x08005745
 80056cc:	08005745 	.word	0x08005745
 80056d0:	0800572d 	.word	0x0800572d
 80056d4:	08005745 	.word	0x08005745
 80056d8:	08005745 	.word	0x08005745
 80056dc:	08005745 	.word	0x08005745
 80056e0:	08005745 	.word	0x08005745
 80056e4:	08005745 	.word	0x08005745
 80056e8:	08005745 	.word	0x08005745
 80056ec:	08005745 	.word	0x08005745
 80056f0:	08005735 	.word	0x08005735
 80056f4:	08005745 	.word	0x08005745
 80056f8:	08005745 	.word	0x08005745
 80056fc:	08005745 	.word	0x08005745
 8005700:	08005745 	.word	0x08005745
 8005704:	08005745 	.word	0x08005745
 8005708:	08005745 	.word	0x08005745
 800570c:	08005745 	.word	0x08005745
 8005710:	0800573d 	.word	0x0800573d
 8005714:	2301      	movs	r3, #1
 8005716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800571a:	e326      	b.n	8005d6a <UART_SetConfig+0x7ae>
 800571c:	2304      	movs	r3, #4
 800571e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005722:	e322      	b.n	8005d6a <UART_SetConfig+0x7ae>
 8005724:	2308      	movs	r3, #8
 8005726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800572a:	e31e      	b.n	8005d6a <UART_SetConfig+0x7ae>
 800572c:	2310      	movs	r3, #16
 800572e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005732:	e31a      	b.n	8005d6a <UART_SetConfig+0x7ae>
 8005734:	2320      	movs	r3, #32
 8005736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800573a:	e316      	b.n	8005d6a <UART_SetConfig+0x7ae>
 800573c:	2340      	movs	r3, #64	@ 0x40
 800573e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005742:	e312      	b.n	8005d6a <UART_SetConfig+0x7ae>
 8005744:	2380      	movs	r3, #128	@ 0x80
 8005746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800574a:	e30e      	b.n	8005d6a <UART_SetConfig+0x7ae>
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a69      	ldr	r2, [pc, #420]	@ (80058f8 <UART_SetConfig+0x33c>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d130      	bne.n	80057b8 <UART_SetConfig+0x1fc>
 8005756:	4b67      	ldr	r3, [pc, #412]	@ (80058f4 <UART_SetConfig+0x338>)
 8005758:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800575a:	f003 0307 	and.w	r3, r3, #7
 800575e:	2b05      	cmp	r3, #5
 8005760:	d826      	bhi.n	80057b0 <UART_SetConfig+0x1f4>
 8005762:	a201      	add	r2, pc, #4	@ (adr r2, 8005768 <UART_SetConfig+0x1ac>)
 8005764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005768:	08005781 	.word	0x08005781
 800576c:	08005789 	.word	0x08005789
 8005770:	08005791 	.word	0x08005791
 8005774:	08005799 	.word	0x08005799
 8005778:	080057a1 	.word	0x080057a1
 800577c:	080057a9 	.word	0x080057a9
 8005780:	2300      	movs	r3, #0
 8005782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005786:	e2f0      	b.n	8005d6a <UART_SetConfig+0x7ae>
 8005788:	2304      	movs	r3, #4
 800578a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800578e:	e2ec      	b.n	8005d6a <UART_SetConfig+0x7ae>
 8005790:	2308      	movs	r3, #8
 8005792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005796:	e2e8      	b.n	8005d6a <UART_SetConfig+0x7ae>
 8005798:	2310      	movs	r3, #16
 800579a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800579e:	e2e4      	b.n	8005d6a <UART_SetConfig+0x7ae>
 80057a0:	2320      	movs	r3, #32
 80057a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057a6:	e2e0      	b.n	8005d6a <UART_SetConfig+0x7ae>
 80057a8:	2340      	movs	r3, #64	@ 0x40
 80057aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057ae:	e2dc      	b.n	8005d6a <UART_SetConfig+0x7ae>
 80057b0:	2380      	movs	r3, #128	@ 0x80
 80057b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057b6:	e2d8      	b.n	8005d6a <UART_SetConfig+0x7ae>
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a4f      	ldr	r2, [pc, #316]	@ (80058fc <UART_SetConfig+0x340>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d130      	bne.n	8005824 <UART_SetConfig+0x268>
 80057c2:	4b4c      	ldr	r3, [pc, #304]	@ (80058f4 <UART_SetConfig+0x338>)
 80057c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057c6:	f003 0307 	and.w	r3, r3, #7
 80057ca:	2b05      	cmp	r3, #5
 80057cc:	d826      	bhi.n	800581c <UART_SetConfig+0x260>
 80057ce:	a201      	add	r2, pc, #4	@ (adr r2, 80057d4 <UART_SetConfig+0x218>)
 80057d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d4:	080057ed 	.word	0x080057ed
 80057d8:	080057f5 	.word	0x080057f5
 80057dc:	080057fd 	.word	0x080057fd
 80057e0:	08005805 	.word	0x08005805
 80057e4:	0800580d 	.word	0x0800580d
 80057e8:	08005815 	.word	0x08005815
 80057ec:	2300      	movs	r3, #0
 80057ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057f2:	e2ba      	b.n	8005d6a <UART_SetConfig+0x7ae>
 80057f4:	2304      	movs	r3, #4
 80057f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057fa:	e2b6      	b.n	8005d6a <UART_SetConfig+0x7ae>
 80057fc:	2308      	movs	r3, #8
 80057fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005802:	e2b2      	b.n	8005d6a <UART_SetConfig+0x7ae>
 8005804:	2310      	movs	r3, #16
 8005806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800580a:	e2ae      	b.n	8005d6a <UART_SetConfig+0x7ae>
 800580c:	2320      	movs	r3, #32
 800580e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005812:	e2aa      	b.n	8005d6a <UART_SetConfig+0x7ae>
 8005814:	2340      	movs	r3, #64	@ 0x40
 8005816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800581a:	e2a6      	b.n	8005d6a <UART_SetConfig+0x7ae>
 800581c:	2380      	movs	r3, #128	@ 0x80
 800581e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005822:	e2a2      	b.n	8005d6a <UART_SetConfig+0x7ae>
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a35      	ldr	r2, [pc, #212]	@ (8005900 <UART_SetConfig+0x344>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d130      	bne.n	8005890 <UART_SetConfig+0x2d4>
 800582e:	4b31      	ldr	r3, [pc, #196]	@ (80058f4 <UART_SetConfig+0x338>)
 8005830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005832:	f003 0307 	and.w	r3, r3, #7
 8005836:	2b05      	cmp	r3, #5
 8005838:	d826      	bhi.n	8005888 <UART_SetConfig+0x2cc>
 800583a:	a201      	add	r2, pc, #4	@ (adr r2, 8005840 <UART_SetConfig+0x284>)
 800583c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005840:	08005859 	.word	0x08005859
 8005844:	08005861 	.word	0x08005861
 8005848:	08005869 	.word	0x08005869
 800584c:	08005871 	.word	0x08005871
 8005850:	08005879 	.word	0x08005879
 8005854:	08005881 	.word	0x08005881
 8005858:	2300      	movs	r3, #0
 800585a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800585e:	e284      	b.n	8005d6a <UART_SetConfig+0x7ae>
 8005860:	2304      	movs	r3, #4
 8005862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005866:	e280      	b.n	8005d6a <UART_SetConfig+0x7ae>
 8005868:	2308      	movs	r3, #8
 800586a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800586e:	e27c      	b.n	8005d6a <UART_SetConfig+0x7ae>
 8005870:	2310      	movs	r3, #16
 8005872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005876:	e278      	b.n	8005d6a <UART_SetConfig+0x7ae>
 8005878:	2320      	movs	r3, #32
 800587a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800587e:	e274      	b.n	8005d6a <UART_SetConfig+0x7ae>
 8005880:	2340      	movs	r3, #64	@ 0x40
 8005882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005886:	e270      	b.n	8005d6a <UART_SetConfig+0x7ae>
 8005888:	2380      	movs	r3, #128	@ 0x80
 800588a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800588e:	e26c      	b.n	8005d6a <UART_SetConfig+0x7ae>
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a1b      	ldr	r2, [pc, #108]	@ (8005904 <UART_SetConfig+0x348>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d142      	bne.n	8005920 <UART_SetConfig+0x364>
 800589a:	4b16      	ldr	r3, [pc, #88]	@ (80058f4 <UART_SetConfig+0x338>)
 800589c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800589e:	f003 0307 	and.w	r3, r3, #7
 80058a2:	2b05      	cmp	r3, #5
 80058a4:	d838      	bhi.n	8005918 <UART_SetConfig+0x35c>
 80058a6:	a201      	add	r2, pc, #4	@ (adr r2, 80058ac <UART_SetConfig+0x2f0>)
 80058a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ac:	080058c5 	.word	0x080058c5
 80058b0:	080058cd 	.word	0x080058cd
 80058b4:	080058d5 	.word	0x080058d5
 80058b8:	080058dd 	.word	0x080058dd
 80058bc:	08005909 	.word	0x08005909
 80058c0:	08005911 	.word	0x08005911
 80058c4:	2300      	movs	r3, #0
 80058c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058ca:	e24e      	b.n	8005d6a <UART_SetConfig+0x7ae>
 80058cc:	2304      	movs	r3, #4
 80058ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058d2:	e24a      	b.n	8005d6a <UART_SetConfig+0x7ae>
 80058d4:	2308      	movs	r3, #8
 80058d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058da:	e246      	b.n	8005d6a <UART_SetConfig+0x7ae>
 80058dc:	2310      	movs	r3, #16
 80058de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058e2:	e242      	b.n	8005d6a <UART_SetConfig+0x7ae>
 80058e4:	cfff69f3 	.word	0xcfff69f3
 80058e8:	58000c00 	.word	0x58000c00
 80058ec:	11fff4ff 	.word	0x11fff4ff
 80058f0:	40011000 	.word	0x40011000
 80058f4:	58024400 	.word	0x58024400
 80058f8:	40004400 	.word	0x40004400
 80058fc:	40004800 	.word	0x40004800
 8005900:	40004c00 	.word	0x40004c00
 8005904:	40005000 	.word	0x40005000
 8005908:	2320      	movs	r3, #32
 800590a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800590e:	e22c      	b.n	8005d6a <UART_SetConfig+0x7ae>
 8005910:	2340      	movs	r3, #64	@ 0x40
 8005912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005916:	e228      	b.n	8005d6a <UART_SetConfig+0x7ae>
 8005918:	2380      	movs	r3, #128	@ 0x80
 800591a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800591e:	e224      	b.n	8005d6a <UART_SetConfig+0x7ae>
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4ab1      	ldr	r2, [pc, #708]	@ (8005bec <UART_SetConfig+0x630>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d176      	bne.n	8005a18 <UART_SetConfig+0x45c>
 800592a:	4bb1      	ldr	r3, [pc, #708]	@ (8005bf0 <UART_SetConfig+0x634>)
 800592c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800592e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005932:	2b28      	cmp	r3, #40	@ 0x28
 8005934:	d86c      	bhi.n	8005a10 <UART_SetConfig+0x454>
 8005936:	a201      	add	r2, pc, #4	@ (adr r2, 800593c <UART_SetConfig+0x380>)
 8005938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800593c:	080059e1 	.word	0x080059e1
 8005940:	08005a11 	.word	0x08005a11
 8005944:	08005a11 	.word	0x08005a11
 8005948:	08005a11 	.word	0x08005a11
 800594c:	08005a11 	.word	0x08005a11
 8005950:	08005a11 	.word	0x08005a11
 8005954:	08005a11 	.word	0x08005a11
 8005958:	08005a11 	.word	0x08005a11
 800595c:	080059e9 	.word	0x080059e9
 8005960:	08005a11 	.word	0x08005a11
 8005964:	08005a11 	.word	0x08005a11
 8005968:	08005a11 	.word	0x08005a11
 800596c:	08005a11 	.word	0x08005a11
 8005970:	08005a11 	.word	0x08005a11
 8005974:	08005a11 	.word	0x08005a11
 8005978:	08005a11 	.word	0x08005a11
 800597c:	080059f1 	.word	0x080059f1
 8005980:	08005a11 	.word	0x08005a11
 8005984:	08005a11 	.word	0x08005a11
 8005988:	08005a11 	.word	0x08005a11
 800598c:	08005a11 	.word	0x08005a11
 8005990:	08005a11 	.word	0x08005a11
 8005994:	08005a11 	.word	0x08005a11
 8005998:	08005a11 	.word	0x08005a11
 800599c:	080059f9 	.word	0x080059f9
 80059a0:	08005a11 	.word	0x08005a11
 80059a4:	08005a11 	.word	0x08005a11
 80059a8:	08005a11 	.word	0x08005a11
 80059ac:	08005a11 	.word	0x08005a11
 80059b0:	08005a11 	.word	0x08005a11
 80059b4:	08005a11 	.word	0x08005a11
 80059b8:	08005a11 	.word	0x08005a11
 80059bc:	08005a01 	.word	0x08005a01
 80059c0:	08005a11 	.word	0x08005a11
 80059c4:	08005a11 	.word	0x08005a11
 80059c8:	08005a11 	.word	0x08005a11
 80059cc:	08005a11 	.word	0x08005a11
 80059d0:	08005a11 	.word	0x08005a11
 80059d4:	08005a11 	.word	0x08005a11
 80059d8:	08005a11 	.word	0x08005a11
 80059dc:	08005a09 	.word	0x08005a09
 80059e0:	2301      	movs	r3, #1
 80059e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059e6:	e1c0      	b.n	8005d6a <UART_SetConfig+0x7ae>
 80059e8:	2304      	movs	r3, #4
 80059ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059ee:	e1bc      	b.n	8005d6a <UART_SetConfig+0x7ae>
 80059f0:	2308      	movs	r3, #8
 80059f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059f6:	e1b8      	b.n	8005d6a <UART_SetConfig+0x7ae>
 80059f8:	2310      	movs	r3, #16
 80059fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059fe:	e1b4      	b.n	8005d6a <UART_SetConfig+0x7ae>
 8005a00:	2320      	movs	r3, #32
 8005a02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a06:	e1b0      	b.n	8005d6a <UART_SetConfig+0x7ae>
 8005a08:	2340      	movs	r3, #64	@ 0x40
 8005a0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a0e:	e1ac      	b.n	8005d6a <UART_SetConfig+0x7ae>
 8005a10:	2380      	movs	r3, #128	@ 0x80
 8005a12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a16:	e1a8      	b.n	8005d6a <UART_SetConfig+0x7ae>
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a75      	ldr	r2, [pc, #468]	@ (8005bf4 <UART_SetConfig+0x638>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d130      	bne.n	8005a84 <UART_SetConfig+0x4c8>
 8005a22:	4b73      	ldr	r3, [pc, #460]	@ (8005bf0 <UART_SetConfig+0x634>)
 8005a24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a26:	f003 0307 	and.w	r3, r3, #7
 8005a2a:	2b05      	cmp	r3, #5
 8005a2c:	d826      	bhi.n	8005a7c <UART_SetConfig+0x4c0>
 8005a2e:	a201      	add	r2, pc, #4	@ (adr r2, 8005a34 <UART_SetConfig+0x478>)
 8005a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a34:	08005a4d 	.word	0x08005a4d
 8005a38:	08005a55 	.word	0x08005a55
 8005a3c:	08005a5d 	.word	0x08005a5d
 8005a40:	08005a65 	.word	0x08005a65
 8005a44:	08005a6d 	.word	0x08005a6d
 8005a48:	08005a75 	.word	0x08005a75
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a52:	e18a      	b.n	8005d6a <UART_SetConfig+0x7ae>
 8005a54:	2304      	movs	r3, #4
 8005a56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a5a:	e186      	b.n	8005d6a <UART_SetConfig+0x7ae>
 8005a5c:	2308      	movs	r3, #8
 8005a5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a62:	e182      	b.n	8005d6a <UART_SetConfig+0x7ae>
 8005a64:	2310      	movs	r3, #16
 8005a66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a6a:	e17e      	b.n	8005d6a <UART_SetConfig+0x7ae>
 8005a6c:	2320      	movs	r3, #32
 8005a6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a72:	e17a      	b.n	8005d6a <UART_SetConfig+0x7ae>
 8005a74:	2340      	movs	r3, #64	@ 0x40
 8005a76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a7a:	e176      	b.n	8005d6a <UART_SetConfig+0x7ae>
 8005a7c:	2380      	movs	r3, #128	@ 0x80
 8005a7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a82:	e172      	b.n	8005d6a <UART_SetConfig+0x7ae>
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a5b      	ldr	r2, [pc, #364]	@ (8005bf8 <UART_SetConfig+0x63c>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d130      	bne.n	8005af0 <UART_SetConfig+0x534>
 8005a8e:	4b58      	ldr	r3, [pc, #352]	@ (8005bf0 <UART_SetConfig+0x634>)
 8005a90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a92:	f003 0307 	and.w	r3, r3, #7
 8005a96:	2b05      	cmp	r3, #5
 8005a98:	d826      	bhi.n	8005ae8 <UART_SetConfig+0x52c>
 8005a9a:	a201      	add	r2, pc, #4	@ (adr r2, 8005aa0 <UART_SetConfig+0x4e4>)
 8005a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa0:	08005ab9 	.word	0x08005ab9
 8005aa4:	08005ac1 	.word	0x08005ac1
 8005aa8:	08005ac9 	.word	0x08005ac9
 8005aac:	08005ad1 	.word	0x08005ad1
 8005ab0:	08005ad9 	.word	0x08005ad9
 8005ab4:	08005ae1 	.word	0x08005ae1
 8005ab8:	2300      	movs	r3, #0
 8005aba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005abe:	e154      	b.n	8005d6a <UART_SetConfig+0x7ae>
 8005ac0:	2304      	movs	r3, #4
 8005ac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ac6:	e150      	b.n	8005d6a <UART_SetConfig+0x7ae>
 8005ac8:	2308      	movs	r3, #8
 8005aca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ace:	e14c      	b.n	8005d6a <UART_SetConfig+0x7ae>
 8005ad0:	2310      	movs	r3, #16
 8005ad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ad6:	e148      	b.n	8005d6a <UART_SetConfig+0x7ae>
 8005ad8:	2320      	movs	r3, #32
 8005ada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ade:	e144      	b.n	8005d6a <UART_SetConfig+0x7ae>
 8005ae0:	2340      	movs	r3, #64	@ 0x40
 8005ae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ae6:	e140      	b.n	8005d6a <UART_SetConfig+0x7ae>
 8005ae8:	2380      	movs	r3, #128	@ 0x80
 8005aea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aee:	e13c      	b.n	8005d6a <UART_SetConfig+0x7ae>
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a41      	ldr	r2, [pc, #260]	@ (8005bfc <UART_SetConfig+0x640>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	f040 8082 	bne.w	8005c00 <UART_SetConfig+0x644>
 8005afc:	4b3c      	ldr	r3, [pc, #240]	@ (8005bf0 <UART_SetConfig+0x634>)
 8005afe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b00:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b04:	2b28      	cmp	r3, #40	@ 0x28
 8005b06:	d86d      	bhi.n	8005be4 <UART_SetConfig+0x628>
 8005b08:	a201      	add	r2, pc, #4	@ (adr r2, 8005b10 <UART_SetConfig+0x554>)
 8005b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b0e:	bf00      	nop
 8005b10:	08005bb5 	.word	0x08005bb5
 8005b14:	08005be5 	.word	0x08005be5
 8005b18:	08005be5 	.word	0x08005be5
 8005b1c:	08005be5 	.word	0x08005be5
 8005b20:	08005be5 	.word	0x08005be5
 8005b24:	08005be5 	.word	0x08005be5
 8005b28:	08005be5 	.word	0x08005be5
 8005b2c:	08005be5 	.word	0x08005be5
 8005b30:	08005bbd 	.word	0x08005bbd
 8005b34:	08005be5 	.word	0x08005be5
 8005b38:	08005be5 	.word	0x08005be5
 8005b3c:	08005be5 	.word	0x08005be5
 8005b40:	08005be5 	.word	0x08005be5
 8005b44:	08005be5 	.word	0x08005be5
 8005b48:	08005be5 	.word	0x08005be5
 8005b4c:	08005be5 	.word	0x08005be5
 8005b50:	08005bc5 	.word	0x08005bc5
 8005b54:	08005be5 	.word	0x08005be5
 8005b58:	08005be5 	.word	0x08005be5
 8005b5c:	08005be5 	.word	0x08005be5
 8005b60:	08005be5 	.word	0x08005be5
 8005b64:	08005be5 	.word	0x08005be5
 8005b68:	08005be5 	.word	0x08005be5
 8005b6c:	08005be5 	.word	0x08005be5
 8005b70:	08005bcd 	.word	0x08005bcd
 8005b74:	08005be5 	.word	0x08005be5
 8005b78:	08005be5 	.word	0x08005be5
 8005b7c:	08005be5 	.word	0x08005be5
 8005b80:	08005be5 	.word	0x08005be5
 8005b84:	08005be5 	.word	0x08005be5
 8005b88:	08005be5 	.word	0x08005be5
 8005b8c:	08005be5 	.word	0x08005be5
 8005b90:	08005bd5 	.word	0x08005bd5
 8005b94:	08005be5 	.word	0x08005be5
 8005b98:	08005be5 	.word	0x08005be5
 8005b9c:	08005be5 	.word	0x08005be5
 8005ba0:	08005be5 	.word	0x08005be5
 8005ba4:	08005be5 	.word	0x08005be5
 8005ba8:	08005be5 	.word	0x08005be5
 8005bac:	08005be5 	.word	0x08005be5
 8005bb0:	08005bdd 	.word	0x08005bdd
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bba:	e0d6      	b.n	8005d6a <UART_SetConfig+0x7ae>
 8005bbc:	2304      	movs	r3, #4
 8005bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bc2:	e0d2      	b.n	8005d6a <UART_SetConfig+0x7ae>
 8005bc4:	2308      	movs	r3, #8
 8005bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bca:	e0ce      	b.n	8005d6a <UART_SetConfig+0x7ae>
 8005bcc:	2310      	movs	r3, #16
 8005bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bd2:	e0ca      	b.n	8005d6a <UART_SetConfig+0x7ae>
 8005bd4:	2320      	movs	r3, #32
 8005bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bda:	e0c6      	b.n	8005d6a <UART_SetConfig+0x7ae>
 8005bdc:	2340      	movs	r3, #64	@ 0x40
 8005bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005be2:	e0c2      	b.n	8005d6a <UART_SetConfig+0x7ae>
 8005be4:	2380      	movs	r3, #128	@ 0x80
 8005be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bea:	e0be      	b.n	8005d6a <UART_SetConfig+0x7ae>
 8005bec:	40011400 	.word	0x40011400
 8005bf0:	58024400 	.word	0x58024400
 8005bf4:	40007800 	.word	0x40007800
 8005bf8:	40007c00 	.word	0x40007c00
 8005bfc:	40011800 	.word	0x40011800
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4aad      	ldr	r2, [pc, #692]	@ (8005ebc <UART_SetConfig+0x900>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d176      	bne.n	8005cf8 <UART_SetConfig+0x73c>
 8005c0a:	4bad      	ldr	r3, [pc, #692]	@ (8005ec0 <UART_SetConfig+0x904>)
 8005c0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c12:	2b28      	cmp	r3, #40	@ 0x28
 8005c14:	d86c      	bhi.n	8005cf0 <UART_SetConfig+0x734>
 8005c16:	a201      	add	r2, pc, #4	@ (adr r2, 8005c1c <UART_SetConfig+0x660>)
 8005c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c1c:	08005cc1 	.word	0x08005cc1
 8005c20:	08005cf1 	.word	0x08005cf1
 8005c24:	08005cf1 	.word	0x08005cf1
 8005c28:	08005cf1 	.word	0x08005cf1
 8005c2c:	08005cf1 	.word	0x08005cf1
 8005c30:	08005cf1 	.word	0x08005cf1
 8005c34:	08005cf1 	.word	0x08005cf1
 8005c38:	08005cf1 	.word	0x08005cf1
 8005c3c:	08005cc9 	.word	0x08005cc9
 8005c40:	08005cf1 	.word	0x08005cf1
 8005c44:	08005cf1 	.word	0x08005cf1
 8005c48:	08005cf1 	.word	0x08005cf1
 8005c4c:	08005cf1 	.word	0x08005cf1
 8005c50:	08005cf1 	.word	0x08005cf1
 8005c54:	08005cf1 	.word	0x08005cf1
 8005c58:	08005cf1 	.word	0x08005cf1
 8005c5c:	08005cd1 	.word	0x08005cd1
 8005c60:	08005cf1 	.word	0x08005cf1
 8005c64:	08005cf1 	.word	0x08005cf1
 8005c68:	08005cf1 	.word	0x08005cf1
 8005c6c:	08005cf1 	.word	0x08005cf1
 8005c70:	08005cf1 	.word	0x08005cf1
 8005c74:	08005cf1 	.word	0x08005cf1
 8005c78:	08005cf1 	.word	0x08005cf1
 8005c7c:	08005cd9 	.word	0x08005cd9
 8005c80:	08005cf1 	.word	0x08005cf1
 8005c84:	08005cf1 	.word	0x08005cf1
 8005c88:	08005cf1 	.word	0x08005cf1
 8005c8c:	08005cf1 	.word	0x08005cf1
 8005c90:	08005cf1 	.word	0x08005cf1
 8005c94:	08005cf1 	.word	0x08005cf1
 8005c98:	08005cf1 	.word	0x08005cf1
 8005c9c:	08005ce1 	.word	0x08005ce1
 8005ca0:	08005cf1 	.word	0x08005cf1
 8005ca4:	08005cf1 	.word	0x08005cf1
 8005ca8:	08005cf1 	.word	0x08005cf1
 8005cac:	08005cf1 	.word	0x08005cf1
 8005cb0:	08005cf1 	.word	0x08005cf1
 8005cb4:	08005cf1 	.word	0x08005cf1
 8005cb8:	08005cf1 	.word	0x08005cf1
 8005cbc:	08005ce9 	.word	0x08005ce9
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cc6:	e050      	b.n	8005d6a <UART_SetConfig+0x7ae>
 8005cc8:	2304      	movs	r3, #4
 8005cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cce:	e04c      	b.n	8005d6a <UART_SetConfig+0x7ae>
 8005cd0:	2308      	movs	r3, #8
 8005cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cd6:	e048      	b.n	8005d6a <UART_SetConfig+0x7ae>
 8005cd8:	2310      	movs	r3, #16
 8005cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cde:	e044      	b.n	8005d6a <UART_SetConfig+0x7ae>
 8005ce0:	2320      	movs	r3, #32
 8005ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ce6:	e040      	b.n	8005d6a <UART_SetConfig+0x7ae>
 8005ce8:	2340      	movs	r3, #64	@ 0x40
 8005cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cee:	e03c      	b.n	8005d6a <UART_SetConfig+0x7ae>
 8005cf0:	2380      	movs	r3, #128	@ 0x80
 8005cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cf6:	e038      	b.n	8005d6a <UART_SetConfig+0x7ae>
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a71      	ldr	r2, [pc, #452]	@ (8005ec4 <UART_SetConfig+0x908>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d130      	bne.n	8005d64 <UART_SetConfig+0x7a8>
 8005d02:	4b6f      	ldr	r3, [pc, #444]	@ (8005ec0 <UART_SetConfig+0x904>)
 8005d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d06:	f003 0307 	and.w	r3, r3, #7
 8005d0a:	2b05      	cmp	r3, #5
 8005d0c:	d826      	bhi.n	8005d5c <UART_SetConfig+0x7a0>
 8005d0e:	a201      	add	r2, pc, #4	@ (adr r2, 8005d14 <UART_SetConfig+0x758>)
 8005d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d14:	08005d2d 	.word	0x08005d2d
 8005d18:	08005d35 	.word	0x08005d35
 8005d1c:	08005d3d 	.word	0x08005d3d
 8005d20:	08005d45 	.word	0x08005d45
 8005d24:	08005d4d 	.word	0x08005d4d
 8005d28:	08005d55 	.word	0x08005d55
 8005d2c:	2302      	movs	r3, #2
 8005d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d32:	e01a      	b.n	8005d6a <UART_SetConfig+0x7ae>
 8005d34:	2304      	movs	r3, #4
 8005d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d3a:	e016      	b.n	8005d6a <UART_SetConfig+0x7ae>
 8005d3c:	2308      	movs	r3, #8
 8005d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d42:	e012      	b.n	8005d6a <UART_SetConfig+0x7ae>
 8005d44:	2310      	movs	r3, #16
 8005d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d4a:	e00e      	b.n	8005d6a <UART_SetConfig+0x7ae>
 8005d4c:	2320      	movs	r3, #32
 8005d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d52:	e00a      	b.n	8005d6a <UART_SetConfig+0x7ae>
 8005d54:	2340      	movs	r3, #64	@ 0x40
 8005d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d5a:	e006      	b.n	8005d6a <UART_SetConfig+0x7ae>
 8005d5c:	2380      	movs	r3, #128	@ 0x80
 8005d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d62:	e002      	b.n	8005d6a <UART_SetConfig+0x7ae>
 8005d64:	2380      	movs	r3, #128	@ 0x80
 8005d66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a55      	ldr	r2, [pc, #340]	@ (8005ec4 <UART_SetConfig+0x908>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	f040 80f8 	bne.w	8005f66 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005d76:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005d7a:	2b20      	cmp	r3, #32
 8005d7c:	dc46      	bgt.n	8005e0c <UART_SetConfig+0x850>
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	db75      	blt.n	8005e6e <UART_SetConfig+0x8b2>
 8005d82:	3b02      	subs	r3, #2
 8005d84:	2b1e      	cmp	r3, #30
 8005d86:	d872      	bhi.n	8005e6e <UART_SetConfig+0x8b2>
 8005d88:	a201      	add	r2, pc, #4	@ (adr r2, 8005d90 <UART_SetConfig+0x7d4>)
 8005d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d8e:	bf00      	nop
 8005d90:	08005e13 	.word	0x08005e13
 8005d94:	08005e6f 	.word	0x08005e6f
 8005d98:	08005e1b 	.word	0x08005e1b
 8005d9c:	08005e6f 	.word	0x08005e6f
 8005da0:	08005e6f 	.word	0x08005e6f
 8005da4:	08005e6f 	.word	0x08005e6f
 8005da8:	08005e2b 	.word	0x08005e2b
 8005dac:	08005e6f 	.word	0x08005e6f
 8005db0:	08005e6f 	.word	0x08005e6f
 8005db4:	08005e6f 	.word	0x08005e6f
 8005db8:	08005e6f 	.word	0x08005e6f
 8005dbc:	08005e6f 	.word	0x08005e6f
 8005dc0:	08005e6f 	.word	0x08005e6f
 8005dc4:	08005e6f 	.word	0x08005e6f
 8005dc8:	08005e3b 	.word	0x08005e3b
 8005dcc:	08005e6f 	.word	0x08005e6f
 8005dd0:	08005e6f 	.word	0x08005e6f
 8005dd4:	08005e6f 	.word	0x08005e6f
 8005dd8:	08005e6f 	.word	0x08005e6f
 8005ddc:	08005e6f 	.word	0x08005e6f
 8005de0:	08005e6f 	.word	0x08005e6f
 8005de4:	08005e6f 	.word	0x08005e6f
 8005de8:	08005e6f 	.word	0x08005e6f
 8005dec:	08005e6f 	.word	0x08005e6f
 8005df0:	08005e6f 	.word	0x08005e6f
 8005df4:	08005e6f 	.word	0x08005e6f
 8005df8:	08005e6f 	.word	0x08005e6f
 8005dfc:	08005e6f 	.word	0x08005e6f
 8005e00:	08005e6f 	.word	0x08005e6f
 8005e04:	08005e6f 	.word	0x08005e6f
 8005e08:	08005e61 	.word	0x08005e61
 8005e0c:	2b40      	cmp	r3, #64	@ 0x40
 8005e0e:	d02a      	beq.n	8005e66 <UART_SetConfig+0x8aa>
 8005e10:	e02d      	b.n	8005e6e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005e12:	f7fe fc05 	bl	8004620 <HAL_RCCEx_GetD3PCLK1Freq>
 8005e16:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005e18:	e02f      	b.n	8005e7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f7fe fc14 	bl	800464c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e28:	e027      	b.n	8005e7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e2a:	f107 0318 	add.w	r3, r7, #24
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7fe fd60 	bl	80048f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e38:	e01f      	b.n	8005e7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e3a:	4b21      	ldr	r3, [pc, #132]	@ (8005ec0 <UART_SetConfig+0x904>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0320 	and.w	r3, r3, #32
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d009      	beq.n	8005e5a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005e46:	4b1e      	ldr	r3, [pc, #120]	@ (8005ec0 <UART_SetConfig+0x904>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	08db      	lsrs	r3, r3, #3
 8005e4c:	f003 0303 	and.w	r3, r3, #3
 8005e50:	4a1d      	ldr	r2, [pc, #116]	@ (8005ec8 <UART_SetConfig+0x90c>)
 8005e52:	fa22 f303 	lsr.w	r3, r2, r3
 8005e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005e58:	e00f      	b.n	8005e7a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005e5a:	4b1b      	ldr	r3, [pc, #108]	@ (8005ec8 <UART_SetConfig+0x90c>)
 8005e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e5e:	e00c      	b.n	8005e7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005e60:	4b1a      	ldr	r3, [pc, #104]	@ (8005ecc <UART_SetConfig+0x910>)
 8005e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e64:	e009      	b.n	8005e7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e6c:	e005      	b.n	8005e7a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005e78:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005e7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f000 81ee 	beq.w	800625e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e86:	4a12      	ldr	r2, [pc, #72]	@ (8005ed0 <UART_SetConfig+0x914>)
 8005e88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e90:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e94:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	685a      	ldr	r2, [r3, #4]
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	005b      	lsls	r3, r3, #1
 8005e9e:	4413      	add	r3, r2
 8005ea0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d305      	bcc.n	8005eb2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005eac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d910      	bls.n	8005ed4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005eb8:	e1d1      	b.n	800625e <UART_SetConfig+0xca2>
 8005eba:	bf00      	nop
 8005ebc:	40011c00 	.word	0x40011c00
 8005ec0:	58024400 	.word	0x58024400
 8005ec4:	58000c00 	.word	0x58000c00
 8005ec8:	03d09000 	.word	0x03d09000
 8005ecc:	003d0900 	.word	0x003d0900
 8005ed0:	0800e5b8 	.word	0x0800e5b8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ed4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	60bb      	str	r3, [r7, #8]
 8005eda:	60fa      	str	r2, [r7, #12]
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee0:	4ac0      	ldr	r2, [pc, #768]	@ (80061e4 <UART_SetConfig+0xc28>)
 8005ee2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	2200      	movs	r2, #0
 8005eea:	603b      	str	r3, [r7, #0]
 8005eec:	607a      	str	r2, [r7, #4]
 8005eee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ef2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005ef6:	f7fa fc0f 	bl	8000718 <__aeabi_uldivmod>
 8005efa:	4602      	mov	r2, r0
 8005efc:	460b      	mov	r3, r1
 8005efe:	4610      	mov	r0, r2
 8005f00:	4619      	mov	r1, r3
 8005f02:	f04f 0200 	mov.w	r2, #0
 8005f06:	f04f 0300 	mov.w	r3, #0
 8005f0a:	020b      	lsls	r3, r1, #8
 8005f0c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005f10:	0202      	lsls	r2, r0, #8
 8005f12:	6979      	ldr	r1, [r7, #20]
 8005f14:	6849      	ldr	r1, [r1, #4]
 8005f16:	0849      	lsrs	r1, r1, #1
 8005f18:	2000      	movs	r0, #0
 8005f1a:	460c      	mov	r4, r1
 8005f1c:	4605      	mov	r5, r0
 8005f1e:	eb12 0804 	adds.w	r8, r2, r4
 8005f22:	eb43 0905 	adc.w	r9, r3, r5
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	469a      	mov	sl, r3
 8005f2e:	4693      	mov	fp, r2
 8005f30:	4652      	mov	r2, sl
 8005f32:	465b      	mov	r3, fp
 8005f34:	4640      	mov	r0, r8
 8005f36:	4649      	mov	r1, r9
 8005f38:	f7fa fbee 	bl	8000718 <__aeabi_uldivmod>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	460b      	mov	r3, r1
 8005f40:	4613      	mov	r3, r2
 8005f42:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f4a:	d308      	bcc.n	8005f5e <UART_SetConfig+0x9a2>
 8005f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f52:	d204      	bcs.n	8005f5e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005f5a:	60da      	str	r2, [r3, #12]
 8005f5c:	e17f      	b.n	800625e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005f64:	e17b      	b.n	800625e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	69db      	ldr	r3, [r3, #28]
 8005f6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f6e:	f040 80bd 	bne.w	80060ec <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8005f72:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005f76:	2b20      	cmp	r3, #32
 8005f78:	dc48      	bgt.n	800600c <UART_SetConfig+0xa50>
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	db7b      	blt.n	8006076 <UART_SetConfig+0xaba>
 8005f7e:	2b20      	cmp	r3, #32
 8005f80:	d879      	bhi.n	8006076 <UART_SetConfig+0xaba>
 8005f82:	a201      	add	r2, pc, #4	@ (adr r2, 8005f88 <UART_SetConfig+0x9cc>)
 8005f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f88:	08006013 	.word	0x08006013
 8005f8c:	0800601b 	.word	0x0800601b
 8005f90:	08006077 	.word	0x08006077
 8005f94:	08006077 	.word	0x08006077
 8005f98:	08006023 	.word	0x08006023
 8005f9c:	08006077 	.word	0x08006077
 8005fa0:	08006077 	.word	0x08006077
 8005fa4:	08006077 	.word	0x08006077
 8005fa8:	08006033 	.word	0x08006033
 8005fac:	08006077 	.word	0x08006077
 8005fb0:	08006077 	.word	0x08006077
 8005fb4:	08006077 	.word	0x08006077
 8005fb8:	08006077 	.word	0x08006077
 8005fbc:	08006077 	.word	0x08006077
 8005fc0:	08006077 	.word	0x08006077
 8005fc4:	08006077 	.word	0x08006077
 8005fc8:	08006043 	.word	0x08006043
 8005fcc:	08006077 	.word	0x08006077
 8005fd0:	08006077 	.word	0x08006077
 8005fd4:	08006077 	.word	0x08006077
 8005fd8:	08006077 	.word	0x08006077
 8005fdc:	08006077 	.word	0x08006077
 8005fe0:	08006077 	.word	0x08006077
 8005fe4:	08006077 	.word	0x08006077
 8005fe8:	08006077 	.word	0x08006077
 8005fec:	08006077 	.word	0x08006077
 8005ff0:	08006077 	.word	0x08006077
 8005ff4:	08006077 	.word	0x08006077
 8005ff8:	08006077 	.word	0x08006077
 8005ffc:	08006077 	.word	0x08006077
 8006000:	08006077 	.word	0x08006077
 8006004:	08006077 	.word	0x08006077
 8006008:	08006069 	.word	0x08006069
 800600c:	2b40      	cmp	r3, #64	@ 0x40
 800600e:	d02e      	beq.n	800606e <UART_SetConfig+0xab2>
 8006010:	e031      	b.n	8006076 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006012:	f7fd f8d9 	bl	80031c8 <HAL_RCC_GetPCLK1Freq>
 8006016:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006018:	e033      	b.n	8006082 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800601a:	f7fd f8eb 	bl	80031f4 <HAL_RCC_GetPCLK2Freq>
 800601e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006020:	e02f      	b.n	8006082 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006022:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006026:	4618      	mov	r0, r3
 8006028:	f7fe fb10 	bl	800464c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800602c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800602e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006030:	e027      	b.n	8006082 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006032:	f107 0318 	add.w	r3, r7, #24
 8006036:	4618      	mov	r0, r3
 8006038:	f7fe fc5c 	bl	80048f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006040:	e01f      	b.n	8006082 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006042:	4b69      	ldr	r3, [pc, #420]	@ (80061e8 <UART_SetConfig+0xc2c>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 0320 	and.w	r3, r3, #32
 800604a:	2b00      	cmp	r3, #0
 800604c:	d009      	beq.n	8006062 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800604e:	4b66      	ldr	r3, [pc, #408]	@ (80061e8 <UART_SetConfig+0xc2c>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	08db      	lsrs	r3, r3, #3
 8006054:	f003 0303 	and.w	r3, r3, #3
 8006058:	4a64      	ldr	r2, [pc, #400]	@ (80061ec <UART_SetConfig+0xc30>)
 800605a:	fa22 f303 	lsr.w	r3, r2, r3
 800605e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006060:	e00f      	b.n	8006082 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8006062:	4b62      	ldr	r3, [pc, #392]	@ (80061ec <UART_SetConfig+0xc30>)
 8006064:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006066:	e00c      	b.n	8006082 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006068:	4b61      	ldr	r3, [pc, #388]	@ (80061f0 <UART_SetConfig+0xc34>)
 800606a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800606c:	e009      	b.n	8006082 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800606e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006072:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006074:	e005      	b.n	8006082 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8006076:	2300      	movs	r3, #0
 8006078:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006080:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006082:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006084:	2b00      	cmp	r3, #0
 8006086:	f000 80ea 	beq.w	800625e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800608e:	4a55      	ldr	r2, [pc, #340]	@ (80061e4 <UART_SetConfig+0xc28>)
 8006090:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006094:	461a      	mov	r2, r3
 8006096:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006098:	fbb3 f3f2 	udiv	r3, r3, r2
 800609c:	005a      	lsls	r2, r3, #1
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	085b      	lsrs	r3, r3, #1
 80060a4:	441a      	add	r2, r3
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060b2:	2b0f      	cmp	r3, #15
 80060b4:	d916      	bls.n	80060e4 <UART_SetConfig+0xb28>
 80060b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060bc:	d212      	bcs.n	80060e4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	f023 030f 	bic.w	r3, r3, #15
 80060c6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ca:	085b      	lsrs	r3, r3, #1
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	f003 0307 	and.w	r3, r3, #7
 80060d2:	b29a      	uxth	r2, r3
 80060d4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80060d6:	4313      	orrs	r3, r2
 80060d8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80060e0:	60da      	str	r2, [r3, #12]
 80060e2:	e0bc      	b.n	800625e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80060ea:	e0b8      	b.n	800625e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80060ec:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80060f0:	2b20      	cmp	r3, #32
 80060f2:	dc4b      	bgt.n	800618c <UART_SetConfig+0xbd0>
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	f2c0 8087 	blt.w	8006208 <UART_SetConfig+0xc4c>
 80060fa:	2b20      	cmp	r3, #32
 80060fc:	f200 8084 	bhi.w	8006208 <UART_SetConfig+0xc4c>
 8006100:	a201      	add	r2, pc, #4	@ (adr r2, 8006108 <UART_SetConfig+0xb4c>)
 8006102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006106:	bf00      	nop
 8006108:	08006193 	.word	0x08006193
 800610c:	0800619b 	.word	0x0800619b
 8006110:	08006209 	.word	0x08006209
 8006114:	08006209 	.word	0x08006209
 8006118:	080061a3 	.word	0x080061a3
 800611c:	08006209 	.word	0x08006209
 8006120:	08006209 	.word	0x08006209
 8006124:	08006209 	.word	0x08006209
 8006128:	080061b3 	.word	0x080061b3
 800612c:	08006209 	.word	0x08006209
 8006130:	08006209 	.word	0x08006209
 8006134:	08006209 	.word	0x08006209
 8006138:	08006209 	.word	0x08006209
 800613c:	08006209 	.word	0x08006209
 8006140:	08006209 	.word	0x08006209
 8006144:	08006209 	.word	0x08006209
 8006148:	080061c3 	.word	0x080061c3
 800614c:	08006209 	.word	0x08006209
 8006150:	08006209 	.word	0x08006209
 8006154:	08006209 	.word	0x08006209
 8006158:	08006209 	.word	0x08006209
 800615c:	08006209 	.word	0x08006209
 8006160:	08006209 	.word	0x08006209
 8006164:	08006209 	.word	0x08006209
 8006168:	08006209 	.word	0x08006209
 800616c:	08006209 	.word	0x08006209
 8006170:	08006209 	.word	0x08006209
 8006174:	08006209 	.word	0x08006209
 8006178:	08006209 	.word	0x08006209
 800617c:	08006209 	.word	0x08006209
 8006180:	08006209 	.word	0x08006209
 8006184:	08006209 	.word	0x08006209
 8006188:	080061fb 	.word	0x080061fb
 800618c:	2b40      	cmp	r3, #64	@ 0x40
 800618e:	d037      	beq.n	8006200 <UART_SetConfig+0xc44>
 8006190:	e03a      	b.n	8006208 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006192:	f7fd f819 	bl	80031c8 <HAL_RCC_GetPCLK1Freq>
 8006196:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006198:	e03c      	b.n	8006214 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800619a:	f7fd f82b 	bl	80031f4 <HAL_RCC_GetPCLK2Freq>
 800619e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80061a0:	e038      	b.n	8006214 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80061a6:	4618      	mov	r0, r3
 80061a8:	f7fe fa50 	bl	800464c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80061ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061b0:	e030      	b.n	8006214 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061b2:	f107 0318 	add.w	r3, r7, #24
 80061b6:	4618      	mov	r0, r3
 80061b8:	f7fe fb9c 	bl	80048f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061c0:	e028      	b.n	8006214 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061c2:	4b09      	ldr	r3, [pc, #36]	@ (80061e8 <UART_SetConfig+0xc2c>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 0320 	and.w	r3, r3, #32
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d012      	beq.n	80061f4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80061ce:	4b06      	ldr	r3, [pc, #24]	@ (80061e8 <UART_SetConfig+0xc2c>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	08db      	lsrs	r3, r3, #3
 80061d4:	f003 0303 	and.w	r3, r3, #3
 80061d8:	4a04      	ldr	r2, [pc, #16]	@ (80061ec <UART_SetConfig+0xc30>)
 80061da:	fa22 f303 	lsr.w	r3, r2, r3
 80061de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80061e0:	e018      	b.n	8006214 <UART_SetConfig+0xc58>
 80061e2:	bf00      	nop
 80061e4:	0800e5b8 	.word	0x0800e5b8
 80061e8:	58024400 	.word	0x58024400
 80061ec:	03d09000 	.word	0x03d09000
 80061f0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80061f4:	4b24      	ldr	r3, [pc, #144]	@ (8006288 <UART_SetConfig+0xccc>)
 80061f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061f8:	e00c      	b.n	8006214 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80061fa:	4b24      	ldr	r3, [pc, #144]	@ (800628c <UART_SetConfig+0xcd0>)
 80061fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061fe:	e009      	b.n	8006214 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006200:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006204:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006206:	e005      	b.n	8006214 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8006208:	2300      	movs	r3, #0
 800620a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006212:	bf00      	nop
    }

    if (pclk != 0U)
 8006214:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006216:	2b00      	cmp	r3, #0
 8006218:	d021      	beq.n	800625e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800621e:	4a1c      	ldr	r2, [pc, #112]	@ (8006290 <UART_SetConfig+0xcd4>)
 8006220:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006224:	461a      	mov	r2, r3
 8006226:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006228:	fbb3 f2f2 	udiv	r2, r3, r2
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	085b      	lsrs	r3, r3, #1
 8006232:	441a      	add	r2, r3
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	fbb2 f3f3 	udiv	r3, r2, r3
 800623c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800623e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006240:	2b0f      	cmp	r3, #15
 8006242:	d909      	bls.n	8006258 <UART_SetConfig+0xc9c>
 8006244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006246:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800624a:	d205      	bcs.n	8006258 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800624c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800624e:	b29a      	uxth	r2, r3
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	60da      	str	r2, [r3, #12]
 8006256:	e002      	b.n	800625e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	2201      	movs	r2, #1
 8006262:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	2201      	movs	r2, #1
 800626a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	2200      	movs	r2, #0
 8006272:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	2200      	movs	r2, #0
 8006278:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800627a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800627e:	4618      	mov	r0, r3
 8006280:	3748      	adds	r7, #72	@ 0x48
 8006282:	46bd      	mov	sp, r7
 8006284:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006288:	03d09000 	.word	0x03d09000
 800628c:	003d0900 	.word	0x003d0900
 8006290:	0800e5b8 	.word	0x0800e5b8

08006294 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062a0:	f003 0308 	and.w	r3, r3, #8
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d00a      	beq.n	80062be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	430a      	orrs	r2, r1
 80062bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062c2:	f003 0301 	and.w	r3, r3, #1
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d00a      	beq.n	80062e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	430a      	orrs	r2, r1
 80062de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062e4:	f003 0302 	and.w	r3, r3, #2
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00a      	beq.n	8006302 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	430a      	orrs	r2, r1
 8006300:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006306:	f003 0304 	and.w	r3, r3, #4
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00a      	beq.n	8006324 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	430a      	orrs	r2, r1
 8006322:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006328:	f003 0310 	and.w	r3, r3, #16
 800632c:	2b00      	cmp	r3, #0
 800632e:	d00a      	beq.n	8006346 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	430a      	orrs	r2, r1
 8006344:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800634a:	f003 0320 	and.w	r3, r3, #32
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00a      	beq.n	8006368 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	430a      	orrs	r2, r1
 8006366:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800636c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006370:	2b00      	cmp	r3, #0
 8006372:	d01a      	beq.n	80063aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	430a      	orrs	r2, r1
 8006388:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800638e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006392:	d10a      	bne.n	80063aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	430a      	orrs	r2, r1
 80063a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00a      	beq.n	80063cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	430a      	orrs	r2, r1
 80063ca:	605a      	str	r2, [r3, #4]
  }
}
 80063cc:	bf00      	nop
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b098      	sub	sp, #96	@ 0x60
 80063dc:	af02      	add	r7, sp, #8
 80063de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80063e8:	f7fb f8ee 	bl	80015c8 <HAL_GetTick>
 80063ec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 0308 	and.w	r3, r3, #8
 80063f8:	2b08      	cmp	r3, #8
 80063fa:	d12f      	bne.n	800645c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006400:	9300      	str	r3, [sp, #0]
 8006402:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006404:	2200      	movs	r2, #0
 8006406:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 f88e 	bl	800652c <UART_WaitOnFlagUntilTimeout>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d022      	beq.n	800645c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800641c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800641e:	e853 3f00 	ldrex	r3, [r3]
 8006422:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006424:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006426:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800642a:	653b      	str	r3, [r7, #80]	@ 0x50
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	461a      	mov	r2, r3
 8006432:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006434:	647b      	str	r3, [r7, #68]	@ 0x44
 8006436:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006438:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800643a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800643c:	e841 2300 	strex	r3, r2, [r1]
 8006440:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006442:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006444:	2b00      	cmp	r3, #0
 8006446:	d1e6      	bne.n	8006416 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2220      	movs	r2, #32
 800644c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e063      	b.n	8006524 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 0304 	and.w	r3, r3, #4
 8006466:	2b04      	cmp	r3, #4
 8006468:	d149      	bne.n	80064fe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800646a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800646e:	9300      	str	r3, [sp, #0]
 8006470:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006472:	2200      	movs	r2, #0
 8006474:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 f857 	bl	800652c <UART_WaitOnFlagUntilTimeout>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d03c      	beq.n	80064fe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800648a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800648c:	e853 3f00 	ldrex	r3, [r3]
 8006490:	623b      	str	r3, [r7, #32]
   return(result);
 8006492:	6a3b      	ldr	r3, [r7, #32]
 8006494:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006498:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	461a      	mov	r2, r3
 80064a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80064a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80064a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064aa:	e841 2300 	strex	r3, r2, [r1]
 80064ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80064b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1e6      	bne.n	8006484 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	3308      	adds	r3, #8
 80064bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	e853 3f00 	ldrex	r3, [r3]
 80064c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f023 0301 	bic.w	r3, r3, #1
 80064cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	3308      	adds	r3, #8
 80064d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064d6:	61fa      	str	r2, [r7, #28]
 80064d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064da:	69b9      	ldr	r1, [r7, #24]
 80064dc:	69fa      	ldr	r2, [r7, #28]
 80064de:	e841 2300 	strex	r3, r2, [r1]
 80064e2:	617b      	str	r3, [r7, #20]
   return(result);
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d1e5      	bne.n	80064b6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2220      	movs	r2, #32
 80064ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064fa:	2303      	movs	r3, #3
 80064fc:	e012      	b.n	8006524 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2220      	movs	r2, #32
 8006502:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2220      	movs	r2, #32
 800650a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006522:	2300      	movs	r3, #0
}
 8006524:	4618      	mov	r0, r3
 8006526:	3758      	adds	r7, #88	@ 0x58
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	603b      	str	r3, [r7, #0]
 8006538:	4613      	mov	r3, r2
 800653a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800653c:	e04f      	b.n	80065de <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800653e:	69bb      	ldr	r3, [r7, #24]
 8006540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006544:	d04b      	beq.n	80065de <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006546:	f7fb f83f 	bl	80015c8 <HAL_GetTick>
 800654a:	4602      	mov	r2, r0
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	1ad3      	subs	r3, r2, r3
 8006550:	69ba      	ldr	r2, [r7, #24]
 8006552:	429a      	cmp	r2, r3
 8006554:	d302      	bcc.n	800655c <UART_WaitOnFlagUntilTimeout+0x30>
 8006556:	69bb      	ldr	r3, [r7, #24]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d101      	bne.n	8006560 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800655c:	2303      	movs	r3, #3
 800655e:	e04e      	b.n	80065fe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 0304 	and.w	r3, r3, #4
 800656a:	2b00      	cmp	r3, #0
 800656c:	d037      	beq.n	80065de <UART_WaitOnFlagUntilTimeout+0xb2>
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	2b80      	cmp	r3, #128	@ 0x80
 8006572:	d034      	beq.n	80065de <UART_WaitOnFlagUntilTimeout+0xb2>
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	2b40      	cmp	r3, #64	@ 0x40
 8006578:	d031      	beq.n	80065de <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	69db      	ldr	r3, [r3, #28]
 8006580:	f003 0308 	and.w	r3, r3, #8
 8006584:	2b08      	cmp	r3, #8
 8006586:	d110      	bne.n	80065aa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2208      	movs	r2, #8
 800658e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006590:	68f8      	ldr	r0, [r7, #12]
 8006592:	f000 f839 	bl	8006608 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2208      	movs	r2, #8
 800659a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e029      	b.n	80065fe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	69db      	ldr	r3, [r3, #28]
 80065b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065b8:	d111      	bne.n	80065de <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80065c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065c4:	68f8      	ldr	r0, [r7, #12]
 80065c6:	f000 f81f 	bl	8006608 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2220      	movs	r2, #32
 80065ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80065da:	2303      	movs	r3, #3
 80065dc:	e00f      	b.n	80065fe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	69da      	ldr	r2, [r3, #28]
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	4013      	ands	r3, r2
 80065e8:	68ba      	ldr	r2, [r7, #8]
 80065ea:	429a      	cmp	r2, r3
 80065ec:	bf0c      	ite	eq
 80065ee:	2301      	moveq	r3, #1
 80065f0:	2300      	movne	r3, #0
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	461a      	mov	r2, r3
 80065f6:	79fb      	ldrb	r3, [r7, #7]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d0a0      	beq.n	800653e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3710      	adds	r7, #16
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
	...

08006608 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006608:	b480      	push	{r7}
 800660a:	b095      	sub	sp, #84	@ 0x54
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006618:	e853 3f00 	ldrex	r3, [r3]
 800661c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800661e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006620:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006624:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	461a      	mov	r2, r3
 800662c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800662e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006630:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006632:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006634:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006636:	e841 2300 	strex	r3, r2, [r1]
 800663a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800663c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800663e:	2b00      	cmp	r3, #0
 8006640:	d1e6      	bne.n	8006610 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	3308      	adds	r3, #8
 8006648:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664a:	6a3b      	ldr	r3, [r7, #32]
 800664c:	e853 3f00 	ldrex	r3, [r3]
 8006650:	61fb      	str	r3, [r7, #28]
   return(result);
 8006652:	69fa      	ldr	r2, [r7, #28]
 8006654:	4b1e      	ldr	r3, [pc, #120]	@ (80066d0 <UART_EndRxTransfer+0xc8>)
 8006656:	4013      	ands	r3, r2
 8006658:	64bb      	str	r3, [r7, #72]	@ 0x48
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	3308      	adds	r3, #8
 8006660:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006662:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006664:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006666:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006668:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800666a:	e841 2300 	strex	r3, r2, [r1]
 800666e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006672:	2b00      	cmp	r3, #0
 8006674:	d1e5      	bne.n	8006642 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800667a:	2b01      	cmp	r3, #1
 800667c:	d118      	bne.n	80066b0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	e853 3f00 	ldrex	r3, [r3]
 800668a:	60bb      	str	r3, [r7, #8]
   return(result);
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	f023 0310 	bic.w	r3, r3, #16
 8006692:	647b      	str	r3, [r7, #68]	@ 0x44
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	461a      	mov	r2, r3
 800669a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800669c:	61bb      	str	r3, [r7, #24]
 800669e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a0:	6979      	ldr	r1, [r7, #20]
 80066a2:	69ba      	ldr	r2, [r7, #24]
 80066a4:	e841 2300 	strex	r3, r2, [r1]
 80066a8:	613b      	str	r3, [r7, #16]
   return(result);
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d1e6      	bne.n	800667e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2220      	movs	r2, #32
 80066b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80066c4:	bf00      	nop
 80066c6:	3754      	adds	r7, #84	@ 0x54
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr
 80066d0:	effffffe 	.word	0xeffffffe

080066d4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b085      	sub	sp, #20
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d101      	bne.n	80066ea <HAL_UARTEx_DisableFifoMode+0x16>
 80066e6:	2302      	movs	r3, #2
 80066e8:	e027      	b.n	800673a <HAL_UARTEx_DisableFifoMode+0x66>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2201      	movs	r2, #1
 80066ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2224      	movs	r2, #36	@ 0x24
 80066f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f022 0201 	bic.w	r2, r2, #1
 8006710:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006718:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2220      	movs	r2, #32
 800672c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	3714      	adds	r7, #20
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr

08006746 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006746:	b580      	push	{r7, lr}
 8006748:	b084      	sub	sp, #16
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
 800674e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006756:	2b01      	cmp	r3, #1
 8006758:	d101      	bne.n	800675e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800675a:	2302      	movs	r3, #2
 800675c:	e02d      	b.n	80067ba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2201      	movs	r2, #1
 8006762:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2224      	movs	r2, #36	@ 0x24
 800676a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f022 0201 	bic.w	r2, r2, #1
 8006784:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	683a      	ldr	r2, [r7, #0]
 8006796:	430a      	orrs	r2, r1
 8006798:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 f850 	bl	8006840 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2220      	movs	r2, #32
 80067ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3710      	adds	r7, #16
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b084      	sub	sp, #16
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
 80067ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d101      	bne.n	80067da <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80067d6:	2302      	movs	r3, #2
 80067d8:	e02d      	b.n	8006836 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2201      	movs	r2, #1
 80067de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2224      	movs	r2, #36	@ 0x24
 80067e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f022 0201 	bic.w	r2, r2, #1
 8006800:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	683a      	ldr	r2, [r7, #0]
 8006812:	430a      	orrs	r2, r1
 8006814:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 f812 	bl	8006840 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2220      	movs	r2, #32
 8006828:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	3710      	adds	r7, #16
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
	...

08006840 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800684c:	2b00      	cmp	r3, #0
 800684e:	d108      	bne.n	8006862 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006860:	e031      	b.n	80068c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006862:	2310      	movs	r3, #16
 8006864:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006866:	2310      	movs	r3, #16
 8006868:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	0e5b      	lsrs	r3, r3, #25
 8006872:	b2db      	uxtb	r3, r3
 8006874:	f003 0307 	and.w	r3, r3, #7
 8006878:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	0f5b      	lsrs	r3, r3, #29
 8006882:	b2db      	uxtb	r3, r3
 8006884:	f003 0307 	and.w	r3, r3, #7
 8006888:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800688a:	7bbb      	ldrb	r3, [r7, #14]
 800688c:	7b3a      	ldrb	r2, [r7, #12]
 800688e:	4911      	ldr	r1, [pc, #68]	@ (80068d4 <UARTEx_SetNbDataToProcess+0x94>)
 8006890:	5c8a      	ldrb	r2, [r1, r2]
 8006892:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006896:	7b3a      	ldrb	r2, [r7, #12]
 8006898:	490f      	ldr	r1, [pc, #60]	@ (80068d8 <UARTEx_SetNbDataToProcess+0x98>)
 800689a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800689c:	fb93 f3f2 	sdiv	r3, r3, r2
 80068a0:	b29a      	uxth	r2, r3
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80068a8:	7bfb      	ldrb	r3, [r7, #15]
 80068aa:	7b7a      	ldrb	r2, [r7, #13]
 80068ac:	4909      	ldr	r1, [pc, #36]	@ (80068d4 <UARTEx_SetNbDataToProcess+0x94>)
 80068ae:	5c8a      	ldrb	r2, [r1, r2]
 80068b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80068b4:	7b7a      	ldrb	r2, [r7, #13]
 80068b6:	4908      	ldr	r1, [pc, #32]	@ (80068d8 <UARTEx_SetNbDataToProcess+0x98>)
 80068b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80068ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80068be:	b29a      	uxth	r2, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80068c6:	bf00      	nop
 80068c8:	3714      	adds	r7, #20
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	0800e5d0 	.word	0x0800e5d0
 80068d8:	0800e5d8 	.word	0x0800e5d8

080068dc <__NVIC_SetPriority>:
{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	4603      	mov	r3, r0
 80068e4:	6039      	str	r1, [r7, #0]
 80068e6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80068e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	db0a      	blt.n	8006906 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	b2da      	uxtb	r2, r3
 80068f4:	490c      	ldr	r1, [pc, #48]	@ (8006928 <__NVIC_SetPriority+0x4c>)
 80068f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80068fa:	0112      	lsls	r2, r2, #4
 80068fc:	b2d2      	uxtb	r2, r2
 80068fe:	440b      	add	r3, r1
 8006900:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006904:	e00a      	b.n	800691c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	b2da      	uxtb	r2, r3
 800690a:	4908      	ldr	r1, [pc, #32]	@ (800692c <__NVIC_SetPriority+0x50>)
 800690c:	88fb      	ldrh	r3, [r7, #6]
 800690e:	f003 030f 	and.w	r3, r3, #15
 8006912:	3b04      	subs	r3, #4
 8006914:	0112      	lsls	r2, r2, #4
 8006916:	b2d2      	uxtb	r2, r2
 8006918:	440b      	add	r3, r1
 800691a:	761a      	strb	r2, [r3, #24]
}
 800691c:	bf00      	nop
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr
 8006928:	e000e100 	.word	0xe000e100
 800692c:	e000ed00 	.word	0xe000ed00

08006930 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006930:	b580      	push	{r7, lr}
 8006932:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006934:	4b05      	ldr	r3, [pc, #20]	@ (800694c <SysTick_Handler+0x1c>)
 8006936:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006938:	f002 f826 	bl	8008988 <xTaskGetSchedulerState>
 800693c:	4603      	mov	r3, r0
 800693e:	2b01      	cmp	r3, #1
 8006940:	d001      	beq.n	8006946 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006942:	f002 ff21 	bl	8009788 <xPortSysTickHandler>
  }
}
 8006946:	bf00      	nop
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	e000e010 	.word	0xe000e010

08006950 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006950:	b580      	push	{r7, lr}
 8006952:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006954:	2100      	movs	r1, #0
 8006956:	f06f 0004 	mvn.w	r0, #4
 800695a:	f7ff ffbf 	bl	80068dc <__NVIC_SetPriority>
#endif
}
 800695e:	bf00      	nop
 8006960:	bd80      	pop	{r7, pc}
	...

08006964 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800696a:	f3ef 8305 	mrs	r3, IPSR
 800696e:	603b      	str	r3, [r7, #0]
  return(result);
 8006970:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006972:	2b00      	cmp	r3, #0
 8006974:	d003      	beq.n	800697e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006976:	f06f 0305 	mvn.w	r3, #5
 800697a:	607b      	str	r3, [r7, #4]
 800697c:	e00c      	b.n	8006998 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800697e:	4b0a      	ldr	r3, [pc, #40]	@ (80069a8 <osKernelInitialize+0x44>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d105      	bne.n	8006992 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006986:	4b08      	ldr	r3, [pc, #32]	@ (80069a8 <osKernelInitialize+0x44>)
 8006988:	2201      	movs	r2, #1
 800698a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800698c:	2300      	movs	r3, #0
 800698e:	607b      	str	r3, [r7, #4]
 8006990:	e002      	b.n	8006998 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006992:	f04f 33ff 	mov.w	r3, #4294967295
 8006996:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006998:	687b      	ldr	r3, [r7, #4]
}
 800699a:	4618      	mov	r0, r3
 800699c:	370c      	adds	r7, #12
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr
 80069a6:	bf00      	nop
 80069a8:	24000340 	.word	0x24000340

080069ac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b082      	sub	sp, #8
 80069b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069b2:	f3ef 8305 	mrs	r3, IPSR
 80069b6:	603b      	str	r3, [r7, #0]
  return(result);
 80069b8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d003      	beq.n	80069c6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80069be:	f06f 0305 	mvn.w	r3, #5
 80069c2:	607b      	str	r3, [r7, #4]
 80069c4:	e010      	b.n	80069e8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80069c6:	4b0b      	ldr	r3, [pc, #44]	@ (80069f4 <osKernelStart+0x48>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d109      	bne.n	80069e2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80069ce:	f7ff ffbf 	bl	8006950 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80069d2:	4b08      	ldr	r3, [pc, #32]	@ (80069f4 <osKernelStart+0x48>)
 80069d4:	2202      	movs	r2, #2
 80069d6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80069d8:	f001 faba 	bl	8007f50 <vTaskStartScheduler>
      stat = osOK;
 80069dc:	2300      	movs	r3, #0
 80069de:	607b      	str	r3, [r7, #4]
 80069e0:	e002      	b.n	80069e8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80069e2:	f04f 33ff 	mov.w	r3, #4294967295
 80069e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80069e8:	687b      	ldr	r3, [r7, #4]
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3708      	adds	r7, #8
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	24000340 	.word	0x24000340

080069f8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b08e      	sub	sp, #56	@ 0x38
 80069fc:	af04      	add	r7, sp, #16
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006a04:	2300      	movs	r3, #0
 8006a06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a08:	f3ef 8305 	mrs	r3, IPSR
 8006a0c:	617b      	str	r3, [r7, #20]
  return(result);
 8006a0e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d17e      	bne.n	8006b12 <osThreadNew+0x11a>
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d07b      	beq.n	8006b12 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006a1a:	2380      	movs	r3, #128	@ 0x80
 8006a1c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006a1e:	2318      	movs	r3, #24
 8006a20:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006a22:	2300      	movs	r3, #0
 8006a24:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006a26:	f04f 33ff 	mov.w	r3, #4294967295
 8006a2a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d045      	beq.n	8006abe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d002      	beq.n	8006a40 <osThreadNew+0x48>
        name = attr->name;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	699b      	ldr	r3, [r3, #24]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d002      	beq.n	8006a4e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	699b      	ldr	r3, [r3, #24]
 8006a4c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d008      	beq.n	8006a66 <osThreadNew+0x6e>
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	2b38      	cmp	r3, #56	@ 0x38
 8006a58:	d805      	bhi.n	8006a66 <osThreadNew+0x6e>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	f003 0301 	and.w	r3, r3, #1
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d001      	beq.n	8006a6a <osThreadNew+0x72>
        return (NULL);
 8006a66:	2300      	movs	r3, #0
 8006a68:	e054      	b.n	8006b14 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	695b      	ldr	r3, [r3, #20]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d003      	beq.n	8006a7a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	695b      	ldr	r3, [r3, #20]
 8006a76:	089b      	lsrs	r3, r3, #2
 8006a78:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d00e      	beq.n	8006aa0 <osThreadNew+0xa8>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	2ba7      	cmp	r3, #167	@ 0xa7
 8006a88:	d90a      	bls.n	8006aa0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d006      	beq.n	8006aa0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	695b      	ldr	r3, [r3, #20]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d002      	beq.n	8006aa0 <osThreadNew+0xa8>
        mem = 1;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	61bb      	str	r3, [r7, #24]
 8006a9e:	e010      	b.n	8006ac2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d10c      	bne.n	8006ac2 <osThreadNew+0xca>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d108      	bne.n	8006ac2 <osThreadNew+0xca>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	691b      	ldr	r3, [r3, #16]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d104      	bne.n	8006ac2 <osThreadNew+0xca>
          mem = 0;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	61bb      	str	r3, [r7, #24]
 8006abc:	e001      	b.n	8006ac2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d110      	bne.n	8006aea <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006ad0:	9202      	str	r2, [sp, #8]
 8006ad2:	9301      	str	r3, [sp, #4]
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	9300      	str	r3, [sp, #0]
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	6a3a      	ldr	r2, [r7, #32]
 8006adc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006ade:	68f8      	ldr	r0, [r7, #12]
 8006ae0:	f001 f842 	bl	8007b68 <xTaskCreateStatic>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	613b      	str	r3, [r7, #16]
 8006ae8:	e013      	b.n	8006b12 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d110      	bne.n	8006b12 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006af0:	6a3b      	ldr	r3, [r7, #32]
 8006af2:	b29a      	uxth	r2, r3
 8006af4:	f107 0310 	add.w	r3, r7, #16
 8006af8:	9301      	str	r3, [sp, #4]
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	9300      	str	r3, [sp, #0]
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006b02:	68f8      	ldr	r0, [r7, #12]
 8006b04:	f001 f890 	bl	8007c28 <xTaskCreate>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d001      	beq.n	8006b12 <osThreadNew+0x11a>
            hTask = NULL;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006b12:	693b      	ldr	r3, [r7, #16]
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3728      	adds	r7, #40	@ 0x28
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b24:	f3ef 8305 	mrs	r3, IPSR
 8006b28:	60bb      	str	r3, [r7, #8]
  return(result);
 8006b2a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d003      	beq.n	8006b38 <osDelay+0x1c>
    stat = osErrorISR;
 8006b30:	f06f 0305 	mvn.w	r3, #5
 8006b34:	60fb      	str	r3, [r7, #12]
 8006b36:	e007      	b.n	8006b48 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d002      	beq.n	8006b48 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f001 f9ce 	bl	8007ee4 <vTaskDelay>
    }
  }

  return (stat);
 8006b48:	68fb      	ldr	r3, [r7, #12]
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3710      	adds	r7, #16
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
	...

08006b54 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006b54:	b480      	push	{r7}
 8006b56:	b085      	sub	sp, #20
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	4a07      	ldr	r2, [pc, #28]	@ (8006b80 <vApplicationGetIdleTaskMemory+0x2c>)
 8006b64:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	4a06      	ldr	r2, [pc, #24]	@ (8006b84 <vApplicationGetIdleTaskMemory+0x30>)
 8006b6a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2280      	movs	r2, #128	@ 0x80
 8006b70:	601a      	str	r2, [r3, #0]
}
 8006b72:	bf00      	nop
 8006b74:	3714      	adds	r7, #20
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr
 8006b7e:	bf00      	nop
 8006b80:	24000344 	.word	0x24000344
 8006b84:	240003ec 	.word	0x240003ec

08006b88 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006b88:	b480      	push	{r7}
 8006b8a:	b085      	sub	sp, #20
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	4a07      	ldr	r2, [pc, #28]	@ (8006bb4 <vApplicationGetTimerTaskMemory+0x2c>)
 8006b98:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	4a06      	ldr	r2, [pc, #24]	@ (8006bb8 <vApplicationGetTimerTaskMemory+0x30>)
 8006b9e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006ba6:	601a      	str	r2, [r3, #0]
}
 8006ba8:	bf00      	nop
 8006baa:	3714      	adds	r7, #20
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr
 8006bb4:	240005ec 	.word	0x240005ec
 8006bb8:	24000694 	.word	0x24000694

08006bbc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f103 0208 	add.w	r2, r3, #8
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8006bd4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f103 0208 	add.w	r2, r3, #8
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f103 0208 	add.w	r2, r3, #8
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006bf0:	bf00      	nop
 8006bf2:	370c      	adds	r7, #12
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr

08006bfc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006c0a:	bf00      	nop
 8006c0c:	370c      	adds	r7, #12
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr

08006c16 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006c16:	b480      	push	{r7}
 8006c18:	b085      	sub	sp, #20
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
 8006c1e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	68fa      	ldr	r2, [r7, #12]
 8006c2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	689a      	ldr	r2, [r3, #8]
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	683a      	ldr	r2, [r7, #0]
 8006c3a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	683a      	ldr	r2, [r7, #0]
 8006c40:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	1c5a      	adds	r2, r3, #1
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	601a      	str	r2, [r3, #0]
}
 8006c52:	bf00      	nop
 8006c54:	3714      	adds	r7, #20
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr

08006c5e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006c5e:	b480      	push	{r7}
 8006c60:	b085      	sub	sp, #20
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
 8006c66:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c74:	d103      	bne.n	8006c7e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	60fb      	str	r3, [r7, #12]
 8006c7c:	e00c      	b.n	8006c98 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	3308      	adds	r3, #8
 8006c82:	60fb      	str	r3, [r7, #12]
 8006c84:	e002      	b.n	8006c8c <vListInsert+0x2e>
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	60fb      	str	r3, [r7, #12]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	68ba      	ldr	r2, [r7, #8]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d2f6      	bcs.n	8006c86 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	685a      	ldr	r2, [r3, #4]
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	683a      	ldr	r2, [r7, #0]
 8006ca6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	68fa      	ldr	r2, [r7, #12]
 8006cac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	683a      	ldr	r2, [r7, #0]
 8006cb2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	1c5a      	adds	r2, r3, #1
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	601a      	str	r2, [r3, #0]
}
 8006cc4:	bf00      	nop
 8006cc6:	3714      	adds	r7, #20
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr

08006cd0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b085      	sub	sp, #20
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	691b      	ldr	r3, [r3, #16]
 8006cdc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	6892      	ldr	r2, [r2, #8]
 8006ce6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	6852      	ldr	r2, [r2, #4]
 8006cf0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d103      	bne.n	8006d04 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	689a      	ldr	r2, [r3, #8]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	1e5a      	subs	r2, r3, #1
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3714      	adds	r7, #20
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d10b      	bne.n	8006d50 <xQueueGenericReset+0x2c>
	__asm volatile
 8006d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d3c:	f383 8811 	msr	BASEPRI, r3
 8006d40:	f3bf 8f6f 	isb	sy
 8006d44:	f3bf 8f4f 	dsb	sy
 8006d48:	60bb      	str	r3, [r7, #8]
}
 8006d4a:	bf00      	nop
 8006d4c:	bf00      	nop
 8006d4e:	e7fd      	b.n	8006d4c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006d50:	f002 fc8a 	bl	8009668 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d5c:	68f9      	ldr	r1, [r7, #12]
 8006d5e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006d60:	fb01 f303 	mul.w	r3, r1, r3
 8006d64:	441a      	add	r2, r3
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d80:	3b01      	subs	r3, #1
 8006d82:	68f9      	ldr	r1, [r7, #12]
 8006d84:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006d86:	fb01 f303 	mul.w	r3, r1, r3
 8006d8a:	441a      	add	r2, r3
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	22ff      	movs	r2, #255	@ 0xff
 8006d94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	22ff      	movs	r2, #255	@ 0xff
 8006d9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d114      	bne.n	8006dd0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d01a      	beq.n	8006de4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	3310      	adds	r3, #16
 8006db2:	4618      	mov	r0, r3
 8006db4:	f001 fbca 	bl	800854c <xTaskRemoveFromEventList>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d012      	beq.n	8006de4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8006df4 <xQueueGenericReset+0xd0>)
 8006dc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006dc4:	601a      	str	r2, [r3, #0]
 8006dc6:	f3bf 8f4f 	dsb	sy
 8006dca:	f3bf 8f6f 	isb	sy
 8006dce:	e009      	b.n	8006de4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	3310      	adds	r3, #16
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f7ff fef1 	bl	8006bbc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	3324      	adds	r3, #36	@ 0x24
 8006dde:	4618      	mov	r0, r3
 8006de0:	f7ff feec 	bl	8006bbc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006de4:	f002 fc72 	bl	80096cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006de8:	2301      	movs	r3, #1
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3710      	adds	r7, #16
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
 8006df2:	bf00      	nop
 8006df4:	e000ed04 	.word	0xe000ed04

08006df8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b08e      	sub	sp, #56	@ 0x38
 8006dfc:	af02      	add	r7, sp, #8
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	607a      	str	r2, [r7, #4]
 8006e04:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d10b      	bne.n	8006e24 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e10:	f383 8811 	msr	BASEPRI, r3
 8006e14:	f3bf 8f6f 	isb	sy
 8006e18:	f3bf 8f4f 	dsb	sy
 8006e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006e1e:	bf00      	nop
 8006e20:	bf00      	nop
 8006e22:	e7fd      	b.n	8006e20 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d10b      	bne.n	8006e42 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006e2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e2e:	f383 8811 	msr	BASEPRI, r3
 8006e32:	f3bf 8f6f 	isb	sy
 8006e36:	f3bf 8f4f 	dsb	sy
 8006e3a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006e3c:	bf00      	nop
 8006e3e:	bf00      	nop
 8006e40:	e7fd      	b.n	8006e3e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d002      	beq.n	8006e4e <xQueueGenericCreateStatic+0x56>
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d001      	beq.n	8006e52 <xQueueGenericCreateStatic+0x5a>
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e000      	b.n	8006e54 <xQueueGenericCreateStatic+0x5c>
 8006e52:	2300      	movs	r3, #0
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d10b      	bne.n	8006e70 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e5c:	f383 8811 	msr	BASEPRI, r3
 8006e60:	f3bf 8f6f 	isb	sy
 8006e64:	f3bf 8f4f 	dsb	sy
 8006e68:	623b      	str	r3, [r7, #32]
}
 8006e6a:	bf00      	nop
 8006e6c:	bf00      	nop
 8006e6e:	e7fd      	b.n	8006e6c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d102      	bne.n	8006e7c <xQueueGenericCreateStatic+0x84>
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d101      	bne.n	8006e80 <xQueueGenericCreateStatic+0x88>
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e000      	b.n	8006e82 <xQueueGenericCreateStatic+0x8a>
 8006e80:	2300      	movs	r3, #0
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d10b      	bne.n	8006e9e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e8a:	f383 8811 	msr	BASEPRI, r3
 8006e8e:	f3bf 8f6f 	isb	sy
 8006e92:	f3bf 8f4f 	dsb	sy
 8006e96:	61fb      	str	r3, [r7, #28]
}
 8006e98:	bf00      	nop
 8006e9a:	bf00      	nop
 8006e9c:	e7fd      	b.n	8006e9a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006e9e:	2350      	movs	r3, #80	@ 0x50
 8006ea0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	2b50      	cmp	r3, #80	@ 0x50
 8006ea6:	d00b      	beq.n	8006ec0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eac:	f383 8811 	msr	BASEPRI, r3
 8006eb0:	f3bf 8f6f 	isb	sy
 8006eb4:	f3bf 8f4f 	dsb	sy
 8006eb8:	61bb      	str	r3, [r7, #24]
}
 8006eba:	bf00      	nop
 8006ebc:	bf00      	nop
 8006ebe:	e7fd      	b.n	8006ebc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006ec0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d00d      	beq.n	8006ee8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ece:	2201      	movs	r2, #1
 8006ed0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006ed4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eda:	9300      	str	r3, [sp, #0]
 8006edc:	4613      	mov	r3, r2
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	68b9      	ldr	r1, [r7, #8]
 8006ee2:	68f8      	ldr	r0, [r7, #12]
 8006ee4:	f000 f840 	bl	8006f68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3730      	adds	r7, #48	@ 0x30
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}

08006ef2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006ef2:	b580      	push	{r7, lr}
 8006ef4:	b08a      	sub	sp, #40	@ 0x28
 8006ef6:	af02      	add	r7, sp, #8
 8006ef8:	60f8      	str	r0, [r7, #12]
 8006efa:	60b9      	str	r1, [r7, #8]
 8006efc:	4613      	mov	r3, r2
 8006efe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d10b      	bne.n	8006f1e <xQueueGenericCreate+0x2c>
	__asm volatile
 8006f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f0a:	f383 8811 	msr	BASEPRI, r3
 8006f0e:	f3bf 8f6f 	isb	sy
 8006f12:	f3bf 8f4f 	dsb	sy
 8006f16:	613b      	str	r3, [r7, #16]
}
 8006f18:	bf00      	nop
 8006f1a:	bf00      	nop
 8006f1c:	e7fd      	b.n	8006f1a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	68ba      	ldr	r2, [r7, #8]
 8006f22:	fb02 f303 	mul.w	r3, r2, r3
 8006f26:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	3350      	adds	r3, #80	@ 0x50
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f002 fda1 	bl	8009a74 <pvPortMalloc>
 8006f32:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006f34:	69bb      	ldr	r3, [r7, #24]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d011      	beq.n	8006f5e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	3350      	adds	r3, #80	@ 0x50
 8006f42:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006f44:	69bb      	ldr	r3, [r7, #24]
 8006f46:	2200      	movs	r2, #0
 8006f48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006f4c:	79fa      	ldrb	r2, [r7, #7]
 8006f4e:	69bb      	ldr	r3, [r7, #24]
 8006f50:	9300      	str	r3, [sp, #0]
 8006f52:	4613      	mov	r3, r2
 8006f54:	697a      	ldr	r2, [r7, #20]
 8006f56:	68b9      	ldr	r1, [r7, #8]
 8006f58:	68f8      	ldr	r0, [r7, #12]
 8006f5a:	f000 f805 	bl	8006f68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006f5e:	69bb      	ldr	r3, [r7, #24]
	}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3720      	adds	r7, #32
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	60b9      	str	r1, [r7, #8]
 8006f72:	607a      	str	r2, [r7, #4]
 8006f74:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d103      	bne.n	8006f84 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006f7c:	69bb      	ldr	r3, [r7, #24]
 8006f7e:	69ba      	ldr	r2, [r7, #24]
 8006f80:	601a      	str	r2, [r3, #0]
 8006f82:	e002      	b.n	8006f8a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006f84:	69bb      	ldr	r3, [r7, #24]
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	68fa      	ldr	r2, [r7, #12]
 8006f8e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006f90:	69bb      	ldr	r3, [r7, #24]
 8006f92:	68ba      	ldr	r2, [r7, #8]
 8006f94:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006f96:	2101      	movs	r1, #1
 8006f98:	69b8      	ldr	r0, [r7, #24]
 8006f9a:	f7ff fec3 	bl	8006d24 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	78fa      	ldrb	r2, [r7, #3]
 8006fa2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006fa6:	bf00      	nop
 8006fa8:	3710      	adds	r7, #16
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}

08006fae <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b086      	sub	sp, #24
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
 8006fb6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d10b      	bne.n	8006fd6 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8006fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fc2:	f383 8811 	msr	BASEPRI, r3
 8006fc6:	f3bf 8f6f 	isb	sy
 8006fca:	f3bf 8f4f 	dsb	sy
 8006fce:	613b      	str	r3, [r7, #16]
}
 8006fd0:	bf00      	nop
 8006fd2:	bf00      	nop
 8006fd4:	e7fd      	b.n	8006fd2 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006fd6:	683a      	ldr	r2, [r7, #0]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d90b      	bls.n	8006ff6 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8006fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fe2:	f383 8811 	msr	BASEPRI, r3
 8006fe6:	f3bf 8f6f 	isb	sy
 8006fea:	f3bf 8f4f 	dsb	sy
 8006fee:	60fb      	str	r3, [r7, #12]
}
 8006ff0:	bf00      	nop
 8006ff2:	bf00      	nop
 8006ff4:	e7fd      	b.n	8006ff2 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006ff6:	2202      	movs	r2, #2
 8006ff8:	2100      	movs	r1, #0
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f7ff ff79 	bl	8006ef2 <xQueueGenericCreate>
 8007000:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d002      	beq.n	800700e <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	683a      	ldr	r2, [r7, #0]
 800700c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800700e:	697b      	ldr	r3, [r7, #20]
	}
 8007010:	4618      	mov	r0, r3
 8007012:	3718      	adds	r7, #24
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b08e      	sub	sp, #56	@ 0x38
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	607a      	str	r2, [r7, #4]
 8007024:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007026:	2300      	movs	r3, #0
 8007028:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800702e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007030:	2b00      	cmp	r3, #0
 8007032:	d10b      	bne.n	800704c <xQueueGenericSend+0x34>
	__asm volatile
 8007034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007038:	f383 8811 	msr	BASEPRI, r3
 800703c:	f3bf 8f6f 	isb	sy
 8007040:	f3bf 8f4f 	dsb	sy
 8007044:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007046:	bf00      	nop
 8007048:	bf00      	nop
 800704a:	e7fd      	b.n	8007048 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d103      	bne.n	800705a <xQueueGenericSend+0x42>
 8007052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007056:	2b00      	cmp	r3, #0
 8007058:	d101      	bne.n	800705e <xQueueGenericSend+0x46>
 800705a:	2301      	movs	r3, #1
 800705c:	e000      	b.n	8007060 <xQueueGenericSend+0x48>
 800705e:	2300      	movs	r3, #0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d10b      	bne.n	800707c <xQueueGenericSend+0x64>
	__asm volatile
 8007064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007068:	f383 8811 	msr	BASEPRI, r3
 800706c:	f3bf 8f6f 	isb	sy
 8007070:	f3bf 8f4f 	dsb	sy
 8007074:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007076:	bf00      	nop
 8007078:	bf00      	nop
 800707a:	e7fd      	b.n	8007078 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	2b02      	cmp	r3, #2
 8007080:	d103      	bne.n	800708a <xQueueGenericSend+0x72>
 8007082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007084:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007086:	2b01      	cmp	r3, #1
 8007088:	d101      	bne.n	800708e <xQueueGenericSend+0x76>
 800708a:	2301      	movs	r3, #1
 800708c:	e000      	b.n	8007090 <xQueueGenericSend+0x78>
 800708e:	2300      	movs	r3, #0
 8007090:	2b00      	cmp	r3, #0
 8007092:	d10b      	bne.n	80070ac <xQueueGenericSend+0x94>
	__asm volatile
 8007094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007098:	f383 8811 	msr	BASEPRI, r3
 800709c:	f3bf 8f6f 	isb	sy
 80070a0:	f3bf 8f4f 	dsb	sy
 80070a4:	623b      	str	r3, [r7, #32]
}
 80070a6:	bf00      	nop
 80070a8:	bf00      	nop
 80070aa:	e7fd      	b.n	80070a8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80070ac:	f001 fc6c 	bl	8008988 <xTaskGetSchedulerState>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d102      	bne.n	80070bc <xQueueGenericSend+0xa4>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d101      	bne.n	80070c0 <xQueueGenericSend+0xa8>
 80070bc:	2301      	movs	r3, #1
 80070be:	e000      	b.n	80070c2 <xQueueGenericSend+0xaa>
 80070c0:	2300      	movs	r3, #0
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d10b      	bne.n	80070de <xQueueGenericSend+0xc6>
	__asm volatile
 80070c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ca:	f383 8811 	msr	BASEPRI, r3
 80070ce:	f3bf 8f6f 	isb	sy
 80070d2:	f3bf 8f4f 	dsb	sy
 80070d6:	61fb      	str	r3, [r7, #28]
}
 80070d8:	bf00      	nop
 80070da:	bf00      	nop
 80070dc:	e7fd      	b.n	80070da <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80070de:	f002 fac3 	bl	8009668 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80070e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d302      	bcc.n	80070f4 <xQueueGenericSend+0xdc>
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	d129      	bne.n	8007148 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80070f4:	683a      	ldr	r2, [r7, #0]
 80070f6:	68b9      	ldr	r1, [r7, #8]
 80070f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80070fa:	f000 fbc7 	bl	800788c <prvCopyDataToQueue>
 80070fe:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007104:	2b00      	cmp	r3, #0
 8007106:	d010      	beq.n	800712a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800710a:	3324      	adds	r3, #36	@ 0x24
 800710c:	4618      	mov	r0, r3
 800710e:	f001 fa1d 	bl	800854c <xTaskRemoveFromEventList>
 8007112:	4603      	mov	r3, r0
 8007114:	2b00      	cmp	r3, #0
 8007116:	d013      	beq.n	8007140 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007118:	4b3f      	ldr	r3, [pc, #252]	@ (8007218 <xQueueGenericSend+0x200>)
 800711a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800711e:	601a      	str	r2, [r3, #0]
 8007120:	f3bf 8f4f 	dsb	sy
 8007124:	f3bf 8f6f 	isb	sy
 8007128:	e00a      	b.n	8007140 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800712a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800712c:	2b00      	cmp	r3, #0
 800712e:	d007      	beq.n	8007140 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007130:	4b39      	ldr	r3, [pc, #228]	@ (8007218 <xQueueGenericSend+0x200>)
 8007132:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007136:	601a      	str	r2, [r3, #0]
 8007138:	f3bf 8f4f 	dsb	sy
 800713c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007140:	f002 fac4 	bl	80096cc <vPortExitCritical>
				return pdPASS;
 8007144:	2301      	movs	r3, #1
 8007146:	e063      	b.n	8007210 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d103      	bne.n	8007156 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800714e:	f002 fabd 	bl	80096cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007152:	2300      	movs	r3, #0
 8007154:	e05c      	b.n	8007210 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007156:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007158:	2b00      	cmp	r3, #0
 800715a:	d106      	bne.n	800716a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800715c:	f107 0314 	add.w	r3, r7, #20
 8007160:	4618      	mov	r0, r3
 8007162:	f001 fa59 	bl	8008618 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007166:	2301      	movs	r3, #1
 8007168:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800716a:	f002 faaf 	bl	80096cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800716e:	f000 ff5f 	bl	8008030 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007172:	f002 fa79 	bl	8009668 <vPortEnterCritical>
 8007176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007178:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800717c:	b25b      	sxtb	r3, r3
 800717e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007182:	d103      	bne.n	800718c <xQueueGenericSend+0x174>
 8007184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007186:	2200      	movs	r2, #0
 8007188:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800718c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800718e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007192:	b25b      	sxtb	r3, r3
 8007194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007198:	d103      	bne.n	80071a2 <xQueueGenericSend+0x18a>
 800719a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800719c:	2200      	movs	r2, #0
 800719e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80071a2:	f002 fa93 	bl	80096cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80071a6:	1d3a      	adds	r2, r7, #4
 80071a8:	f107 0314 	add.w	r3, r7, #20
 80071ac:	4611      	mov	r1, r2
 80071ae:	4618      	mov	r0, r3
 80071b0:	f001 fa48 	bl	8008644 <xTaskCheckForTimeOut>
 80071b4:	4603      	mov	r3, r0
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d124      	bne.n	8007204 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80071ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80071bc:	f000 fc5e 	bl	8007a7c <prvIsQueueFull>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d018      	beq.n	80071f8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80071c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071c8:	3310      	adds	r3, #16
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	4611      	mov	r1, r2
 80071ce:	4618      	mov	r0, r3
 80071d0:	f001 f96a 	bl	80084a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80071d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80071d6:	f000 fbe9 	bl	80079ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80071da:	f000 ff6f 	bl	80080bc <xTaskResumeAll>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	f47f af7c 	bne.w	80070de <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80071e6:	4b0c      	ldr	r3, [pc, #48]	@ (8007218 <xQueueGenericSend+0x200>)
 80071e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071ec:	601a      	str	r2, [r3, #0]
 80071ee:	f3bf 8f4f 	dsb	sy
 80071f2:	f3bf 8f6f 	isb	sy
 80071f6:	e772      	b.n	80070de <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80071f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80071fa:	f000 fbd7 	bl	80079ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80071fe:	f000 ff5d 	bl	80080bc <xTaskResumeAll>
 8007202:	e76c      	b.n	80070de <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007204:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007206:	f000 fbd1 	bl	80079ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800720a:	f000 ff57 	bl	80080bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800720e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007210:	4618      	mov	r0, r3
 8007212:	3738      	adds	r7, #56	@ 0x38
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}
 8007218:	e000ed04 	.word	0xe000ed04

0800721c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b090      	sub	sp, #64	@ 0x40
 8007220:	af00      	add	r7, sp, #0
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	60b9      	str	r1, [r7, #8]
 8007226:	607a      	str	r2, [r7, #4]
 8007228:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800722e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007230:	2b00      	cmp	r3, #0
 8007232:	d10b      	bne.n	800724c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007238:	f383 8811 	msr	BASEPRI, r3
 800723c:	f3bf 8f6f 	isb	sy
 8007240:	f3bf 8f4f 	dsb	sy
 8007244:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007246:	bf00      	nop
 8007248:	bf00      	nop
 800724a:	e7fd      	b.n	8007248 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d103      	bne.n	800725a <xQueueGenericSendFromISR+0x3e>
 8007252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007256:	2b00      	cmp	r3, #0
 8007258:	d101      	bne.n	800725e <xQueueGenericSendFromISR+0x42>
 800725a:	2301      	movs	r3, #1
 800725c:	e000      	b.n	8007260 <xQueueGenericSendFromISR+0x44>
 800725e:	2300      	movs	r3, #0
 8007260:	2b00      	cmp	r3, #0
 8007262:	d10b      	bne.n	800727c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007268:	f383 8811 	msr	BASEPRI, r3
 800726c:	f3bf 8f6f 	isb	sy
 8007270:	f3bf 8f4f 	dsb	sy
 8007274:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007276:	bf00      	nop
 8007278:	bf00      	nop
 800727a:	e7fd      	b.n	8007278 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	2b02      	cmp	r3, #2
 8007280:	d103      	bne.n	800728a <xQueueGenericSendFromISR+0x6e>
 8007282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007284:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007286:	2b01      	cmp	r3, #1
 8007288:	d101      	bne.n	800728e <xQueueGenericSendFromISR+0x72>
 800728a:	2301      	movs	r3, #1
 800728c:	e000      	b.n	8007290 <xQueueGenericSendFromISR+0x74>
 800728e:	2300      	movs	r3, #0
 8007290:	2b00      	cmp	r3, #0
 8007292:	d10b      	bne.n	80072ac <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007298:	f383 8811 	msr	BASEPRI, r3
 800729c:	f3bf 8f6f 	isb	sy
 80072a0:	f3bf 8f4f 	dsb	sy
 80072a4:	623b      	str	r3, [r7, #32]
}
 80072a6:	bf00      	nop
 80072a8:	bf00      	nop
 80072aa:	e7fd      	b.n	80072a8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80072ac:	f002 fba0 	bl	80099f0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80072b0:	f3ef 8211 	mrs	r2, BASEPRI
 80072b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072b8:	f383 8811 	msr	BASEPRI, r3
 80072bc:	f3bf 8f6f 	isb	sy
 80072c0:	f3bf 8f4f 	dsb	sy
 80072c4:	61fa      	str	r2, [r7, #28]
 80072c6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80072c8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80072ca:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80072cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80072d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d302      	bcc.n	80072de <xQueueGenericSendFromISR+0xc2>
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	2b02      	cmp	r3, #2
 80072dc:	d12f      	bne.n	800733e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80072de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80072e4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80072e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80072ee:	683a      	ldr	r2, [r7, #0]
 80072f0:	68b9      	ldr	r1, [r7, #8]
 80072f2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80072f4:	f000 faca 	bl	800788c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80072f8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80072fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007300:	d112      	bne.n	8007328 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007306:	2b00      	cmp	r3, #0
 8007308:	d016      	beq.n	8007338 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800730a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800730c:	3324      	adds	r3, #36	@ 0x24
 800730e:	4618      	mov	r0, r3
 8007310:	f001 f91c 	bl	800854c <xTaskRemoveFromEventList>
 8007314:	4603      	mov	r3, r0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d00e      	beq.n	8007338 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d00b      	beq.n	8007338 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	601a      	str	r2, [r3, #0]
 8007326:	e007      	b.n	8007338 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007328:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800732c:	3301      	adds	r3, #1
 800732e:	b2db      	uxtb	r3, r3
 8007330:	b25a      	sxtb	r2, r3
 8007332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007334:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007338:	2301      	movs	r3, #1
 800733a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800733c:	e001      	b.n	8007342 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800733e:	2300      	movs	r3, #0
 8007340:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007344:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800734c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800734e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007350:	4618      	mov	r0, r3
 8007352:	3740      	adds	r7, #64	@ 0x40
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b08e      	sub	sp, #56	@ 0x38
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007368:	2b00      	cmp	r3, #0
 800736a:	d10b      	bne.n	8007384 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800736c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007370:	f383 8811 	msr	BASEPRI, r3
 8007374:	f3bf 8f6f 	isb	sy
 8007378:	f3bf 8f4f 	dsb	sy
 800737c:	623b      	str	r3, [r7, #32]
}
 800737e:	bf00      	nop
 8007380:	bf00      	nop
 8007382:	e7fd      	b.n	8007380 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007388:	2b00      	cmp	r3, #0
 800738a:	d00b      	beq.n	80073a4 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800738c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007390:	f383 8811 	msr	BASEPRI, r3
 8007394:	f3bf 8f6f 	isb	sy
 8007398:	f3bf 8f4f 	dsb	sy
 800739c:	61fb      	str	r3, [r7, #28]
}
 800739e:	bf00      	nop
 80073a0:	bf00      	nop
 80073a2:	e7fd      	b.n	80073a0 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80073a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d103      	bne.n	80073b4 <xQueueGiveFromISR+0x5c>
 80073ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d101      	bne.n	80073b8 <xQueueGiveFromISR+0x60>
 80073b4:	2301      	movs	r3, #1
 80073b6:	e000      	b.n	80073ba <xQueueGiveFromISR+0x62>
 80073b8:	2300      	movs	r3, #0
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d10b      	bne.n	80073d6 <xQueueGiveFromISR+0x7e>
	__asm volatile
 80073be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073c2:	f383 8811 	msr	BASEPRI, r3
 80073c6:	f3bf 8f6f 	isb	sy
 80073ca:	f3bf 8f4f 	dsb	sy
 80073ce:	61bb      	str	r3, [r7, #24]
}
 80073d0:	bf00      	nop
 80073d2:	bf00      	nop
 80073d4:	e7fd      	b.n	80073d2 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80073d6:	f002 fb0b 	bl	80099f0 <vPortValidateInterruptPriority>
	__asm volatile
 80073da:	f3ef 8211 	mrs	r2, BASEPRI
 80073de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073e2:	f383 8811 	msr	BASEPRI, r3
 80073e6:	f3bf 8f6f 	isb	sy
 80073ea:	f3bf 8f4f 	dsb	sy
 80073ee:	617a      	str	r2, [r7, #20]
 80073f0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80073f2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80073f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80073f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073fa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80073fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007400:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007402:	429a      	cmp	r2, r3
 8007404:	d22b      	bcs.n	800745e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007408:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800740c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007412:	1c5a      	adds	r2, r3, #1
 8007414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007416:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007418:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800741c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007420:	d112      	bne.n	8007448 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007426:	2b00      	cmp	r3, #0
 8007428:	d016      	beq.n	8007458 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800742a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800742c:	3324      	adds	r3, #36	@ 0x24
 800742e:	4618      	mov	r0, r3
 8007430:	f001 f88c 	bl	800854c <xTaskRemoveFromEventList>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	d00e      	beq.n	8007458 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d00b      	beq.n	8007458 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	2201      	movs	r2, #1
 8007444:	601a      	str	r2, [r3, #0]
 8007446:	e007      	b.n	8007458 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007448:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800744c:	3301      	adds	r3, #1
 800744e:	b2db      	uxtb	r3, r3
 8007450:	b25a      	sxtb	r2, r3
 8007452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007454:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007458:	2301      	movs	r3, #1
 800745a:	637b      	str	r3, [r7, #52]	@ 0x34
 800745c:	e001      	b.n	8007462 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800745e:	2300      	movs	r3, #0
 8007460:	637b      	str	r3, [r7, #52]	@ 0x34
 8007462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007464:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f383 8811 	msr	BASEPRI, r3
}
 800746c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800746e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007470:	4618      	mov	r0, r3
 8007472:	3738      	adds	r7, #56	@ 0x38
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b08c      	sub	sp, #48	@ 0x30
 800747c:	af00      	add	r7, sp, #0
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007484:	2300      	movs	r3, #0
 8007486:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800748c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800748e:	2b00      	cmp	r3, #0
 8007490:	d10b      	bne.n	80074aa <xQueueReceive+0x32>
	__asm volatile
 8007492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007496:	f383 8811 	msr	BASEPRI, r3
 800749a:	f3bf 8f6f 	isb	sy
 800749e:	f3bf 8f4f 	dsb	sy
 80074a2:	623b      	str	r3, [r7, #32]
}
 80074a4:	bf00      	nop
 80074a6:	bf00      	nop
 80074a8:	e7fd      	b.n	80074a6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d103      	bne.n	80074b8 <xQueueReceive+0x40>
 80074b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d101      	bne.n	80074bc <xQueueReceive+0x44>
 80074b8:	2301      	movs	r3, #1
 80074ba:	e000      	b.n	80074be <xQueueReceive+0x46>
 80074bc:	2300      	movs	r3, #0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d10b      	bne.n	80074da <xQueueReceive+0x62>
	__asm volatile
 80074c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074c6:	f383 8811 	msr	BASEPRI, r3
 80074ca:	f3bf 8f6f 	isb	sy
 80074ce:	f3bf 8f4f 	dsb	sy
 80074d2:	61fb      	str	r3, [r7, #28]
}
 80074d4:	bf00      	nop
 80074d6:	bf00      	nop
 80074d8:	e7fd      	b.n	80074d6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80074da:	f001 fa55 	bl	8008988 <xTaskGetSchedulerState>
 80074de:	4603      	mov	r3, r0
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d102      	bne.n	80074ea <xQueueReceive+0x72>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d101      	bne.n	80074ee <xQueueReceive+0x76>
 80074ea:	2301      	movs	r3, #1
 80074ec:	e000      	b.n	80074f0 <xQueueReceive+0x78>
 80074ee:	2300      	movs	r3, #0
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d10b      	bne.n	800750c <xQueueReceive+0x94>
	__asm volatile
 80074f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074f8:	f383 8811 	msr	BASEPRI, r3
 80074fc:	f3bf 8f6f 	isb	sy
 8007500:	f3bf 8f4f 	dsb	sy
 8007504:	61bb      	str	r3, [r7, #24]
}
 8007506:	bf00      	nop
 8007508:	bf00      	nop
 800750a:	e7fd      	b.n	8007508 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800750c:	f002 f8ac 	bl	8009668 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007514:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007518:	2b00      	cmp	r3, #0
 800751a:	d01f      	beq.n	800755c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800751c:	68b9      	ldr	r1, [r7, #8]
 800751e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007520:	f000 fa1e 	bl	8007960 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007526:	1e5a      	subs	r2, r3, #1
 8007528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800752a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800752c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800752e:	691b      	ldr	r3, [r3, #16]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d00f      	beq.n	8007554 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007536:	3310      	adds	r3, #16
 8007538:	4618      	mov	r0, r3
 800753a:	f001 f807 	bl	800854c <xTaskRemoveFromEventList>
 800753e:	4603      	mov	r3, r0
 8007540:	2b00      	cmp	r3, #0
 8007542:	d007      	beq.n	8007554 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007544:	4b3c      	ldr	r3, [pc, #240]	@ (8007638 <xQueueReceive+0x1c0>)
 8007546:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800754a:	601a      	str	r2, [r3, #0]
 800754c:	f3bf 8f4f 	dsb	sy
 8007550:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007554:	f002 f8ba 	bl	80096cc <vPortExitCritical>
				return pdPASS;
 8007558:	2301      	movs	r3, #1
 800755a:	e069      	b.n	8007630 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d103      	bne.n	800756a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007562:	f002 f8b3 	bl	80096cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007566:	2300      	movs	r3, #0
 8007568:	e062      	b.n	8007630 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800756a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800756c:	2b00      	cmp	r3, #0
 800756e:	d106      	bne.n	800757e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007570:	f107 0310 	add.w	r3, r7, #16
 8007574:	4618      	mov	r0, r3
 8007576:	f001 f84f 	bl	8008618 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800757a:	2301      	movs	r3, #1
 800757c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800757e:	f002 f8a5 	bl	80096cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007582:	f000 fd55 	bl	8008030 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007586:	f002 f86f 	bl	8009668 <vPortEnterCritical>
 800758a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800758c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007590:	b25b      	sxtb	r3, r3
 8007592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007596:	d103      	bne.n	80075a0 <xQueueReceive+0x128>
 8007598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800759a:	2200      	movs	r2, #0
 800759c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80075a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80075a6:	b25b      	sxtb	r3, r3
 80075a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ac:	d103      	bne.n	80075b6 <xQueueReceive+0x13e>
 80075ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075b0:	2200      	movs	r2, #0
 80075b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80075b6:	f002 f889 	bl	80096cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80075ba:	1d3a      	adds	r2, r7, #4
 80075bc:	f107 0310 	add.w	r3, r7, #16
 80075c0:	4611      	mov	r1, r2
 80075c2:	4618      	mov	r0, r3
 80075c4:	f001 f83e 	bl	8008644 <xTaskCheckForTimeOut>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d123      	bne.n	8007616 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80075ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075d0:	f000 fa3e 	bl	8007a50 <prvIsQueueEmpty>
 80075d4:	4603      	mov	r3, r0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d017      	beq.n	800760a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80075da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075dc:	3324      	adds	r3, #36	@ 0x24
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	4611      	mov	r1, r2
 80075e2:	4618      	mov	r0, r3
 80075e4:	f000 ff60 	bl	80084a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80075e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075ea:	f000 f9df 	bl	80079ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80075ee:	f000 fd65 	bl	80080bc <xTaskResumeAll>
 80075f2:	4603      	mov	r3, r0
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d189      	bne.n	800750c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80075f8:	4b0f      	ldr	r3, [pc, #60]	@ (8007638 <xQueueReceive+0x1c0>)
 80075fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075fe:	601a      	str	r2, [r3, #0]
 8007600:	f3bf 8f4f 	dsb	sy
 8007604:	f3bf 8f6f 	isb	sy
 8007608:	e780      	b.n	800750c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800760a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800760c:	f000 f9ce 	bl	80079ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007610:	f000 fd54 	bl	80080bc <xTaskResumeAll>
 8007614:	e77a      	b.n	800750c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007616:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007618:	f000 f9c8 	bl	80079ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800761c:	f000 fd4e 	bl	80080bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007620:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007622:	f000 fa15 	bl	8007a50 <prvIsQueueEmpty>
 8007626:	4603      	mov	r3, r0
 8007628:	2b00      	cmp	r3, #0
 800762a:	f43f af6f 	beq.w	800750c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800762e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007630:	4618      	mov	r0, r3
 8007632:	3730      	adds	r7, #48	@ 0x30
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}
 8007638:	e000ed04 	.word	0xe000ed04

0800763c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b08e      	sub	sp, #56	@ 0x38
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007646:	2300      	movs	r3, #0
 8007648:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800764e:	2300      	movs	r3, #0
 8007650:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007654:	2b00      	cmp	r3, #0
 8007656:	d10b      	bne.n	8007670 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8007658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800765c:	f383 8811 	msr	BASEPRI, r3
 8007660:	f3bf 8f6f 	isb	sy
 8007664:	f3bf 8f4f 	dsb	sy
 8007668:	623b      	str	r3, [r7, #32]
}
 800766a:	bf00      	nop
 800766c:	bf00      	nop
 800766e:	e7fd      	b.n	800766c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007674:	2b00      	cmp	r3, #0
 8007676:	d00b      	beq.n	8007690 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8007678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800767c:	f383 8811 	msr	BASEPRI, r3
 8007680:	f3bf 8f6f 	isb	sy
 8007684:	f3bf 8f4f 	dsb	sy
 8007688:	61fb      	str	r3, [r7, #28]
}
 800768a:	bf00      	nop
 800768c:	bf00      	nop
 800768e:	e7fd      	b.n	800768c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007690:	f001 f97a 	bl	8008988 <xTaskGetSchedulerState>
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d102      	bne.n	80076a0 <xQueueSemaphoreTake+0x64>
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d101      	bne.n	80076a4 <xQueueSemaphoreTake+0x68>
 80076a0:	2301      	movs	r3, #1
 80076a2:	e000      	b.n	80076a6 <xQueueSemaphoreTake+0x6a>
 80076a4:	2300      	movs	r3, #0
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d10b      	bne.n	80076c2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80076aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ae:	f383 8811 	msr	BASEPRI, r3
 80076b2:	f3bf 8f6f 	isb	sy
 80076b6:	f3bf 8f4f 	dsb	sy
 80076ba:	61bb      	str	r3, [r7, #24]
}
 80076bc:	bf00      	nop
 80076be:	bf00      	nop
 80076c0:	e7fd      	b.n	80076be <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80076c2:	f001 ffd1 	bl	8009668 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80076c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076ca:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80076cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d024      	beq.n	800771c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80076d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076d4:	1e5a      	subs	r2, r3, #1
 80076d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076d8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80076da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d104      	bne.n	80076ec <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80076e2:	f001 facb 	bl	8008c7c <pvTaskIncrementMutexHeldCount>
 80076e6:	4602      	mov	r2, r0
 80076e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076ea:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076ee:	691b      	ldr	r3, [r3, #16]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d00f      	beq.n	8007714 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076f6:	3310      	adds	r3, #16
 80076f8:	4618      	mov	r0, r3
 80076fa:	f000 ff27 	bl	800854c <xTaskRemoveFromEventList>
 80076fe:	4603      	mov	r3, r0
 8007700:	2b00      	cmp	r3, #0
 8007702:	d007      	beq.n	8007714 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007704:	4b54      	ldr	r3, [pc, #336]	@ (8007858 <xQueueSemaphoreTake+0x21c>)
 8007706:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800770a:	601a      	str	r2, [r3, #0]
 800770c:	f3bf 8f4f 	dsb	sy
 8007710:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007714:	f001 ffda 	bl	80096cc <vPortExitCritical>
				return pdPASS;
 8007718:	2301      	movs	r3, #1
 800771a:	e098      	b.n	800784e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d112      	bne.n	8007748 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007724:	2b00      	cmp	r3, #0
 8007726:	d00b      	beq.n	8007740 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8007728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800772c:	f383 8811 	msr	BASEPRI, r3
 8007730:	f3bf 8f6f 	isb	sy
 8007734:	f3bf 8f4f 	dsb	sy
 8007738:	617b      	str	r3, [r7, #20]
}
 800773a:	bf00      	nop
 800773c:	bf00      	nop
 800773e:	e7fd      	b.n	800773c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007740:	f001 ffc4 	bl	80096cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007744:	2300      	movs	r3, #0
 8007746:	e082      	b.n	800784e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800774a:	2b00      	cmp	r3, #0
 800774c:	d106      	bne.n	800775c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800774e:	f107 030c 	add.w	r3, r7, #12
 8007752:	4618      	mov	r0, r3
 8007754:	f000 ff60 	bl	8008618 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007758:	2301      	movs	r3, #1
 800775a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800775c:	f001 ffb6 	bl	80096cc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007760:	f000 fc66 	bl	8008030 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007764:	f001 ff80 	bl	8009668 <vPortEnterCritical>
 8007768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800776a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800776e:	b25b      	sxtb	r3, r3
 8007770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007774:	d103      	bne.n	800777e <xQueueSemaphoreTake+0x142>
 8007776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007778:	2200      	movs	r2, #0
 800777a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800777e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007780:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007784:	b25b      	sxtb	r3, r3
 8007786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800778a:	d103      	bne.n	8007794 <xQueueSemaphoreTake+0x158>
 800778c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800778e:	2200      	movs	r2, #0
 8007790:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007794:	f001 ff9a 	bl	80096cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007798:	463a      	mov	r2, r7
 800779a:	f107 030c 	add.w	r3, r7, #12
 800779e:	4611      	mov	r1, r2
 80077a0:	4618      	mov	r0, r3
 80077a2:	f000 ff4f 	bl	8008644 <xTaskCheckForTimeOut>
 80077a6:	4603      	mov	r3, r0
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d132      	bne.n	8007812 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80077ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80077ae:	f000 f94f 	bl	8007a50 <prvIsQueueEmpty>
 80077b2:	4603      	mov	r3, r0
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d026      	beq.n	8007806 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80077b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d109      	bne.n	80077d4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80077c0:	f001 ff52 	bl	8009668 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80077c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	4618      	mov	r0, r3
 80077ca:	f001 f8fb 	bl	80089c4 <xTaskPriorityInherit>
 80077ce:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80077d0:	f001 ff7c 	bl	80096cc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80077d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077d6:	3324      	adds	r3, #36	@ 0x24
 80077d8:	683a      	ldr	r2, [r7, #0]
 80077da:	4611      	mov	r1, r2
 80077dc:	4618      	mov	r0, r3
 80077de:	f000 fe63 	bl	80084a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80077e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80077e4:	f000 f8e2 	bl	80079ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80077e8:	f000 fc68 	bl	80080bc <xTaskResumeAll>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	f47f af67 	bne.w	80076c2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80077f4:	4b18      	ldr	r3, [pc, #96]	@ (8007858 <xQueueSemaphoreTake+0x21c>)
 80077f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077fa:	601a      	str	r2, [r3, #0]
 80077fc:	f3bf 8f4f 	dsb	sy
 8007800:	f3bf 8f6f 	isb	sy
 8007804:	e75d      	b.n	80076c2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007806:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007808:	f000 f8d0 	bl	80079ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800780c:	f000 fc56 	bl	80080bc <xTaskResumeAll>
 8007810:	e757      	b.n	80076c2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007812:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007814:	f000 f8ca 	bl	80079ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007818:	f000 fc50 	bl	80080bc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800781c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800781e:	f000 f917 	bl	8007a50 <prvIsQueueEmpty>
 8007822:	4603      	mov	r3, r0
 8007824:	2b00      	cmp	r3, #0
 8007826:	f43f af4c 	beq.w	80076c2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800782a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800782c:	2b00      	cmp	r3, #0
 800782e:	d00d      	beq.n	800784c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8007830:	f001 ff1a 	bl	8009668 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007834:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007836:	f000 f811 	bl	800785c <prvGetDisinheritPriorityAfterTimeout>
 800783a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800783c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007842:	4618      	mov	r0, r3
 8007844:	f001 f996 	bl	8008b74 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007848:	f001 ff40 	bl	80096cc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800784c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800784e:	4618      	mov	r0, r3
 8007850:	3738      	adds	r7, #56	@ 0x38
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	e000ed04 	.word	0xe000ed04

0800785c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800785c:	b480      	push	{r7}
 800785e:	b085      	sub	sp, #20
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007868:	2b00      	cmp	r3, #0
 800786a:	d006      	beq.n	800787a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8007876:	60fb      	str	r3, [r7, #12]
 8007878:	e001      	b.n	800787e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800787a:	2300      	movs	r3, #0
 800787c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800787e:	68fb      	ldr	r3, [r7, #12]
	}
 8007880:	4618      	mov	r0, r3
 8007882:	3714      	adds	r7, #20
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b086      	sub	sp, #24
 8007890:	af00      	add	r7, sp, #0
 8007892:	60f8      	str	r0, [r7, #12]
 8007894:	60b9      	str	r1, [r7, #8]
 8007896:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007898:	2300      	movs	r3, #0
 800789a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d10d      	bne.n	80078c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d14d      	bne.n	800794e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	4618      	mov	r0, r3
 80078b8:	f001 f8ec 	bl	8008a94 <xTaskPriorityDisinherit>
 80078bc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2200      	movs	r2, #0
 80078c2:	609a      	str	r2, [r3, #8]
 80078c4:	e043      	b.n	800794e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d119      	bne.n	8007900 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6858      	ldr	r0, [r3, #4]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078d4:	461a      	mov	r2, r3
 80078d6:	68b9      	ldr	r1, [r7, #8]
 80078d8:	f003 fd3f 	bl	800b35a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	685a      	ldr	r2, [r3, #4]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078e4:	441a      	add	r2, r3
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	685a      	ldr	r2, [r3, #4]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d32b      	bcc.n	800794e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	605a      	str	r2, [r3, #4]
 80078fe:	e026      	b.n	800794e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	68d8      	ldr	r0, [r3, #12]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007908:	461a      	mov	r2, r3
 800790a:	68b9      	ldr	r1, [r7, #8]
 800790c:	f003 fd25 	bl	800b35a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	68da      	ldr	r2, [r3, #12]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007918:	425b      	negs	r3, r3
 800791a:	441a      	add	r2, r3
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	68da      	ldr	r2, [r3, #12]
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	429a      	cmp	r2, r3
 800792a:	d207      	bcs.n	800793c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	689a      	ldr	r2, [r3, #8]
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007934:	425b      	negs	r3, r3
 8007936:	441a      	add	r2, r3
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2b02      	cmp	r3, #2
 8007940:	d105      	bne.n	800794e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d002      	beq.n	800794e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	3b01      	subs	r3, #1
 800794c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	1c5a      	adds	r2, r3, #1
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007956:	697b      	ldr	r3, [r7, #20]
}
 8007958:	4618      	mov	r0, r3
 800795a:	3718      	adds	r7, #24
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800796e:	2b00      	cmp	r3, #0
 8007970:	d018      	beq.n	80079a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	68da      	ldr	r2, [r3, #12]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800797a:	441a      	add	r2, r3
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	68da      	ldr	r2, [r3, #12]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	429a      	cmp	r2, r3
 800798a:	d303      	bcc.n	8007994 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	68d9      	ldr	r1, [r3, #12]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800799c:	461a      	mov	r2, r3
 800799e:	6838      	ldr	r0, [r7, #0]
 80079a0:	f003 fcdb 	bl	800b35a <memcpy>
	}
}
 80079a4:	bf00      	nop
 80079a6:	3708      	adds	r7, #8
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80079b4:	f001 fe58 	bl	8009668 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80079be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80079c0:	e011      	b.n	80079e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d012      	beq.n	80079f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	3324      	adds	r3, #36	@ 0x24
 80079ce:	4618      	mov	r0, r3
 80079d0:	f000 fdbc 	bl	800854c <xTaskRemoveFromEventList>
 80079d4:	4603      	mov	r3, r0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d001      	beq.n	80079de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80079da:	f000 fe97 	bl	800870c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80079de:	7bfb      	ldrb	r3, [r7, #15]
 80079e0:	3b01      	subs	r3, #1
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80079e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	dce9      	bgt.n	80079c2 <prvUnlockQueue+0x16>
 80079ee:	e000      	b.n	80079f2 <prvUnlockQueue+0x46>
					break;
 80079f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	22ff      	movs	r2, #255	@ 0xff
 80079f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80079fa:	f001 fe67 	bl	80096cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80079fe:	f001 fe33 	bl	8009668 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007a08:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007a0a:	e011      	b.n	8007a30 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	691b      	ldr	r3, [r3, #16]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d012      	beq.n	8007a3a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	3310      	adds	r3, #16
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f000 fd97 	bl	800854c <xTaskRemoveFromEventList>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d001      	beq.n	8007a28 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007a24:	f000 fe72 	bl	800870c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007a28:	7bbb      	ldrb	r3, [r7, #14]
 8007a2a:	3b01      	subs	r3, #1
 8007a2c:	b2db      	uxtb	r3, r3
 8007a2e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007a30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	dce9      	bgt.n	8007a0c <prvUnlockQueue+0x60>
 8007a38:	e000      	b.n	8007a3c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007a3a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	22ff      	movs	r2, #255	@ 0xff
 8007a40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007a44:	f001 fe42 	bl	80096cc <vPortExitCritical>
}
 8007a48:	bf00      	nop
 8007a4a:	3710      	adds	r7, #16
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b084      	sub	sp, #16
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007a58:	f001 fe06 	bl	8009668 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d102      	bne.n	8007a6a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007a64:	2301      	movs	r3, #1
 8007a66:	60fb      	str	r3, [r7, #12]
 8007a68:	e001      	b.n	8007a6e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007a6e:	f001 fe2d 	bl	80096cc <vPortExitCritical>

	return xReturn;
 8007a72:	68fb      	ldr	r3, [r7, #12]
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3710      	adds	r7, #16
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007a84:	f001 fdf0 	bl	8009668 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d102      	bne.n	8007a9a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007a94:	2301      	movs	r3, #1
 8007a96:	60fb      	str	r3, [r7, #12]
 8007a98:	e001      	b.n	8007a9e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007a9e:	f001 fe15 	bl	80096cc <vPortExitCritical>

	return xReturn;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3710      	adds	r7, #16
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}

08007aac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007aac:	b480      	push	{r7}
 8007aae:	b085      	sub	sp, #20
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	60fb      	str	r3, [r7, #12]
 8007aba:	e014      	b.n	8007ae6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007abc:	4a0f      	ldr	r2, [pc, #60]	@ (8007afc <vQueueAddToRegistry+0x50>)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d10b      	bne.n	8007ae0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007ac8:	490c      	ldr	r1, [pc, #48]	@ (8007afc <vQueueAddToRegistry+0x50>)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	683a      	ldr	r2, [r7, #0]
 8007ace:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8007afc <vQueueAddToRegistry+0x50>)
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	00db      	lsls	r3, r3, #3
 8007ad8:	4413      	add	r3, r2
 8007ada:	687a      	ldr	r2, [r7, #4]
 8007adc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007ade:	e006      	b.n	8007aee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	60fb      	str	r3, [r7, #12]
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2b07      	cmp	r3, #7
 8007aea:	d9e7      	bls.n	8007abc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007aec:	bf00      	nop
 8007aee:	bf00      	nop
 8007af0:	3714      	adds	r7, #20
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr
 8007afa:	bf00      	nop
 8007afc:	24000a94 	.word	0x24000a94

08007b00 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b086      	sub	sp, #24
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	60b9      	str	r1, [r7, #8]
 8007b0a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007b10:	f001 fdaa 	bl	8009668 <vPortEnterCritical>
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007b1a:	b25b      	sxtb	r3, r3
 8007b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b20:	d103      	bne.n	8007b2a <vQueueWaitForMessageRestricted+0x2a>
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	2200      	movs	r2, #0
 8007b26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007b30:	b25b      	sxtb	r3, r3
 8007b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b36:	d103      	bne.n	8007b40 <vQueueWaitForMessageRestricted+0x40>
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007b40:	f001 fdc4 	bl	80096cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d106      	bne.n	8007b5a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	3324      	adds	r3, #36	@ 0x24
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	68b9      	ldr	r1, [r7, #8]
 8007b54:	4618      	mov	r0, r3
 8007b56:	f000 fccd 	bl	80084f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007b5a:	6978      	ldr	r0, [r7, #20]
 8007b5c:	f7ff ff26 	bl	80079ac <prvUnlockQueue>
	}
 8007b60:	bf00      	nop
 8007b62:	3718      	adds	r7, #24
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b08e      	sub	sp, #56	@ 0x38
 8007b6c:	af04      	add	r7, sp, #16
 8007b6e:	60f8      	str	r0, [r7, #12]
 8007b70:	60b9      	str	r1, [r7, #8]
 8007b72:	607a      	str	r2, [r7, #4]
 8007b74:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007b76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d10b      	bne.n	8007b94 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b80:	f383 8811 	msr	BASEPRI, r3
 8007b84:	f3bf 8f6f 	isb	sy
 8007b88:	f3bf 8f4f 	dsb	sy
 8007b8c:	623b      	str	r3, [r7, #32]
}
 8007b8e:	bf00      	nop
 8007b90:	bf00      	nop
 8007b92:	e7fd      	b.n	8007b90 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d10b      	bne.n	8007bb2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8007b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b9e:	f383 8811 	msr	BASEPRI, r3
 8007ba2:	f3bf 8f6f 	isb	sy
 8007ba6:	f3bf 8f4f 	dsb	sy
 8007baa:	61fb      	str	r3, [r7, #28]
}
 8007bac:	bf00      	nop
 8007bae:	bf00      	nop
 8007bb0:	e7fd      	b.n	8007bae <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007bb2:	23a8      	movs	r3, #168	@ 0xa8
 8007bb4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	2ba8      	cmp	r3, #168	@ 0xa8
 8007bba:	d00b      	beq.n	8007bd4 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bc0:	f383 8811 	msr	BASEPRI, r3
 8007bc4:	f3bf 8f6f 	isb	sy
 8007bc8:	f3bf 8f4f 	dsb	sy
 8007bcc:	61bb      	str	r3, [r7, #24]
}
 8007bce:	bf00      	nop
 8007bd0:	bf00      	nop
 8007bd2:	e7fd      	b.n	8007bd0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007bd4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d01e      	beq.n	8007c1a <xTaskCreateStatic+0xb2>
 8007bdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d01b      	beq.n	8007c1a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007be4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007bea:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bee:	2202      	movs	r2, #2
 8007bf0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	9303      	str	r3, [sp, #12]
 8007bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bfa:	9302      	str	r3, [sp, #8]
 8007bfc:	f107 0314 	add.w	r3, r7, #20
 8007c00:	9301      	str	r3, [sp, #4]
 8007c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c04:	9300      	str	r3, [sp, #0]
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	687a      	ldr	r2, [r7, #4]
 8007c0a:	68b9      	ldr	r1, [r7, #8]
 8007c0c:	68f8      	ldr	r0, [r7, #12]
 8007c0e:	f000 f851 	bl	8007cb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c12:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007c14:	f000 f8f6 	bl	8007e04 <prvAddNewTaskToReadyList>
 8007c18:	e001      	b.n	8007c1e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007c1e:	697b      	ldr	r3, [r7, #20]
	}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3728      	adds	r7, #40	@ 0x28
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b08c      	sub	sp, #48	@ 0x30
 8007c2c:	af04      	add	r7, sp, #16
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	603b      	str	r3, [r7, #0]
 8007c34:	4613      	mov	r3, r2
 8007c36:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007c38:	88fb      	ldrh	r3, [r7, #6]
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f001 ff19 	bl	8009a74 <pvPortMalloc>
 8007c42:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d00e      	beq.n	8007c68 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007c4a:	20a8      	movs	r0, #168	@ 0xa8
 8007c4c:	f001 ff12 	bl	8009a74 <pvPortMalloc>
 8007c50:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007c52:	69fb      	ldr	r3, [r7, #28]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d003      	beq.n	8007c60 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007c58:	69fb      	ldr	r3, [r7, #28]
 8007c5a:	697a      	ldr	r2, [r7, #20]
 8007c5c:	631a      	str	r2, [r3, #48]	@ 0x30
 8007c5e:	e005      	b.n	8007c6c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007c60:	6978      	ldr	r0, [r7, #20]
 8007c62:	f001 ffd5 	bl	8009c10 <vPortFree>
 8007c66:	e001      	b.n	8007c6c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007c6c:	69fb      	ldr	r3, [r7, #28]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d017      	beq.n	8007ca2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007c72:	69fb      	ldr	r3, [r7, #28]
 8007c74:	2200      	movs	r2, #0
 8007c76:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007c7a:	88fa      	ldrh	r2, [r7, #6]
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	9303      	str	r3, [sp, #12]
 8007c80:	69fb      	ldr	r3, [r7, #28]
 8007c82:	9302      	str	r3, [sp, #8]
 8007c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c86:	9301      	str	r3, [sp, #4]
 8007c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c8a:	9300      	str	r3, [sp, #0]
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	68b9      	ldr	r1, [r7, #8]
 8007c90:	68f8      	ldr	r0, [r7, #12]
 8007c92:	f000 f80f 	bl	8007cb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c96:	69f8      	ldr	r0, [r7, #28]
 8007c98:	f000 f8b4 	bl	8007e04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	61bb      	str	r3, [r7, #24]
 8007ca0:	e002      	b.n	8007ca8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ca6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007ca8:	69bb      	ldr	r3, [r7, #24]
	}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3720      	adds	r7, #32
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
	...

08007cb4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b088      	sub	sp, #32
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	60b9      	str	r1, [r7, #8]
 8007cbe:	607a      	str	r2, [r7, #4]
 8007cc0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cc4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	461a      	mov	r2, r3
 8007ccc:	21a5      	movs	r1, #165	@ 0xa5
 8007cce:	f003 fa1b 	bl	800b108 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cd4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007cd6:	6879      	ldr	r1, [r7, #4]
 8007cd8:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8007cdc:	440b      	add	r3, r1
 8007cde:	009b      	lsls	r3, r3, #2
 8007ce0:	4413      	add	r3, r2
 8007ce2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007ce4:	69bb      	ldr	r3, [r7, #24]
 8007ce6:	f023 0307 	bic.w	r3, r3, #7
 8007cea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007cec:	69bb      	ldr	r3, [r7, #24]
 8007cee:	f003 0307 	and.w	r3, r3, #7
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d00b      	beq.n	8007d0e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cfa:	f383 8811 	msr	BASEPRI, r3
 8007cfe:	f3bf 8f6f 	isb	sy
 8007d02:	f3bf 8f4f 	dsb	sy
 8007d06:	617b      	str	r3, [r7, #20]
}
 8007d08:	bf00      	nop
 8007d0a:	bf00      	nop
 8007d0c:	e7fd      	b.n	8007d0a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d01f      	beq.n	8007d54 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d14:	2300      	movs	r3, #0
 8007d16:	61fb      	str	r3, [r7, #28]
 8007d18:	e012      	b.n	8007d40 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007d1a:	68ba      	ldr	r2, [r7, #8]
 8007d1c:	69fb      	ldr	r3, [r7, #28]
 8007d1e:	4413      	add	r3, r2
 8007d20:	7819      	ldrb	r1, [r3, #0]
 8007d22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	4413      	add	r3, r2
 8007d28:	3334      	adds	r3, #52	@ 0x34
 8007d2a:	460a      	mov	r2, r1
 8007d2c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007d2e:	68ba      	ldr	r2, [r7, #8]
 8007d30:	69fb      	ldr	r3, [r7, #28]
 8007d32:	4413      	add	r3, r2
 8007d34:	781b      	ldrb	r3, [r3, #0]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d006      	beq.n	8007d48 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d3a:	69fb      	ldr	r3, [r7, #28]
 8007d3c:	3301      	adds	r3, #1
 8007d3e:	61fb      	str	r3, [r7, #28]
 8007d40:	69fb      	ldr	r3, [r7, #28]
 8007d42:	2b0f      	cmp	r3, #15
 8007d44:	d9e9      	bls.n	8007d1a <prvInitialiseNewTask+0x66>
 8007d46:	e000      	b.n	8007d4a <prvInitialiseNewTask+0x96>
			{
				break;
 8007d48:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007d52:	e003      	b.n	8007d5c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d56:	2200      	movs	r2, #0
 8007d58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d5e:	2b37      	cmp	r3, #55	@ 0x37
 8007d60:	d901      	bls.n	8007d66 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007d62:	2337      	movs	r3, #55	@ 0x37
 8007d64:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007d6a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007d70:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d74:	2200      	movs	r2, #0
 8007d76:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d7a:	3304      	adds	r3, #4
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f7fe ff3d 	bl	8006bfc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d84:	3318      	adds	r3, #24
 8007d86:	4618      	mov	r0, r3
 8007d88:	f7fe ff38 	bl	8006bfc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d90:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d94:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d9a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007da0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007da4:	2200      	movs	r2, #0
 8007da6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dac:	2200      	movs	r2, #0
 8007dae:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db4:	3354      	adds	r3, #84	@ 0x54
 8007db6:	224c      	movs	r2, #76	@ 0x4c
 8007db8:	2100      	movs	r1, #0
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f003 f9a4 	bl	800b108 <memset>
 8007dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dc2:	4a0d      	ldr	r2, [pc, #52]	@ (8007df8 <prvInitialiseNewTask+0x144>)
 8007dc4:	659a      	str	r2, [r3, #88]	@ 0x58
 8007dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dc8:	4a0c      	ldr	r2, [pc, #48]	@ (8007dfc <prvInitialiseNewTask+0x148>)
 8007dca:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dce:	4a0c      	ldr	r2, [pc, #48]	@ (8007e00 <prvInitialiseNewTask+0x14c>)
 8007dd0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007dd2:	683a      	ldr	r2, [r7, #0]
 8007dd4:	68f9      	ldr	r1, [r7, #12]
 8007dd6:	69b8      	ldr	r0, [r7, #24]
 8007dd8:	f001 fb12 	bl	8009400 <pxPortInitialiseStack>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007de0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d002      	beq.n	8007dee <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007dec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007dee:	bf00      	nop
 8007df0:	3720      	adds	r7, #32
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	24004d3c 	.word	0x24004d3c
 8007dfc:	24004da4 	.word	0x24004da4
 8007e00:	24004e0c 	.word	0x24004e0c

08007e04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b082      	sub	sp, #8
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007e0c:	f001 fc2c 	bl	8009668 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007e10:	4b2d      	ldr	r3, [pc, #180]	@ (8007ec8 <prvAddNewTaskToReadyList+0xc4>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	3301      	adds	r3, #1
 8007e16:	4a2c      	ldr	r2, [pc, #176]	@ (8007ec8 <prvAddNewTaskToReadyList+0xc4>)
 8007e18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007e1a:	4b2c      	ldr	r3, [pc, #176]	@ (8007ecc <prvAddNewTaskToReadyList+0xc8>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d109      	bne.n	8007e36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007e22:	4a2a      	ldr	r2, [pc, #168]	@ (8007ecc <prvAddNewTaskToReadyList+0xc8>)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007e28:	4b27      	ldr	r3, [pc, #156]	@ (8007ec8 <prvAddNewTaskToReadyList+0xc4>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d110      	bne.n	8007e52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007e30:	f000 fce6 	bl	8008800 <prvInitialiseTaskLists>
 8007e34:	e00d      	b.n	8007e52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007e36:	4b26      	ldr	r3, [pc, #152]	@ (8007ed0 <prvAddNewTaskToReadyList+0xcc>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d109      	bne.n	8007e52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007e3e:	4b23      	ldr	r3, [pc, #140]	@ (8007ecc <prvAddNewTaskToReadyList+0xc8>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d802      	bhi.n	8007e52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007e4c:	4a1f      	ldr	r2, [pc, #124]	@ (8007ecc <prvAddNewTaskToReadyList+0xc8>)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007e52:	4b20      	ldr	r3, [pc, #128]	@ (8007ed4 <prvAddNewTaskToReadyList+0xd0>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	3301      	adds	r3, #1
 8007e58:	4a1e      	ldr	r2, [pc, #120]	@ (8007ed4 <prvAddNewTaskToReadyList+0xd0>)
 8007e5a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007e5c:	4b1d      	ldr	r3, [pc, #116]	@ (8007ed4 <prvAddNewTaskToReadyList+0xd0>)
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e68:	4b1b      	ldr	r3, [pc, #108]	@ (8007ed8 <prvAddNewTaskToReadyList+0xd4>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d903      	bls.n	8007e78 <prvAddNewTaskToReadyList+0x74>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e74:	4a18      	ldr	r2, [pc, #96]	@ (8007ed8 <prvAddNewTaskToReadyList+0xd4>)
 8007e76:	6013      	str	r3, [r2, #0]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e7c:	4613      	mov	r3, r2
 8007e7e:	009b      	lsls	r3, r3, #2
 8007e80:	4413      	add	r3, r2
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	4a15      	ldr	r2, [pc, #84]	@ (8007edc <prvAddNewTaskToReadyList+0xd8>)
 8007e86:	441a      	add	r2, r3
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	3304      	adds	r3, #4
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	4610      	mov	r0, r2
 8007e90:	f7fe fec1 	bl	8006c16 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007e94:	f001 fc1a 	bl	80096cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007e98:	4b0d      	ldr	r3, [pc, #52]	@ (8007ed0 <prvAddNewTaskToReadyList+0xcc>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d00e      	beq.n	8007ebe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8007ecc <prvAddNewTaskToReadyList+0xc8>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d207      	bcs.n	8007ebe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007eae:	4b0c      	ldr	r3, [pc, #48]	@ (8007ee0 <prvAddNewTaskToReadyList+0xdc>)
 8007eb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007eb4:	601a      	str	r2, [r3, #0]
 8007eb6:	f3bf 8f4f 	dsb	sy
 8007eba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ebe:	bf00      	nop
 8007ec0:	3708      	adds	r7, #8
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	bf00      	nop
 8007ec8:	24000fa8 	.word	0x24000fa8
 8007ecc:	24000ad4 	.word	0x24000ad4
 8007ed0:	24000fb4 	.word	0x24000fb4
 8007ed4:	24000fc4 	.word	0x24000fc4
 8007ed8:	24000fb0 	.word	0x24000fb0
 8007edc:	24000ad8 	.word	0x24000ad8
 8007ee0:	e000ed04 	.word	0xe000ed04

08007ee4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007eec:	2300      	movs	r3, #0
 8007eee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d018      	beq.n	8007f28 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007ef6:	4b14      	ldr	r3, [pc, #80]	@ (8007f48 <vTaskDelay+0x64>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d00b      	beq.n	8007f16 <vTaskDelay+0x32>
	__asm volatile
 8007efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f02:	f383 8811 	msr	BASEPRI, r3
 8007f06:	f3bf 8f6f 	isb	sy
 8007f0a:	f3bf 8f4f 	dsb	sy
 8007f0e:	60bb      	str	r3, [r7, #8]
}
 8007f10:	bf00      	nop
 8007f12:	bf00      	nop
 8007f14:	e7fd      	b.n	8007f12 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007f16:	f000 f88b 	bl	8008030 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007f1a:	2100      	movs	r1, #0
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 fec1 	bl	8008ca4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007f22:	f000 f8cb 	bl	80080bc <xTaskResumeAll>
 8007f26:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d107      	bne.n	8007f3e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007f2e:	4b07      	ldr	r3, [pc, #28]	@ (8007f4c <vTaskDelay+0x68>)
 8007f30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f34:	601a      	str	r2, [r3, #0]
 8007f36:	f3bf 8f4f 	dsb	sy
 8007f3a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f3e:	bf00      	nop
 8007f40:	3710      	adds	r7, #16
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	bf00      	nop
 8007f48:	24000fd0 	.word	0x24000fd0
 8007f4c:	e000ed04 	.word	0xe000ed04

08007f50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b08a      	sub	sp, #40	@ 0x28
 8007f54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007f56:	2300      	movs	r3, #0
 8007f58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007f5e:	463a      	mov	r2, r7
 8007f60:	1d39      	adds	r1, r7, #4
 8007f62:	f107 0308 	add.w	r3, r7, #8
 8007f66:	4618      	mov	r0, r3
 8007f68:	f7fe fdf4 	bl	8006b54 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007f6c:	6839      	ldr	r1, [r7, #0]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	68ba      	ldr	r2, [r7, #8]
 8007f72:	9202      	str	r2, [sp, #8]
 8007f74:	9301      	str	r3, [sp, #4]
 8007f76:	2300      	movs	r3, #0
 8007f78:	9300      	str	r3, [sp, #0]
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	460a      	mov	r2, r1
 8007f7e:	4924      	ldr	r1, [pc, #144]	@ (8008010 <vTaskStartScheduler+0xc0>)
 8007f80:	4824      	ldr	r0, [pc, #144]	@ (8008014 <vTaskStartScheduler+0xc4>)
 8007f82:	f7ff fdf1 	bl	8007b68 <xTaskCreateStatic>
 8007f86:	4603      	mov	r3, r0
 8007f88:	4a23      	ldr	r2, [pc, #140]	@ (8008018 <vTaskStartScheduler+0xc8>)
 8007f8a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007f8c:	4b22      	ldr	r3, [pc, #136]	@ (8008018 <vTaskStartScheduler+0xc8>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d002      	beq.n	8007f9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007f94:	2301      	movs	r3, #1
 8007f96:	617b      	str	r3, [r7, #20]
 8007f98:	e001      	b.n	8007f9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d102      	bne.n	8007faa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007fa4:	f000 fed2 	bl	8008d4c <xTimerCreateTimerTask>
 8007fa8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d11b      	bne.n	8007fe8 <vTaskStartScheduler+0x98>
	__asm volatile
 8007fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fb4:	f383 8811 	msr	BASEPRI, r3
 8007fb8:	f3bf 8f6f 	isb	sy
 8007fbc:	f3bf 8f4f 	dsb	sy
 8007fc0:	613b      	str	r3, [r7, #16]
}
 8007fc2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007fc4:	4b15      	ldr	r3, [pc, #84]	@ (800801c <vTaskStartScheduler+0xcc>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	3354      	adds	r3, #84	@ 0x54
 8007fca:	4a15      	ldr	r2, [pc, #84]	@ (8008020 <vTaskStartScheduler+0xd0>)
 8007fcc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007fce:	4b15      	ldr	r3, [pc, #84]	@ (8008024 <vTaskStartScheduler+0xd4>)
 8007fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8007fd4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007fd6:	4b14      	ldr	r3, [pc, #80]	@ (8008028 <vTaskStartScheduler+0xd8>)
 8007fd8:	2201      	movs	r2, #1
 8007fda:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007fdc:	4b13      	ldr	r3, [pc, #76]	@ (800802c <vTaskStartScheduler+0xdc>)
 8007fde:	2200      	movs	r2, #0
 8007fe0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007fe2:	f001 fa9d 	bl	8009520 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007fe6:	e00f      	b.n	8008008 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fee:	d10b      	bne.n	8008008 <vTaskStartScheduler+0xb8>
	__asm volatile
 8007ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ff4:	f383 8811 	msr	BASEPRI, r3
 8007ff8:	f3bf 8f6f 	isb	sy
 8007ffc:	f3bf 8f4f 	dsb	sy
 8008000:	60fb      	str	r3, [r7, #12]
}
 8008002:	bf00      	nop
 8008004:	bf00      	nop
 8008006:	e7fd      	b.n	8008004 <vTaskStartScheduler+0xb4>
}
 8008008:	bf00      	nop
 800800a:	3718      	adds	r7, #24
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}
 8008010:	0800e56c 	.word	0x0800e56c
 8008014:	08008725 	.word	0x08008725
 8008018:	24000fcc 	.word	0x24000fcc
 800801c:	24000ad4 	.word	0x24000ad4
 8008020:	24000020 	.word	0x24000020
 8008024:	24000fc8 	.word	0x24000fc8
 8008028:	24000fb4 	.word	0x24000fb4
 800802c:	24000fac 	.word	0x24000fac

08008030 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008030:	b480      	push	{r7}
 8008032:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008034:	4b04      	ldr	r3, [pc, #16]	@ (8008048 <vTaskSuspendAll+0x18>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	3301      	adds	r3, #1
 800803a:	4a03      	ldr	r2, [pc, #12]	@ (8008048 <vTaskSuspendAll+0x18>)
 800803c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800803e:	bf00      	nop
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr
 8008048:	24000fd0 	.word	0x24000fd0

0800804c <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 800804c:	b480      	push	{r7}
 800804e:	b083      	sub	sp, #12
 8008050:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 8008052:	2300      	movs	r3, #0
 8008054:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 8008056:	4b14      	ldr	r3, [pc, #80]	@ (80080a8 <prvGetExpectedIdleTime+0x5c>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d001      	beq.n	8008062 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800805e:	2301      	movs	r3, #1
 8008060:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8008062:	4b12      	ldr	r3, [pc, #72]	@ (80080ac <prvGetExpectedIdleTime+0x60>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008068:	2b00      	cmp	r3, #0
 800806a:	d002      	beq.n	8008072 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 800806c:	2300      	movs	r3, #0
 800806e:	607b      	str	r3, [r7, #4]
 8008070:	e012      	b.n	8008098 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8008072:	4b0f      	ldr	r3, [pc, #60]	@ (80080b0 <prvGetExpectedIdleTime+0x64>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	2b01      	cmp	r3, #1
 8008078:	d902      	bls.n	8008080 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800807a:	2300      	movs	r3, #0
 800807c:	607b      	str	r3, [r7, #4]
 800807e:	e00b      	b.n	8008098 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d002      	beq.n	800808c <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 8008086:	2300      	movs	r3, #0
 8008088:	607b      	str	r3, [r7, #4]
 800808a:	e005      	b.n	8008098 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800808c:	4b09      	ldr	r3, [pc, #36]	@ (80080b4 <prvGetExpectedIdleTime+0x68>)
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	4b09      	ldr	r3, [pc, #36]	@ (80080b8 <prvGetExpectedIdleTime+0x6c>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	1ad3      	subs	r3, r2, r3
 8008096:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 8008098:	687b      	ldr	r3, [r7, #4]
	}
 800809a:	4618      	mov	r0, r3
 800809c:	370c      	adds	r7, #12
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr
 80080a6:	bf00      	nop
 80080a8:	24000fb0 	.word	0x24000fb0
 80080ac:	24000ad4 	.word	0x24000ad4
 80080b0:	24000ad8 	.word	0x24000ad8
 80080b4:	24000fc8 	.word	0x24000fc8
 80080b8:	24000fac 	.word	0x24000fac

080080bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b084      	sub	sp, #16
 80080c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80080c2:	2300      	movs	r3, #0
 80080c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80080c6:	2300      	movs	r3, #0
 80080c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80080ca:	4b42      	ldr	r3, [pc, #264]	@ (80081d4 <xTaskResumeAll+0x118>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d10b      	bne.n	80080ea <xTaskResumeAll+0x2e>
	__asm volatile
 80080d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080d6:	f383 8811 	msr	BASEPRI, r3
 80080da:	f3bf 8f6f 	isb	sy
 80080de:	f3bf 8f4f 	dsb	sy
 80080e2:	603b      	str	r3, [r7, #0]
}
 80080e4:	bf00      	nop
 80080e6:	bf00      	nop
 80080e8:	e7fd      	b.n	80080e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80080ea:	f001 fabd 	bl	8009668 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80080ee:	4b39      	ldr	r3, [pc, #228]	@ (80081d4 <xTaskResumeAll+0x118>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	3b01      	subs	r3, #1
 80080f4:	4a37      	ldr	r2, [pc, #220]	@ (80081d4 <xTaskResumeAll+0x118>)
 80080f6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080f8:	4b36      	ldr	r3, [pc, #216]	@ (80081d4 <xTaskResumeAll+0x118>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d162      	bne.n	80081c6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008100:	4b35      	ldr	r3, [pc, #212]	@ (80081d8 <xTaskResumeAll+0x11c>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d05e      	beq.n	80081c6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008108:	e02f      	b.n	800816a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800810a:	4b34      	ldr	r3, [pc, #208]	@ (80081dc <xTaskResumeAll+0x120>)
 800810c:	68db      	ldr	r3, [r3, #12]
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	3318      	adds	r3, #24
 8008116:	4618      	mov	r0, r3
 8008118:	f7fe fdda 	bl	8006cd0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	3304      	adds	r3, #4
 8008120:	4618      	mov	r0, r3
 8008122:	f7fe fdd5 	bl	8006cd0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800812a:	4b2d      	ldr	r3, [pc, #180]	@ (80081e0 <xTaskResumeAll+0x124>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	429a      	cmp	r2, r3
 8008130:	d903      	bls.n	800813a <xTaskResumeAll+0x7e>
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008136:	4a2a      	ldr	r2, [pc, #168]	@ (80081e0 <xTaskResumeAll+0x124>)
 8008138:	6013      	str	r3, [r2, #0]
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800813e:	4613      	mov	r3, r2
 8008140:	009b      	lsls	r3, r3, #2
 8008142:	4413      	add	r3, r2
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	4a27      	ldr	r2, [pc, #156]	@ (80081e4 <xTaskResumeAll+0x128>)
 8008148:	441a      	add	r2, r3
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	3304      	adds	r3, #4
 800814e:	4619      	mov	r1, r3
 8008150:	4610      	mov	r0, r2
 8008152:	f7fe fd60 	bl	8006c16 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800815a:	4b23      	ldr	r3, [pc, #140]	@ (80081e8 <xTaskResumeAll+0x12c>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008160:	429a      	cmp	r2, r3
 8008162:	d302      	bcc.n	800816a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008164:	4b21      	ldr	r3, [pc, #132]	@ (80081ec <xTaskResumeAll+0x130>)
 8008166:	2201      	movs	r2, #1
 8008168:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800816a:	4b1c      	ldr	r3, [pc, #112]	@ (80081dc <xTaskResumeAll+0x120>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d1cb      	bne.n	800810a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d001      	beq.n	800817c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008178:	f000 fbe6 	bl	8008948 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800817c:	4b1c      	ldr	r3, [pc, #112]	@ (80081f0 <xTaskResumeAll+0x134>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d010      	beq.n	80081aa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008188:	f000 f86e 	bl	8008268 <xTaskIncrementTick>
 800818c:	4603      	mov	r3, r0
 800818e:	2b00      	cmp	r3, #0
 8008190:	d002      	beq.n	8008198 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008192:	4b16      	ldr	r3, [pc, #88]	@ (80081ec <xTaskResumeAll+0x130>)
 8008194:	2201      	movs	r2, #1
 8008196:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	3b01      	subs	r3, #1
 800819c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d1f1      	bne.n	8008188 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80081a4:	4b12      	ldr	r3, [pc, #72]	@ (80081f0 <xTaskResumeAll+0x134>)
 80081a6:	2200      	movs	r2, #0
 80081a8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80081aa:	4b10      	ldr	r3, [pc, #64]	@ (80081ec <xTaskResumeAll+0x130>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d009      	beq.n	80081c6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80081b2:	2301      	movs	r3, #1
 80081b4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80081b6:	4b0f      	ldr	r3, [pc, #60]	@ (80081f4 <xTaskResumeAll+0x138>)
 80081b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081bc:	601a      	str	r2, [r3, #0]
 80081be:	f3bf 8f4f 	dsb	sy
 80081c2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80081c6:	f001 fa81 	bl	80096cc <vPortExitCritical>

	return xAlreadyYielded;
 80081ca:	68bb      	ldr	r3, [r7, #8]
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3710      	adds	r7, #16
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}
 80081d4:	24000fd0 	.word	0x24000fd0
 80081d8:	24000fa8 	.word	0x24000fa8
 80081dc:	24000f68 	.word	0x24000f68
 80081e0:	24000fb0 	.word	0x24000fb0
 80081e4:	24000ad8 	.word	0x24000ad8
 80081e8:	24000ad4 	.word	0x24000ad4
 80081ec:	24000fbc 	.word	0x24000fbc
 80081f0:	24000fb8 	.word	0x24000fb8
 80081f4:	e000ed04 	.word	0xe000ed04

080081f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80081f8:	b480      	push	{r7}
 80081fa:	b083      	sub	sp, #12
 80081fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80081fe:	4b05      	ldr	r3, [pc, #20]	@ (8008214 <xTaskGetTickCount+0x1c>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008204:	687b      	ldr	r3, [r7, #4]
}
 8008206:	4618      	mov	r0, r3
 8008208:	370c      	adds	r7, #12
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr
 8008212:	bf00      	nop
 8008214:	24000fac 	.word	0x24000fac

08008218 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 8008218:	b480      	push	{r7}
 800821a:	b085      	sub	sp, #20
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 8008220:	4b0f      	ldr	r3, [pc, #60]	@ (8008260 <vTaskStepTick+0x48>)
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	441a      	add	r2, r3
 8008228:	4b0e      	ldr	r3, [pc, #56]	@ (8008264 <vTaskStepTick+0x4c>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	429a      	cmp	r2, r3
 800822e:	d90b      	bls.n	8008248 <vTaskStepTick+0x30>
	__asm volatile
 8008230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008234:	f383 8811 	msr	BASEPRI, r3
 8008238:	f3bf 8f6f 	isb	sy
 800823c:	f3bf 8f4f 	dsb	sy
 8008240:	60fb      	str	r3, [r7, #12]
}
 8008242:	bf00      	nop
 8008244:	bf00      	nop
 8008246:	e7fd      	b.n	8008244 <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 8008248:	4b05      	ldr	r3, [pc, #20]	@ (8008260 <vTaskStepTick+0x48>)
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	4413      	add	r3, r2
 8008250:	4a03      	ldr	r2, [pc, #12]	@ (8008260 <vTaskStepTick+0x48>)
 8008252:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 8008254:	bf00      	nop
 8008256:	3714      	adds	r7, #20
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr
 8008260:	24000fac 	.word	0x24000fac
 8008264:	24000fc8 	.word	0x24000fc8

08008268 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b086      	sub	sp, #24
 800826c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800826e:	2300      	movs	r3, #0
 8008270:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008272:	4b4f      	ldr	r3, [pc, #316]	@ (80083b0 <xTaskIncrementTick+0x148>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	2b00      	cmp	r3, #0
 8008278:	f040 8090 	bne.w	800839c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800827c:	4b4d      	ldr	r3, [pc, #308]	@ (80083b4 <xTaskIncrementTick+0x14c>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	3301      	adds	r3, #1
 8008282:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008284:	4a4b      	ldr	r2, [pc, #300]	@ (80083b4 <xTaskIncrementTick+0x14c>)
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d121      	bne.n	80082d4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008290:	4b49      	ldr	r3, [pc, #292]	@ (80083b8 <xTaskIncrementTick+0x150>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d00b      	beq.n	80082b2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800829a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800829e:	f383 8811 	msr	BASEPRI, r3
 80082a2:	f3bf 8f6f 	isb	sy
 80082a6:	f3bf 8f4f 	dsb	sy
 80082aa:	603b      	str	r3, [r7, #0]
}
 80082ac:	bf00      	nop
 80082ae:	bf00      	nop
 80082b0:	e7fd      	b.n	80082ae <xTaskIncrementTick+0x46>
 80082b2:	4b41      	ldr	r3, [pc, #260]	@ (80083b8 <xTaskIncrementTick+0x150>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	60fb      	str	r3, [r7, #12]
 80082b8:	4b40      	ldr	r3, [pc, #256]	@ (80083bc <xTaskIncrementTick+0x154>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a3e      	ldr	r2, [pc, #248]	@ (80083b8 <xTaskIncrementTick+0x150>)
 80082be:	6013      	str	r3, [r2, #0]
 80082c0:	4a3e      	ldr	r2, [pc, #248]	@ (80083bc <xTaskIncrementTick+0x154>)
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	6013      	str	r3, [r2, #0]
 80082c6:	4b3e      	ldr	r3, [pc, #248]	@ (80083c0 <xTaskIncrementTick+0x158>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	3301      	adds	r3, #1
 80082cc:	4a3c      	ldr	r2, [pc, #240]	@ (80083c0 <xTaskIncrementTick+0x158>)
 80082ce:	6013      	str	r3, [r2, #0]
 80082d0:	f000 fb3a 	bl	8008948 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80082d4:	4b3b      	ldr	r3, [pc, #236]	@ (80083c4 <xTaskIncrementTick+0x15c>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	693a      	ldr	r2, [r7, #16]
 80082da:	429a      	cmp	r2, r3
 80082dc:	d349      	bcc.n	8008372 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082de:	4b36      	ldr	r3, [pc, #216]	@ (80083b8 <xTaskIncrementTick+0x150>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d104      	bne.n	80082f2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082e8:	4b36      	ldr	r3, [pc, #216]	@ (80083c4 <xTaskIncrementTick+0x15c>)
 80082ea:	f04f 32ff 	mov.w	r2, #4294967295
 80082ee:	601a      	str	r2, [r3, #0]
					break;
 80082f0:	e03f      	b.n	8008372 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082f2:	4b31      	ldr	r3, [pc, #196]	@ (80083b8 <xTaskIncrementTick+0x150>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	68db      	ldr	r3, [r3, #12]
 80082fa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008302:	693a      	ldr	r2, [r7, #16]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	429a      	cmp	r2, r3
 8008308:	d203      	bcs.n	8008312 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800830a:	4a2e      	ldr	r2, [pc, #184]	@ (80083c4 <xTaskIncrementTick+0x15c>)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008310:	e02f      	b.n	8008372 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	3304      	adds	r3, #4
 8008316:	4618      	mov	r0, r3
 8008318:	f7fe fcda 	bl	8006cd0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008320:	2b00      	cmp	r3, #0
 8008322:	d004      	beq.n	800832e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	3318      	adds	r3, #24
 8008328:	4618      	mov	r0, r3
 800832a:	f7fe fcd1 	bl	8006cd0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008332:	4b25      	ldr	r3, [pc, #148]	@ (80083c8 <xTaskIncrementTick+0x160>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	429a      	cmp	r2, r3
 8008338:	d903      	bls.n	8008342 <xTaskIncrementTick+0xda>
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800833e:	4a22      	ldr	r2, [pc, #136]	@ (80083c8 <xTaskIncrementTick+0x160>)
 8008340:	6013      	str	r3, [r2, #0]
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008346:	4613      	mov	r3, r2
 8008348:	009b      	lsls	r3, r3, #2
 800834a:	4413      	add	r3, r2
 800834c:	009b      	lsls	r3, r3, #2
 800834e:	4a1f      	ldr	r2, [pc, #124]	@ (80083cc <xTaskIncrementTick+0x164>)
 8008350:	441a      	add	r2, r3
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	3304      	adds	r3, #4
 8008356:	4619      	mov	r1, r3
 8008358:	4610      	mov	r0, r2
 800835a:	f7fe fc5c 	bl	8006c16 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008362:	4b1b      	ldr	r3, [pc, #108]	@ (80083d0 <xTaskIncrementTick+0x168>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008368:	429a      	cmp	r2, r3
 800836a:	d3b8      	bcc.n	80082de <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800836c:	2301      	movs	r3, #1
 800836e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008370:	e7b5      	b.n	80082de <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008372:	4b17      	ldr	r3, [pc, #92]	@ (80083d0 <xTaskIncrementTick+0x168>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008378:	4914      	ldr	r1, [pc, #80]	@ (80083cc <xTaskIncrementTick+0x164>)
 800837a:	4613      	mov	r3, r2
 800837c:	009b      	lsls	r3, r3, #2
 800837e:	4413      	add	r3, r2
 8008380:	009b      	lsls	r3, r3, #2
 8008382:	440b      	add	r3, r1
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	2b01      	cmp	r3, #1
 8008388:	d901      	bls.n	800838e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800838a:	2301      	movs	r3, #1
 800838c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800838e:	4b11      	ldr	r3, [pc, #68]	@ (80083d4 <xTaskIncrementTick+0x16c>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d007      	beq.n	80083a6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008396:	2301      	movs	r3, #1
 8008398:	617b      	str	r3, [r7, #20]
 800839a:	e004      	b.n	80083a6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800839c:	4b0e      	ldr	r3, [pc, #56]	@ (80083d8 <xTaskIncrementTick+0x170>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	3301      	adds	r3, #1
 80083a2:	4a0d      	ldr	r2, [pc, #52]	@ (80083d8 <xTaskIncrementTick+0x170>)
 80083a4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80083a6:	697b      	ldr	r3, [r7, #20]
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3718      	adds	r7, #24
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}
 80083b0:	24000fd0 	.word	0x24000fd0
 80083b4:	24000fac 	.word	0x24000fac
 80083b8:	24000f60 	.word	0x24000f60
 80083bc:	24000f64 	.word	0x24000f64
 80083c0:	24000fc0 	.word	0x24000fc0
 80083c4:	24000fc8 	.word	0x24000fc8
 80083c8:	24000fb0 	.word	0x24000fb0
 80083cc:	24000ad8 	.word	0x24000ad8
 80083d0:	24000ad4 	.word	0x24000ad4
 80083d4:	24000fbc 	.word	0x24000fbc
 80083d8:	24000fb8 	.word	0x24000fb8

080083dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80083dc:	b480      	push	{r7}
 80083de:	b085      	sub	sp, #20
 80083e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80083e2:	4b2b      	ldr	r3, [pc, #172]	@ (8008490 <vTaskSwitchContext+0xb4>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d003      	beq.n	80083f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80083ea:	4b2a      	ldr	r3, [pc, #168]	@ (8008494 <vTaskSwitchContext+0xb8>)
 80083ec:	2201      	movs	r2, #1
 80083ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80083f0:	e047      	b.n	8008482 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80083f2:	4b28      	ldr	r3, [pc, #160]	@ (8008494 <vTaskSwitchContext+0xb8>)
 80083f4:	2200      	movs	r2, #0
 80083f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083f8:	4b27      	ldr	r3, [pc, #156]	@ (8008498 <vTaskSwitchContext+0xbc>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	60fb      	str	r3, [r7, #12]
 80083fe:	e011      	b.n	8008424 <vTaskSwitchContext+0x48>
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d10b      	bne.n	800841e <vTaskSwitchContext+0x42>
	__asm volatile
 8008406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800840a:	f383 8811 	msr	BASEPRI, r3
 800840e:	f3bf 8f6f 	isb	sy
 8008412:	f3bf 8f4f 	dsb	sy
 8008416:	607b      	str	r3, [r7, #4]
}
 8008418:	bf00      	nop
 800841a:	bf00      	nop
 800841c:	e7fd      	b.n	800841a <vTaskSwitchContext+0x3e>
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	3b01      	subs	r3, #1
 8008422:	60fb      	str	r3, [r7, #12]
 8008424:	491d      	ldr	r1, [pc, #116]	@ (800849c <vTaskSwitchContext+0xc0>)
 8008426:	68fa      	ldr	r2, [r7, #12]
 8008428:	4613      	mov	r3, r2
 800842a:	009b      	lsls	r3, r3, #2
 800842c:	4413      	add	r3, r2
 800842e:	009b      	lsls	r3, r3, #2
 8008430:	440b      	add	r3, r1
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d0e3      	beq.n	8008400 <vTaskSwitchContext+0x24>
 8008438:	68fa      	ldr	r2, [r7, #12]
 800843a:	4613      	mov	r3, r2
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	4413      	add	r3, r2
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	4a16      	ldr	r2, [pc, #88]	@ (800849c <vTaskSwitchContext+0xc0>)
 8008444:	4413      	add	r3, r2
 8008446:	60bb      	str	r3, [r7, #8]
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	685a      	ldr	r2, [r3, #4]
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	605a      	str	r2, [r3, #4]
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	685a      	ldr	r2, [r3, #4]
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	3308      	adds	r3, #8
 800845a:	429a      	cmp	r2, r3
 800845c:	d104      	bne.n	8008468 <vTaskSwitchContext+0x8c>
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	685a      	ldr	r2, [r3, #4]
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	605a      	str	r2, [r3, #4]
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	68db      	ldr	r3, [r3, #12]
 800846e:	4a0c      	ldr	r2, [pc, #48]	@ (80084a0 <vTaskSwitchContext+0xc4>)
 8008470:	6013      	str	r3, [r2, #0]
 8008472:	4a09      	ldr	r2, [pc, #36]	@ (8008498 <vTaskSwitchContext+0xbc>)
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008478:	4b09      	ldr	r3, [pc, #36]	@ (80084a0 <vTaskSwitchContext+0xc4>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	3354      	adds	r3, #84	@ 0x54
 800847e:	4a09      	ldr	r2, [pc, #36]	@ (80084a4 <vTaskSwitchContext+0xc8>)
 8008480:	6013      	str	r3, [r2, #0]
}
 8008482:	bf00      	nop
 8008484:	3714      	adds	r7, #20
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr
 800848e:	bf00      	nop
 8008490:	24000fd0 	.word	0x24000fd0
 8008494:	24000fbc 	.word	0x24000fbc
 8008498:	24000fb0 	.word	0x24000fb0
 800849c:	24000ad8 	.word	0x24000ad8
 80084a0:	24000ad4 	.word	0x24000ad4
 80084a4:	24000020 	.word	0x24000020

080084a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b084      	sub	sp, #16
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d10b      	bne.n	80084d0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80084b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084bc:	f383 8811 	msr	BASEPRI, r3
 80084c0:	f3bf 8f6f 	isb	sy
 80084c4:	f3bf 8f4f 	dsb	sy
 80084c8:	60fb      	str	r3, [r7, #12]
}
 80084ca:	bf00      	nop
 80084cc:	bf00      	nop
 80084ce:	e7fd      	b.n	80084cc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80084d0:	4b07      	ldr	r3, [pc, #28]	@ (80084f0 <vTaskPlaceOnEventList+0x48>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	3318      	adds	r3, #24
 80084d6:	4619      	mov	r1, r3
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f7fe fbc0 	bl	8006c5e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80084de:	2101      	movs	r1, #1
 80084e0:	6838      	ldr	r0, [r7, #0]
 80084e2:	f000 fbdf 	bl	8008ca4 <prvAddCurrentTaskToDelayedList>
}
 80084e6:	bf00      	nop
 80084e8:	3710      	adds	r7, #16
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	bf00      	nop
 80084f0:	24000ad4 	.word	0x24000ad4

080084f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b086      	sub	sp, #24
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	60f8      	str	r0, [r7, #12]
 80084fc:	60b9      	str	r1, [r7, #8]
 80084fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d10b      	bne.n	800851e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800850a:	f383 8811 	msr	BASEPRI, r3
 800850e:	f3bf 8f6f 	isb	sy
 8008512:	f3bf 8f4f 	dsb	sy
 8008516:	617b      	str	r3, [r7, #20]
}
 8008518:	bf00      	nop
 800851a:	bf00      	nop
 800851c:	e7fd      	b.n	800851a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800851e:	4b0a      	ldr	r3, [pc, #40]	@ (8008548 <vTaskPlaceOnEventListRestricted+0x54>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	3318      	adds	r3, #24
 8008524:	4619      	mov	r1, r3
 8008526:	68f8      	ldr	r0, [r7, #12]
 8008528:	f7fe fb75 	bl	8006c16 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d002      	beq.n	8008538 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008532:	f04f 33ff 	mov.w	r3, #4294967295
 8008536:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008538:	6879      	ldr	r1, [r7, #4]
 800853a:	68b8      	ldr	r0, [r7, #8]
 800853c:	f000 fbb2 	bl	8008ca4 <prvAddCurrentTaskToDelayedList>
	}
 8008540:	bf00      	nop
 8008542:	3718      	adds	r7, #24
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}
 8008548:	24000ad4 	.word	0x24000ad4

0800854c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b086      	sub	sp, #24
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	68db      	ldr	r3, [r3, #12]
 8008558:	68db      	ldr	r3, [r3, #12]
 800855a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d10b      	bne.n	800857a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008566:	f383 8811 	msr	BASEPRI, r3
 800856a:	f3bf 8f6f 	isb	sy
 800856e:	f3bf 8f4f 	dsb	sy
 8008572:	60fb      	str	r3, [r7, #12]
}
 8008574:	bf00      	nop
 8008576:	bf00      	nop
 8008578:	e7fd      	b.n	8008576 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	3318      	adds	r3, #24
 800857e:	4618      	mov	r0, r3
 8008580:	f7fe fba6 	bl	8006cd0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008584:	4b1e      	ldr	r3, [pc, #120]	@ (8008600 <xTaskRemoveFromEventList+0xb4>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d11f      	bne.n	80085cc <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	3304      	adds	r3, #4
 8008590:	4618      	mov	r0, r3
 8008592:	f7fe fb9d 	bl	8006cd0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800859a:	4b1a      	ldr	r3, [pc, #104]	@ (8008604 <xTaskRemoveFromEventList+0xb8>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	429a      	cmp	r2, r3
 80085a0:	d903      	bls.n	80085aa <xTaskRemoveFromEventList+0x5e>
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085a6:	4a17      	ldr	r2, [pc, #92]	@ (8008604 <xTaskRemoveFromEventList+0xb8>)
 80085a8:	6013      	str	r3, [r2, #0]
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085ae:	4613      	mov	r3, r2
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	4413      	add	r3, r2
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	4a14      	ldr	r2, [pc, #80]	@ (8008608 <xTaskRemoveFromEventList+0xbc>)
 80085b8:	441a      	add	r2, r3
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	3304      	adds	r3, #4
 80085be:	4619      	mov	r1, r3
 80085c0:	4610      	mov	r0, r2
 80085c2:	f7fe fb28 	bl	8006c16 <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 80085c6:	f000 f9bf 	bl	8008948 <prvResetNextTaskUnblockTime>
 80085ca:	e005      	b.n	80085d8 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	3318      	adds	r3, #24
 80085d0:	4619      	mov	r1, r3
 80085d2:	480e      	ldr	r0, [pc, #56]	@ (800860c <xTaskRemoveFromEventList+0xc0>)
 80085d4:	f7fe fb1f 	bl	8006c16 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085dc:	4b0c      	ldr	r3, [pc, #48]	@ (8008610 <xTaskRemoveFromEventList+0xc4>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d905      	bls.n	80085f2 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80085e6:	2301      	movs	r3, #1
 80085e8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80085ea:	4b0a      	ldr	r3, [pc, #40]	@ (8008614 <xTaskRemoveFromEventList+0xc8>)
 80085ec:	2201      	movs	r2, #1
 80085ee:	601a      	str	r2, [r3, #0]
 80085f0:	e001      	b.n	80085f6 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 80085f2:	2300      	movs	r3, #0
 80085f4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80085f6:	697b      	ldr	r3, [r7, #20]
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3718      	adds	r7, #24
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}
 8008600:	24000fd0 	.word	0x24000fd0
 8008604:	24000fb0 	.word	0x24000fb0
 8008608:	24000ad8 	.word	0x24000ad8
 800860c:	24000f68 	.word	0x24000f68
 8008610:	24000ad4 	.word	0x24000ad4
 8008614:	24000fbc 	.word	0x24000fbc

08008618 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008618:	b480      	push	{r7}
 800861a:	b083      	sub	sp, #12
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008620:	4b06      	ldr	r3, [pc, #24]	@ (800863c <vTaskInternalSetTimeOutState+0x24>)
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008628:	4b05      	ldr	r3, [pc, #20]	@ (8008640 <vTaskInternalSetTimeOutState+0x28>)
 800862a:	681a      	ldr	r2, [r3, #0]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	605a      	str	r2, [r3, #4]
}
 8008630:	bf00      	nop
 8008632:	370c      	adds	r7, #12
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr
 800863c:	24000fc0 	.word	0x24000fc0
 8008640:	24000fac 	.word	0x24000fac

08008644 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b088      	sub	sp, #32
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d10b      	bne.n	800866c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008658:	f383 8811 	msr	BASEPRI, r3
 800865c:	f3bf 8f6f 	isb	sy
 8008660:	f3bf 8f4f 	dsb	sy
 8008664:	613b      	str	r3, [r7, #16]
}
 8008666:	bf00      	nop
 8008668:	bf00      	nop
 800866a:	e7fd      	b.n	8008668 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d10b      	bne.n	800868a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008676:	f383 8811 	msr	BASEPRI, r3
 800867a:	f3bf 8f6f 	isb	sy
 800867e:	f3bf 8f4f 	dsb	sy
 8008682:	60fb      	str	r3, [r7, #12]
}
 8008684:	bf00      	nop
 8008686:	bf00      	nop
 8008688:	e7fd      	b.n	8008686 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800868a:	f000 ffed 	bl	8009668 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800868e:	4b1d      	ldr	r3, [pc, #116]	@ (8008704 <xTaskCheckForTimeOut+0xc0>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	69ba      	ldr	r2, [r7, #24]
 800869a:	1ad3      	subs	r3, r2, r3
 800869c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086a6:	d102      	bne.n	80086ae <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80086a8:	2300      	movs	r3, #0
 80086aa:	61fb      	str	r3, [r7, #28]
 80086ac:	e023      	b.n	80086f6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	4b15      	ldr	r3, [pc, #84]	@ (8008708 <xTaskCheckForTimeOut+0xc4>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d007      	beq.n	80086ca <xTaskCheckForTimeOut+0x86>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	69ba      	ldr	r2, [r7, #24]
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d302      	bcc.n	80086ca <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80086c4:	2301      	movs	r3, #1
 80086c6:	61fb      	str	r3, [r7, #28]
 80086c8:	e015      	b.n	80086f6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	697a      	ldr	r2, [r7, #20]
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d20b      	bcs.n	80086ec <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	1ad2      	subs	r2, r2, r3
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f7ff ff99 	bl	8008618 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80086e6:	2300      	movs	r3, #0
 80086e8:	61fb      	str	r3, [r7, #28]
 80086ea:	e004      	b.n	80086f6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	2200      	movs	r2, #0
 80086f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80086f2:	2301      	movs	r3, #1
 80086f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80086f6:	f000 ffe9 	bl	80096cc <vPortExitCritical>

	return xReturn;
 80086fa:	69fb      	ldr	r3, [r7, #28]
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3720      	adds	r7, #32
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}
 8008704:	24000fac 	.word	0x24000fac
 8008708:	24000fc0 	.word	0x24000fc0

0800870c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800870c:	b480      	push	{r7}
 800870e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008710:	4b03      	ldr	r3, [pc, #12]	@ (8008720 <vTaskMissedYield+0x14>)
 8008712:	2201      	movs	r2, #1
 8008714:	601a      	str	r2, [r3, #0]
}
 8008716:	bf00      	nop
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr
 8008720:	24000fbc 	.word	0x24000fbc

08008724 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800872c:	f000 f8a8 	bl	8008880 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008730:	4b18      	ldr	r3, [pc, #96]	@ (8008794 <prvIdleTask+0x70>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	2b01      	cmp	r3, #1
 8008736:	d907      	bls.n	8008748 <prvIdleTask+0x24>
			{
				taskYIELD();
 8008738:	4b17      	ldr	r3, [pc, #92]	@ (8008798 <prvIdleTask+0x74>)
 800873a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800873e:	601a      	str	r2, [r3, #0]
 8008740:	f3bf 8f4f 	dsb	sy
 8008744:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 8008748:	f7ff fc80 	bl	800804c <prvGetExpectedIdleTime>
 800874c:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2b01      	cmp	r3, #1
 8008752:	d9eb      	bls.n	800872c <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 8008754:	f7ff fc6c 	bl	8008030 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8008758:	4b10      	ldr	r3, [pc, #64]	@ (800879c <prvIdleTask+0x78>)
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	4b10      	ldr	r3, [pc, #64]	@ (80087a0 <prvIdleTask+0x7c>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	429a      	cmp	r2, r3
 8008762:	d20b      	bcs.n	800877c <prvIdleTask+0x58>
	__asm volatile
 8008764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008768:	f383 8811 	msr	BASEPRI, r3
 800876c:	f3bf 8f6f 	isb	sy
 8008770:	f3bf 8f4f 	dsb	sy
 8008774:	60bb      	str	r3, [r7, #8]
}
 8008776:	bf00      	nop
 8008778:	bf00      	nop
 800877a:	e7fd      	b.n	8008778 <prvIdleTask+0x54>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800877c:	f7ff fc66 	bl	800804c <prvGetExpectedIdleTime>
 8008780:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2b01      	cmp	r3, #1
 8008786:	d902      	bls.n	800878e <prvIdleTask+0x6a>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8008788:	68f8      	ldr	r0, [r7, #12]
 800878a:	f001 f81f 	bl	80097cc <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 800878e:	f7ff fc95 	bl	80080bc <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 8008792:	e7cb      	b.n	800872c <prvIdleTask+0x8>
 8008794:	24000ad8 	.word	0x24000ad8
 8008798:	e000ed04 	.word	0xe000ed04
 800879c:	24000fc8 	.word	0x24000fc8
 80087a0:	24000fac 	.word	0x24000fac

080087a4 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 80087a4:	b480      	push	{r7}
 80087a6:	b083      	sub	sp, #12
 80087a8:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 80087aa:	2301      	movs	r3, #1
 80087ac:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 80087ae:	2301      	movs	r3, #1
 80087b0:	71fb      	strb	r3, [r7, #7]

		/* This function must be called from a critical section. */

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 80087b2:	4b0f      	ldr	r3, [pc, #60]	@ (80087f0 <eTaskConfirmSleepModeStatus+0x4c>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d002      	beq.n	80087c0 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 80087ba:	2300      	movs	r3, #0
 80087bc:	71fb      	strb	r3, [r7, #7]
 80087be:	e010      	b.n	80087e2 <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 80087c0:	4b0c      	ldr	r3, [pc, #48]	@ (80087f4 <eTaskConfirmSleepModeStatus+0x50>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d002      	beq.n	80087ce <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 80087c8:	2300      	movs	r3, #0
 80087ca:	71fb      	strb	r3, [r7, #7]
 80087cc:	e009      	b.n	80087e2 <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 80087ce:	4b0a      	ldr	r3, [pc, #40]	@ (80087f8 <eTaskConfirmSleepModeStatus+0x54>)
 80087d0:	681a      	ldr	r2, [r3, #0]
 80087d2:	4b0a      	ldr	r3, [pc, #40]	@ (80087fc <eTaskConfirmSleepModeStatus+0x58>)
 80087d4:	6819      	ldr	r1, [r3, #0]
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	1acb      	subs	r3, r1, r3
 80087da:	429a      	cmp	r2, r3
 80087dc:	d101      	bne.n	80087e2 <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 80087de:	2302      	movs	r3, #2
 80087e0:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 80087e2:	79fb      	ldrb	r3, [r7, #7]
	}
 80087e4:	4618      	mov	r0, r3
 80087e6:	370c      	adds	r7, #12
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr
 80087f0:	24000f68 	.word	0x24000f68
 80087f4:	24000fbc 	.word	0x24000fbc
 80087f8:	24000f94 	.word	0x24000f94
 80087fc:	24000fa8 	.word	0x24000fa8

08008800 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b082      	sub	sp, #8
 8008804:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008806:	2300      	movs	r3, #0
 8008808:	607b      	str	r3, [r7, #4]
 800880a:	e00c      	b.n	8008826 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	4613      	mov	r3, r2
 8008810:	009b      	lsls	r3, r3, #2
 8008812:	4413      	add	r3, r2
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	4a12      	ldr	r2, [pc, #72]	@ (8008860 <prvInitialiseTaskLists+0x60>)
 8008818:	4413      	add	r3, r2
 800881a:	4618      	mov	r0, r3
 800881c:	f7fe f9ce 	bl	8006bbc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	3301      	adds	r3, #1
 8008824:	607b      	str	r3, [r7, #4]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2b37      	cmp	r3, #55	@ 0x37
 800882a:	d9ef      	bls.n	800880c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800882c:	480d      	ldr	r0, [pc, #52]	@ (8008864 <prvInitialiseTaskLists+0x64>)
 800882e:	f7fe f9c5 	bl	8006bbc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008832:	480d      	ldr	r0, [pc, #52]	@ (8008868 <prvInitialiseTaskLists+0x68>)
 8008834:	f7fe f9c2 	bl	8006bbc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008838:	480c      	ldr	r0, [pc, #48]	@ (800886c <prvInitialiseTaskLists+0x6c>)
 800883a:	f7fe f9bf 	bl	8006bbc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800883e:	480c      	ldr	r0, [pc, #48]	@ (8008870 <prvInitialiseTaskLists+0x70>)
 8008840:	f7fe f9bc 	bl	8006bbc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008844:	480b      	ldr	r0, [pc, #44]	@ (8008874 <prvInitialiseTaskLists+0x74>)
 8008846:	f7fe f9b9 	bl	8006bbc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800884a:	4b0b      	ldr	r3, [pc, #44]	@ (8008878 <prvInitialiseTaskLists+0x78>)
 800884c:	4a05      	ldr	r2, [pc, #20]	@ (8008864 <prvInitialiseTaskLists+0x64>)
 800884e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008850:	4b0a      	ldr	r3, [pc, #40]	@ (800887c <prvInitialiseTaskLists+0x7c>)
 8008852:	4a05      	ldr	r2, [pc, #20]	@ (8008868 <prvInitialiseTaskLists+0x68>)
 8008854:	601a      	str	r2, [r3, #0]
}
 8008856:	bf00      	nop
 8008858:	3708      	adds	r7, #8
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}
 800885e:	bf00      	nop
 8008860:	24000ad8 	.word	0x24000ad8
 8008864:	24000f38 	.word	0x24000f38
 8008868:	24000f4c 	.word	0x24000f4c
 800886c:	24000f68 	.word	0x24000f68
 8008870:	24000f7c 	.word	0x24000f7c
 8008874:	24000f94 	.word	0x24000f94
 8008878:	24000f60 	.word	0x24000f60
 800887c:	24000f64 	.word	0x24000f64

08008880 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b082      	sub	sp, #8
 8008884:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008886:	e019      	b.n	80088bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008888:	f000 feee 	bl	8009668 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800888c:	4b10      	ldr	r3, [pc, #64]	@ (80088d0 <prvCheckTasksWaitingTermination+0x50>)
 800888e:	68db      	ldr	r3, [r3, #12]
 8008890:	68db      	ldr	r3, [r3, #12]
 8008892:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	3304      	adds	r3, #4
 8008898:	4618      	mov	r0, r3
 800889a:	f7fe fa19 	bl	8006cd0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800889e:	4b0d      	ldr	r3, [pc, #52]	@ (80088d4 <prvCheckTasksWaitingTermination+0x54>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	3b01      	subs	r3, #1
 80088a4:	4a0b      	ldr	r2, [pc, #44]	@ (80088d4 <prvCheckTasksWaitingTermination+0x54>)
 80088a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80088a8:	4b0b      	ldr	r3, [pc, #44]	@ (80088d8 <prvCheckTasksWaitingTermination+0x58>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	3b01      	subs	r3, #1
 80088ae:	4a0a      	ldr	r2, [pc, #40]	@ (80088d8 <prvCheckTasksWaitingTermination+0x58>)
 80088b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80088b2:	f000 ff0b 	bl	80096cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f000 f810 	bl	80088dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80088bc:	4b06      	ldr	r3, [pc, #24]	@ (80088d8 <prvCheckTasksWaitingTermination+0x58>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d1e1      	bne.n	8008888 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80088c4:	bf00      	nop
 80088c6:	bf00      	nop
 80088c8:	3708      	adds	r7, #8
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	bf00      	nop
 80088d0:	24000f7c 	.word	0x24000f7c
 80088d4:	24000fa8 	.word	0x24000fa8
 80088d8:	24000f90 	.word	0x24000f90

080088dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b084      	sub	sp, #16
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	3354      	adds	r3, #84	@ 0x54
 80088e8:	4618      	mov	r0, r3
 80088ea:	f002 fc59 	bl	800b1a0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d108      	bne.n	800890a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088fc:	4618      	mov	r0, r3
 80088fe:	f001 f987 	bl	8009c10 <vPortFree>
				vPortFree( pxTCB );
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f001 f984 	bl	8009c10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008908:	e019      	b.n	800893e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008910:	2b01      	cmp	r3, #1
 8008912:	d103      	bne.n	800891c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f001 f97b 	bl	8009c10 <vPortFree>
	}
 800891a:	e010      	b.n	800893e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008922:	2b02      	cmp	r3, #2
 8008924:	d00b      	beq.n	800893e <prvDeleteTCB+0x62>
	__asm volatile
 8008926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800892a:	f383 8811 	msr	BASEPRI, r3
 800892e:	f3bf 8f6f 	isb	sy
 8008932:	f3bf 8f4f 	dsb	sy
 8008936:	60fb      	str	r3, [r7, #12]
}
 8008938:	bf00      	nop
 800893a:	bf00      	nop
 800893c:	e7fd      	b.n	800893a <prvDeleteTCB+0x5e>
	}
 800893e:	bf00      	nop
 8008940:	3710      	adds	r7, #16
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}
	...

08008948 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008948:	b480      	push	{r7}
 800894a:	b083      	sub	sp, #12
 800894c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800894e:	4b0c      	ldr	r3, [pc, #48]	@ (8008980 <prvResetNextTaskUnblockTime+0x38>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d104      	bne.n	8008962 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008958:	4b0a      	ldr	r3, [pc, #40]	@ (8008984 <prvResetNextTaskUnblockTime+0x3c>)
 800895a:	f04f 32ff 	mov.w	r2, #4294967295
 800895e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008960:	e008      	b.n	8008974 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008962:	4b07      	ldr	r3, [pc, #28]	@ (8008980 <prvResetNextTaskUnblockTime+0x38>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	68db      	ldr	r3, [r3, #12]
 8008968:	68db      	ldr	r3, [r3, #12]
 800896a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	4a04      	ldr	r2, [pc, #16]	@ (8008984 <prvResetNextTaskUnblockTime+0x3c>)
 8008972:	6013      	str	r3, [r2, #0]
}
 8008974:	bf00      	nop
 8008976:	370c      	adds	r7, #12
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr
 8008980:	24000f60 	.word	0x24000f60
 8008984:	24000fc8 	.word	0x24000fc8

08008988 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008988:	b480      	push	{r7}
 800898a:	b083      	sub	sp, #12
 800898c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800898e:	4b0b      	ldr	r3, [pc, #44]	@ (80089bc <xTaskGetSchedulerState+0x34>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d102      	bne.n	800899c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008996:	2301      	movs	r3, #1
 8008998:	607b      	str	r3, [r7, #4]
 800899a:	e008      	b.n	80089ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800899c:	4b08      	ldr	r3, [pc, #32]	@ (80089c0 <xTaskGetSchedulerState+0x38>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d102      	bne.n	80089aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80089a4:	2302      	movs	r3, #2
 80089a6:	607b      	str	r3, [r7, #4]
 80089a8:	e001      	b.n	80089ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80089aa:	2300      	movs	r3, #0
 80089ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80089ae:	687b      	ldr	r3, [r7, #4]
	}
 80089b0:	4618      	mov	r0, r3
 80089b2:	370c      	adds	r7, #12
 80089b4:	46bd      	mov	sp, r7
 80089b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ba:	4770      	bx	lr
 80089bc:	24000fb4 	.word	0x24000fb4
 80089c0:	24000fd0 	.word	0x24000fd0

080089c4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b084      	sub	sp, #16
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80089d0:	2300      	movs	r3, #0
 80089d2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d051      	beq.n	8008a7e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089de:	4b2a      	ldr	r3, [pc, #168]	@ (8008a88 <xTaskPriorityInherit+0xc4>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d241      	bcs.n	8008a6c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	699b      	ldr	r3, [r3, #24]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	db06      	blt.n	80089fe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089f0:	4b25      	ldr	r3, [pc, #148]	@ (8008a88 <xTaskPriorityInherit+0xc4>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089f6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	6959      	ldr	r1, [r3, #20]
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a06:	4613      	mov	r3, r2
 8008a08:	009b      	lsls	r3, r3, #2
 8008a0a:	4413      	add	r3, r2
 8008a0c:	009b      	lsls	r3, r3, #2
 8008a0e:	4a1f      	ldr	r2, [pc, #124]	@ (8008a8c <xTaskPriorityInherit+0xc8>)
 8008a10:	4413      	add	r3, r2
 8008a12:	4299      	cmp	r1, r3
 8008a14:	d122      	bne.n	8008a5c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	3304      	adds	r3, #4
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f7fe f958 	bl	8006cd0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008a20:	4b19      	ldr	r3, [pc, #100]	@ (8008a88 <xTaskPriorityInherit+0xc4>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a2e:	4b18      	ldr	r3, [pc, #96]	@ (8008a90 <xTaskPriorityInherit+0xcc>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d903      	bls.n	8008a3e <xTaskPriorityInherit+0x7a>
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a3a:	4a15      	ldr	r2, [pc, #84]	@ (8008a90 <xTaskPriorityInherit+0xcc>)
 8008a3c:	6013      	str	r3, [r2, #0]
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a42:	4613      	mov	r3, r2
 8008a44:	009b      	lsls	r3, r3, #2
 8008a46:	4413      	add	r3, r2
 8008a48:	009b      	lsls	r3, r3, #2
 8008a4a:	4a10      	ldr	r2, [pc, #64]	@ (8008a8c <xTaskPriorityInherit+0xc8>)
 8008a4c:	441a      	add	r2, r3
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	3304      	adds	r3, #4
 8008a52:	4619      	mov	r1, r3
 8008a54:	4610      	mov	r0, r2
 8008a56:	f7fe f8de 	bl	8006c16 <vListInsertEnd>
 8008a5a:	e004      	b.n	8008a66 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8008a88 <xTaskPriorityInherit+0xc4>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008a66:	2301      	movs	r3, #1
 8008a68:	60fb      	str	r3, [r7, #12]
 8008a6a:	e008      	b.n	8008a7e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008a70:	4b05      	ldr	r3, [pc, #20]	@ (8008a88 <xTaskPriorityInherit+0xc4>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d201      	bcs.n	8008a7e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
	}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3710      	adds	r7, #16
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}
 8008a88:	24000ad4 	.word	0x24000ad4
 8008a8c:	24000ad8 	.word	0x24000ad8
 8008a90:	24000fb0 	.word	0x24000fb0

08008a94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b086      	sub	sp, #24
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d058      	beq.n	8008b5c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008aaa:	4b2f      	ldr	r3, [pc, #188]	@ (8008b68 <xTaskPriorityDisinherit+0xd4>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	693a      	ldr	r2, [r7, #16]
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d00b      	beq.n	8008acc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ab8:	f383 8811 	msr	BASEPRI, r3
 8008abc:	f3bf 8f6f 	isb	sy
 8008ac0:	f3bf 8f4f 	dsb	sy
 8008ac4:	60fb      	str	r3, [r7, #12]
}
 8008ac6:	bf00      	nop
 8008ac8:	bf00      	nop
 8008aca:	e7fd      	b.n	8008ac8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d10b      	bne.n	8008aec <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ad8:	f383 8811 	msr	BASEPRI, r3
 8008adc:	f3bf 8f6f 	isb	sy
 8008ae0:	f3bf 8f4f 	dsb	sy
 8008ae4:	60bb      	str	r3, [r7, #8]
}
 8008ae6:	bf00      	nop
 8008ae8:	bf00      	nop
 8008aea:	e7fd      	b.n	8008ae8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008af0:	1e5a      	subs	r2, r3, #1
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d02c      	beq.n	8008b5c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d128      	bne.n	8008b5c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	3304      	adds	r3, #4
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7fe f8de 	bl	8006cd0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b20:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8008b6c <xTaskPriorityDisinherit+0xd8>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d903      	bls.n	8008b3c <xTaskPriorityDisinherit+0xa8>
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b38:	4a0c      	ldr	r2, [pc, #48]	@ (8008b6c <xTaskPriorityDisinherit+0xd8>)
 8008b3a:	6013      	str	r3, [r2, #0]
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b40:	4613      	mov	r3, r2
 8008b42:	009b      	lsls	r3, r3, #2
 8008b44:	4413      	add	r3, r2
 8008b46:	009b      	lsls	r3, r3, #2
 8008b48:	4a09      	ldr	r2, [pc, #36]	@ (8008b70 <xTaskPriorityDisinherit+0xdc>)
 8008b4a:	441a      	add	r2, r3
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	3304      	adds	r3, #4
 8008b50:	4619      	mov	r1, r3
 8008b52:	4610      	mov	r0, r2
 8008b54:	f7fe f85f 	bl	8006c16 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008b58:	2301      	movs	r3, #1
 8008b5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008b5c:	697b      	ldr	r3, [r7, #20]
	}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3718      	adds	r7, #24
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
 8008b66:	bf00      	nop
 8008b68:	24000ad4 	.word	0x24000ad4
 8008b6c:	24000fb0 	.word	0x24000fb0
 8008b70:	24000ad8 	.word	0x24000ad8

08008b74 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b088      	sub	sp, #32
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008b82:	2301      	movs	r3, #1
 8008b84:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d06c      	beq.n	8008c66 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008b8c:	69bb      	ldr	r3, [r7, #24]
 8008b8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d10b      	bne.n	8008bac <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8008b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b98:	f383 8811 	msr	BASEPRI, r3
 8008b9c:	f3bf 8f6f 	isb	sy
 8008ba0:	f3bf 8f4f 	dsb	sy
 8008ba4:	60fb      	str	r3, [r7, #12]
}
 8008ba6:	bf00      	nop
 8008ba8:	bf00      	nop
 8008baa:	e7fd      	b.n	8008ba8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008bac:	69bb      	ldr	r3, [r7, #24]
 8008bae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008bb0:	683a      	ldr	r2, [r7, #0]
 8008bb2:	429a      	cmp	r2, r3
 8008bb4:	d902      	bls.n	8008bbc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	61fb      	str	r3, [r7, #28]
 8008bba:	e002      	b.n	8008bc2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008bbc:	69bb      	ldr	r3, [r7, #24]
 8008bbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008bc0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008bc2:	69bb      	ldr	r3, [r7, #24]
 8008bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bc6:	69fa      	ldr	r2, [r7, #28]
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d04c      	beq.n	8008c66 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008bcc:	69bb      	ldr	r3, [r7, #24]
 8008bce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bd0:	697a      	ldr	r2, [r7, #20]
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d147      	bne.n	8008c66 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008bd6:	4b26      	ldr	r3, [pc, #152]	@ (8008c70 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	69ba      	ldr	r2, [r7, #24]
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	d10b      	bne.n	8008bf8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8008be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008be4:	f383 8811 	msr	BASEPRI, r3
 8008be8:	f3bf 8f6f 	isb	sy
 8008bec:	f3bf 8f4f 	dsb	sy
 8008bf0:	60bb      	str	r3, [r7, #8]
}
 8008bf2:	bf00      	nop
 8008bf4:	bf00      	nop
 8008bf6:	e7fd      	b.n	8008bf4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008bf8:	69bb      	ldr	r3, [r7, #24]
 8008bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bfc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008bfe:	69bb      	ldr	r3, [r7, #24]
 8008c00:	69fa      	ldr	r2, [r7, #28]
 8008c02:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008c04:	69bb      	ldr	r3, [r7, #24]
 8008c06:	699b      	ldr	r3, [r3, #24]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	db04      	blt.n	8008c16 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c0c:	69fb      	ldr	r3, [r7, #28]
 8008c0e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008c12:	69bb      	ldr	r3, [r7, #24]
 8008c14:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008c16:	69bb      	ldr	r3, [r7, #24]
 8008c18:	6959      	ldr	r1, [r3, #20]
 8008c1a:	693a      	ldr	r2, [r7, #16]
 8008c1c:	4613      	mov	r3, r2
 8008c1e:	009b      	lsls	r3, r3, #2
 8008c20:	4413      	add	r3, r2
 8008c22:	009b      	lsls	r3, r3, #2
 8008c24:	4a13      	ldr	r2, [pc, #76]	@ (8008c74 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008c26:	4413      	add	r3, r2
 8008c28:	4299      	cmp	r1, r3
 8008c2a:	d11c      	bne.n	8008c66 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c2c:	69bb      	ldr	r3, [r7, #24]
 8008c2e:	3304      	adds	r3, #4
 8008c30:	4618      	mov	r0, r3
 8008c32:	f7fe f84d 	bl	8006cd0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008c36:	69bb      	ldr	r3, [r7, #24]
 8008c38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c3a:	4b0f      	ldr	r3, [pc, #60]	@ (8008c78 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d903      	bls.n	8008c4a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8008c42:	69bb      	ldr	r3, [r7, #24]
 8008c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c46:	4a0c      	ldr	r2, [pc, #48]	@ (8008c78 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008c48:	6013      	str	r3, [r2, #0]
 8008c4a:	69bb      	ldr	r3, [r7, #24]
 8008c4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c4e:	4613      	mov	r3, r2
 8008c50:	009b      	lsls	r3, r3, #2
 8008c52:	4413      	add	r3, r2
 8008c54:	009b      	lsls	r3, r3, #2
 8008c56:	4a07      	ldr	r2, [pc, #28]	@ (8008c74 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008c58:	441a      	add	r2, r3
 8008c5a:	69bb      	ldr	r3, [r7, #24]
 8008c5c:	3304      	adds	r3, #4
 8008c5e:	4619      	mov	r1, r3
 8008c60:	4610      	mov	r0, r2
 8008c62:	f7fd ffd8 	bl	8006c16 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008c66:	bf00      	nop
 8008c68:	3720      	adds	r7, #32
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}
 8008c6e:	bf00      	nop
 8008c70:	24000ad4 	.word	0x24000ad4
 8008c74:	24000ad8 	.word	0x24000ad8
 8008c78:	24000fb0 	.word	0x24000fb0

08008c7c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008c7c:	b480      	push	{r7}
 8008c7e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008c80:	4b07      	ldr	r3, [pc, #28]	@ (8008ca0 <pvTaskIncrementMutexHeldCount+0x24>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d004      	beq.n	8008c92 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008c88:	4b05      	ldr	r3, [pc, #20]	@ (8008ca0 <pvTaskIncrementMutexHeldCount+0x24>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008c8e:	3201      	adds	r2, #1
 8008c90:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8008c92:	4b03      	ldr	r3, [pc, #12]	@ (8008ca0 <pvTaskIncrementMutexHeldCount+0x24>)
 8008c94:	681b      	ldr	r3, [r3, #0]
	}
 8008c96:	4618      	mov	r0, r3
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr
 8008ca0:	24000ad4 	.word	0x24000ad4

08008ca4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008cae:	4b21      	ldr	r3, [pc, #132]	@ (8008d34 <prvAddCurrentTaskToDelayedList+0x90>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008cb4:	4b20      	ldr	r3, [pc, #128]	@ (8008d38 <prvAddCurrentTaskToDelayedList+0x94>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	3304      	adds	r3, #4
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f7fe f808 	bl	8006cd0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cc6:	d10a      	bne.n	8008cde <prvAddCurrentTaskToDelayedList+0x3a>
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d007      	beq.n	8008cde <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008cce:	4b1a      	ldr	r3, [pc, #104]	@ (8008d38 <prvAddCurrentTaskToDelayedList+0x94>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	3304      	adds	r3, #4
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	4819      	ldr	r0, [pc, #100]	@ (8008d3c <prvAddCurrentTaskToDelayedList+0x98>)
 8008cd8:	f7fd ff9d 	bl	8006c16 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008cdc:	e026      	b.n	8008d2c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008cde:	68fa      	ldr	r2, [r7, #12]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	4413      	add	r3, r2
 8008ce4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008ce6:	4b14      	ldr	r3, [pc, #80]	@ (8008d38 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	68ba      	ldr	r2, [r7, #8]
 8008cec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008cee:	68ba      	ldr	r2, [r7, #8]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d209      	bcs.n	8008d0a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008cf6:	4b12      	ldr	r3, [pc, #72]	@ (8008d40 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	4b0f      	ldr	r3, [pc, #60]	@ (8008d38 <prvAddCurrentTaskToDelayedList+0x94>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	3304      	adds	r3, #4
 8008d00:	4619      	mov	r1, r3
 8008d02:	4610      	mov	r0, r2
 8008d04:	f7fd ffab 	bl	8006c5e <vListInsert>
}
 8008d08:	e010      	b.n	8008d2c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8008d44 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008d0c:	681a      	ldr	r2, [r3, #0]
 8008d0e:	4b0a      	ldr	r3, [pc, #40]	@ (8008d38 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	3304      	adds	r3, #4
 8008d14:	4619      	mov	r1, r3
 8008d16:	4610      	mov	r0, r2
 8008d18:	f7fd ffa1 	bl	8006c5e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8008d48 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	68ba      	ldr	r2, [r7, #8]
 8008d22:	429a      	cmp	r2, r3
 8008d24:	d202      	bcs.n	8008d2c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008d26:	4a08      	ldr	r2, [pc, #32]	@ (8008d48 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	6013      	str	r3, [r2, #0]
}
 8008d2c:	bf00      	nop
 8008d2e:	3710      	adds	r7, #16
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}
 8008d34:	24000fac 	.word	0x24000fac
 8008d38:	24000ad4 	.word	0x24000ad4
 8008d3c:	24000f94 	.word	0x24000f94
 8008d40:	24000f64 	.word	0x24000f64
 8008d44:	24000f60 	.word	0x24000f60
 8008d48:	24000fc8 	.word	0x24000fc8

08008d4c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b08a      	sub	sp, #40	@ 0x28
 8008d50:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008d52:	2300      	movs	r3, #0
 8008d54:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008d56:	f000 fb13 	bl	8009380 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008d5a:	4b1d      	ldr	r3, [pc, #116]	@ (8008dd0 <xTimerCreateTimerTask+0x84>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d021      	beq.n	8008da6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008d62:	2300      	movs	r3, #0
 8008d64:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008d66:	2300      	movs	r3, #0
 8008d68:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008d6a:	1d3a      	adds	r2, r7, #4
 8008d6c:	f107 0108 	add.w	r1, r7, #8
 8008d70:	f107 030c 	add.w	r3, r7, #12
 8008d74:	4618      	mov	r0, r3
 8008d76:	f7fd ff07 	bl	8006b88 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008d7a:	6879      	ldr	r1, [r7, #4]
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	68fa      	ldr	r2, [r7, #12]
 8008d80:	9202      	str	r2, [sp, #8]
 8008d82:	9301      	str	r3, [sp, #4]
 8008d84:	2302      	movs	r3, #2
 8008d86:	9300      	str	r3, [sp, #0]
 8008d88:	2300      	movs	r3, #0
 8008d8a:	460a      	mov	r2, r1
 8008d8c:	4911      	ldr	r1, [pc, #68]	@ (8008dd4 <xTimerCreateTimerTask+0x88>)
 8008d8e:	4812      	ldr	r0, [pc, #72]	@ (8008dd8 <xTimerCreateTimerTask+0x8c>)
 8008d90:	f7fe feea 	bl	8007b68 <xTaskCreateStatic>
 8008d94:	4603      	mov	r3, r0
 8008d96:	4a11      	ldr	r2, [pc, #68]	@ (8008ddc <xTimerCreateTimerTask+0x90>)
 8008d98:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008d9a:	4b10      	ldr	r3, [pc, #64]	@ (8008ddc <xTimerCreateTimerTask+0x90>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d001      	beq.n	8008da6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008da2:	2301      	movs	r3, #1
 8008da4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d10b      	bne.n	8008dc4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008db0:	f383 8811 	msr	BASEPRI, r3
 8008db4:	f3bf 8f6f 	isb	sy
 8008db8:	f3bf 8f4f 	dsb	sy
 8008dbc:	613b      	str	r3, [r7, #16]
}
 8008dbe:	bf00      	nop
 8008dc0:	bf00      	nop
 8008dc2:	e7fd      	b.n	8008dc0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008dc4:	697b      	ldr	r3, [r7, #20]
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3718      	adds	r7, #24
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	bf00      	nop
 8008dd0:	24001004 	.word	0x24001004
 8008dd4:	0800e574 	.word	0x0800e574
 8008dd8:	08008f19 	.word	0x08008f19
 8008ddc:	24001008 	.word	0x24001008

08008de0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b08a      	sub	sp, #40	@ 0x28
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	60f8      	str	r0, [r7, #12]
 8008de8:	60b9      	str	r1, [r7, #8]
 8008dea:	607a      	str	r2, [r7, #4]
 8008dec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008dee:	2300      	movs	r3, #0
 8008df0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d10b      	bne.n	8008e10 <xTimerGenericCommand+0x30>
	__asm volatile
 8008df8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dfc:	f383 8811 	msr	BASEPRI, r3
 8008e00:	f3bf 8f6f 	isb	sy
 8008e04:	f3bf 8f4f 	dsb	sy
 8008e08:	623b      	str	r3, [r7, #32]
}
 8008e0a:	bf00      	nop
 8008e0c:	bf00      	nop
 8008e0e:	e7fd      	b.n	8008e0c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008e10:	4b19      	ldr	r3, [pc, #100]	@ (8008e78 <xTimerGenericCommand+0x98>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d02a      	beq.n	8008e6e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	2b05      	cmp	r3, #5
 8008e28:	dc18      	bgt.n	8008e5c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008e2a:	f7ff fdad 	bl	8008988 <xTaskGetSchedulerState>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	2b02      	cmp	r3, #2
 8008e32:	d109      	bne.n	8008e48 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008e34:	4b10      	ldr	r3, [pc, #64]	@ (8008e78 <xTimerGenericCommand+0x98>)
 8008e36:	6818      	ldr	r0, [r3, #0]
 8008e38:	f107 0110 	add.w	r1, r7, #16
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e40:	f7fe f8ea 	bl	8007018 <xQueueGenericSend>
 8008e44:	6278      	str	r0, [r7, #36]	@ 0x24
 8008e46:	e012      	b.n	8008e6e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008e48:	4b0b      	ldr	r3, [pc, #44]	@ (8008e78 <xTimerGenericCommand+0x98>)
 8008e4a:	6818      	ldr	r0, [r3, #0]
 8008e4c:	f107 0110 	add.w	r1, r7, #16
 8008e50:	2300      	movs	r3, #0
 8008e52:	2200      	movs	r2, #0
 8008e54:	f7fe f8e0 	bl	8007018 <xQueueGenericSend>
 8008e58:	6278      	str	r0, [r7, #36]	@ 0x24
 8008e5a:	e008      	b.n	8008e6e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008e5c:	4b06      	ldr	r3, [pc, #24]	@ (8008e78 <xTimerGenericCommand+0x98>)
 8008e5e:	6818      	ldr	r0, [r3, #0]
 8008e60:	f107 0110 	add.w	r1, r7, #16
 8008e64:	2300      	movs	r3, #0
 8008e66:	683a      	ldr	r2, [r7, #0]
 8008e68:	f7fe f9d8 	bl	800721c <xQueueGenericSendFromISR>
 8008e6c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3728      	adds	r7, #40	@ 0x28
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}
 8008e78:	24001004 	.word	0x24001004

08008e7c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b088      	sub	sp, #32
 8008e80:	af02      	add	r7, sp, #8
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e86:	4b23      	ldr	r3, [pc, #140]	@ (8008f14 <prvProcessExpiredTimer+0x98>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	68db      	ldr	r3, [r3, #12]
 8008e8c:	68db      	ldr	r3, [r3, #12]
 8008e8e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	3304      	adds	r3, #4
 8008e94:	4618      	mov	r0, r3
 8008e96:	f7fd ff1b 	bl	8006cd0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008ea0:	f003 0304 	and.w	r3, r3, #4
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d023      	beq.n	8008ef0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	699a      	ldr	r2, [r3, #24]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	18d1      	adds	r1, r2, r3
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	683a      	ldr	r2, [r7, #0]
 8008eb4:	6978      	ldr	r0, [r7, #20]
 8008eb6:	f000 f8d5 	bl	8009064 <prvInsertTimerInActiveList>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d020      	beq.n	8008f02 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	9300      	str	r3, [sp, #0]
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	687a      	ldr	r2, [r7, #4]
 8008ec8:	2100      	movs	r1, #0
 8008eca:	6978      	ldr	r0, [r7, #20]
 8008ecc:	f7ff ff88 	bl	8008de0 <xTimerGenericCommand>
 8008ed0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d114      	bne.n	8008f02 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008edc:	f383 8811 	msr	BASEPRI, r3
 8008ee0:	f3bf 8f6f 	isb	sy
 8008ee4:	f3bf 8f4f 	dsb	sy
 8008ee8:	60fb      	str	r3, [r7, #12]
}
 8008eea:	bf00      	nop
 8008eec:	bf00      	nop
 8008eee:	e7fd      	b.n	8008eec <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008ef6:	f023 0301 	bic.w	r3, r3, #1
 8008efa:	b2da      	uxtb	r2, r3
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	6a1b      	ldr	r3, [r3, #32]
 8008f06:	6978      	ldr	r0, [r7, #20]
 8008f08:	4798      	blx	r3
}
 8008f0a:	bf00      	nop
 8008f0c:	3718      	adds	r7, #24
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	24000ffc 	.word	0x24000ffc

08008f18 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b084      	sub	sp, #16
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008f20:	f107 0308 	add.w	r3, r7, #8
 8008f24:	4618      	mov	r0, r3
 8008f26:	f000 f859 	bl	8008fdc <prvGetNextExpireTime>
 8008f2a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	4619      	mov	r1, r3
 8008f30:	68f8      	ldr	r0, [r7, #12]
 8008f32:	f000 f805 	bl	8008f40 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008f36:	f000 f8d7 	bl	80090e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008f3a:	bf00      	nop
 8008f3c:	e7f0      	b.n	8008f20 <prvTimerTask+0x8>
	...

08008f40 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008f4a:	f7ff f871 	bl	8008030 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008f4e:	f107 0308 	add.w	r3, r7, #8
 8008f52:	4618      	mov	r0, r3
 8008f54:	f000 f866 	bl	8009024 <prvSampleTimeNow>
 8008f58:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d130      	bne.n	8008fc2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d10a      	bne.n	8008f7c <prvProcessTimerOrBlockTask+0x3c>
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	d806      	bhi.n	8008f7c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008f6e:	f7ff f8a5 	bl	80080bc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008f72:	68f9      	ldr	r1, [r7, #12]
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f7ff ff81 	bl	8008e7c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008f7a:	e024      	b.n	8008fc6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d008      	beq.n	8008f94 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008f82:	4b13      	ldr	r3, [pc, #76]	@ (8008fd0 <prvProcessTimerOrBlockTask+0x90>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d101      	bne.n	8008f90 <prvProcessTimerOrBlockTask+0x50>
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	e000      	b.n	8008f92 <prvProcessTimerOrBlockTask+0x52>
 8008f90:	2300      	movs	r3, #0
 8008f92:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008f94:	4b0f      	ldr	r3, [pc, #60]	@ (8008fd4 <prvProcessTimerOrBlockTask+0x94>)
 8008f96:	6818      	ldr	r0, [r3, #0]
 8008f98:	687a      	ldr	r2, [r7, #4]
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	1ad3      	subs	r3, r2, r3
 8008f9e:	683a      	ldr	r2, [r7, #0]
 8008fa0:	4619      	mov	r1, r3
 8008fa2:	f7fe fdad 	bl	8007b00 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008fa6:	f7ff f889 	bl	80080bc <xTaskResumeAll>
 8008faa:	4603      	mov	r3, r0
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d10a      	bne.n	8008fc6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008fb0:	4b09      	ldr	r3, [pc, #36]	@ (8008fd8 <prvProcessTimerOrBlockTask+0x98>)
 8008fb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008fb6:	601a      	str	r2, [r3, #0]
 8008fb8:	f3bf 8f4f 	dsb	sy
 8008fbc:	f3bf 8f6f 	isb	sy
}
 8008fc0:	e001      	b.n	8008fc6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008fc2:	f7ff f87b 	bl	80080bc <xTaskResumeAll>
}
 8008fc6:	bf00      	nop
 8008fc8:	3710      	adds	r7, #16
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}
 8008fce:	bf00      	nop
 8008fd0:	24001000 	.word	0x24001000
 8008fd4:	24001004 	.word	0x24001004
 8008fd8:	e000ed04 	.word	0xe000ed04

08008fdc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b085      	sub	sp, #20
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008fe4:	4b0e      	ldr	r3, [pc, #56]	@ (8009020 <prvGetNextExpireTime+0x44>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d101      	bne.n	8008ff2 <prvGetNextExpireTime+0x16>
 8008fee:	2201      	movs	r2, #1
 8008ff0:	e000      	b.n	8008ff4 <prvGetNextExpireTime+0x18>
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d105      	bne.n	800900c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009000:	4b07      	ldr	r3, [pc, #28]	@ (8009020 <prvGetNextExpireTime+0x44>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	68db      	ldr	r3, [r3, #12]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	60fb      	str	r3, [r7, #12]
 800900a:	e001      	b.n	8009010 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800900c:	2300      	movs	r3, #0
 800900e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009010:	68fb      	ldr	r3, [r7, #12]
}
 8009012:	4618      	mov	r0, r3
 8009014:	3714      	adds	r7, #20
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr
 800901e:	bf00      	nop
 8009020:	24000ffc 	.word	0x24000ffc

08009024 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b084      	sub	sp, #16
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800902c:	f7ff f8e4 	bl	80081f8 <xTaskGetTickCount>
 8009030:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009032:	4b0b      	ldr	r3, [pc, #44]	@ (8009060 <prvSampleTimeNow+0x3c>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	68fa      	ldr	r2, [r7, #12]
 8009038:	429a      	cmp	r2, r3
 800903a:	d205      	bcs.n	8009048 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800903c:	f000 f93a 	bl	80092b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2201      	movs	r2, #1
 8009044:	601a      	str	r2, [r3, #0]
 8009046:	e002      	b.n	800904e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2200      	movs	r2, #0
 800904c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800904e:	4a04      	ldr	r2, [pc, #16]	@ (8009060 <prvSampleTimeNow+0x3c>)
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009054:	68fb      	ldr	r3, [r7, #12]
}
 8009056:	4618      	mov	r0, r3
 8009058:	3710      	adds	r7, #16
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}
 800905e:	bf00      	nop
 8009060:	2400100c 	.word	0x2400100c

08009064 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b086      	sub	sp, #24
 8009068:	af00      	add	r7, sp, #0
 800906a:	60f8      	str	r0, [r7, #12]
 800906c:	60b9      	str	r1, [r7, #8]
 800906e:	607a      	str	r2, [r7, #4]
 8009070:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009072:	2300      	movs	r3, #0
 8009074:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	68ba      	ldr	r2, [r7, #8]
 800907a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	68fa      	ldr	r2, [r7, #12]
 8009080:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009082:	68ba      	ldr	r2, [r7, #8]
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	429a      	cmp	r2, r3
 8009088:	d812      	bhi.n	80090b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	1ad2      	subs	r2, r2, r3
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	699b      	ldr	r3, [r3, #24]
 8009094:	429a      	cmp	r2, r3
 8009096:	d302      	bcc.n	800909e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009098:	2301      	movs	r3, #1
 800909a:	617b      	str	r3, [r7, #20]
 800909c:	e01b      	b.n	80090d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800909e:	4b10      	ldr	r3, [pc, #64]	@ (80090e0 <prvInsertTimerInActiveList+0x7c>)
 80090a0:	681a      	ldr	r2, [r3, #0]
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	3304      	adds	r3, #4
 80090a6:	4619      	mov	r1, r3
 80090a8:	4610      	mov	r0, r2
 80090aa:	f7fd fdd8 	bl	8006c5e <vListInsert>
 80090ae:	e012      	b.n	80090d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d206      	bcs.n	80090c6 <prvInsertTimerInActiveList+0x62>
 80090b8:	68ba      	ldr	r2, [r7, #8]
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	429a      	cmp	r2, r3
 80090be:	d302      	bcc.n	80090c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80090c0:	2301      	movs	r3, #1
 80090c2:	617b      	str	r3, [r7, #20]
 80090c4:	e007      	b.n	80090d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80090c6:	4b07      	ldr	r3, [pc, #28]	@ (80090e4 <prvInsertTimerInActiveList+0x80>)
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	3304      	adds	r3, #4
 80090ce:	4619      	mov	r1, r3
 80090d0:	4610      	mov	r0, r2
 80090d2:	f7fd fdc4 	bl	8006c5e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80090d6:	697b      	ldr	r3, [r7, #20]
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3718      	adds	r7, #24
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}
 80090e0:	24001000 	.word	0x24001000
 80090e4:	24000ffc 	.word	0x24000ffc

080090e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b08e      	sub	sp, #56	@ 0x38
 80090ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80090ee:	e0ce      	b.n	800928e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	da19      	bge.n	800912a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80090f6:	1d3b      	adds	r3, r7, #4
 80090f8:	3304      	adds	r3, #4
 80090fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80090fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d10b      	bne.n	800911a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009106:	f383 8811 	msr	BASEPRI, r3
 800910a:	f3bf 8f6f 	isb	sy
 800910e:	f3bf 8f4f 	dsb	sy
 8009112:	61fb      	str	r3, [r7, #28]
}
 8009114:	bf00      	nop
 8009116:	bf00      	nop
 8009118:	e7fd      	b.n	8009116 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800911a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009120:	6850      	ldr	r0, [r2, #4]
 8009122:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009124:	6892      	ldr	r2, [r2, #8]
 8009126:	4611      	mov	r1, r2
 8009128:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2b00      	cmp	r3, #0
 800912e:	f2c0 80ae 	blt.w	800928e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009138:	695b      	ldr	r3, [r3, #20]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d004      	beq.n	8009148 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800913e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009140:	3304      	adds	r3, #4
 8009142:	4618      	mov	r0, r3
 8009144:	f7fd fdc4 	bl	8006cd0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009148:	463b      	mov	r3, r7
 800914a:	4618      	mov	r0, r3
 800914c:	f7ff ff6a 	bl	8009024 <prvSampleTimeNow>
 8009150:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2b09      	cmp	r3, #9
 8009156:	f200 8097 	bhi.w	8009288 <prvProcessReceivedCommands+0x1a0>
 800915a:	a201      	add	r2, pc, #4	@ (adr r2, 8009160 <prvProcessReceivedCommands+0x78>)
 800915c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009160:	08009189 	.word	0x08009189
 8009164:	08009189 	.word	0x08009189
 8009168:	08009189 	.word	0x08009189
 800916c:	080091ff 	.word	0x080091ff
 8009170:	08009213 	.word	0x08009213
 8009174:	0800925f 	.word	0x0800925f
 8009178:	08009189 	.word	0x08009189
 800917c:	08009189 	.word	0x08009189
 8009180:	080091ff 	.word	0x080091ff
 8009184:	08009213 	.word	0x08009213
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800918a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800918e:	f043 0301 	orr.w	r3, r3, #1
 8009192:	b2da      	uxtb	r2, r3
 8009194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009196:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800919a:	68ba      	ldr	r2, [r7, #8]
 800919c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800919e:	699b      	ldr	r3, [r3, #24]
 80091a0:	18d1      	adds	r1, r2, r3
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80091a8:	f7ff ff5c 	bl	8009064 <prvInsertTimerInActiveList>
 80091ac:	4603      	mov	r3, r0
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d06c      	beq.n	800928c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80091b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091b4:	6a1b      	ldr	r3, [r3, #32]
 80091b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80091b8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80091ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80091c0:	f003 0304 	and.w	r3, r3, #4
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d061      	beq.n	800928c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80091c8:	68ba      	ldr	r2, [r7, #8]
 80091ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091cc:	699b      	ldr	r3, [r3, #24]
 80091ce:	441a      	add	r2, r3
 80091d0:	2300      	movs	r3, #0
 80091d2:	9300      	str	r3, [sp, #0]
 80091d4:	2300      	movs	r3, #0
 80091d6:	2100      	movs	r1, #0
 80091d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80091da:	f7ff fe01 	bl	8008de0 <xTimerGenericCommand>
 80091de:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80091e0:	6a3b      	ldr	r3, [r7, #32]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d152      	bne.n	800928c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80091e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ea:	f383 8811 	msr	BASEPRI, r3
 80091ee:	f3bf 8f6f 	isb	sy
 80091f2:	f3bf 8f4f 	dsb	sy
 80091f6:	61bb      	str	r3, [r7, #24]
}
 80091f8:	bf00      	nop
 80091fa:	bf00      	nop
 80091fc:	e7fd      	b.n	80091fa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80091fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009200:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009204:	f023 0301 	bic.w	r3, r3, #1
 8009208:	b2da      	uxtb	r2, r3
 800920a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800920c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009210:	e03d      	b.n	800928e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009214:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009218:	f043 0301 	orr.w	r3, r3, #1
 800921c:	b2da      	uxtb	r2, r3
 800921e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009220:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009224:	68ba      	ldr	r2, [r7, #8]
 8009226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009228:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800922a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800922c:	699b      	ldr	r3, [r3, #24]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d10b      	bne.n	800924a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009236:	f383 8811 	msr	BASEPRI, r3
 800923a:	f3bf 8f6f 	isb	sy
 800923e:	f3bf 8f4f 	dsb	sy
 8009242:	617b      	str	r3, [r7, #20]
}
 8009244:	bf00      	nop
 8009246:	bf00      	nop
 8009248:	e7fd      	b.n	8009246 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800924a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800924c:	699a      	ldr	r2, [r3, #24]
 800924e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009250:	18d1      	adds	r1, r2, r3
 8009252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009254:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009256:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009258:	f7ff ff04 	bl	8009064 <prvInsertTimerInActiveList>
					break;
 800925c:	e017      	b.n	800928e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800925e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009260:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009264:	f003 0302 	and.w	r3, r3, #2
 8009268:	2b00      	cmp	r3, #0
 800926a:	d103      	bne.n	8009274 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800926c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800926e:	f000 fccf 	bl	8009c10 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009272:	e00c      	b.n	800928e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009276:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800927a:	f023 0301 	bic.w	r3, r3, #1
 800927e:	b2da      	uxtb	r2, r3
 8009280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009282:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009286:	e002      	b.n	800928e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009288:	bf00      	nop
 800928a:	e000      	b.n	800928e <prvProcessReceivedCommands+0x1a6>
					break;
 800928c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800928e:	4b08      	ldr	r3, [pc, #32]	@ (80092b0 <prvProcessReceivedCommands+0x1c8>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	1d39      	adds	r1, r7, #4
 8009294:	2200      	movs	r2, #0
 8009296:	4618      	mov	r0, r3
 8009298:	f7fe f8ee 	bl	8007478 <xQueueReceive>
 800929c:	4603      	mov	r3, r0
 800929e:	2b00      	cmp	r3, #0
 80092a0:	f47f af26 	bne.w	80090f0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80092a4:	bf00      	nop
 80092a6:	bf00      	nop
 80092a8:	3730      	adds	r7, #48	@ 0x30
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}
 80092ae:	bf00      	nop
 80092b0:	24001004 	.word	0x24001004

080092b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b088      	sub	sp, #32
 80092b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80092ba:	e049      	b.n	8009350 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80092bc:	4b2e      	ldr	r3, [pc, #184]	@ (8009378 <prvSwitchTimerLists+0xc4>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	68db      	ldr	r3, [r3, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092c6:	4b2c      	ldr	r3, [pc, #176]	@ (8009378 <prvSwitchTimerLists+0xc4>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	68db      	ldr	r3, [r3, #12]
 80092cc:	68db      	ldr	r3, [r3, #12]
 80092ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	3304      	adds	r3, #4
 80092d4:	4618      	mov	r0, r3
 80092d6:	f7fd fcfb 	bl	8006cd0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	6a1b      	ldr	r3, [r3, #32]
 80092de:	68f8      	ldr	r0, [r7, #12]
 80092e0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80092e8:	f003 0304 	and.w	r3, r3, #4
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d02f      	beq.n	8009350 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	699b      	ldr	r3, [r3, #24]
 80092f4:	693a      	ldr	r2, [r7, #16]
 80092f6:	4413      	add	r3, r2
 80092f8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80092fa:	68ba      	ldr	r2, [r7, #8]
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	429a      	cmp	r2, r3
 8009300:	d90e      	bls.n	8009320 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	68ba      	ldr	r2, [r7, #8]
 8009306:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	68fa      	ldr	r2, [r7, #12]
 800930c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800930e:	4b1a      	ldr	r3, [pc, #104]	@ (8009378 <prvSwitchTimerLists+0xc4>)
 8009310:	681a      	ldr	r2, [r3, #0]
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	3304      	adds	r3, #4
 8009316:	4619      	mov	r1, r3
 8009318:	4610      	mov	r0, r2
 800931a:	f7fd fca0 	bl	8006c5e <vListInsert>
 800931e:	e017      	b.n	8009350 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009320:	2300      	movs	r3, #0
 8009322:	9300      	str	r3, [sp, #0]
 8009324:	2300      	movs	r3, #0
 8009326:	693a      	ldr	r2, [r7, #16]
 8009328:	2100      	movs	r1, #0
 800932a:	68f8      	ldr	r0, [r7, #12]
 800932c:	f7ff fd58 	bl	8008de0 <xTimerGenericCommand>
 8009330:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d10b      	bne.n	8009350 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800933c:	f383 8811 	msr	BASEPRI, r3
 8009340:	f3bf 8f6f 	isb	sy
 8009344:	f3bf 8f4f 	dsb	sy
 8009348:	603b      	str	r3, [r7, #0]
}
 800934a:	bf00      	nop
 800934c:	bf00      	nop
 800934e:	e7fd      	b.n	800934c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009350:	4b09      	ldr	r3, [pc, #36]	@ (8009378 <prvSwitchTimerLists+0xc4>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d1b0      	bne.n	80092bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800935a:	4b07      	ldr	r3, [pc, #28]	@ (8009378 <prvSwitchTimerLists+0xc4>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009360:	4b06      	ldr	r3, [pc, #24]	@ (800937c <prvSwitchTimerLists+0xc8>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4a04      	ldr	r2, [pc, #16]	@ (8009378 <prvSwitchTimerLists+0xc4>)
 8009366:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009368:	4a04      	ldr	r2, [pc, #16]	@ (800937c <prvSwitchTimerLists+0xc8>)
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	6013      	str	r3, [r2, #0]
}
 800936e:	bf00      	nop
 8009370:	3718      	adds	r7, #24
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
 8009376:	bf00      	nop
 8009378:	24000ffc 	.word	0x24000ffc
 800937c:	24001000 	.word	0x24001000

08009380 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009386:	f000 f96f 	bl	8009668 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800938a:	4b15      	ldr	r3, [pc, #84]	@ (80093e0 <prvCheckForValidListAndQueue+0x60>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d120      	bne.n	80093d4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009392:	4814      	ldr	r0, [pc, #80]	@ (80093e4 <prvCheckForValidListAndQueue+0x64>)
 8009394:	f7fd fc12 	bl	8006bbc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009398:	4813      	ldr	r0, [pc, #76]	@ (80093e8 <prvCheckForValidListAndQueue+0x68>)
 800939a:	f7fd fc0f 	bl	8006bbc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800939e:	4b13      	ldr	r3, [pc, #76]	@ (80093ec <prvCheckForValidListAndQueue+0x6c>)
 80093a0:	4a10      	ldr	r2, [pc, #64]	@ (80093e4 <prvCheckForValidListAndQueue+0x64>)
 80093a2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80093a4:	4b12      	ldr	r3, [pc, #72]	@ (80093f0 <prvCheckForValidListAndQueue+0x70>)
 80093a6:	4a10      	ldr	r2, [pc, #64]	@ (80093e8 <prvCheckForValidListAndQueue+0x68>)
 80093a8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80093aa:	2300      	movs	r3, #0
 80093ac:	9300      	str	r3, [sp, #0]
 80093ae:	4b11      	ldr	r3, [pc, #68]	@ (80093f4 <prvCheckForValidListAndQueue+0x74>)
 80093b0:	4a11      	ldr	r2, [pc, #68]	@ (80093f8 <prvCheckForValidListAndQueue+0x78>)
 80093b2:	2110      	movs	r1, #16
 80093b4:	200a      	movs	r0, #10
 80093b6:	f7fd fd1f 	bl	8006df8 <xQueueGenericCreateStatic>
 80093ba:	4603      	mov	r3, r0
 80093bc:	4a08      	ldr	r2, [pc, #32]	@ (80093e0 <prvCheckForValidListAndQueue+0x60>)
 80093be:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80093c0:	4b07      	ldr	r3, [pc, #28]	@ (80093e0 <prvCheckForValidListAndQueue+0x60>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d005      	beq.n	80093d4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80093c8:	4b05      	ldr	r3, [pc, #20]	@ (80093e0 <prvCheckForValidListAndQueue+0x60>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	490b      	ldr	r1, [pc, #44]	@ (80093fc <prvCheckForValidListAndQueue+0x7c>)
 80093ce:	4618      	mov	r0, r3
 80093d0:	f7fe fb6c 	bl	8007aac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80093d4:	f000 f97a 	bl	80096cc <vPortExitCritical>
}
 80093d8:	bf00      	nop
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}
 80093de:	bf00      	nop
 80093e0:	24001004 	.word	0x24001004
 80093e4:	24000fd4 	.word	0x24000fd4
 80093e8:	24000fe8 	.word	0x24000fe8
 80093ec:	24000ffc 	.word	0x24000ffc
 80093f0:	24001000 	.word	0x24001000
 80093f4:	240010b0 	.word	0x240010b0
 80093f8:	24001010 	.word	0x24001010
 80093fc:	0800e57c 	.word	0x0800e57c

08009400 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009400:	b480      	push	{r7}
 8009402:	b085      	sub	sp, #20
 8009404:	af00      	add	r7, sp, #0
 8009406:	60f8      	str	r0, [r7, #12]
 8009408:	60b9      	str	r1, [r7, #8]
 800940a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	3b04      	subs	r3, #4
 8009410:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009418:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	3b04      	subs	r3, #4
 800941e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	f023 0201 	bic.w	r2, r3, #1
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	3b04      	subs	r3, #4
 800942e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009430:	4a0c      	ldr	r2, [pc, #48]	@ (8009464 <pxPortInitialiseStack+0x64>)
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	3b14      	subs	r3, #20
 800943a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	3b04      	subs	r3, #4
 8009446:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f06f 0202 	mvn.w	r2, #2
 800944e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	3b20      	subs	r3, #32
 8009454:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009456:	68fb      	ldr	r3, [r7, #12]
}
 8009458:	4618      	mov	r0, r3
 800945a:	3714      	adds	r7, #20
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr
 8009464:	08009469 	.word	0x08009469

08009468 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009468:	b480      	push	{r7}
 800946a:	b085      	sub	sp, #20
 800946c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800946e:	2300      	movs	r3, #0
 8009470:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009472:	4b13      	ldr	r3, [pc, #76]	@ (80094c0 <prvTaskExitError+0x58>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800947a:	d00b      	beq.n	8009494 <prvTaskExitError+0x2c>
	__asm volatile
 800947c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009480:	f383 8811 	msr	BASEPRI, r3
 8009484:	f3bf 8f6f 	isb	sy
 8009488:	f3bf 8f4f 	dsb	sy
 800948c:	60fb      	str	r3, [r7, #12]
}
 800948e:	bf00      	nop
 8009490:	bf00      	nop
 8009492:	e7fd      	b.n	8009490 <prvTaskExitError+0x28>
	__asm volatile
 8009494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009498:	f383 8811 	msr	BASEPRI, r3
 800949c:	f3bf 8f6f 	isb	sy
 80094a0:	f3bf 8f4f 	dsb	sy
 80094a4:	60bb      	str	r3, [r7, #8]
}
 80094a6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80094a8:	bf00      	nop
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d0fc      	beq.n	80094aa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80094b0:	bf00      	nop
 80094b2:	bf00      	nop
 80094b4:	3714      	adds	r7, #20
 80094b6:	46bd      	mov	sp, r7
 80094b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094bc:	4770      	bx	lr
 80094be:	bf00      	nop
 80094c0:	24000010 	.word	0x24000010
	...

080094d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80094d0:	4b07      	ldr	r3, [pc, #28]	@ (80094f0 <pxCurrentTCBConst2>)
 80094d2:	6819      	ldr	r1, [r3, #0]
 80094d4:	6808      	ldr	r0, [r1, #0]
 80094d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094da:	f380 8809 	msr	PSP, r0
 80094de:	f3bf 8f6f 	isb	sy
 80094e2:	f04f 0000 	mov.w	r0, #0
 80094e6:	f380 8811 	msr	BASEPRI, r0
 80094ea:	4770      	bx	lr
 80094ec:	f3af 8000 	nop.w

080094f0 <pxCurrentTCBConst2>:
 80094f0:	24000ad4 	.word	0x24000ad4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80094f4:	bf00      	nop
 80094f6:	bf00      	nop

080094f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80094f8:	4808      	ldr	r0, [pc, #32]	@ (800951c <prvPortStartFirstTask+0x24>)
 80094fa:	6800      	ldr	r0, [r0, #0]
 80094fc:	6800      	ldr	r0, [r0, #0]
 80094fe:	f380 8808 	msr	MSP, r0
 8009502:	f04f 0000 	mov.w	r0, #0
 8009506:	f380 8814 	msr	CONTROL, r0
 800950a:	b662      	cpsie	i
 800950c:	b661      	cpsie	f
 800950e:	f3bf 8f4f 	dsb	sy
 8009512:	f3bf 8f6f 	isb	sy
 8009516:	df00      	svc	0
 8009518:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800951a:	bf00      	nop
 800951c:	e000ed08 	.word	0xe000ed08

08009520 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b086      	sub	sp, #24
 8009524:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009526:	4b47      	ldr	r3, [pc, #284]	@ (8009644 <xPortStartScheduler+0x124>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4a47      	ldr	r2, [pc, #284]	@ (8009648 <xPortStartScheduler+0x128>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d10b      	bne.n	8009548 <xPortStartScheduler+0x28>
	__asm volatile
 8009530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009534:	f383 8811 	msr	BASEPRI, r3
 8009538:	f3bf 8f6f 	isb	sy
 800953c:	f3bf 8f4f 	dsb	sy
 8009540:	613b      	str	r3, [r7, #16]
}
 8009542:	bf00      	nop
 8009544:	bf00      	nop
 8009546:	e7fd      	b.n	8009544 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009548:	4b3e      	ldr	r3, [pc, #248]	@ (8009644 <xPortStartScheduler+0x124>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	4a3f      	ldr	r2, [pc, #252]	@ (800964c <xPortStartScheduler+0x12c>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d10b      	bne.n	800956a <xPortStartScheduler+0x4a>
	__asm volatile
 8009552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009556:	f383 8811 	msr	BASEPRI, r3
 800955a:	f3bf 8f6f 	isb	sy
 800955e:	f3bf 8f4f 	dsb	sy
 8009562:	60fb      	str	r3, [r7, #12]
}
 8009564:	bf00      	nop
 8009566:	bf00      	nop
 8009568:	e7fd      	b.n	8009566 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800956a:	4b39      	ldr	r3, [pc, #228]	@ (8009650 <xPortStartScheduler+0x130>)
 800956c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	781b      	ldrb	r3, [r3, #0]
 8009572:	b2db      	uxtb	r3, r3
 8009574:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	22ff      	movs	r2, #255	@ 0xff
 800957a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	781b      	ldrb	r3, [r3, #0]
 8009580:	b2db      	uxtb	r3, r3
 8009582:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009584:	78fb      	ldrb	r3, [r7, #3]
 8009586:	b2db      	uxtb	r3, r3
 8009588:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800958c:	b2da      	uxtb	r2, r3
 800958e:	4b31      	ldr	r3, [pc, #196]	@ (8009654 <xPortStartScheduler+0x134>)
 8009590:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009592:	4b31      	ldr	r3, [pc, #196]	@ (8009658 <xPortStartScheduler+0x138>)
 8009594:	2207      	movs	r2, #7
 8009596:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009598:	e009      	b.n	80095ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800959a:	4b2f      	ldr	r3, [pc, #188]	@ (8009658 <xPortStartScheduler+0x138>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	3b01      	subs	r3, #1
 80095a0:	4a2d      	ldr	r2, [pc, #180]	@ (8009658 <xPortStartScheduler+0x138>)
 80095a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80095a4:	78fb      	ldrb	r3, [r7, #3]
 80095a6:	b2db      	uxtb	r3, r3
 80095a8:	005b      	lsls	r3, r3, #1
 80095aa:	b2db      	uxtb	r3, r3
 80095ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80095ae:	78fb      	ldrb	r3, [r7, #3]
 80095b0:	b2db      	uxtb	r3, r3
 80095b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095b6:	2b80      	cmp	r3, #128	@ 0x80
 80095b8:	d0ef      	beq.n	800959a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80095ba:	4b27      	ldr	r3, [pc, #156]	@ (8009658 <xPortStartScheduler+0x138>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f1c3 0307 	rsb	r3, r3, #7
 80095c2:	2b04      	cmp	r3, #4
 80095c4:	d00b      	beq.n	80095de <xPortStartScheduler+0xbe>
	__asm volatile
 80095c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095ca:	f383 8811 	msr	BASEPRI, r3
 80095ce:	f3bf 8f6f 	isb	sy
 80095d2:	f3bf 8f4f 	dsb	sy
 80095d6:	60bb      	str	r3, [r7, #8]
}
 80095d8:	bf00      	nop
 80095da:	bf00      	nop
 80095dc:	e7fd      	b.n	80095da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80095de:	4b1e      	ldr	r3, [pc, #120]	@ (8009658 <xPortStartScheduler+0x138>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	021b      	lsls	r3, r3, #8
 80095e4:	4a1c      	ldr	r2, [pc, #112]	@ (8009658 <xPortStartScheduler+0x138>)
 80095e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80095e8:	4b1b      	ldr	r3, [pc, #108]	@ (8009658 <xPortStartScheduler+0x138>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80095f0:	4a19      	ldr	r2, [pc, #100]	@ (8009658 <xPortStartScheduler+0x138>)
 80095f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	b2da      	uxtb	r2, r3
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80095fc:	4b17      	ldr	r3, [pc, #92]	@ (800965c <xPortStartScheduler+0x13c>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4a16      	ldr	r2, [pc, #88]	@ (800965c <xPortStartScheduler+0x13c>)
 8009602:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009606:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009608:	4b14      	ldr	r3, [pc, #80]	@ (800965c <xPortStartScheduler+0x13c>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	4a13      	ldr	r2, [pc, #76]	@ (800965c <xPortStartScheduler+0x13c>)
 800960e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009612:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009614:	f000 f9a6 	bl	8009964 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009618:	4b11      	ldr	r3, [pc, #68]	@ (8009660 <xPortStartScheduler+0x140>)
 800961a:	2200      	movs	r2, #0
 800961c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800961e:	f000 f9dd 	bl	80099dc <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009622:	4b10      	ldr	r3, [pc, #64]	@ (8009664 <xPortStartScheduler+0x144>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	4a0f      	ldr	r2, [pc, #60]	@ (8009664 <xPortStartScheduler+0x144>)
 8009628:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800962c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800962e:	f7ff ff63 	bl	80094f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009632:	f7fe fed3 	bl	80083dc <vTaskSwitchContext>
	prvTaskExitError();
 8009636:	f7ff ff17 	bl	8009468 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800963a:	2300      	movs	r3, #0
}
 800963c:	4618      	mov	r0, r3
 800963e:	3718      	adds	r7, #24
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}
 8009644:	e000ed00 	.word	0xe000ed00
 8009648:	410fc271 	.word	0x410fc271
 800964c:	410fc270 	.word	0x410fc270
 8009650:	e000e400 	.word	0xe000e400
 8009654:	2400110c 	.word	0x2400110c
 8009658:	24001110 	.word	0x24001110
 800965c:	e000ed20 	.word	0xe000ed20
 8009660:	24000010 	.word	0x24000010
 8009664:	e000ef34 	.word	0xe000ef34

08009668 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009668:	b480      	push	{r7}
 800966a:	b083      	sub	sp, #12
 800966c:	af00      	add	r7, sp, #0
	__asm volatile
 800966e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009672:	f383 8811 	msr	BASEPRI, r3
 8009676:	f3bf 8f6f 	isb	sy
 800967a:	f3bf 8f4f 	dsb	sy
 800967e:	607b      	str	r3, [r7, #4]
}
 8009680:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009682:	4b10      	ldr	r3, [pc, #64]	@ (80096c4 <vPortEnterCritical+0x5c>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	3301      	adds	r3, #1
 8009688:	4a0e      	ldr	r2, [pc, #56]	@ (80096c4 <vPortEnterCritical+0x5c>)
 800968a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800968c:	4b0d      	ldr	r3, [pc, #52]	@ (80096c4 <vPortEnterCritical+0x5c>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	2b01      	cmp	r3, #1
 8009692:	d110      	bne.n	80096b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009694:	4b0c      	ldr	r3, [pc, #48]	@ (80096c8 <vPortEnterCritical+0x60>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	b2db      	uxtb	r3, r3
 800969a:	2b00      	cmp	r3, #0
 800969c:	d00b      	beq.n	80096b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800969e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096a2:	f383 8811 	msr	BASEPRI, r3
 80096a6:	f3bf 8f6f 	isb	sy
 80096aa:	f3bf 8f4f 	dsb	sy
 80096ae:	603b      	str	r3, [r7, #0]
}
 80096b0:	bf00      	nop
 80096b2:	bf00      	nop
 80096b4:	e7fd      	b.n	80096b2 <vPortEnterCritical+0x4a>
	}
}
 80096b6:	bf00      	nop
 80096b8:	370c      	adds	r7, #12
 80096ba:	46bd      	mov	sp, r7
 80096bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c0:	4770      	bx	lr
 80096c2:	bf00      	nop
 80096c4:	24000010 	.word	0x24000010
 80096c8:	e000ed04 	.word	0xe000ed04

080096cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80096cc:	b480      	push	{r7}
 80096ce:	b083      	sub	sp, #12
 80096d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80096d2:	4b12      	ldr	r3, [pc, #72]	@ (800971c <vPortExitCritical+0x50>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d10b      	bne.n	80096f2 <vPortExitCritical+0x26>
	__asm volatile
 80096da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096de:	f383 8811 	msr	BASEPRI, r3
 80096e2:	f3bf 8f6f 	isb	sy
 80096e6:	f3bf 8f4f 	dsb	sy
 80096ea:	607b      	str	r3, [r7, #4]
}
 80096ec:	bf00      	nop
 80096ee:	bf00      	nop
 80096f0:	e7fd      	b.n	80096ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80096f2:	4b0a      	ldr	r3, [pc, #40]	@ (800971c <vPortExitCritical+0x50>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	3b01      	subs	r3, #1
 80096f8:	4a08      	ldr	r2, [pc, #32]	@ (800971c <vPortExitCritical+0x50>)
 80096fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80096fc:	4b07      	ldr	r3, [pc, #28]	@ (800971c <vPortExitCritical+0x50>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d105      	bne.n	8009710 <vPortExitCritical+0x44>
 8009704:	2300      	movs	r3, #0
 8009706:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	f383 8811 	msr	BASEPRI, r3
}
 800970e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009710:	bf00      	nop
 8009712:	370c      	adds	r7, #12
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr
 800971c:	24000010 	.word	0x24000010

08009720 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009720:	f3ef 8009 	mrs	r0, PSP
 8009724:	f3bf 8f6f 	isb	sy
 8009728:	4b15      	ldr	r3, [pc, #84]	@ (8009780 <pxCurrentTCBConst>)
 800972a:	681a      	ldr	r2, [r3, #0]
 800972c:	f01e 0f10 	tst.w	lr, #16
 8009730:	bf08      	it	eq
 8009732:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009736:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800973a:	6010      	str	r0, [r2, #0]
 800973c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009740:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009744:	f380 8811 	msr	BASEPRI, r0
 8009748:	f3bf 8f4f 	dsb	sy
 800974c:	f3bf 8f6f 	isb	sy
 8009750:	f7fe fe44 	bl	80083dc <vTaskSwitchContext>
 8009754:	f04f 0000 	mov.w	r0, #0
 8009758:	f380 8811 	msr	BASEPRI, r0
 800975c:	bc09      	pop	{r0, r3}
 800975e:	6819      	ldr	r1, [r3, #0]
 8009760:	6808      	ldr	r0, [r1, #0]
 8009762:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009766:	f01e 0f10 	tst.w	lr, #16
 800976a:	bf08      	it	eq
 800976c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009770:	f380 8809 	msr	PSP, r0
 8009774:	f3bf 8f6f 	isb	sy
 8009778:	4770      	bx	lr
 800977a:	bf00      	nop
 800977c:	f3af 8000 	nop.w

08009780 <pxCurrentTCBConst>:
 8009780:	24000ad4 	.word	0x24000ad4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009784:	bf00      	nop
 8009786:	bf00      	nop

08009788 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b082      	sub	sp, #8
 800978c:	af00      	add	r7, sp, #0
	__asm volatile
 800978e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009792:	f383 8811 	msr	BASEPRI, r3
 8009796:	f3bf 8f6f 	isb	sy
 800979a:	f3bf 8f4f 	dsb	sy
 800979e:	607b      	str	r3, [r7, #4]
}
 80097a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80097a2:	f7fe fd61 	bl	8008268 <xTaskIncrementTick>
 80097a6:	4603      	mov	r3, r0
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d003      	beq.n	80097b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80097ac:	4b06      	ldr	r3, [pc, #24]	@ (80097c8 <xPortSysTickHandler+0x40>)
 80097ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097b2:	601a      	str	r2, [r3, #0]
 80097b4:	2300      	movs	r3, #0
 80097b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	f383 8811 	msr	BASEPRI, r3
}
 80097be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80097c0:	bf00      	nop
 80097c2:	3708      	adds	r7, #8
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}
 80097c8:	e000ed04 	.word	0xe000ed04

080097cc <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b088      	sub	sp, #32
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 80097d4:	4b5d      	ldr	r3, [pc, #372]	@ (800994c <vPortSuppressTicksAndSleep+0x180>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	687a      	ldr	r2, [r7, #4]
 80097da:	429a      	cmp	r2, r3
 80097dc:	d902      	bls.n	80097e4 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 80097de:	4b5b      	ldr	r3, [pc, #364]	@ (800994c <vPortSuppressTicksAndSleep+0x180>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 80097e4:	4b5a      	ldr	r3, [pc, #360]	@ (8009950 <vPortSuppressTicksAndSleep+0x184>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	4a59      	ldr	r2, [pc, #356]	@ (8009950 <vPortSuppressTicksAndSleep+0x184>)
 80097ea:	f023 0301 	bic.w	r3, r3, #1
 80097ee:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 80097f0:	4b58      	ldr	r3, [pc, #352]	@ (8009954 <vPortSuppressTicksAndSleep+0x188>)
 80097f2:	681a      	ldr	r2, [r3, #0]
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	3b01      	subs	r3, #1
 80097f8:	4957      	ldr	r1, [pc, #348]	@ (8009958 <vPortSuppressTicksAndSleep+0x18c>)
 80097fa:	6809      	ldr	r1, [r1, #0]
 80097fc:	fb01 f303 	mul.w	r3, r1, r3
 8009800:	4413      	add	r3, r2
 8009802:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 8009804:	4b55      	ldr	r3, [pc, #340]	@ (800995c <vPortSuppressTicksAndSleep+0x190>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	69fa      	ldr	r2, [r7, #28]
 800980a:	429a      	cmp	r2, r3
 800980c:	d904      	bls.n	8009818 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 800980e:	4b53      	ldr	r3, [pc, #332]	@ (800995c <vPortSuppressTicksAndSleep+0x190>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	69fa      	ldr	r2, [r7, #28]
 8009814:	1ad3      	subs	r3, r2, r3
 8009816:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 8009818:	b672      	cpsid	i
		__asm volatile( "dsb" );
 800981a:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 800981e:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 8009822:	f7fe ffbf 	bl	80087a4 <eTaskConfirmSleepModeStatus>
 8009826:	4603      	mov	r3, r0
 8009828:	2b00      	cmp	r3, #0
 800982a:	d110      	bne.n	800984e <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800982c:	4b49      	ldr	r3, [pc, #292]	@ (8009954 <vPortSuppressTicksAndSleep+0x188>)
 800982e:	4a4c      	ldr	r2, [pc, #304]	@ (8009960 <vPortSuppressTicksAndSleep+0x194>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8009834:	4b46      	ldr	r3, [pc, #280]	@ (8009950 <vPortSuppressTicksAndSleep+0x184>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	4a45      	ldr	r2, [pc, #276]	@ (8009950 <vPortSuppressTicksAndSleep+0x184>)
 800983a:	f043 0301 	orr.w	r3, r3, #1
 800983e:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8009840:	4b45      	ldr	r3, [pc, #276]	@ (8009958 <vPortSuppressTicksAndSleep+0x18c>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	4a46      	ldr	r2, [pc, #280]	@ (8009960 <vPortSuppressTicksAndSleep+0x194>)
 8009846:	3b01      	subs	r3, #1
 8009848:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 800984a:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrupts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 800984c:	e079      	b.n	8009942 <vPortSuppressTicksAndSleep+0x176>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 800984e:	4a44      	ldr	r2, [pc, #272]	@ (8009960 <vPortSuppressTicksAndSleep+0x194>)
 8009850:	69fb      	ldr	r3, [r7, #28]
 8009852:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009854:	4b3f      	ldr	r3, [pc, #252]	@ (8009954 <vPortSuppressTicksAndSleep+0x188>)
 8009856:	2200      	movs	r2, #0
 8009858:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800985a:	4b3d      	ldr	r3, [pc, #244]	@ (8009950 <vPortSuppressTicksAndSleep+0x184>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	4a3c      	ldr	r2, [pc, #240]	@ (8009950 <vPortSuppressTicksAndSleep+0x184>)
 8009860:	f043 0301 	orr.w	r3, r3, #1
 8009864:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	613b      	str	r3, [r7, #16]
			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 800986a:	2300      	movs	r3, #0
 800986c:	613b      	str	r3, [r7, #16]
 800986e:	6938      	ldr	r0, [r7, #16]
 8009870:	f7f7 f902 	bl	8000a78 <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d004      	beq.n	8009884 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 800987a:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 800987e:	bf30      	wfi
				__asm volatile( "isb" );
 8009880:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f7f7 f901 	bl	8000a8c <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 800988a:	b662      	cpsie	i
			__asm volatile( "dsb" );
 800988c:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 8009890:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 8009894:	b672      	cpsid	i
			__asm volatile( "dsb" );
 8009896:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800989a:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 800989e:	4b2c      	ldr	r3, [pc, #176]	@ (8009950 <vPortSuppressTicksAndSleep+0x184>)
 80098a0:	2206      	movs	r2, #6
 80098a2:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 80098a4:	4b2a      	ldr	r3, [pc, #168]	@ (8009950 <vPortSuppressTicksAndSleep+0x184>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d01d      	beq.n	80098ec <vPortSuppressTicksAndSleep+0x120>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 80098b0:	4b29      	ldr	r3, [pc, #164]	@ (8009958 <vPortSuppressTicksAndSleep+0x18c>)
 80098b2:	681a      	ldr	r2, [r3, #0]
 80098b4:	4b27      	ldr	r3, [pc, #156]	@ (8009954 <vPortSuppressTicksAndSleep+0x188>)
 80098b6:	6819      	ldr	r1, [r3, #0]
 80098b8:	69fb      	ldr	r3, [r7, #28]
 80098ba:	1acb      	subs	r3, r1, r3
 80098bc:	4413      	add	r3, r2
 80098be:	3b01      	subs	r3, #1
 80098c0:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 80098c2:	4b26      	ldr	r3, [pc, #152]	@ (800995c <vPortSuppressTicksAndSleep+0x190>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	697a      	ldr	r2, [r7, #20]
 80098c8:	429a      	cmp	r2, r3
 80098ca:	d304      	bcc.n	80098d6 <vPortSuppressTicksAndSleep+0x10a>
 80098cc:	4b22      	ldr	r3, [pc, #136]	@ (8009958 <vPortSuppressTicksAndSleep+0x18c>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	697a      	ldr	r2, [r7, #20]
 80098d2:	429a      	cmp	r2, r3
 80098d4:	d903      	bls.n	80098de <vPortSuppressTicksAndSleep+0x112>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 80098d6:	4b20      	ldr	r3, [pc, #128]	@ (8009958 <vPortSuppressTicksAndSleep+0x18c>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	3b01      	subs	r3, #1
 80098dc:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 80098de:	4a20      	ldr	r2, [pc, #128]	@ (8009960 <vPortSuppressTicksAndSleep+0x194>)
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	3b01      	subs	r3, #1
 80098e8:	61bb      	str	r3, [r7, #24]
 80098ea:	e018      	b.n	800991e <vPortSuppressTicksAndSleep+0x152>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 80098ec:	4b1a      	ldr	r3, [pc, #104]	@ (8009958 <vPortSuppressTicksAndSleep+0x18c>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	687a      	ldr	r2, [r7, #4]
 80098f2:	fb03 f202 	mul.w	r2, r3, r2
 80098f6:	4b17      	ldr	r3, [pc, #92]	@ (8009954 <vPortSuppressTicksAndSleep+0x188>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	1ad3      	subs	r3, r2, r3
 80098fc:	60fb      	str	r3, [r7, #12]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 80098fe:	4b16      	ldr	r3, [pc, #88]	@ (8009958 <vPortSuppressTicksAndSleep+0x18c>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	68fa      	ldr	r2, [r7, #12]
 8009904:	fbb2 f3f3 	udiv	r3, r2, r3
 8009908:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 800990a:	69bb      	ldr	r3, [r7, #24]
 800990c:	3301      	adds	r3, #1
 800990e:	4a12      	ldr	r2, [pc, #72]	@ (8009958 <vPortSuppressTicksAndSleep+0x18c>)
 8009910:	6812      	ldr	r2, [r2, #0]
 8009912:	fb03 f202 	mul.w	r2, r3, r2
 8009916:	4912      	ldr	r1, [pc, #72]	@ (8009960 <vPortSuppressTicksAndSleep+0x194>)
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	1ad3      	subs	r3, r2, r3
 800991c:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800991e:	4b0d      	ldr	r3, [pc, #52]	@ (8009954 <vPortSuppressTicksAndSleep+0x188>)
 8009920:	2200      	movs	r2, #0
 8009922:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8009924:	4b0a      	ldr	r3, [pc, #40]	@ (8009950 <vPortSuppressTicksAndSleep+0x184>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4a09      	ldr	r2, [pc, #36]	@ (8009950 <vPortSuppressTicksAndSleep+0x184>)
 800992a:	f043 0301 	orr.w	r3, r3, #1
 800992e:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 8009930:	69b8      	ldr	r0, [r7, #24]
 8009932:	f7fe fc71 	bl	8008218 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8009936:	4b08      	ldr	r3, [pc, #32]	@ (8009958 <vPortSuppressTicksAndSleep+0x18c>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	4a09      	ldr	r2, [pc, #36]	@ (8009960 <vPortSuppressTicksAndSleep+0x194>)
 800993c:	3b01      	subs	r3, #1
 800993e:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 8009940:	b662      	cpsie	i
	}
 8009942:	bf00      	nop
 8009944:	3720      	adds	r7, #32
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}
 800994a:	bf00      	nop
 800994c:	24001104 	.word	0x24001104
 8009950:	e000e010 	.word	0xe000e010
 8009954:	e000e018 	.word	0xe000e018
 8009958:	24001100 	.word	0x24001100
 800995c:	24001108 	.word	0x24001108
 8009960:	e000e014 	.word	0xe000e014

08009964 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009964:	b480      	push	{r7}
 8009966:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 8009968:	4b14      	ldr	r3, [pc, #80]	@ (80099bc <vPortSetupTimerInterrupt+0x58>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4a14      	ldr	r2, [pc, #80]	@ (80099c0 <vPortSetupTimerInterrupt+0x5c>)
 800996e:	fba2 2303 	umull	r2, r3, r2, r3
 8009972:	099b      	lsrs	r3, r3, #6
 8009974:	4a13      	ldr	r2, [pc, #76]	@ (80099c4 <vPortSetupTimerInterrupt+0x60>)
 8009976:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 8009978:	4b12      	ldr	r3, [pc, #72]	@ (80099c4 <vPortSetupTimerInterrupt+0x60>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8009980:	fbb2 f3f3 	udiv	r3, r2, r3
 8009984:	4a10      	ldr	r2, [pc, #64]	@ (80099c8 <vPortSetupTimerInterrupt+0x64>)
 8009986:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 8009988:	4b10      	ldr	r3, [pc, #64]	@ (80099cc <vPortSetupTimerInterrupt+0x68>)
 800998a:	222d      	movs	r2, #45	@ 0x2d
 800998c:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800998e:	4b10      	ldr	r3, [pc, #64]	@ (80099d0 <vPortSetupTimerInterrupt+0x6c>)
 8009990:	2200      	movs	r2, #0
 8009992:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009994:	4b0f      	ldr	r3, [pc, #60]	@ (80099d4 <vPortSetupTimerInterrupt+0x70>)
 8009996:	2200      	movs	r2, #0
 8009998:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800999a:	4b08      	ldr	r3, [pc, #32]	@ (80099bc <vPortSetupTimerInterrupt+0x58>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	4a08      	ldr	r2, [pc, #32]	@ (80099c0 <vPortSetupTimerInterrupt+0x5c>)
 80099a0:	fba2 2303 	umull	r2, r3, r2, r3
 80099a4:	099b      	lsrs	r3, r3, #6
 80099a6:	4a0c      	ldr	r2, [pc, #48]	@ (80099d8 <vPortSetupTimerInterrupt+0x74>)
 80099a8:	3b01      	subs	r3, #1
 80099aa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80099ac:	4b08      	ldr	r3, [pc, #32]	@ (80099d0 <vPortSetupTimerInterrupt+0x6c>)
 80099ae:	2207      	movs	r2, #7
 80099b0:	601a      	str	r2, [r3, #0]
}
 80099b2:	bf00      	nop
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr
 80099bc:	24000000 	.word	0x24000000
 80099c0:	10624dd3 	.word	0x10624dd3
 80099c4:	24001100 	.word	0x24001100
 80099c8:	24001104 	.word	0x24001104
 80099cc:	24001108 	.word	0x24001108
 80099d0:	e000e010 	.word	0xe000e010
 80099d4:	e000e018 	.word	0xe000e018
 80099d8:	e000e014 	.word	0xe000e014

080099dc <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80099dc:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80099ec <vPortEnableVFP+0x10>
 80099e0:	6801      	ldr	r1, [r0, #0]
 80099e2:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80099e6:	6001      	str	r1, [r0, #0]
 80099e8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80099ea:	bf00      	nop
 80099ec:	e000ed88 	.word	0xe000ed88

080099f0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80099f0:	b480      	push	{r7}
 80099f2:	b085      	sub	sp, #20
 80099f4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80099f6:	f3ef 8305 	mrs	r3, IPSR
 80099fa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	2b0f      	cmp	r3, #15
 8009a00:	d915      	bls.n	8009a2e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009a02:	4a18      	ldr	r2, [pc, #96]	@ (8009a64 <vPortValidateInterruptPriority+0x74>)
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	4413      	add	r3, r2
 8009a08:	781b      	ldrb	r3, [r3, #0]
 8009a0a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009a0c:	4b16      	ldr	r3, [pc, #88]	@ (8009a68 <vPortValidateInterruptPriority+0x78>)
 8009a0e:	781b      	ldrb	r3, [r3, #0]
 8009a10:	7afa      	ldrb	r2, [r7, #11]
 8009a12:	429a      	cmp	r2, r3
 8009a14:	d20b      	bcs.n	8009a2e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a1a:	f383 8811 	msr	BASEPRI, r3
 8009a1e:	f3bf 8f6f 	isb	sy
 8009a22:	f3bf 8f4f 	dsb	sy
 8009a26:	607b      	str	r3, [r7, #4]
}
 8009a28:	bf00      	nop
 8009a2a:	bf00      	nop
 8009a2c:	e7fd      	b.n	8009a2a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009a2e:	4b0f      	ldr	r3, [pc, #60]	@ (8009a6c <vPortValidateInterruptPriority+0x7c>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009a36:	4b0e      	ldr	r3, [pc, #56]	@ (8009a70 <vPortValidateInterruptPriority+0x80>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	d90b      	bls.n	8009a56 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a42:	f383 8811 	msr	BASEPRI, r3
 8009a46:	f3bf 8f6f 	isb	sy
 8009a4a:	f3bf 8f4f 	dsb	sy
 8009a4e:	603b      	str	r3, [r7, #0]
}
 8009a50:	bf00      	nop
 8009a52:	bf00      	nop
 8009a54:	e7fd      	b.n	8009a52 <vPortValidateInterruptPriority+0x62>
	}
 8009a56:	bf00      	nop
 8009a58:	3714      	adds	r7, #20
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a60:	4770      	bx	lr
 8009a62:	bf00      	nop
 8009a64:	e000e3f0 	.word	0xe000e3f0
 8009a68:	2400110c 	.word	0x2400110c
 8009a6c:	e000ed0c 	.word	0xe000ed0c
 8009a70:	24001110 	.word	0x24001110

08009a74 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b08a      	sub	sp, #40	@ 0x28
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009a80:	f7fe fad6 	bl	8008030 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009a84:	4b5c      	ldr	r3, [pc, #368]	@ (8009bf8 <pvPortMalloc+0x184>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d101      	bne.n	8009a90 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009a8c:	f000 f924 	bl	8009cd8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009a90:	4b5a      	ldr	r3, [pc, #360]	@ (8009bfc <pvPortMalloc+0x188>)
 8009a92:	681a      	ldr	r2, [r3, #0]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	4013      	ands	r3, r2
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	f040 8095 	bne.w	8009bc8 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d01e      	beq.n	8009ae2 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009aa4:	2208      	movs	r2, #8
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	4413      	add	r3, r2
 8009aaa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f003 0307 	and.w	r3, r3, #7
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d015      	beq.n	8009ae2 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f023 0307 	bic.w	r3, r3, #7
 8009abc:	3308      	adds	r3, #8
 8009abe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f003 0307 	and.w	r3, r3, #7
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d00b      	beq.n	8009ae2 <pvPortMalloc+0x6e>
	__asm volatile
 8009aca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ace:	f383 8811 	msr	BASEPRI, r3
 8009ad2:	f3bf 8f6f 	isb	sy
 8009ad6:	f3bf 8f4f 	dsb	sy
 8009ada:	617b      	str	r3, [r7, #20]
}
 8009adc:	bf00      	nop
 8009ade:	bf00      	nop
 8009ae0:	e7fd      	b.n	8009ade <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d06f      	beq.n	8009bc8 <pvPortMalloc+0x154>
 8009ae8:	4b45      	ldr	r3, [pc, #276]	@ (8009c00 <pvPortMalloc+0x18c>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	687a      	ldr	r2, [r7, #4]
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d86a      	bhi.n	8009bc8 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009af2:	4b44      	ldr	r3, [pc, #272]	@ (8009c04 <pvPortMalloc+0x190>)
 8009af4:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009af6:	4b43      	ldr	r3, [pc, #268]	@ (8009c04 <pvPortMalloc+0x190>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009afc:	e004      	b.n	8009b08 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b00:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	687a      	ldr	r2, [r7, #4]
 8009b0e:	429a      	cmp	r2, r3
 8009b10:	d903      	bls.n	8009b1a <pvPortMalloc+0xa6>
 8009b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d1f1      	bne.n	8009afe <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009b1a:	4b37      	ldr	r3, [pc, #220]	@ (8009bf8 <pvPortMalloc+0x184>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d051      	beq.n	8009bc8 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009b24:	6a3b      	ldr	r3, [r7, #32]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	2208      	movs	r2, #8
 8009b2a:	4413      	add	r3, r2
 8009b2c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b30:	681a      	ldr	r2, [r3, #0]
 8009b32:	6a3b      	ldr	r3, [r7, #32]
 8009b34:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b38:	685a      	ldr	r2, [r3, #4]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	1ad2      	subs	r2, r2, r3
 8009b3e:	2308      	movs	r3, #8
 8009b40:	005b      	lsls	r3, r3, #1
 8009b42:	429a      	cmp	r2, r3
 8009b44:	d920      	bls.n	8009b88 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009b46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	4413      	add	r3, r2
 8009b4c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b4e:	69bb      	ldr	r3, [r7, #24]
 8009b50:	f003 0307 	and.w	r3, r3, #7
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d00b      	beq.n	8009b70 <pvPortMalloc+0xfc>
	__asm volatile
 8009b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b5c:	f383 8811 	msr	BASEPRI, r3
 8009b60:	f3bf 8f6f 	isb	sy
 8009b64:	f3bf 8f4f 	dsb	sy
 8009b68:	613b      	str	r3, [r7, #16]
}
 8009b6a:	bf00      	nop
 8009b6c:	bf00      	nop
 8009b6e:	e7fd      	b.n	8009b6c <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b72:	685a      	ldr	r2, [r3, #4]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	1ad2      	subs	r2, r2, r3
 8009b78:	69bb      	ldr	r3, [r7, #24]
 8009b7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b7e:	687a      	ldr	r2, [r7, #4]
 8009b80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009b82:	69b8      	ldr	r0, [r7, #24]
 8009b84:	f000 f90a 	bl	8009d9c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009b88:	4b1d      	ldr	r3, [pc, #116]	@ (8009c00 <pvPortMalloc+0x18c>)
 8009b8a:	681a      	ldr	r2, [r3, #0]
 8009b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b8e:	685b      	ldr	r3, [r3, #4]
 8009b90:	1ad3      	subs	r3, r2, r3
 8009b92:	4a1b      	ldr	r2, [pc, #108]	@ (8009c00 <pvPortMalloc+0x18c>)
 8009b94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009b96:	4b1a      	ldr	r3, [pc, #104]	@ (8009c00 <pvPortMalloc+0x18c>)
 8009b98:	681a      	ldr	r2, [r3, #0]
 8009b9a:	4b1b      	ldr	r3, [pc, #108]	@ (8009c08 <pvPortMalloc+0x194>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d203      	bcs.n	8009baa <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009ba2:	4b17      	ldr	r3, [pc, #92]	@ (8009c00 <pvPortMalloc+0x18c>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	4a18      	ldr	r2, [pc, #96]	@ (8009c08 <pvPortMalloc+0x194>)
 8009ba8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bac:	685a      	ldr	r2, [r3, #4]
 8009bae:	4b13      	ldr	r3, [pc, #76]	@ (8009bfc <pvPortMalloc+0x188>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	431a      	orrs	r2, r3
 8009bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bba:	2200      	movs	r2, #0
 8009bbc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009bbe:	4b13      	ldr	r3, [pc, #76]	@ (8009c0c <pvPortMalloc+0x198>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	3301      	adds	r3, #1
 8009bc4:	4a11      	ldr	r2, [pc, #68]	@ (8009c0c <pvPortMalloc+0x198>)
 8009bc6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009bc8:	f7fe fa78 	bl	80080bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009bcc:	69fb      	ldr	r3, [r7, #28]
 8009bce:	f003 0307 	and.w	r3, r3, #7
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d00b      	beq.n	8009bee <pvPortMalloc+0x17a>
	__asm volatile
 8009bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bda:	f383 8811 	msr	BASEPRI, r3
 8009bde:	f3bf 8f6f 	isb	sy
 8009be2:	f3bf 8f4f 	dsb	sy
 8009be6:	60fb      	str	r3, [r7, #12]
}
 8009be8:	bf00      	nop
 8009bea:	bf00      	nop
 8009bec:	e7fd      	b.n	8009bea <pvPortMalloc+0x176>
	return pvReturn;
 8009bee:	69fb      	ldr	r3, [r7, #28]
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	3728      	adds	r7, #40	@ 0x28
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}
 8009bf8:	24004d1c 	.word	0x24004d1c
 8009bfc:	24004d30 	.word	0x24004d30
 8009c00:	24004d20 	.word	0x24004d20
 8009c04:	24004d14 	.word	0x24004d14
 8009c08:	24004d24 	.word	0x24004d24
 8009c0c:	24004d28 	.word	0x24004d28

08009c10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b086      	sub	sp, #24
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d04f      	beq.n	8009cc2 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009c22:	2308      	movs	r3, #8
 8009c24:	425b      	negs	r3, r3
 8009c26:	697a      	ldr	r2, [r7, #20]
 8009c28:	4413      	add	r3, r2
 8009c2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009c30:	693b      	ldr	r3, [r7, #16]
 8009c32:	685a      	ldr	r2, [r3, #4]
 8009c34:	4b25      	ldr	r3, [pc, #148]	@ (8009ccc <vPortFree+0xbc>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	4013      	ands	r3, r2
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d10b      	bne.n	8009c56 <vPortFree+0x46>
	__asm volatile
 8009c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c42:	f383 8811 	msr	BASEPRI, r3
 8009c46:	f3bf 8f6f 	isb	sy
 8009c4a:	f3bf 8f4f 	dsb	sy
 8009c4e:	60fb      	str	r3, [r7, #12]
}
 8009c50:	bf00      	nop
 8009c52:	bf00      	nop
 8009c54:	e7fd      	b.n	8009c52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d00b      	beq.n	8009c76 <vPortFree+0x66>
	__asm volatile
 8009c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c62:	f383 8811 	msr	BASEPRI, r3
 8009c66:	f3bf 8f6f 	isb	sy
 8009c6a:	f3bf 8f4f 	dsb	sy
 8009c6e:	60bb      	str	r3, [r7, #8]
}
 8009c70:	bf00      	nop
 8009c72:	bf00      	nop
 8009c74:	e7fd      	b.n	8009c72 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	685a      	ldr	r2, [r3, #4]
 8009c7a:	4b14      	ldr	r3, [pc, #80]	@ (8009ccc <vPortFree+0xbc>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4013      	ands	r3, r2
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d01e      	beq.n	8009cc2 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d11a      	bne.n	8009cc2 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	685a      	ldr	r2, [r3, #4]
 8009c90:	4b0e      	ldr	r3, [pc, #56]	@ (8009ccc <vPortFree+0xbc>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	43db      	mvns	r3, r3
 8009c96:	401a      	ands	r2, r3
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009c9c:	f7fe f9c8 	bl	8008030 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	685a      	ldr	r2, [r3, #4]
 8009ca4:	4b0a      	ldr	r3, [pc, #40]	@ (8009cd0 <vPortFree+0xc0>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	4413      	add	r3, r2
 8009caa:	4a09      	ldr	r2, [pc, #36]	@ (8009cd0 <vPortFree+0xc0>)
 8009cac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009cae:	6938      	ldr	r0, [r7, #16]
 8009cb0:	f000 f874 	bl	8009d9c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009cb4:	4b07      	ldr	r3, [pc, #28]	@ (8009cd4 <vPortFree+0xc4>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	3301      	adds	r3, #1
 8009cba:	4a06      	ldr	r2, [pc, #24]	@ (8009cd4 <vPortFree+0xc4>)
 8009cbc:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009cbe:	f7fe f9fd 	bl	80080bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009cc2:	bf00      	nop
 8009cc4:	3718      	adds	r7, #24
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}
 8009cca:	bf00      	nop
 8009ccc:	24004d30 	.word	0x24004d30
 8009cd0:	24004d20 	.word	0x24004d20
 8009cd4:	24004d2c 	.word	0x24004d2c

08009cd8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b085      	sub	sp, #20
 8009cdc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009cde:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8009ce2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009ce4:	4b27      	ldr	r3, [pc, #156]	@ (8009d84 <prvHeapInit+0xac>)
 8009ce6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	f003 0307 	and.w	r3, r3, #7
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d00c      	beq.n	8009d0c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	3307      	adds	r3, #7
 8009cf6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	f023 0307 	bic.w	r3, r3, #7
 8009cfe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009d00:	68ba      	ldr	r2, [r7, #8]
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	1ad3      	subs	r3, r2, r3
 8009d06:	4a1f      	ldr	r2, [pc, #124]	@ (8009d84 <prvHeapInit+0xac>)
 8009d08:	4413      	add	r3, r2
 8009d0a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009d10:	4a1d      	ldr	r2, [pc, #116]	@ (8009d88 <prvHeapInit+0xb0>)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009d16:	4b1c      	ldr	r3, [pc, #112]	@ (8009d88 <prvHeapInit+0xb0>)
 8009d18:	2200      	movs	r2, #0
 8009d1a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	68ba      	ldr	r2, [r7, #8]
 8009d20:	4413      	add	r3, r2
 8009d22:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009d24:	2208      	movs	r2, #8
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	1a9b      	subs	r3, r3, r2
 8009d2a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	f023 0307 	bic.w	r3, r3, #7
 8009d32:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	4a15      	ldr	r2, [pc, #84]	@ (8009d8c <prvHeapInit+0xb4>)
 8009d38:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009d3a:	4b14      	ldr	r3, [pc, #80]	@ (8009d8c <prvHeapInit+0xb4>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009d42:	4b12      	ldr	r3, [pc, #72]	@ (8009d8c <prvHeapInit+0xb4>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	2200      	movs	r2, #0
 8009d48:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	68fa      	ldr	r2, [r7, #12]
 8009d52:	1ad2      	subs	r2, r2, r3
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009d58:	4b0c      	ldr	r3, [pc, #48]	@ (8009d8c <prvHeapInit+0xb4>)
 8009d5a:	681a      	ldr	r2, [r3, #0]
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	685b      	ldr	r3, [r3, #4]
 8009d64:	4a0a      	ldr	r2, [pc, #40]	@ (8009d90 <prvHeapInit+0xb8>)
 8009d66:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	685b      	ldr	r3, [r3, #4]
 8009d6c:	4a09      	ldr	r2, [pc, #36]	@ (8009d94 <prvHeapInit+0xbc>)
 8009d6e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009d70:	4b09      	ldr	r3, [pc, #36]	@ (8009d98 <prvHeapInit+0xc0>)
 8009d72:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009d76:	601a      	str	r2, [r3, #0]
}
 8009d78:	bf00      	nop
 8009d7a:	3714      	adds	r7, #20
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr
 8009d84:	24001114 	.word	0x24001114
 8009d88:	24004d14 	.word	0x24004d14
 8009d8c:	24004d1c 	.word	0x24004d1c
 8009d90:	24004d24 	.word	0x24004d24
 8009d94:	24004d20 	.word	0x24004d20
 8009d98:	24004d30 	.word	0x24004d30

08009d9c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b085      	sub	sp, #20
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009da4:	4b28      	ldr	r3, [pc, #160]	@ (8009e48 <prvInsertBlockIntoFreeList+0xac>)
 8009da6:	60fb      	str	r3, [r7, #12]
 8009da8:	e002      	b.n	8009db0 <prvInsertBlockIntoFreeList+0x14>
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	60fb      	str	r3, [r7, #12]
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	687a      	ldr	r2, [r7, #4]
 8009db6:	429a      	cmp	r2, r3
 8009db8:	d8f7      	bhi.n	8009daa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	685b      	ldr	r3, [r3, #4]
 8009dc2:	68ba      	ldr	r2, [r7, #8]
 8009dc4:	4413      	add	r3, r2
 8009dc6:	687a      	ldr	r2, [r7, #4]
 8009dc8:	429a      	cmp	r2, r3
 8009dca:	d108      	bne.n	8009dde <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	685a      	ldr	r2, [r3, #4]
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	685b      	ldr	r3, [r3, #4]
 8009dd4:	441a      	add	r2, r3
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	68ba      	ldr	r2, [r7, #8]
 8009de8:	441a      	add	r2, r3
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	429a      	cmp	r2, r3
 8009df0:	d118      	bne.n	8009e24 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681a      	ldr	r2, [r3, #0]
 8009df6:	4b15      	ldr	r3, [pc, #84]	@ (8009e4c <prvInsertBlockIntoFreeList+0xb0>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	429a      	cmp	r2, r3
 8009dfc:	d00d      	beq.n	8009e1a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	685a      	ldr	r2, [r3, #4]
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	685b      	ldr	r3, [r3, #4]
 8009e08:	441a      	add	r2, r3
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	681a      	ldr	r2, [r3, #0]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	601a      	str	r2, [r3, #0]
 8009e18:	e008      	b.n	8009e2c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8009e4c <prvInsertBlockIntoFreeList+0xb0>)
 8009e1c:	681a      	ldr	r2, [r3, #0]
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	601a      	str	r2, [r3, #0]
 8009e22:	e003      	b.n	8009e2c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681a      	ldr	r2, [r3, #0]
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009e2c:	68fa      	ldr	r2, [r7, #12]
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	429a      	cmp	r2, r3
 8009e32:	d002      	beq.n	8009e3a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	687a      	ldr	r2, [r7, #4]
 8009e38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e3a:	bf00      	nop
 8009e3c:	3714      	adds	r7, #20
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e44:	4770      	bx	lr
 8009e46:	bf00      	nop
 8009e48:	24004d14 	.word	0x24004d14
 8009e4c:	24004d1c 	.word	0x24004d1c

08009e50 <abort>:
 8009e50:	b508      	push	{r3, lr}
 8009e52:	2006      	movs	r0, #6
 8009e54:	f001 f988 	bl	800b168 <raise>
 8009e58:	2001      	movs	r0, #1
 8009e5a:	f7f7 f8b3 	bl	8000fc4 <_exit>
	...

08009e60 <__assert_func>:
 8009e60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e62:	4614      	mov	r4, r2
 8009e64:	461a      	mov	r2, r3
 8009e66:	4b09      	ldr	r3, [pc, #36]	@ (8009e8c <__assert_func+0x2c>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	4605      	mov	r5, r0
 8009e6c:	68d8      	ldr	r0, [r3, #12]
 8009e6e:	b954      	cbnz	r4, 8009e86 <__assert_func+0x26>
 8009e70:	4b07      	ldr	r3, [pc, #28]	@ (8009e90 <__assert_func+0x30>)
 8009e72:	461c      	mov	r4, r3
 8009e74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009e78:	9100      	str	r1, [sp, #0]
 8009e7a:	462b      	mov	r3, r5
 8009e7c:	4905      	ldr	r1, [pc, #20]	@ (8009e94 <__assert_func+0x34>)
 8009e7e:	f000 ffab 	bl	800add8 <fiprintf>
 8009e82:	f7ff ffe5 	bl	8009e50 <abort>
 8009e86:	4b04      	ldr	r3, [pc, #16]	@ (8009e98 <__assert_func+0x38>)
 8009e88:	e7f4      	b.n	8009e74 <__assert_func+0x14>
 8009e8a:	bf00      	nop
 8009e8c:	24000020 	.word	0x24000020
 8009e90:	0800e61b 	.word	0x0800e61b
 8009e94:	0800e5ed 	.word	0x0800e5ed
 8009e98:	0800e5e0 	.word	0x0800e5e0

08009e9c <malloc>:
 8009e9c:	4b02      	ldr	r3, [pc, #8]	@ (8009ea8 <malloc+0xc>)
 8009e9e:	4601      	mov	r1, r0
 8009ea0:	6818      	ldr	r0, [r3, #0]
 8009ea2:	f000 b825 	b.w	8009ef0 <_malloc_r>
 8009ea6:	bf00      	nop
 8009ea8:	24000020 	.word	0x24000020

08009eac <sbrk_aligned>:
 8009eac:	b570      	push	{r4, r5, r6, lr}
 8009eae:	4e0f      	ldr	r6, [pc, #60]	@ (8009eec <sbrk_aligned+0x40>)
 8009eb0:	460c      	mov	r4, r1
 8009eb2:	6831      	ldr	r1, [r6, #0]
 8009eb4:	4605      	mov	r5, r0
 8009eb6:	b911      	cbnz	r1, 8009ebe <sbrk_aligned+0x12>
 8009eb8:	f001 fa00 	bl	800b2bc <_sbrk_r>
 8009ebc:	6030      	str	r0, [r6, #0]
 8009ebe:	4621      	mov	r1, r4
 8009ec0:	4628      	mov	r0, r5
 8009ec2:	f001 f9fb 	bl	800b2bc <_sbrk_r>
 8009ec6:	1c43      	adds	r3, r0, #1
 8009ec8:	d103      	bne.n	8009ed2 <sbrk_aligned+0x26>
 8009eca:	f04f 34ff 	mov.w	r4, #4294967295
 8009ece:	4620      	mov	r0, r4
 8009ed0:	bd70      	pop	{r4, r5, r6, pc}
 8009ed2:	1cc4      	adds	r4, r0, #3
 8009ed4:	f024 0403 	bic.w	r4, r4, #3
 8009ed8:	42a0      	cmp	r0, r4
 8009eda:	d0f8      	beq.n	8009ece <sbrk_aligned+0x22>
 8009edc:	1a21      	subs	r1, r4, r0
 8009ede:	4628      	mov	r0, r5
 8009ee0:	f001 f9ec 	bl	800b2bc <_sbrk_r>
 8009ee4:	3001      	adds	r0, #1
 8009ee6:	d1f2      	bne.n	8009ece <sbrk_aligned+0x22>
 8009ee8:	e7ef      	b.n	8009eca <sbrk_aligned+0x1e>
 8009eea:	bf00      	nop
 8009eec:	24004d34 	.word	0x24004d34

08009ef0 <_malloc_r>:
 8009ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ef4:	1ccd      	adds	r5, r1, #3
 8009ef6:	f025 0503 	bic.w	r5, r5, #3
 8009efa:	3508      	adds	r5, #8
 8009efc:	2d0c      	cmp	r5, #12
 8009efe:	bf38      	it	cc
 8009f00:	250c      	movcc	r5, #12
 8009f02:	2d00      	cmp	r5, #0
 8009f04:	4606      	mov	r6, r0
 8009f06:	db01      	blt.n	8009f0c <_malloc_r+0x1c>
 8009f08:	42a9      	cmp	r1, r5
 8009f0a:	d904      	bls.n	8009f16 <_malloc_r+0x26>
 8009f0c:	230c      	movs	r3, #12
 8009f0e:	6033      	str	r3, [r6, #0]
 8009f10:	2000      	movs	r0, #0
 8009f12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009fec <_malloc_r+0xfc>
 8009f1a:	f000 f869 	bl	8009ff0 <__malloc_lock>
 8009f1e:	f8d8 3000 	ldr.w	r3, [r8]
 8009f22:	461c      	mov	r4, r3
 8009f24:	bb44      	cbnz	r4, 8009f78 <_malloc_r+0x88>
 8009f26:	4629      	mov	r1, r5
 8009f28:	4630      	mov	r0, r6
 8009f2a:	f7ff ffbf 	bl	8009eac <sbrk_aligned>
 8009f2e:	1c43      	adds	r3, r0, #1
 8009f30:	4604      	mov	r4, r0
 8009f32:	d158      	bne.n	8009fe6 <_malloc_r+0xf6>
 8009f34:	f8d8 4000 	ldr.w	r4, [r8]
 8009f38:	4627      	mov	r7, r4
 8009f3a:	2f00      	cmp	r7, #0
 8009f3c:	d143      	bne.n	8009fc6 <_malloc_r+0xd6>
 8009f3e:	2c00      	cmp	r4, #0
 8009f40:	d04b      	beq.n	8009fda <_malloc_r+0xea>
 8009f42:	6823      	ldr	r3, [r4, #0]
 8009f44:	4639      	mov	r1, r7
 8009f46:	4630      	mov	r0, r6
 8009f48:	eb04 0903 	add.w	r9, r4, r3
 8009f4c:	f001 f9b6 	bl	800b2bc <_sbrk_r>
 8009f50:	4581      	cmp	r9, r0
 8009f52:	d142      	bne.n	8009fda <_malloc_r+0xea>
 8009f54:	6821      	ldr	r1, [r4, #0]
 8009f56:	1a6d      	subs	r5, r5, r1
 8009f58:	4629      	mov	r1, r5
 8009f5a:	4630      	mov	r0, r6
 8009f5c:	f7ff ffa6 	bl	8009eac <sbrk_aligned>
 8009f60:	3001      	adds	r0, #1
 8009f62:	d03a      	beq.n	8009fda <_malloc_r+0xea>
 8009f64:	6823      	ldr	r3, [r4, #0]
 8009f66:	442b      	add	r3, r5
 8009f68:	6023      	str	r3, [r4, #0]
 8009f6a:	f8d8 3000 	ldr.w	r3, [r8]
 8009f6e:	685a      	ldr	r2, [r3, #4]
 8009f70:	bb62      	cbnz	r2, 8009fcc <_malloc_r+0xdc>
 8009f72:	f8c8 7000 	str.w	r7, [r8]
 8009f76:	e00f      	b.n	8009f98 <_malloc_r+0xa8>
 8009f78:	6822      	ldr	r2, [r4, #0]
 8009f7a:	1b52      	subs	r2, r2, r5
 8009f7c:	d420      	bmi.n	8009fc0 <_malloc_r+0xd0>
 8009f7e:	2a0b      	cmp	r2, #11
 8009f80:	d917      	bls.n	8009fb2 <_malloc_r+0xc2>
 8009f82:	1961      	adds	r1, r4, r5
 8009f84:	42a3      	cmp	r3, r4
 8009f86:	6025      	str	r5, [r4, #0]
 8009f88:	bf18      	it	ne
 8009f8a:	6059      	strne	r1, [r3, #4]
 8009f8c:	6863      	ldr	r3, [r4, #4]
 8009f8e:	bf08      	it	eq
 8009f90:	f8c8 1000 	streq.w	r1, [r8]
 8009f94:	5162      	str	r2, [r4, r5]
 8009f96:	604b      	str	r3, [r1, #4]
 8009f98:	4630      	mov	r0, r6
 8009f9a:	f000 f82f 	bl	8009ffc <__malloc_unlock>
 8009f9e:	f104 000b 	add.w	r0, r4, #11
 8009fa2:	1d23      	adds	r3, r4, #4
 8009fa4:	f020 0007 	bic.w	r0, r0, #7
 8009fa8:	1ac2      	subs	r2, r0, r3
 8009faa:	bf1c      	itt	ne
 8009fac:	1a1b      	subne	r3, r3, r0
 8009fae:	50a3      	strne	r3, [r4, r2]
 8009fb0:	e7af      	b.n	8009f12 <_malloc_r+0x22>
 8009fb2:	6862      	ldr	r2, [r4, #4]
 8009fb4:	42a3      	cmp	r3, r4
 8009fb6:	bf0c      	ite	eq
 8009fb8:	f8c8 2000 	streq.w	r2, [r8]
 8009fbc:	605a      	strne	r2, [r3, #4]
 8009fbe:	e7eb      	b.n	8009f98 <_malloc_r+0xa8>
 8009fc0:	4623      	mov	r3, r4
 8009fc2:	6864      	ldr	r4, [r4, #4]
 8009fc4:	e7ae      	b.n	8009f24 <_malloc_r+0x34>
 8009fc6:	463c      	mov	r4, r7
 8009fc8:	687f      	ldr	r7, [r7, #4]
 8009fca:	e7b6      	b.n	8009f3a <_malloc_r+0x4a>
 8009fcc:	461a      	mov	r2, r3
 8009fce:	685b      	ldr	r3, [r3, #4]
 8009fd0:	42a3      	cmp	r3, r4
 8009fd2:	d1fb      	bne.n	8009fcc <_malloc_r+0xdc>
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	6053      	str	r3, [r2, #4]
 8009fd8:	e7de      	b.n	8009f98 <_malloc_r+0xa8>
 8009fda:	230c      	movs	r3, #12
 8009fdc:	6033      	str	r3, [r6, #0]
 8009fde:	4630      	mov	r0, r6
 8009fe0:	f000 f80c 	bl	8009ffc <__malloc_unlock>
 8009fe4:	e794      	b.n	8009f10 <_malloc_r+0x20>
 8009fe6:	6005      	str	r5, [r0, #0]
 8009fe8:	e7d6      	b.n	8009f98 <_malloc_r+0xa8>
 8009fea:	bf00      	nop
 8009fec:	24004d38 	.word	0x24004d38

08009ff0 <__malloc_lock>:
 8009ff0:	4801      	ldr	r0, [pc, #4]	@ (8009ff8 <__malloc_lock+0x8>)
 8009ff2:	f001 b9b0 	b.w	800b356 <__retarget_lock_acquire_recursive>
 8009ff6:	bf00      	nop
 8009ff8:	24004e7c 	.word	0x24004e7c

08009ffc <__malloc_unlock>:
 8009ffc:	4801      	ldr	r0, [pc, #4]	@ (800a004 <__malloc_unlock+0x8>)
 8009ffe:	f001 b9ab 	b.w	800b358 <__retarget_lock_release_recursive>
 800a002:	bf00      	nop
 800a004:	24004e7c 	.word	0x24004e7c

0800a008 <__cvt>:
 800a008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a00a:	ed2d 8b02 	vpush	{d8}
 800a00e:	eeb0 8b40 	vmov.f64	d8, d0
 800a012:	b085      	sub	sp, #20
 800a014:	4617      	mov	r7, r2
 800a016:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800a018:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a01a:	ee18 2a90 	vmov	r2, s17
 800a01e:	f025 0520 	bic.w	r5, r5, #32
 800a022:	2a00      	cmp	r2, #0
 800a024:	bfb6      	itet	lt
 800a026:	222d      	movlt	r2, #45	@ 0x2d
 800a028:	2200      	movge	r2, #0
 800a02a:	eeb1 8b40 	vneglt.f64	d8, d0
 800a02e:	2d46      	cmp	r5, #70	@ 0x46
 800a030:	460c      	mov	r4, r1
 800a032:	701a      	strb	r2, [r3, #0]
 800a034:	d004      	beq.n	800a040 <__cvt+0x38>
 800a036:	2d45      	cmp	r5, #69	@ 0x45
 800a038:	d100      	bne.n	800a03c <__cvt+0x34>
 800a03a:	3401      	adds	r4, #1
 800a03c:	2102      	movs	r1, #2
 800a03e:	e000      	b.n	800a042 <__cvt+0x3a>
 800a040:	2103      	movs	r1, #3
 800a042:	ab03      	add	r3, sp, #12
 800a044:	9301      	str	r3, [sp, #4]
 800a046:	ab02      	add	r3, sp, #8
 800a048:	9300      	str	r3, [sp, #0]
 800a04a:	4622      	mov	r2, r4
 800a04c:	4633      	mov	r3, r6
 800a04e:	eeb0 0b48 	vmov.f64	d0, d8
 800a052:	f001 fa21 	bl	800b498 <_dtoa_r>
 800a056:	2d47      	cmp	r5, #71	@ 0x47
 800a058:	d114      	bne.n	800a084 <__cvt+0x7c>
 800a05a:	07fb      	lsls	r3, r7, #31
 800a05c:	d50a      	bpl.n	800a074 <__cvt+0x6c>
 800a05e:	1902      	adds	r2, r0, r4
 800a060:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a068:	bf08      	it	eq
 800a06a:	9203      	streq	r2, [sp, #12]
 800a06c:	2130      	movs	r1, #48	@ 0x30
 800a06e:	9b03      	ldr	r3, [sp, #12]
 800a070:	4293      	cmp	r3, r2
 800a072:	d319      	bcc.n	800a0a8 <__cvt+0xa0>
 800a074:	9b03      	ldr	r3, [sp, #12]
 800a076:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a078:	1a1b      	subs	r3, r3, r0
 800a07a:	6013      	str	r3, [r2, #0]
 800a07c:	b005      	add	sp, #20
 800a07e:	ecbd 8b02 	vpop	{d8}
 800a082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a084:	2d46      	cmp	r5, #70	@ 0x46
 800a086:	eb00 0204 	add.w	r2, r0, r4
 800a08a:	d1e9      	bne.n	800a060 <__cvt+0x58>
 800a08c:	7803      	ldrb	r3, [r0, #0]
 800a08e:	2b30      	cmp	r3, #48	@ 0x30
 800a090:	d107      	bne.n	800a0a2 <__cvt+0x9a>
 800a092:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a09a:	bf1c      	itt	ne
 800a09c:	f1c4 0401 	rsbne	r4, r4, #1
 800a0a0:	6034      	strne	r4, [r6, #0]
 800a0a2:	6833      	ldr	r3, [r6, #0]
 800a0a4:	441a      	add	r2, r3
 800a0a6:	e7db      	b.n	800a060 <__cvt+0x58>
 800a0a8:	1c5c      	adds	r4, r3, #1
 800a0aa:	9403      	str	r4, [sp, #12]
 800a0ac:	7019      	strb	r1, [r3, #0]
 800a0ae:	e7de      	b.n	800a06e <__cvt+0x66>

0800a0b0 <__exponent>:
 800a0b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a0b2:	2900      	cmp	r1, #0
 800a0b4:	bfba      	itte	lt
 800a0b6:	4249      	neglt	r1, r1
 800a0b8:	232d      	movlt	r3, #45	@ 0x2d
 800a0ba:	232b      	movge	r3, #43	@ 0x2b
 800a0bc:	2909      	cmp	r1, #9
 800a0be:	7002      	strb	r2, [r0, #0]
 800a0c0:	7043      	strb	r3, [r0, #1]
 800a0c2:	dd29      	ble.n	800a118 <__exponent+0x68>
 800a0c4:	f10d 0307 	add.w	r3, sp, #7
 800a0c8:	461d      	mov	r5, r3
 800a0ca:	270a      	movs	r7, #10
 800a0cc:	461a      	mov	r2, r3
 800a0ce:	fbb1 f6f7 	udiv	r6, r1, r7
 800a0d2:	fb07 1416 	mls	r4, r7, r6, r1
 800a0d6:	3430      	adds	r4, #48	@ 0x30
 800a0d8:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a0dc:	460c      	mov	r4, r1
 800a0de:	2c63      	cmp	r4, #99	@ 0x63
 800a0e0:	f103 33ff 	add.w	r3, r3, #4294967295
 800a0e4:	4631      	mov	r1, r6
 800a0e6:	dcf1      	bgt.n	800a0cc <__exponent+0x1c>
 800a0e8:	3130      	adds	r1, #48	@ 0x30
 800a0ea:	1e94      	subs	r4, r2, #2
 800a0ec:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a0f0:	1c41      	adds	r1, r0, #1
 800a0f2:	4623      	mov	r3, r4
 800a0f4:	42ab      	cmp	r3, r5
 800a0f6:	d30a      	bcc.n	800a10e <__exponent+0x5e>
 800a0f8:	f10d 0309 	add.w	r3, sp, #9
 800a0fc:	1a9b      	subs	r3, r3, r2
 800a0fe:	42ac      	cmp	r4, r5
 800a100:	bf88      	it	hi
 800a102:	2300      	movhi	r3, #0
 800a104:	3302      	adds	r3, #2
 800a106:	4403      	add	r3, r0
 800a108:	1a18      	subs	r0, r3, r0
 800a10a:	b003      	add	sp, #12
 800a10c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a10e:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a112:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a116:	e7ed      	b.n	800a0f4 <__exponent+0x44>
 800a118:	2330      	movs	r3, #48	@ 0x30
 800a11a:	3130      	adds	r1, #48	@ 0x30
 800a11c:	7083      	strb	r3, [r0, #2]
 800a11e:	70c1      	strb	r1, [r0, #3]
 800a120:	1d03      	adds	r3, r0, #4
 800a122:	e7f1      	b.n	800a108 <__exponent+0x58>
 800a124:	0000      	movs	r0, r0
	...

0800a128 <_printf_float>:
 800a128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a12c:	b08d      	sub	sp, #52	@ 0x34
 800a12e:	460c      	mov	r4, r1
 800a130:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a134:	4616      	mov	r6, r2
 800a136:	461f      	mov	r7, r3
 800a138:	4605      	mov	r5, r0
 800a13a:	f001 f81d 	bl	800b178 <_localeconv_r>
 800a13e:	f8d0 b000 	ldr.w	fp, [r0]
 800a142:	4658      	mov	r0, fp
 800a144:	f7f6 f924 	bl	8000390 <strlen>
 800a148:	2300      	movs	r3, #0
 800a14a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a14c:	f8d8 3000 	ldr.w	r3, [r8]
 800a150:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a154:	6822      	ldr	r2, [r4, #0]
 800a156:	9005      	str	r0, [sp, #20]
 800a158:	3307      	adds	r3, #7
 800a15a:	f023 0307 	bic.w	r3, r3, #7
 800a15e:	f103 0108 	add.w	r1, r3, #8
 800a162:	f8c8 1000 	str.w	r1, [r8]
 800a166:	ed93 0b00 	vldr	d0, [r3]
 800a16a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800a3c8 <_printf_float+0x2a0>
 800a16e:	eeb0 7bc0 	vabs.f64	d7, d0
 800a172:	eeb4 7b46 	vcmp.f64	d7, d6
 800a176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a17a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800a17e:	dd24      	ble.n	800a1ca <_printf_float+0xa2>
 800a180:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a188:	d502      	bpl.n	800a190 <_printf_float+0x68>
 800a18a:	232d      	movs	r3, #45	@ 0x2d
 800a18c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a190:	498f      	ldr	r1, [pc, #572]	@ (800a3d0 <_printf_float+0x2a8>)
 800a192:	4b90      	ldr	r3, [pc, #576]	@ (800a3d4 <_printf_float+0x2ac>)
 800a194:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800a198:	bf94      	ite	ls
 800a19a:	4688      	movls	r8, r1
 800a19c:	4698      	movhi	r8, r3
 800a19e:	f022 0204 	bic.w	r2, r2, #4
 800a1a2:	2303      	movs	r3, #3
 800a1a4:	6123      	str	r3, [r4, #16]
 800a1a6:	6022      	str	r2, [r4, #0]
 800a1a8:	f04f 0a00 	mov.w	sl, #0
 800a1ac:	9700      	str	r7, [sp, #0]
 800a1ae:	4633      	mov	r3, r6
 800a1b0:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a1b2:	4621      	mov	r1, r4
 800a1b4:	4628      	mov	r0, r5
 800a1b6:	f000 f9d1 	bl	800a55c <_printf_common>
 800a1ba:	3001      	adds	r0, #1
 800a1bc:	f040 8089 	bne.w	800a2d2 <_printf_float+0x1aa>
 800a1c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a1c4:	b00d      	add	sp, #52	@ 0x34
 800a1c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1ca:	eeb4 0b40 	vcmp.f64	d0, d0
 800a1ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1d2:	d709      	bvc.n	800a1e8 <_printf_float+0xc0>
 800a1d4:	ee10 3a90 	vmov	r3, s1
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	bfbc      	itt	lt
 800a1dc:	232d      	movlt	r3, #45	@ 0x2d
 800a1de:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a1e2:	497d      	ldr	r1, [pc, #500]	@ (800a3d8 <_printf_float+0x2b0>)
 800a1e4:	4b7d      	ldr	r3, [pc, #500]	@ (800a3dc <_printf_float+0x2b4>)
 800a1e6:	e7d5      	b.n	800a194 <_printf_float+0x6c>
 800a1e8:	6863      	ldr	r3, [r4, #4]
 800a1ea:	1c59      	adds	r1, r3, #1
 800a1ec:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800a1f0:	d139      	bne.n	800a266 <_printf_float+0x13e>
 800a1f2:	2306      	movs	r3, #6
 800a1f4:	6063      	str	r3, [r4, #4]
 800a1f6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	6022      	str	r2, [r4, #0]
 800a1fe:	9303      	str	r3, [sp, #12]
 800a200:	ab0a      	add	r3, sp, #40	@ 0x28
 800a202:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800a206:	ab09      	add	r3, sp, #36	@ 0x24
 800a208:	9300      	str	r3, [sp, #0]
 800a20a:	6861      	ldr	r1, [r4, #4]
 800a20c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a210:	4628      	mov	r0, r5
 800a212:	f7ff fef9 	bl	800a008 <__cvt>
 800a216:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a21a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a21c:	4680      	mov	r8, r0
 800a21e:	d129      	bne.n	800a274 <_printf_float+0x14c>
 800a220:	1cc8      	adds	r0, r1, #3
 800a222:	db02      	blt.n	800a22a <_printf_float+0x102>
 800a224:	6863      	ldr	r3, [r4, #4]
 800a226:	4299      	cmp	r1, r3
 800a228:	dd41      	ble.n	800a2ae <_printf_float+0x186>
 800a22a:	f1a9 0902 	sub.w	r9, r9, #2
 800a22e:	fa5f f989 	uxtb.w	r9, r9
 800a232:	3901      	subs	r1, #1
 800a234:	464a      	mov	r2, r9
 800a236:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a23a:	9109      	str	r1, [sp, #36]	@ 0x24
 800a23c:	f7ff ff38 	bl	800a0b0 <__exponent>
 800a240:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a242:	1813      	adds	r3, r2, r0
 800a244:	2a01      	cmp	r2, #1
 800a246:	4682      	mov	sl, r0
 800a248:	6123      	str	r3, [r4, #16]
 800a24a:	dc02      	bgt.n	800a252 <_printf_float+0x12a>
 800a24c:	6822      	ldr	r2, [r4, #0]
 800a24e:	07d2      	lsls	r2, r2, #31
 800a250:	d501      	bpl.n	800a256 <_printf_float+0x12e>
 800a252:	3301      	adds	r3, #1
 800a254:	6123      	str	r3, [r4, #16]
 800a256:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d0a6      	beq.n	800a1ac <_printf_float+0x84>
 800a25e:	232d      	movs	r3, #45	@ 0x2d
 800a260:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a264:	e7a2      	b.n	800a1ac <_printf_float+0x84>
 800a266:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a26a:	d1c4      	bne.n	800a1f6 <_printf_float+0xce>
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d1c2      	bne.n	800a1f6 <_printf_float+0xce>
 800a270:	2301      	movs	r3, #1
 800a272:	e7bf      	b.n	800a1f4 <_printf_float+0xcc>
 800a274:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800a278:	d9db      	bls.n	800a232 <_printf_float+0x10a>
 800a27a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800a27e:	d118      	bne.n	800a2b2 <_printf_float+0x18a>
 800a280:	2900      	cmp	r1, #0
 800a282:	6863      	ldr	r3, [r4, #4]
 800a284:	dd0b      	ble.n	800a29e <_printf_float+0x176>
 800a286:	6121      	str	r1, [r4, #16]
 800a288:	b913      	cbnz	r3, 800a290 <_printf_float+0x168>
 800a28a:	6822      	ldr	r2, [r4, #0]
 800a28c:	07d0      	lsls	r0, r2, #31
 800a28e:	d502      	bpl.n	800a296 <_printf_float+0x16e>
 800a290:	3301      	adds	r3, #1
 800a292:	440b      	add	r3, r1
 800a294:	6123      	str	r3, [r4, #16]
 800a296:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a298:	f04f 0a00 	mov.w	sl, #0
 800a29c:	e7db      	b.n	800a256 <_printf_float+0x12e>
 800a29e:	b913      	cbnz	r3, 800a2a6 <_printf_float+0x17e>
 800a2a0:	6822      	ldr	r2, [r4, #0]
 800a2a2:	07d2      	lsls	r2, r2, #31
 800a2a4:	d501      	bpl.n	800a2aa <_printf_float+0x182>
 800a2a6:	3302      	adds	r3, #2
 800a2a8:	e7f4      	b.n	800a294 <_printf_float+0x16c>
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	e7f2      	b.n	800a294 <_printf_float+0x16c>
 800a2ae:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800a2b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a2b4:	4299      	cmp	r1, r3
 800a2b6:	db05      	blt.n	800a2c4 <_printf_float+0x19c>
 800a2b8:	6823      	ldr	r3, [r4, #0]
 800a2ba:	6121      	str	r1, [r4, #16]
 800a2bc:	07d8      	lsls	r0, r3, #31
 800a2be:	d5ea      	bpl.n	800a296 <_printf_float+0x16e>
 800a2c0:	1c4b      	adds	r3, r1, #1
 800a2c2:	e7e7      	b.n	800a294 <_printf_float+0x16c>
 800a2c4:	2900      	cmp	r1, #0
 800a2c6:	bfd4      	ite	le
 800a2c8:	f1c1 0202 	rsble	r2, r1, #2
 800a2cc:	2201      	movgt	r2, #1
 800a2ce:	4413      	add	r3, r2
 800a2d0:	e7e0      	b.n	800a294 <_printf_float+0x16c>
 800a2d2:	6823      	ldr	r3, [r4, #0]
 800a2d4:	055a      	lsls	r2, r3, #21
 800a2d6:	d407      	bmi.n	800a2e8 <_printf_float+0x1c0>
 800a2d8:	6923      	ldr	r3, [r4, #16]
 800a2da:	4642      	mov	r2, r8
 800a2dc:	4631      	mov	r1, r6
 800a2de:	4628      	mov	r0, r5
 800a2e0:	47b8      	blx	r7
 800a2e2:	3001      	adds	r0, #1
 800a2e4:	d12a      	bne.n	800a33c <_printf_float+0x214>
 800a2e6:	e76b      	b.n	800a1c0 <_printf_float+0x98>
 800a2e8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800a2ec:	f240 80e0 	bls.w	800a4b0 <_printf_float+0x388>
 800a2f0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800a2f4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a2f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2fc:	d133      	bne.n	800a366 <_printf_float+0x23e>
 800a2fe:	4a38      	ldr	r2, [pc, #224]	@ (800a3e0 <_printf_float+0x2b8>)
 800a300:	2301      	movs	r3, #1
 800a302:	4631      	mov	r1, r6
 800a304:	4628      	mov	r0, r5
 800a306:	47b8      	blx	r7
 800a308:	3001      	adds	r0, #1
 800a30a:	f43f af59 	beq.w	800a1c0 <_printf_float+0x98>
 800a30e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a312:	4543      	cmp	r3, r8
 800a314:	db02      	blt.n	800a31c <_printf_float+0x1f4>
 800a316:	6823      	ldr	r3, [r4, #0]
 800a318:	07d8      	lsls	r0, r3, #31
 800a31a:	d50f      	bpl.n	800a33c <_printf_float+0x214>
 800a31c:	9b05      	ldr	r3, [sp, #20]
 800a31e:	465a      	mov	r2, fp
 800a320:	4631      	mov	r1, r6
 800a322:	4628      	mov	r0, r5
 800a324:	47b8      	blx	r7
 800a326:	3001      	adds	r0, #1
 800a328:	f43f af4a 	beq.w	800a1c0 <_printf_float+0x98>
 800a32c:	f04f 0900 	mov.w	r9, #0
 800a330:	f108 38ff 	add.w	r8, r8, #4294967295
 800a334:	f104 0a1a 	add.w	sl, r4, #26
 800a338:	45c8      	cmp	r8, r9
 800a33a:	dc09      	bgt.n	800a350 <_printf_float+0x228>
 800a33c:	6823      	ldr	r3, [r4, #0]
 800a33e:	079b      	lsls	r3, r3, #30
 800a340:	f100 8107 	bmi.w	800a552 <_printf_float+0x42a>
 800a344:	68e0      	ldr	r0, [r4, #12]
 800a346:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a348:	4298      	cmp	r0, r3
 800a34a:	bfb8      	it	lt
 800a34c:	4618      	movlt	r0, r3
 800a34e:	e739      	b.n	800a1c4 <_printf_float+0x9c>
 800a350:	2301      	movs	r3, #1
 800a352:	4652      	mov	r2, sl
 800a354:	4631      	mov	r1, r6
 800a356:	4628      	mov	r0, r5
 800a358:	47b8      	blx	r7
 800a35a:	3001      	adds	r0, #1
 800a35c:	f43f af30 	beq.w	800a1c0 <_printf_float+0x98>
 800a360:	f109 0901 	add.w	r9, r9, #1
 800a364:	e7e8      	b.n	800a338 <_printf_float+0x210>
 800a366:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a368:	2b00      	cmp	r3, #0
 800a36a:	dc3b      	bgt.n	800a3e4 <_printf_float+0x2bc>
 800a36c:	4a1c      	ldr	r2, [pc, #112]	@ (800a3e0 <_printf_float+0x2b8>)
 800a36e:	2301      	movs	r3, #1
 800a370:	4631      	mov	r1, r6
 800a372:	4628      	mov	r0, r5
 800a374:	47b8      	blx	r7
 800a376:	3001      	adds	r0, #1
 800a378:	f43f af22 	beq.w	800a1c0 <_printf_float+0x98>
 800a37c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a380:	ea59 0303 	orrs.w	r3, r9, r3
 800a384:	d102      	bne.n	800a38c <_printf_float+0x264>
 800a386:	6823      	ldr	r3, [r4, #0]
 800a388:	07d9      	lsls	r1, r3, #31
 800a38a:	d5d7      	bpl.n	800a33c <_printf_float+0x214>
 800a38c:	9b05      	ldr	r3, [sp, #20]
 800a38e:	465a      	mov	r2, fp
 800a390:	4631      	mov	r1, r6
 800a392:	4628      	mov	r0, r5
 800a394:	47b8      	blx	r7
 800a396:	3001      	adds	r0, #1
 800a398:	f43f af12 	beq.w	800a1c0 <_printf_float+0x98>
 800a39c:	f04f 0a00 	mov.w	sl, #0
 800a3a0:	f104 0b1a 	add.w	fp, r4, #26
 800a3a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3a6:	425b      	negs	r3, r3
 800a3a8:	4553      	cmp	r3, sl
 800a3aa:	dc01      	bgt.n	800a3b0 <_printf_float+0x288>
 800a3ac:	464b      	mov	r3, r9
 800a3ae:	e794      	b.n	800a2da <_printf_float+0x1b2>
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	465a      	mov	r2, fp
 800a3b4:	4631      	mov	r1, r6
 800a3b6:	4628      	mov	r0, r5
 800a3b8:	47b8      	blx	r7
 800a3ba:	3001      	adds	r0, #1
 800a3bc:	f43f af00 	beq.w	800a1c0 <_printf_float+0x98>
 800a3c0:	f10a 0a01 	add.w	sl, sl, #1
 800a3c4:	e7ee      	b.n	800a3a4 <_printf_float+0x27c>
 800a3c6:	bf00      	nop
 800a3c8:	ffffffff 	.word	0xffffffff
 800a3cc:	7fefffff 	.word	0x7fefffff
 800a3d0:	0800e61c 	.word	0x0800e61c
 800a3d4:	0800e620 	.word	0x0800e620
 800a3d8:	0800e624 	.word	0x0800e624
 800a3dc:	0800e628 	.word	0x0800e628
 800a3e0:	0800e62c 	.word	0x0800e62c
 800a3e4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a3e6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a3ea:	4553      	cmp	r3, sl
 800a3ec:	bfa8      	it	ge
 800a3ee:	4653      	movge	r3, sl
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	4699      	mov	r9, r3
 800a3f4:	dc37      	bgt.n	800a466 <_printf_float+0x33e>
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	9307      	str	r3, [sp, #28]
 800a3fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a3fe:	f104 021a 	add.w	r2, r4, #26
 800a402:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a404:	9907      	ldr	r1, [sp, #28]
 800a406:	9306      	str	r3, [sp, #24]
 800a408:	eba3 0309 	sub.w	r3, r3, r9
 800a40c:	428b      	cmp	r3, r1
 800a40e:	dc31      	bgt.n	800a474 <_printf_float+0x34c>
 800a410:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a412:	459a      	cmp	sl, r3
 800a414:	dc3b      	bgt.n	800a48e <_printf_float+0x366>
 800a416:	6823      	ldr	r3, [r4, #0]
 800a418:	07da      	lsls	r2, r3, #31
 800a41a:	d438      	bmi.n	800a48e <_printf_float+0x366>
 800a41c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a41e:	ebaa 0903 	sub.w	r9, sl, r3
 800a422:	9b06      	ldr	r3, [sp, #24]
 800a424:	ebaa 0303 	sub.w	r3, sl, r3
 800a428:	4599      	cmp	r9, r3
 800a42a:	bfa8      	it	ge
 800a42c:	4699      	movge	r9, r3
 800a42e:	f1b9 0f00 	cmp.w	r9, #0
 800a432:	dc34      	bgt.n	800a49e <_printf_float+0x376>
 800a434:	f04f 0800 	mov.w	r8, #0
 800a438:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a43c:	f104 0b1a 	add.w	fp, r4, #26
 800a440:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a442:	ebaa 0303 	sub.w	r3, sl, r3
 800a446:	eba3 0309 	sub.w	r3, r3, r9
 800a44a:	4543      	cmp	r3, r8
 800a44c:	f77f af76 	ble.w	800a33c <_printf_float+0x214>
 800a450:	2301      	movs	r3, #1
 800a452:	465a      	mov	r2, fp
 800a454:	4631      	mov	r1, r6
 800a456:	4628      	mov	r0, r5
 800a458:	47b8      	blx	r7
 800a45a:	3001      	adds	r0, #1
 800a45c:	f43f aeb0 	beq.w	800a1c0 <_printf_float+0x98>
 800a460:	f108 0801 	add.w	r8, r8, #1
 800a464:	e7ec      	b.n	800a440 <_printf_float+0x318>
 800a466:	4642      	mov	r2, r8
 800a468:	4631      	mov	r1, r6
 800a46a:	4628      	mov	r0, r5
 800a46c:	47b8      	blx	r7
 800a46e:	3001      	adds	r0, #1
 800a470:	d1c1      	bne.n	800a3f6 <_printf_float+0x2ce>
 800a472:	e6a5      	b.n	800a1c0 <_printf_float+0x98>
 800a474:	2301      	movs	r3, #1
 800a476:	4631      	mov	r1, r6
 800a478:	4628      	mov	r0, r5
 800a47a:	9206      	str	r2, [sp, #24]
 800a47c:	47b8      	blx	r7
 800a47e:	3001      	adds	r0, #1
 800a480:	f43f ae9e 	beq.w	800a1c0 <_printf_float+0x98>
 800a484:	9b07      	ldr	r3, [sp, #28]
 800a486:	9a06      	ldr	r2, [sp, #24]
 800a488:	3301      	adds	r3, #1
 800a48a:	9307      	str	r3, [sp, #28]
 800a48c:	e7b9      	b.n	800a402 <_printf_float+0x2da>
 800a48e:	9b05      	ldr	r3, [sp, #20]
 800a490:	465a      	mov	r2, fp
 800a492:	4631      	mov	r1, r6
 800a494:	4628      	mov	r0, r5
 800a496:	47b8      	blx	r7
 800a498:	3001      	adds	r0, #1
 800a49a:	d1bf      	bne.n	800a41c <_printf_float+0x2f4>
 800a49c:	e690      	b.n	800a1c0 <_printf_float+0x98>
 800a49e:	9a06      	ldr	r2, [sp, #24]
 800a4a0:	464b      	mov	r3, r9
 800a4a2:	4442      	add	r2, r8
 800a4a4:	4631      	mov	r1, r6
 800a4a6:	4628      	mov	r0, r5
 800a4a8:	47b8      	blx	r7
 800a4aa:	3001      	adds	r0, #1
 800a4ac:	d1c2      	bne.n	800a434 <_printf_float+0x30c>
 800a4ae:	e687      	b.n	800a1c0 <_printf_float+0x98>
 800a4b0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800a4b4:	f1b9 0f01 	cmp.w	r9, #1
 800a4b8:	dc01      	bgt.n	800a4be <_printf_float+0x396>
 800a4ba:	07db      	lsls	r3, r3, #31
 800a4bc:	d536      	bpl.n	800a52c <_printf_float+0x404>
 800a4be:	2301      	movs	r3, #1
 800a4c0:	4642      	mov	r2, r8
 800a4c2:	4631      	mov	r1, r6
 800a4c4:	4628      	mov	r0, r5
 800a4c6:	47b8      	blx	r7
 800a4c8:	3001      	adds	r0, #1
 800a4ca:	f43f ae79 	beq.w	800a1c0 <_printf_float+0x98>
 800a4ce:	9b05      	ldr	r3, [sp, #20]
 800a4d0:	465a      	mov	r2, fp
 800a4d2:	4631      	mov	r1, r6
 800a4d4:	4628      	mov	r0, r5
 800a4d6:	47b8      	blx	r7
 800a4d8:	3001      	adds	r0, #1
 800a4da:	f43f ae71 	beq.w	800a1c0 <_printf_float+0x98>
 800a4de:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800a4e2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a4e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4ea:	f109 39ff 	add.w	r9, r9, #4294967295
 800a4ee:	d018      	beq.n	800a522 <_printf_float+0x3fa>
 800a4f0:	464b      	mov	r3, r9
 800a4f2:	f108 0201 	add.w	r2, r8, #1
 800a4f6:	4631      	mov	r1, r6
 800a4f8:	4628      	mov	r0, r5
 800a4fa:	47b8      	blx	r7
 800a4fc:	3001      	adds	r0, #1
 800a4fe:	d10c      	bne.n	800a51a <_printf_float+0x3f2>
 800a500:	e65e      	b.n	800a1c0 <_printf_float+0x98>
 800a502:	2301      	movs	r3, #1
 800a504:	465a      	mov	r2, fp
 800a506:	4631      	mov	r1, r6
 800a508:	4628      	mov	r0, r5
 800a50a:	47b8      	blx	r7
 800a50c:	3001      	adds	r0, #1
 800a50e:	f43f ae57 	beq.w	800a1c0 <_printf_float+0x98>
 800a512:	f108 0801 	add.w	r8, r8, #1
 800a516:	45c8      	cmp	r8, r9
 800a518:	dbf3      	blt.n	800a502 <_printf_float+0x3da>
 800a51a:	4653      	mov	r3, sl
 800a51c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a520:	e6dc      	b.n	800a2dc <_printf_float+0x1b4>
 800a522:	f04f 0800 	mov.w	r8, #0
 800a526:	f104 0b1a 	add.w	fp, r4, #26
 800a52a:	e7f4      	b.n	800a516 <_printf_float+0x3ee>
 800a52c:	2301      	movs	r3, #1
 800a52e:	4642      	mov	r2, r8
 800a530:	e7e1      	b.n	800a4f6 <_printf_float+0x3ce>
 800a532:	2301      	movs	r3, #1
 800a534:	464a      	mov	r2, r9
 800a536:	4631      	mov	r1, r6
 800a538:	4628      	mov	r0, r5
 800a53a:	47b8      	blx	r7
 800a53c:	3001      	adds	r0, #1
 800a53e:	f43f ae3f 	beq.w	800a1c0 <_printf_float+0x98>
 800a542:	f108 0801 	add.w	r8, r8, #1
 800a546:	68e3      	ldr	r3, [r4, #12]
 800a548:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a54a:	1a5b      	subs	r3, r3, r1
 800a54c:	4543      	cmp	r3, r8
 800a54e:	dcf0      	bgt.n	800a532 <_printf_float+0x40a>
 800a550:	e6f8      	b.n	800a344 <_printf_float+0x21c>
 800a552:	f04f 0800 	mov.w	r8, #0
 800a556:	f104 0919 	add.w	r9, r4, #25
 800a55a:	e7f4      	b.n	800a546 <_printf_float+0x41e>

0800a55c <_printf_common>:
 800a55c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a560:	4616      	mov	r6, r2
 800a562:	4698      	mov	r8, r3
 800a564:	688a      	ldr	r2, [r1, #8]
 800a566:	690b      	ldr	r3, [r1, #16]
 800a568:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a56c:	4293      	cmp	r3, r2
 800a56e:	bfb8      	it	lt
 800a570:	4613      	movlt	r3, r2
 800a572:	6033      	str	r3, [r6, #0]
 800a574:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a578:	4607      	mov	r7, r0
 800a57a:	460c      	mov	r4, r1
 800a57c:	b10a      	cbz	r2, 800a582 <_printf_common+0x26>
 800a57e:	3301      	adds	r3, #1
 800a580:	6033      	str	r3, [r6, #0]
 800a582:	6823      	ldr	r3, [r4, #0]
 800a584:	0699      	lsls	r1, r3, #26
 800a586:	bf42      	ittt	mi
 800a588:	6833      	ldrmi	r3, [r6, #0]
 800a58a:	3302      	addmi	r3, #2
 800a58c:	6033      	strmi	r3, [r6, #0]
 800a58e:	6825      	ldr	r5, [r4, #0]
 800a590:	f015 0506 	ands.w	r5, r5, #6
 800a594:	d106      	bne.n	800a5a4 <_printf_common+0x48>
 800a596:	f104 0a19 	add.w	sl, r4, #25
 800a59a:	68e3      	ldr	r3, [r4, #12]
 800a59c:	6832      	ldr	r2, [r6, #0]
 800a59e:	1a9b      	subs	r3, r3, r2
 800a5a0:	42ab      	cmp	r3, r5
 800a5a2:	dc26      	bgt.n	800a5f2 <_printf_common+0x96>
 800a5a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a5a8:	6822      	ldr	r2, [r4, #0]
 800a5aa:	3b00      	subs	r3, #0
 800a5ac:	bf18      	it	ne
 800a5ae:	2301      	movne	r3, #1
 800a5b0:	0692      	lsls	r2, r2, #26
 800a5b2:	d42b      	bmi.n	800a60c <_printf_common+0xb0>
 800a5b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a5b8:	4641      	mov	r1, r8
 800a5ba:	4638      	mov	r0, r7
 800a5bc:	47c8      	blx	r9
 800a5be:	3001      	adds	r0, #1
 800a5c0:	d01e      	beq.n	800a600 <_printf_common+0xa4>
 800a5c2:	6823      	ldr	r3, [r4, #0]
 800a5c4:	6922      	ldr	r2, [r4, #16]
 800a5c6:	f003 0306 	and.w	r3, r3, #6
 800a5ca:	2b04      	cmp	r3, #4
 800a5cc:	bf02      	ittt	eq
 800a5ce:	68e5      	ldreq	r5, [r4, #12]
 800a5d0:	6833      	ldreq	r3, [r6, #0]
 800a5d2:	1aed      	subeq	r5, r5, r3
 800a5d4:	68a3      	ldr	r3, [r4, #8]
 800a5d6:	bf0c      	ite	eq
 800a5d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a5dc:	2500      	movne	r5, #0
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	bfc4      	itt	gt
 800a5e2:	1a9b      	subgt	r3, r3, r2
 800a5e4:	18ed      	addgt	r5, r5, r3
 800a5e6:	2600      	movs	r6, #0
 800a5e8:	341a      	adds	r4, #26
 800a5ea:	42b5      	cmp	r5, r6
 800a5ec:	d11a      	bne.n	800a624 <_printf_common+0xc8>
 800a5ee:	2000      	movs	r0, #0
 800a5f0:	e008      	b.n	800a604 <_printf_common+0xa8>
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	4652      	mov	r2, sl
 800a5f6:	4641      	mov	r1, r8
 800a5f8:	4638      	mov	r0, r7
 800a5fa:	47c8      	blx	r9
 800a5fc:	3001      	adds	r0, #1
 800a5fe:	d103      	bne.n	800a608 <_printf_common+0xac>
 800a600:	f04f 30ff 	mov.w	r0, #4294967295
 800a604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a608:	3501      	adds	r5, #1
 800a60a:	e7c6      	b.n	800a59a <_printf_common+0x3e>
 800a60c:	18e1      	adds	r1, r4, r3
 800a60e:	1c5a      	adds	r2, r3, #1
 800a610:	2030      	movs	r0, #48	@ 0x30
 800a612:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a616:	4422      	add	r2, r4
 800a618:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a61c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a620:	3302      	adds	r3, #2
 800a622:	e7c7      	b.n	800a5b4 <_printf_common+0x58>
 800a624:	2301      	movs	r3, #1
 800a626:	4622      	mov	r2, r4
 800a628:	4641      	mov	r1, r8
 800a62a:	4638      	mov	r0, r7
 800a62c:	47c8      	blx	r9
 800a62e:	3001      	adds	r0, #1
 800a630:	d0e6      	beq.n	800a600 <_printf_common+0xa4>
 800a632:	3601      	adds	r6, #1
 800a634:	e7d9      	b.n	800a5ea <_printf_common+0x8e>
	...

0800a638 <_printf_i>:
 800a638:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a63c:	7e0f      	ldrb	r7, [r1, #24]
 800a63e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a640:	2f78      	cmp	r7, #120	@ 0x78
 800a642:	4691      	mov	r9, r2
 800a644:	4680      	mov	r8, r0
 800a646:	460c      	mov	r4, r1
 800a648:	469a      	mov	sl, r3
 800a64a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a64e:	d807      	bhi.n	800a660 <_printf_i+0x28>
 800a650:	2f62      	cmp	r7, #98	@ 0x62
 800a652:	d80a      	bhi.n	800a66a <_printf_i+0x32>
 800a654:	2f00      	cmp	r7, #0
 800a656:	f000 80d2 	beq.w	800a7fe <_printf_i+0x1c6>
 800a65a:	2f58      	cmp	r7, #88	@ 0x58
 800a65c:	f000 80b9 	beq.w	800a7d2 <_printf_i+0x19a>
 800a660:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a664:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a668:	e03a      	b.n	800a6e0 <_printf_i+0xa8>
 800a66a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a66e:	2b15      	cmp	r3, #21
 800a670:	d8f6      	bhi.n	800a660 <_printf_i+0x28>
 800a672:	a101      	add	r1, pc, #4	@ (adr r1, 800a678 <_printf_i+0x40>)
 800a674:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a678:	0800a6d1 	.word	0x0800a6d1
 800a67c:	0800a6e5 	.word	0x0800a6e5
 800a680:	0800a661 	.word	0x0800a661
 800a684:	0800a661 	.word	0x0800a661
 800a688:	0800a661 	.word	0x0800a661
 800a68c:	0800a661 	.word	0x0800a661
 800a690:	0800a6e5 	.word	0x0800a6e5
 800a694:	0800a661 	.word	0x0800a661
 800a698:	0800a661 	.word	0x0800a661
 800a69c:	0800a661 	.word	0x0800a661
 800a6a0:	0800a661 	.word	0x0800a661
 800a6a4:	0800a7e5 	.word	0x0800a7e5
 800a6a8:	0800a70f 	.word	0x0800a70f
 800a6ac:	0800a79f 	.word	0x0800a79f
 800a6b0:	0800a661 	.word	0x0800a661
 800a6b4:	0800a661 	.word	0x0800a661
 800a6b8:	0800a807 	.word	0x0800a807
 800a6bc:	0800a661 	.word	0x0800a661
 800a6c0:	0800a70f 	.word	0x0800a70f
 800a6c4:	0800a661 	.word	0x0800a661
 800a6c8:	0800a661 	.word	0x0800a661
 800a6cc:	0800a7a7 	.word	0x0800a7a7
 800a6d0:	6833      	ldr	r3, [r6, #0]
 800a6d2:	1d1a      	adds	r2, r3, #4
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	6032      	str	r2, [r6, #0]
 800a6d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a6dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	e09d      	b.n	800a820 <_printf_i+0x1e8>
 800a6e4:	6833      	ldr	r3, [r6, #0]
 800a6e6:	6820      	ldr	r0, [r4, #0]
 800a6e8:	1d19      	adds	r1, r3, #4
 800a6ea:	6031      	str	r1, [r6, #0]
 800a6ec:	0606      	lsls	r6, r0, #24
 800a6ee:	d501      	bpl.n	800a6f4 <_printf_i+0xbc>
 800a6f0:	681d      	ldr	r5, [r3, #0]
 800a6f2:	e003      	b.n	800a6fc <_printf_i+0xc4>
 800a6f4:	0645      	lsls	r5, r0, #25
 800a6f6:	d5fb      	bpl.n	800a6f0 <_printf_i+0xb8>
 800a6f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a6fc:	2d00      	cmp	r5, #0
 800a6fe:	da03      	bge.n	800a708 <_printf_i+0xd0>
 800a700:	232d      	movs	r3, #45	@ 0x2d
 800a702:	426d      	negs	r5, r5
 800a704:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a708:	4859      	ldr	r0, [pc, #356]	@ (800a870 <_printf_i+0x238>)
 800a70a:	230a      	movs	r3, #10
 800a70c:	e011      	b.n	800a732 <_printf_i+0xfa>
 800a70e:	6821      	ldr	r1, [r4, #0]
 800a710:	6833      	ldr	r3, [r6, #0]
 800a712:	0608      	lsls	r0, r1, #24
 800a714:	f853 5b04 	ldr.w	r5, [r3], #4
 800a718:	d402      	bmi.n	800a720 <_printf_i+0xe8>
 800a71a:	0649      	lsls	r1, r1, #25
 800a71c:	bf48      	it	mi
 800a71e:	b2ad      	uxthmi	r5, r5
 800a720:	2f6f      	cmp	r7, #111	@ 0x6f
 800a722:	4853      	ldr	r0, [pc, #332]	@ (800a870 <_printf_i+0x238>)
 800a724:	6033      	str	r3, [r6, #0]
 800a726:	bf14      	ite	ne
 800a728:	230a      	movne	r3, #10
 800a72a:	2308      	moveq	r3, #8
 800a72c:	2100      	movs	r1, #0
 800a72e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a732:	6866      	ldr	r6, [r4, #4]
 800a734:	60a6      	str	r6, [r4, #8]
 800a736:	2e00      	cmp	r6, #0
 800a738:	bfa2      	ittt	ge
 800a73a:	6821      	ldrge	r1, [r4, #0]
 800a73c:	f021 0104 	bicge.w	r1, r1, #4
 800a740:	6021      	strge	r1, [r4, #0]
 800a742:	b90d      	cbnz	r5, 800a748 <_printf_i+0x110>
 800a744:	2e00      	cmp	r6, #0
 800a746:	d04b      	beq.n	800a7e0 <_printf_i+0x1a8>
 800a748:	4616      	mov	r6, r2
 800a74a:	fbb5 f1f3 	udiv	r1, r5, r3
 800a74e:	fb03 5711 	mls	r7, r3, r1, r5
 800a752:	5dc7      	ldrb	r7, [r0, r7]
 800a754:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a758:	462f      	mov	r7, r5
 800a75a:	42bb      	cmp	r3, r7
 800a75c:	460d      	mov	r5, r1
 800a75e:	d9f4      	bls.n	800a74a <_printf_i+0x112>
 800a760:	2b08      	cmp	r3, #8
 800a762:	d10b      	bne.n	800a77c <_printf_i+0x144>
 800a764:	6823      	ldr	r3, [r4, #0]
 800a766:	07df      	lsls	r7, r3, #31
 800a768:	d508      	bpl.n	800a77c <_printf_i+0x144>
 800a76a:	6923      	ldr	r3, [r4, #16]
 800a76c:	6861      	ldr	r1, [r4, #4]
 800a76e:	4299      	cmp	r1, r3
 800a770:	bfde      	ittt	le
 800a772:	2330      	movle	r3, #48	@ 0x30
 800a774:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a778:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a77c:	1b92      	subs	r2, r2, r6
 800a77e:	6122      	str	r2, [r4, #16]
 800a780:	f8cd a000 	str.w	sl, [sp]
 800a784:	464b      	mov	r3, r9
 800a786:	aa03      	add	r2, sp, #12
 800a788:	4621      	mov	r1, r4
 800a78a:	4640      	mov	r0, r8
 800a78c:	f7ff fee6 	bl	800a55c <_printf_common>
 800a790:	3001      	adds	r0, #1
 800a792:	d14a      	bne.n	800a82a <_printf_i+0x1f2>
 800a794:	f04f 30ff 	mov.w	r0, #4294967295
 800a798:	b004      	add	sp, #16
 800a79a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a79e:	6823      	ldr	r3, [r4, #0]
 800a7a0:	f043 0320 	orr.w	r3, r3, #32
 800a7a4:	6023      	str	r3, [r4, #0]
 800a7a6:	4833      	ldr	r0, [pc, #204]	@ (800a874 <_printf_i+0x23c>)
 800a7a8:	2778      	movs	r7, #120	@ 0x78
 800a7aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a7ae:	6823      	ldr	r3, [r4, #0]
 800a7b0:	6831      	ldr	r1, [r6, #0]
 800a7b2:	061f      	lsls	r7, r3, #24
 800a7b4:	f851 5b04 	ldr.w	r5, [r1], #4
 800a7b8:	d402      	bmi.n	800a7c0 <_printf_i+0x188>
 800a7ba:	065f      	lsls	r7, r3, #25
 800a7bc:	bf48      	it	mi
 800a7be:	b2ad      	uxthmi	r5, r5
 800a7c0:	6031      	str	r1, [r6, #0]
 800a7c2:	07d9      	lsls	r1, r3, #31
 800a7c4:	bf44      	itt	mi
 800a7c6:	f043 0320 	orrmi.w	r3, r3, #32
 800a7ca:	6023      	strmi	r3, [r4, #0]
 800a7cc:	b11d      	cbz	r5, 800a7d6 <_printf_i+0x19e>
 800a7ce:	2310      	movs	r3, #16
 800a7d0:	e7ac      	b.n	800a72c <_printf_i+0xf4>
 800a7d2:	4827      	ldr	r0, [pc, #156]	@ (800a870 <_printf_i+0x238>)
 800a7d4:	e7e9      	b.n	800a7aa <_printf_i+0x172>
 800a7d6:	6823      	ldr	r3, [r4, #0]
 800a7d8:	f023 0320 	bic.w	r3, r3, #32
 800a7dc:	6023      	str	r3, [r4, #0]
 800a7de:	e7f6      	b.n	800a7ce <_printf_i+0x196>
 800a7e0:	4616      	mov	r6, r2
 800a7e2:	e7bd      	b.n	800a760 <_printf_i+0x128>
 800a7e4:	6833      	ldr	r3, [r6, #0]
 800a7e6:	6825      	ldr	r5, [r4, #0]
 800a7e8:	6961      	ldr	r1, [r4, #20]
 800a7ea:	1d18      	adds	r0, r3, #4
 800a7ec:	6030      	str	r0, [r6, #0]
 800a7ee:	062e      	lsls	r6, r5, #24
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	d501      	bpl.n	800a7f8 <_printf_i+0x1c0>
 800a7f4:	6019      	str	r1, [r3, #0]
 800a7f6:	e002      	b.n	800a7fe <_printf_i+0x1c6>
 800a7f8:	0668      	lsls	r0, r5, #25
 800a7fa:	d5fb      	bpl.n	800a7f4 <_printf_i+0x1bc>
 800a7fc:	8019      	strh	r1, [r3, #0]
 800a7fe:	2300      	movs	r3, #0
 800a800:	6123      	str	r3, [r4, #16]
 800a802:	4616      	mov	r6, r2
 800a804:	e7bc      	b.n	800a780 <_printf_i+0x148>
 800a806:	6833      	ldr	r3, [r6, #0]
 800a808:	1d1a      	adds	r2, r3, #4
 800a80a:	6032      	str	r2, [r6, #0]
 800a80c:	681e      	ldr	r6, [r3, #0]
 800a80e:	6862      	ldr	r2, [r4, #4]
 800a810:	2100      	movs	r1, #0
 800a812:	4630      	mov	r0, r6
 800a814:	f7f5 fd6c 	bl	80002f0 <memchr>
 800a818:	b108      	cbz	r0, 800a81e <_printf_i+0x1e6>
 800a81a:	1b80      	subs	r0, r0, r6
 800a81c:	6060      	str	r0, [r4, #4]
 800a81e:	6863      	ldr	r3, [r4, #4]
 800a820:	6123      	str	r3, [r4, #16]
 800a822:	2300      	movs	r3, #0
 800a824:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a828:	e7aa      	b.n	800a780 <_printf_i+0x148>
 800a82a:	6923      	ldr	r3, [r4, #16]
 800a82c:	4632      	mov	r2, r6
 800a82e:	4649      	mov	r1, r9
 800a830:	4640      	mov	r0, r8
 800a832:	47d0      	blx	sl
 800a834:	3001      	adds	r0, #1
 800a836:	d0ad      	beq.n	800a794 <_printf_i+0x15c>
 800a838:	6823      	ldr	r3, [r4, #0]
 800a83a:	079b      	lsls	r3, r3, #30
 800a83c:	d413      	bmi.n	800a866 <_printf_i+0x22e>
 800a83e:	68e0      	ldr	r0, [r4, #12]
 800a840:	9b03      	ldr	r3, [sp, #12]
 800a842:	4298      	cmp	r0, r3
 800a844:	bfb8      	it	lt
 800a846:	4618      	movlt	r0, r3
 800a848:	e7a6      	b.n	800a798 <_printf_i+0x160>
 800a84a:	2301      	movs	r3, #1
 800a84c:	4632      	mov	r2, r6
 800a84e:	4649      	mov	r1, r9
 800a850:	4640      	mov	r0, r8
 800a852:	47d0      	blx	sl
 800a854:	3001      	adds	r0, #1
 800a856:	d09d      	beq.n	800a794 <_printf_i+0x15c>
 800a858:	3501      	adds	r5, #1
 800a85a:	68e3      	ldr	r3, [r4, #12]
 800a85c:	9903      	ldr	r1, [sp, #12]
 800a85e:	1a5b      	subs	r3, r3, r1
 800a860:	42ab      	cmp	r3, r5
 800a862:	dcf2      	bgt.n	800a84a <_printf_i+0x212>
 800a864:	e7eb      	b.n	800a83e <_printf_i+0x206>
 800a866:	2500      	movs	r5, #0
 800a868:	f104 0619 	add.w	r6, r4, #25
 800a86c:	e7f5      	b.n	800a85a <_printf_i+0x222>
 800a86e:	bf00      	nop
 800a870:	0800e62e 	.word	0x0800e62e
 800a874:	0800e63f 	.word	0x0800e63f

0800a878 <_scanf_float>:
 800a878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a87c:	b087      	sub	sp, #28
 800a87e:	4617      	mov	r7, r2
 800a880:	9303      	str	r3, [sp, #12]
 800a882:	688b      	ldr	r3, [r1, #8]
 800a884:	1e5a      	subs	r2, r3, #1
 800a886:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a88a:	bf81      	itttt	hi
 800a88c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a890:	eb03 0b05 	addhi.w	fp, r3, r5
 800a894:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a898:	608b      	strhi	r3, [r1, #8]
 800a89a:	680b      	ldr	r3, [r1, #0]
 800a89c:	460a      	mov	r2, r1
 800a89e:	f04f 0500 	mov.w	r5, #0
 800a8a2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a8a6:	f842 3b1c 	str.w	r3, [r2], #28
 800a8aa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a8ae:	4680      	mov	r8, r0
 800a8b0:	460c      	mov	r4, r1
 800a8b2:	bf98      	it	ls
 800a8b4:	f04f 0b00 	movls.w	fp, #0
 800a8b8:	9201      	str	r2, [sp, #4]
 800a8ba:	4616      	mov	r6, r2
 800a8bc:	46aa      	mov	sl, r5
 800a8be:	46a9      	mov	r9, r5
 800a8c0:	9502      	str	r5, [sp, #8]
 800a8c2:	68a2      	ldr	r2, [r4, #8]
 800a8c4:	b152      	cbz	r2, 800a8dc <_scanf_float+0x64>
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	781b      	ldrb	r3, [r3, #0]
 800a8ca:	2b4e      	cmp	r3, #78	@ 0x4e
 800a8cc:	d864      	bhi.n	800a998 <_scanf_float+0x120>
 800a8ce:	2b40      	cmp	r3, #64	@ 0x40
 800a8d0:	d83c      	bhi.n	800a94c <_scanf_float+0xd4>
 800a8d2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a8d6:	b2c8      	uxtb	r0, r1
 800a8d8:	280e      	cmp	r0, #14
 800a8da:	d93a      	bls.n	800a952 <_scanf_float+0xda>
 800a8dc:	f1b9 0f00 	cmp.w	r9, #0
 800a8e0:	d003      	beq.n	800a8ea <_scanf_float+0x72>
 800a8e2:	6823      	ldr	r3, [r4, #0]
 800a8e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a8e8:	6023      	str	r3, [r4, #0]
 800a8ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a8ee:	f1ba 0f01 	cmp.w	sl, #1
 800a8f2:	f200 8117 	bhi.w	800ab24 <_scanf_float+0x2ac>
 800a8f6:	9b01      	ldr	r3, [sp, #4]
 800a8f8:	429e      	cmp	r6, r3
 800a8fa:	f200 8108 	bhi.w	800ab0e <_scanf_float+0x296>
 800a8fe:	2001      	movs	r0, #1
 800a900:	b007      	add	sp, #28
 800a902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a906:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a90a:	2a0d      	cmp	r2, #13
 800a90c:	d8e6      	bhi.n	800a8dc <_scanf_float+0x64>
 800a90e:	a101      	add	r1, pc, #4	@ (adr r1, 800a914 <_scanf_float+0x9c>)
 800a910:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a914:	0800aa5b 	.word	0x0800aa5b
 800a918:	0800a8dd 	.word	0x0800a8dd
 800a91c:	0800a8dd 	.word	0x0800a8dd
 800a920:	0800a8dd 	.word	0x0800a8dd
 800a924:	0800aabb 	.word	0x0800aabb
 800a928:	0800aa93 	.word	0x0800aa93
 800a92c:	0800a8dd 	.word	0x0800a8dd
 800a930:	0800a8dd 	.word	0x0800a8dd
 800a934:	0800aa69 	.word	0x0800aa69
 800a938:	0800a8dd 	.word	0x0800a8dd
 800a93c:	0800a8dd 	.word	0x0800a8dd
 800a940:	0800a8dd 	.word	0x0800a8dd
 800a944:	0800a8dd 	.word	0x0800a8dd
 800a948:	0800aa21 	.word	0x0800aa21
 800a94c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a950:	e7db      	b.n	800a90a <_scanf_float+0x92>
 800a952:	290e      	cmp	r1, #14
 800a954:	d8c2      	bhi.n	800a8dc <_scanf_float+0x64>
 800a956:	a001      	add	r0, pc, #4	@ (adr r0, 800a95c <_scanf_float+0xe4>)
 800a958:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a95c:	0800aa11 	.word	0x0800aa11
 800a960:	0800a8dd 	.word	0x0800a8dd
 800a964:	0800aa11 	.word	0x0800aa11
 800a968:	0800aaa7 	.word	0x0800aaa7
 800a96c:	0800a8dd 	.word	0x0800a8dd
 800a970:	0800a9b9 	.word	0x0800a9b9
 800a974:	0800a9f7 	.word	0x0800a9f7
 800a978:	0800a9f7 	.word	0x0800a9f7
 800a97c:	0800a9f7 	.word	0x0800a9f7
 800a980:	0800a9f7 	.word	0x0800a9f7
 800a984:	0800a9f7 	.word	0x0800a9f7
 800a988:	0800a9f7 	.word	0x0800a9f7
 800a98c:	0800a9f7 	.word	0x0800a9f7
 800a990:	0800a9f7 	.word	0x0800a9f7
 800a994:	0800a9f7 	.word	0x0800a9f7
 800a998:	2b6e      	cmp	r3, #110	@ 0x6e
 800a99a:	d809      	bhi.n	800a9b0 <_scanf_float+0x138>
 800a99c:	2b60      	cmp	r3, #96	@ 0x60
 800a99e:	d8b2      	bhi.n	800a906 <_scanf_float+0x8e>
 800a9a0:	2b54      	cmp	r3, #84	@ 0x54
 800a9a2:	d07b      	beq.n	800aa9c <_scanf_float+0x224>
 800a9a4:	2b59      	cmp	r3, #89	@ 0x59
 800a9a6:	d199      	bne.n	800a8dc <_scanf_float+0x64>
 800a9a8:	2d07      	cmp	r5, #7
 800a9aa:	d197      	bne.n	800a8dc <_scanf_float+0x64>
 800a9ac:	2508      	movs	r5, #8
 800a9ae:	e02c      	b.n	800aa0a <_scanf_float+0x192>
 800a9b0:	2b74      	cmp	r3, #116	@ 0x74
 800a9b2:	d073      	beq.n	800aa9c <_scanf_float+0x224>
 800a9b4:	2b79      	cmp	r3, #121	@ 0x79
 800a9b6:	e7f6      	b.n	800a9a6 <_scanf_float+0x12e>
 800a9b8:	6821      	ldr	r1, [r4, #0]
 800a9ba:	05c8      	lsls	r0, r1, #23
 800a9bc:	d51b      	bpl.n	800a9f6 <_scanf_float+0x17e>
 800a9be:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a9c2:	6021      	str	r1, [r4, #0]
 800a9c4:	f109 0901 	add.w	r9, r9, #1
 800a9c8:	f1bb 0f00 	cmp.w	fp, #0
 800a9cc:	d003      	beq.n	800a9d6 <_scanf_float+0x15e>
 800a9ce:	3201      	adds	r2, #1
 800a9d0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a9d4:	60a2      	str	r2, [r4, #8]
 800a9d6:	68a3      	ldr	r3, [r4, #8]
 800a9d8:	3b01      	subs	r3, #1
 800a9da:	60a3      	str	r3, [r4, #8]
 800a9dc:	6923      	ldr	r3, [r4, #16]
 800a9de:	3301      	adds	r3, #1
 800a9e0:	6123      	str	r3, [r4, #16]
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	3b01      	subs	r3, #1
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	607b      	str	r3, [r7, #4]
 800a9ea:	f340 8087 	ble.w	800aafc <_scanf_float+0x284>
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	3301      	adds	r3, #1
 800a9f2:	603b      	str	r3, [r7, #0]
 800a9f4:	e765      	b.n	800a8c2 <_scanf_float+0x4a>
 800a9f6:	eb1a 0105 	adds.w	r1, sl, r5
 800a9fa:	f47f af6f 	bne.w	800a8dc <_scanf_float+0x64>
 800a9fe:	6822      	ldr	r2, [r4, #0]
 800aa00:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800aa04:	6022      	str	r2, [r4, #0]
 800aa06:	460d      	mov	r5, r1
 800aa08:	468a      	mov	sl, r1
 800aa0a:	f806 3b01 	strb.w	r3, [r6], #1
 800aa0e:	e7e2      	b.n	800a9d6 <_scanf_float+0x15e>
 800aa10:	6822      	ldr	r2, [r4, #0]
 800aa12:	0610      	lsls	r0, r2, #24
 800aa14:	f57f af62 	bpl.w	800a8dc <_scanf_float+0x64>
 800aa18:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800aa1c:	6022      	str	r2, [r4, #0]
 800aa1e:	e7f4      	b.n	800aa0a <_scanf_float+0x192>
 800aa20:	f1ba 0f00 	cmp.w	sl, #0
 800aa24:	d10e      	bne.n	800aa44 <_scanf_float+0x1cc>
 800aa26:	f1b9 0f00 	cmp.w	r9, #0
 800aa2a:	d10e      	bne.n	800aa4a <_scanf_float+0x1d2>
 800aa2c:	6822      	ldr	r2, [r4, #0]
 800aa2e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800aa32:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800aa36:	d108      	bne.n	800aa4a <_scanf_float+0x1d2>
 800aa38:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800aa3c:	6022      	str	r2, [r4, #0]
 800aa3e:	f04f 0a01 	mov.w	sl, #1
 800aa42:	e7e2      	b.n	800aa0a <_scanf_float+0x192>
 800aa44:	f1ba 0f02 	cmp.w	sl, #2
 800aa48:	d055      	beq.n	800aaf6 <_scanf_float+0x27e>
 800aa4a:	2d01      	cmp	r5, #1
 800aa4c:	d002      	beq.n	800aa54 <_scanf_float+0x1dc>
 800aa4e:	2d04      	cmp	r5, #4
 800aa50:	f47f af44 	bne.w	800a8dc <_scanf_float+0x64>
 800aa54:	3501      	adds	r5, #1
 800aa56:	b2ed      	uxtb	r5, r5
 800aa58:	e7d7      	b.n	800aa0a <_scanf_float+0x192>
 800aa5a:	f1ba 0f01 	cmp.w	sl, #1
 800aa5e:	f47f af3d 	bne.w	800a8dc <_scanf_float+0x64>
 800aa62:	f04f 0a02 	mov.w	sl, #2
 800aa66:	e7d0      	b.n	800aa0a <_scanf_float+0x192>
 800aa68:	b97d      	cbnz	r5, 800aa8a <_scanf_float+0x212>
 800aa6a:	f1b9 0f00 	cmp.w	r9, #0
 800aa6e:	f47f af38 	bne.w	800a8e2 <_scanf_float+0x6a>
 800aa72:	6822      	ldr	r2, [r4, #0]
 800aa74:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800aa78:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800aa7c:	f040 8101 	bne.w	800ac82 <_scanf_float+0x40a>
 800aa80:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800aa84:	6022      	str	r2, [r4, #0]
 800aa86:	2501      	movs	r5, #1
 800aa88:	e7bf      	b.n	800aa0a <_scanf_float+0x192>
 800aa8a:	2d03      	cmp	r5, #3
 800aa8c:	d0e2      	beq.n	800aa54 <_scanf_float+0x1dc>
 800aa8e:	2d05      	cmp	r5, #5
 800aa90:	e7de      	b.n	800aa50 <_scanf_float+0x1d8>
 800aa92:	2d02      	cmp	r5, #2
 800aa94:	f47f af22 	bne.w	800a8dc <_scanf_float+0x64>
 800aa98:	2503      	movs	r5, #3
 800aa9a:	e7b6      	b.n	800aa0a <_scanf_float+0x192>
 800aa9c:	2d06      	cmp	r5, #6
 800aa9e:	f47f af1d 	bne.w	800a8dc <_scanf_float+0x64>
 800aaa2:	2507      	movs	r5, #7
 800aaa4:	e7b1      	b.n	800aa0a <_scanf_float+0x192>
 800aaa6:	6822      	ldr	r2, [r4, #0]
 800aaa8:	0591      	lsls	r1, r2, #22
 800aaaa:	f57f af17 	bpl.w	800a8dc <_scanf_float+0x64>
 800aaae:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800aab2:	6022      	str	r2, [r4, #0]
 800aab4:	f8cd 9008 	str.w	r9, [sp, #8]
 800aab8:	e7a7      	b.n	800aa0a <_scanf_float+0x192>
 800aaba:	6822      	ldr	r2, [r4, #0]
 800aabc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800aac0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800aac4:	d006      	beq.n	800aad4 <_scanf_float+0x25c>
 800aac6:	0550      	lsls	r0, r2, #21
 800aac8:	f57f af08 	bpl.w	800a8dc <_scanf_float+0x64>
 800aacc:	f1b9 0f00 	cmp.w	r9, #0
 800aad0:	f000 80d7 	beq.w	800ac82 <_scanf_float+0x40a>
 800aad4:	0591      	lsls	r1, r2, #22
 800aad6:	bf58      	it	pl
 800aad8:	9902      	ldrpl	r1, [sp, #8]
 800aada:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800aade:	bf58      	it	pl
 800aae0:	eba9 0101 	subpl.w	r1, r9, r1
 800aae4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800aae8:	bf58      	it	pl
 800aaea:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800aaee:	6022      	str	r2, [r4, #0]
 800aaf0:	f04f 0900 	mov.w	r9, #0
 800aaf4:	e789      	b.n	800aa0a <_scanf_float+0x192>
 800aaf6:	f04f 0a03 	mov.w	sl, #3
 800aafa:	e786      	b.n	800aa0a <_scanf_float+0x192>
 800aafc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ab00:	4639      	mov	r1, r7
 800ab02:	4640      	mov	r0, r8
 800ab04:	4798      	blx	r3
 800ab06:	2800      	cmp	r0, #0
 800ab08:	f43f aedb 	beq.w	800a8c2 <_scanf_float+0x4a>
 800ab0c:	e6e6      	b.n	800a8dc <_scanf_float+0x64>
 800ab0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ab12:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ab16:	463a      	mov	r2, r7
 800ab18:	4640      	mov	r0, r8
 800ab1a:	4798      	blx	r3
 800ab1c:	6923      	ldr	r3, [r4, #16]
 800ab1e:	3b01      	subs	r3, #1
 800ab20:	6123      	str	r3, [r4, #16]
 800ab22:	e6e8      	b.n	800a8f6 <_scanf_float+0x7e>
 800ab24:	1e6b      	subs	r3, r5, #1
 800ab26:	2b06      	cmp	r3, #6
 800ab28:	d824      	bhi.n	800ab74 <_scanf_float+0x2fc>
 800ab2a:	2d02      	cmp	r5, #2
 800ab2c:	d836      	bhi.n	800ab9c <_scanf_float+0x324>
 800ab2e:	9b01      	ldr	r3, [sp, #4]
 800ab30:	429e      	cmp	r6, r3
 800ab32:	f67f aee4 	bls.w	800a8fe <_scanf_float+0x86>
 800ab36:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ab3a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ab3e:	463a      	mov	r2, r7
 800ab40:	4640      	mov	r0, r8
 800ab42:	4798      	blx	r3
 800ab44:	6923      	ldr	r3, [r4, #16]
 800ab46:	3b01      	subs	r3, #1
 800ab48:	6123      	str	r3, [r4, #16]
 800ab4a:	e7f0      	b.n	800ab2e <_scanf_float+0x2b6>
 800ab4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ab50:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800ab54:	463a      	mov	r2, r7
 800ab56:	4640      	mov	r0, r8
 800ab58:	4798      	blx	r3
 800ab5a:	6923      	ldr	r3, [r4, #16]
 800ab5c:	3b01      	subs	r3, #1
 800ab5e:	6123      	str	r3, [r4, #16]
 800ab60:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab64:	fa5f fa8a 	uxtb.w	sl, sl
 800ab68:	f1ba 0f02 	cmp.w	sl, #2
 800ab6c:	d1ee      	bne.n	800ab4c <_scanf_float+0x2d4>
 800ab6e:	3d03      	subs	r5, #3
 800ab70:	b2ed      	uxtb	r5, r5
 800ab72:	1b76      	subs	r6, r6, r5
 800ab74:	6823      	ldr	r3, [r4, #0]
 800ab76:	05da      	lsls	r2, r3, #23
 800ab78:	d530      	bpl.n	800abdc <_scanf_float+0x364>
 800ab7a:	055b      	lsls	r3, r3, #21
 800ab7c:	d511      	bpl.n	800aba2 <_scanf_float+0x32a>
 800ab7e:	9b01      	ldr	r3, [sp, #4]
 800ab80:	429e      	cmp	r6, r3
 800ab82:	f67f aebc 	bls.w	800a8fe <_scanf_float+0x86>
 800ab86:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ab8a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ab8e:	463a      	mov	r2, r7
 800ab90:	4640      	mov	r0, r8
 800ab92:	4798      	blx	r3
 800ab94:	6923      	ldr	r3, [r4, #16]
 800ab96:	3b01      	subs	r3, #1
 800ab98:	6123      	str	r3, [r4, #16]
 800ab9a:	e7f0      	b.n	800ab7e <_scanf_float+0x306>
 800ab9c:	46aa      	mov	sl, r5
 800ab9e:	46b3      	mov	fp, r6
 800aba0:	e7de      	b.n	800ab60 <_scanf_float+0x2e8>
 800aba2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800aba6:	6923      	ldr	r3, [r4, #16]
 800aba8:	2965      	cmp	r1, #101	@ 0x65
 800abaa:	f103 33ff 	add.w	r3, r3, #4294967295
 800abae:	f106 35ff 	add.w	r5, r6, #4294967295
 800abb2:	6123      	str	r3, [r4, #16]
 800abb4:	d00c      	beq.n	800abd0 <_scanf_float+0x358>
 800abb6:	2945      	cmp	r1, #69	@ 0x45
 800abb8:	d00a      	beq.n	800abd0 <_scanf_float+0x358>
 800abba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800abbe:	463a      	mov	r2, r7
 800abc0:	4640      	mov	r0, r8
 800abc2:	4798      	blx	r3
 800abc4:	6923      	ldr	r3, [r4, #16]
 800abc6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800abca:	3b01      	subs	r3, #1
 800abcc:	1eb5      	subs	r5, r6, #2
 800abce:	6123      	str	r3, [r4, #16]
 800abd0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800abd4:	463a      	mov	r2, r7
 800abd6:	4640      	mov	r0, r8
 800abd8:	4798      	blx	r3
 800abda:	462e      	mov	r6, r5
 800abdc:	6822      	ldr	r2, [r4, #0]
 800abde:	f012 0210 	ands.w	r2, r2, #16
 800abe2:	d001      	beq.n	800abe8 <_scanf_float+0x370>
 800abe4:	2000      	movs	r0, #0
 800abe6:	e68b      	b.n	800a900 <_scanf_float+0x88>
 800abe8:	7032      	strb	r2, [r6, #0]
 800abea:	6823      	ldr	r3, [r4, #0]
 800abec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800abf0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800abf4:	d11a      	bne.n	800ac2c <_scanf_float+0x3b4>
 800abf6:	9b02      	ldr	r3, [sp, #8]
 800abf8:	454b      	cmp	r3, r9
 800abfa:	eba3 0209 	sub.w	r2, r3, r9
 800abfe:	d121      	bne.n	800ac44 <_scanf_float+0x3cc>
 800ac00:	9901      	ldr	r1, [sp, #4]
 800ac02:	2200      	movs	r2, #0
 800ac04:	4640      	mov	r0, r8
 800ac06:	f002 fc49 	bl	800d49c <_strtod_r>
 800ac0a:	9b03      	ldr	r3, [sp, #12]
 800ac0c:	6821      	ldr	r1, [r4, #0]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f011 0f02 	tst.w	r1, #2
 800ac14:	f103 0204 	add.w	r2, r3, #4
 800ac18:	d01f      	beq.n	800ac5a <_scanf_float+0x3e2>
 800ac1a:	9903      	ldr	r1, [sp, #12]
 800ac1c:	600a      	str	r2, [r1, #0]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	ed83 0b00 	vstr	d0, [r3]
 800ac24:	68e3      	ldr	r3, [r4, #12]
 800ac26:	3301      	adds	r3, #1
 800ac28:	60e3      	str	r3, [r4, #12]
 800ac2a:	e7db      	b.n	800abe4 <_scanf_float+0x36c>
 800ac2c:	9b04      	ldr	r3, [sp, #16]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d0e6      	beq.n	800ac00 <_scanf_float+0x388>
 800ac32:	9905      	ldr	r1, [sp, #20]
 800ac34:	230a      	movs	r3, #10
 800ac36:	3101      	adds	r1, #1
 800ac38:	4640      	mov	r0, r8
 800ac3a:	f002 fcaf 	bl	800d59c <_strtol_r>
 800ac3e:	9b04      	ldr	r3, [sp, #16]
 800ac40:	9e05      	ldr	r6, [sp, #20]
 800ac42:	1ac2      	subs	r2, r0, r3
 800ac44:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800ac48:	429e      	cmp	r6, r3
 800ac4a:	bf28      	it	cs
 800ac4c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800ac50:	490d      	ldr	r1, [pc, #52]	@ (800ac88 <_scanf_float+0x410>)
 800ac52:	4630      	mov	r0, r6
 800ac54:	f000 f960 	bl	800af18 <siprintf>
 800ac58:	e7d2      	b.n	800ac00 <_scanf_float+0x388>
 800ac5a:	f011 0f04 	tst.w	r1, #4
 800ac5e:	9903      	ldr	r1, [sp, #12]
 800ac60:	600a      	str	r2, [r1, #0]
 800ac62:	d1dc      	bne.n	800ac1e <_scanf_float+0x3a6>
 800ac64:	eeb4 0b40 	vcmp.f64	d0, d0
 800ac68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac6c:	681d      	ldr	r5, [r3, #0]
 800ac6e:	d705      	bvc.n	800ac7c <_scanf_float+0x404>
 800ac70:	4806      	ldr	r0, [pc, #24]	@ (800ac8c <_scanf_float+0x414>)
 800ac72:	f000 fb81 	bl	800b378 <nanf>
 800ac76:	ed85 0a00 	vstr	s0, [r5]
 800ac7a:	e7d3      	b.n	800ac24 <_scanf_float+0x3ac>
 800ac7c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800ac80:	e7f9      	b.n	800ac76 <_scanf_float+0x3fe>
 800ac82:	f04f 0900 	mov.w	r9, #0
 800ac86:	e630      	b.n	800a8ea <_scanf_float+0x72>
 800ac88:	0800e650 	.word	0x0800e650
 800ac8c:	0800e61b 	.word	0x0800e61b

0800ac90 <std>:
 800ac90:	2300      	movs	r3, #0
 800ac92:	b510      	push	{r4, lr}
 800ac94:	4604      	mov	r4, r0
 800ac96:	e9c0 3300 	strd	r3, r3, [r0]
 800ac9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac9e:	6083      	str	r3, [r0, #8]
 800aca0:	8181      	strh	r1, [r0, #12]
 800aca2:	6643      	str	r3, [r0, #100]	@ 0x64
 800aca4:	81c2      	strh	r2, [r0, #14]
 800aca6:	6183      	str	r3, [r0, #24]
 800aca8:	4619      	mov	r1, r3
 800acaa:	2208      	movs	r2, #8
 800acac:	305c      	adds	r0, #92	@ 0x5c
 800acae:	f000 fa2b 	bl	800b108 <memset>
 800acb2:	4b0d      	ldr	r3, [pc, #52]	@ (800ace8 <std+0x58>)
 800acb4:	6263      	str	r3, [r4, #36]	@ 0x24
 800acb6:	4b0d      	ldr	r3, [pc, #52]	@ (800acec <std+0x5c>)
 800acb8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800acba:	4b0d      	ldr	r3, [pc, #52]	@ (800acf0 <std+0x60>)
 800acbc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800acbe:	4b0d      	ldr	r3, [pc, #52]	@ (800acf4 <std+0x64>)
 800acc0:	6323      	str	r3, [r4, #48]	@ 0x30
 800acc2:	4b0d      	ldr	r3, [pc, #52]	@ (800acf8 <std+0x68>)
 800acc4:	6224      	str	r4, [r4, #32]
 800acc6:	429c      	cmp	r4, r3
 800acc8:	d006      	beq.n	800acd8 <std+0x48>
 800acca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800acce:	4294      	cmp	r4, r2
 800acd0:	d002      	beq.n	800acd8 <std+0x48>
 800acd2:	33d0      	adds	r3, #208	@ 0xd0
 800acd4:	429c      	cmp	r4, r3
 800acd6:	d105      	bne.n	800ace4 <std+0x54>
 800acd8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800acdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ace0:	f000 bb38 	b.w	800b354 <__retarget_lock_init_recursive>
 800ace4:	bd10      	pop	{r4, pc}
 800ace6:	bf00      	nop
 800ace8:	0800af59 	.word	0x0800af59
 800acec:	0800af7b 	.word	0x0800af7b
 800acf0:	0800afb3 	.word	0x0800afb3
 800acf4:	0800afd7 	.word	0x0800afd7
 800acf8:	24004d3c 	.word	0x24004d3c

0800acfc <stdio_exit_handler>:
 800acfc:	4a02      	ldr	r2, [pc, #8]	@ (800ad08 <stdio_exit_handler+0xc>)
 800acfe:	4903      	ldr	r1, [pc, #12]	@ (800ad0c <stdio_exit_handler+0x10>)
 800ad00:	4803      	ldr	r0, [pc, #12]	@ (800ad10 <stdio_exit_handler+0x14>)
 800ad02:	f000 b87b 	b.w	800adfc <_fwalk_sglue>
 800ad06:	bf00      	nop
 800ad08:	24000014 	.word	0x24000014
 800ad0c:	0800dbdd 	.word	0x0800dbdd
 800ad10:	24000024 	.word	0x24000024

0800ad14 <cleanup_stdio>:
 800ad14:	6841      	ldr	r1, [r0, #4]
 800ad16:	4b0c      	ldr	r3, [pc, #48]	@ (800ad48 <cleanup_stdio+0x34>)
 800ad18:	4299      	cmp	r1, r3
 800ad1a:	b510      	push	{r4, lr}
 800ad1c:	4604      	mov	r4, r0
 800ad1e:	d001      	beq.n	800ad24 <cleanup_stdio+0x10>
 800ad20:	f002 ff5c 	bl	800dbdc <_fflush_r>
 800ad24:	68a1      	ldr	r1, [r4, #8]
 800ad26:	4b09      	ldr	r3, [pc, #36]	@ (800ad4c <cleanup_stdio+0x38>)
 800ad28:	4299      	cmp	r1, r3
 800ad2a:	d002      	beq.n	800ad32 <cleanup_stdio+0x1e>
 800ad2c:	4620      	mov	r0, r4
 800ad2e:	f002 ff55 	bl	800dbdc <_fflush_r>
 800ad32:	68e1      	ldr	r1, [r4, #12]
 800ad34:	4b06      	ldr	r3, [pc, #24]	@ (800ad50 <cleanup_stdio+0x3c>)
 800ad36:	4299      	cmp	r1, r3
 800ad38:	d004      	beq.n	800ad44 <cleanup_stdio+0x30>
 800ad3a:	4620      	mov	r0, r4
 800ad3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad40:	f002 bf4c 	b.w	800dbdc <_fflush_r>
 800ad44:	bd10      	pop	{r4, pc}
 800ad46:	bf00      	nop
 800ad48:	24004d3c 	.word	0x24004d3c
 800ad4c:	24004da4 	.word	0x24004da4
 800ad50:	24004e0c 	.word	0x24004e0c

0800ad54 <global_stdio_init.part.0>:
 800ad54:	b510      	push	{r4, lr}
 800ad56:	4b0b      	ldr	r3, [pc, #44]	@ (800ad84 <global_stdio_init.part.0+0x30>)
 800ad58:	4c0b      	ldr	r4, [pc, #44]	@ (800ad88 <global_stdio_init.part.0+0x34>)
 800ad5a:	4a0c      	ldr	r2, [pc, #48]	@ (800ad8c <global_stdio_init.part.0+0x38>)
 800ad5c:	601a      	str	r2, [r3, #0]
 800ad5e:	4620      	mov	r0, r4
 800ad60:	2200      	movs	r2, #0
 800ad62:	2104      	movs	r1, #4
 800ad64:	f7ff ff94 	bl	800ac90 <std>
 800ad68:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ad6c:	2201      	movs	r2, #1
 800ad6e:	2109      	movs	r1, #9
 800ad70:	f7ff ff8e 	bl	800ac90 <std>
 800ad74:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ad78:	2202      	movs	r2, #2
 800ad7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad7e:	2112      	movs	r1, #18
 800ad80:	f7ff bf86 	b.w	800ac90 <std>
 800ad84:	24004e74 	.word	0x24004e74
 800ad88:	24004d3c 	.word	0x24004d3c
 800ad8c:	0800acfd 	.word	0x0800acfd

0800ad90 <__sfp_lock_acquire>:
 800ad90:	4801      	ldr	r0, [pc, #4]	@ (800ad98 <__sfp_lock_acquire+0x8>)
 800ad92:	f000 bae0 	b.w	800b356 <__retarget_lock_acquire_recursive>
 800ad96:	bf00      	nop
 800ad98:	24004e7d 	.word	0x24004e7d

0800ad9c <__sfp_lock_release>:
 800ad9c:	4801      	ldr	r0, [pc, #4]	@ (800ada4 <__sfp_lock_release+0x8>)
 800ad9e:	f000 badb 	b.w	800b358 <__retarget_lock_release_recursive>
 800ada2:	bf00      	nop
 800ada4:	24004e7d 	.word	0x24004e7d

0800ada8 <__sinit>:
 800ada8:	b510      	push	{r4, lr}
 800adaa:	4604      	mov	r4, r0
 800adac:	f7ff fff0 	bl	800ad90 <__sfp_lock_acquire>
 800adb0:	6a23      	ldr	r3, [r4, #32]
 800adb2:	b11b      	cbz	r3, 800adbc <__sinit+0x14>
 800adb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800adb8:	f7ff bff0 	b.w	800ad9c <__sfp_lock_release>
 800adbc:	4b04      	ldr	r3, [pc, #16]	@ (800add0 <__sinit+0x28>)
 800adbe:	6223      	str	r3, [r4, #32]
 800adc0:	4b04      	ldr	r3, [pc, #16]	@ (800add4 <__sinit+0x2c>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d1f5      	bne.n	800adb4 <__sinit+0xc>
 800adc8:	f7ff ffc4 	bl	800ad54 <global_stdio_init.part.0>
 800adcc:	e7f2      	b.n	800adb4 <__sinit+0xc>
 800adce:	bf00      	nop
 800add0:	0800ad15 	.word	0x0800ad15
 800add4:	24004e74 	.word	0x24004e74

0800add8 <fiprintf>:
 800add8:	b40e      	push	{r1, r2, r3}
 800adda:	b503      	push	{r0, r1, lr}
 800addc:	4601      	mov	r1, r0
 800adde:	ab03      	add	r3, sp, #12
 800ade0:	4805      	ldr	r0, [pc, #20]	@ (800adf8 <fiprintf+0x20>)
 800ade2:	f853 2b04 	ldr.w	r2, [r3], #4
 800ade6:	6800      	ldr	r0, [r0, #0]
 800ade8:	9301      	str	r3, [sp, #4]
 800adea:	f002 fd5b 	bl	800d8a4 <_vfiprintf_r>
 800adee:	b002      	add	sp, #8
 800adf0:	f85d eb04 	ldr.w	lr, [sp], #4
 800adf4:	b003      	add	sp, #12
 800adf6:	4770      	bx	lr
 800adf8:	24000020 	.word	0x24000020

0800adfc <_fwalk_sglue>:
 800adfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae00:	4607      	mov	r7, r0
 800ae02:	4688      	mov	r8, r1
 800ae04:	4614      	mov	r4, r2
 800ae06:	2600      	movs	r6, #0
 800ae08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ae0c:	f1b9 0901 	subs.w	r9, r9, #1
 800ae10:	d505      	bpl.n	800ae1e <_fwalk_sglue+0x22>
 800ae12:	6824      	ldr	r4, [r4, #0]
 800ae14:	2c00      	cmp	r4, #0
 800ae16:	d1f7      	bne.n	800ae08 <_fwalk_sglue+0xc>
 800ae18:	4630      	mov	r0, r6
 800ae1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae1e:	89ab      	ldrh	r3, [r5, #12]
 800ae20:	2b01      	cmp	r3, #1
 800ae22:	d907      	bls.n	800ae34 <_fwalk_sglue+0x38>
 800ae24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ae28:	3301      	adds	r3, #1
 800ae2a:	d003      	beq.n	800ae34 <_fwalk_sglue+0x38>
 800ae2c:	4629      	mov	r1, r5
 800ae2e:	4638      	mov	r0, r7
 800ae30:	47c0      	blx	r8
 800ae32:	4306      	orrs	r6, r0
 800ae34:	3568      	adds	r5, #104	@ 0x68
 800ae36:	e7e9      	b.n	800ae0c <_fwalk_sglue+0x10>

0800ae38 <iprintf>:
 800ae38:	b40f      	push	{r0, r1, r2, r3}
 800ae3a:	b507      	push	{r0, r1, r2, lr}
 800ae3c:	4906      	ldr	r1, [pc, #24]	@ (800ae58 <iprintf+0x20>)
 800ae3e:	ab04      	add	r3, sp, #16
 800ae40:	6808      	ldr	r0, [r1, #0]
 800ae42:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae46:	6881      	ldr	r1, [r0, #8]
 800ae48:	9301      	str	r3, [sp, #4]
 800ae4a:	f002 fd2b 	bl	800d8a4 <_vfiprintf_r>
 800ae4e:	b003      	add	sp, #12
 800ae50:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae54:	b004      	add	sp, #16
 800ae56:	4770      	bx	lr
 800ae58:	24000020 	.word	0x24000020

0800ae5c <_puts_r>:
 800ae5c:	6a03      	ldr	r3, [r0, #32]
 800ae5e:	b570      	push	{r4, r5, r6, lr}
 800ae60:	6884      	ldr	r4, [r0, #8]
 800ae62:	4605      	mov	r5, r0
 800ae64:	460e      	mov	r6, r1
 800ae66:	b90b      	cbnz	r3, 800ae6c <_puts_r+0x10>
 800ae68:	f7ff ff9e 	bl	800ada8 <__sinit>
 800ae6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ae6e:	07db      	lsls	r3, r3, #31
 800ae70:	d405      	bmi.n	800ae7e <_puts_r+0x22>
 800ae72:	89a3      	ldrh	r3, [r4, #12]
 800ae74:	0598      	lsls	r0, r3, #22
 800ae76:	d402      	bmi.n	800ae7e <_puts_r+0x22>
 800ae78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae7a:	f000 fa6c 	bl	800b356 <__retarget_lock_acquire_recursive>
 800ae7e:	89a3      	ldrh	r3, [r4, #12]
 800ae80:	0719      	lsls	r1, r3, #28
 800ae82:	d502      	bpl.n	800ae8a <_puts_r+0x2e>
 800ae84:	6923      	ldr	r3, [r4, #16]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d135      	bne.n	800aef6 <_puts_r+0x9a>
 800ae8a:	4621      	mov	r1, r4
 800ae8c:	4628      	mov	r0, r5
 800ae8e:	f000 f8e5 	bl	800b05c <__swsetup_r>
 800ae92:	b380      	cbz	r0, 800aef6 <_puts_r+0x9a>
 800ae94:	f04f 35ff 	mov.w	r5, #4294967295
 800ae98:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ae9a:	07da      	lsls	r2, r3, #31
 800ae9c:	d405      	bmi.n	800aeaa <_puts_r+0x4e>
 800ae9e:	89a3      	ldrh	r3, [r4, #12]
 800aea0:	059b      	lsls	r3, r3, #22
 800aea2:	d402      	bmi.n	800aeaa <_puts_r+0x4e>
 800aea4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aea6:	f000 fa57 	bl	800b358 <__retarget_lock_release_recursive>
 800aeaa:	4628      	mov	r0, r5
 800aeac:	bd70      	pop	{r4, r5, r6, pc}
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	da04      	bge.n	800aebc <_puts_r+0x60>
 800aeb2:	69a2      	ldr	r2, [r4, #24]
 800aeb4:	429a      	cmp	r2, r3
 800aeb6:	dc17      	bgt.n	800aee8 <_puts_r+0x8c>
 800aeb8:	290a      	cmp	r1, #10
 800aeba:	d015      	beq.n	800aee8 <_puts_r+0x8c>
 800aebc:	6823      	ldr	r3, [r4, #0]
 800aebe:	1c5a      	adds	r2, r3, #1
 800aec0:	6022      	str	r2, [r4, #0]
 800aec2:	7019      	strb	r1, [r3, #0]
 800aec4:	68a3      	ldr	r3, [r4, #8]
 800aec6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800aeca:	3b01      	subs	r3, #1
 800aecc:	60a3      	str	r3, [r4, #8]
 800aece:	2900      	cmp	r1, #0
 800aed0:	d1ed      	bne.n	800aeae <_puts_r+0x52>
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	da11      	bge.n	800aefa <_puts_r+0x9e>
 800aed6:	4622      	mov	r2, r4
 800aed8:	210a      	movs	r1, #10
 800aeda:	4628      	mov	r0, r5
 800aedc:	f000 f87f 	bl	800afde <__swbuf_r>
 800aee0:	3001      	adds	r0, #1
 800aee2:	d0d7      	beq.n	800ae94 <_puts_r+0x38>
 800aee4:	250a      	movs	r5, #10
 800aee6:	e7d7      	b.n	800ae98 <_puts_r+0x3c>
 800aee8:	4622      	mov	r2, r4
 800aeea:	4628      	mov	r0, r5
 800aeec:	f000 f877 	bl	800afde <__swbuf_r>
 800aef0:	3001      	adds	r0, #1
 800aef2:	d1e7      	bne.n	800aec4 <_puts_r+0x68>
 800aef4:	e7ce      	b.n	800ae94 <_puts_r+0x38>
 800aef6:	3e01      	subs	r6, #1
 800aef8:	e7e4      	b.n	800aec4 <_puts_r+0x68>
 800aefa:	6823      	ldr	r3, [r4, #0]
 800aefc:	1c5a      	adds	r2, r3, #1
 800aefe:	6022      	str	r2, [r4, #0]
 800af00:	220a      	movs	r2, #10
 800af02:	701a      	strb	r2, [r3, #0]
 800af04:	e7ee      	b.n	800aee4 <_puts_r+0x88>
	...

0800af08 <puts>:
 800af08:	4b02      	ldr	r3, [pc, #8]	@ (800af14 <puts+0xc>)
 800af0a:	4601      	mov	r1, r0
 800af0c:	6818      	ldr	r0, [r3, #0]
 800af0e:	f7ff bfa5 	b.w	800ae5c <_puts_r>
 800af12:	bf00      	nop
 800af14:	24000020 	.word	0x24000020

0800af18 <siprintf>:
 800af18:	b40e      	push	{r1, r2, r3}
 800af1a:	b500      	push	{lr}
 800af1c:	b09c      	sub	sp, #112	@ 0x70
 800af1e:	ab1d      	add	r3, sp, #116	@ 0x74
 800af20:	9002      	str	r0, [sp, #8]
 800af22:	9006      	str	r0, [sp, #24]
 800af24:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800af28:	4809      	ldr	r0, [pc, #36]	@ (800af50 <siprintf+0x38>)
 800af2a:	9107      	str	r1, [sp, #28]
 800af2c:	9104      	str	r1, [sp, #16]
 800af2e:	4909      	ldr	r1, [pc, #36]	@ (800af54 <siprintf+0x3c>)
 800af30:	f853 2b04 	ldr.w	r2, [r3], #4
 800af34:	9105      	str	r1, [sp, #20]
 800af36:	6800      	ldr	r0, [r0, #0]
 800af38:	9301      	str	r3, [sp, #4]
 800af3a:	a902      	add	r1, sp, #8
 800af3c:	f002 fb8c 	bl	800d658 <_svfiprintf_r>
 800af40:	9b02      	ldr	r3, [sp, #8]
 800af42:	2200      	movs	r2, #0
 800af44:	701a      	strb	r2, [r3, #0]
 800af46:	b01c      	add	sp, #112	@ 0x70
 800af48:	f85d eb04 	ldr.w	lr, [sp], #4
 800af4c:	b003      	add	sp, #12
 800af4e:	4770      	bx	lr
 800af50:	24000020 	.word	0x24000020
 800af54:	ffff0208 	.word	0xffff0208

0800af58 <__sread>:
 800af58:	b510      	push	{r4, lr}
 800af5a:	460c      	mov	r4, r1
 800af5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af60:	f000 f986 	bl	800b270 <_read_r>
 800af64:	2800      	cmp	r0, #0
 800af66:	bfab      	itete	ge
 800af68:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800af6a:	89a3      	ldrhlt	r3, [r4, #12]
 800af6c:	181b      	addge	r3, r3, r0
 800af6e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800af72:	bfac      	ite	ge
 800af74:	6563      	strge	r3, [r4, #84]	@ 0x54
 800af76:	81a3      	strhlt	r3, [r4, #12]
 800af78:	bd10      	pop	{r4, pc}

0800af7a <__swrite>:
 800af7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af7e:	461f      	mov	r7, r3
 800af80:	898b      	ldrh	r3, [r1, #12]
 800af82:	05db      	lsls	r3, r3, #23
 800af84:	4605      	mov	r5, r0
 800af86:	460c      	mov	r4, r1
 800af88:	4616      	mov	r6, r2
 800af8a:	d505      	bpl.n	800af98 <__swrite+0x1e>
 800af8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af90:	2302      	movs	r3, #2
 800af92:	2200      	movs	r2, #0
 800af94:	f000 f95a 	bl	800b24c <_lseek_r>
 800af98:	89a3      	ldrh	r3, [r4, #12]
 800af9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af9e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800afa2:	81a3      	strh	r3, [r4, #12]
 800afa4:	4632      	mov	r2, r6
 800afa6:	463b      	mov	r3, r7
 800afa8:	4628      	mov	r0, r5
 800afaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800afae:	f000 b995 	b.w	800b2dc <_write_r>

0800afb2 <__sseek>:
 800afb2:	b510      	push	{r4, lr}
 800afb4:	460c      	mov	r4, r1
 800afb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afba:	f000 f947 	bl	800b24c <_lseek_r>
 800afbe:	1c43      	adds	r3, r0, #1
 800afc0:	89a3      	ldrh	r3, [r4, #12]
 800afc2:	bf15      	itete	ne
 800afc4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800afc6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800afca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800afce:	81a3      	strheq	r3, [r4, #12]
 800afd0:	bf18      	it	ne
 800afd2:	81a3      	strhne	r3, [r4, #12]
 800afd4:	bd10      	pop	{r4, pc}

0800afd6 <__sclose>:
 800afd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afda:	f000 b8d1 	b.w	800b180 <_close_r>

0800afde <__swbuf_r>:
 800afde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afe0:	460e      	mov	r6, r1
 800afe2:	4614      	mov	r4, r2
 800afe4:	4605      	mov	r5, r0
 800afe6:	b118      	cbz	r0, 800aff0 <__swbuf_r+0x12>
 800afe8:	6a03      	ldr	r3, [r0, #32]
 800afea:	b90b      	cbnz	r3, 800aff0 <__swbuf_r+0x12>
 800afec:	f7ff fedc 	bl	800ada8 <__sinit>
 800aff0:	69a3      	ldr	r3, [r4, #24]
 800aff2:	60a3      	str	r3, [r4, #8]
 800aff4:	89a3      	ldrh	r3, [r4, #12]
 800aff6:	071a      	lsls	r2, r3, #28
 800aff8:	d501      	bpl.n	800affe <__swbuf_r+0x20>
 800affa:	6923      	ldr	r3, [r4, #16]
 800affc:	b943      	cbnz	r3, 800b010 <__swbuf_r+0x32>
 800affe:	4621      	mov	r1, r4
 800b000:	4628      	mov	r0, r5
 800b002:	f000 f82b 	bl	800b05c <__swsetup_r>
 800b006:	b118      	cbz	r0, 800b010 <__swbuf_r+0x32>
 800b008:	f04f 37ff 	mov.w	r7, #4294967295
 800b00c:	4638      	mov	r0, r7
 800b00e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b010:	6823      	ldr	r3, [r4, #0]
 800b012:	6922      	ldr	r2, [r4, #16]
 800b014:	1a98      	subs	r0, r3, r2
 800b016:	6963      	ldr	r3, [r4, #20]
 800b018:	b2f6      	uxtb	r6, r6
 800b01a:	4283      	cmp	r3, r0
 800b01c:	4637      	mov	r7, r6
 800b01e:	dc05      	bgt.n	800b02c <__swbuf_r+0x4e>
 800b020:	4621      	mov	r1, r4
 800b022:	4628      	mov	r0, r5
 800b024:	f002 fdda 	bl	800dbdc <_fflush_r>
 800b028:	2800      	cmp	r0, #0
 800b02a:	d1ed      	bne.n	800b008 <__swbuf_r+0x2a>
 800b02c:	68a3      	ldr	r3, [r4, #8]
 800b02e:	3b01      	subs	r3, #1
 800b030:	60a3      	str	r3, [r4, #8]
 800b032:	6823      	ldr	r3, [r4, #0]
 800b034:	1c5a      	adds	r2, r3, #1
 800b036:	6022      	str	r2, [r4, #0]
 800b038:	701e      	strb	r6, [r3, #0]
 800b03a:	6962      	ldr	r2, [r4, #20]
 800b03c:	1c43      	adds	r3, r0, #1
 800b03e:	429a      	cmp	r2, r3
 800b040:	d004      	beq.n	800b04c <__swbuf_r+0x6e>
 800b042:	89a3      	ldrh	r3, [r4, #12]
 800b044:	07db      	lsls	r3, r3, #31
 800b046:	d5e1      	bpl.n	800b00c <__swbuf_r+0x2e>
 800b048:	2e0a      	cmp	r6, #10
 800b04a:	d1df      	bne.n	800b00c <__swbuf_r+0x2e>
 800b04c:	4621      	mov	r1, r4
 800b04e:	4628      	mov	r0, r5
 800b050:	f002 fdc4 	bl	800dbdc <_fflush_r>
 800b054:	2800      	cmp	r0, #0
 800b056:	d0d9      	beq.n	800b00c <__swbuf_r+0x2e>
 800b058:	e7d6      	b.n	800b008 <__swbuf_r+0x2a>
	...

0800b05c <__swsetup_r>:
 800b05c:	b538      	push	{r3, r4, r5, lr}
 800b05e:	4b29      	ldr	r3, [pc, #164]	@ (800b104 <__swsetup_r+0xa8>)
 800b060:	4605      	mov	r5, r0
 800b062:	6818      	ldr	r0, [r3, #0]
 800b064:	460c      	mov	r4, r1
 800b066:	b118      	cbz	r0, 800b070 <__swsetup_r+0x14>
 800b068:	6a03      	ldr	r3, [r0, #32]
 800b06a:	b90b      	cbnz	r3, 800b070 <__swsetup_r+0x14>
 800b06c:	f7ff fe9c 	bl	800ada8 <__sinit>
 800b070:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b074:	0719      	lsls	r1, r3, #28
 800b076:	d422      	bmi.n	800b0be <__swsetup_r+0x62>
 800b078:	06da      	lsls	r2, r3, #27
 800b07a:	d407      	bmi.n	800b08c <__swsetup_r+0x30>
 800b07c:	2209      	movs	r2, #9
 800b07e:	602a      	str	r2, [r5, #0]
 800b080:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b084:	81a3      	strh	r3, [r4, #12]
 800b086:	f04f 30ff 	mov.w	r0, #4294967295
 800b08a:	e033      	b.n	800b0f4 <__swsetup_r+0x98>
 800b08c:	0758      	lsls	r0, r3, #29
 800b08e:	d512      	bpl.n	800b0b6 <__swsetup_r+0x5a>
 800b090:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b092:	b141      	cbz	r1, 800b0a6 <__swsetup_r+0x4a>
 800b094:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b098:	4299      	cmp	r1, r3
 800b09a:	d002      	beq.n	800b0a2 <__swsetup_r+0x46>
 800b09c:	4628      	mov	r0, r5
 800b09e:	f000 ff51 	bl	800bf44 <_free_r>
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	6363      	str	r3, [r4, #52]	@ 0x34
 800b0a6:	89a3      	ldrh	r3, [r4, #12]
 800b0a8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b0ac:	81a3      	strh	r3, [r4, #12]
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	6063      	str	r3, [r4, #4]
 800b0b2:	6923      	ldr	r3, [r4, #16]
 800b0b4:	6023      	str	r3, [r4, #0]
 800b0b6:	89a3      	ldrh	r3, [r4, #12]
 800b0b8:	f043 0308 	orr.w	r3, r3, #8
 800b0bc:	81a3      	strh	r3, [r4, #12]
 800b0be:	6923      	ldr	r3, [r4, #16]
 800b0c0:	b94b      	cbnz	r3, 800b0d6 <__swsetup_r+0x7a>
 800b0c2:	89a3      	ldrh	r3, [r4, #12]
 800b0c4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b0c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b0cc:	d003      	beq.n	800b0d6 <__swsetup_r+0x7a>
 800b0ce:	4621      	mov	r1, r4
 800b0d0:	4628      	mov	r0, r5
 800b0d2:	f002 fdd1 	bl	800dc78 <__smakebuf_r>
 800b0d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0da:	f013 0201 	ands.w	r2, r3, #1
 800b0de:	d00a      	beq.n	800b0f6 <__swsetup_r+0x9a>
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	60a2      	str	r2, [r4, #8]
 800b0e4:	6962      	ldr	r2, [r4, #20]
 800b0e6:	4252      	negs	r2, r2
 800b0e8:	61a2      	str	r2, [r4, #24]
 800b0ea:	6922      	ldr	r2, [r4, #16]
 800b0ec:	b942      	cbnz	r2, 800b100 <__swsetup_r+0xa4>
 800b0ee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b0f2:	d1c5      	bne.n	800b080 <__swsetup_r+0x24>
 800b0f4:	bd38      	pop	{r3, r4, r5, pc}
 800b0f6:	0799      	lsls	r1, r3, #30
 800b0f8:	bf58      	it	pl
 800b0fa:	6962      	ldrpl	r2, [r4, #20]
 800b0fc:	60a2      	str	r2, [r4, #8]
 800b0fe:	e7f4      	b.n	800b0ea <__swsetup_r+0x8e>
 800b100:	2000      	movs	r0, #0
 800b102:	e7f7      	b.n	800b0f4 <__swsetup_r+0x98>
 800b104:	24000020 	.word	0x24000020

0800b108 <memset>:
 800b108:	4402      	add	r2, r0
 800b10a:	4603      	mov	r3, r0
 800b10c:	4293      	cmp	r3, r2
 800b10e:	d100      	bne.n	800b112 <memset+0xa>
 800b110:	4770      	bx	lr
 800b112:	f803 1b01 	strb.w	r1, [r3], #1
 800b116:	e7f9      	b.n	800b10c <memset+0x4>

0800b118 <_raise_r>:
 800b118:	291f      	cmp	r1, #31
 800b11a:	b538      	push	{r3, r4, r5, lr}
 800b11c:	4605      	mov	r5, r0
 800b11e:	460c      	mov	r4, r1
 800b120:	d904      	bls.n	800b12c <_raise_r+0x14>
 800b122:	2316      	movs	r3, #22
 800b124:	6003      	str	r3, [r0, #0]
 800b126:	f04f 30ff 	mov.w	r0, #4294967295
 800b12a:	bd38      	pop	{r3, r4, r5, pc}
 800b12c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b12e:	b112      	cbz	r2, 800b136 <_raise_r+0x1e>
 800b130:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b134:	b94b      	cbnz	r3, 800b14a <_raise_r+0x32>
 800b136:	4628      	mov	r0, r5
 800b138:	f000 f8be 	bl	800b2b8 <_getpid_r>
 800b13c:	4622      	mov	r2, r4
 800b13e:	4601      	mov	r1, r0
 800b140:	4628      	mov	r0, r5
 800b142:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b146:	f000 b8a5 	b.w	800b294 <_kill_r>
 800b14a:	2b01      	cmp	r3, #1
 800b14c:	d00a      	beq.n	800b164 <_raise_r+0x4c>
 800b14e:	1c59      	adds	r1, r3, #1
 800b150:	d103      	bne.n	800b15a <_raise_r+0x42>
 800b152:	2316      	movs	r3, #22
 800b154:	6003      	str	r3, [r0, #0]
 800b156:	2001      	movs	r0, #1
 800b158:	e7e7      	b.n	800b12a <_raise_r+0x12>
 800b15a:	2100      	movs	r1, #0
 800b15c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b160:	4620      	mov	r0, r4
 800b162:	4798      	blx	r3
 800b164:	2000      	movs	r0, #0
 800b166:	e7e0      	b.n	800b12a <_raise_r+0x12>

0800b168 <raise>:
 800b168:	4b02      	ldr	r3, [pc, #8]	@ (800b174 <raise+0xc>)
 800b16a:	4601      	mov	r1, r0
 800b16c:	6818      	ldr	r0, [r3, #0]
 800b16e:	f7ff bfd3 	b.w	800b118 <_raise_r>
 800b172:	bf00      	nop
 800b174:	24000020 	.word	0x24000020

0800b178 <_localeconv_r>:
 800b178:	4800      	ldr	r0, [pc, #0]	@ (800b17c <_localeconv_r+0x4>)
 800b17a:	4770      	bx	lr
 800b17c:	24000160 	.word	0x24000160

0800b180 <_close_r>:
 800b180:	b538      	push	{r3, r4, r5, lr}
 800b182:	4d06      	ldr	r5, [pc, #24]	@ (800b19c <_close_r+0x1c>)
 800b184:	2300      	movs	r3, #0
 800b186:	4604      	mov	r4, r0
 800b188:	4608      	mov	r0, r1
 800b18a:	602b      	str	r3, [r5, #0]
 800b18c:	f7f5 ff5e 	bl	800104c <_close>
 800b190:	1c43      	adds	r3, r0, #1
 800b192:	d102      	bne.n	800b19a <_close_r+0x1a>
 800b194:	682b      	ldr	r3, [r5, #0]
 800b196:	b103      	cbz	r3, 800b19a <_close_r+0x1a>
 800b198:	6023      	str	r3, [r4, #0]
 800b19a:	bd38      	pop	{r3, r4, r5, pc}
 800b19c:	24004e78 	.word	0x24004e78

0800b1a0 <_reclaim_reent>:
 800b1a0:	4b29      	ldr	r3, [pc, #164]	@ (800b248 <_reclaim_reent+0xa8>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	4283      	cmp	r3, r0
 800b1a6:	b570      	push	{r4, r5, r6, lr}
 800b1a8:	4604      	mov	r4, r0
 800b1aa:	d04b      	beq.n	800b244 <_reclaim_reent+0xa4>
 800b1ac:	69c3      	ldr	r3, [r0, #28]
 800b1ae:	b1ab      	cbz	r3, 800b1dc <_reclaim_reent+0x3c>
 800b1b0:	68db      	ldr	r3, [r3, #12]
 800b1b2:	b16b      	cbz	r3, 800b1d0 <_reclaim_reent+0x30>
 800b1b4:	2500      	movs	r5, #0
 800b1b6:	69e3      	ldr	r3, [r4, #28]
 800b1b8:	68db      	ldr	r3, [r3, #12]
 800b1ba:	5959      	ldr	r1, [r3, r5]
 800b1bc:	2900      	cmp	r1, #0
 800b1be:	d13b      	bne.n	800b238 <_reclaim_reent+0x98>
 800b1c0:	3504      	adds	r5, #4
 800b1c2:	2d80      	cmp	r5, #128	@ 0x80
 800b1c4:	d1f7      	bne.n	800b1b6 <_reclaim_reent+0x16>
 800b1c6:	69e3      	ldr	r3, [r4, #28]
 800b1c8:	4620      	mov	r0, r4
 800b1ca:	68d9      	ldr	r1, [r3, #12]
 800b1cc:	f000 feba 	bl	800bf44 <_free_r>
 800b1d0:	69e3      	ldr	r3, [r4, #28]
 800b1d2:	6819      	ldr	r1, [r3, #0]
 800b1d4:	b111      	cbz	r1, 800b1dc <_reclaim_reent+0x3c>
 800b1d6:	4620      	mov	r0, r4
 800b1d8:	f000 feb4 	bl	800bf44 <_free_r>
 800b1dc:	6961      	ldr	r1, [r4, #20]
 800b1de:	b111      	cbz	r1, 800b1e6 <_reclaim_reent+0x46>
 800b1e0:	4620      	mov	r0, r4
 800b1e2:	f000 feaf 	bl	800bf44 <_free_r>
 800b1e6:	69e1      	ldr	r1, [r4, #28]
 800b1e8:	b111      	cbz	r1, 800b1f0 <_reclaim_reent+0x50>
 800b1ea:	4620      	mov	r0, r4
 800b1ec:	f000 feaa 	bl	800bf44 <_free_r>
 800b1f0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b1f2:	b111      	cbz	r1, 800b1fa <_reclaim_reent+0x5a>
 800b1f4:	4620      	mov	r0, r4
 800b1f6:	f000 fea5 	bl	800bf44 <_free_r>
 800b1fa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b1fc:	b111      	cbz	r1, 800b204 <_reclaim_reent+0x64>
 800b1fe:	4620      	mov	r0, r4
 800b200:	f000 fea0 	bl	800bf44 <_free_r>
 800b204:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800b206:	b111      	cbz	r1, 800b20e <_reclaim_reent+0x6e>
 800b208:	4620      	mov	r0, r4
 800b20a:	f000 fe9b 	bl	800bf44 <_free_r>
 800b20e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b210:	b111      	cbz	r1, 800b218 <_reclaim_reent+0x78>
 800b212:	4620      	mov	r0, r4
 800b214:	f000 fe96 	bl	800bf44 <_free_r>
 800b218:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800b21a:	b111      	cbz	r1, 800b222 <_reclaim_reent+0x82>
 800b21c:	4620      	mov	r0, r4
 800b21e:	f000 fe91 	bl	800bf44 <_free_r>
 800b222:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b224:	b111      	cbz	r1, 800b22c <_reclaim_reent+0x8c>
 800b226:	4620      	mov	r0, r4
 800b228:	f000 fe8c 	bl	800bf44 <_free_r>
 800b22c:	6a23      	ldr	r3, [r4, #32]
 800b22e:	b14b      	cbz	r3, 800b244 <_reclaim_reent+0xa4>
 800b230:	4620      	mov	r0, r4
 800b232:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b236:	4718      	bx	r3
 800b238:	680e      	ldr	r6, [r1, #0]
 800b23a:	4620      	mov	r0, r4
 800b23c:	f000 fe82 	bl	800bf44 <_free_r>
 800b240:	4631      	mov	r1, r6
 800b242:	e7bb      	b.n	800b1bc <_reclaim_reent+0x1c>
 800b244:	bd70      	pop	{r4, r5, r6, pc}
 800b246:	bf00      	nop
 800b248:	24000020 	.word	0x24000020

0800b24c <_lseek_r>:
 800b24c:	b538      	push	{r3, r4, r5, lr}
 800b24e:	4d07      	ldr	r5, [pc, #28]	@ (800b26c <_lseek_r+0x20>)
 800b250:	4604      	mov	r4, r0
 800b252:	4608      	mov	r0, r1
 800b254:	4611      	mov	r1, r2
 800b256:	2200      	movs	r2, #0
 800b258:	602a      	str	r2, [r5, #0]
 800b25a:	461a      	mov	r2, r3
 800b25c:	f7f5 ff1d 	bl	800109a <_lseek>
 800b260:	1c43      	adds	r3, r0, #1
 800b262:	d102      	bne.n	800b26a <_lseek_r+0x1e>
 800b264:	682b      	ldr	r3, [r5, #0]
 800b266:	b103      	cbz	r3, 800b26a <_lseek_r+0x1e>
 800b268:	6023      	str	r3, [r4, #0]
 800b26a:	bd38      	pop	{r3, r4, r5, pc}
 800b26c:	24004e78 	.word	0x24004e78

0800b270 <_read_r>:
 800b270:	b538      	push	{r3, r4, r5, lr}
 800b272:	4d07      	ldr	r5, [pc, #28]	@ (800b290 <_read_r+0x20>)
 800b274:	4604      	mov	r4, r0
 800b276:	4608      	mov	r0, r1
 800b278:	4611      	mov	r1, r2
 800b27a:	2200      	movs	r2, #0
 800b27c:	602a      	str	r2, [r5, #0]
 800b27e:	461a      	mov	r2, r3
 800b280:	f7f5 feab 	bl	8000fda <_read>
 800b284:	1c43      	adds	r3, r0, #1
 800b286:	d102      	bne.n	800b28e <_read_r+0x1e>
 800b288:	682b      	ldr	r3, [r5, #0]
 800b28a:	b103      	cbz	r3, 800b28e <_read_r+0x1e>
 800b28c:	6023      	str	r3, [r4, #0]
 800b28e:	bd38      	pop	{r3, r4, r5, pc}
 800b290:	24004e78 	.word	0x24004e78

0800b294 <_kill_r>:
 800b294:	b538      	push	{r3, r4, r5, lr}
 800b296:	4d07      	ldr	r5, [pc, #28]	@ (800b2b4 <_kill_r+0x20>)
 800b298:	2300      	movs	r3, #0
 800b29a:	4604      	mov	r4, r0
 800b29c:	4608      	mov	r0, r1
 800b29e:	4611      	mov	r1, r2
 800b2a0:	602b      	str	r3, [r5, #0]
 800b2a2:	f7f5 fe7f 	bl	8000fa4 <_kill>
 800b2a6:	1c43      	adds	r3, r0, #1
 800b2a8:	d102      	bne.n	800b2b0 <_kill_r+0x1c>
 800b2aa:	682b      	ldr	r3, [r5, #0]
 800b2ac:	b103      	cbz	r3, 800b2b0 <_kill_r+0x1c>
 800b2ae:	6023      	str	r3, [r4, #0]
 800b2b0:	bd38      	pop	{r3, r4, r5, pc}
 800b2b2:	bf00      	nop
 800b2b4:	24004e78 	.word	0x24004e78

0800b2b8 <_getpid_r>:
 800b2b8:	f7f5 be6c 	b.w	8000f94 <_getpid>

0800b2bc <_sbrk_r>:
 800b2bc:	b538      	push	{r3, r4, r5, lr}
 800b2be:	4d06      	ldr	r5, [pc, #24]	@ (800b2d8 <_sbrk_r+0x1c>)
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	4604      	mov	r4, r0
 800b2c4:	4608      	mov	r0, r1
 800b2c6:	602b      	str	r3, [r5, #0]
 800b2c8:	f7f5 fef4 	bl	80010b4 <_sbrk>
 800b2cc:	1c43      	adds	r3, r0, #1
 800b2ce:	d102      	bne.n	800b2d6 <_sbrk_r+0x1a>
 800b2d0:	682b      	ldr	r3, [r5, #0]
 800b2d2:	b103      	cbz	r3, 800b2d6 <_sbrk_r+0x1a>
 800b2d4:	6023      	str	r3, [r4, #0]
 800b2d6:	bd38      	pop	{r3, r4, r5, pc}
 800b2d8:	24004e78 	.word	0x24004e78

0800b2dc <_write_r>:
 800b2dc:	b538      	push	{r3, r4, r5, lr}
 800b2de:	4d07      	ldr	r5, [pc, #28]	@ (800b2fc <_write_r+0x20>)
 800b2e0:	4604      	mov	r4, r0
 800b2e2:	4608      	mov	r0, r1
 800b2e4:	4611      	mov	r1, r2
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	602a      	str	r2, [r5, #0]
 800b2ea:	461a      	mov	r2, r3
 800b2ec:	f7f5 fe92 	bl	8001014 <_write>
 800b2f0:	1c43      	adds	r3, r0, #1
 800b2f2:	d102      	bne.n	800b2fa <_write_r+0x1e>
 800b2f4:	682b      	ldr	r3, [r5, #0]
 800b2f6:	b103      	cbz	r3, 800b2fa <_write_r+0x1e>
 800b2f8:	6023      	str	r3, [r4, #0]
 800b2fa:	bd38      	pop	{r3, r4, r5, pc}
 800b2fc:	24004e78 	.word	0x24004e78

0800b300 <__errno>:
 800b300:	4b01      	ldr	r3, [pc, #4]	@ (800b308 <__errno+0x8>)
 800b302:	6818      	ldr	r0, [r3, #0]
 800b304:	4770      	bx	lr
 800b306:	bf00      	nop
 800b308:	24000020 	.word	0x24000020

0800b30c <__libc_init_array>:
 800b30c:	b570      	push	{r4, r5, r6, lr}
 800b30e:	4d0d      	ldr	r5, [pc, #52]	@ (800b344 <__libc_init_array+0x38>)
 800b310:	4c0d      	ldr	r4, [pc, #52]	@ (800b348 <__libc_init_array+0x3c>)
 800b312:	1b64      	subs	r4, r4, r5
 800b314:	10a4      	asrs	r4, r4, #2
 800b316:	2600      	movs	r6, #0
 800b318:	42a6      	cmp	r6, r4
 800b31a:	d109      	bne.n	800b330 <__libc_init_array+0x24>
 800b31c:	4d0b      	ldr	r5, [pc, #44]	@ (800b34c <__libc_init_array+0x40>)
 800b31e:	4c0c      	ldr	r4, [pc, #48]	@ (800b350 <__libc_init_array+0x44>)
 800b320:	f003 f8e0 	bl	800e4e4 <_init>
 800b324:	1b64      	subs	r4, r4, r5
 800b326:	10a4      	asrs	r4, r4, #2
 800b328:	2600      	movs	r6, #0
 800b32a:	42a6      	cmp	r6, r4
 800b32c:	d105      	bne.n	800b33a <__libc_init_array+0x2e>
 800b32e:	bd70      	pop	{r4, r5, r6, pc}
 800b330:	f855 3b04 	ldr.w	r3, [r5], #4
 800b334:	4798      	blx	r3
 800b336:	3601      	adds	r6, #1
 800b338:	e7ee      	b.n	800b318 <__libc_init_array+0xc>
 800b33a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b33e:	4798      	blx	r3
 800b340:	3601      	adds	r6, #1
 800b342:	e7f2      	b.n	800b32a <__libc_init_array+0x1e>
 800b344:	0800ea14 	.word	0x0800ea14
 800b348:	0800ea14 	.word	0x0800ea14
 800b34c:	0800ea14 	.word	0x0800ea14
 800b350:	0800ea18 	.word	0x0800ea18

0800b354 <__retarget_lock_init_recursive>:
 800b354:	4770      	bx	lr

0800b356 <__retarget_lock_acquire_recursive>:
 800b356:	4770      	bx	lr

0800b358 <__retarget_lock_release_recursive>:
 800b358:	4770      	bx	lr

0800b35a <memcpy>:
 800b35a:	440a      	add	r2, r1
 800b35c:	4291      	cmp	r1, r2
 800b35e:	f100 33ff 	add.w	r3, r0, #4294967295
 800b362:	d100      	bne.n	800b366 <memcpy+0xc>
 800b364:	4770      	bx	lr
 800b366:	b510      	push	{r4, lr}
 800b368:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b36c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b370:	4291      	cmp	r1, r2
 800b372:	d1f9      	bne.n	800b368 <memcpy+0xe>
 800b374:	bd10      	pop	{r4, pc}
	...

0800b378 <nanf>:
 800b378:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b380 <nanf+0x8>
 800b37c:	4770      	bx	lr
 800b37e:	bf00      	nop
 800b380:	7fc00000 	.word	0x7fc00000

0800b384 <quorem>:
 800b384:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b388:	6903      	ldr	r3, [r0, #16]
 800b38a:	690c      	ldr	r4, [r1, #16]
 800b38c:	42a3      	cmp	r3, r4
 800b38e:	4607      	mov	r7, r0
 800b390:	db7e      	blt.n	800b490 <quorem+0x10c>
 800b392:	3c01      	subs	r4, #1
 800b394:	f101 0814 	add.w	r8, r1, #20
 800b398:	00a3      	lsls	r3, r4, #2
 800b39a:	f100 0514 	add.w	r5, r0, #20
 800b39e:	9300      	str	r3, [sp, #0]
 800b3a0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b3a4:	9301      	str	r3, [sp, #4]
 800b3a6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b3aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b3ae:	3301      	adds	r3, #1
 800b3b0:	429a      	cmp	r2, r3
 800b3b2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b3b6:	fbb2 f6f3 	udiv	r6, r2, r3
 800b3ba:	d32e      	bcc.n	800b41a <quorem+0x96>
 800b3bc:	f04f 0a00 	mov.w	sl, #0
 800b3c0:	46c4      	mov	ip, r8
 800b3c2:	46ae      	mov	lr, r5
 800b3c4:	46d3      	mov	fp, sl
 800b3c6:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b3ca:	b298      	uxth	r0, r3
 800b3cc:	fb06 a000 	mla	r0, r6, r0, sl
 800b3d0:	0c02      	lsrs	r2, r0, #16
 800b3d2:	0c1b      	lsrs	r3, r3, #16
 800b3d4:	fb06 2303 	mla	r3, r6, r3, r2
 800b3d8:	f8de 2000 	ldr.w	r2, [lr]
 800b3dc:	b280      	uxth	r0, r0
 800b3de:	b292      	uxth	r2, r2
 800b3e0:	1a12      	subs	r2, r2, r0
 800b3e2:	445a      	add	r2, fp
 800b3e4:	f8de 0000 	ldr.w	r0, [lr]
 800b3e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b3ec:	b29b      	uxth	r3, r3
 800b3ee:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b3f2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b3f6:	b292      	uxth	r2, r2
 800b3f8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b3fc:	45e1      	cmp	r9, ip
 800b3fe:	f84e 2b04 	str.w	r2, [lr], #4
 800b402:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b406:	d2de      	bcs.n	800b3c6 <quorem+0x42>
 800b408:	9b00      	ldr	r3, [sp, #0]
 800b40a:	58eb      	ldr	r3, [r5, r3]
 800b40c:	b92b      	cbnz	r3, 800b41a <quorem+0x96>
 800b40e:	9b01      	ldr	r3, [sp, #4]
 800b410:	3b04      	subs	r3, #4
 800b412:	429d      	cmp	r5, r3
 800b414:	461a      	mov	r2, r3
 800b416:	d32f      	bcc.n	800b478 <quorem+0xf4>
 800b418:	613c      	str	r4, [r7, #16]
 800b41a:	4638      	mov	r0, r7
 800b41c:	f001 f8a0 	bl	800c560 <__mcmp>
 800b420:	2800      	cmp	r0, #0
 800b422:	db25      	blt.n	800b470 <quorem+0xec>
 800b424:	4629      	mov	r1, r5
 800b426:	2000      	movs	r0, #0
 800b428:	f858 2b04 	ldr.w	r2, [r8], #4
 800b42c:	f8d1 c000 	ldr.w	ip, [r1]
 800b430:	fa1f fe82 	uxth.w	lr, r2
 800b434:	fa1f f38c 	uxth.w	r3, ip
 800b438:	eba3 030e 	sub.w	r3, r3, lr
 800b43c:	4403      	add	r3, r0
 800b43e:	0c12      	lsrs	r2, r2, #16
 800b440:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b444:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b448:	b29b      	uxth	r3, r3
 800b44a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b44e:	45c1      	cmp	r9, r8
 800b450:	f841 3b04 	str.w	r3, [r1], #4
 800b454:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b458:	d2e6      	bcs.n	800b428 <quorem+0xa4>
 800b45a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b45e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b462:	b922      	cbnz	r2, 800b46e <quorem+0xea>
 800b464:	3b04      	subs	r3, #4
 800b466:	429d      	cmp	r5, r3
 800b468:	461a      	mov	r2, r3
 800b46a:	d30b      	bcc.n	800b484 <quorem+0x100>
 800b46c:	613c      	str	r4, [r7, #16]
 800b46e:	3601      	adds	r6, #1
 800b470:	4630      	mov	r0, r6
 800b472:	b003      	add	sp, #12
 800b474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b478:	6812      	ldr	r2, [r2, #0]
 800b47a:	3b04      	subs	r3, #4
 800b47c:	2a00      	cmp	r2, #0
 800b47e:	d1cb      	bne.n	800b418 <quorem+0x94>
 800b480:	3c01      	subs	r4, #1
 800b482:	e7c6      	b.n	800b412 <quorem+0x8e>
 800b484:	6812      	ldr	r2, [r2, #0]
 800b486:	3b04      	subs	r3, #4
 800b488:	2a00      	cmp	r2, #0
 800b48a:	d1ef      	bne.n	800b46c <quorem+0xe8>
 800b48c:	3c01      	subs	r4, #1
 800b48e:	e7ea      	b.n	800b466 <quorem+0xe2>
 800b490:	2000      	movs	r0, #0
 800b492:	e7ee      	b.n	800b472 <quorem+0xee>
 800b494:	0000      	movs	r0, r0
	...

0800b498 <_dtoa_r>:
 800b498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b49c:	ed2d 8b02 	vpush	{d8}
 800b4a0:	69c7      	ldr	r7, [r0, #28]
 800b4a2:	b091      	sub	sp, #68	@ 0x44
 800b4a4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b4a8:	ec55 4b10 	vmov	r4, r5, d0
 800b4ac:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800b4ae:	9107      	str	r1, [sp, #28]
 800b4b0:	4681      	mov	r9, r0
 800b4b2:	9209      	str	r2, [sp, #36]	@ 0x24
 800b4b4:	930d      	str	r3, [sp, #52]	@ 0x34
 800b4b6:	b97f      	cbnz	r7, 800b4d8 <_dtoa_r+0x40>
 800b4b8:	2010      	movs	r0, #16
 800b4ba:	f7fe fcef 	bl	8009e9c <malloc>
 800b4be:	4602      	mov	r2, r0
 800b4c0:	f8c9 001c 	str.w	r0, [r9, #28]
 800b4c4:	b920      	cbnz	r0, 800b4d0 <_dtoa_r+0x38>
 800b4c6:	4ba0      	ldr	r3, [pc, #640]	@ (800b748 <_dtoa_r+0x2b0>)
 800b4c8:	21ef      	movs	r1, #239	@ 0xef
 800b4ca:	48a0      	ldr	r0, [pc, #640]	@ (800b74c <_dtoa_r+0x2b4>)
 800b4cc:	f7fe fcc8 	bl	8009e60 <__assert_func>
 800b4d0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b4d4:	6007      	str	r7, [r0, #0]
 800b4d6:	60c7      	str	r7, [r0, #12]
 800b4d8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b4dc:	6819      	ldr	r1, [r3, #0]
 800b4de:	b159      	cbz	r1, 800b4f8 <_dtoa_r+0x60>
 800b4e0:	685a      	ldr	r2, [r3, #4]
 800b4e2:	604a      	str	r2, [r1, #4]
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	4093      	lsls	r3, r2
 800b4e8:	608b      	str	r3, [r1, #8]
 800b4ea:	4648      	mov	r0, r9
 800b4ec:	f000 fdb4 	bl	800c058 <_Bfree>
 800b4f0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	601a      	str	r2, [r3, #0]
 800b4f8:	1e2b      	subs	r3, r5, #0
 800b4fa:	bfbb      	ittet	lt
 800b4fc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b500:	9303      	strlt	r3, [sp, #12]
 800b502:	2300      	movge	r3, #0
 800b504:	2201      	movlt	r2, #1
 800b506:	bfac      	ite	ge
 800b508:	6033      	strge	r3, [r6, #0]
 800b50a:	6032      	strlt	r2, [r6, #0]
 800b50c:	4b90      	ldr	r3, [pc, #576]	@ (800b750 <_dtoa_r+0x2b8>)
 800b50e:	9e03      	ldr	r6, [sp, #12]
 800b510:	43b3      	bics	r3, r6
 800b512:	d110      	bne.n	800b536 <_dtoa_r+0x9e>
 800b514:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b516:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b51a:	6013      	str	r3, [r2, #0]
 800b51c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800b520:	4323      	orrs	r3, r4
 800b522:	f000 84de 	beq.w	800bee2 <_dtoa_r+0xa4a>
 800b526:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b528:	4f8a      	ldr	r7, [pc, #552]	@ (800b754 <_dtoa_r+0x2bc>)
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	f000 84e0 	beq.w	800bef0 <_dtoa_r+0xa58>
 800b530:	1cfb      	adds	r3, r7, #3
 800b532:	f000 bcdb 	b.w	800beec <_dtoa_r+0xa54>
 800b536:	ed9d 8b02 	vldr	d8, [sp, #8]
 800b53a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b53e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b542:	d10a      	bne.n	800b55a <_dtoa_r+0xc2>
 800b544:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b546:	2301      	movs	r3, #1
 800b548:	6013      	str	r3, [r2, #0]
 800b54a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b54c:	b113      	cbz	r3, 800b554 <_dtoa_r+0xbc>
 800b54e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800b550:	4b81      	ldr	r3, [pc, #516]	@ (800b758 <_dtoa_r+0x2c0>)
 800b552:	6013      	str	r3, [r2, #0]
 800b554:	4f81      	ldr	r7, [pc, #516]	@ (800b75c <_dtoa_r+0x2c4>)
 800b556:	f000 bccb 	b.w	800bef0 <_dtoa_r+0xa58>
 800b55a:	aa0e      	add	r2, sp, #56	@ 0x38
 800b55c:	a90f      	add	r1, sp, #60	@ 0x3c
 800b55e:	4648      	mov	r0, r9
 800b560:	eeb0 0b48 	vmov.f64	d0, d8
 800b564:	f001 f91c 	bl	800c7a0 <__d2b>
 800b568:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800b56c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b56e:	9001      	str	r0, [sp, #4]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d045      	beq.n	800b600 <_dtoa_r+0x168>
 800b574:	eeb0 7b48 	vmov.f64	d7, d8
 800b578:	ee18 1a90 	vmov	r1, s17
 800b57c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b580:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800b584:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800b588:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800b58c:	2500      	movs	r5, #0
 800b58e:	ee07 1a90 	vmov	s15, r1
 800b592:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800b596:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800b730 <_dtoa_r+0x298>
 800b59a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b59e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800b738 <_dtoa_r+0x2a0>
 800b5a2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b5a6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800b740 <_dtoa_r+0x2a8>
 800b5aa:	ee07 3a90 	vmov	s15, r3
 800b5ae:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800b5b2:	eeb0 7b46 	vmov.f64	d7, d6
 800b5b6:	eea4 7b05 	vfma.f64	d7, d4, d5
 800b5ba:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800b5be:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b5c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5c6:	ee16 8a90 	vmov	r8, s13
 800b5ca:	d508      	bpl.n	800b5de <_dtoa_r+0x146>
 800b5cc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800b5d0:	eeb4 6b47 	vcmp.f64	d6, d7
 800b5d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5d8:	bf18      	it	ne
 800b5da:	f108 38ff 	addne.w	r8, r8, #4294967295
 800b5de:	f1b8 0f16 	cmp.w	r8, #22
 800b5e2:	d82b      	bhi.n	800b63c <_dtoa_r+0x1a4>
 800b5e4:	495e      	ldr	r1, [pc, #376]	@ (800b760 <_dtoa_r+0x2c8>)
 800b5e6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800b5ea:	ed91 7b00 	vldr	d7, [r1]
 800b5ee:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b5f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5f6:	d501      	bpl.n	800b5fc <_dtoa_r+0x164>
 800b5f8:	f108 38ff 	add.w	r8, r8, #4294967295
 800b5fc:	2100      	movs	r1, #0
 800b5fe:	e01e      	b.n	800b63e <_dtoa_r+0x1a6>
 800b600:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b602:	4413      	add	r3, r2
 800b604:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800b608:	2920      	cmp	r1, #32
 800b60a:	bfc1      	itttt	gt
 800b60c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800b610:	408e      	lslgt	r6, r1
 800b612:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800b616:	fa24 f101 	lsrgt.w	r1, r4, r1
 800b61a:	bfd6      	itet	le
 800b61c:	f1c1 0120 	rsble	r1, r1, #32
 800b620:	4331      	orrgt	r1, r6
 800b622:	fa04 f101 	lslle.w	r1, r4, r1
 800b626:	ee07 1a90 	vmov	s15, r1
 800b62a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b62e:	3b01      	subs	r3, #1
 800b630:	ee17 1a90 	vmov	r1, s15
 800b634:	2501      	movs	r5, #1
 800b636:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800b63a:	e7a8      	b.n	800b58e <_dtoa_r+0xf6>
 800b63c:	2101      	movs	r1, #1
 800b63e:	1ad2      	subs	r2, r2, r3
 800b640:	1e53      	subs	r3, r2, #1
 800b642:	9306      	str	r3, [sp, #24]
 800b644:	bf45      	ittet	mi
 800b646:	f1c2 0301 	rsbmi	r3, r2, #1
 800b64a:	9305      	strmi	r3, [sp, #20]
 800b64c:	2300      	movpl	r3, #0
 800b64e:	2300      	movmi	r3, #0
 800b650:	bf4c      	ite	mi
 800b652:	9306      	strmi	r3, [sp, #24]
 800b654:	9305      	strpl	r3, [sp, #20]
 800b656:	f1b8 0f00 	cmp.w	r8, #0
 800b65a:	910c      	str	r1, [sp, #48]	@ 0x30
 800b65c:	db18      	blt.n	800b690 <_dtoa_r+0x1f8>
 800b65e:	9b06      	ldr	r3, [sp, #24]
 800b660:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800b664:	4443      	add	r3, r8
 800b666:	9306      	str	r3, [sp, #24]
 800b668:	2300      	movs	r3, #0
 800b66a:	9a07      	ldr	r2, [sp, #28]
 800b66c:	2a09      	cmp	r2, #9
 800b66e:	d849      	bhi.n	800b704 <_dtoa_r+0x26c>
 800b670:	2a05      	cmp	r2, #5
 800b672:	bfc4      	itt	gt
 800b674:	3a04      	subgt	r2, #4
 800b676:	9207      	strgt	r2, [sp, #28]
 800b678:	9a07      	ldr	r2, [sp, #28]
 800b67a:	f1a2 0202 	sub.w	r2, r2, #2
 800b67e:	bfcc      	ite	gt
 800b680:	2400      	movgt	r4, #0
 800b682:	2401      	movle	r4, #1
 800b684:	2a03      	cmp	r2, #3
 800b686:	d848      	bhi.n	800b71a <_dtoa_r+0x282>
 800b688:	e8df f002 	tbb	[pc, r2]
 800b68c:	3a2c2e0b 	.word	0x3a2c2e0b
 800b690:	9b05      	ldr	r3, [sp, #20]
 800b692:	2200      	movs	r2, #0
 800b694:	eba3 0308 	sub.w	r3, r3, r8
 800b698:	9305      	str	r3, [sp, #20]
 800b69a:	920a      	str	r2, [sp, #40]	@ 0x28
 800b69c:	f1c8 0300 	rsb	r3, r8, #0
 800b6a0:	e7e3      	b.n	800b66a <_dtoa_r+0x1d2>
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	9208      	str	r2, [sp, #32]
 800b6a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b6a8:	2a00      	cmp	r2, #0
 800b6aa:	dc39      	bgt.n	800b720 <_dtoa_r+0x288>
 800b6ac:	f04f 0b01 	mov.w	fp, #1
 800b6b0:	46da      	mov	sl, fp
 800b6b2:	465a      	mov	r2, fp
 800b6b4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800b6b8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800b6bc:	2100      	movs	r1, #0
 800b6be:	2004      	movs	r0, #4
 800b6c0:	f100 0614 	add.w	r6, r0, #20
 800b6c4:	4296      	cmp	r6, r2
 800b6c6:	d930      	bls.n	800b72a <_dtoa_r+0x292>
 800b6c8:	6079      	str	r1, [r7, #4]
 800b6ca:	4648      	mov	r0, r9
 800b6cc:	9304      	str	r3, [sp, #16]
 800b6ce:	f000 fc83 	bl	800bfd8 <_Balloc>
 800b6d2:	9b04      	ldr	r3, [sp, #16]
 800b6d4:	4607      	mov	r7, r0
 800b6d6:	2800      	cmp	r0, #0
 800b6d8:	d146      	bne.n	800b768 <_dtoa_r+0x2d0>
 800b6da:	4b22      	ldr	r3, [pc, #136]	@ (800b764 <_dtoa_r+0x2cc>)
 800b6dc:	4602      	mov	r2, r0
 800b6de:	f240 11af 	movw	r1, #431	@ 0x1af
 800b6e2:	e6f2      	b.n	800b4ca <_dtoa_r+0x32>
 800b6e4:	2201      	movs	r2, #1
 800b6e6:	e7dd      	b.n	800b6a4 <_dtoa_r+0x20c>
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	9208      	str	r2, [sp, #32]
 800b6ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b6ee:	eb08 0b02 	add.w	fp, r8, r2
 800b6f2:	f10b 0a01 	add.w	sl, fp, #1
 800b6f6:	4652      	mov	r2, sl
 800b6f8:	2a01      	cmp	r2, #1
 800b6fa:	bfb8      	it	lt
 800b6fc:	2201      	movlt	r2, #1
 800b6fe:	e7db      	b.n	800b6b8 <_dtoa_r+0x220>
 800b700:	2201      	movs	r2, #1
 800b702:	e7f2      	b.n	800b6ea <_dtoa_r+0x252>
 800b704:	2401      	movs	r4, #1
 800b706:	2200      	movs	r2, #0
 800b708:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800b70c:	f04f 3bff 	mov.w	fp, #4294967295
 800b710:	2100      	movs	r1, #0
 800b712:	46da      	mov	sl, fp
 800b714:	2212      	movs	r2, #18
 800b716:	9109      	str	r1, [sp, #36]	@ 0x24
 800b718:	e7ce      	b.n	800b6b8 <_dtoa_r+0x220>
 800b71a:	2201      	movs	r2, #1
 800b71c:	9208      	str	r2, [sp, #32]
 800b71e:	e7f5      	b.n	800b70c <_dtoa_r+0x274>
 800b720:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800b724:	46da      	mov	sl, fp
 800b726:	465a      	mov	r2, fp
 800b728:	e7c6      	b.n	800b6b8 <_dtoa_r+0x220>
 800b72a:	3101      	adds	r1, #1
 800b72c:	0040      	lsls	r0, r0, #1
 800b72e:	e7c7      	b.n	800b6c0 <_dtoa_r+0x228>
 800b730:	636f4361 	.word	0x636f4361
 800b734:	3fd287a7 	.word	0x3fd287a7
 800b738:	8b60c8b3 	.word	0x8b60c8b3
 800b73c:	3fc68a28 	.word	0x3fc68a28
 800b740:	509f79fb 	.word	0x509f79fb
 800b744:	3fd34413 	.word	0x3fd34413
 800b748:	0800e662 	.word	0x0800e662
 800b74c:	0800e679 	.word	0x0800e679
 800b750:	7ff00000 	.word	0x7ff00000
 800b754:	0800e65e 	.word	0x0800e65e
 800b758:	0800e62d 	.word	0x0800e62d
 800b75c:	0800e62c 	.word	0x0800e62c
 800b760:	0800e770 	.word	0x0800e770
 800b764:	0800e6d1 	.word	0x0800e6d1
 800b768:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800b76c:	f1ba 0f0e 	cmp.w	sl, #14
 800b770:	6010      	str	r0, [r2, #0]
 800b772:	d86f      	bhi.n	800b854 <_dtoa_r+0x3bc>
 800b774:	2c00      	cmp	r4, #0
 800b776:	d06d      	beq.n	800b854 <_dtoa_r+0x3bc>
 800b778:	f1b8 0f00 	cmp.w	r8, #0
 800b77c:	f340 80c2 	ble.w	800b904 <_dtoa_r+0x46c>
 800b780:	4aca      	ldr	r2, [pc, #808]	@ (800baac <_dtoa_r+0x614>)
 800b782:	f008 010f 	and.w	r1, r8, #15
 800b786:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800b78a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800b78e:	ed92 7b00 	vldr	d7, [r2]
 800b792:	ea4f 1128 	mov.w	r1, r8, asr #4
 800b796:	f000 80a9 	beq.w	800b8ec <_dtoa_r+0x454>
 800b79a:	4ac5      	ldr	r2, [pc, #788]	@ (800bab0 <_dtoa_r+0x618>)
 800b79c:	ed92 6b08 	vldr	d6, [r2, #32]
 800b7a0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800b7a4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800b7a8:	f001 010f 	and.w	r1, r1, #15
 800b7ac:	2203      	movs	r2, #3
 800b7ae:	48c0      	ldr	r0, [pc, #768]	@ (800bab0 <_dtoa_r+0x618>)
 800b7b0:	2900      	cmp	r1, #0
 800b7b2:	f040 809d 	bne.w	800b8f0 <_dtoa_r+0x458>
 800b7b6:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b7ba:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b7be:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b7c2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b7c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b7c8:	2900      	cmp	r1, #0
 800b7ca:	f000 80c1 	beq.w	800b950 <_dtoa_r+0x4b8>
 800b7ce:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800b7d2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b7d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7da:	f140 80b9 	bpl.w	800b950 <_dtoa_r+0x4b8>
 800b7de:	f1ba 0f00 	cmp.w	sl, #0
 800b7e2:	f000 80b5 	beq.w	800b950 <_dtoa_r+0x4b8>
 800b7e6:	f1bb 0f00 	cmp.w	fp, #0
 800b7ea:	dd31      	ble.n	800b850 <_dtoa_r+0x3b8>
 800b7ec:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800b7f0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b7f4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b7f8:	f108 31ff 	add.w	r1, r8, #4294967295
 800b7fc:	9104      	str	r1, [sp, #16]
 800b7fe:	3201      	adds	r2, #1
 800b800:	465c      	mov	r4, fp
 800b802:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b806:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800b80a:	ee07 2a90 	vmov	s15, r2
 800b80e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b812:	eea7 5b06 	vfma.f64	d5, d7, d6
 800b816:	ee15 2a90 	vmov	r2, s11
 800b81a:	ec51 0b15 	vmov	r0, r1, d5
 800b81e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800b822:	2c00      	cmp	r4, #0
 800b824:	f040 8098 	bne.w	800b958 <_dtoa_r+0x4c0>
 800b828:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800b82c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b830:	ec41 0b17 	vmov	d7, r0, r1
 800b834:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b83c:	f300 8261 	bgt.w	800bd02 <_dtoa_r+0x86a>
 800b840:	eeb1 7b47 	vneg.f64	d7, d7
 800b844:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b84c:	f100 80f5 	bmi.w	800ba3a <_dtoa_r+0x5a2>
 800b850:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b854:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b856:	2a00      	cmp	r2, #0
 800b858:	f2c0 812c 	blt.w	800bab4 <_dtoa_r+0x61c>
 800b85c:	f1b8 0f0e 	cmp.w	r8, #14
 800b860:	f300 8128 	bgt.w	800bab4 <_dtoa_r+0x61c>
 800b864:	4b91      	ldr	r3, [pc, #580]	@ (800baac <_dtoa_r+0x614>)
 800b866:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b86a:	ed93 6b00 	vldr	d6, [r3]
 800b86e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b870:	2b00      	cmp	r3, #0
 800b872:	da03      	bge.n	800b87c <_dtoa_r+0x3e4>
 800b874:	f1ba 0f00 	cmp.w	sl, #0
 800b878:	f340 80d2 	ble.w	800ba20 <_dtoa_r+0x588>
 800b87c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800b880:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b884:	463e      	mov	r6, r7
 800b886:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800b88a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800b88e:	ee15 3a10 	vmov	r3, s10
 800b892:	3330      	adds	r3, #48	@ 0x30
 800b894:	f806 3b01 	strb.w	r3, [r6], #1
 800b898:	1bf3      	subs	r3, r6, r7
 800b89a:	459a      	cmp	sl, r3
 800b89c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800b8a0:	eea3 7b46 	vfms.f64	d7, d3, d6
 800b8a4:	f040 80f8 	bne.w	800ba98 <_dtoa_r+0x600>
 800b8a8:	ee37 7b07 	vadd.f64	d7, d7, d7
 800b8ac:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b8b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8b4:	f300 80dd 	bgt.w	800ba72 <_dtoa_r+0x5da>
 800b8b8:	eeb4 7b46 	vcmp.f64	d7, d6
 800b8bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8c0:	d104      	bne.n	800b8cc <_dtoa_r+0x434>
 800b8c2:	ee15 3a10 	vmov	r3, s10
 800b8c6:	07db      	lsls	r3, r3, #31
 800b8c8:	f100 80d3 	bmi.w	800ba72 <_dtoa_r+0x5da>
 800b8cc:	9901      	ldr	r1, [sp, #4]
 800b8ce:	4648      	mov	r0, r9
 800b8d0:	f000 fbc2 	bl	800c058 <_Bfree>
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b8d8:	7033      	strb	r3, [r6, #0]
 800b8da:	f108 0301 	add.w	r3, r8, #1
 800b8de:	6013      	str	r3, [r2, #0]
 800b8e0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	f000 8304 	beq.w	800bef0 <_dtoa_r+0xa58>
 800b8e8:	601e      	str	r6, [r3, #0]
 800b8ea:	e301      	b.n	800bef0 <_dtoa_r+0xa58>
 800b8ec:	2202      	movs	r2, #2
 800b8ee:	e75e      	b.n	800b7ae <_dtoa_r+0x316>
 800b8f0:	07cc      	lsls	r4, r1, #31
 800b8f2:	d504      	bpl.n	800b8fe <_dtoa_r+0x466>
 800b8f4:	ed90 6b00 	vldr	d6, [r0]
 800b8f8:	3201      	adds	r2, #1
 800b8fa:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b8fe:	1049      	asrs	r1, r1, #1
 800b900:	3008      	adds	r0, #8
 800b902:	e755      	b.n	800b7b0 <_dtoa_r+0x318>
 800b904:	d022      	beq.n	800b94c <_dtoa_r+0x4b4>
 800b906:	f1c8 0100 	rsb	r1, r8, #0
 800b90a:	4a68      	ldr	r2, [pc, #416]	@ (800baac <_dtoa_r+0x614>)
 800b90c:	f001 000f 	and.w	r0, r1, #15
 800b910:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800b914:	ed92 7b00 	vldr	d7, [r2]
 800b918:	ee28 7b07 	vmul.f64	d7, d8, d7
 800b91c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b920:	4863      	ldr	r0, [pc, #396]	@ (800bab0 <_dtoa_r+0x618>)
 800b922:	1109      	asrs	r1, r1, #4
 800b924:	2400      	movs	r4, #0
 800b926:	2202      	movs	r2, #2
 800b928:	b929      	cbnz	r1, 800b936 <_dtoa_r+0x49e>
 800b92a:	2c00      	cmp	r4, #0
 800b92c:	f43f af49 	beq.w	800b7c2 <_dtoa_r+0x32a>
 800b930:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b934:	e745      	b.n	800b7c2 <_dtoa_r+0x32a>
 800b936:	07ce      	lsls	r6, r1, #31
 800b938:	d505      	bpl.n	800b946 <_dtoa_r+0x4ae>
 800b93a:	ed90 6b00 	vldr	d6, [r0]
 800b93e:	3201      	adds	r2, #1
 800b940:	2401      	movs	r4, #1
 800b942:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b946:	1049      	asrs	r1, r1, #1
 800b948:	3008      	adds	r0, #8
 800b94a:	e7ed      	b.n	800b928 <_dtoa_r+0x490>
 800b94c:	2202      	movs	r2, #2
 800b94e:	e738      	b.n	800b7c2 <_dtoa_r+0x32a>
 800b950:	f8cd 8010 	str.w	r8, [sp, #16]
 800b954:	4654      	mov	r4, sl
 800b956:	e754      	b.n	800b802 <_dtoa_r+0x36a>
 800b958:	4a54      	ldr	r2, [pc, #336]	@ (800baac <_dtoa_r+0x614>)
 800b95a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800b95e:	ed12 4b02 	vldr	d4, [r2, #-8]
 800b962:	9a08      	ldr	r2, [sp, #32]
 800b964:	ec41 0b17 	vmov	d7, r0, r1
 800b968:	443c      	add	r4, r7
 800b96a:	b34a      	cbz	r2, 800b9c0 <_dtoa_r+0x528>
 800b96c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800b970:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800b974:	463e      	mov	r6, r7
 800b976:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800b97a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800b97e:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b982:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b986:	ee14 2a90 	vmov	r2, s9
 800b98a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b98e:	3230      	adds	r2, #48	@ 0x30
 800b990:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b994:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b99c:	f806 2b01 	strb.w	r2, [r6], #1
 800b9a0:	d438      	bmi.n	800ba14 <_dtoa_r+0x57c>
 800b9a2:	ee32 5b46 	vsub.f64	d5, d2, d6
 800b9a6:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800b9aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9ae:	d462      	bmi.n	800ba76 <_dtoa_r+0x5de>
 800b9b0:	42a6      	cmp	r6, r4
 800b9b2:	f43f af4d 	beq.w	800b850 <_dtoa_r+0x3b8>
 800b9b6:	ee27 7b03 	vmul.f64	d7, d7, d3
 800b9ba:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b9be:	e7e0      	b.n	800b982 <_dtoa_r+0x4ea>
 800b9c0:	4621      	mov	r1, r4
 800b9c2:	463e      	mov	r6, r7
 800b9c4:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b9c8:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800b9cc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b9d0:	ee14 2a90 	vmov	r2, s9
 800b9d4:	3230      	adds	r2, #48	@ 0x30
 800b9d6:	f806 2b01 	strb.w	r2, [r6], #1
 800b9da:	42a6      	cmp	r6, r4
 800b9dc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b9e0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b9e4:	d119      	bne.n	800ba1a <_dtoa_r+0x582>
 800b9e6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800b9ea:	ee37 4b05 	vadd.f64	d4, d7, d5
 800b9ee:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800b9f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9f6:	dc3e      	bgt.n	800ba76 <_dtoa_r+0x5de>
 800b9f8:	ee35 5b47 	vsub.f64	d5, d5, d7
 800b9fc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800ba00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba04:	f57f af24 	bpl.w	800b850 <_dtoa_r+0x3b8>
 800ba08:	460e      	mov	r6, r1
 800ba0a:	3901      	subs	r1, #1
 800ba0c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ba10:	2b30      	cmp	r3, #48	@ 0x30
 800ba12:	d0f9      	beq.n	800ba08 <_dtoa_r+0x570>
 800ba14:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ba18:	e758      	b.n	800b8cc <_dtoa_r+0x434>
 800ba1a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ba1e:	e7d5      	b.n	800b9cc <_dtoa_r+0x534>
 800ba20:	d10b      	bne.n	800ba3a <_dtoa_r+0x5a2>
 800ba22:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800ba26:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ba2a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ba2e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ba32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba36:	f2c0 8161 	blt.w	800bcfc <_dtoa_r+0x864>
 800ba3a:	2400      	movs	r4, #0
 800ba3c:	4625      	mov	r5, r4
 800ba3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba40:	43db      	mvns	r3, r3
 800ba42:	9304      	str	r3, [sp, #16]
 800ba44:	463e      	mov	r6, r7
 800ba46:	f04f 0800 	mov.w	r8, #0
 800ba4a:	4621      	mov	r1, r4
 800ba4c:	4648      	mov	r0, r9
 800ba4e:	f000 fb03 	bl	800c058 <_Bfree>
 800ba52:	2d00      	cmp	r5, #0
 800ba54:	d0de      	beq.n	800ba14 <_dtoa_r+0x57c>
 800ba56:	f1b8 0f00 	cmp.w	r8, #0
 800ba5a:	d005      	beq.n	800ba68 <_dtoa_r+0x5d0>
 800ba5c:	45a8      	cmp	r8, r5
 800ba5e:	d003      	beq.n	800ba68 <_dtoa_r+0x5d0>
 800ba60:	4641      	mov	r1, r8
 800ba62:	4648      	mov	r0, r9
 800ba64:	f000 faf8 	bl	800c058 <_Bfree>
 800ba68:	4629      	mov	r1, r5
 800ba6a:	4648      	mov	r0, r9
 800ba6c:	f000 faf4 	bl	800c058 <_Bfree>
 800ba70:	e7d0      	b.n	800ba14 <_dtoa_r+0x57c>
 800ba72:	f8cd 8010 	str.w	r8, [sp, #16]
 800ba76:	4633      	mov	r3, r6
 800ba78:	461e      	mov	r6, r3
 800ba7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ba7e:	2a39      	cmp	r2, #57	@ 0x39
 800ba80:	d106      	bne.n	800ba90 <_dtoa_r+0x5f8>
 800ba82:	429f      	cmp	r7, r3
 800ba84:	d1f8      	bne.n	800ba78 <_dtoa_r+0x5e0>
 800ba86:	9a04      	ldr	r2, [sp, #16]
 800ba88:	3201      	adds	r2, #1
 800ba8a:	9204      	str	r2, [sp, #16]
 800ba8c:	2230      	movs	r2, #48	@ 0x30
 800ba8e:	703a      	strb	r2, [r7, #0]
 800ba90:	781a      	ldrb	r2, [r3, #0]
 800ba92:	3201      	adds	r2, #1
 800ba94:	701a      	strb	r2, [r3, #0]
 800ba96:	e7bd      	b.n	800ba14 <_dtoa_r+0x57c>
 800ba98:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ba9c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800baa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baa4:	f47f aeef 	bne.w	800b886 <_dtoa_r+0x3ee>
 800baa8:	e710      	b.n	800b8cc <_dtoa_r+0x434>
 800baaa:	bf00      	nop
 800baac:	0800e770 	.word	0x0800e770
 800bab0:	0800e748 	.word	0x0800e748
 800bab4:	9908      	ldr	r1, [sp, #32]
 800bab6:	2900      	cmp	r1, #0
 800bab8:	f000 80e3 	beq.w	800bc82 <_dtoa_r+0x7ea>
 800babc:	9907      	ldr	r1, [sp, #28]
 800babe:	2901      	cmp	r1, #1
 800bac0:	f300 80c8 	bgt.w	800bc54 <_dtoa_r+0x7bc>
 800bac4:	2d00      	cmp	r5, #0
 800bac6:	f000 80c1 	beq.w	800bc4c <_dtoa_r+0x7b4>
 800baca:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800bace:	9e05      	ldr	r6, [sp, #20]
 800bad0:	461c      	mov	r4, r3
 800bad2:	9304      	str	r3, [sp, #16]
 800bad4:	9b05      	ldr	r3, [sp, #20]
 800bad6:	4413      	add	r3, r2
 800bad8:	9305      	str	r3, [sp, #20]
 800bada:	9b06      	ldr	r3, [sp, #24]
 800badc:	2101      	movs	r1, #1
 800bade:	4413      	add	r3, r2
 800bae0:	4648      	mov	r0, r9
 800bae2:	9306      	str	r3, [sp, #24]
 800bae4:	f000 fbb6 	bl	800c254 <__i2b>
 800bae8:	9b04      	ldr	r3, [sp, #16]
 800baea:	4605      	mov	r5, r0
 800baec:	b166      	cbz	r6, 800bb08 <_dtoa_r+0x670>
 800baee:	9a06      	ldr	r2, [sp, #24]
 800baf0:	2a00      	cmp	r2, #0
 800baf2:	dd09      	ble.n	800bb08 <_dtoa_r+0x670>
 800baf4:	42b2      	cmp	r2, r6
 800baf6:	9905      	ldr	r1, [sp, #20]
 800baf8:	bfa8      	it	ge
 800bafa:	4632      	movge	r2, r6
 800bafc:	1a89      	subs	r1, r1, r2
 800bafe:	9105      	str	r1, [sp, #20]
 800bb00:	9906      	ldr	r1, [sp, #24]
 800bb02:	1ab6      	subs	r6, r6, r2
 800bb04:	1a8a      	subs	r2, r1, r2
 800bb06:	9206      	str	r2, [sp, #24]
 800bb08:	b1fb      	cbz	r3, 800bb4a <_dtoa_r+0x6b2>
 800bb0a:	9a08      	ldr	r2, [sp, #32]
 800bb0c:	2a00      	cmp	r2, #0
 800bb0e:	f000 80bc 	beq.w	800bc8a <_dtoa_r+0x7f2>
 800bb12:	b19c      	cbz	r4, 800bb3c <_dtoa_r+0x6a4>
 800bb14:	4629      	mov	r1, r5
 800bb16:	4622      	mov	r2, r4
 800bb18:	4648      	mov	r0, r9
 800bb1a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bb1c:	f000 fc5a 	bl	800c3d4 <__pow5mult>
 800bb20:	9a01      	ldr	r2, [sp, #4]
 800bb22:	4601      	mov	r1, r0
 800bb24:	4605      	mov	r5, r0
 800bb26:	4648      	mov	r0, r9
 800bb28:	f000 fbaa 	bl	800c280 <__multiply>
 800bb2c:	9901      	ldr	r1, [sp, #4]
 800bb2e:	9004      	str	r0, [sp, #16]
 800bb30:	4648      	mov	r0, r9
 800bb32:	f000 fa91 	bl	800c058 <_Bfree>
 800bb36:	9a04      	ldr	r2, [sp, #16]
 800bb38:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb3a:	9201      	str	r2, [sp, #4]
 800bb3c:	1b1a      	subs	r2, r3, r4
 800bb3e:	d004      	beq.n	800bb4a <_dtoa_r+0x6b2>
 800bb40:	9901      	ldr	r1, [sp, #4]
 800bb42:	4648      	mov	r0, r9
 800bb44:	f000 fc46 	bl	800c3d4 <__pow5mult>
 800bb48:	9001      	str	r0, [sp, #4]
 800bb4a:	2101      	movs	r1, #1
 800bb4c:	4648      	mov	r0, r9
 800bb4e:	f000 fb81 	bl	800c254 <__i2b>
 800bb52:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb54:	4604      	mov	r4, r0
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	f000 81d0 	beq.w	800befc <_dtoa_r+0xa64>
 800bb5c:	461a      	mov	r2, r3
 800bb5e:	4601      	mov	r1, r0
 800bb60:	4648      	mov	r0, r9
 800bb62:	f000 fc37 	bl	800c3d4 <__pow5mult>
 800bb66:	9b07      	ldr	r3, [sp, #28]
 800bb68:	2b01      	cmp	r3, #1
 800bb6a:	4604      	mov	r4, r0
 800bb6c:	f300 8095 	bgt.w	800bc9a <_dtoa_r+0x802>
 800bb70:	9b02      	ldr	r3, [sp, #8]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	f040 808b 	bne.w	800bc8e <_dtoa_r+0x7f6>
 800bb78:	9b03      	ldr	r3, [sp, #12]
 800bb7a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800bb7e:	2a00      	cmp	r2, #0
 800bb80:	f040 8087 	bne.w	800bc92 <_dtoa_r+0x7fa>
 800bb84:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800bb88:	0d12      	lsrs	r2, r2, #20
 800bb8a:	0512      	lsls	r2, r2, #20
 800bb8c:	2a00      	cmp	r2, #0
 800bb8e:	f000 8082 	beq.w	800bc96 <_dtoa_r+0x7fe>
 800bb92:	9b05      	ldr	r3, [sp, #20]
 800bb94:	3301      	adds	r3, #1
 800bb96:	9305      	str	r3, [sp, #20]
 800bb98:	9b06      	ldr	r3, [sp, #24]
 800bb9a:	3301      	adds	r3, #1
 800bb9c:	9306      	str	r3, [sp, #24]
 800bb9e:	2301      	movs	r3, #1
 800bba0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bba2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	f000 81af 	beq.w	800bf08 <_dtoa_r+0xa70>
 800bbaa:	6922      	ldr	r2, [r4, #16]
 800bbac:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800bbb0:	6910      	ldr	r0, [r2, #16]
 800bbb2:	f000 fb03 	bl	800c1bc <__hi0bits>
 800bbb6:	f1c0 0020 	rsb	r0, r0, #32
 800bbba:	9b06      	ldr	r3, [sp, #24]
 800bbbc:	4418      	add	r0, r3
 800bbbe:	f010 001f 	ands.w	r0, r0, #31
 800bbc2:	d076      	beq.n	800bcb2 <_dtoa_r+0x81a>
 800bbc4:	f1c0 0220 	rsb	r2, r0, #32
 800bbc8:	2a04      	cmp	r2, #4
 800bbca:	dd69      	ble.n	800bca0 <_dtoa_r+0x808>
 800bbcc:	9b05      	ldr	r3, [sp, #20]
 800bbce:	f1c0 001c 	rsb	r0, r0, #28
 800bbd2:	4403      	add	r3, r0
 800bbd4:	9305      	str	r3, [sp, #20]
 800bbd6:	9b06      	ldr	r3, [sp, #24]
 800bbd8:	4406      	add	r6, r0
 800bbda:	4403      	add	r3, r0
 800bbdc:	9306      	str	r3, [sp, #24]
 800bbde:	9b05      	ldr	r3, [sp, #20]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	dd05      	ble.n	800bbf0 <_dtoa_r+0x758>
 800bbe4:	9901      	ldr	r1, [sp, #4]
 800bbe6:	461a      	mov	r2, r3
 800bbe8:	4648      	mov	r0, r9
 800bbea:	f000 fc4d 	bl	800c488 <__lshift>
 800bbee:	9001      	str	r0, [sp, #4]
 800bbf0:	9b06      	ldr	r3, [sp, #24]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	dd05      	ble.n	800bc02 <_dtoa_r+0x76a>
 800bbf6:	4621      	mov	r1, r4
 800bbf8:	461a      	mov	r2, r3
 800bbfa:	4648      	mov	r0, r9
 800bbfc:	f000 fc44 	bl	800c488 <__lshift>
 800bc00:	4604      	mov	r4, r0
 800bc02:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d056      	beq.n	800bcb6 <_dtoa_r+0x81e>
 800bc08:	9801      	ldr	r0, [sp, #4]
 800bc0a:	4621      	mov	r1, r4
 800bc0c:	f000 fca8 	bl	800c560 <__mcmp>
 800bc10:	2800      	cmp	r0, #0
 800bc12:	da50      	bge.n	800bcb6 <_dtoa_r+0x81e>
 800bc14:	f108 33ff 	add.w	r3, r8, #4294967295
 800bc18:	9304      	str	r3, [sp, #16]
 800bc1a:	9901      	ldr	r1, [sp, #4]
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	220a      	movs	r2, #10
 800bc20:	4648      	mov	r0, r9
 800bc22:	f000 fa3b 	bl	800c09c <__multadd>
 800bc26:	9b08      	ldr	r3, [sp, #32]
 800bc28:	9001      	str	r0, [sp, #4]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	f000 816e 	beq.w	800bf0c <_dtoa_r+0xa74>
 800bc30:	4629      	mov	r1, r5
 800bc32:	2300      	movs	r3, #0
 800bc34:	220a      	movs	r2, #10
 800bc36:	4648      	mov	r0, r9
 800bc38:	f000 fa30 	bl	800c09c <__multadd>
 800bc3c:	f1bb 0f00 	cmp.w	fp, #0
 800bc40:	4605      	mov	r5, r0
 800bc42:	dc64      	bgt.n	800bd0e <_dtoa_r+0x876>
 800bc44:	9b07      	ldr	r3, [sp, #28]
 800bc46:	2b02      	cmp	r3, #2
 800bc48:	dc3e      	bgt.n	800bcc8 <_dtoa_r+0x830>
 800bc4a:	e060      	b.n	800bd0e <_dtoa_r+0x876>
 800bc4c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bc4e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800bc52:	e73c      	b.n	800bace <_dtoa_r+0x636>
 800bc54:	f10a 34ff 	add.w	r4, sl, #4294967295
 800bc58:	42a3      	cmp	r3, r4
 800bc5a:	bfbf      	itttt	lt
 800bc5c:	1ae2      	sublt	r2, r4, r3
 800bc5e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800bc60:	189b      	addlt	r3, r3, r2
 800bc62:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800bc64:	bfae      	itee	ge
 800bc66:	1b1c      	subge	r4, r3, r4
 800bc68:	4623      	movlt	r3, r4
 800bc6a:	2400      	movlt	r4, #0
 800bc6c:	f1ba 0f00 	cmp.w	sl, #0
 800bc70:	bfb5      	itete	lt
 800bc72:	9a05      	ldrlt	r2, [sp, #20]
 800bc74:	9e05      	ldrge	r6, [sp, #20]
 800bc76:	eba2 060a 	sublt.w	r6, r2, sl
 800bc7a:	4652      	movge	r2, sl
 800bc7c:	bfb8      	it	lt
 800bc7e:	2200      	movlt	r2, #0
 800bc80:	e727      	b.n	800bad2 <_dtoa_r+0x63a>
 800bc82:	9e05      	ldr	r6, [sp, #20]
 800bc84:	9d08      	ldr	r5, [sp, #32]
 800bc86:	461c      	mov	r4, r3
 800bc88:	e730      	b.n	800baec <_dtoa_r+0x654>
 800bc8a:	461a      	mov	r2, r3
 800bc8c:	e758      	b.n	800bb40 <_dtoa_r+0x6a8>
 800bc8e:	2300      	movs	r3, #0
 800bc90:	e786      	b.n	800bba0 <_dtoa_r+0x708>
 800bc92:	9b02      	ldr	r3, [sp, #8]
 800bc94:	e784      	b.n	800bba0 <_dtoa_r+0x708>
 800bc96:	920b      	str	r2, [sp, #44]	@ 0x2c
 800bc98:	e783      	b.n	800bba2 <_dtoa_r+0x70a>
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bc9e:	e784      	b.n	800bbaa <_dtoa_r+0x712>
 800bca0:	d09d      	beq.n	800bbde <_dtoa_r+0x746>
 800bca2:	9b05      	ldr	r3, [sp, #20]
 800bca4:	321c      	adds	r2, #28
 800bca6:	4413      	add	r3, r2
 800bca8:	9305      	str	r3, [sp, #20]
 800bcaa:	9b06      	ldr	r3, [sp, #24]
 800bcac:	4416      	add	r6, r2
 800bcae:	4413      	add	r3, r2
 800bcb0:	e794      	b.n	800bbdc <_dtoa_r+0x744>
 800bcb2:	4602      	mov	r2, r0
 800bcb4:	e7f5      	b.n	800bca2 <_dtoa_r+0x80a>
 800bcb6:	f1ba 0f00 	cmp.w	sl, #0
 800bcba:	f8cd 8010 	str.w	r8, [sp, #16]
 800bcbe:	46d3      	mov	fp, sl
 800bcc0:	dc21      	bgt.n	800bd06 <_dtoa_r+0x86e>
 800bcc2:	9b07      	ldr	r3, [sp, #28]
 800bcc4:	2b02      	cmp	r3, #2
 800bcc6:	dd1e      	ble.n	800bd06 <_dtoa_r+0x86e>
 800bcc8:	f1bb 0f00 	cmp.w	fp, #0
 800bccc:	f47f aeb7 	bne.w	800ba3e <_dtoa_r+0x5a6>
 800bcd0:	4621      	mov	r1, r4
 800bcd2:	465b      	mov	r3, fp
 800bcd4:	2205      	movs	r2, #5
 800bcd6:	4648      	mov	r0, r9
 800bcd8:	f000 f9e0 	bl	800c09c <__multadd>
 800bcdc:	4601      	mov	r1, r0
 800bcde:	4604      	mov	r4, r0
 800bce0:	9801      	ldr	r0, [sp, #4]
 800bce2:	f000 fc3d 	bl	800c560 <__mcmp>
 800bce6:	2800      	cmp	r0, #0
 800bce8:	f77f aea9 	ble.w	800ba3e <_dtoa_r+0x5a6>
 800bcec:	463e      	mov	r6, r7
 800bcee:	2331      	movs	r3, #49	@ 0x31
 800bcf0:	f806 3b01 	strb.w	r3, [r6], #1
 800bcf4:	9b04      	ldr	r3, [sp, #16]
 800bcf6:	3301      	adds	r3, #1
 800bcf8:	9304      	str	r3, [sp, #16]
 800bcfa:	e6a4      	b.n	800ba46 <_dtoa_r+0x5ae>
 800bcfc:	f8cd 8010 	str.w	r8, [sp, #16]
 800bd00:	4654      	mov	r4, sl
 800bd02:	4625      	mov	r5, r4
 800bd04:	e7f2      	b.n	800bcec <_dtoa_r+0x854>
 800bd06:	9b08      	ldr	r3, [sp, #32]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	f000 8103 	beq.w	800bf14 <_dtoa_r+0xa7c>
 800bd0e:	2e00      	cmp	r6, #0
 800bd10:	dd05      	ble.n	800bd1e <_dtoa_r+0x886>
 800bd12:	4629      	mov	r1, r5
 800bd14:	4632      	mov	r2, r6
 800bd16:	4648      	mov	r0, r9
 800bd18:	f000 fbb6 	bl	800c488 <__lshift>
 800bd1c:	4605      	mov	r5, r0
 800bd1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d058      	beq.n	800bdd6 <_dtoa_r+0x93e>
 800bd24:	6869      	ldr	r1, [r5, #4]
 800bd26:	4648      	mov	r0, r9
 800bd28:	f000 f956 	bl	800bfd8 <_Balloc>
 800bd2c:	4606      	mov	r6, r0
 800bd2e:	b928      	cbnz	r0, 800bd3c <_dtoa_r+0x8a4>
 800bd30:	4b82      	ldr	r3, [pc, #520]	@ (800bf3c <_dtoa_r+0xaa4>)
 800bd32:	4602      	mov	r2, r0
 800bd34:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bd38:	f7ff bbc7 	b.w	800b4ca <_dtoa_r+0x32>
 800bd3c:	692a      	ldr	r2, [r5, #16]
 800bd3e:	3202      	adds	r2, #2
 800bd40:	0092      	lsls	r2, r2, #2
 800bd42:	f105 010c 	add.w	r1, r5, #12
 800bd46:	300c      	adds	r0, #12
 800bd48:	f7ff fb07 	bl	800b35a <memcpy>
 800bd4c:	2201      	movs	r2, #1
 800bd4e:	4631      	mov	r1, r6
 800bd50:	4648      	mov	r0, r9
 800bd52:	f000 fb99 	bl	800c488 <__lshift>
 800bd56:	1c7b      	adds	r3, r7, #1
 800bd58:	9305      	str	r3, [sp, #20]
 800bd5a:	eb07 030b 	add.w	r3, r7, fp
 800bd5e:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd60:	9b02      	ldr	r3, [sp, #8]
 800bd62:	f003 0301 	and.w	r3, r3, #1
 800bd66:	46a8      	mov	r8, r5
 800bd68:	9308      	str	r3, [sp, #32]
 800bd6a:	4605      	mov	r5, r0
 800bd6c:	9b05      	ldr	r3, [sp, #20]
 800bd6e:	9801      	ldr	r0, [sp, #4]
 800bd70:	4621      	mov	r1, r4
 800bd72:	f103 3bff 	add.w	fp, r3, #4294967295
 800bd76:	f7ff fb05 	bl	800b384 <quorem>
 800bd7a:	4641      	mov	r1, r8
 800bd7c:	9002      	str	r0, [sp, #8]
 800bd7e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800bd82:	9801      	ldr	r0, [sp, #4]
 800bd84:	f000 fbec 	bl	800c560 <__mcmp>
 800bd88:	462a      	mov	r2, r5
 800bd8a:	9006      	str	r0, [sp, #24]
 800bd8c:	4621      	mov	r1, r4
 800bd8e:	4648      	mov	r0, r9
 800bd90:	f000 fc02 	bl	800c598 <__mdiff>
 800bd94:	68c2      	ldr	r2, [r0, #12]
 800bd96:	4606      	mov	r6, r0
 800bd98:	b9fa      	cbnz	r2, 800bdda <_dtoa_r+0x942>
 800bd9a:	4601      	mov	r1, r0
 800bd9c:	9801      	ldr	r0, [sp, #4]
 800bd9e:	f000 fbdf 	bl	800c560 <__mcmp>
 800bda2:	4602      	mov	r2, r0
 800bda4:	4631      	mov	r1, r6
 800bda6:	4648      	mov	r0, r9
 800bda8:	920a      	str	r2, [sp, #40]	@ 0x28
 800bdaa:	f000 f955 	bl	800c058 <_Bfree>
 800bdae:	9b07      	ldr	r3, [sp, #28]
 800bdb0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bdb2:	9e05      	ldr	r6, [sp, #20]
 800bdb4:	ea43 0102 	orr.w	r1, r3, r2
 800bdb8:	9b08      	ldr	r3, [sp, #32]
 800bdba:	4319      	orrs	r1, r3
 800bdbc:	d10f      	bne.n	800bdde <_dtoa_r+0x946>
 800bdbe:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800bdc2:	d028      	beq.n	800be16 <_dtoa_r+0x97e>
 800bdc4:	9b06      	ldr	r3, [sp, #24]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	dd02      	ble.n	800bdd0 <_dtoa_r+0x938>
 800bdca:	9b02      	ldr	r3, [sp, #8]
 800bdcc:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800bdd0:	f88b a000 	strb.w	sl, [fp]
 800bdd4:	e639      	b.n	800ba4a <_dtoa_r+0x5b2>
 800bdd6:	4628      	mov	r0, r5
 800bdd8:	e7bd      	b.n	800bd56 <_dtoa_r+0x8be>
 800bdda:	2201      	movs	r2, #1
 800bddc:	e7e2      	b.n	800bda4 <_dtoa_r+0x90c>
 800bdde:	9b06      	ldr	r3, [sp, #24]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	db04      	blt.n	800bdee <_dtoa_r+0x956>
 800bde4:	9907      	ldr	r1, [sp, #28]
 800bde6:	430b      	orrs	r3, r1
 800bde8:	9908      	ldr	r1, [sp, #32]
 800bdea:	430b      	orrs	r3, r1
 800bdec:	d120      	bne.n	800be30 <_dtoa_r+0x998>
 800bdee:	2a00      	cmp	r2, #0
 800bdf0:	ddee      	ble.n	800bdd0 <_dtoa_r+0x938>
 800bdf2:	9901      	ldr	r1, [sp, #4]
 800bdf4:	2201      	movs	r2, #1
 800bdf6:	4648      	mov	r0, r9
 800bdf8:	f000 fb46 	bl	800c488 <__lshift>
 800bdfc:	4621      	mov	r1, r4
 800bdfe:	9001      	str	r0, [sp, #4]
 800be00:	f000 fbae 	bl	800c560 <__mcmp>
 800be04:	2800      	cmp	r0, #0
 800be06:	dc03      	bgt.n	800be10 <_dtoa_r+0x978>
 800be08:	d1e2      	bne.n	800bdd0 <_dtoa_r+0x938>
 800be0a:	f01a 0f01 	tst.w	sl, #1
 800be0e:	d0df      	beq.n	800bdd0 <_dtoa_r+0x938>
 800be10:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800be14:	d1d9      	bne.n	800bdca <_dtoa_r+0x932>
 800be16:	2339      	movs	r3, #57	@ 0x39
 800be18:	f88b 3000 	strb.w	r3, [fp]
 800be1c:	4633      	mov	r3, r6
 800be1e:	461e      	mov	r6, r3
 800be20:	3b01      	subs	r3, #1
 800be22:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800be26:	2a39      	cmp	r2, #57	@ 0x39
 800be28:	d053      	beq.n	800bed2 <_dtoa_r+0xa3a>
 800be2a:	3201      	adds	r2, #1
 800be2c:	701a      	strb	r2, [r3, #0]
 800be2e:	e60c      	b.n	800ba4a <_dtoa_r+0x5b2>
 800be30:	2a00      	cmp	r2, #0
 800be32:	dd07      	ble.n	800be44 <_dtoa_r+0x9ac>
 800be34:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800be38:	d0ed      	beq.n	800be16 <_dtoa_r+0x97e>
 800be3a:	f10a 0301 	add.w	r3, sl, #1
 800be3e:	f88b 3000 	strb.w	r3, [fp]
 800be42:	e602      	b.n	800ba4a <_dtoa_r+0x5b2>
 800be44:	9b05      	ldr	r3, [sp, #20]
 800be46:	9a05      	ldr	r2, [sp, #20]
 800be48:	f803 ac01 	strb.w	sl, [r3, #-1]
 800be4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be4e:	4293      	cmp	r3, r2
 800be50:	d029      	beq.n	800bea6 <_dtoa_r+0xa0e>
 800be52:	9901      	ldr	r1, [sp, #4]
 800be54:	2300      	movs	r3, #0
 800be56:	220a      	movs	r2, #10
 800be58:	4648      	mov	r0, r9
 800be5a:	f000 f91f 	bl	800c09c <__multadd>
 800be5e:	45a8      	cmp	r8, r5
 800be60:	9001      	str	r0, [sp, #4]
 800be62:	f04f 0300 	mov.w	r3, #0
 800be66:	f04f 020a 	mov.w	r2, #10
 800be6a:	4641      	mov	r1, r8
 800be6c:	4648      	mov	r0, r9
 800be6e:	d107      	bne.n	800be80 <_dtoa_r+0x9e8>
 800be70:	f000 f914 	bl	800c09c <__multadd>
 800be74:	4680      	mov	r8, r0
 800be76:	4605      	mov	r5, r0
 800be78:	9b05      	ldr	r3, [sp, #20]
 800be7a:	3301      	adds	r3, #1
 800be7c:	9305      	str	r3, [sp, #20]
 800be7e:	e775      	b.n	800bd6c <_dtoa_r+0x8d4>
 800be80:	f000 f90c 	bl	800c09c <__multadd>
 800be84:	4629      	mov	r1, r5
 800be86:	4680      	mov	r8, r0
 800be88:	2300      	movs	r3, #0
 800be8a:	220a      	movs	r2, #10
 800be8c:	4648      	mov	r0, r9
 800be8e:	f000 f905 	bl	800c09c <__multadd>
 800be92:	4605      	mov	r5, r0
 800be94:	e7f0      	b.n	800be78 <_dtoa_r+0x9e0>
 800be96:	f1bb 0f00 	cmp.w	fp, #0
 800be9a:	bfcc      	ite	gt
 800be9c:	465e      	movgt	r6, fp
 800be9e:	2601      	movle	r6, #1
 800bea0:	443e      	add	r6, r7
 800bea2:	f04f 0800 	mov.w	r8, #0
 800bea6:	9901      	ldr	r1, [sp, #4]
 800bea8:	2201      	movs	r2, #1
 800beaa:	4648      	mov	r0, r9
 800beac:	f000 faec 	bl	800c488 <__lshift>
 800beb0:	4621      	mov	r1, r4
 800beb2:	9001      	str	r0, [sp, #4]
 800beb4:	f000 fb54 	bl	800c560 <__mcmp>
 800beb8:	2800      	cmp	r0, #0
 800beba:	dcaf      	bgt.n	800be1c <_dtoa_r+0x984>
 800bebc:	d102      	bne.n	800bec4 <_dtoa_r+0xa2c>
 800bebe:	f01a 0f01 	tst.w	sl, #1
 800bec2:	d1ab      	bne.n	800be1c <_dtoa_r+0x984>
 800bec4:	4633      	mov	r3, r6
 800bec6:	461e      	mov	r6, r3
 800bec8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800becc:	2a30      	cmp	r2, #48	@ 0x30
 800bece:	d0fa      	beq.n	800bec6 <_dtoa_r+0xa2e>
 800bed0:	e5bb      	b.n	800ba4a <_dtoa_r+0x5b2>
 800bed2:	429f      	cmp	r7, r3
 800bed4:	d1a3      	bne.n	800be1e <_dtoa_r+0x986>
 800bed6:	9b04      	ldr	r3, [sp, #16]
 800bed8:	3301      	adds	r3, #1
 800beda:	9304      	str	r3, [sp, #16]
 800bedc:	2331      	movs	r3, #49	@ 0x31
 800bede:	703b      	strb	r3, [r7, #0]
 800bee0:	e5b3      	b.n	800ba4a <_dtoa_r+0x5b2>
 800bee2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bee4:	4f16      	ldr	r7, [pc, #88]	@ (800bf40 <_dtoa_r+0xaa8>)
 800bee6:	b11b      	cbz	r3, 800bef0 <_dtoa_r+0xa58>
 800bee8:	f107 0308 	add.w	r3, r7, #8
 800beec:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800beee:	6013      	str	r3, [r2, #0]
 800bef0:	4638      	mov	r0, r7
 800bef2:	b011      	add	sp, #68	@ 0x44
 800bef4:	ecbd 8b02 	vpop	{d8}
 800bef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800befc:	9b07      	ldr	r3, [sp, #28]
 800befe:	2b01      	cmp	r3, #1
 800bf00:	f77f ae36 	ble.w	800bb70 <_dtoa_r+0x6d8>
 800bf04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf06:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bf08:	2001      	movs	r0, #1
 800bf0a:	e656      	b.n	800bbba <_dtoa_r+0x722>
 800bf0c:	f1bb 0f00 	cmp.w	fp, #0
 800bf10:	f77f aed7 	ble.w	800bcc2 <_dtoa_r+0x82a>
 800bf14:	463e      	mov	r6, r7
 800bf16:	9801      	ldr	r0, [sp, #4]
 800bf18:	4621      	mov	r1, r4
 800bf1a:	f7ff fa33 	bl	800b384 <quorem>
 800bf1e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800bf22:	f806 ab01 	strb.w	sl, [r6], #1
 800bf26:	1bf2      	subs	r2, r6, r7
 800bf28:	4593      	cmp	fp, r2
 800bf2a:	ddb4      	ble.n	800be96 <_dtoa_r+0x9fe>
 800bf2c:	9901      	ldr	r1, [sp, #4]
 800bf2e:	2300      	movs	r3, #0
 800bf30:	220a      	movs	r2, #10
 800bf32:	4648      	mov	r0, r9
 800bf34:	f000 f8b2 	bl	800c09c <__multadd>
 800bf38:	9001      	str	r0, [sp, #4]
 800bf3a:	e7ec      	b.n	800bf16 <_dtoa_r+0xa7e>
 800bf3c:	0800e6d1 	.word	0x0800e6d1
 800bf40:	0800e655 	.word	0x0800e655

0800bf44 <_free_r>:
 800bf44:	b538      	push	{r3, r4, r5, lr}
 800bf46:	4605      	mov	r5, r0
 800bf48:	2900      	cmp	r1, #0
 800bf4a:	d041      	beq.n	800bfd0 <_free_r+0x8c>
 800bf4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf50:	1f0c      	subs	r4, r1, #4
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	bfb8      	it	lt
 800bf56:	18e4      	addlt	r4, r4, r3
 800bf58:	f7fe f84a 	bl	8009ff0 <__malloc_lock>
 800bf5c:	4a1d      	ldr	r2, [pc, #116]	@ (800bfd4 <_free_r+0x90>)
 800bf5e:	6813      	ldr	r3, [r2, #0]
 800bf60:	b933      	cbnz	r3, 800bf70 <_free_r+0x2c>
 800bf62:	6063      	str	r3, [r4, #4]
 800bf64:	6014      	str	r4, [r2, #0]
 800bf66:	4628      	mov	r0, r5
 800bf68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf6c:	f7fe b846 	b.w	8009ffc <__malloc_unlock>
 800bf70:	42a3      	cmp	r3, r4
 800bf72:	d908      	bls.n	800bf86 <_free_r+0x42>
 800bf74:	6820      	ldr	r0, [r4, #0]
 800bf76:	1821      	adds	r1, r4, r0
 800bf78:	428b      	cmp	r3, r1
 800bf7a:	bf01      	itttt	eq
 800bf7c:	6819      	ldreq	r1, [r3, #0]
 800bf7e:	685b      	ldreq	r3, [r3, #4]
 800bf80:	1809      	addeq	r1, r1, r0
 800bf82:	6021      	streq	r1, [r4, #0]
 800bf84:	e7ed      	b.n	800bf62 <_free_r+0x1e>
 800bf86:	461a      	mov	r2, r3
 800bf88:	685b      	ldr	r3, [r3, #4]
 800bf8a:	b10b      	cbz	r3, 800bf90 <_free_r+0x4c>
 800bf8c:	42a3      	cmp	r3, r4
 800bf8e:	d9fa      	bls.n	800bf86 <_free_r+0x42>
 800bf90:	6811      	ldr	r1, [r2, #0]
 800bf92:	1850      	adds	r0, r2, r1
 800bf94:	42a0      	cmp	r0, r4
 800bf96:	d10b      	bne.n	800bfb0 <_free_r+0x6c>
 800bf98:	6820      	ldr	r0, [r4, #0]
 800bf9a:	4401      	add	r1, r0
 800bf9c:	1850      	adds	r0, r2, r1
 800bf9e:	4283      	cmp	r3, r0
 800bfa0:	6011      	str	r1, [r2, #0]
 800bfa2:	d1e0      	bne.n	800bf66 <_free_r+0x22>
 800bfa4:	6818      	ldr	r0, [r3, #0]
 800bfa6:	685b      	ldr	r3, [r3, #4]
 800bfa8:	6053      	str	r3, [r2, #4]
 800bfaa:	4408      	add	r0, r1
 800bfac:	6010      	str	r0, [r2, #0]
 800bfae:	e7da      	b.n	800bf66 <_free_r+0x22>
 800bfb0:	d902      	bls.n	800bfb8 <_free_r+0x74>
 800bfb2:	230c      	movs	r3, #12
 800bfb4:	602b      	str	r3, [r5, #0]
 800bfb6:	e7d6      	b.n	800bf66 <_free_r+0x22>
 800bfb8:	6820      	ldr	r0, [r4, #0]
 800bfba:	1821      	adds	r1, r4, r0
 800bfbc:	428b      	cmp	r3, r1
 800bfbe:	bf04      	itt	eq
 800bfc0:	6819      	ldreq	r1, [r3, #0]
 800bfc2:	685b      	ldreq	r3, [r3, #4]
 800bfc4:	6063      	str	r3, [r4, #4]
 800bfc6:	bf04      	itt	eq
 800bfc8:	1809      	addeq	r1, r1, r0
 800bfca:	6021      	streq	r1, [r4, #0]
 800bfcc:	6054      	str	r4, [r2, #4]
 800bfce:	e7ca      	b.n	800bf66 <_free_r+0x22>
 800bfd0:	bd38      	pop	{r3, r4, r5, pc}
 800bfd2:	bf00      	nop
 800bfd4:	24004d38 	.word	0x24004d38

0800bfd8 <_Balloc>:
 800bfd8:	b570      	push	{r4, r5, r6, lr}
 800bfda:	69c6      	ldr	r6, [r0, #28]
 800bfdc:	4604      	mov	r4, r0
 800bfde:	460d      	mov	r5, r1
 800bfe0:	b976      	cbnz	r6, 800c000 <_Balloc+0x28>
 800bfe2:	2010      	movs	r0, #16
 800bfe4:	f7fd ff5a 	bl	8009e9c <malloc>
 800bfe8:	4602      	mov	r2, r0
 800bfea:	61e0      	str	r0, [r4, #28]
 800bfec:	b920      	cbnz	r0, 800bff8 <_Balloc+0x20>
 800bfee:	4b18      	ldr	r3, [pc, #96]	@ (800c050 <_Balloc+0x78>)
 800bff0:	4818      	ldr	r0, [pc, #96]	@ (800c054 <_Balloc+0x7c>)
 800bff2:	216b      	movs	r1, #107	@ 0x6b
 800bff4:	f7fd ff34 	bl	8009e60 <__assert_func>
 800bff8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bffc:	6006      	str	r6, [r0, #0]
 800bffe:	60c6      	str	r6, [r0, #12]
 800c000:	69e6      	ldr	r6, [r4, #28]
 800c002:	68f3      	ldr	r3, [r6, #12]
 800c004:	b183      	cbz	r3, 800c028 <_Balloc+0x50>
 800c006:	69e3      	ldr	r3, [r4, #28]
 800c008:	68db      	ldr	r3, [r3, #12]
 800c00a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c00e:	b9b8      	cbnz	r0, 800c040 <_Balloc+0x68>
 800c010:	2101      	movs	r1, #1
 800c012:	fa01 f605 	lsl.w	r6, r1, r5
 800c016:	1d72      	adds	r2, r6, #5
 800c018:	0092      	lsls	r2, r2, #2
 800c01a:	4620      	mov	r0, r4
 800c01c:	f001 fec0 	bl	800dda0 <_calloc_r>
 800c020:	b160      	cbz	r0, 800c03c <_Balloc+0x64>
 800c022:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c026:	e00e      	b.n	800c046 <_Balloc+0x6e>
 800c028:	2221      	movs	r2, #33	@ 0x21
 800c02a:	2104      	movs	r1, #4
 800c02c:	4620      	mov	r0, r4
 800c02e:	f001 feb7 	bl	800dda0 <_calloc_r>
 800c032:	69e3      	ldr	r3, [r4, #28]
 800c034:	60f0      	str	r0, [r6, #12]
 800c036:	68db      	ldr	r3, [r3, #12]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d1e4      	bne.n	800c006 <_Balloc+0x2e>
 800c03c:	2000      	movs	r0, #0
 800c03e:	bd70      	pop	{r4, r5, r6, pc}
 800c040:	6802      	ldr	r2, [r0, #0]
 800c042:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c046:	2300      	movs	r3, #0
 800c048:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c04c:	e7f7      	b.n	800c03e <_Balloc+0x66>
 800c04e:	bf00      	nop
 800c050:	0800e662 	.word	0x0800e662
 800c054:	0800e6e2 	.word	0x0800e6e2

0800c058 <_Bfree>:
 800c058:	b570      	push	{r4, r5, r6, lr}
 800c05a:	69c6      	ldr	r6, [r0, #28]
 800c05c:	4605      	mov	r5, r0
 800c05e:	460c      	mov	r4, r1
 800c060:	b976      	cbnz	r6, 800c080 <_Bfree+0x28>
 800c062:	2010      	movs	r0, #16
 800c064:	f7fd ff1a 	bl	8009e9c <malloc>
 800c068:	4602      	mov	r2, r0
 800c06a:	61e8      	str	r0, [r5, #28]
 800c06c:	b920      	cbnz	r0, 800c078 <_Bfree+0x20>
 800c06e:	4b09      	ldr	r3, [pc, #36]	@ (800c094 <_Bfree+0x3c>)
 800c070:	4809      	ldr	r0, [pc, #36]	@ (800c098 <_Bfree+0x40>)
 800c072:	218f      	movs	r1, #143	@ 0x8f
 800c074:	f7fd fef4 	bl	8009e60 <__assert_func>
 800c078:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c07c:	6006      	str	r6, [r0, #0]
 800c07e:	60c6      	str	r6, [r0, #12]
 800c080:	b13c      	cbz	r4, 800c092 <_Bfree+0x3a>
 800c082:	69eb      	ldr	r3, [r5, #28]
 800c084:	6862      	ldr	r2, [r4, #4]
 800c086:	68db      	ldr	r3, [r3, #12]
 800c088:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c08c:	6021      	str	r1, [r4, #0]
 800c08e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c092:	bd70      	pop	{r4, r5, r6, pc}
 800c094:	0800e662 	.word	0x0800e662
 800c098:	0800e6e2 	.word	0x0800e6e2

0800c09c <__multadd>:
 800c09c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0a0:	690d      	ldr	r5, [r1, #16]
 800c0a2:	4607      	mov	r7, r0
 800c0a4:	460c      	mov	r4, r1
 800c0a6:	461e      	mov	r6, r3
 800c0a8:	f101 0c14 	add.w	ip, r1, #20
 800c0ac:	2000      	movs	r0, #0
 800c0ae:	f8dc 3000 	ldr.w	r3, [ip]
 800c0b2:	b299      	uxth	r1, r3
 800c0b4:	fb02 6101 	mla	r1, r2, r1, r6
 800c0b8:	0c1e      	lsrs	r6, r3, #16
 800c0ba:	0c0b      	lsrs	r3, r1, #16
 800c0bc:	fb02 3306 	mla	r3, r2, r6, r3
 800c0c0:	b289      	uxth	r1, r1
 800c0c2:	3001      	adds	r0, #1
 800c0c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c0c8:	4285      	cmp	r5, r0
 800c0ca:	f84c 1b04 	str.w	r1, [ip], #4
 800c0ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c0d2:	dcec      	bgt.n	800c0ae <__multadd+0x12>
 800c0d4:	b30e      	cbz	r6, 800c11a <__multadd+0x7e>
 800c0d6:	68a3      	ldr	r3, [r4, #8]
 800c0d8:	42ab      	cmp	r3, r5
 800c0da:	dc19      	bgt.n	800c110 <__multadd+0x74>
 800c0dc:	6861      	ldr	r1, [r4, #4]
 800c0de:	4638      	mov	r0, r7
 800c0e0:	3101      	adds	r1, #1
 800c0e2:	f7ff ff79 	bl	800bfd8 <_Balloc>
 800c0e6:	4680      	mov	r8, r0
 800c0e8:	b928      	cbnz	r0, 800c0f6 <__multadd+0x5a>
 800c0ea:	4602      	mov	r2, r0
 800c0ec:	4b0c      	ldr	r3, [pc, #48]	@ (800c120 <__multadd+0x84>)
 800c0ee:	480d      	ldr	r0, [pc, #52]	@ (800c124 <__multadd+0x88>)
 800c0f0:	21ba      	movs	r1, #186	@ 0xba
 800c0f2:	f7fd feb5 	bl	8009e60 <__assert_func>
 800c0f6:	6922      	ldr	r2, [r4, #16]
 800c0f8:	3202      	adds	r2, #2
 800c0fa:	f104 010c 	add.w	r1, r4, #12
 800c0fe:	0092      	lsls	r2, r2, #2
 800c100:	300c      	adds	r0, #12
 800c102:	f7ff f92a 	bl	800b35a <memcpy>
 800c106:	4621      	mov	r1, r4
 800c108:	4638      	mov	r0, r7
 800c10a:	f7ff ffa5 	bl	800c058 <_Bfree>
 800c10e:	4644      	mov	r4, r8
 800c110:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c114:	3501      	adds	r5, #1
 800c116:	615e      	str	r6, [r3, #20]
 800c118:	6125      	str	r5, [r4, #16]
 800c11a:	4620      	mov	r0, r4
 800c11c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c120:	0800e6d1 	.word	0x0800e6d1
 800c124:	0800e6e2 	.word	0x0800e6e2

0800c128 <__s2b>:
 800c128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c12c:	460c      	mov	r4, r1
 800c12e:	4615      	mov	r5, r2
 800c130:	461f      	mov	r7, r3
 800c132:	2209      	movs	r2, #9
 800c134:	3308      	adds	r3, #8
 800c136:	4606      	mov	r6, r0
 800c138:	fb93 f3f2 	sdiv	r3, r3, r2
 800c13c:	2100      	movs	r1, #0
 800c13e:	2201      	movs	r2, #1
 800c140:	429a      	cmp	r2, r3
 800c142:	db09      	blt.n	800c158 <__s2b+0x30>
 800c144:	4630      	mov	r0, r6
 800c146:	f7ff ff47 	bl	800bfd8 <_Balloc>
 800c14a:	b940      	cbnz	r0, 800c15e <__s2b+0x36>
 800c14c:	4602      	mov	r2, r0
 800c14e:	4b19      	ldr	r3, [pc, #100]	@ (800c1b4 <__s2b+0x8c>)
 800c150:	4819      	ldr	r0, [pc, #100]	@ (800c1b8 <__s2b+0x90>)
 800c152:	21d3      	movs	r1, #211	@ 0xd3
 800c154:	f7fd fe84 	bl	8009e60 <__assert_func>
 800c158:	0052      	lsls	r2, r2, #1
 800c15a:	3101      	adds	r1, #1
 800c15c:	e7f0      	b.n	800c140 <__s2b+0x18>
 800c15e:	9b08      	ldr	r3, [sp, #32]
 800c160:	6143      	str	r3, [r0, #20]
 800c162:	2d09      	cmp	r5, #9
 800c164:	f04f 0301 	mov.w	r3, #1
 800c168:	6103      	str	r3, [r0, #16]
 800c16a:	dd16      	ble.n	800c19a <__s2b+0x72>
 800c16c:	f104 0909 	add.w	r9, r4, #9
 800c170:	46c8      	mov	r8, r9
 800c172:	442c      	add	r4, r5
 800c174:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c178:	4601      	mov	r1, r0
 800c17a:	3b30      	subs	r3, #48	@ 0x30
 800c17c:	220a      	movs	r2, #10
 800c17e:	4630      	mov	r0, r6
 800c180:	f7ff ff8c 	bl	800c09c <__multadd>
 800c184:	45a0      	cmp	r8, r4
 800c186:	d1f5      	bne.n	800c174 <__s2b+0x4c>
 800c188:	f1a5 0408 	sub.w	r4, r5, #8
 800c18c:	444c      	add	r4, r9
 800c18e:	1b2d      	subs	r5, r5, r4
 800c190:	1963      	adds	r3, r4, r5
 800c192:	42bb      	cmp	r3, r7
 800c194:	db04      	blt.n	800c1a0 <__s2b+0x78>
 800c196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c19a:	340a      	adds	r4, #10
 800c19c:	2509      	movs	r5, #9
 800c19e:	e7f6      	b.n	800c18e <__s2b+0x66>
 800c1a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c1a4:	4601      	mov	r1, r0
 800c1a6:	3b30      	subs	r3, #48	@ 0x30
 800c1a8:	220a      	movs	r2, #10
 800c1aa:	4630      	mov	r0, r6
 800c1ac:	f7ff ff76 	bl	800c09c <__multadd>
 800c1b0:	e7ee      	b.n	800c190 <__s2b+0x68>
 800c1b2:	bf00      	nop
 800c1b4:	0800e6d1 	.word	0x0800e6d1
 800c1b8:	0800e6e2 	.word	0x0800e6e2

0800c1bc <__hi0bits>:
 800c1bc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	bf36      	itet	cc
 800c1c4:	0403      	lslcc	r3, r0, #16
 800c1c6:	2000      	movcs	r0, #0
 800c1c8:	2010      	movcc	r0, #16
 800c1ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c1ce:	bf3c      	itt	cc
 800c1d0:	021b      	lslcc	r3, r3, #8
 800c1d2:	3008      	addcc	r0, #8
 800c1d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c1d8:	bf3c      	itt	cc
 800c1da:	011b      	lslcc	r3, r3, #4
 800c1dc:	3004      	addcc	r0, #4
 800c1de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c1e2:	bf3c      	itt	cc
 800c1e4:	009b      	lslcc	r3, r3, #2
 800c1e6:	3002      	addcc	r0, #2
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	db05      	blt.n	800c1f8 <__hi0bits+0x3c>
 800c1ec:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c1f0:	f100 0001 	add.w	r0, r0, #1
 800c1f4:	bf08      	it	eq
 800c1f6:	2020      	moveq	r0, #32
 800c1f8:	4770      	bx	lr

0800c1fa <__lo0bits>:
 800c1fa:	6803      	ldr	r3, [r0, #0]
 800c1fc:	4602      	mov	r2, r0
 800c1fe:	f013 0007 	ands.w	r0, r3, #7
 800c202:	d00b      	beq.n	800c21c <__lo0bits+0x22>
 800c204:	07d9      	lsls	r1, r3, #31
 800c206:	d421      	bmi.n	800c24c <__lo0bits+0x52>
 800c208:	0798      	lsls	r0, r3, #30
 800c20a:	bf49      	itett	mi
 800c20c:	085b      	lsrmi	r3, r3, #1
 800c20e:	089b      	lsrpl	r3, r3, #2
 800c210:	2001      	movmi	r0, #1
 800c212:	6013      	strmi	r3, [r2, #0]
 800c214:	bf5c      	itt	pl
 800c216:	6013      	strpl	r3, [r2, #0]
 800c218:	2002      	movpl	r0, #2
 800c21a:	4770      	bx	lr
 800c21c:	b299      	uxth	r1, r3
 800c21e:	b909      	cbnz	r1, 800c224 <__lo0bits+0x2a>
 800c220:	0c1b      	lsrs	r3, r3, #16
 800c222:	2010      	movs	r0, #16
 800c224:	b2d9      	uxtb	r1, r3
 800c226:	b909      	cbnz	r1, 800c22c <__lo0bits+0x32>
 800c228:	3008      	adds	r0, #8
 800c22a:	0a1b      	lsrs	r3, r3, #8
 800c22c:	0719      	lsls	r1, r3, #28
 800c22e:	bf04      	itt	eq
 800c230:	091b      	lsreq	r3, r3, #4
 800c232:	3004      	addeq	r0, #4
 800c234:	0799      	lsls	r1, r3, #30
 800c236:	bf04      	itt	eq
 800c238:	089b      	lsreq	r3, r3, #2
 800c23a:	3002      	addeq	r0, #2
 800c23c:	07d9      	lsls	r1, r3, #31
 800c23e:	d403      	bmi.n	800c248 <__lo0bits+0x4e>
 800c240:	085b      	lsrs	r3, r3, #1
 800c242:	f100 0001 	add.w	r0, r0, #1
 800c246:	d003      	beq.n	800c250 <__lo0bits+0x56>
 800c248:	6013      	str	r3, [r2, #0]
 800c24a:	4770      	bx	lr
 800c24c:	2000      	movs	r0, #0
 800c24e:	4770      	bx	lr
 800c250:	2020      	movs	r0, #32
 800c252:	4770      	bx	lr

0800c254 <__i2b>:
 800c254:	b510      	push	{r4, lr}
 800c256:	460c      	mov	r4, r1
 800c258:	2101      	movs	r1, #1
 800c25a:	f7ff febd 	bl	800bfd8 <_Balloc>
 800c25e:	4602      	mov	r2, r0
 800c260:	b928      	cbnz	r0, 800c26e <__i2b+0x1a>
 800c262:	4b05      	ldr	r3, [pc, #20]	@ (800c278 <__i2b+0x24>)
 800c264:	4805      	ldr	r0, [pc, #20]	@ (800c27c <__i2b+0x28>)
 800c266:	f240 1145 	movw	r1, #325	@ 0x145
 800c26a:	f7fd fdf9 	bl	8009e60 <__assert_func>
 800c26e:	2301      	movs	r3, #1
 800c270:	6144      	str	r4, [r0, #20]
 800c272:	6103      	str	r3, [r0, #16]
 800c274:	bd10      	pop	{r4, pc}
 800c276:	bf00      	nop
 800c278:	0800e6d1 	.word	0x0800e6d1
 800c27c:	0800e6e2 	.word	0x0800e6e2

0800c280 <__multiply>:
 800c280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c284:	4614      	mov	r4, r2
 800c286:	690a      	ldr	r2, [r1, #16]
 800c288:	6923      	ldr	r3, [r4, #16]
 800c28a:	429a      	cmp	r2, r3
 800c28c:	bfa8      	it	ge
 800c28e:	4623      	movge	r3, r4
 800c290:	460f      	mov	r7, r1
 800c292:	bfa4      	itt	ge
 800c294:	460c      	movge	r4, r1
 800c296:	461f      	movge	r7, r3
 800c298:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c29c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c2a0:	68a3      	ldr	r3, [r4, #8]
 800c2a2:	6861      	ldr	r1, [r4, #4]
 800c2a4:	eb0a 0609 	add.w	r6, sl, r9
 800c2a8:	42b3      	cmp	r3, r6
 800c2aa:	b085      	sub	sp, #20
 800c2ac:	bfb8      	it	lt
 800c2ae:	3101      	addlt	r1, #1
 800c2b0:	f7ff fe92 	bl	800bfd8 <_Balloc>
 800c2b4:	b930      	cbnz	r0, 800c2c4 <__multiply+0x44>
 800c2b6:	4602      	mov	r2, r0
 800c2b8:	4b44      	ldr	r3, [pc, #272]	@ (800c3cc <__multiply+0x14c>)
 800c2ba:	4845      	ldr	r0, [pc, #276]	@ (800c3d0 <__multiply+0x150>)
 800c2bc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c2c0:	f7fd fdce 	bl	8009e60 <__assert_func>
 800c2c4:	f100 0514 	add.w	r5, r0, #20
 800c2c8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c2cc:	462b      	mov	r3, r5
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	4543      	cmp	r3, r8
 800c2d2:	d321      	bcc.n	800c318 <__multiply+0x98>
 800c2d4:	f107 0114 	add.w	r1, r7, #20
 800c2d8:	f104 0214 	add.w	r2, r4, #20
 800c2dc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c2e0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c2e4:	9302      	str	r3, [sp, #8]
 800c2e6:	1b13      	subs	r3, r2, r4
 800c2e8:	3b15      	subs	r3, #21
 800c2ea:	f023 0303 	bic.w	r3, r3, #3
 800c2ee:	3304      	adds	r3, #4
 800c2f0:	f104 0715 	add.w	r7, r4, #21
 800c2f4:	42ba      	cmp	r2, r7
 800c2f6:	bf38      	it	cc
 800c2f8:	2304      	movcc	r3, #4
 800c2fa:	9301      	str	r3, [sp, #4]
 800c2fc:	9b02      	ldr	r3, [sp, #8]
 800c2fe:	9103      	str	r1, [sp, #12]
 800c300:	428b      	cmp	r3, r1
 800c302:	d80c      	bhi.n	800c31e <__multiply+0x9e>
 800c304:	2e00      	cmp	r6, #0
 800c306:	dd03      	ble.n	800c310 <__multiply+0x90>
 800c308:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d05b      	beq.n	800c3c8 <__multiply+0x148>
 800c310:	6106      	str	r6, [r0, #16]
 800c312:	b005      	add	sp, #20
 800c314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c318:	f843 2b04 	str.w	r2, [r3], #4
 800c31c:	e7d8      	b.n	800c2d0 <__multiply+0x50>
 800c31e:	f8b1 a000 	ldrh.w	sl, [r1]
 800c322:	f1ba 0f00 	cmp.w	sl, #0
 800c326:	d024      	beq.n	800c372 <__multiply+0xf2>
 800c328:	f104 0e14 	add.w	lr, r4, #20
 800c32c:	46a9      	mov	r9, r5
 800c32e:	f04f 0c00 	mov.w	ip, #0
 800c332:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c336:	f8d9 3000 	ldr.w	r3, [r9]
 800c33a:	fa1f fb87 	uxth.w	fp, r7
 800c33e:	b29b      	uxth	r3, r3
 800c340:	fb0a 330b 	mla	r3, sl, fp, r3
 800c344:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c348:	f8d9 7000 	ldr.w	r7, [r9]
 800c34c:	4463      	add	r3, ip
 800c34e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c352:	fb0a c70b 	mla	r7, sl, fp, ip
 800c356:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c35a:	b29b      	uxth	r3, r3
 800c35c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c360:	4572      	cmp	r2, lr
 800c362:	f849 3b04 	str.w	r3, [r9], #4
 800c366:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c36a:	d8e2      	bhi.n	800c332 <__multiply+0xb2>
 800c36c:	9b01      	ldr	r3, [sp, #4]
 800c36e:	f845 c003 	str.w	ip, [r5, r3]
 800c372:	9b03      	ldr	r3, [sp, #12]
 800c374:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c378:	3104      	adds	r1, #4
 800c37a:	f1b9 0f00 	cmp.w	r9, #0
 800c37e:	d021      	beq.n	800c3c4 <__multiply+0x144>
 800c380:	682b      	ldr	r3, [r5, #0]
 800c382:	f104 0c14 	add.w	ip, r4, #20
 800c386:	46ae      	mov	lr, r5
 800c388:	f04f 0a00 	mov.w	sl, #0
 800c38c:	f8bc b000 	ldrh.w	fp, [ip]
 800c390:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c394:	fb09 770b 	mla	r7, r9, fp, r7
 800c398:	4457      	add	r7, sl
 800c39a:	b29b      	uxth	r3, r3
 800c39c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c3a0:	f84e 3b04 	str.w	r3, [lr], #4
 800c3a4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c3a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c3ac:	f8be 3000 	ldrh.w	r3, [lr]
 800c3b0:	fb09 330a 	mla	r3, r9, sl, r3
 800c3b4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c3b8:	4562      	cmp	r2, ip
 800c3ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c3be:	d8e5      	bhi.n	800c38c <__multiply+0x10c>
 800c3c0:	9f01      	ldr	r7, [sp, #4]
 800c3c2:	51eb      	str	r3, [r5, r7]
 800c3c4:	3504      	adds	r5, #4
 800c3c6:	e799      	b.n	800c2fc <__multiply+0x7c>
 800c3c8:	3e01      	subs	r6, #1
 800c3ca:	e79b      	b.n	800c304 <__multiply+0x84>
 800c3cc:	0800e6d1 	.word	0x0800e6d1
 800c3d0:	0800e6e2 	.word	0x0800e6e2

0800c3d4 <__pow5mult>:
 800c3d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3d8:	4615      	mov	r5, r2
 800c3da:	f012 0203 	ands.w	r2, r2, #3
 800c3de:	4607      	mov	r7, r0
 800c3e0:	460e      	mov	r6, r1
 800c3e2:	d007      	beq.n	800c3f4 <__pow5mult+0x20>
 800c3e4:	4c25      	ldr	r4, [pc, #148]	@ (800c47c <__pow5mult+0xa8>)
 800c3e6:	3a01      	subs	r2, #1
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c3ee:	f7ff fe55 	bl	800c09c <__multadd>
 800c3f2:	4606      	mov	r6, r0
 800c3f4:	10ad      	asrs	r5, r5, #2
 800c3f6:	d03d      	beq.n	800c474 <__pow5mult+0xa0>
 800c3f8:	69fc      	ldr	r4, [r7, #28]
 800c3fa:	b97c      	cbnz	r4, 800c41c <__pow5mult+0x48>
 800c3fc:	2010      	movs	r0, #16
 800c3fe:	f7fd fd4d 	bl	8009e9c <malloc>
 800c402:	4602      	mov	r2, r0
 800c404:	61f8      	str	r0, [r7, #28]
 800c406:	b928      	cbnz	r0, 800c414 <__pow5mult+0x40>
 800c408:	4b1d      	ldr	r3, [pc, #116]	@ (800c480 <__pow5mult+0xac>)
 800c40a:	481e      	ldr	r0, [pc, #120]	@ (800c484 <__pow5mult+0xb0>)
 800c40c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c410:	f7fd fd26 	bl	8009e60 <__assert_func>
 800c414:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c418:	6004      	str	r4, [r0, #0]
 800c41a:	60c4      	str	r4, [r0, #12]
 800c41c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c420:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c424:	b94c      	cbnz	r4, 800c43a <__pow5mult+0x66>
 800c426:	f240 2171 	movw	r1, #625	@ 0x271
 800c42a:	4638      	mov	r0, r7
 800c42c:	f7ff ff12 	bl	800c254 <__i2b>
 800c430:	2300      	movs	r3, #0
 800c432:	f8c8 0008 	str.w	r0, [r8, #8]
 800c436:	4604      	mov	r4, r0
 800c438:	6003      	str	r3, [r0, #0]
 800c43a:	f04f 0900 	mov.w	r9, #0
 800c43e:	07eb      	lsls	r3, r5, #31
 800c440:	d50a      	bpl.n	800c458 <__pow5mult+0x84>
 800c442:	4631      	mov	r1, r6
 800c444:	4622      	mov	r2, r4
 800c446:	4638      	mov	r0, r7
 800c448:	f7ff ff1a 	bl	800c280 <__multiply>
 800c44c:	4631      	mov	r1, r6
 800c44e:	4680      	mov	r8, r0
 800c450:	4638      	mov	r0, r7
 800c452:	f7ff fe01 	bl	800c058 <_Bfree>
 800c456:	4646      	mov	r6, r8
 800c458:	106d      	asrs	r5, r5, #1
 800c45a:	d00b      	beq.n	800c474 <__pow5mult+0xa0>
 800c45c:	6820      	ldr	r0, [r4, #0]
 800c45e:	b938      	cbnz	r0, 800c470 <__pow5mult+0x9c>
 800c460:	4622      	mov	r2, r4
 800c462:	4621      	mov	r1, r4
 800c464:	4638      	mov	r0, r7
 800c466:	f7ff ff0b 	bl	800c280 <__multiply>
 800c46a:	6020      	str	r0, [r4, #0]
 800c46c:	f8c0 9000 	str.w	r9, [r0]
 800c470:	4604      	mov	r4, r0
 800c472:	e7e4      	b.n	800c43e <__pow5mult+0x6a>
 800c474:	4630      	mov	r0, r6
 800c476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c47a:	bf00      	nop
 800c47c:	0800e73c 	.word	0x0800e73c
 800c480:	0800e662 	.word	0x0800e662
 800c484:	0800e6e2 	.word	0x0800e6e2

0800c488 <__lshift>:
 800c488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c48c:	460c      	mov	r4, r1
 800c48e:	6849      	ldr	r1, [r1, #4]
 800c490:	6923      	ldr	r3, [r4, #16]
 800c492:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c496:	68a3      	ldr	r3, [r4, #8]
 800c498:	4607      	mov	r7, r0
 800c49a:	4691      	mov	r9, r2
 800c49c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c4a0:	f108 0601 	add.w	r6, r8, #1
 800c4a4:	42b3      	cmp	r3, r6
 800c4a6:	db0b      	blt.n	800c4c0 <__lshift+0x38>
 800c4a8:	4638      	mov	r0, r7
 800c4aa:	f7ff fd95 	bl	800bfd8 <_Balloc>
 800c4ae:	4605      	mov	r5, r0
 800c4b0:	b948      	cbnz	r0, 800c4c6 <__lshift+0x3e>
 800c4b2:	4602      	mov	r2, r0
 800c4b4:	4b28      	ldr	r3, [pc, #160]	@ (800c558 <__lshift+0xd0>)
 800c4b6:	4829      	ldr	r0, [pc, #164]	@ (800c55c <__lshift+0xd4>)
 800c4b8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c4bc:	f7fd fcd0 	bl	8009e60 <__assert_func>
 800c4c0:	3101      	adds	r1, #1
 800c4c2:	005b      	lsls	r3, r3, #1
 800c4c4:	e7ee      	b.n	800c4a4 <__lshift+0x1c>
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	f100 0114 	add.w	r1, r0, #20
 800c4cc:	f100 0210 	add.w	r2, r0, #16
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	4553      	cmp	r3, sl
 800c4d4:	db33      	blt.n	800c53e <__lshift+0xb6>
 800c4d6:	6920      	ldr	r0, [r4, #16]
 800c4d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c4dc:	f104 0314 	add.w	r3, r4, #20
 800c4e0:	f019 091f 	ands.w	r9, r9, #31
 800c4e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c4e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c4ec:	d02b      	beq.n	800c546 <__lshift+0xbe>
 800c4ee:	f1c9 0e20 	rsb	lr, r9, #32
 800c4f2:	468a      	mov	sl, r1
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	6818      	ldr	r0, [r3, #0]
 800c4f8:	fa00 f009 	lsl.w	r0, r0, r9
 800c4fc:	4310      	orrs	r0, r2
 800c4fe:	f84a 0b04 	str.w	r0, [sl], #4
 800c502:	f853 2b04 	ldr.w	r2, [r3], #4
 800c506:	459c      	cmp	ip, r3
 800c508:	fa22 f20e 	lsr.w	r2, r2, lr
 800c50c:	d8f3      	bhi.n	800c4f6 <__lshift+0x6e>
 800c50e:	ebac 0304 	sub.w	r3, ip, r4
 800c512:	3b15      	subs	r3, #21
 800c514:	f023 0303 	bic.w	r3, r3, #3
 800c518:	3304      	adds	r3, #4
 800c51a:	f104 0015 	add.w	r0, r4, #21
 800c51e:	4584      	cmp	ip, r0
 800c520:	bf38      	it	cc
 800c522:	2304      	movcc	r3, #4
 800c524:	50ca      	str	r2, [r1, r3]
 800c526:	b10a      	cbz	r2, 800c52c <__lshift+0xa4>
 800c528:	f108 0602 	add.w	r6, r8, #2
 800c52c:	3e01      	subs	r6, #1
 800c52e:	4638      	mov	r0, r7
 800c530:	612e      	str	r6, [r5, #16]
 800c532:	4621      	mov	r1, r4
 800c534:	f7ff fd90 	bl	800c058 <_Bfree>
 800c538:	4628      	mov	r0, r5
 800c53a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c53e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c542:	3301      	adds	r3, #1
 800c544:	e7c5      	b.n	800c4d2 <__lshift+0x4a>
 800c546:	3904      	subs	r1, #4
 800c548:	f853 2b04 	ldr.w	r2, [r3], #4
 800c54c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c550:	459c      	cmp	ip, r3
 800c552:	d8f9      	bhi.n	800c548 <__lshift+0xc0>
 800c554:	e7ea      	b.n	800c52c <__lshift+0xa4>
 800c556:	bf00      	nop
 800c558:	0800e6d1 	.word	0x0800e6d1
 800c55c:	0800e6e2 	.word	0x0800e6e2

0800c560 <__mcmp>:
 800c560:	690a      	ldr	r2, [r1, #16]
 800c562:	4603      	mov	r3, r0
 800c564:	6900      	ldr	r0, [r0, #16]
 800c566:	1a80      	subs	r0, r0, r2
 800c568:	b530      	push	{r4, r5, lr}
 800c56a:	d10e      	bne.n	800c58a <__mcmp+0x2a>
 800c56c:	3314      	adds	r3, #20
 800c56e:	3114      	adds	r1, #20
 800c570:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c574:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c578:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c57c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c580:	4295      	cmp	r5, r2
 800c582:	d003      	beq.n	800c58c <__mcmp+0x2c>
 800c584:	d205      	bcs.n	800c592 <__mcmp+0x32>
 800c586:	f04f 30ff 	mov.w	r0, #4294967295
 800c58a:	bd30      	pop	{r4, r5, pc}
 800c58c:	42a3      	cmp	r3, r4
 800c58e:	d3f3      	bcc.n	800c578 <__mcmp+0x18>
 800c590:	e7fb      	b.n	800c58a <__mcmp+0x2a>
 800c592:	2001      	movs	r0, #1
 800c594:	e7f9      	b.n	800c58a <__mcmp+0x2a>
	...

0800c598 <__mdiff>:
 800c598:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c59c:	4689      	mov	r9, r1
 800c59e:	4606      	mov	r6, r0
 800c5a0:	4611      	mov	r1, r2
 800c5a2:	4648      	mov	r0, r9
 800c5a4:	4614      	mov	r4, r2
 800c5a6:	f7ff ffdb 	bl	800c560 <__mcmp>
 800c5aa:	1e05      	subs	r5, r0, #0
 800c5ac:	d112      	bne.n	800c5d4 <__mdiff+0x3c>
 800c5ae:	4629      	mov	r1, r5
 800c5b0:	4630      	mov	r0, r6
 800c5b2:	f7ff fd11 	bl	800bfd8 <_Balloc>
 800c5b6:	4602      	mov	r2, r0
 800c5b8:	b928      	cbnz	r0, 800c5c6 <__mdiff+0x2e>
 800c5ba:	4b3f      	ldr	r3, [pc, #252]	@ (800c6b8 <__mdiff+0x120>)
 800c5bc:	f240 2137 	movw	r1, #567	@ 0x237
 800c5c0:	483e      	ldr	r0, [pc, #248]	@ (800c6bc <__mdiff+0x124>)
 800c5c2:	f7fd fc4d 	bl	8009e60 <__assert_func>
 800c5c6:	2301      	movs	r3, #1
 800c5c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c5cc:	4610      	mov	r0, r2
 800c5ce:	b003      	add	sp, #12
 800c5d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5d4:	bfbc      	itt	lt
 800c5d6:	464b      	movlt	r3, r9
 800c5d8:	46a1      	movlt	r9, r4
 800c5da:	4630      	mov	r0, r6
 800c5dc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c5e0:	bfba      	itte	lt
 800c5e2:	461c      	movlt	r4, r3
 800c5e4:	2501      	movlt	r5, #1
 800c5e6:	2500      	movge	r5, #0
 800c5e8:	f7ff fcf6 	bl	800bfd8 <_Balloc>
 800c5ec:	4602      	mov	r2, r0
 800c5ee:	b918      	cbnz	r0, 800c5f8 <__mdiff+0x60>
 800c5f0:	4b31      	ldr	r3, [pc, #196]	@ (800c6b8 <__mdiff+0x120>)
 800c5f2:	f240 2145 	movw	r1, #581	@ 0x245
 800c5f6:	e7e3      	b.n	800c5c0 <__mdiff+0x28>
 800c5f8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c5fc:	6926      	ldr	r6, [r4, #16]
 800c5fe:	60c5      	str	r5, [r0, #12]
 800c600:	f109 0310 	add.w	r3, r9, #16
 800c604:	f109 0514 	add.w	r5, r9, #20
 800c608:	f104 0e14 	add.w	lr, r4, #20
 800c60c:	f100 0b14 	add.w	fp, r0, #20
 800c610:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c614:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c618:	9301      	str	r3, [sp, #4]
 800c61a:	46d9      	mov	r9, fp
 800c61c:	f04f 0c00 	mov.w	ip, #0
 800c620:	9b01      	ldr	r3, [sp, #4]
 800c622:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c626:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c62a:	9301      	str	r3, [sp, #4]
 800c62c:	fa1f f38a 	uxth.w	r3, sl
 800c630:	4619      	mov	r1, r3
 800c632:	b283      	uxth	r3, r0
 800c634:	1acb      	subs	r3, r1, r3
 800c636:	0c00      	lsrs	r0, r0, #16
 800c638:	4463      	add	r3, ip
 800c63a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c63e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c642:	b29b      	uxth	r3, r3
 800c644:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c648:	4576      	cmp	r6, lr
 800c64a:	f849 3b04 	str.w	r3, [r9], #4
 800c64e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c652:	d8e5      	bhi.n	800c620 <__mdiff+0x88>
 800c654:	1b33      	subs	r3, r6, r4
 800c656:	3b15      	subs	r3, #21
 800c658:	f023 0303 	bic.w	r3, r3, #3
 800c65c:	3415      	adds	r4, #21
 800c65e:	3304      	adds	r3, #4
 800c660:	42a6      	cmp	r6, r4
 800c662:	bf38      	it	cc
 800c664:	2304      	movcc	r3, #4
 800c666:	441d      	add	r5, r3
 800c668:	445b      	add	r3, fp
 800c66a:	461e      	mov	r6, r3
 800c66c:	462c      	mov	r4, r5
 800c66e:	4544      	cmp	r4, r8
 800c670:	d30e      	bcc.n	800c690 <__mdiff+0xf8>
 800c672:	f108 0103 	add.w	r1, r8, #3
 800c676:	1b49      	subs	r1, r1, r5
 800c678:	f021 0103 	bic.w	r1, r1, #3
 800c67c:	3d03      	subs	r5, #3
 800c67e:	45a8      	cmp	r8, r5
 800c680:	bf38      	it	cc
 800c682:	2100      	movcc	r1, #0
 800c684:	440b      	add	r3, r1
 800c686:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c68a:	b191      	cbz	r1, 800c6b2 <__mdiff+0x11a>
 800c68c:	6117      	str	r7, [r2, #16]
 800c68e:	e79d      	b.n	800c5cc <__mdiff+0x34>
 800c690:	f854 1b04 	ldr.w	r1, [r4], #4
 800c694:	46e6      	mov	lr, ip
 800c696:	0c08      	lsrs	r0, r1, #16
 800c698:	fa1c fc81 	uxtah	ip, ip, r1
 800c69c:	4471      	add	r1, lr
 800c69e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c6a2:	b289      	uxth	r1, r1
 800c6a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c6a8:	f846 1b04 	str.w	r1, [r6], #4
 800c6ac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c6b0:	e7dd      	b.n	800c66e <__mdiff+0xd6>
 800c6b2:	3f01      	subs	r7, #1
 800c6b4:	e7e7      	b.n	800c686 <__mdiff+0xee>
 800c6b6:	bf00      	nop
 800c6b8:	0800e6d1 	.word	0x0800e6d1
 800c6bc:	0800e6e2 	.word	0x0800e6e2

0800c6c0 <__ulp>:
 800c6c0:	b082      	sub	sp, #8
 800c6c2:	ed8d 0b00 	vstr	d0, [sp]
 800c6c6:	9a01      	ldr	r2, [sp, #4]
 800c6c8:	4b0f      	ldr	r3, [pc, #60]	@ (800c708 <__ulp+0x48>)
 800c6ca:	4013      	ands	r3, r2
 800c6cc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	dc08      	bgt.n	800c6e6 <__ulp+0x26>
 800c6d4:	425b      	negs	r3, r3
 800c6d6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c6da:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c6de:	da04      	bge.n	800c6ea <__ulp+0x2a>
 800c6e0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c6e4:	4113      	asrs	r3, r2
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	e008      	b.n	800c6fc <__ulp+0x3c>
 800c6ea:	f1a2 0314 	sub.w	r3, r2, #20
 800c6ee:	2b1e      	cmp	r3, #30
 800c6f0:	bfda      	itte	le
 800c6f2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c6f6:	40da      	lsrle	r2, r3
 800c6f8:	2201      	movgt	r2, #1
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	4619      	mov	r1, r3
 800c6fe:	4610      	mov	r0, r2
 800c700:	ec41 0b10 	vmov	d0, r0, r1
 800c704:	b002      	add	sp, #8
 800c706:	4770      	bx	lr
 800c708:	7ff00000 	.word	0x7ff00000

0800c70c <__b2d>:
 800c70c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c710:	6906      	ldr	r6, [r0, #16]
 800c712:	f100 0814 	add.w	r8, r0, #20
 800c716:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c71a:	1f37      	subs	r7, r6, #4
 800c71c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c720:	4610      	mov	r0, r2
 800c722:	f7ff fd4b 	bl	800c1bc <__hi0bits>
 800c726:	f1c0 0320 	rsb	r3, r0, #32
 800c72a:	280a      	cmp	r0, #10
 800c72c:	600b      	str	r3, [r1, #0]
 800c72e:	491b      	ldr	r1, [pc, #108]	@ (800c79c <__b2d+0x90>)
 800c730:	dc15      	bgt.n	800c75e <__b2d+0x52>
 800c732:	f1c0 0c0b 	rsb	ip, r0, #11
 800c736:	fa22 f30c 	lsr.w	r3, r2, ip
 800c73a:	45b8      	cmp	r8, r7
 800c73c:	ea43 0501 	orr.w	r5, r3, r1
 800c740:	bf34      	ite	cc
 800c742:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c746:	2300      	movcs	r3, #0
 800c748:	3015      	adds	r0, #21
 800c74a:	fa02 f000 	lsl.w	r0, r2, r0
 800c74e:	fa23 f30c 	lsr.w	r3, r3, ip
 800c752:	4303      	orrs	r3, r0
 800c754:	461c      	mov	r4, r3
 800c756:	ec45 4b10 	vmov	d0, r4, r5
 800c75a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c75e:	45b8      	cmp	r8, r7
 800c760:	bf3a      	itte	cc
 800c762:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c766:	f1a6 0708 	subcc.w	r7, r6, #8
 800c76a:	2300      	movcs	r3, #0
 800c76c:	380b      	subs	r0, #11
 800c76e:	d012      	beq.n	800c796 <__b2d+0x8a>
 800c770:	f1c0 0120 	rsb	r1, r0, #32
 800c774:	fa23 f401 	lsr.w	r4, r3, r1
 800c778:	4082      	lsls	r2, r0
 800c77a:	4322      	orrs	r2, r4
 800c77c:	4547      	cmp	r7, r8
 800c77e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c782:	bf8c      	ite	hi
 800c784:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c788:	2200      	movls	r2, #0
 800c78a:	4083      	lsls	r3, r0
 800c78c:	40ca      	lsrs	r2, r1
 800c78e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c792:	4313      	orrs	r3, r2
 800c794:	e7de      	b.n	800c754 <__b2d+0x48>
 800c796:	ea42 0501 	orr.w	r5, r2, r1
 800c79a:	e7db      	b.n	800c754 <__b2d+0x48>
 800c79c:	3ff00000 	.word	0x3ff00000

0800c7a0 <__d2b>:
 800c7a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c7a4:	460f      	mov	r7, r1
 800c7a6:	2101      	movs	r1, #1
 800c7a8:	ec59 8b10 	vmov	r8, r9, d0
 800c7ac:	4616      	mov	r6, r2
 800c7ae:	f7ff fc13 	bl	800bfd8 <_Balloc>
 800c7b2:	4604      	mov	r4, r0
 800c7b4:	b930      	cbnz	r0, 800c7c4 <__d2b+0x24>
 800c7b6:	4602      	mov	r2, r0
 800c7b8:	4b23      	ldr	r3, [pc, #140]	@ (800c848 <__d2b+0xa8>)
 800c7ba:	4824      	ldr	r0, [pc, #144]	@ (800c84c <__d2b+0xac>)
 800c7bc:	f240 310f 	movw	r1, #783	@ 0x30f
 800c7c0:	f7fd fb4e 	bl	8009e60 <__assert_func>
 800c7c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c7c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c7cc:	b10d      	cbz	r5, 800c7d2 <__d2b+0x32>
 800c7ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c7d2:	9301      	str	r3, [sp, #4]
 800c7d4:	f1b8 0300 	subs.w	r3, r8, #0
 800c7d8:	d023      	beq.n	800c822 <__d2b+0x82>
 800c7da:	4668      	mov	r0, sp
 800c7dc:	9300      	str	r3, [sp, #0]
 800c7de:	f7ff fd0c 	bl	800c1fa <__lo0bits>
 800c7e2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c7e6:	b1d0      	cbz	r0, 800c81e <__d2b+0x7e>
 800c7e8:	f1c0 0320 	rsb	r3, r0, #32
 800c7ec:	fa02 f303 	lsl.w	r3, r2, r3
 800c7f0:	430b      	orrs	r3, r1
 800c7f2:	40c2      	lsrs	r2, r0
 800c7f4:	6163      	str	r3, [r4, #20]
 800c7f6:	9201      	str	r2, [sp, #4]
 800c7f8:	9b01      	ldr	r3, [sp, #4]
 800c7fa:	61a3      	str	r3, [r4, #24]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	bf0c      	ite	eq
 800c800:	2201      	moveq	r2, #1
 800c802:	2202      	movne	r2, #2
 800c804:	6122      	str	r2, [r4, #16]
 800c806:	b1a5      	cbz	r5, 800c832 <__d2b+0x92>
 800c808:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c80c:	4405      	add	r5, r0
 800c80e:	603d      	str	r5, [r7, #0]
 800c810:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c814:	6030      	str	r0, [r6, #0]
 800c816:	4620      	mov	r0, r4
 800c818:	b003      	add	sp, #12
 800c81a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c81e:	6161      	str	r1, [r4, #20]
 800c820:	e7ea      	b.n	800c7f8 <__d2b+0x58>
 800c822:	a801      	add	r0, sp, #4
 800c824:	f7ff fce9 	bl	800c1fa <__lo0bits>
 800c828:	9b01      	ldr	r3, [sp, #4]
 800c82a:	6163      	str	r3, [r4, #20]
 800c82c:	3020      	adds	r0, #32
 800c82e:	2201      	movs	r2, #1
 800c830:	e7e8      	b.n	800c804 <__d2b+0x64>
 800c832:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c836:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c83a:	6038      	str	r0, [r7, #0]
 800c83c:	6918      	ldr	r0, [r3, #16]
 800c83e:	f7ff fcbd 	bl	800c1bc <__hi0bits>
 800c842:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c846:	e7e5      	b.n	800c814 <__d2b+0x74>
 800c848:	0800e6d1 	.word	0x0800e6d1
 800c84c:	0800e6e2 	.word	0x0800e6e2

0800c850 <__ratio>:
 800c850:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c854:	4688      	mov	r8, r1
 800c856:	4669      	mov	r1, sp
 800c858:	4681      	mov	r9, r0
 800c85a:	f7ff ff57 	bl	800c70c <__b2d>
 800c85e:	a901      	add	r1, sp, #4
 800c860:	4640      	mov	r0, r8
 800c862:	ec55 4b10 	vmov	r4, r5, d0
 800c866:	f7ff ff51 	bl	800c70c <__b2d>
 800c86a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800c86e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800c872:	1ad2      	subs	r2, r2, r3
 800c874:	e9dd 3100 	ldrd	r3, r1, [sp]
 800c878:	1a5b      	subs	r3, r3, r1
 800c87a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800c87e:	ec57 6b10 	vmov	r6, r7, d0
 800c882:	2b00      	cmp	r3, #0
 800c884:	bfd6      	itet	le
 800c886:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c88a:	462a      	movgt	r2, r5
 800c88c:	463a      	movle	r2, r7
 800c88e:	46ab      	mov	fp, r5
 800c890:	46a2      	mov	sl, r4
 800c892:	bfce      	itee	gt
 800c894:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800c898:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800c89c:	ee00 3a90 	vmovle	s1, r3
 800c8a0:	ec4b ab17 	vmov	d7, sl, fp
 800c8a4:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800c8a8:	b003      	add	sp, #12
 800c8aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c8ae <__copybits>:
 800c8ae:	3901      	subs	r1, #1
 800c8b0:	b570      	push	{r4, r5, r6, lr}
 800c8b2:	1149      	asrs	r1, r1, #5
 800c8b4:	6914      	ldr	r4, [r2, #16]
 800c8b6:	3101      	adds	r1, #1
 800c8b8:	f102 0314 	add.w	r3, r2, #20
 800c8bc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c8c0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c8c4:	1f05      	subs	r5, r0, #4
 800c8c6:	42a3      	cmp	r3, r4
 800c8c8:	d30c      	bcc.n	800c8e4 <__copybits+0x36>
 800c8ca:	1aa3      	subs	r3, r4, r2
 800c8cc:	3b11      	subs	r3, #17
 800c8ce:	f023 0303 	bic.w	r3, r3, #3
 800c8d2:	3211      	adds	r2, #17
 800c8d4:	42a2      	cmp	r2, r4
 800c8d6:	bf88      	it	hi
 800c8d8:	2300      	movhi	r3, #0
 800c8da:	4418      	add	r0, r3
 800c8dc:	2300      	movs	r3, #0
 800c8de:	4288      	cmp	r0, r1
 800c8e0:	d305      	bcc.n	800c8ee <__copybits+0x40>
 800c8e2:	bd70      	pop	{r4, r5, r6, pc}
 800c8e4:	f853 6b04 	ldr.w	r6, [r3], #4
 800c8e8:	f845 6f04 	str.w	r6, [r5, #4]!
 800c8ec:	e7eb      	b.n	800c8c6 <__copybits+0x18>
 800c8ee:	f840 3b04 	str.w	r3, [r0], #4
 800c8f2:	e7f4      	b.n	800c8de <__copybits+0x30>

0800c8f4 <__any_on>:
 800c8f4:	f100 0214 	add.w	r2, r0, #20
 800c8f8:	6900      	ldr	r0, [r0, #16]
 800c8fa:	114b      	asrs	r3, r1, #5
 800c8fc:	4298      	cmp	r0, r3
 800c8fe:	b510      	push	{r4, lr}
 800c900:	db11      	blt.n	800c926 <__any_on+0x32>
 800c902:	dd0a      	ble.n	800c91a <__any_on+0x26>
 800c904:	f011 011f 	ands.w	r1, r1, #31
 800c908:	d007      	beq.n	800c91a <__any_on+0x26>
 800c90a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c90e:	fa24 f001 	lsr.w	r0, r4, r1
 800c912:	fa00 f101 	lsl.w	r1, r0, r1
 800c916:	428c      	cmp	r4, r1
 800c918:	d10b      	bne.n	800c932 <__any_on+0x3e>
 800c91a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c91e:	4293      	cmp	r3, r2
 800c920:	d803      	bhi.n	800c92a <__any_on+0x36>
 800c922:	2000      	movs	r0, #0
 800c924:	bd10      	pop	{r4, pc}
 800c926:	4603      	mov	r3, r0
 800c928:	e7f7      	b.n	800c91a <__any_on+0x26>
 800c92a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c92e:	2900      	cmp	r1, #0
 800c930:	d0f5      	beq.n	800c91e <__any_on+0x2a>
 800c932:	2001      	movs	r0, #1
 800c934:	e7f6      	b.n	800c924 <__any_on+0x30>

0800c936 <sulp>:
 800c936:	b570      	push	{r4, r5, r6, lr}
 800c938:	4604      	mov	r4, r0
 800c93a:	460d      	mov	r5, r1
 800c93c:	4616      	mov	r6, r2
 800c93e:	ec45 4b10 	vmov	d0, r4, r5
 800c942:	f7ff febd 	bl	800c6c0 <__ulp>
 800c946:	b17e      	cbz	r6, 800c968 <sulp+0x32>
 800c948:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c94c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c950:	2b00      	cmp	r3, #0
 800c952:	dd09      	ble.n	800c968 <sulp+0x32>
 800c954:	051b      	lsls	r3, r3, #20
 800c956:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800c95a:	2000      	movs	r0, #0
 800c95c:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800c960:	ec41 0b17 	vmov	d7, r0, r1
 800c964:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c968:	bd70      	pop	{r4, r5, r6, pc}
 800c96a:	0000      	movs	r0, r0
 800c96c:	0000      	movs	r0, r0
	...

0800c970 <_strtod_l>:
 800c970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c974:	ed2d 8b0a 	vpush	{d8-d12}
 800c978:	b097      	sub	sp, #92	@ 0x5c
 800c97a:	4688      	mov	r8, r1
 800c97c:	920e      	str	r2, [sp, #56]	@ 0x38
 800c97e:	2200      	movs	r2, #0
 800c980:	9212      	str	r2, [sp, #72]	@ 0x48
 800c982:	9005      	str	r0, [sp, #20]
 800c984:	f04f 0a00 	mov.w	sl, #0
 800c988:	f04f 0b00 	mov.w	fp, #0
 800c98c:	460a      	mov	r2, r1
 800c98e:	9211      	str	r2, [sp, #68]	@ 0x44
 800c990:	7811      	ldrb	r1, [r2, #0]
 800c992:	292b      	cmp	r1, #43	@ 0x2b
 800c994:	d04c      	beq.n	800ca30 <_strtod_l+0xc0>
 800c996:	d839      	bhi.n	800ca0c <_strtod_l+0x9c>
 800c998:	290d      	cmp	r1, #13
 800c99a:	d833      	bhi.n	800ca04 <_strtod_l+0x94>
 800c99c:	2908      	cmp	r1, #8
 800c99e:	d833      	bhi.n	800ca08 <_strtod_l+0x98>
 800c9a0:	2900      	cmp	r1, #0
 800c9a2:	d03c      	beq.n	800ca1e <_strtod_l+0xae>
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	9208      	str	r2, [sp, #32]
 800c9a8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800c9aa:	782a      	ldrb	r2, [r5, #0]
 800c9ac:	2a30      	cmp	r2, #48	@ 0x30
 800c9ae:	f040 80b5 	bne.w	800cb1c <_strtod_l+0x1ac>
 800c9b2:	786a      	ldrb	r2, [r5, #1]
 800c9b4:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c9b8:	2a58      	cmp	r2, #88	@ 0x58
 800c9ba:	d170      	bne.n	800ca9e <_strtod_l+0x12e>
 800c9bc:	9302      	str	r3, [sp, #8]
 800c9be:	9b08      	ldr	r3, [sp, #32]
 800c9c0:	9301      	str	r3, [sp, #4]
 800c9c2:	ab12      	add	r3, sp, #72	@ 0x48
 800c9c4:	9300      	str	r3, [sp, #0]
 800c9c6:	4a8b      	ldr	r2, [pc, #556]	@ (800cbf4 <_strtod_l+0x284>)
 800c9c8:	9805      	ldr	r0, [sp, #20]
 800c9ca:	ab13      	add	r3, sp, #76	@ 0x4c
 800c9cc:	a911      	add	r1, sp, #68	@ 0x44
 800c9ce:	f001 fa63 	bl	800de98 <__gethex>
 800c9d2:	f010 060f 	ands.w	r6, r0, #15
 800c9d6:	4604      	mov	r4, r0
 800c9d8:	d005      	beq.n	800c9e6 <_strtod_l+0x76>
 800c9da:	2e06      	cmp	r6, #6
 800c9dc:	d12a      	bne.n	800ca34 <_strtod_l+0xc4>
 800c9de:	3501      	adds	r5, #1
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	9511      	str	r5, [sp, #68]	@ 0x44
 800c9e4:	9308      	str	r3, [sp, #32]
 800c9e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	f040 852f 	bne.w	800d44c <_strtod_l+0xadc>
 800c9ee:	9b08      	ldr	r3, [sp, #32]
 800c9f0:	ec4b ab10 	vmov	d0, sl, fp
 800c9f4:	b1cb      	cbz	r3, 800ca2a <_strtod_l+0xba>
 800c9f6:	eeb1 0b40 	vneg.f64	d0, d0
 800c9fa:	b017      	add	sp, #92	@ 0x5c
 800c9fc:	ecbd 8b0a 	vpop	{d8-d12}
 800ca00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca04:	2920      	cmp	r1, #32
 800ca06:	d1cd      	bne.n	800c9a4 <_strtod_l+0x34>
 800ca08:	3201      	adds	r2, #1
 800ca0a:	e7c0      	b.n	800c98e <_strtod_l+0x1e>
 800ca0c:	292d      	cmp	r1, #45	@ 0x2d
 800ca0e:	d1c9      	bne.n	800c9a4 <_strtod_l+0x34>
 800ca10:	2101      	movs	r1, #1
 800ca12:	9108      	str	r1, [sp, #32]
 800ca14:	1c51      	adds	r1, r2, #1
 800ca16:	9111      	str	r1, [sp, #68]	@ 0x44
 800ca18:	7852      	ldrb	r2, [r2, #1]
 800ca1a:	2a00      	cmp	r2, #0
 800ca1c:	d1c4      	bne.n	800c9a8 <_strtod_l+0x38>
 800ca1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca20:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	f040 850f 	bne.w	800d448 <_strtod_l+0xad8>
 800ca2a:	ec4b ab10 	vmov	d0, sl, fp
 800ca2e:	e7e4      	b.n	800c9fa <_strtod_l+0x8a>
 800ca30:	2100      	movs	r1, #0
 800ca32:	e7ee      	b.n	800ca12 <_strtod_l+0xa2>
 800ca34:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ca36:	b13a      	cbz	r2, 800ca48 <_strtod_l+0xd8>
 800ca38:	2135      	movs	r1, #53	@ 0x35
 800ca3a:	a814      	add	r0, sp, #80	@ 0x50
 800ca3c:	f7ff ff37 	bl	800c8ae <__copybits>
 800ca40:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ca42:	9805      	ldr	r0, [sp, #20]
 800ca44:	f7ff fb08 	bl	800c058 <_Bfree>
 800ca48:	1e73      	subs	r3, r6, #1
 800ca4a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ca4c:	2b04      	cmp	r3, #4
 800ca4e:	d806      	bhi.n	800ca5e <_strtod_l+0xee>
 800ca50:	e8df f003 	tbb	[pc, r3]
 800ca54:	201d0314 	.word	0x201d0314
 800ca58:	14          	.byte	0x14
 800ca59:	00          	.byte	0x00
 800ca5a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800ca5e:	05e3      	lsls	r3, r4, #23
 800ca60:	bf48      	it	mi
 800ca62:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ca66:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ca6a:	0d1b      	lsrs	r3, r3, #20
 800ca6c:	051b      	lsls	r3, r3, #20
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d1b9      	bne.n	800c9e6 <_strtod_l+0x76>
 800ca72:	f7fe fc45 	bl	800b300 <__errno>
 800ca76:	2322      	movs	r3, #34	@ 0x22
 800ca78:	6003      	str	r3, [r0, #0]
 800ca7a:	e7b4      	b.n	800c9e6 <_strtod_l+0x76>
 800ca7c:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800ca80:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ca84:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ca88:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ca8c:	e7e7      	b.n	800ca5e <_strtod_l+0xee>
 800ca8e:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800cbfc <_strtod_l+0x28c>
 800ca92:	e7e4      	b.n	800ca5e <_strtod_l+0xee>
 800ca94:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ca98:	f04f 3aff 	mov.w	sl, #4294967295
 800ca9c:	e7df      	b.n	800ca5e <_strtod_l+0xee>
 800ca9e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800caa0:	1c5a      	adds	r2, r3, #1
 800caa2:	9211      	str	r2, [sp, #68]	@ 0x44
 800caa4:	785b      	ldrb	r3, [r3, #1]
 800caa6:	2b30      	cmp	r3, #48	@ 0x30
 800caa8:	d0f9      	beq.n	800ca9e <_strtod_l+0x12e>
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d09b      	beq.n	800c9e6 <_strtod_l+0x76>
 800caae:	2301      	movs	r3, #1
 800cab0:	2600      	movs	r6, #0
 800cab2:	9307      	str	r3, [sp, #28]
 800cab4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cab6:	930a      	str	r3, [sp, #40]	@ 0x28
 800cab8:	46b1      	mov	r9, r6
 800caba:	4635      	mov	r5, r6
 800cabc:	220a      	movs	r2, #10
 800cabe:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800cac0:	7804      	ldrb	r4, [r0, #0]
 800cac2:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800cac6:	b2d9      	uxtb	r1, r3
 800cac8:	2909      	cmp	r1, #9
 800caca:	d929      	bls.n	800cb20 <_strtod_l+0x1b0>
 800cacc:	494a      	ldr	r1, [pc, #296]	@ (800cbf8 <_strtod_l+0x288>)
 800cace:	2201      	movs	r2, #1
 800cad0:	f001 f928 	bl	800dd24 <strncmp>
 800cad4:	b378      	cbz	r0, 800cb36 <_strtod_l+0x1c6>
 800cad6:	2000      	movs	r0, #0
 800cad8:	4622      	mov	r2, r4
 800cada:	462b      	mov	r3, r5
 800cadc:	4607      	mov	r7, r0
 800cade:	9006      	str	r0, [sp, #24]
 800cae0:	2a65      	cmp	r2, #101	@ 0x65
 800cae2:	d001      	beq.n	800cae8 <_strtod_l+0x178>
 800cae4:	2a45      	cmp	r2, #69	@ 0x45
 800cae6:	d117      	bne.n	800cb18 <_strtod_l+0x1a8>
 800cae8:	b91b      	cbnz	r3, 800caf2 <_strtod_l+0x182>
 800caea:	9b07      	ldr	r3, [sp, #28]
 800caec:	4303      	orrs	r3, r0
 800caee:	d096      	beq.n	800ca1e <_strtod_l+0xae>
 800caf0:	2300      	movs	r3, #0
 800caf2:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800caf6:	f108 0201 	add.w	r2, r8, #1
 800cafa:	9211      	str	r2, [sp, #68]	@ 0x44
 800cafc:	f898 2001 	ldrb.w	r2, [r8, #1]
 800cb00:	2a2b      	cmp	r2, #43	@ 0x2b
 800cb02:	d06b      	beq.n	800cbdc <_strtod_l+0x26c>
 800cb04:	2a2d      	cmp	r2, #45	@ 0x2d
 800cb06:	d071      	beq.n	800cbec <_strtod_l+0x27c>
 800cb08:	f04f 0e00 	mov.w	lr, #0
 800cb0c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800cb10:	2c09      	cmp	r4, #9
 800cb12:	d979      	bls.n	800cc08 <_strtod_l+0x298>
 800cb14:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800cb18:	2400      	movs	r4, #0
 800cb1a:	e094      	b.n	800cc46 <_strtod_l+0x2d6>
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	e7c7      	b.n	800cab0 <_strtod_l+0x140>
 800cb20:	2d08      	cmp	r5, #8
 800cb22:	f100 0001 	add.w	r0, r0, #1
 800cb26:	bfd4      	ite	le
 800cb28:	fb02 3909 	mlale	r9, r2, r9, r3
 800cb2c:	fb02 3606 	mlagt	r6, r2, r6, r3
 800cb30:	3501      	adds	r5, #1
 800cb32:	9011      	str	r0, [sp, #68]	@ 0x44
 800cb34:	e7c3      	b.n	800cabe <_strtod_l+0x14e>
 800cb36:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cb38:	1c5a      	adds	r2, r3, #1
 800cb3a:	9211      	str	r2, [sp, #68]	@ 0x44
 800cb3c:	785a      	ldrb	r2, [r3, #1]
 800cb3e:	b375      	cbz	r5, 800cb9e <_strtod_l+0x22e>
 800cb40:	4607      	mov	r7, r0
 800cb42:	462b      	mov	r3, r5
 800cb44:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800cb48:	2909      	cmp	r1, #9
 800cb4a:	d913      	bls.n	800cb74 <_strtod_l+0x204>
 800cb4c:	2101      	movs	r1, #1
 800cb4e:	9106      	str	r1, [sp, #24]
 800cb50:	e7c6      	b.n	800cae0 <_strtod_l+0x170>
 800cb52:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cb54:	1c5a      	adds	r2, r3, #1
 800cb56:	9211      	str	r2, [sp, #68]	@ 0x44
 800cb58:	785a      	ldrb	r2, [r3, #1]
 800cb5a:	3001      	adds	r0, #1
 800cb5c:	2a30      	cmp	r2, #48	@ 0x30
 800cb5e:	d0f8      	beq.n	800cb52 <_strtod_l+0x1e2>
 800cb60:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800cb64:	2b08      	cmp	r3, #8
 800cb66:	f200 8476 	bhi.w	800d456 <_strtod_l+0xae6>
 800cb6a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cb6c:	930a      	str	r3, [sp, #40]	@ 0x28
 800cb6e:	4607      	mov	r7, r0
 800cb70:	2000      	movs	r0, #0
 800cb72:	4603      	mov	r3, r0
 800cb74:	3a30      	subs	r2, #48	@ 0x30
 800cb76:	f100 0101 	add.w	r1, r0, #1
 800cb7a:	d023      	beq.n	800cbc4 <_strtod_l+0x254>
 800cb7c:	440f      	add	r7, r1
 800cb7e:	eb00 0c03 	add.w	ip, r0, r3
 800cb82:	4619      	mov	r1, r3
 800cb84:	240a      	movs	r4, #10
 800cb86:	4561      	cmp	r1, ip
 800cb88:	d10b      	bne.n	800cba2 <_strtod_l+0x232>
 800cb8a:	1c5c      	adds	r4, r3, #1
 800cb8c:	4403      	add	r3, r0
 800cb8e:	2b08      	cmp	r3, #8
 800cb90:	4404      	add	r4, r0
 800cb92:	dc11      	bgt.n	800cbb8 <_strtod_l+0x248>
 800cb94:	230a      	movs	r3, #10
 800cb96:	fb03 2909 	mla	r9, r3, r9, r2
 800cb9a:	2100      	movs	r1, #0
 800cb9c:	e013      	b.n	800cbc6 <_strtod_l+0x256>
 800cb9e:	4628      	mov	r0, r5
 800cba0:	e7dc      	b.n	800cb5c <_strtod_l+0x1ec>
 800cba2:	2908      	cmp	r1, #8
 800cba4:	f101 0101 	add.w	r1, r1, #1
 800cba8:	dc02      	bgt.n	800cbb0 <_strtod_l+0x240>
 800cbaa:	fb04 f909 	mul.w	r9, r4, r9
 800cbae:	e7ea      	b.n	800cb86 <_strtod_l+0x216>
 800cbb0:	2910      	cmp	r1, #16
 800cbb2:	bfd8      	it	le
 800cbb4:	4366      	mulle	r6, r4
 800cbb6:	e7e6      	b.n	800cb86 <_strtod_l+0x216>
 800cbb8:	2b0f      	cmp	r3, #15
 800cbba:	dcee      	bgt.n	800cb9a <_strtod_l+0x22a>
 800cbbc:	230a      	movs	r3, #10
 800cbbe:	fb03 2606 	mla	r6, r3, r6, r2
 800cbc2:	e7ea      	b.n	800cb9a <_strtod_l+0x22a>
 800cbc4:	461c      	mov	r4, r3
 800cbc6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cbc8:	1c5a      	adds	r2, r3, #1
 800cbca:	9211      	str	r2, [sp, #68]	@ 0x44
 800cbcc:	785a      	ldrb	r2, [r3, #1]
 800cbce:	4608      	mov	r0, r1
 800cbd0:	4623      	mov	r3, r4
 800cbd2:	e7b7      	b.n	800cb44 <_strtod_l+0x1d4>
 800cbd4:	2301      	movs	r3, #1
 800cbd6:	2700      	movs	r7, #0
 800cbd8:	9306      	str	r3, [sp, #24]
 800cbda:	e786      	b.n	800caea <_strtod_l+0x17a>
 800cbdc:	f04f 0e00 	mov.w	lr, #0
 800cbe0:	f108 0202 	add.w	r2, r8, #2
 800cbe4:	9211      	str	r2, [sp, #68]	@ 0x44
 800cbe6:	f898 2002 	ldrb.w	r2, [r8, #2]
 800cbea:	e78f      	b.n	800cb0c <_strtod_l+0x19c>
 800cbec:	f04f 0e01 	mov.w	lr, #1
 800cbf0:	e7f6      	b.n	800cbe0 <_strtod_l+0x270>
 800cbf2:	bf00      	nop
 800cbf4:	0800e850 	.word	0x0800e850
 800cbf8:	0800e838 	.word	0x0800e838
 800cbfc:	7ff00000 	.word	0x7ff00000
 800cc00:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800cc02:	1c54      	adds	r4, r2, #1
 800cc04:	9411      	str	r4, [sp, #68]	@ 0x44
 800cc06:	7852      	ldrb	r2, [r2, #1]
 800cc08:	2a30      	cmp	r2, #48	@ 0x30
 800cc0a:	d0f9      	beq.n	800cc00 <_strtod_l+0x290>
 800cc0c:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800cc10:	2c08      	cmp	r4, #8
 800cc12:	d881      	bhi.n	800cb18 <_strtod_l+0x1a8>
 800cc14:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800cc18:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800cc1a:	9209      	str	r2, [sp, #36]	@ 0x24
 800cc1c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800cc1e:	1c51      	adds	r1, r2, #1
 800cc20:	9111      	str	r1, [sp, #68]	@ 0x44
 800cc22:	7852      	ldrb	r2, [r2, #1]
 800cc24:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800cc28:	2c09      	cmp	r4, #9
 800cc2a:	d938      	bls.n	800cc9e <_strtod_l+0x32e>
 800cc2c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800cc2e:	1b0c      	subs	r4, r1, r4
 800cc30:	2c08      	cmp	r4, #8
 800cc32:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800cc36:	dc02      	bgt.n	800cc3e <_strtod_l+0x2ce>
 800cc38:	4564      	cmp	r4, ip
 800cc3a:	bfa8      	it	ge
 800cc3c:	4664      	movge	r4, ip
 800cc3e:	f1be 0f00 	cmp.w	lr, #0
 800cc42:	d000      	beq.n	800cc46 <_strtod_l+0x2d6>
 800cc44:	4264      	negs	r4, r4
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d14e      	bne.n	800cce8 <_strtod_l+0x378>
 800cc4a:	9b07      	ldr	r3, [sp, #28]
 800cc4c:	4318      	orrs	r0, r3
 800cc4e:	f47f aeca 	bne.w	800c9e6 <_strtod_l+0x76>
 800cc52:	9b06      	ldr	r3, [sp, #24]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	f47f aee2 	bne.w	800ca1e <_strtod_l+0xae>
 800cc5a:	2a69      	cmp	r2, #105	@ 0x69
 800cc5c:	d027      	beq.n	800ccae <_strtod_l+0x33e>
 800cc5e:	dc24      	bgt.n	800ccaa <_strtod_l+0x33a>
 800cc60:	2a49      	cmp	r2, #73	@ 0x49
 800cc62:	d024      	beq.n	800ccae <_strtod_l+0x33e>
 800cc64:	2a4e      	cmp	r2, #78	@ 0x4e
 800cc66:	f47f aeda 	bne.w	800ca1e <_strtod_l+0xae>
 800cc6a:	4997      	ldr	r1, [pc, #604]	@ (800cec8 <_strtod_l+0x558>)
 800cc6c:	a811      	add	r0, sp, #68	@ 0x44
 800cc6e:	f001 fb35 	bl	800e2dc <__match>
 800cc72:	2800      	cmp	r0, #0
 800cc74:	f43f aed3 	beq.w	800ca1e <_strtod_l+0xae>
 800cc78:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cc7a:	781b      	ldrb	r3, [r3, #0]
 800cc7c:	2b28      	cmp	r3, #40	@ 0x28
 800cc7e:	d12d      	bne.n	800ccdc <_strtod_l+0x36c>
 800cc80:	4992      	ldr	r1, [pc, #584]	@ (800cecc <_strtod_l+0x55c>)
 800cc82:	aa14      	add	r2, sp, #80	@ 0x50
 800cc84:	a811      	add	r0, sp, #68	@ 0x44
 800cc86:	f001 fb3d 	bl	800e304 <__hexnan>
 800cc8a:	2805      	cmp	r0, #5
 800cc8c:	d126      	bne.n	800ccdc <_strtod_l+0x36c>
 800cc8e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800cc90:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800cc94:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800cc98:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800cc9c:	e6a3      	b.n	800c9e6 <_strtod_l+0x76>
 800cc9e:	240a      	movs	r4, #10
 800cca0:	fb04 2c0c 	mla	ip, r4, ip, r2
 800cca4:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800cca8:	e7b8      	b.n	800cc1c <_strtod_l+0x2ac>
 800ccaa:	2a6e      	cmp	r2, #110	@ 0x6e
 800ccac:	e7db      	b.n	800cc66 <_strtod_l+0x2f6>
 800ccae:	4988      	ldr	r1, [pc, #544]	@ (800ced0 <_strtod_l+0x560>)
 800ccb0:	a811      	add	r0, sp, #68	@ 0x44
 800ccb2:	f001 fb13 	bl	800e2dc <__match>
 800ccb6:	2800      	cmp	r0, #0
 800ccb8:	f43f aeb1 	beq.w	800ca1e <_strtod_l+0xae>
 800ccbc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ccbe:	4985      	ldr	r1, [pc, #532]	@ (800ced4 <_strtod_l+0x564>)
 800ccc0:	3b01      	subs	r3, #1
 800ccc2:	a811      	add	r0, sp, #68	@ 0x44
 800ccc4:	9311      	str	r3, [sp, #68]	@ 0x44
 800ccc6:	f001 fb09 	bl	800e2dc <__match>
 800ccca:	b910      	cbnz	r0, 800ccd2 <_strtod_l+0x362>
 800cccc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ccce:	3301      	adds	r3, #1
 800ccd0:	9311      	str	r3, [sp, #68]	@ 0x44
 800ccd2:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800cee8 <_strtod_l+0x578>
 800ccd6:	f04f 0a00 	mov.w	sl, #0
 800ccda:	e684      	b.n	800c9e6 <_strtod_l+0x76>
 800ccdc:	487e      	ldr	r0, [pc, #504]	@ (800ced8 <_strtod_l+0x568>)
 800ccde:	f001 f857 	bl	800dd90 <nan>
 800cce2:	ec5b ab10 	vmov	sl, fp, d0
 800cce6:	e67e      	b.n	800c9e6 <_strtod_l+0x76>
 800cce8:	ee07 9a90 	vmov	s15, r9
 800ccec:	1be2      	subs	r2, r4, r7
 800ccee:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ccf2:	2d00      	cmp	r5, #0
 800ccf4:	bf08      	it	eq
 800ccf6:	461d      	moveq	r5, r3
 800ccf8:	2b10      	cmp	r3, #16
 800ccfa:	9209      	str	r2, [sp, #36]	@ 0x24
 800ccfc:	461a      	mov	r2, r3
 800ccfe:	bfa8      	it	ge
 800cd00:	2210      	movge	r2, #16
 800cd02:	2b09      	cmp	r3, #9
 800cd04:	ec5b ab17 	vmov	sl, fp, d7
 800cd08:	dc15      	bgt.n	800cd36 <_strtod_l+0x3c6>
 800cd0a:	1be1      	subs	r1, r4, r7
 800cd0c:	2900      	cmp	r1, #0
 800cd0e:	f43f ae6a 	beq.w	800c9e6 <_strtod_l+0x76>
 800cd12:	eba4 0107 	sub.w	r1, r4, r7
 800cd16:	dd72      	ble.n	800cdfe <_strtod_l+0x48e>
 800cd18:	2916      	cmp	r1, #22
 800cd1a:	dc59      	bgt.n	800cdd0 <_strtod_l+0x460>
 800cd1c:	4b6f      	ldr	r3, [pc, #444]	@ (800cedc <_strtod_l+0x56c>)
 800cd1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cd24:	ed93 7b00 	vldr	d7, [r3]
 800cd28:	ec4b ab16 	vmov	d6, sl, fp
 800cd2c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cd30:	ec5b ab17 	vmov	sl, fp, d7
 800cd34:	e657      	b.n	800c9e6 <_strtod_l+0x76>
 800cd36:	4969      	ldr	r1, [pc, #420]	@ (800cedc <_strtod_l+0x56c>)
 800cd38:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800cd3c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800cd40:	ee06 6a90 	vmov	s13, r6
 800cd44:	2b0f      	cmp	r3, #15
 800cd46:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800cd4a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800cd4e:	ec5b ab16 	vmov	sl, fp, d6
 800cd52:	ddda      	ble.n	800cd0a <_strtod_l+0x39a>
 800cd54:	1a9a      	subs	r2, r3, r2
 800cd56:	1be1      	subs	r1, r4, r7
 800cd58:	440a      	add	r2, r1
 800cd5a:	2a00      	cmp	r2, #0
 800cd5c:	f340 8094 	ble.w	800ce88 <_strtod_l+0x518>
 800cd60:	f012 000f 	ands.w	r0, r2, #15
 800cd64:	d00a      	beq.n	800cd7c <_strtod_l+0x40c>
 800cd66:	495d      	ldr	r1, [pc, #372]	@ (800cedc <_strtod_l+0x56c>)
 800cd68:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800cd6c:	ed91 7b00 	vldr	d7, [r1]
 800cd70:	ec4b ab16 	vmov	d6, sl, fp
 800cd74:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cd78:	ec5b ab17 	vmov	sl, fp, d7
 800cd7c:	f032 020f 	bics.w	r2, r2, #15
 800cd80:	d073      	beq.n	800ce6a <_strtod_l+0x4fa>
 800cd82:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800cd86:	dd47      	ble.n	800ce18 <_strtod_l+0x4a8>
 800cd88:	2400      	movs	r4, #0
 800cd8a:	4625      	mov	r5, r4
 800cd8c:	9407      	str	r4, [sp, #28]
 800cd8e:	4626      	mov	r6, r4
 800cd90:	9a05      	ldr	r2, [sp, #20]
 800cd92:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800cee8 <_strtod_l+0x578>
 800cd96:	2322      	movs	r3, #34	@ 0x22
 800cd98:	6013      	str	r3, [r2, #0]
 800cd9a:	f04f 0a00 	mov.w	sl, #0
 800cd9e:	9b07      	ldr	r3, [sp, #28]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	f43f ae20 	beq.w	800c9e6 <_strtod_l+0x76>
 800cda6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800cda8:	9805      	ldr	r0, [sp, #20]
 800cdaa:	f7ff f955 	bl	800c058 <_Bfree>
 800cdae:	9805      	ldr	r0, [sp, #20]
 800cdb0:	4631      	mov	r1, r6
 800cdb2:	f7ff f951 	bl	800c058 <_Bfree>
 800cdb6:	9805      	ldr	r0, [sp, #20]
 800cdb8:	4629      	mov	r1, r5
 800cdba:	f7ff f94d 	bl	800c058 <_Bfree>
 800cdbe:	9907      	ldr	r1, [sp, #28]
 800cdc0:	9805      	ldr	r0, [sp, #20]
 800cdc2:	f7ff f949 	bl	800c058 <_Bfree>
 800cdc6:	9805      	ldr	r0, [sp, #20]
 800cdc8:	4621      	mov	r1, r4
 800cdca:	f7ff f945 	bl	800c058 <_Bfree>
 800cdce:	e60a      	b.n	800c9e6 <_strtod_l+0x76>
 800cdd0:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800cdd4:	1be0      	subs	r0, r4, r7
 800cdd6:	4281      	cmp	r1, r0
 800cdd8:	dbbc      	blt.n	800cd54 <_strtod_l+0x3e4>
 800cdda:	4a40      	ldr	r2, [pc, #256]	@ (800cedc <_strtod_l+0x56c>)
 800cddc:	f1c3 030f 	rsb	r3, r3, #15
 800cde0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800cde4:	ed91 7b00 	vldr	d7, [r1]
 800cde8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cdea:	ec4b ab16 	vmov	d6, sl, fp
 800cdee:	1acb      	subs	r3, r1, r3
 800cdf0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800cdf4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cdf8:	ed92 6b00 	vldr	d6, [r2]
 800cdfc:	e796      	b.n	800cd2c <_strtod_l+0x3bc>
 800cdfe:	3116      	adds	r1, #22
 800ce00:	dba8      	blt.n	800cd54 <_strtod_l+0x3e4>
 800ce02:	4b36      	ldr	r3, [pc, #216]	@ (800cedc <_strtod_l+0x56c>)
 800ce04:	1b3c      	subs	r4, r7, r4
 800ce06:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800ce0a:	ed94 7b00 	vldr	d7, [r4]
 800ce0e:	ec4b ab16 	vmov	d6, sl, fp
 800ce12:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ce16:	e78b      	b.n	800cd30 <_strtod_l+0x3c0>
 800ce18:	2000      	movs	r0, #0
 800ce1a:	ec4b ab17 	vmov	d7, sl, fp
 800ce1e:	4e30      	ldr	r6, [pc, #192]	@ (800cee0 <_strtod_l+0x570>)
 800ce20:	1112      	asrs	r2, r2, #4
 800ce22:	4601      	mov	r1, r0
 800ce24:	2a01      	cmp	r2, #1
 800ce26:	dc23      	bgt.n	800ce70 <_strtod_l+0x500>
 800ce28:	b108      	cbz	r0, 800ce2e <_strtod_l+0x4be>
 800ce2a:	ec5b ab17 	vmov	sl, fp, d7
 800ce2e:	4a2c      	ldr	r2, [pc, #176]	@ (800cee0 <_strtod_l+0x570>)
 800ce30:	482c      	ldr	r0, [pc, #176]	@ (800cee4 <_strtod_l+0x574>)
 800ce32:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800ce36:	ed92 7b00 	vldr	d7, [r2]
 800ce3a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ce3e:	ec4b ab16 	vmov	d6, sl, fp
 800ce42:	4a29      	ldr	r2, [pc, #164]	@ (800cee8 <_strtod_l+0x578>)
 800ce44:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ce48:	ee17 1a90 	vmov	r1, s15
 800ce4c:	400a      	ands	r2, r1
 800ce4e:	4282      	cmp	r2, r0
 800ce50:	ec5b ab17 	vmov	sl, fp, d7
 800ce54:	d898      	bhi.n	800cd88 <_strtod_l+0x418>
 800ce56:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800ce5a:	4282      	cmp	r2, r0
 800ce5c:	bf86      	itte	hi
 800ce5e:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800ceec <_strtod_l+0x57c>
 800ce62:	f04f 3aff 	movhi.w	sl, #4294967295
 800ce66:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	9206      	str	r2, [sp, #24]
 800ce6e:	e076      	b.n	800cf5e <_strtod_l+0x5ee>
 800ce70:	f012 0f01 	tst.w	r2, #1
 800ce74:	d004      	beq.n	800ce80 <_strtod_l+0x510>
 800ce76:	ed96 6b00 	vldr	d6, [r6]
 800ce7a:	2001      	movs	r0, #1
 800ce7c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ce80:	3101      	adds	r1, #1
 800ce82:	1052      	asrs	r2, r2, #1
 800ce84:	3608      	adds	r6, #8
 800ce86:	e7cd      	b.n	800ce24 <_strtod_l+0x4b4>
 800ce88:	d0ef      	beq.n	800ce6a <_strtod_l+0x4fa>
 800ce8a:	4252      	negs	r2, r2
 800ce8c:	f012 000f 	ands.w	r0, r2, #15
 800ce90:	d00a      	beq.n	800cea8 <_strtod_l+0x538>
 800ce92:	4912      	ldr	r1, [pc, #72]	@ (800cedc <_strtod_l+0x56c>)
 800ce94:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800ce98:	ed91 7b00 	vldr	d7, [r1]
 800ce9c:	ec4b ab16 	vmov	d6, sl, fp
 800cea0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800cea4:	ec5b ab17 	vmov	sl, fp, d7
 800cea8:	1112      	asrs	r2, r2, #4
 800ceaa:	d0de      	beq.n	800ce6a <_strtod_l+0x4fa>
 800ceac:	2a1f      	cmp	r2, #31
 800ceae:	dd1f      	ble.n	800cef0 <_strtod_l+0x580>
 800ceb0:	2400      	movs	r4, #0
 800ceb2:	4625      	mov	r5, r4
 800ceb4:	9407      	str	r4, [sp, #28]
 800ceb6:	4626      	mov	r6, r4
 800ceb8:	9a05      	ldr	r2, [sp, #20]
 800ceba:	2322      	movs	r3, #34	@ 0x22
 800cebc:	f04f 0a00 	mov.w	sl, #0
 800cec0:	f04f 0b00 	mov.w	fp, #0
 800cec4:	6013      	str	r3, [r2, #0]
 800cec6:	e76a      	b.n	800cd9e <_strtod_l+0x42e>
 800cec8:	0800e629 	.word	0x0800e629
 800cecc:	0800e83c 	.word	0x0800e83c
 800ced0:	0800e621 	.word	0x0800e621
 800ced4:	0800e658 	.word	0x0800e658
 800ced8:	0800e61b 	.word	0x0800e61b
 800cedc:	0800e770 	.word	0x0800e770
 800cee0:	0800e748 	.word	0x0800e748
 800cee4:	7ca00000 	.word	0x7ca00000
 800cee8:	7ff00000 	.word	0x7ff00000
 800ceec:	7fefffff 	.word	0x7fefffff
 800cef0:	f012 0110 	ands.w	r1, r2, #16
 800cef4:	bf18      	it	ne
 800cef6:	216a      	movne	r1, #106	@ 0x6a
 800cef8:	9106      	str	r1, [sp, #24]
 800cefa:	ec4b ab17 	vmov	d7, sl, fp
 800cefe:	49b0      	ldr	r1, [pc, #704]	@ (800d1c0 <_strtod_l+0x850>)
 800cf00:	2000      	movs	r0, #0
 800cf02:	07d6      	lsls	r6, r2, #31
 800cf04:	d504      	bpl.n	800cf10 <_strtod_l+0x5a0>
 800cf06:	ed91 6b00 	vldr	d6, [r1]
 800cf0a:	2001      	movs	r0, #1
 800cf0c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cf10:	1052      	asrs	r2, r2, #1
 800cf12:	f101 0108 	add.w	r1, r1, #8
 800cf16:	d1f4      	bne.n	800cf02 <_strtod_l+0x592>
 800cf18:	b108      	cbz	r0, 800cf1e <_strtod_l+0x5ae>
 800cf1a:	ec5b ab17 	vmov	sl, fp, d7
 800cf1e:	9a06      	ldr	r2, [sp, #24]
 800cf20:	b1b2      	cbz	r2, 800cf50 <_strtod_l+0x5e0>
 800cf22:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800cf26:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800cf2a:	2a00      	cmp	r2, #0
 800cf2c:	4658      	mov	r0, fp
 800cf2e:	dd0f      	ble.n	800cf50 <_strtod_l+0x5e0>
 800cf30:	2a1f      	cmp	r2, #31
 800cf32:	dd55      	ble.n	800cfe0 <_strtod_l+0x670>
 800cf34:	2a34      	cmp	r2, #52	@ 0x34
 800cf36:	bfde      	ittt	le
 800cf38:	f04f 32ff 	movle.w	r2, #4294967295
 800cf3c:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800cf40:	408a      	lslle	r2, r1
 800cf42:	f04f 0a00 	mov.w	sl, #0
 800cf46:	bfcc      	ite	gt
 800cf48:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800cf4c:	ea02 0b00 	andle.w	fp, r2, r0
 800cf50:	ec4b ab17 	vmov	d7, sl, fp
 800cf54:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cf58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf5c:	d0a8      	beq.n	800ceb0 <_strtod_l+0x540>
 800cf5e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cf60:	9805      	ldr	r0, [sp, #20]
 800cf62:	f8cd 9000 	str.w	r9, [sp]
 800cf66:	462a      	mov	r2, r5
 800cf68:	f7ff f8de 	bl	800c128 <__s2b>
 800cf6c:	9007      	str	r0, [sp, #28]
 800cf6e:	2800      	cmp	r0, #0
 800cf70:	f43f af0a 	beq.w	800cd88 <_strtod_l+0x418>
 800cf74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf76:	1b3f      	subs	r7, r7, r4
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	bfb4      	ite	lt
 800cf7c:	463b      	movlt	r3, r7
 800cf7e:	2300      	movge	r3, #0
 800cf80:	930a      	str	r3, [sp, #40]	@ 0x28
 800cf82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf84:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800d1b0 <_strtod_l+0x840>
 800cf88:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800cf8c:	2400      	movs	r4, #0
 800cf8e:	930d      	str	r3, [sp, #52]	@ 0x34
 800cf90:	4625      	mov	r5, r4
 800cf92:	9b07      	ldr	r3, [sp, #28]
 800cf94:	9805      	ldr	r0, [sp, #20]
 800cf96:	6859      	ldr	r1, [r3, #4]
 800cf98:	f7ff f81e 	bl	800bfd8 <_Balloc>
 800cf9c:	4606      	mov	r6, r0
 800cf9e:	2800      	cmp	r0, #0
 800cfa0:	f43f aef6 	beq.w	800cd90 <_strtod_l+0x420>
 800cfa4:	9b07      	ldr	r3, [sp, #28]
 800cfa6:	691a      	ldr	r2, [r3, #16]
 800cfa8:	ec4b ab19 	vmov	d9, sl, fp
 800cfac:	3202      	adds	r2, #2
 800cfae:	f103 010c 	add.w	r1, r3, #12
 800cfb2:	0092      	lsls	r2, r2, #2
 800cfb4:	300c      	adds	r0, #12
 800cfb6:	f7fe f9d0 	bl	800b35a <memcpy>
 800cfba:	eeb0 0b49 	vmov.f64	d0, d9
 800cfbe:	9805      	ldr	r0, [sp, #20]
 800cfc0:	aa14      	add	r2, sp, #80	@ 0x50
 800cfc2:	a913      	add	r1, sp, #76	@ 0x4c
 800cfc4:	f7ff fbec 	bl	800c7a0 <__d2b>
 800cfc8:	9012      	str	r0, [sp, #72]	@ 0x48
 800cfca:	2800      	cmp	r0, #0
 800cfcc:	f43f aee0 	beq.w	800cd90 <_strtod_l+0x420>
 800cfd0:	9805      	ldr	r0, [sp, #20]
 800cfd2:	2101      	movs	r1, #1
 800cfd4:	f7ff f93e 	bl	800c254 <__i2b>
 800cfd8:	4605      	mov	r5, r0
 800cfda:	b940      	cbnz	r0, 800cfee <_strtod_l+0x67e>
 800cfdc:	2500      	movs	r5, #0
 800cfde:	e6d7      	b.n	800cd90 <_strtod_l+0x420>
 800cfe0:	f04f 31ff 	mov.w	r1, #4294967295
 800cfe4:	fa01 f202 	lsl.w	r2, r1, r2
 800cfe8:	ea02 0a0a 	and.w	sl, r2, sl
 800cfec:	e7b0      	b.n	800cf50 <_strtod_l+0x5e0>
 800cfee:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800cff0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800cff2:	2f00      	cmp	r7, #0
 800cff4:	bfab      	itete	ge
 800cff6:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800cff8:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800cffa:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800cffe:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800d002:	bfac      	ite	ge
 800d004:	eb07 0903 	addge.w	r9, r7, r3
 800d008:	eba3 0807 	sublt.w	r8, r3, r7
 800d00c:	9b06      	ldr	r3, [sp, #24]
 800d00e:	1aff      	subs	r7, r7, r3
 800d010:	4417      	add	r7, r2
 800d012:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800d016:	4a6b      	ldr	r2, [pc, #428]	@ (800d1c4 <_strtod_l+0x854>)
 800d018:	3f01      	subs	r7, #1
 800d01a:	4297      	cmp	r7, r2
 800d01c:	da51      	bge.n	800d0c2 <_strtod_l+0x752>
 800d01e:	1bd1      	subs	r1, r2, r7
 800d020:	291f      	cmp	r1, #31
 800d022:	eba3 0301 	sub.w	r3, r3, r1
 800d026:	f04f 0201 	mov.w	r2, #1
 800d02a:	dc3e      	bgt.n	800d0aa <_strtod_l+0x73a>
 800d02c:	408a      	lsls	r2, r1
 800d02e:	920c      	str	r2, [sp, #48]	@ 0x30
 800d030:	2200      	movs	r2, #0
 800d032:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d034:	eb09 0703 	add.w	r7, r9, r3
 800d038:	4498      	add	r8, r3
 800d03a:	9b06      	ldr	r3, [sp, #24]
 800d03c:	45b9      	cmp	r9, r7
 800d03e:	4498      	add	r8, r3
 800d040:	464b      	mov	r3, r9
 800d042:	bfa8      	it	ge
 800d044:	463b      	movge	r3, r7
 800d046:	4543      	cmp	r3, r8
 800d048:	bfa8      	it	ge
 800d04a:	4643      	movge	r3, r8
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	bfc2      	ittt	gt
 800d050:	1aff      	subgt	r7, r7, r3
 800d052:	eba8 0803 	subgt.w	r8, r8, r3
 800d056:	eba9 0903 	subgt.w	r9, r9, r3
 800d05a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	dd16      	ble.n	800d08e <_strtod_l+0x71e>
 800d060:	4629      	mov	r1, r5
 800d062:	9805      	ldr	r0, [sp, #20]
 800d064:	461a      	mov	r2, r3
 800d066:	f7ff f9b5 	bl	800c3d4 <__pow5mult>
 800d06a:	4605      	mov	r5, r0
 800d06c:	2800      	cmp	r0, #0
 800d06e:	d0b5      	beq.n	800cfdc <_strtod_l+0x66c>
 800d070:	4601      	mov	r1, r0
 800d072:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d074:	9805      	ldr	r0, [sp, #20]
 800d076:	f7ff f903 	bl	800c280 <__multiply>
 800d07a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800d07c:	2800      	cmp	r0, #0
 800d07e:	f43f ae87 	beq.w	800cd90 <_strtod_l+0x420>
 800d082:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d084:	9805      	ldr	r0, [sp, #20]
 800d086:	f7fe ffe7 	bl	800c058 <_Bfree>
 800d08a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d08c:	9312      	str	r3, [sp, #72]	@ 0x48
 800d08e:	2f00      	cmp	r7, #0
 800d090:	dc1b      	bgt.n	800d0ca <_strtod_l+0x75a>
 800d092:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d094:	2b00      	cmp	r3, #0
 800d096:	dd21      	ble.n	800d0dc <_strtod_l+0x76c>
 800d098:	4631      	mov	r1, r6
 800d09a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d09c:	9805      	ldr	r0, [sp, #20]
 800d09e:	f7ff f999 	bl	800c3d4 <__pow5mult>
 800d0a2:	4606      	mov	r6, r0
 800d0a4:	b9d0      	cbnz	r0, 800d0dc <_strtod_l+0x76c>
 800d0a6:	2600      	movs	r6, #0
 800d0a8:	e672      	b.n	800cd90 <_strtod_l+0x420>
 800d0aa:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800d0ae:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800d0b2:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800d0b6:	37e2      	adds	r7, #226	@ 0xe2
 800d0b8:	fa02 f107 	lsl.w	r1, r2, r7
 800d0bc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d0be:	920c      	str	r2, [sp, #48]	@ 0x30
 800d0c0:	e7b8      	b.n	800d034 <_strtod_l+0x6c4>
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d0c6:	2201      	movs	r2, #1
 800d0c8:	e7f9      	b.n	800d0be <_strtod_l+0x74e>
 800d0ca:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d0cc:	9805      	ldr	r0, [sp, #20]
 800d0ce:	463a      	mov	r2, r7
 800d0d0:	f7ff f9da 	bl	800c488 <__lshift>
 800d0d4:	9012      	str	r0, [sp, #72]	@ 0x48
 800d0d6:	2800      	cmp	r0, #0
 800d0d8:	d1db      	bne.n	800d092 <_strtod_l+0x722>
 800d0da:	e659      	b.n	800cd90 <_strtod_l+0x420>
 800d0dc:	f1b8 0f00 	cmp.w	r8, #0
 800d0e0:	dd07      	ble.n	800d0f2 <_strtod_l+0x782>
 800d0e2:	4631      	mov	r1, r6
 800d0e4:	9805      	ldr	r0, [sp, #20]
 800d0e6:	4642      	mov	r2, r8
 800d0e8:	f7ff f9ce 	bl	800c488 <__lshift>
 800d0ec:	4606      	mov	r6, r0
 800d0ee:	2800      	cmp	r0, #0
 800d0f0:	d0d9      	beq.n	800d0a6 <_strtod_l+0x736>
 800d0f2:	f1b9 0f00 	cmp.w	r9, #0
 800d0f6:	dd08      	ble.n	800d10a <_strtod_l+0x79a>
 800d0f8:	4629      	mov	r1, r5
 800d0fa:	9805      	ldr	r0, [sp, #20]
 800d0fc:	464a      	mov	r2, r9
 800d0fe:	f7ff f9c3 	bl	800c488 <__lshift>
 800d102:	4605      	mov	r5, r0
 800d104:	2800      	cmp	r0, #0
 800d106:	f43f ae43 	beq.w	800cd90 <_strtod_l+0x420>
 800d10a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d10c:	9805      	ldr	r0, [sp, #20]
 800d10e:	4632      	mov	r2, r6
 800d110:	f7ff fa42 	bl	800c598 <__mdiff>
 800d114:	4604      	mov	r4, r0
 800d116:	2800      	cmp	r0, #0
 800d118:	f43f ae3a 	beq.w	800cd90 <_strtod_l+0x420>
 800d11c:	2300      	movs	r3, #0
 800d11e:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800d122:	60c3      	str	r3, [r0, #12]
 800d124:	4629      	mov	r1, r5
 800d126:	f7ff fa1b 	bl	800c560 <__mcmp>
 800d12a:	2800      	cmp	r0, #0
 800d12c:	da4e      	bge.n	800d1cc <_strtod_l+0x85c>
 800d12e:	ea58 080a 	orrs.w	r8, r8, sl
 800d132:	d174      	bne.n	800d21e <_strtod_l+0x8ae>
 800d134:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d170      	bne.n	800d21e <_strtod_l+0x8ae>
 800d13c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d140:	0d1b      	lsrs	r3, r3, #20
 800d142:	051b      	lsls	r3, r3, #20
 800d144:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d148:	d969      	bls.n	800d21e <_strtod_l+0x8ae>
 800d14a:	6963      	ldr	r3, [r4, #20]
 800d14c:	b913      	cbnz	r3, 800d154 <_strtod_l+0x7e4>
 800d14e:	6923      	ldr	r3, [r4, #16]
 800d150:	2b01      	cmp	r3, #1
 800d152:	dd64      	ble.n	800d21e <_strtod_l+0x8ae>
 800d154:	4621      	mov	r1, r4
 800d156:	2201      	movs	r2, #1
 800d158:	9805      	ldr	r0, [sp, #20]
 800d15a:	f7ff f995 	bl	800c488 <__lshift>
 800d15e:	4629      	mov	r1, r5
 800d160:	4604      	mov	r4, r0
 800d162:	f7ff f9fd 	bl	800c560 <__mcmp>
 800d166:	2800      	cmp	r0, #0
 800d168:	dd59      	ble.n	800d21e <_strtod_l+0x8ae>
 800d16a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d16e:	9a06      	ldr	r2, [sp, #24]
 800d170:	0d1b      	lsrs	r3, r3, #20
 800d172:	051b      	lsls	r3, r3, #20
 800d174:	2a00      	cmp	r2, #0
 800d176:	d070      	beq.n	800d25a <_strtod_l+0x8ea>
 800d178:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d17c:	d86d      	bhi.n	800d25a <_strtod_l+0x8ea>
 800d17e:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d182:	f67f ae99 	bls.w	800ceb8 <_strtod_l+0x548>
 800d186:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800d1b8 <_strtod_l+0x848>
 800d18a:	ec4b ab16 	vmov	d6, sl, fp
 800d18e:	4b0e      	ldr	r3, [pc, #56]	@ (800d1c8 <_strtod_l+0x858>)
 800d190:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d194:	ee17 2a90 	vmov	r2, s15
 800d198:	4013      	ands	r3, r2
 800d19a:	ec5b ab17 	vmov	sl, fp, d7
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	f47f ae01 	bne.w	800cda6 <_strtod_l+0x436>
 800d1a4:	9a05      	ldr	r2, [sp, #20]
 800d1a6:	2322      	movs	r3, #34	@ 0x22
 800d1a8:	6013      	str	r3, [r2, #0]
 800d1aa:	e5fc      	b.n	800cda6 <_strtod_l+0x436>
 800d1ac:	f3af 8000 	nop.w
 800d1b0:	ffc00000 	.word	0xffc00000
 800d1b4:	41dfffff 	.word	0x41dfffff
 800d1b8:	00000000 	.word	0x00000000
 800d1bc:	39500000 	.word	0x39500000
 800d1c0:	0800e868 	.word	0x0800e868
 800d1c4:	fffffc02 	.word	0xfffffc02
 800d1c8:	7ff00000 	.word	0x7ff00000
 800d1cc:	46d9      	mov	r9, fp
 800d1ce:	d15d      	bne.n	800d28c <_strtod_l+0x91c>
 800d1d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d1d4:	f1b8 0f00 	cmp.w	r8, #0
 800d1d8:	d02a      	beq.n	800d230 <_strtod_l+0x8c0>
 800d1da:	4aab      	ldr	r2, [pc, #684]	@ (800d488 <_strtod_l+0xb18>)
 800d1dc:	4293      	cmp	r3, r2
 800d1de:	d12a      	bne.n	800d236 <_strtod_l+0x8c6>
 800d1e0:	9b06      	ldr	r3, [sp, #24]
 800d1e2:	4652      	mov	r2, sl
 800d1e4:	b1fb      	cbz	r3, 800d226 <_strtod_l+0x8b6>
 800d1e6:	4ba9      	ldr	r3, [pc, #676]	@ (800d48c <_strtod_l+0xb1c>)
 800d1e8:	ea0b 0303 	and.w	r3, fp, r3
 800d1ec:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d1f0:	f04f 31ff 	mov.w	r1, #4294967295
 800d1f4:	d81a      	bhi.n	800d22c <_strtod_l+0x8bc>
 800d1f6:	0d1b      	lsrs	r3, r3, #20
 800d1f8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d1fc:	fa01 f303 	lsl.w	r3, r1, r3
 800d200:	429a      	cmp	r2, r3
 800d202:	d118      	bne.n	800d236 <_strtod_l+0x8c6>
 800d204:	4ba2      	ldr	r3, [pc, #648]	@ (800d490 <_strtod_l+0xb20>)
 800d206:	4599      	cmp	r9, r3
 800d208:	d102      	bne.n	800d210 <_strtod_l+0x8a0>
 800d20a:	3201      	adds	r2, #1
 800d20c:	f43f adc0 	beq.w	800cd90 <_strtod_l+0x420>
 800d210:	4b9e      	ldr	r3, [pc, #632]	@ (800d48c <_strtod_l+0xb1c>)
 800d212:	ea09 0303 	and.w	r3, r9, r3
 800d216:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800d21a:	f04f 0a00 	mov.w	sl, #0
 800d21e:	9b06      	ldr	r3, [sp, #24]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d1b0      	bne.n	800d186 <_strtod_l+0x816>
 800d224:	e5bf      	b.n	800cda6 <_strtod_l+0x436>
 800d226:	f04f 33ff 	mov.w	r3, #4294967295
 800d22a:	e7e9      	b.n	800d200 <_strtod_l+0x890>
 800d22c:	460b      	mov	r3, r1
 800d22e:	e7e7      	b.n	800d200 <_strtod_l+0x890>
 800d230:	ea53 030a 	orrs.w	r3, r3, sl
 800d234:	d099      	beq.n	800d16a <_strtod_l+0x7fa>
 800d236:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d238:	b1c3      	cbz	r3, 800d26c <_strtod_l+0x8fc>
 800d23a:	ea13 0f09 	tst.w	r3, r9
 800d23e:	d0ee      	beq.n	800d21e <_strtod_l+0x8ae>
 800d240:	9a06      	ldr	r2, [sp, #24]
 800d242:	4650      	mov	r0, sl
 800d244:	4659      	mov	r1, fp
 800d246:	f1b8 0f00 	cmp.w	r8, #0
 800d24a:	d013      	beq.n	800d274 <_strtod_l+0x904>
 800d24c:	f7ff fb73 	bl	800c936 <sulp>
 800d250:	ee39 7b00 	vadd.f64	d7, d9, d0
 800d254:	ec5b ab17 	vmov	sl, fp, d7
 800d258:	e7e1      	b.n	800d21e <_strtod_l+0x8ae>
 800d25a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d25e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d262:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d266:	f04f 3aff 	mov.w	sl, #4294967295
 800d26a:	e7d8      	b.n	800d21e <_strtod_l+0x8ae>
 800d26c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d26e:	ea13 0f0a 	tst.w	r3, sl
 800d272:	e7e4      	b.n	800d23e <_strtod_l+0x8ce>
 800d274:	f7ff fb5f 	bl	800c936 <sulp>
 800d278:	ee39 0b40 	vsub.f64	d0, d9, d0
 800d27c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800d280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d284:	ec5b ab10 	vmov	sl, fp, d0
 800d288:	d1c9      	bne.n	800d21e <_strtod_l+0x8ae>
 800d28a:	e615      	b.n	800ceb8 <_strtod_l+0x548>
 800d28c:	4629      	mov	r1, r5
 800d28e:	4620      	mov	r0, r4
 800d290:	f7ff fade 	bl	800c850 <__ratio>
 800d294:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800d298:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800d29c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2a0:	d85d      	bhi.n	800d35e <_strtod_l+0x9ee>
 800d2a2:	f1b8 0f00 	cmp.w	r8, #0
 800d2a6:	d164      	bne.n	800d372 <_strtod_l+0xa02>
 800d2a8:	f1ba 0f00 	cmp.w	sl, #0
 800d2ac:	d14b      	bne.n	800d346 <_strtod_l+0x9d6>
 800d2ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d2b2:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d160      	bne.n	800d37c <_strtod_l+0xa0c>
 800d2ba:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800d2be:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800d2c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2c6:	d401      	bmi.n	800d2cc <_strtod_l+0x95c>
 800d2c8:	ee20 8b08 	vmul.f64	d8, d0, d8
 800d2cc:	eeb1 ab48 	vneg.f64	d10, d8
 800d2d0:	486e      	ldr	r0, [pc, #440]	@ (800d48c <_strtod_l+0xb1c>)
 800d2d2:	4970      	ldr	r1, [pc, #448]	@ (800d494 <_strtod_l+0xb24>)
 800d2d4:	ea09 0700 	and.w	r7, r9, r0
 800d2d8:	428f      	cmp	r7, r1
 800d2da:	ec53 2b1a 	vmov	r2, r3, d10
 800d2de:	d17d      	bne.n	800d3dc <_strtod_l+0xa6c>
 800d2e0:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800d2e4:	ec4b ab1c 	vmov	d12, sl, fp
 800d2e8:	eeb0 0b4c 	vmov.f64	d0, d12
 800d2ec:	f7ff f9e8 	bl	800c6c0 <__ulp>
 800d2f0:	4866      	ldr	r0, [pc, #408]	@ (800d48c <_strtod_l+0xb1c>)
 800d2f2:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800d2f6:	ee1c 3a90 	vmov	r3, s25
 800d2fa:	4a67      	ldr	r2, [pc, #412]	@ (800d498 <_strtod_l+0xb28>)
 800d2fc:	ea03 0100 	and.w	r1, r3, r0
 800d300:	4291      	cmp	r1, r2
 800d302:	ec5b ab1c 	vmov	sl, fp, d12
 800d306:	d93c      	bls.n	800d382 <_strtod_l+0xa12>
 800d308:	ee19 2a90 	vmov	r2, s19
 800d30c:	4b60      	ldr	r3, [pc, #384]	@ (800d490 <_strtod_l+0xb20>)
 800d30e:	429a      	cmp	r2, r3
 800d310:	d104      	bne.n	800d31c <_strtod_l+0x9ac>
 800d312:	ee19 3a10 	vmov	r3, s18
 800d316:	3301      	adds	r3, #1
 800d318:	f43f ad3a 	beq.w	800cd90 <_strtod_l+0x420>
 800d31c:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800d490 <_strtod_l+0xb20>
 800d320:	f04f 3aff 	mov.w	sl, #4294967295
 800d324:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d326:	9805      	ldr	r0, [sp, #20]
 800d328:	f7fe fe96 	bl	800c058 <_Bfree>
 800d32c:	9805      	ldr	r0, [sp, #20]
 800d32e:	4631      	mov	r1, r6
 800d330:	f7fe fe92 	bl	800c058 <_Bfree>
 800d334:	9805      	ldr	r0, [sp, #20]
 800d336:	4629      	mov	r1, r5
 800d338:	f7fe fe8e 	bl	800c058 <_Bfree>
 800d33c:	9805      	ldr	r0, [sp, #20]
 800d33e:	4621      	mov	r1, r4
 800d340:	f7fe fe8a 	bl	800c058 <_Bfree>
 800d344:	e625      	b.n	800cf92 <_strtod_l+0x622>
 800d346:	f1ba 0f01 	cmp.w	sl, #1
 800d34a:	d103      	bne.n	800d354 <_strtod_l+0x9e4>
 800d34c:	f1bb 0f00 	cmp.w	fp, #0
 800d350:	f43f adb2 	beq.w	800ceb8 <_strtod_l+0x548>
 800d354:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800d358:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800d35c:	e7b8      	b.n	800d2d0 <_strtod_l+0x960>
 800d35e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800d362:	ee20 8b08 	vmul.f64	d8, d0, d8
 800d366:	f1b8 0f00 	cmp.w	r8, #0
 800d36a:	d0af      	beq.n	800d2cc <_strtod_l+0x95c>
 800d36c:	eeb0 ab48 	vmov.f64	d10, d8
 800d370:	e7ae      	b.n	800d2d0 <_strtod_l+0x960>
 800d372:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800d376:	eeb0 8b4a 	vmov.f64	d8, d10
 800d37a:	e7a9      	b.n	800d2d0 <_strtod_l+0x960>
 800d37c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800d380:	e7a6      	b.n	800d2d0 <_strtod_l+0x960>
 800d382:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d386:	9b06      	ldr	r3, [sp, #24]
 800d388:	46d9      	mov	r9, fp
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d1ca      	bne.n	800d324 <_strtod_l+0x9b4>
 800d38e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d392:	0d1b      	lsrs	r3, r3, #20
 800d394:	051b      	lsls	r3, r3, #20
 800d396:	429f      	cmp	r7, r3
 800d398:	d1c4      	bne.n	800d324 <_strtod_l+0x9b4>
 800d39a:	ec51 0b18 	vmov	r0, r1, d8
 800d39e:	f7f3 f9d3 	bl	8000748 <__aeabi_d2lz>
 800d3a2:	f7f3 f98b 	bl	80006bc <__aeabi_l2d>
 800d3a6:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800d3aa:	ec41 0b17 	vmov	d7, r0, r1
 800d3ae:	ea49 090a 	orr.w	r9, r9, sl
 800d3b2:	ea59 0908 	orrs.w	r9, r9, r8
 800d3b6:	ee38 8b47 	vsub.f64	d8, d8, d7
 800d3ba:	d03c      	beq.n	800d436 <_strtod_l+0xac6>
 800d3bc:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800d470 <_strtod_l+0xb00>
 800d3c0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d3c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3c8:	f53f aced 	bmi.w	800cda6 <_strtod_l+0x436>
 800d3cc:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800d478 <_strtod_l+0xb08>
 800d3d0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d3d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3d8:	dda4      	ble.n	800d324 <_strtod_l+0x9b4>
 800d3da:	e4e4      	b.n	800cda6 <_strtod_l+0x436>
 800d3dc:	9906      	ldr	r1, [sp, #24]
 800d3de:	b1e1      	cbz	r1, 800d41a <_strtod_l+0xaaa>
 800d3e0:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800d3e4:	d819      	bhi.n	800d41a <_strtod_l+0xaaa>
 800d3e6:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800d3ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3ee:	d811      	bhi.n	800d414 <_strtod_l+0xaa4>
 800d3f0:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800d3f4:	ee18 3a10 	vmov	r3, s16
 800d3f8:	2b01      	cmp	r3, #1
 800d3fa:	bf38      	it	cc
 800d3fc:	2301      	movcc	r3, #1
 800d3fe:	ee08 3a10 	vmov	s16, r3
 800d402:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800d406:	f1b8 0f00 	cmp.w	r8, #0
 800d40a:	d111      	bne.n	800d430 <_strtod_l+0xac0>
 800d40c:	eeb1 7b48 	vneg.f64	d7, d8
 800d410:	ec53 2b17 	vmov	r2, r3, d7
 800d414:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800d418:	1bcb      	subs	r3, r1, r7
 800d41a:	eeb0 0b49 	vmov.f64	d0, d9
 800d41e:	ec43 2b1a 	vmov	d10, r2, r3
 800d422:	f7ff f94d 	bl	800c6c0 <__ulp>
 800d426:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800d42a:	ec5b ab19 	vmov	sl, fp, d9
 800d42e:	e7aa      	b.n	800d386 <_strtod_l+0xa16>
 800d430:	eeb0 7b48 	vmov.f64	d7, d8
 800d434:	e7ec      	b.n	800d410 <_strtod_l+0xaa0>
 800d436:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800d480 <_strtod_l+0xb10>
 800d43a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d43e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d442:	f57f af6f 	bpl.w	800d324 <_strtod_l+0x9b4>
 800d446:	e4ae      	b.n	800cda6 <_strtod_l+0x436>
 800d448:	2300      	movs	r3, #0
 800d44a:	9308      	str	r3, [sp, #32]
 800d44c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d44e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d450:	6013      	str	r3, [r2, #0]
 800d452:	f7ff bacc 	b.w	800c9ee <_strtod_l+0x7e>
 800d456:	2a65      	cmp	r2, #101	@ 0x65
 800d458:	f43f abbc 	beq.w	800cbd4 <_strtod_l+0x264>
 800d45c:	2a45      	cmp	r2, #69	@ 0x45
 800d45e:	f43f abb9 	beq.w	800cbd4 <_strtod_l+0x264>
 800d462:	2301      	movs	r3, #1
 800d464:	9306      	str	r3, [sp, #24]
 800d466:	f7ff bbf0 	b.w	800cc4a <_strtod_l+0x2da>
 800d46a:	bf00      	nop
 800d46c:	f3af 8000 	nop.w
 800d470:	94a03595 	.word	0x94a03595
 800d474:	3fdfffff 	.word	0x3fdfffff
 800d478:	35afe535 	.word	0x35afe535
 800d47c:	3fe00000 	.word	0x3fe00000
 800d480:	94a03595 	.word	0x94a03595
 800d484:	3fcfffff 	.word	0x3fcfffff
 800d488:	000fffff 	.word	0x000fffff
 800d48c:	7ff00000 	.word	0x7ff00000
 800d490:	7fefffff 	.word	0x7fefffff
 800d494:	7fe00000 	.word	0x7fe00000
 800d498:	7c9fffff 	.word	0x7c9fffff

0800d49c <_strtod_r>:
 800d49c:	4b01      	ldr	r3, [pc, #4]	@ (800d4a4 <_strtod_r+0x8>)
 800d49e:	f7ff ba67 	b.w	800c970 <_strtod_l>
 800d4a2:	bf00      	nop
 800d4a4:	24000070 	.word	0x24000070

0800d4a8 <_strtol_l.constprop.0>:
 800d4a8:	2b24      	cmp	r3, #36	@ 0x24
 800d4aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4ae:	4686      	mov	lr, r0
 800d4b0:	4690      	mov	r8, r2
 800d4b2:	d801      	bhi.n	800d4b8 <_strtol_l.constprop.0+0x10>
 800d4b4:	2b01      	cmp	r3, #1
 800d4b6:	d106      	bne.n	800d4c6 <_strtol_l.constprop.0+0x1e>
 800d4b8:	f7fd ff22 	bl	800b300 <__errno>
 800d4bc:	2316      	movs	r3, #22
 800d4be:	6003      	str	r3, [r0, #0]
 800d4c0:	2000      	movs	r0, #0
 800d4c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4c6:	4834      	ldr	r0, [pc, #208]	@ (800d598 <_strtol_l.constprop.0+0xf0>)
 800d4c8:	460d      	mov	r5, r1
 800d4ca:	462a      	mov	r2, r5
 800d4cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d4d0:	5d06      	ldrb	r6, [r0, r4]
 800d4d2:	f016 0608 	ands.w	r6, r6, #8
 800d4d6:	d1f8      	bne.n	800d4ca <_strtol_l.constprop.0+0x22>
 800d4d8:	2c2d      	cmp	r4, #45	@ 0x2d
 800d4da:	d12d      	bne.n	800d538 <_strtol_l.constprop.0+0x90>
 800d4dc:	782c      	ldrb	r4, [r5, #0]
 800d4de:	2601      	movs	r6, #1
 800d4e0:	1c95      	adds	r5, r2, #2
 800d4e2:	f033 0210 	bics.w	r2, r3, #16
 800d4e6:	d109      	bne.n	800d4fc <_strtol_l.constprop.0+0x54>
 800d4e8:	2c30      	cmp	r4, #48	@ 0x30
 800d4ea:	d12a      	bne.n	800d542 <_strtol_l.constprop.0+0x9a>
 800d4ec:	782a      	ldrb	r2, [r5, #0]
 800d4ee:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d4f2:	2a58      	cmp	r2, #88	@ 0x58
 800d4f4:	d125      	bne.n	800d542 <_strtol_l.constprop.0+0x9a>
 800d4f6:	786c      	ldrb	r4, [r5, #1]
 800d4f8:	2310      	movs	r3, #16
 800d4fa:	3502      	adds	r5, #2
 800d4fc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d500:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d504:	2200      	movs	r2, #0
 800d506:	fbbc f9f3 	udiv	r9, ip, r3
 800d50a:	4610      	mov	r0, r2
 800d50c:	fb03 ca19 	mls	sl, r3, r9, ip
 800d510:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d514:	2f09      	cmp	r7, #9
 800d516:	d81b      	bhi.n	800d550 <_strtol_l.constprop.0+0xa8>
 800d518:	463c      	mov	r4, r7
 800d51a:	42a3      	cmp	r3, r4
 800d51c:	dd27      	ble.n	800d56e <_strtol_l.constprop.0+0xc6>
 800d51e:	1c57      	adds	r7, r2, #1
 800d520:	d007      	beq.n	800d532 <_strtol_l.constprop.0+0x8a>
 800d522:	4581      	cmp	r9, r0
 800d524:	d320      	bcc.n	800d568 <_strtol_l.constprop.0+0xc0>
 800d526:	d101      	bne.n	800d52c <_strtol_l.constprop.0+0x84>
 800d528:	45a2      	cmp	sl, r4
 800d52a:	db1d      	blt.n	800d568 <_strtol_l.constprop.0+0xc0>
 800d52c:	fb00 4003 	mla	r0, r0, r3, r4
 800d530:	2201      	movs	r2, #1
 800d532:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d536:	e7eb      	b.n	800d510 <_strtol_l.constprop.0+0x68>
 800d538:	2c2b      	cmp	r4, #43	@ 0x2b
 800d53a:	bf04      	itt	eq
 800d53c:	782c      	ldrbeq	r4, [r5, #0]
 800d53e:	1c95      	addeq	r5, r2, #2
 800d540:	e7cf      	b.n	800d4e2 <_strtol_l.constprop.0+0x3a>
 800d542:	2b00      	cmp	r3, #0
 800d544:	d1da      	bne.n	800d4fc <_strtol_l.constprop.0+0x54>
 800d546:	2c30      	cmp	r4, #48	@ 0x30
 800d548:	bf0c      	ite	eq
 800d54a:	2308      	moveq	r3, #8
 800d54c:	230a      	movne	r3, #10
 800d54e:	e7d5      	b.n	800d4fc <_strtol_l.constprop.0+0x54>
 800d550:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d554:	2f19      	cmp	r7, #25
 800d556:	d801      	bhi.n	800d55c <_strtol_l.constprop.0+0xb4>
 800d558:	3c37      	subs	r4, #55	@ 0x37
 800d55a:	e7de      	b.n	800d51a <_strtol_l.constprop.0+0x72>
 800d55c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d560:	2f19      	cmp	r7, #25
 800d562:	d804      	bhi.n	800d56e <_strtol_l.constprop.0+0xc6>
 800d564:	3c57      	subs	r4, #87	@ 0x57
 800d566:	e7d8      	b.n	800d51a <_strtol_l.constprop.0+0x72>
 800d568:	f04f 32ff 	mov.w	r2, #4294967295
 800d56c:	e7e1      	b.n	800d532 <_strtol_l.constprop.0+0x8a>
 800d56e:	1c53      	adds	r3, r2, #1
 800d570:	d108      	bne.n	800d584 <_strtol_l.constprop.0+0xdc>
 800d572:	2322      	movs	r3, #34	@ 0x22
 800d574:	f8ce 3000 	str.w	r3, [lr]
 800d578:	4660      	mov	r0, ip
 800d57a:	f1b8 0f00 	cmp.w	r8, #0
 800d57e:	d0a0      	beq.n	800d4c2 <_strtol_l.constprop.0+0x1a>
 800d580:	1e69      	subs	r1, r5, #1
 800d582:	e006      	b.n	800d592 <_strtol_l.constprop.0+0xea>
 800d584:	b106      	cbz	r6, 800d588 <_strtol_l.constprop.0+0xe0>
 800d586:	4240      	negs	r0, r0
 800d588:	f1b8 0f00 	cmp.w	r8, #0
 800d58c:	d099      	beq.n	800d4c2 <_strtol_l.constprop.0+0x1a>
 800d58e:	2a00      	cmp	r2, #0
 800d590:	d1f6      	bne.n	800d580 <_strtol_l.constprop.0+0xd8>
 800d592:	f8c8 1000 	str.w	r1, [r8]
 800d596:	e794      	b.n	800d4c2 <_strtol_l.constprop.0+0x1a>
 800d598:	0800e891 	.word	0x0800e891

0800d59c <_strtol_r>:
 800d59c:	f7ff bf84 	b.w	800d4a8 <_strtol_l.constprop.0>

0800d5a0 <__ssputs_r>:
 800d5a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5a4:	688e      	ldr	r6, [r1, #8]
 800d5a6:	461f      	mov	r7, r3
 800d5a8:	42be      	cmp	r6, r7
 800d5aa:	680b      	ldr	r3, [r1, #0]
 800d5ac:	4682      	mov	sl, r0
 800d5ae:	460c      	mov	r4, r1
 800d5b0:	4690      	mov	r8, r2
 800d5b2:	d82d      	bhi.n	800d610 <__ssputs_r+0x70>
 800d5b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d5b8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d5bc:	d026      	beq.n	800d60c <__ssputs_r+0x6c>
 800d5be:	6965      	ldr	r5, [r4, #20]
 800d5c0:	6909      	ldr	r1, [r1, #16]
 800d5c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d5c6:	eba3 0901 	sub.w	r9, r3, r1
 800d5ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d5ce:	1c7b      	adds	r3, r7, #1
 800d5d0:	444b      	add	r3, r9
 800d5d2:	106d      	asrs	r5, r5, #1
 800d5d4:	429d      	cmp	r5, r3
 800d5d6:	bf38      	it	cc
 800d5d8:	461d      	movcc	r5, r3
 800d5da:	0553      	lsls	r3, r2, #21
 800d5dc:	d527      	bpl.n	800d62e <__ssputs_r+0x8e>
 800d5de:	4629      	mov	r1, r5
 800d5e0:	f7fc fc86 	bl	8009ef0 <_malloc_r>
 800d5e4:	4606      	mov	r6, r0
 800d5e6:	b360      	cbz	r0, 800d642 <__ssputs_r+0xa2>
 800d5e8:	6921      	ldr	r1, [r4, #16]
 800d5ea:	464a      	mov	r2, r9
 800d5ec:	f7fd feb5 	bl	800b35a <memcpy>
 800d5f0:	89a3      	ldrh	r3, [r4, #12]
 800d5f2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d5f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d5fa:	81a3      	strh	r3, [r4, #12]
 800d5fc:	6126      	str	r6, [r4, #16]
 800d5fe:	6165      	str	r5, [r4, #20]
 800d600:	444e      	add	r6, r9
 800d602:	eba5 0509 	sub.w	r5, r5, r9
 800d606:	6026      	str	r6, [r4, #0]
 800d608:	60a5      	str	r5, [r4, #8]
 800d60a:	463e      	mov	r6, r7
 800d60c:	42be      	cmp	r6, r7
 800d60e:	d900      	bls.n	800d612 <__ssputs_r+0x72>
 800d610:	463e      	mov	r6, r7
 800d612:	6820      	ldr	r0, [r4, #0]
 800d614:	4632      	mov	r2, r6
 800d616:	4641      	mov	r1, r8
 800d618:	f000 fb6a 	bl	800dcf0 <memmove>
 800d61c:	68a3      	ldr	r3, [r4, #8]
 800d61e:	1b9b      	subs	r3, r3, r6
 800d620:	60a3      	str	r3, [r4, #8]
 800d622:	6823      	ldr	r3, [r4, #0]
 800d624:	4433      	add	r3, r6
 800d626:	6023      	str	r3, [r4, #0]
 800d628:	2000      	movs	r0, #0
 800d62a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d62e:	462a      	mov	r2, r5
 800d630:	f000 ff15 	bl	800e45e <_realloc_r>
 800d634:	4606      	mov	r6, r0
 800d636:	2800      	cmp	r0, #0
 800d638:	d1e0      	bne.n	800d5fc <__ssputs_r+0x5c>
 800d63a:	6921      	ldr	r1, [r4, #16]
 800d63c:	4650      	mov	r0, sl
 800d63e:	f7fe fc81 	bl	800bf44 <_free_r>
 800d642:	230c      	movs	r3, #12
 800d644:	f8ca 3000 	str.w	r3, [sl]
 800d648:	89a3      	ldrh	r3, [r4, #12]
 800d64a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d64e:	81a3      	strh	r3, [r4, #12]
 800d650:	f04f 30ff 	mov.w	r0, #4294967295
 800d654:	e7e9      	b.n	800d62a <__ssputs_r+0x8a>
	...

0800d658 <_svfiprintf_r>:
 800d658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d65c:	4698      	mov	r8, r3
 800d65e:	898b      	ldrh	r3, [r1, #12]
 800d660:	061b      	lsls	r3, r3, #24
 800d662:	b09d      	sub	sp, #116	@ 0x74
 800d664:	4607      	mov	r7, r0
 800d666:	460d      	mov	r5, r1
 800d668:	4614      	mov	r4, r2
 800d66a:	d510      	bpl.n	800d68e <_svfiprintf_r+0x36>
 800d66c:	690b      	ldr	r3, [r1, #16]
 800d66e:	b973      	cbnz	r3, 800d68e <_svfiprintf_r+0x36>
 800d670:	2140      	movs	r1, #64	@ 0x40
 800d672:	f7fc fc3d 	bl	8009ef0 <_malloc_r>
 800d676:	6028      	str	r0, [r5, #0]
 800d678:	6128      	str	r0, [r5, #16]
 800d67a:	b930      	cbnz	r0, 800d68a <_svfiprintf_r+0x32>
 800d67c:	230c      	movs	r3, #12
 800d67e:	603b      	str	r3, [r7, #0]
 800d680:	f04f 30ff 	mov.w	r0, #4294967295
 800d684:	b01d      	add	sp, #116	@ 0x74
 800d686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d68a:	2340      	movs	r3, #64	@ 0x40
 800d68c:	616b      	str	r3, [r5, #20]
 800d68e:	2300      	movs	r3, #0
 800d690:	9309      	str	r3, [sp, #36]	@ 0x24
 800d692:	2320      	movs	r3, #32
 800d694:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d698:	f8cd 800c 	str.w	r8, [sp, #12]
 800d69c:	2330      	movs	r3, #48	@ 0x30
 800d69e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d83c <_svfiprintf_r+0x1e4>
 800d6a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d6a6:	f04f 0901 	mov.w	r9, #1
 800d6aa:	4623      	mov	r3, r4
 800d6ac:	469a      	mov	sl, r3
 800d6ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d6b2:	b10a      	cbz	r2, 800d6b8 <_svfiprintf_r+0x60>
 800d6b4:	2a25      	cmp	r2, #37	@ 0x25
 800d6b6:	d1f9      	bne.n	800d6ac <_svfiprintf_r+0x54>
 800d6b8:	ebba 0b04 	subs.w	fp, sl, r4
 800d6bc:	d00b      	beq.n	800d6d6 <_svfiprintf_r+0x7e>
 800d6be:	465b      	mov	r3, fp
 800d6c0:	4622      	mov	r2, r4
 800d6c2:	4629      	mov	r1, r5
 800d6c4:	4638      	mov	r0, r7
 800d6c6:	f7ff ff6b 	bl	800d5a0 <__ssputs_r>
 800d6ca:	3001      	adds	r0, #1
 800d6cc:	f000 80a7 	beq.w	800d81e <_svfiprintf_r+0x1c6>
 800d6d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d6d2:	445a      	add	r2, fp
 800d6d4:	9209      	str	r2, [sp, #36]	@ 0x24
 800d6d6:	f89a 3000 	ldrb.w	r3, [sl]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	f000 809f 	beq.w	800d81e <_svfiprintf_r+0x1c6>
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	f04f 32ff 	mov.w	r2, #4294967295
 800d6e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d6ea:	f10a 0a01 	add.w	sl, sl, #1
 800d6ee:	9304      	str	r3, [sp, #16]
 800d6f0:	9307      	str	r3, [sp, #28]
 800d6f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d6f6:	931a      	str	r3, [sp, #104]	@ 0x68
 800d6f8:	4654      	mov	r4, sl
 800d6fa:	2205      	movs	r2, #5
 800d6fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d700:	484e      	ldr	r0, [pc, #312]	@ (800d83c <_svfiprintf_r+0x1e4>)
 800d702:	f7f2 fdf5 	bl	80002f0 <memchr>
 800d706:	9a04      	ldr	r2, [sp, #16]
 800d708:	b9d8      	cbnz	r0, 800d742 <_svfiprintf_r+0xea>
 800d70a:	06d0      	lsls	r0, r2, #27
 800d70c:	bf44      	itt	mi
 800d70e:	2320      	movmi	r3, #32
 800d710:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d714:	0711      	lsls	r1, r2, #28
 800d716:	bf44      	itt	mi
 800d718:	232b      	movmi	r3, #43	@ 0x2b
 800d71a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d71e:	f89a 3000 	ldrb.w	r3, [sl]
 800d722:	2b2a      	cmp	r3, #42	@ 0x2a
 800d724:	d015      	beq.n	800d752 <_svfiprintf_r+0xfa>
 800d726:	9a07      	ldr	r2, [sp, #28]
 800d728:	4654      	mov	r4, sl
 800d72a:	2000      	movs	r0, #0
 800d72c:	f04f 0c0a 	mov.w	ip, #10
 800d730:	4621      	mov	r1, r4
 800d732:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d736:	3b30      	subs	r3, #48	@ 0x30
 800d738:	2b09      	cmp	r3, #9
 800d73a:	d94b      	bls.n	800d7d4 <_svfiprintf_r+0x17c>
 800d73c:	b1b0      	cbz	r0, 800d76c <_svfiprintf_r+0x114>
 800d73e:	9207      	str	r2, [sp, #28]
 800d740:	e014      	b.n	800d76c <_svfiprintf_r+0x114>
 800d742:	eba0 0308 	sub.w	r3, r0, r8
 800d746:	fa09 f303 	lsl.w	r3, r9, r3
 800d74a:	4313      	orrs	r3, r2
 800d74c:	9304      	str	r3, [sp, #16]
 800d74e:	46a2      	mov	sl, r4
 800d750:	e7d2      	b.n	800d6f8 <_svfiprintf_r+0xa0>
 800d752:	9b03      	ldr	r3, [sp, #12]
 800d754:	1d19      	adds	r1, r3, #4
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	9103      	str	r1, [sp, #12]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	bfbb      	ittet	lt
 800d75e:	425b      	neglt	r3, r3
 800d760:	f042 0202 	orrlt.w	r2, r2, #2
 800d764:	9307      	strge	r3, [sp, #28]
 800d766:	9307      	strlt	r3, [sp, #28]
 800d768:	bfb8      	it	lt
 800d76a:	9204      	strlt	r2, [sp, #16]
 800d76c:	7823      	ldrb	r3, [r4, #0]
 800d76e:	2b2e      	cmp	r3, #46	@ 0x2e
 800d770:	d10a      	bne.n	800d788 <_svfiprintf_r+0x130>
 800d772:	7863      	ldrb	r3, [r4, #1]
 800d774:	2b2a      	cmp	r3, #42	@ 0x2a
 800d776:	d132      	bne.n	800d7de <_svfiprintf_r+0x186>
 800d778:	9b03      	ldr	r3, [sp, #12]
 800d77a:	1d1a      	adds	r2, r3, #4
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	9203      	str	r2, [sp, #12]
 800d780:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d784:	3402      	adds	r4, #2
 800d786:	9305      	str	r3, [sp, #20]
 800d788:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d84c <_svfiprintf_r+0x1f4>
 800d78c:	7821      	ldrb	r1, [r4, #0]
 800d78e:	2203      	movs	r2, #3
 800d790:	4650      	mov	r0, sl
 800d792:	f7f2 fdad 	bl	80002f0 <memchr>
 800d796:	b138      	cbz	r0, 800d7a8 <_svfiprintf_r+0x150>
 800d798:	9b04      	ldr	r3, [sp, #16]
 800d79a:	eba0 000a 	sub.w	r0, r0, sl
 800d79e:	2240      	movs	r2, #64	@ 0x40
 800d7a0:	4082      	lsls	r2, r0
 800d7a2:	4313      	orrs	r3, r2
 800d7a4:	3401      	adds	r4, #1
 800d7a6:	9304      	str	r3, [sp, #16]
 800d7a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7ac:	4824      	ldr	r0, [pc, #144]	@ (800d840 <_svfiprintf_r+0x1e8>)
 800d7ae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d7b2:	2206      	movs	r2, #6
 800d7b4:	f7f2 fd9c 	bl	80002f0 <memchr>
 800d7b8:	2800      	cmp	r0, #0
 800d7ba:	d036      	beq.n	800d82a <_svfiprintf_r+0x1d2>
 800d7bc:	4b21      	ldr	r3, [pc, #132]	@ (800d844 <_svfiprintf_r+0x1ec>)
 800d7be:	bb1b      	cbnz	r3, 800d808 <_svfiprintf_r+0x1b0>
 800d7c0:	9b03      	ldr	r3, [sp, #12]
 800d7c2:	3307      	adds	r3, #7
 800d7c4:	f023 0307 	bic.w	r3, r3, #7
 800d7c8:	3308      	adds	r3, #8
 800d7ca:	9303      	str	r3, [sp, #12]
 800d7cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7ce:	4433      	add	r3, r6
 800d7d0:	9309      	str	r3, [sp, #36]	@ 0x24
 800d7d2:	e76a      	b.n	800d6aa <_svfiprintf_r+0x52>
 800d7d4:	fb0c 3202 	mla	r2, ip, r2, r3
 800d7d8:	460c      	mov	r4, r1
 800d7da:	2001      	movs	r0, #1
 800d7dc:	e7a8      	b.n	800d730 <_svfiprintf_r+0xd8>
 800d7de:	2300      	movs	r3, #0
 800d7e0:	3401      	adds	r4, #1
 800d7e2:	9305      	str	r3, [sp, #20]
 800d7e4:	4619      	mov	r1, r3
 800d7e6:	f04f 0c0a 	mov.w	ip, #10
 800d7ea:	4620      	mov	r0, r4
 800d7ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d7f0:	3a30      	subs	r2, #48	@ 0x30
 800d7f2:	2a09      	cmp	r2, #9
 800d7f4:	d903      	bls.n	800d7fe <_svfiprintf_r+0x1a6>
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d0c6      	beq.n	800d788 <_svfiprintf_r+0x130>
 800d7fa:	9105      	str	r1, [sp, #20]
 800d7fc:	e7c4      	b.n	800d788 <_svfiprintf_r+0x130>
 800d7fe:	fb0c 2101 	mla	r1, ip, r1, r2
 800d802:	4604      	mov	r4, r0
 800d804:	2301      	movs	r3, #1
 800d806:	e7f0      	b.n	800d7ea <_svfiprintf_r+0x192>
 800d808:	ab03      	add	r3, sp, #12
 800d80a:	9300      	str	r3, [sp, #0]
 800d80c:	462a      	mov	r2, r5
 800d80e:	4b0e      	ldr	r3, [pc, #56]	@ (800d848 <_svfiprintf_r+0x1f0>)
 800d810:	a904      	add	r1, sp, #16
 800d812:	4638      	mov	r0, r7
 800d814:	f7fc fc88 	bl	800a128 <_printf_float>
 800d818:	1c42      	adds	r2, r0, #1
 800d81a:	4606      	mov	r6, r0
 800d81c:	d1d6      	bne.n	800d7cc <_svfiprintf_r+0x174>
 800d81e:	89ab      	ldrh	r3, [r5, #12]
 800d820:	065b      	lsls	r3, r3, #25
 800d822:	f53f af2d 	bmi.w	800d680 <_svfiprintf_r+0x28>
 800d826:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d828:	e72c      	b.n	800d684 <_svfiprintf_r+0x2c>
 800d82a:	ab03      	add	r3, sp, #12
 800d82c:	9300      	str	r3, [sp, #0]
 800d82e:	462a      	mov	r2, r5
 800d830:	4b05      	ldr	r3, [pc, #20]	@ (800d848 <_svfiprintf_r+0x1f0>)
 800d832:	a904      	add	r1, sp, #16
 800d834:	4638      	mov	r0, r7
 800d836:	f7fc feff 	bl	800a638 <_printf_i>
 800d83a:	e7ed      	b.n	800d818 <_svfiprintf_r+0x1c0>
 800d83c:	0800e991 	.word	0x0800e991
 800d840:	0800e99b 	.word	0x0800e99b
 800d844:	0800a129 	.word	0x0800a129
 800d848:	0800d5a1 	.word	0x0800d5a1
 800d84c:	0800e997 	.word	0x0800e997

0800d850 <__sfputc_r>:
 800d850:	6893      	ldr	r3, [r2, #8]
 800d852:	3b01      	subs	r3, #1
 800d854:	2b00      	cmp	r3, #0
 800d856:	b410      	push	{r4}
 800d858:	6093      	str	r3, [r2, #8]
 800d85a:	da08      	bge.n	800d86e <__sfputc_r+0x1e>
 800d85c:	6994      	ldr	r4, [r2, #24]
 800d85e:	42a3      	cmp	r3, r4
 800d860:	db01      	blt.n	800d866 <__sfputc_r+0x16>
 800d862:	290a      	cmp	r1, #10
 800d864:	d103      	bne.n	800d86e <__sfputc_r+0x1e>
 800d866:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d86a:	f7fd bbb8 	b.w	800afde <__swbuf_r>
 800d86e:	6813      	ldr	r3, [r2, #0]
 800d870:	1c58      	adds	r0, r3, #1
 800d872:	6010      	str	r0, [r2, #0]
 800d874:	7019      	strb	r1, [r3, #0]
 800d876:	4608      	mov	r0, r1
 800d878:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d87c:	4770      	bx	lr

0800d87e <__sfputs_r>:
 800d87e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d880:	4606      	mov	r6, r0
 800d882:	460f      	mov	r7, r1
 800d884:	4614      	mov	r4, r2
 800d886:	18d5      	adds	r5, r2, r3
 800d888:	42ac      	cmp	r4, r5
 800d88a:	d101      	bne.n	800d890 <__sfputs_r+0x12>
 800d88c:	2000      	movs	r0, #0
 800d88e:	e007      	b.n	800d8a0 <__sfputs_r+0x22>
 800d890:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d894:	463a      	mov	r2, r7
 800d896:	4630      	mov	r0, r6
 800d898:	f7ff ffda 	bl	800d850 <__sfputc_r>
 800d89c:	1c43      	adds	r3, r0, #1
 800d89e:	d1f3      	bne.n	800d888 <__sfputs_r+0xa>
 800d8a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d8a4 <_vfiprintf_r>:
 800d8a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8a8:	460d      	mov	r5, r1
 800d8aa:	b09d      	sub	sp, #116	@ 0x74
 800d8ac:	4614      	mov	r4, r2
 800d8ae:	4698      	mov	r8, r3
 800d8b0:	4606      	mov	r6, r0
 800d8b2:	b118      	cbz	r0, 800d8bc <_vfiprintf_r+0x18>
 800d8b4:	6a03      	ldr	r3, [r0, #32]
 800d8b6:	b90b      	cbnz	r3, 800d8bc <_vfiprintf_r+0x18>
 800d8b8:	f7fd fa76 	bl	800ada8 <__sinit>
 800d8bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d8be:	07d9      	lsls	r1, r3, #31
 800d8c0:	d405      	bmi.n	800d8ce <_vfiprintf_r+0x2a>
 800d8c2:	89ab      	ldrh	r3, [r5, #12]
 800d8c4:	059a      	lsls	r2, r3, #22
 800d8c6:	d402      	bmi.n	800d8ce <_vfiprintf_r+0x2a>
 800d8c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d8ca:	f7fd fd44 	bl	800b356 <__retarget_lock_acquire_recursive>
 800d8ce:	89ab      	ldrh	r3, [r5, #12]
 800d8d0:	071b      	lsls	r3, r3, #28
 800d8d2:	d501      	bpl.n	800d8d8 <_vfiprintf_r+0x34>
 800d8d4:	692b      	ldr	r3, [r5, #16]
 800d8d6:	b99b      	cbnz	r3, 800d900 <_vfiprintf_r+0x5c>
 800d8d8:	4629      	mov	r1, r5
 800d8da:	4630      	mov	r0, r6
 800d8dc:	f7fd fbbe 	bl	800b05c <__swsetup_r>
 800d8e0:	b170      	cbz	r0, 800d900 <_vfiprintf_r+0x5c>
 800d8e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d8e4:	07dc      	lsls	r4, r3, #31
 800d8e6:	d504      	bpl.n	800d8f2 <_vfiprintf_r+0x4e>
 800d8e8:	f04f 30ff 	mov.w	r0, #4294967295
 800d8ec:	b01d      	add	sp, #116	@ 0x74
 800d8ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8f2:	89ab      	ldrh	r3, [r5, #12]
 800d8f4:	0598      	lsls	r0, r3, #22
 800d8f6:	d4f7      	bmi.n	800d8e8 <_vfiprintf_r+0x44>
 800d8f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d8fa:	f7fd fd2d 	bl	800b358 <__retarget_lock_release_recursive>
 800d8fe:	e7f3      	b.n	800d8e8 <_vfiprintf_r+0x44>
 800d900:	2300      	movs	r3, #0
 800d902:	9309      	str	r3, [sp, #36]	@ 0x24
 800d904:	2320      	movs	r3, #32
 800d906:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d90a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d90e:	2330      	movs	r3, #48	@ 0x30
 800d910:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800dac0 <_vfiprintf_r+0x21c>
 800d914:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d918:	f04f 0901 	mov.w	r9, #1
 800d91c:	4623      	mov	r3, r4
 800d91e:	469a      	mov	sl, r3
 800d920:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d924:	b10a      	cbz	r2, 800d92a <_vfiprintf_r+0x86>
 800d926:	2a25      	cmp	r2, #37	@ 0x25
 800d928:	d1f9      	bne.n	800d91e <_vfiprintf_r+0x7a>
 800d92a:	ebba 0b04 	subs.w	fp, sl, r4
 800d92e:	d00b      	beq.n	800d948 <_vfiprintf_r+0xa4>
 800d930:	465b      	mov	r3, fp
 800d932:	4622      	mov	r2, r4
 800d934:	4629      	mov	r1, r5
 800d936:	4630      	mov	r0, r6
 800d938:	f7ff ffa1 	bl	800d87e <__sfputs_r>
 800d93c:	3001      	adds	r0, #1
 800d93e:	f000 80a7 	beq.w	800da90 <_vfiprintf_r+0x1ec>
 800d942:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d944:	445a      	add	r2, fp
 800d946:	9209      	str	r2, [sp, #36]	@ 0x24
 800d948:	f89a 3000 	ldrb.w	r3, [sl]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	f000 809f 	beq.w	800da90 <_vfiprintf_r+0x1ec>
 800d952:	2300      	movs	r3, #0
 800d954:	f04f 32ff 	mov.w	r2, #4294967295
 800d958:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d95c:	f10a 0a01 	add.w	sl, sl, #1
 800d960:	9304      	str	r3, [sp, #16]
 800d962:	9307      	str	r3, [sp, #28]
 800d964:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d968:	931a      	str	r3, [sp, #104]	@ 0x68
 800d96a:	4654      	mov	r4, sl
 800d96c:	2205      	movs	r2, #5
 800d96e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d972:	4853      	ldr	r0, [pc, #332]	@ (800dac0 <_vfiprintf_r+0x21c>)
 800d974:	f7f2 fcbc 	bl	80002f0 <memchr>
 800d978:	9a04      	ldr	r2, [sp, #16]
 800d97a:	b9d8      	cbnz	r0, 800d9b4 <_vfiprintf_r+0x110>
 800d97c:	06d1      	lsls	r1, r2, #27
 800d97e:	bf44      	itt	mi
 800d980:	2320      	movmi	r3, #32
 800d982:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d986:	0713      	lsls	r3, r2, #28
 800d988:	bf44      	itt	mi
 800d98a:	232b      	movmi	r3, #43	@ 0x2b
 800d98c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d990:	f89a 3000 	ldrb.w	r3, [sl]
 800d994:	2b2a      	cmp	r3, #42	@ 0x2a
 800d996:	d015      	beq.n	800d9c4 <_vfiprintf_r+0x120>
 800d998:	9a07      	ldr	r2, [sp, #28]
 800d99a:	4654      	mov	r4, sl
 800d99c:	2000      	movs	r0, #0
 800d99e:	f04f 0c0a 	mov.w	ip, #10
 800d9a2:	4621      	mov	r1, r4
 800d9a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d9a8:	3b30      	subs	r3, #48	@ 0x30
 800d9aa:	2b09      	cmp	r3, #9
 800d9ac:	d94b      	bls.n	800da46 <_vfiprintf_r+0x1a2>
 800d9ae:	b1b0      	cbz	r0, 800d9de <_vfiprintf_r+0x13a>
 800d9b0:	9207      	str	r2, [sp, #28]
 800d9b2:	e014      	b.n	800d9de <_vfiprintf_r+0x13a>
 800d9b4:	eba0 0308 	sub.w	r3, r0, r8
 800d9b8:	fa09 f303 	lsl.w	r3, r9, r3
 800d9bc:	4313      	orrs	r3, r2
 800d9be:	9304      	str	r3, [sp, #16]
 800d9c0:	46a2      	mov	sl, r4
 800d9c2:	e7d2      	b.n	800d96a <_vfiprintf_r+0xc6>
 800d9c4:	9b03      	ldr	r3, [sp, #12]
 800d9c6:	1d19      	adds	r1, r3, #4
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	9103      	str	r1, [sp, #12]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	bfbb      	ittet	lt
 800d9d0:	425b      	neglt	r3, r3
 800d9d2:	f042 0202 	orrlt.w	r2, r2, #2
 800d9d6:	9307      	strge	r3, [sp, #28]
 800d9d8:	9307      	strlt	r3, [sp, #28]
 800d9da:	bfb8      	it	lt
 800d9dc:	9204      	strlt	r2, [sp, #16]
 800d9de:	7823      	ldrb	r3, [r4, #0]
 800d9e0:	2b2e      	cmp	r3, #46	@ 0x2e
 800d9e2:	d10a      	bne.n	800d9fa <_vfiprintf_r+0x156>
 800d9e4:	7863      	ldrb	r3, [r4, #1]
 800d9e6:	2b2a      	cmp	r3, #42	@ 0x2a
 800d9e8:	d132      	bne.n	800da50 <_vfiprintf_r+0x1ac>
 800d9ea:	9b03      	ldr	r3, [sp, #12]
 800d9ec:	1d1a      	adds	r2, r3, #4
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	9203      	str	r2, [sp, #12]
 800d9f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d9f6:	3402      	adds	r4, #2
 800d9f8:	9305      	str	r3, [sp, #20]
 800d9fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800dad0 <_vfiprintf_r+0x22c>
 800d9fe:	7821      	ldrb	r1, [r4, #0]
 800da00:	2203      	movs	r2, #3
 800da02:	4650      	mov	r0, sl
 800da04:	f7f2 fc74 	bl	80002f0 <memchr>
 800da08:	b138      	cbz	r0, 800da1a <_vfiprintf_r+0x176>
 800da0a:	9b04      	ldr	r3, [sp, #16]
 800da0c:	eba0 000a 	sub.w	r0, r0, sl
 800da10:	2240      	movs	r2, #64	@ 0x40
 800da12:	4082      	lsls	r2, r0
 800da14:	4313      	orrs	r3, r2
 800da16:	3401      	adds	r4, #1
 800da18:	9304      	str	r3, [sp, #16]
 800da1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da1e:	4829      	ldr	r0, [pc, #164]	@ (800dac4 <_vfiprintf_r+0x220>)
 800da20:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800da24:	2206      	movs	r2, #6
 800da26:	f7f2 fc63 	bl	80002f0 <memchr>
 800da2a:	2800      	cmp	r0, #0
 800da2c:	d03f      	beq.n	800daae <_vfiprintf_r+0x20a>
 800da2e:	4b26      	ldr	r3, [pc, #152]	@ (800dac8 <_vfiprintf_r+0x224>)
 800da30:	bb1b      	cbnz	r3, 800da7a <_vfiprintf_r+0x1d6>
 800da32:	9b03      	ldr	r3, [sp, #12]
 800da34:	3307      	adds	r3, #7
 800da36:	f023 0307 	bic.w	r3, r3, #7
 800da3a:	3308      	adds	r3, #8
 800da3c:	9303      	str	r3, [sp, #12]
 800da3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da40:	443b      	add	r3, r7
 800da42:	9309      	str	r3, [sp, #36]	@ 0x24
 800da44:	e76a      	b.n	800d91c <_vfiprintf_r+0x78>
 800da46:	fb0c 3202 	mla	r2, ip, r2, r3
 800da4a:	460c      	mov	r4, r1
 800da4c:	2001      	movs	r0, #1
 800da4e:	e7a8      	b.n	800d9a2 <_vfiprintf_r+0xfe>
 800da50:	2300      	movs	r3, #0
 800da52:	3401      	adds	r4, #1
 800da54:	9305      	str	r3, [sp, #20]
 800da56:	4619      	mov	r1, r3
 800da58:	f04f 0c0a 	mov.w	ip, #10
 800da5c:	4620      	mov	r0, r4
 800da5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da62:	3a30      	subs	r2, #48	@ 0x30
 800da64:	2a09      	cmp	r2, #9
 800da66:	d903      	bls.n	800da70 <_vfiprintf_r+0x1cc>
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d0c6      	beq.n	800d9fa <_vfiprintf_r+0x156>
 800da6c:	9105      	str	r1, [sp, #20]
 800da6e:	e7c4      	b.n	800d9fa <_vfiprintf_r+0x156>
 800da70:	fb0c 2101 	mla	r1, ip, r1, r2
 800da74:	4604      	mov	r4, r0
 800da76:	2301      	movs	r3, #1
 800da78:	e7f0      	b.n	800da5c <_vfiprintf_r+0x1b8>
 800da7a:	ab03      	add	r3, sp, #12
 800da7c:	9300      	str	r3, [sp, #0]
 800da7e:	462a      	mov	r2, r5
 800da80:	4b12      	ldr	r3, [pc, #72]	@ (800dacc <_vfiprintf_r+0x228>)
 800da82:	a904      	add	r1, sp, #16
 800da84:	4630      	mov	r0, r6
 800da86:	f7fc fb4f 	bl	800a128 <_printf_float>
 800da8a:	4607      	mov	r7, r0
 800da8c:	1c78      	adds	r0, r7, #1
 800da8e:	d1d6      	bne.n	800da3e <_vfiprintf_r+0x19a>
 800da90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800da92:	07d9      	lsls	r1, r3, #31
 800da94:	d405      	bmi.n	800daa2 <_vfiprintf_r+0x1fe>
 800da96:	89ab      	ldrh	r3, [r5, #12]
 800da98:	059a      	lsls	r2, r3, #22
 800da9a:	d402      	bmi.n	800daa2 <_vfiprintf_r+0x1fe>
 800da9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800da9e:	f7fd fc5b 	bl	800b358 <__retarget_lock_release_recursive>
 800daa2:	89ab      	ldrh	r3, [r5, #12]
 800daa4:	065b      	lsls	r3, r3, #25
 800daa6:	f53f af1f 	bmi.w	800d8e8 <_vfiprintf_r+0x44>
 800daaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800daac:	e71e      	b.n	800d8ec <_vfiprintf_r+0x48>
 800daae:	ab03      	add	r3, sp, #12
 800dab0:	9300      	str	r3, [sp, #0]
 800dab2:	462a      	mov	r2, r5
 800dab4:	4b05      	ldr	r3, [pc, #20]	@ (800dacc <_vfiprintf_r+0x228>)
 800dab6:	a904      	add	r1, sp, #16
 800dab8:	4630      	mov	r0, r6
 800daba:	f7fc fdbd 	bl	800a638 <_printf_i>
 800dabe:	e7e4      	b.n	800da8a <_vfiprintf_r+0x1e6>
 800dac0:	0800e991 	.word	0x0800e991
 800dac4:	0800e99b 	.word	0x0800e99b
 800dac8:	0800a129 	.word	0x0800a129
 800dacc:	0800d87f 	.word	0x0800d87f
 800dad0:	0800e997 	.word	0x0800e997

0800dad4 <__sflush_r>:
 800dad4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dadc:	0716      	lsls	r6, r2, #28
 800dade:	4605      	mov	r5, r0
 800dae0:	460c      	mov	r4, r1
 800dae2:	d454      	bmi.n	800db8e <__sflush_r+0xba>
 800dae4:	684b      	ldr	r3, [r1, #4]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	dc02      	bgt.n	800daf0 <__sflush_r+0x1c>
 800daea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800daec:	2b00      	cmp	r3, #0
 800daee:	dd48      	ble.n	800db82 <__sflush_r+0xae>
 800daf0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800daf2:	2e00      	cmp	r6, #0
 800daf4:	d045      	beq.n	800db82 <__sflush_r+0xae>
 800daf6:	2300      	movs	r3, #0
 800daf8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800dafc:	682f      	ldr	r7, [r5, #0]
 800dafe:	6a21      	ldr	r1, [r4, #32]
 800db00:	602b      	str	r3, [r5, #0]
 800db02:	d030      	beq.n	800db66 <__sflush_r+0x92>
 800db04:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800db06:	89a3      	ldrh	r3, [r4, #12]
 800db08:	0759      	lsls	r1, r3, #29
 800db0a:	d505      	bpl.n	800db18 <__sflush_r+0x44>
 800db0c:	6863      	ldr	r3, [r4, #4]
 800db0e:	1ad2      	subs	r2, r2, r3
 800db10:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800db12:	b10b      	cbz	r3, 800db18 <__sflush_r+0x44>
 800db14:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800db16:	1ad2      	subs	r2, r2, r3
 800db18:	2300      	movs	r3, #0
 800db1a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800db1c:	6a21      	ldr	r1, [r4, #32]
 800db1e:	4628      	mov	r0, r5
 800db20:	47b0      	blx	r6
 800db22:	1c43      	adds	r3, r0, #1
 800db24:	89a3      	ldrh	r3, [r4, #12]
 800db26:	d106      	bne.n	800db36 <__sflush_r+0x62>
 800db28:	6829      	ldr	r1, [r5, #0]
 800db2a:	291d      	cmp	r1, #29
 800db2c:	d82b      	bhi.n	800db86 <__sflush_r+0xb2>
 800db2e:	4a2a      	ldr	r2, [pc, #168]	@ (800dbd8 <__sflush_r+0x104>)
 800db30:	410a      	asrs	r2, r1
 800db32:	07d6      	lsls	r6, r2, #31
 800db34:	d427      	bmi.n	800db86 <__sflush_r+0xb2>
 800db36:	2200      	movs	r2, #0
 800db38:	6062      	str	r2, [r4, #4]
 800db3a:	04d9      	lsls	r1, r3, #19
 800db3c:	6922      	ldr	r2, [r4, #16]
 800db3e:	6022      	str	r2, [r4, #0]
 800db40:	d504      	bpl.n	800db4c <__sflush_r+0x78>
 800db42:	1c42      	adds	r2, r0, #1
 800db44:	d101      	bne.n	800db4a <__sflush_r+0x76>
 800db46:	682b      	ldr	r3, [r5, #0]
 800db48:	b903      	cbnz	r3, 800db4c <__sflush_r+0x78>
 800db4a:	6560      	str	r0, [r4, #84]	@ 0x54
 800db4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800db4e:	602f      	str	r7, [r5, #0]
 800db50:	b1b9      	cbz	r1, 800db82 <__sflush_r+0xae>
 800db52:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800db56:	4299      	cmp	r1, r3
 800db58:	d002      	beq.n	800db60 <__sflush_r+0x8c>
 800db5a:	4628      	mov	r0, r5
 800db5c:	f7fe f9f2 	bl	800bf44 <_free_r>
 800db60:	2300      	movs	r3, #0
 800db62:	6363      	str	r3, [r4, #52]	@ 0x34
 800db64:	e00d      	b.n	800db82 <__sflush_r+0xae>
 800db66:	2301      	movs	r3, #1
 800db68:	4628      	mov	r0, r5
 800db6a:	47b0      	blx	r6
 800db6c:	4602      	mov	r2, r0
 800db6e:	1c50      	adds	r0, r2, #1
 800db70:	d1c9      	bne.n	800db06 <__sflush_r+0x32>
 800db72:	682b      	ldr	r3, [r5, #0]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d0c6      	beq.n	800db06 <__sflush_r+0x32>
 800db78:	2b1d      	cmp	r3, #29
 800db7a:	d001      	beq.n	800db80 <__sflush_r+0xac>
 800db7c:	2b16      	cmp	r3, #22
 800db7e:	d11e      	bne.n	800dbbe <__sflush_r+0xea>
 800db80:	602f      	str	r7, [r5, #0]
 800db82:	2000      	movs	r0, #0
 800db84:	e022      	b.n	800dbcc <__sflush_r+0xf8>
 800db86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db8a:	b21b      	sxth	r3, r3
 800db8c:	e01b      	b.n	800dbc6 <__sflush_r+0xf2>
 800db8e:	690f      	ldr	r7, [r1, #16]
 800db90:	2f00      	cmp	r7, #0
 800db92:	d0f6      	beq.n	800db82 <__sflush_r+0xae>
 800db94:	0793      	lsls	r3, r2, #30
 800db96:	680e      	ldr	r6, [r1, #0]
 800db98:	bf08      	it	eq
 800db9a:	694b      	ldreq	r3, [r1, #20]
 800db9c:	600f      	str	r7, [r1, #0]
 800db9e:	bf18      	it	ne
 800dba0:	2300      	movne	r3, #0
 800dba2:	eba6 0807 	sub.w	r8, r6, r7
 800dba6:	608b      	str	r3, [r1, #8]
 800dba8:	f1b8 0f00 	cmp.w	r8, #0
 800dbac:	dde9      	ble.n	800db82 <__sflush_r+0xae>
 800dbae:	6a21      	ldr	r1, [r4, #32]
 800dbb0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800dbb2:	4643      	mov	r3, r8
 800dbb4:	463a      	mov	r2, r7
 800dbb6:	4628      	mov	r0, r5
 800dbb8:	47b0      	blx	r6
 800dbba:	2800      	cmp	r0, #0
 800dbbc:	dc08      	bgt.n	800dbd0 <__sflush_r+0xfc>
 800dbbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dbc6:	81a3      	strh	r3, [r4, #12]
 800dbc8:	f04f 30ff 	mov.w	r0, #4294967295
 800dbcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbd0:	4407      	add	r7, r0
 800dbd2:	eba8 0800 	sub.w	r8, r8, r0
 800dbd6:	e7e7      	b.n	800dba8 <__sflush_r+0xd4>
 800dbd8:	dfbffffe 	.word	0xdfbffffe

0800dbdc <_fflush_r>:
 800dbdc:	b538      	push	{r3, r4, r5, lr}
 800dbde:	690b      	ldr	r3, [r1, #16]
 800dbe0:	4605      	mov	r5, r0
 800dbe2:	460c      	mov	r4, r1
 800dbe4:	b913      	cbnz	r3, 800dbec <_fflush_r+0x10>
 800dbe6:	2500      	movs	r5, #0
 800dbe8:	4628      	mov	r0, r5
 800dbea:	bd38      	pop	{r3, r4, r5, pc}
 800dbec:	b118      	cbz	r0, 800dbf6 <_fflush_r+0x1a>
 800dbee:	6a03      	ldr	r3, [r0, #32]
 800dbf0:	b90b      	cbnz	r3, 800dbf6 <_fflush_r+0x1a>
 800dbf2:	f7fd f8d9 	bl	800ada8 <__sinit>
 800dbf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d0f3      	beq.n	800dbe6 <_fflush_r+0xa>
 800dbfe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dc00:	07d0      	lsls	r0, r2, #31
 800dc02:	d404      	bmi.n	800dc0e <_fflush_r+0x32>
 800dc04:	0599      	lsls	r1, r3, #22
 800dc06:	d402      	bmi.n	800dc0e <_fflush_r+0x32>
 800dc08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dc0a:	f7fd fba4 	bl	800b356 <__retarget_lock_acquire_recursive>
 800dc0e:	4628      	mov	r0, r5
 800dc10:	4621      	mov	r1, r4
 800dc12:	f7ff ff5f 	bl	800dad4 <__sflush_r>
 800dc16:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dc18:	07da      	lsls	r2, r3, #31
 800dc1a:	4605      	mov	r5, r0
 800dc1c:	d4e4      	bmi.n	800dbe8 <_fflush_r+0xc>
 800dc1e:	89a3      	ldrh	r3, [r4, #12]
 800dc20:	059b      	lsls	r3, r3, #22
 800dc22:	d4e1      	bmi.n	800dbe8 <_fflush_r+0xc>
 800dc24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dc26:	f7fd fb97 	bl	800b358 <__retarget_lock_release_recursive>
 800dc2a:	e7dd      	b.n	800dbe8 <_fflush_r+0xc>

0800dc2c <__swhatbuf_r>:
 800dc2c:	b570      	push	{r4, r5, r6, lr}
 800dc2e:	460c      	mov	r4, r1
 800dc30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc34:	2900      	cmp	r1, #0
 800dc36:	b096      	sub	sp, #88	@ 0x58
 800dc38:	4615      	mov	r5, r2
 800dc3a:	461e      	mov	r6, r3
 800dc3c:	da0d      	bge.n	800dc5a <__swhatbuf_r+0x2e>
 800dc3e:	89a3      	ldrh	r3, [r4, #12]
 800dc40:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dc44:	f04f 0100 	mov.w	r1, #0
 800dc48:	bf14      	ite	ne
 800dc4a:	2340      	movne	r3, #64	@ 0x40
 800dc4c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800dc50:	2000      	movs	r0, #0
 800dc52:	6031      	str	r1, [r6, #0]
 800dc54:	602b      	str	r3, [r5, #0]
 800dc56:	b016      	add	sp, #88	@ 0x58
 800dc58:	bd70      	pop	{r4, r5, r6, pc}
 800dc5a:	466a      	mov	r2, sp
 800dc5c:	f000 f874 	bl	800dd48 <_fstat_r>
 800dc60:	2800      	cmp	r0, #0
 800dc62:	dbec      	blt.n	800dc3e <__swhatbuf_r+0x12>
 800dc64:	9901      	ldr	r1, [sp, #4]
 800dc66:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dc6a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dc6e:	4259      	negs	r1, r3
 800dc70:	4159      	adcs	r1, r3
 800dc72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dc76:	e7eb      	b.n	800dc50 <__swhatbuf_r+0x24>

0800dc78 <__smakebuf_r>:
 800dc78:	898b      	ldrh	r3, [r1, #12]
 800dc7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dc7c:	079d      	lsls	r5, r3, #30
 800dc7e:	4606      	mov	r6, r0
 800dc80:	460c      	mov	r4, r1
 800dc82:	d507      	bpl.n	800dc94 <__smakebuf_r+0x1c>
 800dc84:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dc88:	6023      	str	r3, [r4, #0]
 800dc8a:	6123      	str	r3, [r4, #16]
 800dc8c:	2301      	movs	r3, #1
 800dc8e:	6163      	str	r3, [r4, #20]
 800dc90:	b003      	add	sp, #12
 800dc92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc94:	ab01      	add	r3, sp, #4
 800dc96:	466a      	mov	r2, sp
 800dc98:	f7ff ffc8 	bl	800dc2c <__swhatbuf_r>
 800dc9c:	9f00      	ldr	r7, [sp, #0]
 800dc9e:	4605      	mov	r5, r0
 800dca0:	4639      	mov	r1, r7
 800dca2:	4630      	mov	r0, r6
 800dca4:	f7fc f924 	bl	8009ef0 <_malloc_r>
 800dca8:	b948      	cbnz	r0, 800dcbe <__smakebuf_r+0x46>
 800dcaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dcae:	059a      	lsls	r2, r3, #22
 800dcb0:	d4ee      	bmi.n	800dc90 <__smakebuf_r+0x18>
 800dcb2:	f023 0303 	bic.w	r3, r3, #3
 800dcb6:	f043 0302 	orr.w	r3, r3, #2
 800dcba:	81a3      	strh	r3, [r4, #12]
 800dcbc:	e7e2      	b.n	800dc84 <__smakebuf_r+0xc>
 800dcbe:	89a3      	ldrh	r3, [r4, #12]
 800dcc0:	6020      	str	r0, [r4, #0]
 800dcc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dcc6:	81a3      	strh	r3, [r4, #12]
 800dcc8:	9b01      	ldr	r3, [sp, #4]
 800dcca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800dcce:	b15b      	cbz	r3, 800dce8 <__smakebuf_r+0x70>
 800dcd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dcd4:	4630      	mov	r0, r6
 800dcd6:	f000 f849 	bl	800dd6c <_isatty_r>
 800dcda:	b128      	cbz	r0, 800dce8 <__smakebuf_r+0x70>
 800dcdc:	89a3      	ldrh	r3, [r4, #12]
 800dcde:	f023 0303 	bic.w	r3, r3, #3
 800dce2:	f043 0301 	orr.w	r3, r3, #1
 800dce6:	81a3      	strh	r3, [r4, #12]
 800dce8:	89a3      	ldrh	r3, [r4, #12]
 800dcea:	431d      	orrs	r5, r3
 800dcec:	81a5      	strh	r5, [r4, #12]
 800dcee:	e7cf      	b.n	800dc90 <__smakebuf_r+0x18>

0800dcf0 <memmove>:
 800dcf0:	4288      	cmp	r0, r1
 800dcf2:	b510      	push	{r4, lr}
 800dcf4:	eb01 0402 	add.w	r4, r1, r2
 800dcf8:	d902      	bls.n	800dd00 <memmove+0x10>
 800dcfa:	4284      	cmp	r4, r0
 800dcfc:	4623      	mov	r3, r4
 800dcfe:	d807      	bhi.n	800dd10 <memmove+0x20>
 800dd00:	1e43      	subs	r3, r0, #1
 800dd02:	42a1      	cmp	r1, r4
 800dd04:	d008      	beq.n	800dd18 <memmove+0x28>
 800dd06:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dd0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dd0e:	e7f8      	b.n	800dd02 <memmove+0x12>
 800dd10:	4402      	add	r2, r0
 800dd12:	4601      	mov	r1, r0
 800dd14:	428a      	cmp	r2, r1
 800dd16:	d100      	bne.n	800dd1a <memmove+0x2a>
 800dd18:	bd10      	pop	{r4, pc}
 800dd1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dd1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dd22:	e7f7      	b.n	800dd14 <memmove+0x24>

0800dd24 <strncmp>:
 800dd24:	b510      	push	{r4, lr}
 800dd26:	b16a      	cbz	r2, 800dd44 <strncmp+0x20>
 800dd28:	3901      	subs	r1, #1
 800dd2a:	1884      	adds	r4, r0, r2
 800dd2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd30:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800dd34:	429a      	cmp	r2, r3
 800dd36:	d103      	bne.n	800dd40 <strncmp+0x1c>
 800dd38:	42a0      	cmp	r0, r4
 800dd3a:	d001      	beq.n	800dd40 <strncmp+0x1c>
 800dd3c:	2a00      	cmp	r2, #0
 800dd3e:	d1f5      	bne.n	800dd2c <strncmp+0x8>
 800dd40:	1ad0      	subs	r0, r2, r3
 800dd42:	bd10      	pop	{r4, pc}
 800dd44:	4610      	mov	r0, r2
 800dd46:	e7fc      	b.n	800dd42 <strncmp+0x1e>

0800dd48 <_fstat_r>:
 800dd48:	b538      	push	{r3, r4, r5, lr}
 800dd4a:	4d07      	ldr	r5, [pc, #28]	@ (800dd68 <_fstat_r+0x20>)
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	4604      	mov	r4, r0
 800dd50:	4608      	mov	r0, r1
 800dd52:	4611      	mov	r1, r2
 800dd54:	602b      	str	r3, [r5, #0]
 800dd56:	f7f3 f985 	bl	8001064 <_fstat>
 800dd5a:	1c43      	adds	r3, r0, #1
 800dd5c:	d102      	bne.n	800dd64 <_fstat_r+0x1c>
 800dd5e:	682b      	ldr	r3, [r5, #0]
 800dd60:	b103      	cbz	r3, 800dd64 <_fstat_r+0x1c>
 800dd62:	6023      	str	r3, [r4, #0]
 800dd64:	bd38      	pop	{r3, r4, r5, pc}
 800dd66:	bf00      	nop
 800dd68:	24004e78 	.word	0x24004e78

0800dd6c <_isatty_r>:
 800dd6c:	b538      	push	{r3, r4, r5, lr}
 800dd6e:	4d06      	ldr	r5, [pc, #24]	@ (800dd88 <_isatty_r+0x1c>)
 800dd70:	2300      	movs	r3, #0
 800dd72:	4604      	mov	r4, r0
 800dd74:	4608      	mov	r0, r1
 800dd76:	602b      	str	r3, [r5, #0]
 800dd78:	f7f3 f984 	bl	8001084 <_isatty>
 800dd7c:	1c43      	adds	r3, r0, #1
 800dd7e:	d102      	bne.n	800dd86 <_isatty_r+0x1a>
 800dd80:	682b      	ldr	r3, [r5, #0]
 800dd82:	b103      	cbz	r3, 800dd86 <_isatty_r+0x1a>
 800dd84:	6023      	str	r3, [r4, #0]
 800dd86:	bd38      	pop	{r3, r4, r5, pc}
 800dd88:	24004e78 	.word	0x24004e78
 800dd8c:	00000000 	.word	0x00000000

0800dd90 <nan>:
 800dd90:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800dd98 <nan+0x8>
 800dd94:	4770      	bx	lr
 800dd96:	bf00      	nop
 800dd98:	00000000 	.word	0x00000000
 800dd9c:	7ff80000 	.word	0x7ff80000

0800dda0 <_calloc_r>:
 800dda0:	b570      	push	{r4, r5, r6, lr}
 800dda2:	fba1 5402 	umull	r5, r4, r1, r2
 800dda6:	b93c      	cbnz	r4, 800ddb8 <_calloc_r+0x18>
 800dda8:	4629      	mov	r1, r5
 800ddaa:	f7fc f8a1 	bl	8009ef0 <_malloc_r>
 800ddae:	4606      	mov	r6, r0
 800ddb0:	b928      	cbnz	r0, 800ddbe <_calloc_r+0x1e>
 800ddb2:	2600      	movs	r6, #0
 800ddb4:	4630      	mov	r0, r6
 800ddb6:	bd70      	pop	{r4, r5, r6, pc}
 800ddb8:	220c      	movs	r2, #12
 800ddba:	6002      	str	r2, [r0, #0]
 800ddbc:	e7f9      	b.n	800ddb2 <_calloc_r+0x12>
 800ddbe:	462a      	mov	r2, r5
 800ddc0:	4621      	mov	r1, r4
 800ddc2:	f7fd f9a1 	bl	800b108 <memset>
 800ddc6:	e7f5      	b.n	800ddb4 <_calloc_r+0x14>

0800ddc8 <rshift>:
 800ddc8:	6903      	ldr	r3, [r0, #16]
 800ddca:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ddce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ddd2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ddd6:	f100 0414 	add.w	r4, r0, #20
 800ddda:	dd45      	ble.n	800de68 <rshift+0xa0>
 800dddc:	f011 011f 	ands.w	r1, r1, #31
 800dde0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800dde4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800dde8:	d10c      	bne.n	800de04 <rshift+0x3c>
 800ddea:	f100 0710 	add.w	r7, r0, #16
 800ddee:	4629      	mov	r1, r5
 800ddf0:	42b1      	cmp	r1, r6
 800ddf2:	d334      	bcc.n	800de5e <rshift+0x96>
 800ddf4:	1a9b      	subs	r3, r3, r2
 800ddf6:	009b      	lsls	r3, r3, #2
 800ddf8:	1eea      	subs	r2, r5, #3
 800ddfa:	4296      	cmp	r6, r2
 800ddfc:	bf38      	it	cc
 800ddfe:	2300      	movcc	r3, #0
 800de00:	4423      	add	r3, r4
 800de02:	e015      	b.n	800de30 <rshift+0x68>
 800de04:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800de08:	f1c1 0820 	rsb	r8, r1, #32
 800de0c:	40cf      	lsrs	r7, r1
 800de0e:	f105 0e04 	add.w	lr, r5, #4
 800de12:	46a1      	mov	r9, r4
 800de14:	4576      	cmp	r6, lr
 800de16:	46f4      	mov	ip, lr
 800de18:	d815      	bhi.n	800de46 <rshift+0x7e>
 800de1a:	1a9a      	subs	r2, r3, r2
 800de1c:	0092      	lsls	r2, r2, #2
 800de1e:	3a04      	subs	r2, #4
 800de20:	3501      	adds	r5, #1
 800de22:	42ae      	cmp	r6, r5
 800de24:	bf38      	it	cc
 800de26:	2200      	movcc	r2, #0
 800de28:	18a3      	adds	r3, r4, r2
 800de2a:	50a7      	str	r7, [r4, r2]
 800de2c:	b107      	cbz	r7, 800de30 <rshift+0x68>
 800de2e:	3304      	adds	r3, #4
 800de30:	1b1a      	subs	r2, r3, r4
 800de32:	42a3      	cmp	r3, r4
 800de34:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800de38:	bf08      	it	eq
 800de3a:	2300      	moveq	r3, #0
 800de3c:	6102      	str	r2, [r0, #16]
 800de3e:	bf08      	it	eq
 800de40:	6143      	streq	r3, [r0, #20]
 800de42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800de46:	f8dc c000 	ldr.w	ip, [ip]
 800de4a:	fa0c fc08 	lsl.w	ip, ip, r8
 800de4e:	ea4c 0707 	orr.w	r7, ip, r7
 800de52:	f849 7b04 	str.w	r7, [r9], #4
 800de56:	f85e 7b04 	ldr.w	r7, [lr], #4
 800de5a:	40cf      	lsrs	r7, r1
 800de5c:	e7da      	b.n	800de14 <rshift+0x4c>
 800de5e:	f851 cb04 	ldr.w	ip, [r1], #4
 800de62:	f847 cf04 	str.w	ip, [r7, #4]!
 800de66:	e7c3      	b.n	800ddf0 <rshift+0x28>
 800de68:	4623      	mov	r3, r4
 800de6a:	e7e1      	b.n	800de30 <rshift+0x68>

0800de6c <__hexdig_fun>:
 800de6c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800de70:	2b09      	cmp	r3, #9
 800de72:	d802      	bhi.n	800de7a <__hexdig_fun+0xe>
 800de74:	3820      	subs	r0, #32
 800de76:	b2c0      	uxtb	r0, r0
 800de78:	4770      	bx	lr
 800de7a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800de7e:	2b05      	cmp	r3, #5
 800de80:	d801      	bhi.n	800de86 <__hexdig_fun+0x1a>
 800de82:	3847      	subs	r0, #71	@ 0x47
 800de84:	e7f7      	b.n	800de76 <__hexdig_fun+0xa>
 800de86:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800de8a:	2b05      	cmp	r3, #5
 800de8c:	d801      	bhi.n	800de92 <__hexdig_fun+0x26>
 800de8e:	3827      	subs	r0, #39	@ 0x27
 800de90:	e7f1      	b.n	800de76 <__hexdig_fun+0xa>
 800de92:	2000      	movs	r0, #0
 800de94:	4770      	bx	lr
	...

0800de98 <__gethex>:
 800de98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de9c:	b085      	sub	sp, #20
 800de9e:	468a      	mov	sl, r1
 800dea0:	9302      	str	r3, [sp, #8]
 800dea2:	680b      	ldr	r3, [r1, #0]
 800dea4:	9001      	str	r0, [sp, #4]
 800dea6:	4690      	mov	r8, r2
 800dea8:	1c9c      	adds	r4, r3, #2
 800deaa:	46a1      	mov	r9, r4
 800deac:	f814 0b01 	ldrb.w	r0, [r4], #1
 800deb0:	2830      	cmp	r0, #48	@ 0x30
 800deb2:	d0fa      	beq.n	800deaa <__gethex+0x12>
 800deb4:	eba9 0303 	sub.w	r3, r9, r3
 800deb8:	f1a3 0b02 	sub.w	fp, r3, #2
 800debc:	f7ff ffd6 	bl	800de6c <__hexdig_fun>
 800dec0:	4605      	mov	r5, r0
 800dec2:	2800      	cmp	r0, #0
 800dec4:	d168      	bne.n	800df98 <__gethex+0x100>
 800dec6:	49a0      	ldr	r1, [pc, #640]	@ (800e148 <__gethex+0x2b0>)
 800dec8:	2201      	movs	r2, #1
 800deca:	4648      	mov	r0, r9
 800decc:	f7ff ff2a 	bl	800dd24 <strncmp>
 800ded0:	4607      	mov	r7, r0
 800ded2:	2800      	cmp	r0, #0
 800ded4:	d167      	bne.n	800dfa6 <__gethex+0x10e>
 800ded6:	f899 0001 	ldrb.w	r0, [r9, #1]
 800deda:	4626      	mov	r6, r4
 800dedc:	f7ff ffc6 	bl	800de6c <__hexdig_fun>
 800dee0:	2800      	cmp	r0, #0
 800dee2:	d062      	beq.n	800dfaa <__gethex+0x112>
 800dee4:	4623      	mov	r3, r4
 800dee6:	7818      	ldrb	r0, [r3, #0]
 800dee8:	2830      	cmp	r0, #48	@ 0x30
 800deea:	4699      	mov	r9, r3
 800deec:	f103 0301 	add.w	r3, r3, #1
 800def0:	d0f9      	beq.n	800dee6 <__gethex+0x4e>
 800def2:	f7ff ffbb 	bl	800de6c <__hexdig_fun>
 800def6:	fab0 f580 	clz	r5, r0
 800defa:	096d      	lsrs	r5, r5, #5
 800defc:	f04f 0b01 	mov.w	fp, #1
 800df00:	464a      	mov	r2, r9
 800df02:	4616      	mov	r6, r2
 800df04:	3201      	adds	r2, #1
 800df06:	7830      	ldrb	r0, [r6, #0]
 800df08:	f7ff ffb0 	bl	800de6c <__hexdig_fun>
 800df0c:	2800      	cmp	r0, #0
 800df0e:	d1f8      	bne.n	800df02 <__gethex+0x6a>
 800df10:	498d      	ldr	r1, [pc, #564]	@ (800e148 <__gethex+0x2b0>)
 800df12:	2201      	movs	r2, #1
 800df14:	4630      	mov	r0, r6
 800df16:	f7ff ff05 	bl	800dd24 <strncmp>
 800df1a:	2800      	cmp	r0, #0
 800df1c:	d13f      	bne.n	800df9e <__gethex+0x106>
 800df1e:	b944      	cbnz	r4, 800df32 <__gethex+0x9a>
 800df20:	1c74      	adds	r4, r6, #1
 800df22:	4622      	mov	r2, r4
 800df24:	4616      	mov	r6, r2
 800df26:	3201      	adds	r2, #1
 800df28:	7830      	ldrb	r0, [r6, #0]
 800df2a:	f7ff ff9f 	bl	800de6c <__hexdig_fun>
 800df2e:	2800      	cmp	r0, #0
 800df30:	d1f8      	bne.n	800df24 <__gethex+0x8c>
 800df32:	1ba4      	subs	r4, r4, r6
 800df34:	00a7      	lsls	r7, r4, #2
 800df36:	7833      	ldrb	r3, [r6, #0]
 800df38:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800df3c:	2b50      	cmp	r3, #80	@ 0x50
 800df3e:	d13e      	bne.n	800dfbe <__gethex+0x126>
 800df40:	7873      	ldrb	r3, [r6, #1]
 800df42:	2b2b      	cmp	r3, #43	@ 0x2b
 800df44:	d033      	beq.n	800dfae <__gethex+0x116>
 800df46:	2b2d      	cmp	r3, #45	@ 0x2d
 800df48:	d034      	beq.n	800dfb4 <__gethex+0x11c>
 800df4a:	1c71      	adds	r1, r6, #1
 800df4c:	2400      	movs	r4, #0
 800df4e:	7808      	ldrb	r0, [r1, #0]
 800df50:	f7ff ff8c 	bl	800de6c <__hexdig_fun>
 800df54:	1e43      	subs	r3, r0, #1
 800df56:	b2db      	uxtb	r3, r3
 800df58:	2b18      	cmp	r3, #24
 800df5a:	d830      	bhi.n	800dfbe <__gethex+0x126>
 800df5c:	f1a0 0210 	sub.w	r2, r0, #16
 800df60:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800df64:	f7ff ff82 	bl	800de6c <__hexdig_fun>
 800df68:	f100 3cff 	add.w	ip, r0, #4294967295
 800df6c:	fa5f fc8c 	uxtb.w	ip, ip
 800df70:	f1bc 0f18 	cmp.w	ip, #24
 800df74:	f04f 030a 	mov.w	r3, #10
 800df78:	d91e      	bls.n	800dfb8 <__gethex+0x120>
 800df7a:	b104      	cbz	r4, 800df7e <__gethex+0xe6>
 800df7c:	4252      	negs	r2, r2
 800df7e:	4417      	add	r7, r2
 800df80:	f8ca 1000 	str.w	r1, [sl]
 800df84:	b1ed      	cbz	r5, 800dfc2 <__gethex+0x12a>
 800df86:	f1bb 0f00 	cmp.w	fp, #0
 800df8a:	bf0c      	ite	eq
 800df8c:	2506      	moveq	r5, #6
 800df8e:	2500      	movne	r5, #0
 800df90:	4628      	mov	r0, r5
 800df92:	b005      	add	sp, #20
 800df94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df98:	2500      	movs	r5, #0
 800df9a:	462c      	mov	r4, r5
 800df9c:	e7b0      	b.n	800df00 <__gethex+0x68>
 800df9e:	2c00      	cmp	r4, #0
 800dfa0:	d1c7      	bne.n	800df32 <__gethex+0x9a>
 800dfa2:	4627      	mov	r7, r4
 800dfa4:	e7c7      	b.n	800df36 <__gethex+0x9e>
 800dfa6:	464e      	mov	r6, r9
 800dfa8:	462f      	mov	r7, r5
 800dfaa:	2501      	movs	r5, #1
 800dfac:	e7c3      	b.n	800df36 <__gethex+0x9e>
 800dfae:	2400      	movs	r4, #0
 800dfb0:	1cb1      	adds	r1, r6, #2
 800dfb2:	e7cc      	b.n	800df4e <__gethex+0xb6>
 800dfb4:	2401      	movs	r4, #1
 800dfb6:	e7fb      	b.n	800dfb0 <__gethex+0x118>
 800dfb8:	fb03 0002 	mla	r0, r3, r2, r0
 800dfbc:	e7ce      	b.n	800df5c <__gethex+0xc4>
 800dfbe:	4631      	mov	r1, r6
 800dfc0:	e7de      	b.n	800df80 <__gethex+0xe8>
 800dfc2:	eba6 0309 	sub.w	r3, r6, r9
 800dfc6:	3b01      	subs	r3, #1
 800dfc8:	4629      	mov	r1, r5
 800dfca:	2b07      	cmp	r3, #7
 800dfcc:	dc0a      	bgt.n	800dfe4 <__gethex+0x14c>
 800dfce:	9801      	ldr	r0, [sp, #4]
 800dfd0:	f7fe f802 	bl	800bfd8 <_Balloc>
 800dfd4:	4604      	mov	r4, r0
 800dfd6:	b940      	cbnz	r0, 800dfea <__gethex+0x152>
 800dfd8:	4b5c      	ldr	r3, [pc, #368]	@ (800e14c <__gethex+0x2b4>)
 800dfda:	4602      	mov	r2, r0
 800dfdc:	21e4      	movs	r1, #228	@ 0xe4
 800dfde:	485c      	ldr	r0, [pc, #368]	@ (800e150 <__gethex+0x2b8>)
 800dfe0:	f7fb ff3e 	bl	8009e60 <__assert_func>
 800dfe4:	3101      	adds	r1, #1
 800dfe6:	105b      	asrs	r3, r3, #1
 800dfe8:	e7ef      	b.n	800dfca <__gethex+0x132>
 800dfea:	f100 0a14 	add.w	sl, r0, #20
 800dfee:	2300      	movs	r3, #0
 800dff0:	4655      	mov	r5, sl
 800dff2:	469b      	mov	fp, r3
 800dff4:	45b1      	cmp	r9, r6
 800dff6:	d337      	bcc.n	800e068 <__gethex+0x1d0>
 800dff8:	f845 bb04 	str.w	fp, [r5], #4
 800dffc:	eba5 050a 	sub.w	r5, r5, sl
 800e000:	10ad      	asrs	r5, r5, #2
 800e002:	6125      	str	r5, [r4, #16]
 800e004:	4658      	mov	r0, fp
 800e006:	f7fe f8d9 	bl	800c1bc <__hi0bits>
 800e00a:	016d      	lsls	r5, r5, #5
 800e00c:	f8d8 6000 	ldr.w	r6, [r8]
 800e010:	1a2d      	subs	r5, r5, r0
 800e012:	42b5      	cmp	r5, r6
 800e014:	dd54      	ble.n	800e0c0 <__gethex+0x228>
 800e016:	1bad      	subs	r5, r5, r6
 800e018:	4629      	mov	r1, r5
 800e01a:	4620      	mov	r0, r4
 800e01c:	f7fe fc6a 	bl	800c8f4 <__any_on>
 800e020:	4681      	mov	r9, r0
 800e022:	b178      	cbz	r0, 800e044 <__gethex+0x1ac>
 800e024:	1e6b      	subs	r3, r5, #1
 800e026:	1159      	asrs	r1, r3, #5
 800e028:	f003 021f 	and.w	r2, r3, #31
 800e02c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e030:	f04f 0901 	mov.w	r9, #1
 800e034:	fa09 f202 	lsl.w	r2, r9, r2
 800e038:	420a      	tst	r2, r1
 800e03a:	d003      	beq.n	800e044 <__gethex+0x1ac>
 800e03c:	454b      	cmp	r3, r9
 800e03e:	dc36      	bgt.n	800e0ae <__gethex+0x216>
 800e040:	f04f 0902 	mov.w	r9, #2
 800e044:	4629      	mov	r1, r5
 800e046:	4620      	mov	r0, r4
 800e048:	f7ff febe 	bl	800ddc8 <rshift>
 800e04c:	442f      	add	r7, r5
 800e04e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e052:	42bb      	cmp	r3, r7
 800e054:	da42      	bge.n	800e0dc <__gethex+0x244>
 800e056:	9801      	ldr	r0, [sp, #4]
 800e058:	4621      	mov	r1, r4
 800e05a:	f7fd fffd 	bl	800c058 <_Bfree>
 800e05e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e060:	2300      	movs	r3, #0
 800e062:	6013      	str	r3, [r2, #0]
 800e064:	25a3      	movs	r5, #163	@ 0xa3
 800e066:	e793      	b.n	800df90 <__gethex+0xf8>
 800e068:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e06c:	2a2e      	cmp	r2, #46	@ 0x2e
 800e06e:	d012      	beq.n	800e096 <__gethex+0x1fe>
 800e070:	2b20      	cmp	r3, #32
 800e072:	d104      	bne.n	800e07e <__gethex+0x1e6>
 800e074:	f845 bb04 	str.w	fp, [r5], #4
 800e078:	f04f 0b00 	mov.w	fp, #0
 800e07c:	465b      	mov	r3, fp
 800e07e:	7830      	ldrb	r0, [r6, #0]
 800e080:	9303      	str	r3, [sp, #12]
 800e082:	f7ff fef3 	bl	800de6c <__hexdig_fun>
 800e086:	9b03      	ldr	r3, [sp, #12]
 800e088:	f000 000f 	and.w	r0, r0, #15
 800e08c:	4098      	lsls	r0, r3
 800e08e:	ea4b 0b00 	orr.w	fp, fp, r0
 800e092:	3304      	adds	r3, #4
 800e094:	e7ae      	b.n	800dff4 <__gethex+0x15c>
 800e096:	45b1      	cmp	r9, r6
 800e098:	d8ea      	bhi.n	800e070 <__gethex+0x1d8>
 800e09a:	492b      	ldr	r1, [pc, #172]	@ (800e148 <__gethex+0x2b0>)
 800e09c:	9303      	str	r3, [sp, #12]
 800e09e:	2201      	movs	r2, #1
 800e0a0:	4630      	mov	r0, r6
 800e0a2:	f7ff fe3f 	bl	800dd24 <strncmp>
 800e0a6:	9b03      	ldr	r3, [sp, #12]
 800e0a8:	2800      	cmp	r0, #0
 800e0aa:	d1e1      	bne.n	800e070 <__gethex+0x1d8>
 800e0ac:	e7a2      	b.n	800dff4 <__gethex+0x15c>
 800e0ae:	1ea9      	subs	r1, r5, #2
 800e0b0:	4620      	mov	r0, r4
 800e0b2:	f7fe fc1f 	bl	800c8f4 <__any_on>
 800e0b6:	2800      	cmp	r0, #0
 800e0b8:	d0c2      	beq.n	800e040 <__gethex+0x1a8>
 800e0ba:	f04f 0903 	mov.w	r9, #3
 800e0be:	e7c1      	b.n	800e044 <__gethex+0x1ac>
 800e0c0:	da09      	bge.n	800e0d6 <__gethex+0x23e>
 800e0c2:	1b75      	subs	r5, r6, r5
 800e0c4:	4621      	mov	r1, r4
 800e0c6:	9801      	ldr	r0, [sp, #4]
 800e0c8:	462a      	mov	r2, r5
 800e0ca:	f7fe f9dd 	bl	800c488 <__lshift>
 800e0ce:	1b7f      	subs	r7, r7, r5
 800e0d0:	4604      	mov	r4, r0
 800e0d2:	f100 0a14 	add.w	sl, r0, #20
 800e0d6:	f04f 0900 	mov.w	r9, #0
 800e0da:	e7b8      	b.n	800e04e <__gethex+0x1b6>
 800e0dc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e0e0:	42bd      	cmp	r5, r7
 800e0e2:	dd6f      	ble.n	800e1c4 <__gethex+0x32c>
 800e0e4:	1bed      	subs	r5, r5, r7
 800e0e6:	42ae      	cmp	r6, r5
 800e0e8:	dc34      	bgt.n	800e154 <__gethex+0x2bc>
 800e0ea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e0ee:	2b02      	cmp	r3, #2
 800e0f0:	d022      	beq.n	800e138 <__gethex+0x2a0>
 800e0f2:	2b03      	cmp	r3, #3
 800e0f4:	d024      	beq.n	800e140 <__gethex+0x2a8>
 800e0f6:	2b01      	cmp	r3, #1
 800e0f8:	d115      	bne.n	800e126 <__gethex+0x28e>
 800e0fa:	42ae      	cmp	r6, r5
 800e0fc:	d113      	bne.n	800e126 <__gethex+0x28e>
 800e0fe:	2e01      	cmp	r6, #1
 800e100:	d10b      	bne.n	800e11a <__gethex+0x282>
 800e102:	9a02      	ldr	r2, [sp, #8]
 800e104:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e108:	6013      	str	r3, [r2, #0]
 800e10a:	2301      	movs	r3, #1
 800e10c:	6123      	str	r3, [r4, #16]
 800e10e:	f8ca 3000 	str.w	r3, [sl]
 800e112:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e114:	2562      	movs	r5, #98	@ 0x62
 800e116:	601c      	str	r4, [r3, #0]
 800e118:	e73a      	b.n	800df90 <__gethex+0xf8>
 800e11a:	1e71      	subs	r1, r6, #1
 800e11c:	4620      	mov	r0, r4
 800e11e:	f7fe fbe9 	bl	800c8f4 <__any_on>
 800e122:	2800      	cmp	r0, #0
 800e124:	d1ed      	bne.n	800e102 <__gethex+0x26a>
 800e126:	9801      	ldr	r0, [sp, #4]
 800e128:	4621      	mov	r1, r4
 800e12a:	f7fd ff95 	bl	800c058 <_Bfree>
 800e12e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e130:	2300      	movs	r3, #0
 800e132:	6013      	str	r3, [r2, #0]
 800e134:	2550      	movs	r5, #80	@ 0x50
 800e136:	e72b      	b.n	800df90 <__gethex+0xf8>
 800e138:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d1f3      	bne.n	800e126 <__gethex+0x28e>
 800e13e:	e7e0      	b.n	800e102 <__gethex+0x26a>
 800e140:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e142:	2b00      	cmp	r3, #0
 800e144:	d1dd      	bne.n	800e102 <__gethex+0x26a>
 800e146:	e7ee      	b.n	800e126 <__gethex+0x28e>
 800e148:	0800e838 	.word	0x0800e838
 800e14c:	0800e6d1 	.word	0x0800e6d1
 800e150:	0800e9aa 	.word	0x0800e9aa
 800e154:	1e6f      	subs	r7, r5, #1
 800e156:	f1b9 0f00 	cmp.w	r9, #0
 800e15a:	d130      	bne.n	800e1be <__gethex+0x326>
 800e15c:	b127      	cbz	r7, 800e168 <__gethex+0x2d0>
 800e15e:	4639      	mov	r1, r7
 800e160:	4620      	mov	r0, r4
 800e162:	f7fe fbc7 	bl	800c8f4 <__any_on>
 800e166:	4681      	mov	r9, r0
 800e168:	117a      	asrs	r2, r7, #5
 800e16a:	2301      	movs	r3, #1
 800e16c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e170:	f007 071f 	and.w	r7, r7, #31
 800e174:	40bb      	lsls	r3, r7
 800e176:	4213      	tst	r3, r2
 800e178:	4629      	mov	r1, r5
 800e17a:	4620      	mov	r0, r4
 800e17c:	bf18      	it	ne
 800e17e:	f049 0902 	orrne.w	r9, r9, #2
 800e182:	f7ff fe21 	bl	800ddc8 <rshift>
 800e186:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e18a:	1b76      	subs	r6, r6, r5
 800e18c:	2502      	movs	r5, #2
 800e18e:	f1b9 0f00 	cmp.w	r9, #0
 800e192:	d047      	beq.n	800e224 <__gethex+0x38c>
 800e194:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e198:	2b02      	cmp	r3, #2
 800e19a:	d015      	beq.n	800e1c8 <__gethex+0x330>
 800e19c:	2b03      	cmp	r3, #3
 800e19e:	d017      	beq.n	800e1d0 <__gethex+0x338>
 800e1a0:	2b01      	cmp	r3, #1
 800e1a2:	d109      	bne.n	800e1b8 <__gethex+0x320>
 800e1a4:	f019 0f02 	tst.w	r9, #2
 800e1a8:	d006      	beq.n	800e1b8 <__gethex+0x320>
 800e1aa:	f8da 3000 	ldr.w	r3, [sl]
 800e1ae:	ea49 0903 	orr.w	r9, r9, r3
 800e1b2:	f019 0f01 	tst.w	r9, #1
 800e1b6:	d10e      	bne.n	800e1d6 <__gethex+0x33e>
 800e1b8:	f045 0510 	orr.w	r5, r5, #16
 800e1bc:	e032      	b.n	800e224 <__gethex+0x38c>
 800e1be:	f04f 0901 	mov.w	r9, #1
 800e1c2:	e7d1      	b.n	800e168 <__gethex+0x2d0>
 800e1c4:	2501      	movs	r5, #1
 800e1c6:	e7e2      	b.n	800e18e <__gethex+0x2f6>
 800e1c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e1ca:	f1c3 0301 	rsb	r3, r3, #1
 800e1ce:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e1d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d0f0      	beq.n	800e1b8 <__gethex+0x320>
 800e1d6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e1da:	f104 0314 	add.w	r3, r4, #20
 800e1de:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e1e2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e1e6:	f04f 0c00 	mov.w	ip, #0
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1f0:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e1f4:	d01b      	beq.n	800e22e <__gethex+0x396>
 800e1f6:	3201      	adds	r2, #1
 800e1f8:	6002      	str	r2, [r0, #0]
 800e1fa:	2d02      	cmp	r5, #2
 800e1fc:	f104 0314 	add.w	r3, r4, #20
 800e200:	d13c      	bne.n	800e27c <__gethex+0x3e4>
 800e202:	f8d8 2000 	ldr.w	r2, [r8]
 800e206:	3a01      	subs	r2, #1
 800e208:	42b2      	cmp	r2, r6
 800e20a:	d109      	bne.n	800e220 <__gethex+0x388>
 800e20c:	1171      	asrs	r1, r6, #5
 800e20e:	2201      	movs	r2, #1
 800e210:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e214:	f006 061f 	and.w	r6, r6, #31
 800e218:	fa02 f606 	lsl.w	r6, r2, r6
 800e21c:	421e      	tst	r6, r3
 800e21e:	d13a      	bne.n	800e296 <__gethex+0x3fe>
 800e220:	f045 0520 	orr.w	r5, r5, #32
 800e224:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e226:	601c      	str	r4, [r3, #0]
 800e228:	9b02      	ldr	r3, [sp, #8]
 800e22a:	601f      	str	r7, [r3, #0]
 800e22c:	e6b0      	b.n	800df90 <__gethex+0xf8>
 800e22e:	4299      	cmp	r1, r3
 800e230:	f843 cc04 	str.w	ip, [r3, #-4]
 800e234:	d8d9      	bhi.n	800e1ea <__gethex+0x352>
 800e236:	68a3      	ldr	r3, [r4, #8]
 800e238:	459b      	cmp	fp, r3
 800e23a:	db17      	blt.n	800e26c <__gethex+0x3d4>
 800e23c:	6861      	ldr	r1, [r4, #4]
 800e23e:	9801      	ldr	r0, [sp, #4]
 800e240:	3101      	adds	r1, #1
 800e242:	f7fd fec9 	bl	800bfd8 <_Balloc>
 800e246:	4681      	mov	r9, r0
 800e248:	b918      	cbnz	r0, 800e252 <__gethex+0x3ba>
 800e24a:	4b1a      	ldr	r3, [pc, #104]	@ (800e2b4 <__gethex+0x41c>)
 800e24c:	4602      	mov	r2, r0
 800e24e:	2184      	movs	r1, #132	@ 0x84
 800e250:	e6c5      	b.n	800dfde <__gethex+0x146>
 800e252:	6922      	ldr	r2, [r4, #16]
 800e254:	3202      	adds	r2, #2
 800e256:	f104 010c 	add.w	r1, r4, #12
 800e25a:	0092      	lsls	r2, r2, #2
 800e25c:	300c      	adds	r0, #12
 800e25e:	f7fd f87c 	bl	800b35a <memcpy>
 800e262:	4621      	mov	r1, r4
 800e264:	9801      	ldr	r0, [sp, #4]
 800e266:	f7fd fef7 	bl	800c058 <_Bfree>
 800e26a:	464c      	mov	r4, r9
 800e26c:	6923      	ldr	r3, [r4, #16]
 800e26e:	1c5a      	adds	r2, r3, #1
 800e270:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e274:	6122      	str	r2, [r4, #16]
 800e276:	2201      	movs	r2, #1
 800e278:	615a      	str	r2, [r3, #20]
 800e27a:	e7be      	b.n	800e1fa <__gethex+0x362>
 800e27c:	6922      	ldr	r2, [r4, #16]
 800e27e:	455a      	cmp	r2, fp
 800e280:	dd0b      	ble.n	800e29a <__gethex+0x402>
 800e282:	2101      	movs	r1, #1
 800e284:	4620      	mov	r0, r4
 800e286:	f7ff fd9f 	bl	800ddc8 <rshift>
 800e28a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e28e:	3701      	adds	r7, #1
 800e290:	42bb      	cmp	r3, r7
 800e292:	f6ff aee0 	blt.w	800e056 <__gethex+0x1be>
 800e296:	2501      	movs	r5, #1
 800e298:	e7c2      	b.n	800e220 <__gethex+0x388>
 800e29a:	f016 061f 	ands.w	r6, r6, #31
 800e29e:	d0fa      	beq.n	800e296 <__gethex+0x3fe>
 800e2a0:	4453      	add	r3, sl
 800e2a2:	f1c6 0620 	rsb	r6, r6, #32
 800e2a6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e2aa:	f7fd ff87 	bl	800c1bc <__hi0bits>
 800e2ae:	42b0      	cmp	r0, r6
 800e2b0:	dbe7      	blt.n	800e282 <__gethex+0x3ea>
 800e2b2:	e7f0      	b.n	800e296 <__gethex+0x3fe>
 800e2b4:	0800e6d1 	.word	0x0800e6d1

0800e2b8 <L_shift>:
 800e2b8:	f1c2 0208 	rsb	r2, r2, #8
 800e2bc:	0092      	lsls	r2, r2, #2
 800e2be:	b570      	push	{r4, r5, r6, lr}
 800e2c0:	f1c2 0620 	rsb	r6, r2, #32
 800e2c4:	6843      	ldr	r3, [r0, #4]
 800e2c6:	6804      	ldr	r4, [r0, #0]
 800e2c8:	fa03 f506 	lsl.w	r5, r3, r6
 800e2cc:	432c      	orrs	r4, r5
 800e2ce:	40d3      	lsrs	r3, r2
 800e2d0:	6004      	str	r4, [r0, #0]
 800e2d2:	f840 3f04 	str.w	r3, [r0, #4]!
 800e2d6:	4288      	cmp	r0, r1
 800e2d8:	d3f4      	bcc.n	800e2c4 <L_shift+0xc>
 800e2da:	bd70      	pop	{r4, r5, r6, pc}

0800e2dc <__match>:
 800e2dc:	b530      	push	{r4, r5, lr}
 800e2de:	6803      	ldr	r3, [r0, #0]
 800e2e0:	3301      	adds	r3, #1
 800e2e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e2e6:	b914      	cbnz	r4, 800e2ee <__match+0x12>
 800e2e8:	6003      	str	r3, [r0, #0]
 800e2ea:	2001      	movs	r0, #1
 800e2ec:	bd30      	pop	{r4, r5, pc}
 800e2ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e2f2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e2f6:	2d19      	cmp	r5, #25
 800e2f8:	bf98      	it	ls
 800e2fa:	3220      	addls	r2, #32
 800e2fc:	42a2      	cmp	r2, r4
 800e2fe:	d0f0      	beq.n	800e2e2 <__match+0x6>
 800e300:	2000      	movs	r0, #0
 800e302:	e7f3      	b.n	800e2ec <__match+0x10>

0800e304 <__hexnan>:
 800e304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e308:	680b      	ldr	r3, [r1, #0]
 800e30a:	6801      	ldr	r1, [r0, #0]
 800e30c:	115e      	asrs	r6, r3, #5
 800e30e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e312:	f013 031f 	ands.w	r3, r3, #31
 800e316:	b087      	sub	sp, #28
 800e318:	bf18      	it	ne
 800e31a:	3604      	addne	r6, #4
 800e31c:	2500      	movs	r5, #0
 800e31e:	1f37      	subs	r7, r6, #4
 800e320:	4682      	mov	sl, r0
 800e322:	4690      	mov	r8, r2
 800e324:	9301      	str	r3, [sp, #4]
 800e326:	f846 5c04 	str.w	r5, [r6, #-4]
 800e32a:	46b9      	mov	r9, r7
 800e32c:	463c      	mov	r4, r7
 800e32e:	9502      	str	r5, [sp, #8]
 800e330:	46ab      	mov	fp, r5
 800e332:	784a      	ldrb	r2, [r1, #1]
 800e334:	1c4b      	adds	r3, r1, #1
 800e336:	9303      	str	r3, [sp, #12]
 800e338:	b342      	cbz	r2, 800e38c <__hexnan+0x88>
 800e33a:	4610      	mov	r0, r2
 800e33c:	9105      	str	r1, [sp, #20]
 800e33e:	9204      	str	r2, [sp, #16]
 800e340:	f7ff fd94 	bl	800de6c <__hexdig_fun>
 800e344:	2800      	cmp	r0, #0
 800e346:	d151      	bne.n	800e3ec <__hexnan+0xe8>
 800e348:	9a04      	ldr	r2, [sp, #16]
 800e34a:	9905      	ldr	r1, [sp, #20]
 800e34c:	2a20      	cmp	r2, #32
 800e34e:	d818      	bhi.n	800e382 <__hexnan+0x7e>
 800e350:	9b02      	ldr	r3, [sp, #8]
 800e352:	459b      	cmp	fp, r3
 800e354:	dd13      	ble.n	800e37e <__hexnan+0x7a>
 800e356:	454c      	cmp	r4, r9
 800e358:	d206      	bcs.n	800e368 <__hexnan+0x64>
 800e35a:	2d07      	cmp	r5, #7
 800e35c:	dc04      	bgt.n	800e368 <__hexnan+0x64>
 800e35e:	462a      	mov	r2, r5
 800e360:	4649      	mov	r1, r9
 800e362:	4620      	mov	r0, r4
 800e364:	f7ff ffa8 	bl	800e2b8 <L_shift>
 800e368:	4544      	cmp	r4, r8
 800e36a:	d952      	bls.n	800e412 <__hexnan+0x10e>
 800e36c:	2300      	movs	r3, #0
 800e36e:	f1a4 0904 	sub.w	r9, r4, #4
 800e372:	f844 3c04 	str.w	r3, [r4, #-4]
 800e376:	f8cd b008 	str.w	fp, [sp, #8]
 800e37a:	464c      	mov	r4, r9
 800e37c:	461d      	mov	r5, r3
 800e37e:	9903      	ldr	r1, [sp, #12]
 800e380:	e7d7      	b.n	800e332 <__hexnan+0x2e>
 800e382:	2a29      	cmp	r2, #41	@ 0x29
 800e384:	d157      	bne.n	800e436 <__hexnan+0x132>
 800e386:	3102      	adds	r1, #2
 800e388:	f8ca 1000 	str.w	r1, [sl]
 800e38c:	f1bb 0f00 	cmp.w	fp, #0
 800e390:	d051      	beq.n	800e436 <__hexnan+0x132>
 800e392:	454c      	cmp	r4, r9
 800e394:	d206      	bcs.n	800e3a4 <__hexnan+0xa0>
 800e396:	2d07      	cmp	r5, #7
 800e398:	dc04      	bgt.n	800e3a4 <__hexnan+0xa0>
 800e39a:	462a      	mov	r2, r5
 800e39c:	4649      	mov	r1, r9
 800e39e:	4620      	mov	r0, r4
 800e3a0:	f7ff ff8a 	bl	800e2b8 <L_shift>
 800e3a4:	4544      	cmp	r4, r8
 800e3a6:	d936      	bls.n	800e416 <__hexnan+0x112>
 800e3a8:	f1a8 0204 	sub.w	r2, r8, #4
 800e3ac:	4623      	mov	r3, r4
 800e3ae:	f853 1b04 	ldr.w	r1, [r3], #4
 800e3b2:	f842 1f04 	str.w	r1, [r2, #4]!
 800e3b6:	429f      	cmp	r7, r3
 800e3b8:	d2f9      	bcs.n	800e3ae <__hexnan+0xaa>
 800e3ba:	1b3b      	subs	r3, r7, r4
 800e3bc:	f023 0303 	bic.w	r3, r3, #3
 800e3c0:	3304      	adds	r3, #4
 800e3c2:	3401      	adds	r4, #1
 800e3c4:	3e03      	subs	r6, #3
 800e3c6:	42b4      	cmp	r4, r6
 800e3c8:	bf88      	it	hi
 800e3ca:	2304      	movhi	r3, #4
 800e3cc:	4443      	add	r3, r8
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	f843 2b04 	str.w	r2, [r3], #4
 800e3d4:	429f      	cmp	r7, r3
 800e3d6:	d2fb      	bcs.n	800e3d0 <__hexnan+0xcc>
 800e3d8:	683b      	ldr	r3, [r7, #0]
 800e3da:	b91b      	cbnz	r3, 800e3e4 <__hexnan+0xe0>
 800e3dc:	4547      	cmp	r7, r8
 800e3de:	d128      	bne.n	800e432 <__hexnan+0x12e>
 800e3e0:	2301      	movs	r3, #1
 800e3e2:	603b      	str	r3, [r7, #0]
 800e3e4:	2005      	movs	r0, #5
 800e3e6:	b007      	add	sp, #28
 800e3e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3ec:	3501      	adds	r5, #1
 800e3ee:	2d08      	cmp	r5, #8
 800e3f0:	f10b 0b01 	add.w	fp, fp, #1
 800e3f4:	dd06      	ble.n	800e404 <__hexnan+0x100>
 800e3f6:	4544      	cmp	r4, r8
 800e3f8:	d9c1      	bls.n	800e37e <__hexnan+0x7a>
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	f844 3c04 	str.w	r3, [r4, #-4]
 800e400:	2501      	movs	r5, #1
 800e402:	3c04      	subs	r4, #4
 800e404:	6822      	ldr	r2, [r4, #0]
 800e406:	f000 000f 	and.w	r0, r0, #15
 800e40a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e40e:	6020      	str	r0, [r4, #0]
 800e410:	e7b5      	b.n	800e37e <__hexnan+0x7a>
 800e412:	2508      	movs	r5, #8
 800e414:	e7b3      	b.n	800e37e <__hexnan+0x7a>
 800e416:	9b01      	ldr	r3, [sp, #4]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d0dd      	beq.n	800e3d8 <__hexnan+0xd4>
 800e41c:	f1c3 0320 	rsb	r3, r3, #32
 800e420:	f04f 32ff 	mov.w	r2, #4294967295
 800e424:	40da      	lsrs	r2, r3
 800e426:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e42a:	4013      	ands	r3, r2
 800e42c:	f846 3c04 	str.w	r3, [r6, #-4]
 800e430:	e7d2      	b.n	800e3d8 <__hexnan+0xd4>
 800e432:	3f04      	subs	r7, #4
 800e434:	e7d0      	b.n	800e3d8 <__hexnan+0xd4>
 800e436:	2004      	movs	r0, #4
 800e438:	e7d5      	b.n	800e3e6 <__hexnan+0xe2>

0800e43a <__ascii_mbtowc>:
 800e43a:	b082      	sub	sp, #8
 800e43c:	b901      	cbnz	r1, 800e440 <__ascii_mbtowc+0x6>
 800e43e:	a901      	add	r1, sp, #4
 800e440:	b142      	cbz	r2, 800e454 <__ascii_mbtowc+0x1a>
 800e442:	b14b      	cbz	r3, 800e458 <__ascii_mbtowc+0x1e>
 800e444:	7813      	ldrb	r3, [r2, #0]
 800e446:	600b      	str	r3, [r1, #0]
 800e448:	7812      	ldrb	r2, [r2, #0]
 800e44a:	1e10      	subs	r0, r2, #0
 800e44c:	bf18      	it	ne
 800e44e:	2001      	movne	r0, #1
 800e450:	b002      	add	sp, #8
 800e452:	4770      	bx	lr
 800e454:	4610      	mov	r0, r2
 800e456:	e7fb      	b.n	800e450 <__ascii_mbtowc+0x16>
 800e458:	f06f 0001 	mvn.w	r0, #1
 800e45c:	e7f8      	b.n	800e450 <__ascii_mbtowc+0x16>

0800e45e <_realloc_r>:
 800e45e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e462:	4680      	mov	r8, r0
 800e464:	4615      	mov	r5, r2
 800e466:	460c      	mov	r4, r1
 800e468:	b921      	cbnz	r1, 800e474 <_realloc_r+0x16>
 800e46a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e46e:	4611      	mov	r1, r2
 800e470:	f7fb bd3e 	b.w	8009ef0 <_malloc_r>
 800e474:	b92a      	cbnz	r2, 800e482 <_realloc_r+0x24>
 800e476:	f7fd fd65 	bl	800bf44 <_free_r>
 800e47a:	2400      	movs	r4, #0
 800e47c:	4620      	mov	r0, r4
 800e47e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e482:	f000 f827 	bl	800e4d4 <_malloc_usable_size_r>
 800e486:	4285      	cmp	r5, r0
 800e488:	4606      	mov	r6, r0
 800e48a:	d802      	bhi.n	800e492 <_realloc_r+0x34>
 800e48c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e490:	d8f4      	bhi.n	800e47c <_realloc_r+0x1e>
 800e492:	4629      	mov	r1, r5
 800e494:	4640      	mov	r0, r8
 800e496:	f7fb fd2b 	bl	8009ef0 <_malloc_r>
 800e49a:	4607      	mov	r7, r0
 800e49c:	2800      	cmp	r0, #0
 800e49e:	d0ec      	beq.n	800e47a <_realloc_r+0x1c>
 800e4a0:	42b5      	cmp	r5, r6
 800e4a2:	462a      	mov	r2, r5
 800e4a4:	4621      	mov	r1, r4
 800e4a6:	bf28      	it	cs
 800e4a8:	4632      	movcs	r2, r6
 800e4aa:	f7fc ff56 	bl	800b35a <memcpy>
 800e4ae:	4621      	mov	r1, r4
 800e4b0:	4640      	mov	r0, r8
 800e4b2:	f7fd fd47 	bl	800bf44 <_free_r>
 800e4b6:	463c      	mov	r4, r7
 800e4b8:	e7e0      	b.n	800e47c <_realloc_r+0x1e>

0800e4ba <__ascii_wctomb>:
 800e4ba:	4603      	mov	r3, r0
 800e4bc:	4608      	mov	r0, r1
 800e4be:	b141      	cbz	r1, 800e4d2 <__ascii_wctomb+0x18>
 800e4c0:	2aff      	cmp	r2, #255	@ 0xff
 800e4c2:	d904      	bls.n	800e4ce <__ascii_wctomb+0x14>
 800e4c4:	228a      	movs	r2, #138	@ 0x8a
 800e4c6:	601a      	str	r2, [r3, #0]
 800e4c8:	f04f 30ff 	mov.w	r0, #4294967295
 800e4cc:	4770      	bx	lr
 800e4ce:	700a      	strb	r2, [r1, #0]
 800e4d0:	2001      	movs	r0, #1
 800e4d2:	4770      	bx	lr

0800e4d4 <_malloc_usable_size_r>:
 800e4d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e4d8:	1f18      	subs	r0, r3, #4
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	bfbc      	itt	lt
 800e4de:	580b      	ldrlt	r3, [r1, r0]
 800e4e0:	18c0      	addlt	r0, r0, r3
 800e4e2:	4770      	bx	lr

0800e4e4 <_init>:
 800e4e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4e6:	bf00      	nop
 800e4e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4ea:	bc08      	pop	{r3}
 800e4ec:	469e      	mov	lr, r3
 800e4ee:	4770      	bx	lr

0800e4f0 <_fini>:
 800e4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4f2:	bf00      	nop
 800e4f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4f6:	bc08      	pop	{r3}
 800e4f8:	469e      	mov	lr, r3
 800e4fa:	4770      	bx	lr
