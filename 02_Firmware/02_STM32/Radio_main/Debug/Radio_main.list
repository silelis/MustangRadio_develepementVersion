
Radio_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013b7c  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000764  08013e30  08013e30  00014e30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014594  08014594  00015594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801459c  0801459c  0001559c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080145a0  080145a0  000155a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001dc  24000000  080145a4  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004da0  240001dc  08014780  000161dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24004f7c  08014780  00016f7c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000161dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00031f17  00000000  00000000  0001620a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005e4d  00000000  00000000  00048121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001e98  00000000  00000000  0004df70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000017ad  00000000  00000000  0004fe08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038517  00000000  00000000  000515b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002d59a  00000000  00000000  00089acc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015213a  00000000  00000000  000b7066  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002091a0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009464  00000000  00000000  002091e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008b  00000000  00000000  00212648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240001dc 	.word	0x240001dc
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08013e14 	.word	0x08013e14

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240001e0 	.word	0x240001e0
 80002ec:	08013e14 	.word	0x08013e14

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <strlen>:
 8000390:	4603      	mov	r3, r0
 8000392:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000396:	2a00      	cmp	r2, #0
 8000398:	d1fb      	bne.n	8000392 <strlen+0x2>
 800039a:	1a18      	subs	r0, r3, r0
 800039c:	3801      	subs	r0, #1
 800039e:	4770      	bx	lr

080003a0 <__aeabi_drsub>:
 80003a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003a4:	e002      	b.n	80003ac <__adddf3>
 80003a6:	bf00      	nop

080003a8 <__aeabi_dsub>:
 80003a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003ac <__adddf3>:
 80003ac:	b530      	push	{r4, r5, lr}
 80003ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003b6:	ea94 0f05 	teq	r4, r5
 80003ba:	bf08      	it	eq
 80003bc:	ea90 0f02 	teqeq	r0, r2
 80003c0:	bf1f      	itttt	ne
 80003c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d2:	f000 80e2 	beq.w	800059a <__adddf3+0x1ee>
 80003d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003de:	bfb8      	it	lt
 80003e0:	426d      	neglt	r5, r5
 80003e2:	dd0c      	ble.n	80003fe <__adddf3+0x52>
 80003e4:	442c      	add	r4, r5
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	ea82 0000 	eor.w	r0, r2, r0
 80003f2:	ea83 0101 	eor.w	r1, r3, r1
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	2d36      	cmp	r5, #54	@ 0x36
 8000400:	bf88      	it	hi
 8000402:	bd30      	pophi	{r4, r5, pc}
 8000404:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000408:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800040c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000410:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000414:	d002      	beq.n	800041c <__adddf3+0x70>
 8000416:	4240      	negs	r0, r0
 8000418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800041c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000420:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000424:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x84>
 800042a:	4252      	negs	r2, r2
 800042c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000430:	ea94 0f05 	teq	r4, r5
 8000434:	f000 80a7 	beq.w	8000586 <__adddf3+0x1da>
 8000438:	f1a4 0401 	sub.w	r4, r4, #1
 800043c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000440:	db0d      	blt.n	800045e <__adddf3+0xb2>
 8000442:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000446:	fa22 f205 	lsr.w	r2, r2, r5
 800044a:	1880      	adds	r0, r0, r2
 800044c:	f141 0100 	adc.w	r1, r1, #0
 8000450:	fa03 f20e 	lsl.w	r2, r3, lr
 8000454:	1880      	adds	r0, r0, r2
 8000456:	fa43 f305 	asr.w	r3, r3, r5
 800045a:	4159      	adcs	r1, r3
 800045c:	e00e      	b.n	800047c <__adddf3+0xd0>
 800045e:	f1a5 0520 	sub.w	r5, r5, #32
 8000462:	f10e 0e20 	add.w	lr, lr, #32
 8000466:	2a01      	cmp	r2, #1
 8000468:	fa03 fc0e 	lsl.w	ip, r3, lr
 800046c:	bf28      	it	cs
 800046e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000472:	fa43 f305 	asr.w	r3, r3, r5
 8000476:	18c0      	adds	r0, r0, r3
 8000478:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000480:	d507      	bpl.n	8000492 <__adddf3+0xe6>
 8000482:	f04f 0e00 	mov.w	lr, #0
 8000486:	f1dc 0c00 	rsbs	ip, ip, #0
 800048a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800048e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000492:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000496:	d31b      	bcc.n	80004d0 <__adddf3+0x124>
 8000498:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800049c:	d30c      	bcc.n	80004b8 <__adddf3+0x10c>
 800049e:	0849      	lsrs	r1, r1, #1
 80004a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004a8:	f104 0401 	add.w	r4, r4, #1
 80004ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004b4:	f080 809a 	bcs.w	80005ec <__adddf3+0x240>
 80004b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004bc:	bf08      	it	eq
 80004be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c2:	f150 0000 	adcs.w	r0, r0, #0
 80004c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ca:	ea41 0105 	orr.w	r1, r1, r5
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d4:	4140      	adcs	r0, r0
 80004d6:	eb41 0101 	adc.w	r1, r1, r1
 80004da:	3c01      	subs	r4, #1
 80004dc:	bf28      	it	cs
 80004de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004e2:	d2e9      	bcs.n	80004b8 <__adddf3+0x10c>
 80004e4:	f091 0f00 	teq	r1, #0
 80004e8:	bf04      	itt	eq
 80004ea:	4601      	moveq	r1, r0
 80004ec:	2000      	moveq	r0, #0
 80004ee:	fab1 f381 	clz	r3, r1
 80004f2:	bf08      	it	eq
 80004f4:	3320      	addeq	r3, #32
 80004f6:	f1a3 030b 	sub.w	r3, r3, #11
 80004fa:	f1b3 0220 	subs.w	r2, r3, #32
 80004fe:	da0c      	bge.n	800051a <__adddf3+0x16e>
 8000500:	320c      	adds	r2, #12
 8000502:	dd08      	ble.n	8000516 <__adddf3+0x16a>
 8000504:	f102 0c14 	add.w	ip, r2, #20
 8000508:	f1c2 020c 	rsb	r2, r2, #12
 800050c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000510:	fa21 f102 	lsr.w	r1, r1, r2
 8000514:	e00c      	b.n	8000530 <__adddf3+0x184>
 8000516:	f102 0214 	add.w	r2, r2, #20
 800051a:	bfd8      	it	le
 800051c:	f1c2 0c20 	rsble	ip, r2, #32
 8000520:	fa01 f102 	lsl.w	r1, r1, r2
 8000524:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000528:	bfdc      	itt	le
 800052a:	ea41 010c 	orrle.w	r1, r1, ip
 800052e:	4090      	lslle	r0, r2
 8000530:	1ae4      	subs	r4, r4, r3
 8000532:	bfa2      	ittt	ge
 8000534:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000538:	4329      	orrge	r1, r5
 800053a:	bd30      	popge	{r4, r5, pc}
 800053c:	ea6f 0404 	mvn.w	r4, r4
 8000540:	3c1f      	subs	r4, #31
 8000542:	da1c      	bge.n	800057e <__adddf3+0x1d2>
 8000544:	340c      	adds	r4, #12
 8000546:	dc0e      	bgt.n	8000566 <__adddf3+0x1ba>
 8000548:	f104 0414 	add.w	r4, r4, #20
 800054c:	f1c4 0220 	rsb	r2, r4, #32
 8000550:	fa20 f004 	lsr.w	r0, r0, r4
 8000554:	fa01 f302 	lsl.w	r3, r1, r2
 8000558:	ea40 0003 	orr.w	r0, r0, r3
 800055c:	fa21 f304 	lsr.w	r3, r1, r4
 8000560:	ea45 0103 	orr.w	r1, r5, r3
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f1c4 040c 	rsb	r4, r4, #12
 800056a:	f1c4 0220 	rsb	r2, r4, #32
 800056e:	fa20 f002 	lsr.w	r0, r0, r2
 8000572:	fa01 f304 	lsl.w	r3, r1, r4
 8000576:	ea40 0003 	orr.w	r0, r0, r3
 800057a:	4629      	mov	r1, r5
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	fa21 f004 	lsr.w	r0, r1, r4
 8000582:	4629      	mov	r1, r5
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f094 0f00 	teq	r4, #0
 800058a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800058e:	bf06      	itte	eq
 8000590:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000594:	3401      	addeq	r4, #1
 8000596:	3d01      	subne	r5, #1
 8000598:	e74e      	b.n	8000438 <__adddf3+0x8c>
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf18      	it	ne
 80005a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a4:	d029      	beq.n	80005fa <__adddf3+0x24e>
 80005a6:	ea94 0f05 	teq	r4, r5
 80005aa:	bf08      	it	eq
 80005ac:	ea90 0f02 	teqeq	r0, r2
 80005b0:	d005      	beq.n	80005be <__adddf3+0x212>
 80005b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005b6:	bf04      	itt	eq
 80005b8:	4619      	moveq	r1, r3
 80005ba:	4610      	moveq	r0, r2
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	ea91 0f03 	teq	r1, r3
 80005c2:	bf1e      	ittt	ne
 80005c4:	2100      	movne	r1, #0
 80005c6:	2000      	movne	r0, #0
 80005c8:	bd30      	popne	{r4, r5, pc}
 80005ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ce:	d105      	bne.n	80005dc <__adddf3+0x230>
 80005d0:	0040      	lsls	r0, r0, #1
 80005d2:	4149      	adcs	r1, r1
 80005d4:	bf28      	it	cs
 80005d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd30      	pop	{r4, r5, pc}
 80005dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005e0:	bf3c      	itt	cc
 80005e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005e6:	bd30      	popcc	{r4, r5, pc}
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005fe:	bf1a      	itte	ne
 8000600:	4619      	movne	r1, r3
 8000602:	4610      	movne	r0, r2
 8000604:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000608:	bf1c      	itt	ne
 800060a:	460b      	movne	r3, r1
 800060c:	4602      	movne	r2, r0
 800060e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000612:	bf06      	itte	eq
 8000614:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000618:	ea91 0f03 	teqeq	r1, r3
 800061c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop

08000624 <__aeabi_ui2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f04f 0500 	mov.w	r5, #0
 800063c:	f04f 0100 	mov.w	r1, #0
 8000640:	e750      	b.n	80004e4 <__adddf3+0x138>
 8000642:	bf00      	nop

08000644 <__aeabi_i2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800065c:	bf48      	it	mi
 800065e:	4240      	negmi	r0, r0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e73e      	b.n	80004e4 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_f2d>:
 8000668:	0042      	lsls	r2, r0, #1
 800066a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800066e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000672:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000676:	bf1f      	itttt	ne
 8000678:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800067c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000680:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000684:	4770      	bxne	lr
 8000686:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800068a:	bf08      	it	eq
 800068c:	4770      	bxeq	lr
 800068e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000692:	bf04      	itt	eq
 8000694:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000698:	4770      	bxeq	lr
 800069a:	b530      	push	{r4, r5, lr}
 800069c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	e71c      	b.n	80004e4 <__adddf3+0x138>
 80006aa:	bf00      	nop

080006ac <__aeabi_ul2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	e00a      	b.n	80006d2 <__aeabi_l2d+0x16>

080006bc <__aeabi_l2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ca:	d502      	bpl.n	80006d2 <__aeabi_l2d+0x16>
 80006cc:	4240      	negs	r0, r0
 80006ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006de:	f43f aed8 	beq.w	8000492 <__adddf3+0xe6>
 80006e2:	f04f 0203 	mov.w	r2, #3
 80006e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ea:	bf18      	it	ne
 80006ec:	3203      	addne	r2, #3
 80006ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f2:	bf18      	it	ne
 80006f4:	3203      	addne	r2, #3
 80006f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fa:	f1c2 0320 	rsb	r3, r2, #32
 80006fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 fe03 	lsl.w	lr, r1, r3
 800070a:	ea40 000e 	orr.w	r0, r0, lr
 800070e:	fa21 f102 	lsr.w	r1, r1, r2
 8000712:	4414      	add	r4, r2
 8000714:	e6bd      	b.n	8000492 <__adddf3+0xe6>
 8000716:	bf00      	nop

08000718 <__aeabi_uldivmod>:
 8000718:	b953      	cbnz	r3, 8000730 <__aeabi_uldivmod+0x18>
 800071a:	b94a      	cbnz	r2, 8000730 <__aeabi_uldivmod+0x18>
 800071c:	2900      	cmp	r1, #0
 800071e:	bf08      	it	eq
 8000720:	2800      	cmpeq	r0, #0
 8000722:	bf1c      	itt	ne
 8000724:	f04f 31ff 	movne.w	r1, #4294967295
 8000728:	f04f 30ff 	movne.w	r0, #4294967295
 800072c:	f000 b9a2 	b.w	8000a74 <__aeabi_idiv0>
 8000730:	f1ad 0c08 	sub.w	ip, sp, #8
 8000734:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000738:	f000 f83e 	bl	80007b8 <__udivmoddi4>
 800073c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000740:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000744:	b004      	add	sp, #16
 8000746:	4770      	bx	lr

08000748 <__aeabi_d2lz>:
 8000748:	b508      	push	{r3, lr}
 800074a:	4602      	mov	r2, r0
 800074c:	460b      	mov	r3, r1
 800074e:	ec43 2b17 	vmov	d7, r2, r3
 8000752:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800075a:	d403      	bmi.n	8000764 <__aeabi_d2lz+0x1c>
 800075c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000760:	f000 b80a 	b.w	8000778 <__aeabi_d2ulz>
 8000764:	eeb1 7b47 	vneg.f64	d7, d7
 8000768:	ec51 0b17 	vmov	r0, r1, d7
 800076c:	f000 f804 	bl	8000778 <__aeabi_d2ulz>
 8000770:	4240      	negs	r0, r0
 8000772:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000776:	bd08      	pop	{r3, pc}

08000778 <__aeabi_d2ulz>:
 8000778:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007a8 <__aeabi_d2ulz+0x30>
 800077c:	ec41 0b17 	vmov	d7, r0, r1
 8000780:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007b0 <__aeabi_d2ulz+0x38>
 8000784:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000788:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800078c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000790:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000794:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000798:	ee16 1a10 	vmov	r1, s12
 800079c:	ee17 0a90 	vmov	r0, s15
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	f3af 8000 	nop.w
 80007a8:	00000000 	.word	0x00000000
 80007ac:	3df00000 	.word	0x3df00000
 80007b0:	00000000 	.word	0x00000000
 80007b4:	41f00000 	.word	0x41f00000

080007b8 <__udivmoddi4>:
 80007b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007bc:	9d08      	ldr	r5, [sp, #32]
 80007be:	460c      	mov	r4, r1
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d14e      	bne.n	8000862 <__udivmoddi4+0xaa>
 80007c4:	4694      	mov	ip, r2
 80007c6:	458c      	cmp	ip, r1
 80007c8:	4686      	mov	lr, r0
 80007ca:	fab2 f282 	clz	r2, r2
 80007ce:	d962      	bls.n	8000896 <__udivmoddi4+0xde>
 80007d0:	b14a      	cbz	r2, 80007e6 <__udivmoddi4+0x2e>
 80007d2:	f1c2 0320 	rsb	r3, r2, #32
 80007d6:	4091      	lsls	r1, r2
 80007d8:	fa20 f303 	lsr.w	r3, r0, r3
 80007dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007e0:	4319      	orrs	r1, r3
 80007e2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007e6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007ea:	fa1f f68c 	uxth.w	r6, ip
 80007ee:	fbb1 f4f7 	udiv	r4, r1, r7
 80007f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007f6:	fb07 1114 	mls	r1, r7, r4, r1
 80007fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007fe:	fb04 f106 	mul.w	r1, r4, r6
 8000802:	4299      	cmp	r1, r3
 8000804:	d90a      	bls.n	800081c <__udivmoddi4+0x64>
 8000806:	eb1c 0303 	adds.w	r3, ip, r3
 800080a:	f104 30ff 	add.w	r0, r4, #4294967295
 800080e:	f080 8112 	bcs.w	8000a36 <__udivmoddi4+0x27e>
 8000812:	4299      	cmp	r1, r3
 8000814:	f240 810f 	bls.w	8000a36 <__udivmoddi4+0x27e>
 8000818:	3c02      	subs	r4, #2
 800081a:	4463      	add	r3, ip
 800081c:	1a59      	subs	r1, r3, r1
 800081e:	fa1f f38e 	uxth.w	r3, lr
 8000822:	fbb1 f0f7 	udiv	r0, r1, r7
 8000826:	fb07 1110 	mls	r1, r7, r0, r1
 800082a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800082e:	fb00 f606 	mul.w	r6, r0, r6
 8000832:	429e      	cmp	r6, r3
 8000834:	d90a      	bls.n	800084c <__udivmoddi4+0x94>
 8000836:	eb1c 0303 	adds.w	r3, ip, r3
 800083a:	f100 31ff 	add.w	r1, r0, #4294967295
 800083e:	f080 80fc 	bcs.w	8000a3a <__udivmoddi4+0x282>
 8000842:	429e      	cmp	r6, r3
 8000844:	f240 80f9 	bls.w	8000a3a <__udivmoddi4+0x282>
 8000848:	4463      	add	r3, ip
 800084a:	3802      	subs	r0, #2
 800084c:	1b9b      	subs	r3, r3, r6
 800084e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000852:	2100      	movs	r1, #0
 8000854:	b11d      	cbz	r5, 800085e <__udivmoddi4+0xa6>
 8000856:	40d3      	lsrs	r3, r2
 8000858:	2200      	movs	r2, #0
 800085a:	e9c5 3200 	strd	r3, r2, [r5]
 800085e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000862:	428b      	cmp	r3, r1
 8000864:	d905      	bls.n	8000872 <__udivmoddi4+0xba>
 8000866:	b10d      	cbz	r5, 800086c <__udivmoddi4+0xb4>
 8000868:	e9c5 0100 	strd	r0, r1, [r5]
 800086c:	2100      	movs	r1, #0
 800086e:	4608      	mov	r0, r1
 8000870:	e7f5      	b.n	800085e <__udivmoddi4+0xa6>
 8000872:	fab3 f183 	clz	r1, r3
 8000876:	2900      	cmp	r1, #0
 8000878:	d146      	bne.n	8000908 <__udivmoddi4+0x150>
 800087a:	42a3      	cmp	r3, r4
 800087c:	d302      	bcc.n	8000884 <__udivmoddi4+0xcc>
 800087e:	4290      	cmp	r0, r2
 8000880:	f0c0 80f0 	bcc.w	8000a64 <__udivmoddi4+0x2ac>
 8000884:	1a86      	subs	r6, r0, r2
 8000886:	eb64 0303 	sbc.w	r3, r4, r3
 800088a:	2001      	movs	r0, #1
 800088c:	2d00      	cmp	r5, #0
 800088e:	d0e6      	beq.n	800085e <__udivmoddi4+0xa6>
 8000890:	e9c5 6300 	strd	r6, r3, [r5]
 8000894:	e7e3      	b.n	800085e <__udivmoddi4+0xa6>
 8000896:	2a00      	cmp	r2, #0
 8000898:	f040 8090 	bne.w	80009bc <__udivmoddi4+0x204>
 800089c:	eba1 040c 	sub.w	r4, r1, ip
 80008a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008a4:	fa1f f78c 	uxth.w	r7, ip
 80008a8:	2101      	movs	r1, #1
 80008aa:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008b2:	fb08 4416 	mls	r4, r8, r6, r4
 80008b6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008ba:	fb07 f006 	mul.w	r0, r7, r6
 80008be:	4298      	cmp	r0, r3
 80008c0:	d908      	bls.n	80008d4 <__udivmoddi4+0x11c>
 80008c2:	eb1c 0303 	adds.w	r3, ip, r3
 80008c6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ca:	d202      	bcs.n	80008d2 <__udivmoddi4+0x11a>
 80008cc:	4298      	cmp	r0, r3
 80008ce:	f200 80cd 	bhi.w	8000a6c <__udivmoddi4+0x2b4>
 80008d2:	4626      	mov	r6, r4
 80008d4:	1a1c      	subs	r4, r3, r0
 80008d6:	fa1f f38e 	uxth.w	r3, lr
 80008da:	fbb4 f0f8 	udiv	r0, r4, r8
 80008de:	fb08 4410 	mls	r4, r8, r0, r4
 80008e2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008e6:	fb00 f707 	mul.w	r7, r0, r7
 80008ea:	429f      	cmp	r7, r3
 80008ec:	d908      	bls.n	8000900 <__udivmoddi4+0x148>
 80008ee:	eb1c 0303 	adds.w	r3, ip, r3
 80008f2:	f100 34ff 	add.w	r4, r0, #4294967295
 80008f6:	d202      	bcs.n	80008fe <__udivmoddi4+0x146>
 80008f8:	429f      	cmp	r7, r3
 80008fa:	f200 80b0 	bhi.w	8000a5e <__udivmoddi4+0x2a6>
 80008fe:	4620      	mov	r0, r4
 8000900:	1bdb      	subs	r3, r3, r7
 8000902:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000906:	e7a5      	b.n	8000854 <__udivmoddi4+0x9c>
 8000908:	f1c1 0620 	rsb	r6, r1, #32
 800090c:	408b      	lsls	r3, r1
 800090e:	fa22 f706 	lsr.w	r7, r2, r6
 8000912:	431f      	orrs	r7, r3
 8000914:	fa20 fc06 	lsr.w	ip, r0, r6
 8000918:	fa04 f301 	lsl.w	r3, r4, r1
 800091c:	ea43 030c 	orr.w	r3, r3, ip
 8000920:	40f4      	lsrs	r4, r6
 8000922:	fa00 f801 	lsl.w	r8, r0, r1
 8000926:	0c38      	lsrs	r0, r7, #16
 8000928:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800092c:	fbb4 fef0 	udiv	lr, r4, r0
 8000930:	fa1f fc87 	uxth.w	ip, r7
 8000934:	fb00 441e 	mls	r4, r0, lr, r4
 8000938:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800093c:	fb0e f90c 	mul.w	r9, lr, ip
 8000940:	45a1      	cmp	r9, r4
 8000942:	fa02 f201 	lsl.w	r2, r2, r1
 8000946:	d90a      	bls.n	800095e <__udivmoddi4+0x1a6>
 8000948:	193c      	adds	r4, r7, r4
 800094a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800094e:	f080 8084 	bcs.w	8000a5a <__udivmoddi4+0x2a2>
 8000952:	45a1      	cmp	r9, r4
 8000954:	f240 8081 	bls.w	8000a5a <__udivmoddi4+0x2a2>
 8000958:	f1ae 0e02 	sub.w	lr, lr, #2
 800095c:	443c      	add	r4, r7
 800095e:	eba4 0409 	sub.w	r4, r4, r9
 8000962:	fa1f f983 	uxth.w	r9, r3
 8000966:	fbb4 f3f0 	udiv	r3, r4, r0
 800096a:	fb00 4413 	mls	r4, r0, r3, r4
 800096e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000972:	fb03 fc0c 	mul.w	ip, r3, ip
 8000976:	45a4      	cmp	ip, r4
 8000978:	d907      	bls.n	800098a <__udivmoddi4+0x1d2>
 800097a:	193c      	adds	r4, r7, r4
 800097c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000980:	d267      	bcs.n	8000a52 <__udivmoddi4+0x29a>
 8000982:	45a4      	cmp	ip, r4
 8000984:	d965      	bls.n	8000a52 <__udivmoddi4+0x29a>
 8000986:	3b02      	subs	r3, #2
 8000988:	443c      	add	r4, r7
 800098a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800098e:	fba0 9302 	umull	r9, r3, r0, r2
 8000992:	eba4 040c 	sub.w	r4, r4, ip
 8000996:	429c      	cmp	r4, r3
 8000998:	46ce      	mov	lr, r9
 800099a:	469c      	mov	ip, r3
 800099c:	d351      	bcc.n	8000a42 <__udivmoddi4+0x28a>
 800099e:	d04e      	beq.n	8000a3e <__udivmoddi4+0x286>
 80009a0:	b155      	cbz	r5, 80009b8 <__udivmoddi4+0x200>
 80009a2:	ebb8 030e 	subs.w	r3, r8, lr
 80009a6:	eb64 040c 	sbc.w	r4, r4, ip
 80009aa:	fa04 f606 	lsl.w	r6, r4, r6
 80009ae:	40cb      	lsrs	r3, r1
 80009b0:	431e      	orrs	r6, r3
 80009b2:	40cc      	lsrs	r4, r1
 80009b4:	e9c5 6400 	strd	r6, r4, [r5]
 80009b8:	2100      	movs	r1, #0
 80009ba:	e750      	b.n	800085e <__udivmoddi4+0xa6>
 80009bc:	f1c2 0320 	rsb	r3, r2, #32
 80009c0:	fa20 f103 	lsr.w	r1, r0, r3
 80009c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009c8:	fa24 f303 	lsr.w	r3, r4, r3
 80009cc:	4094      	lsls	r4, r2
 80009ce:	430c      	orrs	r4, r1
 80009d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009d4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009d8:	fa1f f78c 	uxth.w	r7, ip
 80009dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009e0:	fb08 3110 	mls	r1, r8, r0, r3
 80009e4:	0c23      	lsrs	r3, r4, #16
 80009e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009ea:	fb00 f107 	mul.w	r1, r0, r7
 80009ee:	4299      	cmp	r1, r3
 80009f0:	d908      	bls.n	8000a04 <__udivmoddi4+0x24c>
 80009f2:	eb1c 0303 	adds.w	r3, ip, r3
 80009f6:	f100 36ff 	add.w	r6, r0, #4294967295
 80009fa:	d22c      	bcs.n	8000a56 <__udivmoddi4+0x29e>
 80009fc:	4299      	cmp	r1, r3
 80009fe:	d92a      	bls.n	8000a56 <__udivmoddi4+0x29e>
 8000a00:	3802      	subs	r0, #2
 8000a02:	4463      	add	r3, ip
 8000a04:	1a5b      	subs	r3, r3, r1
 8000a06:	b2a4      	uxth	r4, r4
 8000a08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a14:	fb01 f307 	mul.w	r3, r1, r7
 8000a18:	42a3      	cmp	r3, r4
 8000a1a:	d908      	bls.n	8000a2e <__udivmoddi4+0x276>
 8000a1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a24:	d213      	bcs.n	8000a4e <__udivmoddi4+0x296>
 8000a26:	42a3      	cmp	r3, r4
 8000a28:	d911      	bls.n	8000a4e <__udivmoddi4+0x296>
 8000a2a:	3902      	subs	r1, #2
 8000a2c:	4464      	add	r4, ip
 8000a2e:	1ae4      	subs	r4, r4, r3
 8000a30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a34:	e739      	b.n	80008aa <__udivmoddi4+0xf2>
 8000a36:	4604      	mov	r4, r0
 8000a38:	e6f0      	b.n	800081c <__udivmoddi4+0x64>
 8000a3a:	4608      	mov	r0, r1
 8000a3c:	e706      	b.n	800084c <__udivmoddi4+0x94>
 8000a3e:	45c8      	cmp	r8, r9
 8000a40:	d2ae      	bcs.n	80009a0 <__udivmoddi4+0x1e8>
 8000a42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a4a:	3801      	subs	r0, #1
 8000a4c:	e7a8      	b.n	80009a0 <__udivmoddi4+0x1e8>
 8000a4e:	4631      	mov	r1, r6
 8000a50:	e7ed      	b.n	8000a2e <__udivmoddi4+0x276>
 8000a52:	4603      	mov	r3, r0
 8000a54:	e799      	b.n	800098a <__udivmoddi4+0x1d2>
 8000a56:	4630      	mov	r0, r6
 8000a58:	e7d4      	b.n	8000a04 <__udivmoddi4+0x24c>
 8000a5a:	46d6      	mov	lr, sl
 8000a5c:	e77f      	b.n	800095e <__udivmoddi4+0x1a6>
 8000a5e:	4463      	add	r3, ip
 8000a60:	3802      	subs	r0, #2
 8000a62:	e74d      	b.n	8000900 <__udivmoddi4+0x148>
 8000a64:	4606      	mov	r6, r0
 8000a66:	4623      	mov	r3, r4
 8000a68:	4608      	mov	r0, r1
 8000a6a:	e70f      	b.n	800088c <__udivmoddi4+0xd4>
 8000a6c:	3e02      	subs	r6, #2
 8000a6e:	4463      	add	r3, ip
 8000a70:	e730      	b.n	80008d4 <__udivmoddi4+0x11c>
 8000a72:	bf00      	nop

08000a74 <__aeabi_idiv0>:
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a7e:	4b11      	ldr	r3, [pc, #68]	@ (8000ac4 <MX_DMA_Init+0x4c>)
 8000a80:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000a84:	4a0f      	ldr	r2, [pc, #60]	@ (8000ac4 <MX_DMA_Init+0x4c>)
 8000a86:	f043 0301 	orr.w	r3, r3, #1
 8000a8a:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac4 <MX_DMA_Init+0x4c>)
 8000a90:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000a94:	f003 0301 	and.w	r3, r3, #1
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 6, 0);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2106      	movs	r1, #6
 8000aa0:	200b      	movs	r0, #11
 8000aa2:	f001 fa69 	bl	8001f78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000aa6:	200b      	movs	r0, #11
 8000aa8:	f001 fa80 	bl	8001fac <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 6, 0);
 8000aac:	2200      	movs	r2, #0
 8000aae:	2106      	movs	r1, #6
 8000ab0:	200c      	movs	r0, #12
 8000ab2:	f001 fa61 	bl	8001f78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ab6:	200c      	movs	r0, #12
 8000ab8:	f001 fa78 	bl	8001fac <HAL_NVIC_EnableIRQ>

}
 8000abc:	bf00      	nop
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	58024400 	.word	0x58024400

08000ac8 <_ZN27esp32_i2sComunicationDriverC1EP9i2cMaster>:
 *      Author: dbank
 */

#include "esp32i2sComunicationDriver.h"

esp32_i2sComunicationDriver::esp32_i2sComunicationDriver(i2cMaster* pointer_to_i2cMasterObject) {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	6039      	str	r1, [r7, #0]
 8000ad2:	4a19      	ldr	r2, [pc, #100]	@ (8000b38 <_ZN27esp32_i2sComunicationDriverC1EP9i2cMaster+0x70>)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2215      	movs	r2, #21
 8000adc:	741a      	strb	r2, [r3, #16]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	223c      	movs	r2, #60	@ 0x3c
 8000ae2:	745a      	strb	r2, [r3, #17]
	// TODO Auto-generated constructor stub
		this->pi2cMaster = pointer_to_i2cMasterObject;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	683a      	ldr	r2, [r7, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
		configASSERT(this->esp32IntrrruptRequest_CountingSemaphore = xSemaphoreCreateCounting(this->esp32InterruptRequestCountingSemaphore_MAX, 0));
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	7c1b      	ldrb	r3, [r3, #16]
 8000aee:	2100      	movs	r1, #0
 8000af0:	4618      	mov	r0, r3
 8000af2:	f00b fe60 	bl	800c7b6 <xQueueCreateCountingSemaphore>
 8000af6:	4602      	mov	r2, r0
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	689b      	ldr	r3, [r3, #8]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	bf0c      	ite	eq
 8000b04:	2301      	moveq	r3, #1
 8000b06:	2300      	movne	r3, #0
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d00b      	beq.n	8000b26 <_ZN27esp32_i2sComunicationDriverC1EP9i2cMaster+0x5e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b12:	f383 8811 	msr	BASEPRI, r3
 8000b16:	f3bf 8f6f 	isb	sy
 8000b1a:	f3bf 8f4f 	dsb	sy
 8000b1e:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000b20:	bf00      	nop
 8000b22:	bf00      	nop
 8000b24:	e7fd      	b.n	8000b22 <_ZN27esp32_i2sComunicationDriverC1EP9i2cMaster+0x5a>
		esp32InrerruptRequest_CountingSemaphoreOverflow=pdFALSE;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2200      	movs	r2, #0
 8000b2a:	60da      	str	r2, [r3, #12]
}
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3710      	adds	r7, #16
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	080140e8 	.word	0x080140e8

08000b3c <_ZN27esp32_i2sComunicationDriver4pingEv>:





HAL_StatusTypeDef esp32_i2sComunicationDriver::ping(void){
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef retVal;
	this->i2cMasterSemaphoreTake();
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f000 f898 	bl	8000c7a <_ZN27esp32_i2sComunicationDriver22i2cMasterSemaphoreTakeEv>
	this->pi2cMaster->while_I2C_STATE_READY();
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f000 fb76 	bl	8001240 <_ZN9i2cMaster21while_I2C_STATE_READYEv>
	retVal = this->pi2cMaster->ping(this->esp32i2cSlaveAdress_7bit);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	685a      	ldr	r2, [r3, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	7c5b      	ldrb	r3, [r3, #17]
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4610      	mov	r0, r2
 8000b60:	f000 faf8 	bl	8001154 <_ZN9i2cMaster4pingEt>
 8000b64:	4603      	mov	r3, r0
 8000b66:	73fb      	strb	r3, [r7, #15]
	this->i2cMasterSemaphoreGive();
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f000 f894 	bl	8000c96 <_ZN27esp32_i2sComunicationDriver22i2cMasterSemaphoreGiveEv>
	return retVal;
 8000b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3710      	adds	r7, #16
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <_ZN27esp32_i2sComunicationDriver42incrementInterruptRequestCountingSemaphoreEv>:

void esp32_i2sComunicationDriver::incrementInterruptRequestCountingSemaphore(void){
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000b80:	2300      	movs	r3, #0
 8000b82:	60fb      	str	r3, [r7, #12]
	xSemaphoreGiveFromISR(this->esp32IntrrruptRequest_CountingSemaphore, &xHigherPriorityTaskWoken);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	689b      	ldr	r3, [r3, #8]
 8000b88:	f107 020c 	add.w	r2, r7, #12
 8000b8c:	4611      	mov	r1, r2
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f00b ffe6 	bl	800cb60 <xQueueGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d007      	beq.n	8000baa <_ZN27esp32_i2sComunicationDriver42incrementInterruptRequestCountingSemaphoreEv+0x32>
 8000b9a:	4b06      	ldr	r3, [pc, #24]	@ (8000bb4 <_ZN27esp32_i2sComunicationDriver42incrementInterruptRequestCountingSemaphoreEv+0x3c>)
 8000b9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	f3bf 8f4f 	dsb	sy
 8000ba6:	f3bf 8f6f 	isb	sy
}
 8000baa:	bf00      	nop
 8000bac:	3710      	adds	r7, #16
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	e000ed04 	.word	0xe000ed04

08000bb8 <_ZN27esp32_i2sComunicationDriver24get_i2cSlaveAddress_7bitEv>:

uint8_t esp32_i2sComunicationDriver::get_i2cSlaveAddress_7bit(void){
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
	return this->esp32i2cSlaveAdress_7bit;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	7c5b      	ldrb	r3, [r3, #17]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <_ZN27esp32_i2sComunicationDriverD1Ev>:

esp32_i2sComunicationDriver::~esp32_i2sComunicationDriver() {
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	4a04      	ldr	r2, [pc, #16]	@ (8000bec <_ZN27esp32_i2sComunicationDriverD1Ev+0x1c>)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
	#warning zrobic porzadny destruktor
}
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4618      	mov	r0, r3
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	080140e8 	.word	0x080140e8

08000bf0 <_ZN27esp32_i2sComunicationDriverD0Ev>:
esp32_i2sComunicationDriver::~esp32_i2sComunicationDriver() {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
}
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f7ff ffe9 	bl	8000bd0 <_ZN27esp32_i2sComunicationDriverD1Ev>
 8000bfe:	2114      	movs	r1, #20
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	f00e fd95 	bl	800f730 <_ZdlPvj>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <_ZN27esp32_i2sComunicationDriver29isCountingSemaphoreOverflowedEv>:

void esp32_i2sComunicationDriver::isCountingSemaphoreOverflowed(void){
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
	if( uxSemaphoreGetCount(this->esp32IntrrruptRequest_CountingSemaphore)== this->esp32InterruptRequestCountingSemaphore_MAX){		//sprawdza czy licznik esp32 interrupt request nie jest przepełniony
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	689b      	ldr	r3, [r3, #8]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f00c fa21 	bl	800d064 <uxQueueMessagesWaiting>
 8000c22:	4602      	mov	r2, r0
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	7c1b      	ldrb	r3, [r3, #16]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	bf0c      	ite	eq
 8000c2c:	2301      	moveq	r3, #1
 8000c2e:	2300      	movne	r3, #0
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d005      	beq.n	8000c42 <_ZN27esp32_i2sComunicationDriver29isCountingSemaphoreOverflowedEv+0x32>
		this->esp32InrerruptRequest_CountingSemaphoreOverflow= pdTRUE;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2201      	movs	r2, #1
 8000c3a:	60da      	str	r2, [r3, #12]
		printf("!!! ESP32 interrupt request counter overflowed   !!!\r\n");
 8000c3c:	4803      	ldr	r0, [pc, #12]	@ (8000c4c <_ZN27esp32_i2sComunicationDriver29isCountingSemaphoreOverflowedEv+0x3c>)
 8000c3e:	f00f fdfb 	bl	8010838 <puts>
	}
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	08013e30 	.word	0x08013e30

08000c50 <_ZN27esp32_i2sComunicationDriver32semaphoreTake__CountingSemaphoreEv>:

BaseType_t esp32_i2sComunicationDriver::semaphoreTake__CountingSemaphore(void){
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
	return xSemaphoreTake(this->esp32IntrrruptRequest_CountingSemaphore, portMAX_DELAY) == pdTRUE;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	689b      	ldr	r3, [r3, #8]
 8000c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c60:	4618      	mov	r0, r3
 8000c62:	f00c f8ef 	bl	800ce44 <xQueueSemaphoreTake>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	bf0c      	ite	eq
 8000c6c:	2301      	moveq	r3, #1
 8000c6e:	2300      	movne	r3, #0
 8000c70:	b2db      	uxtb	r3, r3
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <_ZN27esp32_i2sComunicationDriver22i2cMasterSemaphoreTakeEv>:
	//this->pi2cMaster->i2cMasterSemaphoreGive();

}


BaseType_t esp32_i2sComunicationDriver::i2cMasterSemaphoreTake(void){
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b082      	sub	sp, #8
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
	return this->pi2cMaster->i2cMasterSemaphoreTake();
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f000 fa44 	bl	8001114 <_ZN9i2cMaster22i2cMasterSemaphoreTakeEv>
 8000c8c:	4603      	mov	r3, r0

}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <_ZN27esp32_i2sComunicationDriver22i2cMasterSemaphoreGiveEv>:
BaseType_t esp32_i2sComunicationDriver::i2cMasterSemaphoreGive(void){
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b082      	sub	sp, #8
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
	return this->pi2cMaster->i2cMasterSemaphoreGive();
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f000 fa46 	bl	8001134 <_ZN9i2cMaster22i2cMasterSemaphoreGiveEv>
 8000ca8:	4603      	mov	r3, r0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <PreSleepProcessing>:

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	b083      	sub	sp, #12
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8000cba:	bf00      	nop
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	b083      	sub	sp, #12
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
	...

08000cdc <_Z16MX_FREERTOS_Initv>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000ce0:	4a04      	ldr	r2, [pc, #16]	@ (8000cf4 <_Z16MX_FREERTOS_Initv+0x18>)
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	4804      	ldr	r0, [pc, #16]	@ (8000cf8 <_Z16MX_FREERTOS_Initv+0x1c>)
 8000ce6:	f00b fa8b 	bl	800c200 <osThreadNew>
 8000cea:	4603      	mov	r3, r0
 8000cec:	4a03      	ldr	r2, [pc, #12]	@ (8000cfc <_Z16MX_FREERTOS_Initv+0x20>)
 8000cee:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000cf0:	bf00      	nop
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	080140f0 	.word	0x080140f0
 8000cf8:	08000d01 	.word	0x08000d01
 8000cfc:	240001f8 	.word	0x240001f8

08000d00 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d08:	2001      	movs	r0, #1
 8000d0a:	f00b fb0b 	bl	800c324 <osDelay>
 8000d0e:	e7fb      	b.n	8000d08 <_Z16StartDefaultTaskPv+0x8>

08000d10 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d16:	f107 030c 	add.w	r3, r7, #12
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
 8000d22:	60da      	str	r2, [r3, #12]
 8000d24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d26:	4b1b      	ldr	r3, [pc, #108]	@ (8000d94 <MX_GPIO_Init+0x84>)
 8000d28:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d2c:	4a19      	ldr	r2, [pc, #100]	@ (8000d94 <MX_GPIO_Init+0x84>)
 8000d2e:	f043 0302 	orr.w	r3, r3, #2
 8000d32:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000d36:	4b17      	ldr	r3, [pc, #92]	@ (8000d94 <MX_GPIO_Init+0x84>)
 8000d38:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d3c:	f003 0302 	and.w	r3, r3, #2
 8000d40:	60bb      	str	r3, [r7, #8]
 8000d42:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d44:	4b13      	ldr	r3, [pc, #76]	@ (8000d94 <MX_GPIO_Init+0x84>)
 8000d46:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d4a:	4a12      	ldr	r2, [pc, #72]	@ (8000d94 <MX_GPIO_Init+0x84>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000d54:	4b0f      	ldr	r3, [pc, #60]	@ (8000d94 <MX_GPIO_Init+0x84>)
 8000d56:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = esp32i2cInterruptReqest_Pin;
 8000d62:	2320      	movs	r3, #32
 8000d64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d66:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(esp32i2cInterruptReqest_GPIO_Port, &GPIO_InitStruct);
 8000d70:	f107 030c 	add.w	r3, r7, #12
 8000d74:	4619      	mov	r1, r3
 8000d76:	4808      	ldr	r0, [pc, #32]	@ (8000d98 <MX_GPIO_Init+0x88>)
 8000d78:	f003 ff9a 	bl	8004cb0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2105      	movs	r1, #5
 8000d80:	2017      	movs	r0, #23
 8000d82:	f001 f8f9 	bl	8001f78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d86:	2017      	movs	r0, #23
 8000d88:	f001 f910 	bl	8001fac <HAL_NVIC_EnableIRQ>

}
 8000d8c:	bf00      	nop
 8000d8e:	3720      	adds	r7, #32
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	58024400 	.word	0x58024400
 8000d98:	58020400 	.word	0x58020400

08000d9c <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000da0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e10 <MX_I2C1_Init+0x74>)
 8000da2:	4a1c      	ldr	r2, [pc, #112]	@ (8000e14 <MX_I2C1_Init+0x78>)
 8000da4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B0CCFF;
 8000da6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e10 <MX_I2C1_Init+0x74>)
 8000da8:	4a1b      	ldr	r2, [pc, #108]	@ (8000e18 <MX_I2C1_Init+0x7c>)
 8000daa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000dac:	4b18      	ldr	r3, [pc, #96]	@ (8000e10 <MX_I2C1_Init+0x74>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000db2:	4b17      	ldr	r3, [pc, #92]	@ (8000e10 <MX_I2C1_Init+0x74>)
 8000db4:	2201      	movs	r2, #1
 8000db6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000db8:	4b15      	ldr	r3, [pc, #84]	@ (8000e10 <MX_I2C1_Init+0x74>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000dbe:	4b14      	ldr	r3, [pc, #80]	@ (8000e10 <MX_I2C1_Init+0x74>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000dc4:	4b12      	ldr	r3, [pc, #72]	@ (8000e10 <MX_I2C1_Init+0x74>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dca:	4b11      	ldr	r3, [pc, #68]	@ (8000e10 <MX_I2C1_Init+0x74>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8000dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e10 <MX_I2C1_Init+0x74>)
 8000dd2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000dd6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dd8:	480d      	ldr	r0, [pc, #52]	@ (8000e10 <MX_I2C1_Init+0x74>)
 8000dda:	f004 fa3d 	bl	8005258 <HAL_I2C_Init>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000de4:	f000 fb6c 	bl	80014c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000de8:	2100      	movs	r1, #0
 8000dea:	4809      	ldr	r0, [pc, #36]	@ (8000e10 <MX_I2C1_Init+0x74>)
 8000dec:	f006 fd8c 	bl	8007908 <HAL_I2CEx_ConfigAnalogFilter>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000df6:	f000 fb63 	bl	80014c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	4804      	ldr	r0, [pc, #16]	@ (8000e10 <MX_I2C1_Init+0x74>)
 8000dfe:	f006 fdce 	bl	800799e <HAL_I2CEx_ConfigDigitalFilter>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000e08:	f000 fb5a 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e0c:	bf00      	nop
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	240001fc 	.word	0x240001fc
 8000e14:	40005400 	.word	0x40005400
 8000e18:	20b0ccff 	.word	0x20b0ccff

08000e1c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b0ba      	sub	sp, #232	@ 0xe8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e24:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e34:	f107 0310 	add.w	r3, r7, #16
 8000e38:	22c0      	movs	r2, #192	@ 0xc0
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f00f fdfb 	bl	8010a38 <memset>
  if(i2cHandle->Instance==I2C1)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a5c      	ldr	r2, [pc, #368]	@ (8000fb8 <HAL_I2C_MspInit+0x19c>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	f040 80b1 	bne.w	8000fb0 <HAL_I2C_MspInit+0x194>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e4e:	f04f 0208 	mov.w	r2, #8
 8000e52:	f04f 0300 	mov.w	r3, #0
 8000e56:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e60:	f107 0310 	add.w	r3, r7, #16
 8000e64:	4618      	mov	r0, r3
 8000e66:	f007 fe21 	bl	8008aac <HAL_RCCEx_PeriphCLKConfig>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8000e70:	f000 fb26 	bl	80014c0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e74:	4b51      	ldr	r3, [pc, #324]	@ (8000fbc <HAL_I2C_MspInit+0x1a0>)
 8000e76:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e7a:	4a50      	ldr	r2, [pc, #320]	@ (8000fbc <HAL_I2C_MspInit+0x1a0>)
 8000e7c:	f043 0302 	orr.w	r3, r3, #2
 8000e80:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000e84:	4b4d      	ldr	r3, [pc, #308]	@ (8000fbc <HAL_I2C_MspInit+0x1a0>)
 8000e86:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e8a:	f003 0302 	and.w	r3, r3, #2
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e92:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e9a:	2312      	movs	r3, #18
 8000e9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000eac:	2304      	movs	r3, #4
 8000eae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4841      	ldr	r0, [pc, #260]	@ (8000fc0 <HAL_I2C_MspInit+0x1a4>)
 8000eba:	f003 fef9 	bl	8004cb0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ebe:	4b3f      	ldr	r3, [pc, #252]	@ (8000fbc <HAL_I2C_MspInit+0x1a0>)
 8000ec0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000ec4:	4a3d      	ldr	r2, [pc, #244]	@ (8000fbc <HAL_I2C_MspInit+0x1a0>)
 8000ec6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000eca:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000ece:	4b3b      	ldr	r3, [pc, #236]	@ (8000fbc <HAL_I2C_MspInit+0x1a0>)
 8000ed0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000ed4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ed8:	60bb      	str	r3, [r7, #8]
 8000eda:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8000edc:	4b39      	ldr	r3, [pc, #228]	@ (8000fc4 <HAL_I2C_MspInit+0x1a8>)
 8000ede:	4a3a      	ldr	r2, [pc, #232]	@ (8000fc8 <HAL_I2C_MspInit+0x1ac>)
 8000ee0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8000ee2:	4b38      	ldr	r3, [pc, #224]	@ (8000fc4 <HAL_I2C_MspInit+0x1a8>)
 8000ee4:	2221      	movs	r2, #33	@ 0x21
 8000ee6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ee8:	4b36      	ldr	r3, [pc, #216]	@ (8000fc4 <HAL_I2C_MspInit+0x1a8>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eee:	4b35      	ldr	r3, [pc, #212]	@ (8000fc4 <HAL_I2C_MspInit+0x1a8>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ef4:	4b33      	ldr	r3, [pc, #204]	@ (8000fc4 <HAL_I2C_MspInit+0x1a8>)
 8000ef6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000efa:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000efc:	4b31      	ldr	r3, [pc, #196]	@ (8000fc4 <HAL_I2C_MspInit+0x1a8>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f02:	4b30      	ldr	r3, [pc, #192]	@ (8000fc4 <HAL_I2C_MspInit+0x1a8>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000f08:	4b2e      	ldr	r3, [pc, #184]	@ (8000fc4 <HAL_I2C_MspInit+0x1a8>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f0e:	4b2d      	ldr	r3, [pc, #180]	@ (8000fc4 <HAL_I2C_MspInit+0x1a8>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f14:	4b2b      	ldr	r3, [pc, #172]	@ (8000fc4 <HAL_I2C_MspInit+0x1a8>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000f1a:	482a      	ldr	r0, [pc, #168]	@ (8000fc4 <HAL_I2C_MspInit+0x1a8>)
 8000f1c:	f001 f862 	bl	8001fe4 <HAL_DMA_Init>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8000f26:	f000 facb 	bl	80014c0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a25      	ldr	r2, [pc, #148]	@ (8000fc4 <HAL_I2C_MspInit+0x1a8>)
 8000f2e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f30:	4a24      	ldr	r2, [pc, #144]	@ (8000fc4 <HAL_I2C_MspInit+0x1a8>)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8000f36:	4b25      	ldr	r3, [pc, #148]	@ (8000fcc <HAL_I2C_MspInit+0x1b0>)
 8000f38:	4a25      	ldr	r2, [pc, #148]	@ (8000fd0 <HAL_I2C_MspInit+0x1b4>)
 8000f3a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8000f3c:	4b23      	ldr	r3, [pc, #140]	@ (8000fcc <HAL_I2C_MspInit+0x1b0>)
 8000f3e:	2222      	movs	r2, #34	@ 0x22
 8000f40:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f42:	4b22      	ldr	r3, [pc, #136]	@ (8000fcc <HAL_I2C_MspInit+0x1b0>)
 8000f44:	2240      	movs	r2, #64	@ 0x40
 8000f46:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f48:	4b20      	ldr	r3, [pc, #128]	@ (8000fcc <HAL_I2C_MspInit+0x1b0>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f4e:	4b1f      	ldr	r3, [pc, #124]	@ (8000fcc <HAL_I2C_MspInit+0x1b0>)
 8000f50:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f54:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f56:	4b1d      	ldr	r3, [pc, #116]	@ (8000fcc <HAL_I2C_MspInit+0x1b0>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fcc <HAL_I2C_MspInit+0x1b0>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000f62:	4b1a      	ldr	r3, [pc, #104]	@ (8000fcc <HAL_I2C_MspInit+0x1b0>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f68:	4b18      	ldr	r3, [pc, #96]	@ (8000fcc <HAL_I2C_MspInit+0x1b0>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f6e:	4b17      	ldr	r3, [pc, #92]	@ (8000fcc <HAL_I2C_MspInit+0x1b0>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000f74:	4815      	ldr	r0, [pc, #84]	@ (8000fcc <HAL_I2C_MspInit+0x1b0>)
 8000f76:	f001 f835 	bl	8001fe4 <HAL_DMA_Init>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <HAL_I2C_MspInit+0x168>
    {
      Error_Handler();
 8000f80:	f000 fa9e 	bl	80014c0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4a11      	ldr	r2, [pc, #68]	@ (8000fcc <HAL_I2C_MspInit+0x1b0>)
 8000f88:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f8a:	4a10      	ldr	r2, [pc, #64]	@ (8000fcc <HAL_I2C_MspInit+0x1b0>)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000f90:	2200      	movs	r2, #0
 8000f92:	2105      	movs	r1, #5
 8000f94:	201f      	movs	r0, #31
 8000f96:	f000 ffef 	bl	8001f78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000f9a:	201f      	movs	r0, #31
 8000f9c:	f001 f806 	bl	8001fac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2105      	movs	r1, #5
 8000fa4:	2020      	movs	r0, #32
 8000fa6:	f000 ffe7 	bl	8001f78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000faa:	2020      	movs	r0, #32
 8000fac:	f000 fffe 	bl	8001fac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000fb0:	bf00      	nop
 8000fb2:	37e8      	adds	r7, #232	@ 0xe8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40005400 	.word	0x40005400
 8000fbc:	58024400 	.word	0x58024400
 8000fc0:	58020400 	.word	0x58020400
 8000fc4:	24000250 	.word	0x24000250
 8000fc8:	40020010 	.word	0x40020010
 8000fcc:	240002c8 	.word	0x240002c8
 8000fd0:	40020028 	.word	0x40020028

08000fd4 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a14      	ldr	r2, [pc, #80]	@ (8001034 <HAL_I2C_MspDeInit+0x60>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d121      	bne.n	800102a <HAL_I2C_MspDeInit+0x56>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000fe6:	4b14      	ldr	r3, [pc, #80]	@ (8001038 <HAL_I2C_MspDeInit+0x64>)
 8000fe8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000fec:	4a12      	ldr	r2, [pc, #72]	@ (8001038 <HAL_I2C_MspDeInit+0x64>)
 8000fee:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000ff2:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8000ff6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ffa:	4810      	ldr	r0, [pc, #64]	@ (800103c <HAL_I2C_MspDeInit+0x68>)
 8000ffc:	f004 f808 	bl	8005010 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8001000:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001004:	480d      	ldr	r0, [pc, #52]	@ (800103c <HAL_I2C_MspDeInit+0x68>)
 8001006:	f004 f803 	bl	8005010 <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(i2cHandle->hdmarx);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800100e:	4618      	mov	r0, r3
 8001010:	f001 fb76 	bl	8002700 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(i2cHandle->hdmatx);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001018:	4618      	mov	r0, r3
 800101a:	f001 fb71 	bl	8002700 <HAL_DMA_DeInit>

    /* I2C1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 800101e:	201f      	movs	r0, #31
 8001020:	f000 ffd2 	bl	8001fc8 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8001024:	2020      	movs	r0, #32
 8001026:	f000 ffcf 	bl	8001fc8 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40005400 	.word	0x40005400
 8001038:	58024400 	.word	0x58024400
 800103c:	58020400 	.word	0x58020400

08001040 <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef>:
 *      Author: dbank
 */

#include <i2cEngine.h>

i2cMaster::i2cMaster(I2C_HandleTypeDef *hi2c1) {
 8001040:	b590      	push	{r4, r7, lr}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
 800104a:	4a2c      	ldr	r2, [pc, #176]	@ (80010fc <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef+0xbc>)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4a2b      	ldr	r2, [pc, #172]	@ (8001100 <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef+0xc0>)
 8001054:	60da      	str	r2, [r3, #12]
	// TODO Auto-generated constructor stub
	this->p_hi2c1 =hi2c1;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	683a      	ldr	r2, [r7, #0]
 800105a:	609a      	str	r2, [r3, #8]
	this->pReceiveQueueObject = NULL;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2200      	movs	r2, #0
 8001060:	605a      	str	r2, [r3, #4]
	configASSERT(this->pReceiveQueueObject = new i2cQueue4DynamicData(DEFAULT_RECEIVE_QUEUE_SIZE));
 8001062:	2004      	movs	r0, #4
 8001064:	f00e fb68 	bl	800f738 <_Znwj>
 8001068:	4603      	mov	r3, r0
 800106a:	461c      	mov	r4, r3
 800106c:	2119      	movs	r1, #25
 800106e:	4620      	mov	r0, r4
 8001070:	f000 f918 	bl	80012a4 <_ZN20i2cQueue4DynamicDataC1Em>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	605c      	str	r4, [r3, #4]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	2b00      	cmp	r3, #0
 800107e:	bf0c      	ite	eq
 8001080:	2301      	moveq	r3, #1
 8001082:	2300      	movne	r3, #0
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b00      	cmp	r3, #0
 8001088:	d00b      	beq.n	80010a2 <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef+0x62>
	__asm volatile
 800108a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800108e:	f383 8811 	msr	BASEPRI, r3
 8001092:	f3bf 8f6f 	isb	sy
 8001096:	f3bf 8f4f 	dsb	sy
 800109a:	60fb      	str	r3, [r7, #12]
}
 800109c:	bf00      	nop
 800109e:	bf00      	nop
 80010a0:	e7fd      	b.n	800109e <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef+0x5e>

//	this->esp32InterruptCounterOverflow =pdFALSE;		//reset interrupt counter overflow indicator
	assert(this->handle_i2cBinarySemaphore = xSemaphoreCreateBinary());
 80010a2:	2203      	movs	r2, #3
 80010a4:	2100      	movs	r1, #0
 80010a6:	2001      	movs	r0, #1
 80010a8:	f00b fb27 	bl	800c6fa <xQueueGenericCreate>
 80010ac:	4602      	mov	r2, r0
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	611a      	str	r2, [r3, #16]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	691b      	ldr	r3, [r3, #16]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d105      	bne.n	80010c6 <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef+0x86>
 80010ba:	4b12      	ldr	r3, [pc, #72]	@ (8001104 <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef+0xc4>)
 80010bc:	4a12      	ldr	r2, [pc, #72]	@ (8001108 <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef+0xc8>)
 80010be:	2111      	movs	r1, #17
 80010c0:	4812      	ldr	r0, [pc, #72]	@ (800110c <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef+0xcc>)
 80010c2:	f00e fb5f 	bl	800f784 <__assert_func>
	this->i2cMasterSemaphoreGive();
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f000 f834 	bl	8001134 <_ZN9i2cMaster22i2cMasterSemaphoreGiveEv>
	this->i2cMasterSemaphoreTake();
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f000 f821 	bl	8001114 <_ZN9i2cMaster22i2cMasterSemaphoreTakeEv>
	HAL_I2C_DeInit(p_hi2c1);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f004 f95a 	bl	8005390 <HAL_I2C_DeInit>
	MX_I2C1_Init();
 80010dc:	f7ff fe5e 	bl	8000d9c <MX_I2C1_Init>
	//vTaskDelay(pdMS_TO_TICKS(1000));
	printf("%s bus had been initialized.\r\n",this->TAG);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	4619      	mov	r1, r3
 80010e6:	480a      	ldr	r0, [pc, #40]	@ (8001110 <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef+0xd0>)
 80010e8:	f00f fb3e 	bl	8010768 <iprintf>
	this->i2cMasterSemaphoreGive();
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f000 f821 	bl	8001134 <_ZN9i2cMaster22i2cMasterSemaphoreGiveEv>
}
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4618      	mov	r0, r3
 80010f6:	3714      	adds	r7, #20
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd90      	pop	{r4, r7, pc}
 80010fc:	0801411c 	.word	0x0801411c
 8001100:	08013e74 	.word	0x08013e74
 8001104:	08013e84 	.word	0x08013e84
 8001108:	08013ec0 	.word	0x08013ec0
 800110c:	08013eec 	.word	0x08013eec
 8001110:	08013f08 	.word	0x08013f08

08001114 <_ZN9i2cMaster22i2cMasterSemaphoreTakeEv>:

BaseType_t i2cMaster::i2cMasterSemaphoreTake(void){
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	return xSemaphoreTake(this->handle_i2cBinarySemaphore, portMAX_DELAY);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	691b      	ldr	r3, [r3, #16]
 8001120:	f04f 31ff 	mov.w	r1, #4294967295
 8001124:	4618      	mov	r0, r3
 8001126:	f00b fe8d 	bl	800ce44 <xQueueSemaphoreTake>
 800112a:	4603      	mov	r3, r0
}
 800112c:	4618      	mov	r0, r3
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <_ZN9i2cMaster22i2cMasterSemaphoreGiveEv>:

BaseType_t i2cMaster::i2cMasterSemaphoreGive(void){
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
	return xSemaphoreGive(this->handle_i2cBinarySemaphore);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6918      	ldr	r0, [r3, #16]
 8001140:	2300      	movs	r3, #0
 8001142:	2200      	movs	r2, #0
 8001144:	2100      	movs	r1, #0
 8001146:	f00b fb6b 	bl	800c820 <xQueueGenericSend>
 800114a:	4603      	mov	r3, r0
}
 800114c:	4618      	mov	r0, r3
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <_ZN9i2cMaster4pingEt>:

HAL_StatusTypeDef i2cMaster::ping(uint16_t DevAddress_7bit){
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	460b      	mov	r3, r1
 800115e:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef retVal;
	//this->while_I2C_STATE_READY();
	//this->i2cMasterSemaphoreTake();
	retVal = HAL_I2C_IsDeviceReady(this->p_hi2c1, DevAddress_7bit<<1, 100, 1000);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6898      	ldr	r0, [r3, #8]
 8001164:	887b      	ldrh	r3, [r7, #2]
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	b299      	uxth	r1, r3
 800116a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800116e:	2264      	movs	r2, #100	@ 0x64
 8001170:	f004 fa2e 	bl	80055d0 <HAL_I2C_IsDeviceReady>
 8001174:	4603      	mov	r3, r0
 8001176:	73fb      	strb	r3, [r7, #15]
	//this->i2cMasterSemaphoreGive();
	if(retVal==HAL_OK){
 8001178:	7bfb      	ldrb	r3, [r7, #15]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d108      	bne.n	8001190 <_ZN9i2cMaster4pingEt+0x3c>
			printf("%s i2c slave avaliable on address: 0x%x (7bit).\r\n", this->TAG, DevAddress_7bit<<1);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	68d9      	ldr	r1, [r3, #12]
 8001182:	887b      	ldrh	r3, [r7, #2]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	461a      	mov	r2, r3
 8001188:	480b      	ldr	r0, [pc, #44]	@ (80011b8 <_ZN9i2cMaster4pingEt+0x64>)
 800118a:	f00f faed 	bl	8010768 <iprintf>
 800118e:	e00d      	b.n	80011ac <_ZN9i2cMaster4pingEt+0x58>
	}
	else{
		printf("%s i2c slave NOT avaliable on address: 0x%x (7bit).\r\n", this->TAG, DevAddress_7bit<<1);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	68d9      	ldr	r1, [r3, #12]
 8001194:	887b      	ldrh	r3, [r7, #2]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	461a      	mov	r2, r3
 800119a:	4808      	ldr	r0, [pc, #32]	@ (80011bc <_ZN9i2cMaster4pingEt+0x68>)
 800119c:	f00f fae4 	bl	8010768 <iprintf>
		assert(0);
 80011a0:	4b07      	ldr	r3, [pc, #28]	@ (80011c0 <_ZN9i2cMaster4pingEt+0x6c>)
 80011a2:	4a08      	ldr	r2, [pc, #32]	@ (80011c4 <_ZN9i2cMaster4pingEt+0x70>)
 80011a4:	212e      	movs	r1, #46	@ 0x2e
 80011a6:	4808      	ldr	r0, [pc, #32]	@ (80011c8 <_ZN9i2cMaster4pingEt+0x74>)
 80011a8:	f00e faec 	bl	800f784 <__assert_func>
	}
	return retVal;
 80011ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	08013f28 	.word	0x08013f28
 80011bc:	08013f5c 	.word	0x08013f5c
 80011c0:	08013f94 	.word	0x08013f94
 80011c4:	08013f98 	.word	0x08013f98
 80011c8:	08013eec 	.word	0x08013eec

080011cc <_ZN9i2cMasterD1Ev>:

i2cMaster::~i2cMaster() {
 80011cc:	b590      	push	{r4, r7, lr}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	4a11      	ldr	r2, [pc, #68]	@ (800121c <_ZN9i2cMasterD1Ev+0x50>)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
	this->i2cMasterSemaphoreTake();
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f7ff ff9a 	bl	8001114 <_ZN9i2cMaster22i2cMasterSemaphoreTakeEv>
	HAL_I2C_DeInit(this->p_hi2c1);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f004 f8d3 	bl	8005390 <HAL_I2C_DeInit>
	this->p_hi2c1 = NULL;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
	delete this->pReceiveQueueObject;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685c      	ldr	r4, [r3, #4]
 80011f4:	2c00      	cmp	r4, #0
 80011f6:	d006      	beq.n	8001206 <_ZN9i2cMasterD1Ev+0x3a>
 80011f8:	4620      	mov	r0, r4
 80011fa:	f000 f87d 	bl	80012f8 <_ZN20i2cQueue4DynamicDataD1Ev>
 80011fe:	2104      	movs	r1, #4
 8001200:	4620      	mov	r0, r4
 8001202:	f00e fa95 	bl	800f730 <_ZdlPvj>
	vSemaphoreDelete(this->handle_i2cBinarySemaphore);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	691b      	ldr	r3, [r3, #16]
 800120a:	4618      	mov	r0, r3
 800120c:	f00b ff49 	bl	800d0a2 <vQueueDelete>
}
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4618      	mov	r0, r3
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	bd90      	pop	{r4, r7, pc}
 800121a:	bf00      	nop
 800121c:	0801411c 	.word	0x0801411c

08001220 <_ZN9i2cMasterD0Ev>:
i2cMaster::~i2cMaster() {
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
}
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff ffcf 	bl	80011cc <_ZN9i2cMasterD1Ev>
 800122e:	2114      	movs	r1, #20
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f00e fa7d 	bl	800f730 <_ZdlPvj>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4618      	mov	r0, r3
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <_ZN9i2cMaster21while_I2C_STATE_READYEv>:

void i2cMaster::while_I2C_STATE_READY(void){
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	//this->i2cMasterSemaphoreTake();
	while(HAL_I2C_GetState(this->p_hi2c1)!= HAL_I2C_STATE_READY){};
 8001248:	bf00      	nop
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	4618      	mov	r0, r3
 8001250:	f004 fb87 	bl	8005962 <HAL_I2C_GetState>
 8001254:	4603      	mov	r3, r0
 8001256:	2b20      	cmp	r3, #32
 8001258:	bf14      	ite	ne
 800125a:	2301      	movne	r3, #1
 800125c:	2300      	moveq	r3, #0
 800125e:	b2db      	uxtb	r3, r3
 8001260:	2b00      	cmp	r3, #0
 8001262:	d1f2      	bne.n	800124a <_ZN9i2cMaster21while_I2C_STATE_READYEv+0xa>
	//this->i2cMasterSemaphoreGive();
}
 8001264:	bf00      	nop
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <_ZN9i2cMaster22I2C_Master_Receive_DMAEtPht>:

HAL_StatusTypeDef i2cMaster::I2C_Master_Receive_DMA(uint16_t DevAddress_7bit, uint8_t *pData, uint16_t Size){
 800126e:	b580      	push	{r7, lr}
 8001270:	b084      	sub	sp, #16
 8001272:	af00      	add	r7, sp, #0
 8001274:	60f8      	str	r0, [r7, #12]
 8001276:	607a      	str	r2, [r7, #4]
 8001278:	461a      	mov	r2, r3
 800127a:	460b      	mov	r3, r1
 800127c:	817b      	strh	r3, [r7, #10]
 800127e:	4613      	mov	r3, r2
 8001280:	813b      	strh	r3, [r7, #8]
	this->while_I2C_STATE_READY();
 8001282:	68f8      	ldr	r0, [r7, #12]
 8001284:	f7ff ffdc 	bl	8001240 <_ZN9i2cMaster21while_I2C_STATE_READYEv>
	return HAL_I2C_Master_Receive_DMA(this->p_hi2c1, DevAddress_7bit<<1, pData, Size);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	6898      	ldr	r0, [r3, #8]
 800128c:	897b      	ldrh	r3, [r7, #10]
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	b299      	uxth	r1, r3
 8001292:	893b      	ldrh	r3, [r7, #8]
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	f004 f8ab 	bl	80053f0 <HAL_I2C_Master_Receive_DMA>
 800129a:	4603      	mov	r3, r0
}
 800129c:	4618      	mov	r0, r3
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <_ZN20i2cQueue4DynamicDataC1Em>:
#include "i2c_slave_master_queueClass.h"


i2cQueue4DynamicData::i2cQueue4DynamicData(UBaseType_t uxQueueLength)
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
{
	this->handler_Queue = NULL;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
	configASSERT(this->handler_Queue = xQueueCreate(uxQueueLength, sizeof(i2cFrame_transmitQueue)));
 80012b4:	2200      	movs	r2, #0
 80012b6:	210c      	movs	r1, #12
 80012b8:	6838      	ldr	r0, [r7, #0]
 80012ba:	f00b fa1e 	bl	800c6fa <xQueueGenericCreate>
 80012be:	4602      	mov	r2, r0
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	bf0c      	ite	eq
 80012cc:	2301      	moveq	r3, #1
 80012ce:	2300      	movne	r3, #0
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d00b      	beq.n	80012ee <_ZN20i2cQueue4DynamicDataC1Em+0x4a>
	__asm volatile
 80012d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80012da:	f383 8811 	msr	BASEPRI, r3
 80012de:	f3bf 8f6f 	isb	sy
 80012e2:	f3bf 8f4f 	dsb	sy
 80012e6:	60fb      	str	r3, [r7, #12]
}
 80012e8:	bf00      	nop
 80012ea:	bf00      	nop
 80012ec:	e7fd      	b.n	80012ea <_ZN20i2cQueue4DynamicDataC1Em+0x46>
}
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4618      	mov	r0, r3
 80012f2:	3710      	adds	r7, #16
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <_ZN20i2cQueue4DynamicDataD1Ev>:


i2cQueue4DynamicData::~i2cQueue4DynamicData(void)
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
{
	i2cFrame_transmitQueue tempItemToDestrouQueue;
	BaseType_t tempQueueRetVal;
	do
	{
		tempQueueRetVal = xQueueReceive(this->handler_Queue, &tempItemToDestrouQueue, pdMS_TO_TICKS(1));
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f107 0108 	add.w	r1, r7, #8
 8001308:	2201      	movs	r2, #1
 800130a:	4618      	mov	r0, r3
 800130c:	f00b fcb8 	bl	800cc80 <xQueueReceive>
 8001310:	6178      	str	r0, [r7, #20]
		if (tempQueueRetVal == pdPASS)
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d105      	bne.n	8001324 <_ZN20i2cQueue4DynamicDataD1Ev+0x2c>
		{
			this->QueueDeleteDataFromPointer(tempItemToDestrouQueue);
 8001318:	f107 0308 	add.w	r3, r7, #8
 800131c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f000 f80d 	bl	800133e <_ZN20i2cQueue4DynamicData26QueueDeleteDataFromPointerE22i2cFrame_transmitQueue>
		}			
	} while (tempQueueRetVal == pdPASS);
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d0ea      	beq.n	8001300 <_ZN20i2cQueue4DynamicDataD1Ev+0x8>
	vQueueDelete(this->handler_Queue);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4618      	mov	r0, r3
 8001330:	f00b feb7 	bl	800d0a2 <vQueueDelete>
}
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4618      	mov	r0, r3
 8001338:	3718      	adds	r7, #24
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <_ZN20i2cQueue4DynamicData26QueueDeleteDataFromPointerE22i2cFrame_transmitQueue>:

void i2cQueue4DynamicData::QueueDeleteDataFromPointer(i2cFrame_transmitQueue structWithPointer)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b084      	sub	sp, #16
 8001342:	af00      	add	r7, sp, #0
 8001344:	60f8      	str	r0, [r7, #12]
 8001346:	4638      	mov	r0, r7
 8001348:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	delete[] static_cast<char*>(structWithPointer.pData);	
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d003      	beq.n	800135a <_ZN20i2cQueue4DynamicData26QueueDeleteDataFromPointerE22i2cFrame_transmitQueue+0x1c>
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	4618      	mov	r0, r3
 8001356:	f00e f9ed 	bl	800f734 <_ZdaPv>
}
 800135a:	bf00      	nop
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001366:	f000 fccf 	bl	8001d08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800136a:	f000 f813 	bl	8001394 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800136e:	f7ff fccf 	bl	8000d10 <MX_GPIO_Init>
  MX_DMA_Init();
 8001372:	f7ff fb81 	bl	8000a78 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001376:	f000 fbe7 	bl	8001b48 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800137a:	f7ff fd0f 	bl	8000d9c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  initTaskFunctions();
 800137e:	f000 facb 	bl	8001918 <_Z17initTaskFunctionsv>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001382:	f00a fef3 	bl	800c16c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001386:	f7ff fca9 	bl	8000cdc <_Z16MX_FREERTOS_Initv>

  /* Start scheduler */
  osKernelStart();
 800138a:	f00a ff13 	bl	800c1b4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800138e:	bf00      	nop
 8001390:	e7fd      	b.n	800138e <main+0x2c>
	...

08001394 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b09c      	sub	sp, #112	@ 0x70
 8001398:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800139a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800139e:	224c      	movs	r2, #76	@ 0x4c
 80013a0:	2100      	movs	r1, #0
 80013a2:	4618      	mov	r0, r3
 80013a4:	f00f fb48 	bl	8010a38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a8:	1d3b      	adds	r3, r7, #4
 80013aa:	2220      	movs	r2, #32
 80013ac:	2100      	movs	r1, #0
 80013ae:	4618      	mov	r0, r3
 80013b0:	f00f fb42 	bl	8010a38 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80013b4:	4b37      	ldr	r3, [pc, #220]	@ (8001494 <_Z18SystemClock_Configv+0x100>)
 80013b6:	f04f 32ff 	mov.w	r2, #4294967295
 80013ba:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80013be:	2002      	movs	r0, #2
 80013c0:	f006 fb3a 	bl	8007a38 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80013c4:	2300      	movs	r3, #0
 80013c6:	603b      	str	r3, [r7, #0]
 80013c8:	4b33      	ldr	r3, [pc, #204]	@ (8001498 <_Z18SystemClock_Configv+0x104>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	4a32      	ldr	r2, [pc, #200]	@ (8001498 <_Z18SystemClock_Configv+0x104>)
 80013ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80013d2:	6193      	str	r3, [r2, #24]
 80013d4:	4b30      	ldr	r3, [pc, #192]	@ (8001498 <_Z18SystemClock_Configv+0x104>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013dc:	603b      	str	r3, [r7, #0]
 80013de:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80013e0:	bf00      	nop
 80013e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001498 <_Z18SystemClock_Configv+0x104>)
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80013ee:	bf14      	ite	ne
 80013f0:	2301      	movne	r3, #1
 80013f2:	2300      	moveq	r3, #0
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1f3      	bne.n	80013e2 <_Z18SystemClock_Configv+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013fa:	2302      	movs	r3, #2
 80013fc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80013fe:	2301      	movs	r3, #1
 8001400:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001402:	2340      	movs	r3, #64	@ 0x40
 8001404:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001406:	2302      	movs	r3, #2
 8001408:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800140a:	2300      	movs	r3, #0
 800140c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800140e:	2304      	movs	r3, #4
 8001410:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8001412:	2323      	movs	r3, #35	@ 0x23
 8001414:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001416:	2302      	movs	r3, #2
 8001418:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800141a:	2302      	movs	r3, #2
 800141c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800141e:	2302      	movs	r3, #2
 8001420:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001422:	230c      	movs	r3, #12
 8001424:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001426:	2300      	movs	r3, #0
 8001428:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800142e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001432:	4618      	mov	r0, r3
 8001434:	f006 fb3a 	bl	8007aac <HAL_RCC_OscConfig>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	bf14      	ite	ne
 800143e:	2301      	movne	r3, #1
 8001440:	2300      	moveq	r3, #0
 8001442:	b2db      	uxtb	r3, r3
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <_Z18SystemClock_Configv+0xb8>
  {
    Error_Handler();
 8001448:	f000 f83a 	bl	80014c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800144c:	233f      	movs	r3, #63	@ 0x3f
 800144e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001450:	2303      	movs	r3, #3
 8001452:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001454:	2300      	movs	r3, #0
 8001456:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001458:	2300      	movs	r3, #0
 800145a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800145c:	2340      	movs	r3, #64	@ 0x40
 800145e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001460:	2340      	movs	r3, #64	@ 0x40
 8001462:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001464:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001468:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800146a:	2340      	movs	r3, #64	@ 0x40
 800146c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800146e:	1d3b      	adds	r3, r7, #4
 8001470:	2106      	movs	r1, #6
 8001472:	4618      	mov	r0, r3
 8001474:	f006 ff4c 	bl	8008310 <HAL_RCC_ClockConfig>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	bf14      	ite	ne
 800147e:	2301      	movne	r3, #1
 8001480:	2300      	moveq	r3, #0
 8001482:	b2db      	uxtb	r3, r3
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <_Z18SystemClock_Configv+0xf8>
  {
    Error_Handler();
 8001488:	f000 f81a 	bl	80014c0 <Error_Handler>
  }
}
 800148c:	bf00      	nop
 800148e:	3770      	adds	r7, #112	@ 0x70
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	58024400 	.word	0x58024400
 8001498:	58024800 	.word	0x58024800

0800149c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a04      	ldr	r2, [pc, #16]	@ (80014bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d101      	bne.n	80014b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80014ae:	f000 fc67 	bl	8001d80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40010000 	.word	0x40010000

080014c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014c4:	b672      	cpsid	i
}
 80014c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014c8:	bf00      	nop
 80014ca:	e7fd      	b.n	80014c8 <Error_Handler+0x8>

080014cc <__io_putchar>:

#include <printfRedirect.h>


//printf to uart redirection
void __io_putchar(uint8_t ch) {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, &ch, 1, 0xffff);
 80014d6:	1df9      	adds	r1, r7, #7
 80014d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80014dc:	2201      	movs	r2, #1
 80014de:	4803      	ldr	r0, [pc, #12]	@ (80014ec <__io_putchar+0x20>)
 80014e0:	f009 fbe2 	bl	800aca8 <HAL_UART_Transmit>
}
 80014e4:	bf00      	nop
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	240003a0 	.word	0x240003a0

080014f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001528 <HAL_MspInit+0x38>)
 80014f8:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80014fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001528 <HAL_MspInit+0x38>)
 80014fe:	f043 0302 	orr.w	r3, r3, #2
 8001502:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001506:	4b08      	ldr	r3, [pc, #32]	@ (8001528 <HAL_MspInit+0x38>)
 8001508:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	607b      	str	r3, [r7, #4]
 8001512:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001514:	2200      	movs	r2, #0
 8001516:	210f      	movs	r1, #15
 8001518:	f06f 0001 	mvn.w	r0, #1
 800151c:	f000 fd2c 	bl	8001f78 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001520:	bf00      	nop
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	58024400 	.word	0x58024400

0800152c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08e      	sub	sp, #56	@ 0x38
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2b0f      	cmp	r3, #15
 8001538:	d844      	bhi.n	80015c4 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 800153a:	2200      	movs	r2, #0
 800153c:	6879      	ldr	r1, [r7, #4]
 800153e:	2019      	movs	r0, #25
 8001540:	f000 fd1a 	bl	8001f78 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001544:	2019      	movs	r0, #25
 8001546:	f000 fd31 	bl	8001fac <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800154a:	4a24      	ldr	r2, [pc, #144]	@ (80015dc <HAL_InitTick+0xb0>)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001550:	4b23      	ldr	r3, [pc, #140]	@ (80015e0 <HAL_InitTick+0xb4>)
 8001552:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001556:	4a22      	ldr	r2, [pc, #136]	@ (80015e0 <HAL_InitTick+0xb4>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8001560:	4b1f      	ldr	r3, [pc, #124]	@ (80015e0 <HAL_InitTick+0xb4>)
 8001562:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	60bb      	str	r3, [r7, #8]
 800156c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800156e:	f107 020c 	add.w	r2, r7, #12
 8001572:	f107 0310 	add.w	r3, r7, #16
 8001576:	4611      	mov	r1, r2
 8001578:	4618      	mov	r0, r3
 800157a:	f007 fa55 	bl	8008a28 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800157e:	f007 fa3d 	bl	80089fc <HAL_RCC_GetPCLK2Freq>
 8001582:	4603      	mov	r3, r0
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800158a:	4a16      	ldr	r2, [pc, #88]	@ (80015e4 <HAL_InitTick+0xb8>)
 800158c:	fba2 2303 	umull	r2, r3, r2, r3
 8001590:	0c9b      	lsrs	r3, r3, #18
 8001592:	3b01      	subs	r3, #1
 8001594:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001596:	4b14      	ldr	r3, [pc, #80]	@ (80015e8 <HAL_InitTick+0xbc>)
 8001598:	4a14      	ldr	r2, [pc, #80]	@ (80015ec <HAL_InitTick+0xc0>)
 800159a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800159c:	4b12      	ldr	r3, [pc, #72]	@ (80015e8 <HAL_InitTick+0xbc>)
 800159e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80015a2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80015a4:	4a10      	ldr	r2, [pc, #64]	@ (80015e8 <HAL_InitTick+0xbc>)
 80015a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015a8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80015aa:	4b0f      	ldr	r3, [pc, #60]	@ (80015e8 <HAL_InitTick+0xbc>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b0:	4b0d      	ldr	r3, [pc, #52]	@ (80015e8 <HAL_InitTick+0xbc>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80015b6:	480c      	ldr	r0, [pc, #48]	@ (80015e8 <HAL_InitTick+0xbc>)
 80015b8:	f009 f858 	bl	800a66c <HAL_TIM_Base_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d107      	bne.n	80015d2 <HAL_InitTick+0xa6>
 80015c2:	e001      	b.n	80015c8 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e005      	b.n	80015d4 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80015c8:	4807      	ldr	r0, [pc, #28]	@ (80015e8 <HAL_InitTick+0xbc>)
 80015ca:	f009 f8b1 	bl	800a730 <HAL_TIM_Base_Start_IT>
 80015ce:	4603      	mov	r3, r0
 80015d0:	e000      	b.n	80015d4 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3738      	adds	r7, #56	@ 0x38
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	24000008 	.word	0x24000008
 80015e0:	58024400 	.word	0x58024400
 80015e4:	431bde83 	.word	0x431bde83
 80015e8:	24000340 	.word	0x24000340
 80015ec:	40010000 	.word	0x40010000

080015f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015f4:	bf00      	nop
 80015f6:	e7fd      	b.n	80015f4 <NMI_Handler+0x4>

080015f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015fc:	bf00      	nop
 80015fe:	e7fd      	b.n	80015fc <HardFault_Handler+0x4>

08001600 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001604:	bf00      	nop
 8001606:	e7fd      	b.n	8001604 <MemManage_Handler+0x4>

08001608 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800160c:	bf00      	nop
 800160e:	e7fd      	b.n	800160c <BusFault_Handler+0x4>

08001610 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001614:	bf00      	nop
 8001616:	e7fd      	b.n	8001614 <UsageFault_Handler+0x4>

08001618 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
	...

08001628 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800162c:	4802      	ldr	r0, [pc, #8]	@ (8001638 <DMA1_Stream0_IRQHandler+0x10>)
 800162e:	f001 ffa3 	bl	8003578 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	24000250 	.word	0x24000250

0800163c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001640:	4802      	ldr	r0, [pc, #8]	@ (800164c <DMA1_Stream1_IRQHandler+0x10>)
 8001642:	f001 ff99 	bl	8003578 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	240002c8 	.word	0x240002c8

08001650 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(esp32i2cInterruptReqest_Pin);
 8001654:	2020      	movs	r0, #32
 8001656:	f003 fde5 	bl	8005224 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001664:	4802      	ldr	r0, [pc, #8]	@ (8001670 <TIM1_UP_IRQHandler+0x10>)
 8001666:	f009 f8db 	bl	800a820 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	24000340 	.word	0x24000340

08001674 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001678:	4802      	ldr	r0, [pc, #8]	@ (8001684 <I2C1_EV_IRQHandler+0x10>)
 800167a:	f004 f895 	bl	80057a8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	240001fc 	.word	0x240001fc

08001688 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800168c:	4802      	ldr	r0, [pc, #8]	@ (8001698 <I2C1_ER_IRQHandler+0x10>)
 800168e:	f004 f8a5 	bl	80057dc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	240001fc 	.word	0x240001fc

0800169c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  return 1;
 80016a0:	2301      	movs	r3, #1
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <_kill>:

int _kill(int pid, int sig)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016b6:	f00f fabb 	bl	8010c30 <__errno>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2216      	movs	r2, #22
 80016be:	601a      	str	r2, [r3, #0]
  return -1;
 80016c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <_exit>:

void _exit (int status)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016d4:	f04f 31ff 	mov.w	r1, #4294967295
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f7ff ffe7 	bl	80016ac <_kill>
 while (1) {}    /* Make sure we hang here */
 80016de:	bf00      	nop
 80016e0:	e7fd      	b.n	80016de <_exit+0x12>

080016e2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b086      	sub	sp, #24
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	60f8      	str	r0, [r7, #12]
 80016ea:	60b9      	str	r1, [r7, #8]
 80016ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
 80016f2:	e00a      	b.n	800170a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016f4:	f3af 8000 	nop.w
 80016f8:	4601      	mov	r1, r0
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	1c5a      	adds	r2, r3, #1
 80016fe:	60ba      	str	r2, [r7, #8]
 8001700:	b2ca      	uxtb	r2, r1
 8001702:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	3301      	adds	r3, #1
 8001708:	617b      	str	r3, [r7, #20]
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	429a      	cmp	r2, r3
 8001710:	dbf0      	blt.n	80016f4 <_read+0x12>
  }

  return len;
 8001712:	687b      	ldr	r3, [r7, #4]
}
 8001714:	4618      	mov	r0, r3
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]
 800172c:	e009      	b.n	8001742 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	1c5a      	adds	r2, r3, #1
 8001732:	60ba      	str	r2, [r7, #8]
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff fec8 	bl	80014cc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	3301      	adds	r3, #1
 8001740:	617b      	str	r3, [r7, #20]
 8001742:	697a      	ldr	r2, [r7, #20]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	429a      	cmp	r2, r3
 8001748:	dbf1      	blt.n	800172e <_write+0x12>
  }
  return len;
 800174a:	687b      	ldr	r3, [r7, #4]
}
 800174c:	4618      	mov	r0, r3
 800174e:	3718      	adds	r7, #24
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <_close>:

int _close(int file)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800175c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001760:	4618      	mov	r0, r3
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800177c:	605a      	str	r2, [r3, #4]
  return 0;
 800177e:	2300      	movs	r3, #0
}
 8001780:	4618      	mov	r0, r3
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <_isatty>:

int _isatty(int file)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001794:	2301      	movs	r3, #1
}
 8001796:	4618      	mov	r0, r3
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b085      	sub	sp, #20
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	60f8      	str	r0, [r7, #12]
 80017aa:	60b9      	str	r1, [r7, #8]
 80017ac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017ae:	2300      	movs	r3, #0
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b086      	sub	sp, #24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017c4:	4a14      	ldr	r2, [pc, #80]	@ (8001818 <_sbrk+0x5c>)
 80017c6:	4b15      	ldr	r3, [pc, #84]	@ (800181c <_sbrk+0x60>)
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017d0:	4b13      	ldr	r3, [pc, #76]	@ (8001820 <_sbrk+0x64>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d102      	bne.n	80017de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017d8:	4b11      	ldr	r3, [pc, #68]	@ (8001820 <_sbrk+0x64>)
 80017da:	4a12      	ldr	r2, [pc, #72]	@ (8001824 <_sbrk+0x68>)
 80017dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017de:	4b10      	ldr	r3, [pc, #64]	@ (8001820 <_sbrk+0x64>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4413      	add	r3, r2
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d207      	bcs.n	80017fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017ec:	f00f fa20 	bl	8010c30 <__errno>
 80017f0:	4603      	mov	r3, r0
 80017f2:	220c      	movs	r2, #12
 80017f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017f6:	f04f 33ff 	mov.w	r3, #4294967295
 80017fa:	e009      	b.n	8001810 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017fc:	4b08      	ldr	r3, [pc, #32]	@ (8001820 <_sbrk+0x64>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001802:	4b07      	ldr	r3, [pc, #28]	@ (8001820 <_sbrk+0x64>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4413      	add	r3, r2
 800180a:	4a05      	ldr	r2, [pc, #20]	@ (8001820 <_sbrk+0x64>)
 800180c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800180e:	68fb      	ldr	r3, [r7, #12]
}
 8001810:	4618      	mov	r0, r3
 8001812:	3718      	adds	r7, #24
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	24100000 	.word	0x24100000
 800181c:	00000400 	.word	0x00000400
 8001820:	2400038c 	.word	0x2400038c
 8001824:	24004f80 	.word	0x24004f80

08001828 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800182c:	4b32      	ldr	r3, [pc, #200]	@ (80018f8 <SystemInit+0xd0>)
 800182e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001832:	4a31      	ldr	r2, [pc, #196]	@ (80018f8 <SystemInit+0xd0>)
 8001834:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001838:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800183c:	4b2f      	ldr	r3, [pc, #188]	@ (80018fc <SystemInit+0xd4>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 030f 	and.w	r3, r3, #15
 8001844:	2b02      	cmp	r3, #2
 8001846:	d807      	bhi.n	8001858 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001848:	4b2c      	ldr	r3, [pc, #176]	@ (80018fc <SystemInit+0xd4>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f023 030f 	bic.w	r3, r3, #15
 8001850:	4a2a      	ldr	r2, [pc, #168]	@ (80018fc <SystemInit+0xd4>)
 8001852:	f043 0303 	orr.w	r3, r3, #3
 8001856:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001858:	4b29      	ldr	r3, [pc, #164]	@ (8001900 <SystemInit+0xd8>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a28      	ldr	r2, [pc, #160]	@ (8001900 <SystemInit+0xd8>)
 800185e:	f043 0301 	orr.w	r3, r3, #1
 8001862:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001864:	4b26      	ldr	r3, [pc, #152]	@ (8001900 <SystemInit+0xd8>)
 8001866:	2200      	movs	r2, #0
 8001868:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800186a:	4b25      	ldr	r3, [pc, #148]	@ (8001900 <SystemInit+0xd8>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	4924      	ldr	r1, [pc, #144]	@ (8001900 <SystemInit+0xd8>)
 8001870:	4b24      	ldr	r3, [pc, #144]	@ (8001904 <SystemInit+0xdc>)
 8001872:	4013      	ands	r3, r2
 8001874:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001876:	4b21      	ldr	r3, [pc, #132]	@ (80018fc <SystemInit+0xd4>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 030c 	and.w	r3, r3, #12
 800187e:	2b00      	cmp	r3, #0
 8001880:	d007      	beq.n	8001892 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001882:	4b1e      	ldr	r3, [pc, #120]	@ (80018fc <SystemInit+0xd4>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f023 030f 	bic.w	r3, r3, #15
 800188a:	4a1c      	ldr	r2, [pc, #112]	@ (80018fc <SystemInit+0xd4>)
 800188c:	f043 0303 	orr.w	r3, r3, #3
 8001890:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001892:	4b1b      	ldr	r3, [pc, #108]	@ (8001900 <SystemInit+0xd8>)
 8001894:	2200      	movs	r2, #0
 8001896:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001898:	4b19      	ldr	r3, [pc, #100]	@ (8001900 <SystemInit+0xd8>)
 800189a:	2200      	movs	r2, #0
 800189c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800189e:	4b18      	ldr	r3, [pc, #96]	@ (8001900 <SystemInit+0xd8>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80018a4:	4b16      	ldr	r3, [pc, #88]	@ (8001900 <SystemInit+0xd8>)
 80018a6:	4a18      	ldr	r2, [pc, #96]	@ (8001908 <SystemInit+0xe0>)
 80018a8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80018aa:	4b15      	ldr	r3, [pc, #84]	@ (8001900 <SystemInit+0xd8>)
 80018ac:	4a17      	ldr	r2, [pc, #92]	@ (800190c <SystemInit+0xe4>)
 80018ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80018b0:	4b13      	ldr	r3, [pc, #76]	@ (8001900 <SystemInit+0xd8>)
 80018b2:	4a17      	ldr	r2, [pc, #92]	@ (8001910 <SystemInit+0xe8>)
 80018b4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80018b6:	4b12      	ldr	r3, [pc, #72]	@ (8001900 <SystemInit+0xd8>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80018bc:	4b10      	ldr	r3, [pc, #64]	@ (8001900 <SystemInit+0xd8>)
 80018be:	4a14      	ldr	r2, [pc, #80]	@ (8001910 <SystemInit+0xe8>)
 80018c0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80018c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001900 <SystemInit+0xd8>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80018c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001900 <SystemInit+0xd8>)
 80018ca:	4a11      	ldr	r2, [pc, #68]	@ (8001910 <SystemInit+0xe8>)
 80018cc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80018ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001900 <SystemInit+0xd8>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80018d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001900 <SystemInit+0xd8>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a09      	ldr	r2, [pc, #36]	@ (8001900 <SystemInit+0xd8>)
 80018da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018de:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80018e0:	4b07      	ldr	r3, [pc, #28]	@ (8001900 <SystemInit+0xd8>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80018e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001914 <SystemInit+0xec>)
 80018e8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80018ec:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80018ee:	bf00      	nop
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	e000ed00 	.word	0xe000ed00
 80018fc:	52002000 	.word	0x52002000
 8001900:	58024400 	.word	0x58024400
 8001904:	eaf6ed7f 	.word	0xeaf6ed7f
 8001908:	02020200 	.word	0x02020200
 800190c:	01ff0000 	.word	0x01ff0000
 8001910:	01010280 	.word	0x01010280
 8001914:	52004000 	.word	0x52004000

08001918 <_Z17initTaskFunctionsv>:
static BaseType_t esp32InrerruptRequest_CountingSemaphoreOverflow=pdFALSE;	//zmienna informująca o tym, że nastąpiło przepełnienie "esp32IntrrruptRequest_CountingSemaphore", aka. zbyt wiele oczekujących komunikatów, co może wskazywać na błąd.




void initTaskFunctions(void){
 8001918:	b590      	push	{r4, r7, lr}
 800191a:	b085      	sub	sp, #20
 800191c:	af02      	add	r7, sp, #8
	printf("Radio main firmware version: %.2f\r\n", FW_VERSION);
 800191e:	a348      	add	r3, pc, #288	@ (adr r3, 8001a40 <_Z17initTaskFunctionsv+0x128>)
 8001920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001924:	483a      	ldr	r0, [pc, #232]	@ (8001a10 <_Z17initTaskFunctionsv+0xf8>)
 8001926:	f00e ff1f 	bl	8010768 <iprintf>

	//////////////////////////////////////////////
	// NIE POTRZEBNE
	configASSERT(esp32IntrrruptRequest_CountingSemaphore = xSemaphoreCreateCounting(ESP32_INTERRUPT_REQUEST_COUNTING_SEMAPHORE_MAX, 0));
 800192a:	2100      	movs	r1, #0
 800192c:	2015      	movs	r0, #21
 800192e:	f00a ff42 	bl	800c7b6 <xQueueCreateCountingSemaphore>
 8001932:	4603      	mov	r3, r0
 8001934:	4a37      	ldr	r2, [pc, #220]	@ (8001a14 <_Z17initTaskFunctionsv+0xfc>)
 8001936:	6013      	str	r3, [r2, #0]
 8001938:	4b36      	ldr	r3, [pc, #216]	@ (8001a14 <_Z17initTaskFunctionsv+0xfc>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	bf0c      	ite	eq
 8001940:	2301      	moveq	r3, #1
 8001942:	2300      	movne	r3, #0
 8001944:	b2db      	uxtb	r3, r3
 8001946:	2b00      	cmp	r3, #0
 8001948:	d00b      	beq.n	8001962 <_Z17initTaskFunctionsv+0x4a>
	__asm volatile
 800194a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800194e:	f383 8811 	msr	BASEPRI, r3
 8001952:	f3bf 8f6f 	isb	sy
 8001956:	f3bf 8f4f 	dsb	sy
 800195a:	607b      	str	r3, [r7, #4]
}
 800195c:	bf00      	nop
 800195e:	bf00      	nop
 8001960:	e7fd      	b.n	800195e <_Z17initTaskFunctionsv+0x46>
	////////////////////////////////////////////////////////////


		//pi2cMaster = NULL;
		assert(pi2cMaster = new i2cMaster(&hi2c1));
 8001962:	2014      	movs	r0, #20
 8001964:	f00d fee8 	bl	800f738 <_Znwj>
 8001968:	4603      	mov	r3, r0
 800196a:	461c      	mov	r4, r3
 800196c:	492a      	ldr	r1, [pc, #168]	@ (8001a18 <_Z17initTaskFunctionsv+0x100>)
 800196e:	4620      	mov	r0, r4
 8001970:	f7ff fb66 	bl	8001040 <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef>
 8001974:	4b29      	ldr	r3, [pc, #164]	@ (8001a1c <_Z17initTaskFunctionsv+0x104>)
 8001976:	601c      	str	r4, [r3, #0]
 8001978:	4b28      	ldr	r3, [pc, #160]	@ (8001a1c <_Z17initTaskFunctionsv+0x104>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d105      	bne.n	800198c <_Z17initTaskFunctionsv+0x74>
 8001980:	4b27      	ldr	r3, [pc, #156]	@ (8001a20 <_Z17initTaskFunctionsv+0x108>)
 8001982:	4a28      	ldr	r2, [pc, #160]	@ (8001a24 <_Z17initTaskFunctionsv+0x10c>)
 8001984:	212c      	movs	r1, #44	@ 0x2c
 8001986:	4828      	ldr	r0, [pc, #160]	@ (8001a28 <_Z17initTaskFunctionsv+0x110>)
 8001988:	f00d fefc 	bl	800f784 <__assert_func>
		assert(pESP32 = new esp32_i2sComunicationDriver(pi2cMaster));
 800198c:	2014      	movs	r0, #20
 800198e:	f00d fed3 	bl	800f738 <_Znwj>
 8001992:	4603      	mov	r3, r0
 8001994:	461c      	mov	r4, r3
 8001996:	4b21      	ldr	r3, [pc, #132]	@ (8001a1c <_Z17initTaskFunctionsv+0x104>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4619      	mov	r1, r3
 800199c:	4620      	mov	r0, r4
 800199e:	f7ff f893 	bl	8000ac8 <_ZN27esp32_i2sComunicationDriverC1EP9i2cMaster>
 80019a2:	4b22      	ldr	r3, [pc, #136]	@ (8001a2c <_Z17initTaskFunctionsv+0x114>)
 80019a4:	601c      	str	r4, [r3, #0]
 80019a6:	4b21      	ldr	r3, [pc, #132]	@ (8001a2c <_Z17initTaskFunctionsv+0x114>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d105      	bne.n	80019ba <_Z17initTaskFunctionsv+0xa2>
 80019ae:	4b20      	ldr	r3, [pc, #128]	@ (8001a30 <_Z17initTaskFunctionsv+0x118>)
 80019b0:	4a1c      	ldr	r2, [pc, #112]	@ (8001a24 <_Z17initTaskFunctionsv+0x10c>)
 80019b2:	212d      	movs	r1, #45	@ 0x2d
 80019b4:	481c      	ldr	r0, [pc, #112]	@ (8001a28 <_Z17initTaskFunctionsv+0x110>)
 80019b6:	f00d fee5 	bl	800f784 <__assert_func>
		pESP32->ping();
 80019ba:	4b1c      	ldr	r3, [pc, #112]	@ (8001a2c <_Z17initTaskFunctionsv+0x114>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff f8bc 	bl	8000b3c <_ZN27esp32_i2sComunicationDriver4pingEv>


		//tworzy task callback na przerwanie od ESP32 informującę, że ESP32 ma jakieś dane do wysłania
		configASSERT(xTaskCreate(esp32IntrrruptRequestCallback, "esp32IntReq", 3*128, NULL, tskIDLE_PRIORITY+1, &taskHandle_esp32IntrrruptRequest));
 80019c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a34 <_Z17initTaskFunctionsv+0x11c>)
 80019c6:	9301      	str	r3, [sp, #4]
 80019c8:	2301      	movs	r3, #1
 80019ca:	9300      	str	r3, [sp, #0]
 80019cc:	2300      	movs	r3, #0
 80019ce:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80019d2:	4919      	ldr	r1, [pc, #100]	@ (8001a38 <_Z17initTaskFunctionsv+0x120>)
 80019d4:	4819      	ldr	r0, [pc, #100]	@ (8001a3c <_Z17initTaskFunctionsv+0x124>)
 80019d6:	f00b fd99 	bl	800d50c <xTaskCreate>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	bf0c      	ite	eq
 80019e0:	2301      	moveq	r3, #1
 80019e2:	2300      	movne	r3, #0
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d00b      	beq.n	8001a02 <_Z17initTaskFunctionsv+0xea>
	__asm volatile
 80019ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80019ee:	f383 8811 	msr	BASEPRI, r3
 80019f2:	f3bf 8f6f 	isb	sy
 80019f6:	f3bf 8f4f 	dsb	sy
 80019fa:	603b      	str	r3, [r7, #0]
}
 80019fc:	bf00      	nop
 80019fe:	bf00      	nop
 8001a00:	e7fd      	b.n	80019fe <_Z17initTaskFunctionsv+0xe6>
}
 8001a02:	bf00      	nop
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd90      	pop	{r4, r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	f3af 8000 	nop.w
 8001a10:	08013fc4 	.word	0x08013fc4
 8001a14:	2400039c 	.word	0x2400039c
 8001a18:	240001fc 	.word	0x240001fc
 8001a1c:	24000394 	.word	0x24000394
 8001a20:	08013fe8 	.word	0x08013fe8
 8001a24:	0801400c 	.word	0x0801400c
 8001a28:	08014028 	.word	0x08014028
 8001a2c:	24000398 	.word	0x24000398
 8001a30:	08014048 	.word	0x08014048
 8001a34:	24000390 	.word	0x24000390
 8001a38:	08014080 	.word	0x08014080
 8001a3c:	08001a69 	.word	0x08001a69
 8001a40:	9999999a 	.word	0x9999999a
 8001a44:	3fb99999 	.word	0x3fb99999

08001a48 <HAL_GPIO_EXTI_Callback>:




void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	80fb      	strh	r3, [r7, #6]
		pESP32->incrementInterruptRequestCountingSemaphore();		//inkrementacja semafora daje sygnał ,dla metody esp32_i2sComunicationDriver::intrrruptRequestCallback
 8001a52:	4b04      	ldr	r3, [pc, #16]	@ (8001a64 <HAL_GPIO_EXTI_Callback+0x1c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff f88e 	bl	8000b78 <_ZN27esp32_i2sComunicationDriver42incrementInterruptRequestCountingSemaphoreEv>
}
 8001a5c:	bf00      	nop
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	24000398 	.word	0x24000398

08001a68 <_ZL29esp32IntrrruptRequestCallbackPv>:





static void esp32IntrrruptRequestCallback(void *pNothing){
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
	i2cFrame_transmitQueue tempI2CFrameForESP32;			//
	tempI2CFrameForESP32.slaveDevice7bitAddress = pESP32->get_i2cSlaveAddress_7bit();		//I2C_SLAVE_ADDRESS_ESP32;
 8001a70:	4b2e      	ldr	r3, [pc, #184]	@ (8001b2c <_ZL29esp32IntrrruptRequestCallbackPv+0xc4>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff f89f 	bl	8000bb8 <_ZN27esp32_i2sComunicationDriver24get_i2cSlaveAddress_7bitEv>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	723b      	strb	r3, [r7, #8]
	char* pdymanicDataPointer;								//wskaźnik do dynamicznie alokowanych zmiennych, w których będą przechowywane dane otrzymane z ESP32
	while(1){
		pESP32->isCountingSemaphoreOverflowed();
 8001a7e:	4b2b      	ldr	r3, [pc, #172]	@ (8001b2c <_ZL29esp32IntrrruptRequestCallbackPv+0xc4>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff f8c4 	bl	8000c10 <_ZN27esp32_i2sComunicationDriver29isCountingSemaphoreOverflowedEv>

		if (pESP32->semaphoreTake__CountingSemaphore()){		//czeka dopuki nie pojawi się esp32 interrupt request
 8001a88:	4b28      	ldr	r3, [pc, #160]	@ (8001b2c <_ZL29esp32IntrrruptRequestCallbackPv+0xc4>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff f8df 	bl	8000c50 <_ZN27esp32_i2sComunicationDriver32semaphoreTake__CountingSemaphoreEv>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	bf14      	ite	ne
 8001a98:	2301      	movne	r3, #1
 8001a9a:	2300      	moveq	r3, #0
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d0ed      	beq.n	8001a7e <_ZL29esp32IntrrruptRequestCallbackPv+0x16>
			printf("High prior task \r\n");
 8001aa2:	4823      	ldr	r0, [pc, #140]	@ (8001b30 <_ZL29esp32IntrrruptRequestCallbackPv+0xc8>)
 8001aa4:	f00e fec8 	bl	8010838 <puts>

			pESP32->i2cMasterSemaphoreTake();
 8001aa8:	4b20      	ldr	r3, [pc, #128]	@ (8001b2c <_ZL29esp32IntrrruptRequestCallbackPv+0xc4>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff f8e4 	bl	8000c7a <_ZN27esp32_i2sComunicationDriver22i2cMasterSemaphoreTakeEv>
			//pi2cMaster->i2cMasterSemaphoreTake();




			pi2cMaster->I2C_Master_Receive_DMA(tempI2CFrameForESP32.slaveDevice7bitAddress, (uint8_t*) &tempI2CFrameForESP32.dataSize, sizeof(size_t));
 8001ab2:	4b20      	ldr	r3, [pc, #128]	@ (8001b34 <_ZL29esp32IntrrruptRequestCallbackPv+0xcc>)
 8001ab4:	6818      	ldr	r0, [r3, #0]
 8001ab6:	7a3b      	ldrb	r3, [r7, #8]
 8001ab8:	4619      	mov	r1, r3
 8001aba:	f107 0308 	add.w	r3, r7, #8
 8001abe:	1d1a      	adds	r2, r3, #4
 8001ac0:	2304      	movs	r3, #4
 8001ac2:	f7ff fbd4 	bl	800126e <_ZN9i2cMaster22I2C_Master_Receive_DMAEtPht>

			pi2cMaster->while_I2C_STATE_READY();
 8001ac6:	4b1b      	ldr	r3, [pc, #108]	@ (8001b34 <_ZL29esp32IntrrruptRequestCallbackPv+0xcc>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff fbb8 	bl	8001240 <_ZN9i2cMaster21while_I2C_STATE_READYEv>
			/*char**/
			pdymanicDataPointer = new char[tempI2CFrameForESP32.dataSize];
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f00d fe41 	bl	800f75a <_Znaj>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	617b      	str	r3, [r7, #20]
			printf("1 \r\n");
 8001adc:	4816      	ldr	r0, [pc, #88]	@ (8001b38 <_ZL29esp32IntrrruptRequestCallbackPv+0xd0>)
 8001ade:	f00e feab 	bl	8010838 <puts>
			if (pdymanicDataPointer!=nullptr){
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d018      	beq.n	8001b1a <_ZL29esp32IntrrruptRequestCallbackPv+0xb2>
				HAL_I2C_Master_Receive_DMA(&hi2c1, tempI2CFrameForESP32.slaveDevice7bitAddress<<1, (uint8_t*) pdymanicDataPointer, tempI2CFrameForESP32.dataSize);
 8001ae8:	7a3b      	ldrb	r3, [r7, #8]
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	b299      	uxth	r1, r3
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	697a      	ldr	r2, [r7, #20]
 8001af4:	4811      	ldr	r0, [pc, #68]	@ (8001b3c <_ZL29esp32IntrrruptRequestCallbackPv+0xd4>)
 8001af6:	f003 fc7b 	bl	80053f0 <HAL_I2C_Master_Receive_DMA>
				//HAL_I2C_Master_Receive(&hi2c1, tempI2CFrameReceivedFromESP32.slaveDevice7bitAddress<<1, (uint8_t*) pdymanicDataPointer, tempI2CFrameReceivedFromESP32.dataSize, 500);
				while(HAL_I2C_GetState(&hi2c1)!= HAL_I2C_STATE_READY){};
 8001afa:	bf00      	nop
 8001afc:	480f      	ldr	r0, [pc, #60]	@ (8001b3c <_ZL29esp32IntrrruptRequestCallbackPv+0xd4>)
 8001afe:	f003 ff30 	bl	8005962 <HAL_I2C_GetState>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b20      	cmp	r3, #32
 8001b06:	bf14      	ite	ne
 8001b08:	2301      	movne	r3, #1
 8001b0a:	2300      	moveq	r3, #0
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1f4      	bne.n	8001afc <_ZL29esp32IntrrruptRequestCallbackPv+0x94>
				printf("2 \r\n");
 8001b12:	480b      	ldr	r0, [pc, #44]	@ (8001b40 <_ZL29esp32IntrrruptRequestCallbackPv+0xd8>)
 8001b14:	f00e fe90 	bl	8010838 <puts>
 8001b18:	e002      	b.n	8001b20 <_ZL29esp32IntrrruptRequestCallbackPv+0xb8>
				//tempI2CFrameReceivedFromESP32.pData = pdymanicDataPointer;

			}
			else{
				printf("error with memory allocation\r\n");
 8001b1a:	480a      	ldr	r0, [pc, #40]	@ (8001b44 <_ZL29esp32IntrrruptRequestCallbackPv+0xdc>)
 8001b1c:	f00e fe8c 	bl	8010838 <puts>
				#warning zrobić porządną obsługę błędów
				//TODO: zrobić porządną obsługę błędów
			}

			pi2cMaster->i2cMasterSemaphoreGive();
 8001b20:	4b04      	ldr	r3, [pc, #16]	@ (8001b34 <_ZL29esp32IntrrruptRequestCallbackPv+0xcc>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff fb05 	bl	8001134 <_ZN9i2cMaster22i2cMasterSemaphoreGiveEv>
		pESP32->isCountingSemaphoreOverflowed();
 8001b2a:	e7a8      	b.n	8001a7e <_ZL29esp32IntrrruptRequestCallbackPv+0x16>
 8001b2c:	24000398 	.word	0x24000398
 8001b30:	0801408c 	.word	0x0801408c
 8001b34:	24000394 	.word	0x24000394
 8001b38:	080140a0 	.word	0x080140a0
 8001b3c:	240001fc 	.word	0x240001fc
 8001b40:	080140a4 	.word	0x080140a4
 8001b44:	080140a8 	.word	0x080140a8

08001b48 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b4c:	4b22      	ldr	r3, [pc, #136]	@ (8001bd8 <MX_USART1_UART_Init+0x90>)
 8001b4e:	4a23      	ldr	r2, [pc, #140]	@ (8001bdc <MX_USART1_UART_Init+0x94>)
 8001b50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b52:	4b21      	ldr	r3, [pc, #132]	@ (8001bd8 <MX_USART1_UART_Init+0x90>)
 8001b54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b5a:	4b1f      	ldr	r3, [pc, #124]	@ (8001bd8 <MX_USART1_UART_Init+0x90>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b60:	4b1d      	ldr	r3, [pc, #116]	@ (8001bd8 <MX_USART1_UART_Init+0x90>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b66:	4b1c      	ldr	r3, [pc, #112]	@ (8001bd8 <MX_USART1_UART_Init+0x90>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b6c:	4b1a      	ldr	r3, [pc, #104]	@ (8001bd8 <MX_USART1_UART_Init+0x90>)
 8001b6e:	220c      	movs	r2, #12
 8001b70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b72:	4b19      	ldr	r3, [pc, #100]	@ (8001bd8 <MX_USART1_UART_Init+0x90>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b78:	4b17      	ldr	r3, [pc, #92]	@ (8001bd8 <MX_USART1_UART_Init+0x90>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b7e:	4b16      	ldr	r3, [pc, #88]	@ (8001bd8 <MX_USART1_UART_Init+0x90>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b84:	4b14      	ldr	r3, [pc, #80]	@ (8001bd8 <MX_USART1_UART_Init+0x90>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b8a:	4b13      	ldr	r3, [pc, #76]	@ (8001bd8 <MX_USART1_UART_Init+0x90>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b90:	4811      	ldr	r0, [pc, #68]	@ (8001bd8 <MX_USART1_UART_Init+0x90>)
 8001b92:	f009 f839 	bl	800ac08 <HAL_UART_Init>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001b9c:	f7ff fc90 	bl	80014c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	480d      	ldr	r0, [pc, #52]	@ (8001bd8 <MX_USART1_UART_Init+0x90>)
 8001ba4:	f00a f9d3 	bl	800bf4e <HAL_UARTEx_SetTxFifoThreshold>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001bae:	f7ff fc87 	bl	80014c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	4808      	ldr	r0, [pc, #32]	@ (8001bd8 <MX_USART1_UART_Init+0x90>)
 8001bb6:	f00a fa08 	bl	800bfca <HAL_UARTEx_SetRxFifoThreshold>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001bc0:	f7ff fc7e 	bl	80014c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001bc4:	4804      	ldr	r0, [pc, #16]	@ (8001bd8 <MX_USART1_UART_Init+0x90>)
 8001bc6:	f00a f989 	bl	800bedc <HAL_UARTEx_DisableFifoMode>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001bd0:	f7ff fc76 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bd4:	bf00      	nop
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	240003a0 	.word	0x240003a0
 8001bdc:	40011000 	.word	0x40011000

08001be0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b0ba      	sub	sp, #232	@ 0xe8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]
 8001bf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bf8:	f107 0310 	add.w	r3, r7, #16
 8001bfc:	22c0      	movs	r2, #192	@ 0xc0
 8001bfe:	2100      	movs	r1, #0
 8001c00:	4618      	mov	r0, r3
 8001c02:	f00e ff19 	bl	8010a38 <memset>
  if(uartHandle->Instance==USART1)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a27      	ldr	r2, [pc, #156]	@ (8001ca8 <HAL_UART_MspInit+0xc8>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d146      	bne.n	8001c9e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c10:	f04f 0201 	mov.w	r2, #1
 8001c14:	f04f 0300 	mov.w	r3, #0
 8001c18:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c22:	f107 0310 	add.w	r3, r7, #16
 8001c26:	4618      	mov	r0, r3
 8001c28:	f006 ff40 	bl	8008aac <HAL_RCCEx_PeriphCLKConfig>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001c32:	f7ff fc45 	bl	80014c0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c36:	4b1d      	ldr	r3, [pc, #116]	@ (8001cac <HAL_UART_MspInit+0xcc>)
 8001c38:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001c3c:	4a1b      	ldr	r2, [pc, #108]	@ (8001cac <HAL_UART_MspInit+0xcc>)
 8001c3e:	f043 0310 	orr.w	r3, r3, #16
 8001c42:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8001c46:	4b19      	ldr	r3, [pc, #100]	@ (8001cac <HAL_UART_MspInit+0xcc>)
 8001c48:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001c4c:	f003 0310 	and.w	r3, r3, #16
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c54:	4b15      	ldr	r3, [pc, #84]	@ (8001cac <HAL_UART_MspInit+0xcc>)
 8001c56:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001c5a:	4a14      	ldr	r2, [pc, #80]	@ (8001cac <HAL_UART_MspInit+0xcc>)
 8001c5c:	f043 0302 	orr.w	r3, r3, #2
 8001c60:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001c64:	4b11      	ldr	r3, [pc, #68]	@ (8001cac <HAL_UART_MspInit+0xcc>)
 8001c66:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	60bb      	str	r3, [r7, #8]
 8001c70:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = dbg_UART_TX_Pin|dbg_UART_RX_Pin;
 8001c72:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001c76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c86:	2300      	movs	r3, #0
 8001c88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001c8c:	2304      	movs	r3, #4
 8001c8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c92:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001c96:	4619      	mov	r1, r3
 8001c98:	4805      	ldr	r0, [pc, #20]	@ (8001cb0 <HAL_UART_MspInit+0xd0>)
 8001c9a:	f003 f809 	bl	8004cb0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001c9e:	bf00      	nop
 8001ca0:	37e8      	adds	r7, #232	@ 0xe8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40011000 	.word	0x40011000
 8001cac:	58024400 	.word	0x58024400
 8001cb0:	58020400 	.word	0x58020400

08001cb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001cb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001cec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001cb8:	f7ff fdb6 	bl	8001828 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cbc:	480c      	ldr	r0, [pc, #48]	@ (8001cf0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cbe:	490d      	ldr	r1, [pc, #52]	@ (8001cf4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cc0:	4a0d      	ldr	r2, [pc, #52]	@ (8001cf8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cc4:	e002      	b.n	8001ccc <LoopCopyDataInit>

08001cc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cca:	3304      	adds	r3, #4

08001ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ccc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cd0:	d3f9      	bcc.n	8001cc6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cd2:	4a0a      	ldr	r2, [pc, #40]	@ (8001cfc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cd4:	4c0a      	ldr	r4, [pc, #40]	@ (8001d00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cd8:	e001      	b.n	8001cde <LoopFillZerobss>

08001cda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cdc:	3204      	adds	r2, #4

08001cde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ce0:	d3fb      	bcc.n	8001cda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ce2:	f00e ffab 	bl	8010c3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ce6:	f7ff fb3c 	bl	8001362 <main>
  bx  lr
 8001cea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cec:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001cf0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001cf4:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 8001cf8:	080145a4 	.word	0x080145a4
  ldr r2, =_sbss
 8001cfc:	240001dc 	.word	0x240001dc
  ldr r4, =_ebss
 8001d00:	24004f7c 	.word	0x24004f7c

08001d04 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d04:	e7fe      	b.n	8001d04 <ADC_IRQHandler>
	...

08001d08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d0e:	2003      	movs	r0, #3
 8001d10:	f000 f927 	bl	8001f62 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001d14:	f006 fcb2 	bl	800867c <HAL_RCC_GetSysClockFreq>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	4b15      	ldr	r3, [pc, #84]	@ (8001d70 <HAL_Init+0x68>)
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	0a1b      	lsrs	r3, r3, #8
 8001d20:	f003 030f 	and.w	r3, r3, #15
 8001d24:	4913      	ldr	r1, [pc, #76]	@ (8001d74 <HAL_Init+0x6c>)
 8001d26:	5ccb      	ldrb	r3, [r1, r3]
 8001d28:	f003 031f 	and.w	r3, r3, #31
 8001d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d30:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001d32:	4b0f      	ldr	r3, [pc, #60]	@ (8001d70 <HAL_Init+0x68>)
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	4a0e      	ldr	r2, [pc, #56]	@ (8001d74 <HAL_Init+0x6c>)
 8001d3c:	5cd3      	ldrb	r3, [r2, r3]
 8001d3e:	f003 031f 	and.w	r3, r3, #31
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	fa22 f303 	lsr.w	r3, r2, r3
 8001d48:	4a0b      	ldr	r2, [pc, #44]	@ (8001d78 <HAL_Init+0x70>)
 8001d4a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d4c:	4a0b      	ldr	r2, [pc, #44]	@ (8001d7c <HAL_Init+0x74>)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d52:	200f      	movs	r0, #15
 8001d54:	f7ff fbea 	bl	800152c <HAL_InitTick>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e002      	b.n	8001d68 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001d62:	f7ff fbc5 	bl	80014f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	58024400 	.word	0x58024400
 8001d74:	08014124 	.word	0x08014124
 8001d78:	24000004 	.word	0x24000004
 8001d7c:	24000000 	.word	0x24000000

08001d80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d84:	4b06      	ldr	r3, [pc, #24]	@ (8001da0 <HAL_IncTick+0x20>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4b06      	ldr	r3, [pc, #24]	@ (8001da4 <HAL_IncTick+0x24>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4413      	add	r3, r2
 8001d90:	4a04      	ldr	r2, [pc, #16]	@ (8001da4 <HAL_IncTick+0x24>)
 8001d92:	6013      	str	r3, [r2, #0]
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	2400000c 	.word	0x2400000c
 8001da4:	24000434 	.word	0x24000434

08001da8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  return uwTick;
 8001dac:	4b03      	ldr	r3, [pc, #12]	@ (8001dbc <HAL_GetTick+0x14>)
 8001dae:	681b      	ldr	r3, [r3, #0]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	24000434 	.word	0x24000434

08001dc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8001e00 <__NVIC_SetPriorityGrouping+0x40>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dd6:	68ba      	ldr	r2, [r7, #8]
 8001dd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ddc:	4013      	ands	r3, r2
 8001dde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001de8:	4b06      	ldr	r3, [pc, #24]	@ (8001e04 <__NVIC_SetPriorityGrouping+0x44>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dee:	4a04      	ldr	r2, [pc, #16]	@ (8001e00 <__NVIC_SetPriorityGrouping+0x40>)
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	60d3      	str	r3, [r2, #12]
}
 8001df4:	bf00      	nop
 8001df6:	3714      	adds	r7, #20
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	e000ed00 	.word	0xe000ed00
 8001e04:	05fa0000 	.word	0x05fa0000

08001e08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e0c:	4b04      	ldr	r3, [pc, #16]	@ (8001e20 <__NVIC_GetPriorityGrouping+0x18>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	0a1b      	lsrs	r3, r3, #8
 8001e12:	f003 0307 	and.w	r3, r3, #7
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	e000ed00 	.word	0xe000ed00

08001e24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	db0b      	blt.n	8001e4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e36:	88fb      	ldrh	r3, [r7, #6]
 8001e38:	f003 021f 	and.w	r2, r3, #31
 8001e3c:	4907      	ldr	r1, [pc, #28]	@ (8001e5c <__NVIC_EnableIRQ+0x38>)
 8001e3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e42:	095b      	lsrs	r3, r3, #5
 8001e44:	2001      	movs	r0, #1
 8001e46:	fa00 f202 	lsl.w	r2, r0, r2
 8001e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	e000e100 	.word	0xe000e100

08001e60 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	db12      	blt.n	8001e98 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e72:	88fb      	ldrh	r3, [r7, #6]
 8001e74:	f003 021f 	and.w	r2, r3, #31
 8001e78:	490a      	ldr	r1, [pc, #40]	@ (8001ea4 <__NVIC_DisableIRQ+0x44>)
 8001e7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e7e:	095b      	lsrs	r3, r3, #5
 8001e80:	2001      	movs	r0, #1
 8001e82:	fa00 f202 	lsl.w	r2, r0, r2
 8001e86:	3320      	adds	r3, #32
 8001e88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001e8c:	f3bf 8f4f 	dsb	sy
}
 8001e90:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e92:	f3bf 8f6f 	isb	sy
}
 8001e96:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	e000e100 	.word	0xe000e100

08001ea8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	6039      	str	r1, [r7, #0]
 8001eb2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001eb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	db0a      	blt.n	8001ed2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	b2da      	uxtb	r2, r3
 8001ec0:	490c      	ldr	r1, [pc, #48]	@ (8001ef4 <__NVIC_SetPriority+0x4c>)
 8001ec2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ec6:	0112      	lsls	r2, r2, #4
 8001ec8:	b2d2      	uxtb	r2, r2
 8001eca:	440b      	add	r3, r1
 8001ecc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ed0:	e00a      	b.n	8001ee8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	b2da      	uxtb	r2, r3
 8001ed6:	4908      	ldr	r1, [pc, #32]	@ (8001ef8 <__NVIC_SetPriority+0x50>)
 8001ed8:	88fb      	ldrh	r3, [r7, #6]
 8001eda:	f003 030f 	and.w	r3, r3, #15
 8001ede:	3b04      	subs	r3, #4
 8001ee0:	0112      	lsls	r2, r2, #4
 8001ee2:	b2d2      	uxtb	r2, r2
 8001ee4:	440b      	add	r3, r1
 8001ee6:	761a      	strb	r2, [r3, #24]
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	e000e100 	.word	0xe000e100
 8001ef8:	e000ed00 	.word	0xe000ed00

08001efc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b089      	sub	sp, #36	@ 0x24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	f1c3 0307 	rsb	r3, r3, #7
 8001f16:	2b04      	cmp	r3, #4
 8001f18:	bf28      	it	cs
 8001f1a:	2304      	movcs	r3, #4
 8001f1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	3304      	adds	r3, #4
 8001f22:	2b06      	cmp	r3, #6
 8001f24:	d902      	bls.n	8001f2c <NVIC_EncodePriority+0x30>
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	3b03      	subs	r3, #3
 8001f2a:	e000      	b.n	8001f2e <NVIC_EncodePriority+0x32>
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f30:	f04f 32ff 	mov.w	r2, #4294967295
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43da      	mvns	r2, r3
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	401a      	ands	r2, r3
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f44:	f04f 31ff 	mov.w	r1, #4294967295
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4e:	43d9      	mvns	r1, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f54:	4313      	orrs	r3, r2
         );
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3724      	adds	r7, #36	@ 0x24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b082      	sub	sp, #8
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7ff ff28 	bl	8001dc0 <__NVIC_SetPriorityGrouping>
}
 8001f70:	bf00      	nop
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
 8001f84:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f86:	f7ff ff3f 	bl	8001e08 <__NVIC_GetPriorityGrouping>
 8001f8a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	68b9      	ldr	r1, [r7, #8]
 8001f90:	6978      	ldr	r0, [r7, #20]
 8001f92:	f7ff ffb3 	bl	8001efc <NVIC_EncodePriority>
 8001f96:	4602      	mov	r2, r0
 8001f98:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f9c:	4611      	mov	r1, r2
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff ff82 	bl	8001ea8 <__NVIC_SetPriority>
}
 8001fa4:	bf00      	nop
 8001fa6:	3718      	adds	r7, #24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff ff32 	bl	8001e24 <__NVIC_EnableIRQ>
}
 8001fc0:	bf00      	nop
 8001fc2:	3708      	adds	r7, #8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001fd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff ff42 	bl	8001e60 <__NVIC_DisableIRQ>
}
 8001fdc:	bf00      	nop
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001fec:	f7ff fedc 	bl	8001da8 <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d101      	bne.n	8001ffc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e37d      	b.n	80026f8 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a66      	ldr	r2, [pc, #408]	@ (800219c <HAL_DMA_Init+0x1b8>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d04a      	beq.n	800209c <HAL_DMA_Init+0xb8>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a65      	ldr	r2, [pc, #404]	@ (80021a0 <HAL_DMA_Init+0x1bc>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d045      	beq.n	800209c <HAL_DMA_Init+0xb8>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a63      	ldr	r2, [pc, #396]	@ (80021a4 <HAL_DMA_Init+0x1c0>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d040      	beq.n	800209c <HAL_DMA_Init+0xb8>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a62      	ldr	r2, [pc, #392]	@ (80021a8 <HAL_DMA_Init+0x1c4>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d03b      	beq.n	800209c <HAL_DMA_Init+0xb8>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a60      	ldr	r2, [pc, #384]	@ (80021ac <HAL_DMA_Init+0x1c8>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d036      	beq.n	800209c <HAL_DMA_Init+0xb8>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a5f      	ldr	r2, [pc, #380]	@ (80021b0 <HAL_DMA_Init+0x1cc>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d031      	beq.n	800209c <HAL_DMA_Init+0xb8>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a5d      	ldr	r2, [pc, #372]	@ (80021b4 <HAL_DMA_Init+0x1d0>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d02c      	beq.n	800209c <HAL_DMA_Init+0xb8>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a5c      	ldr	r2, [pc, #368]	@ (80021b8 <HAL_DMA_Init+0x1d4>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d027      	beq.n	800209c <HAL_DMA_Init+0xb8>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a5a      	ldr	r2, [pc, #360]	@ (80021bc <HAL_DMA_Init+0x1d8>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d022      	beq.n	800209c <HAL_DMA_Init+0xb8>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a59      	ldr	r2, [pc, #356]	@ (80021c0 <HAL_DMA_Init+0x1dc>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d01d      	beq.n	800209c <HAL_DMA_Init+0xb8>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a57      	ldr	r2, [pc, #348]	@ (80021c4 <HAL_DMA_Init+0x1e0>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d018      	beq.n	800209c <HAL_DMA_Init+0xb8>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a56      	ldr	r2, [pc, #344]	@ (80021c8 <HAL_DMA_Init+0x1e4>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d013      	beq.n	800209c <HAL_DMA_Init+0xb8>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a54      	ldr	r2, [pc, #336]	@ (80021cc <HAL_DMA_Init+0x1e8>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d00e      	beq.n	800209c <HAL_DMA_Init+0xb8>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a53      	ldr	r2, [pc, #332]	@ (80021d0 <HAL_DMA_Init+0x1ec>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d009      	beq.n	800209c <HAL_DMA_Init+0xb8>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a51      	ldr	r2, [pc, #324]	@ (80021d4 <HAL_DMA_Init+0x1f0>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d004      	beq.n	800209c <HAL_DMA_Init+0xb8>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a50      	ldr	r2, [pc, #320]	@ (80021d8 <HAL_DMA_Init+0x1f4>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d101      	bne.n	80020a0 <HAL_DMA_Init+0xbc>
 800209c:	2301      	movs	r3, #1
 800209e:	e000      	b.n	80020a2 <HAL_DMA_Init+0xbe>
 80020a0:	2300      	movs	r3, #0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f000 813c 	beq.w	8002320 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2202      	movs	r2, #2
 80020ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a37      	ldr	r2, [pc, #220]	@ (800219c <HAL_DMA_Init+0x1b8>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d04a      	beq.n	8002158 <HAL_DMA_Init+0x174>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a36      	ldr	r2, [pc, #216]	@ (80021a0 <HAL_DMA_Init+0x1bc>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d045      	beq.n	8002158 <HAL_DMA_Init+0x174>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a34      	ldr	r2, [pc, #208]	@ (80021a4 <HAL_DMA_Init+0x1c0>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d040      	beq.n	8002158 <HAL_DMA_Init+0x174>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a33      	ldr	r2, [pc, #204]	@ (80021a8 <HAL_DMA_Init+0x1c4>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d03b      	beq.n	8002158 <HAL_DMA_Init+0x174>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a31      	ldr	r2, [pc, #196]	@ (80021ac <HAL_DMA_Init+0x1c8>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d036      	beq.n	8002158 <HAL_DMA_Init+0x174>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a30      	ldr	r2, [pc, #192]	@ (80021b0 <HAL_DMA_Init+0x1cc>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d031      	beq.n	8002158 <HAL_DMA_Init+0x174>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a2e      	ldr	r2, [pc, #184]	@ (80021b4 <HAL_DMA_Init+0x1d0>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d02c      	beq.n	8002158 <HAL_DMA_Init+0x174>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a2d      	ldr	r2, [pc, #180]	@ (80021b8 <HAL_DMA_Init+0x1d4>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d027      	beq.n	8002158 <HAL_DMA_Init+0x174>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a2b      	ldr	r2, [pc, #172]	@ (80021bc <HAL_DMA_Init+0x1d8>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d022      	beq.n	8002158 <HAL_DMA_Init+0x174>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a2a      	ldr	r2, [pc, #168]	@ (80021c0 <HAL_DMA_Init+0x1dc>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d01d      	beq.n	8002158 <HAL_DMA_Init+0x174>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a28      	ldr	r2, [pc, #160]	@ (80021c4 <HAL_DMA_Init+0x1e0>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d018      	beq.n	8002158 <HAL_DMA_Init+0x174>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a27      	ldr	r2, [pc, #156]	@ (80021c8 <HAL_DMA_Init+0x1e4>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d013      	beq.n	8002158 <HAL_DMA_Init+0x174>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a25      	ldr	r2, [pc, #148]	@ (80021cc <HAL_DMA_Init+0x1e8>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d00e      	beq.n	8002158 <HAL_DMA_Init+0x174>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a24      	ldr	r2, [pc, #144]	@ (80021d0 <HAL_DMA_Init+0x1ec>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d009      	beq.n	8002158 <HAL_DMA_Init+0x174>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a22      	ldr	r2, [pc, #136]	@ (80021d4 <HAL_DMA_Init+0x1f0>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d004      	beq.n	8002158 <HAL_DMA_Init+0x174>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a21      	ldr	r2, [pc, #132]	@ (80021d8 <HAL_DMA_Init+0x1f4>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d108      	bne.n	800216a <HAL_DMA_Init+0x186>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 0201 	bic.w	r2, r2, #1
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	e007      	b.n	800217a <HAL_DMA_Init+0x196>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 0201 	bic.w	r2, r2, #1
 8002178:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800217a:	e02f      	b.n	80021dc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800217c:	f7ff fe14 	bl	8001da8 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b05      	cmp	r3, #5
 8002188:	d928      	bls.n	80021dc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2220      	movs	r2, #32
 800218e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2203      	movs	r2, #3
 8002194:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e2ad      	b.n	80026f8 <HAL_DMA_Init+0x714>
 800219c:	40020010 	.word	0x40020010
 80021a0:	40020028 	.word	0x40020028
 80021a4:	40020040 	.word	0x40020040
 80021a8:	40020058 	.word	0x40020058
 80021ac:	40020070 	.word	0x40020070
 80021b0:	40020088 	.word	0x40020088
 80021b4:	400200a0 	.word	0x400200a0
 80021b8:	400200b8 	.word	0x400200b8
 80021bc:	40020410 	.word	0x40020410
 80021c0:	40020428 	.word	0x40020428
 80021c4:	40020440 	.word	0x40020440
 80021c8:	40020458 	.word	0x40020458
 80021cc:	40020470 	.word	0x40020470
 80021d0:	40020488 	.word	0x40020488
 80021d4:	400204a0 	.word	0x400204a0
 80021d8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1c8      	bne.n	800217c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	4b73      	ldr	r3, [pc, #460]	@ (80023c4 <HAL_DMA_Init+0x3e0>)
 80021f6:	4013      	ands	r3, r2
 80021f8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002202:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800220e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800221a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002222:	697a      	ldr	r2, [r7, #20]
 8002224:	4313      	orrs	r3, r2
 8002226:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800222c:	2b04      	cmp	r3, #4
 800222e:	d107      	bne.n	8002240 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002238:	4313      	orrs	r3, r2
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	4313      	orrs	r3, r2
 800223e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	2b28      	cmp	r3, #40	@ 0x28
 8002246:	d903      	bls.n	8002250 <HAL_DMA_Init+0x26c>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	2b2e      	cmp	r3, #46	@ 0x2e
 800224e:	d91f      	bls.n	8002290 <HAL_DMA_Init+0x2ac>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	2b3e      	cmp	r3, #62	@ 0x3e
 8002256:	d903      	bls.n	8002260 <HAL_DMA_Init+0x27c>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	2b42      	cmp	r3, #66	@ 0x42
 800225e:	d917      	bls.n	8002290 <HAL_DMA_Init+0x2ac>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	2b46      	cmp	r3, #70	@ 0x46
 8002266:	d903      	bls.n	8002270 <HAL_DMA_Init+0x28c>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	2b48      	cmp	r3, #72	@ 0x48
 800226e:	d90f      	bls.n	8002290 <HAL_DMA_Init+0x2ac>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2b4e      	cmp	r3, #78	@ 0x4e
 8002276:	d903      	bls.n	8002280 <HAL_DMA_Init+0x29c>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	2b52      	cmp	r3, #82	@ 0x52
 800227e:	d907      	bls.n	8002290 <HAL_DMA_Init+0x2ac>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	2b73      	cmp	r3, #115	@ 0x73
 8002286:	d905      	bls.n	8002294 <HAL_DMA_Init+0x2b0>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	2b77      	cmp	r3, #119	@ 0x77
 800228e:	d801      	bhi.n	8002294 <HAL_DMA_Init+0x2b0>
 8002290:	2301      	movs	r3, #1
 8002292:	e000      	b.n	8002296 <HAL_DMA_Init+0x2b2>
 8002294:	2300      	movs	r3, #0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d003      	beq.n	80022a2 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022a0:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	695b      	ldr	r3, [r3, #20]
 80022b0:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	f023 0307 	bic.w	r3, r3, #7
 80022b8:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022be:	697a      	ldr	r2, [r7, #20]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c8:	2b04      	cmp	r3, #4
 80022ca:	d117      	bne.n	80022fc <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022d0:	697a      	ldr	r2, [r7, #20]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00e      	beq.n	80022fc <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f002 fb5c 	bl	800499c <DMA_CheckFifoParam>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d008      	beq.n	80022fc <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2240      	movs	r2, #64	@ 0x40
 80022ee:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e1fd      	b.n	80026f8 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	697a      	ldr	r2, [r7, #20]
 8002302:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f002 fa97 	bl	8004838 <DMA_CalcBaseAndBitshift>
 800230a:	4603      	mov	r3, r0
 800230c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002312:	f003 031f 	and.w	r3, r3, #31
 8002316:	223f      	movs	r2, #63	@ 0x3f
 8002318:	409a      	lsls	r2, r3
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	609a      	str	r2, [r3, #8]
 800231e:	e0fd      	b.n	800251c <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a28      	ldr	r2, [pc, #160]	@ (80023c8 <HAL_DMA_Init+0x3e4>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d04a      	beq.n	80023c0 <HAL_DMA_Init+0x3dc>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a27      	ldr	r2, [pc, #156]	@ (80023cc <HAL_DMA_Init+0x3e8>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d045      	beq.n	80023c0 <HAL_DMA_Init+0x3dc>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a25      	ldr	r2, [pc, #148]	@ (80023d0 <HAL_DMA_Init+0x3ec>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d040      	beq.n	80023c0 <HAL_DMA_Init+0x3dc>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a24      	ldr	r2, [pc, #144]	@ (80023d4 <HAL_DMA_Init+0x3f0>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d03b      	beq.n	80023c0 <HAL_DMA_Init+0x3dc>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a22      	ldr	r2, [pc, #136]	@ (80023d8 <HAL_DMA_Init+0x3f4>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d036      	beq.n	80023c0 <HAL_DMA_Init+0x3dc>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a21      	ldr	r2, [pc, #132]	@ (80023dc <HAL_DMA_Init+0x3f8>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d031      	beq.n	80023c0 <HAL_DMA_Init+0x3dc>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a1f      	ldr	r2, [pc, #124]	@ (80023e0 <HAL_DMA_Init+0x3fc>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d02c      	beq.n	80023c0 <HAL_DMA_Init+0x3dc>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a1e      	ldr	r2, [pc, #120]	@ (80023e4 <HAL_DMA_Init+0x400>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d027      	beq.n	80023c0 <HAL_DMA_Init+0x3dc>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a1c      	ldr	r2, [pc, #112]	@ (80023e8 <HAL_DMA_Init+0x404>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d022      	beq.n	80023c0 <HAL_DMA_Init+0x3dc>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a1b      	ldr	r2, [pc, #108]	@ (80023ec <HAL_DMA_Init+0x408>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d01d      	beq.n	80023c0 <HAL_DMA_Init+0x3dc>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a19      	ldr	r2, [pc, #100]	@ (80023f0 <HAL_DMA_Init+0x40c>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d018      	beq.n	80023c0 <HAL_DMA_Init+0x3dc>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a18      	ldr	r2, [pc, #96]	@ (80023f4 <HAL_DMA_Init+0x410>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d013      	beq.n	80023c0 <HAL_DMA_Init+0x3dc>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a16      	ldr	r2, [pc, #88]	@ (80023f8 <HAL_DMA_Init+0x414>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d00e      	beq.n	80023c0 <HAL_DMA_Init+0x3dc>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a15      	ldr	r2, [pc, #84]	@ (80023fc <HAL_DMA_Init+0x418>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d009      	beq.n	80023c0 <HAL_DMA_Init+0x3dc>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a13      	ldr	r2, [pc, #76]	@ (8002400 <HAL_DMA_Init+0x41c>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d004      	beq.n	80023c0 <HAL_DMA_Init+0x3dc>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a12      	ldr	r2, [pc, #72]	@ (8002404 <HAL_DMA_Init+0x420>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d123      	bne.n	8002408 <HAL_DMA_Init+0x424>
 80023c0:	2301      	movs	r3, #1
 80023c2:	e022      	b.n	800240a <HAL_DMA_Init+0x426>
 80023c4:	fe10803f 	.word	0xfe10803f
 80023c8:	48022c08 	.word	0x48022c08
 80023cc:	48022c1c 	.word	0x48022c1c
 80023d0:	48022c30 	.word	0x48022c30
 80023d4:	48022c44 	.word	0x48022c44
 80023d8:	48022c58 	.word	0x48022c58
 80023dc:	48022c6c 	.word	0x48022c6c
 80023e0:	48022c80 	.word	0x48022c80
 80023e4:	48022c94 	.word	0x48022c94
 80023e8:	58025408 	.word	0x58025408
 80023ec:	5802541c 	.word	0x5802541c
 80023f0:	58025430 	.word	0x58025430
 80023f4:	58025444 	.word	0x58025444
 80023f8:	58025458 	.word	0x58025458
 80023fc:	5802546c 	.word	0x5802546c
 8002400:	58025480 	.word	0x58025480
 8002404:	58025494 	.word	0x58025494
 8002408:	2300      	movs	r3, #0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d07d      	beq.n	800250a <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a7f      	ldr	r2, [pc, #508]	@ (8002610 <HAL_DMA_Init+0x62c>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d021      	beq.n	800245c <HAL_DMA_Init+0x478>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a7d      	ldr	r2, [pc, #500]	@ (8002614 <HAL_DMA_Init+0x630>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d01c      	beq.n	800245c <HAL_DMA_Init+0x478>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a7c      	ldr	r2, [pc, #496]	@ (8002618 <HAL_DMA_Init+0x634>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d017      	beq.n	800245c <HAL_DMA_Init+0x478>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a7a      	ldr	r2, [pc, #488]	@ (800261c <HAL_DMA_Init+0x638>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d012      	beq.n	800245c <HAL_DMA_Init+0x478>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a79      	ldr	r2, [pc, #484]	@ (8002620 <HAL_DMA_Init+0x63c>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d00d      	beq.n	800245c <HAL_DMA_Init+0x478>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a77      	ldr	r2, [pc, #476]	@ (8002624 <HAL_DMA_Init+0x640>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d008      	beq.n	800245c <HAL_DMA_Init+0x478>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a76      	ldr	r2, [pc, #472]	@ (8002628 <HAL_DMA_Init+0x644>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d003      	beq.n	800245c <HAL_DMA_Init+0x478>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a74      	ldr	r2, [pc, #464]	@ (800262c <HAL_DMA_Init+0x648>)
 800245a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2202      	movs	r2, #2
 8002460:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002474:	697a      	ldr	r2, [r7, #20]
 8002476:	4b6e      	ldr	r3, [pc, #440]	@ (8002630 <HAL_DMA_Init+0x64c>)
 8002478:	4013      	ands	r3, r2
 800247a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	2b40      	cmp	r3, #64	@ 0x40
 8002482:	d008      	beq.n	8002496 <HAL_DMA_Init+0x4b2>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	2b80      	cmp	r3, #128	@ 0x80
 800248a:	d102      	bne.n	8002492 <HAL_DMA_Init+0x4ae>
 800248c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002490:	e002      	b.n	8002498 <HAL_DMA_Init+0x4b4>
 8002492:	2300      	movs	r3, #0
 8002494:	e000      	b.n	8002498 <HAL_DMA_Init+0x4b4>
 8002496:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	68d2      	ldr	r2, [r2, #12]
 800249c:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800249e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80024a6:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	695b      	ldr	r3, [r3, #20]
 80024ac:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80024ae:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80024b6:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	69db      	ldr	r3, [r3, #28]
 80024bc:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80024be:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80024c6:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	461a      	mov	r2, r3
 80024dc:	4b55      	ldr	r3, [pc, #340]	@ (8002634 <HAL_DMA_Init+0x650>)
 80024de:	4413      	add	r3, r2
 80024e0:	4a55      	ldr	r2, [pc, #340]	@ (8002638 <HAL_DMA_Init+0x654>)
 80024e2:	fba2 2303 	umull	r2, r3, r2, r3
 80024e6:	091b      	lsrs	r3, r3, #4
 80024e8:	009a      	lsls	r2, r3, #2
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f002 f9a2 	bl	8004838 <DMA_CalcBaseAndBitshift>
 80024f4:	4603      	mov	r3, r0
 80024f6:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024fc:	f003 031f 	and.w	r3, r3, #31
 8002500:	2201      	movs	r2, #1
 8002502:	409a      	lsls	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	605a      	str	r2, [r3, #4]
 8002508:	e008      	b.n	800251c <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2240      	movs	r2, #64	@ 0x40
 800250e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2203      	movs	r2, #3
 8002514:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e0ed      	b.n	80026f8 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a46      	ldr	r2, [pc, #280]	@ (800263c <HAL_DMA_Init+0x658>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d072      	beq.n	800260c <HAL_DMA_Init+0x628>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a45      	ldr	r2, [pc, #276]	@ (8002640 <HAL_DMA_Init+0x65c>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d06d      	beq.n	800260c <HAL_DMA_Init+0x628>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a43      	ldr	r2, [pc, #268]	@ (8002644 <HAL_DMA_Init+0x660>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d068      	beq.n	800260c <HAL_DMA_Init+0x628>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a42      	ldr	r2, [pc, #264]	@ (8002648 <HAL_DMA_Init+0x664>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d063      	beq.n	800260c <HAL_DMA_Init+0x628>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a40      	ldr	r2, [pc, #256]	@ (800264c <HAL_DMA_Init+0x668>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d05e      	beq.n	800260c <HAL_DMA_Init+0x628>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a3f      	ldr	r2, [pc, #252]	@ (8002650 <HAL_DMA_Init+0x66c>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d059      	beq.n	800260c <HAL_DMA_Init+0x628>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a3d      	ldr	r2, [pc, #244]	@ (8002654 <HAL_DMA_Init+0x670>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d054      	beq.n	800260c <HAL_DMA_Init+0x628>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a3c      	ldr	r2, [pc, #240]	@ (8002658 <HAL_DMA_Init+0x674>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d04f      	beq.n	800260c <HAL_DMA_Init+0x628>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a3a      	ldr	r2, [pc, #232]	@ (800265c <HAL_DMA_Init+0x678>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d04a      	beq.n	800260c <HAL_DMA_Init+0x628>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a39      	ldr	r2, [pc, #228]	@ (8002660 <HAL_DMA_Init+0x67c>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d045      	beq.n	800260c <HAL_DMA_Init+0x628>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a37      	ldr	r2, [pc, #220]	@ (8002664 <HAL_DMA_Init+0x680>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d040      	beq.n	800260c <HAL_DMA_Init+0x628>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a36      	ldr	r2, [pc, #216]	@ (8002668 <HAL_DMA_Init+0x684>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d03b      	beq.n	800260c <HAL_DMA_Init+0x628>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a34      	ldr	r2, [pc, #208]	@ (800266c <HAL_DMA_Init+0x688>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d036      	beq.n	800260c <HAL_DMA_Init+0x628>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a33      	ldr	r2, [pc, #204]	@ (8002670 <HAL_DMA_Init+0x68c>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d031      	beq.n	800260c <HAL_DMA_Init+0x628>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a31      	ldr	r2, [pc, #196]	@ (8002674 <HAL_DMA_Init+0x690>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d02c      	beq.n	800260c <HAL_DMA_Init+0x628>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a30      	ldr	r2, [pc, #192]	@ (8002678 <HAL_DMA_Init+0x694>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d027      	beq.n	800260c <HAL_DMA_Init+0x628>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a13      	ldr	r2, [pc, #76]	@ (8002610 <HAL_DMA_Init+0x62c>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d022      	beq.n	800260c <HAL_DMA_Init+0x628>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a12      	ldr	r2, [pc, #72]	@ (8002614 <HAL_DMA_Init+0x630>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d01d      	beq.n	800260c <HAL_DMA_Init+0x628>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a10      	ldr	r2, [pc, #64]	@ (8002618 <HAL_DMA_Init+0x634>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d018      	beq.n	800260c <HAL_DMA_Init+0x628>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a0f      	ldr	r2, [pc, #60]	@ (800261c <HAL_DMA_Init+0x638>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d013      	beq.n	800260c <HAL_DMA_Init+0x628>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002620 <HAL_DMA_Init+0x63c>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d00e      	beq.n	800260c <HAL_DMA_Init+0x628>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a0c      	ldr	r2, [pc, #48]	@ (8002624 <HAL_DMA_Init+0x640>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d009      	beq.n	800260c <HAL_DMA_Init+0x628>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a0a      	ldr	r2, [pc, #40]	@ (8002628 <HAL_DMA_Init+0x644>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d004      	beq.n	800260c <HAL_DMA_Init+0x628>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a09      	ldr	r2, [pc, #36]	@ (800262c <HAL_DMA_Init+0x648>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d137      	bne.n	800267c <HAL_DMA_Init+0x698>
 800260c:	2301      	movs	r3, #1
 800260e:	e036      	b.n	800267e <HAL_DMA_Init+0x69a>
 8002610:	58025408 	.word	0x58025408
 8002614:	5802541c 	.word	0x5802541c
 8002618:	58025430 	.word	0x58025430
 800261c:	58025444 	.word	0x58025444
 8002620:	58025458 	.word	0x58025458
 8002624:	5802546c 	.word	0x5802546c
 8002628:	58025480 	.word	0x58025480
 800262c:	58025494 	.word	0x58025494
 8002630:	fffe000f 	.word	0xfffe000f
 8002634:	a7fdabf8 	.word	0xa7fdabf8
 8002638:	cccccccd 	.word	0xcccccccd
 800263c:	40020010 	.word	0x40020010
 8002640:	40020028 	.word	0x40020028
 8002644:	40020040 	.word	0x40020040
 8002648:	40020058 	.word	0x40020058
 800264c:	40020070 	.word	0x40020070
 8002650:	40020088 	.word	0x40020088
 8002654:	400200a0 	.word	0x400200a0
 8002658:	400200b8 	.word	0x400200b8
 800265c:	40020410 	.word	0x40020410
 8002660:	40020428 	.word	0x40020428
 8002664:	40020440 	.word	0x40020440
 8002668:	40020458 	.word	0x40020458
 800266c:	40020470 	.word	0x40020470
 8002670:	40020488 	.word	0x40020488
 8002674:	400204a0 	.word	0x400204a0
 8002678:	400204b8 	.word	0x400204b8
 800267c:	2300      	movs	r3, #0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d032      	beq.n	80026e8 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f002 fa06 	bl	8004a94 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	2b80      	cmp	r3, #128	@ 0x80
 800268e:	d102      	bne.n	8002696 <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800269e:	b2d2      	uxtb	r2, r2
 80026a0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80026aa:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d010      	beq.n	80026d6 <HAL_DMA_Init+0x6f2>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	2b08      	cmp	r3, #8
 80026ba:	d80c      	bhi.n	80026d6 <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f002 fa83 	bl	8004bc8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026c6:	2200      	movs	r2, #0
 80026c8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80026d2:	605a      	str	r2, [r3, #4]
 80026d4:	e008      	b.n	80026e8 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3718      	adds	r7, #24
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e27e      	b.n	8002c10 <HAL_DMA_DeInit+0x510>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a6d      	ldr	r2, [pc, #436]	@ (80028cc <HAL_DMA_DeInit+0x1cc>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d04a      	beq.n	80027b2 <HAL_DMA_DeInit+0xb2>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a6b      	ldr	r2, [pc, #428]	@ (80028d0 <HAL_DMA_DeInit+0x1d0>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d045      	beq.n	80027b2 <HAL_DMA_DeInit+0xb2>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a6a      	ldr	r2, [pc, #424]	@ (80028d4 <HAL_DMA_DeInit+0x1d4>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d040      	beq.n	80027b2 <HAL_DMA_DeInit+0xb2>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a68      	ldr	r2, [pc, #416]	@ (80028d8 <HAL_DMA_DeInit+0x1d8>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d03b      	beq.n	80027b2 <HAL_DMA_DeInit+0xb2>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a67      	ldr	r2, [pc, #412]	@ (80028dc <HAL_DMA_DeInit+0x1dc>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d036      	beq.n	80027b2 <HAL_DMA_DeInit+0xb2>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a65      	ldr	r2, [pc, #404]	@ (80028e0 <HAL_DMA_DeInit+0x1e0>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d031      	beq.n	80027b2 <HAL_DMA_DeInit+0xb2>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a64      	ldr	r2, [pc, #400]	@ (80028e4 <HAL_DMA_DeInit+0x1e4>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d02c      	beq.n	80027b2 <HAL_DMA_DeInit+0xb2>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a62      	ldr	r2, [pc, #392]	@ (80028e8 <HAL_DMA_DeInit+0x1e8>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d027      	beq.n	80027b2 <HAL_DMA_DeInit+0xb2>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a61      	ldr	r2, [pc, #388]	@ (80028ec <HAL_DMA_DeInit+0x1ec>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d022      	beq.n	80027b2 <HAL_DMA_DeInit+0xb2>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a5f      	ldr	r2, [pc, #380]	@ (80028f0 <HAL_DMA_DeInit+0x1f0>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d01d      	beq.n	80027b2 <HAL_DMA_DeInit+0xb2>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a5e      	ldr	r2, [pc, #376]	@ (80028f4 <HAL_DMA_DeInit+0x1f4>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d018      	beq.n	80027b2 <HAL_DMA_DeInit+0xb2>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a5c      	ldr	r2, [pc, #368]	@ (80028f8 <HAL_DMA_DeInit+0x1f8>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d013      	beq.n	80027b2 <HAL_DMA_DeInit+0xb2>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a5b      	ldr	r2, [pc, #364]	@ (80028fc <HAL_DMA_DeInit+0x1fc>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d00e      	beq.n	80027b2 <HAL_DMA_DeInit+0xb2>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a59      	ldr	r2, [pc, #356]	@ (8002900 <HAL_DMA_DeInit+0x200>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d009      	beq.n	80027b2 <HAL_DMA_DeInit+0xb2>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a58      	ldr	r2, [pc, #352]	@ (8002904 <HAL_DMA_DeInit+0x204>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d004      	beq.n	80027b2 <HAL_DMA_DeInit+0xb2>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a56      	ldr	r2, [pc, #344]	@ (8002908 <HAL_DMA_DeInit+0x208>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d108      	bne.n	80027c4 <HAL_DMA_DeInit+0xc4>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 0201 	bic.w	r2, r2, #1
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	e007      	b.n	80027d4 <HAL_DMA_DeInit+0xd4>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f022 0201 	bic.w	r2, r2, #1
 80027d2:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a3c      	ldr	r2, [pc, #240]	@ (80028cc <HAL_DMA_DeInit+0x1cc>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d04a      	beq.n	8002874 <HAL_DMA_DeInit+0x174>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a3b      	ldr	r2, [pc, #236]	@ (80028d0 <HAL_DMA_DeInit+0x1d0>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d045      	beq.n	8002874 <HAL_DMA_DeInit+0x174>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a39      	ldr	r2, [pc, #228]	@ (80028d4 <HAL_DMA_DeInit+0x1d4>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d040      	beq.n	8002874 <HAL_DMA_DeInit+0x174>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a38      	ldr	r2, [pc, #224]	@ (80028d8 <HAL_DMA_DeInit+0x1d8>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d03b      	beq.n	8002874 <HAL_DMA_DeInit+0x174>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a36      	ldr	r2, [pc, #216]	@ (80028dc <HAL_DMA_DeInit+0x1dc>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d036      	beq.n	8002874 <HAL_DMA_DeInit+0x174>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a35      	ldr	r2, [pc, #212]	@ (80028e0 <HAL_DMA_DeInit+0x1e0>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d031      	beq.n	8002874 <HAL_DMA_DeInit+0x174>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a33      	ldr	r2, [pc, #204]	@ (80028e4 <HAL_DMA_DeInit+0x1e4>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d02c      	beq.n	8002874 <HAL_DMA_DeInit+0x174>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a32      	ldr	r2, [pc, #200]	@ (80028e8 <HAL_DMA_DeInit+0x1e8>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d027      	beq.n	8002874 <HAL_DMA_DeInit+0x174>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a30      	ldr	r2, [pc, #192]	@ (80028ec <HAL_DMA_DeInit+0x1ec>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d022      	beq.n	8002874 <HAL_DMA_DeInit+0x174>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a2f      	ldr	r2, [pc, #188]	@ (80028f0 <HAL_DMA_DeInit+0x1f0>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d01d      	beq.n	8002874 <HAL_DMA_DeInit+0x174>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a2d      	ldr	r2, [pc, #180]	@ (80028f4 <HAL_DMA_DeInit+0x1f4>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d018      	beq.n	8002874 <HAL_DMA_DeInit+0x174>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a2c      	ldr	r2, [pc, #176]	@ (80028f8 <HAL_DMA_DeInit+0x1f8>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d013      	beq.n	8002874 <HAL_DMA_DeInit+0x174>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a2a      	ldr	r2, [pc, #168]	@ (80028fc <HAL_DMA_DeInit+0x1fc>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d00e      	beq.n	8002874 <HAL_DMA_DeInit+0x174>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a29      	ldr	r2, [pc, #164]	@ (8002900 <HAL_DMA_DeInit+0x200>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d009      	beq.n	8002874 <HAL_DMA_DeInit+0x174>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a27      	ldr	r2, [pc, #156]	@ (8002904 <HAL_DMA_DeInit+0x204>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d004      	beq.n	8002874 <HAL_DMA_DeInit+0x174>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a26      	ldr	r2, [pc, #152]	@ (8002908 <HAL_DMA_DeInit+0x208>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d101      	bne.n	8002878 <HAL_DMA_DeInit+0x178>
 8002874:	2301      	movs	r3, #1
 8002876:	e000      	b.n	800287a <HAL_DMA_DeInit+0x17a>
 8002878:	2300      	movs	r3, #0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d046      	beq.n	800290c <HAL_DMA_DeInit+0x20c>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2200      	movs	r2, #0
 8002884:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2200      	movs	r2, #0
 800288c:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2200      	movs	r2, #0
 8002894:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2200      	movs	r2, #0
 800289c:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2200      	movs	r2, #0
 80028a4:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2221      	movs	r2, #33	@ 0x21
 80028ac:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f001 ffc2 	bl	8004838 <DMA_CalcBaseAndBitshift>
 80028b4:	4603      	mov	r3, r0
 80028b6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028bc:	f003 031f 	and.w	r3, r3, #31
 80028c0:	223f      	movs	r2, #63	@ 0x3f
 80028c2:	409a      	lsls	r2, r3
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	609a      	str	r2, [r3, #8]
 80028c8:	e099      	b.n	80029fe <HAL_DMA_DeInit+0x2fe>
 80028ca:	bf00      	nop
 80028cc:	40020010 	.word	0x40020010
 80028d0:	40020028 	.word	0x40020028
 80028d4:	40020040 	.word	0x40020040
 80028d8:	40020058 	.word	0x40020058
 80028dc:	40020070 	.word	0x40020070
 80028e0:	40020088 	.word	0x40020088
 80028e4:	400200a0 	.word	0x400200a0
 80028e8:	400200b8 	.word	0x400200b8
 80028ec:	40020410 	.word	0x40020410
 80028f0:	40020428 	.word	0x40020428
 80028f4:	40020440 	.word	0x40020440
 80028f8:	40020458 	.word	0x40020458
 80028fc:	40020470 	.word	0x40020470
 8002900:	40020488 	.word	0x40020488
 8002904:	400204a0 	.word	0x400204a0
 8002908:	400204b8 	.word	0x400204b8
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a78      	ldr	r2, [pc, #480]	@ (8002af4 <HAL_DMA_DeInit+0x3f4>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d04a      	beq.n	80029ac <HAL_DMA_DeInit+0x2ac>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a77      	ldr	r2, [pc, #476]	@ (8002af8 <HAL_DMA_DeInit+0x3f8>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d045      	beq.n	80029ac <HAL_DMA_DeInit+0x2ac>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a75      	ldr	r2, [pc, #468]	@ (8002afc <HAL_DMA_DeInit+0x3fc>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d040      	beq.n	80029ac <HAL_DMA_DeInit+0x2ac>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a74      	ldr	r2, [pc, #464]	@ (8002b00 <HAL_DMA_DeInit+0x400>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d03b      	beq.n	80029ac <HAL_DMA_DeInit+0x2ac>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a72      	ldr	r2, [pc, #456]	@ (8002b04 <HAL_DMA_DeInit+0x404>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d036      	beq.n	80029ac <HAL_DMA_DeInit+0x2ac>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a71      	ldr	r2, [pc, #452]	@ (8002b08 <HAL_DMA_DeInit+0x408>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d031      	beq.n	80029ac <HAL_DMA_DeInit+0x2ac>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a6f      	ldr	r2, [pc, #444]	@ (8002b0c <HAL_DMA_DeInit+0x40c>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d02c      	beq.n	80029ac <HAL_DMA_DeInit+0x2ac>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a6e      	ldr	r2, [pc, #440]	@ (8002b10 <HAL_DMA_DeInit+0x410>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d027      	beq.n	80029ac <HAL_DMA_DeInit+0x2ac>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a6c      	ldr	r2, [pc, #432]	@ (8002b14 <HAL_DMA_DeInit+0x414>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d022      	beq.n	80029ac <HAL_DMA_DeInit+0x2ac>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a6b      	ldr	r2, [pc, #428]	@ (8002b18 <HAL_DMA_DeInit+0x418>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d01d      	beq.n	80029ac <HAL_DMA_DeInit+0x2ac>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a69      	ldr	r2, [pc, #420]	@ (8002b1c <HAL_DMA_DeInit+0x41c>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d018      	beq.n	80029ac <HAL_DMA_DeInit+0x2ac>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a68      	ldr	r2, [pc, #416]	@ (8002b20 <HAL_DMA_DeInit+0x420>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d013      	beq.n	80029ac <HAL_DMA_DeInit+0x2ac>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a66      	ldr	r2, [pc, #408]	@ (8002b24 <HAL_DMA_DeInit+0x424>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d00e      	beq.n	80029ac <HAL_DMA_DeInit+0x2ac>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a65      	ldr	r2, [pc, #404]	@ (8002b28 <HAL_DMA_DeInit+0x428>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d009      	beq.n	80029ac <HAL_DMA_DeInit+0x2ac>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a63      	ldr	r2, [pc, #396]	@ (8002b2c <HAL_DMA_DeInit+0x42c>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d004      	beq.n	80029ac <HAL_DMA_DeInit+0x2ac>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a62      	ldr	r2, [pc, #392]	@ (8002b30 <HAL_DMA_DeInit+0x430>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d101      	bne.n	80029b0 <HAL_DMA_DeInit+0x2b0>
 80029ac:	2301      	movs	r3, #1
 80029ae:	e000      	b.n	80029b2 <HAL_DMA_DeInit+0x2b2>
 80029b0:	2300      	movs	r3, #0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d021      	beq.n	80029fa <HAL_DMA_DeInit+0x2fa>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2200      	movs	r2, #0
 80029bc:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2200      	movs	r2, #0
 80029c4:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2200      	movs	r2, #0
 80029cc:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2200      	movs	r2, #0
 80029d4:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2200      	movs	r2, #0
 80029dc:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f001 ff2a 	bl	8004838 <DMA_CalcBaseAndBitshift>
 80029e4:	4603      	mov	r3, r0
 80029e6:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ec:	f003 031f 	and.w	r3, r3, #31
 80029f0:	2201      	movs	r2, #1
 80029f2:	409a      	lsls	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	605a      	str	r2, [r3, #4]
 80029f8:	e001      	b.n	80029fe <HAL_DMA_DeInit+0x2fe>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e108      	b.n	8002c10 <HAL_DMA_DeInit+0x510>
  }

#if defined (BDMA1) /* No DMAMUX available for BDMA1 available on  STM32H7Ax/Bx devices only */
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a4c      	ldr	r2, [pc, #304]	@ (8002b34 <HAL_DMA_DeInit+0x434>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d072      	beq.n	8002aee <HAL_DMA_DeInit+0x3ee>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a4a      	ldr	r2, [pc, #296]	@ (8002b38 <HAL_DMA_DeInit+0x438>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d06d      	beq.n	8002aee <HAL_DMA_DeInit+0x3ee>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a49      	ldr	r2, [pc, #292]	@ (8002b3c <HAL_DMA_DeInit+0x43c>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d068      	beq.n	8002aee <HAL_DMA_DeInit+0x3ee>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a47      	ldr	r2, [pc, #284]	@ (8002b40 <HAL_DMA_DeInit+0x440>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d063      	beq.n	8002aee <HAL_DMA_DeInit+0x3ee>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a46      	ldr	r2, [pc, #280]	@ (8002b44 <HAL_DMA_DeInit+0x444>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d05e      	beq.n	8002aee <HAL_DMA_DeInit+0x3ee>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a44      	ldr	r2, [pc, #272]	@ (8002b48 <HAL_DMA_DeInit+0x448>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d059      	beq.n	8002aee <HAL_DMA_DeInit+0x3ee>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a43      	ldr	r2, [pc, #268]	@ (8002b4c <HAL_DMA_DeInit+0x44c>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d054      	beq.n	8002aee <HAL_DMA_DeInit+0x3ee>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a41      	ldr	r2, [pc, #260]	@ (8002b50 <HAL_DMA_DeInit+0x450>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d04f      	beq.n	8002aee <HAL_DMA_DeInit+0x3ee>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a40      	ldr	r2, [pc, #256]	@ (8002b54 <HAL_DMA_DeInit+0x454>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d04a      	beq.n	8002aee <HAL_DMA_DeInit+0x3ee>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a3e      	ldr	r2, [pc, #248]	@ (8002b58 <HAL_DMA_DeInit+0x458>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d045      	beq.n	8002aee <HAL_DMA_DeInit+0x3ee>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a3d      	ldr	r2, [pc, #244]	@ (8002b5c <HAL_DMA_DeInit+0x45c>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d040      	beq.n	8002aee <HAL_DMA_DeInit+0x3ee>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a3b      	ldr	r2, [pc, #236]	@ (8002b60 <HAL_DMA_DeInit+0x460>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d03b      	beq.n	8002aee <HAL_DMA_DeInit+0x3ee>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a3a      	ldr	r2, [pc, #232]	@ (8002b64 <HAL_DMA_DeInit+0x464>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d036      	beq.n	8002aee <HAL_DMA_DeInit+0x3ee>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a38      	ldr	r2, [pc, #224]	@ (8002b68 <HAL_DMA_DeInit+0x468>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d031      	beq.n	8002aee <HAL_DMA_DeInit+0x3ee>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a37      	ldr	r2, [pc, #220]	@ (8002b6c <HAL_DMA_DeInit+0x46c>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d02c      	beq.n	8002aee <HAL_DMA_DeInit+0x3ee>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a35      	ldr	r2, [pc, #212]	@ (8002b70 <HAL_DMA_DeInit+0x470>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d027      	beq.n	8002aee <HAL_DMA_DeInit+0x3ee>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a1c      	ldr	r2, [pc, #112]	@ (8002b14 <HAL_DMA_DeInit+0x414>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d022      	beq.n	8002aee <HAL_DMA_DeInit+0x3ee>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a1a      	ldr	r2, [pc, #104]	@ (8002b18 <HAL_DMA_DeInit+0x418>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d01d      	beq.n	8002aee <HAL_DMA_DeInit+0x3ee>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a19      	ldr	r2, [pc, #100]	@ (8002b1c <HAL_DMA_DeInit+0x41c>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d018      	beq.n	8002aee <HAL_DMA_DeInit+0x3ee>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a17      	ldr	r2, [pc, #92]	@ (8002b20 <HAL_DMA_DeInit+0x420>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d013      	beq.n	8002aee <HAL_DMA_DeInit+0x3ee>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a16      	ldr	r2, [pc, #88]	@ (8002b24 <HAL_DMA_DeInit+0x424>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d00e      	beq.n	8002aee <HAL_DMA_DeInit+0x3ee>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a14      	ldr	r2, [pc, #80]	@ (8002b28 <HAL_DMA_DeInit+0x428>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d009      	beq.n	8002aee <HAL_DMA_DeInit+0x3ee>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a13      	ldr	r2, [pc, #76]	@ (8002b2c <HAL_DMA_DeInit+0x42c>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d004      	beq.n	8002aee <HAL_DMA_DeInit+0x3ee>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a11      	ldr	r2, [pc, #68]	@ (8002b30 <HAL_DMA_DeInit+0x430>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d142      	bne.n	8002b74 <HAL_DMA_DeInit+0x474>
 8002aee:	2301      	movs	r3, #1
 8002af0:	e041      	b.n	8002b76 <HAL_DMA_DeInit+0x476>
 8002af2:	bf00      	nop
 8002af4:	48022c08 	.word	0x48022c08
 8002af8:	48022c1c 	.word	0x48022c1c
 8002afc:	48022c30 	.word	0x48022c30
 8002b00:	48022c44 	.word	0x48022c44
 8002b04:	48022c58 	.word	0x48022c58
 8002b08:	48022c6c 	.word	0x48022c6c
 8002b0c:	48022c80 	.word	0x48022c80
 8002b10:	48022c94 	.word	0x48022c94
 8002b14:	58025408 	.word	0x58025408
 8002b18:	5802541c 	.word	0x5802541c
 8002b1c:	58025430 	.word	0x58025430
 8002b20:	58025444 	.word	0x58025444
 8002b24:	58025458 	.word	0x58025458
 8002b28:	5802546c 	.word	0x5802546c
 8002b2c:	58025480 	.word	0x58025480
 8002b30:	58025494 	.word	0x58025494
 8002b34:	40020010 	.word	0x40020010
 8002b38:	40020028 	.word	0x40020028
 8002b3c:	40020040 	.word	0x40020040
 8002b40:	40020058 	.word	0x40020058
 8002b44:	40020070 	.word	0x40020070
 8002b48:	40020088 	.word	0x40020088
 8002b4c:	400200a0 	.word	0x400200a0
 8002b50:	400200b8 	.word	0x400200b8
 8002b54:	40020410 	.word	0x40020410
 8002b58:	40020428 	.word	0x40020428
 8002b5c:	40020440 	.word	0x40020440
 8002b60:	40020458 	.word	0x40020458
 8002b64:	40020470 	.word	0x40020470
 8002b68:	40020488 	.word	0x40020488
 8002b6c:	400204a0 	.word	0x400204a0
 8002b70:	400204b8 	.word	0x400204b8
 8002b74:	2300      	movs	r3, #0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d02c      	beq.n	8002bd4 <HAL_DMA_DeInit+0x4d4>
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f001 ff8a 	bl	8004a94 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d008      	beq.n	8002b9a <HAL_DMA_DeInit+0x49a>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002b98:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00f      	beq.n	8002bc2 <HAL_DMA_DeInit+0x4c2>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	2b08      	cmp	r3, #8
 8002ba8:	d80b      	bhi.n	8002bc2 <HAL_DMA_DeInit+0x4c2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f002 f80c 	bl	8004bc8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002bc0:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	671a      	str	r2, [r3, #112]	@ 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	675a      	str	r2, [r3, #116]	@ 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback     = NULL;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback      = NULL;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback      = NULL;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
 8002c24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c26:	2300      	movs	r3, #0
 8002c28:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e226      	b.n	8003082 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d101      	bne.n	8002c42 <HAL_DMA_Start_IT+0x2a>
 8002c3e:	2302      	movs	r3, #2
 8002c40:	e21f      	b.n	8003082 <HAL_DMA_Start_IT+0x46a>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	f040 820a 	bne.w	800306c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2200      	movs	r2, #0
 8002c64:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a68      	ldr	r2, [pc, #416]	@ (8002e0c <HAL_DMA_Start_IT+0x1f4>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d04a      	beq.n	8002d06 <HAL_DMA_Start_IT+0xee>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a66      	ldr	r2, [pc, #408]	@ (8002e10 <HAL_DMA_Start_IT+0x1f8>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d045      	beq.n	8002d06 <HAL_DMA_Start_IT+0xee>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a65      	ldr	r2, [pc, #404]	@ (8002e14 <HAL_DMA_Start_IT+0x1fc>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d040      	beq.n	8002d06 <HAL_DMA_Start_IT+0xee>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a63      	ldr	r2, [pc, #396]	@ (8002e18 <HAL_DMA_Start_IT+0x200>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d03b      	beq.n	8002d06 <HAL_DMA_Start_IT+0xee>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a62      	ldr	r2, [pc, #392]	@ (8002e1c <HAL_DMA_Start_IT+0x204>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d036      	beq.n	8002d06 <HAL_DMA_Start_IT+0xee>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a60      	ldr	r2, [pc, #384]	@ (8002e20 <HAL_DMA_Start_IT+0x208>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d031      	beq.n	8002d06 <HAL_DMA_Start_IT+0xee>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a5f      	ldr	r2, [pc, #380]	@ (8002e24 <HAL_DMA_Start_IT+0x20c>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d02c      	beq.n	8002d06 <HAL_DMA_Start_IT+0xee>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a5d      	ldr	r2, [pc, #372]	@ (8002e28 <HAL_DMA_Start_IT+0x210>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d027      	beq.n	8002d06 <HAL_DMA_Start_IT+0xee>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a5c      	ldr	r2, [pc, #368]	@ (8002e2c <HAL_DMA_Start_IT+0x214>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d022      	beq.n	8002d06 <HAL_DMA_Start_IT+0xee>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a5a      	ldr	r2, [pc, #360]	@ (8002e30 <HAL_DMA_Start_IT+0x218>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d01d      	beq.n	8002d06 <HAL_DMA_Start_IT+0xee>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a59      	ldr	r2, [pc, #356]	@ (8002e34 <HAL_DMA_Start_IT+0x21c>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d018      	beq.n	8002d06 <HAL_DMA_Start_IT+0xee>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a57      	ldr	r2, [pc, #348]	@ (8002e38 <HAL_DMA_Start_IT+0x220>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d013      	beq.n	8002d06 <HAL_DMA_Start_IT+0xee>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a56      	ldr	r2, [pc, #344]	@ (8002e3c <HAL_DMA_Start_IT+0x224>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d00e      	beq.n	8002d06 <HAL_DMA_Start_IT+0xee>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a54      	ldr	r2, [pc, #336]	@ (8002e40 <HAL_DMA_Start_IT+0x228>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d009      	beq.n	8002d06 <HAL_DMA_Start_IT+0xee>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a53      	ldr	r2, [pc, #332]	@ (8002e44 <HAL_DMA_Start_IT+0x22c>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d004      	beq.n	8002d06 <HAL_DMA_Start_IT+0xee>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a51      	ldr	r2, [pc, #324]	@ (8002e48 <HAL_DMA_Start_IT+0x230>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d108      	bne.n	8002d18 <HAL_DMA_Start_IT+0x100>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 0201 	bic.w	r2, r2, #1
 8002d14:	601a      	str	r2, [r3, #0]
 8002d16:	e007      	b.n	8002d28 <HAL_DMA_Start_IT+0x110>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f022 0201 	bic.w	r2, r2, #1
 8002d26:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	68b9      	ldr	r1, [r7, #8]
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f001 fb9e 	bl	8004470 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a34      	ldr	r2, [pc, #208]	@ (8002e0c <HAL_DMA_Start_IT+0x1f4>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d04a      	beq.n	8002dd4 <HAL_DMA_Start_IT+0x1bc>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a33      	ldr	r2, [pc, #204]	@ (8002e10 <HAL_DMA_Start_IT+0x1f8>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d045      	beq.n	8002dd4 <HAL_DMA_Start_IT+0x1bc>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a31      	ldr	r2, [pc, #196]	@ (8002e14 <HAL_DMA_Start_IT+0x1fc>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d040      	beq.n	8002dd4 <HAL_DMA_Start_IT+0x1bc>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a30      	ldr	r2, [pc, #192]	@ (8002e18 <HAL_DMA_Start_IT+0x200>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d03b      	beq.n	8002dd4 <HAL_DMA_Start_IT+0x1bc>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a2e      	ldr	r2, [pc, #184]	@ (8002e1c <HAL_DMA_Start_IT+0x204>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d036      	beq.n	8002dd4 <HAL_DMA_Start_IT+0x1bc>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a2d      	ldr	r2, [pc, #180]	@ (8002e20 <HAL_DMA_Start_IT+0x208>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d031      	beq.n	8002dd4 <HAL_DMA_Start_IT+0x1bc>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a2b      	ldr	r2, [pc, #172]	@ (8002e24 <HAL_DMA_Start_IT+0x20c>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d02c      	beq.n	8002dd4 <HAL_DMA_Start_IT+0x1bc>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a2a      	ldr	r2, [pc, #168]	@ (8002e28 <HAL_DMA_Start_IT+0x210>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d027      	beq.n	8002dd4 <HAL_DMA_Start_IT+0x1bc>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a28      	ldr	r2, [pc, #160]	@ (8002e2c <HAL_DMA_Start_IT+0x214>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d022      	beq.n	8002dd4 <HAL_DMA_Start_IT+0x1bc>
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a27      	ldr	r2, [pc, #156]	@ (8002e30 <HAL_DMA_Start_IT+0x218>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d01d      	beq.n	8002dd4 <HAL_DMA_Start_IT+0x1bc>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a25      	ldr	r2, [pc, #148]	@ (8002e34 <HAL_DMA_Start_IT+0x21c>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d018      	beq.n	8002dd4 <HAL_DMA_Start_IT+0x1bc>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a24      	ldr	r2, [pc, #144]	@ (8002e38 <HAL_DMA_Start_IT+0x220>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d013      	beq.n	8002dd4 <HAL_DMA_Start_IT+0x1bc>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a22      	ldr	r2, [pc, #136]	@ (8002e3c <HAL_DMA_Start_IT+0x224>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d00e      	beq.n	8002dd4 <HAL_DMA_Start_IT+0x1bc>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a21      	ldr	r2, [pc, #132]	@ (8002e40 <HAL_DMA_Start_IT+0x228>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d009      	beq.n	8002dd4 <HAL_DMA_Start_IT+0x1bc>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a1f      	ldr	r2, [pc, #124]	@ (8002e44 <HAL_DMA_Start_IT+0x22c>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d004      	beq.n	8002dd4 <HAL_DMA_Start_IT+0x1bc>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a1e      	ldr	r2, [pc, #120]	@ (8002e48 <HAL_DMA_Start_IT+0x230>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d101      	bne.n	8002dd8 <HAL_DMA_Start_IT+0x1c0>
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e000      	b.n	8002dda <HAL_DMA_Start_IT+0x1c2>
 8002dd8:	2300      	movs	r3, #0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d036      	beq.n	8002e4c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f023 021e 	bic.w	r2, r3, #30
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f042 0216 	orr.w	r2, r2, #22
 8002df0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d03e      	beq.n	8002e78 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f042 0208 	orr.w	r2, r2, #8
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	e035      	b.n	8002e78 <HAL_DMA_Start_IT+0x260>
 8002e0c:	40020010 	.word	0x40020010
 8002e10:	40020028 	.word	0x40020028
 8002e14:	40020040 	.word	0x40020040
 8002e18:	40020058 	.word	0x40020058
 8002e1c:	40020070 	.word	0x40020070
 8002e20:	40020088 	.word	0x40020088
 8002e24:	400200a0 	.word	0x400200a0
 8002e28:	400200b8 	.word	0x400200b8
 8002e2c:	40020410 	.word	0x40020410
 8002e30:	40020428 	.word	0x40020428
 8002e34:	40020440 	.word	0x40020440
 8002e38:	40020458 	.word	0x40020458
 8002e3c:	40020470 	.word	0x40020470
 8002e40:	40020488 	.word	0x40020488
 8002e44:	400204a0 	.word	0x400204a0
 8002e48:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f023 020e 	bic.w	r2, r3, #14
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 020a 	orr.w	r2, r2, #10
 8002e5e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d007      	beq.n	8002e78 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f042 0204 	orr.w	r2, r2, #4
 8002e76:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a83      	ldr	r2, [pc, #524]	@ (800308c <HAL_DMA_Start_IT+0x474>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d072      	beq.n	8002f68 <HAL_DMA_Start_IT+0x350>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a82      	ldr	r2, [pc, #520]	@ (8003090 <HAL_DMA_Start_IT+0x478>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d06d      	beq.n	8002f68 <HAL_DMA_Start_IT+0x350>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a80      	ldr	r2, [pc, #512]	@ (8003094 <HAL_DMA_Start_IT+0x47c>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d068      	beq.n	8002f68 <HAL_DMA_Start_IT+0x350>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a7f      	ldr	r2, [pc, #508]	@ (8003098 <HAL_DMA_Start_IT+0x480>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d063      	beq.n	8002f68 <HAL_DMA_Start_IT+0x350>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a7d      	ldr	r2, [pc, #500]	@ (800309c <HAL_DMA_Start_IT+0x484>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d05e      	beq.n	8002f68 <HAL_DMA_Start_IT+0x350>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a7c      	ldr	r2, [pc, #496]	@ (80030a0 <HAL_DMA_Start_IT+0x488>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d059      	beq.n	8002f68 <HAL_DMA_Start_IT+0x350>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a7a      	ldr	r2, [pc, #488]	@ (80030a4 <HAL_DMA_Start_IT+0x48c>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d054      	beq.n	8002f68 <HAL_DMA_Start_IT+0x350>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a79      	ldr	r2, [pc, #484]	@ (80030a8 <HAL_DMA_Start_IT+0x490>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d04f      	beq.n	8002f68 <HAL_DMA_Start_IT+0x350>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a77      	ldr	r2, [pc, #476]	@ (80030ac <HAL_DMA_Start_IT+0x494>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d04a      	beq.n	8002f68 <HAL_DMA_Start_IT+0x350>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a76      	ldr	r2, [pc, #472]	@ (80030b0 <HAL_DMA_Start_IT+0x498>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d045      	beq.n	8002f68 <HAL_DMA_Start_IT+0x350>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a74      	ldr	r2, [pc, #464]	@ (80030b4 <HAL_DMA_Start_IT+0x49c>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d040      	beq.n	8002f68 <HAL_DMA_Start_IT+0x350>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a73      	ldr	r2, [pc, #460]	@ (80030b8 <HAL_DMA_Start_IT+0x4a0>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d03b      	beq.n	8002f68 <HAL_DMA_Start_IT+0x350>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a71      	ldr	r2, [pc, #452]	@ (80030bc <HAL_DMA_Start_IT+0x4a4>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d036      	beq.n	8002f68 <HAL_DMA_Start_IT+0x350>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a70      	ldr	r2, [pc, #448]	@ (80030c0 <HAL_DMA_Start_IT+0x4a8>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d031      	beq.n	8002f68 <HAL_DMA_Start_IT+0x350>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a6e      	ldr	r2, [pc, #440]	@ (80030c4 <HAL_DMA_Start_IT+0x4ac>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d02c      	beq.n	8002f68 <HAL_DMA_Start_IT+0x350>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a6d      	ldr	r2, [pc, #436]	@ (80030c8 <HAL_DMA_Start_IT+0x4b0>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d027      	beq.n	8002f68 <HAL_DMA_Start_IT+0x350>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a6b      	ldr	r2, [pc, #428]	@ (80030cc <HAL_DMA_Start_IT+0x4b4>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d022      	beq.n	8002f68 <HAL_DMA_Start_IT+0x350>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a6a      	ldr	r2, [pc, #424]	@ (80030d0 <HAL_DMA_Start_IT+0x4b8>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d01d      	beq.n	8002f68 <HAL_DMA_Start_IT+0x350>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a68      	ldr	r2, [pc, #416]	@ (80030d4 <HAL_DMA_Start_IT+0x4bc>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d018      	beq.n	8002f68 <HAL_DMA_Start_IT+0x350>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a67      	ldr	r2, [pc, #412]	@ (80030d8 <HAL_DMA_Start_IT+0x4c0>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d013      	beq.n	8002f68 <HAL_DMA_Start_IT+0x350>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a65      	ldr	r2, [pc, #404]	@ (80030dc <HAL_DMA_Start_IT+0x4c4>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d00e      	beq.n	8002f68 <HAL_DMA_Start_IT+0x350>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a64      	ldr	r2, [pc, #400]	@ (80030e0 <HAL_DMA_Start_IT+0x4c8>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d009      	beq.n	8002f68 <HAL_DMA_Start_IT+0x350>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a62      	ldr	r2, [pc, #392]	@ (80030e4 <HAL_DMA_Start_IT+0x4cc>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d004      	beq.n	8002f68 <HAL_DMA_Start_IT+0x350>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a61      	ldr	r2, [pc, #388]	@ (80030e8 <HAL_DMA_Start_IT+0x4d0>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d101      	bne.n	8002f6c <HAL_DMA_Start_IT+0x354>
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e000      	b.n	8002f6e <HAL_DMA_Start_IT+0x356>
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d01a      	beq.n	8002fa8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d007      	beq.n	8002f90 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f8a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f8e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d007      	beq.n	8002fa8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002fa2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fa6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a37      	ldr	r2, [pc, #220]	@ (800308c <HAL_DMA_Start_IT+0x474>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d04a      	beq.n	8003048 <HAL_DMA_Start_IT+0x430>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a36      	ldr	r2, [pc, #216]	@ (8003090 <HAL_DMA_Start_IT+0x478>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d045      	beq.n	8003048 <HAL_DMA_Start_IT+0x430>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a34      	ldr	r2, [pc, #208]	@ (8003094 <HAL_DMA_Start_IT+0x47c>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d040      	beq.n	8003048 <HAL_DMA_Start_IT+0x430>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a33      	ldr	r2, [pc, #204]	@ (8003098 <HAL_DMA_Start_IT+0x480>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d03b      	beq.n	8003048 <HAL_DMA_Start_IT+0x430>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a31      	ldr	r2, [pc, #196]	@ (800309c <HAL_DMA_Start_IT+0x484>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d036      	beq.n	8003048 <HAL_DMA_Start_IT+0x430>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a30      	ldr	r2, [pc, #192]	@ (80030a0 <HAL_DMA_Start_IT+0x488>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d031      	beq.n	8003048 <HAL_DMA_Start_IT+0x430>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a2e      	ldr	r2, [pc, #184]	@ (80030a4 <HAL_DMA_Start_IT+0x48c>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d02c      	beq.n	8003048 <HAL_DMA_Start_IT+0x430>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a2d      	ldr	r2, [pc, #180]	@ (80030a8 <HAL_DMA_Start_IT+0x490>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d027      	beq.n	8003048 <HAL_DMA_Start_IT+0x430>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a2b      	ldr	r2, [pc, #172]	@ (80030ac <HAL_DMA_Start_IT+0x494>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d022      	beq.n	8003048 <HAL_DMA_Start_IT+0x430>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a2a      	ldr	r2, [pc, #168]	@ (80030b0 <HAL_DMA_Start_IT+0x498>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d01d      	beq.n	8003048 <HAL_DMA_Start_IT+0x430>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a28      	ldr	r2, [pc, #160]	@ (80030b4 <HAL_DMA_Start_IT+0x49c>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d018      	beq.n	8003048 <HAL_DMA_Start_IT+0x430>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a27      	ldr	r2, [pc, #156]	@ (80030b8 <HAL_DMA_Start_IT+0x4a0>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d013      	beq.n	8003048 <HAL_DMA_Start_IT+0x430>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a25      	ldr	r2, [pc, #148]	@ (80030bc <HAL_DMA_Start_IT+0x4a4>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d00e      	beq.n	8003048 <HAL_DMA_Start_IT+0x430>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a24      	ldr	r2, [pc, #144]	@ (80030c0 <HAL_DMA_Start_IT+0x4a8>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d009      	beq.n	8003048 <HAL_DMA_Start_IT+0x430>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a22      	ldr	r2, [pc, #136]	@ (80030c4 <HAL_DMA_Start_IT+0x4ac>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d004      	beq.n	8003048 <HAL_DMA_Start_IT+0x430>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a21      	ldr	r2, [pc, #132]	@ (80030c8 <HAL_DMA_Start_IT+0x4b0>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d108      	bne.n	800305a <HAL_DMA_Start_IT+0x442>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f042 0201 	orr.w	r2, r2, #1
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	e012      	b.n	8003080 <HAL_DMA_Start_IT+0x468>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f042 0201 	orr.w	r2, r2, #1
 8003068:	601a      	str	r2, [r3, #0]
 800306a:	e009      	b.n	8003080 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003072:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003080:	7dfb      	ldrb	r3, [r7, #23]
}
 8003082:	4618      	mov	r0, r3
 8003084:	3718      	adds	r7, #24
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40020010 	.word	0x40020010
 8003090:	40020028 	.word	0x40020028
 8003094:	40020040 	.word	0x40020040
 8003098:	40020058 	.word	0x40020058
 800309c:	40020070 	.word	0x40020070
 80030a0:	40020088 	.word	0x40020088
 80030a4:	400200a0 	.word	0x400200a0
 80030a8:	400200b8 	.word	0x400200b8
 80030ac:	40020410 	.word	0x40020410
 80030b0:	40020428 	.word	0x40020428
 80030b4:	40020440 	.word	0x40020440
 80030b8:	40020458 	.word	0x40020458
 80030bc:	40020470 	.word	0x40020470
 80030c0:	40020488 	.word	0x40020488
 80030c4:	400204a0 	.word	0x400204a0
 80030c8:	400204b8 	.word	0x400204b8
 80030cc:	58025408 	.word	0x58025408
 80030d0:	5802541c 	.word	0x5802541c
 80030d4:	58025430 	.word	0x58025430
 80030d8:	58025444 	.word	0x58025444
 80030dc:	58025458 	.word	0x58025458
 80030e0:	5802546c 	.word	0x5802546c
 80030e4:	58025480 	.word	0x58025480
 80030e8:	58025494 	.word	0x58025494

080030ec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e237      	b.n	800356e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d004      	beq.n	8003114 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2280      	movs	r2, #128	@ 0x80
 800310e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e22c      	b.n	800356e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a5c      	ldr	r2, [pc, #368]	@ (800328c <HAL_DMA_Abort_IT+0x1a0>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d04a      	beq.n	80031b4 <HAL_DMA_Abort_IT+0xc8>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a5b      	ldr	r2, [pc, #364]	@ (8003290 <HAL_DMA_Abort_IT+0x1a4>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d045      	beq.n	80031b4 <HAL_DMA_Abort_IT+0xc8>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a59      	ldr	r2, [pc, #356]	@ (8003294 <HAL_DMA_Abort_IT+0x1a8>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d040      	beq.n	80031b4 <HAL_DMA_Abort_IT+0xc8>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a58      	ldr	r2, [pc, #352]	@ (8003298 <HAL_DMA_Abort_IT+0x1ac>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d03b      	beq.n	80031b4 <HAL_DMA_Abort_IT+0xc8>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a56      	ldr	r2, [pc, #344]	@ (800329c <HAL_DMA_Abort_IT+0x1b0>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d036      	beq.n	80031b4 <HAL_DMA_Abort_IT+0xc8>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a55      	ldr	r2, [pc, #340]	@ (80032a0 <HAL_DMA_Abort_IT+0x1b4>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d031      	beq.n	80031b4 <HAL_DMA_Abort_IT+0xc8>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a53      	ldr	r2, [pc, #332]	@ (80032a4 <HAL_DMA_Abort_IT+0x1b8>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d02c      	beq.n	80031b4 <HAL_DMA_Abort_IT+0xc8>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a52      	ldr	r2, [pc, #328]	@ (80032a8 <HAL_DMA_Abort_IT+0x1bc>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d027      	beq.n	80031b4 <HAL_DMA_Abort_IT+0xc8>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a50      	ldr	r2, [pc, #320]	@ (80032ac <HAL_DMA_Abort_IT+0x1c0>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d022      	beq.n	80031b4 <HAL_DMA_Abort_IT+0xc8>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a4f      	ldr	r2, [pc, #316]	@ (80032b0 <HAL_DMA_Abort_IT+0x1c4>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d01d      	beq.n	80031b4 <HAL_DMA_Abort_IT+0xc8>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a4d      	ldr	r2, [pc, #308]	@ (80032b4 <HAL_DMA_Abort_IT+0x1c8>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d018      	beq.n	80031b4 <HAL_DMA_Abort_IT+0xc8>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a4c      	ldr	r2, [pc, #304]	@ (80032b8 <HAL_DMA_Abort_IT+0x1cc>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d013      	beq.n	80031b4 <HAL_DMA_Abort_IT+0xc8>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a4a      	ldr	r2, [pc, #296]	@ (80032bc <HAL_DMA_Abort_IT+0x1d0>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d00e      	beq.n	80031b4 <HAL_DMA_Abort_IT+0xc8>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a49      	ldr	r2, [pc, #292]	@ (80032c0 <HAL_DMA_Abort_IT+0x1d4>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d009      	beq.n	80031b4 <HAL_DMA_Abort_IT+0xc8>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a47      	ldr	r2, [pc, #284]	@ (80032c4 <HAL_DMA_Abort_IT+0x1d8>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d004      	beq.n	80031b4 <HAL_DMA_Abort_IT+0xc8>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a46      	ldr	r2, [pc, #280]	@ (80032c8 <HAL_DMA_Abort_IT+0x1dc>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d101      	bne.n	80031b8 <HAL_DMA_Abort_IT+0xcc>
 80031b4:	2301      	movs	r3, #1
 80031b6:	e000      	b.n	80031ba <HAL_DMA_Abort_IT+0xce>
 80031b8:	2300      	movs	r3, #0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f000 8086 	beq.w	80032cc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2204      	movs	r2, #4
 80031c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a2f      	ldr	r2, [pc, #188]	@ (800328c <HAL_DMA_Abort_IT+0x1a0>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d04a      	beq.n	8003268 <HAL_DMA_Abort_IT+0x17c>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a2e      	ldr	r2, [pc, #184]	@ (8003290 <HAL_DMA_Abort_IT+0x1a4>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d045      	beq.n	8003268 <HAL_DMA_Abort_IT+0x17c>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a2c      	ldr	r2, [pc, #176]	@ (8003294 <HAL_DMA_Abort_IT+0x1a8>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d040      	beq.n	8003268 <HAL_DMA_Abort_IT+0x17c>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a2b      	ldr	r2, [pc, #172]	@ (8003298 <HAL_DMA_Abort_IT+0x1ac>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d03b      	beq.n	8003268 <HAL_DMA_Abort_IT+0x17c>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a29      	ldr	r2, [pc, #164]	@ (800329c <HAL_DMA_Abort_IT+0x1b0>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d036      	beq.n	8003268 <HAL_DMA_Abort_IT+0x17c>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a28      	ldr	r2, [pc, #160]	@ (80032a0 <HAL_DMA_Abort_IT+0x1b4>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d031      	beq.n	8003268 <HAL_DMA_Abort_IT+0x17c>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a26      	ldr	r2, [pc, #152]	@ (80032a4 <HAL_DMA_Abort_IT+0x1b8>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d02c      	beq.n	8003268 <HAL_DMA_Abort_IT+0x17c>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a25      	ldr	r2, [pc, #148]	@ (80032a8 <HAL_DMA_Abort_IT+0x1bc>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d027      	beq.n	8003268 <HAL_DMA_Abort_IT+0x17c>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a23      	ldr	r2, [pc, #140]	@ (80032ac <HAL_DMA_Abort_IT+0x1c0>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d022      	beq.n	8003268 <HAL_DMA_Abort_IT+0x17c>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a22      	ldr	r2, [pc, #136]	@ (80032b0 <HAL_DMA_Abort_IT+0x1c4>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d01d      	beq.n	8003268 <HAL_DMA_Abort_IT+0x17c>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a20      	ldr	r2, [pc, #128]	@ (80032b4 <HAL_DMA_Abort_IT+0x1c8>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d018      	beq.n	8003268 <HAL_DMA_Abort_IT+0x17c>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a1f      	ldr	r2, [pc, #124]	@ (80032b8 <HAL_DMA_Abort_IT+0x1cc>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d013      	beq.n	8003268 <HAL_DMA_Abort_IT+0x17c>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a1d      	ldr	r2, [pc, #116]	@ (80032bc <HAL_DMA_Abort_IT+0x1d0>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d00e      	beq.n	8003268 <HAL_DMA_Abort_IT+0x17c>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a1c      	ldr	r2, [pc, #112]	@ (80032c0 <HAL_DMA_Abort_IT+0x1d4>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d009      	beq.n	8003268 <HAL_DMA_Abort_IT+0x17c>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a1a      	ldr	r2, [pc, #104]	@ (80032c4 <HAL_DMA_Abort_IT+0x1d8>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d004      	beq.n	8003268 <HAL_DMA_Abort_IT+0x17c>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a19      	ldr	r2, [pc, #100]	@ (80032c8 <HAL_DMA_Abort_IT+0x1dc>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d108      	bne.n	800327a <HAL_DMA_Abort_IT+0x18e>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f022 0201 	bic.w	r2, r2, #1
 8003276:	601a      	str	r2, [r3, #0]
 8003278:	e178      	b.n	800356c <HAL_DMA_Abort_IT+0x480>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 0201 	bic.w	r2, r2, #1
 8003288:	601a      	str	r2, [r3, #0]
 800328a:	e16f      	b.n	800356c <HAL_DMA_Abort_IT+0x480>
 800328c:	40020010 	.word	0x40020010
 8003290:	40020028 	.word	0x40020028
 8003294:	40020040 	.word	0x40020040
 8003298:	40020058 	.word	0x40020058
 800329c:	40020070 	.word	0x40020070
 80032a0:	40020088 	.word	0x40020088
 80032a4:	400200a0 	.word	0x400200a0
 80032a8:	400200b8 	.word	0x400200b8
 80032ac:	40020410 	.word	0x40020410
 80032b0:	40020428 	.word	0x40020428
 80032b4:	40020440 	.word	0x40020440
 80032b8:	40020458 	.word	0x40020458
 80032bc:	40020470 	.word	0x40020470
 80032c0:	40020488 	.word	0x40020488
 80032c4:	400204a0 	.word	0x400204a0
 80032c8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 020e 	bic.w	r2, r2, #14
 80032da:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a6c      	ldr	r2, [pc, #432]	@ (8003494 <HAL_DMA_Abort_IT+0x3a8>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d04a      	beq.n	800337c <HAL_DMA_Abort_IT+0x290>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a6b      	ldr	r2, [pc, #428]	@ (8003498 <HAL_DMA_Abort_IT+0x3ac>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d045      	beq.n	800337c <HAL_DMA_Abort_IT+0x290>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a69      	ldr	r2, [pc, #420]	@ (800349c <HAL_DMA_Abort_IT+0x3b0>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d040      	beq.n	800337c <HAL_DMA_Abort_IT+0x290>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a68      	ldr	r2, [pc, #416]	@ (80034a0 <HAL_DMA_Abort_IT+0x3b4>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d03b      	beq.n	800337c <HAL_DMA_Abort_IT+0x290>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a66      	ldr	r2, [pc, #408]	@ (80034a4 <HAL_DMA_Abort_IT+0x3b8>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d036      	beq.n	800337c <HAL_DMA_Abort_IT+0x290>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a65      	ldr	r2, [pc, #404]	@ (80034a8 <HAL_DMA_Abort_IT+0x3bc>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d031      	beq.n	800337c <HAL_DMA_Abort_IT+0x290>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a63      	ldr	r2, [pc, #396]	@ (80034ac <HAL_DMA_Abort_IT+0x3c0>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d02c      	beq.n	800337c <HAL_DMA_Abort_IT+0x290>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a62      	ldr	r2, [pc, #392]	@ (80034b0 <HAL_DMA_Abort_IT+0x3c4>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d027      	beq.n	800337c <HAL_DMA_Abort_IT+0x290>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a60      	ldr	r2, [pc, #384]	@ (80034b4 <HAL_DMA_Abort_IT+0x3c8>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d022      	beq.n	800337c <HAL_DMA_Abort_IT+0x290>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a5f      	ldr	r2, [pc, #380]	@ (80034b8 <HAL_DMA_Abort_IT+0x3cc>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d01d      	beq.n	800337c <HAL_DMA_Abort_IT+0x290>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a5d      	ldr	r2, [pc, #372]	@ (80034bc <HAL_DMA_Abort_IT+0x3d0>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d018      	beq.n	800337c <HAL_DMA_Abort_IT+0x290>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a5c      	ldr	r2, [pc, #368]	@ (80034c0 <HAL_DMA_Abort_IT+0x3d4>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d013      	beq.n	800337c <HAL_DMA_Abort_IT+0x290>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a5a      	ldr	r2, [pc, #360]	@ (80034c4 <HAL_DMA_Abort_IT+0x3d8>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d00e      	beq.n	800337c <HAL_DMA_Abort_IT+0x290>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a59      	ldr	r2, [pc, #356]	@ (80034c8 <HAL_DMA_Abort_IT+0x3dc>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d009      	beq.n	800337c <HAL_DMA_Abort_IT+0x290>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a57      	ldr	r2, [pc, #348]	@ (80034cc <HAL_DMA_Abort_IT+0x3e0>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d004      	beq.n	800337c <HAL_DMA_Abort_IT+0x290>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a56      	ldr	r2, [pc, #344]	@ (80034d0 <HAL_DMA_Abort_IT+0x3e4>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d108      	bne.n	800338e <HAL_DMA_Abort_IT+0x2a2>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 0201 	bic.w	r2, r2, #1
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	e007      	b.n	800339e <HAL_DMA_Abort_IT+0x2b2>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f022 0201 	bic.w	r2, r2, #1
 800339c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a3c      	ldr	r2, [pc, #240]	@ (8003494 <HAL_DMA_Abort_IT+0x3a8>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d072      	beq.n	800348e <HAL_DMA_Abort_IT+0x3a2>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a3a      	ldr	r2, [pc, #232]	@ (8003498 <HAL_DMA_Abort_IT+0x3ac>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d06d      	beq.n	800348e <HAL_DMA_Abort_IT+0x3a2>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a39      	ldr	r2, [pc, #228]	@ (800349c <HAL_DMA_Abort_IT+0x3b0>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d068      	beq.n	800348e <HAL_DMA_Abort_IT+0x3a2>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a37      	ldr	r2, [pc, #220]	@ (80034a0 <HAL_DMA_Abort_IT+0x3b4>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d063      	beq.n	800348e <HAL_DMA_Abort_IT+0x3a2>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a36      	ldr	r2, [pc, #216]	@ (80034a4 <HAL_DMA_Abort_IT+0x3b8>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d05e      	beq.n	800348e <HAL_DMA_Abort_IT+0x3a2>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a34      	ldr	r2, [pc, #208]	@ (80034a8 <HAL_DMA_Abort_IT+0x3bc>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d059      	beq.n	800348e <HAL_DMA_Abort_IT+0x3a2>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a33      	ldr	r2, [pc, #204]	@ (80034ac <HAL_DMA_Abort_IT+0x3c0>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d054      	beq.n	800348e <HAL_DMA_Abort_IT+0x3a2>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a31      	ldr	r2, [pc, #196]	@ (80034b0 <HAL_DMA_Abort_IT+0x3c4>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d04f      	beq.n	800348e <HAL_DMA_Abort_IT+0x3a2>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a30      	ldr	r2, [pc, #192]	@ (80034b4 <HAL_DMA_Abort_IT+0x3c8>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d04a      	beq.n	800348e <HAL_DMA_Abort_IT+0x3a2>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a2e      	ldr	r2, [pc, #184]	@ (80034b8 <HAL_DMA_Abort_IT+0x3cc>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d045      	beq.n	800348e <HAL_DMA_Abort_IT+0x3a2>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a2d      	ldr	r2, [pc, #180]	@ (80034bc <HAL_DMA_Abort_IT+0x3d0>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d040      	beq.n	800348e <HAL_DMA_Abort_IT+0x3a2>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a2b      	ldr	r2, [pc, #172]	@ (80034c0 <HAL_DMA_Abort_IT+0x3d4>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d03b      	beq.n	800348e <HAL_DMA_Abort_IT+0x3a2>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a2a      	ldr	r2, [pc, #168]	@ (80034c4 <HAL_DMA_Abort_IT+0x3d8>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d036      	beq.n	800348e <HAL_DMA_Abort_IT+0x3a2>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a28      	ldr	r2, [pc, #160]	@ (80034c8 <HAL_DMA_Abort_IT+0x3dc>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d031      	beq.n	800348e <HAL_DMA_Abort_IT+0x3a2>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a27      	ldr	r2, [pc, #156]	@ (80034cc <HAL_DMA_Abort_IT+0x3e0>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d02c      	beq.n	800348e <HAL_DMA_Abort_IT+0x3a2>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a25      	ldr	r2, [pc, #148]	@ (80034d0 <HAL_DMA_Abort_IT+0x3e4>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d027      	beq.n	800348e <HAL_DMA_Abort_IT+0x3a2>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a24      	ldr	r2, [pc, #144]	@ (80034d4 <HAL_DMA_Abort_IT+0x3e8>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d022      	beq.n	800348e <HAL_DMA_Abort_IT+0x3a2>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a22      	ldr	r2, [pc, #136]	@ (80034d8 <HAL_DMA_Abort_IT+0x3ec>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d01d      	beq.n	800348e <HAL_DMA_Abort_IT+0x3a2>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a21      	ldr	r2, [pc, #132]	@ (80034dc <HAL_DMA_Abort_IT+0x3f0>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d018      	beq.n	800348e <HAL_DMA_Abort_IT+0x3a2>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a1f      	ldr	r2, [pc, #124]	@ (80034e0 <HAL_DMA_Abort_IT+0x3f4>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d013      	beq.n	800348e <HAL_DMA_Abort_IT+0x3a2>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a1e      	ldr	r2, [pc, #120]	@ (80034e4 <HAL_DMA_Abort_IT+0x3f8>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d00e      	beq.n	800348e <HAL_DMA_Abort_IT+0x3a2>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a1c      	ldr	r2, [pc, #112]	@ (80034e8 <HAL_DMA_Abort_IT+0x3fc>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d009      	beq.n	800348e <HAL_DMA_Abort_IT+0x3a2>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a1b      	ldr	r2, [pc, #108]	@ (80034ec <HAL_DMA_Abort_IT+0x400>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d004      	beq.n	800348e <HAL_DMA_Abort_IT+0x3a2>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a19      	ldr	r2, [pc, #100]	@ (80034f0 <HAL_DMA_Abort_IT+0x404>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d132      	bne.n	80034f4 <HAL_DMA_Abort_IT+0x408>
 800348e:	2301      	movs	r3, #1
 8003490:	e031      	b.n	80034f6 <HAL_DMA_Abort_IT+0x40a>
 8003492:	bf00      	nop
 8003494:	40020010 	.word	0x40020010
 8003498:	40020028 	.word	0x40020028
 800349c:	40020040 	.word	0x40020040
 80034a0:	40020058 	.word	0x40020058
 80034a4:	40020070 	.word	0x40020070
 80034a8:	40020088 	.word	0x40020088
 80034ac:	400200a0 	.word	0x400200a0
 80034b0:	400200b8 	.word	0x400200b8
 80034b4:	40020410 	.word	0x40020410
 80034b8:	40020428 	.word	0x40020428
 80034bc:	40020440 	.word	0x40020440
 80034c0:	40020458 	.word	0x40020458
 80034c4:	40020470 	.word	0x40020470
 80034c8:	40020488 	.word	0x40020488
 80034cc:	400204a0 	.word	0x400204a0
 80034d0:	400204b8 	.word	0x400204b8
 80034d4:	58025408 	.word	0x58025408
 80034d8:	5802541c 	.word	0x5802541c
 80034dc:	58025430 	.word	0x58025430
 80034e0:	58025444 	.word	0x58025444
 80034e4:	58025458 	.word	0x58025458
 80034e8:	5802546c 	.word	0x5802546c
 80034ec:	58025480 	.word	0x58025480
 80034f0:	58025494 	.word	0x58025494
 80034f4:	2300      	movs	r3, #0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d028      	beq.n	800354c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003504:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003508:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800350e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003514:	f003 031f 	and.w	r3, r3, #31
 8003518:	2201      	movs	r2, #1
 800351a:	409a      	lsls	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003528:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00c      	beq.n	800354c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800353c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003540:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800354a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003560:	2b00      	cmp	r3, #0
 8003562:	d003      	beq.n	800356c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop

08003578 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b08a      	sub	sp, #40	@ 0x28
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003580:	2300      	movs	r3, #0
 8003582:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003584:	4b67      	ldr	r3, [pc, #412]	@ (8003724 <HAL_DMA_IRQHandler+0x1ac>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a67      	ldr	r2, [pc, #412]	@ (8003728 <HAL_DMA_IRQHandler+0x1b0>)
 800358a:	fba2 2303 	umull	r2, r3, r2, r3
 800358e:	0a9b      	lsrs	r3, r3, #10
 8003590:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003596:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800359c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800359e:	6a3b      	ldr	r3, [r7, #32]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a5f      	ldr	r2, [pc, #380]	@ (800372c <HAL_DMA_IRQHandler+0x1b4>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d04a      	beq.n	800364a <HAL_DMA_IRQHandler+0xd2>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a5d      	ldr	r2, [pc, #372]	@ (8003730 <HAL_DMA_IRQHandler+0x1b8>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d045      	beq.n	800364a <HAL_DMA_IRQHandler+0xd2>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a5c      	ldr	r2, [pc, #368]	@ (8003734 <HAL_DMA_IRQHandler+0x1bc>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d040      	beq.n	800364a <HAL_DMA_IRQHandler+0xd2>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a5a      	ldr	r2, [pc, #360]	@ (8003738 <HAL_DMA_IRQHandler+0x1c0>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d03b      	beq.n	800364a <HAL_DMA_IRQHandler+0xd2>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a59      	ldr	r2, [pc, #356]	@ (800373c <HAL_DMA_IRQHandler+0x1c4>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d036      	beq.n	800364a <HAL_DMA_IRQHandler+0xd2>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a57      	ldr	r2, [pc, #348]	@ (8003740 <HAL_DMA_IRQHandler+0x1c8>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d031      	beq.n	800364a <HAL_DMA_IRQHandler+0xd2>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a56      	ldr	r2, [pc, #344]	@ (8003744 <HAL_DMA_IRQHandler+0x1cc>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d02c      	beq.n	800364a <HAL_DMA_IRQHandler+0xd2>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a54      	ldr	r2, [pc, #336]	@ (8003748 <HAL_DMA_IRQHandler+0x1d0>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d027      	beq.n	800364a <HAL_DMA_IRQHandler+0xd2>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a53      	ldr	r2, [pc, #332]	@ (800374c <HAL_DMA_IRQHandler+0x1d4>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d022      	beq.n	800364a <HAL_DMA_IRQHandler+0xd2>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a51      	ldr	r2, [pc, #324]	@ (8003750 <HAL_DMA_IRQHandler+0x1d8>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d01d      	beq.n	800364a <HAL_DMA_IRQHandler+0xd2>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a50      	ldr	r2, [pc, #320]	@ (8003754 <HAL_DMA_IRQHandler+0x1dc>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d018      	beq.n	800364a <HAL_DMA_IRQHandler+0xd2>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a4e      	ldr	r2, [pc, #312]	@ (8003758 <HAL_DMA_IRQHandler+0x1e0>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d013      	beq.n	800364a <HAL_DMA_IRQHandler+0xd2>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a4d      	ldr	r2, [pc, #308]	@ (800375c <HAL_DMA_IRQHandler+0x1e4>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d00e      	beq.n	800364a <HAL_DMA_IRQHandler+0xd2>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a4b      	ldr	r2, [pc, #300]	@ (8003760 <HAL_DMA_IRQHandler+0x1e8>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d009      	beq.n	800364a <HAL_DMA_IRQHandler+0xd2>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a4a      	ldr	r2, [pc, #296]	@ (8003764 <HAL_DMA_IRQHandler+0x1ec>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d004      	beq.n	800364a <HAL_DMA_IRQHandler+0xd2>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a48      	ldr	r2, [pc, #288]	@ (8003768 <HAL_DMA_IRQHandler+0x1f0>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d101      	bne.n	800364e <HAL_DMA_IRQHandler+0xd6>
 800364a:	2301      	movs	r3, #1
 800364c:	e000      	b.n	8003650 <HAL_DMA_IRQHandler+0xd8>
 800364e:	2300      	movs	r3, #0
 8003650:	2b00      	cmp	r3, #0
 8003652:	f000 842b 	beq.w	8003eac <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800365a:	f003 031f 	and.w	r3, r3, #31
 800365e:	2208      	movs	r2, #8
 8003660:	409a      	lsls	r2, r3
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	4013      	ands	r3, r2
 8003666:	2b00      	cmp	r3, #0
 8003668:	f000 80a2 	beq.w	80037b0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a2e      	ldr	r2, [pc, #184]	@ (800372c <HAL_DMA_IRQHandler+0x1b4>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d04a      	beq.n	800370c <HAL_DMA_IRQHandler+0x194>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a2d      	ldr	r2, [pc, #180]	@ (8003730 <HAL_DMA_IRQHandler+0x1b8>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d045      	beq.n	800370c <HAL_DMA_IRQHandler+0x194>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a2b      	ldr	r2, [pc, #172]	@ (8003734 <HAL_DMA_IRQHandler+0x1bc>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d040      	beq.n	800370c <HAL_DMA_IRQHandler+0x194>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a2a      	ldr	r2, [pc, #168]	@ (8003738 <HAL_DMA_IRQHandler+0x1c0>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d03b      	beq.n	800370c <HAL_DMA_IRQHandler+0x194>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a28      	ldr	r2, [pc, #160]	@ (800373c <HAL_DMA_IRQHandler+0x1c4>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d036      	beq.n	800370c <HAL_DMA_IRQHandler+0x194>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a27      	ldr	r2, [pc, #156]	@ (8003740 <HAL_DMA_IRQHandler+0x1c8>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d031      	beq.n	800370c <HAL_DMA_IRQHandler+0x194>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a25      	ldr	r2, [pc, #148]	@ (8003744 <HAL_DMA_IRQHandler+0x1cc>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d02c      	beq.n	800370c <HAL_DMA_IRQHandler+0x194>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a24      	ldr	r2, [pc, #144]	@ (8003748 <HAL_DMA_IRQHandler+0x1d0>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d027      	beq.n	800370c <HAL_DMA_IRQHandler+0x194>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a22      	ldr	r2, [pc, #136]	@ (800374c <HAL_DMA_IRQHandler+0x1d4>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d022      	beq.n	800370c <HAL_DMA_IRQHandler+0x194>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a21      	ldr	r2, [pc, #132]	@ (8003750 <HAL_DMA_IRQHandler+0x1d8>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d01d      	beq.n	800370c <HAL_DMA_IRQHandler+0x194>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a1f      	ldr	r2, [pc, #124]	@ (8003754 <HAL_DMA_IRQHandler+0x1dc>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d018      	beq.n	800370c <HAL_DMA_IRQHandler+0x194>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a1e      	ldr	r2, [pc, #120]	@ (8003758 <HAL_DMA_IRQHandler+0x1e0>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d013      	beq.n	800370c <HAL_DMA_IRQHandler+0x194>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a1c      	ldr	r2, [pc, #112]	@ (800375c <HAL_DMA_IRQHandler+0x1e4>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d00e      	beq.n	800370c <HAL_DMA_IRQHandler+0x194>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a1b      	ldr	r2, [pc, #108]	@ (8003760 <HAL_DMA_IRQHandler+0x1e8>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d009      	beq.n	800370c <HAL_DMA_IRQHandler+0x194>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a19      	ldr	r2, [pc, #100]	@ (8003764 <HAL_DMA_IRQHandler+0x1ec>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d004      	beq.n	800370c <HAL_DMA_IRQHandler+0x194>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a18      	ldr	r2, [pc, #96]	@ (8003768 <HAL_DMA_IRQHandler+0x1f0>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d12f      	bne.n	800376c <HAL_DMA_IRQHandler+0x1f4>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0304 	and.w	r3, r3, #4
 8003716:	2b00      	cmp	r3, #0
 8003718:	bf14      	ite	ne
 800371a:	2301      	movne	r3, #1
 800371c:	2300      	moveq	r3, #0
 800371e:	b2db      	uxtb	r3, r3
 8003720:	e02e      	b.n	8003780 <HAL_DMA_IRQHandler+0x208>
 8003722:	bf00      	nop
 8003724:	24000000 	.word	0x24000000
 8003728:	1b4e81b5 	.word	0x1b4e81b5
 800372c:	40020010 	.word	0x40020010
 8003730:	40020028 	.word	0x40020028
 8003734:	40020040 	.word	0x40020040
 8003738:	40020058 	.word	0x40020058
 800373c:	40020070 	.word	0x40020070
 8003740:	40020088 	.word	0x40020088
 8003744:	400200a0 	.word	0x400200a0
 8003748:	400200b8 	.word	0x400200b8
 800374c:	40020410 	.word	0x40020410
 8003750:	40020428 	.word	0x40020428
 8003754:	40020440 	.word	0x40020440
 8003758:	40020458 	.word	0x40020458
 800375c:	40020470 	.word	0x40020470
 8003760:	40020488 	.word	0x40020488
 8003764:	400204a0 	.word	0x400204a0
 8003768:	400204b8 	.word	0x400204b8
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0308 	and.w	r3, r3, #8
 8003776:	2b00      	cmp	r3, #0
 8003778:	bf14      	ite	ne
 800377a:	2301      	movne	r3, #1
 800377c:	2300      	moveq	r3, #0
 800377e:	b2db      	uxtb	r3, r3
 8003780:	2b00      	cmp	r3, #0
 8003782:	d015      	beq.n	80037b0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f022 0204 	bic.w	r2, r2, #4
 8003792:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003798:	f003 031f 	and.w	r3, r3, #31
 800379c:	2208      	movs	r2, #8
 800379e:	409a      	lsls	r2, r3
 80037a0:	6a3b      	ldr	r3, [r7, #32]
 80037a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037a8:	f043 0201 	orr.w	r2, r3, #1
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037b4:	f003 031f 	and.w	r3, r3, #31
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	fa22 f303 	lsr.w	r3, r2, r3
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d06e      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a69      	ldr	r2, [pc, #420]	@ (8003970 <HAL_DMA_IRQHandler+0x3f8>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d04a      	beq.n	8003866 <HAL_DMA_IRQHandler+0x2ee>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a67      	ldr	r2, [pc, #412]	@ (8003974 <HAL_DMA_IRQHandler+0x3fc>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d045      	beq.n	8003866 <HAL_DMA_IRQHandler+0x2ee>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a66      	ldr	r2, [pc, #408]	@ (8003978 <HAL_DMA_IRQHandler+0x400>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d040      	beq.n	8003866 <HAL_DMA_IRQHandler+0x2ee>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a64      	ldr	r2, [pc, #400]	@ (800397c <HAL_DMA_IRQHandler+0x404>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d03b      	beq.n	8003866 <HAL_DMA_IRQHandler+0x2ee>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a63      	ldr	r2, [pc, #396]	@ (8003980 <HAL_DMA_IRQHandler+0x408>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d036      	beq.n	8003866 <HAL_DMA_IRQHandler+0x2ee>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a61      	ldr	r2, [pc, #388]	@ (8003984 <HAL_DMA_IRQHandler+0x40c>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d031      	beq.n	8003866 <HAL_DMA_IRQHandler+0x2ee>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a60      	ldr	r2, [pc, #384]	@ (8003988 <HAL_DMA_IRQHandler+0x410>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d02c      	beq.n	8003866 <HAL_DMA_IRQHandler+0x2ee>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a5e      	ldr	r2, [pc, #376]	@ (800398c <HAL_DMA_IRQHandler+0x414>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d027      	beq.n	8003866 <HAL_DMA_IRQHandler+0x2ee>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a5d      	ldr	r2, [pc, #372]	@ (8003990 <HAL_DMA_IRQHandler+0x418>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d022      	beq.n	8003866 <HAL_DMA_IRQHandler+0x2ee>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a5b      	ldr	r2, [pc, #364]	@ (8003994 <HAL_DMA_IRQHandler+0x41c>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d01d      	beq.n	8003866 <HAL_DMA_IRQHandler+0x2ee>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a5a      	ldr	r2, [pc, #360]	@ (8003998 <HAL_DMA_IRQHandler+0x420>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d018      	beq.n	8003866 <HAL_DMA_IRQHandler+0x2ee>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a58      	ldr	r2, [pc, #352]	@ (800399c <HAL_DMA_IRQHandler+0x424>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d013      	beq.n	8003866 <HAL_DMA_IRQHandler+0x2ee>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a57      	ldr	r2, [pc, #348]	@ (80039a0 <HAL_DMA_IRQHandler+0x428>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d00e      	beq.n	8003866 <HAL_DMA_IRQHandler+0x2ee>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a55      	ldr	r2, [pc, #340]	@ (80039a4 <HAL_DMA_IRQHandler+0x42c>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d009      	beq.n	8003866 <HAL_DMA_IRQHandler+0x2ee>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a54      	ldr	r2, [pc, #336]	@ (80039a8 <HAL_DMA_IRQHandler+0x430>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d004      	beq.n	8003866 <HAL_DMA_IRQHandler+0x2ee>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a52      	ldr	r2, [pc, #328]	@ (80039ac <HAL_DMA_IRQHandler+0x434>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d10a      	bne.n	800387c <HAL_DMA_IRQHandler+0x304>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003870:	2b00      	cmp	r3, #0
 8003872:	bf14      	ite	ne
 8003874:	2301      	movne	r3, #1
 8003876:	2300      	moveq	r3, #0
 8003878:	b2db      	uxtb	r3, r3
 800387a:	e003      	b.n	8003884 <HAL_DMA_IRQHandler+0x30c>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2300      	movs	r3, #0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00d      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800388c:	f003 031f 	and.w	r3, r3, #31
 8003890:	2201      	movs	r2, #1
 8003892:	409a      	lsls	r2, r3
 8003894:	6a3b      	ldr	r3, [r7, #32]
 8003896:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800389c:	f043 0202 	orr.w	r2, r3, #2
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038a8:	f003 031f 	and.w	r3, r3, #31
 80038ac:	2204      	movs	r2, #4
 80038ae:	409a      	lsls	r2, r3
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	4013      	ands	r3, r2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f000 808f 	beq.w	80039d8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a2c      	ldr	r2, [pc, #176]	@ (8003970 <HAL_DMA_IRQHandler+0x3f8>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d04a      	beq.n	800395a <HAL_DMA_IRQHandler+0x3e2>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a2a      	ldr	r2, [pc, #168]	@ (8003974 <HAL_DMA_IRQHandler+0x3fc>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d045      	beq.n	800395a <HAL_DMA_IRQHandler+0x3e2>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a29      	ldr	r2, [pc, #164]	@ (8003978 <HAL_DMA_IRQHandler+0x400>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d040      	beq.n	800395a <HAL_DMA_IRQHandler+0x3e2>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a27      	ldr	r2, [pc, #156]	@ (800397c <HAL_DMA_IRQHandler+0x404>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d03b      	beq.n	800395a <HAL_DMA_IRQHandler+0x3e2>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a26      	ldr	r2, [pc, #152]	@ (8003980 <HAL_DMA_IRQHandler+0x408>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d036      	beq.n	800395a <HAL_DMA_IRQHandler+0x3e2>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a24      	ldr	r2, [pc, #144]	@ (8003984 <HAL_DMA_IRQHandler+0x40c>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d031      	beq.n	800395a <HAL_DMA_IRQHandler+0x3e2>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a23      	ldr	r2, [pc, #140]	@ (8003988 <HAL_DMA_IRQHandler+0x410>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d02c      	beq.n	800395a <HAL_DMA_IRQHandler+0x3e2>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a21      	ldr	r2, [pc, #132]	@ (800398c <HAL_DMA_IRQHandler+0x414>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d027      	beq.n	800395a <HAL_DMA_IRQHandler+0x3e2>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a20      	ldr	r2, [pc, #128]	@ (8003990 <HAL_DMA_IRQHandler+0x418>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d022      	beq.n	800395a <HAL_DMA_IRQHandler+0x3e2>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a1e      	ldr	r2, [pc, #120]	@ (8003994 <HAL_DMA_IRQHandler+0x41c>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d01d      	beq.n	800395a <HAL_DMA_IRQHandler+0x3e2>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a1d      	ldr	r2, [pc, #116]	@ (8003998 <HAL_DMA_IRQHandler+0x420>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d018      	beq.n	800395a <HAL_DMA_IRQHandler+0x3e2>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a1b      	ldr	r2, [pc, #108]	@ (800399c <HAL_DMA_IRQHandler+0x424>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d013      	beq.n	800395a <HAL_DMA_IRQHandler+0x3e2>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a1a      	ldr	r2, [pc, #104]	@ (80039a0 <HAL_DMA_IRQHandler+0x428>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d00e      	beq.n	800395a <HAL_DMA_IRQHandler+0x3e2>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a18      	ldr	r2, [pc, #96]	@ (80039a4 <HAL_DMA_IRQHandler+0x42c>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d009      	beq.n	800395a <HAL_DMA_IRQHandler+0x3e2>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a17      	ldr	r2, [pc, #92]	@ (80039a8 <HAL_DMA_IRQHandler+0x430>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d004      	beq.n	800395a <HAL_DMA_IRQHandler+0x3e2>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a15      	ldr	r2, [pc, #84]	@ (80039ac <HAL_DMA_IRQHandler+0x434>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d12a      	bne.n	80039b0 <HAL_DMA_IRQHandler+0x438>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b00      	cmp	r3, #0
 8003966:	bf14      	ite	ne
 8003968:	2301      	movne	r3, #1
 800396a:	2300      	moveq	r3, #0
 800396c:	b2db      	uxtb	r3, r3
 800396e:	e023      	b.n	80039b8 <HAL_DMA_IRQHandler+0x440>
 8003970:	40020010 	.word	0x40020010
 8003974:	40020028 	.word	0x40020028
 8003978:	40020040 	.word	0x40020040
 800397c:	40020058 	.word	0x40020058
 8003980:	40020070 	.word	0x40020070
 8003984:	40020088 	.word	0x40020088
 8003988:	400200a0 	.word	0x400200a0
 800398c:	400200b8 	.word	0x400200b8
 8003990:	40020410 	.word	0x40020410
 8003994:	40020428 	.word	0x40020428
 8003998:	40020440 	.word	0x40020440
 800399c:	40020458 	.word	0x40020458
 80039a0:	40020470 	.word	0x40020470
 80039a4:	40020488 	.word	0x40020488
 80039a8:	400204a0 	.word	0x400204a0
 80039ac:	400204b8 	.word	0x400204b8
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2300      	movs	r3, #0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00d      	beq.n	80039d8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039c0:	f003 031f 	and.w	r3, r3, #31
 80039c4:	2204      	movs	r2, #4
 80039c6:	409a      	lsls	r2, r3
 80039c8:	6a3b      	ldr	r3, [r7, #32]
 80039ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039d0:	f043 0204 	orr.w	r2, r3, #4
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039dc:	f003 031f 	and.w	r3, r3, #31
 80039e0:	2210      	movs	r2, #16
 80039e2:	409a      	lsls	r2, r3
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	4013      	ands	r3, r2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f000 80a6 	beq.w	8003b3a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a85      	ldr	r2, [pc, #532]	@ (8003c08 <HAL_DMA_IRQHandler+0x690>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d04a      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x516>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a83      	ldr	r2, [pc, #524]	@ (8003c0c <HAL_DMA_IRQHandler+0x694>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d045      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x516>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a82      	ldr	r2, [pc, #520]	@ (8003c10 <HAL_DMA_IRQHandler+0x698>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d040      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x516>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a80      	ldr	r2, [pc, #512]	@ (8003c14 <HAL_DMA_IRQHandler+0x69c>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d03b      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x516>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a7f      	ldr	r2, [pc, #508]	@ (8003c18 <HAL_DMA_IRQHandler+0x6a0>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d036      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x516>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a7d      	ldr	r2, [pc, #500]	@ (8003c1c <HAL_DMA_IRQHandler+0x6a4>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d031      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x516>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a7c      	ldr	r2, [pc, #496]	@ (8003c20 <HAL_DMA_IRQHandler+0x6a8>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d02c      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x516>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a7a      	ldr	r2, [pc, #488]	@ (8003c24 <HAL_DMA_IRQHandler+0x6ac>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d027      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x516>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a79      	ldr	r2, [pc, #484]	@ (8003c28 <HAL_DMA_IRQHandler+0x6b0>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d022      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x516>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a77      	ldr	r2, [pc, #476]	@ (8003c2c <HAL_DMA_IRQHandler+0x6b4>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d01d      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x516>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a76      	ldr	r2, [pc, #472]	@ (8003c30 <HAL_DMA_IRQHandler+0x6b8>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d018      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x516>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a74      	ldr	r2, [pc, #464]	@ (8003c34 <HAL_DMA_IRQHandler+0x6bc>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d013      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x516>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a73      	ldr	r2, [pc, #460]	@ (8003c38 <HAL_DMA_IRQHandler+0x6c0>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d00e      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x516>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a71      	ldr	r2, [pc, #452]	@ (8003c3c <HAL_DMA_IRQHandler+0x6c4>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d009      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x516>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a70      	ldr	r2, [pc, #448]	@ (8003c40 <HAL_DMA_IRQHandler+0x6c8>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d004      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x516>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a6e      	ldr	r2, [pc, #440]	@ (8003c44 <HAL_DMA_IRQHandler+0x6cc>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d10a      	bne.n	8003aa4 <HAL_DMA_IRQHandler+0x52c>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0308 	and.w	r3, r3, #8
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	bf14      	ite	ne
 8003a9c:	2301      	movne	r3, #1
 8003a9e:	2300      	moveq	r3, #0
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	e009      	b.n	8003ab8 <HAL_DMA_IRQHandler+0x540>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0304 	and.w	r3, r3, #4
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	bf14      	ite	ne
 8003ab2:	2301      	movne	r3, #1
 8003ab4:	2300      	moveq	r3, #0
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d03e      	beq.n	8003b3a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ac0:	f003 031f 	and.w	r3, r3, #31
 8003ac4:	2210      	movs	r2, #16
 8003ac6:	409a      	lsls	r2, r3
 8003ac8:	6a3b      	ldr	r3, [r7, #32]
 8003aca:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d018      	beq.n	8003b0c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d108      	bne.n	8003afa <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d024      	beq.n	8003b3a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	4798      	blx	r3
 8003af8:	e01f      	b.n	8003b3a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d01b      	beq.n	8003b3a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	4798      	blx	r3
 8003b0a:	e016      	b.n	8003b3a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d107      	bne.n	8003b2a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 0208 	bic.w	r2, r2, #8
 8003b28:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d003      	beq.n	8003b3a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b3e:	f003 031f 	and.w	r3, r3, #31
 8003b42:	2220      	movs	r2, #32
 8003b44:	409a      	lsls	r2, r3
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	4013      	ands	r3, r2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f000 8110 	beq.w	8003d70 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a2c      	ldr	r2, [pc, #176]	@ (8003c08 <HAL_DMA_IRQHandler+0x690>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d04a      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x678>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a2b      	ldr	r2, [pc, #172]	@ (8003c0c <HAL_DMA_IRQHandler+0x694>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d045      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x678>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a29      	ldr	r2, [pc, #164]	@ (8003c10 <HAL_DMA_IRQHandler+0x698>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d040      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x678>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a28      	ldr	r2, [pc, #160]	@ (8003c14 <HAL_DMA_IRQHandler+0x69c>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d03b      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x678>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a26      	ldr	r2, [pc, #152]	@ (8003c18 <HAL_DMA_IRQHandler+0x6a0>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d036      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x678>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a25      	ldr	r2, [pc, #148]	@ (8003c1c <HAL_DMA_IRQHandler+0x6a4>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d031      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x678>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a23      	ldr	r2, [pc, #140]	@ (8003c20 <HAL_DMA_IRQHandler+0x6a8>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d02c      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x678>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a22      	ldr	r2, [pc, #136]	@ (8003c24 <HAL_DMA_IRQHandler+0x6ac>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d027      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x678>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a20      	ldr	r2, [pc, #128]	@ (8003c28 <HAL_DMA_IRQHandler+0x6b0>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d022      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x678>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a1f      	ldr	r2, [pc, #124]	@ (8003c2c <HAL_DMA_IRQHandler+0x6b4>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d01d      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x678>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a1d      	ldr	r2, [pc, #116]	@ (8003c30 <HAL_DMA_IRQHandler+0x6b8>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d018      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x678>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a1c      	ldr	r2, [pc, #112]	@ (8003c34 <HAL_DMA_IRQHandler+0x6bc>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d013      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x678>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a1a      	ldr	r2, [pc, #104]	@ (8003c38 <HAL_DMA_IRQHandler+0x6c0>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d00e      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x678>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a19      	ldr	r2, [pc, #100]	@ (8003c3c <HAL_DMA_IRQHandler+0x6c4>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d009      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x678>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a17      	ldr	r2, [pc, #92]	@ (8003c40 <HAL_DMA_IRQHandler+0x6c8>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d004      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x678>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a16      	ldr	r2, [pc, #88]	@ (8003c44 <HAL_DMA_IRQHandler+0x6cc>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d12b      	bne.n	8003c48 <HAL_DMA_IRQHandler+0x6d0>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0310 	and.w	r3, r3, #16
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	bf14      	ite	ne
 8003bfe:	2301      	movne	r3, #1
 8003c00:	2300      	moveq	r3, #0
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	e02a      	b.n	8003c5c <HAL_DMA_IRQHandler+0x6e4>
 8003c06:	bf00      	nop
 8003c08:	40020010 	.word	0x40020010
 8003c0c:	40020028 	.word	0x40020028
 8003c10:	40020040 	.word	0x40020040
 8003c14:	40020058 	.word	0x40020058
 8003c18:	40020070 	.word	0x40020070
 8003c1c:	40020088 	.word	0x40020088
 8003c20:	400200a0 	.word	0x400200a0
 8003c24:	400200b8 	.word	0x400200b8
 8003c28:	40020410 	.word	0x40020410
 8003c2c:	40020428 	.word	0x40020428
 8003c30:	40020440 	.word	0x40020440
 8003c34:	40020458 	.word	0x40020458
 8003c38:	40020470 	.word	0x40020470
 8003c3c:	40020488 	.word	0x40020488
 8003c40:	400204a0 	.word	0x400204a0
 8003c44:	400204b8 	.word	0x400204b8
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	bf14      	ite	ne
 8003c56:	2301      	movne	r3, #1
 8003c58:	2300      	moveq	r3, #0
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f000 8087 	beq.w	8003d70 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c66:	f003 031f 	and.w	r3, r3, #31
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	409a      	lsls	r2, r3
 8003c6e:	6a3b      	ldr	r3, [r7, #32]
 8003c70:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b04      	cmp	r3, #4
 8003c7c:	d139      	bne.n	8003cf2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 0216 	bic.w	r2, r2, #22
 8003c8c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	695a      	ldr	r2, [r3, #20]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c9c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d103      	bne.n	8003cae <HAL_DMA_IRQHandler+0x736>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d007      	beq.n	8003cbe <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f022 0208 	bic.w	r2, r2, #8
 8003cbc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cc2:	f003 031f 	and.w	r3, r3, #31
 8003cc6:	223f      	movs	r2, #63	@ 0x3f
 8003cc8:	409a      	lsls	r2, r3
 8003cca:	6a3b      	ldr	r3, [r7, #32]
 8003ccc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f000 8382 	beq.w	80043ec <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	4798      	blx	r3
          }
          return;
 8003cf0:	e37c      	b.n	80043ec <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d018      	beq.n	8003d32 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d108      	bne.n	8003d20 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d02c      	beq.n	8003d70 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	4798      	blx	r3
 8003d1e:	e027      	b.n	8003d70 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d023      	beq.n	8003d70 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	4798      	blx	r3
 8003d30:	e01e      	b.n	8003d70 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d10f      	bne.n	8003d60 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f022 0210 	bic.w	r2, r2, #16
 8003d4e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d003      	beq.n	8003d70 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 833e 	beq.w	80043f6 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f000 8088 	beq.w	8003e98 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2204      	movs	r2, #4
 8003d8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a89      	ldr	r2, [pc, #548]	@ (8003fbc <HAL_DMA_IRQHandler+0xa44>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d04a      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x8b8>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a88      	ldr	r2, [pc, #544]	@ (8003fc0 <HAL_DMA_IRQHandler+0xa48>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d045      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x8b8>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a86      	ldr	r2, [pc, #536]	@ (8003fc4 <HAL_DMA_IRQHandler+0xa4c>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d040      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x8b8>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a85      	ldr	r2, [pc, #532]	@ (8003fc8 <HAL_DMA_IRQHandler+0xa50>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d03b      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x8b8>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a83      	ldr	r2, [pc, #524]	@ (8003fcc <HAL_DMA_IRQHandler+0xa54>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d036      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x8b8>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a82      	ldr	r2, [pc, #520]	@ (8003fd0 <HAL_DMA_IRQHandler+0xa58>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d031      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x8b8>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a80      	ldr	r2, [pc, #512]	@ (8003fd4 <HAL_DMA_IRQHandler+0xa5c>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d02c      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x8b8>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a7f      	ldr	r2, [pc, #508]	@ (8003fd8 <HAL_DMA_IRQHandler+0xa60>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d027      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x8b8>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a7d      	ldr	r2, [pc, #500]	@ (8003fdc <HAL_DMA_IRQHandler+0xa64>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d022      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x8b8>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a7c      	ldr	r2, [pc, #496]	@ (8003fe0 <HAL_DMA_IRQHandler+0xa68>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d01d      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x8b8>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a7a      	ldr	r2, [pc, #488]	@ (8003fe4 <HAL_DMA_IRQHandler+0xa6c>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d018      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x8b8>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a79      	ldr	r2, [pc, #484]	@ (8003fe8 <HAL_DMA_IRQHandler+0xa70>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d013      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x8b8>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a77      	ldr	r2, [pc, #476]	@ (8003fec <HAL_DMA_IRQHandler+0xa74>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d00e      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x8b8>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a76      	ldr	r2, [pc, #472]	@ (8003ff0 <HAL_DMA_IRQHandler+0xa78>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d009      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x8b8>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a74      	ldr	r2, [pc, #464]	@ (8003ff4 <HAL_DMA_IRQHandler+0xa7c>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d004      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x8b8>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a73      	ldr	r2, [pc, #460]	@ (8003ff8 <HAL_DMA_IRQHandler+0xa80>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d108      	bne.n	8003e42 <HAL_DMA_IRQHandler+0x8ca>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f022 0201 	bic.w	r2, r2, #1
 8003e3e:	601a      	str	r2, [r3, #0]
 8003e40:	e007      	b.n	8003e52 <HAL_DMA_IRQHandler+0x8da>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 0201 	bic.w	r2, r2, #1
 8003e50:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	3301      	adds	r3, #1
 8003e56:	60fb      	str	r3, [r7, #12]
 8003e58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d307      	bcc.n	8003e6e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0301 	and.w	r3, r3, #1
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1f2      	bne.n	8003e52 <HAL_DMA_IRQHandler+0x8da>
 8003e6c:	e000      	b.n	8003e70 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003e6e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d004      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2203      	movs	r2, #3
 8003e82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003e86:	e003      	b.n	8003e90 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f000 82aa 	beq.w	80043f6 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	4798      	blx	r3
 8003eaa:	e2a4      	b.n	80043f6 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a52      	ldr	r2, [pc, #328]	@ (8003ffc <HAL_DMA_IRQHandler+0xa84>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d04a      	beq.n	8003f4c <HAL_DMA_IRQHandler+0x9d4>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a51      	ldr	r2, [pc, #324]	@ (8004000 <HAL_DMA_IRQHandler+0xa88>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d045      	beq.n	8003f4c <HAL_DMA_IRQHandler+0x9d4>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a4f      	ldr	r2, [pc, #316]	@ (8004004 <HAL_DMA_IRQHandler+0xa8c>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d040      	beq.n	8003f4c <HAL_DMA_IRQHandler+0x9d4>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a4e      	ldr	r2, [pc, #312]	@ (8004008 <HAL_DMA_IRQHandler+0xa90>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d03b      	beq.n	8003f4c <HAL_DMA_IRQHandler+0x9d4>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a4c      	ldr	r2, [pc, #304]	@ (800400c <HAL_DMA_IRQHandler+0xa94>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d036      	beq.n	8003f4c <HAL_DMA_IRQHandler+0x9d4>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a4b      	ldr	r2, [pc, #300]	@ (8004010 <HAL_DMA_IRQHandler+0xa98>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d031      	beq.n	8003f4c <HAL_DMA_IRQHandler+0x9d4>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a49      	ldr	r2, [pc, #292]	@ (8004014 <HAL_DMA_IRQHandler+0xa9c>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d02c      	beq.n	8003f4c <HAL_DMA_IRQHandler+0x9d4>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a48      	ldr	r2, [pc, #288]	@ (8004018 <HAL_DMA_IRQHandler+0xaa0>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d027      	beq.n	8003f4c <HAL_DMA_IRQHandler+0x9d4>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a46      	ldr	r2, [pc, #280]	@ (800401c <HAL_DMA_IRQHandler+0xaa4>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d022      	beq.n	8003f4c <HAL_DMA_IRQHandler+0x9d4>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a45      	ldr	r2, [pc, #276]	@ (8004020 <HAL_DMA_IRQHandler+0xaa8>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d01d      	beq.n	8003f4c <HAL_DMA_IRQHandler+0x9d4>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a43      	ldr	r2, [pc, #268]	@ (8004024 <HAL_DMA_IRQHandler+0xaac>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d018      	beq.n	8003f4c <HAL_DMA_IRQHandler+0x9d4>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a42      	ldr	r2, [pc, #264]	@ (8004028 <HAL_DMA_IRQHandler+0xab0>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d013      	beq.n	8003f4c <HAL_DMA_IRQHandler+0x9d4>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a40      	ldr	r2, [pc, #256]	@ (800402c <HAL_DMA_IRQHandler+0xab4>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d00e      	beq.n	8003f4c <HAL_DMA_IRQHandler+0x9d4>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a3f      	ldr	r2, [pc, #252]	@ (8004030 <HAL_DMA_IRQHandler+0xab8>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d009      	beq.n	8003f4c <HAL_DMA_IRQHandler+0x9d4>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a3d      	ldr	r2, [pc, #244]	@ (8004034 <HAL_DMA_IRQHandler+0xabc>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d004      	beq.n	8003f4c <HAL_DMA_IRQHandler+0x9d4>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a3c      	ldr	r2, [pc, #240]	@ (8004038 <HAL_DMA_IRQHandler+0xac0>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d101      	bne.n	8003f50 <HAL_DMA_IRQHandler+0x9d8>
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e000      	b.n	8003f52 <HAL_DMA_IRQHandler+0x9da>
 8003f50:	2300      	movs	r3, #0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f000 824f 	beq.w	80043f6 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f64:	f003 031f 	and.w	r3, r3, #31
 8003f68:	2204      	movs	r2, #4
 8003f6a:	409a      	lsls	r2, r3
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	4013      	ands	r3, r2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f000 80dd 	beq.w	8004130 <HAL_DMA_IRQHandler+0xbb8>
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	f003 0304 	and.w	r3, r3, #4
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 80d7 	beq.w	8004130 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f86:	f003 031f 	and.w	r3, r3, #31
 8003f8a:	2204      	movs	r2, #4
 8003f8c:	409a      	lsls	r2, r3
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d059      	beq.n	8004050 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d14a      	bne.n	800403c <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f000 8220 	beq.w	80043f0 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003fb8:	e21a      	b.n	80043f0 <HAL_DMA_IRQHandler+0xe78>
 8003fba:	bf00      	nop
 8003fbc:	40020010 	.word	0x40020010
 8003fc0:	40020028 	.word	0x40020028
 8003fc4:	40020040 	.word	0x40020040
 8003fc8:	40020058 	.word	0x40020058
 8003fcc:	40020070 	.word	0x40020070
 8003fd0:	40020088 	.word	0x40020088
 8003fd4:	400200a0 	.word	0x400200a0
 8003fd8:	400200b8 	.word	0x400200b8
 8003fdc:	40020410 	.word	0x40020410
 8003fe0:	40020428 	.word	0x40020428
 8003fe4:	40020440 	.word	0x40020440
 8003fe8:	40020458 	.word	0x40020458
 8003fec:	40020470 	.word	0x40020470
 8003ff0:	40020488 	.word	0x40020488
 8003ff4:	400204a0 	.word	0x400204a0
 8003ff8:	400204b8 	.word	0x400204b8
 8003ffc:	48022c08 	.word	0x48022c08
 8004000:	48022c1c 	.word	0x48022c1c
 8004004:	48022c30 	.word	0x48022c30
 8004008:	48022c44 	.word	0x48022c44
 800400c:	48022c58 	.word	0x48022c58
 8004010:	48022c6c 	.word	0x48022c6c
 8004014:	48022c80 	.word	0x48022c80
 8004018:	48022c94 	.word	0x48022c94
 800401c:	58025408 	.word	0x58025408
 8004020:	5802541c 	.word	0x5802541c
 8004024:	58025430 	.word	0x58025430
 8004028:	58025444 	.word	0x58025444
 800402c:	58025458 	.word	0x58025458
 8004030:	5802546c 	.word	0x5802546c
 8004034:	58025480 	.word	0x58025480
 8004038:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004040:	2b00      	cmp	r3, #0
 8004042:	f000 81d5 	beq.w	80043f0 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800404e:	e1cf      	b.n	80043f0 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	f003 0320 	and.w	r3, r3, #32
 8004056:	2b00      	cmp	r3, #0
 8004058:	d160      	bne.n	800411c <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a7f      	ldr	r2, [pc, #508]	@ (800425c <HAL_DMA_IRQHandler+0xce4>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d04a      	beq.n	80040fa <HAL_DMA_IRQHandler+0xb82>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a7d      	ldr	r2, [pc, #500]	@ (8004260 <HAL_DMA_IRQHandler+0xce8>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d045      	beq.n	80040fa <HAL_DMA_IRQHandler+0xb82>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a7c      	ldr	r2, [pc, #496]	@ (8004264 <HAL_DMA_IRQHandler+0xcec>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d040      	beq.n	80040fa <HAL_DMA_IRQHandler+0xb82>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a7a      	ldr	r2, [pc, #488]	@ (8004268 <HAL_DMA_IRQHandler+0xcf0>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d03b      	beq.n	80040fa <HAL_DMA_IRQHandler+0xb82>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a79      	ldr	r2, [pc, #484]	@ (800426c <HAL_DMA_IRQHandler+0xcf4>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d036      	beq.n	80040fa <HAL_DMA_IRQHandler+0xb82>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a77      	ldr	r2, [pc, #476]	@ (8004270 <HAL_DMA_IRQHandler+0xcf8>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d031      	beq.n	80040fa <HAL_DMA_IRQHandler+0xb82>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a76      	ldr	r2, [pc, #472]	@ (8004274 <HAL_DMA_IRQHandler+0xcfc>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d02c      	beq.n	80040fa <HAL_DMA_IRQHandler+0xb82>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a74      	ldr	r2, [pc, #464]	@ (8004278 <HAL_DMA_IRQHandler+0xd00>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d027      	beq.n	80040fa <HAL_DMA_IRQHandler+0xb82>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a73      	ldr	r2, [pc, #460]	@ (800427c <HAL_DMA_IRQHandler+0xd04>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d022      	beq.n	80040fa <HAL_DMA_IRQHandler+0xb82>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a71      	ldr	r2, [pc, #452]	@ (8004280 <HAL_DMA_IRQHandler+0xd08>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d01d      	beq.n	80040fa <HAL_DMA_IRQHandler+0xb82>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a70      	ldr	r2, [pc, #448]	@ (8004284 <HAL_DMA_IRQHandler+0xd0c>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d018      	beq.n	80040fa <HAL_DMA_IRQHandler+0xb82>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a6e      	ldr	r2, [pc, #440]	@ (8004288 <HAL_DMA_IRQHandler+0xd10>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d013      	beq.n	80040fa <HAL_DMA_IRQHandler+0xb82>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a6d      	ldr	r2, [pc, #436]	@ (800428c <HAL_DMA_IRQHandler+0xd14>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d00e      	beq.n	80040fa <HAL_DMA_IRQHandler+0xb82>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a6b      	ldr	r2, [pc, #428]	@ (8004290 <HAL_DMA_IRQHandler+0xd18>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d009      	beq.n	80040fa <HAL_DMA_IRQHandler+0xb82>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a6a      	ldr	r2, [pc, #424]	@ (8004294 <HAL_DMA_IRQHandler+0xd1c>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d004      	beq.n	80040fa <HAL_DMA_IRQHandler+0xb82>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a68      	ldr	r2, [pc, #416]	@ (8004298 <HAL_DMA_IRQHandler+0xd20>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d108      	bne.n	800410c <HAL_DMA_IRQHandler+0xb94>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 0208 	bic.w	r2, r2, #8
 8004108:	601a      	str	r2, [r3, #0]
 800410a:	e007      	b.n	800411c <HAL_DMA_IRQHandler+0xba4>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f022 0204 	bic.w	r2, r2, #4
 800411a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004120:	2b00      	cmp	r3, #0
 8004122:	f000 8165 	beq.w	80043f0 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800412e:	e15f      	b.n	80043f0 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004134:	f003 031f 	and.w	r3, r3, #31
 8004138:	2202      	movs	r2, #2
 800413a:	409a      	lsls	r2, r3
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	4013      	ands	r3, r2
 8004140:	2b00      	cmp	r3, #0
 8004142:	f000 80c5 	beq.w	80042d0 <HAL_DMA_IRQHandler+0xd58>
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	f003 0302 	and.w	r3, r3, #2
 800414c:	2b00      	cmp	r3, #0
 800414e:	f000 80bf 	beq.w	80042d0 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004156:	f003 031f 	and.w	r3, r3, #31
 800415a:	2202      	movs	r2, #2
 800415c:	409a      	lsls	r2, r3
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d018      	beq.n	800419e <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d109      	bne.n	800418a <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800417a:	2b00      	cmp	r3, #0
 800417c:	f000 813a 	beq.w	80043f4 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004188:	e134      	b.n	80043f4 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800418e:	2b00      	cmp	r3, #0
 8004190:	f000 8130 	beq.w	80043f4 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800419c:	e12a      	b.n	80043f4 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	f003 0320 	and.w	r3, r3, #32
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f040 8089 	bne.w	80042bc <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a2b      	ldr	r2, [pc, #172]	@ (800425c <HAL_DMA_IRQHandler+0xce4>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d04a      	beq.n	800424a <HAL_DMA_IRQHandler+0xcd2>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a29      	ldr	r2, [pc, #164]	@ (8004260 <HAL_DMA_IRQHandler+0xce8>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d045      	beq.n	800424a <HAL_DMA_IRQHandler+0xcd2>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a28      	ldr	r2, [pc, #160]	@ (8004264 <HAL_DMA_IRQHandler+0xcec>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d040      	beq.n	800424a <HAL_DMA_IRQHandler+0xcd2>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a26      	ldr	r2, [pc, #152]	@ (8004268 <HAL_DMA_IRQHandler+0xcf0>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d03b      	beq.n	800424a <HAL_DMA_IRQHandler+0xcd2>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a25      	ldr	r2, [pc, #148]	@ (800426c <HAL_DMA_IRQHandler+0xcf4>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d036      	beq.n	800424a <HAL_DMA_IRQHandler+0xcd2>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a23      	ldr	r2, [pc, #140]	@ (8004270 <HAL_DMA_IRQHandler+0xcf8>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d031      	beq.n	800424a <HAL_DMA_IRQHandler+0xcd2>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a22      	ldr	r2, [pc, #136]	@ (8004274 <HAL_DMA_IRQHandler+0xcfc>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d02c      	beq.n	800424a <HAL_DMA_IRQHandler+0xcd2>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a20      	ldr	r2, [pc, #128]	@ (8004278 <HAL_DMA_IRQHandler+0xd00>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d027      	beq.n	800424a <HAL_DMA_IRQHandler+0xcd2>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a1f      	ldr	r2, [pc, #124]	@ (800427c <HAL_DMA_IRQHandler+0xd04>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d022      	beq.n	800424a <HAL_DMA_IRQHandler+0xcd2>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a1d      	ldr	r2, [pc, #116]	@ (8004280 <HAL_DMA_IRQHandler+0xd08>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d01d      	beq.n	800424a <HAL_DMA_IRQHandler+0xcd2>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a1c      	ldr	r2, [pc, #112]	@ (8004284 <HAL_DMA_IRQHandler+0xd0c>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d018      	beq.n	800424a <HAL_DMA_IRQHandler+0xcd2>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a1a      	ldr	r2, [pc, #104]	@ (8004288 <HAL_DMA_IRQHandler+0xd10>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d013      	beq.n	800424a <HAL_DMA_IRQHandler+0xcd2>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a19      	ldr	r2, [pc, #100]	@ (800428c <HAL_DMA_IRQHandler+0xd14>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d00e      	beq.n	800424a <HAL_DMA_IRQHandler+0xcd2>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a17      	ldr	r2, [pc, #92]	@ (8004290 <HAL_DMA_IRQHandler+0xd18>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d009      	beq.n	800424a <HAL_DMA_IRQHandler+0xcd2>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a16      	ldr	r2, [pc, #88]	@ (8004294 <HAL_DMA_IRQHandler+0xd1c>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d004      	beq.n	800424a <HAL_DMA_IRQHandler+0xcd2>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a14      	ldr	r2, [pc, #80]	@ (8004298 <HAL_DMA_IRQHandler+0xd20>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d128      	bne.n	800429c <HAL_DMA_IRQHandler+0xd24>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f022 0214 	bic.w	r2, r2, #20
 8004258:	601a      	str	r2, [r3, #0]
 800425a:	e027      	b.n	80042ac <HAL_DMA_IRQHandler+0xd34>
 800425c:	40020010 	.word	0x40020010
 8004260:	40020028 	.word	0x40020028
 8004264:	40020040 	.word	0x40020040
 8004268:	40020058 	.word	0x40020058
 800426c:	40020070 	.word	0x40020070
 8004270:	40020088 	.word	0x40020088
 8004274:	400200a0 	.word	0x400200a0
 8004278:	400200b8 	.word	0x400200b8
 800427c:	40020410 	.word	0x40020410
 8004280:	40020428 	.word	0x40020428
 8004284:	40020440 	.word	0x40020440
 8004288:	40020458 	.word	0x40020458
 800428c:	40020470 	.word	0x40020470
 8004290:	40020488 	.word	0x40020488
 8004294:	400204a0 	.word	0x400204a0
 8004298:	400204b8 	.word	0x400204b8
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f022 020a 	bic.w	r2, r2, #10
 80042aa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f000 8097 	beq.w	80043f4 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042ce:	e091      	b.n	80043f4 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042d4:	f003 031f 	and.w	r3, r3, #31
 80042d8:	2208      	movs	r2, #8
 80042da:	409a      	lsls	r2, r3
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	4013      	ands	r3, r2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f000 8088 	beq.w	80043f6 <HAL_DMA_IRQHandler+0xe7e>
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	f003 0308 	and.w	r3, r3, #8
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f000 8082 	beq.w	80043f6 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a41      	ldr	r2, [pc, #260]	@ (80043fc <HAL_DMA_IRQHandler+0xe84>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d04a      	beq.n	8004392 <HAL_DMA_IRQHandler+0xe1a>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a3f      	ldr	r2, [pc, #252]	@ (8004400 <HAL_DMA_IRQHandler+0xe88>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d045      	beq.n	8004392 <HAL_DMA_IRQHandler+0xe1a>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a3e      	ldr	r2, [pc, #248]	@ (8004404 <HAL_DMA_IRQHandler+0xe8c>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d040      	beq.n	8004392 <HAL_DMA_IRQHandler+0xe1a>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a3c      	ldr	r2, [pc, #240]	@ (8004408 <HAL_DMA_IRQHandler+0xe90>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d03b      	beq.n	8004392 <HAL_DMA_IRQHandler+0xe1a>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a3b      	ldr	r2, [pc, #236]	@ (800440c <HAL_DMA_IRQHandler+0xe94>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d036      	beq.n	8004392 <HAL_DMA_IRQHandler+0xe1a>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a39      	ldr	r2, [pc, #228]	@ (8004410 <HAL_DMA_IRQHandler+0xe98>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d031      	beq.n	8004392 <HAL_DMA_IRQHandler+0xe1a>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a38      	ldr	r2, [pc, #224]	@ (8004414 <HAL_DMA_IRQHandler+0xe9c>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d02c      	beq.n	8004392 <HAL_DMA_IRQHandler+0xe1a>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a36      	ldr	r2, [pc, #216]	@ (8004418 <HAL_DMA_IRQHandler+0xea0>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d027      	beq.n	8004392 <HAL_DMA_IRQHandler+0xe1a>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a35      	ldr	r2, [pc, #212]	@ (800441c <HAL_DMA_IRQHandler+0xea4>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d022      	beq.n	8004392 <HAL_DMA_IRQHandler+0xe1a>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a33      	ldr	r2, [pc, #204]	@ (8004420 <HAL_DMA_IRQHandler+0xea8>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d01d      	beq.n	8004392 <HAL_DMA_IRQHandler+0xe1a>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a32      	ldr	r2, [pc, #200]	@ (8004424 <HAL_DMA_IRQHandler+0xeac>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d018      	beq.n	8004392 <HAL_DMA_IRQHandler+0xe1a>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a30      	ldr	r2, [pc, #192]	@ (8004428 <HAL_DMA_IRQHandler+0xeb0>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d013      	beq.n	8004392 <HAL_DMA_IRQHandler+0xe1a>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a2f      	ldr	r2, [pc, #188]	@ (800442c <HAL_DMA_IRQHandler+0xeb4>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d00e      	beq.n	8004392 <HAL_DMA_IRQHandler+0xe1a>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a2d      	ldr	r2, [pc, #180]	@ (8004430 <HAL_DMA_IRQHandler+0xeb8>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d009      	beq.n	8004392 <HAL_DMA_IRQHandler+0xe1a>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a2c      	ldr	r2, [pc, #176]	@ (8004434 <HAL_DMA_IRQHandler+0xebc>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d004      	beq.n	8004392 <HAL_DMA_IRQHandler+0xe1a>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a2a      	ldr	r2, [pc, #168]	@ (8004438 <HAL_DMA_IRQHandler+0xec0>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d108      	bne.n	80043a4 <HAL_DMA_IRQHandler+0xe2c>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f022 021c 	bic.w	r2, r2, #28
 80043a0:	601a      	str	r2, [r3, #0]
 80043a2:	e007      	b.n	80043b4 <HAL_DMA_IRQHandler+0xe3c>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f022 020e 	bic.w	r2, r2, #14
 80043b2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043b8:	f003 031f 	and.w	r3, r3, #31
 80043bc:	2201      	movs	r2, #1
 80043be:	409a      	lsls	r2, r3
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d009      	beq.n	80043f6 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	4798      	blx	r3
 80043ea:	e004      	b.n	80043f6 <HAL_DMA_IRQHandler+0xe7e>
          return;
 80043ec:	bf00      	nop
 80043ee:	e002      	b.n	80043f6 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043f0:	bf00      	nop
 80043f2:	e000      	b.n	80043f6 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043f4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80043f6:	3728      	adds	r7, #40	@ 0x28
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	40020010 	.word	0x40020010
 8004400:	40020028 	.word	0x40020028
 8004404:	40020040 	.word	0x40020040
 8004408:	40020058 	.word	0x40020058
 800440c:	40020070 	.word	0x40020070
 8004410:	40020088 	.word	0x40020088
 8004414:	400200a0 	.word	0x400200a0
 8004418:	400200b8 	.word	0x400200b8
 800441c:	40020410 	.word	0x40020410
 8004420:	40020428 	.word	0x40020428
 8004424:	40020440 	.word	0x40020440
 8004428:	40020458 	.word	0x40020458
 800442c:	40020470 	.word	0x40020470
 8004430:	40020488 	.word	0x40020488
 8004434:	400204a0 	.word	0x400204a0
 8004438:	400204b8 	.word	0x400204b8

0800443c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800444a:	b2db      	uxtb	r3, r3
}
 800444c:	4618      	mov	r0, r3
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004464:	4618      	mov	r0, r3
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004470:	b480      	push	{r7}
 8004472:	b087      	sub	sp, #28
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
 800447c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004482:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004488:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a7f      	ldr	r2, [pc, #508]	@ (800468c <DMA_SetConfig+0x21c>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d072      	beq.n	800457a <DMA_SetConfig+0x10a>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a7d      	ldr	r2, [pc, #500]	@ (8004690 <DMA_SetConfig+0x220>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d06d      	beq.n	800457a <DMA_SetConfig+0x10a>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a7c      	ldr	r2, [pc, #496]	@ (8004694 <DMA_SetConfig+0x224>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d068      	beq.n	800457a <DMA_SetConfig+0x10a>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a7a      	ldr	r2, [pc, #488]	@ (8004698 <DMA_SetConfig+0x228>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d063      	beq.n	800457a <DMA_SetConfig+0x10a>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a79      	ldr	r2, [pc, #484]	@ (800469c <DMA_SetConfig+0x22c>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d05e      	beq.n	800457a <DMA_SetConfig+0x10a>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a77      	ldr	r2, [pc, #476]	@ (80046a0 <DMA_SetConfig+0x230>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d059      	beq.n	800457a <DMA_SetConfig+0x10a>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a76      	ldr	r2, [pc, #472]	@ (80046a4 <DMA_SetConfig+0x234>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d054      	beq.n	800457a <DMA_SetConfig+0x10a>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a74      	ldr	r2, [pc, #464]	@ (80046a8 <DMA_SetConfig+0x238>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d04f      	beq.n	800457a <DMA_SetConfig+0x10a>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a73      	ldr	r2, [pc, #460]	@ (80046ac <DMA_SetConfig+0x23c>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d04a      	beq.n	800457a <DMA_SetConfig+0x10a>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a71      	ldr	r2, [pc, #452]	@ (80046b0 <DMA_SetConfig+0x240>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d045      	beq.n	800457a <DMA_SetConfig+0x10a>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a70      	ldr	r2, [pc, #448]	@ (80046b4 <DMA_SetConfig+0x244>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d040      	beq.n	800457a <DMA_SetConfig+0x10a>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a6e      	ldr	r2, [pc, #440]	@ (80046b8 <DMA_SetConfig+0x248>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d03b      	beq.n	800457a <DMA_SetConfig+0x10a>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a6d      	ldr	r2, [pc, #436]	@ (80046bc <DMA_SetConfig+0x24c>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d036      	beq.n	800457a <DMA_SetConfig+0x10a>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a6b      	ldr	r2, [pc, #428]	@ (80046c0 <DMA_SetConfig+0x250>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d031      	beq.n	800457a <DMA_SetConfig+0x10a>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a6a      	ldr	r2, [pc, #424]	@ (80046c4 <DMA_SetConfig+0x254>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d02c      	beq.n	800457a <DMA_SetConfig+0x10a>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a68      	ldr	r2, [pc, #416]	@ (80046c8 <DMA_SetConfig+0x258>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d027      	beq.n	800457a <DMA_SetConfig+0x10a>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a67      	ldr	r2, [pc, #412]	@ (80046cc <DMA_SetConfig+0x25c>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d022      	beq.n	800457a <DMA_SetConfig+0x10a>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a65      	ldr	r2, [pc, #404]	@ (80046d0 <DMA_SetConfig+0x260>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d01d      	beq.n	800457a <DMA_SetConfig+0x10a>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a64      	ldr	r2, [pc, #400]	@ (80046d4 <DMA_SetConfig+0x264>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d018      	beq.n	800457a <DMA_SetConfig+0x10a>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a62      	ldr	r2, [pc, #392]	@ (80046d8 <DMA_SetConfig+0x268>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d013      	beq.n	800457a <DMA_SetConfig+0x10a>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a61      	ldr	r2, [pc, #388]	@ (80046dc <DMA_SetConfig+0x26c>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d00e      	beq.n	800457a <DMA_SetConfig+0x10a>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a5f      	ldr	r2, [pc, #380]	@ (80046e0 <DMA_SetConfig+0x270>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d009      	beq.n	800457a <DMA_SetConfig+0x10a>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a5e      	ldr	r2, [pc, #376]	@ (80046e4 <DMA_SetConfig+0x274>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d004      	beq.n	800457a <DMA_SetConfig+0x10a>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a5c      	ldr	r2, [pc, #368]	@ (80046e8 <DMA_SetConfig+0x278>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d101      	bne.n	800457e <DMA_SetConfig+0x10e>
 800457a:	2301      	movs	r3, #1
 800457c:	e000      	b.n	8004580 <DMA_SetConfig+0x110>
 800457e:	2300      	movs	r3, #0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00d      	beq.n	80045a0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800458c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004592:	2b00      	cmp	r3, #0
 8004594:	d004      	beq.n	80045a0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800459e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a39      	ldr	r2, [pc, #228]	@ (800468c <DMA_SetConfig+0x21c>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d04a      	beq.n	8004640 <DMA_SetConfig+0x1d0>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a38      	ldr	r2, [pc, #224]	@ (8004690 <DMA_SetConfig+0x220>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d045      	beq.n	8004640 <DMA_SetConfig+0x1d0>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a36      	ldr	r2, [pc, #216]	@ (8004694 <DMA_SetConfig+0x224>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d040      	beq.n	8004640 <DMA_SetConfig+0x1d0>
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a35      	ldr	r2, [pc, #212]	@ (8004698 <DMA_SetConfig+0x228>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d03b      	beq.n	8004640 <DMA_SetConfig+0x1d0>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a33      	ldr	r2, [pc, #204]	@ (800469c <DMA_SetConfig+0x22c>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d036      	beq.n	8004640 <DMA_SetConfig+0x1d0>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a32      	ldr	r2, [pc, #200]	@ (80046a0 <DMA_SetConfig+0x230>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d031      	beq.n	8004640 <DMA_SetConfig+0x1d0>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a30      	ldr	r2, [pc, #192]	@ (80046a4 <DMA_SetConfig+0x234>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d02c      	beq.n	8004640 <DMA_SetConfig+0x1d0>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a2f      	ldr	r2, [pc, #188]	@ (80046a8 <DMA_SetConfig+0x238>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d027      	beq.n	8004640 <DMA_SetConfig+0x1d0>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a2d      	ldr	r2, [pc, #180]	@ (80046ac <DMA_SetConfig+0x23c>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d022      	beq.n	8004640 <DMA_SetConfig+0x1d0>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a2c      	ldr	r2, [pc, #176]	@ (80046b0 <DMA_SetConfig+0x240>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d01d      	beq.n	8004640 <DMA_SetConfig+0x1d0>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a2a      	ldr	r2, [pc, #168]	@ (80046b4 <DMA_SetConfig+0x244>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d018      	beq.n	8004640 <DMA_SetConfig+0x1d0>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a29      	ldr	r2, [pc, #164]	@ (80046b8 <DMA_SetConfig+0x248>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d013      	beq.n	8004640 <DMA_SetConfig+0x1d0>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a27      	ldr	r2, [pc, #156]	@ (80046bc <DMA_SetConfig+0x24c>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d00e      	beq.n	8004640 <DMA_SetConfig+0x1d0>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a26      	ldr	r2, [pc, #152]	@ (80046c0 <DMA_SetConfig+0x250>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d009      	beq.n	8004640 <DMA_SetConfig+0x1d0>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a24      	ldr	r2, [pc, #144]	@ (80046c4 <DMA_SetConfig+0x254>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d004      	beq.n	8004640 <DMA_SetConfig+0x1d0>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a23      	ldr	r2, [pc, #140]	@ (80046c8 <DMA_SetConfig+0x258>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d101      	bne.n	8004644 <DMA_SetConfig+0x1d4>
 8004640:	2301      	movs	r3, #1
 8004642:	e000      	b.n	8004646 <DMA_SetConfig+0x1d6>
 8004644:	2300      	movs	r3, #0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d059      	beq.n	80046fe <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800464e:	f003 031f 	and.w	r3, r3, #31
 8004652:	223f      	movs	r2, #63	@ 0x3f
 8004654:	409a      	lsls	r2, r3
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004668:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	683a      	ldr	r2, [r7, #0]
 8004670:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	2b40      	cmp	r3, #64	@ 0x40
 8004678:	d138      	bne.n	80046ec <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68ba      	ldr	r2, [r7, #8]
 8004688:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800468a:	e0ae      	b.n	80047ea <DMA_SetConfig+0x37a>
 800468c:	40020010 	.word	0x40020010
 8004690:	40020028 	.word	0x40020028
 8004694:	40020040 	.word	0x40020040
 8004698:	40020058 	.word	0x40020058
 800469c:	40020070 	.word	0x40020070
 80046a0:	40020088 	.word	0x40020088
 80046a4:	400200a0 	.word	0x400200a0
 80046a8:	400200b8 	.word	0x400200b8
 80046ac:	40020410 	.word	0x40020410
 80046b0:	40020428 	.word	0x40020428
 80046b4:	40020440 	.word	0x40020440
 80046b8:	40020458 	.word	0x40020458
 80046bc:	40020470 	.word	0x40020470
 80046c0:	40020488 	.word	0x40020488
 80046c4:	400204a0 	.word	0x400204a0
 80046c8:	400204b8 	.word	0x400204b8
 80046cc:	58025408 	.word	0x58025408
 80046d0:	5802541c 	.word	0x5802541c
 80046d4:	58025430 	.word	0x58025430
 80046d8:	58025444 	.word	0x58025444
 80046dc:	58025458 	.word	0x58025458
 80046e0:	5802546c 	.word	0x5802546c
 80046e4:	58025480 	.word	0x58025480
 80046e8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68ba      	ldr	r2, [r7, #8]
 80046f2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	60da      	str	r2, [r3, #12]
}
 80046fc:	e075      	b.n	80047ea <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a3d      	ldr	r2, [pc, #244]	@ (80047f8 <DMA_SetConfig+0x388>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d04a      	beq.n	800479e <DMA_SetConfig+0x32e>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a3b      	ldr	r2, [pc, #236]	@ (80047fc <DMA_SetConfig+0x38c>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d045      	beq.n	800479e <DMA_SetConfig+0x32e>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a3a      	ldr	r2, [pc, #232]	@ (8004800 <DMA_SetConfig+0x390>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d040      	beq.n	800479e <DMA_SetConfig+0x32e>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a38      	ldr	r2, [pc, #224]	@ (8004804 <DMA_SetConfig+0x394>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d03b      	beq.n	800479e <DMA_SetConfig+0x32e>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a37      	ldr	r2, [pc, #220]	@ (8004808 <DMA_SetConfig+0x398>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d036      	beq.n	800479e <DMA_SetConfig+0x32e>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a35      	ldr	r2, [pc, #212]	@ (800480c <DMA_SetConfig+0x39c>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d031      	beq.n	800479e <DMA_SetConfig+0x32e>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a34      	ldr	r2, [pc, #208]	@ (8004810 <DMA_SetConfig+0x3a0>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d02c      	beq.n	800479e <DMA_SetConfig+0x32e>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a32      	ldr	r2, [pc, #200]	@ (8004814 <DMA_SetConfig+0x3a4>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d027      	beq.n	800479e <DMA_SetConfig+0x32e>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a31      	ldr	r2, [pc, #196]	@ (8004818 <DMA_SetConfig+0x3a8>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d022      	beq.n	800479e <DMA_SetConfig+0x32e>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a2f      	ldr	r2, [pc, #188]	@ (800481c <DMA_SetConfig+0x3ac>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d01d      	beq.n	800479e <DMA_SetConfig+0x32e>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a2e      	ldr	r2, [pc, #184]	@ (8004820 <DMA_SetConfig+0x3b0>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d018      	beq.n	800479e <DMA_SetConfig+0x32e>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a2c      	ldr	r2, [pc, #176]	@ (8004824 <DMA_SetConfig+0x3b4>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d013      	beq.n	800479e <DMA_SetConfig+0x32e>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a2b      	ldr	r2, [pc, #172]	@ (8004828 <DMA_SetConfig+0x3b8>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d00e      	beq.n	800479e <DMA_SetConfig+0x32e>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a29      	ldr	r2, [pc, #164]	@ (800482c <DMA_SetConfig+0x3bc>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d009      	beq.n	800479e <DMA_SetConfig+0x32e>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a28      	ldr	r2, [pc, #160]	@ (8004830 <DMA_SetConfig+0x3c0>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d004      	beq.n	800479e <DMA_SetConfig+0x32e>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a26      	ldr	r2, [pc, #152]	@ (8004834 <DMA_SetConfig+0x3c4>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d101      	bne.n	80047a2 <DMA_SetConfig+0x332>
 800479e:	2301      	movs	r3, #1
 80047a0:	e000      	b.n	80047a4 <DMA_SetConfig+0x334>
 80047a2:	2300      	movs	r3, #0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d020      	beq.n	80047ea <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047ac:	f003 031f 	and.w	r3, r3, #31
 80047b0:	2201      	movs	r2, #1
 80047b2:	409a      	lsls	r2, r3
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	683a      	ldr	r2, [r7, #0]
 80047be:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	2b40      	cmp	r3, #64	@ 0x40
 80047c6:	d108      	bne.n	80047da <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68ba      	ldr	r2, [r7, #8]
 80047d6:	60da      	str	r2, [r3, #12]
}
 80047d8:	e007      	b.n	80047ea <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68ba      	ldr	r2, [r7, #8]
 80047e0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	60da      	str	r2, [r3, #12]
}
 80047ea:	bf00      	nop
 80047ec:	371c      	adds	r7, #28
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	48022c08 	.word	0x48022c08
 80047fc:	48022c1c 	.word	0x48022c1c
 8004800:	48022c30 	.word	0x48022c30
 8004804:	48022c44 	.word	0x48022c44
 8004808:	48022c58 	.word	0x48022c58
 800480c:	48022c6c 	.word	0x48022c6c
 8004810:	48022c80 	.word	0x48022c80
 8004814:	48022c94 	.word	0x48022c94
 8004818:	58025408 	.word	0x58025408
 800481c:	5802541c 	.word	0x5802541c
 8004820:	58025430 	.word	0x58025430
 8004824:	58025444 	.word	0x58025444
 8004828:	58025458 	.word	0x58025458
 800482c:	5802546c 	.word	0x5802546c
 8004830:	58025480 	.word	0x58025480
 8004834:	58025494 	.word	0x58025494

08004838 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a42      	ldr	r2, [pc, #264]	@ (8004950 <DMA_CalcBaseAndBitshift+0x118>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d04a      	beq.n	80048e0 <DMA_CalcBaseAndBitshift+0xa8>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a41      	ldr	r2, [pc, #260]	@ (8004954 <DMA_CalcBaseAndBitshift+0x11c>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d045      	beq.n	80048e0 <DMA_CalcBaseAndBitshift+0xa8>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a3f      	ldr	r2, [pc, #252]	@ (8004958 <DMA_CalcBaseAndBitshift+0x120>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d040      	beq.n	80048e0 <DMA_CalcBaseAndBitshift+0xa8>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a3e      	ldr	r2, [pc, #248]	@ (800495c <DMA_CalcBaseAndBitshift+0x124>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d03b      	beq.n	80048e0 <DMA_CalcBaseAndBitshift+0xa8>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a3c      	ldr	r2, [pc, #240]	@ (8004960 <DMA_CalcBaseAndBitshift+0x128>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d036      	beq.n	80048e0 <DMA_CalcBaseAndBitshift+0xa8>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a3b      	ldr	r2, [pc, #236]	@ (8004964 <DMA_CalcBaseAndBitshift+0x12c>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d031      	beq.n	80048e0 <DMA_CalcBaseAndBitshift+0xa8>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a39      	ldr	r2, [pc, #228]	@ (8004968 <DMA_CalcBaseAndBitshift+0x130>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d02c      	beq.n	80048e0 <DMA_CalcBaseAndBitshift+0xa8>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a38      	ldr	r2, [pc, #224]	@ (800496c <DMA_CalcBaseAndBitshift+0x134>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d027      	beq.n	80048e0 <DMA_CalcBaseAndBitshift+0xa8>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a36      	ldr	r2, [pc, #216]	@ (8004970 <DMA_CalcBaseAndBitshift+0x138>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d022      	beq.n	80048e0 <DMA_CalcBaseAndBitshift+0xa8>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a35      	ldr	r2, [pc, #212]	@ (8004974 <DMA_CalcBaseAndBitshift+0x13c>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d01d      	beq.n	80048e0 <DMA_CalcBaseAndBitshift+0xa8>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a33      	ldr	r2, [pc, #204]	@ (8004978 <DMA_CalcBaseAndBitshift+0x140>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d018      	beq.n	80048e0 <DMA_CalcBaseAndBitshift+0xa8>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a32      	ldr	r2, [pc, #200]	@ (800497c <DMA_CalcBaseAndBitshift+0x144>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d013      	beq.n	80048e0 <DMA_CalcBaseAndBitshift+0xa8>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a30      	ldr	r2, [pc, #192]	@ (8004980 <DMA_CalcBaseAndBitshift+0x148>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d00e      	beq.n	80048e0 <DMA_CalcBaseAndBitshift+0xa8>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a2f      	ldr	r2, [pc, #188]	@ (8004984 <DMA_CalcBaseAndBitshift+0x14c>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d009      	beq.n	80048e0 <DMA_CalcBaseAndBitshift+0xa8>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a2d      	ldr	r2, [pc, #180]	@ (8004988 <DMA_CalcBaseAndBitshift+0x150>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d004      	beq.n	80048e0 <DMA_CalcBaseAndBitshift+0xa8>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a2c      	ldr	r2, [pc, #176]	@ (800498c <DMA_CalcBaseAndBitshift+0x154>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d101      	bne.n	80048e4 <DMA_CalcBaseAndBitshift+0xac>
 80048e0:	2301      	movs	r3, #1
 80048e2:	e000      	b.n	80048e6 <DMA_CalcBaseAndBitshift+0xae>
 80048e4:	2300      	movs	r3, #0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d024      	beq.n	8004934 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	3b10      	subs	r3, #16
 80048f2:	4a27      	ldr	r2, [pc, #156]	@ (8004990 <DMA_CalcBaseAndBitshift+0x158>)
 80048f4:	fba2 2303 	umull	r2, r3, r2, r3
 80048f8:	091b      	lsrs	r3, r3, #4
 80048fa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f003 0307 	and.w	r3, r3, #7
 8004902:	4a24      	ldr	r2, [pc, #144]	@ (8004994 <DMA_CalcBaseAndBitshift+0x15c>)
 8004904:	5cd3      	ldrb	r3, [r2, r3]
 8004906:	461a      	mov	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2b03      	cmp	r3, #3
 8004910:	d908      	bls.n	8004924 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	461a      	mov	r2, r3
 8004918:	4b1f      	ldr	r3, [pc, #124]	@ (8004998 <DMA_CalcBaseAndBitshift+0x160>)
 800491a:	4013      	ands	r3, r2
 800491c:	1d1a      	adds	r2, r3, #4
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	659a      	str	r2, [r3, #88]	@ 0x58
 8004922:	e00d      	b.n	8004940 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	461a      	mov	r2, r3
 800492a:	4b1b      	ldr	r3, [pc, #108]	@ (8004998 <DMA_CalcBaseAndBitshift+0x160>)
 800492c:	4013      	ands	r3, r2
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	6593      	str	r3, [r2, #88]	@ 0x58
 8004932:	e005      	b.n	8004940 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004944:	4618      	mov	r0, r3
 8004946:	3714      	adds	r7, #20
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr
 8004950:	40020010 	.word	0x40020010
 8004954:	40020028 	.word	0x40020028
 8004958:	40020040 	.word	0x40020040
 800495c:	40020058 	.word	0x40020058
 8004960:	40020070 	.word	0x40020070
 8004964:	40020088 	.word	0x40020088
 8004968:	400200a0 	.word	0x400200a0
 800496c:	400200b8 	.word	0x400200b8
 8004970:	40020410 	.word	0x40020410
 8004974:	40020428 	.word	0x40020428
 8004978:	40020440 	.word	0x40020440
 800497c:	40020458 	.word	0x40020458
 8004980:	40020470 	.word	0x40020470
 8004984:	40020488 	.word	0x40020488
 8004988:	400204a0 	.word	0x400204a0
 800498c:	400204b8 	.word	0x400204b8
 8004990:	aaaaaaab 	.word	0xaaaaaaab
 8004994:	08014134 	.word	0x08014134
 8004998:	fffffc00 	.word	0xfffffc00

0800499c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049a4:	2300      	movs	r3, #0
 80049a6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d120      	bne.n	80049f2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049b4:	2b03      	cmp	r3, #3
 80049b6:	d858      	bhi.n	8004a6a <DMA_CheckFifoParam+0xce>
 80049b8:	a201      	add	r2, pc, #4	@ (adr r2, 80049c0 <DMA_CheckFifoParam+0x24>)
 80049ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049be:	bf00      	nop
 80049c0:	080049d1 	.word	0x080049d1
 80049c4:	080049e3 	.word	0x080049e3
 80049c8:	080049d1 	.word	0x080049d1
 80049cc:	08004a6b 	.word	0x08004a6b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d048      	beq.n	8004a6e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80049e0:	e045      	b.n	8004a6e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80049ea:	d142      	bne.n	8004a72 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80049f0:	e03f      	b.n	8004a72 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049fa:	d123      	bne.n	8004a44 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a00:	2b03      	cmp	r3, #3
 8004a02:	d838      	bhi.n	8004a76 <DMA_CheckFifoParam+0xda>
 8004a04:	a201      	add	r2, pc, #4	@ (adr r2, 8004a0c <DMA_CheckFifoParam+0x70>)
 8004a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a0a:	bf00      	nop
 8004a0c:	08004a1d 	.word	0x08004a1d
 8004a10:	08004a23 	.word	0x08004a23
 8004a14:	08004a1d 	.word	0x08004a1d
 8004a18:	08004a35 	.word	0x08004a35
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	73fb      	strb	r3, [r7, #15]
        break;
 8004a20:	e030      	b.n	8004a84 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a26:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d025      	beq.n	8004a7a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004a32:	e022      	b.n	8004a7a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a38:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004a3c:	d11f      	bne.n	8004a7e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004a42:	e01c      	b.n	8004a7e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d902      	bls.n	8004a52 <DMA_CheckFifoParam+0xb6>
 8004a4c:	2b03      	cmp	r3, #3
 8004a4e:	d003      	beq.n	8004a58 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004a50:	e018      	b.n	8004a84 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	73fb      	strb	r3, [r7, #15]
        break;
 8004a56:	e015      	b.n	8004a84 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00e      	beq.n	8004a82 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	73fb      	strb	r3, [r7, #15]
    break;
 8004a68:	e00b      	b.n	8004a82 <DMA_CheckFifoParam+0xe6>
        break;
 8004a6a:	bf00      	nop
 8004a6c:	e00a      	b.n	8004a84 <DMA_CheckFifoParam+0xe8>
        break;
 8004a6e:	bf00      	nop
 8004a70:	e008      	b.n	8004a84 <DMA_CheckFifoParam+0xe8>
        break;
 8004a72:	bf00      	nop
 8004a74:	e006      	b.n	8004a84 <DMA_CheckFifoParam+0xe8>
        break;
 8004a76:	bf00      	nop
 8004a78:	e004      	b.n	8004a84 <DMA_CheckFifoParam+0xe8>
        break;
 8004a7a:	bf00      	nop
 8004a7c:	e002      	b.n	8004a84 <DMA_CheckFifoParam+0xe8>
        break;
 8004a7e:	bf00      	nop
 8004a80:	e000      	b.n	8004a84 <DMA_CheckFifoParam+0xe8>
    break;
 8004a82:	bf00      	nop
    }
  }

  return status;
 8004a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3714      	adds	r7, #20
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop

08004a94 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b085      	sub	sp, #20
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a38      	ldr	r2, [pc, #224]	@ (8004b88 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d022      	beq.n	8004af2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a36      	ldr	r2, [pc, #216]	@ (8004b8c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d01d      	beq.n	8004af2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a35      	ldr	r2, [pc, #212]	@ (8004b90 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d018      	beq.n	8004af2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a33      	ldr	r2, [pc, #204]	@ (8004b94 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d013      	beq.n	8004af2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a32      	ldr	r2, [pc, #200]	@ (8004b98 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d00e      	beq.n	8004af2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a30      	ldr	r2, [pc, #192]	@ (8004b9c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d009      	beq.n	8004af2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a2f      	ldr	r2, [pc, #188]	@ (8004ba0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d004      	beq.n	8004af2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a2d      	ldr	r2, [pc, #180]	@ (8004ba4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d101      	bne.n	8004af6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004af2:	2301      	movs	r3, #1
 8004af4:	e000      	b.n	8004af8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004af6:	2300      	movs	r3, #0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d01a      	beq.n	8004b32 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	3b08      	subs	r3, #8
 8004b04:	4a28      	ldr	r2, [pc, #160]	@ (8004ba8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004b06:	fba2 2303 	umull	r2, r3, r2, r3
 8004b0a:	091b      	lsrs	r3, r3, #4
 8004b0c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	4b26      	ldr	r3, [pc, #152]	@ (8004bac <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004b12:	4413      	add	r3, r2
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	461a      	mov	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a24      	ldr	r2, [pc, #144]	@ (8004bb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004b20:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f003 031f 	and.w	r3, r3, #31
 8004b28:	2201      	movs	r2, #1
 8004b2a:	409a      	lsls	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004b30:	e024      	b.n	8004b7c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	3b10      	subs	r3, #16
 8004b3a:	4a1e      	ldr	r2, [pc, #120]	@ (8004bb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b40:	091b      	lsrs	r3, r3, #4
 8004b42:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	4a1c      	ldr	r2, [pc, #112]	@ (8004bb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d806      	bhi.n	8004b5a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	4a1b      	ldr	r2, [pc, #108]	@ (8004bbc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d902      	bls.n	8004b5a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	3308      	adds	r3, #8
 8004b58:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	4b18      	ldr	r3, [pc, #96]	@ (8004bc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004b5e:	4413      	add	r3, r2
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	461a      	mov	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a16      	ldr	r2, [pc, #88]	@ (8004bc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004b6c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f003 031f 	and.w	r3, r3, #31
 8004b74:	2201      	movs	r2, #1
 8004b76:	409a      	lsls	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004b7c:	bf00      	nop
 8004b7e:	3714      	adds	r7, #20
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	58025408 	.word	0x58025408
 8004b8c:	5802541c 	.word	0x5802541c
 8004b90:	58025430 	.word	0x58025430
 8004b94:	58025444 	.word	0x58025444
 8004b98:	58025458 	.word	0x58025458
 8004b9c:	5802546c 	.word	0x5802546c
 8004ba0:	58025480 	.word	0x58025480
 8004ba4:	58025494 	.word	0x58025494
 8004ba8:	cccccccd 	.word	0xcccccccd
 8004bac:	16009600 	.word	0x16009600
 8004bb0:	58025880 	.word	0x58025880
 8004bb4:	aaaaaaab 	.word	0xaaaaaaab
 8004bb8:	400204b8 	.word	0x400204b8
 8004bbc:	4002040f 	.word	0x4002040f
 8004bc0:	10008200 	.word	0x10008200
 8004bc4:	40020880 	.word	0x40020880

08004bc8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d04a      	beq.n	8004c74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2b08      	cmp	r3, #8
 8004be2:	d847      	bhi.n	8004c74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a25      	ldr	r2, [pc, #148]	@ (8004c80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d022      	beq.n	8004c34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a24      	ldr	r2, [pc, #144]	@ (8004c84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d01d      	beq.n	8004c34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a22      	ldr	r2, [pc, #136]	@ (8004c88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d018      	beq.n	8004c34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a21      	ldr	r2, [pc, #132]	@ (8004c8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d013      	beq.n	8004c34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a1f      	ldr	r2, [pc, #124]	@ (8004c90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d00e      	beq.n	8004c34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a1e      	ldr	r2, [pc, #120]	@ (8004c94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d009      	beq.n	8004c34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a1c      	ldr	r2, [pc, #112]	@ (8004c98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d004      	beq.n	8004c34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a1b      	ldr	r2, [pc, #108]	@ (8004c9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d101      	bne.n	8004c38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004c34:	2301      	movs	r3, #1
 8004c36:	e000      	b.n	8004c3a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004c38:	2300      	movs	r3, #0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00a      	beq.n	8004c54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	4b17      	ldr	r3, [pc, #92]	@ (8004ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004c42:	4413      	add	r3, r2
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	461a      	mov	r2, r3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a15      	ldr	r2, [pc, #84]	@ (8004ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004c50:	671a      	str	r2, [r3, #112]	@ 0x70
 8004c52:	e009      	b.n	8004c68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	4b14      	ldr	r3, [pc, #80]	@ (8004ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004c58:	4413      	add	r3, r2
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a11      	ldr	r2, [pc, #68]	@ (8004cac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004c66:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	409a      	lsls	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004c74:	bf00      	nop
 8004c76:	3714      	adds	r7, #20
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr
 8004c80:	58025408 	.word	0x58025408
 8004c84:	5802541c 	.word	0x5802541c
 8004c88:	58025430 	.word	0x58025430
 8004c8c:	58025444 	.word	0x58025444
 8004c90:	58025458 	.word	0x58025458
 8004c94:	5802546c 	.word	0x5802546c
 8004c98:	58025480 	.word	0x58025480
 8004c9c:	58025494 	.word	0x58025494
 8004ca0:	1600963f 	.word	0x1600963f
 8004ca4:	58025940 	.word	0x58025940
 8004ca8:	1000823f 	.word	0x1000823f
 8004cac:	40020940 	.word	0x40020940

08004cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b089      	sub	sp, #36	@ 0x24
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004cbe:	4b89      	ldr	r3, [pc, #548]	@ (8004ee4 <HAL_GPIO_Init+0x234>)
 8004cc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004cc2:	e194      	b.n	8004fee <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	2101      	movs	r1, #1
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	f000 8186 	beq.w	8004fe8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f003 0303 	and.w	r3, r3, #3
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d005      	beq.n	8004cf4 <HAL_GPIO_Init+0x44>
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f003 0303 	and.w	r3, r3, #3
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d130      	bne.n	8004d56 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	005b      	lsls	r3, r3, #1
 8004cfe:	2203      	movs	r2, #3
 8004d00:	fa02 f303 	lsl.w	r3, r2, r3
 8004d04:	43db      	mvns	r3, r3
 8004d06:	69ba      	ldr	r2, [r7, #24]
 8004d08:	4013      	ands	r3, r2
 8004d0a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	68da      	ldr	r2, [r3, #12]
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	005b      	lsls	r3, r3, #1
 8004d14:	fa02 f303 	lsl.w	r3, r2, r3
 8004d18:	69ba      	ldr	r2, [r7, #24]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	69ba      	ldr	r2, [r7, #24]
 8004d22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d32:	43db      	mvns	r3, r3
 8004d34:	69ba      	ldr	r2, [r7, #24]
 8004d36:	4013      	ands	r3, r2
 8004d38:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	091b      	lsrs	r3, r3, #4
 8004d40:	f003 0201 	and.w	r2, r3, #1
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4a:	69ba      	ldr	r2, [r7, #24]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	69ba      	ldr	r2, [r7, #24]
 8004d54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f003 0303 	and.w	r3, r3, #3
 8004d5e:	2b03      	cmp	r3, #3
 8004d60:	d017      	beq.n	8004d92 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	005b      	lsls	r3, r3, #1
 8004d6c:	2203      	movs	r2, #3
 8004d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d72:	43db      	mvns	r3, r3
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	4013      	ands	r3, r2
 8004d78:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	689a      	ldr	r2, [r3, #8]
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	005b      	lsls	r3, r3, #1
 8004d82:	fa02 f303 	lsl.w	r3, r2, r3
 8004d86:	69ba      	ldr	r2, [r7, #24]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	69ba      	ldr	r2, [r7, #24]
 8004d90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f003 0303 	and.w	r3, r3, #3
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d123      	bne.n	8004de6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	08da      	lsrs	r2, r3, #3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	3208      	adds	r2, #8
 8004da6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	f003 0307 	and.w	r3, r3, #7
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	220f      	movs	r2, #15
 8004db6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dba:	43db      	mvns	r3, r3
 8004dbc:	69ba      	ldr	r2, [r7, #24]
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	691a      	ldr	r2, [r3, #16]
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	f003 0307 	and.w	r3, r3, #7
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd2:	69ba      	ldr	r2, [r7, #24]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	08da      	lsrs	r2, r3, #3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	3208      	adds	r2, #8
 8004de0:	69b9      	ldr	r1, [r7, #24]
 8004de2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	005b      	lsls	r3, r3, #1
 8004df0:	2203      	movs	r2, #3
 8004df2:	fa02 f303 	lsl.w	r3, r2, r3
 8004df6:	43db      	mvns	r3, r3
 8004df8:	69ba      	ldr	r2, [r7, #24]
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	f003 0203 	and.w	r2, r3, #3
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	005b      	lsls	r3, r3, #1
 8004e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0e:	69ba      	ldr	r2, [r7, #24]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	69ba      	ldr	r2, [r7, #24]
 8004e18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	f000 80e0 	beq.w	8004fe8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e28:	4b2f      	ldr	r3, [pc, #188]	@ (8004ee8 <HAL_GPIO_Init+0x238>)
 8004e2a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8004e2e:	4a2e      	ldr	r2, [pc, #184]	@ (8004ee8 <HAL_GPIO_Init+0x238>)
 8004e30:	f043 0302 	orr.w	r3, r3, #2
 8004e34:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8004e38:	4b2b      	ldr	r3, [pc, #172]	@ (8004ee8 <HAL_GPIO_Init+0x238>)
 8004e3a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	60fb      	str	r3, [r7, #12]
 8004e44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e46:	4a29      	ldr	r2, [pc, #164]	@ (8004eec <HAL_GPIO_Init+0x23c>)
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	089b      	lsrs	r3, r3, #2
 8004e4c:	3302      	adds	r3, #2
 8004e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	f003 0303 	and.w	r3, r3, #3
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	220f      	movs	r2, #15
 8004e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e62:	43db      	mvns	r3, r3
 8004e64:	69ba      	ldr	r2, [r7, #24]
 8004e66:	4013      	ands	r3, r2
 8004e68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a20      	ldr	r2, [pc, #128]	@ (8004ef0 <HAL_GPIO_Init+0x240>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d052      	beq.n	8004f18 <HAL_GPIO_Init+0x268>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a1f      	ldr	r2, [pc, #124]	@ (8004ef4 <HAL_GPIO_Init+0x244>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d031      	beq.n	8004ede <HAL_GPIO_Init+0x22e>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a1e      	ldr	r2, [pc, #120]	@ (8004ef8 <HAL_GPIO_Init+0x248>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d02b      	beq.n	8004eda <HAL_GPIO_Init+0x22a>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a1d      	ldr	r2, [pc, #116]	@ (8004efc <HAL_GPIO_Init+0x24c>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d025      	beq.n	8004ed6 <HAL_GPIO_Init+0x226>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a1c      	ldr	r2, [pc, #112]	@ (8004f00 <HAL_GPIO_Init+0x250>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d01f      	beq.n	8004ed2 <HAL_GPIO_Init+0x222>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a1b      	ldr	r2, [pc, #108]	@ (8004f04 <HAL_GPIO_Init+0x254>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d019      	beq.n	8004ece <HAL_GPIO_Init+0x21e>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a1a      	ldr	r2, [pc, #104]	@ (8004f08 <HAL_GPIO_Init+0x258>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d013      	beq.n	8004eca <HAL_GPIO_Init+0x21a>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a19      	ldr	r2, [pc, #100]	@ (8004f0c <HAL_GPIO_Init+0x25c>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d00d      	beq.n	8004ec6 <HAL_GPIO_Init+0x216>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a18      	ldr	r2, [pc, #96]	@ (8004f10 <HAL_GPIO_Init+0x260>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d007      	beq.n	8004ec2 <HAL_GPIO_Init+0x212>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a17      	ldr	r2, [pc, #92]	@ (8004f14 <HAL_GPIO_Init+0x264>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d101      	bne.n	8004ebe <HAL_GPIO_Init+0x20e>
 8004eba:	2309      	movs	r3, #9
 8004ebc:	e02d      	b.n	8004f1a <HAL_GPIO_Init+0x26a>
 8004ebe:	230a      	movs	r3, #10
 8004ec0:	e02b      	b.n	8004f1a <HAL_GPIO_Init+0x26a>
 8004ec2:	2308      	movs	r3, #8
 8004ec4:	e029      	b.n	8004f1a <HAL_GPIO_Init+0x26a>
 8004ec6:	2307      	movs	r3, #7
 8004ec8:	e027      	b.n	8004f1a <HAL_GPIO_Init+0x26a>
 8004eca:	2306      	movs	r3, #6
 8004ecc:	e025      	b.n	8004f1a <HAL_GPIO_Init+0x26a>
 8004ece:	2305      	movs	r3, #5
 8004ed0:	e023      	b.n	8004f1a <HAL_GPIO_Init+0x26a>
 8004ed2:	2304      	movs	r3, #4
 8004ed4:	e021      	b.n	8004f1a <HAL_GPIO_Init+0x26a>
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e01f      	b.n	8004f1a <HAL_GPIO_Init+0x26a>
 8004eda:	2302      	movs	r3, #2
 8004edc:	e01d      	b.n	8004f1a <HAL_GPIO_Init+0x26a>
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e01b      	b.n	8004f1a <HAL_GPIO_Init+0x26a>
 8004ee2:	bf00      	nop
 8004ee4:	58000080 	.word	0x58000080
 8004ee8:	58024400 	.word	0x58024400
 8004eec:	58000400 	.word	0x58000400
 8004ef0:	58020000 	.word	0x58020000
 8004ef4:	58020400 	.word	0x58020400
 8004ef8:	58020800 	.word	0x58020800
 8004efc:	58020c00 	.word	0x58020c00
 8004f00:	58021000 	.word	0x58021000
 8004f04:	58021400 	.word	0x58021400
 8004f08:	58021800 	.word	0x58021800
 8004f0c:	58021c00 	.word	0x58021c00
 8004f10:	58022000 	.word	0x58022000
 8004f14:	58022400 	.word	0x58022400
 8004f18:	2300      	movs	r3, #0
 8004f1a:	69fa      	ldr	r2, [r7, #28]
 8004f1c:	f002 0203 	and.w	r2, r2, #3
 8004f20:	0092      	lsls	r2, r2, #2
 8004f22:	4093      	lsls	r3, r2
 8004f24:	69ba      	ldr	r2, [r7, #24]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f2a:	4938      	ldr	r1, [pc, #224]	@ (800500c <HAL_GPIO_Init+0x35c>)
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	089b      	lsrs	r3, r3, #2
 8004f30:	3302      	adds	r3, #2
 8004f32:	69ba      	ldr	r2, [r7, #24]
 8004f34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004f38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	43db      	mvns	r3, r3
 8004f44:	69ba      	ldr	r2, [r7, #24]
 8004f46:	4013      	ands	r3, r2
 8004f48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d003      	beq.n	8004f5e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004f56:	69ba      	ldr	r2, [r7, #24]
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004f5e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004f66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	43db      	mvns	r3, r3
 8004f72:	69ba      	ldr	r2, [r7, #24]
 8004f74:	4013      	ands	r3, r2
 8004f76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d003      	beq.n	8004f8c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004f84:	69ba      	ldr	r2, [r7, #24]
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004f8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	43db      	mvns	r3, r3
 8004f9e:	69ba      	ldr	r2, [r7, #24]
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d003      	beq.n	8004fb8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004fb0:	69ba      	ldr	r2, [r7, #24]
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	69ba      	ldr	r2, [r7, #24]
 8004fbc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	43db      	mvns	r3, r3
 8004fc8:	69ba      	ldr	r2, [r7, #24]
 8004fca:	4013      	ands	r3, r2
 8004fcc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d003      	beq.n	8004fe2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004fda:	69ba      	ldr	r2, [r7, #24]
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	69ba      	ldr	r2, [r7, #24]
 8004fe6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	3301      	adds	r3, #1
 8004fec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f47f ae63 	bne.w	8004cc4 <HAL_GPIO_Init+0x14>
  }
}
 8004ffe:	bf00      	nop
 8005000:	bf00      	nop
 8005002:	3724      	adds	r7, #36	@ 0x24
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr
 800500c:	58000400 	.word	0x58000400

08005010 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005010:	b480      	push	{r7}
 8005012:	b087      	sub	sp, #28
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800501a:	2300      	movs	r3, #0
 800501c:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800501e:	4b75      	ldr	r3, [pc, #468]	@ (80051f4 <HAL_GPIO_DeInit+0x1e4>)
 8005020:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8005022:	e0d9      	b.n	80051d8 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8005024:	2201      	movs	r2, #1
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	fa02 f303 	lsl.w	r3, r2, r3
 800502c:	683a      	ldr	r2, [r7, #0]
 800502e:	4013      	ands	r3, r2
 8005030:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2b00      	cmp	r3, #0
 8005036:	f000 80cc 	beq.w	80051d2 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800503a:	4a6f      	ldr	r2, [pc, #444]	@ (80051f8 <HAL_GPIO_DeInit+0x1e8>)
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	089b      	lsrs	r3, r3, #2
 8005040:	3302      	adds	r3, #2
 8005042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005046:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	f003 0303 	and.w	r3, r3, #3
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	220f      	movs	r2, #15
 8005052:	fa02 f303 	lsl.w	r3, r2, r3
 8005056:	68ba      	ldr	r2, [r7, #8]
 8005058:	4013      	ands	r3, r2
 800505a:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a67      	ldr	r2, [pc, #412]	@ (80051fc <HAL_GPIO_DeInit+0x1ec>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d037      	beq.n	80050d4 <HAL_GPIO_DeInit+0xc4>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a66      	ldr	r2, [pc, #408]	@ (8005200 <HAL_GPIO_DeInit+0x1f0>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d031      	beq.n	80050d0 <HAL_GPIO_DeInit+0xc0>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a65      	ldr	r2, [pc, #404]	@ (8005204 <HAL_GPIO_DeInit+0x1f4>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d02b      	beq.n	80050cc <HAL_GPIO_DeInit+0xbc>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a64      	ldr	r2, [pc, #400]	@ (8005208 <HAL_GPIO_DeInit+0x1f8>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d025      	beq.n	80050c8 <HAL_GPIO_DeInit+0xb8>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a63      	ldr	r2, [pc, #396]	@ (800520c <HAL_GPIO_DeInit+0x1fc>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d01f      	beq.n	80050c4 <HAL_GPIO_DeInit+0xb4>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a62      	ldr	r2, [pc, #392]	@ (8005210 <HAL_GPIO_DeInit+0x200>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d019      	beq.n	80050c0 <HAL_GPIO_DeInit+0xb0>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a61      	ldr	r2, [pc, #388]	@ (8005214 <HAL_GPIO_DeInit+0x204>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d013      	beq.n	80050bc <HAL_GPIO_DeInit+0xac>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a60      	ldr	r2, [pc, #384]	@ (8005218 <HAL_GPIO_DeInit+0x208>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d00d      	beq.n	80050b8 <HAL_GPIO_DeInit+0xa8>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a5f      	ldr	r2, [pc, #380]	@ (800521c <HAL_GPIO_DeInit+0x20c>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d007      	beq.n	80050b4 <HAL_GPIO_DeInit+0xa4>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a5e      	ldr	r2, [pc, #376]	@ (8005220 <HAL_GPIO_DeInit+0x210>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d101      	bne.n	80050b0 <HAL_GPIO_DeInit+0xa0>
 80050ac:	2309      	movs	r3, #9
 80050ae:	e012      	b.n	80050d6 <HAL_GPIO_DeInit+0xc6>
 80050b0:	230a      	movs	r3, #10
 80050b2:	e010      	b.n	80050d6 <HAL_GPIO_DeInit+0xc6>
 80050b4:	2308      	movs	r3, #8
 80050b6:	e00e      	b.n	80050d6 <HAL_GPIO_DeInit+0xc6>
 80050b8:	2307      	movs	r3, #7
 80050ba:	e00c      	b.n	80050d6 <HAL_GPIO_DeInit+0xc6>
 80050bc:	2306      	movs	r3, #6
 80050be:	e00a      	b.n	80050d6 <HAL_GPIO_DeInit+0xc6>
 80050c0:	2305      	movs	r3, #5
 80050c2:	e008      	b.n	80050d6 <HAL_GPIO_DeInit+0xc6>
 80050c4:	2304      	movs	r3, #4
 80050c6:	e006      	b.n	80050d6 <HAL_GPIO_DeInit+0xc6>
 80050c8:	2303      	movs	r3, #3
 80050ca:	e004      	b.n	80050d6 <HAL_GPIO_DeInit+0xc6>
 80050cc:	2302      	movs	r3, #2
 80050ce:	e002      	b.n	80050d6 <HAL_GPIO_DeInit+0xc6>
 80050d0:	2301      	movs	r3, #1
 80050d2:	e000      	b.n	80050d6 <HAL_GPIO_DeInit+0xc6>
 80050d4:	2300      	movs	r3, #0
 80050d6:	697a      	ldr	r2, [r7, #20]
 80050d8:	f002 0203 	and.w	r2, r2, #3
 80050dc:	0092      	lsls	r2, r2, #2
 80050de:	4093      	lsls	r3, r2
 80050e0:	68ba      	ldr	r2, [r7, #8]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d136      	bne.n	8005154 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	43db      	mvns	r3, r3
 80050ee:	401a      	ands	r2, r3
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	685a      	ldr	r2, [r3, #4]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	43db      	mvns	r3, r3
 80050fc:	401a      	ands	r2, r3
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8005102:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005106:	685a      	ldr	r2, [r3, #4]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	43db      	mvns	r3, r3
 800510c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005110:	4013      	ands	r3, r2
 8005112:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8005114:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	43db      	mvns	r3, r3
 800511e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005122:	4013      	ands	r3, r2
 8005124:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	f003 0303 	and.w	r3, r3, #3
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	220f      	movs	r2, #15
 8005130:	fa02 f303 	lsl.w	r3, r2, r3
 8005134:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005136:	4a30      	ldr	r2, [pc, #192]	@ (80051f8 <HAL_GPIO_DeInit+0x1e8>)
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	089b      	lsrs	r3, r3, #2
 800513c:	3302      	adds	r3, #2
 800513e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	43da      	mvns	r2, r3
 8005146:	482c      	ldr	r0, [pc, #176]	@ (80051f8 <HAL_GPIO_DeInit+0x1e8>)
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	089b      	lsrs	r3, r3, #2
 800514c:	400a      	ands	r2, r1
 800514e:	3302      	adds	r3, #2
 8005150:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	005b      	lsls	r3, r3, #1
 800515c:	2103      	movs	r1, #3
 800515e:	fa01 f303 	lsl.w	r3, r1, r3
 8005162:	431a      	orrs	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	08da      	lsrs	r2, r3, #3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	3208      	adds	r2, #8
 8005170:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	f003 0307 	and.w	r3, r3, #7
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	220f      	movs	r2, #15
 800517e:	fa02 f303 	lsl.w	r3, r2, r3
 8005182:	43db      	mvns	r3, r3
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	08d2      	lsrs	r2, r2, #3
 8005188:	4019      	ands	r1, r3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	3208      	adds	r2, #8
 800518e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	68da      	ldr	r2, [r3, #12]
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	005b      	lsls	r3, r3, #1
 800519a:	2103      	movs	r1, #3
 800519c:	fa01 f303 	lsl.w	r3, r1, r3
 80051a0:	43db      	mvns	r3, r3
 80051a2:	401a      	ands	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685a      	ldr	r2, [r3, #4]
 80051ac:	2101      	movs	r1, #1
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	fa01 f303 	lsl.w	r3, r1, r3
 80051b4:	43db      	mvns	r3, r3
 80051b6:	401a      	ands	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	689a      	ldr	r2, [r3, #8]
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	005b      	lsls	r3, r3, #1
 80051c4:	2103      	movs	r1, #3
 80051c6:	fa01 f303 	lsl.w	r3, r1, r3
 80051ca:	43db      	mvns	r3, r3
 80051cc:	401a      	ands	r2, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	609a      	str	r2, [r3, #8]
    }

    position++;
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	3301      	adds	r3, #1
 80051d6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 80051d8:	683a      	ldr	r2, [r7, #0]
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	fa22 f303 	lsr.w	r3, r2, r3
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f47f af1f 	bne.w	8005024 <HAL_GPIO_DeInit+0x14>
  }
}
 80051e6:	bf00      	nop
 80051e8:	bf00      	nop
 80051ea:	371c      	adds	r7, #28
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr
 80051f4:	58000080 	.word	0x58000080
 80051f8:	58000400 	.word	0x58000400
 80051fc:	58020000 	.word	0x58020000
 8005200:	58020400 	.word	0x58020400
 8005204:	58020800 	.word	0x58020800
 8005208:	58020c00 	.word	0x58020c00
 800520c:	58021000 	.word	0x58021000
 8005210:	58021400 	.word	0x58021400
 8005214:	58021800 	.word	0x58021800
 8005218:	58021c00 	.word	0x58021c00
 800521c:	58022000 	.word	0x58022000
 8005220:	58022400 	.word	0x58022400

08005224 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	4603      	mov	r3, r0
 800522c:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800522e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005232:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005236:	88fb      	ldrh	r3, [r7, #6]
 8005238:	4013      	ands	r3, r2
 800523a:	2b00      	cmp	r3, #0
 800523c:	d008      	beq.n	8005250 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800523e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005242:	88fb      	ldrh	r3, [r7, #6]
 8005244:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005248:	88fb      	ldrh	r3, [r7, #6]
 800524a:	4618      	mov	r0, r3
 800524c:	f7fc fbfc 	bl	8001a48 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005250:	bf00      	nop
 8005252:	3708      	adds	r7, #8
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d101      	bne.n	800526a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e08b      	b.n	8005382 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005270:	b2db      	uxtb	r3, r3
 8005272:	2b00      	cmp	r3, #0
 8005274:	d106      	bne.n	8005284 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f7fb fdcc 	bl	8000e1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2224      	movs	r2, #36	@ 0x24
 8005288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f022 0201 	bic.w	r2, r2, #1
 800529a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685a      	ldr	r2, [r3, #4]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80052a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	689a      	ldr	r2, [r3, #8]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80052b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d107      	bne.n	80052d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	689a      	ldr	r2, [r3, #8]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80052ce:	609a      	str	r2, [r3, #8]
 80052d0:	e006      	b.n	80052e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	689a      	ldr	r2, [r3, #8]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80052de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	d108      	bne.n	80052fa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	685a      	ldr	r2, [r3, #4]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052f6:	605a      	str	r2, [r3, #4]
 80052f8:	e007      	b.n	800530a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	685a      	ldr	r2, [r3, #4]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005308:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	6859      	ldr	r1, [r3, #4]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	4b1d      	ldr	r3, [pc, #116]	@ (800538c <HAL_I2C_Init+0x134>)
 8005316:	430b      	orrs	r3, r1
 8005318:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68da      	ldr	r2, [r3, #12]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005328:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	691a      	ldr	r2, [r3, #16]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	695b      	ldr	r3, [r3, #20]
 8005332:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	430a      	orrs	r2, r1
 8005342:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	69d9      	ldr	r1, [r3, #28]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a1a      	ldr	r2, [r3, #32]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	430a      	orrs	r2, r1
 8005352:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f042 0201 	orr.w	r2, r2, #1
 8005362:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2220      	movs	r2, #32
 800536e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3708      	adds	r7, #8
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	02008000 	.word	0x02008000

08005390 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d101      	bne.n	80053a2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e021      	b.n	80053e6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2224      	movs	r2, #36	@ 0x24
 80053a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f022 0201 	bic.w	r2, r2, #1
 80053b8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f7fb fe0a 	bl	8000fd4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3708      	adds	r7, #8
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
	...

080053f0 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b088      	sub	sp, #32
 80053f4:	af02      	add	r7, sp, #8
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	607a      	str	r2, [r7, #4]
 80053fa:	461a      	mov	r2, r3
 80053fc:	460b      	mov	r3, r1
 80053fe:	817b      	strh	r3, [r7, #10]
 8005400:	4613      	mov	r3, r2
 8005402:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800540a:	b2db      	uxtb	r3, r3
 800540c:	2b20      	cmp	r3, #32
 800540e:	f040 80cd 	bne.w	80055ac <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	699b      	ldr	r3, [r3, #24]
 8005418:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800541c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005420:	d101      	bne.n	8005426 <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 8005422:	2302      	movs	r3, #2
 8005424:	e0c3      	b.n	80055ae <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800542c:	2b01      	cmp	r3, #1
 800542e:	d101      	bne.n	8005434 <HAL_I2C_Master_Receive_DMA+0x44>
 8005430:	2302      	movs	r3, #2
 8005432:	e0bc      	b.n	80055ae <HAL_I2C_Master_Receive_DMA+0x1be>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2222      	movs	r2, #34	@ 0x22
 8005440:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2210      	movs	r2, #16
 8005448:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	893a      	ldrh	r2, [r7, #8]
 800545c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	4a55      	ldr	r2, [pc, #340]	@ (80055b8 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 8005462:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	4a55      	ldr	r2, [pc, #340]	@ (80055bc <HAL_I2C_Master_Receive_DMA+0x1cc>)
 8005468:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800546e:	b29b      	uxth	r3, r3
 8005470:	2bff      	cmp	r3, #255	@ 0xff
 8005472:	d906      	bls.n	8005482 <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	22ff      	movs	r2, #255	@ 0xff
 8005478:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800547a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800547e:	617b      	str	r3, [r7, #20]
 8005480:	e007      	b.n	8005492 <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005486:	b29a      	uxth	r2, r3
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800548c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005490:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005496:	2b00      	cmp	r3, #0
 8005498:	d070      	beq.n	800557c <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d020      	beq.n	80054e4 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054a6:	4a46      	ldr	r2, [pc, #280]	@ (80055c0 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 80054a8:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054ae:	4a45      	ldr	r2, [pc, #276]	@ (80055c4 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 80054b0:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054b6:	2200      	movs	r2, #0
 80054b8:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054be:	2200      	movs	r2, #0
 80054c0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	3324      	adds	r3, #36	@ 0x24
 80054cc:	4619      	mov	r1, r3
 80054ce:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80054d4:	f7fd fba0 	bl	8002c18 <HAL_DMA_Start_IT>
 80054d8:	4603      	mov	r3, r0
 80054da:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80054dc:	7cfb      	ldrb	r3, [r7, #19]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d138      	bne.n	8005554 <HAL_I2C_Master_Receive_DMA+0x164>
 80054e2:	e013      	b.n	800550c <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2220      	movs	r2, #32
 80054e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054f8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e050      	b.n	80055ae <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005510:	b2da      	uxtb	r2, r3
 8005512:	8979      	ldrh	r1, [r7, #10]
 8005514:	4b2c      	ldr	r3, [pc, #176]	@ (80055c8 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8005516:	9300      	str	r3, [sp, #0]
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	68f8      	ldr	r0, [r7, #12]
 800551c:	f002 f8e0 	bl	80076e0 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005524:	b29a      	uxth	r2, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	b29a      	uxth	r2, r3
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800553a:	2110      	movs	r1, #16
 800553c:	68f8      	ldr	r0, [r7, #12]
 800553e:	f002 f901 	bl	8007744 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005550:	601a      	str	r2, [r3, #0]
 8005552:	e029      	b.n	80055a8 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2220      	movs	r2, #32
 8005558:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005568:	f043 0210 	orr.w	r2, r3, #16
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2200      	movs	r2, #0
 8005574:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e018      	b.n	80055ae <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	4a13      	ldr	r2, [pc, #76]	@ (80055cc <HAL_I2C_Master_Receive_DMA+0x1dc>)
 8005580:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005586:	b2da      	uxtb	r2, r3
 8005588:	8979      	ldrh	r1, [r7, #10]
 800558a:	4b0f      	ldr	r3, [pc, #60]	@ (80055c8 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800558c:	9300      	str	r3, [sp, #0]
 800558e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005592:	68f8      	ldr	r0, [r7, #12]
 8005594:	f002 f8a4 	bl	80076e0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80055a0:	2102      	movs	r1, #2
 80055a2:	68f8      	ldr	r0, [r7, #12]
 80055a4:	f002 f8ce 	bl	8007744 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80055a8:	2300      	movs	r3, #0
 80055aa:	e000      	b.n	80055ae <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 80055ac:	2302      	movs	r3, #2
  }
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3718      	adds	r7, #24
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	ffff0000 	.word	0xffff0000
 80055bc:	08005dbf 	.word	0x08005dbf
 80055c0:	08007127 	.word	0x08007127
 80055c4:	080071bd 	.word	0x080071bd
 80055c8:	80002400 	.word	0x80002400
 80055cc:	0800597f 	.word	0x0800597f

080055d0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b08a      	sub	sp, #40	@ 0x28
 80055d4:	af02      	add	r7, sp, #8
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	607a      	str	r2, [r7, #4]
 80055da:	603b      	str	r3, [r7, #0]
 80055dc:	460b      	mov	r3, r1
 80055de:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80055e0:	2300      	movs	r3, #0
 80055e2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	2b20      	cmp	r3, #32
 80055ee:	f040 80d2 	bne.w	8005796 <HAL_I2C_IsDeviceReady+0x1c6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	699b      	ldr	r3, [r3, #24]
 80055f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80055fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005600:	d101      	bne.n	8005606 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8005602:	2302      	movs	r3, #2
 8005604:	e0c8      	b.n	8005798 <HAL_I2C_IsDeviceReady+0x1c8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800560c:	2b01      	cmp	r3, #1
 800560e:	d101      	bne.n	8005614 <HAL_I2C_IsDeviceReady+0x44>
 8005610:	2302      	movs	r3, #2
 8005612:	e0c1      	b.n	8005798 <HAL_I2C_IsDeviceReady+0x1c8>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2224      	movs	r2, #36	@ 0x24
 8005620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	2b01      	cmp	r3, #1
 8005630:	d105      	bne.n	800563e <HAL_I2C_IsDeviceReady+0x6e>
 8005632:	897b      	ldrh	r3, [r7, #10]
 8005634:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005638:	4b59      	ldr	r3, [pc, #356]	@ (80057a0 <HAL_I2C_IsDeviceReady+0x1d0>)
 800563a:	4313      	orrs	r3, r2
 800563c:	e004      	b.n	8005648 <HAL_I2C_IsDeviceReady+0x78>
 800563e:	897b      	ldrh	r3, [r7, #10]
 8005640:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005644:	4b57      	ldr	r3, [pc, #348]	@ (80057a4 <HAL_I2C_IsDeviceReady+0x1d4>)
 8005646:	4313      	orrs	r3, r2
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	6812      	ldr	r2, [r2, #0]
 800564c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800564e:	f7fc fbab 	bl	8001da8 <HAL_GetTick>
 8005652:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	f003 0320 	and.w	r3, r3, #32
 800565e:	2b20      	cmp	r3, #32
 8005660:	bf0c      	ite	eq
 8005662:	2301      	moveq	r3, #1
 8005664:	2300      	movne	r3, #0
 8005666:	b2db      	uxtb	r3, r3
 8005668:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	f003 0310 	and.w	r3, r3, #16
 8005674:	2b10      	cmp	r3, #16
 8005676:	bf0c      	ite	eq
 8005678:	2301      	moveq	r3, #1
 800567a:	2300      	movne	r3, #0
 800567c:	b2db      	uxtb	r3, r3
 800567e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005680:	e034      	b.n	80056ec <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005688:	d01a      	beq.n	80056c0 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800568a:	f7fc fb8d 	bl	8001da8 <HAL_GetTick>
 800568e:	4602      	mov	r2, r0
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	1ad3      	subs	r3, r2, r3
 8005694:	683a      	ldr	r2, [r7, #0]
 8005696:	429a      	cmp	r2, r3
 8005698:	d302      	bcc.n	80056a0 <HAL_I2C_IsDeviceReady+0xd0>
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d10f      	bne.n	80056c0 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2220      	movs	r2, #32
 80056a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ac:	f043 0220 	orr.w	r2, r3, #32
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e06b      	b.n	8005798 <HAL_I2C_IsDeviceReady+0x1c8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	f003 0320 	and.w	r3, r3, #32
 80056ca:	2b20      	cmp	r3, #32
 80056cc:	bf0c      	ite	eq
 80056ce:	2301      	moveq	r3, #1
 80056d0:	2300      	movne	r3, #0
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	f003 0310 	and.w	r3, r3, #16
 80056e0:	2b10      	cmp	r3, #16
 80056e2:	bf0c      	ite	eq
 80056e4:	2301      	moveq	r3, #1
 80056e6:	2300      	movne	r3, #0
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80056ec:	7ffb      	ldrb	r3, [r7, #31]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d102      	bne.n	80056f8 <HAL_I2C_IsDeviceReady+0x128>
 80056f2:	7fbb      	ldrb	r3, [r7, #30]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d0c4      	beq.n	8005682 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	f003 0310 	and.w	r3, r3, #16
 8005702:	2b10      	cmp	r3, #16
 8005704:	d01a      	beq.n	800573c <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	9300      	str	r3, [sp, #0]
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	2200      	movs	r2, #0
 800570e:	2120      	movs	r1, #32
 8005710:	68f8      	ldr	r0, [r7, #12]
 8005712:	f001 feab 	bl	800746c <I2C_WaitOnFlagUntilTimeout>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d001      	beq.n	8005720 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e03b      	b.n	8005798 <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2220      	movs	r2, #32
 8005726:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2220      	movs	r2, #32
 800572c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8005738:	2300      	movs	r3, #0
 800573a:	e02d      	b.n	8005798 <HAL_I2C_IsDeviceReady+0x1c8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	9300      	str	r3, [sp, #0]
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	2200      	movs	r2, #0
 8005744:	2120      	movs	r1, #32
 8005746:	68f8      	ldr	r0, [r7, #12]
 8005748:	f001 fe90 	bl	800746c <I2C_WaitOnFlagUntilTimeout>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d001      	beq.n	8005756 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e020      	b.n	8005798 <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2210      	movs	r2, #16
 800575c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2220      	movs	r2, #32
 8005764:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	3301      	adds	r3, #1
 800576a:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	429a      	cmp	r2, r3
 8005772:	f63f af5a 	bhi.w	800562a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2220      	movs	r2, #32
 800577a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005782:	f043 0220 	orr.w	r2, r3, #32
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e000      	b.n	8005798 <HAL_I2C_IsDeviceReady+0x1c8>
  }
  else
  {
    return HAL_BUSY;
 8005796:	2302      	movs	r3, #2
  }
}
 8005798:	4618      	mov	r0, r3
 800579a:	3720      	adds	r7, #32
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	02002000 	.word	0x02002000
 80057a4:	02002800 	.word	0x02002800

080057a8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d005      	beq.n	80057d4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057cc:	68ba      	ldr	r2, [r7, #8]
 80057ce:	68f9      	ldr	r1, [r7, #12]
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	4798      	blx	r3
  }
}
 80057d4:	bf00      	nop
 80057d6:	3710      	adds	r7, #16
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b086      	sub	sp, #24
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00f      	beq.n	800581e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005804:	2b00      	cmp	r3, #0
 8005806:	d00a      	beq.n	800581e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800580c:	f043 0201 	orr.w	r2, r3, #1
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800581c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005824:	2b00      	cmp	r3, #0
 8005826:	d00f      	beq.n	8005848 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00a      	beq.n	8005848 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005836:	f043 0208 	orr.w	r2, r3, #8
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005846:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00f      	beq.n	8005872 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00a      	beq.n	8005872 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005860:	f043 0202 	orr.w	r2, r3, #2
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005870:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005876:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f003 030b 	and.w	r3, r3, #11
 800587e:	2b00      	cmp	r3, #0
 8005880:	d003      	beq.n	800588a <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8005882:	68f9      	ldr	r1, [r7, #12]
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f001 fb13 	bl	8006eb0 <I2C_ITError>
  }
}
 800588a:	bf00      	nop
 800588c:	3718      	adds	r7, #24
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}

08005892 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005892:	b480      	push	{r7}
 8005894:	b083      	sub	sp, #12
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800589a:	bf00      	nop
 800589c:	370c      	adds	r7, #12
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr

080058a6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80058a6:	b480      	push	{r7}
 80058a8:	b083      	sub	sp, #12
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80058ae:	bf00      	nop
 80058b0:	370c      	adds	r7, #12
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr

080058ba <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80058ba:	b480      	push	{r7}
 80058bc:	b083      	sub	sp, #12
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80058c2:	bf00      	nop
 80058c4:	370c      	adds	r7, #12
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr

080058ce <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80058ce:	b480      	push	{r7}
 80058d0:	b083      	sub	sp, #12
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80058d6:	bf00      	nop
 80058d8:	370c      	adds	r7, #12
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr

080058e2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80058e2:	b480      	push	{r7}
 80058e4:	b083      	sub	sp, #12
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
 80058ea:	460b      	mov	r3, r1
 80058ec:	70fb      	strb	r3, [r7, #3]
 80058ee:	4613      	mov	r3, r2
 80058f0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80058f2:	bf00      	nop
 80058f4:	370c      	adds	r7, #12
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr

080058fe <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80058fe:	b480      	push	{r7}
 8005900:	b083      	sub	sp, #12
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005906:	bf00      	nop
 8005908:	370c      	adds	r7, #12
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr

08005912 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005912:	b480      	push	{r7}
 8005914:	b083      	sub	sp, #12
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800591a:	bf00      	nop
 800591c:	370c      	adds	r7, #12
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr

08005926 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005926:	b480      	push	{r7}
 8005928:	b083      	sub	sp, #12
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800592e:	bf00      	nop
 8005930:	370c      	adds	r7, #12
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr

0800593a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800593a:	b480      	push	{r7}
 800593c:	b083      	sub	sp, #12
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005942:	bf00      	nop
 8005944:	370c      	adds	r7, #12
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr

0800594e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800594e:	b480      	push	{r7}
 8005950:	b083      	sub	sp, #12
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005956:	bf00      	nop
 8005958:	370c      	adds	r7, #12
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr

08005962 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8005962:	b480      	push	{r7}
 8005964:	b083      	sub	sp, #12
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005970:	b2db      	uxtb	r3, r3
}
 8005972:	4618      	mov	r0, r3
 8005974:	370c      	adds	r7, #12
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr

0800597e <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800597e:	b580      	push	{r7, lr}
 8005980:	b088      	sub	sp, #32
 8005982:	af02      	add	r7, sp, #8
 8005984:	60f8      	str	r0, [r7, #12]
 8005986:	60b9      	str	r1, [r7, #8]
 8005988:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005994:	2b01      	cmp	r3, #1
 8005996:	d101      	bne.n	800599c <I2C_Master_ISR_IT+0x1e>
 8005998:	2302      	movs	r3, #2
 800599a:	e113      	b.n	8005bc4 <I2C_Master_ISR_IT+0x246>
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	f003 0310 	and.w	r3, r3, #16
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d012      	beq.n	80059d4 <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00d      	beq.n	80059d4 <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2210      	movs	r2, #16
 80059be:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059c4:	f043 0204 	orr.w	r2, r3, #4
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80059cc:	68f8      	ldr	r0, [r7, #12]
 80059ce:	f001 fb86 	bl	80070de <I2C_Flush_TXDR>
 80059d2:	e0e4      	b.n	8005b9e <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	f003 0304 	and.w	r3, r3, #4
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d022      	beq.n	8005a24 <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d01d      	beq.n	8005a24 <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	f023 0304 	bic.w	r3, r3, #4
 80059ee:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059fa:	b2d2      	uxtb	r2, r2
 80059fc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a02:	1c5a      	adds	r2, r3, #1
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a0c:	3b01      	subs	r3, #1
 8005a0e:	b29a      	uxth	r2, r3
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	b29a      	uxth	r2, r3
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005a22:	e0bc      	b.n	8005b9e <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d128      	bne.n	8005a80 <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d023      	beq.n	8005a80 <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d01e      	beq.n	8005a80 <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	f000 80a8 	beq.w	8005b9e <I2C_Master_ISR_IT+0x220>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a52:	781a      	ldrb	r2, [r3, #0]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a5e:	1c5a      	adds	r2, r3, #1
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a68:	3b01      	subs	r3, #1
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	3b01      	subs	r3, #1
 8005a78:	b29a      	uxth	r2, r3
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8005a7e:	e08e      	b.n	8005b9e <I2C_Master_ISR_IT+0x220>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d05c      	beq.n	8005b44 <I2C_Master_ISR_IT+0x1c6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d057      	beq.n	8005b44 <I2C_Master_ISR_IT+0x1c6>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d040      	beq.n	8005b20 <I2C_Master_ISR_IT+0x1a2>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d13c      	bne.n	8005b20 <I2C_Master_ISR_IT+0x1a2>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ab2:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	2bff      	cmp	r3, #255	@ 0xff
 8005abc:	d90e      	bls.n	8005adc <I2C_Master_ISR_IT+0x15e>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	22ff      	movs	r2, #255	@ 0xff
 8005ac2:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ac8:	b2da      	uxtb	r2, r3
 8005aca:	8a79      	ldrh	r1, [r7, #18]
 8005acc:	2300      	movs	r3, #0
 8005ace:	9300      	str	r3, [sp, #0]
 8005ad0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005ad4:	68f8      	ldr	r0, [r7, #12]
 8005ad6:	f001 fe03 	bl	80076e0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ada:	e032      	b.n	8005b42 <I2C_Master_ISR_IT+0x1c4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aea:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005aee:	d00b      	beq.n	8005b08 <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005af4:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005afa:	8a79      	ldrh	r1, [r7, #18]
 8005afc:	2000      	movs	r0, #0
 8005afe:	9000      	str	r0, [sp, #0]
 8005b00:	68f8      	ldr	r0, [r7, #12]
 8005b02:	f001 fded 	bl	80076e0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b06:	e01c      	b.n	8005b42 <I2C_Master_ISR_IT+0x1c4>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b0c:	b2da      	uxtb	r2, r3
 8005b0e:	8a79      	ldrh	r1, [r7, #18]
 8005b10:	2300      	movs	r3, #0
 8005b12:	9300      	str	r3, [sp, #0]
 8005b14:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005b18:	68f8      	ldr	r0, [r7, #12]
 8005b1a:	f001 fde1 	bl	80076e0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b1e:	e010      	b.n	8005b42 <I2C_Master_ISR_IT+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b2a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b2e:	d003      	beq.n	8005b38 <I2C_Master_ISR_IT+0x1ba>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005b30:	68f8      	ldr	r0, [r7, #12]
 8005b32:	f000 fdb3 	bl	800669c <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b36:	e032      	b.n	8005b9e <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005b38:	2140      	movs	r1, #64	@ 0x40
 8005b3a:	68f8      	ldr	r0, [r7, #12]
 8005b3c:	f001 f9b8 	bl	8006eb0 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b40:	e02d      	b.n	8005b9e <I2C_Master_ISR_IT+0x220>
 8005b42:	e02c      	b.n	8005b9e <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d027      	beq.n	8005b9e <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d022      	beq.n	8005b9e <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d119      	bne.n	8005b96 <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b6c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b70:	d015      	beq.n	8005b9e <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b76:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005b7a:	d108      	bne.n	8005b8e <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	685a      	ldr	r2, [r3, #4]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b8a:	605a      	str	r2, [r3, #4]
 8005b8c:	e007      	b.n	8005b9e <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	f000 fd84 	bl	800669c <I2C_ITMasterSeqCplt>
 8005b94:	e003      	b.n	8005b9e <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005b96:	2140      	movs	r1, #64	@ 0x40
 8005b98:	68f8      	ldr	r0, [r7, #12]
 8005b9a:	f001 f989 	bl	8006eb0 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	f003 0320 	and.w	r3, r3, #32
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d008      	beq.n	8005bba <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d003      	beq.n	8005bba <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8005bb2:	6979      	ldr	r1, [r7, #20]
 8005bb4:	68f8      	ldr	r0, [r7, #12]
 8005bb6:	f000 fe0b 	bl	80067d0 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3718      	adds	r7, #24
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b086      	sub	sp, #24
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bdc:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d101      	bne.n	8005bf0 <I2C_Slave_ISR_IT+0x24>
 8005bec:	2302      	movs	r3, #2
 8005bee:	e0e2      	b.n	8005db6 <I2C_Slave_ISR_IT+0x1ea>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	f003 0320 	and.w	r3, r3, #32
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d009      	beq.n	8005c16 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d004      	beq.n	8005c16 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005c0c:	6939      	ldr	r1, [r7, #16]
 8005c0e:	68f8      	ldr	r0, [r7, #12]
 8005c10:	f000 fea6 	bl	8006960 <I2C_ITSlaveCplt>
 8005c14:	e0ca      	b.n	8005dac <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	f003 0310 	and.w	r3, r3, #16
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d04b      	beq.n	8005cb8 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d046      	beq.n	8005cb8 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d128      	bne.n	8005c86 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	2b28      	cmp	r3, #40	@ 0x28
 8005c3e:	d108      	bne.n	8005c52 <I2C_Slave_ISR_IT+0x86>
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c46:	d104      	bne.n	8005c52 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005c48:	6939      	ldr	r1, [r7, #16]
 8005c4a:	68f8      	ldr	r0, [r7, #12]
 8005c4c:	f001 f8dc 	bl	8006e08 <I2C_ITListenCplt>
 8005c50:	e031      	b.n	8005cb6 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b29      	cmp	r3, #41	@ 0x29
 8005c5c:	d10e      	bne.n	8005c7c <I2C_Slave_ISR_IT+0xb0>
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005c64:	d00a      	beq.n	8005c7c <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2210      	movs	r2, #16
 8005c6c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f001 fa35 	bl	80070de <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005c74:	68f8      	ldr	r0, [r7, #12]
 8005c76:	f000 fd4e 	bl	8006716 <I2C_ITSlaveSeqCplt>
 8005c7a:	e01c      	b.n	8005cb6 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2210      	movs	r2, #16
 8005c82:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005c84:	e08f      	b.n	8005da6 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2210      	movs	r2, #16
 8005c8c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c92:	f043 0204 	orr.w	r2, r3, #4
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d003      	beq.n	8005ca8 <I2C_Slave_ISR_IT+0xdc>
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005ca6:	d17e      	bne.n	8005da6 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cac:	4619      	mov	r1, r3
 8005cae:	68f8      	ldr	r0, [r7, #12]
 8005cb0:	f001 f8fe 	bl	8006eb0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005cb4:	e077      	b.n	8005da6 <I2C_Slave_ISR_IT+0x1da>
 8005cb6:	e076      	b.n	8005da6 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	f003 0304 	and.w	r3, r3, #4
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d02f      	beq.n	8005d22 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d02a      	beq.n	8005d22 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d018      	beq.n	8005d08 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce0:	b2d2      	uxtb	r2, r2
 8005ce2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce8:	1c5a      	adds	r2, r3, #1
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cf2:	3b01      	subs	r3, #1
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	3b01      	subs	r3, #1
 8005d02:	b29a      	uxth	r2, r3
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d14b      	bne.n	8005daa <I2C_Slave_ISR_IT+0x1de>
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005d18:	d047      	beq.n	8005daa <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005d1a:	68f8      	ldr	r0, [r7, #12]
 8005d1c:	f000 fcfb 	bl	8006716 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005d20:	e043      	b.n	8005daa <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	f003 0308 	and.w	r3, r3, #8
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d009      	beq.n	8005d40 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d004      	beq.n	8005d40 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005d36:	6939      	ldr	r1, [r7, #16]
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	f000 fc2b 	bl	8006594 <I2C_ITAddrCplt>
 8005d3e:	e035      	b.n	8005dac <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	f003 0302 	and.w	r3, r3, #2
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d030      	beq.n	8005dac <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d02b      	beq.n	8005dac <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d018      	beq.n	8005d90 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d62:	781a      	ldrb	r2, [r3, #0]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d6e:	1c5a      	adds	r2, r3, #1
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d86:	3b01      	subs	r3, #1
 8005d88:	b29a      	uxth	r2, r3
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005d8e:	e00d      	b.n	8005dac <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d96:	d002      	beq.n	8005d9e <I2C_Slave_ISR_IT+0x1d2>
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d106      	bne.n	8005dac <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005d9e:	68f8      	ldr	r0, [r7, #12]
 8005da0:	f000 fcb9 	bl	8006716 <I2C_ITSlaveSeqCplt>
 8005da4:	e002      	b.n	8005dac <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8005da6:	bf00      	nop
 8005da8:	e000      	b.n	8005dac <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8005daa:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3718      	adds	r7, #24
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}

08005dbe <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8005dbe:	b580      	push	{r7, lr}
 8005dc0:	b088      	sub	sp, #32
 8005dc2:	af02      	add	r7, sp, #8
 8005dc4:	60f8      	str	r0, [r7, #12]
 8005dc6:	60b9      	str	r1, [r7, #8]
 8005dc8:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d101      	bne.n	8005dd8 <I2C_Master_ISR_DMA+0x1a>
 8005dd4:	2302      	movs	r3, #2
 8005dd6:	e0d9      	b.n	8005f8c <I2C_Master_ISR_DMA+0x1ce>
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	f003 0310 	and.w	r3, r3, #16
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d016      	beq.n	8005e18 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d011      	beq.n	8005e18 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2210      	movs	r2, #16
 8005dfa:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e00:	f043 0204 	orr.w	r2, r3, #4
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005e08:	2120      	movs	r1, #32
 8005e0a:	68f8      	ldr	r0, [r7, #12]
 8005e0c:	f001 fc9a 	bl	8007744 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005e10:	68f8      	ldr	r0, [r7, #12]
 8005e12:	f001 f964 	bl	80070de <I2C_Flush_TXDR>
 8005e16:	e0b4      	b.n	8005f82 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d071      	beq.n	8005f06 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d06c      	beq.n	8005f06 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e3a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d04e      	beq.n	8005ee4 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e52:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	2bff      	cmp	r3, #255	@ 0xff
 8005e5c:	d906      	bls.n	8005e6c <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	22ff      	movs	r2, #255	@ 0xff
 8005e62:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8005e64:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005e68:	617b      	str	r3, [r7, #20]
 8005e6a:	e010      	b.n	8005e8e <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e70:	b29a      	uxth	r2, r3
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e7a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005e7e:	d003      	beq.n	8005e88 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e84:	617b      	str	r3, [r7, #20]
 8005e86:	e002      	b.n	8005e8e <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8005e88:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005e8c:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e92:	b2da      	uxtb	r2, r3
 8005e94:	8a79      	ldrh	r1, [r7, #18]
 8005e96:	2300      	movs	r3, #0
 8005e98:	9300      	str	r3, [sp, #0]
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f001 fc1f 	bl	80076e0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ea6:	b29a      	uxth	r2, r3
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005eac:	1ad3      	subs	r3, r2, r3
 8005eae:	b29a      	uxth	r2, r3
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	2b22      	cmp	r3, #34	@ 0x22
 8005ebe:	d108      	bne.n	8005ed2 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005ece:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005ed0:	e057      	b.n	8005f82 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005ee0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005ee2:	e04e      	b.n	8005f82 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005eee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ef2:	d003      	beq.n	8005efc <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	f000 fbd1 	bl	800669c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8005efa:	e042      	b.n	8005f82 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005efc:	2140      	movs	r1, #64	@ 0x40
 8005efe:	68f8      	ldr	r0, [r7, #12]
 8005f00:	f000 ffd6 	bl	8006eb0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005f04:	e03d      	b.n	8005f82 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d028      	beq.n	8005f62 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d023      	beq.n	8005f62 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d119      	bne.n	8005f58 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f2e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f32:	d025      	beq.n	8005f80 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f38:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005f3c:	d108      	bne.n	8005f50 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	685a      	ldr	r2, [r3, #4]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f4c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8005f4e:	e017      	b.n	8005f80 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005f50:	68f8      	ldr	r0, [r7, #12]
 8005f52:	f000 fba3 	bl	800669c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8005f56:	e013      	b.n	8005f80 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005f58:	2140      	movs	r1, #64	@ 0x40
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	f000 ffa8 	bl	8006eb0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005f60:	e00e      	b.n	8005f80 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	f003 0320 	and.w	r3, r3, #32
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00a      	beq.n	8005f82 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d005      	beq.n	8005f82 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005f76:	68b9      	ldr	r1, [r7, #8]
 8005f78:	68f8      	ldr	r0, [r7, #12]
 8005f7a:	f000 fc29 	bl	80067d0 <I2C_ITMasterCplt>
 8005f7e:	e000      	b.n	8005f82 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8005f80:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3718      	adds	r7, #24
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b088      	sub	sp, #32
 8005f98:	af02      	add	r7, sp, #8
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8005fa0:	4b8d      	ldr	r3, [pc, #564]	@ (80061d8 <I2C_Mem_ISR_DMA+0x244>)
 8005fa2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d101      	bne.n	8005fb2 <I2C_Mem_ISR_DMA+0x1e>
 8005fae:	2302      	movs	r3, #2
 8005fb0:	e10e      	b.n	80061d0 <I2C_Mem_ISR_DMA+0x23c>
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	f003 0310 	and.w	r3, r3, #16
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d016      	beq.n	8005ff2 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d011      	beq.n	8005ff2 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2210      	movs	r2, #16
 8005fd4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fda:	f043 0204 	orr.w	r2, r3, #4
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005fe2:	2120      	movs	r1, #32
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	f001 fbad 	bl	8007744 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	f001 f877 	bl	80070de <I2C_Flush_TXDR>
 8005ff0:	e0e9      	b.n	80061c6 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	f003 0302 	and.w	r3, r3, #2
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d00e      	beq.n	800601a <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006002:	2b00      	cmp	r3, #0
 8006004:	d009      	beq.n	800601a <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800600e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f04f 32ff 	mov.w	r2, #4294967295
 8006016:	651a      	str	r2, [r3, #80]	@ 0x50
 8006018:	e0d5      	b.n	80061c6 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006020:	2b00      	cmp	r3, #0
 8006022:	d05f      	beq.n	80060e4 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800602a:	2b00      	cmp	r3, #0
 800602c:	d05a      	beq.n	80060e4 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800602e:	2101      	movs	r1, #1
 8006030:	68f8      	ldr	r0, [r7, #12]
 8006032:	f001 fc0b 	bl	800784c <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006036:	2110      	movs	r1, #16
 8006038:	68f8      	ldr	r0, [r7, #12]
 800603a:	f001 fb83 	bl	8007744 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006042:	b29b      	uxth	r3, r3
 8006044:	2b00      	cmp	r3, #0
 8006046:	d048      	beq.n	80060da <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800604c:	b29b      	uxth	r3, r3
 800604e:	2bff      	cmp	r3, #255	@ 0xff
 8006050:	d910      	bls.n	8006074 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	22ff      	movs	r2, #255	@ 0xff
 8006056:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800605c:	b299      	uxth	r1, r3
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006062:	b2da      	uxtb	r2, r3
 8006064:	2300      	movs	r3, #0
 8006066:	9300      	str	r3, [sp, #0]
 8006068:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800606c:	68f8      	ldr	r0, [r7, #12]
 800606e:	f001 fb37 	bl	80076e0 <I2C_TransferConfig>
 8006072:	e011      	b.n	8006098 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006078:	b29a      	uxth	r2, r3
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006082:	b299      	uxth	r1, r3
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006088:	b2da      	uxtb	r2, r3
 800608a:	2300      	movs	r3, #0
 800608c:	9300      	str	r3, [sp, #0]
 800608e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006092:	68f8      	ldr	r0, [r7, #12]
 8006094:	f001 fb24 	bl	80076e0 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800609c:	b29a      	uxth	r2, r3
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060a2:	1ad3      	subs	r3, r2, r3
 80060a4:	b29a      	uxth	r2, r3
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	2b22      	cmp	r3, #34	@ 0x22
 80060b4:	d108      	bne.n	80060c8 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80060c4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80060c6:	e07e      	b.n	80061c6 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80060d6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80060d8:	e075      	b.n	80061c6 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80060da:	2140      	movs	r1, #64	@ 0x40
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	f000 fee7 	bl	8006eb0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80060e2:	e070      	b.n	80061c6 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d05d      	beq.n	80061aa <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d058      	beq.n	80061aa <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80060f8:	2101      	movs	r1, #1
 80060fa:	68f8      	ldr	r0, [r7, #12]
 80060fc:	f001 fba6 	bl	800784c <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006100:	2110      	movs	r1, #16
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f001 fb1e 	bl	8007744 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800610e:	b2db      	uxtb	r3, r3
 8006110:	2b22      	cmp	r3, #34	@ 0x22
 8006112:	d101      	bne.n	8006118 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8006114:	4b31      	ldr	r3, [pc, #196]	@ (80061dc <I2C_Mem_ISR_DMA+0x248>)
 8006116:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800611c:	b29b      	uxth	r3, r3
 800611e:	2bff      	cmp	r3, #255	@ 0xff
 8006120:	d910      	bls.n	8006144 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	22ff      	movs	r2, #255	@ 0xff
 8006126:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800612c:	b299      	uxth	r1, r3
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006132:	b2da      	uxtb	r2, r3
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	9300      	str	r3, [sp, #0]
 8006138:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f001 facf 	bl	80076e0 <I2C_TransferConfig>
 8006142:	e011      	b.n	8006168 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006148:	b29a      	uxth	r2, r3
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006152:	b299      	uxth	r1, r3
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006158:	b2da      	uxtb	r2, r3
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	9300      	str	r3, [sp, #0]
 800615e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f001 fabc 	bl	80076e0 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800616c:	b29a      	uxth	r2, r3
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006172:	1ad3      	subs	r3, r2, r3
 8006174:	b29a      	uxth	r2, r3
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006180:	b2db      	uxtb	r3, r3
 8006182:	2b22      	cmp	r3, #34	@ 0x22
 8006184:	d108      	bne.n	8006198 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006194:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006196:	e016      	b.n	80061c6 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80061a6:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80061a8:	e00d      	b.n	80061c6 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	f003 0320 	and.w	r3, r3, #32
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d008      	beq.n	80061c6 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d003      	beq.n	80061c6 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80061be:	68b9      	ldr	r1, [r7, #8]
 80061c0:	68f8      	ldr	r0, [r7, #12]
 80061c2:	f000 fb05 	bl	80067d0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80061ce:	2300      	movs	r3, #0
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3718      	adds	r7, #24
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	80002000 	.word	0x80002000
 80061dc:	80002400 	.word	0x80002400

080061e0 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b088      	sub	sp, #32
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061f0:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80061f2:	2300      	movs	r3, #0
 80061f4:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d101      	bne.n	8006204 <I2C_Slave_ISR_DMA+0x24>
 8006200:	2302      	movs	r3, #2
 8006202:	e1c2      	b.n	800658a <I2C_Slave_ISR_DMA+0x3aa>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	f003 0320 	and.w	r3, r3, #32
 8006212:	2b00      	cmp	r3, #0
 8006214:	d009      	beq.n	800622a <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800621c:	2b00      	cmp	r3, #0
 800621e:	d004      	beq.n	800622a <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006220:	68b9      	ldr	r1, [r7, #8]
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	f000 fb9c 	bl	8006960 <I2C_ITSlaveCplt>
 8006228:	e1aa      	b.n	8006580 <I2C_Slave_ISR_DMA+0x3a0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	f003 0310 	and.w	r3, r3, #16
 8006230:	2b00      	cmp	r3, #0
 8006232:	f000 8197 	beq.w	8006564 <I2C_Slave_ISR_DMA+0x384>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800623c:	2b00      	cmp	r3, #0
 800623e:	f000 8191 	beq.w	8006564 <I2C_Slave_ISR_DMA+0x384>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006248:	2b00      	cmp	r3, #0
 800624a:	d105      	bne.n	8006258 <I2C_Slave_ISR_DMA+0x78>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006252:	2b00      	cmp	r3, #0
 8006254:	f000 817f 	beq.w	8006556 <I2C_Slave_ISR_DMA+0x376>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800625c:	2b00      	cmp	r3, #0
 800625e:	d07b      	beq.n	8006358 <I2C_Slave_ISR_DMA+0x178>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006266:	2b00      	cmp	r3, #0
 8006268:	d076      	beq.n	8006358 <I2C_Slave_ISR_DMA+0x178>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a74      	ldr	r2, [pc, #464]	@ (8006444 <I2C_Slave_ISR_DMA+0x264>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d059      	beq.n	800632a <I2C_Slave_ISR_DMA+0x14a>
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a72      	ldr	r2, [pc, #456]	@ (8006448 <I2C_Slave_ISR_DMA+0x268>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d053      	beq.n	800632a <I2C_Slave_ISR_DMA+0x14a>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a70      	ldr	r2, [pc, #448]	@ (800644c <I2C_Slave_ISR_DMA+0x26c>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d04d      	beq.n	800632a <I2C_Slave_ISR_DMA+0x14a>
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a6e      	ldr	r2, [pc, #440]	@ (8006450 <I2C_Slave_ISR_DMA+0x270>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d047      	beq.n	800632a <I2C_Slave_ISR_DMA+0x14a>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a6c      	ldr	r2, [pc, #432]	@ (8006454 <I2C_Slave_ISR_DMA+0x274>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d041      	beq.n	800632a <I2C_Slave_ISR_DMA+0x14a>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a6a      	ldr	r2, [pc, #424]	@ (8006458 <I2C_Slave_ISR_DMA+0x278>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d03b      	beq.n	800632a <I2C_Slave_ISR_DMA+0x14a>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a68      	ldr	r2, [pc, #416]	@ (800645c <I2C_Slave_ISR_DMA+0x27c>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d035      	beq.n	800632a <I2C_Slave_ISR_DMA+0x14a>
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a66      	ldr	r2, [pc, #408]	@ (8006460 <I2C_Slave_ISR_DMA+0x280>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d02f      	beq.n	800632a <I2C_Slave_ISR_DMA+0x14a>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a64      	ldr	r2, [pc, #400]	@ (8006464 <I2C_Slave_ISR_DMA+0x284>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d029      	beq.n	800632a <I2C_Slave_ISR_DMA+0x14a>
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a62      	ldr	r2, [pc, #392]	@ (8006468 <I2C_Slave_ISR_DMA+0x288>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d023      	beq.n	800632a <I2C_Slave_ISR_DMA+0x14a>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a60      	ldr	r2, [pc, #384]	@ (800646c <I2C_Slave_ISR_DMA+0x28c>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d01d      	beq.n	800632a <I2C_Slave_ISR_DMA+0x14a>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a5e      	ldr	r2, [pc, #376]	@ (8006470 <I2C_Slave_ISR_DMA+0x290>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d017      	beq.n	800632a <I2C_Slave_ISR_DMA+0x14a>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a5c      	ldr	r2, [pc, #368]	@ (8006474 <I2C_Slave_ISR_DMA+0x294>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d011      	beq.n	800632a <I2C_Slave_ISR_DMA+0x14a>
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a5a      	ldr	r2, [pc, #360]	@ (8006478 <I2C_Slave_ISR_DMA+0x298>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d00b      	beq.n	800632a <I2C_Slave_ISR_DMA+0x14a>
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a58      	ldr	r2, [pc, #352]	@ (800647c <I2C_Slave_ISR_DMA+0x29c>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d005      	beq.n	800632a <I2C_Slave_ISR_DMA+0x14a>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a56      	ldr	r2, [pc, #344]	@ (8006480 <I2C_Slave_ISR_DMA+0x2a0>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d109      	bne.n	800633e <I2C_Slave_ISR_DMA+0x15e>
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	2b00      	cmp	r3, #0
 8006334:	bf0c      	ite	eq
 8006336:	2301      	moveq	r3, #1
 8006338:	2300      	movne	r3, #0
 800633a:	b2db      	uxtb	r3, r3
 800633c:	e008      	b.n	8006350 <I2C_Slave_ISR_DMA+0x170>
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	2b00      	cmp	r3, #0
 8006348:	bf0c      	ite	eq
 800634a:	2301      	moveq	r3, #1
 800634c:	2300      	movne	r3, #0
 800634e:	b2db      	uxtb	r3, r3
 8006350:	2b00      	cmp	r3, #0
 8006352:	d001      	beq.n	8006358 <I2C_Slave_ISR_DMA+0x178>
          {
            treatdmanack = 1U;
 8006354:	2301      	movs	r3, #1
 8006356:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800635c:	2b00      	cmp	r3, #0
 800635e:	f000 809e 	beq.w	800649e <I2C_Slave_ISR_DMA+0x2be>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006368:	2b00      	cmp	r3, #0
 800636a:	f000 8098 	beq.w	800649e <I2C_Slave_ISR_DMA+0x2be>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a33      	ldr	r2, [pc, #204]	@ (8006444 <I2C_Slave_ISR_DMA+0x264>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d059      	beq.n	800642e <I2C_Slave_ISR_DMA+0x24e>
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a31      	ldr	r2, [pc, #196]	@ (8006448 <I2C_Slave_ISR_DMA+0x268>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d053      	beq.n	800642e <I2C_Slave_ISR_DMA+0x24e>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a2f      	ldr	r2, [pc, #188]	@ (800644c <I2C_Slave_ISR_DMA+0x26c>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d04d      	beq.n	800642e <I2C_Slave_ISR_DMA+0x24e>
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a2d      	ldr	r2, [pc, #180]	@ (8006450 <I2C_Slave_ISR_DMA+0x270>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d047      	beq.n	800642e <I2C_Slave_ISR_DMA+0x24e>
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a2b      	ldr	r2, [pc, #172]	@ (8006454 <I2C_Slave_ISR_DMA+0x274>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d041      	beq.n	800642e <I2C_Slave_ISR_DMA+0x24e>
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a29      	ldr	r2, [pc, #164]	@ (8006458 <I2C_Slave_ISR_DMA+0x278>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d03b      	beq.n	800642e <I2C_Slave_ISR_DMA+0x24e>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a27      	ldr	r2, [pc, #156]	@ (800645c <I2C_Slave_ISR_DMA+0x27c>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d035      	beq.n	800642e <I2C_Slave_ISR_DMA+0x24e>
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a25      	ldr	r2, [pc, #148]	@ (8006460 <I2C_Slave_ISR_DMA+0x280>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d02f      	beq.n	800642e <I2C_Slave_ISR_DMA+0x24e>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a23      	ldr	r2, [pc, #140]	@ (8006464 <I2C_Slave_ISR_DMA+0x284>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d029      	beq.n	800642e <I2C_Slave_ISR_DMA+0x24e>
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a21      	ldr	r2, [pc, #132]	@ (8006468 <I2C_Slave_ISR_DMA+0x288>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d023      	beq.n	800642e <I2C_Slave_ISR_DMA+0x24e>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a1f      	ldr	r2, [pc, #124]	@ (800646c <I2C_Slave_ISR_DMA+0x28c>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d01d      	beq.n	800642e <I2C_Slave_ISR_DMA+0x24e>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a1d      	ldr	r2, [pc, #116]	@ (8006470 <I2C_Slave_ISR_DMA+0x290>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d017      	beq.n	800642e <I2C_Slave_ISR_DMA+0x24e>
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a1b      	ldr	r2, [pc, #108]	@ (8006474 <I2C_Slave_ISR_DMA+0x294>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d011      	beq.n	800642e <I2C_Slave_ISR_DMA+0x24e>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a19      	ldr	r2, [pc, #100]	@ (8006478 <I2C_Slave_ISR_DMA+0x298>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d00b      	beq.n	800642e <I2C_Slave_ISR_DMA+0x24e>
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a17      	ldr	r2, [pc, #92]	@ (800647c <I2C_Slave_ISR_DMA+0x29c>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d005      	beq.n	800642e <I2C_Slave_ISR_DMA+0x24e>
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a15      	ldr	r2, [pc, #84]	@ (8006480 <I2C_Slave_ISR_DMA+0x2a0>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d12a      	bne.n	8006484 <I2C_Slave_ISR_DMA+0x2a4>
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	2b00      	cmp	r3, #0
 8006438:	bf0c      	ite	eq
 800643a:	2301      	moveq	r3, #1
 800643c:	2300      	movne	r3, #0
 800643e:	b2db      	uxtb	r3, r3
 8006440:	e029      	b.n	8006496 <I2C_Slave_ISR_DMA+0x2b6>
 8006442:	bf00      	nop
 8006444:	40020010 	.word	0x40020010
 8006448:	40020028 	.word	0x40020028
 800644c:	40020040 	.word	0x40020040
 8006450:	40020058 	.word	0x40020058
 8006454:	40020070 	.word	0x40020070
 8006458:	40020088 	.word	0x40020088
 800645c:	400200a0 	.word	0x400200a0
 8006460:	400200b8 	.word	0x400200b8
 8006464:	40020410 	.word	0x40020410
 8006468:	40020428 	.word	0x40020428
 800646c:	40020440 	.word	0x40020440
 8006470:	40020458 	.word	0x40020458
 8006474:	40020470 	.word	0x40020470
 8006478:	40020488 	.word	0x40020488
 800647c:	400204a0 	.word	0x400204a0
 8006480:	400204b8 	.word	0x400204b8
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	2b00      	cmp	r3, #0
 800648e:	bf0c      	ite	eq
 8006490:	2301      	moveq	r3, #1
 8006492:	2300      	movne	r3, #0
 8006494:	b2db      	uxtb	r3, r3
 8006496:	2b00      	cmp	r3, #0
 8006498:	d001      	beq.n	800649e <I2C_Slave_ISR_DMA+0x2be>
          {
            treatdmanack = 1U;
 800649a:	2301      	movs	r3, #1
 800649c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d128      	bne.n	80064f6 <I2C_Slave_ISR_DMA+0x316>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	2b28      	cmp	r3, #40	@ 0x28
 80064ae:	d108      	bne.n	80064c2 <I2C_Slave_ISR_DMA+0x2e2>
 80064b0:	69bb      	ldr	r3, [r7, #24]
 80064b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80064b6:	d104      	bne.n	80064c2 <I2C_Slave_ISR_DMA+0x2e2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80064b8:	68b9      	ldr	r1, [r7, #8]
 80064ba:	68f8      	ldr	r0, [r7, #12]
 80064bc:	f000 fca4 	bl	8006e08 <I2C_ITListenCplt>
 80064c0:	e048      	b.n	8006554 <I2C_Slave_ISR_DMA+0x374>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	2b29      	cmp	r3, #41	@ 0x29
 80064cc:	d10e      	bne.n	80064ec <I2C_Slave_ISR_DMA+0x30c>
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80064d4:	d00a      	beq.n	80064ec <I2C_Slave_ISR_DMA+0x30c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2210      	movs	r2, #16
 80064dc:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80064de:	68f8      	ldr	r0, [r7, #12]
 80064e0:	f000 fdfd 	bl	80070de <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80064e4:	68f8      	ldr	r0, [r7, #12]
 80064e6:	f000 f916 	bl	8006716 <I2C_ITSlaveSeqCplt>
 80064ea:	e033      	b.n	8006554 <I2C_Slave_ISR_DMA+0x374>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2210      	movs	r2, #16
 80064f2:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80064f4:	e034      	b.n	8006560 <I2C_Slave_ISR_DMA+0x380>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2210      	movs	r2, #16
 80064fc:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006502:	f043 0204 	orr.w	r2, r3, #4
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006510:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d003      	beq.n	8006520 <I2C_Slave_ISR_DMA+0x340>
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800651e:	d11f      	bne.n	8006560 <I2C_Slave_ISR_DMA+0x380>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006520:	7dfb      	ldrb	r3, [r7, #23]
 8006522:	2b21      	cmp	r3, #33	@ 0x21
 8006524:	d002      	beq.n	800652c <I2C_Slave_ISR_DMA+0x34c>
 8006526:	7dfb      	ldrb	r3, [r7, #23]
 8006528:	2b29      	cmp	r3, #41	@ 0x29
 800652a:	d103      	bne.n	8006534 <I2C_Slave_ISR_DMA+0x354>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2221      	movs	r2, #33	@ 0x21
 8006530:	631a      	str	r2, [r3, #48]	@ 0x30
 8006532:	e008      	b.n	8006546 <I2C_Slave_ISR_DMA+0x366>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006534:	7dfb      	ldrb	r3, [r7, #23]
 8006536:	2b22      	cmp	r3, #34	@ 0x22
 8006538:	d002      	beq.n	8006540 <I2C_Slave_ISR_DMA+0x360>
 800653a:	7dfb      	ldrb	r3, [r7, #23]
 800653c:	2b2a      	cmp	r3, #42	@ 0x2a
 800653e:	d102      	bne.n	8006546 <I2C_Slave_ISR_DMA+0x366>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2222      	movs	r2, #34	@ 0x22
 8006544:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800654a:	4619      	mov	r1, r3
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	f000 fcaf 	bl	8006eb0 <I2C_ITError>
      if (treatdmanack == 1U)
 8006552:	e005      	b.n	8006560 <I2C_Slave_ISR_DMA+0x380>
 8006554:	e004      	b.n	8006560 <I2C_Slave_ISR_DMA+0x380>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2210      	movs	r2, #16
 800655c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800655e:	e00f      	b.n	8006580 <I2C_Slave_ISR_DMA+0x3a0>
      if (treatdmanack == 1U)
 8006560:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006562:	e00d      	b.n	8006580 <I2C_Slave_ISR_DMA+0x3a0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	f003 0308 	and.w	r3, r3, #8
 800656a:	2b00      	cmp	r3, #0
 800656c:	d008      	beq.n	8006580 <I2C_Slave_ISR_DMA+0x3a0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006574:	2b00      	cmp	r3, #0
 8006576:	d003      	beq.n	8006580 <I2C_Slave_ISR_DMA+0x3a0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8006578:	68b9      	ldr	r1, [r7, #8]
 800657a:	68f8      	ldr	r0, [r7, #12]
 800657c:	f000 f80a 	bl	8006594 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2200      	movs	r2, #0
 8006584:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	3720      	adds	r7, #32
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop

08006594 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80065aa:	2b28      	cmp	r3, #40	@ 0x28
 80065ac:	d16a      	bne.n	8006684 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	699b      	ldr	r3, [r3, #24]
 80065b4:	0c1b      	lsrs	r3, r3, #16
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	f003 0301 	and.w	r3, r3, #1
 80065bc:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	699b      	ldr	r3, [r3, #24]
 80065c4:	0c1b      	lsrs	r3, r3, #16
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80065cc:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065da:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80065e8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	d138      	bne.n	8006664 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80065f2:	897b      	ldrh	r3, [r7, #10]
 80065f4:	09db      	lsrs	r3, r3, #7
 80065f6:	b29a      	uxth	r2, r3
 80065f8:	89bb      	ldrh	r3, [r7, #12]
 80065fa:	4053      	eors	r3, r2
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	f003 0306 	and.w	r3, r3, #6
 8006602:	2b00      	cmp	r3, #0
 8006604:	d11c      	bne.n	8006640 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006606:	897b      	ldrh	r3, [r7, #10]
 8006608:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800660e:	1c5a      	adds	r2, r3, #1
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006618:	2b02      	cmp	r3, #2
 800661a:	d13b      	bne.n	8006694 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2208      	movs	r2, #8
 8006628:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006632:	89ba      	ldrh	r2, [r7, #12]
 8006634:	7bfb      	ldrb	r3, [r7, #15]
 8006636:	4619      	mov	r1, r3
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f7ff f952 	bl	80058e2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800663e:	e029      	b.n	8006694 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006640:	893b      	ldrh	r3, [r7, #8]
 8006642:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006644:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f001 f8ff 	bl	800784c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006656:	89ba      	ldrh	r2, [r7, #12]
 8006658:	7bfb      	ldrb	r3, [r7, #15]
 800665a:	4619      	mov	r1, r3
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f7ff f940 	bl	80058e2 <HAL_I2C_AddrCallback>
}
 8006662:	e017      	b.n	8006694 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006664:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f001 f8ef 	bl	800784c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006676:	89ba      	ldrh	r2, [r7, #12]
 8006678:	7bfb      	ldrb	r3, [r7, #15]
 800667a:	4619      	mov	r1, r3
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f7ff f930 	bl	80058e2 <HAL_I2C_AddrCallback>
}
 8006682:	e007      	b.n	8006694 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2208      	movs	r2, #8
 800668a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8006694:	bf00      	nop
 8006696:	3710      	adds	r7, #16
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b082      	sub	sp, #8
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	2b21      	cmp	r3, #33	@ 0x21
 80066b6:	d115      	bne.n	80066e4 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2220      	movs	r2, #32
 80066bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2211      	movs	r2, #17
 80066c4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80066cc:	2101      	movs	r1, #1
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f001 f8bc 	bl	800784c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f7ff f8d8 	bl	8005892 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80066e2:	e014      	b.n	800670e <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2220      	movs	r2, #32
 80066e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2212      	movs	r2, #18
 80066f0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80066f8:	2102      	movs	r1, #2
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f001 f8a6 	bl	800784c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f7ff f8cc 	bl	80058a6 <HAL_I2C_MasterRxCpltCallback>
}
 800670e:	bf00      	nop
 8006710:	3708      	adds	r7, #8
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}

08006716 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006716:	b580      	push	{r7, lr}
 8006718:	b084      	sub	sp, #16
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006734:	2b00      	cmp	r3, #0
 8006736:	d008      	beq.n	800674a <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006746:	601a      	str	r2, [r3, #0]
 8006748:	e00c      	b.n	8006764 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006750:	2b00      	cmp	r3, #0
 8006752:	d007      	beq.n	8006764 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006762:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800676a:	b2db      	uxtb	r3, r3
 800676c:	2b29      	cmp	r3, #41	@ 0x29
 800676e:	d112      	bne.n	8006796 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2228      	movs	r2, #40	@ 0x28
 8006774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2221      	movs	r2, #33	@ 0x21
 800677c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800677e:	2101      	movs	r1, #1
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f001 f863 	bl	800784c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f7ff f893 	bl	80058ba <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006794:	e017      	b.n	80067c6 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800679c:	b2db      	uxtb	r3, r3
 800679e:	2b2a      	cmp	r3, #42	@ 0x2a
 80067a0:	d111      	bne.n	80067c6 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2228      	movs	r2, #40	@ 0x28
 80067a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2222      	movs	r2, #34	@ 0x22
 80067ae:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80067b0:	2102      	movs	r1, #2
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f001 f84a 	bl	800784c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f7ff f884 	bl	80058ce <HAL_I2C_SlaveRxCpltCallback>
}
 80067c6:	bf00      	nop
 80067c8:	3710      	adds	r7, #16
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
	...

080067d0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b086      	sub	sp, #24
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	2220      	movs	r2, #32
 80067e4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	2b21      	cmp	r3, #33	@ 0x21
 80067f0:	d107      	bne.n	8006802 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80067f2:	2101      	movs	r1, #1
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f001 f829 	bl	800784c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2211      	movs	r2, #17
 80067fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8006800:	e00c      	b.n	800681c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006808:	b2db      	uxtb	r3, r3
 800680a:	2b22      	cmp	r3, #34	@ 0x22
 800680c:	d106      	bne.n	800681c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800680e:	2102      	movs	r1, #2
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f001 f81b 	bl	800784c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2212      	movs	r2, #18
 800681a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	6859      	ldr	r1, [r3, #4]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	4b4c      	ldr	r3, [pc, #304]	@ (8006958 <I2C_ITMasterCplt+0x188>)
 8006828:	400b      	ands	r3, r1
 800682a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a49      	ldr	r2, [pc, #292]	@ (800695c <I2C_ITMasterCplt+0x18c>)
 8006836:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	f003 0310 	and.w	r3, r3, #16
 800683e:	2b00      	cmp	r3, #0
 8006840:	d009      	beq.n	8006856 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2210      	movs	r2, #16
 8006848:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800684e:	f043 0204 	orr.w	r2, r3, #4
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800685c:	b2db      	uxtb	r3, r3
 800685e:	2b60      	cmp	r3, #96	@ 0x60
 8006860:	d10a      	bne.n	8006878 <I2C_ITMasterCplt+0xa8>
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	f003 0304 	and.w	r3, r3, #4
 8006868:	2b00      	cmp	r3, #0
 800686a:	d005      	beq.n	8006878 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006872:	b2db      	uxtb	r3, r3
 8006874:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8006876:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 fc30 	bl	80070de <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006882:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800688a:	b2db      	uxtb	r3, r3
 800688c:	2b60      	cmp	r3, #96	@ 0x60
 800688e:	d002      	beq.n	8006896 <I2C_ITMasterCplt+0xc6>
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d006      	beq.n	80068a4 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800689a:	4619      	mov	r1, r3
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 fb07 	bl	8006eb0 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80068a2:	e054      	b.n	800694e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	2b21      	cmp	r3, #33	@ 0x21
 80068ae:	d124      	bne.n	80068fa <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2220      	movs	r2, #32
 80068b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	2b40      	cmp	r3, #64	@ 0x40
 80068c8:	d10b      	bne.n	80068e2 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f7ff f819 	bl	8005912 <HAL_I2C_MemTxCpltCallback>
}
 80068e0:	e035      	b.n	800694e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f7fe ffcd 	bl	8005892 <HAL_I2C_MasterTxCpltCallback>
}
 80068f8:	e029      	b.n	800694e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006900:	b2db      	uxtb	r3, r3
 8006902:	2b22      	cmp	r3, #34	@ 0x22
 8006904:	d123      	bne.n	800694e <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2220      	movs	r2, #32
 800690a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800691a:	b2db      	uxtb	r3, r3
 800691c:	2b40      	cmp	r3, #64	@ 0x40
 800691e:	d10b      	bne.n	8006938 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f7fe fff8 	bl	8005926 <HAL_I2C_MemRxCpltCallback>
}
 8006936:	e00a      	b.n	800694e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f7fe ffac 	bl	80058a6 <HAL_I2C_MasterRxCpltCallback>
}
 800694e:	bf00      	nop
 8006950:	3718      	adds	r7, #24
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	fe00e800 	.word	0xfe00e800
 800695c:	ffff0000 	.word	0xffff0000

08006960 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b086      	sub	sp, #24
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800697a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006982:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2220      	movs	r2, #32
 800698a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800698c:	7afb      	ldrb	r3, [r7, #11]
 800698e:	2b21      	cmp	r3, #33	@ 0x21
 8006990:	d002      	beq.n	8006998 <I2C_ITSlaveCplt+0x38>
 8006992:	7afb      	ldrb	r3, [r7, #11]
 8006994:	2b29      	cmp	r3, #41	@ 0x29
 8006996:	d108      	bne.n	80069aa <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006998:	f248 0101 	movw	r1, #32769	@ 0x8001
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 ff55 	bl	800784c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2221      	movs	r2, #33	@ 0x21
 80069a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80069a8:	e019      	b.n	80069de <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80069aa:	7afb      	ldrb	r3, [r7, #11]
 80069ac:	2b22      	cmp	r3, #34	@ 0x22
 80069ae:	d002      	beq.n	80069b6 <I2C_ITSlaveCplt+0x56>
 80069b0:	7afb      	ldrb	r3, [r7, #11]
 80069b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80069b4:	d108      	bne.n	80069c8 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80069b6:	f248 0102 	movw	r1, #32770	@ 0x8002
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 ff46 	bl	800784c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2222      	movs	r2, #34	@ 0x22
 80069c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80069c6:	e00a      	b.n	80069de <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80069c8:	7afb      	ldrb	r3, [r7, #11]
 80069ca:	2b28      	cmp	r3, #40	@ 0x28
 80069cc:	d107      	bne.n	80069de <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80069ce:	f248 0103 	movw	r1, #32771	@ 0x8003
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 ff3a 	bl	800784c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	685a      	ldr	r2, [r3, #4]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80069ec:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	6859      	ldr	r1, [r3, #4]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	4b7f      	ldr	r3, [pc, #508]	@ (8006bf8 <I2C_ITSlaveCplt+0x298>)
 80069fa:	400b      	ands	r3, r1
 80069fc:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 fb6d 	bl	80070de <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d07a      	beq.n	8006b04 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006a1c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	f000 8111 	beq.w	8006c4a <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a73      	ldr	r2, [pc, #460]	@ (8006bfc <I2C_ITSlaveCplt+0x29c>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d059      	beq.n	8006ae8 <I2C_ITSlaveCplt+0x188>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a71      	ldr	r2, [pc, #452]	@ (8006c00 <I2C_ITSlaveCplt+0x2a0>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d053      	beq.n	8006ae8 <I2C_ITSlaveCplt+0x188>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a6f      	ldr	r2, [pc, #444]	@ (8006c04 <I2C_ITSlaveCplt+0x2a4>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d04d      	beq.n	8006ae8 <I2C_ITSlaveCplt+0x188>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a6d      	ldr	r2, [pc, #436]	@ (8006c08 <I2C_ITSlaveCplt+0x2a8>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d047      	beq.n	8006ae8 <I2C_ITSlaveCplt+0x188>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a6b      	ldr	r2, [pc, #428]	@ (8006c0c <I2C_ITSlaveCplt+0x2ac>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d041      	beq.n	8006ae8 <I2C_ITSlaveCplt+0x188>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a69      	ldr	r2, [pc, #420]	@ (8006c10 <I2C_ITSlaveCplt+0x2b0>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d03b      	beq.n	8006ae8 <I2C_ITSlaveCplt+0x188>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a67      	ldr	r2, [pc, #412]	@ (8006c14 <I2C_ITSlaveCplt+0x2b4>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d035      	beq.n	8006ae8 <I2C_ITSlaveCplt+0x188>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a65      	ldr	r2, [pc, #404]	@ (8006c18 <I2C_ITSlaveCplt+0x2b8>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d02f      	beq.n	8006ae8 <I2C_ITSlaveCplt+0x188>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a63      	ldr	r2, [pc, #396]	@ (8006c1c <I2C_ITSlaveCplt+0x2bc>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d029      	beq.n	8006ae8 <I2C_ITSlaveCplt+0x188>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a61      	ldr	r2, [pc, #388]	@ (8006c20 <I2C_ITSlaveCplt+0x2c0>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d023      	beq.n	8006ae8 <I2C_ITSlaveCplt+0x188>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a5f      	ldr	r2, [pc, #380]	@ (8006c24 <I2C_ITSlaveCplt+0x2c4>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d01d      	beq.n	8006ae8 <I2C_ITSlaveCplt+0x188>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a5d      	ldr	r2, [pc, #372]	@ (8006c28 <I2C_ITSlaveCplt+0x2c8>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d017      	beq.n	8006ae8 <I2C_ITSlaveCplt+0x188>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a5b      	ldr	r2, [pc, #364]	@ (8006c2c <I2C_ITSlaveCplt+0x2cc>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d011      	beq.n	8006ae8 <I2C_ITSlaveCplt+0x188>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a59      	ldr	r2, [pc, #356]	@ (8006c30 <I2C_ITSlaveCplt+0x2d0>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d00b      	beq.n	8006ae8 <I2C_ITSlaveCplt+0x188>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a57      	ldr	r2, [pc, #348]	@ (8006c34 <I2C_ITSlaveCplt+0x2d4>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d005      	beq.n	8006ae8 <I2C_ITSlaveCplt+0x188>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a55      	ldr	r2, [pc, #340]	@ (8006c38 <I2C_ITSlaveCplt+0x2d8>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d105      	bne.n	8006af4 <I2C_ITSlaveCplt+0x194>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	e004      	b.n	8006afe <I2C_ITSlaveCplt+0x19e>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	8553      	strh	r3, [r2, #42]	@ 0x2a
 8006b02:	e0a2      	b.n	8006c4a <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	f000 809d 	beq.w	8006c4a <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006b1e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	f000 8090 	beq.w	8006c4a <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a32      	ldr	r2, [pc, #200]	@ (8006bfc <I2C_ITSlaveCplt+0x29c>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d059      	beq.n	8006bea <I2C_ITSlaveCplt+0x28a>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a30      	ldr	r2, [pc, #192]	@ (8006c00 <I2C_ITSlaveCplt+0x2a0>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d053      	beq.n	8006bea <I2C_ITSlaveCplt+0x28a>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a2e      	ldr	r2, [pc, #184]	@ (8006c04 <I2C_ITSlaveCplt+0x2a4>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d04d      	beq.n	8006bea <I2C_ITSlaveCplt+0x28a>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a2c      	ldr	r2, [pc, #176]	@ (8006c08 <I2C_ITSlaveCplt+0x2a8>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d047      	beq.n	8006bea <I2C_ITSlaveCplt+0x28a>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a2a      	ldr	r2, [pc, #168]	@ (8006c0c <I2C_ITSlaveCplt+0x2ac>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d041      	beq.n	8006bea <I2C_ITSlaveCplt+0x28a>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a28      	ldr	r2, [pc, #160]	@ (8006c10 <I2C_ITSlaveCplt+0x2b0>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d03b      	beq.n	8006bea <I2C_ITSlaveCplt+0x28a>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a26      	ldr	r2, [pc, #152]	@ (8006c14 <I2C_ITSlaveCplt+0x2b4>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d035      	beq.n	8006bea <I2C_ITSlaveCplt+0x28a>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a24      	ldr	r2, [pc, #144]	@ (8006c18 <I2C_ITSlaveCplt+0x2b8>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d02f      	beq.n	8006bea <I2C_ITSlaveCplt+0x28a>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a22      	ldr	r2, [pc, #136]	@ (8006c1c <I2C_ITSlaveCplt+0x2bc>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d029      	beq.n	8006bea <I2C_ITSlaveCplt+0x28a>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a20      	ldr	r2, [pc, #128]	@ (8006c20 <I2C_ITSlaveCplt+0x2c0>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d023      	beq.n	8006bea <I2C_ITSlaveCplt+0x28a>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a1e      	ldr	r2, [pc, #120]	@ (8006c24 <I2C_ITSlaveCplt+0x2c4>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d01d      	beq.n	8006bea <I2C_ITSlaveCplt+0x28a>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a1c      	ldr	r2, [pc, #112]	@ (8006c28 <I2C_ITSlaveCplt+0x2c8>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d017      	beq.n	8006bea <I2C_ITSlaveCplt+0x28a>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a1a      	ldr	r2, [pc, #104]	@ (8006c2c <I2C_ITSlaveCplt+0x2cc>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d011      	beq.n	8006bea <I2C_ITSlaveCplt+0x28a>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a18      	ldr	r2, [pc, #96]	@ (8006c30 <I2C_ITSlaveCplt+0x2d0>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d00b      	beq.n	8006bea <I2C_ITSlaveCplt+0x28a>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a16      	ldr	r2, [pc, #88]	@ (8006c34 <I2C_ITSlaveCplt+0x2d4>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d005      	beq.n	8006bea <I2C_ITSlaveCplt+0x28a>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a14      	ldr	r2, [pc, #80]	@ (8006c38 <I2C_ITSlaveCplt+0x2d8>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d128      	bne.n	8006c3c <I2C_ITSlaveCplt+0x2dc>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	e027      	b.n	8006c46 <I2C_ITSlaveCplt+0x2e6>
 8006bf6:	bf00      	nop
 8006bf8:	fe00e800 	.word	0xfe00e800
 8006bfc:	40020010 	.word	0x40020010
 8006c00:	40020028 	.word	0x40020028
 8006c04:	40020040 	.word	0x40020040
 8006c08:	40020058 	.word	0x40020058
 8006c0c:	40020070 	.word	0x40020070
 8006c10:	40020088 	.word	0x40020088
 8006c14:	400200a0 	.word	0x400200a0
 8006c18:	400200b8 	.word	0x400200b8
 8006c1c:	40020410 	.word	0x40020410
 8006c20:	40020428 	.word	0x40020428
 8006c24:	40020440 	.word	0x40020440
 8006c28:	40020458 	.word	0x40020458
 8006c2c:	40020470 	.word	0x40020470
 8006c30:	40020488 	.word	0x40020488
 8006c34:	400204a0 	.word	0x400204a0
 8006c38:	400204b8 	.word	0x400204b8
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	f003 0304 	and.w	r3, r3, #4
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d020      	beq.n	8006c96 <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	f023 0304 	bic.w	r3, r3, #4
 8006c5a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c66:	b2d2      	uxtb	r2, r2
 8006c68:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c6e:	1c5a      	adds	r2, r3, #1
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d00c      	beq.n	8006c96 <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c80:	3b01      	subs	r3, #1
 8006c82:	b29a      	uxth	r2, r3
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	b29a      	uxth	r2, r3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d005      	beq.n	8006cac <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ca4:	f043 0204 	orr.w	r2, r3, #4
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	f003 0310 	and.w	r3, r3, #16
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d049      	beq.n	8006d4a <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d044      	beq.n	8006d4a <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d128      	bne.n	8006d1c <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	2b28      	cmp	r3, #40	@ 0x28
 8006cd4:	d108      	bne.n	8006ce8 <I2C_ITSlaveCplt+0x388>
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006cdc:	d104      	bne.n	8006ce8 <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006cde:	6979      	ldr	r1, [r7, #20]
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 f891 	bl	8006e08 <I2C_ITListenCplt>
 8006ce6:	e030      	b.n	8006d4a <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	2b29      	cmp	r3, #41	@ 0x29
 8006cf2:	d10e      	bne.n	8006d12 <I2C_ITSlaveCplt+0x3b2>
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006cfa:	d00a      	beq.n	8006d12 <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2210      	movs	r2, #16
 8006d02:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 f9ea 	bl	80070de <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f7ff fd03 	bl	8006716 <I2C_ITSlaveSeqCplt>
 8006d10:	e01b      	b.n	8006d4a <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2210      	movs	r2, #16
 8006d18:	61da      	str	r2, [r3, #28]
 8006d1a:	e016      	b.n	8006d4a <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2210      	movs	r2, #16
 8006d22:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d28:	f043 0204 	orr.w	r2, r3, #4
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d003      	beq.n	8006d3e <I2C_ITSlaveCplt+0x3de>
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006d3c:	d105      	bne.n	8006d4a <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d42:	4619      	mov	r1, r3
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 f8b3 	bl	8006eb0 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d010      	beq.n	8006d82 <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d64:	4619      	mov	r1, r3
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 f8a2 	bl	8006eb0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	2b28      	cmp	r3, #40	@ 0x28
 8006d76:	d141      	bne.n	8006dfc <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006d78:	6979      	ldr	r1, [r7, #20]
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 f844 	bl	8006e08 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006d80:	e03c      	b.n	8006dfc <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d86:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006d8a:	d014      	beq.n	8006db6 <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f7ff fcc2 	bl	8006716 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	4a1b      	ldr	r2, [pc, #108]	@ (8006e04 <I2C_ITSlaveCplt+0x4a4>)
 8006d96:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2220      	movs	r2, #32
 8006d9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f7fe fda5 	bl	80058fe <HAL_I2C_ListenCpltCallback>
}
 8006db4:	e022      	b.n	8006dfc <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	2b22      	cmp	r3, #34	@ 0x22
 8006dc0:	d10e      	bne.n	8006de0 <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2220      	movs	r2, #32
 8006dc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f7fe fd78 	bl	80058ce <HAL_I2C_SlaveRxCpltCallback>
}
 8006dde:	e00d      	b.n	8006dfc <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2220      	movs	r2, #32
 8006de4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f7fe fd5f 	bl	80058ba <HAL_I2C_SlaveTxCpltCallback>
}
 8006dfc:	bf00      	nop
 8006dfe:	3718      	adds	r7, #24
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	ffff0000 	.word	0xffff0000

08006e08 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	4a25      	ldr	r2, [pc, #148]	@ (8006eac <I2C_ITListenCplt+0xa4>)
 8006e16:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2220      	movs	r2, #32
 8006e22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	f003 0304 	and.w	r3, r3, #4
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d022      	beq.n	8006e84 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e48:	b2d2      	uxtb	r2, r2
 8006e4a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e50:	1c5a      	adds	r2, r3, #1
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d012      	beq.n	8006e84 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e62:	3b01      	subs	r3, #1
 8006e64:	b29a      	uxth	r2, r3
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	3b01      	subs	r3, #1
 8006e72:	b29a      	uxth	r2, r3
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e7c:	f043 0204 	orr.w	r2, r3, #4
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006e84:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 fcdf 	bl	800784c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	2210      	movs	r2, #16
 8006e94:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f7fe fd2d 	bl	80058fe <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006ea4:	bf00      	nop
 8006ea6:	3708      	adds	r7, #8
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	ffff0000 	.word	0xffff0000

08006eb0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ec0:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4a6d      	ldr	r2, [pc, #436]	@ (8007084 <I2C_ITError+0x1d4>)
 8006ece:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	431a      	orrs	r2, r3
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006ee2:	7bfb      	ldrb	r3, [r7, #15]
 8006ee4:	2b28      	cmp	r3, #40	@ 0x28
 8006ee6:	d005      	beq.n	8006ef4 <I2C_ITError+0x44>
 8006ee8:	7bfb      	ldrb	r3, [r7, #15]
 8006eea:	2b29      	cmp	r3, #41	@ 0x29
 8006eec:	d002      	beq.n	8006ef4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006eee:	7bfb      	ldrb	r3, [r7, #15]
 8006ef0:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ef2:	d10b      	bne.n	8006f0c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006ef4:	2103      	movs	r1, #3
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 fca8 	bl	800784c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2228      	movs	r2, #40	@ 0x28
 8006f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	4a60      	ldr	r2, [pc, #384]	@ (8007088 <I2C_ITError+0x1d8>)
 8006f08:	635a      	str	r2, [r3, #52]	@ 0x34
 8006f0a:	e030      	b.n	8006f6e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006f0c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 fc9b 	bl	800784c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 f8e1 	bl	80070de <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	2b60      	cmp	r3, #96	@ 0x60
 8006f26:	d01f      	beq.n	8006f68 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2220      	movs	r2, #32
 8006f2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	699b      	ldr	r3, [r3, #24]
 8006f36:	f003 0320 	and.w	r3, r3, #32
 8006f3a:	2b20      	cmp	r3, #32
 8006f3c:	d114      	bne.n	8006f68 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	699b      	ldr	r3, [r3, #24]
 8006f44:	f003 0310 	and.w	r3, r3, #16
 8006f48:	2b10      	cmp	r3, #16
 8006f4a:	d109      	bne.n	8006f60 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2210      	movs	r2, #16
 8006f52:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f58:	f043 0204 	orr.w	r2, r3, #4
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	2220      	movs	r2, #32
 8006f66:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f72:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d039      	beq.n	8006ff0 <I2C_ITError+0x140>
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	2b11      	cmp	r3, #17
 8006f80:	d002      	beq.n	8006f88 <I2C_ITError+0xd8>
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	2b21      	cmp	r3, #33	@ 0x21
 8006f86:	d133      	bne.n	8006ff0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006f96:	d107      	bne.n	8006fa8 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006fa6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fac:	4618      	mov	r0, r3
 8006fae:	f7fd fa45 	bl	800443c <HAL_DMA_GetState>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d017      	beq.n	8006fe8 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fbc:	4a33      	ldr	r2, [pc, #204]	@ (800708c <I2C_ITError+0x1dc>)
 8006fbe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f7fc f88d 	bl	80030ec <HAL_DMA_Abort_IT>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d04d      	beq.n	8007074 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006fe2:	4610      	mov	r0, r2
 8006fe4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006fe6:	e045      	b.n	8007074 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 f851 	bl	8007090 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006fee:	e041      	b.n	8007074 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d039      	beq.n	800706c <I2C_ITError+0x1bc>
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	2b12      	cmp	r3, #18
 8006ffc:	d002      	beq.n	8007004 <I2C_ITError+0x154>
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	2b22      	cmp	r3, #34	@ 0x22
 8007002:	d133      	bne.n	800706c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800700e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007012:	d107      	bne.n	8007024 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007022:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007028:	4618      	mov	r0, r3
 800702a:	f7fd fa07 	bl	800443c <HAL_DMA_GetState>
 800702e:	4603      	mov	r3, r0
 8007030:	2b01      	cmp	r3, #1
 8007032:	d017      	beq.n	8007064 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007038:	4a14      	ldr	r2, [pc, #80]	@ (800708c <I2C_ITError+0x1dc>)
 800703a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007048:	4618      	mov	r0, r3
 800704a:	f7fc f84f 	bl	80030ec <HAL_DMA_Abort_IT>
 800704e:	4603      	mov	r3, r0
 8007050:	2b00      	cmp	r3, #0
 8007052:	d011      	beq.n	8007078 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007058:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800705e:	4610      	mov	r0, r2
 8007060:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007062:	e009      	b.n	8007078 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 f813 	bl	8007090 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800706a:	e005      	b.n	8007078 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 f80f 	bl	8007090 <I2C_TreatErrorCallback>
  }
}
 8007072:	e002      	b.n	800707a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007074:	bf00      	nop
 8007076:	e000      	b.n	800707a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007078:	bf00      	nop
}
 800707a:	bf00      	nop
 800707c:	3710      	adds	r7, #16
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	ffff0000 	.word	0xffff0000
 8007088:	08005bcd 	.word	0x08005bcd
 800708c:	08007431 	.word	0x08007431

08007090 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	2b60      	cmp	r3, #96	@ 0x60
 80070a2:	d10e      	bne.n	80070c2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2220      	movs	r2, #32
 80070a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f7fe fc47 	bl	800594e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80070c0:	e009      	b.n	80070d6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f7fe fc32 	bl	800593a <HAL_I2C_ErrorCallback>
}
 80070d6:	bf00      	nop
 80070d8:	3708      	adds	r7, #8
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}

080070de <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80070de:	b480      	push	{r7}
 80070e0:	b083      	sub	sp, #12
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	699b      	ldr	r3, [r3, #24]
 80070ec:	f003 0302 	and.w	r3, r3, #2
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	d103      	bne.n	80070fc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	2200      	movs	r2, #0
 80070fa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	699b      	ldr	r3, [r3, #24]
 8007102:	f003 0301 	and.w	r3, r3, #1
 8007106:	2b01      	cmp	r3, #1
 8007108:	d007      	beq.n	800711a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	699a      	ldr	r2, [r3, #24]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f042 0201 	orr.w	r2, r2, #1
 8007118:	619a      	str	r2, [r3, #24]
  }
}
 800711a:	bf00      	nop
 800711c:	370c      	adds	r7, #12
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr

08007126 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007126:	b580      	push	{r7, lr}
 8007128:	b084      	sub	sp, #16
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007132:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007142:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007148:	b29b      	uxth	r3, r3
 800714a:	2b00      	cmp	r3, #0
 800714c:	d104      	bne.n	8007158 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800714e:	2120      	movs	r1, #32
 8007150:	68f8      	ldr	r0, [r7, #12]
 8007152:	f000 faf7 	bl	8007744 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8007156:	e02d      	b.n	80071b4 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800715c:	68fa      	ldr	r2, [r7, #12]
 800715e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8007160:	441a      	add	r2, r3
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800716a:	b29b      	uxth	r3, r3
 800716c:	2bff      	cmp	r3, #255	@ 0xff
 800716e:	d903      	bls.n	8007178 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	22ff      	movs	r2, #255	@ 0xff
 8007174:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007176:	e004      	b.n	8007182 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800717c:	b29a      	uxth	r2, r3
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	3324      	adds	r3, #36	@ 0x24
 800718c:	4619      	mov	r1, r3
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007192:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8007198:	f7fb fd3e 	bl	8002c18 <HAL_DMA_Start_IT>
 800719c:	4603      	mov	r3, r0
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d004      	beq.n	80071ac <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80071a2:	2110      	movs	r1, #16
 80071a4:	68f8      	ldr	r0, [r7, #12]
 80071a6:	f7ff fe83 	bl	8006eb0 <I2C_ITError>
}
 80071aa:	e003      	b.n	80071b4 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80071ac:	2140      	movs	r1, #64	@ 0x40
 80071ae:	68f8      	ldr	r0, [r7, #12]
 80071b0:	f000 fac8 	bl	8007744 <I2C_Enable_IRQ>
}
 80071b4:	bf00      	nop
 80071b6:	3710      	adds	r7, #16
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 80071c4:	2300      	movs	r3, #0
 80071c6:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071cc:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d076      	beq.n	80072c4 <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a71      	ldr	r2, [pc, #452]	@ (80073a4 <I2C_DMAError+0x1e8>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d059      	beq.n	8007296 <I2C_DMAError+0xda>
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a6f      	ldr	r2, [pc, #444]	@ (80073a8 <I2C_DMAError+0x1ec>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d053      	beq.n	8007296 <I2C_DMAError+0xda>
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a6d      	ldr	r2, [pc, #436]	@ (80073ac <I2C_DMAError+0x1f0>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d04d      	beq.n	8007296 <I2C_DMAError+0xda>
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a6b      	ldr	r2, [pc, #428]	@ (80073b0 <I2C_DMAError+0x1f4>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d047      	beq.n	8007296 <I2C_DMAError+0xda>
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a69      	ldr	r2, [pc, #420]	@ (80073b4 <I2C_DMAError+0x1f8>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d041      	beq.n	8007296 <I2C_DMAError+0xda>
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a67      	ldr	r2, [pc, #412]	@ (80073b8 <I2C_DMAError+0x1fc>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d03b      	beq.n	8007296 <I2C_DMAError+0xda>
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a65      	ldr	r2, [pc, #404]	@ (80073bc <I2C_DMAError+0x200>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d035      	beq.n	8007296 <I2C_DMAError+0xda>
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a63      	ldr	r2, [pc, #396]	@ (80073c0 <I2C_DMAError+0x204>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d02f      	beq.n	8007296 <I2C_DMAError+0xda>
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a61      	ldr	r2, [pc, #388]	@ (80073c4 <I2C_DMAError+0x208>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d029      	beq.n	8007296 <I2C_DMAError+0xda>
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a5f      	ldr	r2, [pc, #380]	@ (80073c8 <I2C_DMAError+0x20c>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d023      	beq.n	8007296 <I2C_DMAError+0xda>
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a5d      	ldr	r2, [pc, #372]	@ (80073cc <I2C_DMAError+0x210>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d01d      	beq.n	8007296 <I2C_DMAError+0xda>
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a5b      	ldr	r2, [pc, #364]	@ (80073d0 <I2C_DMAError+0x214>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d017      	beq.n	8007296 <I2C_DMAError+0xda>
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a59      	ldr	r2, [pc, #356]	@ (80073d4 <I2C_DMAError+0x218>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d011      	beq.n	8007296 <I2C_DMAError+0xda>
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a57      	ldr	r2, [pc, #348]	@ (80073d8 <I2C_DMAError+0x21c>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d00b      	beq.n	8007296 <I2C_DMAError+0xda>
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a55      	ldr	r2, [pc, #340]	@ (80073dc <I2C_DMAError+0x220>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d005      	beq.n	8007296 <I2C_DMAError+0xda>
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a53      	ldr	r2, [pc, #332]	@ (80073e0 <I2C_DMAError+0x224>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d109      	bne.n	80072aa <I2C_DMAError+0xee>
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	bf0c      	ite	eq
 80072a2:	2301      	moveq	r3, #1
 80072a4:	2300      	movne	r3, #0
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	e008      	b.n	80072bc <I2C_DMAError+0x100>
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	bf0c      	ite	eq
 80072b6:	2301      	moveq	r3, #1
 80072b8:	2300      	movne	r3, #0
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d001      	beq.n	80072c4 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 80072c0:	2301      	movs	r3, #1
 80072c2:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	f000 8098 	beq.w	80073fe <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a33      	ldr	r2, [pc, #204]	@ (80073a4 <I2C_DMAError+0x1e8>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d059      	beq.n	800738e <I2C_DMAError+0x1d2>
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a31      	ldr	r2, [pc, #196]	@ (80073a8 <I2C_DMAError+0x1ec>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d053      	beq.n	800738e <I2C_DMAError+0x1d2>
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a2f      	ldr	r2, [pc, #188]	@ (80073ac <I2C_DMAError+0x1f0>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d04d      	beq.n	800738e <I2C_DMAError+0x1d2>
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a2d      	ldr	r2, [pc, #180]	@ (80073b0 <I2C_DMAError+0x1f4>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d047      	beq.n	800738e <I2C_DMAError+0x1d2>
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a2b      	ldr	r2, [pc, #172]	@ (80073b4 <I2C_DMAError+0x1f8>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d041      	beq.n	800738e <I2C_DMAError+0x1d2>
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a29      	ldr	r2, [pc, #164]	@ (80073b8 <I2C_DMAError+0x1fc>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d03b      	beq.n	800738e <I2C_DMAError+0x1d2>
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a27      	ldr	r2, [pc, #156]	@ (80073bc <I2C_DMAError+0x200>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d035      	beq.n	800738e <I2C_DMAError+0x1d2>
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a25      	ldr	r2, [pc, #148]	@ (80073c0 <I2C_DMAError+0x204>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d02f      	beq.n	800738e <I2C_DMAError+0x1d2>
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a23      	ldr	r2, [pc, #140]	@ (80073c4 <I2C_DMAError+0x208>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d029      	beq.n	800738e <I2C_DMAError+0x1d2>
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a21      	ldr	r2, [pc, #132]	@ (80073c8 <I2C_DMAError+0x20c>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d023      	beq.n	800738e <I2C_DMAError+0x1d2>
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a1f      	ldr	r2, [pc, #124]	@ (80073cc <I2C_DMAError+0x210>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d01d      	beq.n	800738e <I2C_DMAError+0x1d2>
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a1d      	ldr	r2, [pc, #116]	@ (80073d0 <I2C_DMAError+0x214>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d017      	beq.n	800738e <I2C_DMAError+0x1d2>
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a1b      	ldr	r2, [pc, #108]	@ (80073d4 <I2C_DMAError+0x218>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d011      	beq.n	800738e <I2C_DMAError+0x1d2>
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a19      	ldr	r2, [pc, #100]	@ (80073d8 <I2C_DMAError+0x21c>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d00b      	beq.n	800738e <I2C_DMAError+0x1d2>
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a17      	ldr	r2, [pc, #92]	@ (80073dc <I2C_DMAError+0x220>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d005      	beq.n	800738e <I2C_DMAError+0x1d2>
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a15      	ldr	r2, [pc, #84]	@ (80073e0 <I2C_DMAError+0x224>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d12a      	bne.n	80073e4 <I2C_DMAError+0x228>
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	2b00      	cmp	r3, #0
 8007398:	bf0c      	ite	eq
 800739a:	2301      	moveq	r3, #1
 800739c:	2300      	movne	r3, #0
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	e029      	b.n	80073f6 <I2C_DMAError+0x23a>
 80073a2:	bf00      	nop
 80073a4:	40020010 	.word	0x40020010
 80073a8:	40020028 	.word	0x40020028
 80073ac:	40020040 	.word	0x40020040
 80073b0:	40020058 	.word	0x40020058
 80073b4:	40020070 	.word	0x40020070
 80073b8:	40020088 	.word	0x40020088
 80073bc:	400200a0 	.word	0x400200a0
 80073c0:	400200b8 	.word	0x400200b8
 80073c4:	40020410 	.word	0x40020410
 80073c8:	40020428 	.word	0x40020428
 80073cc:	40020440 	.word	0x40020440
 80073d0:	40020458 	.word	0x40020458
 80073d4:	40020470 	.word	0x40020470
 80073d8:	40020488 	.word	0x40020488
 80073dc:	400204a0 	.word	0x400204a0
 80073e0:	400204b8 	.word	0x400204b8
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	bf0c      	ite	eq
 80073f0:	2301      	moveq	r3, #1
 80073f2:	2300      	movne	r3, #0
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d001      	beq.n	80073fe <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 80073fa:	2301      	movs	r3, #1
 80073fc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f7fd f82a 	bl	8004458 <HAL_DMA_GetError>
 8007404:	4603      	mov	r3, r0
 8007406:	2b02      	cmp	r3, #2
 8007408:	d00e      	beq.n	8007428 <I2C_DMAError+0x26c>
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d00b      	beq.n	8007428 <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	685a      	ldr	r2, [r3, #4]
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800741e:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007420:	2110      	movs	r1, #16
 8007422:	68b8      	ldr	r0, [r7, #8]
 8007424:	f7ff fd44 	bl	8006eb0 <I2C_ITError>
  }
}
 8007428:	bf00      	nop
 800742a:	3710      	adds	r7, #16
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800743c:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007442:	2b00      	cmp	r3, #0
 8007444:	d003      	beq.n	800744e <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800744a:	2200      	movs	r2, #0
 800744c:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007452:	2b00      	cmp	r3, #0
 8007454:	d003      	beq.n	800745e <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800745a:	2200      	movs	r2, #0
 800745c:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800745e:	68f8      	ldr	r0, [r7, #12]
 8007460:	f7ff fe16 	bl	8007090 <I2C_TreatErrorCallback>
}
 8007464:	bf00      	nop
 8007466:	3710      	adds	r7, #16
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	603b      	str	r3, [r7, #0]
 8007478:	4613      	mov	r3, r2
 800747a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800747c:	e03b      	b.n	80074f6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800747e:	69ba      	ldr	r2, [r7, #24]
 8007480:	6839      	ldr	r1, [r7, #0]
 8007482:	68f8      	ldr	r0, [r7, #12]
 8007484:	f000 f84c 	bl	8007520 <I2C_IsErrorOccurred>
 8007488:	4603      	mov	r3, r0
 800748a:	2b00      	cmp	r3, #0
 800748c:	d001      	beq.n	8007492 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	e041      	b.n	8007516 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007498:	d02d      	beq.n	80074f6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800749a:	f7fa fc85 	bl	8001da8 <HAL_GetTick>
 800749e:	4602      	mov	r2, r0
 80074a0:	69bb      	ldr	r3, [r7, #24]
 80074a2:	1ad3      	subs	r3, r2, r3
 80074a4:	683a      	ldr	r2, [r7, #0]
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d302      	bcc.n	80074b0 <I2C_WaitOnFlagUntilTimeout+0x44>
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d122      	bne.n	80074f6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	699a      	ldr	r2, [r3, #24]
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	4013      	ands	r3, r2
 80074ba:	68ba      	ldr	r2, [r7, #8]
 80074bc:	429a      	cmp	r2, r3
 80074be:	bf0c      	ite	eq
 80074c0:	2301      	moveq	r3, #1
 80074c2:	2300      	movne	r3, #0
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	461a      	mov	r2, r3
 80074c8:	79fb      	ldrb	r3, [r7, #7]
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d113      	bne.n	80074f6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074d2:	f043 0220 	orr.w	r2, r3, #32
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2220      	movs	r2, #32
 80074de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2200      	movs	r2, #0
 80074e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	e00f      	b.n	8007516 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	699a      	ldr	r2, [r3, #24]
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	4013      	ands	r3, r2
 8007500:	68ba      	ldr	r2, [r7, #8]
 8007502:	429a      	cmp	r2, r3
 8007504:	bf0c      	ite	eq
 8007506:	2301      	moveq	r3, #1
 8007508:	2300      	movne	r3, #0
 800750a:	b2db      	uxtb	r3, r3
 800750c:	461a      	mov	r2, r3
 800750e:	79fb      	ldrb	r3, [r7, #7]
 8007510:	429a      	cmp	r2, r3
 8007512:	d0b4      	beq.n	800747e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3710      	adds	r7, #16
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
	...

08007520 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b08a      	sub	sp, #40	@ 0x28
 8007524:	af00      	add	r7, sp, #0
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800752c:	2300      	movs	r3, #0
 800752e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	699b      	ldr	r3, [r3, #24]
 8007538:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800753a:	2300      	movs	r3, #0
 800753c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007542:	69bb      	ldr	r3, [r7, #24]
 8007544:	f003 0310 	and.w	r3, r3, #16
 8007548:	2b00      	cmp	r3, #0
 800754a:	d068      	beq.n	800761e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	2210      	movs	r2, #16
 8007552:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007554:	e049      	b.n	80075ea <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800755c:	d045      	beq.n	80075ea <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800755e:	f7fa fc23 	bl	8001da8 <HAL_GetTick>
 8007562:	4602      	mov	r2, r0
 8007564:	69fb      	ldr	r3, [r7, #28]
 8007566:	1ad3      	subs	r3, r2, r3
 8007568:	68ba      	ldr	r2, [r7, #8]
 800756a:	429a      	cmp	r2, r3
 800756c:	d302      	bcc.n	8007574 <I2C_IsErrorOccurred+0x54>
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d13a      	bne.n	80075ea <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800757e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007586:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	699b      	ldr	r3, [r3, #24]
 800758e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007592:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007596:	d121      	bne.n	80075dc <I2C_IsErrorOccurred+0xbc>
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800759e:	d01d      	beq.n	80075dc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80075a0:	7cfb      	ldrb	r3, [r7, #19]
 80075a2:	2b20      	cmp	r3, #32
 80075a4:	d01a      	beq.n	80075dc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	685a      	ldr	r2, [r3, #4]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80075b4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80075b6:	f7fa fbf7 	bl	8001da8 <HAL_GetTick>
 80075ba:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80075bc:	e00e      	b.n	80075dc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80075be:	f7fa fbf3 	bl	8001da8 <HAL_GetTick>
 80075c2:	4602      	mov	r2, r0
 80075c4:	69fb      	ldr	r3, [r7, #28]
 80075c6:	1ad3      	subs	r3, r2, r3
 80075c8:	2b19      	cmp	r3, #25
 80075ca:	d907      	bls.n	80075dc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80075cc:	6a3b      	ldr	r3, [r7, #32]
 80075ce:	f043 0320 	orr.w	r3, r3, #32
 80075d2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80075da:	e006      	b.n	80075ea <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	699b      	ldr	r3, [r3, #24]
 80075e2:	f003 0320 	and.w	r3, r3, #32
 80075e6:	2b20      	cmp	r3, #32
 80075e8:	d1e9      	bne.n	80075be <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	699b      	ldr	r3, [r3, #24]
 80075f0:	f003 0320 	and.w	r3, r3, #32
 80075f4:	2b20      	cmp	r3, #32
 80075f6:	d003      	beq.n	8007600 <I2C_IsErrorOccurred+0xe0>
 80075f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d0aa      	beq.n	8007556 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007600:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007604:	2b00      	cmp	r3, #0
 8007606:	d103      	bne.n	8007610 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2220      	movs	r2, #32
 800760e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007610:	6a3b      	ldr	r3, [r7, #32]
 8007612:	f043 0304 	orr.w	r3, r3, #4
 8007616:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	699b      	ldr	r3, [r3, #24]
 8007624:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007626:	69bb      	ldr	r3, [r7, #24]
 8007628:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800762c:	2b00      	cmp	r3, #0
 800762e:	d00b      	beq.n	8007648 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007630:	6a3b      	ldr	r3, [r7, #32]
 8007632:	f043 0301 	orr.w	r3, r3, #1
 8007636:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007640:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007648:	69bb      	ldr	r3, [r7, #24]
 800764a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800764e:	2b00      	cmp	r3, #0
 8007650:	d00b      	beq.n	800766a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007652:	6a3b      	ldr	r3, [r7, #32]
 8007654:	f043 0308 	orr.w	r3, r3, #8
 8007658:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007662:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007664:	2301      	movs	r3, #1
 8007666:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800766a:	69bb      	ldr	r3, [r7, #24]
 800766c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007670:	2b00      	cmp	r3, #0
 8007672:	d00b      	beq.n	800768c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007674:	6a3b      	ldr	r3, [r7, #32]
 8007676:	f043 0302 	orr.w	r3, r3, #2
 800767a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007684:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007686:	2301      	movs	r3, #1
 8007688:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800768c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007690:	2b00      	cmp	r3, #0
 8007692:	d01c      	beq.n	80076ce <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007694:	68f8      	ldr	r0, [r7, #12]
 8007696:	f7ff fd22 	bl	80070de <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	6859      	ldr	r1, [r3, #4]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	4b0d      	ldr	r3, [pc, #52]	@ (80076dc <I2C_IsErrorOccurred+0x1bc>)
 80076a6:	400b      	ands	r3, r1
 80076a8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80076ae:	6a3b      	ldr	r3, [r7, #32]
 80076b0:	431a      	orrs	r2, r3
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2220      	movs	r2, #32
 80076ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2200      	movs	r2, #0
 80076c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2200      	movs	r2, #0
 80076ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80076ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3728      	adds	r7, #40	@ 0x28
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop
 80076dc:	fe00e800 	.word	0xfe00e800

080076e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b087      	sub	sp, #28
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	607b      	str	r3, [r7, #4]
 80076ea:	460b      	mov	r3, r1
 80076ec:	817b      	strh	r3, [r7, #10]
 80076ee:	4613      	mov	r3, r2
 80076f0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80076f2:	897b      	ldrh	r3, [r7, #10]
 80076f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80076f8:	7a7b      	ldrb	r3, [r7, #9]
 80076fa:	041b      	lsls	r3, r3, #16
 80076fc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007700:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007706:	6a3b      	ldr	r3, [r7, #32]
 8007708:	4313      	orrs	r3, r2
 800770a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800770e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	685a      	ldr	r2, [r3, #4]
 8007716:	6a3b      	ldr	r3, [r7, #32]
 8007718:	0d5b      	lsrs	r3, r3, #21
 800771a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800771e:	4b08      	ldr	r3, [pc, #32]	@ (8007740 <I2C_TransferConfig+0x60>)
 8007720:	430b      	orrs	r3, r1
 8007722:	43db      	mvns	r3, r3
 8007724:	ea02 0103 	and.w	r1, r2, r3
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	697a      	ldr	r2, [r7, #20]
 800772e:	430a      	orrs	r2, r1
 8007730:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007732:	bf00      	nop
 8007734:	371c      	adds	r7, #28
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr
 800773e:	bf00      	nop
 8007740:	03ff63ff 	.word	0x03ff63ff

08007744 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007744:	b480      	push	{r7}
 8007746:	b085      	sub	sp, #20
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	460b      	mov	r3, r1
 800774e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007750:	2300      	movs	r3, #0
 8007752:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007758:	4a39      	ldr	r2, [pc, #228]	@ (8007840 <I2C_Enable_IRQ+0xfc>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d032      	beq.n	80077c4 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8007762:	4a38      	ldr	r2, [pc, #224]	@ (8007844 <I2C_Enable_IRQ+0x100>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d02d      	beq.n	80077c4 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800776c:	4a36      	ldr	r2, [pc, #216]	@ (8007848 <I2C_Enable_IRQ+0x104>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d028      	beq.n	80077c4 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007772:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007776:	2b00      	cmp	r3, #0
 8007778:	da03      	bge.n	8007782 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007780:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007782:	887b      	ldrh	r3, [r7, #2]
 8007784:	f003 0301 	and.w	r3, r3, #1
 8007788:	2b00      	cmp	r3, #0
 800778a:	d003      	beq.n	8007794 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8007792:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007794:	887b      	ldrh	r3, [r7, #2]
 8007796:	f003 0302 	and.w	r3, r3, #2
 800779a:	2b00      	cmp	r3, #0
 800779c:	d003      	beq.n	80077a6 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80077a4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80077a6:	887b      	ldrh	r3, [r7, #2]
 80077a8:	2b10      	cmp	r3, #16
 80077aa:	d103      	bne.n	80077b4 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80077b2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80077b4:	887b      	ldrh	r3, [r7, #2]
 80077b6:	2b20      	cmp	r3, #32
 80077b8:	d133      	bne.n	8007822 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f043 0320 	orr.w	r3, r3, #32
 80077c0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80077c2:	e02e      	b.n	8007822 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80077c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	da03      	bge.n	80077d4 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80077d2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80077d4:	887b      	ldrh	r3, [r7, #2]
 80077d6:	f003 0301 	and.w	r3, r3, #1
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d003      	beq.n	80077e6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80077e4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80077e6:	887b      	ldrh	r3, [r7, #2]
 80077e8:	f003 0302 	and.w	r3, r3, #2
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d003      	beq.n	80077f8 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80077f6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80077f8:	887b      	ldrh	r3, [r7, #2]
 80077fa:	2b10      	cmp	r3, #16
 80077fc:	d103      	bne.n	8007806 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007804:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007806:	887b      	ldrh	r3, [r7, #2]
 8007808:	2b20      	cmp	r3, #32
 800780a:	d103      	bne.n	8007814 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007812:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007814:	887b      	ldrh	r3, [r7, #2]
 8007816:	2b40      	cmp	r3, #64	@ 0x40
 8007818:	d103      	bne.n	8007822 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007820:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	6819      	ldr	r1, [r3, #0]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	68fa      	ldr	r2, [r7, #12]
 800782e:	430a      	orrs	r2, r1
 8007830:	601a      	str	r2, [r3, #0]
}
 8007832:	bf00      	nop
 8007834:	3714      	adds	r7, #20
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr
 800783e:	bf00      	nop
 8007840:	08005dbf 	.word	0x08005dbf
 8007844:	080061e1 	.word	0x080061e1
 8007848:	08005f95 	.word	0x08005f95

0800784c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800784c:	b480      	push	{r7}
 800784e:	b085      	sub	sp, #20
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	460b      	mov	r3, r1
 8007856:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007858:	2300      	movs	r3, #0
 800785a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800785c:	887b      	ldrh	r3, [r7, #2]
 800785e:	f003 0301 	and.w	r3, r3, #1
 8007862:	2b00      	cmp	r3, #0
 8007864:	d00f      	beq.n	8007886 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800786c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007874:	b2db      	uxtb	r3, r3
 8007876:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800787a:	2b28      	cmp	r3, #40	@ 0x28
 800787c:	d003      	beq.n	8007886 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007884:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007886:	887b      	ldrh	r3, [r7, #2]
 8007888:	f003 0302 	and.w	r3, r3, #2
 800788c:	2b00      	cmp	r3, #0
 800788e:	d00f      	beq.n	80078b0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8007896:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80078a4:	2b28      	cmp	r3, #40	@ 0x28
 80078a6:	d003      	beq.n	80078b0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80078ae:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80078b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	da03      	bge.n	80078c0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80078be:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80078c0:	887b      	ldrh	r3, [r7, #2]
 80078c2:	2b10      	cmp	r3, #16
 80078c4:	d103      	bne.n	80078ce <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80078cc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80078ce:	887b      	ldrh	r3, [r7, #2]
 80078d0:	2b20      	cmp	r3, #32
 80078d2:	d103      	bne.n	80078dc <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f043 0320 	orr.w	r3, r3, #32
 80078da:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80078dc:	887b      	ldrh	r3, [r7, #2]
 80078de:	2b40      	cmp	r3, #64	@ 0x40
 80078e0:	d103      	bne.n	80078ea <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078e8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	6819      	ldr	r1, [r3, #0]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	43da      	mvns	r2, r3
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	400a      	ands	r2, r1
 80078fa:	601a      	str	r2, [r3, #0]
}
 80078fc:	bf00      	nop
 80078fe:	3714      	adds	r7, #20
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007918:	b2db      	uxtb	r3, r3
 800791a:	2b20      	cmp	r3, #32
 800791c:	d138      	bne.n	8007990 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007924:	2b01      	cmp	r3, #1
 8007926:	d101      	bne.n	800792c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007928:	2302      	movs	r3, #2
 800792a:	e032      	b.n	8007992 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2201      	movs	r2, #1
 8007930:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2224      	movs	r2, #36	@ 0x24
 8007938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f022 0201 	bic.w	r2, r2, #1
 800794a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	681a      	ldr	r2, [r3, #0]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800795a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	6819      	ldr	r1, [r3, #0]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	683a      	ldr	r2, [r7, #0]
 8007968:	430a      	orrs	r2, r1
 800796a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f042 0201 	orr.w	r2, r2, #1
 800797a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2220      	movs	r2, #32
 8007980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800798c:	2300      	movs	r3, #0
 800798e:	e000      	b.n	8007992 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007990:	2302      	movs	r3, #2
  }
}
 8007992:	4618      	mov	r0, r3
 8007994:	370c      	adds	r7, #12
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr

0800799e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800799e:	b480      	push	{r7}
 80079a0:	b085      	sub	sp, #20
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
 80079a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	2b20      	cmp	r3, #32
 80079b2:	d139      	bne.n	8007a28 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d101      	bne.n	80079c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80079be:	2302      	movs	r3, #2
 80079c0:	e033      	b.n	8007a2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2201      	movs	r2, #1
 80079c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2224      	movs	r2, #36	@ 0x24
 80079ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f022 0201 	bic.w	r2, r2, #1
 80079e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80079f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	021b      	lsls	r3, r3, #8
 80079f6:	68fa      	ldr	r2, [r7, #12]
 80079f8:	4313      	orrs	r3, r2
 80079fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	68fa      	ldr	r2, [r7, #12]
 8007a02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f042 0201 	orr.w	r2, r2, #1
 8007a12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2220      	movs	r2, #32
 8007a18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007a24:	2300      	movs	r3, #0
 8007a26:	e000      	b.n	8007a2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007a28:	2302      	movs	r3, #2
  }
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3714      	adds	r7, #20
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr
	...

08007a38 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007a40:	4b19      	ldr	r3, [pc, #100]	@ (8007aa8 <HAL_PWREx_ConfigSupply+0x70>)
 8007a42:	68db      	ldr	r3, [r3, #12]
 8007a44:	f003 0304 	and.w	r3, r3, #4
 8007a48:	2b04      	cmp	r3, #4
 8007a4a:	d00a      	beq.n	8007a62 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007a4c:	4b16      	ldr	r3, [pc, #88]	@ (8007aa8 <HAL_PWREx_ConfigSupply+0x70>)
 8007a4e:	68db      	ldr	r3, [r3, #12]
 8007a50:	f003 0307 	and.w	r3, r3, #7
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d001      	beq.n	8007a5e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e01f      	b.n	8007a9e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	e01d      	b.n	8007a9e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007a62:	4b11      	ldr	r3, [pc, #68]	@ (8007aa8 <HAL_PWREx_ConfigSupply+0x70>)
 8007a64:	68db      	ldr	r3, [r3, #12]
 8007a66:	f023 0207 	bic.w	r2, r3, #7
 8007a6a:	490f      	ldr	r1, [pc, #60]	@ (8007aa8 <HAL_PWREx_ConfigSupply+0x70>)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007a72:	f7fa f999 	bl	8001da8 <HAL_GetTick>
 8007a76:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007a78:	e009      	b.n	8007a8e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007a7a:	f7fa f995 	bl	8001da8 <HAL_GetTick>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	1ad3      	subs	r3, r2, r3
 8007a84:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007a88:	d901      	bls.n	8007a8e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e007      	b.n	8007a9e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007a8e:	4b06      	ldr	r3, [pc, #24]	@ (8007aa8 <HAL_PWREx_ConfigSupply+0x70>)
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007a96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a9a:	d1ee      	bne.n	8007a7a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007a9c:	2300      	movs	r3, #0
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3710      	adds	r7, #16
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	58024800 	.word	0x58024800

08007aac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b08c      	sub	sp, #48	@ 0x30
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d102      	bne.n	8007ac0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	f000 bc1f 	b.w	80082fe <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f003 0301 	and.w	r3, r3, #1
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	f000 80b3 	beq.w	8007c34 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ace:	4b95      	ldr	r3, [pc, #596]	@ (8007d24 <HAL_RCC_OscConfig+0x278>)
 8007ad0:	691b      	ldr	r3, [r3, #16]
 8007ad2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007ad8:	4b92      	ldr	r3, [pc, #584]	@ (8007d24 <HAL_RCC_OscConfig+0x278>)
 8007ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007adc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ae0:	2b10      	cmp	r3, #16
 8007ae2:	d007      	beq.n	8007af4 <HAL_RCC_OscConfig+0x48>
 8007ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ae6:	2b18      	cmp	r3, #24
 8007ae8:	d112      	bne.n	8007b10 <HAL_RCC_OscConfig+0x64>
 8007aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aec:	f003 0303 	and.w	r3, r3, #3
 8007af0:	2b02      	cmp	r3, #2
 8007af2:	d10d      	bne.n	8007b10 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007af4:	4b8b      	ldr	r3, [pc, #556]	@ (8007d24 <HAL_RCC_OscConfig+0x278>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	f000 8098 	beq.w	8007c32 <HAL_RCC_OscConfig+0x186>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	f040 8093 	bne.w	8007c32 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	e3f6      	b.n	80082fe <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b18:	d106      	bne.n	8007b28 <HAL_RCC_OscConfig+0x7c>
 8007b1a:	4b82      	ldr	r3, [pc, #520]	@ (8007d24 <HAL_RCC_OscConfig+0x278>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a81      	ldr	r2, [pc, #516]	@ (8007d24 <HAL_RCC_OscConfig+0x278>)
 8007b20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b24:	6013      	str	r3, [r2, #0]
 8007b26:	e058      	b.n	8007bda <HAL_RCC_OscConfig+0x12e>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d112      	bne.n	8007b56 <HAL_RCC_OscConfig+0xaa>
 8007b30:	4b7c      	ldr	r3, [pc, #496]	@ (8007d24 <HAL_RCC_OscConfig+0x278>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a7b      	ldr	r2, [pc, #492]	@ (8007d24 <HAL_RCC_OscConfig+0x278>)
 8007b36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b3a:	6013      	str	r3, [r2, #0]
 8007b3c:	4b79      	ldr	r3, [pc, #484]	@ (8007d24 <HAL_RCC_OscConfig+0x278>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a78      	ldr	r2, [pc, #480]	@ (8007d24 <HAL_RCC_OscConfig+0x278>)
 8007b42:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007b46:	6013      	str	r3, [r2, #0]
 8007b48:	4b76      	ldr	r3, [pc, #472]	@ (8007d24 <HAL_RCC_OscConfig+0x278>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a75      	ldr	r2, [pc, #468]	@ (8007d24 <HAL_RCC_OscConfig+0x278>)
 8007b4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007b52:	6013      	str	r3, [r2, #0]
 8007b54:	e041      	b.n	8007bda <HAL_RCC_OscConfig+0x12e>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007b5e:	d112      	bne.n	8007b86 <HAL_RCC_OscConfig+0xda>
 8007b60:	4b70      	ldr	r3, [pc, #448]	@ (8007d24 <HAL_RCC_OscConfig+0x278>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a6f      	ldr	r2, [pc, #444]	@ (8007d24 <HAL_RCC_OscConfig+0x278>)
 8007b66:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007b6a:	6013      	str	r3, [r2, #0]
 8007b6c:	4b6d      	ldr	r3, [pc, #436]	@ (8007d24 <HAL_RCC_OscConfig+0x278>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a6c      	ldr	r2, [pc, #432]	@ (8007d24 <HAL_RCC_OscConfig+0x278>)
 8007b72:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007b76:	6013      	str	r3, [r2, #0]
 8007b78:	4b6a      	ldr	r3, [pc, #424]	@ (8007d24 <HAL_RCC_OscConfig+0x278>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a69      	ldr	r2, [pc, #420]	@ (8007d24 <HAL_RCC_OscConfig+0x278>)
 8007b7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b82:	6013      	str	r3, [r2, #0]
 8007b84:	e029      	b.n	8007bda <HAL_RCC_OscConfig+0x12e>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8007b8e:	d112      	bne.n	8007bb6 <HAL_RCC_OscConfig+0x10a>
 8007b90:	4b64      	ldr	r3, [pc, #400]	@ (8007d24 <HAL_RCC_OscConfig+0x278>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a63      	ldr	r2, [pc, #396]	@ (8007d24 <HAL_RCC_OscConfig+0x278>)
 8007b96:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007b9a:	6013      	str	r3, [r2, #0]
 8007b9c:	4b61      	ldr	r3, [pc, #388]	@ (8007d24 <HAL_RCC_OscConfig+0x278>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a60      	ldr	r2, [pc, #384]	@ (8007d24 <HAL_RCC_OscConfig+0x278>)
 8007ba2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007ba6:	6013      	str	r3, [r2, #0]
 8007ba8:	4b5e      	ldr	r3, [pc, #376]	@ (8007d24 <HAL_RCC_OscConfig+0x278>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a5d      	ldr	r2, [pc, #372]	@ (8007d24 <HAL_RCC_OscConfig+0x278>)
 8007bae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007bb2:	6013      	str	r3, [r2, #0]
 8007bb4:	e011      	b.n	8007bda <HAL_RCC_OscConfig+0x12e>
 8007bb6:	4b5b      	ldr	r3, [pc, #364]	@ (8007d24 <HAL_RCC_OscConfig+0x278>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a5a      	ldr	r2, [pc, #360]	@ (8007d24 <HAL_RCC_OscConfig+0x278>)
 8007bbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007bc0:	6013      	str	r3, [r2, #0]
 8007bc2:	4b58      	ldr	r3, [pc, #352]	@ (8007d24 <HAL_RCC_OscConfig+0x278>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a57      	ldr	r2, [pc, #348]	@ (8007d24 <HAL_RCC_OscConfig+0x278>)
 8007bc8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007bcc:	6013      	str	r3, [r2, #0]
 8007bce:	4b55      	ldr	r3, [pc, #340]	@ (8007d24 <HAL_RCC_OscConfig+0x278>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a54      	ldr	r2, [pc, #336]	@ (8007d24 <HAL_RCC_OscConfig+0x278>)
 8007bd4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007bd8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d013      	beq.n	8007c0a <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007be2:	f7fa f8e1 	bl	8001da8 <HAL_GetTick>
 8007be6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007be8:	e008      	b.n	8007bfc <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007bea:	f7fa f8dd 	bl	8001da8 <HAL_GetTick>
 8007bee:	4602      	mov	r2, r0
 8007bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf2:	1ad3      	subs	r3, r2, r3
 8007bf4:	2b64      	cmp	r3, #100	@ 0x64
 8007bf6:	d901      	bls.n	8007bfc <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8007bf8:	2303      	movs	r3, #3
 8007bfa:	e380      	b.n	80082fe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007bfc:	4b49      	ldr	r3, [pc, #292]	@ (8007d24 <HAL_RCC_OscConfig+0x278>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d0f0      	beq.n	8007bea <HAL_RCC_OscConfig+0x13e>
 8007c08:	e014      	b.n	8007c34 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c0a:	f7fa f8cd 	bl	8001da8 <HAL_GetTick>
 8007c0e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007c10:	e008      	b.n	8007c24 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c12:	f7fa f8c9 	bl	8001da8 <HAL_GetTick>
 8007c16:	4602      	mov	r2, r0
 8007c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c1a:	1ad3      	subs	r3, r2, r3
 8007c1c:	2b64      	cmp	r3, #100	@ 0x64
 8007c1e:	d901      	bls.n	8007c24 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8007c20:	2303      	movs	r3, #3
 8007c22:	e36c      	b.n	80082fe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007c24:	4b3f      	ldr	r3, [pc, #252]	@ (8007d24 <HAL_RCC_OscConfig+0x278>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d1f0      	bne.n	8007c12 <HAL_RCC_OscConfig+0x166>
 8007c30:	e000      	b.n	8007c34 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c32:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f003 0302 	and.w	r3, r3, #2
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	f000 808c 	beq.w	8007d5a <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c42:	4b38      	ldr	r3, [pc, #224]	@ (8007d24 <HAL_RCC_OscConfig+0x278>)
 8007c44:	691b      	ldr	r3, [r3, #16]
 8007c46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007c4a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007c4c:	4b35      	ldr	r3, [pc, #212]	@ (8007d24 <HAL_RCC_OscConfig+0x278>)
 8007c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c50:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007c52:	6a3b      	ldr	r3, [r7, #32]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d007      	beq.n	8007c68 <HAL_RCC_OscConfig+0x1bc>
 8007c58:	6a3b      	ldr	r3, [r7, #32]
 8007c5a:	2b18      	cmp	r3, #24
 8007c5c:	d137      	bne.n	8007cce <HAL_RCC_OscConfig+0x222>
 8007c5e:	69fb      	ldr	r3, [r7, #28]
 8007c60:	f003 0303 	and.w	r3, r3, #3
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d132      	bne.n	8007cce <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007c68:	4b2e      	ldr	r3, [pc, #184]	@ (8007d24 <HAL_RCC_OscConfig+0x278>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f003 0304 	and.w	r3, r3, #4
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d005      	beq.n	8007c80 <HAL_RCC_OscConfig+0x1d4>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	68db      	ldr	r3, [r3, #12]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d101      	bne.n	8007c80 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	e33e      	b.n	80082fe <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007c80:	4b28      	ldr	r3, [pc, #160]	@ (8007d24 <HAL_RCC_OscConfig+0x278>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f023 0219 	bic.w	r2, r3, #25
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	68db      	ldr	r3, [r3, #12]
 8007c8c:	4925      	ldr	r1, [pc, #148]	@ (8007d24 <HAL_RCC_OscConfig+0x278>)
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c92:	f7fa f889 	bl	8001da8 <HAL_GetTick>
 8007c96:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c98:	e008      	b.n	8007cac <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c9a:	f7fa f885 	bl	8001da8 <HAL_GetTick>
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ca2:	1ad3      	subs	r3, r2, r3
 8007ca4:	2b02      	cmp	r3, #2
 8007ca6:	d901      	bls.n	8007cac <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8007ca8:	2303      	movs	r3, #3
 8007caa:	e328      	b.n	80082fe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007cac:	4b1d      	ldr	r3, [pc, #116]	@ (8007d24 <HAL_RCC_OscConfig+0x278>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f003 0304 	and.w	r3, r3, #4
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d0f0      	beq.n	8007c9a <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007cb8:	4b1a      	ldr	r3, [pc, #104]	@ (8007d24 <HAL_RCC_OscConfig+0x278>)
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	691b      	ldr	r3, [r3, #16]
 8007cc4:	061b      	lsls	r3, r3, #24
 8007cc6:	4917      	ldr	r1, [pc, #92]	@ (8007d24 <HAL_RCC_OscConfig+0x278>)
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ccc:	e045      	b.n	8007d5a <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	68db      	ldr	r3, [r3, #12]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d028      	beq.n	8007d28 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007cd6:	4b13      	ldr	r3, [pc, #76]	@ (8007d24 <HAL_RCC_OscConfig+0x278>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f023 0219 	bic.w	r2, r3, #25
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	68db      	ldr	r3, [r3, #12]
 8007ce2:	4910      	ldr	r1, [pc, #64]	@ (8007d24 <HAL_RCC_OscConfig+0x278>)
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ce8:	f7fa f85e 	bl	8001da8 <HAL_GetTick>
 8007cec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007cee:	e008      	b.n	8007d02 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007cf0:	f7fa f85a 	bl	8001da8 <HAL_GetTick>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cf8:	1ad3      	subs	r3, r2, r3
 8007cfa:	2b02      	cmp	r3, #2
 8007cfc:	d901      	bls.n	8007d02 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8007cfe:	2303      	movs	r3, #3
 8007d00:	e2fd      	b.n	80082fe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007d02:	4b08      	ldr	r3, [pc, #32]	@ (8007d24 <HAL_RCC_OscConfig+0x278>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f003 0304 	and.w	r3, r3, #4
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d0f0      	beq.n	8007cf0 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d0e:	4b05      	ldr	r3, [pc, #20]	@ (8007d24 <HAL_RCC_OscConfig+0x278>)
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	691b      	ldr	r3, [r3, #16]
 8007d1a:	061b      	lsls	r3, r3, #24
 8007d1c:	4901      	ldr	r1, [pc, #4]	@ (8007d24 <HAL_RCC_OscConfig+0x278>)
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	604b      	str	r3, [r1, #4]
 8007d22:	e01a      	b.n	8007d5a <HAL_RCC_OscConfig+0x2ae>
 8007d24:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007d28:	4b97      	ldr	r3, [pc, #604]	@ (8007f88 <HAL_RCC_OscConfig+0x4dc>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a96      	ldr	r2, [pc, #600]	@ (8007f88 <HAL_RCC_OscConfig+0x4dc>)
 8007d2e:	f023 0301 	bic.w	r3, r3, #1
 8007d32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d34:	f7fa f838 	bl	8001da8 <HAL_GetTick>
 8007d38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007d3a:	e008      	b.n	8007d4e <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d3c:	f7fa f834 	bl	8001da8 <HAL_GetTick>
 8007d40:	4602      	mov	r2, r0
 8007d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d44:	1ad3      	subs	r3, r2, r3
 8007d46:	2b02      	cmp	r3, #2
 8007d48:	d901      	bls.n	8007d4e <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8007d4a:	2303      	movs	r3, #3
 8007d4c:	e2d7      	b.n	80082fe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007d4e:	4b8e      	ldr	r3, [pc, #568]	@ (8007f88 <HAL_RCC_OscConfig+0x4dc>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f003 0304 	and.w	r3, r3, #4
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d1f0      	bne.n	8007d3c <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f003 0310 	and.w	r3, r3, #16
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d06a      	beq.n	8007e3c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d66:	4b88      	ldr	r3, [pc, #544]	@ (8007f88 <HAL_RCC_OscConfig+0x4dc>)
 8007d68:	691b      	ldr	r3, [r3, #16]
 8007d6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007d6e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007d70:	4b85      	ldr	r3, [pc, #532]	@ (8007f88 <HAL_RCC_OscConfig+0x4dc>)
 8007d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d74:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007d76:	69bb      	ldr	r3, [r7, #24]
 8007d78:	2b08      	cmp	r3, #8
 8007d7a:	d007      	beq.n	8007d8c <HAL_RCC_OscConfig+0x2e0>
 8007d7c:	69bb      	ldr	r3, [r7, #24]
 8007d7e:	2b18      	cmp	r3, #24
 8007d80:	d11b      	bne.n	8007dba <HAL_RCC_OscConfig+0x30e>
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	f003 0303 	and.w	r3, r3, #3
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d116      	bne.n	8007dba <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007d8c:	4b7e      	ldr	r3, [pc, #504]	@ (8007f88 <HAL_RCC_OscConfig+0x4dc>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d005      	beq.n	8007da4 <HAL_RCC_OscConfig+0x2f8>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	69db      	ldr	r3, [r3, #28]
 8007d9c:	2b80      	cmp	r3, #128	@ 0x80
 8007d9e:	d001      	beq.n	8007da4 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8007da0:	2301      	movs	r3, #1
 8007da2:	e2ac      	b.n	80082fe <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007da4:	4b78      	ldr	r3, [pc, #480]	@ (8007f88 <HAL_RCC_OscConfig+0x4dc>)
 8007da6:	68db      	ldr	r3, [r3, #12]
 8007da8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6a1b      	ldr	r3, [r3, #32]
 8007db0:	061b      	lsls	r3, r3, #24
 8007db2:	4975      	ldr	r1, [pc, #468]	@ (8007f88 <HAL_RCC_OscConfig+0x4dc>)
 8007db4:	4313      	orrs	r3, r2
 8007db6:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007db8:	e040      	b.n	8007e3c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	69db      	ldr	r3, [r3, #28]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d023      	beq.n	8007e0a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007dc2:	4b71      	ldr	r3, [pc, #452]	@ (8007f88 <HAL_RCC_OscConfig+0x4dc>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a70      	ldr	r2, [pc, #448]	@ (8007f88 <HAL_RCC_OscConfig+0x4dc>)
 8007dc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dce:	f7f9 ffeb 	bl	8001da8 <HAL_GetTick>
 8007dd2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007dd4:	e008      	b.n	8007de8 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007dd6:	f7f9 ffe7 	bl	8001da8 <HAL_GetTick>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dde:	1ad3      	subs	r3, r2, r3
 8007de0:	2b02      	cmp	r3, #2
 8007de2:	d901      	bls.n	8007de8 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8007de4:	2303      	movs	r3, #3
 8007de6:	e28a      	b.n	80082fe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007de8:	4b67      	ldr	r3, [pc, #412]	@ (8007f88 <HAL_RCC_OscConfig+0x4dc>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d0f0      	beq.n	8007dd6 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007df4:	4b64      	ldr	r3, [pc, #400]	@ (8007f88 <HAL_RCC_OscConfig+0x4dc>)
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6a1b      	ldr	r3, [r3, #32]
 8007e00:	061b      	lsls	r3, r3, #24
 8007e02:	4961      	ldr	r1, [pc, #388]	@ (8007f88 <HAL_RCC_OscConfig+0x4dc>)
 8007e04:	4313      	orrs	r3, r2
 8007e06:	60cb      	str	r3, [r1, #12]
 8007e08:	e018      	b.n	8007e3c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007e0a:	4b5f      	ldr	r3, [pc, #380]	@ (8007f88 <HAL_RCC_OscConfig+0x4dc>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a5e      	ldr	r2, [pc, #376]	@ (8007f88 <HAL_RCC_OscConfig+0x4dc>)
 8007e10:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e16:	f7f9 ffc7 	bl	8001da8 <HAL_GetTick>
 8007e1a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007e1c:	e008      	b.n	8007e30 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007e1e:	f7f9 ffc3 	bl	8001da8 <HAL_GetTick>
 8007e22:	4602      	mov	r2, r0
 8007e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e26:	1ad3      	subs	r3, r2, r3
 8007e28:	2b02      	cmp	r3, #2
 8007e2a:	d901      	bls.n	8007e30 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8007e2c:	2303      	movs	r3, #3
 8007e2e:	e266      	b.n	80082fe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007e30:	4b55      	ldr	r3, [pc, #340]	@ (8007f88 <HAL_RCC_OscConfig+0x4dc>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d1f0      	bne.n	8007e1e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f003 0308 	and.w	r3, r3, #8
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d036      	beq.n	8007eb6 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	695b      	ldr	r3, [r3, #20]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d019      	beq.n	8007e84 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e50:	4b4d      	ldr	r3, [pc, #308]	@ (8007f88 <HAL_RCC_OscConfig+0x4dc>)
 8007e52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e54:	4a4c      	ldr	r2, [pc, #304]	@ (8007f88 <HAL_RCC_OscConfig+0x4dc>)
 8007e56:	f043 0301 	orr.w	r3, r3, #1
 8007e5a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e5c:	f7f9 ffa4 	bl	8001da8 <HAL_GetTick>
 8007e60:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007e62:	e008      	b.n	8007e76 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e64:	f7f9 ffa0 	bl	8001da8 <HAL_GetTick>
 8007e68:	4602      	mov	r2, r0
 8007e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e6c:	1ad3      	subs	r3, r2, r3
 8007e6e:	2b02      	cmp	r3, #2
 8007e70:	d901      	bls.n	8007e76 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8007e72:	2303      	movs	r3, #3
 8007e74:	e243      	b.n	80082fe <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007e76:	4b44      	ldr	r3, [pc, #272]	@ (8007f88 <HAL_RCC_OscConfig+0x4dc>)
 8007e78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e7a:	f003 0302 	and.w	r3, r3, #2
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d0f0      	beq.n	8007e64 <HAL_RCC_OscConfig+0x3b8>
 8007e82:	e018      	b.n	8007eb6 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007e84:	4b40      	ldr	r3, [pc, #256]	@ (8007f88 <HAL_RCC_OscConfig+0x4dc>)
 8007e86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e88:	4a3f      	ldr	r2, [pc, #252]	@ (8007f88 <HAL_RCC_OscConfig+0x4dc>)
 8007e8a:	f023 0301 	bic.w	r3, r3, #1
 8007e8e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e90:	f7f9 ff8a 	bl	8001da8 <HAL_GetTick>
 8007e94:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007e96:	e008      	b.n	8007eaa <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e98:	f7f9 ff86 	bl	8001da8 <HAL_GetTick>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ea0:	1ad3      	subs	r3, r2, r3
 8007ea2:	2b02      	cmp	r3, #2
 8007ea4:	d901      	bls.n	8007eaa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007ea6:	2303      	movs	r3, #3
 8007ea8:	e229      	b.n	80082fe <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007eaa:	4b37      	ldr	r3, [pc, #220]	@ (8007f88 <HAL_RCC_OscConfig+0x4dc>)
 8007eac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007eae:	f003 0302 	and.w	r3, r3, #2
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d1f0      	bne.n	8007e98 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f003 0320 	and.w	r3, r3, #32
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d036      	beq.n	8007f30 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	699b      	ldr	r3, [r3, #24]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d019      	beq.n	8007efe <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007eca:	4b2f      	ldr	r3, [pc, #188]	@ (8007f88 <HAL_RCC_OscConfig+0x4dc>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a2e      	ldr	r2, [pc, #184]	@ (8007f88 <HAL_RCC_OscConfig+0x4dc>)
 8007ed0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007ed4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007ed6:	f7f9 ff67 	bl	8001da8 <HAL_GetTick>
 8007eda:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007edc:	e008      	b.n	8007ef0 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007ede:	f7f9 ff63 	bl	8001da8 <HAL_GetTick>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee6:	1ad3      	subs	r3, r2, r3
 8007ee8:	2b02      	cmp	r3, #2
 8007eea:	d901      	bls.n	8007ef0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8007eec:	2303      	movs	r3, #3
 8007eee:	e206      	b.n	80082fe <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007ef0:	4b25      	ldr	r3, [pc, #148]	@ (8007f88 <HAL_RCC_OscConfig+0x4dc>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d0f0      	beq.n	8007ede <HAL_RCC_OscConfig+0x432>
 8007efc:	e018      	b.n	8007f30 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007efe:	4b22      	ldr	r3, [pc, #136]	@ (8007f88 <HAL_RCC_OscConfig+0x4dc>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a21      	ldr	r2, [pc, #132]	@ (8007f88 <HAL_RCC_OscConfig+0x4dc>)
 8007f04:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f08:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007f0a:	f7f9 ff4d 	bl	8001da8 <HAL_GetTick>
 8007f0e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007f10:	e008      	b.n	8007f24 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007f12:	f7f9 ff49 	bl	8001da8 <HAL_GetTick>
 8007f16:	4602      	mov	r2, r0
 8007f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f1a:	1ad3      	subs	r3, r2, r3
 8007f1c:	2b02      	cmp	r3, #2
 8007f1e:	d901      	bls.n	8007f24 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8007f20:	2303      	movs	r3, #3
 8007f22:	e1ec      	b.n	80082fe <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007f24:	4b18      	ldr	r3, [pc, #96]	@ (8007f88 <HAL_RCC_OscConfig+0x4dc>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d1f0      	bne.n	8007f12 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f003 0304 	and.w	r3, r3, #4
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	f000 80af 	beq.w	800809c <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007f3e:	4b13      	ldr	r3, [pc, #76]	@ (8007f8c <HAL_RCC_OscConfig+0x4e0>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a12      	ldr	r2, [pc, #72]	@ (8007f8c <HAL_RCC_OscConfig+0x4e0>)
 8007f44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f48:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007f4a:	f7f9 ff2d 	bl	8001da8 <HAL_GetTick>
 8007f4e:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007f50:	e008      	b.n	8007f64 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f52:	f7f9 ff29 	bl	8001da8 <HAL_GetTick>
 8007f56:	4602      	mov	r2, r0
 8007f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f5a:	1ad3      	subs	r3, r2, r3
 8007f5c:	2b64      	cmp	r3, #100	@ 0x64
 8007f5e:	d901      	bls.n	8007f64 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8007f60:	2303      	movs	r3, #3
 8007f62:	e1cc      	b.n	80082fe <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007f64:	4b09      	ldr	r3, [pc, #36]	@ (8007f8c <HAL_RCC_OscConfig+0x4e0>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d0f0      	beq.n	8007f52 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	689b      	ldr	r3, [r3, #8]
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d10b      	bne.n	8007f90 <HAL_RCC_OscConfig+0x4e4>
 8007f78:	4b03      	ldr	r3, [pc, #12]	@ (8007f88 <HAL_RCC_OscConfig+0x4dc>)
 8007f7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f7c:	4a02      	ldr	r2, [pc, #8]	@ (8007f88 <HAL_RCC_OscConfig+0x4dc>)
 8007f7e:	f043 0301 	orr.w	r3, r3, #1
 8007f82:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f84:	e05b      	b.n	800803e <HAL_RCC_OscConfig+0x592>
 8007f86:	bf00      	nop
 8007f88:	58024400 	.word	0x58024400
 8007f8c:	58024800 	.word	0x58024800
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d112      	bne.n	8007fbe <HAL_RCC_OscConfig+0x512>
 8007f98:	4b9d      	ldr	r3, [pc, #628]	@ (8008210 <HAL_RCC_OscConfig+0x764>)
 8007f9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f9c:	4a9c      	ldr	r2, [pc, #624]	@ (8008210 <HAL_RCC_OscConfig+0x764>)
 8007f9e:	f023 0301 	bic.w	r3, r3, #1
 8007fa2:	6713      	str	r3, [r2, #112]	@ 0x70
 8007fa4:	4b9a      	ldr	r3, [pc, #616]	@ (8008210 <HAL_RCC_OscConfig+0x764>)
 8007fa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fa8:	4a99      	ldr	r2, [pc, #612]	@ (8008210 <HAL_RCC_OscConfig+0x764>)
 8007faa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007fae:	6713      	str	r3, [r2, #112]	@ 0x70
 8007fb0:	4b97      	ldr	r3, [pc, #604]	@ (8008210 <HAL_RCC_OscConfig+0x764>)
 8007fb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fb4:	4a96      	ldr	r2, [pc, #600]	@ (8008210 <HAL_RCC_OscConfig+0x764>)
 8007fb6:	f023 0304 	bic.w	r3, r3, #4
 8007fba:	6713      	str	r3, [r2, #112]	@ 0x70
 8007fbc:	e03f      	b.n	800803e <HAL_RCC_OscConfig+0x592>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	2b05      	cmp	r3, #5
 8007fc4:	d112      	bne.n	8007fec <HAL_RCC_OscConfig+0x540>
 8007fc6:	4b92      	ldr	r3, [pc, #584]	@ (8008210 <HAL_RCC_OscConfig+0x764>)
 8007fc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fca:	4a91      	ldr	r2, [pc, #580]	@ (8008210 <HAL_RCC_OscConfig+0x764>)
 8007fcc:	f043 0304 	orr.w	r3, r3, #4
 8007fd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8007fd2:	4b8f      	ldr	r3, [pc, #572]	@ (8008210 <HAL_RCC_OscConfig+0x764>)
 8007fd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fd6:	4a8e      	ldr	r2, [pc, #568]	@ (8008210 <HAL_RCC_OscConfig+0x764>)
 8007fd8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007fdc:	6713      	str	r3, [r2, #112]	@ 0x70
 8007fde:	4b8c      	ldr	r3, [pc, #560]	@ (8008210 <HAL_RCC_OscConfig+0x764>)
 8007fe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fe2:	4a8b      	ldr	r2, [pc, #556]	@ (8008210 <HAL_RCC_OscConfig+0x764>)
 8007fe4:	f043 0301 	orr.w	r3, r3, #1
 8007fe8:	6713      	str	r3, [r2, #112]	@ 0x70
 8007fea:	e028      	b.n	800803e <HAL_RCC_OscConfig+0x592>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	2b85      	cmp	r3, #133	@ 0x85
 8007ff2:	d112      	bne.n	800801a <HAL_RCC_OscConfig+0x56e>
 8007ff4:	4b86      	ldr	r3, [pc, #536]	@ (8008210 <HAL_RCC_OscConfig+0x764>)
 8007ff6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ff8:	4a85      	ldr	r2, [pc, #532]	@ (8008210 <HAL_RCC_OscConfig+0x764>)
 8007ffa:	f043 0304 	orr.w	r3, r3, #4
 8007ffe:	6713      	str	r3, [r2, #112]	@ 0x70
 8008000:	4b83      	ldr	r3, [pc, #524]	@ (8008210 <HAL_RCC_OscConfig+0x764>)
 8008002:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008004:	4a82      	ldr	r2, [pc, #520]	@ (8008210 <HAL_RCC_OscConfig+0x764>)
 8008006:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800800a:	6713      	str	r3, [r2, #112]	@ 0x70
 800800c:	4b80      	ldr	r3, [pc, #512]	@ (8008210 <HAL_RCC_OscConfig+0x764>)
 800800e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008010:	4a7f      	ldr	r2, [pc, #508]	@ (8008210 <HAL_RCC_OscConfig+0x764>)
 8008012:	f043 0301 	orr.w	r3, r3, #1
 8008016:	6713      	str	r3, [r2, #112]	@ 0x70
 8008018:	e011      	b.n	800803e <HAL_RCC_OscConfig+0x592>
 800801a:	4b7d      	ldr	r3, [pc, #500]	@ (8008210 <HAL_RCC_OscConfig+0x764>)
 800801c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800801e:	4a7c      	ldr	r2, [pc, #496]	@ (8008210 <HAL_RCC_OscConfig+0x764>)
 8008020:	f023 0301 	bic.w	r3, r3, #1
 8008024:	6713      	str	r3, [r2, #112]	@ 0x70
 8008026:	4b7a      	ldr	r3, [pc, #488]	@ (8008210 <HAL_RCC_OscConfig+0x764>)
 8008028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800802a:	4a79      	ldr	r2, [pc, #484]	@ (8008210 <HAL_RCC_OscConfig+0x764>)
 800802c:	f023 0304 	bic.w	r3, r3, #4
 8008030:	6713      	str	r3, [r2, #112]	@ 0x70
 8008032:	4b77      	ldr	r3, [pc, #476]	@ (8008210 <HAL_RCC_OscConfig+0x764>)
 8008034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008036:	4a76      	ldr	r2, [pc, #472]	@ (8008210 <HAL_RCC_OscConfig+0x764>)
 8008038:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800803c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	689b      	ldr	r3, [r3, #8]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d015      	beq.n	8008072 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008046:	f7f9 feaf 	bl	8001da8 <HAL_GetTick>
 800804a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800804c:	e00a      	b.n	8008064 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800804e:	f7f9 feab 	bl	8001da8 <HAL_GetTick>
 8008052:	4602      	mov	r2, r0
 8008054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008056:	1ad3      	subs	r3, r2, r3
 8008058:	f241 3288 	movw	r2, #5000	@ 0x1388
 800805c:	4293      	cmp	r3, r2
 800805e:	d901      	bls.n	8008064 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8008060:	2303      	movs	r3, #3
 8008062:	e14c      	b.n	80082fe <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008064:	4b6a      	ldr	r3, [pc, #424]	@ (8008210 <HAL_RCC_OscConfig+0x764>)
 8008066:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008068:	f003 0302 	and.w	r3, r3, #2
 800806c:	2b00      	cmp	r3, #0
 800806e:	d0ee      	beq.n	800804e <HAL_RCC_OscConfig+0x5a2>
 8008070:	e014      	b.n	800809c <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008072:	f7f9 fe99 	bl	8001da8 <HAL_GetTick>
 8008076:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008078:	e00a      	b.n	8008090 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800807a:	f7f9 fe95 	bl	8001da8 <HAL_GetTick>
 800807e:	4602      	mov	r2, r0
 8008080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008082:	1ad3      	subs	r3, r2, r3
 8008084:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008088:	4293      	cmp	r3, r2
 800808a:	d901      	bls.n	8008090 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800808c:	2303      	movs	r3, #3
 800808e:	e136      	b.n	80082fe <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008090:	4b5f      	ldr	r3, [pc, #380]	@ (8008210 <HAL_RCC_OscConfig+0x764>)
 8008092:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008094:	f003 0302 	and.w	r3, r3, #2
 8008098:	2b00      	cmp	r3, #0
 800809a:	d1ee      	bne.n	800807a <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	f000 812b 	beq.w	80082fc <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80080a6:	4b5a      	ldr	r3, [pc, #360]	@ (8008210 <HAL_RCC_OscConfig+0x764>)
 80080a8:	691b      	ldr	r3, [r3, #16]
 80080aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80080ae:	2b18      	cmp	r3, #24
 80080b0:	f000 80bb 	beq.w	800822a <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080b8:	2b02      	cmp	r3, #2
 80080ba:	f040 8095 	bne.w	80081e8 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080be:	4b54      	ldr	r3, [pc, #336]	@ (8008210 <HAL_RCC_OscConfig+0x764>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a53      	ldr	r2, [pc, #332]	@ (8008210 <HAL_RCC_OscConfig+0x764>)
 80080c4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80080c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080ca:	f7f9 fe6d 	bl	8001da8 <HAL_GetTick>
 80080ce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80080d0:	e008      	b.n	80080e4 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080d2:	f7f9 fe69 	bl	8001da8 <HAL_GetTick>
 80080d6:	4602      	mov	r2, r0
 80080d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080da:	1ad3      	subs	r3, r2, r3
 80080dc:	2b02      	cmp	r3, #2
 80080de:	d901      	bls.n	80080e4 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80080e0:	2303      	movs	r3, #3
 80080e2:	e10c      	b.n	80082fe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80080e4:	4b4a      	ldr	r3, [pc, #296]	@ (8008210 <HAL_RCC_OscConfig+0x764>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d1f0      	bne.n	80080d2 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80080f0:	4b47      	ldr	r3, [pc, #284]	@ (8008210 <HAL_RCC_OscConfig+0x764>)
 80080f2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80080f4:	4b47      	ldr	r3, [pc, #284]	@ (8008214 <HAL_RCC_OscConfig+0x768>)
 80080f6:	4013      	ands	r3, r2
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008100:	0112      	lsls	r2, r2, #4
 8008102:	430a      	orrs	r2, r1
 8008104:	4942      	ldr	r1, [pc, #264]	@ (8008210 <HAL_RCC_OscConfig+0x764>)
 8008106:	4313      	orrs	r3, r2
 8008108:	628b      	str	r3, [r1, #40]	@ 0x28
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800810e:	3b01      	subs	r3, #1
 8008110:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008118:	3b01      	subs	r3, #1
 800811a:	025b      	lsls	r3, r3, #9
 800811c:	b29b      	uxth	r3, r3
 800811e:	431a      	orrs	r2, r3
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008124:	3b01      	subs	r3, #1
 8008126:	041b      	lsls	r3, r3, #16
 8008128:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800812c:	431a      	orrs	r2, r3
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008132:	3b01      	subs	r3, #1
 8008134:	061b      	lsls	r3, r3, #24
 8008136:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800813a:	4935      	ldr	r1, [pc, #212]	@ (8008210 <HAL_RCC_OscConfig+0x764>)
 800813c:	4313      	orrs	r3, r2
 800813e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008140:	4b33      	ldr	r3, [pc, #204]	@ (8008210 <HAL_RCC_OscConfig+0x764>)
 8008142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008144:	4a32      	ldr	r2, [pc, #200]	@ (8008210 <HAL_RCC_OscConfig+0x764>)
 8008146:	f023 0301 	bic.w	r3, r3, #1
 800814a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800814c:	4b30      	ldr	r3, [pc, #192]	@ (8008210 <HAL_RCC_OscConfig+0x764>)
 800814e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008150:	4b31      	ldr	r3, [pc, #196]	@ (8008218 <HAL_RCC_OscConfig+0x76c>)
 8008152:	4013      	ands	r3, r2
 8008154:	687a      	ldr	r2, [r7, #4]
 8008156:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008158:	00d2      	lsls	r2, r2, #3
 800815a:	492d      	ldr	r1, [pc, #180]	@ (8008210 <HAL_RCC_OscConfig+0x764>)
 800815c:	4313      	orrs	r3, r2
 800815e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008160:	4b2b      	ldr	r3, [pc, #172]	@ (8008210 <HAL_RCC_OscConfig+0x764>)
 8008162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008164:	f023 020c 	bic.w	r2, r3, #12
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800816c:	4928      	ldr	r1, [pc, #160]	@ (8008210 <HAL_RCC_OscConfig+0x764>)
 800816e:	4313      	orrs	r3, r2
 8008170:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008172:	4b27      	ldr	r3, [pc, #156]	@ (8008210 <HAL_RCC_OscConfig+0x764>)
 8008174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008176:	f023 0202 	bic.w	r2, r3, #2
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800817e:	4924      	ldr	r1, [pc, #144]	@ (8008210 <HAL_RCC_OscConfig+0x764>)
 8008180:	4313      	orrs	r3, r2
 8008182:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008184:	4b22      	ldr	r3, [pc, #136]	@ (8008210 <HAL_RCC_OscConfig+0x764>)
 8008186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008188:	4a21      	ldr	r2, [pc, #132]	@ (8008210 <HAL_RCC_OscConfig+0x764>)
 800818a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800818e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008190:	4b1f      	ldr	r3, [pc, #124]	@ (8008210 <HAL_RCC_OscConfig+0x764>)
 8008192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008194:	4a1e      	ldr	r2, [pc, #120]	@ (8008210 <HAL_RCC_OscConfig+0x764>)
 8008196:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800819a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800819c:	4b1c      	ldr	r3, [pc, #112]	@ (8008210 <HAL_RCC_OscConfig+0x764>)
 800819e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081a0:	4a1b      	ldr	r2, [pc, #108]	@ (8008210 <HAL_RCC_OscConfig+0x764>)
 80081a2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80081a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80081a8:	4b19      	ldr	r3, [pc, #100]	@ (8008210 <HAL_RCC_OscConfig+0x764>)
 80081aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081ac:	4a18      	ldr	r2, [pc, #96]	@ (8008210 <HAL_RCC_OscConfig+0x764>)
 80081ae:	f043 0301 	orr.w	r3, r3, #1
 80081b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80081b4:	4b16      	ldr	r3, [pc, #88]	@ (8008210 <HAL_RCC_OscConfig+0x764>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a15      	ldr	r2, [pc, #84]	@ (8008210 <HAL_RCC_OscConfig+0x764>)
 80081ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80081be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081c0:	f7f9 fdf2 	bl	8001da8 <HAL_GetTick>
 80081c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80081c6:	e008      	b.n	80081da <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80081c8:	f7f9 fdee 	bl	8001da8 <HAL_GetTick>
 80081cc:	4602      	mov	r2, r0
 80081ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081d0:	1ad3      	subs	r3, r2, r3
 80081d2:	2b02      	cmp	r3, #2
 80081d4:	d901      	bls.n	80081da <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80081d6:	2303      	movs	r3, #3
 80081d8:	e091      	b.n	80082fe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80081da:	4b0d      	ldr	r3, [pc, #52]	@ (8008210 <HAL_RCC_OscConfig+0x764>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d0f0      	beq.n	80081c8 <HAL_RCC_OscConfig+0x71c>
 80081e6:	e089      	b.n	80082fc <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80081e8:	4b09      	ldr	r3, [pc, #36]	@ (8008210 <HAL_RCC_OscConfig+0x764>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a08      	ldr	r2, [pc, #32]	@ (8008210 <HAL_RCC_OscConfig+0x764>)
 80081ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80081f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081f4:	f7f9 fdd8 	bl	8001da8 <HAL_GetTick>
 80081f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80081fa:	e00f      	b.n	800821c <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80081fc:	f7f9 fdd4 	bl	8001da8 <HAL_GetTick>
 8008200:	4602      	mov	r2, r0
 8008202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008204:	1ad3      	subs	r3, r2, r3
 8008206:	2b02      	cmp	r3, #2
 8008208:	d908      	bls.n	800821c <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800820a:	2303      	movs	r3, #3
 800820c:	e077      	b.n	80082fe <HAL_RCC_OscConfig+0x852>
 800820e:	bf00      	nop
 8008210:	58024400 	.word	0x58024400
 8008214:	fffffc0c 	.word	0xfffffc0c
 8008218:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800821c:	4b3a      	ldr	r3, [pc, #232]	@ (8008308 <HAL_RCC_OscConfig+0x85c>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008224:	2b00      	cmp	r3, #0
 8008226:	d1e9      	bne.n	80081fc <HAL_RCC_OscConfig+0x750>
 8008228:	e068      	b.n	80082fc <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800822a:	4b37      	ldr	r3, [pc, #220]	@ (8008308 <HAL_RCC_OscConfig+0x85c>)
 800822c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800822e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008230:	4b35      	ldr	r3, [pc, #212]	@ (8008308 <HAL_RCC_OscConfig+0x85c>)
 8008232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008234:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800823a:	2b01      	cmp	r3, #1
 800823c:	d031      	beq.n	80082a2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	f003 0203 	and.w	r2, r3, #3
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008248:	429a      	cmp	r2, r3
 800824a:	d12a      	bne.n	80082a2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	091b      	lsrs	r3, r3, #4
 8008250:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008258:	429a      	cmp	r2, r3
 800825a:	d122      	bne.n	80082a2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008266:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008268:	429a      	cmp	r2, r3
 800826a:	d11a      	bne.n	80082a2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	0a5b      	lsrs	r3, r3, #9
 8008270:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008278:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800827a:	429a      	cmp	r2, r3
 800827c:	d111      	bne.n	80082a2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	0c1b      	lsrs	r3, r3, #16
 8008282:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800828a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800828c:	429a      	cmp	r2, r3
 800828e:	d108      	bne.n	80082a2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	0e1b      	lsrs	r3, r3, #24
 8008294:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800829c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800829e:	429a      	cmp	r2, r3
 80082a0:	d001      	beq.n	80082a6 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80082a2:	2301      	movs	r3, #1
 80082a4:	e02b      	b.n	80082fe <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80082a6:	4b18      	ldr	r3, [pc, #96]	@ (8008308 <HAL_RCC_OscConfig+0x85c>)
 80082a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082aa:	08db      	lsrs	r3, r3, #3
 80082ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80082b0:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082b6:	693a      	ldr	r2, [r7, #16]
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d01f      	beq.n	80082fc <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80082bc:	4b12      	ldr	r3, [pc, #72]	@ (8008308 <HAL_RCC_OscConfig+0x85c>)
 80082be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082c0:	4a11      	ldr	r2, [pc, #68]	@ (8008308 <HAL_RCC_OscConfig+0x85c>)
 80082c2:	f023 0301 	bic.w	r3, r3, #1
 80082c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80082c8:	f7f9 fd6e 	bl	8001da8 <HAL_GetTick>
 80082cc:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80082ce:	bf00      	nop
 80082d0:	f7f9 fd6a 	bl	8001da8 <HAL_GetTick>
 80082d4:	4602      	mov	r2, r0
 80082d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082d8:	4293      	cmp	r3, r2
 80082da:	d0f9      	beq.n	80082d0 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80082dc:	4b0a      	ldr	r3, [pc, #40]	@ (8008308 <HAL_RCC_OscConfig+0x85c>)
 80082de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80082e0:	4b0a      	ldr	r3, [pc, #40]	@ (800830c <HAL_RCC_OscConfig+0x860>)
 80082e2:	4013      	ands	r3, r2
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80082e8:	00d2      	lsls	r2, r2, #3
 80082ea:	4907      	ldr	r1, [pc, #28]	@ (8008308 <HAL_RCC_OscConfig+0x85c>)
 80082ec:	4313      	orrs	r3, r2
 80082ee:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80082f0:	4b05      	ldr	r3, [pc, #20]	@ (8008308 <HAL_RCC_OscConfig+0x85c>)
 80082f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082f4:	4a04      	ldr	r2, [pc, #16]	@ (8008308 <HAL_RCC_OscConfig+0x85c>)
 80082f6:	f043 0301 	orr.w	r3, r3, #1
 80082fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80082fc:	2300      	movs	r3, #0
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3730      	adds	r7, #48	@ 0x30
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
 8008306:	bf00      	nop
 8008308:	58024400 	.word	0x58024400
 800830c:	ffff0007 	.word	0xffff0007

08008310 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b086      	sub	sp, #24
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d101      	bne.n	8008324 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008320:	2301      	movs	r3, #1
 8008322:	e19c      	b.n	800865e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008324:	4b8a      	ldr	r3, [pc, #552]	@ (8008550 <HAL_RCC_ClockConfig+0x240>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f003 030f 	and.w	r3, r3, #15
 800832c:	683a      	ldr	r2, [r7, #0]
 800832e:	429a      	cmp	r2, r3
 8008330:	d910      	bls.n	8008354 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008332:	4b87      	ldr	r3, [pc, #540]	@ (8008550 <HAL_RCC_ClockConfig+0x240>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f023 020f 	bic.w	r2, r3, #15
 800833a:	4985      	ldr	r1, [pc, #532]	@ (8008550 <HAL_RCC_ClockConfig+0x240>)
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	4313      	orrs	r3, r2
 8008340:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008342:	4b83      	ldr	r3, [pc, #524]	@ (8008550 <HAL_RCC_ClockConfig+0x240>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f003 030f 	and.w	r3, r3, #15
 800834a:	683a      	ldr	r2, [r7, #0]
 800834c:	429a      	cmp	r2, r3
 800834e:	d001      	beq.n	8008354 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008350:	2301      	movs	r3, #1
 8008352:	e184      	b.n	800865e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f003 0304 	and.w	r3, r3, #4
 800835c:	2b00      	cmp	r3, #0
 800835e:	d010      	beq.n	8008382 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	691a      	ldr	r2, [r3, #16]
 8008364:	4b7b      	ldr	r3, [pc, #492]	@ (8008554 <HAL_RCC_ClockConfig+0x244>)
 8008366:	699b      	ldr	r3, [r3, #24]
 8008368:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800836c:	429a      	cmp	r2, r3
 800836e:	d908      	bls.n	8008382 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008370:	4b78      	ldr	r3, [pc, #480]	@ (8008554 <HAL_RCC_ClockConfig+0x244>)
 8008372:	699b      	ldr	r3, [r3, #24]
 8008374:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	691b      	ldr	r3, [r3, #16]
 800837c:	4975      	ldr	r1, [pc, #468]	@ (8008554 <HAL_RCC_ClockConfig+0x244>)
 800837e:	4313      	orrs	r3, r2
 8008380:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f003 0308 	and.w	r3, r3, #8
 800838a:	2b00      	cmp	r3, #0
 800838c:	d010      	beq.n	80083b0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	695a      	ldr	r2, [r3, #20]
 8008392:	4b70      	ldr	r3, [pc, #448]	@ (8008554 <HAL_RCC_ClockConfig+0x244>)
 8008394:	69db      	ldr	r3, [r3, #28]
 8008396:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800839a:	429a      	cmp	r2, r3
 800839c:	d908      	bls.n	80083b0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800839e:	4b6d      	ldr	r3, [pc, #436]	@ (8008554 <HAL_RCC_ClockConfig+0x244>)
 80083a0:	69db      	ldr	r3, [r3, #28]
 80083a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	695b      	ldr	r3, [r3, #20]
 80083aa:	496a      	ldr	r1, [pc, #424]	@ (8008554 <HAL_RCC_ClockConfig+0x244>)
 80083ac:	4313      	orrs	r3, r2
 80083ae:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f003 0310 	and.w	r3, r3, #16
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d010      	beq.n	80083de <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	699a      	ldr	r2, [r3, #24]
 80083c0:	4b64      	ldr	r3, [pc, #400]	@ (8008554 <HAL_RCC_ClockConfig+0x244>)
 80083c2:	69db      	ldr	r3, [r3, #28]
 80083c4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d908      	bls.n	80083de <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80083cc:	4b61      	ldr	r3, [pc, #388]	@ (8008554 <HAL_RCC_ClockConfig+0x244>)
 80083ce:	69db      	ldr	r3, [r3, #28]
 80083d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	699b      	ldr	r3, [r3, #24]
 80083d8:	495e      	ldr	r1, [pc, #376]	@ (8008554 <HAL_RCC_ClockConfig+0x244>)
 80083da:	4313      	orrs	r3, r2
 80083dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f003 0320 	and.w	r3, r3, #32
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d010      	beq.n	800840c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	69da      	ldr	r2, [r3, #28]
 80083ee:	4b59      	ldr	r3, [pc, #356]	@ (8008554 <HAL_RCC_ClockConfig+0x244>)
 80083f0:	6a1b      	ldr	r3, [r3, #32]
 80083f2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d908      	bls.n	800840c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80083fa:	4b56      	ldr	r3, [pc, #344]	@ (8008554 <HAL_RCC_ClockConfig+0x244>)
 80083fc:	6a1b      	ldr	r3, [r3, #32]
 80083fe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	69db      	ldr	r3, [r3, #28]
 8008406:	4953      	ldr	r1, [pc, #332]	@ (8008554 <HAL_RCC_ClockConfig+0x244>)
 8008408:	4313      	orrs	r3, r2
 800840a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f003 0302 	and.w	r3, r3, #2
 8008414:	2b00      	cmp	r3, #0
 8008416:	d010      	beq.n	800843a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	68da      	ldr	r2, [r3, #12]
 800841c:	4b4d      	ldr	r3, [pc, #308]	@ (8008554 <HAL_RCC_ClockConfig+0x244>)
 800841e:	699b      	ldr	r3, [r3, #24]
 8008420:	f003 030f 	and.w	r3, r3, #15
 8008424:	429a      	cmp	r2, r3
 8008426:	d908      	bls.n	800843a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008428:	4b4a      	ldr	r3, [pc, #296]	@ (8008554 <HAL_RCC_ClockConfig+0x244>)
 800842a:	699b      	ldr	r3, [r3, #24]
 800842c:	f023 020f 	bic.w	r2, r3, #15
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	4947      	ldr	r1, [pc, #284]	@ (8008554 <HAL_RCC_ClockConfig+0x244>)
 8008436:	4313      	orrs	r3, r2
 8008438:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f003 0301 	and.w	r3, r3, #1
 8008442:	2b00      	cmp	r3, #0
 8008444:	d055      	beq.n	80084f2 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008446:	4b43      	ldr	r3, [pc, #268]	@ (8008554 <HAL_RCC_ClockConfig+0x244>)
 8008448:	699b      	ldr	r3, [r3, #24]
 800844a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	4940      	ldr	r1, [pc, #256]	@ (8008554 <HAL_RCC_ClockConfig+0x244>)
 8008454:	4313      	orrs	r3, r2
 8008456:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	2b02      	cmp	r3, #2
 800845e:	d107      	bne.n	8008470 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008460:	4b3c      	ldr	r3, [pc, #240]	@ (8008554 <HAL_RCC_ClockConfig+0x244>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008468:	2b00      	cmp	r3, #0
 800846a:	d121      	bne.n	80084b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800846c:	2301      	movs	r3, #1
 800846e:	e0f6      	b.n	800865e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	2b03      	cmp	r3, #3
 8008476:	d107      	bne.n	8008488 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008478:	4b36      	ldr	r3, [pc, #216]	@ (8008554 <HAL_RCC_ClockConfig+0x244>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008480:	2b00      	cmp	r3, #0
 8008482:	d115      	bne.n	80084b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008484:	2301      	movs	r3, #1
 8008486:	e0ea      	b.n	800865e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	2b01      	cmp	r3, #1
 800848e:	d107      	bne.n	80084a0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008490:	4b30      	ldr	r3, [pc, #192]	@ (8008554 <HAL_RCC_ClockConfig+0x244>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008498:	2b00      	cmp	r3, #0
 800849a:	d109      	bne.n	80084b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800849c:	2301      	movs	r3, #1
 800849e:	e0de      	b.n	800865e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80084a0:	4b2c      	ldr	r3, [pc, #176]	@ (8008554 <HAL_RCC_ClockConfig+0x244>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f003 0304 	and.w	r3, r3, #4
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d101      	bne.n	80084b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80084ac:	2301      	movs	r3, #1
 80084ae:	e0d6      	b.n	800865e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80084b0:	4b28      	ldr	r3, [pc, #160]	@ (8008554 <HAL_RCC_ClockConfig+0x244>)
 80084b2:	691b      	ldr	r3, [r3, #16]
 80084b4:	f023 0207 	bic.w	r2, r3, #7
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	4925      	ldr	r1, [pc, #148]	@ (8008554 <HAL_RCC_ClockConfig+0x244>)
 80084be:	4313      	orrs	r3, r2
 80084c0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084c2:	f7f9 fc71 	bl	8001da8 <HAL_GetTick>
 80084c6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084c8:	e00a      	b.n	80084e0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80084ca:	f7f9 fc6d 	bl	8001da8 <HAL_GetTick>
 80084ce:	4602      	mov	r2, r0
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	1ad3      	subs	r3, r2, r3
 80084d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80084d8:	4293      	cmp	r3, r2
 80084da:	d901      	bls.n	80084e0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80084dc:	2303      	movs	r3, #3
 80084de:	e0be      	b.n	800865e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084e0:	4b1c      	ldr	r3, [pc, #112]	@ (8008554 <HAL_RCC_ClockConfig+0x244>)
 80084e2:	691b      	ldr	r3, [r3, #16]
 80084e4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	00db      	lsls	r3, r3, #3
 80084ee:	429a      	cmp	r2, r3
 80084f0:	d1eb      	bne.n	80084ca <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f003 0302 	and.w	r3, r3, #2
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d010      	beq.n	8008520 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	68da      	ldr	r2, [r3, #12]
 8008502:	4b14      	ldr	r3, [pc, #80]	@ (8008554 <HAL_RCC_ClockConfig+0x244>)
 8008504:	699b      	ldr	r3, [r3, #24]
 8008506:	f003 030f 	and.w	r3, r3, #15
 800850a:	429a      	cmp	r2, r3
 800850c:	d208      	bcs.n	8008520 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800850e:	4b11      	ldr	r3, [pc, #68]	@ (8008554 <HAL_RCC_ClockConfig+0x244>)
 8008510:	699b      	ldr	r3, [r3, #24]
 8008512:	f023 020f 	bic.w	r2, r3, #15
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	68db      	ldr	r3, [r3, #12]
 800851a:	490e      	ldr	r1, [pc, #56]	@ (8008554 <HAL_RCC_ClockConfig+0x244>)
 800851c:	4313      	orrs	r3, r2
 800851e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008520:	4b0b      	ldr	r3, [pc, #44]	@ (8008550 <HAL_RCC_ClockConfig+0x240>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f003 030f 	and.w	r3, r3, #15
 8008528:	683a      	ldr	r2, [r7, #0]
 800852a:	429a      	cmp	r2, r3
 800852c:	d214      	bcs.n	8008558 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800852e:	4b08      	ldr	r3, [pc, #32]	@ (8008550 <HAL_RCC_ClockConfig+0x240>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f023 020f 	bic.w	r2, r3, #15
 8008536:	4906      	ldr	r1, [pc, #24]	@ (8008550 <HAL_RCC_ClockConfig+0x240>)
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	4313      	orrs	r3, r2
 800853c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800853e:	4b04      	ldr	r3, [pc, #16]	@ (8008550 <HAL_RCC_ClockConfig+0x240>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f003 030f 	and.w	r3, r3, #15
 8008546:	683a      	ldr	r2, [r7, #0]
 8008548:	429a      	cmp	r2, r3
 800854a:	d005      	beq.n	8008558 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800854c:	2301      	movs	r3, #1
 800854e:	e086      	b.n	800865e <HAL_RCC_ClockConfig+0x34e>
 8008550:	52002000 	.word	0x52002000
 8008554:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f003 0304 	and.w	r3, r3, #4
 8008560:	2b00      	cmp	r3, #0
 8008562:	d010      	beq.n	8008586 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	691a      	ldr	r2, [r3, #16]
 8008568:	4b3f      	ldr	r3, [pc, #252]	@ (8008668 <HAL_RCC_ClockConfig+0x358>)
 800856a:	699b      	ldr	r3, [r3, #24]
 800856c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008570:	429a      	cmp	r2, r3
 8008572:	d208      	bcs.n	8008586 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008574:	4b3c      	ldr	r3, [pc, #240]	@ (8008668 <HAL_RCC_ClockConfig+0x358>)
 8008576:	699b      	ldr	r3, [r3, #24]
 8008578:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	691b      	ldr	r3, [r3, #16]
 8008580:	4939      	ldr	r1, [pc, #228]	@ (8008668 <HAL_RCC_ClockConfig+0x358>)
 8008582:	4313      	orrs	r3, r2
 8008584:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f003 0308 	and.w	r3, r3, #8
 800858e:	2b00      	cmp	r3, #0
 8008590:	d010      	beq.n	80085b4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	695a      	ldr	r2, [r3, #20]
 8008596:	4b34      	ldr	r3, [pc, #208]	@ (8008668 <HAL_RCC_ClockConfig+0x358>)
 8008598:	69db      	ldr	r3, [r3, #28]
 800859a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800859e:	429a      	cmp	r2, r3
 80085a0:	d208      	bcs.n	80085b4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80085a2:	4b31      	ldr	r3, [pc, #196]	@ (8008668 <HAL_RCC_ClockConfig+0x358>)
 80085a4:	69db      	ldr	r3, [r3, #28]
 80085a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	695b      	ldr	r3, [r3, #20]
 80085ae:	492e      	ldr	r1, [pc, #184]	@ (8008668 <HAL_RCC_ClockConfig+0x358>)
 80085b0:	4313      	orrs	r3, r2
 80085b2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f003 0310 	and.w	r3, r3, #16
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d010      	beq.n	80085e2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	699a      	ldr	r2, [r3, #24]
 80085c4:	4b28      	ldr	r3, [pc, #160]	@ (8008668 <HAL_RCC_ClockConfig+0x358>)
 80085c6:	69db      	ldr	r3, [r3, #28]
 80085c8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d208      	bcs.n	80085e2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80085d0:	4b25      	ldr	r3, [pc, #148]	@ (8008668 <HAL_RCC_ClockConfig+0x358>)
 80085d2:	69db      	ldr	r3, [r3, #28]
 80085d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	699b      	ldr	r3, [r3, #24]
 80085dc:	4922      	ldr	r1, [pc, #136]	@ (8008668 <HAL_RCC_ClockConfig+0x358>)
 80085de:	4313      	orrs	r3, r2
 80085e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f003 0320 	and.w	r3, r3, #32
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d010      	beq.n	8008610 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	69da      	ldr	r2, [r3, #28]
 80085f2:	4b1d      	ldr	r3, [pc, #116]	@ (8008668 <HAL_RCC_ClockConfig+0x358>)
 80085f4:	6a1b      	ldr	r3, [r3, #32]
 80085f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80085fa:	429a      	cmp	r2, r3
 80085fc:	d208      	bcs.n	8008610 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80085fe:	4b1a      	ldr	r3, [pc, #104]	@ (8008668 <HAL_RCC_ClockConfig+0x358>)
 8008600:	6a1b      	ldr	r3, [r3, #32]
 8008602:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	69db      	ldr	r3, [r3, #28]
 800860a:	4917      	ldr	r1, [pc, #92]	@ (8008668 <HAL_RCC_ClockConfig+0x358>)
 800860c:	4313      	orrs	r3, r2
 800860e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8008610:	f000 f834 	bl	800867c <HAL_RCC_GetSysClockFreq>
 8008614:	4602      	mov	r2, r0
 8008616:	4b14      	ldr	r3, [pc, #80]	@ (8008668 <HAL_RCC_ClockConfig+0x358>)
 8008618:	699b      	ldr	r3, [r3, #24]
 800861a:	0a1b      	lsrs	r3, r3, #8
 800861c:	f003 030f 	and.w	r3, r3, #15
 8008620:	4912      	ldr	r1, [pc, #72]	@ (800866c <HAL_RCC_ClockConfig+0x35c>)
 8008622:	5ccb      	ldrb	r3, [r1, r3]
 8008624:	f003 031f 	and.w	r3, r3, #31
 8008628:	fa22 f303 	lsr.w	r3, r2, r3
 800862c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800862e:	4b0e      	ldr	r3, [pc, #56]	@ (8008668 <HAL_RCC_ClockConfig+0x358>)
 8008630:	699b      	ldr	r3, [r3, #24]
 8008632:	f003 030f 	and.w	r3, r3, #15
 8008636:	4a0d      	ldr	r2, [pc, #52]	@ (800866c <HAL_RCC_ClockConfig+0x35c>)
 8008638:	5cd3      	ldrb	r3, [r2, r3]
 800863a:	f003 031f 	and.w	r3, r3, #31
 800863e:	693a      	ldr	r2, [r7, #16]
 8008640:	fa22 f303 	lsr.w	r3, r2, r3
 8008644:	4a0a      	ldr	r2, [pc, #40]	@ (8008670 <HAL_RCC_ClockConfig+0x360>)
 8008646:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008648:	4a0a      	ldr	r2, [pc, #40]	@ (8008674 <HAL_RCC_ClockConfig+0x364>)
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800864e:	4b0a      	ldr	r3, [pc, #40]	@ (8008678 <HAL_RCC_ClockConfig+0x368>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4618      	mov	r0, r3
 8008654:	f7f8 ff6a 	bl	800152c <HAL_InitTick>
 8008658:	4603      	mov	r3, r0
 800865a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800865c:	7bfb      	ldrb	r3, [r7, #15]
}
 800865e:	4618      	mov	r0, r3
 8008660:	3718      	adds	r7, #24
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
 8008666:	bf00      	nop
 8008668:	58024400 	.word	0x58024400
 800866c:	08014124 	.word	0x08014124
 8008670:	24000004 	.word	0x24000004
 8008674:	24000000 	.word	0x24000000
 8008678:	24000008 	.word	0x24000008

0800867c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800867c:	b480      	push	{r7}
 800867e:	b089      	sub	sp, #36	@ 0x24
 8008680:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008682:	4bb3      	ldr	r3, [pc, #716]	@ (8008950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008684:	691b      	ldr	r3, [r3, #16]
 8008686:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800868a:	2b18      	cmp	r3, #24
 800868c:	f200 8155 	bhi.w	800893a <HAL_RCC_GetSysClockFreq+0x2be>
 8008690:	a201      	add	r2, pc, #4	@ (adr r2, 8008698 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008696:	bf00      	nop
 8008698:	080086fd 	.word	0x080086fd
 800869c:	0800893b 	.word	0x0800893b
 80086a0:	0800893b 	.word	0x0800893b
 80086a4:	0800893b 	.word	0x0800893b
 80086a8:	0800893b 	.word	0x0800893b
 80086ac:	0800893b 	.word	0x0800893b
 80086b0:	0800893b 	.word	0x0800893b
 80086b4:	0800893b 	.word	0x0800893b
 80086b8:	08008723 	.word	0x08008723
 80086bc:	0800893b 	.word	0x0800893b
 80086c0:	0800893b 	.word	0x0800893b
 80086c4:	0800893b 	.word	0x0800893b
 80086c8:	0800893b 	.word	0x0800893b
 80086cc:	0800893b 	.word	0x0800893b
 80086d0:	0800893b 	.word	0x0800893b
 80086d4:	0800893b 	.word	0x0800893b
 80086d8:	08008729 	.word	0x08008729
 80086dc:	0800893b 	.word	0x0800893b
 80086e0:	0800893b 	.word	0x0800893b
 80086e4:	0800893b 	.word	0x0800893b
 80086e8:	0800893b 	.word	0x0800893b
 80086ec:	0800893b 	.word	0x0800893b
 80086f0:	0800893b 	.word	0x0800893b
 80086f4:	0800893b 	.word	0x0800893b
 80086f8:	0800872f 	.word	0x0800872f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086fc:	4b94      	ldr	r3, [pc, #592]	@ (8008950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f003 0320 	and.w	r3, r3, #32
 8008704:	2b00      	cmp	r3, #0
 8008706:	d009      	beq.n	800871c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008708:	4b91      	ldr	r3, [pc, #580]	@ (8008950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	08db      	lsrs	r3, r3, #3
 800870e:	f003 0303 	and.w	r3, r3, #3
 8008712:	4a90      	ldr	r2, [pc, #576]	@ (8008954 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008714:	fa22 f303 	lsr.w	r3, r2, r3
 8008718:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800871a:	e111      	b.n	8008940 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800871c:	4b8d      	ldr	r3, [pc, #564]	@ (8008954 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800871e:	61bb      	str	r3, [r7, #24]
      break;
 8008720:	e10e      	b.n	8008940 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008722:	4b8d      	ldr	r3, [pc, #564]	@ (8008958 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008724:	61bb      	str	r3, [r7, #24]
      break;
 8008726:	e10b      	b.n	8008940 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008728:	4b8c      	ldr	r3, [pc, #560]	@ (800895c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800872a:	61bb      	str	r3, [r7, #24]
      break;
 800872c:	e108      	b.n	8008940 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800872e:	4b88      	ldr	r3, [pc, #544]	@ (8008950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008732:	f003 0303 	and.w	r3, r3, #3
 8008736:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008738:	4b85      	ldr	r3, [pc, #532]	@ (8008950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800873a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800873c:	091b      	lsrs	r3, r3, #4
 800873e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008742:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008744:	4b82      	ldr	r3, [pc, #520]	@ (8008950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008748:	f003 0301 	and.w	r3, r3, #1
 800874c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800874e:	4b80      	ldr	r3, [pc, #512]	@ (8008950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008750:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008752:	08db      	lsrs	r3, r3, #3
 8008754:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008758:	68fa      	ldr	r2, [r7, #12]
 800875a:	fb02 f303 	mul.w	r3, r2, r3
 800875e:	ee07 3a90 	vmov	s15, r3
 8008762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008766:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	2b00      	cmp	r3, #0
 800876e:	f000 80e1 	beq.w	8008934 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	2b02      	cmp	r3, #2
 8008776:	f000 8083 	beq.w	8008880 <HAL_RCC_GetSysClockFreq+0x204>
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	2b02      	cmp	r3, #2
 800877e:	f200 80a1 	bhi.w	80088c4 <HAL_RCC_GetSysClockFreq+0x248>
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d003      	beq.n	8008790 <HAL_RCC_GetSysClockFreq+0x114>
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	2b01      	cmp	r3, #1
 800878c:	d056      	beq.n	800883c <HAL_RCC_GetSysClockFreq+0x1c0>
 800878e:	e099      	b.n	80088c4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008790:	4b6f      	ldr	r3, [pc, #444]	@ (8008950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f003 0320 	and.w	r3, r3, #32
 8008798:	2b00      	cmp	r3, #0
 800879a:	d02d      	beq.n	80087f8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800879c:	4b6c      	ldr	r3, [pc, #432]	@ (8008950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	08db      	lsrs	r3, r3, #3
 80087a2:	f003 0303 	and.w	r3, r3, #3
 80087a6:	4a6b      	ldr	r2, [pc, #428]	@ (8008954 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80087a8:	fa22 f303 	lsr.w	r3, r2, r3
 80087ac:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	ee07 3a90 	vmov	s15, r3
 80087b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	ee07 3a90 	vmov	s15, r3
 80087be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087c6:	4b62      	ldr	r3, [pc, #392]	@ (8008950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087ce:	ee07 3a90 	vmov	s15, r3
 80087d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80087da:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008960 <HAL_RCC_GetSysClockFreq+0x2e4>
 80087de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087f2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80087f6:	e087      	b.n	8008908 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	ee07 3a90 	vmov	s15, r3
 80087fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008802:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008964 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800880a:	4b51      	ldr	r3, [pc, #324]	@ (8008950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800880c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800880e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008812:	ee07 3a90 	vmov	s15, r3
 8008816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800881a:	ed97 6a02 	vldr	s12, [r7, #8]
 800881e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008960 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800882a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800882e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008836:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800883a:	e065      	b.n	8008908 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	ee07 3a90 	vmov	s15, r3
 8008842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008846:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008968 <HAL_RCC_GetSysClockFreq+0x2ec>
 800884a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800884e:	4b40      	ldr	r3, [pc, #256]	@ (8008950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008856:	ee07 3a90 	vmov	s15, r3
 800885a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800885e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008862:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008960 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800886a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800886e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800887a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800887e:	e043      	b.n	8008908 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	ee07 3a90 	vmov	s15, r3
 8008886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800888a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800896c <HAL_RCC_GetSysClockFreq+0x2f0>
 800888e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008892:	4b2f      	ldr	r3, [pc, #188]	@ (8008950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800889a:	ee07 3a90 	vmov	s15, r3
 800889e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80088a6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008960 <HAL_RCC_GetSysClockFreq+0x2e4>
 80088aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80088c2:	e021      	b.n	8008908 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	ee07 3a90 	vmov	s15, r3
 80088ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088ce:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008968 <HAL_RCC_GetSysClockFreq+0x2ec>
 80088d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088d6:	4b1e      	ldr	r3, [pc, #120]	@ (8008950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088de:	ee07 3a90 	vmov	s15, r3
 80088e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80088ea:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008960 <HAL_RCC_GetSysClockFreq+0x2e4>
 80088ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008902:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008906:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008908:	4b11      	ldr	r3, [pc, #68]	@ (8008950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800890a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800890c:	0a5b      	lsrs	r3, r3, #9
 800890e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008912:	3301      	adds	r3, #1
 8008914:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	ee07 3a90 	vmov	s15, r3
 800891c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008920:	edd7 6a07 	vldr	s13, [r7, #28]
 8008924:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008928:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800892c:	ee17 3a90 	vmov	r3, s15
 8008930:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008932:	e005      	b.n	8008940 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008934:	2300      	movs	r3, #0
 8008936:	61bb      	str	r3, [r7, #24]
      break;
 8008938:	e002      	b.n	8008940 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800893a:	4b07      	ldr	r3, [pc, #28]	@ (8008958 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800893c:	61bb      	str	r3, [r7, #24]
      break;
 800893e:	bf00      	nop
  }

  return sysclockfreq;
 8008940:	69bb      	ldr	r3, [r7, #24]
}
 8008942:	4618      	mov	r0, r3
 8008944:	3724      	adds	r7, #36	@ 0x24
 8008946:	46bd      	mov	sp, r7
 8008948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894c:	4770      	bx	lr
 800894e:	bf00      	nop
 8008950:	58024400 	.word	0x58024400
 8008954:	03d09000 	.word	0x03d09000
 8008958:	003d0900 	.word	0x003d0900
 800895c:	016e3600 	.word	0x016e3600
 8008960:	46000000 	.word	0x46000000
 8008964:	4c742400 	.word	0x4c742400
 8008968:	4a742400 	.word	0x4a742400
 800896c:	4bb71b00 	.word	0x4bb71b00

08008970 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b082      	sub	sp, #8
 8008974:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8008976:	f7ff fe81 	bl	800867c <HAL_RCC_GetSysClockFreq>
 800897a:	4602      	mov	r2, r0
 800897c:	4b10      	ldr	r3, [pc, #64]	@ (80089c0 <HAL_RCC_GetHCLKFreq+0x50>)
 800897e:	699b      	ldr	r3, [r3, #24]
 8008980:	0a1b      	lsrs	r3, r3, #8
 8008982:	f003 030f 	and.w	r3, r3, #15
 8008986:	490f      	ldr	r1, [pc, #60]	@ (80089c4 <HAL_RCC_GetHCLKFreq+0x54>)
 8008988:	5ccb      	ldrb	r3, [r1, r3]
 800898a:	f003 031f 	and.w	r3, r3, #31
 800898e:	fa22 f303 	lsr.w	r3, r2, r3
 8008992:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8008994:	4b0a      	ldr	r3, [pc, #40]	@ (80089c0 <HAL_RCC_GetHCLKFreq+0x50>)
 8008996:	699b      	ldr	r3, [r3, #24]
 8008998:	f003 030f 	and.w	r3, r3, #15
 800899c:	4a09      	ldr	r2, [pc, #36]	@ (80089c4 <HAL_RCC_GetHCLKFreq+0x54>)
 800899e:	5cd3      	ldrb	r3, [r2, r3]
 80089a0:	f003 031f 	and.w	r3, r3, #31
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	fa22 f303 	lsr.w	r3, r2, r3
 80089aa:	4a07      	ldr	r2, [pc, #28]	@ (80089c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80089ac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80089ae:	4a07      	ldr	r2, [pc, #28]	@ (80089cc <HAL_RCC_GetHCLKFreq+0x5c>)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80089b4:	4b04      	ldr	r3, [pc, #16]	@ (80089c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80089b6:	681b      	ldr	r3, [r3, #0]
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3708      	adds	r7, #8
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}
 80089c0:	58024400 	.word	0x58024400
 80089c4:	08014124 	.word	0x08014124
 80089c8:	24000004 	.word	0x24000004
 80089cc:	24000000 	.word	0x24000000

080089d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80089d4:	f7ff ffcc 	bl	8008970 <HAL_RCC_GetHCLKFreq>
 80089d8:	4602      	mov	r2, r0
 80089da:	4b06      	ldr	r3, [pc, #24]	@ (80089f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80089dc:	69db      	ldr	r3, [r3, #28]
 80089de:	091b      	lsrs	r3, r3, #4
 80089e0:	f003 0307 	and.w	r3, r3, #7
 80089e4:	4904      	ldr	r1, [pc, #16]	@ (80089f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80089e6:	5ccb      	ldrb	r3, [r1, r3]
 80089e8:	f003 031f 	and.w	r3, r3, #31
 80089ec:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	bd80      	pop	{r7, pc}
 80089f4:	58024400 	.word	0x58024400
 80089f8:	08014124 	.word	0x08014124

080089fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8008a00:	f7ff ffb6 	bl	8008970 <HAL_RCC_GetHCLKFreq>
 8008a04:	4602      	mov	r2, r0
 8008a06:	4b06      	ldr	r3, [pc, #24]	@ (8008a20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008a08:	69db      	ldr	r3, [r3, #28]
 8008a0a:	0a1b      	lsrs	r3, r3, #8
 8008a0c:	f003 0307 	and.w	r3, r3, #7
 8008a10:	4904      	ldr	r1, [pc, #16]	@ (8008a24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008a12:	5ccb      	ldrb	r3, [r1, r3]
 8008a14:	f003 031f 	and.w	r3, r3, #31
 8008a18:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	bd80      	pop	{r7, pc}
 8008a20:	58024400 	.word	0x58024400
 8008a24:	08014124 	.word	0x08014124

08008a28 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b083      	sub	sp, #12
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	223f      	movs	r2, #63	@ 0x3f
 8008a36:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008a38:	4b1a      	ldr	r3, [pc, #104]	@ (8008aa4 <HAL_RCC_GetClockConfig+0x7c>)
 8008a3a:	691b      	ldr	r3, [r3, #16]
 8008a3c:	f003 0207 	and.w	r2, r3, #7
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 8008a44:	4b17      	ldr	r3, [pc, #92]	@ (8008aa4 <HAL_RCC_GetClockConfig+0x7c>)
 8008a46:	699b      	ldr	r3, [r3, #24]
 8008a48:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 8008a50:	4b14      	ldr	r3, [pc, #80]	@ (8008aa4 <HAL_RCC_GetClockConfig+0x7c>)
 8008a52:	699b      	ldr	r3, [r3, #24]
 8008a54:	f003 020f 	and.w	r2, r3, #15
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 8008a5c:	4b11      	ldr	r3, [pc, #68]	@ (8008aa4 <HAL_RCC_GetClockConfig+0x7c>)
 8008a5e:	699b      	ldr	r3, [r3, #24]
 8008a60:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 8008a68:	4b0e      	ldr	r3, [pc, #56]	@ (8008aa4 <HAL_RCC_GetClockConfig+0x7c>)
 8008a6a:	69db      	ldr	r3, [r3, #28]
 8008a6c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 8008a74:	4b0b      	ldr	r3, [pc, #44]	@ (8008aa4 <HAL_RCC_GetClockConfig+0x7c>)
 8008a76:	69db      	ldr	r3, [r3, #28]
 8008a78:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 8008a80:	4b08      	ldr	r3, [pc, #32]	@ (8008aa4 <HAL_RCC_GetClockConfig+0x7c>)
 8008a82:	6a1b      	ldr	r3, [r3, #32]
 8008a84:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008a8c:	4b06      	ldr	r3, [pc, #24]	@ (8008aa8 <HAL_RCC_GetClockConfig+0x80>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f003 020f 	and.w	r2, r3, #15
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	601a      	str	r2, [r3, #0]
}
 8008a98:	bf00      	nop
 8008a9a:	370c      	adds	r7, #12
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa2:	4770      	bx	lr
 8008aa4:	58024400 	.word	0x58024400
 8008aa8:	52002000 	.word	0x52002000

08008aac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008aac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ab0:	b0c8      	sub	sp, #288	@ 0x120
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008ab8:	2300      	movs	r3, #0
 8008aba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008abe:	2300      	movs	r3, #0
 8008ac0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008ac4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008acc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008ad0:	2500      	movs	r5, #0
 8008ad2:	ea54 0305 	orrs.w	r3, r4, r5
 8008ad6:	d049      	beq.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008ad8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008adc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ade:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008ae2:	d02f      	beq.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008ae4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008ae8:	d828      	bhi.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008aea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008aee:	d01a      	beq.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008af0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008af4:	d822      	bhi.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d003      	beq.n	8008b02 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008afa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008afe:	d007      	beq.n	8008b10 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008b00:	e01c      	b.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b02:	4ba7      	ldr	r3, [pc, #668]	@ (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b06:	4aa6      	ldr	r2, [pc, #664]	@ (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008b08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008b0e:	e01a      	b.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008b10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b14:	3308      	adds	r3, #8
 8008b16:	2102      	movs	r1, #2
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f001 fc43 	bl	800a3a4 <RCCEx_PLL2_Config>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008b24:	e00f      	b.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008b26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b2a:	3328      	adds	r3, #40	@ 0x28
 8008b2c:	2102      	movs	r1, #2
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f001 fcea 	bl	800a508 <RCCEx_PLL3_Config>
 8008b34:	4603      	mov	r3, r0
 8008b36:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008b3a:	e004      	b.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008b42:	e000      	b.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008b44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b46:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d10a      	bne.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008b4e:	4b94      	ldr	r3, [pc, #592]	@ (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008b50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b52:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008b56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b5c:	4a90      	ldr	r2, [pc, #576]	@ (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008b5e:	430b      	orrs	r3, r1
 8008b60:	6513      	str	r3, [r2, #80]	@ 0x50
 8008b62:	e003      	b.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b64:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008b68:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008b6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b74:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008b78:	f04f 0900 	mov.w	r9, #0
 8008b7c:	ea58 0309 	orrs.w	r3, r8, r9
 8008b80:	d047      	beq.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008b82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b88:	2b04      	cmp	r3, #4
 8008b8a:	d82a      	bhi.n	8008be2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008b8c:	a201      	add	r2, pc, #4	@ (adr r2, 8008b94 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b92:	bf00      	nop
 8008b94:	08008ba9 	.word	0x08008ba9
 8008b98:	08008bb7 	.word	0x08008bb7
 8008b9c:	08008bcd 	.word	0x08008bcd
 8008ba0:	08008beb 	.word	0x08008beb
 8008ba4:	08008beb 	.word	0x08008beb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ba8:	4b7d      	ldr	r3, [pc, #500]	@ (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bac:	4a7c      	ldr	r2, [pc, #496]	@ (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008bae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008bb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008bb4:	e01a      	b.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008bb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bba:	3308      	adds	r3, #8
 8008bbc:	2100      	movs	r1, #0
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f001 fbf0 	bl	800a3a4 <RCCEx_PLL2_Config>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008bca:	e00f      	b.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008bcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bd0:	3328      	adds	r3, #40	@ 0x28
 8008bd2:	2100      	movs	r1, #0
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f001 fc97 	bl	800a508 <RCCEx_PLL3_Config>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008be0:	e004      	b.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008be2:	2301      	movs	r3, #1
 8008be4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008be8:	e000      	b.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008bea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d10a      	bne.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008bf4:	4b6a      	ldr	r3, [pc, #424]	@ (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008bf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bf8:	f023 0107 	bic.w	r1, r3, #7
 8008bfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c02:	4a67      	ldr	r2, [pc, #412]	@ (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008c04:	430b      	orrs	r3, r1
 8008c06:	6513      	str	r3, [r2, #80]	@ 0x50
 8008c08:	e003      	b.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c0a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008c0e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8008c12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c1a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8008c1e:	f04f 0b00 	mov.w	fp, #0
 8008c22:	ea5a 030b 	orrs.w	r3, sl, fp
 8008c26:	d054      	beq.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8008c28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c2e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8008c32:	d036      	beq.n	8008ca2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8008c34:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8008c38:	d82f      	bhi.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008c3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c3e:	d032      	beq.n	8008ca6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008c40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c44:	d829      	bhi.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008c46:	2bc0      	cmp	r3, #192	@ 0xc0
 8008c48:	d02f      	beq.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8008c4a:	2bc0      	cmp	r3, #192	@ 0xc0
 8008c4c:	d825      	bhi.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008c4e:	2b80      	cmp	r3, #128	@ 0x80
 8008c50:	d018      	beq.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8008c52:	2b80      	cmp	r3, #128	@ 0x80
 8008c54:	d821      	bhi.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d002      	beq.n	8008c60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8008c5a:	2b40      	cmp	r3, #64	@ 0x40
 8008c5c:	d007      	beq.n	8008c6e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8008c5e:	e01c      	b.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c60:	4b4f      	ldr	r3, [pc, #316]	@ (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c64:	4a4e      	ldr	r2, [pc, #312]	@ (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008c66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8008c6c:	e01e      	b.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c72:	3308      	adds	r3, #8
 8008c74:	2100      	movs	r1, #0
 8008c76:	4618      	mov	r0, r3
 8008c78:	f001 fb94 	bl	800a3a4 <RCCEx_PLL2_Config>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8008c82:	e013      	b.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008c84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c88:	3328      	adds	r3, #40	@ 0x28
 8008c8a:	2100      	movs	r1, #0
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f001 fc3b 	bl	800a508 <RCCEx_PLL3_Config>
 8008c92:	4603      	mov	r3, r0
 8008c94:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8008c98:	e008      	b.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008ca0:	e004      	b.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8008ca2:	bf00      	nop
 8008ca4:	e002      	b.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8008ca6:	bf00      	nop
 8008ca8:	e000      	b.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8008caa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d10a      	bne.n	8008cca <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8008cb4:	4b3a      	ldr	r3, [pc, #232]	@ (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008cb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cb8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8008cbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008cc2:	4a37      	ldr	r2, [pc, #220]	@ (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008cc4:	430b      	orrs	r3, r1
 8008cc6:	6513      	str	r3, [r2, #80]	@ 0x50
 8008cc8:	e003      	b.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008cce:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8008cd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cda:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8008cde:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008ce8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8008cec:	460b      	mov	r3, r1
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	d05c      	beq.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8008cf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008cf8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008cfc:	d03b      	beq.n	8008d76 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008cfe:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008d02:	d834      	bhi.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8008d04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d08:	d037      	beq.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8008d0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d0e:	d82e      	bhi.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8008d10:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008d14:	d033      	beq.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008d16:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008d1a:	d828      	bhi.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8008d1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d20:	d01a      	beq.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8008d22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d26:	d822      	bhi.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d003      	beq.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8008d2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d30:	d007      	beq.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8008d32:	e01c      	b.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d34:	4b1a      	ldr	r3, [pc, #104]	@ (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d38:	4a19      	ldr	r2, [pc, #100]	@ (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8008d40:	e01e      	b.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d46:	3308      	adds	r3, #8
 8008d48:	2100      	movs	r1, #0
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f001 fb2a 	bl	800a3a4 <RCCEx_PLL2_Config>
 8008d50:	4603      	mov	r3, r0
 8008d52:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8008d56:	e013      	b.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008d58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d5c:	3328      	adds	r3, #40	@ 0x28
 8008d5e:	2100      	movs	r1, #0
 8008d60:	4618      	mov	r0, r3
 8008d62:	f001 fbd1 	bl	800a508 <RCCEx_PLL3_Config>
 8008d66:	4603      	mov	r3, r0
 8008d68:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8008d6c:	e008      	b.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008d74:	e004      	b.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8008d76:	bf00      	nop
 8008d78:	e002      	b.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8008d7a:	bf00      	nop
 8008d7c:	e000      	b.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8008d7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d80:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d10d      	bne.n	8008da4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8008d88:	4b05      	ldr	r3, [pc, #20]	@ (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d8c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8008d90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d96:	4a02      	ldr	r2, [pc, #8]	@ (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d98:	430b      	orrs	r3, r1
 8008d9a:	6513      	str	r3, [r2, #80]	@ 0x50
 8008d9c:	e006      	b.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x300>
 8008d9e:	bf00      	nop
 8008da0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008da4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008da8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008dac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008db8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008dc2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8008dc6:	460b      	mov	r3, r1
 8008dc8:	4313      	orrs	r3, r2
 8008dca:	d03a      	beq.n	8008e42 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8008dcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008dd2:	2b30      	cmp	r3, #48	@ 0x30
 8008dd4:	d01f      	beq.n	8008e16 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8008dd6:	2b30      	cmp	r3, #48	@ 0x30
 8008dd8:	d819      	bhi.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8008dda:	2b20      	cmp	r3, #32
 8008ddc:	d00c      	beq.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8008dde:	2b20      	cmp	r3, #32
 8008de0:	d815      	bhi.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d019      	beq.n	8008e1a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008de6:	2b10      	cmp	r3, #16
 8008de8:	d111      	bne.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008dea:	4bae      	ldr	r3, [pc, #696]	@ (80090a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dee:	4aad      	ldr	r2, [pc, #692]	@ (80090a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008df0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008df4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008df6:	e011      	b.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008df8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dfc:	3308      	adds	r3, #8
 8008dfe:	2102      	movs	r1, #2
 8008e00:	4618      	mov	r0, r3
 8008e02:	f001 facf 	bl	800a3a4 <RCCEx_PLL2_Config>
 8008e06:	4603      	mov	r3, r0
 8008e08:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008e0c:	e006      	b.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008e14:	e002      	b.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8008e16:	bf00      	nop
 8008e18:	e000      	b.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8008e1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e1c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d10a      	bne.n	8008e3a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008e24:	4b9f      	ldr	r3, [pc, #636]	@ (80090a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008e26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e28:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008e2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e32:	4a9c      	ldr	r2, [pc, #624]	@ (80090a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008e34:	430b      	orrs	r3, r1
 8008e36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008e38:	e003      	b.n	8008e42 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e3a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e3e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008e42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e4a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008e4e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008e52:	2300      	movs	r3, #0
 8008e54:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008e58:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	d051      	beq.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008e62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e68:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008e6c:	d035      	beq.n	8008eda <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8008e6e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008e72:	d82e      	bhi.n	8008ed2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008e74:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008e78:	d031      	beq.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0x432>
 8008e7a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008e7e:	d828      	bhi.n	8008ed2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008e80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e84:	d01a      	beq.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x410>
 8008e86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e8a:	d822      	bhi.n	8008ed2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d003      	beq.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8008e90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e94:	d007      	beq.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8008e96:	e01c      	b.n	8008ed2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e98:	4b82      	ldr	r3, [pc, #520]	@ (80090a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e9c:	4a81      	ldr	r2, [pc, #516]	@ (80090a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008e9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ea2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008ea4:	e01c      	b.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008ea6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008eaa:	3308      	adds	r3, #8
 8008eac:	2100      	movs	r1, #0
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f001 fa78 	bl	800a3a4 <RCCEx_PLL2_Config>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008eba:	e011      	b.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008ebc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ec0:	3328      	adds	r3, #40	@ 0x28
 8008ec2:	2100      	movs	r1, #0
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f001 fb1f 	bl	800a508 <RCCEx_PLL3_Config>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008ed0:	e006      	b.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008ed8:	e002      	b.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8008eda:	bf00      	nop
 8008edc:	e000      	b.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8008ede:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ee0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d10a      	bne.n	8008efe <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008ee8:	4b6e      	ldr	r3, [pc, #440]	@ (80090a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008eea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008eec:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008ef0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ef4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ef6:	4a6b      	ldr	r2, [pc, #428]	@ (80090a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008ef8:	430b      	orrs	r3, r1
 8008efa:	6513      	str	r3, [r2, #80]	@ 0x50
 8008efc:	e003      	b.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008efe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f02:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008f06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f0e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008f12:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008f16:	2300      	movs	r3, #0
 8008f18:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008f1c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008f20:	460b      	mov	r3, r1
 8008f22:	4313      	orrs	r3, r2
 8008f24:	d053      	beq.n	8008fce <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008f26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008f2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008f30:	d033      	beq.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8008f32:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008f36:	d82c      	bhi.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008f38:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008f3c:	d02f      	beq.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8008f3e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008f42:	d826      	bhi.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008f44:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008f48:	d02b      	beq.n	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008f4a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008f4e:	d820      	bhi.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008f50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f54:	d012      	beq.n	8008f7c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8008f56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f5a:	d81a      	bhi.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d022      	beq.n	8008fa6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8008f60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f64:	d115      	bne.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008f66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f6a:	3308      	adds	r3, #8
 8008f6c:	2101      	movs	r1, #1
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f001 fa18 	bl	800a3a4 <RCCEx_PLL2_Config>
 8008f74:	4603      	mov	r3, r0
 8008f76:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008f7a:	e015      	b.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008f7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f80:	3328      	adds	r3, #40	@ 0x28
 8008f82:	2101      	movs	r1, #1
 8008f84:	4618      	mov	r0, r3
 8008f86:	f001 fabf 	bl	800a508 <RCCEx_PLL3_Config>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008f90:	e00a      	b.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f92:	2301      	movs	r3, #1
 8008f94:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008f98:	e006      	b.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8008f9a:	bf00      	nop
 8008f9c:	e004      	b.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8008f9e:	bf00      	nop
 8008fa0:	e002      	b.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8008fa2:	bf00      	nop
 8008fa4:	e000      	b.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8008fa6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fa8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d10a      	bne.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008fb0:	4b3c      	ldr	r3, [pc, #240]	@ (80090a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008fb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fb4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008fb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fbc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008fbe:	4a39      	ldr	r2, [pc, #228]	@ (80090a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008fc0:	430b      	orrs	r3, r1
 8008fc2:	6513      	str	r3, [r2, #80]	@ 0x50
 8008fc4:	e003      	b.n	8008fce <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fc6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008fca:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008fce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008fda:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008fde:	2300      	movs	r3, #0
 8008fe0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008fe4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008fe8:	460b      	mov	r3, r1
 8008fea:	4313      	orrs	r3, r2
 8008fec:	d060      	beq.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008fee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ff2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008ff6:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8008ffa:	d039      	beq.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8008ffc:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8009000:	d832      	bhi.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8009002:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009006:	d035      	beq.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8009008:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800900c:	d82c      	bhi.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800900e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009012:	d031      	beq.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8009014:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009018:	d826      	bhi.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800901a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800901e:	d02d      	beq.n	800907c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8009020:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009024:	d820      	bhi.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8009026:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800902a:	d012      	beq.n	8009052 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800902c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009030:	d81a      	bhi.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8009032:	2b00      	cmp	r3, #0
 8009034:	d024      	beq.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009036:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800903a:	d115      	bne.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800903c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009040:	3308      	adds	r3, #8
 8009042:	2101      	movs	r1, #1
 8009044:	4618      	mov	r0, r3
 8009046:	f001 f9ad 	bl	800a3a4 <RCCEx_PLL2_Config>
 800904a:	4603      	mov	r3, r0
 800904c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009050:	e017      	b.n	8009082 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009052:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009056:	3328      	adds	r3, #40	@ 0x28
 8009058:	2101      	movs	r1, #1
 800905a:	4618      	mov	r0, r3
 800905c:	f001 fa54 	bl	800a508 <RCCEx_PLL3_Config>
 8009060:	4603      	mov	r3, r0
 8009062:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009066:	e00c      	b.n	8009082 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009068:	2301      	movs	r3, #1
 800906a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800906e:	e008      	b.n	8009082 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009070:	bf00      	nop
 8009072:	e006      	b.n	8009082 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009074:	bf00      	nop
 8009076:	e004      	b.n	8009082 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009078:	bf00      	nop
 800907a:	e002      	b.n	8009082 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800907c:	bf00      	nop
 800907e:	e000      	b.n	8009082 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009080:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009082:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009086:	2b00      	cmp	r3, #0
 8009088:	d10e      	bne.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800908a:	4b06      	ldr	r3, [pc, #24]	@ (80090a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800908c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800908e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009092:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009096:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800909a:	4a02      	ldr	r2, [pc, #8]	@ (80090a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800909c:	430b      	orrs	r3, r1
 800909e:	6593      	str	r3, [r2, #88]	@ 0x58
 80090a0:	e006      	b.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80090a2:	bf00      	nop
 80090a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80090ac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80090b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80090bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80090c0:	2300      	movs	r3, #0
 80090c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80090c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80090ca:	460b      	mov	r3, r1
 80090cc:	4313      	orrs	r3, r2
 80090ce:	d037      	beq.n	8009140 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80090d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80090d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090da:	d00e      	beq.n	80090fa <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80090dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090e0:	d816      	bhi.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d018      	beq.n	8009118 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80090e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80090ea:	d111      	bne.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090ec:	4bc4      	ldr	r3, [pc, #784]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80090ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090f0:	4ac3      	ldr	r2, [pc, #780]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80090f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80090f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80090f8:	e00f      	b.n	800911a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80090fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090fe:	3308      	adds	r3, #8
 8009100:	2101      	movs	r1, #1
 8009102:	4618      	mov	r0, r3
 8009104:	f001 f94e 	bl	800a3a4 <RCCEx_PLL2_Config>
 8009108:	4603      	mov	r3, r0
 800910a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800910e:	e004      	b.n	800911a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009110:	2301      	movs	r3, #1
 8009112:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009116:	e000      	b.n	800911a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8009118:	bf00      	nop
    }

    if (ret == HAL_OK)
 800911a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800911e:	2b00      	cmp	r3, #0
 8009120:	d10a      	bne.n	8009138 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009122:	4bb7      	ldr	r3, [pc, #732]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009124:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009126:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800912a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800912e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009130:	4ab3      	ldr	r2, [pc, #716]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009132:	430b      	orrs	r3, r1
 8009134:	6513      	str	r3, [r2, #80]	@ 0x50
 8009136:	e003      	b.n	8009140 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009138:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800913c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009140:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009148:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800914c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009150:	2300      	movs	r3, #0
 8009152:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009156:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800915a:	460b      	mov	r3, r1
 800915c:	4313      	orrs	r3, r2
 800915e:	d039      	beq.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009160:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009164:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009166:	2b03      	cmp	r3, #3
 8009168:	d81c      	bhi.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800916a:	a201      	add	r2, pc, #4	@ (adr r2, 8009170 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800916c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009170:	080091ad 	.word	0x080091ad
 8009174:	08009181 	.word	0x08009181
 8009178:	0800918f 	.word	0x0800918f
 800917c:	080091ad 	.word	0x080091ad
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009180:	4b9f      	ldr	r3, [pc, #636]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009184:	4a9e      	ldr	r2, [pc, #632]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009186:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800918a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800918c:	e00f      	b.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800918e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009192:	3308      	adds	r3, #8
 8009194:	2102      	movs	r1, #2
 8009196:	4618      	mov	r0, r3
 8009198:	f001 f904 	bl	800a3a4 <RCCEx_PLL2_Config>
 800919c:	4603      	mov	r3, r0
 800919e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80091a2:	e004      	b.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80091a4:	2301      	movs	r3, #1
 80091a6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80091aa:	e000      	b.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80091ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091ae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d10a      	bne.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80091b6:	4b92      	ldr	r3, [pc, #584]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80091b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80091ba:	f023 0103 	bic.w	r1, r3, #3
 80091be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80091c4:	4a8e      	ldr	r2, [pc, #568]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80091c6:	430b      	orrs	r3, r1
 80091c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80091ca:	e003      	b.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091cc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80091d0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80091d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091dc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80091e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80091e4:	2300      	movs	r3, #0
 80091e6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80091ea:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80091ee:	460b      	mov	r3, r1
 80091f0:	4313      	orrs	r3, r2
 80091f2:	f000 8099 	beq.w	8009328 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80091f6:	4b83      	ldr	r3, [pc, #524]	@ (8009404 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	4a82      	ldr	r2, [pc, #520]	@ (8009404 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80091fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009200:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009202:	f7f8 fdd1 	bl	8001da8 <HAL_GetTick>
 8009206:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800920a:	e00b      	b.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800920c:	f7f8 fdcc 	bl	8001da8 <HAL_GetTick>
 8009210:	4602      	mov	r2, r0
 8009212:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009216:	1ad3      	subs	r3, r2, r3
 8009218:	2b64      	cmp	r3, #100	@ 0x64
 800921a:	d903      	bls.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800921c:	2303      	movs	r3, #3
 800921e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009222:	e005      	b.n	8009230 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009224:	4b77      	ldr	r3, [pc, #476]	@ (8009404 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800922c:	2b00      	cmp	r3, #0
 800922e:	d0ed      	beq.n	800920c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8009230:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009234:	2b00      	cmp	r3, #0
 8009236:	d173      	bne.n	8009320 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009238:	4b71      	ldr	r3, [pc, #452]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800923a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800923c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009240:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009244:	4053      	eors	r3, r2
 8009246:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800924a:	2b00      	cmp	r3, #0
 800924c:	d015      	beq.n	800927a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800924e:	4b6c      	ldr	r3, [pc, #432]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009252:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009256:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800925a:	4b69      	ldr	r3, [pc, #420]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800925c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800925e:	4a68      	ldr	r2, [pc, #416]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009260:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009264:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009266:	4b66      	ldr	r3, [pc, #408]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009268:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800926a:	4a65      	ldr	r2, [pc, #404]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800926c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009270:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009272:	4a63      	ldr	r2, [pc, #396]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009274:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009278:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800927a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800927e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009282:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009286:	d118      	bne.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009288:	f7f8 fd8e 	bl	8001da8 <HAL_GetTick>
 800928c:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009290:	e00d      	b.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009292:	f7f8 fd89 	bl	8001da8 <HAL_GetTick>
 8009296:	4602      	mov	r2, r0
 8009298:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800929c:	1ad2      	subs	r2, r2, r3
 800929e:	f241 3388 	movw	r3, #5000	@ 0x1388
 80092a2:	429a      	cmp	r2, r3
 80092a4:	d903      	bls.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80092a6:	2303      	movs	r3, #3
 80092a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 80092ac:	e005      	b.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80092ae:	4b54      	ldr	r3, [pc, #336]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80092b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092b2:	f003 0302 	and.w	r3, r3, #2
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d0eb      	beq.n	8009292 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80092ba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d129      	bne.n	8009316 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80092c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80092ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80092ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80092d2:	d10e      	bne.n	80092f2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80092d4:	4b4a      	ldr	r3, [pc, #296]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80092d6:	691b      	ldr	r3, [r3, #16]
 80092d8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80092dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80092e4:	091a      	lsrs	r2, r3, #4
 80092e6:	4b48      	ldr	r3, [pc, #288]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80092e8:	4013      	ands	r3, r2
 80092ea:	4a45      	ldr	r2, [pc, #276]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80092ec:	430b      	orrs	r3, r1
 80092ee:	6113      	str	r3, [r2, #16]
 80092f0:	e005      	b.n	80092fe <HAL_RCCEx_PeriphCLKConfig+0x852>
 80092f2:	4b43      	ldr	r3, [pc, #268]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80092f4:	691b      	ldr	r3, [r3, #16]
 80092f6:	4a42      	ldr	r2, [pc, #264]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80092f8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80092fc:	6113      	str	r3, [r2, #16]
 80092fe:	4b40      	ldr	r3, [pc, #256]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009300:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009302:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009306:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800930a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800930e:	4a3c      	ldr	r2, [pc, #240]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009310:	430b      	orrs	r3, r1
 8009312:	6713      	str	r3, [r2, #112]	@ 0x70
 8009314:	e008      	b.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009316:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800931a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800931e:	e003      	b.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009320:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009324:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009328:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800932c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009330:	f002 0301 	and.w	r3, r2, #1
 8009334:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009338:	2300      	movs	r3, #0
 800933a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800933e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009342:	460b      	mov	r3, r1
 8009344:	4313      	orrs	r3, r2
 8009346:	f000 8090 	beq.w	800946a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800934a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800934e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009352:	2b28      	cmp	r3, #40	@ 0x28
 8009354:	d870      	bhi.n	8009438 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8009356:	a201      	add	r2, pc, #4	@ (adr r2, 800935c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8009358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800935c:	08009441 	.word	0x08009441
 8009360:	08009439 	.word	0x08009439
 8009364:	08009439 	.word	0x08009439
 8009368:	08009439 	.word	0x08009439
 800936c:	08009439 	.word	0x08009439
 8009370:	08009439 	.word	0x08009439
 8009374:	08009439 	.word	0x08009439
 8009378:	08009439 	.word	0x08009439
 800937c:	0800940d 	.word	0x0800940d
 8009380:	08009439 	.word	0x08009439
 8009384:	08009439 	.word	0x08009439
 8009388:	08009439 	.word	0x08009439
 800938c:	08009439 	.word	0x08009439
 8009390:	08009439 	.word	0x08009439
 8009394:	08009439 	.word	0x08009439
 8009398:	08009439 	.word	0x08009439
 800939c:	08009423 	.word	0x08009423
 80093a0:	08009439 	.word	0x08009439
 80093a4:	08009439 	.word	0x08009439
 80093a8:	08009439 	.word	0x08009439
 80093ac:	08009439 	.word	0x08009439
 80093b0:	08009439 	.word	0x08009439
 80093b4:	08009439 	.word	0x08009439
 80093b8:	08009439 	.word	0x08009439
 80093bc:	08009441 	.word	0x08009441
 80093c0:	08009439 	.word	0x08009439
 80093c4:	08009439 	.word	0x08009439
 80093c8:	08009439 	.word	0x08009439
 80093cc:	08009439 	.word	0x08009439
 80093d0:	08009439 	.word	0x08009439
 80093d4:	08009439 	.word	0x08009439
 80093d8:	08009439 	.word	0x08009439
 80093dc:	08009441 	.word	0x08009441
 80093e0:	08009439 	.word	0x08009439
 80093e4:	08009439 	.word	0x08009439
 80093e8:	08009439 	.word	0x08009439
 80093ec:	08009439 	.word	0x08009439
 80093f0:	08009439 	.word	0x08009439
 80093f4:	08009439 	.word	0x08009439
 80093f8:	08009439 	.word	0x08009439
 80093fc:	08009441 	.word	0x08009441
 8009400:	58024400 	.word	0x58024400
 8009404:	58024800 	.word	0x58024800
 8009408:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800940c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009410:	3308      	adds	r3, #8
 8009412:	2101      	movs	r1, #1
 8009414:	4618      	mov	r0, r3
 8009416:	f000 ffc5 	bl	800a3a4 <RCCEx_PLL2_Config>
 800941a:	4603      	mov	r3, r0
 800941c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009420:	e00f      	b.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009422:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009426:	3328      	adds	r3, #40	@ 0x28
 8009428:	2101      	movs	r1, #1
 800942a:	4618      	mov	r0, r3
 800942c:	f001 f86c 	bl	800a508 <RCCEx_PLL3_Config>
 8009430:	4603      	mov	r3, r0
 8009432:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009436:	e004      	b.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009438:	2301      	movs	r3, #1
 800943a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800943e:	e000      	b.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8009440:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009442:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009446:	2b00      	cmp	r3, #0
 8009448:	d10b      	bne.n	8009462 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800944a:	4bc0      	ldr	r3, [pc, #768]	@ (800974c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800944c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800944e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009452:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009456:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800945a:	4abc      	ldr	r2, [pc, #752]	@ (800974c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800945c:	430b      	orrs	r3, r1
 800945e:	6553      	str	r3, [r2, #84]	@ 0x54
 8009460:	e003      	b.n	800946a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009462:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009466:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800946a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800946e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009472:	f002 0302 	and.w	r3, r2, #2
 8009476:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800947a:	2300      	movs	r3, #0
 800947c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009480:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009484:	460b      	mov	r3, r1
 8009486:	4313      	orrs	r3, r2
 8009488:	d043      	beq.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800948a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800948e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009492:	2b05      	cmp	r3, #5
 8009494:	d824      	bhi.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8009496:	a201      	add	r2, pc, #4	@ (adr r2, 800949c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8009498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800949c:	080094e9 	.word	0x080094e9
 80094a0:	080094b5 	.word	0x080094b5
 80094a4:	080094cb 	.word	0x080094cb
 80094a8:	080094e9 	.word	0x080094e9
 80094ac:	080094e9 	.word	0x080094e9
 80094b0:	080094e9 	.word	0x080094e9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80094b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094b8:	3308      	adds	r3, #8
 80094ba:	2101      	movs	r1, #1
 80094bc:	4618      	mov	r0, r3
 80094be:	f000 ff71 	bl	800a3a4 <RCCEx_PLL2_Config>
 80094c2:	4603      	mov	r3, r0
 80094c4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80094c8:	e00f      	b.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80094ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094ce:	3328      	adds	r3, #40	@ 0x28
 80094d0:	2101      	movs	r1, #1
 80094d2:	4618      	mov	r0, r3
 80094d4:	f001 f818 	bl	800a508 <RCCEx_PLL3_Config>
 80094d8:	4603      	mov	r3, r0
 80094da:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80094de:	e004      	b.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80094e0:	2301      	movs	r3, #1
 80094e2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80094e6:	e000      	b.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80094e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094ea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d10b      	bne.n	800950a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80094f2:	4b96      	ldr	r3, [pc, #600]	@ (800974c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80094f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094f6:	f023 0107 	bic.w	r1, r3, #7
 80094fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009502:	4a92      	ldr	r2, [pc, #584]	@ (800974c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009504:	430b      	orrs	r3, r1
 8009506:	6553      	str	r3, [r2, #84]	@ 0x54
 8009508:	e003      	b.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800950a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800950e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009512:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800951a:	f002 0304 	and.w	r3, r2, #4
 800951e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009522:	2300      	movs	r3, #0
 8009524:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009528:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800952c:	460b      	mov	r3, r1
 800952e:	4313      	orrs	r3, r2
 8009530:	d043      	beq.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009532:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009536:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800953a:	2b05      	cmp	r3, #5
 800953c:	d824      	bhi.n	8009588 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800953e:	a201      	add	r2, pc, #4	@ (adr r2, 8009544 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8009540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009544:	08009591 	.word	0x08009591
 8009548:	0800955d 	.word	0x0800955d
 800954c:	08009573 	.word	0x08009573
 8009550:	08009591 	.word	0x08009591
 8009554:	08009591 	.word	0x08009591
 8009558:	08009591 	.word	0x08009591
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800955c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009560:	3308      	adds	r3, #8
 8009562:	2101      	movs	r1, #1
 8009564:	4618      	mov	r0, r3
 8009566:	f000 ff1d 	bl	800a3a4 <RCCEx_PLL2_Config>
 800956a:	4603      	mov	r3, r0
 800956c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009570:	e00f      	b.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009572:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009576:	3328      	adds	r3, #40	@ 0x28
 8009578:	2101      	movs	r1, #1
 800957a:	4618      	mov	r0, r3
 800957c:	f000 ffc4 	bl	800a508 <RCCEx_PLL3_Config>
 8009580:	4603      	mov	r3, r0
 8009582:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009586:	e004      	b.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009588:	2301      	movs	r3, #1
 800958a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800958e:	e000      	b.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8009590:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009592:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009596:	2b00      	cmp	r3, #0
 8009598:	d10b      	bne.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800959a:	4b6c      	ldr	r3, [pc, #432]	@ (800974c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800959c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800959e:	f023 0107 	bic.w	r1, r3, #7
 80095a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80095aa:	4a68      	ldr	r2, [pc, #416]	@ (800974c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80095ac:	430b      	orrs	r3, r1
 80095ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80095b0:	e003      	b.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095b2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80095b6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80095ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c2:	f002 0320 	and.w	r3, r2, #32
 80095c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80095ca:	2300      	movs	r3, #0
 80095cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80095d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80095d4:	460b      	mov	r3, r1
 80095d6:	4313      	orrs	r3, r2
 80095d8:	d055      	beq.n	8009686 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80095da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80095e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80095e6:	d033      	beq.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80095e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80095ec:	d82c      	bhi.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80095ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095f2:	d02f      	beq.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80095f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095f8:	d826      	bhi.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80095fa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80095fe:	d02b      	beq.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8009600:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009604:	d820      	bhi.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8009606:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800960a:	d012      	beq.n	8009632 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800960c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009610:	d81a      	bhi.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8009612:	2b00      	cmp	r3, #0
 8009614:	d022      	beq.n	800965c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8009616:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800961a:	d115      	bne.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800961c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009620:	3308      	adds	r3, #8
 8009622:	2100      	movs	r1, #0
 8009624:	4618      	mov	r0, r3
 8009626:	f000 febd 	bl	800a3a4 <RCCEx_PLL2_Config>
 800962a:	4603      	mov	r3, r0
 800962c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009630:	e015      	b.n	800965e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009632:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009636:	3328      	adds	r3, #40	@ 0x28
 8009638:	2102      	movs	r1, #2
 800963a:	4618      	mov	r0, r3
 800963c:	f000 ff64 	bl	800a508 <RCCEx_PLL3_Config>
 8009640:	4603      	mov	r3, r0
 8009642:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009646:	e00a      	b.n	800965e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009648:	2301      	movs	r3, #1
 800964a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800964e:	e006      	b.n	800965e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8009650:	bf00      	nop
 8009652:	e004      	b.n	800965e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8009654:	bf00      	nop
 8009656:	e002      	b.n	800965e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8009658:	bf00      	nop
 800965a:	e000      	b.n	800965e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800965c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800965e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009662:	2b00      	cmp	r3, #0
 8009664:	d10b      	bne.n	800967e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009666:	4b39      	ldr	r3, [pc, #228]	@ (800974c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009668:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800966a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800966e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009672:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009676:	4a35      	ldr	r2, [pc, #212]	@ (800974c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009678:	430b      	orrs	r3, r1
 800967a:	6553      	str	r3, [r2, #84]	@ 0x54
 800967c:	e003      	b.n	8009686 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800967e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009682:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009686:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800968a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800968e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009692:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009696:	2300      	movs	r3, #0
 8009698:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800969c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80096a0:	460b      	mov	r3, r1
 80096a2:	4313      	orrs	r3, r2
 80096a4:	d058      	beq.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80096a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80096ae:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80096b2:	d033      	beq.n	800971c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80096b4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80096b8:	d82c      	bhi.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80096ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096be:	d02f      	beq.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80096c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096c4:	d826      	bhi.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80096c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80096ca:	d02b      	beq.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80096cc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80096d0:	d820      	bhi.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80096d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80096d6:	d012      	beq.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80096d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80096dc:	d81a      	bhi.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d022      	beq.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80096e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80096e6:	d115      	bne.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80096e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096ec:	3308      	adds	r3, #8
 80096ee:	2100      	movs	r1, #0
 80096f0:	4618      	mov	r0, r3
 80096f2:	f000 fe57 	bl	800a3a4 <RCCEx_PLL2_Config>
 80096f6:	4603      	mov	r3, r0
 80096f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80096fc:	e015      	b.n	800972a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80096fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009702:	3328      	adds	r3, #40	@ 0x28
 8009704:	2102      	movs	r1, #2
 8009706:	4618      	mov	r0, r3
 8009708:	f000 fefe 	bl	800a508 <RCCEx_PLL3_Config>
 800970c:	4603      	mov	r3, r0
 800970e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009712:	e00a      	b.n	800972a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009714:	2301      	movs	r3, #1
 8009716:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800971a:	e006      	b.n	800972a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800971c:	bf00      	nop
 800971e:	e004      	b.n	800972a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8009720:	bf00      	nop
 8009722:	e002      	b.n	800972a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8009724:	bf00      	nop
 8009726:	e000      	b.n	800972a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8009728:	bf00      	nop
    }

    if (ret == HAL_OK)
 800972a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800972e:	2b00      	cmp	r3, #0
 8009730:	d10e      	bne.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009732:	4b06      	ldr	r3, [pc, #24]	@ (800974c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009736:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800973a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800973e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009742:	4a02      	ldr	r2, [pc, #8]	@ (800974c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009744:	430b      	orrs	r3, r1
 8009746:	6593      	str	r3, [r2, #88]	@ 0x58
 8009748:	e006      	b.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800974a:	bf00      	nop
 800974c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009750:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009754:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009758:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800975c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009760:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009764:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009768:	2300      	movs	r3, #0
 800976a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800976e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009772:	460b      	mov	r3, r1
 8009774:	4313      	orrs	r3, r2
 8009776:	d055      	beq.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009778:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800977c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009780:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009784:	d033      	beq.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8009786:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800978a:	d82c      	bhi.n	80097e6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800978c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009790:	d02f      	beq.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8009792:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009796:	d826      	bhi.n	80097e6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8009798:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800979c:	d02b      	beq.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800979e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80097a2:	d820      	bhi.n	80097e6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80097a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80097a8:	d012      	beq.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80097aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80097ae:	d81a      	bhi.n	80097e6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d022      	beq.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80097b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80097b8:	d115      	bne.n	80097e6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80097ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097be:	3308      	adds	r3, #8
 80097c0:	2100      	movs	r1, #0
 80097c2:	4618      	mov	r0, r3
 80097c4:	f000 fdee 	bl	800a3a4 <RCCEx_PLL2_Config>
 80097c8:	4603      	mov	r3, r0
 80097ca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80097ce:	e015      	b.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80097d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097d4:	3328      	adds	r3, #40	@ 0x28
 80097d6:	2102      	movs	r1, #2
 80097d8:	4618      	mov	r0, r3
 80097da:	f000 fe95 	bl	800a508 <RCCEx_PLL3_Config>
 80097de:	4603      	mov	r3, r0
 80097e0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80097e4:	e00a      	b.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097e6:	2301      	movs	r3, #1
 80097e8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80097ec:	e006      	b.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80097ee:	bf00      	nop
 80097f0:	e004      	b.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80097f2:	bf00      	nop
 80097f4:	e002      	b.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80097f6:	bf00      	nop
 80097f8:	e000      	b.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80097fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097fc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009800:	2b00      	cmp	r3, #0
 8009802:	d10b      	bne.n	800981c <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009804:	4ba1      	ldr	r3, [pc, #644]	@ (8009a8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009808:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800980c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009810:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009814:	4a9d      	ldr	r2, [pc, #628]	@ (8009a8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009816:	430b      	orrs	r3, r1
 8009818:	6593      	str	r3, [r2, #88]	@ 0x58
 800981a:	e003      	b.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800981c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009820:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009824:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982c:	f002 0308 	and.w	r3, r2, #8
 8009830:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009834:	2300      	movs	r3, #0
 8009836:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800983a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800983e:	460b      	mov	r3, r1
 8009840:	4313      	orrs	r3, r2
 8009842:	d01e      	beq.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009844:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009848:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800984c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009850:	d10c      	bne.n	800986c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009852:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009856:	3328      	adds	r3, #40	@ 0x28
 8009858:	2102      	movs	r1, #2
 800985a:	4618      	mov	r0, r3
 800985c:	f000 fe54 	bl	800a508 <RCCEx_PLL3_Config>
 8009860:	4603      	mov	r3, r0
 8009862:	2b00      	cmp	r3, #0
 8009864:	d002      	beq.n	800986c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8009866:	2301      	movs	r3, #1
 8009868:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800986c:	4b87      	ldr	r3, [pc, #540]	@ (8009a8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800986e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009870:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009874:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009878:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800987c:	4a83      	ldr	r2, [pc, #524]	@ (8009a8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800987e:	430b      	orrs	r3, r1
 8009880:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009882:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800988a:	f002 0310 	and.w	r3, r2, #16
 800988e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009892:	2300      	movs	r3, #0
 8009894:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009898:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800989c:	460b      	mov	r3, r1
 800989e:	4313      	orrs	r3, r2
 80098a0:	d01e      	beq.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80098a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80098aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098ae:	d10c      	bne.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80098b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098b4:	3328      	adds	r3, #40	@ 0x28
 80098b6:	2102      	movs	r1, #2
 80098b8:	4618      	mov	r0, r3
 80098ba:	f000 fe25 	bl	800a508 <RCCEx_PLL3_Config>
 80098be:	4603      	mov	r3, r0
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d002      	beq.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80098c4:	2301      	movs	r3, #1
 80098c6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80098ca:	4b70      	ldr	r3, [pc, #448]	@ (8009a8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80098cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098ce:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80098d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80098da:	4a6c      	ldr	r2, [pc, #432]	@ (8009a8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80098dc:	430b      	orrs	r3, r1
 80098de:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80098e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80098ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80098f0:	2300      	movs	r3, #0
 80098f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80098f6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80098fa:	460b      	mov	r3, r1
 80098fc:	4313      	orrs	r3, r2
 80098fe:	d03e      	beq.n	800997e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009900:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009904:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009908:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800990c:	d022      	beq.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800990e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009912:	d81b      	bhi.n	800994c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8009914:	2b00      	cmp	r3, #0
 8009916:	d003      	beq.n	8009920 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8009918:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800991c:	d00b      	beq.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800991e:	e015      	b.n	800994c <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009920:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009924:	3308      	adds	r3, #8
 8009926:	2100      	movs	r1, #0
 8009928:	4618      	mov	r0, r3
 800992a:	f000 fd3b 	bl	800a3a4 <RCCEx_PLL2_Config>
 800992e:	4603      	mov	r3, r0
 8009930:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009934:	e00f      	b.n	8009956 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009936:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800993a:	3328      	adds	r3, #40	@ 0x28
 800993c:	2102      	movs	r1, #2
 800993e:	4618      	mov	r0, r3
 8009940:	f000 fde2 	bl	800a508 <RCCEx_PLL3_Config>
 8009944:	4603      	mov	r3, r0
 8009946:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800994a:	e004      	b.n	8009956 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800994c:	2301      	movs	r3, #1
 800994e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009952:	e000      	b.n	8009956 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8009954:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009956:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800995a:	2b00      	cmp	r3, #0
 800995c:	d10b      	bne.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800995e:	4b4b      	ldr	r3, [pc, #300]	@ (8009a8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009962:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009966:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800996a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800996e:	4a47      	ldr	r2, [pc, #284]	@ (8009a8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009970:	430b      	orrs	r3, r1
 8009972:	6593      	str	r3, [r2, #88]	@ 0x58
 8009974:	e003      	b.n	800997e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009976:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800997a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800997e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009986:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800998a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800998c:	2300      	movs	r3, #0
 800998e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009990:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009994:	460b      	mov	r3, r1
 8009996:	4313      	orrs	r3, r2
 8009998:	d03b      	beq.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800999a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800999e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099a2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80099a6:	d01f      	beq.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80099a8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80099ac:	d818      	bhi.n	80099e0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80099ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80099b2:	d003      	beq.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80099b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80099b8:	d007      	beq.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80099ba:	e011      	b.n	80099e0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099bc:	4b33      	ldr	r3, [pc, #204]	@ (8009a8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80099be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099c0:	4a32      	ldr	r2, [pc, #200]	@ (8009a8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80099c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80099c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80099c8:	e00f      	b.n	80099ea <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80099ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099ce:	3328      	adds	r3, #40	@ 0x28
 80099d0:	2101      	movs	r1, #1
 80099d2:	4618      	mov	r0, r3
 80099d4:	f000 fd98 	bl	800a508 <RCCEx_PLL3_Config>
 80099d8:	4603      	mov	r3, r0
 80099da:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80099de:	e004      	b.n	80099ea <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80099e0:	2301      	movs	r3, #1
 80099e2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80099e6:	e000      	b.n	80099ea <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80099e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099ea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d10b      	bne.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80099f2:	4b26      	ldr	r3, [pc, #152]	@ (8009a8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80099f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099f6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80099fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a02:	4a22      	ldr	r2, [pc, #136]	@ (8009a8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009a04:	430b      	orrs	r3, r1
 8009a06:	6553      	str	r3, [r2, #84]	@ 0x54
 8009a08:	e003      	b.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a0a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009a0e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009a12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a1a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009a1e:	673b      	str	r3, [r7, #112]	@ 0x70
 8009a20:	2300      	movs	r3, #0
 8009a22:	677b      	str	r3, [r7, #116]	@ 0x74
 8009a24:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009a28:	460b      	mov	r3, r1
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	d034      	beq.n	8009a98 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009a2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d003      	beq.n	8009a40 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8009a38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a3c:	d007      	beq.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8009a3e:	e011      	b.n	8009a64 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a40:	4b12      	ldr	r3, [pc, #72]	@ (8009a8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a44:	4a11      	ldr	r2, [pc, #68]	@ (8009a8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009a46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009a4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009a4c:	e00e      	b.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009a4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a52:	3308      	adds	r3, #8
 8009a54:	2102      	movs	r1, #2
 8009a56:	4618      	mov	r0, r3
 8009a58:	f000 fca4 	bl	800a3a4 <RCCEx_PLL2_Config>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009a62:	e003      	b.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8009a64:	2301      	movs	r3, #1
 8009a66:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009a6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a6c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d10d      	bne.n	8009a90 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009a74:	4b05      	ldr	r3, [pc, #20]	@ (8009a8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009a76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a78:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009a7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a82:	4a02      	ldr	r2, [pc, #8]	@ (8009a8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009a84:	430b      	orrs	r3, r1
 8009a86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009a88:	e006      	b.n	8009a98 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8009a8a:	bf00      	nop
 8009a8c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a90:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009a94:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009a98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009aa4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009aaa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009aae:	460b      	mov	r3, r1
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	d00c      	beq.n	8009ace <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009ab4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ab8:	3328      	adds	r3, #40	@ 0x28
 8009aba:	2102      	movs	r1, #2
 8009abc:	4618      	mov	r0, r3
 8009abe:	f000 fd23 	bl	800a508 <RCCEx_PLL3_Config>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d002      	beq.n	8009ace <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009ace:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009ada:	663b      	str	r3, [r7, #96]	@ 0x60
 8009adc:	2300      	movs	r3, #0
 8009ade:	667b      	str	r3, [r7, #100]	@ 0x64
 8009ae0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009ae4:	460b      	mov	r3, r1
 8009ae6:	4313      	orrs	r3, r2
 8009ae8:	d038      	beq.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009aea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009af2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009af6:	d018      	beq.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8009af8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009afc:	d811      	bhi.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8009afe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b02:	d014      	beq.n	8009b2e <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8009b04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b08:	d80b      	bhi.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d011      	beq.n	8009b32 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8009b0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b12:	d106      	bne.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b14:	4bc3      	ldr	r3, [pc, #780]	@ (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b18:	4ac2      	ldr	r2, [pc, #776]	@ (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009b1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009b1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009b20:	e008      	b.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b22:	2301      	movs	r3, #1
 8009b24:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009b28:	e004      	b.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8009b2a:	bf00      	nop
 8009b2c:	e002      	b.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8009b2e:	bf00      	nop
 8009b30:	e000      	b.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8009b32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b34:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d10b      	bne.n	8009b54 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009b3c:	4bb9      	ldr	r3, [pc, #740]	@ (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009b3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b40:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009b44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b4c:	4ab5      	ldr	r2, [pc, #724]	@ (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009b4e:	430b      	orrs	r3, r1
 8009b50:	6553      	str	r3, [r2, #84]	@ 0x54
 8009b52:	e003      	b.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b54:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009b58:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009b5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b64:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009b68:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009b6e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009b72:	460b      	mov	r3, r1
 8009b74:	4313      	orrs	r3, r2
 8009b76:	d009      	beq.n	8009b8c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009b78:	4baa      	ldr	r3, [pc, #680]	@ (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009b7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b7c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009b80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b84:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009b86:	4aa7      	ldr	r2, [pc, #668]	@ (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009b88:	430b      	orrs	r3, r1
 8009b8a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009b8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b94:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009b98:	653b      	str	r3, [r7, #80]	@ 0x50
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	657b      	str	r3, [r7, #84]	@ 0x54
 8009b9e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009ba2:	460b      	mov	r3, r1
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	d009      	beq.n	8009bbc <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009ba8:	4b9e      	ldr	r3, [pc, #632]	@ (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009baa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009bac:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009bb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bb6:	4a9b      	ldr	r2, [pc, #620]	@ (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009bb8:	430b      	orrs	r3, r1
 8009bba:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8009bbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009bc8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009bca:	2300      	movs	r3, #0
 8009bcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009bce:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009bd2:	460b      	mov	r3, r1
 8009bd4:	4313      	orrs	r3, r2
 8009bd6:	d009      	beq.n	8009bec <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8009bd8:	4b92      	ldr	r3, [pc, #584]	@ (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009bda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bdc:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8009be0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009be4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009be6:	4a8f      	ldr	r2, [pc, #572]	@ (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009be8:	430b      	orrs	r3, r1
 8009bea:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009bec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009bf8:	643b      	str	r3, [r7, #64]	@ 0x40
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	647b      	str	r3, [r7, #68]	@ 0x44
 8009bfe:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009c02:	460b      	mov	r3, r1
 8009c04:	4313      	orrs	r3, r2
 8009c06:	d00e      	beq.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009c08:	4b86      	ldr	r3, [pc, #536]	@ (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009c0a:	691b      	ldr	r3, [r3, #16]
 8009c0c:	4a85      	ldr	r2, [pc, #532]	@ (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009c0e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009c12:	6113      	str	r3, [r2, #16]
 8009c14:	4b83      	ldr	r3, [pc, #524]	@ (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009c16:	6919      	ldr	r1, [r3, #16]
 8009c18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c1c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009c20:	4a80      	ldr	r2, [pc, #512]	@ (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009c22:	430b      	orrs	r3, r1
 8009c24:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009c26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c2e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009c32:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009c34:	2300      	movs	r3, #0
 8009c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009c38:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009c3c:	460b      	mov	r3, r1
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	d009      	beq.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009c42:	4b78      	ldr	r3, [pc, #480]	@ (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c46:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009c4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c50:	4a74      	ldr	r2, [pc, #464]	@ (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009c52:	430b      	orrs	r3, r1
 8009c54:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009c56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c5e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009c62:	633b      	str	r3, [r7, #48]	@ 0x30
 8009c64:	2300      	movs	r3, #0
 8009c66:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c68:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009c6c:	460b      	mov	r3, r1
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	d00a      	beq.n	8009c88 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009c72:	4b6c      	ldr	r3, [pc, #432]	@ (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009c74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c76:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009c7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009c82:	4a68      	ldr	r2, [pc, #416]	@ (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009c84:	430b      	orrs	r3, r1
 8009c86:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009c88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c90:	2100      	movs	r1, #0
 8009c92:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009c94:	f003 0301 	and.w	r3, r3, #1
 8009c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009c9a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009c9e:	460b      	mov	r3, r1
 8009ca0:	4313      	orrs	r3, r2
 8009ca2:	d011      	beq.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009ca4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ca8:	3308      	adds	r3, #8
 8009caa:	2100      	movs	r1, #0
 8009cac:	4618      	mov	r0, r3
 8009cae:	f000 fb79 	bl	800a3a4 <RCCEx_PLL2_Config>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009cb8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d003      	beq.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cc0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009cc4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009cc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd0:	2100      	movs	r1, #0
 8009cd2:	6239      	str	r1, [r7, #32]
 8009cd4:	f003 0302 	and.w	r3, r3, #2
 8009cd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8009cda:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009cde:	460b      	mov	r3, r1
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	d011      	beq.n	8009d08 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009ce4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ce8:	3308      	adds	r3, #8
 8009cea:	2101      	movs	r1, #1
 8009cec:	4618      	mov	r0, r3
 8009cee:	f000 fb59 	bl	800a3a4 <RCCEx_PLL2_Config>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009cf8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d003      	beq.n	8009d08 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d00:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009d04:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009d08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d10:	2100      	movs	r1, #0
 8009d12:	61b9      	str	r1, [r7, #24]
 8009d14:	f003 0304 	and.w	r3, r3, #4
 8009d18:	61fb      	str	r3, [r7, #28]
 8009d1a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009d1e:	460b      	mov	r3, r1
 8009d20:	4313      	orrs	r3, r2
 8009d22:	d011      	beq.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009d24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d28:	3308      	adds	r3, #8
 8009d2a:	2102      	movs	r1, #2
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f000 fb39 	bl	800a3a4 <RCCEx_PLL2_Config>
 8009d32:	4603      	mov	r3, r0
 8009d34:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009d38:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d003      	beq.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d40:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009d44:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009d48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d50:	2100      	movs	r1, #0
 8009d52:	6139      	str	r1, [r7, #16]
 8009d54:	f003 0308 	and.w	r3, r3, #8
 8009d58:	617b      	str	r3, [r7, #20]
 8009d5a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009d5e:	460b      	mov	r3, r1
 8009d60:	4313      	orrs	r3, r2
 8009d62:	d011      	beq.n	8009d88 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009d64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d68:	3328      	adds	r3, #40	@ 0x28
 8009d6a:	2100      	movs	r1, #0
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f000 fbcb 	bl	800a508 <RCCEx_PLL3_Config>
 8009d72:	4603      	mov	r3, r0
 8009d74:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8009d78:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d003      	beq.n	8009d88 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d80:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009d84:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009d88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d90:	2100      	movs	r1, #0
 8009d92:	60b9      	str	r1, [r7, #8]
 8009d94:	f003 0310 	and.w	r3, r3, #16
 8009d98:	60fb      	str	r3, [r7, #12]
 8009d9a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009d9e:	460b      	mov	r3, r1
 8009da0:	4313      	orrs	r3, r2
 8009da2:	d011      	beq.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009da4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009da8:	3328      	adds	r3, #40	@ 0x28
 8009daa:	2101      	movs	r1, #1
 8009dac:	4618      	mov	r0, r3
 8009dae:	f000 fbab 	bl	800a508 <RCCEx_PLL3_Config>
 8009db2:	4603      	mov	r3, r0
 8009db4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009db8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d003      	beq.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dc0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009dc4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009dc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dd0:	2100      	movs	r1, #0
 8009dd2:	6039      	str	r1, [r7, #0]
 8009dd4:	f003 0320 	and.w	r3, r3, #32
 8009dd8:	607b      	str	r3, [r7, #4]
 8009dda:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009dde:	460b      	mov	r3, r1
 8009de0:	4313      	orrs	r3, r2
 8009de2:	d011      	beq.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009de4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009de8:	3328      	adds	r3, #40	@ 0x28
 8009dea:	2102      	movs	r1, #2
 8009dec:	4618      	mov	r0, r3
 8009dee:	f000 fb8b 	bl	800a508 <RCCEx_PLL3_Config>
 8009df2:	4603      	mov	r3, r0
 8009df4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009df8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d003      	beq.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e00:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009e04:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8009e08:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d101      	bne.n	8009e14 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8009e10:	2300      	movs	r3, #0
 8009e12:	e000      	b.n	8009e16 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8009e14:	2301      	movs	r3, #1
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009e22:	bf00      	nop
 8009e24:	58024400 	.word	0x58024400

08009e28 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8009e2c:	f7fe fda0 	bl	8008970 <HAL_RCC_GetHCLKFreq>
 8009e30:	4602      	mov	r2, r0
 8009e32:	4b06      	ldr	r3, [pc, #24]	@ (8009e4c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009e34:	6a1b      	ldr	r3, [r3, #32]
 8009e36:	091b      	lsrs	r3, r3, #4
 8009e38:	f003 0307 	and.w	r3, r3, #7
 8009e3c:	4904      	ldr	r1, [pc, #16]	@ (8009e50 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009e3e:	5ccb      	ldrb	r3, [r1, r3]
 8009e40:	f003 031f 	and.w	r3, r3, #31
 8009e44:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	bd80      	pop	{r7, pc}
 8009e4c:	58024400 	.word	0x58024400
 8009e50:	08014124 	.word	0x08014124

08009e54 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009e54:	b480      	push	{r7}
 8009e56:	b089      	sub	sp, #36	@ 0x24
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009e5c:	4ba1      	ldr	r3, [pc, #644]	@ (800a0e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e60:	f003 0303 	and.w	r3, r3, #3
 8009e64:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009e66:	4b9f      	ldr	r3, [pc, #636]	@ (800a0e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e6a:	0b1b      	lsrs	r3, r3, #12
 8009e6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009e70:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009e72:	4b9c      	ldr	r3, [pc, #624]	@ (800a0e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e76:	091b      	lsrs	r3, r3, #4
 8009e78:	f003 0301 	and.w	r3, r3, #1
 8009e7c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009e7e:	4b99      	ldr	r3, [pc, #612]	@ (800a0e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e82:	08db      	lsrs	r3, r3, #3
 8009e84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009e88:	693a      	ldr	r2, [r7, #16]
 8009e8a:	fb02 f303 	mul.w	r3, r2, r3
 8009e8e:	ee07 3a90 	vmov	s15, r3
 8009e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	f000 8111 	beq.w	800a0c4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009ea2:	69bb      	ldr	r3, [r7, #24]
 8009ea4:	2b02      	cmp	r3, #2
 8009ea6:	f000 8083 	beq.w	8009fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009eaa:	69bb      	ldr	r3, [r7, #24]
 8009eac:	2b02      	cmp	r3, #2
 8009eae:	f200 80a1 	bhi.w	8009ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009eb2:	69bb      	ldr	r3, [r7, #24]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d003      	beq.n	8009ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009eb8:	69bb      	ldr	r3, [r7, #24]
 8009eba:	2b01      	cmp	r3, #1
 8009ebc:	d056      	beq.n	8009f6c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009ebe:	e099      	b.n	8009ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ec0:	4b88      	ldr	r3, [pc, #544]	@ (800a0e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f003 0320 	and.w	r3, r3, #32
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d02d      	beq.n	8009f28 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009ecc:	4b85      	ldr	r3, [pc, #532]	@ (800a0e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	08db      	lsrs	r3, r3, #3
 8009ed2:	f003 0303 	and.w	r3, r3, #3
 8009ed6:	4a84      	ldr	r2, [pc, #528]	@ (800a0e8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8009edc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	ee07 3a90 	vmov	s15, r3
 8009ee4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	ee07 3a90 	vmov	s15, r3
 8009eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ef2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ef6:	4b7b      	ldr	r3, [pc, #492]	@ (800a0e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009efa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009efe:	ee07 3a90 	vmov	s15, r3
 8009f02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f06:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f0a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a0ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009f0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f22:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009f26:	e087      	b.n	800a038 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	ee07 3a90 	vmov	s15, r3
 8009f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f32:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a0f0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009f36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f3a:	4b6a      	ldr	r3, [pc, #424]	@ (800a0e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f42:	ee07 3a90 	vmov	s15, r3
 8009f46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f4e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a0ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009f52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f6a:	e065      	b.n	800a038 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	ee07 3a90 	vmov	s15, r3
 8009f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f76:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a0f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009f7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f7e:	4b59      	ldr	r3, [pc, #356]	@ (800a0e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f86:	ee07 3a90 	vmov	s15, r3
 8009f8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f92:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a0ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009f96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009fa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009faa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009fae:	e043      	b.n	800a038 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	ee07 3a90 	vmov	s15, r3
 8009fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fba:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a0f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009fbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fc2:	4b48      	ldr	r3, [pc, #288]	@ (800a0e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fca:	ee07 3a90 	vmov	s15, r3
 8009fce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fd6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a0ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009fda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fe2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009fe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ff2:	e021      	b.n	800a038 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	ee07 3a90 	vmov	s15, r3
 8009ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ffe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a0f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a002:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a006:	4b37      	ldr	r3, [pc, #220]	@ (800a0e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a00a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a00e:	ee07 3a90 	vmov	s15, r3
 800a012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a016:	ed97 6a03 	vldr	s12, [r7, #12]
 800a01a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a0ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a01e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a022:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a026:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a02a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a02e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a032:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a036:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a038:	4b2a      	ldr	r3, [pc, #168]	@ (800a0e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a03a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a03c:	0a5b      	lsrs	r3, r3, #9
 800a03e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a042:	ee07 3a90 	vmov	s15, r3
 800a046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a04a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a04e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a052:	edd7 6a07 	vldr	s13, [r7, #28]
 800a056:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a05a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a05e:	ee17 2a90 	vmov	r2, s15
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a066:	4b1f      	ldr	r3, [pc, #124]	@ (800a0e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a06a:	0c1b      	lsrs	r3, r3, #16
 800a06c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a070:	ee07 3a90 	vmov	s15, r3
 800a074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a078:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a07c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a080:	edd7 6a07 	vldr	s13, [r7, #28]
 800a084:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a088:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a08c:	ee17 2a90 	vmov	r2, s15
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a094:	4b13      	ldr	r3, [pc, #76]	@ (800a0e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a098:	0e1b      	lsrs	r3, r3, #24
 800a09a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a09e:	ee07 3a90 	vmov	s15, r3
 800a0a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a0aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a0ae:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0ba:	ee17 2a90 	vmov	r2, s15
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a0c2:	e008      	b.n	800a0d6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	609a      	str	r2, [r3, #8]
}
 800a0d6:	bf00      	nop
 800a0d8:	3724      	adds	r7, #36	@ 0x24
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e0:	4770      	bx	lr
 800a0e2:	bf00      	nop
 800a0e4:	58024400 	.word	0x58024400
 800a0e8:	03d09000 	.word	0x03d09000
 800a0ec:	46000000 	.word	0x46000000
 800a0f0:	4c742400 	.word	0x4c742400
 800a0f4:	4a742400 	.word	0x4a742400
 800a0f8:	4bb71b00 	.word	0x4bb71b00

0800a0fc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b089      	sub	sp, #36	@ 0x24
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a104:	4ba1      	ldr	r3, [pc, #644]	@ (800a38c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a108:	f003 0303 	and.w	r3, r3, #3
 800a10c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a10e:	4b9f      	ldr	r3, [pc, #636]	@ (800a38c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a112:	0d1b      	lsrs	r3, r3, #20
 800a114:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a118:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a11a:	4b9c      	ldr	r3, [pc, #624]	@ (800a38c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a11c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a11e:	0a1b      	lsrs	r3, r3, #8
 800a120:	f003 0301 	and.w	r3, r3, #1
 800a124:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a126:	4b99      	ldr	r3, [pc, #612]	@ (800a38c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a12a:	08db      	lsrs	r3, r3, #3
 800a12c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a130:	693a      	ldr	r2, [r7, #16]
 800a132:	fb02 f303 	mul.w	r3, r2, r3
 800a136:	ee07 3a90 	vmov	s15, r3
 800a13a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a13e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	2b00      	cmp	r3, #0
 800a146:	f000 8111 	beq.w	800a36c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a14a:	69bb      	ldr	r3, [r7, #24]
 800a14c:	2b02      	cmp	r3, #2
 800a14e:	f000 8083 	beq.w	800a258 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a152:	69bb      	ldr	r3, [r7, #24]
 800a154:	2b02      	cmp	r3, #2
 800a156:	f200 80a1 	bhi.w	800a29c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a15a:	69bb      	ldr	r3, [r7, #24]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d003      	beq.n	800a168 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a160:	69bb      	ldr	r3, [r7, #24]
 800a162:	2b01      	cmp	r3, #1
 800a164:	d056      	beq.n	800a214 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a166:	e099      	b.n	800a29c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a168:	4b88      	ldr	r3, [pc, #544]	@ (800a38c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f003 0320 	and.w	r3, r3, #32
 800a170:	2b00      	cmp	r3, #0
 800a172:	d02d      	beq.n	800a1d0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a174:	4b85      	ldr	r3, [pc, #532]	@ (800a38c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	08db      	lsrs	r3, r3, #3
 800a17a:	f003 0303 	and.w	r3, r3, #3
 800a17e:	4a84      	ldr	r2, [pc, #528]	@ (800a390 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a180:	fa22 f303 	lsr.w	r3, r2, r3
 800a184:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	ee07 3a90 	vmov	s15, r3
 800a18c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a190:	697b      	ldr	r3, [r7, #20]
 800a192:	ee07 3a90 	vmov	s15, r3
 800a196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a19a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a19e:	4b7b      	ldr	r3, [pc, #492]	@ (800a38c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1a6:	ee07 3a90 	vmov	s15, r3
 800a1aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1b2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a394 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a1b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a1c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1ca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a1ce:	e087      	b.n	800a2e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a1d0:	697b      	ldr	r3, [r7, #20]
 800a1d2:	ee07 3a90 	vmov	s15, r3
 800a1d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1da:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a398 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a1de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1e2:	4b6a      	ldr	r3, [pc, #424]	@ (800a38c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1ea:	ee07 3a90 	vmov	s15, r3
 800a1ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1f2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1f6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a394 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a1fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a202:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a206:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a20a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a20e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a212:	e065      	b.n	800a2e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	ee07 3a90 	vmov	s15, r3
 800a21a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a21e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a39c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a226:	4b59      	ldr	r3, [pc, #356]	@ (800a38c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a22a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a22e:	ee07 3a90 	vmov	s15, r3
 800a232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a236:	ed97 6a03 	vldr	s12, [r7, #12]
 800a23a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a394 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a23e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a242:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a246:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a24a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a24e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a252:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a256:	e043      	b.n	800a2e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	ee07 3a90 	vmov	s15, r3
 800a25e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a262:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a3a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a266:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a26a:	4b48      	ldr	r3, [pc, #288]	@ (800a38c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a26c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a26e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a272:	ee07 3a90 	vmov	s15, r3
 800a276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a27a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a27e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a394 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a282:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a286:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a28a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a28e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a292:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a296:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a29a:	e021      	b.n	800a2e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	ee07 3a90 	vmov	s15, r3
 800a2a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2a6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a39c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a2aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2ae:	4b37      	ldr	r3, [pc, #220]	@ (800a38c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2b6:	ee07 3a90 	vmov	s15, r3
 800a2ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2be:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2c2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a394 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a2c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a2d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a2de:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a2e0:	4b2a      	ldr	r3, [pc, #168]	@ (800a38c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2e4:	0a5b      	lsrs	r3, r3, #9
 800a2e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a2ea:	ee07 3a90 	vmov	s15, r3
 800a2ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a2f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a2fa:	edd7 6a07 	vldr	s13, [r7, #28]
 800a2fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a302:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a306:	ee17 2a90 	vmov	r2, s15
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a30e:	4b1f      	ldr	r3, [pc, #124]	@ (800a38c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a312:	0c1b      	lsrs	r3, r3, #16
 800a314:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a318:	ee07 3a90 	vmov	s15, r3
 800a31c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a320:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a324:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a328:	edd7 6a07 	vldr	s13, [r7, #28]
 800a32c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a330:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a334:	ee17 2a90 	vmov	r2, s15
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a33c:	4b13      	ldr	r3, [pc, #76]	@ (800a38c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a33e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a340:	0e1b      	lsrs	r3, r3, #24
 800a342:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a346:	ee07 3a90 	vmov	s15, r3
 800a34a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a34e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a352:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a356:	edd7 6a07 	vldr	s13, [r7, #28]
 800a35a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a35e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a362:	ee17 2a90 	vmov	r2, s15
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a36a:	e008      	b.n	800a37e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2200      	movs	r2, #0
 800a370:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2200      	movs	r2, #0
 800a376:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2200      	movs	r2, #0
 800a37c:	609a      	str	r2, [r3, #8]
}
 800a37e:	bf00      	nop
 800a380:	3724      	adds	r7, #36	@ 0x24
 800a382:	46bd      	mov	sp, r7
 800a384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a388:	4770      	bx	lr
 800a38a:	bf00      	nop
 800a38c:	58024400 	.word	0x58024400
 800a390:	03d09000 	.word	0x03d09000
 800a394:	46000000 	.word	0x46000000
 800a398:	4c742400 	.word	0x4c742400
 800a39c:	4a742400 	.word	0x4a742400
 800a3a0:	4bb71b00 	.word	0x4bb71b00

0800a3a4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b084      	sub	sp, #16
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
 800a3ac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a3b2:	4b53      	ldr	r3, [pc, #332]	@ (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a3b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3b6:	f003 0303 	and.w	r3, r3, #3
 800a3ba:	2b03      	cmp	r3, #3
 800a3bc:	d101      	bne.n	800a3c2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a3be:	2301      	movs	r3, #1
 800a3c0:	e099      	b.n	800a4f6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a3c2:	4b4f      	ldr	r3, [pc, #316]	@ (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	4a4e      	ldr	r2, [pc, #312]	@ (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a3c8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a3cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a3ce:	f7f7 fceb 	bl	8001da8 <HAL_GetTick>
 800a3d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a3d4:	e008      	b.n	800a3e8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a3d6:	f7f7 fce7 	bl	8001da8 <HAL_GetTick>
 800a3da:	4602      	mov	r2, r0
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	1ad3      	subs	r3, r2, r3
 800a3e0:	2b02      	cmp	r3, #2
 800a3e2:	d901      	bls.n	800a3e8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a3e4:	2303      	movs	r3, #3
 800a3e6:	e086      	b.n	800a4f6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a3e8:	4b45      	ldr	r3, [pc, #276]	@ (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d1f0      	bne.n	800a3d6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a3f4:	4b42      	ldr	r3, [pc, #264]	@ (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a3f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3f8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	031b      	lsls	r3, r3, #12
 800a402:	493f      	ldr	r1, [pc, #252]	@ (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a404:	4313      	orrs	r3, r2
 800a406:	628b      	str	r3, [r1, #40]	@ 0x28
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	685b      	ldr	r3, [r3, #4]
 800a40c:	3b01      	subs	r3, #1
 800a40e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	689b      	ldr	r3, [r3, #8]
 800a416:	3b01      	subs	r3, #1
 800a418:	025b      	lsls	r3, r3, #9
 800a41a:	b29b      	uxth	r3, r3
 800a41c:	431a      	orrs	r2, r3
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	68db      	ldr	r3, [r3, #12]
 800a422:	3b01      	subs	r3, #1
 800a424:	041b      	lsls	r3, r3, #16
 800a426:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a42a:	431a      	orrs	r2, r3
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	691b      	ldr	r3, [r3, #16]
 800a430:	3b01      	subs	r3, #1
 800a432:	061b      	lsls	r3, r3, #24
 800a434:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a438:	4931      	ldr	r1, [pc, #196]	@ (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a43a:	4313      	orrs	r3, r2
 800a43c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a43e:	4b30      	ldr	r3, [pc, #192]	@ (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a442:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	695b      	ldr	r3, [r3, #20]
 800a44a:	492d      	ldr	r1, [pc, #180]	@ (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a44c:	4313      	orrs	r3, r2
 800a44e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a450:	4b2b      	ldr	r3, [pc, #172]	@ (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a454:	f023 0220 	bic.w	r2, r3, #32
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	699b      	ldr	r3, [r3, #24]
 800a45c:	4928      	ldr	r1, [pc, #160]	@ (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a45e:	4313      	orrs	r3, r2
 800a460:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a462:	4b27      	ldr	r3, [pc, #156]	@ (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a466:	4a26      	ldr	r2, [pc, #152]	@ (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a468:	f023 0310 	bic.w	r3, r3, #16
 800a46c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a46e:	4b24      	ldr	r3, [pc, #144]	@ (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a470:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a472:	4b24      	ldr	r3, [pc, #144]	@ (800a504 <RCCEx_PLL2_Config+0x160>)
 800a474:	4013      	ands	r3, r2
 800a476:	687a      	ldr	r2, [r7, #4]
 800a478:	69d2      	ldr	r2, [r2, #28]
 800a47a:	00d2      	lsls	r2, r2, #3
 800a47c:	4920      	ldr	r1, [pc, #128]	@ (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a47e:	4313      	orrs	r3, r2
 800a480:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a482:	4b1f      	ldr	r3, [pc, #124]	@ (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a486:	4a1e      	ldr	r2, [pc, #120]	@ (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a488:	f043 0310 	orr.w	r3, r3, #16
 800a48c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d106      	bne.n	800a4a2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a494:	4b1a      	ldr	r3, [pc, #104]	@ (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a498:	4a19      	ldr	r2, [pc, #100]	@ (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a49a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a49e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a4a0:	e00f      	b.n	800a4c2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	2b01      	cmp	r3, #1
 800a4a6:	d106      	bne.n	800a4b6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a4a8:	4b15      	ldr	r3, [pc, #84]	@ (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a4aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4ac:	4a14      	ldr	r2, [pc, #80]	@ (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a4ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a4b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a4b4:	e005      	b.n	800a4c2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a4b6:	4b12      	ldr	r3, [pc, #72]	@ (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a4b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4ba:	4a11      	ldr	r2, [pc, #68]	@ (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a4bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a4c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a4c2:	4b0f      	ldr	r3, [pc, #60]	@ (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	4a0e      	ldr	r2, [pc, #56]	@ (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a4c8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a4cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a4ce:	f7f7 fc6b 	bl	8001da8 <HAL_GetTick>
 800a4d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a4d4:	e008      	b.n	800a4e8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a4d6:	f7f7 fc67 	bl	8001da8 <HAL_GetTick>
 800a4da:	4602      	mov	r2, r0
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	1ad3      	subs	r3, r2, r3
 800a4e0:	2b02      	cmp	r3, #2
 800a4e2:	d901      	bls.n	800a4e8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a4e4:	2303      	movs	r3, #3
 800a4e6:	e006      	b.n	800a4f6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a4e8:	4b05      	ldr	r3, [pc, #20]	@ (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d0f0      	beq.n	800a4d6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a4f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3710      	adds	r7, #16
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}
 800a4fe:	bf00      	nop
 800a500:	58024400 	.word	0x58024400
 800a504:	ffff0007 	.word	0xffff0007

0800a508 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b084      	sub	sp, #16
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
 800a510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a512:	2300      	movs	r3, #0
 800a514:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a516:	4b53      	ldr	r3, [pc, #332]	@ (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a51a:	f003 0303 	and.w	r3, r3, #3
 800a51e:	2b03      	cmp	r3, #3
 800a520:	d101      	bne.n	800a526 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a522:	2301      	movs	r3, #1
 800a524:	e099      	b.n	800a65a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a526:	4b4f      	ldr	r3, [pc, #316]	@ (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	4a4e      	ldr	r2, [pc, #312]	@ (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a52c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a530:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a532:	f7f7 fc39 	bl	8001da8 <HAL_GetTick>
 800a536:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a538:	e008      	b.n	800a54c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a53a:	f7f7 fc35 	bl	8001da8 <HAL_GetTick>
 800a53e:	4602      	mov	r2, r0
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	1ad3      	subs	r3, r2, r3
 800a544:	2b02      	cmp	r3, #2
 800a546:	d901      	bls.n	800a54c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a548:	2303      	movs	r3, #3
 800a54a:	e086      	b.n	800a65a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a54c:	4b45      	ldr	r3, [pc, #276]	@ (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a554:	2b00      	cmp	r3, #0
 800a556:	d1f0      	bne.n	800a53a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a558:	4b42      	ldr	r3, [pc, #264]	@ (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a55a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a55c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	051b      	lsls	r3, r3, #20
 800a566:	493f      	ldr	r1, [pc, #252]	@ (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a568:	4313      	orrs	r3, r2
 800a56a:	628b      	str	r3, [r1, #40]	@ 0x28
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	685b      	ldr	r3, [r3, #4]
 800a570:	3b01      	subs	r3, #1
 800a572:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	689b      	ldr	r3, [r3, #8]
 800a57a:	3b01      	subs	r3, #1
 800a57c:	025b      	lsls	r3, r3, #9
 800a57e:	b29b      	uxth	r3, r3
 800a580:	431a      	orrs	r2, r3
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	68db      	ldr	r3, [r3, #12]
 800a586:	3b01      	subs	r3, #1
 800a588:	041b      	lsls	r3, r3, #16
 800a58a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a58e:	431a      	orrs	r2, r3
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	691b      	ldr	r3, [r3, #16]
 800a594:	3b01      	subs	r3, #1
 800a596:	061b      	lsls	r3, r3, #24
 800a598:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a59c:	4931      	ldr	r1, [pc, #196]	@ (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a59e:	4313      	orrs	r3, r2
 800a5a0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a5a2:	4b30      	ldr	r3, [pc, #192]	@ (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a5a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5a6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	695b      	ldr	r3, [r3, #20]
 800a5ae:	492d      	ldr	r1, [pc, #180]	@ (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a5b0:	4313      	orrs	r3, r2
 800a5b2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a5b4:	4b2b      	ldr	r3, [pc, #172]	@ (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a5b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5b8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	699b      	ldr	r3, [r3, #24]
 800a5c0:	4928      	ldr	r1, [pc, #160]	@ (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a5c2:	4313      	orrs	r3, r2
 800a5c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a5c6:	4b27      	ldr	r3, [pc, #156]	@ (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a5c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5ca:	4a26      	ldr	r2, [pc, #152]	@ (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a5cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a5d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a5d2:	4b24      	ldr	r3, [pc, #144]	@ (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a5d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a5d6:	4b24      	ldr	r3, [pc, #144]	@ (800a668 <RCCEx_PLL3_Config+0x160>)
 800a5d8:	4013      	ands	r3, r2
 800a5da:	687a      	ldr	r2, [r7, #4]
 800a5dc:	69d2      	ldr	r2, [r2, #28]
 800a5de:	00d2      	lsls	r2, r2, #3
 800a5e0:	4920      	ldr	r1, [pc, #128]	@ (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a5e2:	4313      	orrs	r3, r2
 800a5e4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a5e6:	4b1f      	ldr	r3, [pc, #124]	@ (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a5e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5ea:	4a1e      	ldr	r2, [pc, #120]	@ (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a5ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a5f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d106      	bne.n	800a606 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a5f8:	4b1a      	ldr	r3, [pc, #104]	@ (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a5fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5fc:	4a19      	ldr	r2, [pc, #100]	@ (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a5fe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a602:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a604:	e00f      	b.n	800a626 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	2b01      	cmp	r3, #1
 800a60a:	d106      	bne.n	800a61a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a60c:	4b15      	ldr	r3, [pc, #84]	@ (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a60e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a610:	4a14      	ldr	r2, [pc, #80]	@ (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a612:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a616:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a618:	e005      	b.n	800a626 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a61a:	4b12      	ldr	r3, [pc, #72]	@ (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a61c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a61e:	4a11      	ldr	r2, [pc, #68]	@ (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a620:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a624:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a626:	4b0f      	ldr	r3, [pc, #60]	@ (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	4a0e      	ldr	r2, [pc, #56]	@ (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a62c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a630:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a632:	f7f7 fbb9 	bl	8001da8 <HAL_GetTick>
 800a636:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a638:	e008      	b.n	800a64c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a63a:	f7f7 fbb5 	bl	8001da8 <HAL_GetTick>
 800a63e:	4602      	mov	r2, r0
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	1ad3      	subs	r3, r2, r3
 800a644:	2b02      	cmp	r3, #2
 800a646:	d901      	bls.n	800a64c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a648:	2303      	movs	r3, #3
 800a64a:	e006      	b.n	800a65a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a64c:	4b05      	ldr	r3, [pc, #20]	@ (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a654:	2b00      	cmp	r3, #0
 800a656:	d0f0      	beq.n	800a63a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a658:	7bfb      	ldrb	r3, [r7, #15]
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	3710      	adds	r7, #16
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}
 800a662:	bf00      	nop
 800a664:	58024400 	.word	0x58024400
 800a668:	ffff0007 	.word	0xffff0007

0800a66c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b082      	sub	sp, #8
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d101      	bne.n	800a67e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a67a:	2301      	movs	r3, #1
 800a67c:	e049      	b.n	800a712 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a684:	b2db      	uxtb	r3, r3
 800a686:	2b00      	cmp	r3, #0
 800a688:	d106      	bne.n	800a698 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2200      	movs	r2, #0
 800a68e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f000 f841 	bl	800a71a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2202      	movs	r2, #2
 800a69c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681a      	ldr	r2, [r3, #0]
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	3304      	adds	r3, #4
 800a6a8:	4619      	mov	r1, r3
 800a6aa:	4610      	mov	r0, r2
 800a6ac:	f000 f9e8 	bl	800aa80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2201      	movs	r2, #1
 800a6dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2201      	movs	r2, #1
 800a6e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2201      	movs	r2, #1
 800a6f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2201      	movs	r2, #1
 800a704:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2201      	movs	r2, #1
 800a70c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a710:	2300      	movs	r3, #0
}
 800a712:	4618      	mov	r0, r3
 800a714:	3708      	adds	r7, #8
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}

0800a71a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a71a:	b480      	push	{r7}
 800a71c:	b083      	sub	sp, #12
 800a71e:	af00      	add	r7, sp, #0
 800a720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a722:	bf00      	nop
 800a724:	370c      	adds	r7, #12
 800a726:	46bd      	mov	sp, r7
 800a728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72c:	4770      	bx	lr
	...

0800a730 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a730:	b480      	push	{r7}
 800a732:	b085      	sub	sp, #20
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a73e:	b2db      	uxtb	r3, r3
 800a740:	2b01      	cmp	r3, #1
 800a742:	d001      	beq.n	800a748 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a744:	2301      	movs	r3, #1
 800a746:	e054      	b.n	800a7f2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2202      	movs	r2, #2
 800a74c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	68da      	ldr	r2, [r3, #12]
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f042 0201 	orr.w	r2, r2, #1
 800a75e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	4a26      	ldr	r2, [pc, #152]	@ (800a800 <HAL_TIM_Base_Start_IT+0xd0>)
 800a766:	4293      	cmp	r3, r2
 800a768:	d022      	beq.n	800a7b0 <HAL_TIM_Base_Start_IT+0x80>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a772:	d01d      	beq.n	800a7b0 <HAL_TIM_Base_Start_IT+0x80>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	4a22      	ldr	r2, [pc, #136]	@ (800a804 <HAL_TIM_Base_Start_IT+0xd4>)
 800a77a:	4293      	cmp	r3, r2
 800a77c:	d018      	beq.n	800a7b0 <HAL_TIM_Base_Start_IT+0x80>
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	4a21      	ldr	r2, [pc, #132]	@ (800a808 <HAL_TIM_Base_Start_IT+0xd8>)
 800a784:	4293      	cmp	r3, r2
 800a786:	d013      	beq.n	800a7b0 <HAL_TIM_Base_Start_IT+0x80>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	4a1f      	ldr	r2, [pc, #124]	@ (800a80c <HAL_TIM_Base_Start_IT+0xdc>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d00e      	beq.n	800a7b0 <HAL_TIM_Base_Start_IT+0x80>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	4a1e      	ldr	r2, [pc, #120]	@ (800a810 <HAL_TIM_Base_Start_IT+0xe0>)
 800a798:	4293      	cmp	r3, r2
 800a79a:	d009      	beq.n	800a7b0 <HAL_TIM_Base_Start_IT+0x80>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	4a1c      	ldr	r2, [pc, #112]	@ (800a814 <HAL_TIM_Base_Start_IT+0xe4>)
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	d004      	beq.n	800a7b0 <HAL_TIM_Base_Start_IT+0x80>
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	4a1b      	ldr	r2, [pc, #108]	@ (800a818 <HAL_TIM_Base_Start_IT+0xe8>)
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	d115      	bne.n	800a7dc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	689a      	ldr	r2, [r3, #8]
 800a7b6:	4b19      	ldr	r3, [pc, #100]	@ (800a81c <HAL_TIM_Base_Start_IT+0xec>)
 800a7b8:	4013      	ands	r3, r2
 800a7ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	2b06      	cmp	r3, #6
 800a7c0:	d015      	beq.n	800a7ee <HAL_TIM_Base_Start_IT+0xbe>
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a7c8:	d011      	beq.n	800a7ee <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	681a      	ldr	r2, [r3, #0]
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f042 0201 	orr.w	r2, r2, #1
 800a7d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7da:	e008      	b.n	800a7ee <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	681a      	ldr	r2, [r3, #0]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f042 0201 	orr.w	r2, r2, #1
 800a7ea:	601a      	str	r2, [r3, #0]
 800a7ec:	e000      	b.n	800a7f0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a7f0:	2300      	movs	r3, #0
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	3714      	adds	r7, #20
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fc:	4770      	bx	lr
 800a7fe:	bf00      	nop
 800a800:	40010000 	.word	0x40010000
 800a804:	40000400 	.word	0x40000400
 800a808:	40000800 	.word	0x40000800
 800a80c:	40000c00 	.word	0x40000c00
 800a810:	40010400 	.word	0x40010400
 800a814:	40001800 	.word	0x40001800
 800a818:	40014000 	.word	0x40014000
 800a81c:	00010007 	.word	0x00010007

0800a820 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b084      	sub	sp, #16
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	68db      	ldr	r3, [r3, #12]
 800a82e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	691b      	ldr	r3, [r3, #16]
 800a836:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	f003 0302 	and.w	r3, r3, #2
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d020      	beq.n	800a884 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	f003 0302 	and.w	r3, r3, #2
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d01b      	beq.n	800a884 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f06f 0202 	mvn.w	r2, #2
 800a854:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2201      	movs	r2, #1
 800a85a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	699b      	ldr	r3, [r3, #24]
 800a862:	f003 0303 	and.w	r3, r3, #3
 800a866:	2b00      	cmp	r3, #0
 800a868:	d003      	beq.n	800a872 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f000 f8e9 	bl	800aa42 <HAL_TIM_IC_CaptureCallback>
 800a870:	e005      	b.n	800a87e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f000 f8db 	bl	800aa2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f000 f8ec 	bl	800aa56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2200      	movs	r2, #0
 800a882:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	f003 0304 	and.w	r3, r3, #4
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d020      	beq.n	800a8d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	f003 0304 	and.w	r3, r3, #4
 800a894:	2b00      	cmp	r3, #0
 800a896:	d01b      	beq.n	800a8d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f06f 0204 	mvn.w	r2, #4
 800a8a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2202      	movs	r2, #2
 800a8a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	699b      	ldr	r3, [r3, #24]
 800a8ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d003      	beq.n	800a8be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f000 f8c3 	bl	800aa42 <HAL_TIM_IC_CaptureCallback>
 800a8bc:	e005      	b.n	800a8ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f000 f8b5 	bl	800aa2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	f000 f8c6 	bl	800aa56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	f003 0308 	and.w	r3, r3, #8
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d020      	beq.n	800a91c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	f003 0308 	and.w	r3, r3, #8
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d01b      	beq.n	800a91c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f06f 0208 	mvn.w	r2, #8
 800a8ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2204      	movs	r2, #4
 800a8f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	69db      	ldr	r3, [r3, #28]
 800a8fa:	f003 0303 	and.w	r3, r3, #3
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d003      	beq.n	800a90a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f000 f89d 	bl	800aa42 <HAL_TIM_IC_CaptureCallback>
 800a908:	e005      	b.n	800a916 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f000 f88f 	bl	800aa2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f000 f8a0 	bl	800aa56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2200      	movs	r2, #0
 800a91a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	f003 0310 	and.w	r3, r3, #16
 800a922:	2b00      	cmp	r3, #0
 800a924:	d020      	beq.n	800a968 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	f003 0310 	and.w	r3, r3, #16
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d01b      	beq.n	800a968 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f06f 0210 	mvn.w	r2, #16
 800a938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2208      	movs	r2, #8
 800a93e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	69db      	ldr	r3, [r3, #28]
 800a946:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d003      	beq.n	800a956 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f000 f877 	bl	800aa42 <HAL_TIM_IC_CaptureCallback>
 800a954:	e005      	b.n	800a962 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f000 f869 	bl	800aa2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f000 f87a 	bl	800aa56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2200      	movs	r2, #0
 800a966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	f003 0301 	and.w	r3, r3, #1
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d00c      	beq.n	800a98c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	f003 0301 	and.w	r3, r3, #1
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d007      	beq.n	800a98c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f06f 0201 	mvn.w	r2, #1
 800a984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f7f6 fd88 	bl	800149c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a992:	2b00      	cmp	r3, #0
 800a994:	d104      	bne.n	800a9a0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d00c      	beq.n	800a9ba <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d007      	beq.n	800a9ba <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a9b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f000 f913 	bl	800abe0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d00c      	beq.n	800a9de <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d007      	beq.n	800a9de <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a9d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f000 f90b 	bl	800abf4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d00c      	beq.n	800aa02 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d007      	beq.n	800aa02 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a9fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f000 f834 	bl	800aa6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	f003 0320 	and.w	r3, r3, #32
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d00c      	beq.n	800aa26 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	f003 0320 	and.w	r3, r3, #32
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d007      	beq.n	800aa26 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	f06f 0220 	mvn.w	r2, #32
 800aa1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f000 f8d3 	bl	800abcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aa26:	bf00      	nop
 800aa28:	3710      	adds	r7, #16
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}

0800aa2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aa2e:	b480      	push	{r7}
 800aa30:	b083      	sub	sp, #12
 800aa32:	af00      	add	r7, sp, #0
 800aa34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aa36:	bf00      	nop
 800aa38:	370c      	adds	r7, #12
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa40:	4770      	bx	lr

0800aa42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aa42:	b480      	push	{r7}
 800aa44:	b083      	sub	sp, #12
 800aa46:	af00      	add	r7, sp, #0
 800aa48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aa4a:	bf00      	nop
 800aa4c:	370c      	adds	r7, #12
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa54:	4770      	bx	lr

0800aa56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aa56:	b480      	push	{r7}
 800aa58:	b083      	sub	sp, #12
 800aa5a:	af00      	add	r7, sp, #0
 800aa5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aa5e:	bf00      	nop
 800aa60:	370c      	adds	r7, #12
 800aa62:	46bd      	mov	sp, r7
 800aa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa68:	4770      	bx	lr

0800aa6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aa6a:	b480      	push	{r7}
 800aa6c:	b083      	sub	sp, #12
 800aa6e:	af00      	add	r7, sp, #0
 800aa70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aa72:	bf00      	nop
 800aa74:	370c      	adds	r7, #12
 800aa76:	46bd      	mov	sp, r7
 800aa78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7c:	4770      	bx	lr
	...

0800aa80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800aa80:	b480      	push	{r7}
 800aa82:	b085      	sub	sp, #20
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
 800aa88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	4a46      	ldr	r2, [pc, #280]	@ (800abac <TIM_Base_SetConfig+0x12c>)
 800aa94:	4293      	cmp	r3, r2
 800aa96:	d013      	beq.n	800aac0 <TIM_Base_SetConfig+0x40>
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa9e:	d00f      	beq.n	800aac0 <TIM_Base_SetConfig+0x40>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	4a43      	ldr	r2, [pc, #268]	@ (800abb0 <TIM_Base_SetConfig+0x130>)
 800aaa4:	4293      	cmp	r3, r2
 800aaa6:	d00b      	beq.n	800aac0 <TIM_Base_SetConfig+0x40>
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	4a42      	ldr	r2, [pc, #264]	@ (800abb4 <TIM_Base_SetConfig+0x134>)
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d007      	beq.n	800aac0 <TIM_Base_SetConfig+0x40>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	4a41      	ldr	r2, [pc, #260]	@ (800abb8 <TIM_Base_SetConfig+0x138>)
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d003      	beq.n	800aac0 <TIM_Base_SetConfig+0x40>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	4a40      	ldr	r2, [pc, #256]	@ (800abbc <TIM_Base_SetConfig+0x13c>)
 800aabc:	4293      	cmp	r3, r2
 800aabe:	d108      	bne.n	800aad2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aac6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	685b      	ldr	r3, [r3, #4]
 800aacc:	68fa      	ldr	r2, [r7, #12]
 800aace:	4313      	orrs	r3, r2
 800aad0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	4a35      	ldr	r2, [pc, #212]	@ (800abac <TIM_Base_SetConfig+0x12c>)
 800aad6:	4293      	cmp	r3, r2
 800aad8:	d01f      	beq.n	800ab1a <TIM_Base_SetConfig+0x9a>
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aae0:	d01b      	beq.n	800ab1a <TIM_Base_SetConfig+0x9a>
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	4a32      	ldr	r2, [pc, #200]	@ (800abb0 <TIM_Base_SetConfig+0x130>)
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d017      	beq.n	800ab1a <TIM_Base_SetConfig+0x9a>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	4a31      	ldr	r2, [pc, #196]	@ (800abb4 <TIM_Base_SetConfig+0x134>)
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	d013      	beq.n	800ab1a <TIM_Base_SetConfig+0x9a>
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	4a30      	ldr	r2, [pc, #192]	@ (800abb8 <TIM_Base_SetConfig+0x138>)
 800aaf6:	4293      	cmp	r3, r2
 800aaf8:	d00f      	beq.n	800ab1a <TIM_Base_SetConfig+0x9a>
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	4a2f      	ldr	r2, [pc, #188]	@ (800abbc <TIM_Base_SetConfig+0x13c>)
 800aafe:	4293      	cmp	r3, r2
 800ab00:	d00b      	beq.n	800ab1a <TIM_Base_SetConfig+0x9a>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	4a2e      	ldr	r2, [pc, #184]	@ (800abc0 <TIM_Base_SetConfig+0x140>)
 800ab06:	4293      	cmp	r3, r2
 800ab08:	d007      	beq.n	800ab1a <TIM_Base_SetConfig+0x9a>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	4a2d      	ldr	r2, [pc, #180]	@ (800abc4 <TIM_Base_SetConfig+0x144>)
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d003      	beq.n	800ab1a <TIM_Base_SetConfig+0x9a>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	4a2c      	ldr	r2, [pc, #176]	@ (800abc8 <TIM_Base_SetConfig+0x148>)
 800ab16:	4293      	cmp	r3, r2
 800ab18:	d108      	bne.n	800ab2c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ab20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	68db      	ldr	r3, [r3, #12]
 800ab26:	68fa      	ldr	r2, [r7, #12]
 800ab28:	4313      	orrs	r3, r2
 800ab2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	695b      	ldr	r3, [r3, #20]
 800ab36:	4313      	orrs	r3, r2
 800ab38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	68fa      	ldr	r2, [r7, #12]
 800ab3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	689a      	ldr	r2, [r3, #8]
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	681a      	ldr	r2, [r3, #0]
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	4a16      	ldr	r2, [pc, #88]	@ (800abac <TIM_Base_SetConfig+0x12c>)
 800ab54:	4293      	cmp	r3, r2
 800ab56:	d00f      	beq.n	800ab78 <TIM_Base_SetConfig+0xf8>
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	4a18      	ldr	r2, [pc, #96]	@ (800abbc <TIM_Base_SetConfig+0x13c>)
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d00b      	beq.n	800ab78 <TIM_Base_SetConfig+0xf8>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	4a17      	ldr	r2, [pc, #92]	@ (800abc0 <TIM_Base_SetConfig+0x140>)
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d007      	beq.n	800ab78 <TIM_Base_SetConfig+0xf8>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	4a16      	ldr	r2, [pc, #88]	@ (800abc4 <TIM_Base_SetConfig+0x144>)
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	d003      	beq.n	800ab78 <TIM_Base_SetConfig+0xf8>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	4a15      	ldr	r2, [pc, #84]	@ (800abc8 <TIM_Base_SetConfig+0x148>)
 800ab74:	4293      	cmp	r3, r2
 800ab76:	d103      	bne.n	800ab80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	691a      	ldr	r2, [r3, #16]
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2201      	movs	r2, #1
 800ab84:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	691b      	ldr	r3, [r3, #16]
 800ab8a:	f003 0301 	and.w	r3, r3, #1
 800ab8e:	2b01      	cmp	r3, #1
 800ab90:	d105      	bne.n	800ab9e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	691b      	ldr	r3, [r3, #16]
 800ab96:	f023 0201 	bic.w	r2, r3, #1
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	611a      	str	r2, [r3, #16]
  }
}
 800ab9e:	bf00      	nop
 800aba0:	3714      	adds	r7, #20
 800aba2:	46bd      	mov	sp, r7
 800aba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba8:	4770      	bx	lr
 800abaa:	bf00      	nop
 800abac:	40010000 	.word	0x40010000
 800abb0:	40000400 	.word	0x40000400
 800abb4:	40000800 	.word	0x40000800
 800abb8:	40000c00 	.word	0x40000c00
 800abbc:	40010400 	.word	0x40010400
 800abc0:	40014000 	.word	0x40014000
 800abc4:	40014400 	.word	0x40014400
 800abc8:	40014800 	.word	0x40014800

0800abcc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800abcc:	b480      	push	{r7}
 800abce:	b083      	sub	sp, #12
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800abd4:	bf00      	nop
 800abd6:	370c      	adds	r7, #12
 800abd8:	46bd      	mov	sp, r7
 800abda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abde:	4770      	bx	lr

0800abe0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800abe0:	b480      	push	{r7}
 800abe2:	b083      	sub	sp, #12
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800abe8:	bf00      	nop
 800abea:	370c      	adds	r7, #12
 800abec:	46bd      	mov	sp, r7
 800abee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf2:	4770      	bx	lr

0800abf4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800abf4:	b480      	push	{r7}
 800abf6:	b083      	sub	sp, #12
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800abfc:	bf00      	nop
 800abfe:	370c      	adds	r7, #12
 800ac00:	46bd      	mov	sp, r7
 800ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac06:	4770      	bx	lr

0800ac08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b082      	sub	sp, #8
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d101      	bne.n	800ac1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ac16:	2301      	movs	r3, #1
 800ac18:	e042      	b.n	800aca0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d106      	bne.n	800ac32 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2200      	movs	r2, #0
 800ac28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f7f6 ffd7 	bl	8001be0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2224      	movs	r2, #36	@ 0x24
 800ac36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	681a      	ldr	r2, [r3, #0]
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f022 0201 	bic.w	r2, r2, #1
 800ac48:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d002      	beq.n	800ac58 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f000 ff22 	bl	800ba9c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f000 f8b3 	bl	800adc4 <UART_SetConfig>
 800ac5e:	4603      	mov	r3, r0
 800ac60:	2b01      	cmp	r3, #1
 800ac62:	d101      	bne.n	800ac68 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ac64:	2301      	movs	r3, #1
 800ac66:	e01b      	b.n	800aca0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	685a      	ldr	r2, [r3, #4]
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ac76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	689a      	ldr	r2, [r3, #8]
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ac86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	681a      	ldr	r2, [r3, #0]
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f042 0201 	orr.w	r2, r2, #1
 800ac96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f000 ffa1 	bl	800bbe0 <UART_CheckIdleState>
 800ac9e:	4603      	mov	r3, r0
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	3708      	adds	r7, #8
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}

0800aca8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b08a      	sub	sp, #40	@ 0x28
 800acac:	af02      	add	r7, sp, #8
 800acae:	60f8      	str	r0, [r7, #12]
 800acb0:	60b9      	str	r1, [r7, #8]
 800acb2:	603b      	str	r3, [r7, #0]
 800acb4:	4613      	mov	r3, r2
 800acb6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800acbe:	2b20      	cmp	r3, #32
 800acc0:	d17b      	bne.n	800adba <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d002      	beq.n	800acce <HAL_UART_Transmit+0x26>
 800acc8:	88fb      	ldrh	r3, [r7, #6]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d101      	bne.n	800acd2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800acce:	2301      	movs	r3, #1
 800acd0:	e074      	b.n	800adbc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	2200      	movs	r2, #0
 800acd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	2221      	movs	r2, #33	@ 0x21
 800acde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ace2:	f7f7 f861 	bl	8001da8 <HAL_GetTick>
 800ace6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	88fa      	ldrh	r2, [r7, #6]
 800acec:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	88fa      	ldrh	r2, [r7, #6]
 800acf4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	689b      	ldr	r3, [r3, #8]
 800acfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ad00:	d108      	bne.n	800ad14 <HAL_UART_Transmit+0x6c>
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	691b      	ldr	r3, [r3, #16]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d104      	bne.n	800ad14 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	61bb      	str	r3, [r7, #24]
 800ad12:	e003      	b.n	800ad1c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ad18:	2300      	movs	r3, #0
 800ad1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ad1c:	e030      	b.n	800ad80 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	9300      	str	r3, [sp, #0]
 800ad22:	697b      	ldr	r3, [r7, #20]
 800ad24:	2200      	movs	r2, #0
 800ad26:	2180      	movs	r1, #128	@ 0x80
 800ad28:	68f8      	ldr	r0, [r7, #12]
 800ad2a:	f001 f803 	bl	800bd34 <UART_WaitOnFlagUntilTimeout>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d005      	beq.n	800ad40 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	2220      	movs	r2, #32
 800ad38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800ad3c:	2303      	movs	r3, #3
 800ad3e:	e03d      	b.n	800adbc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800ad40:	69fb      	ldr	r3, [r7, #28]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d10b      	bne.n	800ad5e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ad46:	69bb      	ldr	r3, [r7, #24]
 800ad48:	881b      	ldrh	r3, [r3, #0]
 800ad4a:	461a      	mov	r2, r3
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ad54:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ad56:	69bb      	ldr	r3, [r7, #24]
 800ad58:	3302      	adds	r3, #2
 800ad5a:	61bb      	str	r3, [r7, #24]
 800ad5c:	e007      	b.n	800ad6e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ad5e:	69fb      	ldr	r3, [r7, #28]
 800ad60:	781a      	ldrb	r2, [r3, #0]
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800ad68:	69fb      	ldr	r3, [r7, #28]
 800ad6a:	3301      	adds	r3, #1
 800ad6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ad74:	b29b      	uxth	r3, r3
 800ad76:	3b01      	subs	r3, #1
 800ad78:	b29a      	uxth	r2, r3
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ad86:	b29b      	uxth	r3, r3
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d1c8      	bne.n	800ad1e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	9300      	str	r3, [sp, #0]
 800ad90:	697b      	ldr	r3, [r7, #20]
 800ad92:	2200      	movs	r2, #0
 800ad94:	2140      	movs	r1, #64	@ 0x40
 800ad96:	68f8      	ldr	r0, [r7, #12]
 800ad98:	f000 ffcc 	bl	800bd34 <UART_WaitOnFlagUntilTimeout>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d005      	beq.n	800adae <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2220      	movs	r2, #32
 800ada6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800adaa:	2303      	movs	r3, #3
 800adac:	e006      	b.n	800adbc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	2220      	movs	r2, #32
 800adb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800adb6:	2300      	movs	r3, #0
 800adb8:	e000      	b.n	800adbc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800adba:	2302      	movs	r3, #2
  }
}
 800adbc:	4618      	mov	r0, r3
 800adbe:	3720      	adds	r7, #32
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bd80      	pop	{r7, pc}

0800adc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800adc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800adc8:	b092      	sub	sp, #72	@ 0x48
 800adca:	af00      	add	r7, sp, #0
 800adcc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800adce:	2300      	movs	r3, #0
 800add0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	689a      	ldr	r2, [r3, #8]
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	691b      	ldr	r3, [r3, #16]
 800addc:	431a      	orrs	r2, r3
 800adde:	697b      	ldr	r3, [r7, #20]
 800ade0:	695b      	ldr	r3, [r3, #20]
 800ade2:	431a      	orrs	r2, r3
 800ade4:	697b      	ldr	r3, [r7, #20]
 800ade6:	69db      	ldr	r3, [r3, #28]
 800ade8:	4313      	orrs	r3, r2
 800adea:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800adec:	697b      	ldr	r3, [r7, #20]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	681a      	ldr	r2, [r3, #0]
 800adf2:	4bbe      	ldr	r3, [pc, #760]	@ (800b0ec <UART_SetConfig+0x328>)
 800adf4:	4013      	ands	r3, r2
 800adf6:	697a      	ldr	r2, [r7, #20]
 800adf8:	6812      	ldr	r2, [r2, #0]
 800adfa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800adfc:	430b      	orrs	r3, r1
 800adfe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ae00:	697b      	ldr	r3, [r7, #20]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	685b      	ldr	r3, [r3, #4]
 800ae06:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	68da      	ldr	r2, [r3, #12]
 800ae0e:	697b      	ldr	r3, [r7, #20]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	430a      	orrs	r2, r1
 800ae14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	699b      	ldr	r3, [r3, #24]
 800ae1a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	4ab3      	ldr	r2, [pc, #716]	@ (800b0f0 <UART_SetConfig+0x32c>)
 800ae22:	4293      	cmp	r3, r2
 800ae24:	d004      	beq.n	800ae30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	6a1b      	ldr	r3, [r3, #32]
 800ae2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ae2c:	4313      	orrs	r3, r2
 800ae2e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ae30:	697b      	ldr	r3, [r7, #20]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	689a      	ldr	r2, [r3, #8]
 800ae36:	4baf      	ldr	r3, [pc, #700]	@ (800b0f4 <UART_SetConfig+0x330>)
 800ae38:	4013      	ands	r3, r2
 800ae3a:	697a      	ldr	r2, [r7, #20]
 800ae3c:	6812      	ldr	r2, [r2, #0]
 800ae3e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ae40:	430b      	orrs	r3, r1
 800ae42:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ae44:	697b      	ldr	r3, [r7, #20]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae4a:	f023 010f 	bic.w	r1, r3, #15
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	430a      	orrs	r2, r1
 800ae58:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	4aa6      	ldr	r2, [pc, #664]	@ (800b0f8 <UART_SetConfig+0x334>)
 800ae60:	4293      	cmp	r3, r2
 800ae62:	d177      	bne.n	800af54 <UART_SetConfig+0x190>
 800ae64:	4ba5      	ldr	r3, [pc, #660]	@ (800b0fc <UART_SetConfig+0x338>)
 800ae66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae68:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ae6c:	2b28      	cmp	r3, #40	@ 0x28
 800ae6e:	d86d      	bhi.n	800af4c <UART_SetConfig+0x188>
 800ae70:	a201      	add	r2, pc, #4	@ (adr r2, 800ae78 <UART_SetConfig+0xb4>)
 800ae72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae76:	bf00      	nop
 800ae78:	0800af1d 	.word	0x0800af1d
 800ae7c:	0800af4d 	.word	0x0800af4d
 800ae80:	0800af4d 	.word	0x0800af4d
 800ae84:	0800af4d 	.word	0x0800af4d
 800ae88:	0800af4d 	.word	0x0800af4d
 800ae8c:	0800af4d 	.word	0x0800af4d
 800ae90:	0800af4d 	.word	0x0800af4d
 800ae94:	0800af4d 	.word	0x0800af4d
 800ae98:	0800af25 	.word	0x0800af25
 800ae9c:	0800af4d 	.word	0x0800af4d
 800aea0:	0800af4d 	.word	0x0800af4d
 800aea4:	0800af4d 	.word	0x0800af4d
 800aea8:	0800af4d 	.word	0x0800af4d
 800aeac:	0800af4d 	.word	0x0800af4d
 800aeb0:	0800af4d 	.word	0x0800af4d
 800aeb4:	0800af4d 	.word	0x0800af4d
 800aeb8:	0800af2d 	.word	0x0800af2d
 800aebc:	0800af4d 	.word	0x0800af4d
 800aec0:	0800af4d 	.word	0x0800af4d
 800aec4:	0800af4d 	.word	0x0800af4d
 800aec8:	0800af4d 	.word	0x0800af4d
 800aecc:	0800af4d 	.word	0x0800af4d
 800aed0:	0800af4d 	.word	0x0800af4d
 800aed4:	0800af4d 	.word	0x0800af4d
 800aed8:	0800af35 	.word	0x0800af35
 800aedc:	0800af4d 	.word	0x0800af4d
 800aee0:	0800af4d 	.word	0x0800af4d
 800aee4:	0800af4d 	.word	0x0800af4d
 800aee8:	0800af4d 	.word	0x0800af4d
 800aeec:	0800af4d 	.word	0x0800af4d
 800aef0:	0800af4d 	.word	0x0800af4d
 800aef4:	0800af4d 	.word	0x0800af4d
 800aef8:	0800af3d 	.word	0x0800af3d
 800aefc:	0800af4d 	.word	0x0800af4d
 800af00:	0800af4d 	.word	0x0800af4d
 800af04:	0800af4d 	.word	0x0800af4d
 800af08:	0800af4d 	.word	0x0800af4d
 800af0c:	0800af4d 	.word	0x0800af4d
 800af10:	0800af4d 	.word	0x0800af4d
 800af14:	0800af4d 	.word	0x0800af4d
 800af18:	0800af45 	.word	0x0800af45
 800af1c:	2301      	movs	r3, #1
 800af1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af22:	e326      	b.n	800b572 <UART_SetConfig+0x7ae>
 800af24:	2304      	movs	r3, #4
 800af26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af2a:	e322      	b.n	800b572 <UART_SetConfig+0x7ae>
 800af2c:	2308      	movs	r3, #8
 800af2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af32:	e31e      	b.n	800b572 <UART_SetConfig+0x7ae>
 800af34:	2310      	movs	r3, #16
 800af36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af3a:	e31a      	b.n	800b572 <UART_SetConfig+0x7ae>
 800af3c:	2320      	movs	r3, #32
 800af3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af42:	e316      	b.n	800b572 <UART_SetConfig+0x7ae>
 800af44:	2340      	movs	r3, #64	@ 0x40
 800af46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af4a:	e312      	b.n	800b572 <UART_SetConfig+0x7ae>
 800af4c:	2380      	movs	r3, #128	@ 0x80
 800af4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af52:	e30e      	b.n	800b572 <UART_SetConfig+0x7ae>
 800af54:	697b      	ldr	r3, [r7, #20]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	4a69      	ldr	r2, [pc, #420]	@ (800b100 <UART_SetConfig+0x33c>)
 800af5a:	4293      	cmp	r3, r2
 800af5c:	d130      	bne.n	800afc0 <UART_SetConfig+0x1fc>
 800af5e:	4b67      	ldr	r3, [pc, #412]	@ (800b0fc <UART_SetConfig+0x338>)
 800af60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af62:	f003 0307 	and.w	r3, r3, #7
 800af66:	2b05      	cmp	r3, #5
 800af68:	d826      	bhi.n	800afb8 <UART_SetConfig+0x1f4>
 800af6a:	a201      	add	r2, pc, #4	@ (adr r2, 800af70 <UART_SetConfig+0x1ac>)
 800af6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af70:	0800af89 	.word	0x0800af89
 800af74:	0800af91 	.word	0x0800af91
 800af78:	0800af99 	.word	0x0800af99
 800af7c:	0800afa1 	.word	0x0800afa1
 800af80:	0800afa9 	.word	0x0800afa9
 800af84:	0800afb1 	.word	0x0800afb1
 800af88:	2300      	movs	r3, #0
 800af8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af8e:	e2f0      	b.n	800b572 <UART_SetConfig+0x7ae>
 800af90:	2304      	movs	r3, #4
 800af92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af96:	e2ec      	b.n	800b572 <UART_SetConfig+0x7ae>
 800af98:	2308      	movs	r3, #8
 800af9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af9e:	e2e8      	b.n	800b572 <UART_SetConfig+0x7ae>
 800afa0:	2310      	movs	r3, #16
 800afa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afa6:	e2e4      	b.n	800b572 <UART_SetConfig+0x7ae>
 800afa8:	2320      	movs	r3, #32
 800afaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afae:	e2e0      	b.n	800b572 <UART_SetConfig+0x7ae>
 800afb0:	2340      	movs	r3, #64	@ 0x40
 800afb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afb6:	e2dc      	b.n	800b572 <UART_SetConfig+0x7ae>
 800afb8:	2380      	movs	r3, #128	@ 0x80
 800afba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afbe:	e2d8      	b.n	800b572 <UART_SetConfig+0x7ae>
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	4a4f      	ldr	r2, [pc, #316]	@ (800b104 <UART_SetConfig+0x340>)
 800afc6:	4293      	cmp	r3, r2
 800afc8:	d130      	bne.n	800b02c <UART_SetConfig+0x268>
 800afca:	4b4c      	ldr	r3, [pc, #304]	@ (800b0fc <UART_SetConfig+0x338>)
 800afcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afce:	f003 0307 	and.w	r3, r3, #7
 800afd2:	2b05      	cmp	r3, #5
 800afd4:	d826      	bhi.n	800b024 <UART_SetConfig+0x260>
 800afd6:	a201      	add	r2, pc, #4	@ (adr r2, 800afdc <UART_SetConfig+0x218>)
 800afd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afdc:	0800aff5 	.word	0x0800aff5
 800afe0:	0800affd 	.word	0x0800affd
 800afe4:	0800b005 	.word	0x0800b005
 800afe8:	0800b00d 	.word	0x0800b00d
 800afec:	0800b015 	.word	0x0800b015
 800aff0:	0800b01d 	.word	0x0800b01d
 800aff4:	2300      	movs	r3, #0
 800aff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800affa:	e2ba      	b.n	800b572 <UART_SetConfig+0x7ae>
 800affc:	2304      	movs	r3, #4
 800affe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b002:	e2b6      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b004:	2308      	movs	r3, #8
 800b006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b00a:	e2b2      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b00c:	2310      	movs	r3, #16
 800b00e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b012:	e2ae      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b014:	2320      	movs	r3, #32
 800b016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b01a:	e2aa      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b01c:	2340      	movs	r3, #64	@ 0x40
 800b01e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b022:	e2a6      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b024:	2380      	movs	r3, #128	@ 0x80
 800b026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b02a:	e2a2      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b02c:	697b      	ldr	r3, [r7, #20]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	4a35      	ldr	r2, [pc, #212]	@ (800b108 <UART_SetConfig+0x344>)
 800b032:	4293      	cmp	r3, r2
 800b034:	d130      	bne.n	800b098 <UART_SetConfig+0x2d4>
 800b036:	4b31      	ldr	r3, [pc, #196]	@ (800b0fc <UART_SetConfig+0x338>)
 800b038:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b03a:	f003 0307 	and.w	r3, r3, #7
 800b03e:	2b05      	cmp	r3, #5
 800b040:	d826      	bhi.n	800b090 <UART_SetConfig+0x2cc>
 800b042:	a201      	add	r2, pc, #4	@ (adr r2, 800b048 <UART_SetConfig+0x284>)
 800b044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b048:	0800b061 	.word	0x0800b061
 800b04c:	0800b069 	.word	0x0800b069
 800b050:	0800b071 	.word	0x0800b071
 800b054:	0800b079 	.word	0x0800b079
 800b058:	0800b081 	.word	0x0800b081
 800b05c:	0800b089 	.word	0x0800b089
 800b060:	2300      	movs	r3, #0
 800b062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b066:	e284      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b068:	2304      	movs	r3, #4
 800b06a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b06e:	e280      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b070:	2308      	movs	r3, #8
 800b072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b076:	e27c      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b078:	2310      	movs	r3, #16
 800b07a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b07e:	e278      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b080:	2320      	movs	r3, #32
 800b082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b086:	e274      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b088:	2340      	movs	r3, #64	@ 0x40
 800b08a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b08e:	e270      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b090:	2380      	movs	r3, #128	@ 0x80
 800b092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b096:	e26c      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b098:	697b      	ldr	r3, [r7, #20]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	4a1b      	ldr	r2, [pc, #108]	@ (800b10c <UART_SetConfig+0x348>)
 800b09e:	4293      	cmp	r3, r2
 800b0a0:	d142      	bne.n	800b128 <UART_SetConfig+0x364>
 800b0a2:	4b16      	ldr	r3, [pc, #88]	@ (800b0fc <UART_SetConfig+0x338>)
 800b0a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b0a6:	f003 0307 	and.w	r3, r3, #7
 800b0aa:	2b05      	cmp	r3, #5
 800b0ac:	d838      	bhi.n	800b120 <UART_SetConfig+0x35c>
 800b0ae:	a201      	add	r2, pc, #4	@ (adr r2, 800b0b4 <UART_SetConfig+0x2f0>)
 800b0b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0b4:	0800b0cd 	.word	0x0800b0cd
 800b0b8:	0800b0d5 	.word	0x0800b0d5
 800b0bc:	0800b0dd 	.word	0x0800b0dd
 800b0c0:	0800b0e5 	.word	0x0800b0e5
 800b0c4:	0800b111 	.word	0x0800b111
 800b0c8:	0800b119 	.word	0x0800b119
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0d2:	e24e      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b0d4:	2304      	movs	r3, #4
 800b0d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0da:	e24a      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b0dc:	2308      	movs	r3, #8
 800b0de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0e2:	e246      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b0e4:	2310      	movs	r3, #16
 800b0e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0ea:	e242      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b0ec:	cfff69f3 	.word	0xcfff69f3
 800b0f0:	58000c00 	.word	0x58000c00
 800b0f4:	11fff4ff 	.word	0x11fff4ff
 800b0f8:	40011000 	.word	0x40011000
 800b0fc:	58024400 	.word	0x58024400
 800b100:	40004400 	.word	0x40004400
 800b104:	40004800 	.word	0x40004800
 800b108:	40004c00 	.word	0x40004c00
 800b10c:	40005000 	.word	0x40005000
 800b110:	2320      	movs	r3, #32
 800b112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b116:	e22c      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b118:	2340      	movs	r3, #64	@ 0x40
 800b11a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b11e:	e228      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b120:	2380      	movs	r3, #128	@ 0x80
 800b122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b126:	e224      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b128:	697b      	ldr	r3, [r7, #20]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	4ab1      	ldr	r2, [pc, #708]	@ (800b3f4 <UART_SetConfig+0x630>)
 800b12e:	4293      	cmp	r3, r2
 800b130:	d176      	bne.n	800b220 <UART_SetConfig+0x45c>
 800b132:	4bb1      	ldr	r3, [pc, #708]	@ (800b3f8 <UART_SetConfig+0x634>)
 800b134:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b136:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b13a:	2b28      	cmp	r3, #40	@ 0x28
 800b13c:	d86c      	bhi.n	800b218 <UART_SetConfig+0x454>
 800b13e:	a201      	add	r2, pc, #4	@ (adr r2, 800b144 <UART_SetConfig+0x380>)
 800b140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b144:	0800b1e9 	.word	0x0800b1e9
 800b148:	0800b219 	.word	0x0800b219
 800b14c:	0800b219 	.word	0x0800b219
 800b150:	0800b219 	.word	0x0800b219
 800b154:	0800b219 	.word	0x0800b219
 800b158:	0800b219 	.word	0x0800b219
 800b15c:	0800b219 	.word	0x0800b219
 800b160:	0800b219 	.word	0x0800b219
 800b164:	0800b1f1 	.word	0x0800b1f1
 800b168:	0800b219 	.word	0x0800b219
 800b16c:	0800b219 	.word	0x0800b219
 800b170:	0800b219 	.word	0x0800b219
 800b174:	0800b219 	.word	0x0800b219
 800b178:	0800b219 	.word	0x0800b219
 800b17c:	0800b219 	.word	0x0800b219
 800b180:	0800b219 	.word	0x0800b219
 800b184:	0800b1f9 	.word	0x0800b1f9
 800b188:	0800b219 	.word	0x0800b219
 800b18c:	0800b219 	.word	0x0800b219
 800b190:	0800b219 	.word	0x0800b219
 800b194:	0800b219 	.word	0x0800b219
 800b198:	0800b219 	.word	0x0800b219
 800b19c:	0800b219 	.word	0x0800b219
 800b1a0:	0800b219 	.word	0x0800b219
 800b1a4:	0800b201 	.word	0x0800b201
 800b1a8:	0800b219 	.word	0x0800b219
 800b1ac:	0800b219 	.word	0x0800b219
 800b1b0:	0800b219 	.word	0x0800b219
 800b1b4:	0800b219 	.word	0x0800b219
 800b1b8:	0800b219 	.word	0x0800b219
 800b1bc:	0800b219 	.word	0x0800b219
 800b1c0:	0800b219 	.word	0x0800b219
 800b1c4:	0800b209 	.word	0x0800b209
 800b1c8:	0800b219 	.word	0x0800b219
 800b1cc:	0800b219 	.word	0x0800b219
 800b1d0:	0800b219 	.word	0x0800b219
 800b1d4:	0800b219 	.word	0x0800b219
 800b1d8:	0800b219 	.word	0x0800b219
 800b1dc:	0800b219 	.word	0x0800b219
 800b1e0:	0800b219 	.word	0x0800b219
 800b1e4:	0800b211 	.word	0x0800b211
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1ee:	e1c0      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b1f0:	2304      	movs	r3, #4
 800b1f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1f6:	e1bc      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b1f8:	2308      	movs	r3, #8
 800b1fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1fe:	e1b8      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b200:	2310      	movs	r3, #16
 800b202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b206:	e1b4      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b208:	2320      	movs	r3, #32
 800b20a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b20e:	e1b0      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b210:	2340      	movs	r3, #64	@ 0x40
 800b212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b216:	e1ac      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b218:	2380      	movs	r3, #128	@ 0x80
 800b21a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b21e:	e1a8      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	4a75      	ldr	r2, [pc, #468]	@ (800b3fc <UART_SetConfig+0x638>)
 800b226:	4293      	cmp	r3, r2
 800b228:	d130      	bne.n	800b28c <UART_SetConfig+0x4c8>
 800b22a:	4b73      	ldr	r3, [pc, #460]	@ (800b3f8 <UART_SetConfig+0x634>)
 800b22c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b22e:	f003 0307 	and.w	r3, r3, #7
 800b232:	2b05      	cmp	r3, #5
 800b234:	d826      	bhi.n	800b284 <UART_SetConfig+0x4c0>
 800b236:	a201      	add	r2, pc, #4	@ (adr r2, 800b23c <UART_SetConfig+0x478>)
 800b238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b23c:	0800b255 	.word	0x0800b255
 800b240:	0800b25d 	.word	0x0800b25d
 800b244:	0800b265 	.word	0x0800b265
 800b248:	0800b26d 	.word	0x0800b26d
 800b24c:	0800b275 	.word	0x0800b275
 800b250:	0800b27d 	.word	0x0800b27d
 800b254:	2300      	movs	r3, #0
 800b256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b25a:	e18a      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b25c:	2304      	movs	r3, #4
 800b25e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b262:	e186      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b264:	2308      	movs	r3, #8
 800b266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b26a:	e182      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b26c:	2310      	movs	r3, #16
 800b26e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b272:	e17e      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b274:	2320      	movs	r3, #32
 800b276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b27a:	e17a      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b27c:	2340      	movs	r3, #64	@ 0x40
 800b27e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b282:	e176      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b284:	2380      	movs	r3, #128	@ 0x80
 800b286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b28a:	e172      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b28c:	697b      	ldr	r3, [r7, #20]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	4a5b      	ldr	r2, [pc, #364]	@ (800b400 <UART_SetConfig+0x63c>)
 800b292:	4293      	cmp	r3, r2
 800b294:	d130      	bne.n	800b2f8 <UART_SetConfig+0x534>
 800b296:	4b58      	ldr	r3, [pc, #352]	@ (800b3f8 <UART_SetConfig+0x634>)
 800b298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b29a:	f003 0307 	and.w	r3, r3, #7
 800b29e:	2b05      	cmp	r3, #5
 800b2a0:	d826      	bhi.n	800b2f0 <UART_SetConfig+0x52c>
 800b2a2:	a201      	add	r2, pc, #4	@ (adr r2, 800b2a8 <UART_SetConfig+0x4e4>)
 800b2a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2a8:	0800b2c1 	.word	0x0800b2c1
 800b2ac:	0800b2c9 	.word	0x0800b2c9
 800b2b0:	0800b2d1 	.word	0x0800b2d1
 800b2b4:	0800b2d9 	.word	0x0800b2d9
 800b2b8:	0800b2e1 	.word	0x0800b2e1
 800b2bc:	0800b2e9 	.word	0x0800b2e9
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2c6:	e154      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b2c8:	2304      	movs	r3, #4
 800b2ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2ce:	e150      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b2d0:	2308      	movs	r3, #8
 800b2d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2d6:	e14c      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b2d8:	2310      	movs	r3, #16
 800b2da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2de:	e148      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b2e0:	2320      	movs	r3, #32
 800b2e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2e6:	e144      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b2e8:	2340      	movs	r3, #64	@ 0x40
 800b2ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2ee:	e140      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b2f0:	2380      	movs	r3, #128	@ 0x80
 800b2f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2f6:	e13c      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b2f8:	697b      	ldr	r3, [r7, #20]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	4a41      	ldr	r2, [pc, #260]	@ (800b404 <UART_SetConfig+0x640>)
 800b2fe:	4293      	cmp	r3, r2
 800b300:	f040 8082 	bne.w	800b408 <UART_SetConfig+0x644>
 800b304:	4b3c      	ldr	r3, [pc, #240]	@ (800b3f8 <UART_SetConfig+0x634>)
 800b306:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b308:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b30c:	2b28      	cmp	r3, #40	@ 0x28
 800b30e:	d86d      	bhi.n	800b3ec <UART_SetConfig+0x628>
 800b310:	a201      	add	r2, pc, #4	@ (adr r2, 800b318 <UART_SetConfig+0x554>)
 800b312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b316:	bf00      	nop
 800b318:	0800b3bd 	.word	0x0800b3bd
 800b31c:	0800b3ed 	.word	0x0800b3ed
 800b320:	0800b3ed 	.word	0x0800b3ed
 800b324:	0800b3ed 	.word	0x0800b3ed
 800b328:	0800b3ed 	.word	0x0800b3ed
 800b32c:	0800b3ed 	.word	0x0800b3ed
 800b330:	0800b3ed 	.word	0x0800b3ed
 800b334:	0800b3ed 	.word	0x0800b3ed
 800b338:	0800b3c5 	.word	0x0800b3c5
 800b33c:	0800b3ed 	.word	0x0800b3ed
 800b340:	0800b3ed 	.word	0x0800b3ed
 800b344:	0800b3ed 	.word	0x0800b3ed
 800b348:	0800b3ed 	.word	0x0800b3ed
 800b34c:	0800b3ed 	.word	0x0800b3ed
 800b350:	0800b3ed 	.word	0x0800b3ed
 800b354:	0800b3ed 	.word	0x0800b3ed
 800b358:	0800b3cd 	.word	0x0800b3cd
 800b35c:	0800b3ed 	.word	0x0800b3ed
 800b360:	0800b3ed 	.word	0x0800b3ed
 800b364:	0800b3ed 	.word	0x0800b3ed
 800b368:	0800b3ed 	.word	0x0800b3ed
 800b36c:	0800b3ed 	.word	0x0800b3ed
 800b370:	0800b3ed 	.word	0x0800b3ed
 800b374:	0800b3ed 	.word	0x0800b3ed
 800b378:	0800b3d5 	.word	0x0800b3d5
 800b37c:	0800b3ed 	.word	0x0800b3ed
 800b380:	0800b3ed 	.word	0x0800b3ed
 800b384:	0800b3ed 	.word	0x0800b3ed
 800b388:	0800b3ed 	.word	0x0800b3ed
 800b38c:	0800b3ed 	.word	0x0800b3ed
 800b390:	0800b3ed 	.word	0x0800b3ed
 800b394:	0800b3ed 	.word	0x0800b3ed
 800b398:	0800b3dd 	.word	0x0800b3dd
 800b39c:	0800b3ed 	.word	0x0800b3ed
 800b3a0:	0800b3ed 	.word	0x0800b3ed
 800b3a4:	0800b3ed 	.word	0x0800b3ed
 800b3a8:	0800b3ed 	.word	0x0800b3ed
 800b3ac:	0800b3ed 	.word	0x0800b3ed
 800b3b0:	0800b3ed 	.word	0x0800b3ed
 800b3b4:	0800b3ed 	.word	0x0800b3ed
 800b3b8:	0800b3e5 	.word	0x0800b3e5
 800b3bc:	2301      	movs	r3, #1
 800b3be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3c2:	e0d6      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b3c4:	2304      	movs	r3, #4
 800b3c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3ca:	e0d2      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b3cc:	2308      	movs	r3, #8
 800b3ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3d2:	e0ce      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b3d4:	2310      	movs	r3, #16
 800b3d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3da:	e0ca      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b3dc:	2320      	movs	r3, #32
 800b3de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3e2:	e0c6      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b3e4:	2340      	movs	r3, #64	@ 0x40
 800b3e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3ea:	e0c2      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b3ec:	2380      	movs	r3, #128	@ 0x80
 800b3ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3f2:	e0be      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b3f4:	40011400 	.word	0x40011400
 800b3f8:	58024400 	.word	0x58024400
 800b3fc:	40007800 	.word	0x40007800
 800b400:	40007c00 	.word	0x40007c00
 800b404:	40011800 	.word	0x40011800
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	4aad      	ldr	r2, [pc, #692]	@ (800b6c4 <UART_SetConfig+0x900>)
 800b40e:	4293      	cmp	r3, r2
 800b410:	d176      	bne.n	800b500 <UART_SetConfig+0x73c>
 800b412:	4bad      	ldr	r3, [pc, #692]	@ (800b6c8 <UART_SetConfig+0x904>)
 800b414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b416:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b41a:	2b28      	cmp	r3, #40	@ 0x28
 800b41c:	d86c      	bhi.n	800b4f8 <UART_SetConfig+0x734>
 800b41e:	a201      	add	r2, pc, #4	@ (adr r2, 800b424 <UART_SetConfig+0x660>)
 800b420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b424:	0800b4c9 	.word	0x0800b4c9
 800b428:	0800b4f9 	.word	0x0800b4f9
 800b42c:	0800b4f9 	.word	0x0800b4f9
 800b430:	0800b4f9 	.word	0x0800b4f9
 800b434:	0800b4f9 	.word	0x0800b4f9
 800b438:	0800b4f9 	.word	0x0800b4f9
 800b43c:	0800b4f9 	.word	0x0800b4f9
 800b440:	0800b4f9 	.word	0x0800b4f9
 800b444:	0800b4d1 	.word	0x0800b4d1
 800b448:	0800b4f9 	.word	0x0800b4f9
 800b44c:	0800b4f9 	.word	0x0800b4f9
 800b450:	0800b4f9 	.word	0x0800b4f9
 800b454:	0800b4f9 	.word	0x0800b4f9
 800b458:	0800b4f9 	.word	0x0800b4f9
 800b45c:	0800b4f9 	.word	0x0800b4f9
 800b460:	0800b4f9 	.word	0x0800b4f9
 800b464:	0800b4d9 	.word	0x0800b4d9
 800b468:	0800b4f9 	.word	0x0800b4f9
 800b46c:	0800b4f9 	.word	0x0800b4f9
 800b470:	0800b4f9 	.word	0x0800b4f9
 800b474:	0800b4f9 	.word	0x0800b4f9
 800b478:	0800b4f9 	.word	0x0800b4f9
 800b47c:	0800b4f9 	.word	0x0800b4f9
 800b480:	0800b4f9 	.word	0x0800b4f9
 800b484:	0800b4e1 	.word	0x0800b4e1
 800b488:	0800b4f9 	.word	0x0800b4f9
 800b48c:	0800b4f9 	.word	0x0800b4f9
 800b490:	0800b4f9 	.word	0x0800b4f9
 800b494:	0800b4f9 	.word	0x0800b4f9
 800b498:	0800b4f9 	.word	0x0800b4f9
 800b49c:	0800b4f9 	.word	0x0800b4f9
 800b4a0:	0800b4f9 	.word	0x0800b4f9
 800b4a4:	0800b4e9 	.word	0x0800b4e9
 800b4a8:	0800b4f9 	.word	0x0800b4f9
 800b4ac:	0800b4f9 	.word	0x0800b4f9
 800b4b0:	0800b4f9 	.word	0x0800b4f9
 800b4b4:	0800b4f9 	.word	0x0800b4f9
 800b4b8:	0800b4f9 	.word	0x0800b4f9
 800b4bc:	0800b4f9 	.word	0x0800b4f9
 800b4c0:	0800b4f9 	.word	0x0800b4f9
 800b4c4:	0800b4f1 	.word	0x0800b4f1
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4ce:	e050      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b4d0:	2304      	movs	r3, #4
 800b4d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4d6:	e04c      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b4d8:	2308      	movs	r3, #8
 800b4da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4de:	e048      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b4e0:	2310      	movs	r3, #16
 800b4e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4e6:	e044      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b4e8:	2320      	movs	r3, #32
 800b4ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4ee:	e040      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b4f0:	2340      	movs	r3, #64	@ 0x40
 800b4f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4f6:	e03c      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b4f8:	2380      	movs	r3, #128	@ 0x80
 800b4fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4fe:	e038      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b500:	697b      	ldr	r3, [r7, #20]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	4a71      	ldr	r2, [pc, #452]	@ (800b6cc <UART_SetConfig+0x908>)
 800b506:	4293      	cmp	r3, r2
 800b508:	d130      	bne.n	800b56c <UART_SetConfig+0x7a8>
 800b50a:	4b6f      	ldr	r3, [pc, #444]	@ (800b6c8 <UART_SetConfig+0x904>)
 800b50c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b50e:	f003 0307 	and.w	r3, r3, #7
 800b512:	2b05      	cmp	r3, #5
 800b514:	d826      	bhi.n	800b564 <UART_SetConfig+0x7a0>
 800b516:	a201      	add	r2, pc, #4	@ (adr r2, 800b51c <UART_SetConfig+0x758>)
 800b518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b51c:	0800b535 	.word	0x0800b535
 800b520:	0800b53d 	.word	0x0800b53d
 800b524:	0800b545 	.word	0x0800b545
 800b528:	0800b54d 	.word	0x0800b54d
 800b52c:	0800b555 	.word	0x0800b555
 800b530:	0800b55d 	.word	0x0800b55d
 800b534:	2302      	movs	r3, #2
 800b536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b53a:	e01a      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b53c:	2304      	movs	r3, #4
 800b53e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b542:	e016      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b544:	2308      	movs	r3, #8
 800b546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b54a:	e012      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b54c:	2310      	movs	r3, #16
 800b54e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b552:	e00e      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b554:	2320      	movs	r3, #32
 800b556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b55a:	e00a      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b55c:	2340      	movs	r3, #64	@ 0x40
 800b55e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b562:	e006      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b564:	2380      	movs	r3, #128	@ 0x80
 800b566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b56a:	e002      	b.n	800b572 <UART_SetConfig+0x7ae>
 800b56c:	2380      	movs	r3, #128	@ 0x80
 800b56e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	4a55      	ldr	r2, [pc, #340]	@ (800b6cc <UART_SetConfig+0x908>)
 800b578:	4293      	cmp	r3, r2
 800b57a:	f040 80f8 	bne.w	800b76e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b57e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b582:	2b20      	cmp	r3, #32
 800b584:	dc46      	bgt.n	800b614 <UART_SetConfig+0x850>
 800b586:	2b02      	cmp	r3, #2
 800b588:	db75      	blt.n	800b676 <UART_SetConfig+0x8b2>
 800b58a:	3b02      	subs	r3, #2
 800b58c:	2b1e      	cmp	r3, #30
 800b58e:	d872      	bhi.n	800b676 <UART_SetConfig+0x8b2>
 800b590:	a201      	add	r2, pc, #4	@ (adr r2, 800b598 <UART_SetConfig+0x7d4>)
 800b592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b596:	bf00      	nop
 800b598:	0800b61b 	.word	0x0800b61b
 800b59c:	0800b677 	.word	0x0800b677
 800b5a0:	0800b623 	.word	0x0800b623
 800b5a4:	0800b677 	.word	0x0800b677
 800b5a8:	0800b677 	.word	0x0800b677
 800b5ac:	0800b677 	.word	0x0800b677
 800b5b0:	0800b633 	.word	0x0800b633
 800b5b4:	0800b677 	.word	0x0800b677
 800b5b8:	0800b677 	.word	0x0800b677
 800b5bc:	0800b677 	.word	0x0800b677
 800b5c0:	0800b677 	.word	0x0800b677
 800b5c4:	0800b677 	.word	0x0800b677
 800b5c8:	0800b677 	.word	0x0800b677
 800b5cc:	0800b677 	.word	0x0800b677
 800b5d0:	0800b643 	.word	0x0800b643
 800b5d4:	0800b677 	.word	0x0800b677
 800b5d8:	0800b677 	.word	0x0800b677
 800b5dc:	0800b677 	.word	0x0800b677
 800b5e0:	0800b677 	.word	0x0800b677
 800b5e4:	0800b677 	.word	0x0800b677
 800b5e8:	0800b677 	.word	0x0800b677
 800b5ec:	0800b677 	.word	0x0800b677
 800b5f0:	0800b677 	.word	0x0800b677
 800b5f4:	0800b677 	.word	0x0800b677
 800b5f8:	0800b677 	.word	0x0800b677
 800b5fc:	0800b677 	.word	0x0800b677
 800b600:	0800b677 	.word	0x0800b677
 800b604:	0800b677 	.word	0x0800b677
 800b608:	0800b677 	.word	0x0800b677
 800b60c:	0800b677 	.word	0x0800b677
 800b610:	0800b669 	.word	0x0800b669
 800b614:	2b40      	cmp	r3, #64	@ 0x40
 800b616:	d02a      	beq.n	800b66e <UART_SetConfig+0x8aa>
 800b618:	e02d      	b.n	800b676 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b61a:	f7fe fc05 	bl	8009e28 <HAL_RCCEx_GetD3PCLK1Freq>
 800b61e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b620:	e02f      	b.n	800b682 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b622:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b626:	4618      	mov	r0, r3
 800b628:	f7fe fc14 	bl	8009e54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b62c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b62e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b630:	e027      	b.n	800b682 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b632:	f107 0318 	add.w	r3, r7, #24
 800b636:	4618      	mov	r0, r3
 800b638:	f7fe fd60 	bl	800a0fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b63c:	69fb      	ldr	r3, [r7, #28]
 800b63e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b640:	e01f      	b.n	800b682 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b642:	4b21      	ldr	r3, [pc, #132]	@ (800b6c8 <UART_SetConfig+0x904>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	f003 0320 	and.w	r3, r3, #32
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d009      	beq.n	800b662 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b64e:	4b1e      	ldr	r3, [pc, #120]	@ (800b6c8 <UART_SetConfig+0x904>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	08db      	lsrs	r3, r3, #3
 800b654:	f003 0303 	and.w	r3, r3, #3
 800b658:	4a1d      	ldr	r2, [pc, #116]	@ (800b6d0 <UART_SetConfig+0x90c>)
 800b65a:	fa22 f303 	lsr.w	r3, r2, r3
 800b65e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b660:	e00f      	b.n	800b682 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b662:	4b1b      	ldr	r3, [pc, #108]	@ (800b6d0 <UART_SetConfig+0x90c>)
 800b664:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b666:	e00c      	b.n	800b682 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b668:	4b1a      	ldr	r3, [pc, #104]	@ (800b6d4 <UART_SetConfig+0x910>)
 800b66a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b66c:	e009      	b.n	800b682 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b66e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b672:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b674:	e005      	b.n	800b682 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b676:	2300      	movs	r3, #0
 800b678:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b67a:	2301      	movs	r3, #1
 800b67c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b680:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b682:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b684:	2b00      	cmp	r3, #0
 800b686:	f000 81ee 	beq.w	800ba66 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b68a:	697b      	ldr	r3, [r7, #20]
 800b68c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b68e:	4a12      	ldr	r2, [pc, #72]	@ (800b6d8 <UART_SetConfig+0x914>)
 800b690:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b694:	461a      	mov	r2, r3
 800b696:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b698:	fbb3 f3f2 	udiv	r3, r3, r2
 800b69c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b69e:	697b      	ldr	r3, [r7, #20]
 800b6a0:	685a      	ldr	r2, [r3, #4]
 800b6a2:	4613      	mov	r3, r2
 800b6a4:	005b      	lsls	r3, r3, #1
 800b6a6:	4413      	add	r3, r2
 800b6a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b6aa:	429a      	cmp	r2, r3
 800b6ac:	d305      	bcc.n	800b6ba <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b6ae:	697b      	ldr	r3, [r7, #20]
 800b6b0:	685b      	ldr	r3, [r3, #4]
 800b6b2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b6b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b6b6:	429a      	cmp	r2, r3
 800b6b8:	d910      	bls.n	800b6dc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b6c0:	e1d1      	b.n	800ba66 <UART_SetConfig+0xca2>
 800b6c2:	bf00      	nop
 800b6c4:	40011c00 	.word	0x40011c00
 800b6c8:	58024400 	.word	0x58024400
 800b6cc:	58000c00 	.word	0x58000c00
 800b6d0:	03d09000 	.word	0x03d09000
 800b6d4:	003d0900 	.word	0x003d0900
 800b6d8:	0801413c 	.word	0x0801413c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b6dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6de:	2200      	movs	r2, #0
 800b6e0:	60bb      	str	r3, [r7, #8]
 800b6e2:	60fa      	str	r2, [r7, #12]
 800b6e4:	697b      	ldr	r3, [r7, #20]
 800b6e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6e8:	4ac0      	ldr	r2, [pc, #768]	@ (800b9ec <UART_SetConfig+0xc28>)
 800b6ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b6ee:	b29b      	uxth	r3, r3
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	603b      	str	r3, [r7, #0]
 800b6f4:	607a      	str	r2, [r7, #4]
 800b6f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b6fe:	f7f5 f80b 	bl	8000718 <__aeabi_uldivmod>
 800b702:	4602      	mov	r2, r0
 800b704:	460b      	mov	r3, r1
 800b706:	4610      	mov	r0, r2
 800b708:	4619      	mov	r1, r3
 800b70a:	f04f 0200 	mov.w	r2, #0
 800b70e:	f04f 0300 	mov.w	r3, #0
 800b712:	020b      	lsls	r3, r1, #8
 800b714:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b718:	0202      	lsls	r2, r0, #8
 800b71a:	6979      	ldr	r1, [r7, #20]
 800b71c:	6849      	ldr	r1, [r1, #4]
 800b71e:	0849      	lsrs	r1, r1, #1
 800b720:	2000      	movs	r0, #0
 800b722:	460c      	mov	r4, r1
 800b724:	4605      	mov	r5, r0
 800b726:	eb12 0804 	adds.w	r8, r2, r4
 800b72a:	eb43 0905 	adc.w	r9, r3, r5
 800b72e:	697b      	ldr	r3, [r7, #20]
 800b730:	685b      	ldr	r3, [r3, #4]
 800b732:	2200      	movs	r2, #0
 800b734:	469a      	mov	sl, r3
 800b736:	4693      	mov	fp, r2
 800b738:	4652      	mov	r2, sl
 800b73a:	465b      	mov	r3, fp
 800b73c:	4640      	mov	r0, r8
 800b73e:	4649      	mov	r1, r9
 800b740:	f7f4 ffea 	bl	8000718 <__aeabi_uldivmod>
 800b744:	4602      	mov	r2, r0
 800b746:	460b      	mov	r3, r1
 800b748:	4613      	mov	r3, r2
 800b74a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b74c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b74e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b752:	d308      	bcc.n	800b766 <UART_SetConfig+0x9a2>
 800b754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b756:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b75a:	d204      	bcs.n	800b766 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800b75c:	697b      	ldr	r3, [r7, #20]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b762:	60da      	str	r2, [r3, #12]
 800b764:	e17f      	b.n	800ba66 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800b766:	2301      	movs	r3, #1
 800b768:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b76c:	e17b      	b.n	800ba66 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b76e:	697b      	ldr	r3, [r7, #20]
 800b770:	69db      	ldr	r3, [r3, #28]
 800b772:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b776:	f040 80bd 	bne.w	800b8f4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800b77a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b77e:	2b20      	cmp	r3, #32
 800b780:	dc48      	bgt.n	800b814 <UART_SetConfig+0xa50>
 800b782:	2b00      	cmp	r3, #0
 800b784:	db7b      	blt.n	800b87e <UART_SetConfig+0xaba>
 800b786:	2b20      	cmp	r3, #32
 800b788:	d879      	bhi.n	800b87e <UART_SetConfig+0xaba>
 800b78a:	a201      	add	r2, pc, #4	@ (adr r2, 800b790 <UART_SetConfig+0x9cc>)
 800b78c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b790:	0800b81b 	.word	0x0800b81b
 800b794:	0800b823 	.word	0x0800b823
 800b798:	0800b87f 	.word	0x0800b87f
 800b79c:	0800b87f 	.word	0x0800b87f
 800b7a0:	0800b82b 	.word	0x0800b82b
 800b7a4:	0800b87f 	.word	0x0800b87f
 800b7a8:	0800b87f 	.word	0x0800b87f
 800b7ac:	0800b87f 	.word	0x0800b87f
 800b7b0:	0800b83b 	.word	0x0800b83b
 800b7b4:	0800b87f 	.word	0x0800b87f
 800b7b8:	0800b87f 	.word	0x0800b87f
 800b7bc:	0800b87f 	.word	0x0800b87f
 800b7c0:	0800b87f 	.word	0x0800b87f
 800b7c4:	0800b87f 	.word	0x0800b87f
 800b7c8:	0800b87f 	.word	0x0800b87f
 800b7cc:	0800b87f 	.word	0x0800b87f
 800b7d0:	0800b84b 	.word	0x0800b84b
 800b7d4:	0800b87f 	.word	0x0800b87f
 800b7d8:	0800b87f 	.word	0x0800b87f
 800b7dc:	0800b87f 	.word	0x0800b87f
 800b7e0:	0800b87f 	.word	0x0800b87f
 800b7e4:	0800b87f 	.word	0x0800b87f
 800b7e8:	0800b87f 	.word	0x0800b87f
 800b7ec:	0800b87f 	.word	0x0800b87f
 800b7f0:	0800b87f 	.word	0x0800b87f
 800b7f4:	0800b87f 	.word	0x0800b87f
 800b7f8:	0800b87f 	.word	0x0800b87f
 800b7fc:	0800b87f 	.word	0x0800b87f
 800b800:	0800b87f 	.word	0x0800b87f
 800b804:	0800b87f 	.word	0x0800b87f
 800b808:	0800b87f 	.word	0x0800b87f
 800b80c:	0800b87f 	.word	0x0800b87f
 800b810:	0800b871 	.word	0x0800b871
 800b814:	2b40      	cmp	r3, #64	@ 0x40
 800b816:	d02e      	beq.n	800b876 <UART_SetConfig+0xab2>
 800b818:	e031      	b.n	800b87e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b81a:	f7fd f8d9 	bl	80089d0 <HAL_RCC_GetPCLK1Freq>
 800b81e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b820:	e033      	b.n	800b88a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b822:	f7fd f8eb 	bl	80089fc <HAL_RCC_GetPCLK2Freq>
 800b826:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b828:	e02f      	b.n	800b88a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b82a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b82e:	4618      	mov	r0, r3
 800b830:	f7fe fb10 	bl	8009e54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b836:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b838:	e027      	b.n	800b88a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b83a:	f107 0318 	add.w	r3, r7, #24
 800b83e:	4618      	mov	r0, r3
 800b840:	f7fe fc5c 	bl	800a0fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b844:	69fb      	ldr	r3, [r7, #28]
 800b846:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b848:	e01f      	b.n	800b88a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b84a:	4b69      	ldr	r3, [pc, #420]	@ (800b9f0 <UART_SetConfig+0xc2c>)
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	f003 0320 	and.w	r3, r3, #32
 800b852:	2b00      	cmp	r3, #0
 800b854:	d009      	beq.n	800b86a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b856:	4b66      	ldr	r3, [pc, #408]	@ (800b9f0 <UART_SetConfig+0xc2c>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	08db      	lsrs	r3, r3, #3
 800b85c:	f003 0303 	and.w	r3, r3, #3
 800b860:	4a64      	ldr	r2, [pc, #400]	@ (800b9f4 <UART_SetConfig+0xc30>)
 800b862:	fa22 f303 	lsr.w	r3, r2, r3
 800b866:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b868:	e00f      	b.n	800b88a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800b86a:	4b62      	ldr	r3, [pc, #392]	@ (800b9f4 <UART_SetConfig+0xc30>)
 800b86c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b86e:	e00c      	b.n	800b88a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b870:	4b61      	ldr	r3, [pc, #388]	@ (800b9f8 <UART_SetConfig+0xc34>)
 800b872:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b874:	e009      	b.n	800b88a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b876:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b87a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b87c:	e005      	b.n	800b88a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800b87e:	2300      	movs	r3, #0
 800b880:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b882:	2301      	movs	r3, #1
 800b884:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b888:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b88a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	f000 80ea 	beq.w	800ba66 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b892:	697b      	ldr	r3, [r7, #20]
 800b894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b896:	4a55      	ldr	r2, [pc, #340]	@ (800b9ec <UART_SetConfig+0xc28>)
 800b898:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b89c:	461a      	mov	r2, r3
 800b89e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b8a4:	005a      	lsls	r2, r3, #1
 800b8a6:	697b      	ldr	r3, [r7, #20]
 800b8a8:	685b      	ldr	r3, [r3, #4]
 800b8aa:	085b      	lsrs	r3, r3, #1
 800b8ac:	441a      	add	r2, r3
 800b8ae:	697b      	ldr	r3, [r7, #20]
 800b8b0:	685b      	ldr	r3, [r3, #4]
 800b8b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b8b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8ba:	2b0f      	cmp	r3, #15
 800b8bc:	d916      	bls.n	800b8ec <UART_SetConfig+0xb28>
 800b8be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b8c4:	d212      	bcs.n	800b8ec <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b8c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8c8:	b29b      	uxth	r3, r3
 800b8ca:	f023 030f 	bic.w	r3, r3, #15
 800b8ce:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b8d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8d2:	085b      	lsrs	r3, r3, #1
 800b8d4:	b29b      	uxth	r3, r3
 800b8d6:	f003 0307 	and.w	r3, r3, #7
 800b8da:	b29a      	uxth	r2, r3
 800b8dc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b8de:	4313      	orrs	r3, r2
 800b8e0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800b8e2:	697b      	ldr	r3, [r7, #20]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800b8e8:	60da      	str	r2, [r3, #12]
 800b8ea:	e0bc      	b.n	800ba66 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b8f2:	e0b8      	b.n	800ba66 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b8f4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b8f8:	2b20      	cmp	r3, #32
 800b8fa:	dc4b      	bgt.n	800b994 <UART_SetConfig+0xbd0>
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	f2c0 8087 	blt.w	800ba10 <UART_SetConfig+0xc4c>
 800b902:	2b20      	cmp	r3, #32
 800b904:	f200 8084 	bhi.w	800ba10 <UART_SetConfig+0xc4c>
 800b908:	a201      	add	r2, pc, #4	@ (adr r2, 800b910 <UART_SetConfig+0xb4c>)
 800b90a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b90e:	bf00      	nop
 800b910:	0800b99b 	.word	0x0800b99b
 800b914:	0800b9a3 	.word	0x0800b9a3
 800b918:	0800ba11 	.word	0x0800ba11
 800b91c:	0800ba11 	.word	0x0800ba11
 800b920:	0800b9ab 	.word	0x0800b9ab
 800b924:	0800ba11 	.word	0x0800ba11
 800b928:	0800ba11 	.word	0x0800ba11
 800b92c:	0800ba11 	.word	0x0800ba11
 800b930:	0800b9bb 	.word	0x0800b9bb
 800b934:	0800ba11 	.word	0x0800ba11
 800b938:	0800ba11 	.word	0x0800ba11
 800b93c:	0800ba11 	.word	0x0800ba11
 800b940:	0800ba11 	.word	0x0800ba11
 800b944:	0800ba11 	.word	0x0800ba11
 800b948:	0800ba11 	.word	0x0800ba11
 800b94c:	0800ba11 	.word	0x0800ba11
 800b950:	0800b9cb 	.word	0x0800b9cb
 800b954:	0800ba11 	.word	0x0800ba11
 800b958:	0800ba11 	.word	0x0800ba11
 800b95c:	0800ba11 	.word	0x0800ba11
 800b960:	0800ba11 	.word	0x0800ba11
 800b964:	0800ba11 	.word	0x0800ba11
 800b968:	0800ba11 	.word	0x0800ba11
 800b96c:	0800ba11 	.word	0x0800ba11
 800b970:	0800ba11 	.word	0x0800ba11
 800b974:	0800ba11 	.word	0x0800ba11
 800b978:	0800ba11 	.word	0x0800ba11
 800b97c:	0800ba11 	.word	0x0800ba11
 800b980:	0800ba11 	.word	0x0800ba11
 800b984:	0800ba11 	.word	0x0800ba11
 800b988:	0800ba11 	.word	0x0800ba11
 800b98c:	0800ba11 	.word	0x0800ba11
 800b990:	0800ba03 	.word	0x0800ba03
 800b994:	2b40      	cmp	r3, #64	@ 0x40
 800b996:	d037      	beq.n	800ba08 <UART_SetConfig+0xc44>
 800b998:	e03a      	b.n	800ba10 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b99a:	f7fd f819 	bl	80089d0 <HAL_RCC_GetPCLK1Freq>
 800b99e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b9a0:	e03c      	b.n	800ba1c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b9a2:	f7fd f82b 	bl	80089fc <HAL_RCC_GetPCLK2Freq>
 800b9a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b9a8:	e038      	b.n	800ba1c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b9aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f7fe fa50 	bl	8009e54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b9b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b9b8:	e030      	b.n	800ba1c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b9ba:	f107 0318 	add.w	r3, r7, #24
 800b9be:	4618      	mov	r0, r3
 800b9c0:	f7fe fb9c 	bl	800a0fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b9c4:	69fb      	ldr	r3, [r7, #28]
 800b9c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b9c8:	e028      	b.n	800ba1c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b9ca:	4b09      	ldr	r3, [pc, #36]	@ (800b9f0 <UART_SetConfig+0xc2c>)
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	f003 0320 	and.w	r3, r3, #32
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d012      	beq.n	800b9fc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b9d6:	4b06      	ldr	r3, [pc, #24]	@ (800b9f0 <UART_SetConfig+0xc2c>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	08db      	lsrs	r3, r3, #3
 800b9dc:	f003 0303 	and.w	r3, r3, #3
 800b9e0:	4a04      	ldr	r2, [pc, #16]	@ (800b9f4 <UART_SetConfig+0xc30>)
 800b9e2:	fa22 f303 	lsr.w	r3, r2, r3
 800b9e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b9e8:	e018      	b.n	800ba1c <UART_SetConfig+0xc58>
 800b9ea:	bf00      	nop
 800b9ec:	0801413c 	.word	0x0801413c
 800b9f0:	58024400 	.word	0x58024400
 800b9f4:	03d09000 	.word	0x03d09000
 800b9f8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800b9fc:	4b24      	ldr	r3, [pc, #144]	@ (800ba90 <UART_SetConfig+0xccc>)
 800b9fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba00:	e00c      	b.n	800ba1c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ba02:	4b24      	ldr	r3, [pc, #144]	@ (800ba94 <UART_SetConfig+0xcd0>)
 800ba04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba06:	e009      	b.n	800ba1c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ba08:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ba0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba0e:	e005      	b.n	800ba1c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800ba10:	2300      	movs	r3, #0
 800ba12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ba14:	2301      	movs	r3, #1
 800ba16:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ba1a:	bf00      	nop
    }

    if (pclk != 0U)
 800ba1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d021      	beq.n	800ba66 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ba22:	697b      	ldr	r3, [r7, #20]
 800ba24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba26:	4a1c      	ldr	r2, [pc, #112]	@ (800ba98 <UART_SetConfig+0xcd4>)
 800ba28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ba2c:	461a      	mov	r2, r3
 800ba2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba30:	fbb3 f2f2 	udiv	r2, r3, r2
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	685b      	ldr	r3, [r3, #4]
 800ba38:	085b      	lsrs	r3, r3, #1
 800ba3a:	441a      	add	r2, r3
 800ba3c:	697b      	ldr	r3, [r7, #20]
 800ba3e:	685b      	ldr	r3, [r3, #4]
 800ba40:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba44:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ba46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba48:	2b0f      	cmp	r3, #15
 800ba4a:	d909      	bls.n	800ba60 <UART_SetConfig+0xc9c>
 800ba4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba52:	d205      	bcs.n	800ba60 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ba54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba56:	b29a      	uxth	r2, r3
 800ba58:	697b      	ldr	r3, [r7, #20]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	60da      	str	r2, [r3, #12]
 800ba5e:	e002      	b.n	800ba66 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ba60:	2301      	movs	r3, #1
 800ba62:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ba66:	697b      	ldr	r3, [r7, #20]
 800ba68:	2201      	movs	r2, #1
 800ba6a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ba6e:	697b      	ldr	r3, [r7, #20]
 800ba70:	2201      	movs	r2, #1
 800ba72:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ba76:	697b      	ldr	r3, [r7, #20]
 800ba78:	2200      	movs	r2, #0
 800ba7a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ba7c:	697b      	ldr	r3, [r7, #20]
 800ba7e:	2200      	movs	r2, #0
 800ba80:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ba82:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	3748      	adds	r7, #72	@ 0x48
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ba90:	03d09000 	.word	0x03d09000
 800ba94:	003d0900 	.word	0x003d0900
 800ba98:	0801413c 	.word	0x0801413c

0800ba9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ba9c:	b480      	push	{r7}
 800ba9e:	b083      	sub	sp, #12
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800baa8:	f003 0308 	and.w	r3, r3, #8
 800baac:	2b00      	cmp	r3, #0
 800baae:	d00a      	beq.n	800bac6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	685b      	ldr	r3, [r3, #4]
 800bab6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	430a      	orrs	r2, r1
 800bac4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800baca:	f003 0301 	and.w	r3, r3, #1
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d00a      	beq.n	800bae8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	685b      	ldr	r3, [r3, #4]
 800bad8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	430a      	orrs	r2, r1
 800bae6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800baec:	f003 0302 	and.w	r3, r3, #2
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d00a      	beq.n	800bb0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	685b      	ldr	r3, [r3, #4]
 800bafa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	430a      	orrs	r2, r1
 800bb08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb0e:	f003 0304 	and.w	r3, r3, #4
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d00a      	beq.n	800bb2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	685b      	ldr	r3, [r3, #4]
 800bb1c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	430a      	orrs	r2, r1
 800bb2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb30:	f003 0310 	and.w	r3, r3, #16
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d00a      	beq.n	800bb4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	689b      	ldr	r3, [r3, #8]
 800bb3e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	430a      	orrs	r2, r1
 800bb4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb52:	f003 0320 	and.w	r3, r3, #32
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d00a      	beq.n	800bb70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	689b      	ldr	r3, [r3, #8]
 800bb60:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	430a      	orrs	r2, r1
 800bb6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d01a      	beq.n	800bbb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	685b      	ldr	r3, [r3, #4]
 800bb82:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	430a      	orrs	r2, r1
 800bb90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bb9a:	d10a      	bne.n	800bbb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	685b      	ldr	r3, [r3, #4]
 800bba2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	430a      	orrs	r2, r1
 800bbb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d00a      	beq.n	800bbd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	685b      	ldr	r3, [r3, #4]
 800bbc4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	430a      	orrs	r2, r1
 800bbd2:	605a      	str	r2, [r3, #4]
  }
}
 800bbd4:	bf00      	nop
 800bbd6:	370c      	adds	r7, #12
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbde:	4770      	bx	lr

0800bbe0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b098      	sub	sp, #96	@ 0x60
 800bbe4:	af02      	add	r7, sp, #8
 800bbe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2200      	movs	r2, #0
 800bbec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bbf0:	f7f6 f8da 	bl	8001da8 <HAL_GetTick>
 800bbf4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	f003 0308 	and.w	r3, r3, #8
 800bc00:	2b08      	cmp	r3, #8
 800bc02:	d12f      	bne.n	800bc64 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bc04:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bc08:	9300      	str	r3, [sp, #0]
 800bc0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	f000 f88e 	bl	800bd34 <UART_WaitOnFlagUntilTimeout>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d022      	beq.n	800bc64 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc26:	e853 3f00 	ldrex	r3, [r3]
 800bc2a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bc2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bc32:	653b      	str	r3, [r7, #80]	@ 0x50
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	461a      	mov	r2, r3
 800bc3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc3c:	647b      	str	r3, [r7, #68]	@ 0x44
 800bc3e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc40:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bc42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bc44:	e841 2300 	strex	r3, r2, [r1]
 800bc48:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bc4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d1e6      	bne.n	800bc1e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2220      	movs	r2, #32
 800bc54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bc60:	2303      	movs	r3, #3
 800bc62:	e063      	b.n	800bd2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	f003 0304 	and.w	r3, r3, #4
 800bc6e:	2b04      	cmp	r3, #4
 800bc70:	d149      	bne.n	800bd06 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bc72:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bc76:	9300      	str	r3, [sp, #0]
 800bc78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	f000 f857 	bl	800bd34 <UART_WaitOnFlagUntilTimeout>
 800bc86:	4603      	mov	r3, r0
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d03c      	beq.n	800bd06 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc94:	e853 3f00 	ldrex	r3, [r3]
 800bc98:	623b      	str	r3, [r7, #32]
   return(result);
 800bc9a:	6a3b      	ldr	r3, [r7, #32]
 800bc9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bca0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	461a      	mov	r2, r3
 800bca8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bcaa:	633b      	str	r3, [r7, #48]	@ 0x30
 800bcac:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bcb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bcb2:	e841 2300 	strex	r3, r2, [r1]
 800bcb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bcb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d1e6      	bne.n	800bc8c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	3308      	adds	r3, #8
 800bcc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcc6:	693b      	ldr	r3, [r7, #16]
 800bcc8:	e853 3f00 	ldrex	r3, [r3]
 800bccc:	60fb      	str	r3, [r7, #12]
   return(result);
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	f023 0301 	bic.w	r3, r3, #1
 800bcd4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	3308      	adds	r3, #8
 800bcdc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bcde:	61fa      	str	r2, [r7, #28]
 800bce0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bce2:	69b9      	ldr	r1, [r7, #24]
 800bce4:	69fa      	ldr	r2, [r7, #28]
 800bce6:	e841 2300 	strex	r3, r2, [r1]
 800bcea:	617b      	str	r3, [r7, #20]
   return(result);
 800bcec:	697b      	ldr	r3, [r7, #20]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d1e5      	bne.n	800bcbe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	2220      	movs	r2, #32
 800bcf6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bd02:	2303      	movs	r3, #3
 800bd04:	e012      	b.n	800bd2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2220      	movs	r2, #32
 800bd0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2220      	movs	r2, #32
 800bd12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2200      	movs	r2, #0
 800bd1a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2200      	movs	r2, #0
 800bd20:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2200      	movs	r2, #0
 800bd26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bd2a:	2300      	movs	r3, #0
}
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	3758      	adds	r7, #88	@ 0x58
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}

0800bd34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b084      	sub	sp, #16
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	60f8      	str	r0, [r7, #12]
 800bd3c:	60b9      	str	r1, [r7, #8]
 800bd3e:	603b      	str	r3, [r7, #0]
 800bd40:	4613      	mov	r3, r2
 800bd42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd44:	e04f      	b.n	800bde6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bd46:	69bb      	ldr	r3, [r7, #24]
 800bd48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd4c:	d04b      	beq.n	800bde6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd4e:	f7f6 f82b 	bl	8001da8 <HAL_GetTick>
 800bd52:	4602      	mov	r2, r0
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	1ad3      	subs	r3, r2, r3
 800bd58:	69ba      	ldr	r2, [r7, #24]
 800bd5a:	429a      	cmp	r2, r3
 800bd5c:	d302      	bcc.n	800bd64 <UART_WaitOnFlagUntilTimeout+0x30>
 800bd5e:	69bb      	ldr	r3, [r7, #24]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d101      	bne.n	800bd68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bd64:	2303      	movs	r3, #3
 800bd66:	e04e      	b.n	800be06 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	f003 0304 	and.w	r3, r3, #4
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d037      	beq.n	800bde6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	2b80      	cmp	r3, #128	@ 0x80
 800bd7a:	d034      	beq.n	800bde6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	2b40      	cmp	r3, #64	@ 0x40
 800bd80:	d031      	beq.n	800bde6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	69db      	ldr	r3, [r3, #28]
 800bd88:	f003 0308 	and.w	r3, r3, #8
 800bd8c:	2b08      	cmp	r3, #8
 800bd8e:	d110      	bne.n	800bdb2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	2208      	movs	r2, #8
 800bd96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bd98:	68f8      	ldr	r0, [r7, #12]
 800bd9a:	f000 f839 	bl	800be10 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	2208      	movs	r2, #8
 800bda2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800bdae:	2301      	movs	r3, #1
 800bdb0:	e029      	b.n	800be06 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	69db      	ldr	r3, [r3, #28]
 800bdb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bdbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bdc0:	d111      	bne.n	800bde6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bdca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bdcc:	68f8      	ldr	r0, [r7, #12]
 800bdce:	f000 f81f 	bl	800be10 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	2220      	movs	r2, #32
 800bdd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	2200      	movs	r2, #0
 800bdde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800bde2:	2303      	movs	r3, #3
 800bde4:	e00f      	b.n	800be06 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	69da      	ldr	r2, [r3, #28]
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	4013      	ands	r3, r2
 800bdf0:	68ba      	ldr	r2, [r7, #8]
 800bdf2:	429a      	cmp	r2, r3
 800bdf4:	bf0c      	ite	eq
 800bdf6:	2301      	moveq	r3, #1
 800bdf8:	2300      	movne	r3, #0
 800bdfa:	b2db      	uxtb	r3, r3
 800bdfc:	461a      	mov	r2, r3
 800bdfe:	79fb      	ldrb	r3, [r7, #7]
 800be00:	429a      	cmp	r2, r3
 800be02:	d0a0      	beq.n	800bd46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800be04:	2300      	movs	r3, #0
}
 800be06:	4618      	mov	r0, r3
 800be08:	3710      	adds	r7, #16
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bd80      	pop	{r7, pc}
	...

0800be10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800be10:	b480      	push	{r7}
 800be12:	b095      	sub	sp, #84	@ 0x54
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be20:	e853 3f00 	ldrex	r3, [r3]
 800be24:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800be26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800be2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	461a      	mov	r2, r3
 800be34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be36:	643b      	str	r3, [r7, #64]	@ 0x40
 800be38:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be3a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800be3c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800be3e:	e841 2300 	strex	r3, r2, [r1]
 800be42:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800be44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be46:	2b00      	cmp	r3, #0
 800be48:	d1e6      	bne.n	800be18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	3308      	adds	r3, #8
 800be50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be52:	6a3b      	ldr	r3, [r7, #32]
 800be54:	e853 3f00 	ldrex	r3, [r3]
 800be58:	61fb      	str	r3, [r7, #28]
   return(result);
 800be5a:	69fa      	ldr	r2, [r7, #28]
 800be5c:	4b1e      	ldr	r3, [pc, #120]	@ (800bed8 <UART_EndRxTransfer+0xc8>)
 800be5e:	4013      	ands	r3, r2
 800be60:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	3308      	adds	r3, #8
 800be68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800be6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800be6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800be70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800be72:	e841 2300 	strex	r3, r2, [r1]
 800be76:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800be78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d1e5      	bne.n	800be4a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800be82:	2b01      	cmp	r3, #1
 800be84:	d118      	bne.n	800beb8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	e853 3f00 	ldrex	r3, [r3]
 800be92:	60bb      	str	r3, [r7, #8]
   return(result);
 800be94:	68bb      	ldr	r3, [r7, #8]
 800be96:	f023 0310 	bic.w	r3, r3, #16
 800be9a:	647b      	str	r3, [r7, #68]	@ 0x44
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	461a      	mov	r2, r3
 800bea2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bea4:	61bb      	str	r3, [r7, #24]
 800bea6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bea8:	6979      	ldr	r1, [r7, #20]
 800beaa:	69ba      	ldr	r2, [r7, #24]
 800beac:	e841 2300 	strex	r3, r2, [r1]
 800beb0:	613b      	str	r3, [r7, #16]
   return(result);
 800beb2:	693b      	ldr	r3, [r7, #16]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d1e6      	bne.n	800be86 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2220      	movs	r2, #32
 800bebc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2200      	movs	r2, #0
 800bec4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	2200      	movs	r2, #0
 800beca:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800becc:	bf00      	nop
 800bece:	3754      	adds	r7, #84	@ 0x54
 800bed0:	46bd      	mov	sp, r7
 800bed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed6:	4770      	bx	lr
 800bed8:	effffffe 	.word	0xeffffffe

0800bedc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bedc:	b480      	push	{r7}
 800bede:	b085      	sub	sp, #20
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800beea:	2b01      	cmp	r3, #1
 800beec:	d101      	bne.n	800bef2 <HAL_UARTEx_DisableFifoMode+0x16>
 800beee:	2302      	movs	r3, #2
 800bef0:	e027      	b.n	800bf42 <HAL_UARTEx_DisableFifoMode+0x66>
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	2201      	movs	r2, #1
 800bef6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	2224      	movs	r2, #36	@ 0x24
 800befe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	681a      	ldr	r2, [r3, #0]
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	f022 0201 	bic.w	r2, r2, #1
 800bf18:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800bf20:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2200      	movs	r2, #0
 800bf26:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	68fa      	ldr	r2, [r7, #12]
 800bf2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2220      	movs	r2, #32
 800bf34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bf40:	2300      	movs	r3, #0
}
 800bf42:	4618      	mov	r0, r3
 800bf44:	3714      	adds	r7, #20
 800bf46:	46bd      	mov	sp, r7
 800bf48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4c:	4770      	bx	lr

0800bf4e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bf4e:	b580      	push	{r7, lr}
 800bf50:	b084      	sub	sp, #16
 800bf52:	af00      	add	r7, sp, #0
 800bf54:	6078      	str	r0, [r7, #4]
 800bf56:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bf5e:	2b01      	cmp	r3, #1
 800bf60:	d101      	bne.n	800bf66 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bf62:	2302      	movs	r3, #2
 800bf64:	e02d      	b.n	800bfc2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2201      	movs	r2, #1
 800bf6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2224      	movs	r2, #36	@ 0x24
 800bf72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	681a      	ldr	r2, [r3, #0]
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	f022 0201 	bic.w	r2, r2, #1
 800bf8c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	689b      	ldr	r3, [r3, #8]
 800bf94:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	683a      	ldr	r2, [r7, #0]
 800bf9e:	430a      	orrs	r2, r1
 800bfa0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	f000 f850 	bl	800c048 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	68fa      	ldr	r2, [r7, #12]
 800bfae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2220      	movs	r2, #32
 800bfb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2200      	movs	r2, #0
 800bfbc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bfc0:	2300      	movs	r3, #0
}
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	3710      	adds	r7, #16
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd80      	pop	{r7, pc}

0800bfca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bfca:	b580      	push	{r7, lr}
 800bfcc:	b084      	sub	sp, #16
 800bfce:	af00      	add	r7, sp, #0
 800bfd0:	6078      	str	r0, [r7, #4]
 800bfd2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bfda:	2b01      	cmp	r3, #1
 800bfdc:	d101      	bne.n	800bfe2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bfde:	2302      	movs	r3, #2
 800bfe0:	e02d      	b.n	800c03e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	2201      	movs	r2, #1
 800bfe6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	2224      	movs	r2, #36	@ 0x24
 800bfee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	681a      	ldr	r2, [r3, #0]
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	f022 0201 	bic.w	r2, r2, #1
 800c008:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	689b      	ldr	r3, [r3, #8]
 800c010:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	683a      	ldr	r2, [r7, #0]
 800c01a:	430a      	orrs	r2, r1
 800c01c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f000 f812 	bl	800c048 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	68fa      	ldr	r2, [r7, #12]
 800c02a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2220      	movs	r2, #32
 800c030:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2200      	movs	r2, #0
 800c038:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c03c:	2300      	movs	r3, #0
}
 800c03e:	4618      	mov	r0, r3
 800c040:	3710      	adds	r7, #16
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}
	...

0800c048 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c048:	b480      	push	{r7}
 800c04a:	b085      	sub	sp, #20
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c054:	2b00      	cmp	r3, #0
 800c056:	d108      	bne.n	800c06a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2201      	movs	r2, #1
 800c05c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2201      	movs	r2, #1
 800c064:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c068:	e031      	b.n	800c0ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c06a:	2310      	movs	r3, #16
 800c06c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c06e:	2310      	movs	r3, #16
 800c070:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	689b      	ldr	r3, [r3, #8]
 800c078:	0e5b      	lsrs	r3, r3, #25
 800c07a:	b2db      	uxtb	r3, r3
 800c07c:	f003 0307 	and.w	r3, r3, #7
 800c080:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	689b      	ldr	r3, [r3, #8]
 800c088:	0f5b      	lsrs	r3, r3, #29
 800c08a:	b2db      	uxtb	r3, r3
 800c08c:	f003 0307 	and.w	r3, r3, #7
 800c090:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c092:	7bbb      	ldrb	r3, [r7, #14]
 800c094:	7b3a      	ldrb	r2, [r7, #12]
 800c096:	4911      	ldr	r1, [pc, #68]	@ (800c0dc <UARTEx_SetNbDataToProcess+0x94>)
 800c098:	5c8a      	ldrb	r2, [r1, r2]
 800c09a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c09e:	7b3a      	ldrb	r2, [r7, #12]
 800c0a0:	490f      	ldr	r1, [pc, #60]	@ (800c0e0 <UARTEx_SetNbDataToProcess+0x98>)
 800c0a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c0a4:	fb93 f3f2 	sdiv	r3, r3, r2
 800c0a8:	b29a      	uxth	r2, r3
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c0b0:	7bfb      	ldrb	r3, [r7, #15]
 800c0b2:	7b7a      	ldrb	r2, [r7, #13]
 800c0b4:	4909      	ldr	r1, [pc, #36]	@ (800c0dc <UARTEx_SetNbDataToProcess+0x94>)
 800c0b6:	5c8a      	ldrb	r2, [r1, r2]
 800c0b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c0bc:	7b7a      	ldrb	r2, [r7, #13]
 800c0be:	4908      	ldr	r1, [pc, #32]	@ (800c0e0 <UARTEx_SetNbDataToProcess+0x98>)
 800c0c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c0c2:	fb93 f3f2 	sdiv	r3, r3, r2
 800c0c6:	b29a      	uxth	r2, r3
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c0ce:	bf00      	nop
 800c0d0:	3714      	adds	r7, #20
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d8:	4770      	bx	lr
 800c0da:	bf00      	nop
 800c0dc:	08014154 	.word	0x08014154
 800c0e0:	0801415c 	.word	0x0801415c

0800c0e4 <__NVIC_SetPriority>:
{
 800c0e4:	b480      	push	{r7}
 800c0e6:	b083      	sub	sp, #12
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	6039      	str	r1, [r7, #0]
 800c0ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800c0f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	db0a      	blt.n	800c10e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	b2da      	uxtb	r2, r3
 800c0fc:	490c      	ldr	r1, [pc, #48]	@ (800c130 <__NVIC_SetPriority+0x4c>)
 800c0fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c102:	0112      	lsls	r2, r2, #4
 800c104:	b2d2      	uxtb	r2, r2
 800c106:	440b      	add	r3, r1
 800c108:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800c10c:	e00a      	b.n	800c124 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	b2da      	uxtb	r2, r3
 800c112:	4908      	ldr	r1, [pc, #32]	@ (800c134 <__NVIC_SetPriority+0x50>)
 800c114:	88fb      	ldrh	r3, [r7, #6]
 800c116:	f003 030f 	and.w	r3, r3, #15
 800c11a:	3b04      	subs	r3, #4
 800c11c:	0112      	lsls	r2, r2, #4
 800c11e:	b2d2      	uxtb	r2, r2
 800c120:	440b      	add	r3, r1
 800c122:	761a      	strb	r2, [r3, #24]
}
 800c124:	bf00      	nop
 800c126:	370c      	adds	r7, #12
 800c128:	46bd      	mov	sp, r7
 800c12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12e:	4770      	bx	lr
 800c130:	e000e100 	.word	0xe000e100
 800c134:	e000ed00 	.word	0xe000ed00

0800c138 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c138:	b580      	push	{r7, lr}
 800c13a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c13c:	4b05      	ldr	r3, [pc, #20]	@ (800c154 <SysTick_Handler+0x1c>)
 800c13e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c140:	f002 f894 	bl	800e26c <xTaskGetSchedulerState>
 800c144:	4603      	mov	r3, r0
 800c146:	2b01      	cmp	r3, #1
 800c148:	d001      	beq.n	800c14e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c14a:	f002 ff8d 	bl	800f068 <xPortSysTickHandler>
  }
}
 800c14e:	bf00      	nop
 800c150:	bd80      	pop	{r7, pc}
 800c152:	bf00      	nop
 800c154:	e000e010 	.word	0xe000e010

0800c158 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c158:	b580      	push	{r7, lr}
 800c15a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c15c:	2100      	movs	r1, #0
 800c15e:	f06f 0004 	mvn.w	r0, #4
 800c162:	f7ff ffbf 	bl	800c0e4 <__NVIC_SetPriority>
#endif
}
 800c166:	bf00      	nop
 800c168:	bd80      	pop	{r7, pc}
	...

0800c16c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c16c:	b480      	push	{r7}
 800c16e:	b083      	sub	sp, #12
 800c170:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c172:	f3ef 8305 	mrs	r3, IPSR
 800c176:	603b      	str	r3, [r7, #0]
  return(result);
 800c178:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d003      	beq.n	800c186 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c17e:	f06f 0305 	mvn.w	r3, #5
 800c182:	607b      	str	r3, [r7, #4]
 800c184:	e00c      	b.n	800c1a0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c186:	4b0a      	ldr	r3, [pc, #40]	@ (800c1b0 <osKernelInitialize+0x44>)
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d105      	bne.n	800c19a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c18e:	4b08      	ldr	r3, [pc, #32]	@ (800c1b0 <osKernelInitialize+0x44>)
 800c190:	2201      	movs	r2, #1
 800c192:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c194:	2300      	movs	r3, #0
 800c196:	607b      	str	r3, [r7, #4]
 800c198:	e002      	b.n	800c1a0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c19a:	f04f 33ff 	mov.w	r3, #4294967295
 800c19e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c1a0:	687b      	ldr	r3, [r7, #4]
}
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	370c      	adds	r7, #12
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ac:	4770      	bx	lr
 800c1ae:	bf00      	nop
 800c1b0:	24000438 	.word	0x24000438

0800c1b4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b082      	sub	sp, #8
 800c1b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c1ba:	f3ef 8305 	mrs	r3, IPSR
 800c1be:	603b      	str	r3, [r7, #0]
  return(result);
 800c1c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d003      	beq.n	800c1ce <osKernelStart+0x1a>
    stat = osErrorISR;
 800c1c6:	f06f 0305 	mvn.w	r3, #5
 800c1ca:	607b      	str	r3, [r7, #4]
 800c1cc:	e010      	b.n	800c1f0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c1ce:	4b0b      	ldr	r3, [pc, #44]	@ (800c1fc <osKernelStart+0x48>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	2b01      	cmp	r3, #1
 800c1d4:	d109      	bne.n	800c1ea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c1d6:	f7ff ffbf 	bl	800c158 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c1da:	4b08      	ldr	r3, [pc, #32]	@ (800c1fc <osKernelStart+0x48>)
 800c1dc:	2202      	movs	r2, #2
 800c1de:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c1e0:	f001 fb28 	bl	800d834 <vTaskStartScheduler>
      stat = osOK;
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	607b      	str	r3, [r7, #4]
 800c1e8:	e002      	b.n	800c1f0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c1ea:	f04f 33ff 	mov.w	r3, #4294967295
 800c1ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c1f0:	687b      	ldr	r3, [r7, #4]
}
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	3708      	adds	r7, #8
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}
 800c1fa:	bf00      	nop
 800c1fc:	24000438 	.word	0x24000438

0800c200 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c200:	b580      	push	{r7, lr}
 800c202:	b08e      	sub	sp, #56	@ 0x38
 800c204:	af04      	add	r7, sp, #16
 800c206:	60f8      	str	r0, [r7, #12]
 800c208:	60b9      	str	r1, [r7, #8]
 800c20a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c20c:	2300      	movs	r3, #0
 800c20e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c210:	f3ef 8305 	mrs	r3, IPSR
 800c214:	617b      	str	r3, [r7, #20]
  return(result);
 800c216:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d17e      	bne.n	800c31a <osThreadNew+0x11a>
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d07b      	beq.n	800c31a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c222:	2380      	movs	r3, #128	@ 0x80
 800c224:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c226:	2318      	movs	r3, #24
 800c228:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c22a:	2300      	movs	r3, #0
 800c22c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800c22e:	f04f 33ff 	mov.w	r3, #4294967295
 800c232:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d045      	beq.n	800c2c6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d002      	beq.n	800c248 <osThreadNew+0x48>
        name = attr->name;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	699b      	ldr	r3, [r3, #24]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d002      	beq.n	800c256 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	699b      	ldr	r3, [r3, #24]
 800c254:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c256:	69fb      	ldr	r3, [r7, #28]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d008      	beq.n	800c26e <osThreadNew+0x6e>
 800c25c:	69fb      	ldr	r3, [r7, #28]
 800c25e:	2b38      	cmp	r3, #56	@ 0x38
 800c260:	d805      	bhi.n	800c26e <osThreadNew+0x6e>
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	685b      	ldr	r3, [r3, #4]
 800c266:	f003 0301 	and.w	r3, r3, #1
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d001      	beq.n	800c272 <osThreadNew+0x72>
        return (NULL);
 800c26e:	2300      	movs	r3, #0
 800c270:	e054      	b.n	800c31c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	695b      	ldr	r3, [r3, #20]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d003      	beq.n	800c282 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	695b      	ldr	r3, [r3, #20]
 800c27e:	089b      	lsrs	r3, r3, #2
 800c280:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	689b      	ldr	r3, [r3, #8]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d00e      	beq.n	800c2a8 <osThreadNew+0xa8>
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	68db      	ldr	r3, [r3, #12]
 800c28e:	2ba7      	cmp	r3, #167	@ 0xa7
 800c290:	d90a      	bls.n	800c2a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c296:	2b00      	cmp	r3, #0
 800c298:	d006      	beq.n	800c2a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	695b      	ldr	r3, [r3, #20]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d002      	beq.n	800c2a8 <osThreadNew+0xa8>
        mem = 1;
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	61bb      	str	r3, [r7, #24]
 800c2a6:	e010      	b.n	800c2ca <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	689b      	ldr	r3, [r3, #8]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d10c      	bne.n	800c2ca <osThreadNew+0xca>
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	68db      	ldr	r3, [r3, #12]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d108      	bne.n	800c2ca <osThreadNew+0xca>
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	691b      	ldr	r3, [r3, #16]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d104      	bne.n	800c2ca <osThreadNew+0xca>
          mem = 0;
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	61bb      	str	r3, [r7, #24]
 800c2c4:	e001      	b.n	800c2ca <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c2ca:	69bb      	ldr	r3, [r7, #24]
 800c2cc:	2b01      	cmp	r3, #1
 800c2ce:	d110      	bne.n	800c2f2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c2d4:	687a      	ldr	r2, [r7, #4]
 800c2d6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c2d8:	9202      	str	r2, [sp, #8]
 800c2da:	9301      	str	r3, [sp, #4]
 800c2dc:	69fb      	ldr	r3, [r7, #28]
 800c2de:	9300      	str	r3, [sp, #0]
 800c2e0:	68bb      	ldr	r3, [r7, #8]
 800c2e2:	6a3a      	ldr	r2, [r7, #32]
 800c2e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c2e6:	68f8      	ldr	r0, [r7, #12]
 800c2e8:	f001 f8b0 	bl	800d44c <xTaskCreateStatic>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	613b      	str	r3, [r7, #16]
 800c2f0:	e013      	b.n	800c31a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c2f2:	69bb      	ldr	r3, [r7, #24]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d110      	bne.n	800c31a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c2f8:	6a3b      	ldr	r3, [r7, #32]
 800c2fa:	b29a      	uxth	r2, r3
 800c2fc:	f107 0310 	add.w	r3, r7, #16
 800c300:	9301      	str	r3, [sp, #4]
 800c302:	69fb      	ldr	r3, [r7, #28]
 800c304:	9300      	str	r3, [sp, #0]
 800c306:	68bb      	ldr	r3, [r7, #8]
 800c308:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c30a:	68f8      	ldr	r0, [r7, #12]
 800c30c:	f001 f8fe 	bl	800d50c <xTaskCreate>
 800c310:	4603      	mov	r3, r0
 800c312:	2b01      	cmp	r3, #1
 800c314:	d001      	beq.n	800c31a <osThreadNew+0x11a>
            hTask = NULL;
 800c316:	2300      	movs	r3, #0
 800c318:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c31a:	693b      	ldr	r3, [r7, #16]
}
 800c31c:	4618      	mov	r0, r3
 800c31e:	3728      	adds	r7, #40	@ 0x28
 800c320:	46bd      	mov	sp, r7
 800c322:	bd80      	pop	{r7, pc}

0800c324 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c324:	b580      	push	{r7, lr}
 800c326:	b084      	sub	sp, #16
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c32c:	f3ef 8305 	mrs	r3, IPSR
 800c330:	60bb      	str	r3, [r7, #8]
  return(result);
 800c332:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c334:	2b00      	cmp	r3, #0
 800c336:	d003      	beq.n	800c340 <osDelay+0x1c>
    stat = osErrorISR;
 800c338:	f06f 0305 	mvn.w	r3, #5
 800c33c:	60fb      	str	r3, [r7, #12]
 800c33e:	e007      	b.n	800c350 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c340:	2300      	movs	r3, #0
 800c342:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d002      	beq.n	800c350 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c34a:	6878      	ldr	r0, [r7, #4]
 800c34c:	f001 fa3c 	bl	800d7c8 <vTaskDelay>
    }
  }

  return (stat);
 800c350:	68fb      	ldr	r3, [r7, #12]
}
 800c352:	4618      	mov	r0, r3
 800c354:	3710      	adds	r7, #16
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}
	...

0800c35c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c35c:	b480      	push	{r7}
 800c35e:	b085      	sub	sp, #20
 800c360:	af00      	add	r7, sp, #0
 800c362:	60f8      	str	r0, [r7, #12]
 800c364:	60b9      	str	r1, [r7, #8]
 800c366:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	4a07      	ldr	r2, [pc, #28]	@ (800c388 <vApplicationGetIdleTaskMemory+0x2c>)
 800c36c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c36e:	68bb      	ldr	r3, [r7, #8]
 800c370:	4a06      	ldr	r2, [pc, #24]	@ (800c38c <vApplicationGetIdleTaskMemory+0x30>)
 800c372:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2280      	movs	r2, #128	@ 0x80
 800c378:	601a      	str	r2, [r3, #0]
}
 800c37a:	bf00      	nop
 800c37c:	3714      	adds	r7, #20
 800c37e:	46bd      	mov	sp, r7
 800c380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c384:	4770      	bx	lr
 800c386:	bf00      	nop
 800c388:	2400043c 	.word	0x2400043c
 800c38c:	240004e4 	.word	0x240004e4

0800c390 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c390:	b480      	push	{r7}
 800c392:	b085      	sub	sp, #20
 800c394:	af00      	add	r7, sp, #0
 800c396:	60f8      	str	r0, [r7, #12]
 800c398:	60b9      	str	r1, [r7, #8]
 800c39a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	4a07      	ldr	r2, [pc, #28]	@ (800c3bc <vApplicationGetTimerTaskMemory+0x2c>)
 800c3a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c3a2:	68bb      	ldr	r3, [r7, #8]
 800c3a4:	4a06      	ldr	r2, [pc, #24]	@ (800c3c0 <vApplicationGetTimerTaskMemory+0x30>)
 800c3a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c3ae:	601a      	str	r2, [r3, #0]
}
 800c3b0:	bf00      	nop
 800c3b2:	3714      	adds	r7, #20
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ba:	4770      	bx	lr
 800c3bc:	240006e4 	.word	0x240006e4
 800c3c0:	2400078c 	.word	0x2400078c

0800c3c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c3c4:	b480      	push	{r7}
 800c3c6:	b083      	sub	sp, #12
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f103 0208 	add.w	r2, r3, #8
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	f04f 32ff 	mov.w	r2, #4294967295
 800c3dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	f103 0208 	add.w	r2, r3, #8
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	f103 0208 	add.w	r2, r3, #8
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c3f8:	bf00      	nop
 800c3fa:	370c      	adds	r7, #12
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c402:	4770      	bx	lr

0800c404 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c404:	b480      	push	{r7}
 800c406:	b083      	sub	sp, #12
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2200      	movs	r2, #0
 800c410:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c412:	bf00      	nop
 800c414:	370c      	adds	r7, #12
 800c416:	46bd      	mov	sp, r7
 800c418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41c:	4770      	bx	lr

0800c41e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c41e:	b480      	push	{r7}
 800c420:	b085      	sub	sp, #20
 800c422:	af00      	add	r7, sp, #0
 800c424:	6078      	str	r0, [r7, #4]
 800c426:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	685b      	ldr	r3, [r3, #4]
 800c42c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c42e:	683b      	ldr	r3, [r7, #0]
 800c430:	68fa      	ldr	r2, [r7, #12]
 800c432:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	689a      	ldr	r2, [r3, #8]
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	689b      	ldr	r3, [r3, #8]
 800c440:	683a      	ldr	r2, [r7, #0]
 800c442:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	683a      	ldr	r2, [r7, #0]
 800c448:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c44a:	683b      	ldr	r3, [r7, #0]
 800c44c:	687a      	ldr	r2, [r7, #4]
 800c44e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	1c5a      	adds	r2, r3, #1
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	601a      	str	r2, [r3, #0]
}
 800c45a:	bf00      	nop
 800c45c:	3714      	adds	r7, #20
 800c45e:	46bd      	mov	sp, r7
 800c460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c464:	4770      	bx	lr

0800c466 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c466:	b480      	push	{r7}
 800c468:	b085      	sub	sp, #20
 800c46a:	af00      	add	r7, sp, #0
 800c46c:	6078      	str	r0, [r7, #4]
 800c46e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c476:	68bb      	ldr	r3, [r7, #8]
 800c478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c47c:	d103      	bne.n	800c486 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	691b      	ldr	r3, [r3, #16]
 800c482:	60fb      	str	r3, [r7, #12]
 800c484:	e00c      	b.n	800c4a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	3308      	adds	r3, #8
 800c48a:	60fb      	str	r3, [r7, #12]
 800c48c:	e002      	b.n	800c494 <vListInsert+0x2e>
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	685b      	ldr	r3, [r3, #4]
 800c492:	60fb      	str	r3, [r7, #12]
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	685b      	ldr	r3, [r3, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	68ba      	ldr	r2, [r7, #8]
 800c49c:	429a      	cmp	r2, r3
 800c49e:	d2f6      	bcs.n	800c48e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	685a      	ldr	r2, [r3, #4]
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	685b      	ldr	r3, [r3, #4]
 800c4ac:	683a      	ldr	r2, [r7, #0]
 800c4ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	68fa      	ldr	r2, [r7, #12]
 800c4b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	683a      	ldr	r2, [r7, #0]
 800c4ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	687a      	ldr	r2, [r7, #4]
 800c4c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	1c5a      	adds	r2, r3, #1
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	601a      	str	r2, [r3, #0]
}
 800c4cc:	bf00      	nop
 800c4ce:	3714      	adds	r7, #20
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d6:	4770      	bx	lr

0800c4d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c4d8:	b480      	push	{r7}
 800c4da:	b085      	sub	sp, #20
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	691b      	ldr	r3, [r3, #16]
 800c4e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	685b      	ldr	r3, [r3, #4]
 800c4ea:	687a      	ldr	r2, [r7, #4]
 800c4ec:	6892      	ldr	r2, [r2, #8]
 800c4ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	689b      	ldr	r3, [r3, #8]
 800c4f4:	687a      	ldr	r2, [r7, #4]
 800c4f6:	6852      	ldr	r2, [r2, #4]
 800c4f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	685b      	ldr	r3, [r3, #4]
 800c4fe:	687a      	ldr	r2, [r7, #4]
 800c500:	429a      	cmp	r2, r3
 800c502:	d103      	bne.n	800c50c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	689a      	ldr	r2, [r3, #8]
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2200      	movs	r2, #0
 800c510:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	1e5a      	subs	r2, r3, #1
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	681b      	ldr	r3, [r3, #0]
}
 800c520:	4618      	mov	r0, r3
 800c522:	3714      	adds	r7, #20
 800c524:	46bd      	mov	sp, r7
 800c526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52a:	4770      	bx	lr

0800c52c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b084      	sub	sp, #16
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
 800c534:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d10b      	bne.n	800c558 <xQueueGenericReset+0x2c>
	__asm volatile
 800c540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c544:	f383 8811 	msr	BASEPRI, r3
 800c548:	f3bf 8f6f 	isb	sy
 800c54c:	f3bf 8f4f 	dsb	sy
 800c550:	60bb      	str	r3, [r7, #8]
}
 800c552:	bf00      	nop
 800c554:	bf00      	nop
 800c556:	e7fd      	b.n	800c554 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c558:	f002 fcf6 	bl	800ef48 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	681a      	ldr	r2, [r3, #0]
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c564:	68f9      	ldr	r1, [r7, #12]
 800c566:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c568:	fb01 f303 	mul.w	r3, r1, r3
 800c56c:	441a      	add	r2, r3
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	2200      	movs	r2, #0
 800c576:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	681a      	ldr	r2, [r3, #0]
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	681a      	ldr	r2, [r3, #0]
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c588:	3b01      	subs	r3, #1
 800c58a:	68f9      	ldr	r1, [r7, #12]
 800c58c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c58e:	fb01 f303 	mul.w	r3, r1, r3
 800c592:	441a      	add	r2, r3
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	22ff      	movs	r2, #255	@ 0xff
 800c59c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	22ff      	movs	r2, #255	@ 0xff
 800c5a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800c5a8:	683b      	ldr	r3, [r7, #0]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d114      	bne.n	800c5d8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	691b      	ldr	r3, [r3, #16]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d01a      	beq.n	800c5ec <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	3310      	adds	r3, #16
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	f001 fc38 	bl	800de30 <xTaskRemoveFromEventList>
 800c5c0:	4603      	mov	r3, r0
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d012      	beq.n	800c5ec <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c5c6:	4b0d      	ldr	r3, [pc, #52]	@ (800c5fc <xQueueGenericReset+0xd0>)
 800c5c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c5cc:	601a      	str	r2, [r3, #0]
 800c5ce:	f3bf 8f4f 	dsb	sy
 800c5d2:	f3bf 8f6f 	isb	sy
 800c5d6:	e009      	b.n	800c5ec <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	3310      	adds	r3, #16
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f7ff fef1 	bl	800c3c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	3324      	adds	r3, #36	@ 0x24
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	f7ff feec 	bl	800c3c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c5ec:	f002 fcde 	bl	800efac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c5f0:	2301      	movs	r3, #1
}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	3710      	adds	r7, #16
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}
 800c5fa:	bf00      	nop
 800c5fc:	e000ed04 	.word	0xe000ed04

0800c600 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c600:	b580      	push	{r7, lr}
 800c602:	b08e      	sub	sp, #56	@ 0x38
 800c604:	af02      	add	r7, sp, #8
 800c606:	60f8      	str	r0, [r7, #12]
 800c608:	60b9      	str	r1, [r7, #8]
 800c60a:	607a      	str	r2, [r7, #4]
 800c60c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d10b      	bne.n	800c62c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800c614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c618:	f383 8811 	msr	BASEPRI, r3
 800c61c:	f3bf 8f6f 	isb	sy
 800c620:	f3bf 8f4f 	dsb	sy
 800c624:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c626:	bf00      	nop
 800c628:	bf00      	nop
 800c62a:	e7fd      	b.n	800c628 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d10b      	bne.n	800c64a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800c632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c636:	f383 8811 	msr	BASEPRI, r3
 800c63a:	f3bf 8f6f 	isb	sy
 800c63e:	f3bf 8f4f 	dsb	sy
 800c642:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c644:	bf00      	nop
 800c646:	bf00      	nop
 800c648:	e7fd      	b.n	800c646 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d002      	beq.n	800c656 <xQueueGenericCreateStatic+0x56>
 800c650:	68bb      	ldr	r3, [r7, #8]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d001      	beq.n	800c65a <xQueueGenericCreateStatic+0x5a>
 800c656:	2301      	movs	r3, #1
 800c658:	e000      	b.n	800c65c <xQueueGenericCreateStatic+0x5c>
 800c65a:	2300      	movs	r3, #0
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d10b      	bne.n	800c678 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800c660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c664:	f383 8811 	msr	BASEPRI, r3
 800c668:	f3bf 8f6f 	isb	sy
 800c66c:	f3bf 8f4f 	dsb	sy
 800c670:	623b      	str	r3, [r7, #32]
}
 800c672:	bf00      	nop
 800c674:	bf00      	nop
 800c676:	e7fd      	b.n	800c674 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d102      	bne.n	800c684 <xQueueGenericCreateStatic+0x84>
 800c67e:	68bb      	ldr	r3, [r7, #8]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d101      	bne.n	800c688 <xQueueGenericCreateStatic+0x88>
 800c684:	2301      	movs	r3, #1
 800c686:	e000      	b.n	800c68a <xQueueGenericCreateStatic+0x8a>
 800c688:	2300      	movs	r3, #0
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d10b      	bne.n	800c6a6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800c68e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c692:	f383 8811 	msr	BASEPRI, r3
 800c696:	f3bf 8f6f 	isb	sy
 800c69a:	f3bf 8f4f 	dsb	sy
 800c69e:	61fb      	str	r3, [r7, #28]
}
 800c6a0:	bf00      	nop
 800c6a2:	bf00      	nop
 800c6a4:	e7fd      	b.n	800c6a2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c6a6:	2350      	movs	r3, #80	@ 0x50
 800c6a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c6aa:	697b      	ldr	r3, [r7, #20]
 800c6ac:	2b50      	cmp	r3, #80	@ 0x50
 800c6ae:	d00b      	beq.n	800c6c8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800c6b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6b4:	f383 8811 	msr	BASEPRI, r3
 800c6b8:	f3bf 8f6f 	isb	sy
 800c6bc:	f3bf 8f4f 	dsb	sy
 800c6c0:	61bb      	str	r3, [r7, #24]
}
 800c6c2:	bf00      	nop
 800c6c4:	bf00      	nop
 800c6c6:	e7fd      	b.n	800c6c4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c6c8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800c6ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d00d      	beq.n	800c6f0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c6d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6d6:	2201      	movs	r2, #1
 800c6d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c6dc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c6e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6e2:	9300      	str	r3, [sp, #0]
 800c6e4:	4613      	mov	r3, r2
 800c6e6:	687a      	ldr	r2, [r7, #4]
 800c6e8:	68b9      	ldr	r1, [r7, #8]
 800c6ea:	68f8      	ldr	r0, [r7, #12]
 800c6ec:	f000 f840 	bl	800c770 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c6f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	3730      	adds	r7, #48	@ 0x30
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	bd80      	pop	{r7, pc}

0800c6fa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c6fa:	b580      	push	{r7, lr}
 800c6fc:	b08a      	sub	sp, #40	@ 0x28
 800c6fe:	af02      	add	r7, sp, #8
 800c700:	60f8      	str	r0, [r7, #12]
 800c702:	60b9      	str	r1, [r7, #8]
 800c704:	4613      	mov	r3, r2
 800c706:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d10b      	bne.n	800c726 <xQueueGenericCreate+0x2c>
	__asm volatile
 800c70e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c712:	f383 8811 	msr	BASEPRI, r3
 800c716:	f3bf 8f6f 	isb	sy
 800c71a:	f3bf 8f4f 	dsb	sy
 800c71e:	613b      	str	r3, [r7, #16]
}
 800c720:	bf00      	nop
 800c722:	bf00      	nop
 800c724:	e7fd      	b.n	800c722 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	68ba      	ldr	r2, [r7, #8]
 800c72a:	fb02 f303 	mul.w	r3, r2, r3
 800c72e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c730:	69fb      	ldr	r3, [r7, #28]
 800c732:	3350      	adds	r3, #80	@ 0x50
 800c734:	4618      	mov	r0, r3
 800c736:	f002 fe0d 	bl	800f354 <pvPortMalloc>
 800c73a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c73c:	69bb      	ldr	r3, [r7, #24]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d011      	beq.n	800c766 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c742:	69bb      	ldr	r3, [r7, #24]
 800c744:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c746:	697b      	ldr	r3, [r7, #20]
 800c748:	3350      	adds	r3, #80	@ 0x50
 800c74a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c74c:	69bb      	ldr	r3, [r7, #24]
 800c74e:	2200      	movs	r2, #0
 800c750:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c754:	79fa      	ldrb	r2, [r7, #7]
 800c756:	69bb      	ldr	r3, [r7, #24]
 800c758:	9300      	str	r3, [sp, #0]
 800c75a:	4613      	mov	r3, r2
 800c75c:	697a      	ldr	r2, [r7, #20]
 800c75e:	68b9      	ldr	r1, [r7, #8]
 800c760:	68f8      	ldr	r0, [r7, #12]
 800c762:	f000 f805 	bl	800c770 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c766:	69bb      	ldr	r3, [r7, #24]
	}
 800c768:	4618      	mov	r0, r3
 800c76a:	3720      	adds	r7, #32
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bd80      	pop	{r7, pc}

0800c770 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b084      	sub	sp, #16
 800c774:	af00      	add	r7, sp, #0
 800c776:	60f8      	str	r0, [r7, #12]
 800c778:	60b9      	str	r1, [r7, #8]
 800c77a:	607a      	str	r2, [r7, #4]
 800c77c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c77e:	68bb      	ldr	r3, [r7, #8]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d103      	bne.n	800c78c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c784:	69bb      	ldr	r3, [r7, #24]
 800c786:	69ba      	ldr	r2, [r7, #24]
 800c788:	601a      	str	r2, [r3, #0]
 800c78a:	e002      	b.n	800c792 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c78c:	69bb      	ldr	r3, [r7, #24]
 800c78e:	687a      	ldr	r2, [r7, #4]
 800c790:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c792:	69bb      	ldr	r3, [r7, #24]
 800c794:	68fa      	ldr	r2, [r7, #12]
 800c796:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c798:	69bb      	ldr	r3, [r7, #24]
 800c79a:	68ba      	ldr	r2, [r7, #8]
 800c79c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c79e:	2101      	movs	r1, #1
 800c7a0:	69b8      	ldr	r0, [r7, #24]
 800c7a2:	f7ff fec3 	bl	800c52c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c7a6:	69bb      	ldr	r3, [r7, #24]
 800c7a8:	78fa      	ldrb	r2, [r7, #3]
 800c7aa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c7ae:	bf00      	nop
 800c7b0:	3710      	adds	r7, #16
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}

0800c7b6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800c7b6:	b580      	push	{r7, lr}
 800c7b8:	b086      	sub	sp, #24
 800c7ba:	af00      	add	r7, sp, #0
 800c7bc:	6078      	str	r0, [r7, #4]
 800c7be:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d10b      	bne.n	800c7de <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800c7c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7ca:	f383 8811 	msr	BASEPRI, r3
 800c7ce:	f3bf 8f6f 	isb	sy
 800c7d2:	f3bf 8f4f 	dsb	sy
 800c7d6:	613b      	str	r3, [r7, #16]
}
 800c7d8:	bf00      	nop
 800c7da:	bf00      	nop
 800c7dc:	e7fd      	b.n	800c7da <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c7de:	683a      	ldr	r2, [r7, #0]
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	429a      	cmp	r2, r3
 800c7e4:	d90b      	bls.n	800c7fe <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800c7e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7ea:	f383 8811 	msr	BASEPRI, r3
 800c7ee:	f3bf 8f6f 	isb	sy
 800c7f2:	f3bf 8f4f 	dsb	sy
 800c7f6:	60fb      	str	r3, [r7, #12]
}
 800c7f8:	bf00      	nop
 800c7fa:	bf00      	nop
 800c7fc:	e7fd      	b.n	800c7fa <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c7fe:	2202      	movs	r2, #2
 800c800:	2100      	movs	r1, #0
 800c802:	6878      	ldr	r0, [r7, #4]
 800c804:	f7ff ff79 	bl	800c6fa <xQueueGenericCreate>
 800c808:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800c80a:	697b      	ldr	r3, [r7, #20]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d002      	beq.n	800c816 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c810:	697b      	ldr	r3, [r7, #20]
 800c812:	683a      	ldr	r2, [r7, #0]
 800c814:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c816:	697b      	ldr	r3, [r7, #20]
	}
 800c818:	4618      	mov	r0, r3
 800c81a:	3718      	adds	r7, #24
 800c81c:	46bd      	mov	sp, r7
 800c81e:	bd80      	pop	{r7, pc}

0800c820 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b08e      	sub	sp, #56	@ 0x38
 800c824:	af00      	add	r7, sp, #0
 800c826:	60f8      	str	r0, [r7, #12]
 800c828:	60b9      	str	r1, [r7, #8]
 800c82a:	607a      	str	r2, [r7, #4]
 800c82c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c82e:	2300      	movs	r3, #0
 800c830:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d10b      	bne.n	800c854 <xQueueGenericSend+0x34>
	__asm volatile
 800c83c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c840:	f383 8811 	msr	BASEPRI, r3
 800c844:	f3bf 8f6f 	isb	sy
 800c848:	f3bf 8f4f 	dsb	sy
 800c84c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c84e:	bf00      	nop
 800c850:	bf00      	nop
 800c852:	e7fd      	b.n	800c850 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c854:	68bb      	ldr	r3, [r7, #8]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d103      	bne.n	800c862 <xQueueGenericSend+0x42>
 800c85a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c85c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d101      	bne.n	800c866 <xQueueGenericSend+0x46>
 800c862:	2301      	movs	r3, #1
 800c864:	e000      	b.n	800c868 <xQueueGenericSend+0x48>
 800c866:	2300      	movs	r3, #0
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d10b      	bne.n	800c884 <xQueueGenericSend+0x64>
	__asm volatile
 800c86c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c870:	f383 8811 	msr	BASEPRI, r3
 800c874:	f3bf 8f6f 	isb	sy
 800c878:	f3bf 8f4f 	dsb	sy
 800c87c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c87e:	bf00      	nop
 800c880:	bf00      	nop
 800c882:	e7fd      	b.n	800c880 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	2b02      	cmp	r3, #2
 800c888:	d103      	bne.n	800c892 <xQueueGenericSend+0x72>
 800c88a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c88c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c88e:	2b01      	cmp	r3, #1
 800c890:	d101      	bne.n	800c896 <xQueueGenericSend+0x76>
 800c892:	2301      	movs	r3, #1
 800c894:	e000      	b.n	800c898 <xQueueGenericSend+0x78>
 800c896:	2300      	movs	r3, #0
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d10b      	bne.n	800c8b4 <xQueueGenericSend+0x94>
	__asm volatile
 800c89c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8a0:	f383 8811 	msr	BASEPRI, r3
 800c8a4:	f3bf 8f6f 	isb	sy
 800c8a8:	f3bf 8f4f 	dsb	sy
 800c8ac:	623b      	str	r3, [r7, #32]
}
 800c8ae:	bf00      	nop
 800c8b0:	bf00      	nop
 800c8b2:	e7fd      	b.n	800c8b0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c8b4:	f001 fcda 	bl	800e26c <xTaskGetSchedulerState>
 800c8b8:	4603      	mov	r3, r0
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d102      	bne.n	800c8c4 <xQueueGenericSend+0xa4>
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d101      	bne.n	800c8c8 <xQueueGenericSend+0xa8>
 800c8c4:	2301      	movs	r3, #1
 800c8c6:	e000      	b.n	800c8ca <xQueueGenericSend+0xaa>
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d10b      	bne.n	800c8e6 <xQueueGenericSend+0xc6>
	__asm volatile
 800c8ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8d2:	f383 8811 	msr	BASEPRI, r3
 800c8d6:	f3bf 8f6f 	isb	sy
 800c8da:	f3bf 8f4f 	dsb	sy
 800c8de:	61fb      	str	r3, [r7, #28]
}
 800c8e0:	bf00      	nop
 800c8e2:	bf00      	nop
 800c8e4:	e7fd      	b.n	800c8e2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c8e6:	f002 fb2f 	bl	800ef48 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c8ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c8ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c8f2:	429a      	cmp	r2, r3
 800c8f4:	d302      	bcc.n	800c8fc <xQueueGenericSend+0xdc>
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	2b02      	cmp	r3, #2
 800c8fa:	d129      	bne.n	800c950 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c8fc:	683a      	ldr	r2, [r7, #0]
 800c8fe:	68b9      	ldr	r1, [r7, #8]
 800c900:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c902:	f000 fc0a 	bl	800d11a <prvCopyDataToQueue>
 800c906:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c90a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d010      	beq.n	800c932 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c912:	3324      	adds	r3, #36	@ 0x24
 800c914:	4618      	mov	r0, r3
 800c916:	f001 fa8b 	bl	800de30 <xTaskRemoveFromEventList>
 800c91a:	4603      	mov	r3, r0
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d013      	beq.n	800c948 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c920:	4b3f      	ldr	r3, [pc, #252]	@ (800ca20 <xQueueGenericSend+0x200>)
 800c922:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c926:	601a      	str	r2, [r3, #0]
 800c928:	f3bf 8f4f 	dsb	sy
 800c92c:	f3bf 8f6f 	isb	sy
 800c930:	e00a      	b.n	800c948 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c934:	2b00      	cmp	r3, #0
 800c936:	d007      	beq.n	800c948 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c938:	4b39      	ldr	r3, [pc, #228]	@ (800ca20 <xQueueGenericSend+0x200>)
 800c93a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c93e:	601a      	str	r2, [r3, #0]
 800c940:	f3bf 8f4f 	dsb	sy
 800c944:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c948:	f002 fb30 	bl	800efac <vPortExitCritical>
				return pdPASS;
 800c94c:	2301      	movs	r3, #1
 800c94e:	e063      	b.n	800ca18 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d103      	bne.n	800c95e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c956:	f002 fb29 	bl	800efac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c95a:	2300      	movs	r3, #0
 800c95c:	e05c      	b.n	800ca18 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c95e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c960:	2b00      	cmp	r3, #0
 800c962:	d106      	bne.n	800c972 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c964:	f107 0314 	add.w	r3, r7, #20
 800c968:	4618      	mov	r0, r3
 800c96a:	f001 fac7 	bl	800defc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c96e:	2301      	movs	r3, #1
 800c970:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c972:	f002 fb1b 	bl	800efac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c976:	f000 ffcd 	bl	800d914 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c97a:	f002 fae5 	bl	800ef48 <vPortEnterCritical>
 800c97e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c980:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c984:	b25b      	sxtb	r3, r3
 800c986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c98a:	d103      	bne.n	800c994 <xQueueGenericSend+0x174>
 800c98c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c98e:	2200      	movs	r2, #0
 800c990:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c996:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c99a:	b25b      	sxtb	r3, r3
 800c99c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9a0:	d103      	bne.n	800c9aa <xQueueGenericSend+0x18a>
 800c9a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c9aa:	f002 faff 	bl	800efac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c9ae:	1d3a      	adds	r2, r7, #4
 800c9b0:	f107 0314 	add.w	r3, r7, #20
 800c9b4:	4611      	mov	r1, r2
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	f001 fab6 	bl	800df28 <xTaskCheckForTimeOut>
 800c9bc:	4603      	mov	r3, r0
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d124      	bne.n	800ca0c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c9c2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c9c4:	f000 fca1 	bl	800d30a <prvIsQueueFull>
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d018      	beq.n	800ca00 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c9ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9d0:	3310      	adds	r3, #16
 800c9d2:	687a      	ldr	r2, [r7, #4]
 800c9d4:	4611      	mov	r1, r2
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	f001 f9d8 	bl	800dd8c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c9dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c9de:	f000 fc2c 	bl	800d23a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c9e2:	f000 ffdd 	bl	800d9a0 <xTaskResumeAll>
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	f47f af7c 	bne.w	800c8e6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c9ee:	4b0c      	ldr	r3, [pc, #48]	@ (800ca20 <xQueueGenericSend+0x200>)
 800c9f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c9f4:	601a      	str	r2, [r3, #0]
 800c9f6:	f3bf 8f4f 	dsb	sy
 800c9fa:	f3bf 8f6f 	isb	sy
 800c9fe:	e772      	b.n	800c8e6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ca00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ca02:	f000 fc1a 	bl	800d23a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ca06:	f000 ffcb 	bl	800d9a0 <xTaskResumeAll>
 800ca0a:	e76c      	b.n	800c8e6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ca0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ca0e:	f000 fc14 	bl	800d23a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ca12:	f000 ffc5 	bl	800d9a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ca16:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ca18:	4618      	mov	r0, r3
 800ca1a:	3738      	adds	r7, #56	@ 0x38
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}
 800ca20:	e000ed04 	.word	0xe000ed04

0800ca24 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b090      	sub	sp, #64	@ 0x40
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	60f8      	str	r0, [r7, #12]
 800ca2c:	60b9      	str	r1, [r7, #8]
 800ca2e:	607a      	str	r2, [r7, #4]
 800ca30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800ca36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d10b      	bne.n	800ca54 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800ca3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca40:	f383 8811 	msr	BASEPRI, r3
 800ca44:	f3bf 8f6f 	isb	sy
 800ca48:	f3bf 8f4f 	dsb	sy
 800ca4c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ca4e:	bf00      	nop
 800ca50:	bf00      	nop
 800ca52:	e7fd      	b.n	800ca50 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d103      	bne.n	800ca62 <xQueueGenericSendFromISR+0x3e>
 800ca5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d101      	bne.n	800ca66 <xQueueGenericSendFromISR+0x42>
 800ca62:	2301      	movs	r3, #1
 800ca64:	e000      	b.n	800ca68 <xQueueGenericSendFromISR+0x44>
 800ca66:	2300      	movs	r3, #0
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d10b      	bne.n	800ca84 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800ca6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca70:	f383 8811 	msr	BASEPRI, r3
 800ca74:	f3bf 8f6f 	isb	sy
 800ca78:	f3bf 8f4f 	dsb	sy
 800ca7c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ca7e:	bf00      	nop
 800ca80:	bf00      	nop
 800ca82:	e7fd      	b.n	800ca80 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ca84:	683b      	ldr	r3, [r7, #0]
 800ca86:	2b02      	cmp	r3, #2
 800ca88:	d103      	bne.n	800ca92 <xQueueGenericSendFromISR+0x6e>
 800ca8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca8e:	2b01      	cmp	r3, #1
 800ca90:	d101      	bne.n	800ca96 <xQueueGenericSendFromISR+0x72>
 800ca92:	2301      	movs	r3, #1
 800ca94:	e000      	b.n	800ca98 <xQueueGenericSendFromISR+0x74>
 800ca96:	2300      	movs	r3, #0
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d10b      	bne.n	800cab4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800ca9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caa0:	f383 8811 	msr	BASEPRI, r3
 800caa4:	f3bf 8f6f 	isb	sy
 800caa8:	f3bf 8f4f 	dsb	sy
 800caac:	623b      	str	r3, [r7, #32]
}
 800caae:	bf00      	nop
 800cab0:	bf00      	nop
 800cab2:	e7fd      	b.n	800cab0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cab4:	f002 fc0c 	bl	800f2d0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cab8:	f3ef 8211 	mrs	r2, BASEPRI
 800cabc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cac0:	f383 8811 	msr	BASEPRI, r3
 800cac4:	f3bf 8f6f 	isb	sy
 800cac8:	f3bf 8f4f 	dsb	sy
 800cacc:	61fa      	str	r2, [r7, #28]
 800cace:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cad0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cad2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cad6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cada:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cadc:	429a      	cmp	r2, r3
 800cade:	d302      	bcc.n	800cae6 <xQueueGenericSendFromISR+0xc2>
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	2b02      	cmp	r3, #2
 800cae4:	d12f      	bne.n	800cb46 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cae8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800caec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800caf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800caf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800caf6:	683a      	ldr	r2, [r7, #0]
 800caf8:	68b9      	ldr	r1, [r7, #8]
 800cafa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cafc:	f000 fb0d 	bl	800d11a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cb00:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800cb04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb08:	d112      	bne.n	800cb30 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cb0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d016      	beq.n	800cb40 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cb12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb14:	3324      	adds	r3, #36	@ 0x24
 800cb16:	4618      	mov	r0, r3
 800cb18:	f001 f98a 	bl	800de30 <xTaskRemoveFromEventList>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d00e      	beq.n	800cb40 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d00b      	beq.n	800cb40 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	2201      	movs	r2, #1
 800cb2c:	601a      	str	r2, [r3, #0]
 800cb2e:	e007      	b.n	800cb40 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cb30:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800cb34:	3301      	adds	r3, #1
 800cb36:	b2db      	uxtb	r3, r3
 800cb38:	b25a      	sxtb	r2, r3
 800cb3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800cb40:	2301      	movs	r3, #1
 800cb42:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800cb44:	e001      	b.n	800cb4a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cb46:	2300      	movs	r3, #0
 800cb48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cb4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb4c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cb4e:	697b      	ldr	r3, [r7, #20]
 800cb50:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800cb54:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cb56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800cb58:	4618      	mov	r0, r3
 800cb5a:	3740      	adds	r7, #64	@ 0x40
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	bd80      	pop	{r7, pc}

0800cb60 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b08e      	sub	sp, #56	@ 0x38
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
 800cb68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800cb6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d10b      	bne.n	800cb8c <xQueueGiveFromISR+0x2c>
	__asm volatile
 800cb74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb78:	f383 8811 	msr	BASEPRI, r3
 800cb7c:	f3bf 8f6f 	isb	sy
 800cb80:	f3bf 8f4f 	dsb	sy
 800cb84:	623b      	str	r3, [r7, #32]
}
 800cb86:	bf00      	nop
 800cb88:	bf00      	nop
 800cb8a:	e7fd      	b.n	800cb88 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cb8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d00b      	beq.n	800cbac <xQueueGiveFromISR+0x4c>
	__asm volatile
 800cb94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb98:	f383 8811 	msr	BASEPRI, r3
 800cb9c:	f3bf 8f6f 	isb	sy
 800cba0:	f3bf 8f4f 	dsb	sy
 800cba4:	61fb      	str	r3, [r7, #28]
}
 800cba6:	bf00      	nop
 800cba8:	bf00      	nop
 800cbaa:	e7fd      	b.n	800cba8 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800cbac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d103      	bne.n	800cbbc <xQueueGiveFromISR+0x5c>
 800cbb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbb6:	689b      	ldr	r3, [r3, #8]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d101      	bne.n	800cbc0 <xQueueGiveFromISR+0x60>
 800cbbc:	2301      	movs	r3, #1
 800cbbe:	e000      	b.n	800cbc2 <xQueueGiveFromISR+0x62>
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d10b      	bne.n	800cbde <xQueueGiveFromISR+0x7e>
	__asm volatile
 800cbc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbca:	f383 8811 	msr	BASEPRI, r3
 800cbce:	f3bf 8f6f 	isb	sy
 800cbd2:	f3bf 8f4f 	dsb	sy
 800cbd6:	61bb      	str	r3, [r7, #24]
}
 800cbd8:	bf00      	nop
 800cbda:	bf00      	nop
 800cbdc:	e7fd      	b.n	800cbda <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cbde:	f002 fb77 	bl	800f2d0 <vPortValidateInterruptPriority>
	__asm volatile
 800cbe2:	f3ef 8211 	mrs	r2, BASEPRI
 800cbe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbea:	f383 8811 	msr	BASEPRI, r3
 800cbee:	f3bf 8f6f 	isb	sy
 800cbf2:	f3bf 8f4f 	dsb	sy
 800cbf6:	617a      	str	r2, [r7, #20]
 800cbf8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800cbfa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cbfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cbfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc02:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800cc04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cc0a:	429a      	cmp	r2, r3
 800cc0c:	d22b      	bcs.n	800cc66 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cc0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc10:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cc14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cc18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc1a:	1c5a      	adds	r2, r3, #1
 800cc1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc1e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cc20:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800cc24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc28:	d112      	bne.n	800cc50 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d016      	beq.n	800cc60 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cc32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc34:	3324      	adds	r3, #36	@ 0x24
 800cc36:	4618      	mov	r0, r3
 800cc38:	f001 f8fa 	bl	800de30 <xTaskRemoveFromEventList>
 800cc3c:	4603      	mov	r3, r0
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d00e      	beq.n	800cc60 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d00b      	beq.n	800cc60 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	2201      	movs	r2, #1
 800cc4c:	601a      	str	r2, [r3, #0]
 800cc4e:	e007      	b.n	800cc60 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cc50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cc54:	3301      	adds	r3, #1
 800cc56:	b2db      	uxtb	r3, r3
 800cc58:	b25a      	sxtb	r2, r3
 800cc5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800cc60:	2301      	movs	r3, #1
 800cc62:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc64:	e001      	b.n	800cc6a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cc66:	2300      	movs	r3, #0
 800cc68:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc6c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	f383 8811 	msr	BASEPRI, r3
}
 800cc74:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cc76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800cc78:	4618      	mov	r0, r3
 800cc7a:	3738      	adds	r7, #56	@ 0x38
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bd80      	pop	{r7, pc}

0800cc80 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b08c      	sub	sp, #48	@ 0x30
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	60f8      	str	r0, [r7, #12]
 800cc88:	60b9      	str	r1, [r7, #8]
 800cc8a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cc94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d10b      	bne.n	800ccb2 <xQueueReceive+0x32>
	__asm volatile
 800cc9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc9e:	f383 8811 	msr	BASEPRI, r3
 800cca2:	f3bf 8f6f 	isb	sy
 800cca6:	f3bf 8f4f 	dsb	sy
 800ccaa:	623b      	str	r3, [r7, #32]
}
 800ccac:	bf00      	nop
 800ccae:	bf00      	nop
 800ccb0:	e7fd      	b.n	800ccae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ccb2:	68bb      	ldr	r3, [r7, #8]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d103      	bne.n	800ccc0 <xQueueReceive+0x40>
 800ccb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d101      	bne.n	800ccc4 <xQueueReceive+0x44>
 800ccc0:	2301      	movs	r3, #1
 800ccc2:	e000      	b.n	800ccc6 <xQueueReceive+0x46>
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d10b      	bne.n	800cce2 <xQueueReceive+0x62>
	__asm volatile
 800ccca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccce:	f383 8811 	msr	BASEPRI, r3
 800ccd2:	f3bf 8f6f 	isb	sy
 800ccd6:	f3bf 8f4f 	dsb	sy
 800ccda:	61fb      	str	r3, [r7, #28]
}
 800ccdc:	bf00      	nop
 800ccde:	bf00      	nop
 800cce0:	e7fd      	b.n	800ccde <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cce2:	f001 fac3 	bl	800e26c <xTaskGetSchedulerState>
 800cce6:	4603      	mov	r3, r0
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d102      	bne.n	800ccf2 <xQueueReceive+0x72>
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d101      	bne.n	800ccf6 <xQueueReceive+0x76>
 800ccf2:	2301      	movs	r3, #1
 800ccf4:	e000      	b.n	800ccf8 <xQueueReceive+0x78>
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d10b      	bne.n	800cd14 <xQueueReceive+0x94>
	__asm volatile
 800ccfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd00:	f383 8811 	msr	BASEPRI, r3
 800cd04:	f3bf 8f6f 	isb	sy
 800cd08:	f3bf 8f4f 	dsb	sy
 800cd0c:	61bb      	str	r3, [r7, #24]
}
 800cd0e:	bf00      	nop
 800cd10:	bf00      	nop
 800cd12:	e7fd      	b.n	800cd10 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cd14:	f002 f918 	bl	800ef48 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cd18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd1c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cd1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d01f      	beq.n	800cd64 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cd24:	68b9      	ldr	r1, [r7, #8]
 800cd26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cd28:	f000 fa61 	bl	800d1ee <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cd2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd2e:	1e5a      	subs	r2, r3, #1
 800cd30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd32:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd36:	691b      	ldr	r3, [r3, #16]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d00f      	beq.n	800cd5c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd3e:	3310      	adds	r3, #16
 800cd40:	4618      	mov	r0, r3
 800cd42:	f001 f875 	bl	800de30 <xTaskRemoveFromEventList>
 800cd46:	4603      	mov	r3, r0
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d007      	beq.n	800cd5c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cd4c:	4b3c      	ldr	r3, [pc, #240]	@ (800ce40 <xQueueReceive+0x1c0>)
 800cd4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd52:	601a      	str	r2, [r3, #0]
 800cd54:	f3bf 8f4f 	dsb	sy
 800cd58:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cd5c:	f002 f926 	bl	800efac <vPortExitCritical>
				return pdPASS;
 800cd60:	2301      	movs	r3, #1
 800cd62:	e069      	b.n	800ce38 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d103      	bne.n	800cd72 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cd6a:	f002 f91f 	bl	800efac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cd6e:	2300      	movs	r3, #0
 800cd70:	e062      	b.n	800ce38 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cd72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d106      	bne.n	800cd86 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cd78:	f107 0310 	add.w	r3, r7, #16
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	f001 f8bd 	bl	800defc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cd82:	2301      	movs	r3, #1
 800cd84:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cd86:	f002 f911 	bl	800efac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cd8a:	f000 fdc3 	bl	800d914 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cd8e:	f002 f8db 	bl	800ef48 <vPortEnterCritical>
 800cd92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd94:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cd98:	b25b      	sxtb	r3, r3
 800cd9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd9e:	d103      	bne.n	800cda8 <xQueueReceive+0x128>
 800cda0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cda2:	2200      	movs	r2, #0
 800cda4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cda8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdaa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cdae:	b25b      	sxtb	r3, r3
 800cdb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdb4:	d103      	bne.n	800cdbe <xQueueReceive+0x13e>
 800cdb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdb8:	2200      	movs	r2, #0
 800cdba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cdbe:	f002 f8f5 	bl	800efac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cdc2:	1d3a      	adds	r2, r7, #4
 800cdc4:	f107 0310 	add.w	r3, r7, #16
 800cdc8:	4611      	mov	r1, r2
 800cdca:	4618      	mov	r0, r3
 800cdcc:	f001 f8ac 	bl	800df28 <xTaskCheckForTimeOut>
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d123      	bne.n	800ce1e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cdd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cdd8:	f000 fa81 	bl	800d2de <prvIsQueueEmpty>
 800cddc:	4603      	mov	r3, r0
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d017      	beq.n	800ce12 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cde2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cde4:	3324      	adds	r3, #36	@ 0x24
 800cde6:	687a      	ldr	r2, [r7, #4]
 800cde8:	4611      	mov	r1, r2
 800cdea:	4618      	mov	r0, r3
 800cdec:	f000 ffce 	bl	800dd8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cdf0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cdf2:	f000 fa22 	bl	800d23a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cdf6:	f000 fdd3 	bl	800d9a0 <xTaskResumeAll>
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d189      	bne.n	800cd14 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800ce00:	4b0f      	ldr	r3, [pc, #60]	@ (800ce40 <xQueueReceive+0x1c0>)
 800ce02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce06:	601a      	str	r2, [r3, #0]
 800ce08:	f3bf 8f4f 	dsb	sy
 800ce0c:	f3bf 8f6f 	isb	sy
 800ce10:	e780      	b.n	800cd14 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ce12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ce14:	f000 fa11 	bl	800d23a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ce18:	f000 fdc2 	bl	800d9a0 <xTaskResumeAll>
 800ce1c:	e77a      	b.n	800cd14 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ce1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ce20:	f000 fa0b 	bl	800d23a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ce24:	f000 fdbc 	bl	800d9a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ce28:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ce2a:	f000 fa58 	bl	800d2de <prvIsQueueEmpty>
 800ce2e:	4603      	mov	r3, r0
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	f43f af6f 	beq.w	800cd14 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ce36:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ce38:	4618      	mov	r0, r3
 800ce3a:	3730      	adds	r7, #48	@ 0x30
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	bd80      	pop	{r7, pc}
 800ce40:	e000ed04 	.word	0xe000ed04

0800ce44 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b08e      	sub	sp, #56	@ 0x38
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
 800ce4c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ce4e:	2300      	movs	r3, #0
 800ce50:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ce56:	2300      	movs	r3, #0
 800ce58:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ce5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d10b      	bne.n	800ce78 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800ce60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce64:	f383 8811 	msr	BASEPRI, r3
 800ce68:	f3bf 8f6f 	isb	sy
 800ce6c:	f3bf 8f4f 	dsb	sy
 800ce70:	623b      	str	r3, [r7, #32]
}
 800ce72:	bf00      	nop
 800ce74:	bf00      	nop
 800ce76:	e7fd      	b.n	800ce74 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ce78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d00b      	beq.n	800ce98 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800ce80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce84:	f383 8811 	msr	BASEPRI, r3
 800ce88:	f3bf 8f6f 	isb	sy
 800ce8c:	f3bf 8f4f 	dsb	sy
 800ce90:	61fb      	str	r3, [r7, #28]
}
 800ce92:	bf00      	nop
 800ce94:	bf00      	nop
 800ce96:	e7fd      	b.n	800ce94 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ce98:	f001 f9e8 	bl	800e26c <xTaskGetSchedulerState>
 800ce9c:	4603      	mov	r3, r0
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d102      	bne.n	800cea8 <xQueueSemaphoreTake+0x64>
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d101      	bne.n	800ceac <xQueueSemaphoreTake+0x68>
 800cea8:	2301      	movs	r3, #1
 800ceaa:	e000      	b.n	800ceae <xQueueSemaphoreTake+0x6a>
 800ceac:	2300      	movs	r3, #0
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d10b      	bne.n	800ceca <xQueueSemaphoreTake+0x86>
	__asm volatile
 800ceb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ceb6:	f383 8811 	msr	BASEPRI, r3
 800ceba:	f3bf 8f6f 	isb	sy
 800cebe:	f3bf 8f4f 	dsb	sy
 800cec2:	61bb      	str	r3, [r7, #24]
}
 800cec4:	bf00      	nop
 800cec6:	bf00      	nop
 800cec8:	e7fd      	b.n	800cec6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ceca:	f002 f83d 	bl	800ef48 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800cece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ced0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ced2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ced4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d024      	beq.n	800cf24 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ceda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cedc:	1e5a      	subs	r2, r3, #1
 800cede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cee0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d104      	bne.n	800cef4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ceea:	f001 fb39 	bl	800e560 <pvTaskIncrementMutexHeldCount>
 800ceee:	4602      	mov	r2, r0
 800cef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cef2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cef6:	691b      	ldr	r3, [r3, #16]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d00f      	beq.n	800cf1c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cefc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cefe:	3310      	adds	r3, #16
 800cf00:	4618      	mov	r0, r3
 800cf02:	f000 ff95 	bl	800de30 <xTaskRemoveFromEventList>
 800cf06:	4603      	mov	r3, r0
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d007      	beq.n	800cf1c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cf0c:	4b54      	ldr	r3, [pc, #336]	@ (800d060 <xQueueSemaphoreTake+0x21c>)
 800cf0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf12:	601a      	str	r2, [r3, #0]
 800cf14:	f3bf 8f4f 	dsb	sy
 800cf18:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cf1c:	f002 f846 	bl	800efac <vPortExitCritical>
				return pdPASS;
 800cf20:	2301      	movs	r3, #1
 800cf22:	e098      	b.n	800d056 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cf24:	683b      	ldr	r3, [r7, #0]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d112      	bne.n	800cf50 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800cf2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d00b      	beq.n	800cf48 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800cf30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf34:	f383 8811 	msr	BASEPRI, r3
 800cf38:	f3bf 8f6f 	isb	sy
 800cf3c:	f3bf 8f4f 	dsb	sy
 800cf40:	617b      	str	r3, [r7, #20]
}
 800cf42:	bf00      	nop
 800cf44:	bf00      	nop
 800cf46:	e7fd      	b.n	800cf44 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800cf48:	f002 f830 	bl	800efac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	e082      	b.n	800d056 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cf50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d106      	bne.n	800cf64 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cf56:	f107 030c 	add.w	r3, r7, #12
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	f000 ffce 	bl	800defc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cf60:	2301      	movs	r3, #1
 800cf62:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cf64:	f002 f822 	bl	800efac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cf68:	f000 fcd4 	bl	800d914 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cf6c:	f001 ffec 	bl	800ef48 <vPortEnterCritical>
 800cf70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf72:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cf76:	b25b      	sxtb	r3, r3
 800cf78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf7c:	d103      	bne.n	800cf86 <xQueueSemaphoreTake+0x142>
 800cf7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf80:	2200      	movs	r2, #0
 800cf82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cf86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf88:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cf8c:	b25b      	sxtb	r3, r3
 800cf8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf92:	d103      	bne.n	800cf9c <xQueueSemaphoreTake+0x158>
 800cf94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf96:	2200      	movs	r2, #0
 800cf98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cf9c:	f002 f806 	bl	800efac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cfa0:	463a      	mov	r2, r7
 800cfa2:	f107 030c 	add.w	r3, r7, #12
 800cfa6:	4611      	mov	r1, r2
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	f000 ffbd 	bl	800df28 <xTaskCheckForTimeOut>
 800cfae:	4603      	mov	r3, r0
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d132      	bne.n	800d01a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cfb4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cfb6:	f000 f992 	bl	800d2de <prvIsQueueEmpty>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d026      	beq.n	800d00e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cfc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d109      	bne.n	800cfdc <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800cfc8:	f001 ffbe 	bl	800ef48 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cfcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfce:	689b      	ldr	r3, [r3, #8]
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	f001 f969 	bl	800e2a8 <xTaskPriorityInherit>
 800cfd6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800cfd8:	f001 ffe8 	bl	800efac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cfdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfde:	3324      	adds	r3, #36	@ 0x24
 800cfe0:	683a      	ldr	r2, [r7, #0]
 800cfe2:	4611      	mov	r1, r2
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	f000 fed1 	bl	800dd8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cfea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cfec:	f000 f925 	bl	800d23a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cff0:	f000 fcd6 	bl	800d9a0 <xTaskResumeAll>
 800cff4:	4603      	mov	r3, r0
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	f47f af67 	bne.w	800ceca <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800cffc:	4b18      	ldr	r3, [pc, #96]	@ (800d060 <xQueueSemaphoreTake+0x21c>)
 800cffe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d002:	601a      	str	r2, [r3, #0]
 800d004:	f3bf 8f4f 	dsb	sy
 800d008:	f3bf 8f6f 	isb	sy
 800d00c:	e75d      	b.n	800ceca <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d00e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d010:	f000 f913 	bl	800d23a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d014:	f000 fcc4 	bl	800d9a0 <xTaskResumeAll>
 800d018:	e757      	b.n	800ceca <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d01a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d01c:	f000 f90d 	bl	800d23a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d020:	f000 fcbe 	bl	800d9a0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d024:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d026:	f000 f95a 	bl	800d2de <prvIsQueueEmpty>
 800d02a:	4603      	mov	r3, r0
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	f43f af4c 	beq.w	800ceca <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d034:	2b00      	cmp	r3, #0
 800d036:	d00d      	beq.n	800d054 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800d038:	f001 ff86 	bl	800ef48 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d03c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d03e:	f000 f854 	bl	800d0ea <prvGetDisinheritPriorityAfterTimeout>
 800d042:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d046:	689b      	ldr	r3, [r3, #8]
 800d048:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d04a:	4618      	mov	r0, r3
 800d04c:	f001 fa04 	bl	800e458 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d050:	f001 ffac 	bl	800efac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d054:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d056:	4618      	mov	r0, r3
 800d058:	3738      	adds	r7, #56	@ 0x38
 800d05a:	46bd      	mov	sp, r7
 800d05c:	bd80      	pop	{r7, pc}
 800d05e:	bf00      	nop
 800d060:	e000ed04 	.word	0xe000ed04

0800d064 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b084      	sub	sp, #16
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d10b      	bne.n	800d08a <uxQueueMessagesWaiting+0x26>
	__asm volatile
 800d072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d076:	f383 8811 	msr	BASEPRI, r3
 800d07a:	f3bf 8f6f 	isb	sy
 800d07e:	f3bf 8f4f 	dsb	sy
 800d082:	60bb      	str	r3, [r7, #8]
}
 800d084:	bf00      	nop
 800d086:	bf00      	nop
 800d088:	e7fd      	b.n	800d086 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800d08a:	f001 ff5d 	bl	800ef48 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d092:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800d094:	f001 ff8a 	bl	800efac <vPortExitCritical>

	return uxReturn;
 800d098:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800d09a:	4618      	mov	r0, r3
 800d09c:	3710      	adds	r7, #16
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	bd80      	pop	{r7, pc}

0800d0a2 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d0a2:	b580      	push	{r7, lr}
 800d0a4:	b084      	sub	sp, #16
 800d0a6:	af00      	add	r7, sp, #0
 800d0a8:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d10b      	bne.n	800d0cc <vQueueDelete+0x2a>
	__asm volatile
 800d0b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0b8:	f383 8811 	msr	BASEPRI, r3
 800d0bc:	f3bf 8f6f 	isb	sy
 800d0c0:	f3bf 8f4f 	dsb	sy
 800d0c4:	60bb      	str	r3, [r7, #8]
}
 800d0c6:	bf00      	nop
 800d0c8:	bf00      	nop
 800d0ca:	e7fd      	b.n	800d0c8 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d0cc:	68f8      	ldr	r0, [r7, #12]
 800d0ce:	f000 f95f 	bl	800d390 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d102      	bne.n	800d0e2 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800d0dc:	68f8      	ldr	r0, [r7, #12]
 800d0de:	f002 fa07 	bl	800f4f0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d0e2:	bf00      	nop
 800d0e4:	3710      	adds	r7, #16
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	bd80      	pop	{r7, pc}

0800d0ea <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d0ea:	b480      	push	{r7}
 800d0ec:	b085      	sub	sp, #20
 800d0ee:	af00      	add	r7, sp, #0
 800d0f0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d006      	beq.n	800d108 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800d104:	60fb      	str	r3, [r7, #12]
 800d106:	e001      	b.n	800d10c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d108:	2300      	movs	r3, #0
 800d10a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d10c:	68fb      	ldr	r3, [r7, #12]
	}
 800d10e:	4618      	mov	r0, r3
 800d110:	3714      	adds	r7, #20
 800d112:	46bd      	mov	sp, r7
 800d114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d118:	4770      	bx	lr

0800d11a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d11a:	b580      	push	{r7, lr}
 800d11c:	b086      	sub	sp, #24
 800d11e:	af00      	add	r7, sp, #0
 800d120:	60f8      	str	r0, [r7, #12]
 800d122:	60b9      	str	r1, [r7, #8]
 800d124:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d126:	2300      	movs	r3, #0
 800d128:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d12e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d134:	2b00      	cmp	r3, #0
 800d136:	d10d      	bne.n	800d154 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d14d      	bne.n	800d1dc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	689b      	ldr	r3, [r3, #8]
 800d144:	4618      	mov	r0, r3
 800d146:	f001 f917 	bl	800e378 <xTaskPriorityDisinherit>
 800d14a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	2200      	movs	r2, #0
 800d150:	609a      	str	r2, [r3, #8]
 800d152:	e043      	b.n	800d1dc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d119      	bne.n	800d18e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	6858      	ldr	r0, [r3, #4]
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d162:	461a      	mov	r2, r3
 800d164:	68b9      	ldr	r1, [r7, #8]
 800d166:	f003 fd90 	bl	8010c8a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	685a      	ldr	r2, [r3, #4]
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d172:	441a      	add	r2, r3
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	685a      	ldr	r2, [r3, #4]
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	689b      	ldr	r3, [r3, #8]
 800d180:	429a      	cmp	r2, r3
 800d182:	d32b      	bcc.n	800d1dc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	681a      	ldr	r2, [r3, #0]
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	605a      	str	r2, [r3, #4]
 800d18c:	e026      	b.n	800d1dc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	68d8      	ldr	r0, [r3, #12]
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d196:	461a      	mov	r2, r3
 800d198:	68b9      	ldr	r1, [r7, #8]
 800d19a:	f003 fd76 	bl	8010c8a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	68da      	ldr	r2, [r3, #12]
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d1a6:	425b      	negs	r3, r3
 800d1a8:	441a      	add	r2, r3
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	68da      	ldr	r2, [r3, #12]
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	429a      	cmp	r2, r3
 800d1b8:	d207      	bcs.n	800d1ca <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	689a      	ldr	r2, [r3, #8]
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d1c2:	425b      	negs	r3, r3
 800d1c4:	441a      	add	r2, r3
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	2b02      	cmp	r3, #2
 800d1ce:	d105      	bne.n	800d1dc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d1d0:	693b      	ldr	r3, [r7, #16]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d002      	beq.n	800d1dc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d1d6:	693b      	ldr	r3, [r7, #16]
 800d1d8:	3b01      	subs	r3, #1
 800d1da:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d1dc:	693b      	ldr	r3, [r7, #16]
 800d1de:	1c5a      	adds	r2, r3, #1
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800d1e4:	697b      	ldr	r3, [r7, #20]
}
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	3718      	adds	r7, #24
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bd80      	pop	{r7, pc}

0800d1ee <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d1ee:	b580      	push	{r7, lr}
 800d1f0:	b082      	sub	sp, #8
 800d1f2:	af00      	add	r7, sp, #0
 800d1f4:	6078      	str	r0, [r7, #4]
 800d1f6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d018      	beq.n	800d232 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	68da      	ldr	r2, [r3, #12]
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d208:	441a      	add	r2, r3
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	68da      	ldr	r2, [r3, #12]
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	689b      	ldr	r3, [r3, #8]
 800d216:	429a      	cmp	r2, r3
 800d218:	d303      	bcc.n	800d222 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681a      	ldr	r2, [r3, #0]
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	68d9      	ldr	r1, [r3, #12]
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d22a:	461a      	mov	r2, r3
 800d22c:	6838      	ldr	r0, [r7, #0]
 800d22e:	f003 fd2c 	bl	8010c8a <memcpy>
	}
}
 800d232:	bf00      	nop
 800d234:	3708      	adds	r7, #8
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}

0800d23a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d23a:	b580      	push	{r7, lr}
 800d23c:	b084      	sub	sp, #16
 800d23e:	af00      	add	r7, sp, #0
 800d240:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d242:	f001 fe81 	bl	800ef48 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d24c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d24e:	e011      	b.n	800d274 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d254:	2b00      	cmp	r3, #0
 800d256:	d012      	beq.n	800d27e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	3324      	adds	r3, #36	@ 0x24
 800d25c:	4618      	mov	r0, r3
 800d25e:	f000 fde7 	bl	800de30 <xTaskRemoveFromEventList>
 800d262:	4603      	mov	r3, r0
 800d264:	2b00      	cmp	r3, #0
 800d266:	d001      	beq.n	800d26c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d268:	f000 fec2 	bl	800dff0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d26c:	7bfb      	ldrb	r3, [r7, #15]
 800d26e:	3b01      	subs	r3, #1
 800d270:	b2db      	uxtb	r3, r3
 800d272:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d274:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	dce9      	bgt.n	800d250 <prvUnlockQueue+0x16>
 800d27c:	e000      	b.n	800d280 <prvUnlockQueue+0x46>
					break;
 800d27e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	22ff      	movs	r2, #255	@ 0xff
 800d284:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800d288:	f001 fe90 	bl	800efac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d28c:	f001 fe5c 	bl	800ef48 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d296:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d298:	e011      	b.n	800d2be <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	691b      	ldr	r3, [r3, #16]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d012      	beq.n	800d2c8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	3310      	adds	r3, #16
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	f000 fdc2 	bl	800de30 <xTaskRemoveFromEventList>
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d001      	beq.n	800d2b6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d2b2:	f000 fe9d 	bl	800dff0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d2b6:	7bbb      	ldrb	r3, [r7, #14]
 800d2b8:	3b01      	subs	r3, #1
 800d2ba:	b2db      	uxtb	r3, r3
 800d2bc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d2be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	dce9      	bgt.n	800d29a <prvUnlockQueue+0x60>
 800d2c6:	e000      	b.n	800d2ca <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d2c8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	22ff      	movs	r2, #255	@ 0xff
 800d2ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800d2d2:	f001 fe6b 	bl	800efac <vPortExitCritical>
}
 800d2d6:	bf00      	nop
 800d2d8:	3710      	adds	r7, #16
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	bd80      	pop	{r7, pc}

0800d2de <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d2de:	b580      	push	{r7, lr}
 800d2e0:	b084      	sub	sp, #16
 800d2e2:	af00      	add	r7, sp, #0
 800d2e4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d2e6:	f001 fe2f 	bl	800ef48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d102      	bne.n	800d2f8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d2f2:	2301      	movs	r3, #1
 800d2f4:	60fb      	str	r3, [r7, #12]
 800d2f6:	e001      	b.n	800d2fc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d2fc:	f001 fe56 	bl	800efac <vPortExitCritical>

	return xReturn;
 800d300:	68fb      	ldr	r3, [r7, #12]
}
 800d302:	4618      	mov	r0, r3
 800d304:	3710      	adds	r7, #16
 800d306:	46bd      	mov	sp, r7
 800d308:	bd80      	pop	{r7, pc}

0800d30a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d30a:	b580      	push	{r7, lr}
 800d30c:	b084      	sub	sp, #16
 800d30e:	af00      	add	r7, sp, #0
 800d310:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d312:	f001 fe19 	bl	800ef48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d31e:	429a      	cmp	r2, r3
 800d320:	d102      	bne.n	800d328 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d322:	2301      	movs	r3, #1
 800d324:	60fb      	str	r3, [r7, #12]
 800d326:	e001      	b.n	800d32c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d328:	2300      	movs	r3, #0
 800d32a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d32c:	f001 fe3e 	bl	800efac <vPortExitCritical>

	return xReturn;
 800d330:	68fb      	ldr	r3, [r7, #12]
}
 800d332:	4618      	mov	r0, r3
 800d334:	3710      	adds	r7, #16
 800d336:	46bd      	mov	sp, r7
 800d338:	bd80      	pop	{r7, pc}
	...

0800d33c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d33c:	b480      	push	{r7}
 800d33e:	b085      	sub	sp, #20
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
 800d344:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d346:	2300      	movs	r3, #0
 800d348:	60fb      	str	r3, [r7, #12]
 800d34a:	e014      	b.n	800d376 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d34c:	4a0f      	ldr	r2, [pc, #60]	@ (800d38c <vQueueAddToRegistry+0x50>)
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d10b      	bne.n	800d370 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d358:	490c      	ldr	r1, [pc, #48]	@ (800d38c <vQueueAddToRegistry+0x50>)
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	683a      	ldr	r2, [r7, #0]
 800d35e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d362:	4a0a      	ldr	r2, [pc, #40]	@ (800d38c <vQueueAddToRegistry+0x50>)
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	00db      	lsls	r3, r3, #3
 800d368:	4413      	add	r3, r2
 800d36a:	687a      	ldr	r2, [r7, #4]
 800d36c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d36e:	e006      	b.n	800d37e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	3301      	adds	r3, #1
 800d374:	60fb      	str	r3, [r7, #12]
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	2b07      	cmp	r3, #7
 800d37a:	d9e7      	bls.n	800d34c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d37c:	bf00      	nop
 800d37e:	bf00      	nop
 800d380:	3714      	adds	r7, #20
 800d382:	46bd      	mov	sp, r7
 800d384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d388:	4770      	bx	lr
 800d38a:	bf00      	nop
 800d38c:	24000b8c 	.word	0x24000b8c

0800d390 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d390:	b480      	push	{r7}
 800d392:	b085      	sub	sp, #20
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d398:	2300      	movs	r3, #0
 800d39a:	60fb      	str	r3, [r7, #12]
 800d39c:	e016      	b.n	800d3cc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d39e:	4a10      	ldr	r2, [pc, #64]	@ (800d3e0 <vQueueUnregisterQueue+0x50>)
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	00db      	lsls	r3, r3, #3
 800d3a4:	4413      	add	r3, r2
 800d3a6:	685b      	ldr	r3, [r3, #4]
 800d3a8:	687a      	ldr	r2, [r7, #4]
 800d3aa:	429a      	cmp	r2, r3
 800d3ac:	d10b      	bne.n	800d3c6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d3ae:	4a0c      	ldr	r2, [pc, #48]	@ (800d3e0 <vQueueUnregisterQueue+0x50>)
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	2100      	movs	r1, #0
 800d3b4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d3b8:	4a09      	ldr	r2, [pc, #36]	@ (800d3e0 <vQueueUnregisterQueue+0x50>)
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	00db      	lsls	r3, r3, #3
 800d3be:	4413      	add	r3, r2
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	605a      	str	r2, [r3, #4]
				break;
 800d3c4:	e006      	b.n	800d3d4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	3301      	adds	r3, #1
 800d3ca:	60fb      	str	r3, [r7, #12]
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	2b07      	cmp	r3, #7
 800d3d0:	d9e5      	bls.n	800d39e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d3d2:	bf00      	nop
 800d3d4:	bf00      	nop
 800d3d6:	3714      	adds	r7, #20
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3de:	4770      	bx	lr
 800d3e0:	24000b8c 	.word	0x24000b8c

0800d3e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b086      	sub	sp, #24
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	60f8      	str	r0, [r7, #12]
 800d3ec:	60b9      	str	r1, [r7, #8]
 800d3ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d3f4:	f001 fda8 	bl	800ef48 <vPortEnterCritical>
 800d3f8:	697b      	ldr	r3, [r7, #20]
 800d3fa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d3fe:	b25b      	sxtb	r3, r3
 800d400:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d404:	d103      	bne.n	800d40e <vQueueWaitForMessageRestricted+0x2a>
 800d406:	697b      	ldr	r3, [r7, #20]
 800d408:	2200      	movs	r2, #0
 800d40a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d40e:	697b      	ldr	r3, [r7, #20]
 800d410:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d414:	b25b      	sxtb	r3, r3
 800d416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d41a:	d103      	bne.n	800d424 <vQueueWaitForMessageRestricted+0x40>
 800d41c:	697b      	ldr	r3, [r7, #20]
 800d41e:	2200      	movs	r2, #0
 800d420:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d424:	f001 fdc2 	bl	800efac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d428:	697b      	ldr	r3, [r7, #20]
 800d42a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d106      	bne.n	800d43e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d430:	697b      	ldr	r3, [r7, #20]
 800d432:	3324      	adds	r3, #36	@ 0x24
 800d434:	687a      	ldr	r2, [r7, #4]
 800d436:	68b9      	ldr	r1, [r7, #8]
 800d438:	4618      	mov	r0, r3
 800d43a:	f000 fccd 	bl	800ddd8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d43e:	6978      	ldr	r0, [r7, #20]
 800d440:	f7ff fefb 	bl	800d23a <prvUnlockQueue>
	}
 800d444:	bf00      	nop
 800d446:	3718      	adds	r7, #24
 800d448:	46bd      	mov	sp, r7
 800d44a:	bd80      	pop	{r7, pc}

0800d44c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b08e      	sub	sp, #56	@ 0x38
 800d450:	af04      	add	r7, sp, #16
 800d452:	60f8      	str	r0, [r7, #12]
 800d454:	60b9      	str	r1, [r7, #8]
 800d456:	607a      	str	r2, [r7, #4]
 800d458:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d45a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d10b      	bne.n	800d478 <xTaskCreateStatic+0x2c>
	__asm volatile
 800d460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d464:	f383 8811 	msr	BASEPRI, r3
 800d468:	f3bf 8f6f 	isb	sy
 800d46c:	f3bf 8f4f 	dsb	sy
 800d470:	623b      	str	r3, [r7, #32]
}
 800d472:	bf00      	nop
 800d474:	bf00      	nop
 800d476:	e7fd      	b.n	800d474 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d10b      	bne.n	800d496 <xTaskCreateStatic+0x4a>
	__asm volatile
 800d47e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d482:	f383 8811 	msr	BASEPRI, r3
 800d486:	f3bf 8f6f 	isb	sy
 800d48a:	f3bf 8f4f 	dsb	sy
 800d48e:	61fb      	str	r3, [r7, #28]
}
 800d490:	bf00      	nop
 800d492:	bf00      	nop
 800d494:	e7fd      	b.n	800d492 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d496:	23a8      	movs	r3, #168	@ 0xa8
 800d498:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d49a:	693b      	ldr	r3, [r7, #16]
 800d49c:	2ba8      	cmp	r3, #168	@ 0xa8
 800d49e:	d00b      	beq.n	800d4b8 <xTaskCreateStatic+0x6c>
	__asm volatile
 800d4a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4a4:	f383 8811 	msr	BASEPRI, r3
 800d4a8:	f3bf 8f6f 	isb	sy
 800d4ac:	f3bf 8f4f 	dsb	sy
 800d4b0:	61bb      	str	r3, [r7, #24]
}
 800d4b2:	bf00      	nop
 800d4b4:	bf00      	nop
 800d4b6:	e7fd      	b.n	800d4b4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d4b8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d4ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d01e      	beq.n	800d4fe <xTaskCreateStatic+0xb2>
 800d4c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d01b      	beq.n	800d4fe <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d4c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4c8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d4ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d4ce:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d4d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4d2:	2202      	movs	r2, #2
 800d4d4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d4d8:	2300      	movs	r3, #0
 800d4da:	9303      	str	r3, [sp, #12]
 800d4dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4de:	9302      	str	r3, [sp, #8]
 800d4e0:	f107 0314 	add.w	r3, r7, #20
 800d4e4:	9301      	str	r3, [sp, #4]
 800d4e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4e8:	9300      	str	r3, [sp, #0]
 800d4ea:	683b      	ldr	r3, [r7, #0]
 800d4ec:	687a      	ldr	r2, [r7, #4]
 800d4ee:	68b9      	ldr	r1, [r7, #8]
 800d4f0:	68f8      	ldr	r0, [r7, #12]
 800d4f2:	f000 f851 	bl	800d598 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d4f6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d4f8:	f000 f8f6 	bl	800d6e8 <prvAddNewTaskToReadyList>
 800d4fc:	e001      	b.n	800d502 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d4fe:	2300      	movs	r3, #0
 800d500:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d502:	697b      	ldr	r3, [r7, #20]
	}
 800d504:	4618      	mov	r0, r3
 800d506:	3728      	adds	r7, #40	@ 0x28
 800d508:	46bd      	mov	sp, r7
 800d50a:	bd80      	pop	{r7, pc}

0800d50c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b08c      	sub	sp, #48	@ 0x30
 800d510:	af04      	add	r7, sp, #16
 800d512:	60f8      	str	r0, [r7, #12]
 800d514:	60b9      	str	r1, [r7, #8]
 800d516:	603b      	str	r3, [r7, #0]
 800d518:	4613      	mov	r3, r2
 800d51a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d51c:	88fb      	ldrh	r3, [r7, #6]
 800d51e:	009b      	lsls	r3, r3, #2
 800d520:	4618      	mov	r0, r3
 800d522:	f001 ff17 	bl	800f354 <pvPortMalloc>
 800d526:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d528:	697b      	ldr	r3, [r7, #20]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d00e      	beq.n	800d54c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d52e:	20a8      	movs	r0, #168	@ 0xa8
 800d530:	f001 ff10 	bl	800f354 <pvPortMalloc>
 800d534:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d536:	69fb      	ldr	r3, [r7, #28]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d003      	beq.n	800d544 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d53c:	69fb      	ldr	r3, [r7, #28]
 800d53e:	697a      	ldr	r2, [r7, #20]
 800d540:	631a      	str	r2, [r3, #48]	@ 0x30
 800d542:	e005      	b.n	800d550 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d544:	6978      	ldr	r0, [r7, #20]
 800d546:	f001 ffd3 	bl	800f4f0 <vPortFree>
 800d54a:	e001      	b.n	800d550 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d54c:	2300      	movs	r3, #0
 800d54e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d550:	69fb      	ldr	r3, [r7, #28]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d017      	beq.n	800d586 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d556:	69fb      	ldr	r3, [r7, #28]
 800d558:	2200      	movs	r2, #0
 800d55a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d55e:	88fa      	ldrh	r2, [r7, #6]
 800d560:	2300      	movs	r3, #0
 800d562:	9303      	str	r3, [sp, #12]
 800d564:	69fb      	ldr	r3, [r7, #28]
 800d566:	9302      	str	r3, [sp, #8]
 800d568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d56a:	9301      	str	r3, [sp, #4]
 800d56c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d56e:	9300      	str	r3, [sp, #0]
 800d570:	683b      	ldr	r3, [r7, #0]
 800d572:	68b9      	ldr	r1, [r7, #8]
 800d574:	68f8      	ldr	r0, [r7, #12]
 800d576:	f000 f80f 	bl	800d598 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d57a:	69f8      	ldr	r0, [r7, #28]
 800d57c:	f000 f8b4 	bl	800d6e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d580:	2301      	movs	r3, #1
 800d582:	61bb      	str	r3, [r7, #24]
 800d584:	e002      	b.n	800d58c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d586:	f04f 33ff 	mov.w	r3, #4294967295
 800d58a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d58c:	69bb      	ldr	r3, [r7, #24]
	}
 800d58e:	4618      	mov	r0, r3
 800d590:	3720      	adds	r7, #32
 800d592:	46bd      	mov	sp, r7
 800d594:	bd80      	pop	{r7, pc}
	...

0800d598 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	b088      	sub	sp, #32
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	60f8      	str	r0, [r7, #12]
 800d5a0:	60b9      	str	r1, [r7, #8]
 800d5a2:	607a      	str	r2, [r7, #4]
 800d5a4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d5a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5a8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	009b      	lsls	r3, r3, #2
 800d5ae:	461a      	mov	r2, r3
 800d5b0:	21a5      	movs	r1, #165	@ 0xa5
 800d5b2:	f003 fa41 	bl	8010a38 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d5b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d5ba:	6879      	ldr	r1, [r7, #4]
 800d5bc:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800d5c0:	440b      	add	r3, r1
 800d5c2:	009b      	lsls	r3, r3, #2
 800d5c4:	4413      	add	r3, r2
 800d5c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d5c8:	69bb      	ldr	r3, [r7, #24]
 800d5ca:	f023 0307 	bic.w	r3, r3, #7
 800d5ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d5d0:	69bb      	ldr	r3, [r7, #24]
 800d5d2:	f003 0307 	and.w	r3, r3, #7
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d00b      	beq.n	800d5f2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800d5da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5de:	f383 8811 	msr	BASEPRI, r3
 800d5e2:	f3bf 8f6f 	isb	sy
 800d5e6:	f3bf 8f4f 	dsb	sy
 800d5ea:	617b      	str	r3, [r7, #20]
}
 800d5ec:	bf00      	nop
 800d5ee:	bf00      	nop
 800d5f0:	e7fd      	b.n	800d5ee <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d5f2:	68bb      	ldr	r3, [r7, #8]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d01f      	beq.n	800d638 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	61fb      	str	r3, [r7, #28]
 800d5fc:	e012      	b.n	800d624 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d5fe:	68ba      	ldr	r2, [r7, #8]
 800d600:	69fb      	ldr	r3, [r7, #28]
 800d602:	4413      	add	r3, r2
 800d604:	7819      	ldrb	r1, [r3, #0]
 800d606:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d608:	69fb      	ldr	r3, [r7, #28]
 800d60a:	4413      	add	r3, r2
 800d60c:	3334      	adds	r3, #52	@ 0x34
 800d60e:	460a      	mov	r2, r1
 800d610:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d612:	68ba      	ldr	r2, [r7, #8]
 800d614:	69fb      	ldr	r3, [r7, #28]
 800d616:	4413      	add	r3, r2
 800d618:	781b      	ldrb	r3, [r3, #0]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d006      	beq.n	800d62c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d61e:	69fb      	ldr	r3, [r7, #28]
 800d620:	3301      	adds	r3, #1
 800d622:	61fb      	str	r3, [r7, #28]
 800d624:	69fb      	ldr	r3, [r7, #28]
 800d626:	2b0f      	cmp	r3, #15
 800d628:	d9e9      	bls.n	800d5fe <prvInitialiseNewTask+0x66>
 800d62a:	e000      	b.n	800d62e <prvInitialiseNewTask+0x96>
			{
				break;
 800d62c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d62e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d630:	2200      	movs	r2, #0
 800d632:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d636:	e003      	b.n	800d640 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d63a:	2200      	movs	r2, #0
 800d63c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d642:	2b37      	cmp	r3, #55	@ 0x37
 800d644:	d901      	bls.n	800d64a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d646:	2337      	movs	r3, #55	@ 0x37
 800d648:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d64a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d64c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d64e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d652:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d654:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d658:	2200      	movs	r2, #0
 800d65a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d65c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d65e:	3304      	adds	r3, #4
 800d660:	4618      	mov	r0, r3
 800d662:	f7fe fecf 	bl	800c404 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d668:	3318      	adds	r3, #24
 800d66a:	4618      	mov	r0, r3
 800d66c:	f7fe feca 	bl	800c404 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d672:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d674:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d678:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d67c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d67e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d682:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d684:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d688:	2200      	movs	r2, #0
 800d68a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d68e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d690:	2200      	movs	r2, #0
 800d692:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d698:	3354      	adds	r3, #84	@ 0x54
 800d69a:	224c      	movs	r2, #76	@ 0x4c
 800d69c:	2100      	movs	r1, #0
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f003 f9ca 	bl	8010a38 <memset>
 800d6a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6a6:	4a0d      	ldr	r2, [pc, #52]	@ (800d6dc <prvInitialiseNewTask+0x144>)
 800d6a8:	659a      	str	r2, [r3, #88]	@ 0x58
 800d6aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6ac:	4a0c      	ldr	r2, [pc, #48]	@ (800d6e0 <prvInitialiseNewTask+0x148>)
 800d6ae:	65da      	str	r2, [r3, #92]	@ 0x5c
 800d6b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6b2:	4a0c      	ldr	r2, [pc, #48]	@ (800d6e4 <prvInitialiseNewTask+0x14c>)
 800d6b4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d6b6:	683a      	ldr	r2, [r7, #0]
 800d6b8:	68f9      	ldr	r1, [r7, #12]
 800d6ba:	69b8      	ldr	r0, [r7, #24]
 800d6bc:	f001 fb12 	bl	800ece4 <pxPortInitialiseStack>
 800d6c0:	4602      	mov	r2, r0
 800d6c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6c4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d6c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d002      	beq.n	800d6d2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d6cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d6d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d6d2:	bf00      	nop
 800d6d4:	3720      	adds	r7, #32
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	bd80      	pop	{r7, pc}
 800d6da:	bf00      	nop
 800d6dc:	24004e38 	.word	0x24004e38
 800d6e0:	24004ea0 	.word	0x24004ea0
 800d6e4:	24004f08 	.word	0x24004f08

0800d6e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b082      	sub	sp, #8
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d6f0:	f001 fc2a 	bl	800ef48 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d6f4:	4b2d      	ldr	r3, [pc, #180]	@ (800d7ac <prvAddNewTaskToReadyList+0xc4>)
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	3301      	adds	r3, #1
 800d6fa:	4a2c      	ldr	r2, [pc, #176]	@ (800d7ac <prvAddNewTaskToReadyList+0xc4>)
 800d6fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d6fe:	4b2c      	ldr	r3, [pc, #176]	@ (800d7b0 <prvAddNewTaskToReadyList+0xc8>)
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d109      	bne.n	800d71a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d706:	4a2a      	ldr	r2, [pc, #168]	@ (800d7b0 <prvAddNewTaskToReadyList+0xc8>)
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d70c:	4b27      	ldr	r3, [pc, #156]	@ (800d7ac <prvAddNewTaskToReadyList+0xc4>)
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	2b01      	cmp	r3, #1
 800d712:	d110      	bne.n	800d736 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d714:	f000 fce6 	bl	800e0e4 <prvInitialiseTaskLists>
 800d718:	e00d      	b.n	800d736 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d71a:	4b26      	ldr	r3, [pc, #152]	@ (800d7b4 <prvAddNewTaskToReadyList+0xcc>)
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d109      	bne.n	800d736 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d722:	4b23      	ldr	r3, [pc, #140]	@ (800d7b0 <prvAddNewTaskToReadyList+0xc8>)
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d72c:	429a      	cmp	r2, r3
 800d72e:	d802      	bhi.n	800d736 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d730:	4a1f      	ldr	r2, [pc, #124]	@ (800d7b0 <prvAddNewTaskToReadyList+0xc8>)
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d736:	4b20      	ldr	r3, [pc, #128]	@ (800d7b8 <prvAddNewTaskToReadyList+0xd0>)
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	3301      	adds	r3, #1
 800d73c:	4a1e      	ldr	r2, [pc, #120]	@ (800d7b8 <prvAddNewTaskToReadyList+0xd0>)
 800d73e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d740:	4b1d      	ldr	r3, [pc, #116]	@ (800d7b8 <prvAddNewTaskToReadyList+0xd0>)
 800d742:	681a      	ldr	r2, [r3, #0]
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d74c:	4b1b      	ldr	r3, [pc, #108]	@ (800d7bc <prvAddNewTaskToReadyList+0xd4>)
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	429a      	cmp	r2, r3
 800d752:	d903      	bls.n	800d75c <prvAddNewTaskToReadyList+0x74>
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d758:	4a18      	ldr	r2, [pc, #96]	@ (800d7bc <prvAddNewTaskToReadyList+0xd4>)
 800d75a:	6013      	str	r3, [r2, #0]
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d760:	4613      	mov	r3, r2
 800d762:	009b      	lsls	r3, r3, #2
 800d764:	4413      	add	r3, r2
 800d766:	009b      	lsls	r3, r3, #2
 800d768:	4a15      	ldr	r2, [pc, #84]	@ (800d7c0 <prvAddNewTaskToReadyList+0xd8>)
 800d76a:	441a      	add	r2, r3
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	3304      	adds	r3, #4
 800d770:	4619      	mov	r1, r3
 800d772:	4610      	mov	r0, r2
 800d774:	f7fe fe53 	bl	800c41e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d778:	f001 fc18 	bl	800efac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d77c:	4b0d      	ldr	r3, [pc, #52]	@ (800d7b4 <prvAddNewTaskToReadyList+0xcc>)
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d00e      	beq.n	800d7a2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d784:	4b0a      	ldr	r3, [pc, #40]	@ (800d7b0 <prvAddNewTaskToReadyList+0xc8>)
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d78e:	429a      	cmp	r2, r3
 800d790:	d207      	bcs.n	800d7a2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d792:	4b0c      	ldr	r3, [pc, #48]	@ (800d7c4 <prvAddNewTaskToReadyList+0xdc>)
 800d794:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d798:	601a      	str	r2, [r3, #0]
 800d79a:	f3bf 8f4f 	dsb	sy
 800d79e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d7a2:	bf00      	nop
 800d7a4:	3708      	adds	r7, #8
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	bd80      	pop	{r7, pc}
 800d7aa:	bf00      	nop
 800d7ac:	240010a0 	.word	0x240010a0
 800d7b0:	24000bcc 	.word	0x24000bcc
 800d7b4:	240010ac 	.word	0x240010ac
 800d7b8:	240010bc 	.word	0x240010bc
 800d7bc:	240010a8 	.word	0x240010a8
 800d7c0:	24000bd0 	.word	0x24000bd0
 800d7c4:	e000ed04 	.word	0xe000ed04

0800d7c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b084      	sub	sp, #16
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d018      	beq.n	800d80c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d7da:	4b14      	ldr	r3, [pc, #80]	@ (800d82c <vTaskDelay+0x64>)
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d00b      	beq.n	800d7fa <vTaskDelay+0x32>
	__asm volatile
 800d7e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7e6:	f383 8811 	msr	BASEPRI, r3
 800d7ea:	f3bf 8f6f 	isb	sy
 800d7ee:	f3bf 8f4f 	dsb	sy
 800d7f2:	60bb      	str	r3, [r7, #8]
}
 800d7f4:	bf00      	nop
 800d7f6:	bf00      	nop
 800d7f8:	e7fd      	b.n	800d7f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d7fa:	f000 f88b 	bl	800d914 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d7fe:	2100      	movs	r1, #0
 800d800:	6878      	ldr	r0, [r7, #4]
 800d802:	f000 fec1 	bl	800e588 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d806:	f000 f8cb 	bl	800d9a0 <xTaskResumeAll>
 800d80a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d107      	bne.n	800d822 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d812:	4b07      	ldr	r3, [pc, #28]	@ (800d830 <vTaskDelay+0x68>)
 800d814:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d818:	601a      	str	r2, [r3, #0]
 800d81a:	f3bf 8f4f 	dsb	sy
 800d81e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d822:	bf00      	nop
 800d824:	3710      	adds	r7, #16
 800d826:	46bd      	mov	sp, r7
 800d828:	bd80      	pop	{r7, pc}
 800d82a:	bf00      	nop
 800d82c:	240010c8 	.word	0x240010c8
 800d830:	e000ed04 	.word	0xe000ed04

0800d834 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b08a      	sub	sp, #40	@ 0x28
 800d838:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d83a:	2300      	movs	r3, #0
 800d83c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d83e:	2300      	movs	r3, #0
 800d840:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d842:	463a      	mov	r2, r7
 800d844:	1d39      	adds	r1, r7, #4
 800d846:	f107 0308 	add.w	r3, r7, #8
 800d84a:	4618      	mov	r0, r3
 800d84c:	f7fe fd86 	bl	800c35c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d850:	6839      	ldr	r1, [r7, #0]
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	68ba      	ldr	r2, [r7, #8]
 800d856:	9202      	str	r2, [sp, #8]
 800d858:	9301      	str	r3, [sp, #4]
 800d85a:	2300      	movs	r3, #0
 800d85c:	9300      	str	r3, [sp, #0]
 800d85e:	2300      	movs	r3, #0
 800d860:	460a      	mov	r2, r1
 800d862:	4924      	ldr	r1, [pc, #144]	@ (800d8f4 <vTaskStartScheduler+0xc0>)
 800d864:	4824      	ldr	r0, [pc, #144]	@ (800d8f8 <vTaskStartScheduler+0xc4>)
 800d866:	f7ff fdf1 	bl	800d44c <xTaskCreateStatic>
 800d86a:	4603      	mov	r3, r0
 800d86c:	4a23      	ldr	r2, [pc, #140]	@ (800d8fc <vTaskStartScheduler+0xc8>)
 800d86e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d870:	4b22      	ldr	r3, [pc, #136]	@ (800d8fc <vTaskStartScheduler+0xc8>)
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d002      	beq.n	800d87e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d878:	2301      	movs	r3, #1
 800d87a:	617b      	str	r3, [r7, #20]
 800d87c:	e001      	b.n	800d882 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d87e:	2300      	movs	r3, #0
 800d880:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d882:	697b      	ldr	r3, [r7, #20]
 800d884:	2b01      	cmp	r3, #1
 800d886:	d102      	bne.n	800d88e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d888:	f000 fed2 	bl	800e630 <xTimerCreateTimerTask>
 800d88c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d88e:	697b      	ldr	r3, [r7, #20]
 800d890:	2b01      	cmp	r3, #1
 800d892:	d11b      	bne.n	800d8cc <vTaskStartScheduler+0x98>
	__asm volatile
 800d894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d898:	f383 8811 	msr	BASEPRI, r3
 800d89c:	f3bf 8f6f 	isb	sy
 800d8a0:	f3bf 8f4f 	dsb	sy
 800d8a4:	613b      	str	r3, [r7, #16]
}
 800d8a6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d8a8:	4b15      	ldr	r3, [pc, #84]	@ (800d900 <vTaskStartScheduler+0xcc>)
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	3354      	adds	r3, #84	@ 0x54
 800d8ae:	4a15      	ldr	r2, [pc, #84]	@ (800d904 <vTaskStartScheduler+0xd0>)
 800d8b0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d8b2:	4b15      	ldr	r3, [pc, #84]	@ (800d908 <vTaskStartScheduler+0xd4>)
 800d8b4:	f04f 32ff 	mov.w	r2, #4294967295
 800d8b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d8ba:	4b14      	ldr	r3, [pc, #80]	@ (800d90c <vTaskStartScheduler+0xd8>)
 800d8bc:	2201      	movs	r2, #1
 800d8be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d8c0:	4b13      	ldr	r3, [pc, #76]	@ (800d910 <vTaskStartScheduler+0xdc>)
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d8c6:	f001 fa9b 	bl	800ee00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d8ca:	e00f      	b.n	800d8ec <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d8cc:	697b      	ldr	r3, [r7, #20]
 800d8ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8d2:	d10b      	bne.n	800d8ec <vTaskStartScheduler+0xb8>
	__asm volatile
 800d8d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8d8:	f383 8811 	msr	BASEPRI, r3
 800d8dc:	f3bf 8f6f 	isb	sy
 800d8e0:	f3bf 8f4f 	dsb	sy
 800d8e4:	60fb      	str	r3, [r7, #12]
}
 800d8e6:	bf00      	nop
 800d8e8:	bf00      	nop
 800d8ea:	e7fd      	b.n	800d8e8 <vTaskStartScheduler+0xb4>
}
 800d8ec:	bf00      	nop
 800d8ee:	3718      	adds	r7, #24
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	bd80      	pop	{r7, pc}
 800d8f4:	080140c8 	.word	0x080140c8
 800d8f8:	0800e009 	.word	0x0800e009
 800d8fc:	240010c4 	.word	0x240010c4
 800d900:	24000bcc 	.word	0x24000bcc
 800d904:	24000020 	.word	0x24000020
 800d908:	240010c0 	.word	0x240010c0
 800d90c:	240010ac 	.word	0x240010ac
 800d910:	240010a4 	.word	0x240010a4

0800d914 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d914:	b480      	push	{r7}
 800d916:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d918:	4b04      	ldr	r3, [pc, #16]	@ (800d92c <vTaskSuspendAll+0x18>)
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	3301      	adds	r3, #1
 800d91e:	4a03      	ldr	r2, [pc, #12]	@ (800d92c <vTaskSuspendAll+0x18>)
 800d920:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d922:	bf00      	nop
 800d924:	46bd      	mov	sp, r7
 800d926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92a:	4770      	bx	lr
 800d92c:	240010c8 	.word	0x240010c8

0800d930 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 800d930:	b480      	push	{r7}
 800d932:	b083      	sub	sp, #12
 800d934:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800d936:	2300      	movs	r3, #0
 800d938:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800d93a:	4b14      	ldr	r3, [pc, #80]	@ (800d98c <prvGetExpectedIdleTime+0x5c>)
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d001      	beq.n	800d946 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800d942:	2301      	movs	r3, #1
 800d944:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800d946:	4b12      	ldr	r3, [pc, #72]	@ (800d990 <prvGetExpectedIdleTime+0x60>)
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d002      	beq.n	800d956 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 800d950:	2300      	movs	r3, #0
 800d952:	607b      	str	r3, [r7, #4]
 800d954:	e012      	b.n	800d97c <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800d956:	4b0f      	ldr	r3, [pc, #60]	@ (800d994 <prvGetExpectedIdleTime+0x64>)
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	2b01      	cmp	r3, #1
 800d95c:	d902      	bls.n	800d964 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800d95e:	2300      	movs	r3, #0
 800d960:	607b      	str	r3, [r7, #4]
 800d962:	e00b      	b.n	800d97c <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d002      	beq.n	800d970 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800d96a:	2300      	movs	r3, #0
 800d96c:	607b      	str	r3, [r7, #4]
 800d96e:	e005      	b.n	800d97c <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800d970:	4b09      	ldr	r3, [pc, #36]	@ (800d998 <prvGetExpectedIdleTime+0x68>)
 800d972:	681a      	ldr	r2, [r3, #0]
 800d974:	4b09      	ldr	r3, [pc, #36]	@ (800d99c <prvGetExpectedIdleTime+0x6c>)
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	1ad3      	subs	r3, r2, r3
 800d97a:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 800d97c:	687b      	ldr	r3, [r7, #4]
	}
 800d97e:	4618      	mov	r0, r3
 800d980:	370c      	adds	r7, #12
 800d982:	46bd      	mov	sp, r7
 800d984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d988:	4770      	bx	lr
 800d98a:	bf00      	nop
 800d98c:	240010a8 	.word	0x240010a8
 800d990:	24000bcc 	.word	0x24000bcc
 800d994:	24000bd0 	.word	0x24000bd0
 800d998:	240010c0 	.word	0x240010c0
 800d99c:	240010a4 	.word	0x240010a4

0800d9a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b084      	sub	sp, #16
 800d9a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d9ae:	4b42      	ldr	r3, [pc, #264]	@ (800dab8 <xTaskResumeAll+0x118>)
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d10b      	bne.n	800d9ce <xTaskResumeAll+0x2e>
	__asm volatile
 800d9b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9ba:	f383 8811 	msr	BASEPRI, r3
 800d9be:	f3bf 8f6f 	isb	sy
 800d9c2:	f3bf 8f4f 	dsb	sy
 800d9c6:	603b      	str	r3, [r7, #0]
}
 800d9c8:	bf00      	nop
 800d9ca:	bf00      	nop
 800d9cc:	e7fd      	b.n	800d9ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d9ce:	f001 fabb 	bl	800ef48 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d9d2:	4b39      	ldr	r3, [pc, #228]	@ (800dab8 <xTaskResumeAll+0x118>)
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	3b01      	subs	r3, #1
 800d9d8:	4a37      	ldr	r2, [pc, #220]	@ (800dab8 <xTaskResumeAll+0x118>)
 800d9da:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d9dc:	4b36      	ldr	r3, [pc, #216]	@ (800dab8 <xTaskResumeAll+0x118>)
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d162      	bne.n	800daaa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d9e4:	4b35      	ldr	r3, [pc, #212]	@ (800dabc <xTaskResumeAll+0x11c>)
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d05e      	beq.n	800daaa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d9ec:	e02f      	b.n	800da4e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d9ee:	4b34      	ldr	r3, [pc, #208]	@ (800dac0 <xTaskResumeAll+0x120>)
 800d9f0:	68db      	ldr	r3, [r3, #12]
 800d9f2:	68db      	ldr	r3, [r3, #12]
 800d9f4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	3318      	adds	r3, #24
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	f7fe fd6c 	bl	800c4d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	3304      	adds	r3, #4
 800da04:	4618      	mov	r0, r3
 800da06:	f7fe fd67 	bl	800c4d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da0e:	4b2d      	ldr	r3, [pc, #180]	@ (800dac4 <xTaskResumeAll+0x124>)
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	429a      	cmp	r2, r3
 800da14:	d903      	bls.n	800da1e <xTaskResumeAll+0x7e>
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da1a:	4a2a      	ldr	r2, [pc, #168]	@ (800dac4 <xTaskResumeAll+0x124>)
 800da1c:	6013      	str	r3, [r2, #0]
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da22:	4613      	mov	r3, r2
 800da24:	009b      	lsls	r3, r3, #2
 800da26:	4413      	add	r3, r2
 800da28:	009b      	lsls	r3, r3, #2
 800da2a:	4a27      	ldr	r2, [pc, #156]	@ (800dac8 <xTaskResumeAll+0x128>)
 800da2c:	441a      	add	r2, r3
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	3304      	adds	r3, #4
 800da32:	4619      	mov	r1, r3
 800da34:	4610      	mov	r0, r2
 800da36:	f7fe fcf2 	bl	800c41e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da3e:	4b23      	ldr	r3, [pc, #140]	@ (800dacc <xTaskResumeAll+0x12c>)
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da44:	429a      	cmp	r2, r3
 800da46:	d302      	bcc.n	800da4e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800da48:	4b21      	ldr	r3, [pc, #132]	@ (800dad0 <xTaskResumeAll+0x130>)
 800da4a:	2201      	movs	r2, #1
 800da4c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800da4e:	4b1c      	ldr	r3, [pc, #112]	@ (800dac0 <xTaskResumeAll+0x120>)
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d1cb      	bne.n	800d9ee <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d001      	beq.n	800da60 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800da5c:	f000 fbe6 	bl	800e22c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800da60:	4b1c      	ldr	r3, [pc, #112]	@ (800dad4 <xTaskResumeAll+0x134>)
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d010      	beq.n	800da8e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800da6c:	f000 f86e 	bl	800db4c <xTaskIncrementTick>
 800da70:	4603      	mov	r3, r0
 800da72:	2b00      	cmp	r3, #0
 800da74:	d002      	beq.n	800da7c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800da76:	4b16      	ldr	r3, [pc, #88]	@ (800dad0 <xTaskResumeAll+0x130>)
 800da78:	2201      	movs	r2, #1
 800da7a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	3b01      	subs	r3, #1
 800da80:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d1f1      	bne.n	800da6c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800da88:	4b12      	ldr	r3, [pc, #72]	@ (800dad4 <xTaskResumeAll+0x134>)
 800da8a:	2200      	movs	r2, #0
 800da8c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800da8e:	4b10      	ldr	r3, [pc, #64]	@ (800dad0 <xTaskResumeAll+0x130>)
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d009      	beq.n	800daaa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800da96:	2301      	movs	r3, #1
 800da98:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800da9a:	4b0f      	ldr	r3, [pc, #60]	@ (800dad8 <xTaskResumeAll+0x138>)
 800da9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800daa0:	601a      	str	r2, [r3, #0]
 800daa2:	f3bf 8f4f 	dsb	sy
 800daa6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800daaa:	f001 fa7f 	bl	800efac <vPortExitCritical>

	return xAlreadyYielded;
 800daae:	68bb      	ldr	r3, [r7, #8]
}
 800dab0:	4618      	mov	r0, r3
 800dab2:	3710      	adds	r7, #16
 800dab4:	46bd      	mov	sp, r7
 800dab6:	bd80      	pop	{r7, pc}
 800dab8:	240010c8 	.word	0x240010c8
 800dabc:	240010a0 	.word	0x240010a0
 800dac0:	24001060 	.word	0x24001060
 800dac4:	240010a8 	.word	0x240010a8
 800dac8:	24000bd0 	.word	0x24000bd0
 800dacc:	24000bcc 	.word	0x24000bcc
 800dad0:	240010b4 	.word	0x240010b4
 800dad4:	240010b0 	.word	0x240010b0
 800dad8:	e000ed04 	.word	0xe000ed04

0800dadc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800dadc:	b480      	push	{r7}
 800dade:	b083      	sub	sp, #12
 800dae0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800dae2:	4b05      	ldr	r3, [pc, #20]	@ (800daf8 <xTaskGetTickCount+0x1c>)
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800dae8:	687b      	ldr	r3, [r7, #4]
}
 800daea:	4618      	mov	r0, r3
 800daec:	370c      	adds	r7, #12
 800daee:	46bd      	mov	sp, r7
 800daf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf4:	4770      	bx	lr
 800daf6:	bf00      	nop
 800daf8:	240010a4 	.word	0x240010a4

0800dafc <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 800dafc:	b480      	push	{r7}
 800dafe:	b085      	sub	sp, #20
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 800db04:	4b0f      	ldr	r3, [pc, #60]	@ (800db44 <vTaskStepTick+0x48>)
 800db06:	681a      	ldr	r2, [r3, #0]
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	441a      	add	r2, r3
 800db0c:	4b0e      	ldr	r3, [pc, #56]	@ (800db48 <vTaskStepTick+0x4c>)
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	429a      	cmp	r2, r3
 800db12:	d90b      	bls.n	800db2c <vTaskStepTick+0x30>
	__asm volatile
 800db14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db18:	f383 8811 	msr	BASEPRI, r3
 800db1c:	f3bf 8f6f 	isb	sy
 800db20:	f3bf 8f4f 	dsb	sy
 800db24:	60fb      	str	r3, [r7, #12]
}
 800db26:	bf00      	nop
 800db28:	bf00      	nop
 800db2a:	e7fd      	b.n	800db28 <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 800db2c:	4b05      	ldr	r3, [pc, #20]	@ (800db44 <vTaskStepTick+0x48>)
 800db2e:	681a      	ldr	r2, [r3, #0]
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	4413      	add	r3, r2
 800db34:	4a03      	ldr	r2, [pc, #12]	@ (800db44 <vTaskStepTick+0x48>)
 800db36:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 800db38:	bf00      	nop
 800db3a:	3714      	adds	r7, #20
 800db3c:	46bd      	mov	sp, r7
 800db3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db42:	4770      	bx	lr
 800db44:	240010a4 	.word	0x240010a4
 800db48:	240010c0 	.word	0x240010c0

0800db4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b086      	sub	sp, #24
 800db50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800db52:	2300      	movs	r3, #0
 800db54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db56:	4b4f      	ldr	r3, [pc, #316]	@ (800dc94 <xTaskIncrementTick+0x148>)
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	f040 8090 	bne.w	800dc80 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800db60:	4b4d      	ldr	r3, [pc, #308]	@ (800dc98 <xTaskIncrementTick+0x14c>)
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	3301      	adds	r3, #1
 800db66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800db68:	4a4b      	ldr	r2, [pc, #300]	@ (800dc98 <xTaskIncrementTick+0x14c>)
 800db6a:	693b      	ldr	r3, [r7, #16]
 800db6c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800db6e:	693b      	ldr	r3, [r7, #16]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d121      	bne.n	800dbb8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800db74:	4b49      	ldr	r3, [pc, #292]	@ (800dc9c <xTaskIncrementTick+0x150>)
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d00b      	beq.n	800db96 <xTaskIncrementTick+0x4a>
	__asm volatile
 800db7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db82:	f383 8811 	msr	BASEPRI, r3
 800db86:	f3bf 8f6f 	isb	sy
 800db8a:	f3bf 8f4f 	dsb	sy
 800db8e:	603b      	str	r3, [r7, #0]
}
 800db90:	bf00      	nop
 800db92:	bf00      	nop
 800db94:	e7fd      	b.n	800db92 <xTaskIncrementTick+0x46>
 800db96:	4b41      	ldr	r3, [pc, #260]	@ (800dc9c <xTaskIncrementTick+0x150>)
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	60fb      	str	r3, [r7, #12]
 800db9c:	4b40      	ldr	r3, [pc, #256]	@ (800dca0 <xTaskIncrementTick+0x154>)
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	4a3e      	ldr	r2, [pc, #248]	@ (800dc9c <xTaskIncrementTick+0x150>)
 800dba2:	6013      	str	r3, [r2, #0]
 800dba4:	4a3e      	ldr	r2, [pc, #248]	@ (800dca0 <xTaskIncrementTick+0x154>)
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	6013      	str	r3, [r2, #0]
 800dbaa:	4b3e      	ldr	r3, [pc, #248]	@ (800dca4 <xTaskIncrementTick+0x158>)
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	3301      	adds	r3, #1
 800dbb0:	4a3c      	ldr	r2, [pc, #240]	@ (800dca4 <xTaskIncrementTick+0x158>)
 800dbb2:	6013      	str	r3, [r2, #0]
 800dbb4:	f000 fb3a 	bl	800e22c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dbb8:	4b3b      	ldr	r3, [pc, #236]	@ (800dca8 <xTaskIncrementTick+0x15c>)
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	693a      	ldr	r2, [r7, #16]
 800dbbe:	429a      	cmp	r2, r3
 800dbc0:	d349      	bcc.n	800dc56 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dbc2:	4b36      	ldr	r3, [pc, #216]	@ (800dc9c <xTaskIncrementTick+0x150>)
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d104      	bne.n	800dbd6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dbcc:	4b36      	ldr	r3, [pc, #216]	@ (800dca8 <xTaskIncrementTick+0x15c>)
 800dbce:	f04f 32ff 	mov.w	r2, #4294967295
 800dbd2:	601a      	str	r2, [r3, #0]
					break;
 800dbd4:	e03f      	b.n	800dc56 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dbd6:	4b31      	ldr	r3, [pc, #196]	@ (800dc9c <xTaskIncrementTick+0x150>)
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	68db      	ldr	r3, [r3, #12]
 800dbdc:	68db      	ldr	r3, [r3, #12]
 800dbde:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dbe0:	68bb      	ldr	r3, [r7, #8]
 800dbe2:	685b      	ldr	r3, [r3, #4]
 800dbe4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dbe6:	693a      	ldr	r2, [r7, #16]
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	429a      	cmp	r2, r3
 800dbec:	d203      	bcs.n	800dbf6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dbee:	4a2e      	ldr	r2, [pc, #184]	@ (800dca8 <xTaskIncrementTick+0x15c>)
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dbf4:	e02f      	b.n	800dc56 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dbf6:	68bb      	ldr	r3, [r7, #8]
 800dbf8:	3304      	adds	r3, #4
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	f7fe fc6c 	bl	800c4d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dc00:	68bb      	ldr	r3, [r7, #8]
 800dc02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d004      	beq.n	800dc12 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dc08:	68bb      	ldr	r3, [r7, #8]
 800dc0a:	3318      	adds	r3, #24
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	f7fe fc63 	bl	800c4d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dc12:	68bb      	ldr	r3, [r7, #8]
 800dc14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc16:	4b25      	ldr	r3, [pc, #148]	@ (800dcac <xTaskIncrementTick+0x160>)
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	429a      	cmp	r2, r3
 800dc1c:	d903      	bls.n	800dc26 <xTaskIncrementTick+0xda>
 800dc1e:	68bb      	ldr	r3, [r7, #8]
 800dc20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc22:	4a22      	ldr	r2, [pc, #136]	@ (800dcac <xTaskIncrementTick+0x160>)
 800dc24:	6013      	str	r3, [r2, #0]
 800dc26:	68bb      	ldr	r3, [r7, #8]
 800dc28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc2a:	4613      	mov	r3, r2
 800dc2c:	009b      	lsls	r3, r3, #2
 800dc2e:	4413      	add	r3, r2
 800dc30:	009b      	lsls	r3, r3, #2
 800dc32:	4a1f      	ldr	r2, [pc, #124]	@ (800dcb0 <xTaskIncrementTick+0x164>)
 800dc34:	441a      	add	r2, r3
 800dc36:	68bb      	ldr	r3, [r7, #8]
 800dc38:	3304      	adds	r3, #4
 800dc3a:	4619      	mov	r1, r3
 800dc3c:	4610      	mov	r0, r2
 800dc3e:	f7fe fbee 	bl	800c41e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dc42:	68bb      	ldr	r3, [r7, #8]
 800dc44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc46:	4b1b      	ldr	r3, [pc, #108]	@ (800dcb4 <xTaskIncrementTick+0x168>)
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc4c:	429a      	cmp	r2, r3
 800dc4e:	d3b8      	bcc.n	800dbc2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800dc50:	2301      	movs	r3, #1
 800dc52:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dc54:	e7b5      	b.n	800dbc2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dc56:	4b17      	ldr	r3, [pc, #92]	@ (800dcb4 <xTaskIncrementTick+0x168>)
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc5c:	4914      	ldr	r1, [pc, #80]	@ (800dcb0 <xTaskIncrementTick+0x164>)
 800dc5e:	4613      	mov	r3, r2
 800dc60:	009b      	lsls	r3, r3, #2
 800dc62:	4413      	add	r3, r2
 800dc64:	009b      	lsls	r3, r3, #2
 800dc66:	440b      	add	r3, r1
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	2b01      	cmp	r3, #1
 800dc6c:	d901      	bls.n	800dc72 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800dc6e:	2301      	movs	r3, #1
 800dc70:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800dc72:	4b11      	ldr	r3, [pc, #68]	@ (800dcb8 <xTaskIncrementTick+0x16c>)
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d007      	beq.n	800dc8a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800dc7a:	2301      	movs	r3, #1
 800dc7c:	617b      	str	r3, [r7, #20]
 800dc7e:	e004      	b.n	800dc8a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800dc80:	4b0e      	ldr	r3, [pc, #56]	@ (800dcbc <xTaskIncrementTick+0x170>)
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	3301      	adds	r3, #1
 800dc86:	4a0d      	ldr	r2, [pc, #52]	@ (800dcbc <xTaskIncrementTick+0x170>)
 800dc88:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800dc8a:	697b      	ldr	r3, [r7, #20]
}
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	3718      	adds	r7, #24
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bd80      	pop	{r7, pc}
 800dc94:	240010c8 	.word	0x240010c8
 800dc98:	240010a4 	.word	0x240010a4
 800dc9c:	24001058 	.word	0x24001058
 800dca0:	2400105c 	.word	0x2400105c
 800dca4:	240010b8 	.word	0x240010b8
 800dca8:	240010c0 	.word	0x240010c0
 800dcac:	240010a8 	.word	0x240010a8
 800dcb0:	24000bd0 	.word	0x24000bd0
 800dcb4:	24000bcc 	.word	0x24000bcc
 800dcb8:	240010b4 	.word	0x240010b4
 800dcbc:	240010b0 	.word	0x240010b0

0800dcc0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dcc0:	b480      	push	{r7}
 800dcc2:	b085      	sub	sp, #20
 800dcc4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dcc6:	4b2b      	ldr	r3, [pc, #172]	@ (800dd74 <vTaskSwitchContext+0xb4>)
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d003      	beq.n	800dcd6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dcce:	4b2a      	ldr	r3, [pc, #168]	@ (800dd78 <vTaskSwitchContext+0xb8>)
 800dcd0:	2201      	movs	r2, #1
 800dcd2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dcd4:	e047      	b.n	800dd66 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800dcd6:	4b28      	ldr	r3, [pc, #160]	@ (800dd78 <vTaskSwitchContext+0xb8>)
 800dcd8:	2200      	movs	r2, #0
 800dcda:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dcdc:	4b27      	ldr	r3, [pc, #156]	@ (800dd7c <vTaskSwitchContext+0xbc>)
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	60fb      	str	r3, [r7, #12]
 800dce2:	e011      	b.n	800dd08 <vTaskSwitchContext+0x48>
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d10b      	bne.n	800dd02 <vTaskSwitchContext+0x42>
	__asm volatile
 800dcea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcee:	f383 8811 	msr	BASEPRI, r3
 800dcf2:	f3bf 8f6f 	isb	sy
 800dcf6:	f3bf 8f4f 	dsb	sy
 800dcfa:	607b      	str	r3, [r7, #4]
}
 800dcfc:	bf00      	nop
 800dcfe:	bf00      	nop
 800dd00:	e7fd      	b.n	800dcfe <vTaskSwitchContext+0x3e>
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	3b01      	subs	r3, #1
 800dd06:	60fb      	str	r3, [r7, #12]
 800dd08:	491d      	ldr	r1, [pc, #116]	@ (800dd80 <vTaskSwitchContext+0xc0>)
 800dd0a:	68fa      	ldr	r2, [r7, #12]
 800dd0c:	4613      	mov	r3, r2
 800dd0e:	009b      	lsls	r3, r3, #2
 800dd10:	4413      	add	r3, r2
 800dd12:	009b      	lsls	r3, r3, #2
 800dd14:	440b      	add	r3, r1
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d0e3      	beq.n	800dce4 <vTaskSwitchContext+0x24>
 800dd1c:	68fa      	ldr	r2, [r7, #12]
 800dd1e:	4613      	mov	r3, r2
 800dd20:	009b      	lsls	r3, r3, #2
 800dd22:	4413      	add	r3, r2
 800dd24:	009b      	lsls	r3, r3, #2
 800dd26:	4a16      	ldr	r2, [pc, #88]	@ (800dd80 <vTaskSwitchContext+0xc0>)
 800dd28:	4413      	add	r3, r2
 800dd2a:	60bb      	str	r3, [r7, #8]
 800dd2c:	68bb      	ldr	r3, [r7, #8]
 800dd2e:	685b      	ldr	r3, [r3, #4]
 800dd30:	685a      	ldr	r2, [r3, #4]
 800dd32:	68bb      	ldr	r3, [r7, #8]
 800dd34:	605a      	str	r2, [r3, #4]
 800dd36:	68bb      	ldr	r3, [r7, #8]
 800dd38:	685a      	ldr	r2, [r3, #4]
 800dd3a:	68bb      	ldr	r3, [r7, #8]
 800dd3c:	3308      	adds	r3, #8
 800dd3e:	429a      	cmp	r2, r3
 800dd40:	d104      	bne.n	800dd4c <vTaskSwitchContext+0x8c>
 800dd42:	68bb      	ldr	r3, [r7, #8]
 800dd44:	685b      	ldr	r3, [r3, #4]
 800dd46:	685a      	ldr	r2, [r3, #4]
 800dd48:	68bb      	ldr	r3, [r7, #8]
 800dd4a:	605a      	str	r2, [r3, #4]
 800dd4c:	68bb      	ldr	r3, [r7, #8]
 800dd4e:	685b      	ldr	r3, [r3, #4]
 800dd50:	68db      	ldr	r3, [r3, #12]
 800dd52:	4a0c      	ldr	r2, [pc, #48]	@ (800dd84 <vTaskSwitchContext+0xc4>)
 800dd54:	6013      	str	r3, [r2, #0]
 800dd56:	4a09      	ldr	r2, [pc, #36]	@ (800dd7c <vTaskSwitchContext+0xbc>)
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800dd5c:	4b09      	ldr	r3, [pc, #36]	@ (800dd84 <vTaskSwitchContext+0xc4>)
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	3354      	adds	r3, #84	@ 0x54
 800dd62:	4a09      	ldr	r2, [pc, #36]	@ (800dd88 <vTaskSwitchContext+0xc8>)
 800dd64:	6013      	str	r3, [r2, #0]
}
 800dd66:	bf00      	nop
 800dd68:	3714      	adds	r7, #20
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd70:	4770      	bx	lr
 800dd72:	bf00      	nop
 800dd74:	240010c8 	.word	0x240010c8
 800dd78:	240010b4 	.word	0x240010b4
 800dd7c:	240010a8 	.word	0x240010a8
 800dd80:	24000bd0 	.word	0x24000bd0
 800dd84:	24000bcc 	.word	0x24000bcc
 800dd88:	24000020 	.word	0x24000020

0800dd8c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b084      	sub	sp, #16
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]
 800dd94:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d10b      	bne.n	800ddb4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800dd9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dda0:	f383 8811 	msr	BASEPRI, r3
 800dda4:	f3bf 8f6f 	isb	sy
 800dda8:	f3bf 8f4f 	dsb	sy
 800ddac:	60fb      	str	r3, [r7, #12]
}
 800ddae:	bf00      	nop
 800ddb0:	bf00      	nop
 800ddb2:	e7fd      	b.n	800ddb0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ddb4:	4b07      	ldr	r3, [pc, #28]	@ (800ddd4 <vTaskPlaceOnEventList+0x48>)
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	3318      	adds	r3, #24
 800ddba:	4619      	mov	r1, r3
 800ddbc:	6878      	ldr	r0, [r7, #4]
 800ddbe:	f7fe fb52 	bl	800c466 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ddc2:	2101      	movs	r1, #1
 800ddc4:	6838      	ldr	r0, [r7, #0]
 800ddc6:	f000 fbdf 	bl	800e588 <prvAddCurrentTaskToDelayedList>
}
 800ddca:	bf00      	nop
 800ddcc:	3710      	adds	r7, #16
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	bd80      	pop	{r7, pc}
 800ddd2:	bf00      	nop
 800ddd4:	24000bcc 	.word	0x24000bcc

0800ddd8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b086      	sub	sp, #24
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	60f8      	str	r0, [r7, #12]
 800dde0:	60b9      	str	r1, [r7, #8]
 800dde2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d10b      	bne.n	800de02 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800ddea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddee:	f383 8811 	msr	BASEPRI, r3
 800ddf2:	f3bf 8f6f 	isb	sy
 800ddf6:	f3bf 8f4f 	dsb	sy
 800ddfa:	617b      	str	r3, [r7, #20]
}
 800ddfc:	bf00      	nop
 800ddfe:	bf00      	nop
 800de00:	e7fd      	b.n	800ddfe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800de02:	4b0a      	ldr	r3, [pc, #40]	@ (800de2c <vTaskPlaceOnEventListRestricted+0x54>)
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	3318      	adds	r3, #24
 800de08:	4619      	mov	r1, r3
 800de0a:	68f8      	ldr	r0, [r7, #12]
 800de0c:	f7fe fb07 	bl	800c41e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d002      	beq.n	800de1c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800de16:	f04f 33ff 	mov.w	r3, #4294967295
 800de1a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800de1c:	6879      	ldr	r1, [r7, #4]
 800de1e:	68b8      	ldr	r0, [r7, #8]
 800de20:	f000 fbb2 	bl	800e588 <prvAddCurrentTaskToDelayedList>
	}
 800de24:	bf00      	nop
 800de26:	3718      	adds	r7, #24
 800de28:	46bd      	mov	sp, r7
 800de2a:	bd80      	pop	{r7, pc}
 800de2c:	24000bcc 	.word	0x24000bcc

0800de30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b086      	sub	sp, #24
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	68db      	ldr	r3, [r3, #12]
 800de3c:	68db      	ldr	r3, [r3, #12]
 800de3e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800de40:	693b      	ldr	r3, [r7, #16]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d10b      	bne.n	800de5e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800de46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de4a:	f383 8811 	msr	BASEPRI, r3
 800de4e:	f3bf 8f6f 	isb	sy
 800de52:	f3bf 8f4f 	dsb	sy
 800de56:	60fb      	str	r3, [r7, #12]
}
 800de58:	bf00      	nop
 800de5a:	bf00      	nop
 800de5c:	e7fd      	b.n	800de5a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800de5e:	693b      	ldr	r3, [r7, #16]
 800de60:	3318      	adds	r3, #24
 800de62:	4618      	mov	r0, r3
 800de64:	f7fe fb38 	bl	800c4d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de68:	4b1e      	ldr	r3, [pc, #120]	@ (800dee4 <xTaskRemoveFromEventList+0xb4>)
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d11f      	bne.n	800deb0 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800de70:	693b      	ldr	r3, [r7, #16]
 800de72:	3304      	adds	r3, #4
 800de74:	4618      	mov	r0, r3
 800de76:	f7fe fb2f 	bl	800c4d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800de7a:	693b      	ldr	r3, [r7, #16]
 800de7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de7e:	4b1a      	ldr	r3, [pc, #104]	@ (800dee8 <xTaskRemoveFromEventList+0xb8>)
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	429a      	cmp	r2, r3
 800de84:	d903      	bls.n	800de8e <xTaskRemoveFromEventList+0x5e>
 800de86:	693b      	ldr	r3, [r7, #16]
 800de88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de8a:	4a17      	ldr	r2, [pc, #92]	@ (800dee8 <xTaskRemoveFromEventList+0xb8>)
 800de8c:	6013      	str	r3, [r2, #0]
 800de8e:	693b      	ldr	r3, [r7, #16]
 800de90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de92:	4613      	mov	r3, r2
 800de94:	009b      	lsls	r3, r3, #2
 800de96:	4413      	add	r3, r2
 800de98:	009b      	lsls	r3, r3, #2
 800de9a:	4a14      	ldr	r2, [pc, #80]	@ (800deec <xTaskRemoveFromEventList+0xbc>)
 800de9c:	441a      	add	r2, r3
 800de9e:	693b      	ldr	r3, [r7, #16]
 800dea0:	3304      	adds	r3, #4
 800dea2:	4619      	mov	r1, r3
 800dea4:	4610      	mov	r0, r2
 800dea6:	f7fe faba 	bl	800c41e <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 800deaa:	f000 f9bf 	bl	800e22c <prvResetNextTaskUnblockTime>
 800deae:	e005      	b.n	800debc <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800deb0:	693b      	ldr	r3, [r7, #16]
 800deb2:	3318      	adds	r3, #24
 800deb4:	4619      	mov	r1, r3
 800deb6:	480e      	ldr	r0, [pc, #56]	@ (800def0 <xTaskRemoveFromEventList+0xc0>)
 800deb8:	f7fe fab1 	bl	800c41e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800debc:	693b      	ldr	r3, [r7, #16]
 800debe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dec0:	4b0c      	ldr	r3, [pc, #48]	@ (800def4 <xTaskRemoveFromEventList+0xc4>)
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dec6:	429a      	cmp	r2, r3
 800dec8:	d905      	bls.n	800ded6 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800deca:	2301      	movs	r3, #1
 800decc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800dece:	4b0a      	ldr	r3, [pc, #40]	@ (800def8 <xTaskRemoveFromEventList+0xc8>)
 800ded0:	2201      	movs	r2, #1
 800ded2:	601a      	str	r2, [r3, #0]
 800ded4:	e001      	b.n	800deda <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800ded6:	2300      	movs	r3, #0
 800ded8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800deda:	697b      	ldr	r3, [r7, #20]
}
 800dedc:	4618      	mov	r0, r3
 800dede:	3718      	adds	r7, #24
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd80      	pop	{r7, pc}
 800dee4:	240010c8 	.word	0x240010c8
 800dee8:	240010a8 	.word	0x240010a8
 800deec:	24000bd0 	.word	0x24000bd0
 800def0:	24001060 	.word	0x24001060
 800def4:	24000bcc 	.word	0x24000bcc
 800def8:	240010b4 	.word	0x240010b4

0800defc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800defc:	b480      	push	{r7}
 800defe:	b083      	sub	sp, #12
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800df04:	4b06      	ldr	r3, [pc, #24]	@ (800df20 <vTaskInternalSetTimeOutState+0x24>)
 800df06:	681a      	ldr	r2, [r3, #0]
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800df0c:	4b05      	ldr	r3, [pc, #20]	@ (800df24 <vTaskInternalSetTimeOutState+0x28>)
 800df0e:	681a      	ldr	r2, [r3, #0]
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	605a      	str	r2, [r3, #4]
}
 800df14:	bf00      	nop
 800df16:	370c      	adds	r7, #12
 800df18:	46bd      	mov	sp, r7
 800df1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1e:	4770      	bx	lr
 800df20:	240010b8 	.word	0x240010b8
 800df24:	240010a4 	.word	0x240010a4

0800df28 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b088      	sub	sp, #32
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
 800df30:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d10b      	bne.n	800df50 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800df38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df3c:	f383 8811 	msr	BASEPRI, r3
 800df40:	f3bf 8f6f 	isb	sy
 800df44:	f3bf 8f4f 	dsb	sy
 800df48:	613b      	str	r3, [r7, #16]
}
 800df4a:	bf00      	nop
 800df4c:	bf00      	nop
 800df4e:	e7fd      	b.n	800df4c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800df50:	683b      	ldr	r3, [r7, #0]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d10b      	bne.n	800df6e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800df56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df5a:	f383 8811 	msr	BASEPRI, r3
 800df5e:	f3bf 8f6f 	isb	sy
 800df62:	f3bf 8f4f 	dsb	sy
 800df66:	60fb      	str	r3, [r7, #12]
}
 800df68:	bf00      	nop
 800df6a:	bf00      	nop
 800df6c:	e7fd      	b.n	800df6a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800df6e:	f000 ffeb 	bl	800ef48 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800df72:	4b1d      	ldr	r3, [pc, #116]	@ (800dfe8 <xTaskCheckForTimeOut+0xc0>)
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	685b      	ldr	r3, [r3, #4]
 800df7c:	69ba      	ldr	r2, [r7, #24]
 800df7e:	1ad3      	subs	r3, r2, r3
 800df80:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800df82:	683b      	ldr	r3, [r7, #0]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df8a:	d102      	bne.n	800df92 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800df8c:	2300      	movs	r3, #0
 800df8e:	61fb      	str	r3, [r7, #28]
 800df90:	e023      	b.n	800dfda <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	681a      	ldr	r2, [r3, #0]
 800df96:	4b15      	ldr	r3, [pc, #84]	@ (800dfec <xTaskCheckForTimeOut+0xc4>)
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	429a      	cmp	r2, r3
 800df9c:	d007      	beq.n	800dfae <xTaskCheckForTimeOut+0x86>
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	685b      	ldr	r3, [r3, #4]
 800dfa2:	69ba      	ldr	r2, [r7, #24]
 800dfa4:	429a      	cmp	r2, r3
 800dfa6:	d302      	bcc.n	800dfae <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800dfa8:	2301      	movs	r3, #1
 800dfaa:	61fb      	str	r3, [r7, #28]
 800dfac:	e015      	b.n	800dfda <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800dfae:	683b      	ldr	r3, [r7, #0]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	697a      	ldr	r2, [r7, #20]
 800dfb4:	429a      	cmp	r2, r3
 800dfb6:	d20b      	bcs.n	800dfd0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800dfb8:	683b      	ldr	r3, [r7, #0]
 800dfba:	681a      	ldr	r2, [r3, #0]
 800dfbc:	697b      	ldr	r3, [r7, #20]
 800dfbe:	1ad2      	subs	r2, r2, r3
 800dfc0:	683b      	ldr	r3, [r7, #0]
 800dfc2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800dfc4:	6878      	ldr	r0, [r7, #4]
 800dfc6:	f7ff ff99 	bl	800defc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800dfca:	2300      	movs	r3, #0
 800dfcc:	61fb      	str	r3, [r7, #28]
 800dfce:	e004      	b.n	800dfda <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800dfd0:	683b      	ldr	r3, [r7, #0]
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800dfd6:	2301      	movs	r3, #1
 800dfd8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800dfda:	f000 ffe7 	bl	800efac <vPortExitCritical>

	return xReturn;
 800dfde:	69fb      	ldr	r3, [r7, #28]
}
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	3720      	adds	r7, #32
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	bd80      	pop	{r7, pc}
 800dfe8:	240010a4 	.word	0x240010a4
 800dfec:	240010b8 	.word	0x240010b8

0800dff0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800dff0:	b480      	push	{r7}
 800dff2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800dff4:	4b03      	ldr	r3, [pc, #12]	@ (800e004 <vTaskMissedYield+0x14>)
 800dff6:	2201      	movs	r2, #1
 800dff8:	601a      	str	r2, [r3, #0]
}
 800dffa:	bf00      	nop
 800dffc:	46bd      	mov	sp, r7
 800dffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e002:	4770      	bx	lr
 800e004:	240010b4 	.word	0x240010b4

0800e008 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b084      	sub	sp, #16
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e010:	f000 f8a8 	bl	800e164 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e014:	4b18      	ldr	r3, [pc, #96]	@ (800e078 <prvIdleTask+0x70>)
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	2b01      	cmp	r3, #1
 800e01a:	d907      	bls.n	800e02c <prvIdleTask+0x24>
			{
				taskYIELD();
 800e01c:	4b17      	ldr	r3, [pc, #92]	@ (800e07c <prvIdleTask+0x74>)
 800e01e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e022:	601a      	str	r2, [r3, #0]
 800e024:	f3bf 8f4f 	dsb	sy
 800e028:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800e02c:	f7ff fc80 	bl	800d930 <prvGetExpectedIdleTime>
 800e030:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	2b01      	cmp	r3, #1
 800e036:	d9eb      	bls.n	800e010 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 800e038:	f7ff fc6c 	bl	800d914 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800e03c:	4b10      	ldr	r3, [pc, #64]	@ (800e080 <prvIdleTask+0x78>)
 800e03e:	681a      	ldr	r2, [r3, #0]
 800e040:	4b10      	ldr	r3, [pc, #64]	@ (800e084 <prvIdleTask+0x7c>)
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	429a      	cmp	r2, r3
 800e046:	d20b      	bcs.n	800e060 <prvIdleTask+0x58>
	__asm volatile
 800e048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e04c:	f383 8811 	msr	BASEPRI, r3
 800e050:	f3bf 8f6f 	isb	sy
 800e054:	f3bf 8f4f 	dsb	sy
 800e058:	60bb      	str	r3, [r7, #8]
}
 800e05a:	bf00      	nop
 800e05c:	bf00      	nop
 800e05e:	e7fd      	b.n	800e05c <prvIdleTask+0x54>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800e060:	f7ff fc66 	bl	800d930 <prvGetExpectedIdleTime>
 800e064:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	2b01      	cmp	r3, #1
 800e06a:	d902      	bls.n	800e072 <prvIdleTask+0x6a>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800e06c:	68f8      	ldr	r0, [r7, #12]
 800e06e:	f001 f81d 	bl	800f0ac <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 800e072:	f7ff fc95 	bl	800d9a0 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800e076:	e7cb      	b.n	800e010 <prvIdleTask+0x8>
 800e078:	24000bd0 	.word	0x24000bd0
 800e07c:	e000ed04 	.word	0xe000ed04
 800e080:	240010c0 	.word	0x240010c0
 800e084:	240010a4 	.word	0x240010a4

0800e088 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 800e088:	b480      	push	{r7}
 800e08a:	b083      	sub	sp, #12
 800e08c:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 800e08e:	2301      	movs	r3, #1
 800e090:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 800e092:	2301      	movs	r3, #1
 800e094:	71fb      	strb	r3, [r7, #7]

		/* This function must be called from a critical section. */

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 800e096:	4b0f      	ldr	r3, [pc, #60]	@ (800e0d4 <eTaskConfirmSleepModeStatus+0x4c>)
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d002      	beq.n	800e0a4 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800e09e:	2300      	movs	r3, #0
 800e0a0:	71fb      	strb	r3, [r7, #7]
 800e0a2:	e010      	b.n	800e0c6 <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 800e0a4:	4b0c      	ldr	r3, [pc, #48]	@ (800e0d8 <eTaskConfirmSleepModeStatus+0x50>)
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d002      	beq.n	800e0b2 <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	71fb      	strb	r3, [r7, #7]
 800e0b0:	e009      	b.n	800e0c6 <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 800e0b2:	4b0a      	ldr	r3, [pc, #40]	@ (800e0dc <eTaskConfirmSleepModeStatus+0x54>)
 800e0b4:	681a      	ldr	r2, [r3, #0]
 800e0b6:	4b0a      	ldr	r3, [pc, #40]	@ (800e0e0 <eTaskConfirmSleepModeStatus+0x58>)
 800e0b8:	6819      	ldr	r1, [r3, #0]
 800e0ba:	683b      	ldr	r3, [r7, #0]
 800e0bc:	1acb      	subs	r3, r1, r3
 800e0be:	429a      	cmp	r2, r3
 800e0c0:	d101      	bne.n	800e0c6 <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 800e0c2:	2302      	movs	r3, #2
 800e0c4:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 800e0c6:	79fb      	ldrb	r3, [r7, #7]
	}
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	370c      	adds	r7, #12
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d2:	4770      	bx	lr
 800e0d4:	24001060 	.word	0x24001060
 800e0d8:	240010b4 	.word	0x240010b4
 800e0dc:	2400108c 	.word	0x2400108c
 800e0e0:	240010a0 	.word	0x240010a0

0800e0e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b082      	sub	sp, #8
 800e0e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	607b      	str	r3, [r7, #4]
 800e0ee:	e00c      	b.n	800e10a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e0f0:	687a      	ldr	r2, [r7, #4]
 800e0f2:	4613      	mov	r3, r2
 800e0f4:	009b      	lsls	r3, r3, #2
 800e0f6:	4413      	add	r3, r2
 800e0f8:	009b      	lsls	r3, r3, #2
 800e0fa:	4a12      	ldr	r2, [pc, #72]	@ (800e144 <prvInitialiseTaskLists+0x60>)
 800e0fc:	4413      	add	r3, r2
 800e0fe:	4618      	mov	r0, r3
 800e100:	f7fe f960 	bl	800c3c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	3301      	adds	r3, #1
 800e108:	607b      	str	r3, [r7, #4]
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	2b37      	cmp	r3, #55	@ 0x37
 800e10e:	d9ef      	bls.n	800e0f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e110:	480d      	ldr	r0, [pc, #52]	@ (800e148 <prvInitialiseTaskLists+0x64>)
 800e112:	f7fe f957 	bl	800c3c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e116:	480d      	ldr	r0, [pc, #52]	@ (800e14c <prvInitialiseTaskLists+0x68>)
 800e118:	f7fe f954 	bl	800c3c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e11c:	480c      	ldr	r0, [pc, #48]	@ (800e150 <prvInitialiseTaskLists+0x6c>)
 800e11e:	f7fe f951 	bl	800c3c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e122:	480c      	ldr	r0, [pc, #48]	@ (800e154 <prvInitialiseTaskLists+0x70>)
 800e124:	f7fe f94e 	bl	800c3c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e128:	480b      	ldr	r0, [pc, #44]	@ (800e158 <prvInitialiseTaskLists+0x74>)
 800e12a:	f7fe f94b 	bl	800c3c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e12e:	4b0b      	ldr	r3, [pc, #44]	@ (800e15c <prvInitialiseTaskLists+0x78>)
 800e130:	4a05      	ldr	r2, [pc, #20]	@ (800e148 <prvInitialiseTaskLists+0x64>)
 800e132:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e134:	4b0a      	ldr	r3, [pc, #40]	@ (800e160 <prvInitialiseTaskLists+0x7c>)
 800e136:	4a05      	ldr	r2, [pc, #20]	@ (800e14c <prvInitialiseTaskLists+0x68>)
 800e138:	601a      	str	r2, [r3, #0]
}
 800e13a:	bf00      	nop
 800e13c:	3708      	adds	r7, #8
 800e13e:	46bd      	mov	sp, r7
 800e140:	bd80      	pop	{r7, pc}
 800e142:	bf00      	nop
 800e144:	24000bd0 	.word	0x24000bd0
 800e148:	24001030 	.word	0x24001030
 800e14c:	24001044 	.word	0x24001044
 800e150:	24001060 	.word	0x24001060
 800e154:	24001074 	.word	0x24001074
 800e158:	2400108c 	.word	0x2400108c
 800e15c:	24001058 	.word	0x24001058
 800e160:	2400105c 	.word	0x2400105c

0800e164 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b082      	sub	sp, #8
 800e168:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e16a:	e019      	b.n	800e1a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e16c:	f000 feec 	bl	800ef48 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e170:	4b10      	ldr	r3, [pc, #64]	@ (800e1b4 <prvCheckTasksWaitingTermination+0x50>)
 800e172:	68db      	ldr	r3, [r3, #12]
 800e174:	68db      	ldr	r3, [r3, #12]
 800e176:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	3304      	adds	r3, #4
 800e17c:	4618      	mov	r0, r3
 800e17e:	f7fe f9ab 	bl	800c4d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e182:	4b0d      	ldr	r3, [pc, #52]	@ (800e1b8 <prvCheckTasksWaitingTermination+0x54>)
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	3b01      	subs	r3, #1
 800e188:	4a0b      	ldr	r2, [pc, #44]	@ (800e1b8 <prvCheckTasksWaitingTermination+0x54>)
 800e18a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e18c:	4b0b      	ldr	r3, [pc, #44]	@ (800e1bc <prvCheckTasksWaitingTermination+0x58>)
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	3b01      	subs	r3, #1
 800e192:	4a0a      	ldr	r2, [pc, #40]	@ (800e1bc <prvCheckTasksWaitingTermination+0x58>)
 800e194:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e196:	f000 ff09 	bl	800efac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e19a:	6878      	ldr	r0, [r7, #4]
 800e19c:	f000 f810 	bl	800e1c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e1a0:	4b06      	ldr	r3, [pc, #24]	@ (800e1bc <prvCheckTasksWaitingTermination+0x58>)
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d1e1      	bne.n	800e16c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e1a8:	bf00      	nop
 800e1aa:	bf00      	nop
 800e1ac:	3708      	adds	r7, #8
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	bd80      	pop	{r7, pc}
 800e1b2:	bf00      	nop
 800e1b4:	24001074 	.word	0x24001074
 800e1b8:	240010a0 	.word	0x240010a0
 800e1bc:	24001088 	.word	0x24001088

0800e1c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b084      	sub	sp, #16
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	3354      	adds	r3, #84	@ 0x54
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	f002 fc7f 	bl	8010ad0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d108      	bne.n	800e1ee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	f001 f985 	bl	800f4f0 <vPortFree>
				vPortFree( pxTCB );
 800e1e6:	6878      	ldr	r0, [r7, #4]
 800e1e8:	f001 f982 	bl	800f4f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e1ec:	e019      	b.n	800e222 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800e1f4:	2b01      	cmp	r3, #1
 800e1f6:	d103      	bne.n	800e200 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e1f8:	6878      	ldr	r0, [r7, #4]
 800e1fa:	f001 f979 	bl	800f4f0 <vPortFree>
	}
 800e1fe:	e010      	b.n	800e222 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800e206:	2b02      	cmp	r3, #2
 800e208:	d00b      	beq.n	800e222 <prvDeleteTCB+0x62>
	__asm volatile
 800e20a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e20e:	f383 8811 	msr	BASEPRI, r3
 800e212:	f3bf 8f6f 	isb	sy
 800e216:	f3bf 8f4f 	dsb	sy
 800e21a:	60fb      	str	r3, [r7, #12]
}
 800e21c:	bf00      	nop
 800e21e:	bf00      	nop
 800e220:	e7fd      	b.n	800e21e <prvDeleteTCB+0x5e>
	}
 800e222:	bf00      	nop
 800e224:	3710      	adds	r7, #16
 800e226:	46bd      	mov	sp, r7
 800e228:	bd80      	pop	{r7, pc}
	...

0800e22c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e22c:	b480      	push	{r7}
 800e22e:	b083      	sub	sp, #12
 800e230:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e232:	4b0c      	ldr	r3, [pc, #48]	@ (800e264 <prvResetNextTaskUnblockTime+0x38>)
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d104      	bne.n	800e246 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e23c:	4b0a      	ldr	r3, [pc, #40]	@ (800e268 <prvResetNextTaskUnblockTime+0x3c>)
 800e23e:	f04f 32ff 	mov.w	r2, #4294967295
 800e242:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e244:	e008      	b.n	800e258 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e246:	4b07      	ldr	r3, [pc, #28]	@ (800e264 <prvResetNextTaskUnblockTime+0x38>)
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	68db      	ldr	r3, [r3, #12]
 800e24c:	68db      	ldr	r3, [r3, #12]
 800e24e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	685b      	ldr	r3, [r3, #4]
 800e254:	4a04      	ldr	r2, [pc, #16]	@ (800e268 <prvResetNextTaskUnblockTime+0x3c>)
 800e256:	6013      	str	r3, [r2, #0]
}
 800e258:	bf00      	nop
 800e25a:	370c      	adds	r7, #12
 800e25c:	46bd      	mov	sp, r7
 800e25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e262:	4770      	bx	lr
 800e264:	24001058 	.word	0x24001058
 800e268:	240010c0 	.word	0x240010c0

0800e26c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e26c:	b480      	push	{r7}
 800e26e:	b083      	sub	sp, #12
 800e270:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e272:	4b0b      	ldr	r3, [pc, #44]	@ (800e2a0 <xTaskGetSchedulerState+0x34>)
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d102      	bne.n	800e280 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e27a:	2301      	movs	r3, #1
 800e27c:	607b      	str	r3, [r7, #4]
 800e27e:	e008      	b.n	800e292 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e280:	4b08      	ldr	r3, [pc, #32]	@ (800e2a4 <xTaskGetSchedulerState+0x38>)
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d102      	bne.n	800e28e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e288:	2302      	movs	r3, #2
 800e28a:	607b      	str	r3, [r7, #4]
 800e28c:	e001      	b.n	800e292 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e28e:	2300      	movs	r3, #0
 800e290:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e292:	687b      	ldr	r3, [r7, #4]
	}
 800e294:	4618      	mov	r0, r3
 800e296:	370c      	adds	r7, #12
 800e298:	46bd      	mov	sp, r7
 800e29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29e:	4770      	bx	lr
 800e2a0:	240010ac 	.word	0x240010ac
 800e2a4:	240010c8 	.word	0x240010c8

0800e2a8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e2a8:	b580      	push	{r7, lr}
 800e2aa:	b084      	sub	sp, #16
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d051      	beq.n	800e362 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e2be:	68bb      	ldr	r3, [r7, #8]
 800e2c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2c2:	4b2a      	ldr	r3, [pc, #168]	@ (800e36c <xTaskPriorityInherit+0xc4>)
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2c8:	429a      	cmp	r2, r3
 800e2ca:	d241      	bcs.n	800e350 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e2cc:	68bb      	ldr	r3, [r7, #8]
 800e2ce:	699b      	ldr	r3, [r3, #24]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	db06      	blt.n	800e2e2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e2d4:	4b25      	ldr	r3, [pc, #148]	@ (800e36c <xTaskPriorityInherit+0xc4>)
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2da:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e2de:	68bb      	ldr	r3, [r7, #8]
 800e2e0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e2e2:	68bb      	ldr	r3, [r7, #8]
 800e2e4:	6959      	ldr	r1, [r3, #20]
 800e2e6:	68bb      	ldr	r3, [r7, #8]
 800e2e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2ea:	4613      	mov	r3, r2
 800e2ec:	009b      	lsls	r3, r3, #2
 800e2ee:	4413      	add	r3, r2
 800e2f0:	009b      	lsls	r3, r3, #2
 800e2f2:	4a1f      	ldr	r2, [pc, #124]	@ (800e370 <xTaskPriorityInherit+0xc8>)
 800e2f4:	4413      	add	r3, r2
 800e2f6:	4299      	cmp	r1, r3
 800e2f8:	d122      	bne.n	800e340 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e2fa:	68bb      	ldr	r3, [r7, #8]
 800e2fc:	3304      	adds	r3, #4
 800e2fe:	4618      	mov	r0, r3
 800e300:	f7fe f8ea 	bl	800c4d8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e304:	4b19      	ldr	r3, [pc, #100]	@ (800e36c <xTaskPriorityInherit+0xc4>)
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e30a:	68bb      	ldr	r3, [r7, #8]
 800e30c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e30e:	68bb      	ldr	r3, [r7, #8]
 800e310:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e312:	4b18      	ldr	r3, [pc, #96]	@ (800e374 <xTaskPriorityInherit+0xcc>)
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	429a      	cmp	r2, r3
 800e318:	d903      	bls.n	800e322 <xTaskPriorityInherit+0x7a>
 800e31a:	68bb      	ldr	r3, [r7, #8]
 800e31c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e31e:	4a15      	ldr	r2, [pc, #84]	@ (800e374 <xTaskPriorityInherit+0xcc>)
 800e320:	6013      	str	r3, [r2, #0]
 800e322:	68bb      	ldr	r3, [r7, #8]
 800e324:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e326:	4613      	mov	r3, r2
 800e328:	009b      	lsls	r3, r3, #2
 800e32a:	4413      	add	r3, r2
 800e32c:	009b      	lsls	r3, r3, #2
 800e32e:	4a10      	ldr	r2, [pc, #64]	@ (800e370 <xTaskPriorityInherit+0xc8>)
 800e330:	441a      	add	r2, r3
 800e332:	68bb      	ldr	r3, [r7, #8]
 800e334:	3304      	adds	r3, #4
 800e336:	4619      	mov	r1, r3
 800e338:	4610      	mov	r0, r2
 800e33a:	f7fe f870 	bl	800c41e <vListInsertEnd>
 800e33e:	e004      	b.n	800e34a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e340:	4b0a      	ldr	r3, [pc, #40]	@ (800e36c <xTaskPriorityInherit+0xc4>)
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e346:	68bb      	ldr	r3, [r7, #8]
 800e348:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e34a:	2301      	movs	r3, #1
 800e34c:	60fb      	str	r3, [r7, #12]
 800e34e:	e008      	b.n	800e362 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e350:	68bb      	ldr	r3, [r7, #8]
 800e352:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e354:	4b05      	ldr	r3, [pc, #20]	@ (800e36c <xTaskPriorityInherit+0xc4>)
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e35a:	429a      	cmp	r2, r3
 800e35c:	d201      	bcs.n	800e362 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e35e:	2301      	movs	r3, #1
 800e360:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e362:	68fb      	ldr	r3, [r7, #12]
	}
 800e364:	4618      	mov	r0, r3
 800e366:	3710      	adds	r7, #16
 800e368:	46bd      	mov	sp, r7
 800e36a:	bd80      	pop	{r7, pc}
 800e36c:	24000bcc 	.word	0x24000bcc
 800e370:	24000bd0 	.word	0x24000bd0
 800e374:	240010a8 	.word	0x240010a8

0800e378 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e378:	b580      	push	{r7, lr}
 800e37a:	b086      	sub	sp, #24
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e384:	2300      	movs	r3, #0
 800e386:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d058      	beq.n	800e440 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e38e:	4b2f      	ldr	r3, [pc, #188]	@ (800e44c <xTaskPriorityDisinherit+0xd4>)
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	693a      	ldr	r2, [r7, #16]
 800e394:	429a      	cmp	r2, r3
 800e396:	d00b      	beq.n	800e3b0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800e398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e39c:	f383 8811 	msr	BASEPRI, r3
 800e3a0:	f3bf 8f6f 	isb	sy
 800e3a4:	f3bf 8f4f 	dsb	sy
 800e3a8:	60fb      	str	r3, [r7, #12]
}
 800e3aa:	bf00      	nop
 800e3ac:	bf00      	nop
 800e3ae:	e7fd      	b.n	800e3ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e3b0:	693b      	ldr	r3, [r7, #16]
 800e3b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d10b      	bne.n	800e3d0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800e3b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3bc:	f383 8811 	msr	BASEPRI, r3
 800e3c0:	f3bf 8f6f 	isb	sy
 800e3c4:	f3bf 8f4f 	dsb	sy
 800e3c8:	60bb      	str	r3, [r7, #8]
}
 800e3ca:	bf00      	nop
 800e3cc:	bf00      	nop
 800e3ce:	e7fd      	b.n	800e3cc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800e3d0:	693b      	ldr	r3, [r7, #16]
 800e3d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e3d4:	1e5a      	subs	r2, r3, #1
 800e3d6:	693b      	ldr	r3, [r7, #16]
 800e3d8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e3da:	693b      	ldr	r3, [r7, #16]
 800e3dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e3de:	693b      	ldr	r3, [r7, #16]
 800e3e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e3e2:	429a      	cmp	r2, r3
 800e3e4:	d02c      	beq.n	800e440 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e3e6:	693b      	ldr	r3, [r7, #16]
 800e3e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d128      	bne.n	800e440 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e3ee:	693b      	ldr	r3, [r7, #16]
 800e3f0:	3304      	adds	r3, #4
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	f7fe f870 	bl	800c4d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e3f8:	693b      	ldr	r3, [r7, #16]
 800e3fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e3fc:	693b      	ldr	r3, [r7, #16]
 800e3fe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e400:	693b      	ldr	r3, [r7, #16]
 800e402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e404:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e408:	693b      	ldr	r3, [r7, #16]
 800e40a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e40c:	693b      	ldr	r3, [r7, #16]
 800e40e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e410:	4b0f      	ldr	r3, [pc, #60]	@ (800e450 <xTaskPriorityDisinherit+0xd8>)
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	429a      	cmp	r2, r3
 800e416:	d903      	bls.n	800e420 <xTaskPriorityDisinherit+0xa8>
 800e418:	693b      	ldr	r3, [r7, #16]
 800e41a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e41c:	4a0c      	ldr	r2, [pc, #48]	@ (800e450 <xTaskPriorityDisinherit+0xd8>)
 800e41e:	6013      	str	r3, [r2, #0]
 800e420:	693b      	ldr	r3, [r7, #16]
 800e422:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e424:	4613      	mov	r3, r2
 800e426:	009b      	lsls	r3, r3, #2
 800e428:	4413      	add	r3, r2
 800e42a:	009b      	lsls	r3, r3, #2
 800e42c:	4a09      	ldr	r2, [pc, #36]	@ (800e454 <xTaskPriorityDisinherit+0xdc>)
 800e42e:	441a      	add	r2, r3
 800e430:	693b      	ldr	r3, [r7, #16]
 800e432:	3304      	adds	r3, #4
 800e434:	4619      	mov	r1, r3
 800e436:	4610      	mov	r0, r2
 800e438:	f7fd fff1 	bl	800c41e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e43c:	2301      	movs	r3, #1
 800e43e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e440:	697b      	ldr	r3, [r7, #20]
	}
 800e442:	4618      	mov	r0, r3
 800e444:	3718      	adds	r7, #24
 800e446:	46bd      	mov	sp, r7
 800e448:	bd80      	pop	{r7, pc}
 800e44a:	bf00      	nop
 800e44c:	24000bcc 	.word	0x24000bcc
 800e450:	240010a8 	.word	0x240010a8
 800e454:	24000bd0 	.word	0x24000bd0

0800e458 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b088      	sub	sp, #32
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
 800e460:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e466:	2301      	movs	r3, #1
 800e468:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d06c      	beq.n	800e54a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e470:	69bb      	ldr	r3, [r7, #24]
 800e472:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e474:	2b00      	cmp	r3, #0
 800e476:	d10b      	bne.n	800e490 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800e478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e47c:	f383 8811 	msr	BASEPRI, r3
 800e480:	f3bf 8f6f 	isb	sy
 800e484:	f3bf 8f4f 	dsb	sy
 800e488:	60fb      	str	r3, [r7, #12]
}
 800e48a:	bf00      	nop
 800e48c:	bf00      	nop
 800e48e:	e7fd      	b.n	800e48c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e490:	69bb      	ldr	r3, [r7, #24]
 800e492:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e494:	683a      	ldr	r2, [r7, #0]
 800e496:	429a      	cmp	r2, r3
 800e498:	d902      	bls.n	800e4a0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e49a:	683b      	ldr	r3, [r7, #0]
 800e49c:	61fb      	str	r3, [r7, #28]
 800e49e:	e002      	b.n	800e4a6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e4a0:	69bb      	ldr	r3, [r7, #24]
 800e4a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e4a4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e4a6:	69bb      	ldr	r3, [r7, #24]
 800e4a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4aa:	69fa      	ldr	r2, [r7, #28]
 800e4ac:	429a      	cmp	r2, r3
 800e4ae:	d04c      	beq.n	800e54a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e4b0:	69bb      	ldr	r3, [r7, #24]
 800e4b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e4b4:	697a      	ldr	r2, [r7, #20]
 800e4b6:	429a      	cmp	r2, r3
 800e4b8:	d147      	bne.n	800e54a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e4ba:	4b26      	ldr	r3, [pc, #152]	@ (800e554 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	69ba      	ldr	r2, [r7, #24]
 800e4c0:	429a      	cmp	r2, r3
 800e4c2:	d10b      	bne.n	800e4dc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800e4c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4c8:	f383 8811 	msr	BASEPRI, r3
 800e4cc:	f3bf 8f6f 	isb	sy
 800e4d0:	f3bf 8f4f 	dsb	sy
 800e4d4:	60bb      	str	r3, [r7, #8]
}
 800e4d6:	bf00      	nop
 800e4d8:	bf00      	nop
 800e4da:	e7fd      	b.n	800e4d8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e4dc:	69bb      	ldr	r3, [r7, #24]
 800e4de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4e0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e4e2:	69bb      	ldr	r3, [r7, #24]
 800e4e4:	69fa      	ldr	r2, [r7, #28]
 800e4e6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e4e8:	69bb      	ldr	r3, [r7, #24]
 800e4ea:	699b      	ldr	r3, [r3, #24]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	db04      	blt.n	800e4fa <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e4f0:	69fb      	ldr	r3, [r7, #28]
 800e4f2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e4f6:	69bb      	ldr	r3, [r7, #24]
 800e4f8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e4fa:	69bb      	ldr	r3, [r7, #24]
 800e4fc:	6959      	ldr	r1, [r3, #20]
 800e4fe:	693a      	ldr	r2, [r7, #16]
 800e500:	4613      	mov	r3, r2
 800e502:	009b      	lsls	r3, r3, #2
 800e504:	4413      	add	r3, r2
 800e506:	009b      	lsls	r3, r3, #2
 800e508:	4a13      	ldr	r2, [pc, #76]	@ (800e558 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e50a:	4413      	add	r3, r2
 800e50c:	4299      	cmp	r1, r3
 800e50e:	d11c      	bne.n	800e54a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e510:	69bb      	ldr	r3, [r7, #24]
 800e512:	3304      	adds	r3, #4
 800e514:	4618      	mov	r0, r3
 800e516:	f7fd ffdf 	bl	800c4d8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e51a:	69bb      	ldr	r3, [r7, #24]
 800e51c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e51e:	4b0f      	ldr	r3, [pc, #60]	@ (800e55c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	429a      	cmp	r2, r3
 800e524:	d903      	bls.n	800e52e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800e526:	69bb      	ldr	r3, [r7, #24]
 800e528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e52a:	4a0c      	ldr	r2, [pc, #48]	@ (800e55c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800e52c:	6013      	str	r3, [r2, #0]
 800e52e:	69bb      	ldr	r3, [r7, #24]
 800e530:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e532:	4613      	mov	r3, r2
 800e534:	009b      	lsls	r3, r3, #2
 800e536:	4413      	add	r3, r2
 800e538:	009b      	lsls	r3, r3, #2
 800e53a:	4a07      	ldr	r2, [pc, #28]	@ (800e558 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e53c:	441a      	add	r2, r3
 800e53e:	69bb      	ldr	r3, [r7, #24]
 800e540:	3304      	adds	r3, #4
 800e542:	4619      	mov	r1, r3
 800e544:	4610      	mov	r0, r2
 800e546:	f7fd ff6a 	bl	800c41e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e54a:	bf00      	nop
 800e54c:	3720      	adds	r7, #32
 800e54e:	46bd      	mov	sp, r7
 800e550:	bd80      	pop	{r7, pc}
 800e552:	bf00      	nop
 800e554:	24000bcc 	.word	0x24000bcc
 800e558:	24000bd0 	.word	0x24000bd0
 800e55c:	240010a8 	.word	0x240010a8

0800e560 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e560:	b480      	push	{r7}
 800e562:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e564:	4b07      	ldr	r3, [pc, #28]	@ (800e584 <pvTaskIncrementMutexHeldCount+0x24>)
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d004      	beq.n	800e576 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e56c:	4b05      	ldr	r3, [pc, #20]	@ (800e584 <pvTaskIncrementMutexHeldCount+0x24>)
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e572:	3201      	adds	r2, #1
 800e574:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800e576:	4b03      	ldr	r3, [pc, #12]	@ (800e584 <pvTaskIncrementMutexHeldCount+0x24>)
 800e578:	681b      	ldr	r3, [r3, #0]
	}
 800e57a:	4618      	mov	r0, r3
 800e57c:	46bd      	mov	sp, r7
 800e57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e582:	4770      	bx	lr
 800e584:	24000bcc 	.word	0x24000bcc

0800e588 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b084      	sub	sp, #16
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	6078      	str	r0, [r7, #4]
 800e590:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e592:	4b21      	ldr	r3, [pc, #132]	@ (800e618 <prvAddCurrentTaskToDelayedList+0x90>)
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e598:	4b20      	ldr	r3, [pc, #128]	@ (800e61c <prvAddCurrentTaskToDelayedList+0x94>)
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	3304      	adds	r3, #4
 800e59e:	4618      	mov	r0, r3
 800e5a0:	f7fd ff9a 	bl	800c4d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5aa:	d10a      	bne.n	800e5c2 <prvAddCurrentTaskToDelayedList+0x3a>
 800e5ac:	683b      	ldr	r3, [r7, #0]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d007      	beq.n	800e5c2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e5b2:	4b1a      	ldr	r3, [pc, #104]	@ (800e61c <prvAddCurrentTaskToDelayedList+0x94>)
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	3304      	adds	r3, #4
 800e5b8:	4619      	mov	r1, r3
 800e5ba:	4819      	ldr	r0, [pc, #100]	@ (800e620 <prvAddCurrentTaskToDelayedList+0x98>)
 800e5bc:	f7fd ff2f 	bl	800c41e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e5c0:	e026      	b.n	800e610 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e5c2:	68fa      	ldr	r2, [r7, #12]
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	4413      	add	r3, r2
 800e5c8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e5ca:	4b14      	ldr	r3, [pc, #80]	@ (800e61c <prvAddCurrentTaskToDelayedList+0x94>)
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	68ba      	ldr	r2, [r7, #8]
 800e5d0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e5d2:	68ba      	ldr	r2, [r7, #8]
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	429a      	cmp	r2, r3
 800e5d8:	d209      	bcs.n	800e5ee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e5da:	4b12      	ldr	r3, [pc, #72]	@ (800e624 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e5dc:	681a      	ldr	r2, [r3, #0]
 800e5de:	4b0f      	ldr	r3, [pc, #60]	@ (800e61c <prvAddCurrentTaskToDelayedList+0x94>)
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	3304      	adds	r3, #4
 800e5e4:	4619      	mov	r1, r3
 800e5e6:	4610      	mov	r0, r2
 800e5e8:	f7fd ff3d 	bl	800c466 <vListInsert>
}
 800e5ec:	e010      	b.n	800e610 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e5ee:	4b0e      	ldr	r3, [pc, #56]	@ (800e628 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e5f0:	681a      	ldr	r2, [r3, #0]
 800e5f2:	4b0a      	ldr	r3, [pc, #40]	@ (800e61c <prvAddCurrentTaskToDelayedList+0x94>)
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	3304      	adds	r3, #4
 800e5f8:	4619      	mov	r1, r3
 800e5fa:	4610      	mov	r0, r2
 800e5fc:	f7fd ff33 	bl	800c466 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e600:	4b0a      	ldr	r3, [pc, #40]	@ (800e62c <prvAddCurrentTaskToDelayedList+0xa4>)
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	68ba      	ldr	r2, [r7, #8]
 800e606:	429a      	cmp	r2, r3
 800e608:	d202      	bcs.n	800e610 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e60a:	4a08      	ldr	r2, [pc, #32]	@ (800e62c <prvAddCurrentTaskToDelayedList+0xa4>)
 800e60c:	68bb      	ldr	r3, [r7, #8]
 800e60e:	6013      	str	r3, [r2, #0]
}
 800e610:	bf00      	nop
 800e612:	3710      	adds	r7, #16
 800e614:	46bd      	mov	sp, r7
 800e616:	bd80      	pop	{r7, pc}
 800e618:	240010a4 	.word	0x240010a4
 800e61c:	24000bcc 	.word	0x24000bcc
 800e620:	2400108c 	.word	0x2400108c
 800e624:	2400105c 	.word	0x2400105c
 800e628:	24001058 	.word	0x24001058
 800e62c:	240010c0 	.word	0x240010c0

0800e630 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e630:	b580      	push	{r7, lr}
 800e632:	b08a      	sub	sp, #40	@ 0x28
 800e634:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e636:	2300      	movs	r3, #0
 800e638:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e63a:	f000 fb13 	bl	800ec64 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e63e:	4b1d      	ldr	r3, [pc, #116]	@ (800e6b4 <xTimerCreateTimerTask+0x84>)
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d021      	beq.n	800e68a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e646:	2300      	movs	r3, #0
 800e648:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e64a:	2300      	movs	r3, #0
 800e64c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e64e:	1d3a      	adds	r2, r7, #4
 800e650:	f107 0108 	add.w	r1, r7, #8
 800e654:	f107 030c 	add.w	r3, r7, #12
 800e658:	4618      	mov	r0, r3
 800e65a:	f7fd fe99 	bl	800c390 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e65e:	6879      	ldr	r1, [r7, #4]
 800e660:	68bb      	ldr	r3, [r7, #8]
 800e662:	68fa      	ldr	r2, [r7, #12]
 800e664:	9202      	str	r2, [sp, #8]
 800e666:	9301      	str	r3, [sp, #4]
 800e668:	2302      	movs	r3, #2
 800e66a:	9300      	str	r3, [sp, #0]
 800e66c:	2300      	movs	r3, #0
 800e66e:	460a      	mov	r2, r1
 800e670:	4911      	ldr	r1, [pc, #68]	@ (800e6b8 <xTimerCreateTimerTask+0x88>)
 800e672:	4812      	ldr	r0, [pc, #72]	@ (800e6bc <xTimerCreateTimerTask+0x8c>)
 800e674:	f7fe feea 	bl	800d44c <xTaskCreateStatic>
 800e678:	4603      	mov	r3, r0
 800e67a:	4a11      	ldr	r2, [pc, #68]	@ (800e6c0 <xTimerCreateTimerTask+0x90>)
 800e67c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e67e:	4b10      	ldr	r3, [pc, #64]	@ (800e6c0 <xTimerCreateTimerTask+0x90>)
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d001      	beq.n	800e68a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e686:	2301      	movs	r3, #1
 800e688:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e68a:	697b      	ldr	r3, [r7, #20]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d10b      	bne.n	800e6a8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800e690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e694:	f383 8811 	msr	BASEPRI, r3
 800e698:	f3bf 8f6f 	isb	sy
 800e69c:	f3bf 8f4f 	dsb	sy
 800e6a0:	613b      	str	r3, [r7, #16]
}
 800e6a2:	bf00      	nop
 800e6a4:	bf00      	nop
 800e6a6:	e7fd      	b.n	800e6a4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e6a8:	697b      	ldr	r3, [r7, #20]
}
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	3718      	adds	r7, #24
 800e6ae:	46bd      	mov	sp, r7
 800e6b0:	bd80      	pop	{r7, pc}
 800e6b2:	bf00      	nop
 800e6b4:	240010fc 	.word	0x240010fc
 800e6b8:	080140d0 	.word	0x080140d0
 800e6bc:	0800e7fd 	.word	0x0800e7fd
 800e6c0:	24001100 	.word	0x24001100

0800e6c4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b08a      	sub	sp, #40	@ 0x28
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	60f8      	str	r0, [r7, #12]
 800e6cc:	60b9      	str	r1, [r7, #8]
 800e6ce:	607a      	str	r2, [r7, #4]
 800e6d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d10b      	bne.n	800e6f4 <xTimerGenericCommand+0x30>
	__asm volatile
 800e6dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6e0:	f383 8811 	msr	BASEPRI, r3
 800e6e4:	f3bf 8f6f 	isb	sy
 800e6e8:	f3bf 8f4f 	dsb	sy
 800e6ec:	623b      	str	r3, [r7, #32]
}
 800e6ee:	bf00      	nop
 800e6f0:	bf00      	nop
 800e6f2:	e7fd      	b.n	800e6f0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e6f4:	4b19      	ldr	r3, [pc, #100]	@ (800e75c <xTimerGenericCommand+0x98>)
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d02a      	beq.n	800e752 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e6fc:	68bb      	ldr	r3, [r7, #8]
 800e6fe:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e708:	68bb      	ldr	r3, [r7, #8]
 800e70a:	2b05      	cmp	r3, #5
 800e70c:	dc18      	bgt.n	800e740 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e70e:	f7ff fdad 	bl	800e26c <xTaskGetSchedulerState>
 800e712:	4603      	mov	r3, r0
 800e714:	2b02      	cmp	r3, #2
 800e716:	d109      	bne.n	800e72c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e718:	4b10      	ldr	r3, [pc, #64]	@ (800e75c <xTimerGenericCommand+0x98>)
 800e71a:	6818      	ldr	r0, [r3, #0]
 800e71c:	f107 0110 	add.w	r1, r7, #16
 800e720:	2300      	movs	r3, #0
 800e722:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e724:	f7fe f87c 	bl	800c820 <xQueueGenericSend>
 800e728:	6278      	str	r0, [r7, #36]	@ 0x24
 800e72a:	e012      	b.n	800e752 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e72c:	4b0b      	ldr	r3, [pc, #44]	@ (800e75c <xTimerGenericCommand+0x98>)
 800e72e:	6818      	ldr	r0, [r3, #0]
 800e730:	f107 0110 	add.w	r1, r7, #16
 800e734:	2300      	movs	r3, #0
 800e736:	2200      	movs	r2, #0
 800e738:	f7fe f872 	bl	800c820 <xQueueGenericSend>
 800e73c:	6278      	str	r0, [r7, #36]	@ 0x24
 800e73e:	e008      	b.n	800e752 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e740:	4b06      	ldr	r3, [pc, #24]	@ (800e75c <xTimerGenericCommand+0x98>)
 800e742:	6818      	ldr	r0, [r3, #0]
 800e744:	f107 0110 	add.w	r1, r7, #16
 800e748:	2300      	movs	r3, #0
 800e74a:	683a      	ldr	r2, [r7, #0]
 800e74c:	f7fe f96a 	bl	800ca24 <xQueueGenericSendFromISR>
 800e750:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e754:	4618      	mov	r0, r3
 800e756:	3728      	adds	r7, #40	@ 0x28
 800e758:	46bd      	mov	sp, r7
 800e75a:	bd80      	pop	{r7, pc}
 800e75c:	240010fc 	.word	0x240010fc

0800e760 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e760:	b580      	push	{r7, lr}
 800e762:	b088      	sub	sp, #32
 800e764:	af02      	add	r7, sp, #8
 800e766:	6078      	str	r0, [r7, #4]
 800e768:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e76a:	4b23      	ldr	r3, [pc, #140]	@ (800e7f8 <prvProcessExpiredTimer+0x98>)
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	68db      	ldr	r3, [r3, #12]
 800e770:	68db      	ldr	r3, [r3, #12]
 800e772:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e774:	697b      	ldr	r3, [r7, #20]
 800e776:	3304      	adds	r3, #4
 800e778:	4618      	mov	r0, r3
 800e77a:	f7fd fead 	bl	800c4d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e77e:	697b      	ldr	r3, [r7, #20]
 800e780:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e784:	f003 0304 	and.w	r3, r3, #4
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d023      	beq.n	800e7d4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e78c:	697b      	ldr	r3, [r7, #20]
 800e78e:	699a      	ldr	r2, [r3, #24]
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	18d1      	adds	r1, r2, r3
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	683a      	ldr	r2, [r7, #0]
 800e798:	6978      	ldr	r0, [r7, #20]
 800e79a:	f000 f8d5 	bl	800e948 <prvInsertTimerInActiveList>
 800e79e:	4603      	mov	r3, r0
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d020      	beq.n	800e7e6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	9300      	str	r3, [sp, #0]
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	687a      	ldr	r2, [r7, #4]
 800e7ac:	2100      	movs	r1, #0
 800e7ae:	6978      	ldr	r0, [r7, #20]
 800e7b0:	f7ff ff88 	bl	800e6c4 <xTimerGenericCommand>
 800e7b4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e7b6:	693b      	ldr	r3, [r7, #16]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d114      	bne.n	800e7e6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800e7bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7c0:	f383 8811 	msr	BASEPRI, r3
 800e7c4:	f3bf 8f6f 	isb	sy
 800e7c8:	f3bf 8f4f 	dsb	sy
 800e7cc:	60fb      	str	r3, [r7, #12]
}
 800e7ce:	bf00      	nop
 800e7d0:	bf00      	nop
 800e7d2:	e7fd      	b.n	800e7d0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e7d4:	697b      	ldr	r3, [r7, #20]
 800e7d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e7da:	f023 0301 	bic.w	r3, r3, #1
 800e7de:	b2da      	uxtb	r2, r3
 800e7e0:	697b      	ldr	r3, [r7, #20]
 800e7e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e7e6:	697b      	ldr	r3, [r7, #20]
 800e7e8:	6a1b      	ldr	r3, [r3, #32]
 800e7ea:	6978      	ldr	r0, [r7, #20]
 800e7ec:	4798      	blx	r3
}
 800e7ee:	bf00      	nop
 800e7f0:	3718      	adds	r7, #24
 800e7f2:	46bd      	mov	sp, r7
 800e7f4:	bd80      	pop	{r7, pc}
 800e7f6:	bf00      	nop
 800e7f8:	240010f4 	.word	0x240010f4

0800e7fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	b084      	sub	sp, #16
 800e800:	af00      	add	r7, sp, #0
 800e802:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e804:	f107 0308 	add.w	r3, r7, #8
 800e808:	4618      	mov	r0, r3
 800e80a:	f000 f859 	bl	800e8c0 <prvGetNextExpireTime>
 800e80e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e810:	68bb      	ldr	r3, [r7, #8]
 800e812:	4619      	mov	r1, r3
 800e814:	68f8      	ldr	r0, [r7, #12]
 800e816:	f000 f805 	bl	800e824 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e81a:	f000 f8d7 	bl	800e9cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e81e:	bf00      	nop
 800e820:	e7f0      	b.n	800e804 <prvTimerTask+0x8>
	...

0800e824 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e824:	b580      	push	{r7, lr}
 800e826:	b084      	sub	sp, #16
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]
 800e82c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e82e:	f7ff f871 	bl	800d914 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e832:	f107 0308 	add.w	r3, r7, #8
 800e836:	4618      	mov	r0, r3
 800e838:	f000 f866 	bl	800e908 <prvSampleTimeNow>
 800e83c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e83e:	68bb      	ldr	r3, [r7, #8]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d130      	bne.n	800e8a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e844:	683b      	ldr	r3, [r7, #0]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d10a      	bne.n	800e860 <prvProcessTimerOrBlockTask+0x3c>
 800e84a:	687a      	ldr	r2, [r7, #4]
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	429a      	cmp	r2, r3
 800e850:	d806      	bhi.n	800e860 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e852:	f7ff f8a5 	bl	800d9a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e856:	68f9      	ldr	r1, [r7, #12]
 800e858:	6878      	ldr	r0, [r7, #4]
 800e85a:	f7ff ff81 	bl	800e760 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e85e:	e024      	b.n	800e8aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e860:	683b      	ldr	r3, [r7, #0]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d008      	beq.n	800e878 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e866:	4b13      	ldr	r3, [pc, #76]	@ (800e8b4 <prvProcessTimerOrBlockTask+0x90>)
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d101      	bne.n	800e874 <prvProcessTimerOrBlockTask+0x50>
 800e870:	2301      	movs	r3, #1
 800e872:	e000      	b.n	800e876 <prvProcessTimerOrBlockTask+0x52>
 800e874:	2300      	movs	r3, #0
 800e876:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e878:	4b0f      	ldr	r3, [pc, #60]	@ (800e8b8 <prvProcessTimerOrBlockTask+0x94>)
 800e87a:	6818      	ldr	r0, [r3, #0]
 800e87c:	687a      	ldr	r2, [r7, #4]
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	1ad3      	subs	r3, r2, r3
 800e882:	683a      	ldr	r2, [r7, #0]
 800e884:	4619      	mov	r1, r3
 800e886:	f7fe fdad 	bl	800d3e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e88a:	f7ff f889 	bl	800d9a0 <xTaskResumeAll>
 800e88e:	4603      	mov	r3, r0
 800e890:	2b00      	cmp	r3, #0
 800e892:	d10a      	bne.n	800e8aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e894:	4b09      	ldr	r3, [pc, #36]	@ (800e8bc <prvProcessTimerOrBlockTask+0x98>)
 800e896:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e89a:	601a      	str	r2, [r3, #0]
 800e89c:	f3bf 8f4f 	dsb	sy
 800e8a0:	f3bf 8f6f 	isb	sy
}
 800e8a4:	e001      	b.n	800e8aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e8a6:	f7ff f87b 	bl	800d9a0 <xTaskResumeAll>
}
 800e8aa:	bf00      	nop
 800e8ac:	3710      	adds	r7, #16
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	bd80      	pop	{r7, pc}
 800e8b2:	bf00      	nop
 800e8b4:	240010f8 	.word	0x240010f8
 800e8b8:	240010fc 	.word	0x240010fc
 800e8bc:	e000ed04 	.word	0xe000ed04

0800e8c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e8c0:	b480      	push	{r7}
 800e8c2:	b085      	sub	sp, #20
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e8c8:	4b0e      	ldr	r3, [pc, #56]	@ (800e904 <prvGetNextExpireTime+0x44>)
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d101      	bne.n	800e8d6 <prvGetNextExpireTime+0x16>
 800e8d2:	2201      	movs	r2, #1
 800e8d4:	e000      	b.n	800e8d8 <prvGetNextExpireTime+0x18>
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d105      	bne.n	800e8f0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e8e4:	4b07      	ldr	r3, [pc, #28]	@ (800e904 <prvGetNextExpireTime+0x44>)
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	68db      	ldr	r3, [r3, #12]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	60fb      	str	r3, [r7, #12]
 800e8ee:	e001      	b.n	800e8f4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e8f4:	68fb      	ldr	r3, [r7, #12]
}
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	3714      	adds	r7, #20
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e900:	4770      	bx	lr
 800e902:	bf00      	nop
 800e904:	240010f4 	.word	0x240010f4

0800e908 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b084      	sub	sp, #16
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e910:	f7ff f8e4 	bl	800dadc <xTaskGetTickCount>
 800e914:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e916:	4b0b      	ldr	r3, [pc, #44]	@ (800e944 <prvSampleTimeNow+0x3c>)
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	68fa      	ldr	r2, [r7, #12]
 800e91c:	429a      	cmp	r2, r3
 800e91e:	d205      	bcs.n	800e92c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e920:	f000 f93a 	bl	800eb98 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	2201      	movs	r2, #1
 800e928:	601a      	str	r2, [r3, #0]
 800e92a:	e002      	b.n	800e932 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	2200      	movs	r2, #0
 800e930:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e932:	4a04      	ldr	r2, [pc, #16]	@ (800e944 <prvSampleTimeNow+0x3c>)
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e938:	68fb      	ldr	r3, [r7, #12]
}
 800e93a:	4618      	mov	r0, r3
 800e93c:	3710      	adds	r7, #16
 800e93e:	46bd      	mov	sp, r7
 800e940:	bd80      	pop	{r7, pc}
 800e942:	bf00      	nop
 800e944:	24001104 	.word	0x24001104

0800e948 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e948:	b580      	push	{r7, lr}
 800e94a:	b086      	sub	sp, #24
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	60f8      	str	r0, [r7, #12]
 800e950:	60b9      	str	r1, [r7, #8]
 800e952:	607a      	str	r2, [r7, #4]
 800e954:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e956:	2300      	movs	r3, #0
 800e958:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	68ba      	ldr	r2, [r7, #8]
 800e95e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	68fa      	ldr	r2, [r7, #12]
 800e964:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e966:	68ba      	ldr	r2, [r7, #8]
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	429a      	cmp	r2, r3
 800e96c:	d812      	bhi.n	800e994 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e96e:	687a      	ldr	r2, [r7, #4]
 800e970:	683b      	ldr	r3, [r7, #0]
 800e972:	1ad2      	subs	r2, r2, r3
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	699b      	ldr	r3, [r3, #24]
 800e978:	429a      	cmp	r2, r3
 800e97a:	d302      	bcc.n	800e982 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e97c:	2301      	movs	r3, #1
 800e97e:	617b      	str	r3, [r7, #20]
 800e980:	e01b      	b.n	800e9ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e982:	4b10      	ldr	r3, [pc, #64]	@ (800e9c4 <prvInsertTimerInActiveList+0x7c>)
 800e984:	681a      	ldr	r2, [r3, #0]
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	3304      	adds	r3, #4
 800e98a:	4619      	mov	r1, r3
 800e98c:	4610      	mov	r0, r2
 800e98e:	f7fd fd6a 	bl	800c466 <vListInsert>
 800e992:	e012      	b.n	800e9ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e994:	687a      	ldr	r2, [r7, #4]
 800e996:	683b      	ldr	r3, [r7, #0]
 800e998:	429a      	cmp	r2, r3
 800e99a:	d206      	bcs.n	800e9aa <prvInsertTimerInActiveList+0x62>
 800e99c:	68ba      	ldr	r2, [r7, #8]
 800e99e:	683b      	ldr	r3, [r7, #0]
 800e9a0:	429a      	cmp	r2, r3
 800e9a2:	d302      	bcc.n	800e9aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e9a4:	2301      	movs	r3, #1
 800e9a6:	617b      	str	r3, [r7, #20]
 800e9a8:	e007      	b.n	800e9ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e9aa:	4b07      	ldr	r3, [pc, #28]	@ (800e9c8 <prvInsertTimerInActiveList+0x80>)
 800e9ac:	681a      	ldr	r2, [r3, #0]
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	3304      	adds	r3, #4
 800e9b2:	4619      	mov	r1, r3
 800e9b4:	4610      	mov	r0, r2
 800e9b6:	f7fd fd56 	bl	800c466 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e9ba:	697b      	ldr	r3, [r7, #20]
}
 800e9bc:	4618      	mov	r0, r3
 800e9be:	3718      	adds	r7, #24
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	bd80      	pop	{r7, pc}
 800e9c4:	240010f8 	.word	0x240010f8
 800e9c8:	240010f4 	.word	0x240010f4

0800e9cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b08e      	sub	sp, #56	@ 0x38
 800e9d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e9d2:	e0ce      	b.n	800eb72 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	da19      	bge.n	800ea0e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e9da:	1d3b      	adds	r3, r7, #4
 800e9dc:	3304      	adds	r3, #4
 800e9de:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e9e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d10b      	bne.n	800e9fe <prvProcessReceivedCommands+0x32>
	__asm volatile
 800e9e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9ea:	f383 8811 	msr	BASEPRI, r3
 800e9ee:	f3bf 8f6f 	isb	sy
 800e9f2:	f3bf 8f4f 	dsb	sy
 800e9f6:	61fb      	str	r3, [r7, #28]
}
 800e9f8:	bf00      	nop
 800e9fa:	bf00      	nop
 800e9fc:	e7fd      	b.n	800e9fa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e9fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ea04:	6850      	ldr	r0, [r2, #4]
 800ea06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ea08:	6892      	ldr	r2, [r2, #8]
 800ea0a:	4611      	mov	r1, r2
 800ea0c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	f2c0 80ae 	blt.w	800eb72 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ea1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea1c:	695b      	ldr	r3, [r3, #20]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d004      	beq.n	800ea2c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ea22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea24:	3304      	adds	r3, #4
 800ea26:	4618      	mov	r0, r3
 800ea28:	f7fd fd56 	bl	800c4d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ea2c:	463b      	mov	r3, r7
 800ea2e:	4618      	mov	r0, r3
 800ea30:	f7ff ff6a 	bl	800e908 <prvSampleTimeNow>
 800ea34:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	2b09      	cmp	r3, #9
 800ea3a:	f200 8097 	bhi.w	800eb6c <prvProcessReceivedCommands+0x1a0>
 800ea3e:	a201      	add	r2, pc, #4	@ (adr r2, 800ea44 <prvProcessReceivedCommands+0x78>)
 800ea40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea44:	0800ea6d 	.word	0x0800ea6d
 800ea48:	0800ea6d 	.word	0x0800ea6d
 800ea4c:	0800ea6d 	.word	0x0800ea6d
 800ea50:	0800eae3 	.word	0x0800eae3
 800ea54:	0800eaf7 	.word	0x0800eaf7
 800ea58:	0800eb43 	.word	0x0800eb43
 800ea5c:	0800ea6d 	.word	0x0800ea6d
 800ea60:	0800ea6d 	.word	0x0800ea6d
 800ea64:	0800eae3 	.word	0x0800eae3
 800ea68:	0800eaf7 	.word	0x0800eaf7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ea6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea6e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ea72:	f043 0301 	orr.w	r3, r3, #1
 800ea76:	b2da      	uxtb	r2, r3
 800ea78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea7a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ea7e:	68ba      	ldr	r2, [r7, #8]
 800ea80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea82:	699b      	ldr	r3, [r3, #24]
 800ea84:	18d1      	adds	r1, r2, r3
 800ea86:	68bb      	ldr	r3, [r7, #8]
 800ea88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ea8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ea8c:	f7ff ff5c 	bl	800e948 <prvInsertTimerInActiveList>
 800ea90:	4603      	mov	r3, r0
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d06c      	beq.n	800eb70 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ea96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea98:	6a1b      	ldr	r3, [r3, #32]
 800ea9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ea9c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ea9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eaa0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eaa4:	f003 0304 	and.w	r3, r3, #4
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d061      	beq.n	800eb70 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800eaac:	68ba      	ldr	r2, [r7, #8]
 800eaae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eab0:	699b      	ldr	r3, [r3, #24]
 800eab2:	441a      	add	r2, r3
 800eab4:	2300      	movs	r3, #0
 800eab6:	9300      	str	r3, [sp, #0]
 800eab8:	2300      	movs	r3, #0
 800eaba:	2100      	movs	r1, #0
 800eabc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eabe:	f7ff fe01 	bl	800e6c4 <xTimerGenericCommand>
 800eac2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800eac4:	6a3b      	ldr	r3, [r7, #32]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d152      	bne.n	800eb70 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800eaca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eace:	f383 8811 	msr	BASEPRI, r3
 800ead2:	f3bf 8f6f 	isb	sy
 800ead6:	f3bf 8f4f 	dsb	sy
 800eada:	61bb      	str	r3, [r7, #24]
}
 800eadc:	bf00      	nop
 800eade:	bf00      	nop
 800eae0:	e7fd      	b.n	800eade <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eae4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eae8:	f023 0301 	bic.w	r3, r3, #1
 800eaec:	b2da      	uxtb	r2, r3
 800eaee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eaf0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800eaf4:	e03d      	b.n	800eb72 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800eaf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eaf8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eafc:	f043 0301 	orr.w	r3, r3, #1
 800eb00:	b2da      	uxtb	r2, r3
 800eb02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb04:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800eb08:	68ba      	ldr	r2, [r7, #8]
 800eb0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb0c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800eb0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb10:	699b      	ldr	r3, [r3, #24]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d10b      	bne.n	800eb2e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800eb16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb1a:	f383 8811 	msr	BASEPRI, r3
 800eb1e:	f3bf 8f6f 	isb	sy
 800eb22:	f3bf 8f4f 	dsb	sy
 800eb26:	617b      	str	r3, [r7, #20]
}
 800eb28:	bf00      	nop
 800eb2a:	bf00      	nop
 800eb2c:	e7fd      	b.n	800eb2a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800eb2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb30:	699a      	ldr	r2, [r3, #24]
 800eb32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb34:	18d1      	adds	r1, r2, r3
 800eb36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eb3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eb3c:	f7ff ff04 	bl	800e948 <prvInsertTimerInActiveList>
					break;
 800eb40:	e017      	b.n	800eb72 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800eb42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eb48:	f003 0302 	and.w	r3, r3, #2
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d103      	bne.n	800eb58 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800eb50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eb52:	f000 fccd 	bl	800f4f0 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800eb56:	e00c      	b.n	800eb72 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eb58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eb5e:	f023 0301 	bic.w	r3, r3, #1
 800eb62:	b2da      	uxtb	r2, r3
 800eb64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb66:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800eb6a:	e002      	b.n	800eb72 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800eb6c:	bf00      	nop
 800eb6e:	e000      	b.n	800eb72 <prvProcessReceivedCommands+0x1a6>
					break;
 800eb70:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800eb72:	4b08      	ldr	r3, [pc, #32]	@ (800eb94 <prvProcessReceivedCommands+0x1c8>)
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	1d39      	adds	r1, r7, #4
 800eb78:	2200      	movs	r2, #0
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	f7fe f880 	bl	800cc80 <xQueueReceive>
 800eb80:	4603      	mov	r3, r0
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	f47f af26 	bne.w	800e9d4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800eb88:	bf00      	nop
 800eb8a:	bf00      	nop
 800eb8c:	3730      	adds	r7, #48	@ 0x30
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	bd80      	pop	{r7, pc}
 800eb92:	bf00      	nop
 800eb94:	240010fc 	.word	0x240010fc

0800eb98 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b088      	sub	sp, #32
 800eb9c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800eb9e:	e049      	b.n	800ec34 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800eba0:	4b2e      	ldr	r3, [pc, #184]	@ (800ec5c <prvSwitchTimerLists+0xc4>)
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	68db      	ldr	r3, [r3, #12]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ebaa:	4b2c      	ldr	r3, [pc, #176]	@ (800ec5c <prvSwitchTimerLists+0xc4>)
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	68db      	ldr	r3, [r3, #12]
 800ebb0:	68db      	ldr	r3, [r3, #12]
 800ebb2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	3304      	adds	r3, #4
 800ebb8:	4618      	mov	r0, r3
 800ebba:	f7fd fc8d 	bl	800c4d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	6a1b      	ldr	r3, [r3, #32]
 800ebc2:	68f8      	ldr	r0, [r7, #12]
 800ebc4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ebcc:	f003 0304 	and.w	r3, r3, #4
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d02f      	beq.n	800ec34 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	699b      	ldr	r3, [r3, #24]
 800ebd8:	693a      	ldr	r2, [r7, #16]
 800ebda:	4413      	add	r3, r2
 800ebdc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ebde:	68ba      	ldr	r2, [r7, #8]
 800ebe0:	693b      	ldr	r3, [r7, #16]
 800ebe2:	429a      	cmp	r2, r3
 800ebe4:	d90e      	bls.n	800ec04 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	68ba      	ldr	r2, [r7, #8]
 800ebea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	68fa      	ldr	r2, [r7, #12]
 800ebf0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ebf2:	4b1a      	ldr	r3, [pc, #104]	@ (800ec5c <prvSwitchTimerLists+0xc4>)
 800ebf4:	681a      	ldr	r2, [r3, #0]
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	3304      	adds	r3, #4
 800ebfa:	4619      	mov	r1, r3
 800ebfc:	4610      	mov	r0, r2
 800ebfe:	f7fd fc32 	bl	800c466 <vListInsert>
 800ec02:	e017      	b.n	800ec34 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ec04:	2300      	movs	r3, #0
 800ec06:	9300      	str	r3, [sp, #0]
 800ec08:	2300      	movs	r3, #0
 800ec0a:	693a      	ldr	r2, [r7, #16]
 800ec0c:	2100      	movs	r1, #0
 800ec0e:	68f8      	ldr	r0, [r7, #12]
 800ec10:	f7ff fd58 	bl	800e6c4 <xTimerGenericCommand>
 800ec14:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d10b      	bne.n	800ec34 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800ec1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec20:	f383 8811 	msr	BASEPRI, r3
 800ec24:	f3bf 8f6f 	isb	sy
 800ec28:	f3bf 8f4f 	dsb	sy
 800ec2c:	603b      	str	r3, [r7, #0]
}
 800ec2e:	bf00      	nop
 800ec30:	bf00      	nop
 800ec32:	e7fd      	b.n	800ec30 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ec34:	4b09      	ldr	r3, [pc, #36]	@ (800ec5c <prvSwitchTimerLists+0xc4>)
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d1b0      	bne.n	800eba0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ec3e:	4b07      	ldr	r3, [pc, #28]	@ (800ec5c <prvSwitchTimerLists+0xc4>)
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ec44:	4b06      	ldr	r3, [pc, #24]	@ (800ec60 <prvSwitchTimerLists+0xc8>)
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	4a04      	ldr	r2, [pc, #16]	@ (800ec5c <prvSwitchTimerLists+0xc4>)
 800ec4a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ec4c:	4a04      	ldr	r2, [pc, #16]	@ (800ec60 <prvSwitchTimerLists+0xc8>)
 800ec4e:	697b      	ldr	r3, [r7, #20]
 800ec50:	6013      	str	r3, [r2, #0]
}
 800ec52:	bf00      	nop
 800ec54:	3718      	adds	r7, #24
 800ec56:	46bd      	mov	sp, r7
 800ec58:	bd80      	pop	{r7, pc}
 800ec5a:	bf00      	nop
 800ec5c:	240010f4 	.word	0x240010f4
 800ec60:	240010f8 	.word	0x240010f8

0800ec64 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b082      	sub	sp, #8
 800ec68:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ec6a:	f000 f96d 	bl	800ef48 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ec6e:	4b15      	ldr	r3, [pc, #84]	@ (800ecc4 <prvCheckForValidListAndQueue+0x60>)
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d120      	bne.n	800ecb8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ec76:	4814      	ldr	r0, [pc, #80]	@ (800ecc8 <prvCheckForValidListAndQueue+0x64>)
 800ec78:	f7fd fba4 	bl	800c3c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ec7c:	4813      	ldr	r0, [pc, #76]	@ (800eccc <prvCheckForValidListAndQueue+0x68>)
 800ec7e:	f7fd fba1 	bl	800c3c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ec82:	4b13      	ldr	r3, [pc, #76]	@ (800ecd0 <prvCheckForValidListAndQueue+0x6c>)
 800ec84:	4a10      	ldr	r2, [pc, #64]	@ (800ecc8 <prvCheckForValidListAndQueue+0x64>)
 800ec86:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ec88:	4b12      	ldr	r3, [pc, #72]	@ (800ecd4 <prvCheckForValidListAndQueue+0x70>)
 800ec8a:	4a10      	ldr	r2, [pc, #64]	@ (800eccc <prvCheckForValidListAndQueue+0x68>)
 800ec8c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ec8e:	2300      	movs	r3, #0
 800ec90:	9300      	str	r3, [sp, #0]
 800ec92:	4b11      	ldr	r3, [pc, #68]	@ (800ecd8 <prvCheckForValidListAndQueue+0x74>)
 800ec94:	4a11      	ldr	r2, [pc, #68]	@ (800ecdc <prvCheckForValidListAndQueue+0x78>)
 800ec96:	2110      	movs	r1, #16
 800ec98:	200a      	movs	r0, #10
 800ec9a:	f7fd fcb1 	bl	800c600 <xQueueGenericCreateStatic>
 800ec9e:	4603      	mov	r3, r0
 800eca0:	4a08      	ldr	r2, [pc, #32]	@ (800ecc4 <prvCheckForValidListAndQueue+0x60>)
 800eca2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800eca4:	4b07      	ldr	r3, [pc, #28]	@ (800ecc4 <prvCheckForValidListAndQueue+0x60>)
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d005      	beq.n	800ecb8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ecac:	4b05      	ldr	r3, [pc, #20]	@ (800ecc4 <prvCheckForValidListAndQueue+0x60>)
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	490b      	ldr	r1, [pc, #44]	@ (800ece0 <prvCheckForValidListAndQueue+0x7c>)
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	f7fe fb42 	bl	800d33c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ecb8:	f000 f978 	bl	800efac <vPortExitCritical>
}
 800ecbc:	bf00      	nop
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	bd80      	pop	{r7, pc}
 800ecc2:	bf00      	nop
 800ecc4:	240010fc 	.word	0x240010fc
 800ecc8:	240010cc 	.word	0x240010cc
 800eccc:	240010e0 	.word	0x240010e0
 800ecd0:	240010f4 	.word	0x240010f4
 800ecd4:	240010f8 	.word	0x240010f8
 800ecd8:	240011a8 	.word	0x240011a8
 800ecdc:	24001108 	.word	0x24001108
 800ece0:	080140d8 	.word	0x080140d8

0800ece4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ece4:	b480      	push	{r7}
 800ece6:	b085      	sub	sp, #20
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	60f8      	str	r0, [r7, #12]
 800ecec:	60b9      	str	r1, [r7, #8]
 800ecee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	3b04      	subs	r3, #4
 800ecf4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ecfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	3b04      	subs	r3, #4
 800ed02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ed04:	68bb      	ldr	r3, [r7, #8]
 800ed06:	f023 0201 	bic.w	r2, r3, #1
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	3b04      	subs	r3, #4
 800ed12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ed14:	4a0c      	ldr	r2, [pc, #48]	@ (800ed48 <pxPortInitialiseStack+0x64>)
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	3b14      	subs	r3, #20
 800ed1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ed20:	687a      	ldr	r2, [r7, #4]
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	3b04      	subs	r3, #4
 800ed2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	f06f 0202 	mvn.w	r2, #2
 800ed32:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	3b20      	subs	r3, #32
 800ed38:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ed3a:	68fb      	ldr	r3, [r7, #12]
}
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	3714      	adds	r7, #20
 800ed40:	46bd      	mov	sp, r7
 800ed42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed46:	4770      	bx	lr
 800ed48:	0800ed4d 	.word	0x0800ed4d

0800ed4c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ed4c:	b480      	push	{r7}
 800ed4e:	b085      	sub	sp, #20
 800ed50:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ed52:	2300      	movs	r3, #0
 800ed54:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ed56:	4b13      	ldr	r3, [pc, #76]	@ (800eda4 <prvTaskExitError+0x58>)
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed5e:	d00b      	beq.n	800ed78 <prvTaskExitError+0x2c>
	__asm volatile
 800ed60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed64:	f383 8811 	msr	BASEPRI, r3
 800ed68:	f3bf 8f6f 	isb	sy
 800ed6c:	f3bf 8f4f 	dsb	sy
 800ed70:	60fb      	str	r3, [r7, #12]
}
 800ed72:	bf00      	nop
 800ed74:	bf00      	nop
 800ed76:	e7fd      	b.n	800ed74 <prvTaskExitError+0x28>
	__asm volatile
 800ed78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed7c:	f383 8811 	msr	BASEPRI, r3
 800ed80:	f3bf 8f6f 	isb	sy
 800ed84:	f3bf 8f4f 	dsb	sy
 800ed88:	60bb      	str	r3, [r7, #8]
}
 800ed8a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ed8c:	bf00      	nop
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d0fc      	beq.n	800ed8e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ed94:	bf00      	nop
 800ed96:	bf00      	nop
 800ed98:	3714      	adds	r7, #20
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda0:	4770      	bx	lr
 800eda2:	bf00      	nop
 800eda4:	24000010 	.word	0x24000010
	...

0800edb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800edb0:	4b07      	ldr	r3, [pc, #28]	@ (800edd0 <pxCurrentTCBConst2>)
 800edb2:	6819      	ldr	r1, [r3, #0]
 800edb4:	6808      	ldr	r0, [r1, #0]
 800edb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edba:	f380 8809 	msr	PSP, r0
 800edbe:	f3bf 8f6f 	isb	sy
 800edc2:	f04f 0000 	mov.w	r0, #0
 800edc6:	f380 8811 	msr	BASEPRI, r0
 800edca:	4770      	bx	lr
 800edcc:	f3af 8000 	nop.w

0800edd0 <pxCurrentTCBConst2>:
 800edd0:	24000bcc 	.word	0x24000bcc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800edd4:	bf00      	nop
 800edd6:	bf00      	nop

0800edd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800edd8:	4808      	ldr	r0, [pc, #32]	@ (800edfc <prvPortStartFirstTask+0x24>)
 800edda:	6800      	ldr	r0, [r0, #0]
 800eddc:	6800      	ldr	r0, [r0, #0]
 800edde:	f380 8808 	msr	MSP, r0
 800ede2:	f04f 0000 	mov.w	r0, #0
 800ede6:	f380 8814 	msr	CONTROL, r0
 800edea:	b662      	cpsie	i
 800edec:	b661      	cpsie	f
 800edee:	f3bf 8f4f 	dsb	sy
 800edf2:	f3bf 8f6f 	isb	sy
 800edf6:	df00      	svc	0
 800edf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800edfa:	bf00      	nop
 800edfc:	e000ed08 	.word	0xe000ed08

0800ee00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b086      	sub	sp, #24
 800ee04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ee06:	4b47      	ldr	r3, [pc, #284]	@ (800ef24 <xPortStartScheduler+0x124>)
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	4a47      	ldr	r2, [pc, #284]	@ (800ef28 <xPortStartScheduler+0x128>)
 800ee0c:	4293      	cmp	r3, r2
 800ee0e:	d10b      	bne.n	800ee28 <xPortStartScheduler+0x28>
	__asm volatile
 800ee10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee14:	f383 8811 	msr	BASEPRI, r3
 800ee18:	f3bf 8f6f 	isb	sy
 800ee1c:	f3bf 8f4f 	dsb	sy
 800ee20:	613b      	str	r3, [r7, #16]
}
 800ee22:	bf00      	nop
 800ee24:	bf00      	nop
 800ee26:	e7fd      	b.n	800ee24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ee28:	4b3e      	ldr	r3, [pc, #248]	@ (800ef24 <xPortStartScheduler+0x124>)
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	4a3f      	ldr	r2, [pc, #252]	@ (800ef2c <xPortStartScheduler+0x12c>)
 800ee2e:	4293      	cmp	r3, r2
 800ee30:	d10b      	bne.n	800ee4a <xPortStartScheduler+0x4a>
	__asm volatile
 800ee32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee36:	f383 8811 	msr	BASEPRI, r3
 800ee3a:	f3bf 8f6f 	isb	sy
 800ee3e:	f3bf 8f4f 	dsb	sy
 800ee42:	60fb      	str	r3, [r7, #12]
}
 800ee44:	bf00      	nop
 800ee46:	bf00      	nop
 800ee48:	e7fd      	b.n	800ee46 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ee4a:	4b39      	ldr	r3, [pc, #228]	@ (800ef30 <xPortStartScheduler+0x130>)
 800ee4c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ee4e:	697b      	ldr	r3, [r7, #20]
 800ee50:	781b      	ldrb	r3, [r3, #0]
 800ee52:	b2db      	uxtb	r3, r3
 800ee54:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ee56:	697b      	ldr	r3, [r7, #20]
 800ee58:	22ff      	movs	r2, #255	@ 0xff
 800ee5a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ee5c:	697b      	ldr	r3, [r7, #20]
 800ee5e:	781b      	ldrb	r3, [r3, #0]
 800ee60:	b2db      	uxtb	r3, r3
 800ee62:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ee64:	78fb      	ldrb	r3, [r7, #3]
 800ee66:	b2db      	uxtb	r3, r3
 800ee68:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ee6c:	b2da      	uxtb	r2, r3
 800ee6e:	4b31      	ldr	r3, [pc, #196]	@ (800ef34 <xPortStartScheduler+0x134>)
 800ee70:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ee72:	4b31      	ldr	r3, [pc, #196]	@ (800ef38 <xPortStartScheduler+0x138>)
 800ee74:	2207      	movs	r2, #7
 800ee76:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ee78:	e009      	b.n	800ee8e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800ee7a:	4b2f      	ldr	r3, [pc, #188]	@ (800ef38 <xPortStartScheduler+0x138>)
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	3b01      	subs	r3, #1
 800ee80:	4a2d      	ldr	r2, [pc, #180]	@ (800ef38 <xPortStartScheduler+0x138>)
 800ee82:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ee84:	78fb      	ldrb	r3, [r7, #3]
 800ee86:	b2db      	uxtb	r3, r3
 800ee88:	005b      	lsls	r3, r3, #1
 800ee8a:	b2db      	uxtb	r3, r3
 800ee8c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ee8e:	78fb      	ldrb	r3, [r7, #3]
 800ee90:	b2db      	uxtb	r3, r3
 800ee92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ee96:	2b80      	cmp	r3, #128	@ 0x80
 800ee98:	d0ef      	beq.n	800ee7a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ee9a:	4b27      	ldr	r3, [pc, #156]	@ (800ef38 <xPortStartScheduler+0x138>)
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	f1c3 0307 	rsb	r3, r3, #7
 800eea2:	2b04      	cmp	r3, #4
 800eea4:	d00b      	beq.n	800eebe <xPortStartScheduler+0xbe>
	__asm volatile
 800eea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eeaa:	f383 8811 	msr	BASEPRI, r3
 800eeae:	f3bf 8f6f 	isb	sy
 800eeb2:	f3bf 8f4f 	dsb	sy
 800eeb6:	60bb      	str	r3, [r7, #8]
}
 800eeb8:	bf00      	nop
 800eeba:	bf00      	nop
 800eebc:	e7fd      	b.n	800eeba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800eebe:	4b1e      	ldr	r3, [pc, #120]	@ (800ef38 <xPortStartScheduler+0x138>)
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	021b      	lsls	r3, r3, #8
 800eec4:	4a1c      	ldr	r2, [pc, #112]	@ (800ef38 <xPortStartScheduler+0x138>)
 800eec6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800eec8:	4b1b      	ldr	r3, [pc, #108]	@ (800ef38 <xPortStartScheduler+0x138>)
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800eed0:	4a19      	ldr	r2, [pc, #100]	@ (800ef38 <xPortStartScheduler+0x138>)
 800eed2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	b2da      	uxtb	r2, r3
 800eed8:	697b      	ldr	r3, [r7, #20]
 800eeda:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800eedc:	4b17      	ldr	r3, [pc, #92]	@ (800ef3c <xPortStartScheduler+0x13c>)
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	4a16      	ldr	r2, [pc, #88]	@ (800ef3c <xPortStartScheduler+0x13c>)
 800eee2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800eee6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800eee8:	4b14      	ldr	r3, [pc, #80]	@ (800ef3c <xPortStartScheduler+0x13c>)
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	4a13      	ldr	r2, [pc, #76]	@ (800ef3c <xPortStartScheduler+0x13c>)
 800eeee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800eef2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800eef4:	f000 f9a6 	bl	800f244 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800eef8:	4b11      	ldr	r3, [pc, #68]	@ (800ef40 <xPortStartScheduler+0x140>)
 800eefa:	2200      	movs	r2, #0
 800eefc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800eefe:	f000 f9dd 	bl	800f2bc <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ef02:	4b10      	ldr	r3, [pc, #64]	@ (800ef44 <xPortStartScheduler+0x144>)
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	4a0f      	ldr	r2, [pc, #60]	@ (800ef44 <xPortStartScheduler+0x144>)
 800ef08:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800ef0c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ef0e:	f7ff ff63 	bl	800edd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ef12:	f7fe fed5 	bl	800dcc0 <vTaskSwitchContext>
	prvTaskExitError();
 800ef16:	f7ff ff19 	bl	800ed4c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ef1a:	2300      	movs	r3, #0
}
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	3718      	adds	r7, #24
 800ef20:	46bd      	mov	sp, r7
 800ef22:	bd80      	pop	{r7, pc}
 800ef24:	e000ed00 	.word	0xe000ed00
 800ef28:	410fc271 	.word	0x410fc271
 800ef2c:	410fc270 	.word	0x410fc270
 800ef30:	e000e400 	.word	0xe000e400
 800ef34:	24001204 	.word	0x24001204
 800ef38:	24001208 	.word	0x24001208
 800ef3c:	e000ed20 	.word	0xe000ed20
 800ef40:	24000010 	.word	0x24000010
 800ef44:	e000ef34 	.word	0xe000ef34

0800ef48 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ef48:	b480      	push	{r7}
 800ef4a:	b083      	sub	sp, #12
 800ef4c:	af00      	add	r7, sp, #0
	__asm volatile
 800ef4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef52:	f383 8811 	msr	BASEPRI, r3
 800ef56:	f3bf 8f6f 	isb	sy
 800ef5a:	f3bf 8f4f 	dsb	sy
 800ef5e:	607b      	str	r3, [r7, #4]
}
 800ef60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ef62:	4b10      	ldr	r3, [pc, #64]	@ (800efa4 <vPortEnterCritical+0x5c>)
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	3301      	adds	r3, #1
 800ef68:	4a0e      	ldr	r2, [pc, #56]	@ (800efa4 <vPortEnterCritical+0x5c>)
 800ef6a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ef6c:	4b0d      	ldr	r3, [pc, #52]	@ (800efa4 <vPortEnterCritical+0x5c>)
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	2b01      	cmp	r3, #1
 800ef72:	d110      	bne.n	800ef96 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ef74:	4b0c      	ldr	r3, [pc, #48]	@ (800efa8 <vPortEnterCritical+0x60>)
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	b2db      	uxtb	r3, r3
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d00b      	beq.n	800ef96 <vPortEnterCritical+0x4e>
	__asm volatile
 800ef7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef82:	f383 8811 	msr	BASEPRI, r3
 800ef86:	f3bf 8f6f 	isb	sy
 800ef8a:	f3bf 8f4f 	dsb	sy
 800ef8e:	603b      	str	r3, [r7, #0]
}
 800ef90:	bf00      	nop
 800ef92:	bf00      	nop
 800ef94:	e7fd      	b.n	800ef92 <vPortEnterCritical+0x4a>
	}
}
 800ef96:	bf00      	nop
 800ef98:	370c      	adds	r7, #12
 800ef9a:	46bd      	mov	sp, r7
 800ef9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa0:	4770      	bx	lr
 800efa2:	bf00      	nop
 800efa4:	24000010 	.word	0x24000010
 800efa8:	e000ed04 	.word	0xe000ed04

0800efac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800efac:	b480      	push	{r7}
 800efae:	b083      	sub	sp, #12
 800efb0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800efb2:	4b12      	ldr	r3, [pc, #72]	@ (800effc <vPortExitCritical+0x50>)
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d10b      	bne.n	800efd2 <vPortExitCritical+0x26>
	__asm volatile
 800efba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efbe:	f383 8811 	msr	BASEPRI, r3
 800efc2:	f3bf 8f6f 	isb	sy
 800efc6:	f3bf 8f4f 	dsb	sy
 800efca:	607b      	str	r3, [r7, #4]
}
 800efcc:	bf00      	nop
 800efce:	bf00      	nop
 800efd0:	e7fd      	b.n	800efce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800efd2:	4b0a      	ldr	r3, [pc, #40]	@ (800effc <vPortExitCritical+0x50>)
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	3b01      	subs	r3, #1
 800efd8:	4a08      	ldr	r2, [pc, #32]	@ (800effc <vPortExitCritical+0x50>)
 800efda:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800efdc:	4b07      	ldr	r3, [pc, #28]	@ (800effc <vPortExitCritical+0x50>)
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d105      	bne.n	800eff0 <vPortExitCritical+0x44>
 800efe4:	2300      	movs	r3, #0
 800efe6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800efe8:	683b      	ldr	r3, [r7, #0]
 800efea:	f383 8811 	msr	BASEPRI, r3
}
 800efee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800eff0:	bf00      	nop
 800eff2:	370c      	adds	r7, #12
 800eff4:	46bd      	mov	sp, r7
 800eff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effa:	4770      	bx	lr
 800effc:	24000010 	.word	0x24000010

0800f000 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f000:	f3ef 8009 	mrs	r0, PSP
 800f004:	f3bf 8f6f 	isb	sy
 800f008:	4b15      	ldr	r3, [pc, #84]	@ (800f060 <pxCurrentTCBConst>)
 800f00a:	681a      	ldr	r2, [r3, #0]
 800f00c:	f01e 0f10 	tst.w	lr, #16
 800f010:	bf08      	it	eq
 800f012:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f016:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f01a:	6010      	str	r0, [r2, #0]
 800f01c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f020:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800f024:	f380 8811 	msr	BASEPRI, r0
 800f028:	f3bf 8f4f 	dsb	sy
 800f02c:	f3bf 8f6f 	isb	sy
 800f030:	f7fe fe46 	bl	800dcc0 <vTaskSwitchContext>
 800f034:	f04f 0000 	mov.w	r0, #0
 800f038:	f380 8811 	msr	BASEPRI, r0
 800f03c:	bc09      	pop	{r0, r3}
 800f03e:	6819      	ldr	r1, [r3, #0]
 800f040:	6808      	ldr	r0, [r1, #0]
 800f042:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f046:	f01e 0f10 	tst.w	lr, #16
 800f04a:	bf08      	it	eq
 800f04c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f050:	f380 8809 	msr	PSP, r0
 800f054:	f3bf 8f6f 	isb	sy
 800f058:	4770      	bx	lr
 800f05a:	bf00      	nop
 800f05c:	f3af 8000 	nop.w

0800f060 <pxCurrentTCBConst>:
 800f060:	24000bcc 	.word	0x24000bcc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f064:	bf00      	nop
 800f066:	bf00      	nop

0800f068 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f068:	b580      	push	{r7, lr}
 800f06a:	b082      	sub	sp, #8
 800f06c:	af00      	add	r7, sp, #0
	__asm volatile
 800f06e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f072:	f383 8811 	msr	BASEPRI, r3
 800f076:	f3bf 8f6f 	isb	sy
 800f07a:	f3bf 8f4f 	dsb	sy
 800f07e:	607b      	str	r3, [r7, #4]
}
 800f080:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f082:	f7fe fd63 	bl	800db4c <xTaskIncrementTick>
 800f086:	4603      	mov	r3, r0
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d003      	beq.n	800f094 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f08c:	4b06      	ldr	r3, [pc, #24]	@ (800f0a8 <xPortSysTickHandler+0x40>)
 800f08e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f092:	601a      	str	r2, [r3, #0]
 800f094:	2300      	movs	r3, #0
 800f096:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f098:	683b      	ldr	r3, [r7, #0]
 800f09a:	f383 8811 	msr	BASEPRI, r3
}
 800f09e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f0a0:	bf00      	nop
 800f0a2:	3708      	adds	r7, #8
 800f0a4:	46bd      	mov	sp, r7
 800f0a6:	bd80      	pop	{r7, pc}
 800f0a8:	e000ed04 	.word	0xe000ed04

0800f0ac <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b088      	sub	sp, #32
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 800f0b4:	4b5d      	ldr	r3, [pc, #372]	@ (800f22c <vPortSuppressTicksAndSleep+0x180>)
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	687a      	ldr	r2, [r7, #4]
 800f0ba:	429a      	cmp	r2, r3
 800f0bc:	d902      	bls.n	800f0c4 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 800f0be:	4b5b      	ldr	r3, [pc, #364]	@ (800f22c <vPortSuppressTicksAndSleep+0x180>)
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 800f0c4:	4b5a      	ldr	r3, [pc, #360]	@ (800f230 <vPortSuppressTicksAndSleep+0x184>)
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	4a59      	ldr	r2, [pc, #356]	@ (800f230 <vPortSuppressTicksAndSleep+0x184>)
 800f0ca:	f023 0301 	bic.w	r3, r3, #1
 800f0ce:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 800f0d0:	4b58      	ldr	r3, [pc, #352]	@ (800f234 <vPortSuppressTicksAndSleep+0x188>)
 800f0d2:	681a      	ldr	r2, [r3, #0]
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	3b01      	subs	r3, #1
 800f0d8:	4957      	ldr	r1, [pc, #348]	@ (800f238 <vPortSuppressTicksAndSleep+0x18c>)
 800f0da:	6809      	ldr	r1, [r1, #0]
 800f0dc:	fb01 f303 	mul.w	r3, r1, r3
 800f0e0:	4413      	add	r3, r2
 800f0e2:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 800f0e4:	4b55      	ldr	r3, [pc, #340]	@ (800f23c <vPortSuppressTicksAndSleep+0x190>)
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	69fa      	ldr	r2, [r7, #28]
 800f0ea:	429a      	cmp	r2, r3
 800f0ec:	d904      	bls.n	800f0f8 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 800f0ee:	4b53      	ldr	r3, [pc, #332]	@ (800f23c <vPortSuppressTicksAndSleep+0x190>)
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	69fa      	ldr	r2, [r7, #28]
 800f0f4:	1ad3      	subs	r3, r2, r3
 800f0f6:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 800f0f8:	b672      	cpsid	i
		__asm volatile( "dsb" );
 800f0fa:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 800f0fe:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 800f102:	f7fe ffc1 	bl	800e088 <eTaskConfirmSleepModeStatus>
 800f106:	4603      	mov	r3, r0
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d110      	bne.n	800f12e <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800f10c:	4b49      	ldr	r3, [pc, #292]	@ (800f234 <vPortSuppressTicksAndSleep+0x188>)
 800f10e:	4a4c      	ldr	r2, [pc, #304]	@ (800f240 <vPortSuppressTicksAndSleep+0x194>)
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800f114:	4b46      	ldr	r3, [pc, #280]	@ (800f230 <vPortSuppressTicksAndSleep+0x184>)
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	4a45      	ldr	r2, [pc, #276]	@ (800f230 <vPortSuppressTicksAndSleep+0x184>)
 800f11a:	f043 0301 	orr.w	r3, r3, #1
 800f11e:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800f120:	4b45      	ldr	r3, [pc, #276]	@ (800f238 <vPortSuppressTicksAndSleep+0x18c>)
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	4a46      	ldr	r2, [pc, #280]	@ (800f240 <vPortSuppressTicksAndSleep+0x194>)
 800f126:	3b01      	subs	r3, #1
 800f128:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 800f12a:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrupts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 800f12c:	e079      	b.n	800f222 <vPortSuppressTicksAndSleep+0x176>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 800f12e:	4a44      	ldr	r2, [pc, #272]	@ (800f240 <vPortSuppressTicksAndSleep+0x194>)
 800f130:	69fb      	ldr	r3, [r7, #28]
 800f132:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f134:	4b3f      	ldr	r3, [pc, #252]	@ (800f234 <vPortSuppressTicksAndSleep+0x188>)
 800f136:	2200      	movs	r2, #0
 800f138:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800f13a:	4b3d      	ldr	r3, [pc, #244]	@ (800f230 <vPortSuppressTicksAndSleep+0x184>)
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	4a3c      	ldr	r2, [pc, #240]	@ (800f230 <vPortSuppressTicksAndSleep+0x184>)
 800f140:	f043 0301 	orr.w	r3, r3, #1
 800f144:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	613b      	str	r3, [r7, #16]
			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 800f14a:	2300      	movs	r3, #0
 800f14c:	613b      	str	r3, [r7, #16]
 800f14e:	6938      	ldr	r0, [r7, #16]
 800f150:	f7f1 fdaf 	bl	8000cb2 <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 800f154:	693b      	ldr	r3, [r7, #16]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d004      	beq.n	800f164 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 800f15a:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 800f15e:	bf30      	wfi
				__asm volatile( "isb" );
 800f160:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 800f164:	6878      	ldr	r0, [r7, #4]
 800f166:	f7f1 fdae 	bl	8000cc6 <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 800f16a:	b662      	cpsie	i
			__asm volatile( "dsb" );
 800f16c:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800f170:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 800f174:	b672      	cpsid	i
			__asm volatile( "dsb" );
 800f176:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800f17a:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 800f17e:	4b2c      	ldr	r3, [pc, #176]	@ (800f230 <vPortSuppressTicksAndSleep+0x184>)
 800f180:	2206      	movs	r2, #6
 800f182:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 800f184:	4b2a      	ldr	r3, [pc, #168]	@ (800f230 <vPortSuppressTicksAndSleep+0x184>)
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d01d      	beq.n	800f1cc <vPortSuppressTicksAndSleep+0x120>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 800f190:	4b29      	ldr	r3, [pc, #164]	@ (800f238 <vPortSuppressTicksAndSleep+0x18c>)
 800f192:	681a      	ldr	r2, [r3, #0]
 800f194:	4b27      	ldr	r3, [pc, #156]	@ (800f234 <vPortSuppressTicksAndSleep+0x188>)
 800f196:	6819      	ldr	r1, [r3, #0]
 800f198:	69fb      	ldr	r3, [r7, #28]
 800f19a:	1acb      	subs	r3, r1, r3
 800f19c:	4413      	add	r3, r2
 800f19e:	3b01      	subs	r3, #1
 800f1a0:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 800f1a2:	4b26      	ldr	r3, [pc, #152]	@ (800f23c <vPortSuppressTicksAndSleep+0x190>)
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	697a      	ldr	r2, [r7, #20]
 800f1a8:	429a      	cmp	r2, r3
 800f1aa:	d304      	bcc.n	800f1b6 <vPortSuppressTicksAndSleep+0x10a>
 800f1ac:	4b22      	ldr	r3, [pc, #136]	@ (800f238 <vPortSuppressTicksAndSleep+0x18c>)
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	697a      	ldr	r2, [r7, #20]
 800f1b2:	429a      	cmp	r2, r3
 800f1b4:	d903      	bls.n	800f1be <vPortSuppressTicksAndSleep+0x112>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 800f1b6:	4b20      	ldr	r3, [pc, #128]	@ (800f238 <vPortSuppressTicksAndSleep+0x18c>)
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	3b01      	subs	r3, #1
 800f1bc:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 800f1be:	4a20      	ldr	r2, [pc, #128]	@ (800f240 <vPortSuppressTicksAndSleep+0x194>)
 800f1c0:	697b      	ldr	r3, [r7, #20]
 800f1c2:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	3b01      	subs	r3, #1
 800f1c8:	61bb      	str	r3, [r7, #24]
 800f1ca:	e018      	b.n	800f1fe <vPortSuppressTicksAndSleep+0x152>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800f1cc:	4b1a      	ldr	r3, [pc, #104]	@ (800f238 <vPortSuppressTicksAndSleep+0x18c>)
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	687a      	ldr	r2, [r7, #4]
 800f1d2:	fb03 f202 	mul.w	r2, r3, r2
 800f1d6:	4b17      	ldr	r3, [pc, #92]	@ (800f234 <vPortSuppressTicksAndSleep+0x188>)
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	1ad3      	subs	r3, r2, r3
 800f1dc:	60fb      	str	r3, [r7, #12]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 800f1de:	4b16      	ldr	r3, [pc, #88]	@ (800f238 <vPortSuppressTicksAndSleep+0x18c>)
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	68fa      	ldr	r2, [r7, #12]
 800f1e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800f1e8:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 800f1ea:	69bb      	ldr	r3, [r7, #24]
 800f1ec:	3301      	adds	r3, #1
 800f1ee:	4a12      	ldr	r2, [pc, #72]	@ (800f238 <vPortSuppressTicksAndSleep+0x18c>)
 800f1f0:	6812      	ldr	r2, [r2, #0]
 800f1f2:	fb03 f202 	mul.w	r2, r3, r2
 800f1f6:	4912      	ldr	r1, [pc, #72]	@ (800f240 <vPortSuppressTicksAndSleep+0x194>)
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	1ad3      	subs	r3, r2, r3
 800f1fc:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f1fe:	4b0d      	ldr	r3, [pc, #52]	@ (800f234 <vPortSuppressTicksAndSleep+0x188>)
 800f200:	2200      	movs	r2, #0
 800f202:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800f204:	4b0a      	ldr	r3, [pc, #40]	@ (800f230 <vPortSuppressTicksAndSleep+0x184>)
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	4a09      	ldr	r2, [pc, #36]	@ (800f230 <vPortSuppressTicksAndSleep+0x184>)
 800f20a:	f043 0301 	orr.w	r3, r3, #1
 800f20e:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 800f210:	69b8      	ldr	r0, [r7, #24]
 800f212:	f7fe fc73 	bl	800dafc <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800f216:	4b08      	ldr	r3, [pc, #32]	@ (800f238 <vPortSuppressTicksAndSleep+0x18c>)
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	4a09      	ldr	r2, [pc, #36]	@ (800f240 <vPortSuppressTicksAndSleep+0x194>)
 800f21c:	3b01      	subs	r3, #1
 800f21e:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 800f220:	b662      	cpsie	i
	}
 800f222:	bf00      	nop
 800f224:	3720      	adds	r7, #32
 800f226:	46bd      	mov	sp, r7
 800f228:	bd80      	pop	{r7, pc}
 800f22a:	bf00      	nop
 800f22c:	240011fc 	.word	0x240011fc
 800f230:	e000e010 	.word	0xe000e010
 800f234:	e000e018 	.word	0xe000e018
 800f238:	240011f8 	.word	0x240011f8
 800f23c:	24001200 	.word	0x24001200
 800f240:	e000e014 	.word	0xe000e014

0800f244 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f244:	b480      	push	{r7}
 800f246:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 800f248:	4b14      	ldr	r3, [pc, #80]	@ (800f29c <vPortSetupTimerInterrupt+0x58>)
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	4a14      	ldr	r2, [pc, #80]	@ (800f2a0 <vPortSetupTimerInterrupt+0x5c>)
 800f24e:	fba2 2303 	umull	r2, r3, r2, r3
 800f252:	099b      	lsrs	r3, r3, #6
 800f254:	4a13      	ldr	r2, [pc, #76]	@ (800f2a4 <vPortSetupTimerInterrupt+0x60>)
 800f256:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 800f258:	4b12      	ldr	r3, [pc, #72]	@ (800f2a4 <vPortSetupTimerInterrupt+0x60>)
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800f260:	fbb2 f3f3 	udiv	r3, r2, r3
 800f264:	4a10      	ldr	r2, [pc, #64]	@ (800f2a8 <vPortSetupTimerInterrupt+0x64>)
 800f266:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 800f268:	4b10      	ldr	r3, [pc, #64]	@ (800f2ac <vPortSetupTimerInterrupt+0x68>)
 800f26a:	222d      	movs	r2, #45	@ 0x2d
 800f26c:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f26e:	4b10      	ldr	r3, [pc, #64]	@ (800f2b0 <vPortSetupTimerInterrupt+0x6c>)
 800f270:	2200      	movs	r2, #0
 800f272:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f274:	4b0f      	ldr	r3, [pc, #60]	@ (800f2b4 <vPortSetupTimerInterrupt+0x70>)
 800f276:	2200      	movs	r2, #0
 800f278:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f27a:	4b08      	ldr	r3, [pc, #32]	@ (800f29c <vPortSetupTimerInterrupt+0x58>)
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	4a08      	ldr	r2, [pc, #32]	@ (800f2a0 <vPortSetupTimerInterrupt+0x5c>)
 800f280:	fba2 2303 	umull	r2, r3, r2, r3
 800f284:	099b      	lsrs	r3, r3, #6
 800f286:	4a0c      	ldr	r2, [pc, #48]	@ (800f2b8 <vPortSetupTimerInterrupt+0x74>)
 800f288:	3b01      	subs	r3, #1
 800f28a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f28c:	4b08      	ldr	r3, [pc, #32]	@ (800f2b0 <vPortSetupTimerInterrupt+0x6c>)
 800f28e:	2207      	movs	r2, #7
 800f290:	601a      	str	r2, [r3, #0]
}
 800f292:	bf00      	nop
 800f294:	46bd      	mov	sp, r7
 800f296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f29a:	4770      	bx	lr
 800f29c:	24000000 	.word	0x24000000
 800f2a0:	10624dd3 	.word	0x10624dd3
 800f2a4:	240011f8 	.word	0x240011f8
 800f2a8:	240011fc 	.word	0x240011fc
 800f2ac:	24001200 	.word	0x24001200
 800f2b0:	e000e010 	.word	0xe000e010
 800f2b4:	e000e018 	.word	0xe000e018
 800f2b8:	e000e014 	.word	0xe000e014

0800f2bc <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f2bc:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800f2cc <vPortEnableVFP+0x10>
 800f2c0:	6801      	ldr	r1, [r0, #0]
 800f2c2:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800f2c6:	6001      	str	r1, [r0, #0]
 800f2c8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f2ca:	bf00      	nop
 800f2cc:	e000ed88 	.word	0xe000ed88

0800f2d0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f2d0:	b480      	push	{r7}
 800f2d2:	b085      	sub	sp, #20
 800f2d4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f2d6:	f3ef 8305 	mrs	r3, IPSR
 800f2da:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	2b0f      	cmp	r3, #15
 800f2e0:	d915      	bls.n	800f30e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f2e2:	4a18      	ldr	r2, [pc, #96]	@ (800f344 <vPortValidateInterruptPriority+0x74>)
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	4413      	add	r3, r2
 800f2e8:	781b      	ldrb	r3, [r3, #0]
 800f2ea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f2ec:	4b16      	ldr	r3, [pc, #88]	@ (800f348 <vPortValidateInterruptPriority+0x78>)
 800f2ee:	781b      	ldrb	r3, [r3, #0]
 800f2f0:	7afa      	ldrb	r2, [r7, #11]
 800f2f2:	429a      	cmp	r2, r3
 800f2f4:	d20b      	bcs.n	800f30e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800f2f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2fa:	f383 8811 	msr	BASEPRI, r3
 800f2fe:	f3bf 8f6f 	isb	sy
 800f302:	f3bf 8f4f 	dsb	sy
 800f306:	607b      	str	r3, [r7, #4]
}
 800f308:	bf00      	nop
 800f30a:	bf00      	nop
 800f30c:	e7fd      	b.n	800f30a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f30e:	4b0f      	ldr	r3, [pc, #60]	@ (800f34c <vPortValidateInterruptPriority+0x7c>)
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800f316:	4b0e      	ldr	r3, [pc, #56]	@ (800f350 <vPortValidateInterruptPriority+0x80>)
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	429a      	cmp	r2, r3
 800f31c:	d90b      	bls.n	800f336 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800f31e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f322:	f383 8811 	msr	BASEPRI, r3
 800f326:	f3bf 8f6f 	isb	sy
 800f32a:	f3bf 8f4f 	dsb	sy
 800f32e:	603b      	str	r3, [r7, #0]
}
 800f330:	bf00      	nop
 800f332:	bf00      	nop
 800f334:	e7fd      	b.n	800f332 <vPortValidateInterruptPriority+0x62>
	}
 800f336:	bf00      	nop
 800f338:	3714      	adds	r7, #20
 800f33a:	46bd      	mov	sp, r7
 800f33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f340:	4770      	bx	lr
 800f342:	bf00      	nop
 800f344:	e000e3f0 	.word	0xe000e3f0
 800f348:	24001204 	.word	0x24001204
 800f34c:	e000ed0c 	.word	0xe000ed0c
 800f350:	24001208 	.word	0x24001208

0800f354 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f354:	b580      	push	{r7, lr}
 800f356:	b08a      	sub	sp, #40	@ 0x28
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f35c:	2300      	movs	r3, #0
 800f35e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f360:	f7fe fad8 	bl	800d914 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f364:	4b5c      	ldr	r3, [pc, #368]	@ (800f4d8 <pvPortMalloc+0x184>)
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d101      	bne.n	800f370 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f36c:	f000 f924 	bl	800f5b8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f370:	4b5a      	ldr	r3, [pc, #360]	@ (800f4dc <pvPortMalloc+0x188>)
 800f372:	681a      	ldr	r2, [r3, #0]
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	4013      	ands	r3, r2
 800f378:	2b00      	cmp	r3, #0
 800f37a:	f040 8095 	bne.w	800f4a8 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d01e      	beq.n	800f3c2 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800f384:	2208      	movs	r2, #8
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	4413      	add	r3, r2
 800f38a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	f003 0307 	and.w	r3, r3, #7
 800f392:	2b00      	cmp	r3, #0
 800f394:	d015      	beq.n	800f3c2 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	f023 0307 	bic.w	r3, r3, #7
 800f39c:	3308      	adds	r3, #8
 800f39e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	f003 0307 	and.w	r3, r3, #7
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d00b      	beq.n	800f3c2 <pvPortMalloc+0x6e>
	__asm volatile
 800f3aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3ae:	f383 8811 	msr	BASEPRI, r3
 800f3b2:	f3bf 8f6f 	isb	sy
 800f3b6:	f3bf 8f4f 	dsb	sy
 800f3ba:	617b      	str	r3, [r7, #20]
}
 800f3bc:	bf00      	nop
 800f3be:	bf00      	nop
 800f3c0:	e7fd      	b.n	800f3be <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d06f      	beq.n	800f4a8 <pvPortMalloc+0x154>
 800f3c8:	4b45      	ldr	r3, [pc, #276]	@ (800f4e0 <pvPortMalloc+0x18c>)
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	687a      	ldr	r2, [r7, #4]
 800f3ce:	429a      	cmp	r2, r3
 800f3d0:	d86a      	bhi.n	800f4a8 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f3d2:	4b44      	ldr	r3, [pc, #272]	@ (800f4e4 <pvPortMalloc+0x190>)
 800f3d4:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f3d6:	4b43      	ldr	r3, [pc, #268]	@ (800f4e4 <pvPortMalloc+0x190>)
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f3dc:	e004      	b.n	800f3e8 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800f3de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3e0:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f3e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f3e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3ea:	685b      	ldr	r3, [r3, #4]
 800f3ec:	687a      	ldr	r2, [r7, #4]
 800f3ee:	429a      	cmp	r2, r3
 800f3f0:	d903      	bls.n	800f3fa <pvPortMalloc+0xa6>
 800f3f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d1f1      	bne.n	800f3de <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f3fa:	4b37      	ldr	r3, [pc, #220]	@ (800f4d8 <pvPortMalloc+0x184>)
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f400:	429a      	cmp	r2, r3
 800f402:	d051      	beq.n	800f4a8 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f404:	6a3b      	ldr	r3, [r7, #32]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	2208      	movs	r2, #8
 800f40a:	4413      	add	r3, r2
 800f40c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f40e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f410:	681a      	ldr	r2, [r3, #0]
 800f412:	6a3b      	ldr	r3, [r7, #32]
 800f414:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f418:	685a      	ldr	r2, [r3, #4]
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	1ad2      	subs	r2, r2, r3
 800f41e:	2308      	movs	r3, #8
 800f420:	005b      	lsls	r3, r3, #1
 800f422:	429a      	cmp	r2, r3
 800f424:	d920      	bls.n	800f468 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f426:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	4413      	add	r3, r2
 800f42c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f42e:	69bb      	ldr	r3, [r7, #24]
 800f430:	f003 0307 	and.w	r3, r3, #7
 800f434:	2b00      	cmp	r3, #0
 800f436:	d00b      	beq.n	800f450 <pvPortMalloc+0xfc>
	__asm volatile
 800f438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f43c:	f383 8811 	msr	BASEPRI, r3
 800f440:	f3bf 8f6f 	isb	sy
 800f444:	f3bf 8f4f 	dsb	sy
 800f448:	613b      	str	r3, [r7, #16]
}
 800f44a:	bf00      	nop
 800f44c:	bf00      	nop
 800f44e:	e7fd      	b.n	800f44c <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f452:	685a      	ldr	r2, [r3, #4]
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	1ad2      	subs	r2, r2, r3
 800f458:	69bb      	ldr	r3, [r7, #24]
 800f45a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f45c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f45e:	687a      	ldr	r2, [r7, #4]
 800f460:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f462:	69b8      	ldr	r0, [r7, #24]
 800f464:	f000 f90a 	bl	800f67c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f468:	4b1d      	ldr	r3, [pc, #116]	@ (800f4e0 <pvPortMalloc+0x18c>)
 800f46a:	681a      	ldr	r2, [r3, #0]
 800f46c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f46e:	685b      	ldr	r3, [r3, #4]
 800f470:	1ad3      	subs	r3, r2, r3
 800f472:	4a1b      	ldr	r2, [pc, #108]	@ (800f4e0 <pvPortMalloc+0x18c>)
 800f474:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f476:	4b1a      	ldr	r3, [pc, #104]	@ (800f4e0 <pvPortMalloc+0x18c>)
 800f478:	681a      	ldr	r2, [r3, #0]
 800f47a:	4b1b      	ldr	r3, [pc, #108]	@ (800f4e8 <pvPortMalloc+0x194>)
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	429a      	cmp	r2, r3
 800f480:	d203      	bcs.n	800f48a <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f482:	4b17      	ldr	r3, [pc, #92]	@ (800f4e0 <pvPortMalloc+0x18c>)
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	4a18      	ldr	r2, [pc, #96]	@ (800f4e8 <pvPortMalloc+0x194>)
 800f488:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f48a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f48c:	685a      	ldr	r2, [r3, #4]
 800f48e:	4b13      	ldr	r3, [pc, #76]	@ (800f4dc <pvPortMalloc+0x188>)
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	431a      	orrs	r2, r3
 800f494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f496:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f49a:	2200      	movs	r2, #0
 800f49c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f49e:	4b13      	ldr	r3, [pc, #76]	@ (800f4ec <pvPortMalloc+0x198>)
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	3301      	adds	r3, #1
 800f4a4:	4a11      	ldr	r2, [pc, #68]	@ (800f4ec <pvPortMalloc+0x198>)
 800f4a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f4a8:	f7fe fa7a 	bl	800d9a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f4ac:	69fb      	ldr	r3, [r7, #28]
 800f4ae:	f003 0307 	and.w	r3, r3, #7
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d00b      	beq.n	800f4ce <pvPortMalloc+0x17a>
	__asm volatile
 800f4b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4ba:	f383 8811 	msr	BASEPRI, r3
 800f4be:	f3bf 8f6f 	isb	sy
 800f4c2:	f3bf 8f4f 	dsb	sy
 800f4c6:	60fb      	str	r3, [r7, #12]
}
 800f4c8:	bf00      	nop
 800f4ca:	bf00      	nop
 800f4cc:	e7fd      	b.n	800f4ca <pvPortMalloc+0x176>
	return pvReturn;
 800f4ce:	69fb      	ldr	r3, [r7, #28]
}
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	3728      	adds	r7, #40	@ 0x28
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	bd80      	pop	{r7, pc}
 800f4d8:	24004e14 	.word	0x24004e14
 800f4dc:	24004e28 	.word	0x24004e28
 800f4e0:	24004e18 	.word	0x24004e18
 800f4e4:	24004e0c 	.word	0x24004e0c
 800f4e8:	24004e1c 	.word	0x24004e1c
 800f4ec:	24004e20 	.word	0x24004e20

0800f4f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	b086      	sub	sp, #24
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d04f      	beq.n	800f5a2 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f502:	2308      	movs	r3, #8
 800f504:	425b      	negs	r3, r3
 800f506:	697a      	ldr	r2, [r7, #20]
 800f508:	4413      	add	r3, r2
 800f50a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f50c:	697b      	ldr	r3, [r7, #20]
 800f50e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f510:	693b      	ldr	r3, [r7, #16]
 800f512:	685a      	ldr	r2, [r3, #4]
 800f514:	4b25      	ldr	r3, [pc, #148]	@ (800f5ac <vPortFree+0xbc>)
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	4013      	ands	r3, r2
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d10b      	bne.n	800f536 <vPortFree+0x46>
	__asm volatile
 800f51e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f522:	f383 8811 	msr	BASEPRI, r3
 800f526:	f3bf 8f6f 	isb	sy
 800f52a:	f3bf 8f4f 	dsb	sy
 800f52e:	60fb      	str	r3, [r7, #12]
}
 800f530:	bf00      	nop
 800f532:	bf00      	nop
 800f534:	e7fd      	b.n	800f532 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f536:	693b      	ldr	r3, [r7, #16]
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d00b      	beq.n	800f556 <vPortFree+0x66>
	__asm volatile
 800f53e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f542:	f383 8811 	msr	BASEPRI, r3
 800f546:	f3bf 8f6f 	isb	sy
 800f54a:	f3bf 8f4f 	dsb	sy
 800f54e:	60bb      	str	r3, [r7, #8]
}
 800f550:	bf00      	nop
 800f552:	bf00      	nop
 800f554:	e7fd      	b.n	800f552 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f556:	693b      	ldr	r3, [r7, #16]
 800f558:	685a      	ldr	r2, [r3, #4]
 800f55a:	4b14      	ldr	r3, [pc, #80]	@ (800f5ac <vPortFree+0xbc>)
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	4013      	ands	r3, r2
 800f560:	2b00      	cmp	r3, #0
 800f562:	d01e      	beq.n	800f5a2 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f564:	693b      	ldr	r3, [r7, #16]
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d11a      	bne.n	800f5a2 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f56c:	693b      	ldr	r3, [r7, #16]
 800f56e:	685a      	ldr	r2, [r3, #4]
 800f570:	4b0e      	ldr	r3, [pc, #56]	@ (800f5ac <vPortFree+0xbc>)
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	43db      	mvns	r3, r3
 800f576:	401a      	ands	r2, r3
 800f578:	693b      	ldr	r3, [r7, #16]
 800f57a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f57c:	f7fe f9ca 	bl	800d914 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f580:	693b      	ldr	r3, [r7, #16]
 800f582:	685a      	ldr	r2, [r3, #4]
 800f584:	4b0a      	ldr	r3, [pc, #40]	@ (800f5b0 <vPortFree+0xc0>)
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	4413      	add	r3, r2
 800f58a:	4a09      	ldr	r2, [pc, #36]	@ (800f5b0 <vPortFree+0xc0>)
 800f58c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f58e:	6938      	ldr	r0, [r7, #16]
 800f590:	f000 f874 	bl	800f67c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f594:	4b07      	ldr	r3, [pc, #28]	@ (800f5b4 <vPortFree+0xc4>)
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	3301      	adds	r3, #1
 800f59a:	4a06      	ldr	r2, [pc, #24]	@ (800f5b4 <vPortFree+0xc4>)
 800f59c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f59e:	f7fe f9ff 	bl	800d9a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f5a2:	bf00      	nop
 800f5a4:	3718      	adds	r7, #24
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	bd80      	pop	{r7, pc}
 800f5aa:	bf00      	nop
 800f5ac:	24004e28 	.word	0x24004e28
 800f5b0:	24004e18 	.word	0x24004e18
 800f5b4:	24004e24 	.word	0x24004e24

0800f5b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f5b8:	b480      	push	{r7}
 800f5ba:	b085      	sub	sp, #20
 800f5bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f5be:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800f5c2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f5c4:	4b27      	ldr	r3, [pc, #156]	@ (800f664 <prvHeapInit+0xac>)
 800f5c6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	f003 0307 	and.w	r3, r3, #7
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d00c      	beq.n	800f5ec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	3307      	adds	r3, #7
 800f5d6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	f023 0307 	bic.w	r3, r3, #7
 800f5de:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f5e0:	68ba      	ldr	r2, [r7, #8]
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	1ad3      	subs	r3, r2, r3
 800f5e6:	4a1f      	ldr	r2, [pc, #124]	@ (800f664 <prvHeapInit+0xac>)
 800f5e8:	4413      	add	r3, r2
 800f5ea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f5f0:	4a1d      	ldr	r2, [pc, #116]	@ (800f668 <prvHeapInit+0xb0>)
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f5f6:	4b1c      	ldr	r3, [pc, #112]	@ (800f668 <prvHeapInit+0xb0>)
 800f5f8:	2200      	movs	r2, #0
 800f5fa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	68ba      	ldr	r2, [r7, #8]
 800f600:	4413      	add	r3, r2
 800f602:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f604:	2208      	movs	r2, #8
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	1a9b      	subs	r3, r3, r2
 800f60a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	f023 0307 	bic.w	r3, r3, #7
 800f612:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	4a15      	ldr	r2, [pc, #84]	@ (800f66c <prvHeapInit+0xb4>)
 800f618:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f61a:	4b14      	ldr	r3, [pc, #80]	@ (800f66c <prvHeapInit+0xb4>)
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	2200      	movs	r2, #0
 800f620:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f622:	4b12      	ldr	r3, [pc, #72]	@ (800f66c <prvHeapInit+0xb4>)
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	2200      	movs	r2, #0
 800f628:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f62e:	683b      	ldr	r3, [r7, #0]
 800f630:	68fa      	ldr	r2, [r7, #12]
 800f632:	1ad2      	subs	r2, r2, r3
 800f634:	683b      	ldr	r3, [r7, #0]
 800f636:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f638:	4b0c      	ldr	r3, [pc, #48]	@ (800f66c <prvHeapInit+0xb4>)
 800f63a:	681a      	ldr	r2, [r3, #0]
 800f63c:	683b      	ldr	r3, [r7, #0]
 800f63e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f640:	683b      	ldr	r3, [r7, #0]
 800f642:	685b      	ldr	r3, [r3, #4]
 800f644:	4a0a      	ldr	r2, [pc, #40]	@ (800f670 <prvHeapInit+0xb8>)
 800f646:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f648:	683b      	ldr	r3, [r7, #0]
 800f64a:	685b      	ldr	r3, [r3, #4]
 800f64c:	4a09      	ldr	r2, [pc, #36]	@ (800f674 <prvHeapInit+0xbc>)
 800f64e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f650:	4b09      	ldr	r3, [pc, #36]	@ (800f678 <prvHeapInit+0xc0>)
 800f652:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800f656:	601a      	str	r2, [r3, #0]
}
 800f658:	bf00      	nop
 800f65a:	3714      	adds	r7, #20
 800f65c:	46bd      	mov	sp, r7
 800f65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f662:	4770      	bx	lr
 800f664:	2400120c 	.word	0x2400120c
 800f668:	24004e0c 	.word	0x24004e0c
 800f66c:	24004e14 	.word	0x24004e14
 800f670:	24004e1c 	.word	0x24004e1c
 800f674:	24004e18 	.word	0x24004e18
 800f678:	24004e28 	.word	0x24004e28

0800f67c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f67c:	b480      	push	{r7}
 800f67e:	b085      	sub	sp, #20
 800f680:	af00      	add	r7, sp, #0
 800f682:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f684:	4b28      	ldr	r3, [pc, #160]	@ (800f728 <prvInsertBlockIntoFreeList+0xac>)
 800f686:	60fb      	str	r3, [r7, #12]
 800f688:	e002      	b.n	800f690 <prvInsertBlockIntoFreeList+0x14>
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	60fb      	str	r3, [r7, #12]
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	687a      	ldr	r2, [r7, #4]
 800f696:	429a      	cmp	r2, r3
 800f698:	d8f7      	bhi.n	800f68a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	685b      	ldr	r3, [r3, #4]
 800f6a2:	68ba      	ldr	r2, [r7, #8]
 800f6a4:	4413      	add	r3, r2
 800f6a6:	687a      	ldr	r2, [r7, #4]
 800f6a8:	429a      	cmp	r2, r3
 800f6aa:	d108      	bne.n	800f6be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	685a      	ldr	r2, [r3, #4]
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	685b      	ldr	r3, [r3, #4]
 800f6b4:	441a      	add	r2, r3
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	685b      	ldr	r3, [r3, #4]
 800f6c6:	68ba      	ldr	r2, [r7, #8]
 800f6c8:	441a      	add	r2, r3
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	429a      	cmp	r2, r3
 800f6d0:	d118      	bne.n	800f704 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	681a      	ldr	r2, [r3, #0]
 800f6d6:	4b15      	ldr	r3, [pc, #84]	@ (800f72c <prvInsertBlockIntoFreeList+0xb0>)
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	429a      	cmp	r2, r3
 800f6dc:	d00d      	beq.n	800f6fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	685a      	ldr	r2, [r3, #4]
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	685b      	ldr	r3, [r3, #4]
 800f6e8:	441a      	add	r2, r3
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	681a      	ldr	r2, [r3, #0]
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	601a      	str	r2, [r3, #0]
 800f6f8:	e008      	b.n	800f70c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f6fa:	4b0c      	ldr	r3, [pc, #48]	@ (800f72c <prvInsertBlockIntoFreeList+0xb0>)
 800f6fc:	681a      	ldr	r2, [r3, #0]
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	601a      	str	r2, [r3, #0]
 800f702:	e003      	b.n	800f70c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	681a      	ldr	r2, [r3, #0]
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f70c:	68fa      	ldr	r2, [r7, #12]
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	429a      	cmp	r2, r3
 800f712:	d002      	beq.n	800f71a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	687a      	ldr	r2, [r7, #4]
 800f718:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f71a:	bf00      	nop
 800f71c:	3714      	adds	r7, #20
 800f71e:	46bd      	mov	sp, r7
 800f720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f724:	4770      	bx	lr
 800f726:	bf00      	nop
 800f728:	24004e0c 	.word	0x24004e0c
 800f72c:	24004e14 	.word	0x24004e14

0800f730 <_ZdlPvj>:
 800f730:	f000 b815 	b.w	800f75e <_ZdlPv>

0800f734 <_ZdaPv>:
 800f734:	f000 b813 	b.w	800f75e <_ZdlPv>

0800f738 <_Znwj>:
 800f738:	2801      	cmp	r0, #1
 800f73a:	bf38      	it	cc
 800f73c:	2001      	movcc	r0, #1
 800f73e:	b510      	push	{r4, lr}
 800f740:	4604      	mov	r4, r0
 800f742:	4620      	mov	r0, r4
 800f744:	f000 f83c 	bl	800f7c0 <malloc>
 800f748:	b100      	cbz	r0, 800f74c <_Znwj+0x14>
 800f74a:	bd10      	pop	{r4, pc}
 800f74c:	f000 f80a 	bl	800f764 <_ZSt15get_new_handlerv>
 800f750:	b908      	cbnz	r0, 800f756 <_Znwj+0x1e>
 800f752:	f000 f80f 	bl	800f774 <abort>
 800f756:	4780      	blx	r0
 800f758:	e7f3      	b.n	800f742 <_Znwj+0xa>

0800f75a <_Znaj>:
 800f75a:	f7ff bfed 	b.w	800f738 <_Znwj>

0800f75e <_ZdlPv>:
 800f75e:	f000 b837 	b.w	800f7d0 <free>
	...

0800f764 <_ZSt15get_new_handlerv>:
 800f764:	4b02      	ldr	r3, [pc, #8]	@ (800f770 <_ZSt15get_new_handlerv+0xc>)
 800f766:	6818      	ldr	r0, [r3, #0]
 800f768:	f3bf 8f5b 	dmb	ish
 800f76c:	4770      	bx	lr
 800f76e:	bf00      	nop
 800f770:	24004e2c 	.word	0x24004e2c

0800f774 <abort>:
 800f774:	b508      	push	{r3, lr}
 800f776:	2006      	movs	r0, #6
 800f778:	f001 f98e 	bl	8010a98 <raise>
 800f77c:	2001      	movs	r0, #1
 800f77e:	f7f1 ffa5 	bl	80016cc <_exit>
	...

0800f784 <__assert_func>:
 800f784:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f786:	4614      	mov	r4, r2
 800f788:	461a      	mov	r2, r3
 800f78a:	4b09      	ldr	r3, [pc, #36]	@ (800f7b0 <__assert_func+0x2c>)
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	4605      	mov	r5, r0
 800f790:	68d8      	ldr	r0, [r3, #12]
 800f792:	b954      	cbnz	r4, 800f7aa <__assert_func+0x26>
 800f794:	4b07      	ldr	r3, [pc, #28]	@ (800f7b4 <__assert_func+0x30>)
 800f796:	461c      	mov	r4, r3
 800f798:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f79c:	9100      	str	r1, [sp, #0]
 800f79e:	462b      	mov	r3, r5
 800f7a0:	4905      	ldr	r1, [pc, #20]	@ (800f7b8 <__assert_func+0x34>)
 800f7a2:	f000 ffb1 	bl	8010708 <fiprintf>
 800f7a6:	f7ff ffe5 	bl	800f774 <abort>
 800f7aa:	4b04      	ldr	r3, [pc, #16]	@ (800f7bc <__assert_func+0x38>)
 800f7ac:	e7f4      	b.n	800f798 <__assert_func+0x14>
 800f7ae:	bf00      	nop
 800f7b0:	24000020 	.word	0x24000020
 800f7b4:	0801419f 	.word	0x0801419f
 800f7b8:	08014171 	.word	0x08014171
 800f7bc:	08014164 	.word	0x08014164

0800f7c0 <malloc>:
 800f7c0:	4b02      	ldr	r3, [pc, #8]	@ (800f7cc <malloc+0xc>)
 800f7c2:	4601      	mov	r1, r0
 800f7c4:	6818      	ldr	r0, [r3, #0]
 800f7c6:	f000 b82d 	b.w	800f824 <_malloc_r>
 800f7ca:	bf00      	nop
 800f7cc:	24000020 	.word	0x24000020

0800f7d0 <free>:
 800f7d0:	4b02      	ldr	r3, [pc, #8]	@ (800f7dc <free+0xc>)
 800f7d2:	4601      	mov	r1, r0
 800f7d4:	6818      	ldr	r0, [r3, #0]
 800f7d6:	f002 b84d 	b.w	8011874 <_free_r>
 800f7da:	bf00      	nop
 800f7dc:	24000020 	.word	0x24000020

0800f7e0 <sbrk_aligned>:
 800f7e0:	b570      	push	{r4, r5, r6, lr}
 800f7e2:	4e0f      	ldr	r6, [pc, #60]	@ (800f820 <sbrk_aligned+0x40>)
 800f7e4:	460c      	mov	r4, r1
 800f7e6:	6831      	ldr	r1, [r6, #0]
 800f7e8:	4605      	mov	r5, r0
 800f7ea:	b911      	cbnz	r1, 800f7f2 <sbrk_aligned+0x12>
 800f7ec:	f001 f9fe 	bl	8010bec <_sbrk_r>
 800f7f0:	6030      	str	r0, [r6, #0]
 800f7f2:	4621      	mov	r1, r4
 800f7f4:	4628      	mov	r0, r5
 800f7f6:	f001 f9f9 	bl	8010bec <_sbrk_r>
 800f7fa:	1c43      	adds	r3, r0, #1
 800f7fc:	d103      	bne.n	800f806 <sbrk_aligned+0x26>
 800f7fe:	f04f 34ff 	mov.w	r4, #4294967295
 800f802:	4620      	mov	r0, r4
 800f804:	bd70      	pop	{r4, r5, r6, pc}
 800f806:	1cc4      	adds	r4, r0, #3
 800f808:	f024 0403 	bic.w	r4, r4, #3
 800f80c:	42a0      	cmp	r0, r4
 800f80e:	d0f8      	beq.n	800f802 <sbrk_aligned+0x22>
 800f810:	1a21      	subs	r1, r4, r0
 800f812:	4628      	mov	r0, r5
 800f814:	f001 f9ea 	bl	8010bec <_sbrk_r>
 800f818:	3001      	adds	r0, #1
 800f81a:	d1f2      	bne.n	800f802 <sbrk_aligned+0x22>
 800f81c:	e7ef      	b.n	800f7fe <sbrk_aligned+0x1e>
 800f81e:	bf00      	nop
 800f820:	24004e30 	.word	0x24004e30

0800f824 <_malloc_r>:
 800f824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f828:	1ccd      	adds	r5, r1, #3
 800f82a:	f025 0503 	bic.w	r5, r5, #3
 800f82e:	3508      	adds	r5, #8
 800f830:	2d0c      	cmp	r5, #12
 800f832:	bf38      	it	cc
 800f834:	250c      	movcc	r5, #12
 800f836:	2d00      	cmp	r5, #0
 800f838:	4606      	mov	r6, r0
 800f83a:	db01      	blt.n	800f840 <_malloc_r+0x1c>
 800f83c:	42a9      	cmp	r1, r5
 800f83e:	d904      	bls.n	800f84a <_malloc_r+0x26>
 800f840:	230c      	movs	r3, #12
 800f842:	6033      	str	r3, [r6, #0]
 800f844:	2000      	movs	r0, #0
 800f846:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f84a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f920 <_malloc_r+0xfc>
 800f84e:	f000 f869 	bl	800f924 <__malloc_lock>
 800f852:	f8d8 3000 	ldr.w	r3, [r8]
 800f856:	461c      	mov	r4, r3
 800f858:	bb44      	cbnz	r4, 800f8ac <_malloc_r+0x88>
 800f85a:	4629      	mov	r1, r5
 800f85c:	4630      	mov	r0, r6
 800f85e:	f7ff ffbf 	bl	800f7e0 <sbrk_aligned>
 800f862:	1c43      	adds	r3, r0, #1
 800f864:	4604      	mov	r4, r0
 800f866:	d158      	bne.n	800f91a <_malloc_r+0xf6>
 800f868:	f8d8 4000 	ldr.w	r4, [r8]
 800f86c:	4627      	mov	r7, r4
 800f86e:	2f00      	cmp	r7, #0
 800f870:	d143      	bne.n	800f8fa <_malloc_r+0xd6>
 800f872:	2c00      	cmp	r4, #0
 800f874:	d04b      	beq.n	800f90e <_malloc_r+0xea>
 800f876:	6823      	ldr	r3, [r4, #0]
 800f878:	4639      	mov	r1, r7
 800f87a:	4630      	mov	r0, r6
 800f87c:	eb04 0903 	add.w	r9, r4, r3
 800f880:	f001 f9b4 	bl	8010bec <_sbrk_r>
 800f884:	4581      	cmp	r9, r0
 800f886:	d142      	bne.n	800f90e <_malloc_r+0xea>
 800f888:	6821      	ldr	r1, [r4, #0]
 800f88a:	1a6d      	subs	r5, r5, r1
 800f88c:	4629      	mov	r1, r5
 800f88e:	4630      	mov	r0, r6
 800f890:	f7ff ffa6 	bl	800f7e0 <sbrk_aligned>
 800f894:	3001      	adds	r0, #1
 800f896:	d03a      	beq.n	800f90e <_malloc_r+0xea>
 800f898:	6823      	ldr	r3, [r4, #0]
 800f89a:	442b      	add	r3, r5
 800f89c:	6023      	str	r3, [r4, #0]
 800f89e:	f8d8 3000 	ldr.w	r3, [r8]
 800f8a2:	685a      	ldr	r2, [r3, #4]
 800f8a4:	bb62      	cbnz	r2, 800f900 <_malloc_r+0xdc>
 800f8a6:	f8c8 7000 	str.w	r7, [r8]
 800f8aa:	e00f      	b.n	800f8cc <_malloc_r+0xa8>
 800f8ac:	6822      	ldr	r2, [r4, #0]
 800f8ae:	1b52      	subs	r2, r2, r5
 800f8b0:	d420      	bmi.n	800f8f4 <_malloc_r+0xd0>
 800f8b2:	2a0b      	cmp	r2, #11
 800f8b4:	d917      	bls.n	800f8e6 <_malloc_r+0xc2>
 800f8b6:	1961      	adds	r1, r4, r5
 800f8b8:	42a3      	cmp	r3, r4
 800f8ba:	6025      	str	r5, [r4, #0]
 800f8bc:	bf18      	it	ne
 800f8be:	6059      	strne	r1, [r3, #4]
 800f8c0:	6863      	ldr	r3, [r4, #4]
 800f8c2:	bf08      	it	eq
 800f8c4:	f8c8 1000 	streq.w	r1, [r8]
 800f8c8:	5162      	str	r2, [r4, r5]
 800f8ca:	604b      	str	r3, [r1, #4]
 800f8cc:	4630      	mov	r0, r6
 800f8ce:	f000 f82f 	bl	800f930 <__malloc_unlock>
 800f8d2:	f104 000b 	add.w	r0, r4, #11
 800f8d6:	1d23      	adds	r3, r4, #4
 800f8d8:	f020 0007 	bic.w	r0, r0, #7
 800f8dc:	1ac2      	subs	r2, r0, r3
 800f8de:	bf1c      	itt	ne
 800f8e0:	1a1b      	subne	r3, r3, r0
 800f8e2:	50a3      	strne	r3, [r4, r2]
 800f8e4:	e7af      	b.n	800f846 <_malloc_r+0x22>
 800f8e6:	6862      	ldr	r2, [r4, #4]
 800f8e8:	42a3      	cmp	r3, r4
 800f8ea:	bf0c      	ite	eq
 800f8ec:	f8c8 2000 	streq.w	r2, [r8]
 800f8f0:	605a      	strne	r2, [r3, #4]
 800f8f2:	e7eb      	b.n	800f8cc <_malloc_r+0xa8>
 800f8f4:	4623      	mov	r3, r4
 800f8f6:	6864      	ldr	r4, [r4, #4]
 800f8f8:	e7ae      	b.n	800f858 <_malloc_r+0x34>
 800f8fa:	463c      	mov	r4, r7
 800f8fc:	687f      	ldr	r7, [r7, #4]
 800f8fe:	e7b6      	b.n	800f86e <_malloc_r+0x4a>
 800f900:	461a      	mov	r2, r3
 800f902:	685b      	ldr	r3, [r3, #4]
 800f904:	42a3      	cmp	r3, r4
 800f906:	d1fb      	bne.n	800f900 <_malloc_r+0xdc>
 800f908:	2300      	movs	r3, #0
 800f90a:	6053      	str	r3, [r2, #4]
 800f90c:	e7de      	b.n	800f8cc <_malloc_r+0xa8>
 800f90e:	230c      	movs	r3, #12
 800f910:	6033      	str	r3, [r6, #0]
 800f912:	4630      	mov	r0, r6
 800f914:	f000 f80c 	bl	800f930 <__malloc_unlock>
 800f918:	e794      	b.n	800f844 <_malloc_r+0x20>
 800f91a:	6005      	str	r5, [r0, #0]
 800f91c:	e7d6      	b.n	800f8cc <_malloc_r+0xa8>
 800f91e:	bf00      	nop
 800f920:	24004e34 	.word	0x24004e34

0800f924 <__malloc_lock>:
 800f924:	4801      	ldr	r0, [pc, #4]	@ (800f92c <__malloc_lock+0x8>)
 800f926:	f001 b9ae 	b.w	8010c86 <__retarget_lock_acquire_recursive>
 800f92a:	bf00      	nop
 800f92c:	24004f78 	.word	0x24004f78

0800f930 <__malloc_unlock>:
 800f930:	4801      	ldr	r0, [pc, #4]	@ (800f938 <__malloc_unlock+0x8>)
 800f932:	f001 b9a9 	b.w	8010c88 <__retarget_lock_release_recursive>
 800f936:	bf00      	nop
 800f938:	24004f78 	.word	0x24004f78

0800f93c <__cvt>:
 800f93c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f93e:	ed2d 8b02 	vpush	{d8}
 800f942:	eeb0 8b40 	vmov.f64	d8, d0
 800f946:	b085      	sub	sp, #20
 800f948:	4617      	mov	r7, r2
 800f94a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800f94c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f94e:	ee18 2a90 	vmov	r2, s17
 800f952:	f025 0520 	bic.w	r5, r5, #32
 800f956:	2a00      	cmp	r2, #0
 800f958:	bfb6      	itet	lt
 800f95a:	222d      	movlt	r2, #45	@ 0x2d
 800f95c:	2200      	movge	r2, #0
 800f95e:	eeb1 8b40 	vneglt.f64	d8, d0
 800f962:	2d46      	cmp	r5, #70	@ 0x46
 800f964:	460c      	mov	r4, r1
 800f966:	701a      	strb	r2, [r3, #0]
 800f968:	d004      	beq.n	800f974 <__cvt+0x38>
 800f96a:	2d45      	cmp	r5, #69	@ 0x45
 800f96c:	d100      	bne.n	800f970 <__cvt+0x34>
 800f96e:	3401      	adds	r4, #1
 800f970:	2102      	movs	r1, #2
 800f972:	e000      	b.n	800f976 <__cvt+0x3a>
 800f974:	2103      	movs	r1, #3
 800f976:	ab03      	add	r3, sp, #12
 800f978:	9301      	str	r3, [sp, #4]
 800f97a:	ab02      	add	r3, sp, #8
 800f97c:	9300      	str	r3, [sp, #0]
 800f97e:	4622      	mov	r2, r4
 800f980:	4633      	mov	r3, r6
 800f982:	eeb0 0b48 	vmov.f64	d0, d8
 800f986:	f001 fa1f 	bl	8010dc8 <_dtoa_r>
 800f98a:	2d47      	cmp	r5, #71	@ 0x47
 800f98c:	d114      	bne.n	800f9b8 <__cvt+0x7c>
 800f98e:	07fb      	lsls	r3, r7, #31
 800f990:	d50a      	bpl.n	800f9a8 <__cvt+0x6c>
 800f992:	1902      	adds	r2, r0, r4
 800f994:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f99c:	bf08      	it	eq
 800f99e:	9203      	streq	r2, [sp, #12]
 800f9a0:	2130      	movs	r1, #48	@ 0x30
 800f9a2:	9b03      	ldr	r3, [sp, #12]
 800f9a4:	4293      	cmp	r3, r2
 800f9a6:	d319      	bcc.n	800f9dc <__cvt+0xa0>
 800f9a8:	9b03      	ldr	r3, [sp, #12]
 800f9aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f9ac:	1a1b      	subs	r3, r3, r0
 800f9ae:	6013      	str	r3, [r2, #0]
 800f9b0:	b005      	add	sp, #20
 800f9b2:	ecbd 8b02 	vpop	{d8}
 800f9b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9b8:	2d46      	cmp	r5, #70	@ 0x46
 800f9ba:	eb00 0204 	add.w	r2, r0, r4
 800f9be:	d1e9      	bne.n	800f994 <__cvt+0x58>
 800f9c0:	7803      	ldrb	r3, [r0, #0]
 800f9c2:	2b30      	cmp	r3, #48	@ 0x30
 800f9c4:	d107      	bne.n	800f9d6 <__cvt+0x9a>
 800f9c6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f9ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9ce:	bf1c      	itt	ne
 800f9d0:	f1c4 0401 	rsbne	r4, r4, #1
 800f9d4:	6034      	strne	r4, [r6, #0]
 800f9d6:	6833      	ldr	r3, [r6, #0]
 800f9d8:	441a      	add	r2, r3
 800f9da:	e7db      	b.n	800f994 <__cvt+0x58>
 800f9dc:	1c5c      	adds	r4, r3, #1
 800f9de:	9403      	str	r4, [sp, #12]
 800f9e0:	7019      	strb	r1, [r3, #0]
 800f9e2:	e7de      	b.n	800f9a2 <__cvt+0x66>

0800f9e4 <__exponent>:
 800f9e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f9e6:	2900      	cmp	r1, #0
 800f9e8:	bfba      	itte	lt
 800f9ea:	4249      	neglt	r1, r1
 800f9ec:	232d      	movlt	r3, #45	@ 0x2d
 800f9ee:	232b      	movge	r3, #43	@ 0x2b
 800f9f0:	2909      	cmp	r1, #9
 800f9f2:	7002      	strb	r2, [r0, #0]
 800f9f4:	7043      	strb	r3, [r0, #1]
 800f9f6:	dd29      	ble.n	800fa4c <__exponent+0x68>
 800f9f8:	f10d 0307 	add.w	r3, sp, #7
 800f9fc:	461d      	mov	r5, r3
 800f9fe:	270a      	movs	r7, #10
 800fa00:	461a      	mov	r2, r3
 800fa02:	fbb1 f6f7 	udiv	r6, r1, r7
 800fa06:	fb07 1416 	mls	r4, r7, r6, r1
 800fa0a:	3430      	adds	r4, #48	@ 0x30
 800fa0c:	f802 4c01 	strb.w	r4, [r2, #-1]
 800fa10:	460c      	mov	r4, r1
 800fa12:	2c63      	cmp	r4, #99	@ 0x63
 800fa14:	f103 33ff 	add.w	r3, r3, #4294967295
 800fa18:	4631      	mov	r1, r6
 800fa1a:	dcf1      	bgt.n	800fa00 <__exponent+0x1c>
 800fa1c:	3130      	adds	r1, #48	@ 0x30
 800fa1e:	1e94      	subs	r4, r2, #2
 800fa20:	f803 1c01 	strb.w	r1, [r3, #-1]
 800fa24:	1c41      	adds	r1, r0, #1
 800fa26:	4623      	mov	r3, r4
 800fa28:	42ab      	cmp	r3, r5
 800fa2a:	d30a      	bcc.n	800fa42 <__exponent+0x5e>
 800fa2c:	f10d 0309 	add.w	r3, sp, #9
 800fa30:	1a9b      	subs	r3, r3, r2
 800fa32:	42ac      	cmp	r4, r5
 800fa34:	bf88      	it	hi
 800fa36:	2300      	movhi	r3, #0
 800fa38:	3302      	adds	r3, #2
 800fa3a:	4403      	add	r3, r0
 800fa3c:	1a18      	subs	r0, r3, r0
 800fa3e:	b003      	add	sp, #12
 800fa40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa42:	f813 6b01 	ldrb.w	r6, [r3], #1
 800fa46:	f801 6f01 	strb.w	r6, [r1, #1]!
 800fa4a:	e7ed      	b.n	800fa28 <__exponent+0x44>
 800fa4c:	2330      	movs	r3, #48	@ 0x30
 800fa4e:	3130      	adds	r1, #48	@ 0x30
 800fa50:	7083      	strb	r3, [r0, #2]
 800fa52:	70c1      	strb	r1, [r0, #3]
 800fa54:	1d03      	adds	r3, r0, #4
 800fa56:	e7f1      	b.n	800fa3c <__exponent+0x58>

0800fa58 <_printf_float>:
 800fa58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa5c:	b08d      	sub	sp, #52	@ 0x34
 800fa5e:	460c      	mov	r4, r1
 800fa60:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800fa64:	4616      	mov	r6, r2
 800fa66:	461f      	mov	r7, r3
 800fa68:	4605      	mov	r5, r0
 800fa6a:	f001 f81d 	bl	8010aa8 <_localeconv_r>
 800fa6e:	f8d0 b000 	ldr.w	fp, [r0]
 800fa72:	4658      	mov	r0, fp
 800fa74:	f7f0 fc8c 	bl	8000390 <strlen>
 800fa78:	2300      	movs	r3, #0
 800fa7a:	930a      	str	r3, [sp, #40]	@ 0x28
 800fa7c:	f8d8 3000 	ldr.w	r3, [r8]
 800fa80:	f894 9018 	ldrb.w	r9, [r4, #24]
 800fa84:	6822      	ldr	r2, [r4, #0]
 800fa86:	9005      	str	r0, [sp, #20]
 800fa88:	3307      	adds	r3, #7
 800fa8a:	f023 0307 	bic.w	r3, r3, #7
 800fa8e:	f103 0108 	add.w	r1, r3, #8
 800fa92:	f8c8 1000 	str.w	r1, [r8]
 800fa96:	ed93 0b00 	vldr	d0, [r3]
 800fa9a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800fcf8 <_printf_float+0x2a0>
 800fa9e:	eeb0 7bc0 	vabs.f64	d7, d0
 800faa2:	eeb4 7b46 	vcmp.f64	d7, d6
 800faa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800faaa:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800faae:	dd24      	ble.n	800fafa <_printf_float+0xa2>
 800fab0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800fab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fab8:	d502      	bpl.n	800fac0 <_printf_float+0x68>
 800faba:	232d      	movs	r3, #45	@ 0x2d
 800fabc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fac0:	498f      	ldr	r1, [pc, #572]	@ (800fd00 <_printf_float+0x2a8>)
 800fac2:	4b90      	ldr	r3, [pc, #576]	@ (800fd04 <_printf_float+0x2ac>)
 800fac4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800fac8:	bf94      	ite	ls
 800faca:	4688      	movls	r8, r1
 800facc:	4698      	movhi	r8, r3
 800face:	f022 0204 	bic.w	r2, r2, #4
 800fad2:	2303      	movs	r3, #3
 800fad4:	6123      	str	r3, [r4, #16]
 800fad6:	6022      	str	r2, [r4, #0]
 800fad8:	f04f 0a00 	mov.w	sl, #0
 800fadc:	9700      	str	r7, [sp, #0]
 800fade:	4633      	mov	r3, r6
 800fae0:	aa0b      	add	r2, sp, #44	@ 0x2c
 800fae2:	4621      	mov	r1, r4
 800fae4:	4628      	mov	r0, r5
 800fae6:	f000 f9d1 	bl	800fe8c <_printf_common>
 800faea:	3001      	adds	r0, #1
 800faec:	f040 8089 	bne.w	800fc02 <_printf_float+0x1aa>
 800faf0:	f04f 30ff 	mov.w	r0, #4294967295
 800faf4:	b00d      	add	sp, #52	@ 0x34
 800faf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fafa:	eeb4 0b40 	vcmp.f64	d0, d0
 800fafe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb02:	d709      	bvc.n	800fb18 <_printf_float+0xc0>
 800fb04:	ee10 3a90 	vmov	r3, s1
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	bfbc      	itt	lt
 800fb0c:	232d      	movlt	r3, #45	@ 0x2d
 800fb0e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800fb12:	497d      	ldr	r1, [pc, #500]	@ (800fd08 <_printf_float+0x2b0>)
 800fb14:	4b7d      	ldr	r3, [pc, #500]	@ (800fd0c <_printf_float+0x2b4>)
 800fb16:	e7d5      	b.n	800fac4 <_printf_float+0x6c>
 800fb18:	6863      	ldr	r3, [r4, #4]
 800fb1a:	1c59      	adds	r1, r3, #1
 800fb1c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800fb20:	d139      	bne.n	800fb96 <_printf_float+0x13e>
 800fb22:	2306      	movs	r3, #6
 800fb24:	6063      	str	r3, [r4, #4]
 800fb26:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800fb2a:	2300      	movs	r3, #0
 800fb2c:	6022      	str	r2, [r4, #0]
 800fb2e:	9303      	str	r3, [sp, #12]
 800fb30:	ab0a      	add	r3, sp, #40	@ 0x28
 800fb32:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800fb36:	ab09      	add	r3, sp, #36	@ 0x24
 800fb38:	9300      	str	r3, [sp, #0]
 800fb3a:	6861      	ldr	r1, [r4, #4]
 800fb3c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800fb40:	4628      	mov	r0, r5
 800fb42:	f7ff fefb 	bl	800f93c <__cvt>
 800fb46:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800fb4a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fb4c:	4680      	mov	r8, r0
 800fb4e:	d129      	bne.n	800fba4 <_printf_float+0x14c>
 800fb50:	1cc8      	adds	r0, r1, #3
 800fb52:	db02      	blt.n	800fb5a <_printf_float+0x102>
 800fb54:	6863      	ldr	r3, [r4, #4]
 800fb56:	4299      	cmp	r1, r3
 800fb58:	dd41      	ble.n	800fbde <_printf_float+0x186>
 800fb5a:	f1a9 0902 	sub.w	r9, r9, #2
 800fb5e:	fa5f f989 	uxtb.w	r9, r9
 800fb62:	3901      	subs	r1, #1
 800fb64:	464a      	mov	r2, r9
 800fb66:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800fb6a:	9109      	str	r1, [sp, #36]	@ 0x24
 800fb6c:	f7ff ff3a 	bl	800f9e4 <__exponent>
 800fb70:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fb72:	1813      	adds	r3, r2, r0
 800fb74:	2a01      	cmp	r2, #1
 800fb76:	4682      	mov	sl, r0
 800fb78:	6123      	str	r3, [r4, #16]
 800fb7a:	dc02      	bgt.n	800fb82 <_printf_float+0x12a>
 800fb7c:	6822      	ldr	r2, [r4, #0]
 800fb7e:	07d2      	lsls	r2, r2, #31
 800fb80:	d501      	bpl.n	800fb86 <_printf_float+0x12e>
 800fb82:	3301      	adds	r3, #1
 800fb84:	6123      	str	r3, [r4, #16]
 800fb86:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d0a6      	beq.n	800fadc <_printf_float+0x84>
 800fb8e:	232d      	movs	r3, #45	@ 0x2d
 800fb90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fb94:	e7a2      	b.n	800fadc <_printf_float+0x84>
 800fb96:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800fb9a:	d1c4      	bne.n	800fb26 <_printf_float+0xce>
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d1c2      	bne.n	800fb26 <_printf_float+0xce>
 800fba0:	2301      	movs	r3, #1
 800fba2:	e7bf      	b.n	800fb24 <_printf_float+0xcc>
 800fba4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800fba8:	d9db      	bls.n	800fb62 <_printf_float+0x10a>
 800fbaa:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800fbae:	d118      	bne.n	800fbe2 <_printf_float+0x18a>
 800fbb0:	2900      	cmp	r1, #0
 800fbb2:	6863      	ldr	r3, [r4, #4]
 800fbb4:	dd0b      	ble.n	800fbce <_printf_float+0x176>
 800fbb6:	6121      	str	r1, [r4, #16]
 800fbb8:	b913      	cbnz	r3, 800fbc0 <_printf_float+0x168>
 800fbba:	6822      	ldr	r2, [r4, #0]
 800fbbc:	07d0      	lsls	r0, r2, #31
 800fbbe:	d502      	bpl.n	800fbc6 <_printf_float+0x16e>
 800fbc0:	3301      	adds	r3, #1
 800fbc2:	440b      	add	r3, r1
 800fbc4:	6123      	str	r3, [r4, #16]
 800fbc6:	65a1      	str	r1, [r4, #88]	@ 0x58
 800fbc8:	f04f 0a00 	mov.w	sl, #0
 800fbcc:	e7db      	b.n	800fb86 <_printf_float+0x12e>
 800fbce:	b913      	cbnz	r3, 800fbd6 <_printf_float+0x17e>
 800fbd0:	6822      	ldr	r2, [r4, #0]
 800fbd2:	07d2      	lsls	r2, r2, #31
 800fbd4:	d501      	bpl.n	800fbda <_printf_float+0x182>
 800fbd6:	3302      	adds	r3, #2
 800fbd8:	e7f4      	b.n	800fbc4 <_printf_float+0x16c>
 800fbda:	2301      	movs	r3, #1
 800fbdc:	e7f2      	b.n	800fbc4 <_printf_float+0x16c>
 800fbde:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800fbe2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fbe4:	4299      	cmp	r1, r3
 800fbe6:	db05      	blt.n	800fbf4 <_printf_float+0x19c>
 800fbe8:	6823      	ldr	r3, [r4, #0]
 800fbea:	6121      	str	r1, [r4, #16]
 800fbec:	07d8      	lsls	r0, r3, #31
 800fbee:	d5ea      	bpl.n	800fbc6 <_printf_float+0x16e>
 800fbf0:	1c4b      	adds	r3, r1, #1
 800fbf2:	e7e7      	b.n	800fbc4 <_printf_float+0x16c>
 800fbf4:	2900      	cmp	r1, #0
 800fbf6:	bfd4      	ite	le
 800fbf8:	f1c1 0202 	rsble	r2, r1, #2
 800fbfc:	2201      	movgt	r2, #1
 800fbfe:	4413      	add	r3, r2
 800fc00:	e7e0      	b.n	800fbc4 <_printf_float+0x16c>
 800fc02:	6823      	ldr	r3, [r4, #0]
 800fc04:	055a      	lsls	r2, r3, #21
 800fc06:	d407      	bmi.n	800fc18 <_printf_float+0x1c0>
 800fc08:	6923      	ldr	r3, [r4, #16]
 800fc0a:	4642      	mov	r2, r8
 800fc0c:	4631      	mov	r1, r6
 800fc0e:	4628      	mov	r0, r5
 800fc10:	47b8      	blx	r7
 800fc12:	3001      	adds	r0, #1
 800fc14:	d12a      	bne.n	800fc6c <_printf_float+0x214>
 800fc16:	e76b      	b.n	800faf0 <_printf_float+0x98>
 800fc18:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800fc1c:	f240 80e0 	bls.w	800fde0 <_printf_float+0x388>
 800fc20:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800fc24:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fc28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc2c:	d133      	bne.n	800fc96 <_printf_float+0x23e>
 800fc2e:	4a38      	ldr	r2, [pc, #224]	@ (800fd10 <_printf_float+0x2b8>)
 800fc30:	2301      	movs	r3, #1
 800fc32:	4631      	mov	r1, r6
 800fc34:	4628      	mov	r0, r5
 800fc36:	47b8      	blx	r7
 800fc38:	3001      	adds	r0, #1
 800fc3a:	f43f af59 	beq.w	800faf0 <_printf_float+0x98>
 800fc3e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800fc42:	4543      	cmp	r3, r8
 800fc44:	db02      	blt.n	800fc4c <_printf_float+0x1f4>
 800fc46:	6823      	ldr	r3, [r4, #0]
 800fc48:	07d8      	lsls	r0, r3, #31
 800fc4a:	d50f      	bpl.n	800fc6c <_printf_float+0x214>
 800fc4c:	9b05      	ldr	r3, [sp, #20]
 800fc4e:	465a      	mov	r2, fp
 800fc50:	4631      	mov	r1, r6
 800fc52:	4628      	mov	r0, r5
 800fc54:	47b8      	blx	r7
 800fc56:	3001      	adds	r0, #1
 800fc58:	f43f af4a 	beq.w	800faf0 <_printf_float+0x98>
 800fc5c:	f04f 0900 	mov.w	r9, #0
 800fc60:	f108 38ff 	add.w	r8, r8, #4294967295
 800fc64:	f104 0a1a 	add.w	sl, r4, #26
 800fc68:	45c8      	cmp	r8, r9
 800fc6a:	dc09      	bgt.n	800fc80 <_printf_float+0x228>
 800fc6c:	6823      	ldr	r3, [r4, #0]
 800fc6e:	079b      	lsls	r3, r3, #30
 800fc70:	f100 8107 	bmi.w	800fe82 <_printf_float+0x42a>
 800fc74:	68e0      	ldr	r0, [r4, #12]
 800fc76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fc78:	4298      	cmp	r0, r3
 800fc7a:	bfb8      	it	lt
 800fc7c:	4618      	movlt	r0, r3
 800fc7e:	e739      	b.n	800faf4 <_printf_float+0x9c>
 800fc80:	2301      	movs	r3, #1
 800fc82:	4652      	mov	r2, sl
 800fc84:	4631      	mov	r1, r6
 800fc86:	4628      	mov	r0, r5
 800fc88:	47b8      	blx	r7
 800fc8a:	3001      	adds	r0, #1
 800fc8c:	f43f af30 	beq.w	800faf0 <_printf_float+0x98>
 800fc90:	f109 0901 	add.w	r9, r9, #1
 800fc94:	e7e8      	b.n	800fc68 <_printf_float+0x210>
 800fc96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	dc3b      	bgt.n	800fd14 <_printf_float+0x2bc>
 800fc9c:	4a1c      	ldr	r2, [pc, #112]	@ (800fd10 <_printf_float+0x2b8>)
 800fc9e:	2301      	movs	r3, #1
 800fca0:	4631      	mov	r1, r6
 800fca2:	4628      	mov	r0, r5
 800fca4:	47b8      	blx	r7
 800fca6:	3001      	adds	r0, #1
 800fca8:	f43f af22 	beq.w	800faf0 <_printf_float+0x98>
 800fcac:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800fcb0:	ea59 0303 	orrs.w	r3, r9, r3
 800fcb4:	d102      	bne.n	800fcbc <_printf_float+0x264>
 800fcb6:	6823      	ldr	r3, [r4, #0]
 800fcb8:	07d9      	lsls	r1, r3, #31
 800fcba:	d5d7      	bpl.n	800fc6c <_printf_float+0x214>
 800fcbc:	9b05      	ldr	r3, [sp, #20]
 800fcbe:	465a      	mov	r2, fp
 800fcc0:	4631      	mov	r1, r6
 800fcc2:	4628      	mov	r0, r5
 800fcc4:	47b8      	blx	r7
 800fcc6:	3001      	adds	r0, #1
 800fcc8:	f43f af12 	beq.w	800faf0 <_printf_float+0x98>
 800fccc:	f04f 0a00 	mov.w	sl, #0
 800fcd0:	f104 0b1a 	add.w	fp, r4, #26
 800fcd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fcd6:	425b      	negs	r3, r3
 800fcd8:	4553      	cmp	r3, sl
 800fcda:	dc01      	bgt.n	800fce0 <_printf_float+0x288>
 800fcdc:	464b      	mov	r3, r9
 800fcde:	e794      	b.n	800fc0a <_printf_float+0x1b2>
 800fce0:	2301      	movs	r3, #1
 800fce2:	465a      	mov	r2, fp
 800fce4:	4631      	mov	r1, r6
 800fce6:	4628      	mov	r0, r5
 800fce8:	47b8      	blx	r7
 800fcea:	3001      	adds	r0, #1
 800fcec:	f43f af00 	beq.w	800faf0 <_printf_float+0x98>
 800fcf0:	f10a 0a01 	add.w	sl, sl, #1
 800fcf4:	e7ee      	b.n	800fcd4 <_printf_float+0x27c>
 800fcf6:	bf00      	nop
 800fcf8:	ffffffff 	.word	0xffffffff
 800fcfc:	7fefffff 	.word	0x7fefffff
 800fd00:	080141a0 	.word	0x080141a0
 800fd04:	080141a4 	.word	0x080141a4
 800fd08:	080141a8 	.word	0x080141a8
 800fd0c:	080141ac 	.word	0x080141ac
 800fd10:	080141b0 	.word	0x080141b0
 800fd14:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fd16:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fd1a:	4553      	cmp	r3, sl
 800fd1c:	bfa8      	it	ge
 800fd1e:	4653      	movge	r3, sl
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	4699      	mov	r9, r3
 800fd24:	dc37      	bgt.n	800fd96 <_printf_float+0x33e>
 800fd26:	2300      	movs	r3, #0
 800fd28:	9307      	str	r3, [sp, #28]
 800fd2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fd2e:	f104 021a 	add.w	r2, r4, #26
 800fd32:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fd34:	9907      	ldr	r1, [sp, #28]
 800fd36:	9306      	str	r3, [sp, #24]
 800fd38:	eba3 0309 	sub.w	r3, r3, r9
 800fd3c:	428b      	cmp	r3, r1
 800fd3e:	dc31      	bgt.n	800fda4 <_printf_float+0x34c>
 800fd40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd42:	459a      	cmp	sl, r3
 800fd44:	dc3b      	bgt.n	800fdbe <_printf_float+0x366>
 800fd46:	6823      	ldr	r3, [r4, #0]
 800fd48:	07da      	lsls	r2, r3, #31
 800fd4a:	d438      	bmi.n	800fdbe <_printf_float+0x366>
 800fd4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd4e:	ebaa 0903 	sub.w	r9, sl, r3
 800fd52:	9b06      	ldr	r3, [sp, #24]
 800fd54:	ebaa 0303 	sub.w	r3, sl, r3
 800fd58:	4599      	cmp	r9, r3
 800fd5a:	bfa8      	it	ge
 800fd5c:	4699      	movge	r9, r3
 800fd5e:	f1b9 0f00 	cmp.w	r9, #0
 800fd62:	dc34      	bgt.n	800fdce <_printf_float+0x376>
 800fd64:	f04f 0800 	mov.w	r8, #0
 800fd68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fd6c:	f104 0b1a 	add.w	fp, r4, #26
 800fd70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd72:	ebaa 0303 	sub.w	r3, sl, r3
 800fd76:	eba3 0309 	sub.w	r3, r3, r9
 800fd7a:	4543      	cmp	r3, r8
 800fd7c:	f77f af76 	ble.w	800fc6c <_printf_float+0x214>
 800fd80:	2301      	movs	r3, #1
 800fd82:	465a      	mov	r2, fp
 800fd84:	4631      	mov	r1, r6
 800fd86:	4628      	mov	r0, r5
 800fd88:	47b8      	blx	r7
 800fd8a:	3001      	adds	r0, #1
 800fd8c:	f43f aeb0 	beq.w	800faf0 <_printf_float+0x98>
 800fd90:	f108 0801 	add.w	r8, r8, #1
 800fd94:	e7ec      	b.n	800fd70 <_printf_float+0x318>
 800fd96:	4642      	mov	r2, r8
 800fd98:	4631      	mov	r1, r6
 800fd9a:	4628      	mov	r0, r5
 800fd9c:	47b8      	blx	r7
 800fd9e:	3001      	adds	r0, #1
 800fda0:	d1c1      	bne.n	800fd26 <_printf_float+0x2ce>
 800fda2:	e6a5      	b.n	800faf0 <_printf_float+0x98>
 800fda4:	2301      	movs	r3, #1
 800fda6:	4631      	mov	r1, r6
 800fda8:	4628      	mov	r0, r5
 800fdaa:	9206      	str	r2, [sp, #24]
 800fdac:	47b8      	blx	r7
 800fdae:	3001      	adds	r0, #1
 800fdb0:	f43f ae9e 	beq.w	800faf0 <_printf_float+0x98>
 800fdb4:	9b07      	ldr	r3, [sp, #28]
 800fdb6:	9a06      	ldr	r2, [sp, #24]
 800fdb8:	3301      	adds	r3, #1
 800fdba:	9307      	str	r3, [sp, #28]
 800fdbc:	e7b9      	b.n	800fd32 <_printf_float+0x2da>
 800fdbe:	9b05      	ldr	r3, [sp, #20]
 800fdc0:	465a      	mov	r2, fp
 800fdc2:	4631      	mov	r1, r6
 800fdc4:	4628      	mov	r0, r5
 800fdc6:	47b8      	blx	r7
 800fdc8:	3001      	adds	r0, #1
 800fdca:	d1bf      	bne.n	800fd4c <_printf_float+0x2f4>
 800fdcc:	e690      	b.n	800faf0 <_printf_float+0x98>
 800fdce:	9a06      	ldr	r2, [sp, #24]
 800fdd0:	464b      	mov	r3, r9
 800fdd2:	4442      	add	r2, r8
 800fdd4:	4631      	mov	r1, r6
 800fdd6:	4628      	mov	r0, r5
 800fdd8:	47b8      	blx	r7
 800fdda:	3001      	adds	r0, #1
 800fddc:	d1c2      	bne.n	800fd64 <_printf_float+0x30c>
 800fdde:	e687      	b.n	800faf0 <_printf_float+0x98>
 800fde0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800fde4:	f1b9 0f01 	cmp.w	r9, #1
 800fde8:	dc01      	bgt.n	800fdee <_printf_float+0x396>
 800fdea:	07db      	lsls	r3, r3, #31
 800fdec:	d536      	bpl.n	800fe5c <_printf_float+0x404>
 800fdee:	2301      	movs	r3, #1
 800fdf0:	4642      	mov	r2, r8
 800fdf2:	4631      	mov	r1, r6
 800fdf4:	4628      	mov	r0, r5
 800fdf6:	47b8      	blx	r7
 800fdf8:	3001      	adds	r0, #1
 800fdfa:	f43f ae79 	beq.w	800faf0 <_printf_float+0x98>
 800fdfe:	9b05      	ldr	r3, [sp, #20]
 800fe00:	465a      	mov	r2, fp
 800fe02:	4631      	mov	r1, r6
 800fe04:	4628      	mov	r0, r5
 800fe06:	47b8      	blx	r7
 800fe08:	3001      	adds	r0, #1
 800fe0a:	f43f ae71 	beq.w	800faf0 <_printf_float+0x98>
 800fe0e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800fe12:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fe16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe1a:	f109 39ff 	add.w	r9, r9, #4294967295
 800fe1e:	d018      	beq.n	800fe52 <_printf_float+0x3fa>
 800fe20:	464b      	mov	r3, r9
 800fe22:	f108 0201 	add.w	r2, r8, #1
 800fe26:	4631      	mov	r1, r6
 800fe28:	4628      	mov	r0, r5
 800fe2a:	47b8      	blx	r7
 800fe2c:	3001      	adds	r0, #1
 800fe2e:	d10c      	bne.n	800fe4a <_printf_float+0x3f2>
 800fe30:	e65e      	b.n	800faf0 <_printf_float+0x98>
 800fe32:	2301      	movs	r3, #1
 800fe34:	465a      	mov	r2, fp
 800fe36:	4631      	mov	r1, r6
 800fe38:	4628      	mov	r0, r5
 800fe3a:	47b8      	blx	r7
 800fe3c:	3001      	adds	r0, #1
 800fe3e:	f43f ae57 	beq.w	800faf0 <_printf_float+0x98>
 800fe42:	f108 0801 	add.w	r8, r8, #1
 800fe46:	45c8      	cmp	r8, r9
 800fe48:	dbf3      	blt.n	800fe32 <_printf_float+0x3da>
 800fe4a:	4653      	mov	r3, sl
 800fe4c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800fe50:	e6dc      	b.n	800fc0c <_printf_float+0x1b4>
 800fe52:	f04f 0800 	mov.w	r8, #0
 800fe56:	f104 0b1a 	add.w	fp, r4, #26
 800fe5a:	e7f4      	b.n	800fe46 <_printf_float+0x3ee>
 800fe5c:	2301      	movs	r3, #1
 800fe5e:	4642      	mov	r2, r8
 800fe60:	e7e1      	b.n	800fe26 <_printf_float+0x3ce>
 800fe62:	2301      	movs	r3, #1
 800fe64:	464a      	mov	r2, r9
 800fe66:	4631      	mov	r1, r6
 800fe68:	4628      	mov	r0, r5
 800fe6a:	47b8      	blx	r7
 800fe6c:	3001      	adds	r0, #1
 800fe6e:	f43f ae3f 	beq.w	800faf0 <_printf_float+0x98>
 800fe72:	f108 0801 	add.w	r8, r8, #1
 800fe76:	68e3      	ldr	r3, [r4, #12]
 800fe78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fe7a:	1a5b      	subs	r3, r3, r1
 800fe7c:	4543      	cmp	r3, r8
 800fe7e:	dcf0      	bgt.n	800fe62 <_printf_float+0x40a>
 800fe80:	e6f8      	b.n	800fc74 <_printf_float+0x21c>
 800fe82:	f04f 0800 	mov.w	r8, #0
 800fe86:	f104 0919 	add.w	r9, r4, #25
 800fe8a:	e7f4      	b.n	800fe76 <_printf_float+0x41e>

0800fe8c <_printf_common>:
 800fe8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe90:	4616      	mov	r6, r2
 800fe92:	4698      	mov	r8, r3
 800fe94:	688a      	ldr	r2, [r1, #8]
 800fe96:	690b      	ldr	r3, [r1, #16]
 800fe98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fe9c:	4293      	cmp	r3, r2
 800fe9e:	bfb8      	it	lt
 800fea0:	4613      	movlt	r3, r2
 800fea2:	6033      	str	r3, [r6, #0]
 800fea4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fea8:	4607      	mov	r7, r0
 800feaa:	460c      	mov	r4, r1
 800feac:	b10a      	cbz	r2, 800feb2 <_printf_common+0x26>
 800feae:	3301      	adds	r3, #1
 800feb0:	6033      	str	r3, [r6, #0]
 800feb2:	6823      	ldr	r3, [r4, #0]
 800feb4:	0699      	lsls	r1, r3, #26
 800feb6:	bf42      	ittt	mi
 800feb8:	6833      	ldrmi	r3, [r6, #0]
 800feba:	3302      	addmi	r3, #2
 800febc:	6033      	strmi	r3, [r6, #0]
 800febe:	6825      	ldr	r5, [r4, #0]
 800fec0:	f015 0506 	ands.w	r5, r5, #6
 800fec4:	d106      	bne.n	800fed4 <_printf_common+0x48>
 800fec6:	f104 0a19 	add.w	sl, r4, #25
 800feca:	68e3      	ldr	r3, [r4, #12]
 800fecc:	6832      	ldr	r2, [r6, #0]
 800fece:	1a9b      	subs	r3, r3, r2
 800fed0:	42ab      	cmp	r3, r5
 800fed2:	dc26      	bgt.n	800ff22 <_printf_common+0x96>
 800fed4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fed8:	6822      	ldr	r2, [r4, #0]
 800feda:	3b00      	subs	r3, #0
 800fedc:	bf18      	it	ne
 800fede:	2301      	movne	r3, #1
 800fee0:	0692      	lsls	r2, r2, #26
 800fee2:	d42b      	bmi.n	800ff3c <_printf_common+0xb0>
 800fee4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fee8:	4641      	mov	r1, r8
 800feea:	4638      	mov	r0, r7
 800feec:	47c8      	blx	r9
 800feee:	3001      	adds	r0, #1
 800fef0:	d01e      	beq.n	800ff30 <_printf_common+0xa4>
 800fef2:	6823      	ldr	r3, [r4, #0]
 800fef4:	6922      	ldr	r2, [r4, #16]
 800fef6:	f003 0306 	and.w	r3, r3, #6
 800fefa:	2b04      	cmp	r3, #4
 800fefc:	bf02      	ittt	eq
 800fefe:	68e5      	ldreq	r5, [r4, #12]
 800ff00:	6833      	ldreq	r3, [r6, #0]
 800ff02:	1aed      	subeq	r5, r5, r3
 800ff04:	68a3      	ldr	r3, [r4, #8]
 800ff06:	bf0c      	ite	eq
 800ff08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ff0c:	2500      	movne	r5, #0
 800ff0e:	4293      	cmp	r3, r2
 800ff10:	bfc4      	itt	gt
 800ff12:	1a9b      	subgt	r3, r3, r2
 800ff14:	18ed      	addgt	r5, r5, r3
 800ff16:	2600      	movs	r6, #0
 800ff18:	341a      	adds	r4, #26
 800ff1a:	42b5      	cmp	r5, r6
 800ff1c:	d11a      	bne.n	800ff54 <_printf_common+0xc8>
 800ff1e:	2000      	movs	r0, #0
 800ff20:	e008      	b.n	800ff34 <_printf_common+0xa8>
 800ff22:	2301      	movs	r3, #1
 800ff24:	4652      	mov	r2, sl
 800ff26:	4641      	mov	r1, r8
 800ff28:	4638      	mov	r0, r7
 800ff2a:	47c8      	blx	r9
 800ff2c:	3001      	adds	r0, #1
 800ff2e:	d103      	bne.n	800ff38 <_printf_common+0xac>
 800ff30:	f04f 30ff 	mov.w	r0, #4294967295
 800ff34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff38:	3501      	adds	r5, #1
 800ff3a:	e7c6      	b.n	800feca <_printf_common+0x3e>
 800ff3c:	18e1      	adds	r1, r4, r3
 800ff3e:	1c5a      	adds	r2, r3, #1
 800ff40:	2030      	movs	r0, #48	@ 0x30
 800ff42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ff46:	4422      	add	r2, r4
 800ff48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ff4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ff50:	3302      	adds	r3, #2
 800ff52:	e7c7      	b.n	800fee4 <_printf_common+0x58>
 800ff54:	2301      	movs	r3, #1
 800ff56:	4622      	mov	r2, r4
 800ff58:	4641      	mov	r1, r8
 800ff5a:	4638      	mov	r0, r7
 800ff5c:	47c8      	blx	r9
 800ff5e:	3001      	adds	r0, #1
 800ff60:	d0e6      	beq.n	800ff30 <_printf_common+0xa4>
 800ff62:	3601      	adds	r6, #1
 800ff64:	e7d9      	b.n	800ff1a <_printf_common+0x8e>
	...

0800ff68 <_printf_i>:
 800ff68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ff6c:	7e0f      	ldrb	r7, [r1, #24]
 800ff6e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ff70:	2f78      	cmp	r7, #120	@ 0x78
 800ff72:	4691      	mov	r9, r2
 800ff74:	4680      	mov	r8, r0
 800ff76:	460c      	mov	r4, r1
 800ff78:	469a      	mov	sl, r3
 800ff7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ff7e:	d807      	bhi.n	800ff90 <_printf_i+0x28>
 800ff80:	2f62      	cmp	r7, #98	@ 0x62
 800ff82:	d80a      	bhi.n	800ff9a <_printf_i+0x32>
 800ff84:	2f00      	cmp	r7, #0
 800ff86:	f000 80d2 	beq.w	801012e <_printf_i+0x1c6>
 800ff8a:	2f58      	cmp	r7, #88	@ 0x58
 800ff8c:	f000 80b9 	beq.w	8010102 <_printf_i+0x19a>
 800ff90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ff94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ff98:	e03a      	b.n	8010010 <_printf_i+0xa8>
 800ff9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ff9e:	2b15      	cmp	r3, #21
 800ffa0:	d8f6      	bhi.n	800ff90 <_printf_i+0x28>
 800ffa2:	a101      	add	r1, pc, #4	@ (adr r1, 800ffa8 <_printf_i+0x40>)
 800ffa4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ffa8:	08010001 	.word	0x08010001
 800ffac:	08010015 	.word	0x08010015
 800ffb0:	0800ff91 	.word	0x0800ff91
 800ffb4:	0800ff91 	.word	0x0800ff91
 800ffb8:	0800ff91 	.word	0x0800ff91
 800ffbc:	0800ff91 	.word	0x0800ff91
 800ffc0:	08010015 	.word	0x08010015
 800ffc4:	0800ff91 	.word	0x0800ff91
 800ffc8:	0800ff91 	.word	0x0800ff91
 800ffcc:	0800ff91 	.word	0x0800ff91
 800ffd0:	0800ff91 	.word	0x0800ff91
 800ffd4:	08010115 	.word	0x08010115
 800ffd8:	0801003f 	.word	0x0801003f
 800ffdc:	080100cf 	.word	0x080100cf
 800ffe0:	0800ff91 	.word	0x0800ff91
 800ffe4:	0800ff91 	.word	0x0800ff91
 800ffe8:	08010137 	.word	0x08010137
 800ffec:	0800ff91 	.word	0x0800ff91
 800fff0:	0801003f 	.word	0x0801003f
 800fff4:	0800ff91 	.word	0x0800ff91
 800fff8:	0800ff91 	.word	0x0800ff91
 800fffc:	080100d7 	.word	0x080100d7
 8010000:	6833      	ldr	r3, [r6, #0]
 8010002:	1d1a      	adds	r2, r3, #4
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	6032      	str	r2, [r6, #0]
 8010008:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801000c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010010:	2301      	movs	r3, #1
 8010012:	e09d      	b.n	8010150 <_printf_i+0x1e8>
 8010014:	6833      	ldr	r3, [r6, #0]
 8010016:	6820      	ldr	r0, [r4, #0]
 8010018:	1d19      	adds	r1, r3, #4
 801001a:	6031      	str	r1, [r6, #0]
 801001c:	0606      	lsls	r6, r0, #24
 801001e:	d501      	bpl.n	8010024 <_printf_i+0xbc>
 8010020:	681d      	ldr	r5, [r3, #0]
 8010022:	e003      	b.n	801002c <_printf_i+0xc4>
 8010024:	0645      	lsls	r5, r0, #25
 8010026:	d5fb      	bpl.n	8010020 <_printf_i+0xb8>
 8010028:	f9b3 5000 	ldrsh.w	r5, [r3]
 801002c:	2d00      	cmp	r5, #0
 801002e:	da03      	bge.n	8010038 <_printf_i+0xd0>
 8010030:	232d      	movs	r3, #45	@ 0x2d
 8010032:	426d      	negs	r5, r5
 8010034:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010038:	4859      	ldr	r0, [pc, #356]	@ (80101a0 <_printf_i+0x238>)
 801003a:	230a      	movs	r3, #10
 801003c:	e011      	b.n	8010062 <_printf_i+0xfa>
 801003e:	6821      	ldr	r1, [r4, #0]
 8010040:	6833      	ldr	r3, [r6, #0]
 8010042:	0608      	lsls	r0, r1, #24
 8010044:	f853 5b04 	ldr.w	r5, [r3], #4
 8010048:	d402      	bmi.n	8010050 <_printf_i+0xe8>
 801004a:	0649      	lsls	r1, r1, #25
 801004c:	bf48      	it	mi
 801004e:	b2ad      	uxthmi	r5, r5
 8010050:	2f6f      	cmp	r7, #111	@ 0x6f
 8010052:	4853      	ldr	r0, [pc, #332]	@ (80101a0 <_printf_i+0x238>)
 8010054:	6033      	str	r3, [r6, #0]
 8010056:	bf14      	ite	ne
 8010058:	230a      	movne	r3, #10
 801005a:	2308      	moveq	r3, #8
 801005c:	2100      	movs	r1, #0
 801005e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010062:	6866      	ldr	r6, [r4, #4]
 8010064:	60a6      	str	r6, [r4, #8]
 8010066:	2e00      	cmp	r6, #0
 8010068:	bfa2      	ittt	ge
 801006a:	6821      	ldrge	r1, [r4, #0]
 801006c:	f021 0104 	bicge.w	r1, r1, #4
 8010070:	6021      	strge	r1, [r4, #0]
 8010072:	b90d      	cbnz	r5, 8010078 <_printf_i+0x110>
 8010074:	2e00      	cmp	r6, #0
 8010076:	d04b      	beq.n	8010110 <_printf_i+0x1a8>
 8010078:	4616      	mov	r6, r2
 801007a:	fbb5 f1f3 	udiv	r1, r5, r3
 801007e:	fb03 5711 	mls	r7, r3, r1, r5
 8010082:	5dc7      	ldrb	r7, [r0, r7]
 8010084:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010088:	462f      	mov	r7, r5
 801008a:	42bb      	cmp	r3, r7
 801008c:	460d      	mov	r5, r1
 801008e:	d9f4      	bls.n	801007a <_printf_i+0x112>
 8010090:	2b08      	cmp	r3, #8
 8010092:	d10b      	bne.n	80100ac <_printf_i+0x144>
 8010094:	6823      	ldr	r3, [r4, #0]
 8010096:	07df      	lsls	r7, r3, #31
 8010098:	d508      	bpl.n	80100ac <_printf_i+0x144>
 801009a:	6923      	ldr	r3, [r4, #16]
 801009c:	6861      	ldr	r1, [r4, #4]
 801009e:	4299      	cmp	r1, r3
 80100a0:	bfde      	ittt	le
 80100a2:	2330      	movle	r3, #48	@ 0x30
 80100a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80100a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80100ac:	1b92      	subs	r2, r2, r6
 80100ae:	6122      	str	r2, [r4, #16]
 80100b0:	f8cd a000 	str.w	sl, [sp]
 80100b4:	464b      	mov	r3, r9
 80100b6:	aa03      	add	r2, sp, #12
 80100b8:	4621      	mov	r1, r4
 80100ba:	4640      	mov	r0, r8
 80100bc:	f7ff fee6 	bl	800fe8c <_printf_common>
 80100c0:	3001      	adds	r0, #1
 80100c2:	d14a      	bne.n	801015a <_printf_i+0x1f2>
 80100c4:	f04f 30ff 	mov.w	r0, #4294967295
 80100c8:	b004      	add	sp, #16
 80100ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100ce:	6823      	ldr	r3, [r4, #0]
 80100d0:	f043 0320 	orr.w	r3, r3, #32
 80100d4:	6023      	str	r3, [r4, #0]
 80100d6:	4833      	ldr	r0, [pc, #204]	@ (80101a4 <_printf_i+0x23c>)
 80100d8:	2778      	movs	r7, #120	@ 0x78
 80100da:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80100de:	6823      	ldr	r3, [r4, #0]
 80100e0:	6831      	ldr	r1, [r6, #0]
 80100e2:	061f      	lsls	r7, r3, #24
 80100e4:	f851 5b04 	ldr.w	r5, [r1], #4
 80100e8:	d402      	bmi.n	80100f0 <_printf_i+0x188>
 80100ea:	065f      	lsls	r7, r3, #25
 80100ec:	bf48      	it	mi
 80100ee:	b2ad      	uxthmi	r5, r5
 80100f0:	6031      	str	r1, [r6, #0]
 80100f2:	07d9      	lsls	r1, r3, #31
 80100f4:	bf44      	itt	mi
 80100f6:	f043 0320 	orrmi.w	r3, r3, #32
 80100fa:	6023      	strmi	r3, [r4, #0]
 80100fc:	b11d      	cbz	r5, 8010106 <_printf_i+0x19e>
 80100fe:	2310      	movs	r3, #16
 8010100:	e7ac      	b.n	801005c <_printf_i+0xf4>
 8010102:	4827      	ldr	r0, [pc, #156]	@ (80101a0 <_printf_i+0x238>)
 8010104:	e7e9      	b.n	80100da <_printf_i+0x172>
 8010106:	6823      	ldr	r3, [r4, #0]
 8010108:	f023 0320 	bic.w	r3, r3, #32
 801010c:	6023      	str	r3, [r4, #0]
 801010e:	e7f6      	b.n	80100fe <_printf_i+0x196>
 8010110:	4616      	mov	r6, r2
 8010112:	e7bd      	b.n	8010090 <_printf_i+0x128>
 8010114:	6833      	ldr	r3, [r6, #0]
 8010116:	6825      	ldr	r5, [r4, #0]
 8010118:	6961      	ldr	r1, [r4, #20]
 801011a:	1d18      	adds	r0, r3, #4
 801011c:	6030      	str	r0, [r6, #0]
 801011e:	062e      	lsls	r6, r5, #24
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	d501      	bpl.n	8010128 <_printf_i+0x1c0>
 8010124:	6019      	str	r1, [r3, #0]
 8010126:	e002      	b.n	801012e <_printf_i+0x1c6>
 8010128:	0668      	lsls	r0, r5, #25
 801012a:	d5fb      	bpl.n	8010124 <_printf_i+0x1bc>
 801012c:	8019      	strh	r1, [r3, #0]
 801012e:	2300      	movs	r3, #0
 8010130:	6123      	str	r3, [r4, #16]
 8010132:	4616      	mov	r6, r2
 8010134:	e7bc      	b.n	80100b0 <_printf_i+0x148>
 8010136:	6833      	ldr	r3, [r6, #0]
 8010138:	1d1a      	adds	r2, r3, #4
 801013a:	6032      	str	r2, [r6, #0]
 801013c:	681e      	ldr	r6, [r3, #0]
 801013e:	6862      	ldr	r2, [r4, #4]
 8010140:	2100      	movs	r1, #0
 8010142:	4630      	mov	r0, r6
 8010144:	f7f0 f8d4 	bl	80002f0 <memchr>
 8010148:	b108      	cbz	r0, 801014e <_printf_i+0x1e6>
 801014a:	1b80      	subs	r0, r0, r6
 801014c:	6060      	str	r0, [r4, #4]
 801014e:	6863      	ldr	r3, [r4, #4]
 8010150:	6123      	str	r3, [r4, #16]
 8010152:	2300      	movs	r3, #0
 8010154:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010158:	e7aa      	b.n	80100b0 <_printf_i+0x148>
 801015a:	6923      	ldr	r3, [r4, #16]
 801015c:	4632      	mov	r2, r6
 801015e:	4649      	mov	r1, r9
 8010160:	4640      	mov	r0, r8
 8010162:	47d0      	blx	sl
 8010164:	3001      	adds	r0, #1
 8010166:	d0ad      	beq.n	80100c4 <_printf_i+0x15c>
 8010168:	6823      	ldr	r3, [r4, #0]
 801016a:	079b      	lsls	r3, r3, #30
 801016c:	d413      	bmi.n	8010196 <_printf_i+0x22e>
 801016e:	68e0      	ldr	r0, [r4, #12]
 8010170:	9b03      	ldr	r3, [sp, #12]
 8010172:	4298      	cmp	r0, r3
 8010174:	bfb8      	it	lt
 8010176:	4618      	movlt	r0, r3
 8010178:	e7a6      	b.n	80100c8 <_printf_i+0x160>
 801017a:	2301      	movs	r3, #1
 801017c:	4632      	mov	r2, r6
 801017e:	4649      	mov	r1, r9
 8010180:	4640      	mov	r0, r8
 8010182:	47d0      	blx	sl
 8010184:	3001      	adds	r0, #1
 8010186:	d09d      	beq.n	80100c4 <_printf_i+0x15c>
 8010188:	3501      	adds	r5, #1
 801018a:	68e3      	ldr	r3, [r4, #12]
 801018c:	9903      	ldr	r1, [sp, #12]
 801018e:	1a5b      	subs	r3, r3, r1
 8010190:	42ab      	cmp	r3, r5
 8010192:	dcf2      	bgt.n	801017a <_printf_i+0x212>
 8010194:	e7eb      	b.n	801016e <_printf_i+0x206>
 8010196:	2500      	movs	r5, #0
 8010198:	f104 0619 	add.w	r6, r4, #25
 801019c:	e7f5      	b.n	801018a <_printf_i+0x222>
 801019e:	bf00      	nop
 80101a0:	080141b2 	.word	0x080141b2
 80101a4:	080141c3 	.word	0x080141c3

080101a8 <_scanf_float>:
 80101a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101ac:	b087      	sub	sp, #28
 80101ae:	4617      	mov	r7, r2
 80101b0:	9303      	str	r3, [sp, #12]
 80101b2:	688b      	ldr	r3, [r1, #8]
 80101b4:	1e5a      	subs	r2, r3, #1
 80101b6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80101ba:	bf81      	itttt	hi
 80101bc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80101c0:	eb03 0b05 	addhi.w	fp, r3, r5
 80101c4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80101c8:	608b      	strhi	r3, [r1, #8]
 80101ca:	680b      	ldr	r3, [r1, #0]
 80101cc:	460a      	mov	r2, r1
 80101ce:	f04f 0500 	mov.w	r5, #0
 80101d2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80101d6:	f842 3b1c 	str.w	r3, [r2], #28
 80101da:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80101de:	4680      	mov	r8, r0
 80101e0:	460c      	mov	r4, r1
 80101e2:	bf98      	it	ls
 80101e4:	f04f 0b00 	movls.w	fp, #0
 80101e8:	9201      	str	r2, [sp, #4]
 80101ea:	4616      	mov	r6, r2
 80101ec:	46aa      	mov	sl, r5
 80101ee:	46a9      	mov	r9, r5
 80101f0:	9502      	str	r5, [sp, #8]
 80101f2:	68a2      	ldr	r2, [r4, #8]
 80101f4:	b152      	cbz	r2, 801020c <_scanf_float+0x64>
 80101f6:	683b      	ldr	r3, [r7, #0]
 80101f8:	781b      	ldrb	r3, [r3, #0]
 80101fa:	2b4e      	cmp	r3, #78	@ 0x4e
 80101fc:	d864      	bhi.n	80102c8 <_scanf_float+0x120>
 80101fe:	2b40      	cmp	r3, #64	@ 0x40
 8010200:	d83c      	bhi.n	801027c <_scanf_float+0xd4>
 8010202:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8010206:	b2c8      	uxtb	r0, r1
 8010208:	280e      	cmp	r0, #14
 801020a:	d93a      	bls.n	8010282 <_scanf_float+0xda>
 801020c:	f1b9 0f00 	cmp.w	r9, #0
 8010210:	d003      	beq.n	801021a <_scanf_float+0x72>
 8010212:	6823      	ldr	r3, [r4, #0]
 8010214:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010218:	6023      	str	r3, [r4, #0]
 801021a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801021e:	f1ba 0f01 	cmp.w	sl, #1
 8010222:	f200 8117 	bhi.w	8010454 <_scanf_float+0x2ac>
 8010226:	9b01      	ldr	r3, [sp, #4]
 8010228:	429e      	cmp	r6, r3
 801022a:	f200 8108 	bhi.w	801043e <_scanf_float+0x296>
 801022e:	2001      	movs	r0, #1
 8010230:	b007      	add	sp, #28
 8010232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010236:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801023a:	2a0d      	cmp	r2, #13
 801023c:	d8e6      	bhi.n	801020c <_scanf_float+0x64>
 801023e:	a101      	add	r1, pc, #4	@ (adr r1, 8010244 <_scanf_float+0x9c>)
 8010240:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010244:	0801038b 	.word	0x0801038b
 8010248:	0801020d 	.word	0x0801020d
 801024c:	0801020d 	.word	0x0801020d
 8010250:	0801020d 	.word	0x0801020d
 8010254:	080103eb 	.word	0x080103eb
 8010258:	080103c3 	.word	0x080103c3
 801025c:	0801020d 	.word	0x0801020d
 8010260:	0801020d 	.word	0x0801020d
 8010264:	08010399 	.word	0x08010399
 8010268:	0801020d 	.word	0x0801020d
 801026c:	0801020d 	.word	0x0801020d
 8010270:	0801020d 	.word	0x0801020d
 8010274:	0801020d 	.word	0x0801020d
 8010278:	08010351 	.word	0x08010351
 801027c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8010280:	e7db      	b.n	801023a <_scanf_float+0x92>
 8010282:	290e      	cmp	r1, #14
 8010284:	d8c2      	bhi.n	801020c <_scanf_float+0x64>
 8010286:	a001      	add	r0, pc, #4	@ (adr r0, 801028c <_scanf_float+0xe4>)
 8010288:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801028c:	08010341 	.word	0x08010341
 8010290:	0801020d 	.word	0x0801020d
 8010294:	08010341 	.word	0x08010341
 8010298:	080103d7 	.word	0x080103d7
 801029c:	0801020d 	.word	0x0801020d
 80102a0:	080102e9 	.word	0x080102e9
 80102a4:	08010327 	.word	0x08010327
 80102a8:	08010327 	.word	0x08010327
 80102ac:	08010327 	.word	0x08010327
 80102b0:	08010327 	.word	0x08010327
 80102b4:	08010327 	.word	0x08010327
 80102b8:	08010327 	.word	0x08010327
 80102bc:	08010327 	.word	0x08010327
 80102c0:	08010327 	.word	0x08010327
 80102c4:	08010327 	.word	0x08010327
 80102c8:	2b6e      	cmp	r3, #110	@ 0x6e
 80102ca:	d809      	bhi.n	80102e0 <_scanf_float+0x138>
 80102cc:	2b60      	cmp	r3, #96	@ 0x60
 80102ce:	d8b2      	bhi.n	8010236 <_scanf_float+0x8e>
 80102d0:	2b54      	cmp	r3, #84	@ 0x54
 80102d2:	d07b      	beq.n	80103cc <_scanf_float+0x224>
 80102d4:	2b59      	cmp	r3, #89	@ 0x59
 80102d6:	d199      	bne.n	801020c <_scanf_float+0x64>
 80102d8:	2d07      	cmp	r5, #7
 80102da:	d197      	bne.n	801020c <_scanf_float+0x64>
 80102dc:	2508      	movs	r5, #8
 80102de:	e02c      	b.n	801033a <_scanf_float+0x192>
 80102e0:	2b74      	cmp	r3, #116	@ 0x74
 80102e2:	d073      	beq.n	80103cc <_scanf_float+0x224>
 80102e4:	2b79      	cmp	r3, #121	@ 0x79
 80102e6:	e7f6      	b.n	80102d6 <_scanf_float+0x12e>
 80102e8:	6821      	ldr	r1, [r4, #0]
 80102ea:	05c8      	lsls	r0, r1, #23
 80102ec:	d51b      	bpl.n	8010326 <_scanf_float+0x17e>
 80102ee:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80102f2:	6021      	str	r1, [r4, #0]
 80102f4:	f109 0901 	add.w	r9, r9, #1
 80102f8:	f1bb 0f00 	cmp.w	fp, #0
 80102fc:	d003      	beq.n	8010306 <_scanf_float+0x15e>
 80102fe:	3201      	adds	r2, #1
 8010300:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010304:	60a2      	str	r2, [r4, #8]
 8010306:	68a3      	ldr	r3, [r4, #8]
 8010308:	3b01      	subs	r3, #1
 801030a:	60a3      	str	r3, [r4, #8]
 801030c:	6923      	ldr	r3, [r4, #16]
 801030e:	3301      	adds	r3, #1
 8010310:	6123      	str	r3, [r4, #16]
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	3b01      	subs	r3, #1
 8010316:	2b00      	cmp	r3, #0
 8010318:	607b      	str	r3, [r7, #4]
 801031a:	f340 8087 	ble.w	801042c <_scanf_float+0x284>
 801031e:	683b      	ldr	r3, [r7, #0]
 8010320:	3301      	adds	r3, #1
 8010322:	603b      	str	r3, [r7, #0]
 8010324:	e765      	b.n	80101f2 <_scanf_float+0x4a>
 8010326:	eb1a 0105 	adds.w	r1, sl, r5
 801032a:	f47f af6f 	bne.w	801020c <_scanf_float+0x64>
 801032e:	6822      	ldr	r2, [r4, #0]
 8010330:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8010334:	6022      	str	r2, [r4, #0]
 8010336:	460d      	mov	r5, r1
 8010338:	468a      	mov	sl, r1
 801033a:	f806 3b01 	strb.w	r3, [r6], #1
 801033e:	e7e2      	b.n	8010306 <_scanf_float+0x15e>
 8010340:	6822      	ldr	r2, [r4, #0]
 8010342:	0610      	lsls	r0, r2, #24
 8010344:	f57f af62 	bpl.w	801020c <_scanf_float+0x64>
 8010348:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801034c:	6022      	str	r2, [r4, #0]
 801034e:	e7f4      	b.n	801033a <_scanf_float+0x192>
 8010350:	f1ba 0f00 	cmp.w	sl, #0
 8010354:	d10e      	bne.n	8010374 <_scanf_float+0x1cc>
 8010356:	f1b9 0f00 	cmp.w	r9, #0
 801035a:	d10e      	bne.n	801037a <_scanf_float+0x1d2>
 801035c:	6822      	ldr	r2, [r4, #0]
 801035e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8010362:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8010366:	d108      	bne.n	801037a <_scanf_float+0x1d2>
 8010368:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801036c:	6022      	str	r2, [r4, #0]
 801036e:	f04f 0a01 	mov.w	sl, #1
 8010372:	e7e2      	b.n	801033a <_scanf_float+0x192>
 8010374:	f1ba 0f02 	cmp.w	sl, #2
 8010378:	d055      	beq.n	8010426 <_scanf_float+0x27e>
 801037a:	2d01      	cmp	r5, #1
 801037c:	d002      	beq.n	8010384 <_scanf_float+0x1dc>
 801037e:	2d04      	cmp	r5, #4
 8010380:	f47f af44 	bne.w	801020c <_scanf_float+0x64>
 8010384:	3501      	adds	r5, #1
 8010386:	b2ed      	uxtb	r5, r5
 8010388:	e7d7      	b.n	801033a <_scanf_float+0x192>
 801038a:	f1ba 0f01 	cmp.w	sl, #1
 801038e:	f47f af3d 	bne.w	801020c <_scanf_float+0x64>
 8010392:	f04f 0a02 	mov.w	sl, #2
 8010396:	e7d0      	b.n	801033a <_scanf_float+0x192>
 8010398:	b97d      	cbnz	r5, 80103ba <_scanf_float+0x212>
 801039a:	f1b9 0f00 	cmp.w	r9, #0
 801039e:	f47f af38 	bne.w	8010212 <_scanf_float+0x6a>
 80103a2:	6822      	ldr	r2, [r4, #0]
 80103a4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80103a8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80103ac:	f040 8101 	bne.w	80105b2 <_scanf_float+0x40a>
 80103b0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80103b4:	6022      	str	r2, [r4, #0]
 80103b6:	2501      	movs	r5, #1
 80103b8:	e7bf      	b.n	801033a <_scanf_float+0x192>
 80103ba:	2d03      	cmp	r5, #3
 80103bc:	d0e2      	beq.n	8010384 <_scanf_float+0x1dc>
 80103be:	2d05      	cmp	r5, #5
 80103c0:	e7de      	b.n	8010380 <_scanf_float+0x1d8>
 80103c2:	2d02      	cmp	r5, #2
 80103c4:	f47f af22 	bne.w	801020c <_scanf_float+0x64>
 80103c8:	2503      	movs	r5, #3
 80103ca:	e7b6      	b.n	801033a <_scanf_float+0x192>
 80103cc:	2d06      	cmp	r5, #6
 80103ce:	f47f af1d 	bne.w	801020c <_scanf_float+0x64>
 80103d2:	2507      	movs	r5, #7
 80103d4:	e7b1      	b.n	801033a <_scanf_float+0x192>
 80103d6:	6822      	ldr	r2, [r4, #0]
 80103d8:	0591      	lsls	r1, r2, #22
 80103da:	f57f af17 	bpl.w	801020c <_scanf_float+0x64>
 80103de:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80103e2:	6022      	str	r2, [r4, #0]
 80103e4:	f8cd 9008 	str.w	r9, [sp, #8]
 80103e8:	e7a7      	b.n	801033a <_scanf_float+0x192>
 80103ea:	6822      	ldr	r2, [r4, #0]
 80103ec:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80103f0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80103f4:	d006      	beq.n	8010404 <_scanf_float+0x25c>
 80103f6:	0550      	lsls	r0, r2, #21
 80103f8:	f57f af08 	bpl.w	801020c <_scanf_float+0x64>
 80103fc:	f1b9 0f00 	cmp.w	r9, #0
 8010400:	f000 80d7 	beq.w	80105b2 <_scanf_float+0x40a>
 8010404:	0591      	lsls	r1, r2, #22
 8010406:	bf58      	it	pl
 8010408:	9902      	ldrpl	r1, [sp, #8]
 801040a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801040e:	bf58      	it	pl
 8010410:	eba9 0101 	subpl.w	r1, r9, r1
 8010414:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8010418:	bf58      	it	pl
 801041a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801041e:	6022      	str	r2, [r4, #0]
 8010420:	f04f 0900 	mov.w	r9, #0
 8010424:	e789      	b.n	801033a <_scanf_float+0x192>
 8010426:	f04f 0a03 	mov.w	sl, #3
 801042a:	e786      	b.n	801033a <_scanf_float+0x192>
 801042c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8010430:	4639      	mov	r1, r7
 8010432:	4640      	mov	r0, r8
 8010434:	4798      	blx	r3
 8010436:	2800      	cmp	r0, #0
 8010438:	f43f aedb 	beq.w	80101f2 <_scanf_float+0x4a>
 801043c:	e6e6      	b.n	801020c <_scanf_float+0x64>
 801043e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010442:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010446:	463a      	mov	r2, r7
 8010448:	4640      	mov	r0, r8
 801044a:	4798      	blx	r3
 801044c:	6923      	ldr	r3, [r4, #16]
 801044e:	3b01      	subs	r3, #1
 8010450:	6123      	str	r3, [r4, #16]
 8010452:	e6e8      	b.n	8010226 <_scanf_float+0x7e>
 8010454:	1e6b      	subs	r3, r5, #1
 8010456:	2b06      	cmp	r3, #6
 8010458:	d824      	bhi.n	80104a4 <_scanf_float+0x2fc>
 801045a:	2d02      	cmp	r5, #2
 801045c:	d836      	bhi.n	80104cc <_scanf_float+0x324>
 801045e:	9b01      	ldr	r3, [sp, #4]
 8010460:	429e      	cmp	r6, r3
 8010462:	f67f aee4 	bls.w	801022e <_scanf_float+0x86>
 8010466:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801046a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801046e:	463a      	mov	r2, r7
 8010470:	4640      	mov	r0, r8
 8010472:	4798      	blx	r3
 8010474:	6923      	ldr	r3, [r4, #16]
 8010476:	3b01      	subs	r3, #1
 8010478:	6123      	str	r3, [r4, #16]
 801047a:	e7f0      	b.n	801045e <_scanf_float+0x2b6>
 801047c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010480:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8010484:	463a      	mov	r2, r7
 8010486:	4640      	mov	r0, r8
 8010488:	4798      	blx	r3
 801048a:	6923      	ldr	r3, [r4, #16]
 801048c:	3b01      	subs	r3, #1
 801048e:	6123      	str	r3, [r4, #16]
 8010490:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010494:	fa5f fa8a 	uxtb.w	sl, sl
 8010498:	f1ba 0f02 	cmp.w	sl, #2
 801049c:	d1ee      	bne.n	801047c <_scanf_float+0x2d4>
 801049e:	3d03      	subs	r5, #3
 80104a0:	b2ed      	uxtb	r5, r5
 80104a2:	1b76      	subs	r6, r6, r5
 80104a4:	6823      	ldr	r3, [r4, #0]
 80104a6:	05da      	lsls	r2, r3, #23
 80104a8:	d530      	bpl.n	801050c <_scanf_float+0x364>
 80104aa:	055b      	lsls	r3, r3, #21
 80104ac:	d511      	bpl.n	80104d2 <_scanf_float+0x32a>
 80104ae:	9b01      	ldr	r3, [sp, #4]
 80104b0:	429e      	cmp	r6, r3
 80104b2:	f67f aebc 	bls.w	801022e <_scanf_float+0x86>
 80104b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80104ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80104be:	463a      	mov	r2, r7
 80104c0:	4640      	mov	r0, r8
 80104c2:	4798      	blx	r3
 80104c4:	6923      	ldr	r3, [r4, #16]
 80104c6:	3b01      	subs	r3, #1
 80104c8:	6123      	str	r3, [r4, #16]
 80104ca:	e7f0      	b.n	80104ae <_scanf_float+0x306>
 80104cc:	46aa      	mov	sl, r5
 80104ce:	46b3      	mov	fp, r6
 80104d0:	e7de      	b.n	8010490 <_scanf_float+0x2e8>
 80104d2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80104d6:	6923      	ldr	r3, [r4, #16]
 80104d8:	2965      	cmp	r1, #101	@ 0x65
 80104da:	f103 33ff 	add.w	r3, r3, #4294967295
 80104de:	f106 35ff 	add.w	r5, r6, #4294967295
 80104e2:	6123      	str	r3, [r4, #16]
 80104e4:	d00c      	beq.n	8010500 <_scanf_float+0x358>
 80104e6:	2945      	cmp	r1, #69	@ 0x45
 80104e8:	d00a      	beq.n	8010500 <_scanf_float+0x358>
 80104ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80104ee:	463a      	mov	r2, r7
 80104f0:	4640      	mov	r0, r8
 80104f2:	4798      	blx	r3
 80104f4:	6923      	ldr	r3, [r4, #16]
 80104f6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80104fa:	3b01      	subs	r3, #1
 80104fc:	1eb5      	subs	r5, r6, #2
 80104fe:	6123      	str	r3, [r4, #16]
 8010500:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010504:	463a      	mov	r2, r7
 8010506:	4640      	mov	r0, r8
 8010508:	4798      	blx	r3
 801050a:	462e      	mov	r6, r5
 801050c:	6822      	ldr	r2, [r4, #0]
 801050e:	f012 0210 	ands.w	r2, r2, #16
 8010512:	d001      	beq.n	8010518 <_scanf_float+0x370>
 8010514:	2000      	movs	r0, #0
 8010516:	e68b      	b.n	8010230 <_scanf_float+0x88>
 8010518:	7032      	strb	r2, [r6, #0]
 801051a:	6823      	ldr	r3, [r4, #0]
 801051c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8010520:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010524:	d11a      	bne.n	801055c <_scanf_float+0x3b4>
 8010526:	9b02      	ldr	r3, [sp, #8]
 8010528:	454b      	cmp	r3, r9
 801052a:	eba3 0209 	sub.w	r2, r3, r9
 801052e:	d121      	bne.n	8010574 <_scanf_float+0x3cc>
 8010530:	9901      	ldr	r1, [sp, #4]
 8010532:	2200      	movs	r2, #0
 8010534:	4640      	mov	r0, r8
 8010536:	f002 fc49 	bl	8012dcc <_strtod_r>
 801053a:	9b03      	ldr	r3, [sp, #12]
 801053c:	6821      	ldr	r1, [r4, #0]
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	f011 0f02 	tst.w	r1, #2
 8010544:	f103 0204 	add.w	r2, r3, #4
 8010548:	d01f      	beq.n	801058a <_scanf_float+0x3e2>
 801054a:	9903      	ldr	r1, [sp, #12]
 801054c:	600a      	str	r2, [r1, #0]
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	ed83 0b00 	vstr	d0, [r3]
 8010554:	68e3      	ldr	r3, [r4, #12]
 8010556:	3301      	adds	r3, #1
 8010558:	60e3      	str	r3, [r4, #12]
 801055a:	e7db      	b.n	8010514 <_scanf_float+0x36c>
 801055c:	9b04      	ldr	r3, [sp, #16]
 801055e:	2b00      	cmp	r3, #0
 8010560:	d0e6      	beq.n	8010530 <_scanf_float+0x388>
 8010562:	9905      	ldr	r1, [sp, #20]
 8010564:	230a      	movs	r3, #10
 8010566:	3101      	adds	r1, #1
 8010568:	4640      	mov	r0, r8
 801056a:	f002 fcaf 	bl	8012ecc <_strtol_r>
 801056e:	9b04      	ldr	r3, [sp, #16]
 8010570:	9e05      	ldr	r6, [sp, #20]
 8010572:	1ac2      	subs	r2, r0, r3
 8010574:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8010578:	429e      	cmp	r6, r3
 801057a:	bf28      	it	cs
 801057c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8010580:	490d      	ldr	r1, [pc, #52]	@ (80105b8 <_scanf_float+0x410>)
 8010582:	4630      	mov	r0, r6
 8010584:	f000 f960 	bl	8010848 <siprintf>
 8010588:	e7d2      	b.n	8010530 <_scanf_float+0x388>
 801058a:	f011 0f04 	tst.w	r1, #4
 801058e:	9903      	ldr	r1, [sp, #12]
 8010590:	600a      	str	r2, [r1, #0]
 8010592:	d1dc      	bne.n	801054e <_scanf_float+0x3a6>
 8010594:	eeb4 0b40 	vcmp.f64	d0, d0
 8010598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801059c:	681d      	ldr	r5, [r3, #0]
 801059e:	d705      	bvc.n	80105ac <_scanf_float+0x404>
 80105a0:	4806      	ldr	r0, [pc, #24]	@ (80105bc <_scanf_float+0x414>)
 80105a2:	f000 fb81 	bl	8010ca8 <nanf>
 80105a6:	ed85 0a00 	vstr	s0, [r5]
 80105aa:	e7d3      	b.n	8010554 <_scanf_float+0x3ac>
 80105ac:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80105b0:	e7f9      	b.n	80105a6 <_scanf_float+0x3fe>
 80105b2:	f04f 0900 	mov.w	r9, #0
 80105b6:	e630      	b.n	801021a <_scanf_float+0x72>
 80105b8:	080141d4 	.word	0x080141d4
 80105bc:	0801419f 	.word	0x0801419f

080105c0 <std>:
 80105c0:	2300      	movs	r3, #0
 80105c2:	b510      	push	{r4, lr}
 80105c4:	4604      	mov	r4, r0
 80105c6:	e9c0 3300 	strd	r3, r3, [r0]
 80105ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80105ce:	6083      	str	r3, [r0, #8]
 80105d0:	8181      	strh	r1, [r0, #12]
 80105d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80105d4:	81c2      	strh	r2, [r0, #14]
 80105d6:	6183      	str	r3, [r0, #24]
 80105d8:	4619      	mov	r1, r3
 80105da:	2208      	movs	r2, #8
 80105dc:	305c      	adds	r0, #92	@ 0x5c
 80105de:	f000 fa2b 	bl	8010a38 <memset>
 80105e2:	4b0d      	ldr	r3, [pc, #52]	@ (8010618 <std+0x58>)
 80105e4:	6263      	str	r3, [r4, #36]	@ 0x24
 80105e6:	4b0d      	ldr	r3, [pc, #52]	@ (801061c <std+0x5c>)
 80105e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80105ea:	4b0d      	ldr	r3, [pc, #52]	@ (8010620 <std+0x60>)
 80105ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80105ee:	4b0d      	ldr	r3, [pc, #52]	@ (8010624 <std+0x64>)
 80105f0:	6323      	str	r3, [r4, #48]	@ 0x30
 80105f2:	4b0d      	ldr	r3, [pc, #52]	@ (8010628 <std+0x68>)
 80105f4:	6224      	str	r4, [r4, #32]
 80105f6:	429c      	cmp	r4, r3
 80105f8:	d006      	beq.n	8010608 <std+0x48>
 80105fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80105fe:	4294      	cmp	r4, r2
 8010600:	d002      	beq.n	8010608 <std+0x48>
 8010602:	33d0      	adds	r3, #208	@ 0xd0
 8010604:	429c      	cmp	r4, r3
 8010606:	d105      	bne.n	8010614 <std+0x54>
 8010608:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801060c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010610:	f000 bb38 	b.w	8010c84 <__retarget_lock_init_recursive>
 8010614:	bd10      	pop	{r4, pc}
 8010616:	bf00      	nop
 8010618:	08010889 	.word	0x08010889
 801061c:	080108ab 	.word	0x080108ab
 8010620:	080108e3 	.word	0x080108e3
 8010624:	08010907 	.word	0x08010907
 8010628:	24004e38 	.word	0x24004e38

0801062c <stdio_exit_handler>:
 801062c:	4a02      	ldr	r2, [pc, #8]	@ (8010638 <stdio_exit_handler+0xc>)
 801062e:	4903      	ldr	r1, [pc, #12]	@ (801063c <stdio_exit_handler+0x10>)
 8010630:	4803      	ldr	r0, [pc, #12]	@ (8010640 <stdio_exit_handler+0x14>)
 8010632:	f000 b87b 	b.w	801072c <_fwalk_sglue>
 8010636:	bf00      	nop
 8010638:	24000014 	.word	0x24000014
 801063c:	0801350d 	.word	0x0801350d
 8010640:	24000024 	.word	0x24000024

08010644 <cleanup_stdio>:
 8010644:	6841      	ldr	r1, [r0, #4]
 8010646:	4b0c      	ldr	r3, [pc, #48]	@ (8010678 <cleanup_stdio+0x34>)
 8010648:	4299      	cmp	r1, r3
 801064a:	b510      	push	{r4, lr}
 801064c:	4604      	mov	r4, r0
 801064e:	d001      	beq.n	8010654 <cleanup_stdio+0x10>
 8010650:	f002 ff5c 	bl	801350c <_fflush_r>
 8010654:	68a1      	ldr	r1, [r4, #8]
 8010656:	4b09      	ldr	r3, [pc, #36]	@ (801067c <cleanup_stdio+0x38>)
 8010658:	4299      	cmp	r1, r3
 801065a:	d002      	beq.n	8010662 <cleanup_stdio+0x1e>
 801065c:	4620      	mov	r0, r4
 801065e:	f002 ff55 	bl	801350c <_fflush_r>
 8010662:	68e1      	ldr	r1, [r4, #12]
 8010664:	4b06      	ldr	r3, [pc, #24]	@ (8010680 <cleanup_stdio+0x3c>)
 8010666:	4299      	cmp	r1, r3
 8010668:	d004      	beq.n	8010674 <cleanup_stdio+0x30>
 801066a:	4620      	mov	r0, r4
 801066c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010670:	f002 bf4c 	b.w	801350c <_fflush_r>
 8010674:	bd10      	pop	{r4, pc}
 8010676:	bf00      	nop
 8010678:	24004e38 	.word	0x24004e38
 801067c:	24004ea0 	.word	0x24004ea0
 8010680:	24004f08 	.word	0x24004f08

08010684 <global_stdio_init.part.0>:
 8010684:	b510      	push	{r4, lr}
 8010686:	4b0b      	ldr	r3, [pc, #44]	@ (80106b4 <global_stdio_init.part.0+0x30>)
 8010688:	4c0b      	ldr	r4, [pc, #44]	@ (80106b8 <global_stdio_init.part.0+0x34>)
 801068a:	4a0c      	ldr	r2, [pc, #48]	@ (80106bc <global_stdio_init.part.0+0x38>)
 801068c:	601a      	str	r2, [r3, #0]
 801068e:	4620      	mov	r0, r4
 8010690:	2200      	movs	r2, #0
 8010692:	2104      	movs	r1, #4
 8010694:	f7ff ff94 	bl	80105c0 <std>
 8010698:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801069c:	2201      	movs	r2, #1
 801069e:	2109      	movs	r1, #9
 80106a0:	f7ff ff8e 	bl	80105c0 <std>
 80106a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80106a8:	2202      	movs	r2, #2
 80106aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80106ae:	2112      	movs	r1, #18
 80106b0:	f7ff bf86 	b.w	80105c0 <std>
 80106b4:	24004f70 	.word	0x24004f70
 80106b8:	24004e38 	.word	0x24004e38
 80106bc:	0801062d 	.word	0x0801062d

080106c0 <__sfp_lock_acquire>:
 80106c0:	4801      	ldr	r0, [pc, #4]	@ (80106c8 <__sfp_lock_acquire+0x8>)
 80106c2:	f000 bae0 	b.w	8010c86 <__retarget_lock_acquire_recursive>
 80106c6:	bf00      	nop
 80106c8:	24004f79 	.word	0x24004f79

080106cc <__sfp_lock_release>:
 80106cc:	4801      	ldr	r0, [pc, #4]	@ (80106d4 <__sfp_lock_release+0x8>)
 80106ce:	f000 badb 	b.w	8010c88 <__retarget_lock_release_recursive>
 80106d2:	bf00      	nop
 80106d4:	24004f79 	.word	0x24004f79

080106d8 <__sinit>:
 80106d8:	b510      	push	{r4, lr}
 80106da:	4604      	mov	r4, r0
 80106dc:	f7ff fff0 	bl	80106c0 <__sfp_lock_acquire>
 80106e0:	6a23      	ldr	r3, [r4, #32]
 80106e2:	b11b      	cbz	r3, 80106ec <__sinit+0x14>
 80106e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80106e8:	f7ff bff0 	b.w	80106cc <__sfp_lock_release>
 80106ec:	4b04      	ldr	r3, [pc, #16]	@ (8010700 <__sinit+0x28>)
 80106ee:	6223      	str	r3, [r4, #32]
 80106f0:	4b04      	ldr	r3, [pc, #16]	@ (8010704 <__sinit+0x2c>)
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d1f5      	bne.n	80106e4 <__sinit+0xc>
 80106f8:	f7ff ffc4 	bl	8010684 <global_stdio_init.part.0>
 80106fc:	e7f2      	b.n	80106e4 <__sinit+0xc>
 80106fe:	bf00      	nop
 8010700:	08010645 	.word	0x08010645
 8010704:	24004f70 	.word	0x24004f70

08010708 <fiprintf>:
 8010708:	b40e      	push	{r1, r2, r3}
 801070a:	b503      	push	{r0, r1, lr}
 801070c:	4601      	mov	r1, r0
 801070e:	ab03      	add	r3, sp, #12
 8010710:	4805      	ldr	r0, [pc, #20]	@ (8010728 <fiprintf+0x20>)
 8010712:	f853 2b04 	ldr.w	r2, [r3], #4
 8010716:	6800      	ldr	r0, [r0, #0]
 8010718:	9301      	str	r3, [sp, #4]
 801071a:	f002 fd5b 	bl	80131d4 <_vfiprintf_r>
 801071e:	b002      	add	sp, #8
 8010720:	f85d eb04 	ldr.w	lr, [sp], #4
 8010724:	b003      	add	sp, #12
 8010726:	4770      	bx	lr
 8010728:	24000020 	.word	0x24000020

0801072c <_fwalk_sglue>:
 801072c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010730:	4607      	mov	r7, r0
 8010732:	4688      	mov	r8, r1
 8010734:	4614      	mov	r4, r2
 8010736:	2600      	movs	r6, #0
 8010738:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801073c:	f1b9 0901 	subs.w	r9, r9, #1
 8010740:	d505      	bpl.n	801074e <_fwalk_sglue+0x22>
 8010742:	6824      	ldr	r4, [r4, #0]
 8010744:	2c00      	cmp	r4, #0
 8010746:	d1f7      	bne.n	8010738 <_fwalk_sglue+0xc>
 8010748:	4630      	mov	r0, r6
 801074a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801074e:	89ab      	ldrh	r3, [r5, #12]
 8010750:	2b01      	cmp	r3, #1
 8010752:	d907      	bls.n	8010764 <_fwalk_sglue+0x38>
 8010754:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010758:	3301      	adds	r3, #1
 801075a:	d003      	beq.n	8010764 <_fwalk_sglue+0x38>
 801075c:	4629      	mov	r1, r5
 801075e:	4638      	mov	r0, r7
 8010760:	47c0      	blx	r8
 8010762:	4306      	orrs	r6, r0
 8010764:	3568      	adds	r5, #104	@ 0x68
 8010766:	e7e9      	b.n	801073c <_fwalk_sglue+0x10>

08010768 <iprintf>:
 8010768:	b40f      	push	{r0, r1, r2, r3}
 801076a:	b507      	push	{r0, r1, r2, lr}
 801076c:	4906      	ldr	r1, [pc, #24]	@ (8010788 <iprintf+0x20>)
 801076e:	ab04      	add	r3, sp, #16
 8010770:	6808      	ldr	r0, [r1, #0]
 8010772:	f853 2b04 	ldr.w	r2, [r3], #4
 8010776:	6881      	ldr	r1, [r0, #8]
 8010778:	9301      	str	r3, [sp, #4]
 801077a:	f002 fd2b 	bl	80131d4 <_vfiprintf_r>
 801077e:	b003      	add	sp, #12
 8010780:	f85d eb04 	ldr.w	lr, [sp], #4
 8010784:	b004      	add	sp, #16
 8010786:	4770      	bx	lr
 8010788:	24000020 	.word	0x24000020

0801078c <_puts_r>:
 801078c:	6a03      	ldr	r3, [r0, #32]
 801078e:	b570      	push	{r4, r5, r6, lr}
 8010790:	6884      	ldr	r4, [r0, #8]
 8010792:	4605      	mov	r5, r0
 8010794:	460e      	mov	r6, r1
 8010796:	b90b      	cbnz	r3, 801079c <_puts_r+0x10>
 8010798:	f7ff ff9e 	bl	80106d8 <__sinit>
 801079c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801079e:	07db      	lsls	r3, r3, #31
 80107a0:	d405      	bmi.n	80107ae <_puts_r+0x22>
 80107a2:	89a3      	ldrh	r3, [r4, #12]
 80107a4:	0598      	lsls	r0, r3, #22
 80107a6:	d402      	bmi.n	80107ae <_puts_r+0x22>
 80107a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80107aa:	f000 fa6c 	bl	8010c86 <__retarget_lock_acquire_recursive>
 80107ae:	89a3      	ldrh	r3, [r4, #12]
 80107b0:	0719      	lsls	r1, r3, #28
 80107b2:	d502      	bpl.n	80107ba <_puts_r+0x2e>
 80107b4:	6923      	ldr	r3, [r4, #16]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d135      	bne.n	8010826 <_puts_r+0x9a>
 80107ba:	4621      	mov	r1, r4
 80107bc:	4628      	mov	r0, r5
 80107be:	f000 f8e5 	bl	801098c <__swsetup_r>
 80107c2:	b380      	cbz	r0, 8010826 <_puts_r+0x9a>
 80107c4:	f04f 35ff 	mov.w	r5, #4294967295
 80107c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80107ca:	07da      	lsls	r2, r3, #31
 80107cc:	d405      	bmi.n	80107da <_puts_r+0x4e>
 80107ce:	89a3      	ldrh	r3, [r4, #12]
 80107d0:	059b      	lsls	r3, r3, #22
 80107d2:	d402      	bmi.n	80107da <_puts_r+0x4e>
 80107d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80107d6:	f000 fa57 	bl	8010c88 <__retarget_lock_release_recursive>
 80107da:	4628      	mov	r0, r5
 80107dc:	bd70      	pop	{r4, r5, r6, pc}
 80107de:	2b00      	cmp	r3, #0
 80107e0:	da04      	bge.n	80107ec <_puts_r+0x60>
 80107e2:	69a2      	ldr	r2, [r4, #24]
 80107e4:	429a      	cmp	r2, r3
 80107e6:	dc17      	bgt.n	8010818 <_puts_r+0x8c>
 80107e8:	290a      	cmp	r1, #10
 80107ea:	d015      	beq.n	8010818 <_puts_r+0x8c>
 80107ec:	6823      	ldr	r3, [r4, #0]
 80107ee:	1c5a      	adds	r2, r3, #1
 80107f0:	6022      	str	r2, [r4, #0]
 80107f2:	7019      	strb	r1, [r3, #0]
 80107f4:	68a3      	ldr	r3, [r4, #8]
 80107f6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80107fa:	3b01      	subs	r3, #1
 80107fc:	60a3      	str	r3, [r4, #8]
 80107fe:	2900      	cmp	r1, #0
 8010800:	d1ed      	bne.n	80107de <_puts_r+0x52>
 8010802:	2b00      	cmp	r3, #0
 8010804:	da11      	bge.n	801082a <_puts_r+0x9e>
 8010806:	4622      	mov	r2, r4
 8010808:	210a      	movs	r1, #10
 801080a:	4628      	mov	r0, r5
 801080c:	f000 f87f 	bl	801090e <__swbuf_r>
 8010810:	3001      	adds	r0, #1
 8010812:	d0d7      	beq.n	80107c4 <_puts_r+0x38>
 8010814:	250a      	movs	r5, #10
 8010816:	e7d7      	b.n	80107c8 <_puts_r+0x3c>
 8010818:	4622      	mov	r2, r4
 801081a:	4628      	mov	r0, r5
 801081c:	f000 f877 	bl	801090e <__swbuf_r>
 8010820:	3001      	adds	r0, #1
 8010822:	d1e7      	bne.n	80107f4 <_puts_r+0x68>
 8010824:	e7ce      	b.n	80107c4 <_puts_r+0x38>
 8010826:	3e01      	subs	r6, #1
 8010828:	e7e4      	b.n	80107f4 <_puts_r+0x68>
 801082a:	6823      	ldr	r3, [r4, #0]
 801082c:	1c5a      	adds	r2, r3, #1
 801082e:	6022      	str	r2, [r4, #0]
 8010830:	220a      	movs	r2, #10
 8010832:	701a      	strb	r2, [r3, #0]
 8010834:	e7ee      	b.n	8010814 <_puts_r+0x88>
	...

08010838 <puts>:
 8010838:	4b02      	ldr	r3, [pc, #8]	@ (8010844 <puts+0xc>)
 801083a:	4601      	mov	r1, r0
 801083c:	6818      	ldr	r0, [r3, #0]
 801083e:	f7ff bfa5 	b.w	801078c <_puts_r>
 8010842:	bf00      	nop
 8010844:	24000020 	.word	0x24000020

08010848 <siprintf>:
 8010848:	b40e      	push	{r1, r2, r3}
 801084a:	b500      	push	{lr}
 801084c:	b09c      	sub	sp, #112	@ 0x70
 801084e:	ab1d      	add	r3, sp, #116	@ 0x74
 8010850:	9002      	str	r0, [sp, #8]
 8010852:	9006      	str	r0, [sp, #24]
 8010854:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010858:	4809      	ldr	r0, [pc, #36]	@ (8010880 <siprintf+0x38>)
 801085a:	9107      	str	r1, [sp, #28]
 801085c:	9104      	str	r1, [sp, #16]
 801085e:	4909      	ldr	r1, [pc, #36]	@ (8010884 <siprintf+0x3c>)
 8010860:	f853 2b04 	ldr.w	r2, [r3], #4
 8010864:	9105      	str	r1, [sp, #20]
 8010866:	6800      	ldr	r0, [r0, #0]
 8010868:	9301      	str	r3, [sp, #4]
 801086a:	a902      	add	r1, sp, #8
 801086c:	f002 fb8c 	bl	8012f88 <_svfiprintf_r>
 8010870:	9b02      	ldr	r3, [sp, #8]
 8010872:	2200      	movs	r2, #0
 8010874:	701a      	strb	r2, [r3, #0]
 8010876:	b01c      	add	sp, #112	@ 0x70
 8010878:	f85d eb04 	ldr.w	lr, [sp], #4
 801087c:	b003      	add	sp, #12
 801087e:	4770      	bx	lr
 8010880:	24000020 	.word	0x24000020
 8010884:	ffff0208 	.word	0xffff0208

08010888 <__sread>:
 8010888:	b510      	push	{r4, lr}
 801088a:	460c      	mov	r4, r1
 801088c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010890:	f000 f986 	bl	8010ba0 <_read_r>
 8010894:	2800      	cmp	r0, #0
 8010896:	bfab      	itete	ge
 8010898:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801089a:	89a3      	ldrhlt	r3, [r4, #12]
 801089c:	181b      	addge	r3, r3, r0
 801089e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80108a2:	bfac      	ite	ge
 80108a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80108a6:	81a3      	strhlt	r3, [r4, #12]
 80108a8:	bd10      	pop	{r4, pc}

080108aa <__swrite>:
 80108aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108ae:	461f      	mov	r7, r3
 80108b0:	898b      	ldrh	r3, [r1, #12]
 80108b2:	05db      	lsls	r3, r3, #23
 80108b4:	4605      	mov	r5, r0
 80108b6:	460c      	mov	r4, r1
 80108b8:	4616      	mov	r6, r2
 80108ba:	d505      	bpl.n	80108c8 <__swrite+0x1e>
 80108bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108c0:	2302      	movs	r3, #2
 80108c2:	2200      	movs	r2, #0
 80108c4:	f000 f95a 	bl	8010b7c <_lseek_r>
 80108c8:	89a3      	ldrh	r3, [r4, #12]
 80108ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80108ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80108d2:	81a3      	strh	r3, [r4, #12]
 80108d4:	4632      	mov	r2, r6
 80108d6:	463b      	mov	r3, r7
 80108d8:	4628      	mov	r0, r5
 80108da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80108de:	f000 b995 	b.w	8010c0c <_write_r>

080108e2 <__sseek>:
 80108e2:	b510      	push	{r4, lr}
 80108e4:	460c      	mov	r4, r1
 80108e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108ea:	f000 f947 	bl	8010b7c <_lseek_r>
 80108ee:	1c43      	adds	r3, r0, #1
 80108f0:	89a3      	ldrh	r3, [r4, #12]
 80108f2:	bf15      	itete	ne
 80108f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80108f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80108fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80108fe:	81a3      	strheq	r3, [r4, #12]
 8010900:	bf18      	it	ne
 8010902:	81a3      	strhne	r3, [r4, #12]
 8010904:	bd10      	pop	{r4, pc}

08010906 <__sclose>:
 8010906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801090a:	f000 b8d1 	b.w	8010ab0 <_close_r>

0801090e <__swbuf_r>:
 801090e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010910:	460e      	mov	r6, r1
 8010912:	4614      	mov	r4, r2
 8010914:	4605      	mov	r5, r0
 8010916:	b118      	cbz	r0, 8010920 <__swbuf_r+0x12>
 8010918:	6a03      	ldr	r3, [r0, #32]
 801091a:	b90b      	cbnz	r3, 8010920 <__swbuf_r+0x12>
 801091c:	f7ff fedc 	bl	80106d8 <__sinit>
 8010920:	69a3      	ldr	r3, [r4, #24]
 8010922:	60a3      	str	r3, [r4, #8]
 8010924:	89a3      	ldrh	r3, [r4, #12]
 8010926:	071a      	lsls	r2, r3, #28
 8010928:	d501      	bpl.n	801092e <__swbuf_r+0x20>
 801092a:	6923      	ldr	r3, [r4, #16]
 801092c:	b943      	cbnz	r3, 8010940 <__swbuf_r+0x32>
 801092e:	4621      	mov	r1, r4
 8010930:	4628      	mov	r0, r5
 8010932:	f000 f82b 	bl	801098c <__swsetup_r>
 8010936:	b118      	cbz	r0, 8010940 <__swbuf_r+0x32>
 8010938:	f04f 37ff 	mov.w	r7, #4294967295
 801093c:	4638      	mov	r0, r7
 801093e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010940:	6823      	ldr	r3, [r4, #0]
 8010942:	6922      	ldr	r2, [r4, #16]
 8010944:	1a98      	subs	r0, r3, r2
 8010946:	6963      	ldr	r3, [r4, #20]
 8010948:	b2f6      	uxtb	r6, r6
 801094a:	4283      	cmp	r3, r0
 801094c:	4637      	mov	r7, r6
 801094e:	dc05      	bgt.n	801095c <__swbuf_r+0x4e>
 8010950:	4621      	mov	r1, r4
 8010952:	4628      	mov	r0, r5
 8010954:	f002 fdda 	bl	801350c <_fflush_r>
 8010958:	2800      	cmp	r0, #0
 801095a:	d1ed      	bne.n	8010938 <__swbuf_r+0x2a>
 801095c:	68a3      	ldr	r3, [r4, #8]
 801095e:	3b01      	subs	r3, #1
 8010960:	60a3      	str	r3, [r4, #8]
 8010962:	6823      	ldr	r3, [r4, #0]
 8010964:	1c5a      	adds	r2, r3, #1
 8010966:	6022      	str	r2, [r4, #0]
 8010968:	701e      	strb	r6, [r3, #0]
 801096a:	6962      	ldr	r2, [r4, #20]
 801096c:	1c43      	adds	r3, r0, #1
 801096e:	429a      	cmp	r2, r3
 8010970:	d004      	beq.n	801097c <__swbuf_r+0x6e>
 8010972:	89a3      	ldrh	r3, [r4, #12]
 8010974:	07db      	lsls	r3, r3, #31
 8010976:	d5e1      	bpl.n	801093c <__swbuf_r+0x2e>
 8010978:	2e0a      	cmp	r6, #10
 801097a:	d1df      	bne.n	801093c <__swbuf_r+0x2e>
 801097c:	4621      	mov	r1, r4
 801097e:	4628      	mov	r0, r5
 8010980:	f002 fdc4 	bl	801350c <_fflush_r>
 8010984:	2800      	cmp	r0, #0
 8010986:	d0d9      	beq.n	801093c <__swbuf_r+0x2e>
 8010988:	e7d6      	b.n	8010938 <__swbuf_r+0x2a>
	...

0801098c <__swsetup_r>:
 801098c:	b538      	push	{r3, r4, r5, lr}
 801098e:	4b29      	ldr	r3, [pc, #164]	@ (8010a34 <__swsetup_r+0xa8>)
 8010990:	4605      	mov	r5, r0
 8010992:	6818      	ldr	r0, [r3, #0]
 8010994:	460c      	mov	r4, r1
 8010996:	b118      	cbz	r0, 80109a0 <__swsetup_r+0x14>
 8010998:	6a03      	ldr	r3, [r0, #32]
 801099a:	b90b      	cbnz	r3, 80109a0 <__swsetup_r+0x14>
 801099c:	f7ff fe9c 	bl	80106d8 <__sinit>
 80109a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80109a4:	0719      	lsls	r1, r3, #28
 80109a6:	d422      	bmi.n	80109ee <__swsetup_r+0x62>
 80109a8:	06da      	lsls	r2, r3, #27
 80109aa:	d407      	bmi.n	80109bc <__swsetup_r+0x30>
 80109ac:	2209      	movs	r2, #9
 80109ae:	602a      	str	r2, [r5, #0]
 80109b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80109b4:	81a3      	strh	r3, [r4, #12]
 80109b6:	f04f 30ff 	mov.w	r0, #4294967295
 80109ba:	e033      	b.n	8010a24 <__swsetup_r+0x98>
 80109bc:	0758      	lsls	r0, r3, #29
 80109be:	d512      	bpl.n	80109e6 <__swsetup_r+0x5a>
 80109c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80109c2:	b141      	cbz	r1, 80109d6 <__swsetup_r+0x4a>
 80109c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80109c8:	4299      	cmp	r1, r3
 80109ca:	d002      	beq.n	80109d2 <__swsetup_r+0x46>
 80109cc:	4628      	mov	r0, r5
 80109ce:	f000 ff51 	bl	8011874 <_free_r>
 80109d2:	2300      	movs	r3, #0
 80109d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80109d6:	89a3      	ldrh	r3, [r4, #12]
 80109d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80109dc:	81a3      	strh	r3, [r4, #12]
 80109de:	2300      	movs	r3, #0
 80109e0:	6063      	str	r3, [r4, #4]
 80109e2:	6923      	ldr	r3, [r4, #16]
 80109e4:	6023      	str	r3, [r4, #0]
 80109e6:	89a3      	ldrh	r3, [r4, #12]
 80109e8:	f043 0308 	orr.w	r3, r3, #8
 80109ec:	81a3      	strh	r3, [r4, #12]
 80109ee:	6923      	ldr	r3, [r4, #16]
 80109f0:	b94b      	cbnz	r3, 8010a06 <__swsetup_r+0x7a>
 80109f2:	89a3      	ldrh	r3, [r4, #12]
 80109f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80109f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80109fc:	d003      	beq.n	8010a06 <__swsetup_r+0x7a>
 80109fe:	4621      	mov	r1, r4
 8010a00:	4628      	mov	r0, r5
 8010a02:	f002 fdd1 	bl	80135a8 <__smakebuf_r>
 8010a06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a0a:	f013 0201 	ands.w	r2, r3, #1
 8010a0e:	d00a      	beq.n	8010a26 <__swsetup_r+0x9a>
 8010a10:	2200      	movs	r2, #0
 8010a12:	60a2      	str	r2, [r4, #8]
 8010a14:	6962      	ldr	r2, [r4, #20]
 8010a16:	4252      	negs	r2, r2
 8010a18:	61a2      	str	r2, [r4, #24]
 8010a1a:	6922      	ldr	r2, [r4, #16]
 8010a1c:	b942      	cbnz	r2, 8010a30 <__swsetup_r+0xa4>
 8010a1e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010a22:	d1c5      	bne.n	80109b0 <__swsetup_r+0x24>
 8010a24:	bd38      	pop	{r3, r4, r5, pc}
 8010a26:	0799      	lsls	r1, r3, #30
 8010a28:	bf58      	it	pl
 8010a2a:	6962      	ldrpl	r2, [r4, #20]
 8010a2c:	60a2      	str	r2, [r4, #8]
 8010a2e:	e7f4      	b.n	8010a1a <__swsetup_r+0x8e>
 8010a30:	2000      	movs	r0, #0
 8010a32:	e7f7      	b.n	8010a24 <__swsetup_r+0x98>
 8010a34:	24000020 	.word	0x24000020

08010a38 <memset>:
 8010a38:	4402      	add	r2, r0
 8010a3a:	4603      	mov	r3, r0
 8010a3c:	4293      	cmp	r3, r2
 8010a3e:	d100      	bne.n	8010a42 <memset+0xa>
 8010a40:	4770      	bx	lr
 8010a42:	f803 1b01 	strb.w	r1, [r3], #1
 8010a46:	e7f9      	b.n	8010a3c <memset+0x4>

08010a48 <_raise_r>:
 8010a48:	291f      	cmp	r1, #31
 8010a4a:	b538      	push	{r3, r4, r5, lr}
 8010a4c:	4605      	mov	r5, r0
 8010a4e:	460c      	mov	r4, r1
 8010a50:	d904      	bls.n	8010a5c <_raise_r+0x14>
 8010a52:	2316      	movs	r3, #22
 8010a54:	6003      	str	r3, [r0, #0]
 8010a56:	f04f 30ff 	mov.w	r0, #4294967295
 8010a5a:	bd38      	pop	{r3, r4, r5, pc}
 8010a5c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010a5e:	b112      	cbz	r2, 8010a66 <_raise_r+0x1e>
 8010a60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010a64:	b94b      	cbnz	r3, 8010a7a <_raise_r+0x32>
 8010a66:	4628      	mov	r0, r5
 8010a68:	f000 f8be 	bl	8010be8 <_getpid_r>
 8010a6c:	4622      	mov	r2, r4
 8010a6e:	4601      	mov	r1, r0
 8010a70:	4628      	mov	r0, r5
 8010a72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010a76:	f000 b8a5 	b.w	8010bc4 <_kill_r>
 8010a7a:	2b01      	cmp	r3, #1
 8010a7c:	d00a      	beq.n	8010a94 <_raise_r+0x4c>
 8010a7e:	1c59      	adds	r1, r3, #1
 8010a80:	d103      	bne.n	8010a8a <_raise_r+0x42>
 8010a82:	2316      	movs	r3, #22
 8010a84:	6003      	str	r3, [r0, #0]
 8010a86:	2001      	movs	r0, #1
 8010a88:	e7e7      	b.n	8010a5a <_raise_r+0x12>
 8010a8a:	2100      	movs	r1, #0
 8010a8c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010a90:	4620      	mov	r0, r4
 8010a92:	4798      	blx	r3
 8010a94:	2000      	movs	r0, #0
 8010a96:	e7e0      	b.n	8010a5a <_raise_r+0x12>

08010a98 <raise>:
 8010a98:	4b02      	ldr	r3, [pc, #8]	@ (8010aa4 <raise+0xc>)
 8010a9a:	4601      	mov	r1, r0
 8010a9c:	6818      	ldr	r0, [r3, #0]
 8010a9e:	f7ff bfd3 	b.w	8010a48 <_raise_r>
 8010aa2:	bf00      	nop
 8010aa4:	24000020 	.word	0x24000020

08010aa8 <_localeconv_r>:
 8010aa8:	4800      	ldr	r0, [pc, #0]	@ (8010aac <_localeconv_r+0x4>)
 8010aaa:	4770      	bx	lr
 8010aac:	24000160 	.word	0x24000160

08010ab0 <_close_r>:
 8010ab0:	b538      	push	{r3, r4, r5, lr}
 8010ab2:	4d06      	ldr	r5, [pc, #24]	@ (8010acc <_close_r+0x1c>)
 8010ab4:	2300      	movs	r3, #0
 8010ab6:	4604      	mov	r4, r0
 8010ab8:	4608      	mov	r0, r1
 8010aba:	602b      	str	r3, [r5, #0]
 8010abc:	f7f0 fe4a 	bl	8001754 <_close>
 8010ac0:	1c43      	adds	r3, r0, #1
 8010ac2:	d102      	bne.n	8010aca <_close_r+0x1a>
 8010ac4:	682b      	ldr	r3, [r5, #0]
 8010ac6:	b103      	cbz	r3, 8010aca <_close_r+0x1a>
 8010ac8:	6023      	str	r3, [r4, #0]
 8010aca:	bd38      	pop	{r3, r4, r5, pc}
 8010acc:	24004f74 	.word	0x24004f74

08010ad0 <_reclaim_reent>:
 8010ad0:	4b29      	ldr	r3, [pc, #164]	@ (8010b78 <_reclaim_reent+0xa8>)
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	4283      	cmp	r3, r0
 8010ad6:	b570      	push	{r4, r5, r6, lr}
 8010ad8:	4604      	mov	r4, r0
 8010ada:	d04b      	beq.n	8010b74 <_reclaim_reent+0xa4>
 8010adc:	69c3      	ldr	r3, [r0, #28]
 8010ade:	b1ab      	cbz	r3, 8010b0c <_reclaim_reent+0x3c>
 8010ae0:	68db      	ldr	r3, [r3, #12]
 8010ae2:	b16b      	cbz	r3, 8010b00 <_reclaim_reent+0x30>
 8010ae4:	2500      	movs	r5, #0
 8010ae6:	69e3      	ldr	r3, [r4, #28]
 8010ae8:	68db      	ldr	r3, [r3, #12]
 8010aea:	5959      	ldr	r1, [r3, r5]
 8010aec:	2900      	cmp	r1, #0
 8010aee:	d13b      	bne.n	8010b68 <_reclaim_reent+0x98>
 8010af0:	3504      	adds	r5, #4
 8010af2:	2d80      	cmp	r5, #128	@ 0x80
 8010af4:	d1f7      	bne.n	8010ae6 <_reclaim_reent+0x16>
 8010af6:	69e3      	ldr	r3, [r4, #28]
 8010af8:	4620      	mov	r0, r4
 8010afa:	68d9      	ldr	r1, [r3, #12]
 8010afc:	f000 feba 	bl	8011874 <_free_r>
 8010b00:	69e3      	ldr	r3, [r4, #28]
 8010b02:	6819      	ldr	r1, [r3, #0]
 8010b04:	b111      	cbz	r1, 8010b0c <_reclaim_reent+0x3c>
 8010b06:	4620      	mov	r0, r4
 8010b08:	f000 feb4 	bl	8011874 <_free_r>
 8010b0c:	6961      	ldr	r1, [r4, #20]
 8010b0e:	b111      	cbz	r1, 8010b16 <_reclaim_reent+0x46>
 8010b10:	4620      	mov	r0, r4
 8010b12:	f000 feaf 	bl	8011874 <_free_r>
 8010b16:	69e1      	ldr	r1, [r4, #28]
 8010b18:	b111      	cbz	r1, 8010b20 <_reclaim_reent+0x50>
 8010b1a:	4620      	mov	r0, r4
 8010b1c:	f000 feaa 	bl	8011874 <_free_r>
 8010b20:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8010b22:	b111      	cbz	r1, 8010b2a <_reclaim_reent+0x5a>
 8010b24:	4620      	mov	r0, r4
 8010b26:	f000 fea5 	bl	8011874 <_free_r>
 8010b2a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010b2c:	b111      	cbz	r1, 8010b34 <_reclaim_reent+0x64>
 8010b2e:	4620      	mov	r0, r4
 8010b30:	f000 fea0 	bl	8011874 <_free_r>
 8010b34:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8010b36:	b111      	cbz	r1, 8010b3e <_reclaim_reent+0x6e>
 8010b38:	4620      	mov	r0, r4
 8010b3a:	f000 fe9b 	bl	8011874 <_free_r>
 8010b3e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8010b40:	b111      	cbz	r1, 8010b48 <_reclaim_reent+0x78>
 8010b42:	4620      	mov	r0, r4
 8010b44:	f000 fe96 	bl	8011874 <_free_r>
 8010b48:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8010b4a:	b111      	cbz	r1, 8010b52 <_reclaim_reent+0x82>
 8010b4c:	4620      	mov	r0, r4
 8010b4e:	f000 fe91 	bl	8011874 <_free_r>
 8010b52:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8010b54:	b111      	cbz	r1, 8010b5c <_reclaim_reent+0x8c>
 8010b56:	4620      	mov	r0, r4
 8010b58:	f000 fe8c 	bl	8011874 <_free_r>
 8010b5c:	6a23      	ldr	r3, [r4, #32]
 8010b5e:	b14b      	cbz	r3, 8010b74 <_reclaim_reent+0xa4>
 8010b60:	4620      	mov	r0, r4
 8010b62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010b66:	4718      	bx	r3
 8010b68:	680e      	ldr	r6, [r1, #0]
 8010b6a:	4620      	mov	r0, r4
 8010b6c:	f000 fe82 	bl	8011874 <_free_r>
 8010b70:	4631      	mov	r1, r6
 8010b72:	e7bb      	b.n	8010aec <_reclaim_reent+0x1c>
 8010b74:	bd70      	pop	{r4, r5, r6, pc}
 8010b76:	bf00      	nop
 8010b78:	24000020 	.word	0x24000020

08010b7c <_lseek_r>:
 8010b7c:	b538      	push	{r3, r4, r5, lr}
 8010b7e:	4d07      	ldr	r5, [pc, #28]	@ (8010b9c <_lseek_r+0x20>)
 8010b80:	4604      	mov	r4, r0
 8010b82:	4608      	mov	r0, r1
 8010b84:	4611      	mov	r1, r2
 8010b86:	2200      	movs	r2, #0
 8010b88:	602a      	str	r2, [r5, #0]
 8010b8a:	461a      	mov	r2, r3
 8010b8c:	f7f0 fe09 	bl	80017a2 <_lseek>
 8010b90:	1c43      	adds	r3, r0, #1
 8010b92:	d102      	bne.n	8010b9a <_lseek_r+0x1e>
 8010b94:	682b      	ldr	r3, [r5, #0]
 8010b96:	b103      	cbz	r3, 8010b9a <_lseek_r+0x1e>
 8010b98:	6023      	str	r3, [r4, #0]
 8010b9a:	bd38      	pop	{r3, r4, r5, pc}
 8010b9c:	24004f74 	.word	0x24004f74

08010ba0 <_read_r>:
 8010ba0:	b538      	push	{r3, r4, r5, lr}
 8010ba2:	4d07      	ldr	r5, [pc, #28]	@ (8010bc0 <_read_r+0x20>)
 8010ba4:	4604      	mov	r4, r0
 8010ba6:	4608      	mov	r0, r1
 8010ba8:	4611      	mov	r1, r2
 8010baa:	2200      	movs	r2, #0
 8010bac:	602a      	str	r2, [r5, #0]
 8010bae:	461a      	mov	r2, r3
 8010bb0:	f7f0 fd97 	bl	80016e2 <_read>
 8010bb4:	1c43      	adds	r3, r0, #1
 8010bb6:	d102      	bne.n	8010bbe <_read_r+0x1e>
 8010bb8:	682b      	ldr	r3, [r5, #0]
 8010bba:	b103      	cbz	r3, 8010bbe <_read_r+0x1e>
 8010bbc:	6023      	str	r3, [r4, #0]
 8010bbe:	bd38      	pop	{r3, r4, r5, pc}
 8010bc0:	24004f74 	.word	0x24004f74

08010bc4 <_kill_r>:
 8010bc4:	b538      	push	{r3, r4, r5, lr}
 8010bc6:	4d07      	ldr	r5, [pc, #28]	@ (8010be4 <_kill_r+0x20>)
 8010bc8:	2300      	movs	r3, #0
 8010bca:	4604      	mov	r4, r0
 8010bcc:	4608      	mov	r0, r1
 8010bce:	4611      	mov	r1, r2
 8010bd0:	602b      	str	r3, [r5, #0]
 8010bd2:	f7f0 fd6b 	bl	80016ac <_kill>
 8010bd6:	1c43      	adds	r3, r0, #1
 8010bd8:	d102      	bne.n	8010be0 <_kill_r+0x1c>
 8010bda:	682b      	ldr	r3, [r5, #0]
 8010bdc:	b103      	cbz	r3, 8010be0 <_kill_r+0x1c>
 8010bde:	6023      	str	r3, [r4, #0]
 8010be0:	bd38      	pop	{r3, r4, r5, pc}
 8010be2:	bf00      	nop
 8010be4:	24004f74 	.word	0x24004f74

08010be8 <_getpid_r>:
 8010be8:	f7f0 bd58 	b.w	800169c <_getpid>

08010bec <_sbrk_r>:
 8010bec:	b538      	push	{r3, r4, r5, lr}
 8010bee:	4d06      	ldr	r5, [pc, #24]	@ (8010c08 <_sbrk_r+0x1c>)
 8010bf0:	2300      	movs	r3, #0
 8010bf2:	4604      	mov	r4, r0
 8010bf4:	4608      	mov	r0, r1
 8010bf6:	602b      	str	r3, [r5, #0]
 8010bf8:	f7f0 fde0 	bl	80017bc <_sbrk>
 8010bfc:	1c43      	adds	r3, r0, #1
 8010bfe:	d102      	bne.n	8010c06 <_sbrk_r+0x1a>
 8010c00:	682b      	ldr	r3, [r5, #0]
 8010c02:	b103      	cbz	r3, 8010c06 <_sbrk_r+0x1a>
 8010c04:	6023      	str	r3, [r4, #0]
 8010c06:	bd38      	pop	{r3, r4, r5, pc}
 8010c08:	24004f74 	.word	0x24004f74

08010c0c <_write_r>:
 8010c0c:	b538      	push	{r3, r4, r5, lr}
 8010c0e:	4d07      	ldr	r5, [pc, #28]	@ (8010c2c <_write_r+0x20>)
 8010c10:	4604      	mov	r4, r0
 8010c12:	4608      	mov	r0, r1
 8010c14:	4611      	mov	r1, r2
 8010c16:	2200      	movs	r2, #0
 8010c18:	602a      	str	r2, [r5, #0]
 8010c1a:	461a      	mov	r2, r3
 8010c1c:	f7f0 fd7e 	bl	800171c <_write>
 8010c20:	1c43      	adds	r3, r0, #1
 8010c22:	d102      	bne.n	8010c2a <_write_r+0x1e>
 8010c24:	682b      	ldr	r3, [r5, #0]
 8010c26:	b103      	cbz	r3, 8010c2a <_write_r+0x1e>
 8010c28:	6023      	str	r3, [r4, #0]
 8010c2a:	bd38      	pop	{r3, r4, r5, pc}
 8010c2c:	24004f74 	.word	0x24004f74

08010c30 <__errno>:
 8010c30:	4b01      	ldr	r3, [pc, #4]	@ (8010c38 <__errno+0x8>)
 8010c32:	6818      	ldr	r0, [r3, #0]
 8010c34:	4770      	bx	lr
 8010c36:	bf00      	nop
 8010c38:	24000020 	.word	0x24000020

08010c3c <__libc_init_array>:
 8010c3c:	b570      	push	{r4, r5, r6, lr}
 8010c3e:	4d0d      	ldr	r5, [pc, #52]	@ (8010c74 <__libc_init_array+0x38>)
 8010c40:	4c0d      	ldr	r4, [pc, #52]	@ (8010c78 <__libc_init_array+0x3c>)
 8010c42:	1b64      	subs	r4, r4, r5
 8010c44:	10a4      	asrs	r4, r4, #2
 8010c46:	2600      	movs	r6, #0
 8010c48:	42a6      	cmp	r6, r4
 8010c4a:	d109      	bne.n	8010c60 <__libc_init_array+0x24>
 8010c4c:	4d0b      	ldr	r5, [pc, #44]	@ (8010c7c <__libc_init_array+0x40>)
 8010c4e:	4c0c      	ldr	r4, [pc, #48]	@ (8010c80 <__libc_init_array+0x44>)
 8010c50:	f003 f8e0 	bl	8013e14 <_init>
 8010c54:	1b64      	subs	r4, r4, r5
 8010c56:	10a4      	asrs	r4, r4, #2
 8010c58:	2600      	movs	r6, #0
 8010c5a:	42a6      	cmp	r6, r4
 8010c5c:	d105      	bne.n	8010c6a <__libc_init_array+0x2e>
 8010c5e:	bd70      	pop	{r4, r5, r6, pc}
 8010c60:	f855 3b04 	ldr.w	r3, [r5], #4
 8010c64:	4798      	blx	r3
 8010c66:	3601      	adds	r6, #1
 8010c68:	e7ee      	b.n	8010c48 <__libc_init_array+0xc>
 8010c6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8010c6e:	4798      	blx	r3
 8010c70:	3601      	adds	r6, #1
 8010c72:	e7f2      	b.n	8010c5a <__libc_init_array+0x1e>
 8010c74:	0801459c 	.word	0x0801459c
 8010c78:	0801459c 	.word	0x0801459c
 8010c7c:	0801459c 	.word	0x0801459c
 8010c80:	080145a0 	.word	0x080145a0

08010c84 <__retarget_lock_init_recursive>:
 8010c84:	4770      	bx	lr

08010c86 <__retarget_lock_acquire_recursive>:
 8010c86:	4770      	bx	lr

08010c88 <__retarget_lock_release_recursive>:
 8010c88:	4770      	bx	lr

08010c8a <memcpy>:
 8010c8a:	440a      	add	r2, r1
 8010c8c:	4291      	cmp	r1, r2
 8010c8e:	f100 33ff 	add.w	r3, r0, #4294967295
 8010c92:	d100      	bne.n	8010c96 <memcpy+0xc>
 8010c94:	4770      	bx	lr
 8010c96:	b510      	push	{r4, lr}
 8010c98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010c9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010ca0:	4291      	cmp	r1, r2
 8010ca2:	d1f9      	bne.n	8010c98 <memcpy+0xe>
 8010ca4:	bd10      	pop	{r4, pc}
	...

08010ca8 <nanf>:
 8010ca8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010cb0 <nanf+0x8>
 8010cac:	4770      	bx	lr
 8010cae:	bf00      	nop
 8010cb0:	7fc00000 	.word	0x7fc00000

08010cb4 <quorem>:
 8010cb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cb8:	6903      	ldr	r3, [r0, #16]
 8010cba:	690c      	ldr	r4, [r1, #16]
 8010cbc:	42a3      	cmp	r3, r4
 8010cbe:	4607      	mov	r7, r0
 8010cc0:	db7e      	blt.n	8010dc0 <quorem+0x10c>
 8010cc2:	3c01      	subs	r4, #1
 8010cc4:	f101 0814 	add.w	r8, r1, #20
 8010cc8:	00a3      	lsls	r3, r4, #2
 8010cca:	f100 0514 	add.w	r5, r0, #20
 8010cce:	9300      	str	r3, [sp, #0]
 8010cd0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010cd4:	9301      	str	r3, [sp, #4]
 8010cd6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010cda:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010cde:	3301      	adds	r3, #1
 8010ce0:	429a      	cmp	r2, r3
 8010ce2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010ce6:	fbb2 f6f3 	udiv	r6, r2, r3
 8010cea:	d32e      	bcc.n	8010d4a <quorem+0x96>
 8010cec:	f04f 0a00 	mov.w	sl, #0
 8010cf0:	46c4      	mov	ip, r8
 8010cf2:	46ae      	mov	lr, r5
 8010cf4:	46d3      	mov	fp, sl
 8010cf6:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010cfa:	b298      	uxth	r0, r3
 8010cfc:	fb06 a000 	mla	r0, r6, r0, sl
 8010d00:	0c02      	lsrs	r2, r0, #16
 8010d02:	0c1b      	lsrs	r3, r3, #16
 8010d04:	fb06 2303 	mla	r3, r6, r3, r2
 8010d08:	f8de 2000 	ldr.w	r2, [lr]
 8010d0c:	b280      	uxth	r0, r0
 8010d0e:	b292      	uxth	r2, r2
 8010d10:	1a12      	subs	r2, r2, r0
 8010d12:	445a      	add	r2, fp
 8010d14:	f8de 0000 	ldr.w	r0, [lr]
 8010d18:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010d1c:	b29b      	uxth	r3, r3
 8010d1e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010d22:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010d26:	b292      	uxth	r2, r2
 8010d28:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010d2c:	45e1      	cmp	r9, ip
 8010d2e:	f84e 2b04 	str.w	r2, [lr], #4
 8010d32:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010d36:	d2de      	bcs.n	8010cf6 <quorem+0x42>
 8010d38:	9b00      	ldr	r3, [sp, #0]
 8010d3a:	58eb      	ldr	r3, [r5, r3]
 8010d3c:	b92b      	cbnz	r3, 8010d4a <quorem+0x96>
 8010d3e:	9b01      	ldr	r3, [sp, #4]
 8010d40:	3b04      	subs	r3, #4
 8010d42:	429d      	cmp	r5, r3
 8010d44:	461a      	mov	r2, r3
 8010d46:	d32f      	bcc.n	8010da8 <quorem+0xf4>
 8010d48:	613c      	str	r4, [r7, #16]
 8010d4a:	4638      	mov	r0, r7
 8010d4c:	f001 f8a0 	bl	8011e90 <__mcmp>
 8010d50:	2800      	cmp	r0, #0
 8010d52:	db25      	blt.n	8010da0 <quorem+0xec>
 8010d54:	4629      	mov	r1, r5
 8010d56:	2000      	movs	r0, #0
 8010d58:	f858 2b04 	ldr.w	r2, [r8], #4
 8010d5c:	f8d1 c000 	ldr.w	ip, [r1]
 8010d60:	fa1f fe82 	uxth.w	lr, r2
 8010d64:	fa1f f38c 	uxth.w	r3, ip
 8010d68:	eba3 030e 	sub.w	r3, r3, lr
 8010d6c:	4403      	add	r3, r0
 8010d6e:	0c12      	lsrs	r2, r2, #16
 8010d70:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010d74:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010d78:	b29b      	uxth	r3, r3
 8010d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010d7e:	45c1      	cmp	r9, r8
 8010d80:	f841 3b04 	str.w	r3, [r1], #4
 8010d84:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010d88:	d2e6      	bcs.n	8010d58 <quorem+0xa4>
 8010d8a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010d8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010d92:	b922      	cbnz	r2, 8010d9e <quorem+0xea>
 8010d94:	3b04      	subs	r3, #4
 8010d96:	429d      	cmp	r5, r3
 8010d98:	461a      	mov	r2, r3
 8010d9a:	d30b      	bcc.n	8010db4 <quorem+0x100>
 8010d9c:	613c      	str	r4, [r7, #16]
 8010d9e:	3601      	adds	r6, #1
 8010da0:	4630      	mov	r0, r6
 8010da2:	b003      	add	sp, #12
 8010da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010da8:	6812      	ldr	r2, [r2, #0]
 8010daa:	3b04      	subs	r3, #4
 8010dac:	2a00      	cmp	r2, #0
 8010dae:	d1cb      	bne.n	8010d48 <quorem+0x94>
 8010db0:	3c01      	subs	r4, #1
 8010db2:	e7c6      	b.n	8010d42 <quorem+0x8e>
 8010db4:	6812      	ldr	r2, [r2, #0]
 8010db6:	3b04      	subs	r3, #4
 8010db8:	2a00      	cmp	r2, #0
 8010dba:	d1ef      	bne.n	8010d9c <quorem+0xe8>
 8010dbc:	3c01      	subs	r4, #1
 8010dbe:	e7ea      	b.n	8010d96 <quorem+0xe2>
 8010dc0:	2000      	movs	r0, #0
 8010dc2:	e7ee      	b.n	8010da2 <quorem+0xee>
 8010dc4:	0000      	movs	r0, r0
	...

08010dc8 <_dtoa_r>:
 8010dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dcc:	ed2d 8b02 	vpush	{d8}
 8010dd0:	69c7      	ldr	r7, [r0, #28]
 8010dd2:	b091      	sub	sp, #68	@ 0x44
 8010dd4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010dd8:	ec55 4b10 	vmov	r4, r5, d0
 8010ddc:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8010dde:	9107      	str	r1, [sp, #28]
 8010de0:	4681      	mov	r9, r0
 8010de2:	9209      	str	r2, [sp, #36]	@ 0x24
 8010de4:	930d      	str	r3, [sp, #52]	@ 0x34
 8010de6:	b97f      	cbnz	r7, 8010e08 <_dtoa_r+0x40>
 8010de8:	2010      	movs	r0, #16
 8010dea:	f7fe fce9 	bl	800f7c0 <malloc>
 8010dee:	4602      	mov	r2, r0
 8010df0:	f8c9 001c 	str.w	r0, [r9, #28]
 8010df4:	b920      	cbnz	r0, 8010e00 <_dtoa_r+0x38>
 8010df6:	4ba0      	ldr	r3, [pc, #640]	@ (8011078 <_dtoa_r+0x2b0>)
 8010df8:	21ef      	movs	r1, #239	@ 0xef
 8010dfa:	48a0      	ldr	r0, [pc, #640]	@ (801107c <_dtoa_r+0x2b4>)
 8010dfc:	f7fe fcc2 	bl	800f784 <__assert_func>
 8010e00:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010e04:	6007      	str	r7, [r0, #0]
 8010e06:	60c7      	str	r7, [r0, #12]
 8010e08:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010e0c:	6819      	ldr	r1, [r3, #0]
 8010e0e:	b159      	cbz	r1, 8010e28 <_dtoa_r+0x60>
 8010e10:	685a      	ldr	r2, [r3, #4]
 8010e12:	604a      	str	r2, [r1, #4]
 8010e14:	2301      	movs	r3, #1
 8010e16:	4093      	lsls	r3, r2
 8010e18:	608b      	str	r3, [r1, #8]
 8010e1a:	4648      	mov	r0, r9
 8010e1c:	f000 fdb4 	bl	8011988 <_Bfree>
 8010e20:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010e24:	2200      	movs	r2, #0
 8010e26:	601a      	str	r2, [r3, #0]
 8010e28:	1e2b      	subs	r3, r5, #0
 8010e2a:	bfbb      	ittet	lt
 8010e2c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010e30:	9303      	strlt	r3, [sp, #12]
 8010e32:	2300      	movge	r3, #0
 8010e34:	2201      	movlt	r2, #1
 8010e36:	bfac      	ite	ge
 8010e38:	6033      	strge	r3, [r6, #0]
 8010e3a:	6032      	strlt	r2, [r6, #0]
 8010e3c:	4b90      	ldr	r3, [pc, #576]	@ (8011080 <_dtoa_r+0x2b8>)
 8010e3e:	9e03      	ldr	r6, [sp, #12]
 8010e40:	43b3      	bics	r3, r6
 8010e42:	d110      	bne.n	8010e66 <_dtoa_r+0x9e>
 8010e44:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010e46:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010e4a:	6013      	str	r3, [r2, #0]
 8010e4c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8010e50:	4323      	orrs	r3, r4
 8010e52:	f000 84de 	beq.w	8011812 <_dtoa_r+0xa4a>
 8010e56:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010e58:	4f8a      	ldr	r7, [pc, #552]	@ (8011084 <_dtoa_r+0x2bc>)
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	f000 84e0 	beq.w	8011820 <_dtoa_r+0xa58>
 8010e60:	1cfb      	adds	r3, r7, #3
 8010e62:	f000 bcdb 	b.w	801181c <_dtoa_r+0xa54>
 8010e66:	ed9d 8b02 	vldr	d8, [sp, #8]
 8010e6a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e72:	d10a      	bne.n	8010e8a <_dtoa_r+0xc2>
 8010e74:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010e76:	2301      	movs	r3, #1
 8010e78:	6013      	str	r3, [r2, #0]
 8010e7a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010e7c:	b113      	cbz	r3, 8010e84 <_dtoa_r+0xbc>
 8010e7e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8010e80:	4b81      	ldr	r3, [pc, #516]	@ (8011088 <_dtoa_r+0x2c0>)
 8010e82:	6013      	str	r3, [r2, #0]
 8010e84:	4f81      	ldr	r7, [pc, #516]	@ (801108c <_dtoa_r+0x2c4>)
 8010e86:	f000 bccb 	b.w	8011820 <_dtoa_r+0xa58>
 8010e8a:	aa0e      	add	r2, sp, #56	@ 0x38
 8010e8c:	a90f      	add	r1, sp, #60	@ 0x3c
 8010e8e:	4648      	mov	r0, r9
 8010e90:	eeb0 0b48 	vmov.f64	d0, d8
 8010e94:	f001 f91c 	bl	80120d0 <__d2b>
 8010e98:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8010e9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010e9e:	9001      	str	r0, [sp, #4]
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d045      	beq.n	8010f30 <_dtoa_r+0x168>
 8010ea4:	eeb0 7b48 	vmov.f64	d7, d8
 8010ea8:	ee18 1a90 	vmov	r1, s17
 8010eac:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8010eb0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8010eb4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8010eb8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8010ebc:	2500      	movs	r5, #0
 8010ebe:	ee07 1a90 	vmov	s15, r1
 8010ec2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8010ec6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8011060 <_dtoa_r+0x298>
 8010eca:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010ece:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8011068 <_dtoa_r+0x2a0>
 8010ed2:	eea7 6b05 	vfma.f64	d6, d7, d5
 8010ed6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8011070 <_dtoa_r+0x2a8>
 8010eda:	ee07 3a90 	vmov	s15, r3
 8010ede:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8010ee2:	eeb0 7b46 	vmov.f64	d7, d6
 8010ee6:	eea4 7b05 	vfma.f64	d7, d4, d5
 8010eea:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8010eee:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8010ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ef6:	ee16 8a90 	vmov	r8, s13
 8010efa:	d508      	bpl.n	8010f0e <_dtoa_r+0x146>
 8010efc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8010f00:	eeb4 6b47 	vcmp.f64	d6, d7
 8010f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f08:	bf18      	it	ne
 8010f0a:	f108 38ff 	addne.w	r8, r8, #4294967295
 8010f0e:	f1b8 0f16 	cmp.w	r8, #22
 8010f12:	d82b      	bhi.n	8010f6c <_dtoa_r+0x1a4>
 8010f14:	495e      	ldr	r1, [pc, #376]	@ (8011090 <_dtoa_r+0x2c8>)
 8010f16:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8010f1a:	ed91 7b00 	vldr	d7, [r1]
 8010f1e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f26:	d501      	bpl.n	8010f2c <_dtoa_r+0x164>
 8010f28:	f108 38ff 	add.w	r8, r8, #4294967295
 8010f2c:	2100      	movs	r1, #0
 8010f2e:	e01e      	b.n	8010f6e <_dtoa_r+0x1a6>
 8010f30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010f32:	4413      	add	r3, r2
 8010f34:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8010f38:	2920      	cmp	r1, #32
 8010f3a:	bfc1      	itttt	gt
 8010f3c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8010f40:	408e      	lslgt	r6, r1
 8010f42:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8010f46:	fa24 f101 	lsrgt.w	r1, r4, r1
 8010f4a:	bfd6      	itet	le
 8010f4c:	f1c1 0120 	rsble	r1, r1, #32
 8010f50:	4331      	orrgt	r1, r6
 8010f52:	fa04 f101 	lslle.w	r1, r4, r1
 8010f56:	ee07 1a90 	vmov	s15, r1
 8010f5a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8010f5e:	3b01      	subs	r3, #1
 8010f60:	ee17 1a90 	vmov	r1, s15
 8010f64:	2501      	movs	r5, #1
 8010f66:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8010f6a:	e7a8      	b.n	8010ebe <_dtoa_r+0xf6>
 8010f6c:	2101      	movs	r1, #1
 8010f6e:	1ad2      	subs	r2, r2, r3
 8010f70:	1e53      	subs	r3, r2, #1
 8010f72:	9306      	str	r3, [sp, #24]
 8010f74:	bf45      	ittet	mi
 8010f76:	f1c2 0301 	rsbmi	r3, r2, #1
 8010f7a:	9305      	strmi	r3, [sp, #20]
 8010f7c:	2300      	movpl	r3, #0
 8010f7e:	2300      	movmi	r3, #0
 8010f80:	bf4c      	ite	mi
 8010f82:	9306      	strmi	r3, [sp, #24]
 8010f84:	9305      	strpl	r3, [sp, #20]
 8010f86:	f1b8 0f00 	cmp.w	r8, #0
 8010f8a:	910c      	str	r1, [sp, #48]	@ 0x30
 8010f8c:	db18      	blt.n	8010fc0 <_dtoa_r+0x1f8>
 8010f8e:	9b06      	ldr	r3, [sp, #24]
 8010f90:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8010f94:	4443      	add	r3, r8
 8010f96:	9306      	str	r3, [sp, #24]
 8010f98:	2300      	movs	r3, #0
 8010f9a:	9a07      	ldr	r2, [sp, #28]
 8010f9c:	2a09      	cmp	r2, #9
 8010f9e:	d849      	bhi.n	8011034 <_dtoa_r+0x26c>
 8010fa0:	2a05      	cmp	r2, #5
 8010fa2:	bfc4      	itt	gt
 8010fa4:	3a04      	subgt	r2, #4
 8010fa6:	9207      	strgt	r2, [sp, #28]
 8010fa8:	9a07      	ldr	r2, [sp, #28]
 8010faa:	f1a2 0202 	sub.w	r2, r2, #2
 8010fae:	bfcc      	ite	gt
 8010fb0:	2400      	movgt	r4, #0
 8010fb2:	2401      	movle	r4, #1
 8010fb4:	2a03      	cmp	r2, #3
 8010fb6:	d848      	bhi.n	801104a <_dtoa_r+0x282>
 8010fb8:	e8df f002 	tbb	[pc, r2]
 8010fbc:	3a2c2e0b 	.word	0x3a2c2e0b
 8010fc0:	9b05      	ldr	r3, [sp, #20]
 8010fc2:	2200      	movs	r2, #0
 8010fc4:	eba3 0308 	sub.w	r3, r3, r8
 8010fc8:	9305      	str	r3, [sp, #20]
 8010fca:	920a      	str	r2, [sp, #40]	@ 0x28
 8010fcc:	f1c8 0300 	rsb	r3, r8, #0
 8010fd0:	e7e3      	b.n	8010f9a <_dtoa_r+0x1d2>
 8010fd2:	2200      	movs	r2, #0
 8010fd4:	9208      	str	r2, [sp, #32]
 8010fd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010fd8:	2a00      	cmp	r2, #0
 8010fda:	dc39      	bgt.n	8011050 <_dtoa_r+0x288>
 8010fdc:	f04f 0b01 	mov.w	fp, #1
 8010fe0:	46da      	mov	sl, fp
 8010fe2:	465a      	mov	r2, fp
 8010fe4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8010fe8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8010fec:	2100      	movs	r1, #0
 8010fee:	2004      	movs	r0, #4
 8010ff0:	f100 0614 	add.w	r6, r0, #20
 8010ff4:	4296      	cmp	r6, r2
 8010ff6:	d930      	bls.n	801105a <_dtoa_r+0x292>
 8010ff8:	6079      	str	r1, [r7, #4]
 8010ffa:	4648      	mov	r0, r9
 8010ffc:	9304      	str	r3, [sp, #16]
 8010ffe:	f000 fc83 	bl	8011908 <_Balloc>
 8011002:	9b04      	ldr	r3, [sp, #16]
 8011004:	4607      	mov	r7, r0
 8011006:	2800      	cmp	r0, #0
 8011008:	d146      	bne.n	8011098 <_dtoa_r+0x2d0>
 801100a:	4b22      	ldr	r3, [pc, #136]	@ (8011094 <_dtoa_r+0x2cc>)
 801100c:	4602      	mov	r2, r0
 801100e:	f240 11af 	movw	r1, #431	@ 0x1af
 8011012:	e6f2      	b.n	8010dfa <_dtoa_r+0x32>
 8011014:	2201      	movs	r2, #1
 8011016:	e7dd      	b.n	8010fd4 <_dtoa_r+0x20c>
 8011018:	2200      	movs	r2, #0
 801101a:	9208      	str	r2, [sp, #32]
 801101c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801101e:	eb08 0b02 	add.w	fp, r8, r2
 8011022:	f10b 0a01 	add.w	sl, fp, #1
 8011026:	4652      	mov	r2, sl
 8011028:	2a01      	cmp	r2, #1
 801102a:	bfb8      	it	lt
 801102c:	2201      	movlt	r2, #1
 801102e:	e7db      	b.n	8010fe8 <_dtoa_r+0x220>
 8011030:	2201      	movs	r2, #1
 8011032:	e7f2      	b.n	801101a <_dtoa_r+0x252>
 8011034:	2401      	movs	r4, #1
 8011036:	2200      	movs	r2, #0
 8011038:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801103c:	f04f 3bff 	mov.w	fp, #4294967295
 8011040:	2100      	movs	r1, #0
 8011042:	46da      	mov	sl, fp
 8011044:	2212      	movs	r2, #18
 8011046:	9109      	str	r1, [sp, #36]	@ 0x24
 8011048:	e7ce      	b.n	8010fe8 <_dtoa_r+0x220>
 801104a:	2201      	movs	r2, #1
 801104c:	9208      	str	r2, [sp, #32]
 801104e:	e7f5      	b.n	801103c <_dtoa_r+0x274>
 8011050:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8011054:	46da      	mov	sl, fp
 8011056:	465a      	mov	r2, fp
 8011058:	e7c6      	b.n	8010fe8 <_dtoa_r+0x220>
 801105a:	3101      	adds	r1, #1
 801105c:	0040      	lsls	r0, r0, #1
 801105e:	e7c7      	b.n	8010ff0 <_dtoa_r+0x228>
 8011060:	636f4361 	.word	0x636f4361
 8011064:	3fd287a7 	.word	0x3fd287a7
 8011068:	8b60c8b3 	.word	0x8b60c8b3
 801106c:	3fc68a28 	.word	0x3fc68a28
 8011070:	509f79fb 	.word	0x509f79fb
 8011074:	3fd34413 	.word	0x3fd34413
 8011078:	080141e6 	.word	0x080141e6
 801107c:	080141fd 	.word	0x080141fd
 8011080:	7ff00000 	.word	0x7ff00000
 8011084:	080141e2 	.word	0x080141e2
 8011088:	080141b1 	.word	0x080141b1
 801108c:	080141b0 	.word	0x080141b0
 8011090:	080142f8 	.word	0x080142f8
 8011094:	08014255 	.word	0x08014255
 8011098:	f8d9 201c 	ldr.w	r2, [r9, #28]
 801109c:	f1ba 0f0e 	cmp.w	sl, #14
 80110a0:	6010      	str	r0, [r2, #0]
 80110a2:	d86f      	bhi.n	8011184 <_dtoa_r+0x3bc>
 80110a4:	2c00      	cmp	r4, #0
 80110a6:	d06d      	beq.n	8011184 <_dtoa_r+0x3bc>
 80110a8:	f1b8 0f00 	cmp.w	r8, #0
 80110ac:	f340 80c2 	ble.w	8011234 <_dtoa_r+0x46c>
 80110b0:	4aca      	ldr	r2, [pc, #808]	@ (80113dc <_dtoa_r+0x614>)
 80110b2:	f008 010f 	and.w	r1, r8, #15
 80110b6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80110ba:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80110be:	ed92 7b00 	vldr	d7, [r2]
 80110c2:	ea4f 1128 	mov.w	r1, r8, asr #4
 80110c6:	f000 80a9 	beq.w	801121c <_dtoa_r+0x454>
 80110ca:	4ac5      	ldr	r2, [pc, #788]	@ (80113e0 <_dtoa_r+0x618>)
 80110cc:	ed92 6b08 	vldr	d6, [r2, #32]
 80110d0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80110d4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80110d8:	f001 010f 	and.w	r1, r1, #15
 80110dc:	2203      	movs	r2, #3
 80110de:	48c0      	ldr	r0, [pc, #768]	@ (80113e0 <_dtoa_r+0x618>)
 80110e0:	2900      	cmp	r1, #0
 80110e2:	f040 809d 	bne.w	8011220 <_dtoa_r+0x458>
 80110e6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80110ea:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80110ee:	ed8d 7b02 	vstr	d7, [sp, #8]
 80110f2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80110f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80110f8:	2900      	cmp	r1, #0
 80110fa:	f000 80c1 	beq.w	8011280 <_dtoa_r+0x4b8>
 80110fe:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8011102:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801110a:	f140 80b9 	bpl.w	8011280 <_dtoa_r+0x4b8>
 801110e:	f1ba 0f00 	cmp.w	sl, #0
 8011112:	f000 80b5 	beq.w	8011280 <_dtoa_r+0x4b8>
 8011116:	f1bb 0f00 	cmp.w	fp, #0
 801111a:	dd31      	ble.n	8011180 <_dtoa_r+0x3b8>
 801111c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8011120:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011124:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011128:	f108 31ff 	add.w	r1, r8, #4294967295
 801112c:	9104      	str	r1, [sp, #16]
 801112e:	3201      	adds	r2, #1
 8011130:	465c      	mov	r4, fp
 8011132:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011136:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 801113a:	ee07 2a90 	vmov	s15, r2
 801113e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011142:	eea7 5b06 	vfma.f64	d5, d7, d6
 8011146:	ee15 2a90 	vmov	r2, s11
 801114a:	ec51 0b15 	vmov	r0, r1, d5
 801114e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8011152:	2c00      	cmp	r4, #0
 8011154:	f040 8098 	bne.w	8011288 <_dtoa_r+0x4c0>
 8011158:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801115c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8011160:	ec41 0b17 	vmov	d7, r0, r1
 8011164:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801116c:	f300 8261 	bgt.w	8011632 <_dtoa_r+0x86a>
 8011170:	eeb1 7b47 	vneg.f64	d7, d7
 8011174:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801117c:	f100 80f5 	bmi.w	801136a <_dtoa_r+0x5a2>
 8011180:	ed8d 8b02 	vstr	d8, [sp, #8]
 8011184:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011186:	2a00      	cmp	r2, #0
 8011188:	f2c0 812c 	blt.w	80113e4 <_dtoa_r+0x61c>
 801118c:	f1b8 0f0e 	cmp.w	r8, #14
 8011190:	f300 8128 	bgt.w	80113e4 <_dtoa_r+0x61c>
 8011194:	4b91      	ldr	r3, [pc, #580]	@ (80113dc <_dtoa_r+0x614>)
 8011196:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801119a:	ed93 6b00 	vldr	d6, [r3]
 801119e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	da03      	bge.n	80111ac <_dtoa_r+0x3e4>
 80111a4:	f1ba 0f00 	cmp.w	sl, #0
 80111a8:	f340 80d2 	ble.w	8011350 <_dtoa_r+0x588>
 80111ac:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80111b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80111b4:	463e      	mov	r6, r7
 80111b6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80111ba:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80111be:	ee15 3a10 	vmov	r3, s10
 80111c2:	3330      	adds	r3, #48	@ 0x30
 80111c4:	f806 3b01 	strb.w	r3, [r6], #1
 80111c8:	1bf3      	subs	r3, r6, r7
 80111ca:	459a      	cmp	sl, r3
 80111cc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80111d0:	eea3 7b46 	vfms.f64	d7, d3, d6
 80111d4:	f040 80f8 	bne.w	80113c8 <_dtoa_r+0x600>
 80111d8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80111dc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80111e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111e4:	f300 80dd 	bgt.w	80113a2 <_dtoa_r+0x5da>
 80111e8:	eeb4 7b46 	vcmp.f64	d7, d6
 80111ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111f0:	d104      	bne.n	80111fc <_dtoa_r+0x434>
 80111f2:	ee15 3a10 	vmov	r3, s10
 80111f6:	07db      	lsls	r3, r3, #31
 80111f8:	f100 80d3 	bmi.w	80113a2 <_dtoa_r+0x5da>
 80111fc:	9901      	ldr	r1, [sp, #4]
 80111fe:	4648      	mov	r0, r9
 8011200:	f000 fbc2 	bl	8011988 <_Bfree>
 8011204:	2300      	movs	r3, #0
 8011206:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011208:	7033      	strb	r3, [r6, #0]
 801120a:	f108 0301 	add.w	r3, r8, #1
 801120e:	6013      	str	r3, [r2, #0]
 8011210:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011212:	2b00      	cmp	r3, #0
 8011214:	f000 8304 	beq.w	8011820 <_dtoa_r+0xa58>
 8011218:	601e      	str	r6, [r3, #0]
 801121a:	e301      	b.n	8011820 <_dtoa_r+0xa58>
 801121c:	2202      	movs	r2, #2
 801121e:	e75e      	b.n	80110de <_dtoa_r+0x316>
 8011220:	07cc      	lsls	r4, r1, #31
 8011222:	d504      	bpl.n	801122e <_dtoa_r+0x466>
 8011224:	ed90 6b00 	vldr	d6, [r0]
 8011228:	3201      	adds	r2, #1
 801122a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801122e:	1049      	asrs	r1, r1, #1
 8011230:	3008      	adds	r0, #8
 8011232:	e755      	b.n	80110e0 <_dtoa_r+0x318>
 8011234:	d022      	beq.n	801127c <_dtoa_r+0x4b4>
 8011236:	f1c8 0100 	rsb	r1, r8, #0
 801123a:	4a68      	ldr	r2, [pc, #416]	@ (80113dc <_dtoa_r+0x614>)
 801123c:	f001 000f 	and.w	r0, r1, #15
 8011240:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8011244:	ed92 7b00 	vldr	d7, [r2]
 8011248:	ee28 7b07 	vmul.f64	d7, d8, d7
 801124c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011250:	4863      	ldr	r0, [pc, #396]	@ (80113e0 <_dtoa_r+0x618>)
 8011252:	1109      	asrs	r1, r1, #4
 8011254:	2400      	movs	r4, #0
 8011256:	2202      	movs	r2, #2
 8011258:	b929      	cbnz	r1, 8011266 <_dtoa_r+0x49e>
 801125a:	2c00      	cmp	r4, #0
 801125c:	f43f af49 	beq.w	80110f2 <_dtoa_r+0x32a>
 8011260:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011264:	e745      	b.n	80110f2 <_dtoa_r+0x32a>
 8011266:	07ce      	lsls	r6, r1, #31
 8011268:	d505      	bpl.n	8011276 <_dtoa_r+0x4ae>
 801126a:	ed90 6b00 	vldr	d6, [r0]
 801126e:	3201      	adds	r2, #1
 8011270:	2401      	movs	r4, #1
 8011272:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011276:	1049      	asrs	r1, r1, #1
 8011278:	3008      	adds	r0, #8
 801127a:	e7ed      	b.n	8011258 <_dtoa_r+0x490>
 801127c:	2202      	movs	r2, #2
 801127e:	e738      	b.n	80110f2 <_dtoa_r+0x32a>
 8011280:	f8cd 8010 	str.w	r8, [sp, #16]
 8011284:	4654      	mov	r4, sl
 8011286:	e754      	b.n	8011132 <_dtoa_r+0x36a>
 8011288:	4a54      	ldr	r2, [pc, #336]	@ (80113dc <_dtoa_r+0x614>)
 801128a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801128e:	ed12 4b02 	vldr	d4, [r2, #-8]
 8011292:	9a08      	ldr	r2, [sp, #32]
 8011294:	ec41 0b17 	vmov	d7, r0, r1
 8011298:	443c      	add	r4, r7
 801129a:	b34a      	cbz	r2, 80112f0 <_dtoa_r+0x528>
 801129c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80112a0:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80112a4:	463e      	mov	r6, r7
 80112a6:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80112aa:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80112ae:	ee35 7b47 	vsub.f64	d7, d5, d7
 80112b2:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80112b6:	ee14 2a90 	vmov	r2, s9
 80112ba:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80112be:	3230      	adds	r2, #48	@ 0x30
 80112c0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80112c4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80112c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112cc:	f806 2b01 	strb.w	r2, [r6], #1
 80112d0:	d438      	bmi.n	8011344 <_dtoa_r+0x57c>
 80112d2:	ee32 5b46 	vsub.f64	d5, d2, d6
 80112d6:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80112da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112de:	d462      	bmi.n	80113a6 <_dtoa_r+0x5de>
 80112e0:	42a6      	cmp	r6, r4
 80112e2:	f43f af4d 	beq.w	8011180 <_dtoa_r+0x3b8>
 80112e6:	ee27 7b03 	vmul.f64	d7, d7, d3
 80112ea:	ee26 6b03 	vmul.f64	d6, d6, d3
 80112ee:	e7e0      	b.n	80112b2 <_dtoa_r+0x4ea>
 80112f0:	4621      	mov	r1, r4
 80112f2:	463e      	mov	r6, r7
 80112f4:	ee27 7b04 	vmul.f64	d7, d7, d4
 80112f8:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80112fc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8011300:	ee14 2a90 	vmov	r2, s9
 8011304:	3230      	adds	r2, #48	@ 0x30
 8011306:	f806 2b01 	strb.w	r2, [r6], #1
 801130a:	42a6      	cmp	r6, r4
 801130c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8011310:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011314:	d119      	bne.n	801134a <_dtoa_r+0x582>
 8011316:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 801131a:	ee37 4b05 	vadd.f64	d4, d7, d5
 801131e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8011322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011326:	dc3e      	bgt.n	80113a6 <_dtoa_r+0x5de>
 8011328:	ee35 5b47 	vsub.f64	d5, d5, d7
 801132c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8011330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011334:	f57f af24 	bpl.w	8011180 <_dtoa_r+0x3b8>
 8011338:	460e      	mov	r6, r1
 801133a:	3901      	subs	r1, #1
 801133c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011340:	2b30      	cmp	r3, #48	@ 0x30
 8011342:	d0f9      	beq.n	8011338 <_dtoa_r+0x570>
 8011344:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8011348:	e758      	b.n	80111fc <_dtoa_r+0x434>
 801134a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801134e:	e7d5      	b.n	80112fc <_dtoa_r+0x534>
 8011350:	d10b      	bne.n	801136a <_dtoa_r+0x5a2>
 8011352:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8011356:	ee26 6b07 	vmul.f64	d6, d6, d7
 801135a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801135e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011366:	f2c0 8161 	blt.w	801162c <_dtoa_r+0x864>
 801136a:	2400      	movs	r4, #0
 801136c:	4625      	mov	r5, r4
 801136e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011370:	43db      	mvns	r3, r3
 8011372:	9304      	str	r3, [sp, #16]
 8011374:	463e      	mov	r6, r7
 8011376:	f04f 0800 	mov.w	r8, #0
 801137a:	4621      	mov	r1, r4
 801137c:	4648      	mov	r0, r9
 801137e:	f000 fb03 	bl	8011988 <_Bfree>
 8011382:	2d00      	cmp	r5, #0
 8011384:	d0de      	beq.n	8011344 <_dtoa_r+0x57c>
 8011386:	f1b8 0f00 	cmp.w	r8, #0
 801138a:	d005      	beq.n	8011398 <_dtoa_r+0x5d0>
 801138c:	45a8      	cmp	r8, r5
 801138e:	d003      	beq.n	8011398 <_dtoa_r+0x5d0>
 8011390:	4641      	mov	r1, r8
 8011392:	4648      	mov	r0, r9
 8011394:	f000 faf8 	bl	8011988 <_Bfree>
 8011398:	4629      	mov	r1, r5
 801139a:	4648      	mov	r0, r9
 801139c:	f000 faf4 	bl	8011988 <_Bfree>
 80113a0:	e7d0      	b.n	8011344 <_dtoa_r+0x57c>
 80113a2:	f8cd 8010 	str.w	r8, [sp, #16]
 80113a6:	4633      	mov	r3, r6
 80113a8:	461e      	mov	r6, r3
 80113aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80113ae:	2a39      	cmp	r2, #57	@ 0x39
 80113b0:	d106      	bne.n	80113c0 <_dtoa_r+0x5f8>
 80113b2:	429f      	cmp	r7, r3
 80113b4:	d1f8      	bne.n	80113a8 <_dtoa_r+0x5e0>
 80113b6:	9a04      	ldr	r2, [sp, #16]
 80113b8:	3201      	adds	r2, #1
 80113ba:	9204      	str	r2, [sp, #16]
 80113bc:	2230      	movs	r2, #48	@ 0x30
 80113be:	703a      	strb	r2, [r7, #0]
 80113c0:	781a      	ldrb	r2, [r3, #0]
 80113c2:	3201      	adds	r2, #1
 80113c4:	701a      	strb	r2, [r3, #0]
 80113c6:	e7bd      	b.n	8011344 <_dtoa_r+0x57c>
 80113c8:	ee27 7b04 	vmul.f64	d7, d7, d4
 80113cc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80113d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113d4:	f47f aeef 	bne.w	80111b6 <_dtoa_r+0x3ee>
 80113d8:	e710      	b.n	80111fc <_dtoa_r+0x434>
 80113da:	bf00      	nop
 80113dc:	080142f8 	.word	0x080142f8
 80113e0:	080142d0 	.word	0x080142d0
 80113e4:	9908      	ldr	r1, [sp, #32]
 80113e6:	2900      	cmp	r1, #0
 80113e8:	f000 80e3 	beq.w	80115b2 <_dtoa_r+0x7ea>
 80113ec:	9907      	ldr	r1, [sp, #28]
 80113ee:	2901      	cmp	r1, #1
 80113f0:	f300 80c8 	bgt.w	8011584 <_dtoa_r+0x7bc>
 80113f4:	2d00      	cmp	r5, #0
 80113f6:	f000 80c1 	beq.w	801157c <_dtoa_r+0x7b4>
 80113fa:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80113fe:	9e05      	ldr	r6, [sp, #20]
 8011400:	461c      	mov	r4, r3
 8011402:	9304      	str	r3, [sp, #16]
 8011404:	9b05      	ldr	r3, [sp, #20]
 8011406:	4413      	add	r3, r2
 8011408:	9305      	str	r3, [sp, #20]
 801140a:	9b06      	ldr	r3, [sp, #24]
 801140c:	2101      	movs	r1, #1
 801140e:	4413      	add	r3, r2
 8011410:	4648      	mov	r0, r9
 8011412:	9306      	str	r3, [sp, #24]
 8011414:	f000 fbb6 	bl	8011b84 <__i2b>
 8011418:	9b04      	ldr	r3, [sp, #16]
 801141a:	4605      	mov	r5, r0
 801141c:	b166      	cbz	r6, 8011438 <_dtoa_r+0x670>
 801141e:	9a06      	ldr	r2, [sp, #24]
 8011420:	2a00      	cmp	r2, #0
 8011422:	dd09      	ble.n	8011438 <_dtoa_r+0x670>
 8011424:	42b2      	cmp	r2, r6
 8011426:	9905      	ldr	r1, [sp, #20]
 8011428:	bfa8      	it	ge
 801142a:	4632      	movge	r2, r6
 801142c:	1a89      	subs	r1, r1, r2
 801142e:	9105      	str	r1, [sp, #20]
 8011430:	9906      	ldr	r1, [sp, #24]
 8011432:	1ab6      	subs	r6, r6, r2
 8011434:	1a8a      	subs	r2, r1, r2
 8011436:	9206      	str	r2, [sp, #24]
 8011438:	b1fb      	cbz	r3, 801147a <_dtoa_r+0x6b2>
 801143a:	9a08      	ldr	r2, [sp, #32]
 801143c:	2a00      	cmp	r2, #0
 801143e:	f000 80bc 	beq.w	80115ba <_dtoa_r+0x7f2>
 8011442:	b19c      	cbz	r4, 801146c <_dtoa_r+0x6a4>
 8011444:	4629      	mov	r1, r5
 8011446:	4622      	mov	r2, r4
 8011448:	4648      	mov	r0, r9
 801144a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801144c:	f000 fc5a 	bl	8011d04 <__pow5mult>
 8011450:	9a01      	ldr	r2, [sp, #4]
 8011452:	4601      	mov	r1, r0
 8011454:	4605      	mov	r5, r0
 8011456:	4648      	mov	r0, r9
 8011458:	f000 fbaa 	bl	8011bb0 <__multiply>
 801145c:	9901      	ldr	r1, [sp, #4]
 801145e:	9004      	str	r0, [sp, #16]
 8011460:	4648      	mov	r0, r9
 8011462:	f000 fa91 	bl	8011988 <_Bfree>
 8011466:	9a04      	ldr	r2, [sp, #16]
 8011468:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801146a:	9201      	str	r2, [sp, #4]
 801146c:	1b1a      	subs	r2, r3, r4
 801146e:	d004      	beq.n	801147a <_dtoa_r+0x6b2>
 8011470:	9901      	ldr	r1, [sp, #4]
 8011472:	4648      	mov	r0, r9
 8011474:	f000 fc46 	bl	8011d04 <__pow5mult>
 8011478:	9001      	str	r0, [sp, #4]
 801147a:	2101      	movs	r1, #1
 801147c:	4648      	mov	r0, r9
 801147e:	f000 fb81 	bl	8011b84 <__i2b>
 8011482:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011484:	4604      	mov	r4, r0
 8011486:	2b00      	cmp	r3, #0
 8011488:	f000 81d0 	beq.w	801182c <_dtoa_r+0xa64>
 801148c:	461a      	mov	r2, r3
 801148e:	4601      	mov	r1, r0
 8011490:	4648      	mov	r0, r9
 8011492:	f000 fc37 	bl	8011d04 <__pow5mult>
 8011496:	9b07      	ldr	r3, [sp, #28]
 8011498:	2b01      	cmp	r3, #1
 801149a:	4604      	mov	r4, r0
 801149c:	f300 8095 	bgt.w	80115ca <_dtoa_r+0x802>
 80114a0:	9b02      	ldr	r3, [sp, #8]
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	f040 808b 	bne.w	80115be <_dtoa_r+0x7f6>
 80114a8:	9b03      	ldr	r3, [sp, #12]
 80114aa:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80114ae:	2a00      	cmp	r2, #0
 80114b0:	f040 8087 	bne.w	80115c2 <_dtoa_r+0x7fa>
 80114b4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80114b8:	0d12      	lsrs	r2, r2, #20
 80114ba:	0512      	lsls	r2, r2, #20
 80114bc:	2a00      	cmp	r2, #0
 80114be:	f000 8082 	beq.w	80115c6 <_dtoa_r+0x7fe>
 80114c2:	9b05      	ldr	r3, [sp, #20]
 80114c4:	3301      	adds	r3, #1
 80114c6:	9305      	str	r3, [sp, #20]
 80114c8:	9b06      	ldr	r3, [sp, #24]
 80114ca:	3301      	adds	r3, #1
 80114cc:	9306      	str	r3, [sp, #24]
 80114ce:	2301      	movs	r3, #1
 80114d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80114d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	f000 81af 	beq.w	8011838 <_dtoa_r+0xa70>
 80114da:	6922      	ldr	r2, [r4, #16]
 80114dc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80114e0:	6910      	ldr	r0, [r2, #16]
 80114e2:	f000 fb03 	bl	8011aec <__hi0bits>
 80114e6:	f1c0 0020 	rsb	r0, r0, #32
 80114ea:	9b06      	ldr	r3, [sp, #24]
 80114ec:	4418      	add	r0, r3
 80114ee:	f010 001f 	ands.w	r0, r0, #31
 80114f2:	d076      	beq.n	80115e2 <_dtoa_r+0x81a>
 80114f4:	f1c0 0220 	rsb	r2, r0, #32
 80114f8:	2a04      	cmp	r2, #4
 80114fa:	dd69      	ble.n	80115d0 <_dtoa_r+0x808>
 80114fc:	9b05      	ldr	r3, [sp, #20]
 80114fe:	f1c0 001c 	rsb	r0, r0, #28
 8011502:	4403      	add	r3, r0
 8011504:	9305      	str	r3, [sp, #20]
 8011506:	9b06      	ldr	r3, [sp, #24]
 8011508:	4406      	add	r6, r0
 801150a:	4403      	add	r3, r0
 801150c:	9306      	str	r3, [sp, #24]
 801150e:	9b05      	ldr	r3, [sp, #20]
 8011510:	2b00      	cmp	r3, #0
 8011512:	dd05      	ble.n	8011520 <_dtoa_r+0x758>
 8011514:	9901      	ldr	r1, [sp, #4]
 8011516:	461a      	mov	r2, r3
 8011518:	4648      	mov	r0, r9
 801151a:	f000 fc4d 	bl	8011db8 <__lshift>
 801151e:	9001      	str	r0, [sp, #4]
 8011520:	9b06      	ldr	r3, [sp, #24]
 8011522:	2b00      	cmp	r3, #0
 8011524:	dd05      	ble.n	8011532 <_dtoa_r+0x76a>
 8011526:	4621      	mov	r1, r4
 8011528:	461a      	mov	r2, r3
 801152a:	4648      	mov	r0, r9
 801152c:	f000 fc44 	bl	8011db8 <__lshift>
 8011530:	4604      	mov	r4, r0
 8011532:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011534:	2b00      	cmp	r3, #0
 8011536:	d056      	beq.n	80115e6 <_dtoa_r+0x81e>
 8011538:	9801      	ldr	r0, [sp, #4]
 801153a:	4621      	mov	r1, r4
 801153c:	f000 fca8 	bl	8011e90 <__mcmp>
 8011540:	2800      	cmp	r0, #0
 8011542:	da50      	bge.n	80115e6 <_dtoa_r+0x81e>
 8011544:	f108 33ff 	add.w	r3, r8, #4294967295
 8011548:	9304      	str	r3, [sp, #16]
 801154a:	9901      	ldr	r1, [sp, #4]
 801154c:	2300      	movs	r3, #0
 801154e:	220a      	movs	r2, #10
 8011550:	4648      	mov	r0, r9
 8011552:	f000 fa3b 	bl	80119cc <__multadd>
 8011556:	9b08      	ldr	r3, [sp, #32]
 8011558:	9001      	str	r0, [sp, #4]
 801155a:	2b00      	cmp	r3, #0
 801155c:	f000 816e 	beq.w	801183c <_dtoa_r+0xa74>
 8011560:	4629      	mov	r1, r5
 8011562:	2300      	movs	r3, #0
 8011564:	220a      	movs	r2, #10
 8011566:	4648      	mov	r0, r9
 8011568:	f000 fa30 	bl	80119cc <__multadd>
 801156c:	f1bb 0f00 	cmp.w	fp, #0
 8011570:	4605      	mov	r5, r0
 8011572:	dc64      	bgt.n	801163e <_dtoa_r+0x876>
 8011574:	9b07      	ldr	r3, [sp, #28]
 8011576:	2b02      	cmp	r3, #2
 8011578:	dc3e      	bgt.n	80115f8 <_dtoa_r+0x830>
 801157a:	e060      	b.n	801163e <_dtoa_r+0x876>
 801157c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801157e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8011582:	e73c      	b.n	80113fe <_dtoa_r+0x636>
 8011584:	f10a 34ff 	add.w	r4, sl, #4294967295
 8011588:	42a3      	cmp	r3, r4
 801158a:	bfbf      	itttt	lt
 801158c:	1ae2      	sublt	r2, r4, r3
 801158e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8011590:	189b      	addlt	r3, r3, r2
 8011592:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8011594:	bfae      	itee	ge
 8011596:	1b1c      	subge	r4, r3, r4
 8011598:	4623      	movlt	r3, r4
 801159a:	2400      	movlt	r4, #0
 801159c:	f1ba 0f00 	cmp.w	sl, #0
 80115a0:	bfb5      	itete	lt
 80115a2:	9a05      	ldrlt	r2, [sp, #20]
 80115a4:	9e05      	ldrge	r6, [sp, #20]
 80115a6:	eba2 060a 	sublt.w	r6, r2, sl
 80115aa:	4652      	movge	r2, sl
 80115ac:	bfb8      	it	lt
 80115ae:	2200      	movlt	r2, #0
 80115b0:	e727      	b.n	8011402 <_dtoa_r+0x63a>
 80115b2:	9e05      	ldr	r6, [sp, #20]
 80115b4:	9d08      	ldr	r5, [sp, #32]
 80115b6:	461c      	mov	r4, r3
 80115b8:	e730      	b.n	801141c <_dtoa_r+0x654>
 80115ba:	461a      	mov	r2, r3
 80115bc:	e758      	b.n	8011470 <_dtoa_r+0x6a8>
 80115be:	2300      	movs	r3, #0
 80115c0:	e786      	b.n	80114d0 <_dtoa_r+0x708>
 80115c2:	9b02      	ldr	r3, [sp, #8]
 80115c4:	e784      	b.n	80114d0 <_dtoa_r+0x708>
 80115c6:	920b      	str	r2, [sp, #44]	@ 0x2c
 80115c8:	e783      	b.n	80114d2 <_dtoa_r+0x70a>
 80115ca:	2300      	movs	r3, #0
 80115cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80115ce:	e784      	b.n	80114da <_dtoa_r+0x712>
 80115d0:	d09d      	beq.n	801150e <_dtoa_r+0x746>
 80115d2:	9b05      	ldr	r3, [sp, #20]
 80115d4:	321c      	adds	r2, #28
 80115d6:	4413      	add	r3, r2
 80115d8:	9305      	str	r3, [sp, #20]
 80115da:	9b06      	ldr	r3, [sp, #24]
 80115dc:	4416      	add	r6, r2
 80115de:	4413      	add	r3, r2
 80115e0:	e794      	b.n	801150c <_dtoa_r+0x744>
 80115e2:	4602      	mov	r2, r0
 80115e4:	e7f5      	b.n	80115d2 <_dtoa_r+0x80a>
 80115e6:	f1ba 0f00 	cmp.w	sl, #0
 80115ea:	f8cd 8010 	str.w	r8, [sp, #16]
 80115ee:	46d3      	mov	fp, sl
 80115f0:	dc21      	bgt.n	8011636 <_dtoa_r+0x86e>
 80115f2:	9b07      	ldr	r3, [sp, #28]
 80115f4:	2b02      	cmp	r3, #2
 80115f6:	dd1e      	ble.n	8011636 <_dtoa_r+0x86e>
 80115f8:	f1bb 0f00 	cmp.w	fp, #0
 80115fc:	f47f aeb7 	bne.w	801136e <_dtoa_r+0x5a6>
 8011600:	4621      	mov	r1, r4
 8011602:	465b      	mov	r3, fp
 8011604:	2205      	movs	r2, #5
 8011606:	4648      	mov	r0, r9
 8011608:	f000 f9e0 	bl	80119cc <__multadd>
 801160c:	4601      	mov	r1, r0
 801160e:	4604      	mov	r4, r0
 8011610:	9801      	ldr	r0, [sp, #4]
 8011612:	f000 fc3d 	bl	8011e90 <__mcmp>
 8011616:	2800      	cmp	r0, #0
 8011618:	f77f aea9 	ble.w	801136e <_dtoa_r+0x5a6>
 801161c:	463e      	mov	r6, r7
 801161e:	2331      	movs	r3, #49	@ 0x31
 8011620:	f806 3b01 	strb.w	r3, [r6], #1
 8011624:	9b04      	ldr	r3, [sp, #16]
 8011626:	3301      	adds	r3, #1
 8011628:	9304      	str	r3, [sp, #16]
 801162a:	e6a4      	b.n	8011376 <_dtoa_r+0x5ae>
 801162c:	f8cd 8010 	str.w	r8, [sp, #16]
 8011630:	4654      	mov	r4, sl
 8011632:	4625      	mov	r5, r4
 8011634:	e7f2      	b.n	801161c <_dtoa_r+0x854>
 8011636:	9b08      	ldr	r3, [sp, #32]
 8011638:	2b00      	cmp	r3, #0
 801163a:	f000 8103 	beq.w	8011844 <_dtoa_r+0xa7c>
 801163e:	2e00      	cmp	r6, #0
 8011640:	dd05      	ble.n	801164e <_dtoa_r+0x886>
 8011642:	4629      	mov	r1, r5
 8011644:	4632      	mov	r2, r6
 8011646:	4648      	mov	r0, r9
 8011648:	f000 fbb6 	bl	8011db8 <__lshift>
 801164c:	4605      	mov	r5, r0
 801164e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011650:	2b00      	cmp	r3, #0
 8011652:	d058      	beq.n	8011706 <_dtoa_r+0x93e>
 8011654:	6869      	ldr	r1, [r5, #4]
 8011656:	4648      	mov	r0, r9
 8011658:	f000 f956 	bl	8011908 <_Balloc>
 801165c:	4606      	mov	r6, r0
 801165e:	b928      	cbnz	r0, 801166c <_dtoa_r+0x8a4>
 8011660:	4b82      	ldr	r3, [pc, #520]	@ (801186c <_dtoa_r+0xaa4>)
 8011662:	4602      	mov	r2, r0
 8011664:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8011668:	f7ff bbc7 	b.w	8010dfa <_dtoa_r+0x32>
 801166c:	692a      	ldr	r2, [r5, #16]
 801166e:	3202      	adds	r2, #2
 8011670:	0092      	lsls	r2, r2, #2
 8011672:	f105 010c 	add.w	r1, r5, #12
 8011676:	300c      	adds	r0, #12
 8011678:	f7ff fb07 	bl	8010c8a <memcpy>
 801167c:	2201      	movs	r2, #1
 801167e:	4631      	mov	r1, r6
 8011680:	4648      	mov	r0, r9
 8011682:	f000 fb99 	bl	8011db8 <__lshift>
 8011686:	1c7b      	adds	r3, r7, #1
 8011688:	9305      	str	r3, [sp, #20]
 801168a:	eb07 030b 	add.w	r3, r7, fp
 801168e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011690:	9b02      	ldr	r3, [sp, #8]
 8011692:	f003 0301 	and.w	r3, r3, #1
 8011696:	46a8      	mov	r8, r5
 8011698:	9308      	str	r3, [sp, #32]
 801169a:	4605      	mov	r5, r0
 801169c:	9b05      	ldr	r3, [sp, #20]
 801169e:	9801      	ldr	r0, [sp, #4]
 80116a0:	4621      	mov	r1, r4
 80116a2:	f103 3bff 	add.w	fp, r3, #4294967295
 80116a6:	f7ff fb05 	bl	8010cb4 <quorem>
 80116aa:	4641      	mov	r1, r8
 80116ac:	9002      	str	r0, [sp, #8]
 80116ae:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80116b2:	9801      	ldr	r0, [sp, #4]
 80116b4:	f000 fbec 	bl	8011e90 <__mcmp>
 80116b8:	462a      	mov	r2, r5
 80116ba:	9006      	str	r0, [sp, #24]
 80116bc:	4621      	mov	r1, r4
 80116be:	4648      	mov	r0, r9
 80116c0:	f000 fc02 	bl	8011ec8 <__mdiff>
 80116c4:	68c2      	ldr	r2, [r0, #12]
 80116c6:	4606      	mov	r6, r0
 80116c8:	b9fa      	cbnz	r2, 801170a <_dtoa_r+0x942>
 80116ca:	4601      	mov	r1, r0
 80116cc:	9801      	ldr	r0, [sp, #4]
 80116ce:	f000 fbdf 	bl	8011e90 <__mcmp>
 80116d2:	4602      	mov	r2, r0
 80116d4:	4631      	mov	r1, r6
 80116d6:	4648      	mov	r0, r9
 80116d8:	920a      	str	r2, [sp, #40]	@ 0x28
 80116da:	f000 f955 	bl	8011988 <_Bfree>
 80116de:	9b07      	ldr	r3, [sp, #28]
 80116e0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80116e2:	9e05      	ldr	r6, [sp, #20]
 80116e4:	ea43 0102 	orr.w	r1, r3, r2
 80116e8:	9b08      	ldr	r3, [sp, #32]
 80116ea:	4319      	orrs	r1, r3
 80116ec:	d10f      	bne.n	801170e <_dtoa_r+0x946>
 80116ee:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80116f2:	d028      	beq.n	8011746 <_dtoa_r+0x97e>
 80116f4:	9b06      	ldr	r3, [sp, #24]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	dd02      	ble.n	8011700 <_dtoa_r+0x938>
 80116fa:	9b02      	ldr	r3, [sp, #8]
 80116fc:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8011700:	f88b a000 	strb.w	sl, [fp]
 8011704:	e639      	b.n	801137a <_dtoa_r+0x5b2>
 8011706:	4628      	mov	r0, r5
 8011708:	e7bd      	b.n	8011686 <_dtoa_r+0x8be>
 801170a:	2201      	movs	r2, #1
 801170c:	e7e2      	b.n	80116d4 <_dtoa_r+0x90c>
 801170e:	9b06      	ldr	r3, [sp, #24]
 8011710:	2b00      	cmp	r3, #0
 8011712:	db04      	blt.n	801171e <_dtoa_r+0x956>
 8011714:	9907      	ldr	r1, [sp, #28]
 8011716:	430b      	orrs	r3, r1
 8011718:	9908      	ldr	r1, [sp, #32]
 801171a:	430b      	orrs	r3, r1
 801171c:	d120      	bne.n	8011760 <_dtoa_r+0x998>
 801171e:	2a00      	cmp	r2, #0
 8011720:	ddee      	ble.n	8011700 <_dtoa_r+0x938>
 8011722:	9901      	ldr	r1, [sp, #4]
 8011724:	2201      	movs	r2, #1
 8011726:	4648      	mov	r0, r9
 8011728:	f000 fb46 	bl	8011db8 <__lshift>
 801172c:	4621      	mov	r1, r4
 801172e:	9001      	str	r0, [sp, #4]
 8011730:	f000 fbae 	bl	8011e90 <__mcmp>
 8011734:	2800      	cmp	r0, #0
 8011736:	dc03      	bgt.n	8011740 <_dtoa_r+0x978>
 8011738:	d1e2      	bne.n	8011700 <_dtoa_r+0x938>
 801173a:	f01a 0f01 	tst.w	sl, #1
 801173e:	d0df      	beq.n	8011700 <_dtoa_r+0x938>
 8011740:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8011744:	d1d9      	bne.n	80116fa <_dtoa_r+0x932>
 8011746:	2339      	movs	r3, #57	@ 0x39
 8011748:	f88b 3000 	strb.w	r3, [fp]
 801174c:	4633      	mov	r3, r6
 801174e:	461e      	mov	r6, r3
 8011750:	3b01      	subs	r3, #1
 8011752:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011756:	2a39      	cmp	r2, #57	@ 0x39
 8011758:	d053      	beq.n	8011802 <_dtoa_r+0xa3a>
 801175a:	3201      	adds	r2, #1
 801175c:	701a      	strb	r2, [r3, #0]
 801175e:	e60c      	b.n	801137a <_dtoa_r+0x5b2>
 8011760:	2a00      	cmp	r2, #0
 8011762:	dd07      	ble.n	8011774 <_dtoa_r+0x9ac>
 8011764:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8011768:	d0ed      	beq.n	8011746 <_dtoa_r+0x97e>
 801176a:	f10a 0301 	add.w	r3, sl, #1
 801176e:	f88b 3000 	strb.w	r3, [fp]
 8011772:	e602      	b.n	801137a <_dtoa_r+0x5b2>
 8011774:	9b05      	ldr	r3, [sp, #20]
 8011776:	9a05      	ldr	r2, [sp, #20]
 8011778:	f803 ac01 	strb.w	sl, [r3, #-1]
 801177c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801177e:	4293      	cmp	r3, r2
 8011780:	d029      	beq.n	80117d6 <_dtoa_r+0xa0e>
 8011782:	9901      	ldr	r1, [sp, #4]
 8011784:	2300      	movs	r3, #0
 8011786:	220a      	movs	r2, #10
 8011788:	4648      	mov	r0, r9
 801178a:	f000 f91f 	bl	80119cc <__multadd>
 801178e:	45a8      	cmp	r8, r5
 8011790:	9001      	str	r0, [sp, #4]
 8011792:	f04f 0300 	mov.w	r3, #0
 8011796:	f04f 020a 	mov.w	r2, #10
 801179a:	4641      	mov	r1, r8
 801179c:	4648      	mov	r0, r9
 801179e:	d107      	bne.n	80117b0 <_dtoa_r+0x9e8>
 80117a0:	f000 f914 	bl	80119cc <__multadd>
 80117a4:	4680      	mov	r8, r0
 80117a6:	4605      	mov	r5, r0
 80117a8:	9b05      	ldr	r3, [sp, #20]
 80117aa:	3301      	adds	r3, #1
 80117ac:	9305      	str	r3, [sp, #20]
 80117ae:	e775      	b.n	801169c <_dtoa_r+0x8d4>
 80117b0:	f000 f90c 	bl	80119cc <__multadd>
 80117b4:	4629      	mov	r1, r5
 80117b6:	4680      	mov	r8, r0
 80117b8:	2300      	movs	r3, #0
 80117ba:	220a      	movs	r2, #10
 80117bc:	4648      	mov	r0, r9
 80117be:	f000 f905 	bl	80119cc <__multadd>
 80117c2:	4605      	mov	r5, r0
 80117c4:	e7f0      	b.n	80117a8 <_dtoa_r+0x9e0>
 80117c6:	f1bb 0f00 	cmp.w	fp, #0
 80117ca:	bfcc      	ite	gt
 80117cc:	465e      	movgt	r6, fp
 80117ce:	2601      	movle	r6, #1
 80117d0:	443e      	add	r6, r7
 80117d2:	f04f 0800 	mov.w	r8, #0
 80117d6:	9901      	ldr	r1, [sp, #4]
 80117d8:	2201      	movs	r2, #1
 80117da:	4648      	mov	r0, r9
 80117dc:	f000 faec 	bl	8011db8 <__lshift>
 80117e0:	4621      	mov	r1, r4
 80117e2:	9001      	str	r0, [sp, #4]
 80117e4:	f000 fb54 	bl	8011e90 <__mcmp>
 80117e8:	2800      	cmp	r0, #0
 80117ea:	dcaf      	bgt.n	801174c <_dtoa_r+0x984>
 80117ec:	d102      	bne.n	80117f4 <_dtoa_r+0xa2c>
 80117ee:	f01a 0f01 	tst.w	sl, #1
 80117f2:	d1ab      	bne.n	801174c <_dtoa_r+0x984>
 80117f4:	4633      	mov	r3, r6
 80117f6:	461e      	mov	r6, r3
 80117f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80117fc:	2a30      	cmp	r2, #48	@ 0x30
 80117fe:	d0fa      	beq.n	80117f6 <_dtoa_r+0xa2e>
 8011800:	e5bb      	b.n	801137a <_dtoa_r+0x5b2>
 8011802:	429f      	cmp	r7, r3
 8011804:	d1a3      	bne.n	801174e <_dtoa_r+0x986>
 8011806:	9b04      	ldr	r3, [sp, #16]
 8011808:	3301      	adds	r3, #1
 801180a:	9304      	str	r3, [sp, #16]
 801180c:	2331      	movs	r3, #49	@ 0x31
 801180e:	703b      	strb	r3, [r7, #0]
 8011810:	e5b3      	b.n	801137a <_dtoa_r+0x5b2>
 8011812:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011814:	4f16      	ldr	r7, [pc, #88]	@ (8011870 <_dtoa_r+0xaa8>)
 8011816:	b11b      	cbz	r3, 8011820 <_dtoa_r+0xa58>
 8011818:	f107 0308 	add.w	r3, r7, #8
 801181c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801181e:	6013      	str	r3, [r2, #0]
 8011820:	4638      	mov	r0, r7
 8011822:	b011      	add	sp, #68	@ 0x44
 8011824:	ecbd 8b02 	vpop	{d8}
 8011828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801182c:	9b07      	ldr	r3, [sp, #28]
 801182e:	2b01      	cmp	r3, #1
 8011830:	f77f ae36 	ble.w	80114a0 <_dtoa_r+0x6d8>
 8011834:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011836:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011838:	2001      	movs	r0, #1
 801183a:	e656      	b.n	80114ea <_dtoa_r+0x722>
 801183c:	f1bb 0f00 	cmp.w	fp, #0
 8011840:	f77f aed7 	ble.w	80115f2 <_dtoa_r+0x82a>
 8011844:	463e      	mov	r6, r7
 8011846:	9801      	ldr	r0, [sp, #4]
 8011848:	4621      	mov	r1, r4
 801184a:	f7ff fa33 	bl	8010cb4 <quorem>
 801184e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8011852:	f806 ab01 	strb.w	sl, [r6], #1
 8011856:	1bf2      	subs	r2, r6, r7
 8011858:	4593      	cmp	fp, r2
 801185a:	ddb4      	ble.n	80117c6 <_dtoa_r+0x9fe>
 801185c:	9901      	ldr	r1, [sp, #4]
 801185e:	2300      	movs	r3, #0
 8011860:	220a      	movs	r2, #10
 8011862:	4648      	mov	r0, r9
 8011864:	f000 f8b2 	bl	80119cc <__multadd>
 8011868:	9001      	str	r0, [sp, #4]
 801186a:	e7ec      	b.n	8011846 <_dtoa_r+0xa7e>
 801186c:	08014255 	.word	0x08014255
 8011870:	080141d9 	.word	0x080141d9

08011874 <_free_r>:
 8011874:	b538      	push	{r3, r4, r5, lr}
 8011876:	4605      	mov	r5, r0
 8011878:	2900      	cmp	r1, #0
 801187a:	d041      	beq.n	8011900 <_free_r+0x8c>
 801187c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011880:	1f0c      	subs	r4, r1, #4
 8011882:	2b00      	cmp	r3, #0
 8011884:	bfb8      	it	lt
 8011886:	18e4      	addlt	r4, r4, r3
 8011888:	f7fe f84c 	bl	800f924 <__malloc_lock>
 801188c:	4a1d      	ldr	r2, [pc, #116]	@ (8011904 <_free_r+0x90>)
 801188e:	6813      	ldr	r3, [r2, #0]
 8011890:	b933      	cbnz	r3, 80118a0 <_free_r+0x2c>
 8011892:	6063      	str	r3, [r4, #4]
 8011894:	6014      	str	r4, [r2, #0]
 8011896:	4628      	mov	r0, r5
 8011898:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801189c:	f7fe b848 	b.w	800f930 <__malloc_unlock>
 80118a0:	42a3      	cmp	r3, r4
 80118a2:	d908      	bls.n	80118b6 <_free_r+0x42>
 80118a4:	6820      	ldr	r0, [r4, #0]
 80118a6:	1821      	adds	r1, r4, r0
 80118a8:	428b      	cmp	r3, r1
 80118aa:	bf01      	itttt	eq
 80118ac:	6819      	ldreq	r1, [r3, #0]
 80118ae:	685b      	ldreq	r3, [r3, #4]
 80118b0:	1809      	addeq	r1, r1, r0
 80118b2:	6021      	streq	r1, [r4, #0]
 80118b4:	e7ed      	b.n	8011892 <_free_r+0x1e>
 80118b6:	461a      	mov	r2, r3
 80118b8:	685b      	ldr	r3, [r3, #4]
 80118ba:	b10b      	cbz	r3, 80118c0 <_free_r+0x4c>
 80118bc:	42a3      	cmp	r3, r4
 80118be:	d9fa      	bls.n	80118b6 <_free_r+0x42>
 80118c0:	6811      	ldr	r1, [r2, #0]
 80118c2:	1850      	adds	r0, r2, r1
 80118c4:	42a0      	cmp	r0, r4
 80118c6:	d10b      	bne.n	80118e0 <_free_r+0x6c>
 80118c8:	6820      	ldr	r0, [r4, #0]
 80118ca:	4401      	add	r1, r0
 80118cc:	1850      	adds	r0, r2, r1
 80118ce:	4283      	cmp	r3, r0
 80118d0:	6011      	str	r1, [r2, #0]
 80118d2:	d1e0      	bne.n	8011896 <_free_r+0x22>
 80118d4:	6818      	ldr	r0, [r3, #0]
 80118d6:	685b      	ldr	r3, [r3, #4]
 80118d8:	6053      	str	r3, [r2, #4]
 80118da:	4408      	add	r0, r1
 80118dc:	6010      	str	r0, [r2, #0]
 80118de:	e7da      	b.n	8011896 <_free_r+0x22>
 80118e0:	d902      	bls.n	80118e8 <_free_r+0x74>
 80118e2:	230c      	movs	r3, #12
 80118e4:	602b      	str	r3, [r5, #0]
 80118e6:	e7d6      	b.n	8011896 <_free_r+0x22>
 80118e8:	6820      	ldr	r0, [r4, #0]
 80118ea:	1821      	adds	r1, r4, r0
 80118ec:	428b      	cmp	r3, r1
 80118ee:	bf04      	itt	eq
 80118f0:	6819      	ldreq	r1, [r3, #0]
 80118f2:	685b      	ldreq	r3, [r3, #4]
 80118f4:	6063      	str	r3, [r4, #4]
 80118f6:	bf04      	itt	eq
 80118f8:	1809      	addeq	r1, r1, r0
 80118fa:	6021      	streq	r1, [r4, #0]
 80118fc:	6054      	str	r4, [r2, #4]
 80118fe:	e7ca      	b.n	8011896 <_free_r+0x22>
 8011900:	bd38      	pop	{r3, r4, r5, pc}
 8011902:	bf00      	nop
 8011904:	24004e34 	.word	0x24004e34

08011908 <_Balloc>:
 8011908:	b570      	push	{r4, r5, r6, lr}
 801190a:	69c6      	ldr	r6, [r0, #28]
 801190c:	4604      	mov	r4, r0
 801190e:	460d      	mov	r5, r1
 8011910:	b976      	cbnz	r6, 8011930 <_Balloc+0x28>
 8011912:	2010      	movs	r0, #16
 8011914:	f7fd ff54 	bl	800f7c0 <malloc>
 8011918:	4602      	mov	r2, r0
 801191a:	61e0      	str	r0, [r4, #28]
 801191c:	b920      	cbnz	r0, 8011928 <_Balloc+0x20>
 801191e:	4b18      	ldr	r3, [pc, #96]	@ (8011980 <_Balloc+0x78>)
 8011920:	4818      	ldr	r0, [pc, #96]	@ (8011984 <_Balloc+0x7c>)
 8011922:	216b      	movs	r1, #107	@ 0x6b
 8011924:	f7fd ff2e 	bl	800f784 <__assert_func>
 8011928:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801192c:	6006      	str	r6, [r0, #0]
 801192e:	60c6      	str	r6, [r0, #12]
 8011930:	69e6      	ldr	r6, [r4, #28]
 8011932:	68f3      	ldr	r3, [r6, #12]
 8011934:	b183      	cbz	r3, 8011958 <_Balloc+0x50>
 8011936:	69e3      	ldr	r3, [r4, #28]
 8011938:	68db      	ldr	r3, [r3, #12]
 801193a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801193e:	b9b8      	cbnz	r0, 8011970 <_Balloc+0x68>
 8011940:	2101      	movs	r1, #1
 8011942:	fa01 f605 	lsl.w	r6, r1, r5
 8011946:	1d72      	adds	r2, r6, #5
 8011948:	0092      	lsls	r2, r2, #2
 801194a:	4620      	mov	r0, r4
 801194c:	f001 fec0 	bl	80136d0 <_calloc_r>
 8011950:	b160      	cbz	r0, 801196c <_Balloc+0x64>
 8011952:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011956:	e00e      	b.n	8011976 <_Balloc+0x6e>
 8011958:	2221      	movs	r2, #33	@ 0x21
 801195a:	2104      	movs	r1, #4
 801195c:	4620      	mov	r0, r4
 801195e:	f001 feb7 	bl	80136d0 <_calloc_r>
 8011962:	69e3      	ldr	r3, [r4, #28]
 8011964:	60f0      	str	r0, [r6, #12]
 8011966:	68db      	ldr	r3, [r3, #12]
 8011968:	2b00      	cmp	r3, #0
 801196a:	d1e4      	bne.n	8011936 <_Balloc+0x2e>
 801196c:	2000      	movs	r0, #0
 801196e:	bd70      	pop	{r4, r5, r6, pc}
 8011970:	6802      	ldr	r2, [r0, #0]
 8011972:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011976:	2300      	movs	r3, #0
 8011978:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801197c:	e7f7      	b.n	801196e <_Balloc+0x66>
 801197e:	bf00      	nop
 8011980:	080141e6 	.word	0x080141e6
 8011984:	08014266 	.word	0x08014266

08011988 <_Bfree>:
 8011988:	b570      	push	{r4, r5, r6, lr}
 801198a:	69c6      	ldr	r6, [r0, #28]
 801198c:	4605      	mov	r5, r0
 801198e:	460c      	mov	r4, r1
 8011990:	b976      	cbnz	r6, 80119b0 <_Bfree+0x28>
 8011992:	2010      	movs	r0, #16
 8011994:	f7fd ff14 	bl	800f7c0 <malloc>
 8011998:	4602      	mov	r2, r0
 801199a:	61e8      	str	r0, [r5, #28]
 801199c:	b920      	cbnz	r0, 80119a8 <_Bfree+0x20>
 801199e:	4b09      	ldr	r3, [pc, #36]	@ (80119c4 <_Bfree+0x3c>)
 80119a0:	4809      	ldr	r0, [pc, #36]	@ (80119c8 <_Bfree+0x40>)
 80119a2:	218f      	movs	r1, #143	@ 0x8f
 80119a4:	f7fd feee 	bl	800f784 <__assert_func>
 80119a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80119ac:	6006      	str	r6, [r0, #0]
 80119ae:	60c6      	str	r6, [r0, #12]
 80119b0:	b13c      	cbz	r4, 80119c2 <_Bfree+0x3a>
 80119b2:	69eb      	ldr	r3, [r5, #28]
 80119b4:	6862      	ldr	r2, [r4, #4]
 80119b6:	68db      	ldr	r3, [r3, #12]
 80119b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80119bc:	6021      	str	r1, [r4, #0]
 80119be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80119c2:	bd70      	pop	{r4, r5, r6, pc}
 80119c4:	080141e6 	.word	0x080141e6
 80119c8:	08014266 	.word	0x08014266

080119cc <__multadd>:
 80119cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119d0:	690d      	ldr	r5, [r1, #16]
 80119d2:	4607      	mov	r7, r0
 80119d4:	460c      	mov	r4, r1
 80119d6:	461e      	mov	r6, r3
 80119d8:	f101 0c14 	add.w	ip, r1, #20
 80119dc:	2000      	movs	r0, #0
 80119de:	f8dc 3000 	ldr.w	r3, [ip]
 80119e2:	b299      	uxth	r1, r3
 80119e4:	fb02 6101 	mla	r1, r2, r1, r6
 80119e8:	0c1e      	lsrs	r6, r3, #16
 80119ea:	0c0b      	lsrs	r3, r1, #16
 80119ec:	fb02 3306 	mla	r3, r2, r6, r3
 80119f0:	b289      	uxth	r1, r1
 80119f2:	3001      	adds	r0, #1
 80119f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80119f8:	4285      	cmp	r5, r0
 80119fa:	f84c 1b04 	str.w	r1, [ip], #4
 80119fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011a02:	dcec      	bgt.n	80119de <__multadd+0x12>
 8011a04:	b30e      	cbz	r6, 8011a4a <__multadd+0x7e>
 8011a06:	68a3      	ldr	r3, [r4, #8]
 8011a08:	42ab      	cmp	r3, r5
 8011a0a:	dc19      	bgt.n	8011a40 <__multadd+0x74>
 8011a0c:	6861      	ldr	r1, [r4, #4]
 8011a0e:	4638      	mov	r0, r7
 8011a10:	3101      	adds	r1, #1
 8011a12:	f7ff ff79 	bl	8011908 <_Balloc>
 8011a16:	4680      	mov	r8, r0
 8011a18:	b928      	cbnz	r0, 8011a26 <__multadd+0x5a>
 8011a1a:	4602      	mov	r2, r0
 8011a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8011a50 <__multadd+0x84>)
 8011a1e:	480d      	ldr	r0, [pc, #52]	@ (8011a54 <__multadd+0x88>)
 8011a20:	21ba      	movs	r1, #186	@ 0xba
 8011a22:	f7fd feaf 	bl	800f784 <__assert_func>
 8011a26:	6922      	ldr	r2, [r4, #16]
 8011a28:	3202      	adds	r2, #2
 8011a2a:	f104 010c 	add.w	r1, r4, #12
 8011a2e:	0092      	lsls	r2, r2, #2
 8011a30:	300c      	adds	r0, #12
 8011a32:	f7ff f92a 	bl	8010c8a <memcpy>
 8011a36:	4621      	mov	r1, r4
 8011a38:	4638      	mov	r0, r7
 8011a3a:	f7ff ffa5 	bl	8011988 <_Bfree>
 8011a3e:	4644      	mov	r4, r8
 8011a40:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011a44:	3501      	adds	r5, #1
 8011a46:	615e      	str	r6, [r3, #20]
 8011a48:	6125      	str	r5, [r4, #16]
 8011a4a:	4620      	mov	r0, r4
 8011a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a50:	08014255 	.word	0x08014255
 8011a54:	08014266 	.word	0x08014266

08011a58 <__s2b>:
 8011a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a5c:	460c      	mov	r4, r1
 8011a5e:	4615      	mov	r5, r2
 8011a60:	461f      	mov	r7, r3
 8011a62:	2209      	movs	r2, #9
 8011a64:	3308      	adds	r3, #8
 8011a66:	4606      	mov	r6, r0
 8011a68:	fb93 f3f2 	sdiv	r3, r3, r2
 8011a6c:	2100      	movs	r1, #0
 8011a6e:	2201      	movs	r2, #1
 8011a70:	429a      	cmp	r2, r3
 8011a72:	db09      	blt.n	8011a88 <__s2b+0x30>
 8011a74:	4630      	mov	r0, r6
 8011a76:	f7ff ff47 	bl	8011908 <_Balloc>
 8011a7a:	b940      	cbnz	r0, 8011a8e <__s2b+0x36>
 8011a7c:	4602      	mov	r2, r0
 8011a7e:	4b19      	ldr	r3, [pc, #100]	@ (8011ae4 <__s2b+0x8c>)
 8011a80:	4819      	ldr	r0, [pc, #100]	@ (8011ae8 <__s2b+0x90>)
 8011a82:	21d3      	movs	r1, #211	@ 0xd3
 8011a84:	f7fd fe7e 	bl	800f784 <__assert_func>
 8011a88:	0052      	lsls	r2, r2, #1
 8011a8a:	3101      	adds	r1, #1
 8011a8c:	e7f0      	b.n	8011a70 <__s2b+0x18>
 8011a8e:	9b08      	ldr	r3, [sp, #32]
 8011a90:	6143      	str	r3, [r0, #20]
 8011a92:	2d09      	cmp	r5, #9
 8011a94:	f04f 0301 	mov.w	r3, #1
 8011a98:	6103      	str	r3, [r0, #16]
 8011a9a:	dd16      	ble.n	8011aca <__s2b+0x72>
 8011a9c:	f104 0909 	add.w	r9, r4, #9
 8011aa0:	46c8      	mov	r8, r9
 8011aa2:	442c      	add	r4, r5
 8011aa4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011aa8:	4601      	mov	r1, r0
 8011aaa:	3b30      	subs	r3, #48	@ 0x30
 8011aac:	220a      	movs	r2, #10
 8011aae:	4630      	mov	r0, r6
 8011ab0:	f7ff ff8c 	bl	80119cc <__multadd>
 8011ab4:	45a0      	cmp	r8, r4
 8011ab6:	d1f5      	bne.n	8011aa4 <__s2b+0x4c>
 8011ab8:	f1a5 0408 	sub.w	r4, r5, #8
 8011abc:	444c      	add	r4, r9
 8011abe:	1b2d      	subs	r5, r5, r4
 8011ac0:	1963      	adds	r3, r4, r5
 8011ac2:	42bb      	cmp	r3, r7
 8011ac4:	db04      	blt.n	8011ad0 <__s2b+0x78>
 8011ac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011aca:	340a      	adds	r4, #10
 8011acc:	2509      	movs	r5, #9
 8011ace:	e7f6      	b.n	8011abe <__s2b+0x66>
 8011ad0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011ad4:	4601      	mov	r1, r0
 8011ad6:	3b30      	subs	r3, #48	@ 0x30
 8011ad8:	220a      	movs	r2, #10
 8011ada:	4630      	mov	r0, r6
 8011adc:	f7ff ff76 	bl	80119cc <__multadd>
 8011ae0:	e7ee      	b.n	8011ac0 <__s2b+0x68>
 8011ae2:	bf00      	nop
 8011ae4:	08014255 	.word	0x08014255
 8011ae8:	08014266 	.word	0x08014266

08011aec <__hi0bits>:
 8011aec:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011af0:	4603      	mov	r3, r0
 8011af2:	bf36      	itet	cc
 8011af4:	0403      	lslcc	r3, r0, #16
 8011af6:	2000      	movcs	r0, #0
 8011af8:	2010      	movcc	r0, #16
 8011afa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011afe:	bf3c      	itt	cc
 8011b00:	021b      	lslcc	r3, r3, #8
 8011b02:	3008      	addcc	r0, #8
 8011b04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011b08:	bf3c      	itt	cc
 8011b0a:	011b      	lslcc	r3, r3, #4
 8011b0c:	3004      	addcc	r0, #4
 8011b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011b12:	bf3c      	itt	cc
 8011b14:	009b      	lslcc	r3, r3, #2
 8011b16:	3002      	addcc	r0, #2
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	db05      	blt.n	8011b28 <__hi0bits+0x3c>
 8011b1c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011b20:	f100 0001 	add.w	r0, r0, #1
 8011b24:	bf08      	it	eq
 8011b26:	2020      	moveq	r0, #32
 8011b28:	4770      	bx	lr

08011b2a <__lo0bits>:
 8011b2a:	6803      	ldr	r3, [r0, #0]
 8011b2c:	4602      	mov	r2, r0
 8011b2e:	f013 0007 	ands.w	r0, r3, #7
 8011b32:	d00b      	beq.n	8011b4c <__lo0bits+0x22>
 8011b34:	07d9      	lsls	r1, r3, #31
 8011b36:	d421      	bmi.n	8011b7c <__lo0bits+0x52>
 8011b38:	0798      	lsls	r0, r3, #30
 8011b3a:	bf49      	itett	mi
 8011b3c:	085b      	lsrmi	r3, r3, #1
 8011b3e:	089b      	lsrpl	r3, r3, #2
 8011b40:	2001      	movmi	r0, #1
 8011b42:	6013      	strmi	r3, [r2, #0]
 8011b44:	bf5c      	itt	pl
 8011b46:	6013      	strpl	r3, [r2, #0]
 8011b48:	2002      	movpl	r0, #2
 8011b4a:	4770      	bx	lr
 8011b4c:	b299      	uxth	r1, r3
 8011b4e:	b909      	cbnz	r1, 8011b54 <__lo0bits+0x2a>
 8011b50:	0c1b      	lsrs	r3, r3, #16
 8011b52:	2010      	movs	r0, #16
 8011b54:	b2d9      	uxtb	r1, r3
 8011b56:	b909      	cbnz	r1, 8011b5c <__lo0bits+0x32>
 8011b58:	3008      	adds	r0, #8
 8011b5a:	0a1b      	lsrs	r3, r3, #8
 8011b5c:	0719      	lsls	r1, r3, #28
 8011b5e:	bf04      	itt	eq
 8011b60:	091b      	lsreq	r3, r3, #4
 8011b62:	3004      	addeq	r0, #4
 8011b64:	0799      	lsls	r1, r3, #30
 8011b66:	bf04      	itt	eq
 8011b68:	089b      	lsreq	r3, r3, #2
 8011b6a:	3002      	addeq	r0, #2
 8011b6c:	07d9      	lsls	r1, r3, #31
 8011b6e:	d403      	bmi.n	8011b78 <__lo0bits+0x4e>
 8011b70:	085b      	lsrs	r3, r3, #1
 8011b72:	f100 0001 	add.w	r0, r0, #1
 8011b76:	d003      	beq.n	8011b80 <__lo0bits+0x56>
 8011b78:	6013      	str	r3, [r2, #0]
 8011b7a:	4770      	bx	lr
 8011b7c:	2000      	movs	r0, #0
 8011b7e:	4770      	bx	lr
 8011b80:	2020      	movs	r0, #32
 8011b82:	4770      	bx	lr

08011b84 <__i2b>:
 8011b84:	b510      	push	{r4, lr}
 8011b86:	460c      	mov	r4, r1
 8011b88:	2101      	movs	r1, #1
 8011b8a:	f7ff febd 	bl	8011908 <_Balloc>
 8011b8e:	4602      	mov	r2, r0
 8011b90:	b928      	cbnz	r0, 8011b9e <__i2b+0x1a>
 8011b92:	4b05      	ldr	r3, [pc, #20]	@ (8011ba8 <__i2b+0x24>)
 8011b94:	4805      	ldr	r0, [pc, #20]	@ (8011bac <__i2b+0x28>)
 8011b96:	f240 1145 	movw	r1, #325	@ 0x145
 8011b9a:	f7fd fdf3 	bl	800f784 <__assert_func>
 8011b9e:	2301      	movs	r3, #1
 8011ba0:	6144      	str	r4, [r0, #20]
 8011ba2:	6103      	str	r3, [r0, #16]
 8011ba4:	bd10      	pop	{r4, pc}
 8011ba6:	bf00      	nop
 8011ba8:	08014255 	.word	0x08014255
 8011bac:	08014266 	.word	0x08014266

08011bb0 <__multiply>:
 8011bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bb4:	4614      	mov	r4, r2
 8011bb6:	690a      	ldr	r2, [r1, #16]
 8011bb8:	6923      	ldr	r3, [r4, #16]
 8011bba:	429a      	cmp	r2, r3
 8011bbc:	bfa8      	it	ge
 8011bbe:	4623      	movge	r3, r4
 8011bc0:	460f      	mov	r7, r1
 8011bc2:	bfa4      	itt	ge
 8011bc4:	460c      	movge	r4, r1
 8011bc6:	461f      	movge	r7, r3
 8011bc8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8011bcc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8011bd0:	68a3      	ldr	r3, [r4, #8]
 8011bd2:	6861      	ldr	r1, [r4, #4]
 8011bd4:	eb0a 0609 	add.w	r6, sl, r9
 8011bd8:	42b3      	cmp	r3, r6
 8011bda:	b085      	sub	sp, #20
 8011bdc:	bfb8      	it	lt
 8011bde:	3101      	addlt	r1, #1
 8011be0:	f7ff fe92 	bl	8011908 <_Balloc>
 8011be4:	b930      	cbnz	r0, 8011bf4 <__multiply+0x44>
 8011be6:	4602      	mov	r2, r0
 8011be8:	4b44      	ldr	r3, [pc, #272]	@ (8011cfc <__multiply+0x14c>)
 8011bea:	4845      	ldr	r0, [pc, #276]	@ (8011d00 <__multiply+0x150>)
 8011bec:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011bf0:	f7fd fdc8 	bl	800f784 <__assert_func>
 8011bf4:	f100 0514 	add.w	r5, r0, #20
 8011bf8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011bfc:	462b      	mov	r3, r5
 8011bfe:	2200      	movs	r2, #0
 8011c00:	4543      	cmp	r3, r8
 8011c02:	d321      	bcc.n	8011c48 <__multiply+0x98>
 8011c04:	f107 0114 	add.w	r1, r7, #20
 8011c08:	f104 0214 	add.w	r2, r4, #20
 8011c0c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8011c10:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8011c14:	9302      	str	r3, [sp, #8]
 8011c16:	1b13      	subs	r3, r2, r4
 8011c18:	3b15      	subs	r3, #21
 8011c1a:	f023 0303 	bic.w	r3, r3, #3
 8011c1e:	3304      	adds	r3, #4
 8011c20:	f104 0715 	add.w	r7, r4, #21
 8011c24:	42ba      	cmp	r2, r7
 8011c26:	bf38      	it	cc
 8011c28:	2304      	movcc	r3, #4
 8011c2a:	9301      	str	r3, [sp, #4]
 8011c2c:	9b02      	ldr	r3, [sp, #8]
 8011c2e:	9103      	str	r1, [sp, #12]
 8011c30:	428b      	cmp	r3, r1
 8011c32:	d80c      	bhi.n	8011c4e <__multiply+0x9e>
 8011c34:	2e00      	cmp	r6, #0
 8011c36:	dd03      	ble.n	8011c40 <__multiply+0x90>
 8011c38:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d05b      	beq.n	8011cf8 <__multiply+0x148>
 8011c40:	6106      	str	r6, [r0, #16]
 8011c42:	b005      	add	sp, #20
 8011c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c48:	f843 2b04 	str.w	r2, [r3], #4
 8011c4c:	e7d8      	b.n	8011c00 <__multiply+0x50>
 8011c4e:	f8b1 a000 	ldrh.w	sl, [r1]
 8011c52:	f1ba 0f00 	cmp.w	sl, #0
 8011c56:	d024      	beq.n	8011ca2 <__multiply+0xf2>
 8011c58:	f104 0e14 	add.w	lr, r4, #20
 8011c5c:	46a9      	mov	r9, r5
 8011c5e:	f04f 0c00 	mov.w	ip, #0
 8011c62:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011c66:	f8d9 3000 	ldr.w	r3, [r9]
 8011c6a:	fa1f fb87 	uxth.w	fp, r7
 8011c6e:	b29b      	uxth	r3, r3
 8011c70:	fb0a 330b 	mla	r3, sl, fp, r3
 8011c74:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8011c78:	f8d9 7000 	ldr.w	r7, [r9]
 8011c7c:	4463      	add	r3, ip
 8011c7e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011c82:	fb0a c70b 	mla	r7, sl, fp, ip
 8011c86:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8011c8a:	b29b      	uxth	r3, r3
 8011c8c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011c90:	4572      	cmp	r2, lr
 8011c92:	f849 3b04 	str.w	r3, [r9], #4
 8011c96:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011c9a:	d8e2      	bhi.n	8011c62 <__multiply+0xb2>
 8011c9c:	9b01      	ldr	r3, [sp, #4]
 8011c9e:	f845 c003 	str.w	ip, [r5, r3]
 8011ca2:	9b03      	ldr	r3, [sp, #12]
 8011ca4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011ca8:	3104      	adds	r1, #4
 8011caa:	f1b9 0f00 	cmp.w	r9, #0
 8011cae:	d021      	beq.n	8011cf4 <__multiply+0x144>
 8011cb0:	682b      	ldr	r3, [r5, #0]
 8011cb2:	f104 0c14 	add.w	ip, r4, #20
 8011cb6:	46ae      	mov	lr, r5
 8011cb8:	f04f 0a00 	mov.w	sl, #0
 8011cbc:	f8bc b000 	ldrh.w	fp, [ip]
 8011cc0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8011cc4:	fb09 770b 	mla	r7, r9, fp, r7
 8011cc8:	4457      	add	r7, sl
 8011cca:	b29b      	uxth	r3, r3
 8011ccc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011cd0:	f84e 3b04 	str.w	r3, [lr], #4
 8011cd4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011cd8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011cdc:	f8be 3000 	ldrh.w	r3, [lr]
 8011ce0:	fb09 330a 	mla	r3, r9, sl, r3
 8011ce4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8011ce8:	4562      	cmp	r2, ip
 8011cea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011cee:	d8e5      	bhi.n	8011cbc <__multiply+0x10c>
 8011cf0:	9f01      	ldr	r7, [sp, #4]
 8011cf2:	51eb      	str	r3, [r5, r7]
 8011cf4:	3504      	adds	r5, #4
 8011cf6:	e799      	b.n	8011c2c <__multiply+0x7c>
 8011cf8:	3e01      	subs	r6, #1
 8011cfa:	e79b      	b.n	8011c34 <__multiply+0x84>
 8011cfc:	08014255 	.word	0x08014255
 8011d00:	08014266 	.word	0x08014266

08011d04 <__pow5mult>:
 8011d04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d08:	4615      	mov	r5, r2
 8011d0a:	f012 0203 	ands.w	r2, r2, #3
 8011d0e:	4607      	mov	r7, r0
 8011d10:	460e      	mov	r6, r1
 8011d12:	d007      	beq.n	8011d24 <__pow5mult+0x20>
 8011d14:	4c25      	ldr	r4, [pc, #148]	@ (8011dac <__pow5mult+0xa8>)
 8011d16:	3a01      	subs	r2, #1
 8011d18:	2300      	movs	r3, #0
 8011d1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011d1e:	f7ff fe55 	bl	80119cc <__multadd>
 8011d22:	4606      	mov	r6, r0
 8011d24:	10ad      	asrs	r5, r5, #2
 8011d26:	d03d      	beq.n	8011da4 <__pow5mult+0xa0>
 8011d28:	69fc      	ldr	r4, [r7, #28]
 8011d2a:	b97c      	cbnz	r4, 8011d4c <__pow5mult+0x48>
 8011d2c:	2010      	movs	r0, #16
 8011d2e:	f7fd fd47 	bl	800f7c0 <malloc>
 8011d32:	4602      	mov	r2, r0
 8011d34:	61f8      	str	r0, [r7, #28]
 8011d36:	b928      	cbnz	r0, 8011d44 <__pow5mult+0x40>
 8011d38:	4b1d      	ldr	r3, [pc, #116]	@ (8011db0 <__pow5mult+0xac>)
 8011d3a:	481e      	ldr	r0, [pc, #120]	@ (8011db4 <__pow5mult+0xb0>)
 8011d3c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011d40:	f7fd fd20 	bl	800f784 <__assert_func>
 8011d44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011d48:	6004      	str	r4, [r0, #0]
 8011d4a:	60c4      	str	r4, [r0, #12]
 8011d4c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011d50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011d54:	b94c      	cbnz	r4, 8011d6a <__pow5mult+0x66>
 8011d56:	f240 2171 	movw	r1, #625	@ 0x271
 8011d5a:	4638      	mov	r0, r7
 8011d5c:	f7ff ff12 	bl	8011b84 <__i2b>
 8011d60:	2300      	movs	r3, #0
 8011d62:	f8c8 0008 	str.w	r0, [r8, #8]
 8011d66:	4604      	mov	r4, r0
 8011d68:	6003      	str	r3, [r0, #0]
 8011d6a:	f04f 0900 	mov.w	r9, #0
 8011d6e:	07eb      	lsls	r3, r5, #31
 8011d70:	d50a      	bpl.n	8011d88 <__pow5mult+0x84>
 8011d72:	4631      	mov	r1, r6
 8011d74:	4622      	mov	r2, r4
 8011d76:	4638      	mov	r0, r7
 8011d78:	f7ff ff1a 	bl	8011bb0 <__multiply>
 8011d7c:	4631      	mov	r1, r6
 8011d7e:	4680      	mov	r8, r0
 8011d80:	4638      	mov	r0, r7
 8011d82:	f7ff fe01 	bl	8011988 <_Bfree>
 8011d86:	4646      	mov	r6, r8
 8011d88:	106d      	asrs	r5, r5, #1
 8011d8a:	d00b      	beq.n	8011da4 <__pow5mult+0xa0>
 8011d8c:	6820      	ldr	r0, [r4, #0]
 8011d8e:	b938      	cbnz	r0, 8011da0 <__pow5mult+0x9c>
 8011d90:	4622      	mov	r2, r4
 8011d92:	4621      	mov	r1, r4
 8011d94:	4638      	mov	r0, r7
 8011d96:	f7ff ff0b 	bl	8011bb0 <__multiply>
 8011d9a:	6020      	str	r0, [r4, #0]
 8011d9c:	f8c0 9000 	str.w	r9, [r0]
 8011da0:	4604      	mov	r4, r0
 8011da2:	e7e4      	b.n	8011d6e <__pow5mult+0x6a>
 8011da4:	4630      	mov	r0, r6
 8011da6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011daa:	bf00      	nop
 8011dac:	080142c0 	.word	0x080142c0
 8011db0:	080141e6 	.word	0x080141e6
 8011db4:	08014266 	.word	0x08014266

08011db8 <__lshift>:
 8011db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011dbc:	460c      	mov	r4, r1
 8011dbe:	6849      	ldr	r1, [r1, #4]
 8011dc0:	6923      	ldr	r3, [r4, #16]
 8011dc2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011dc6:	68a3      	ldr	r3, [r4, #8]
 8011dc8:	4607      	mov	r7, r0
 8011dca:	4691      	mov	r9, r2
 8011dcc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011dd0:	f108 0601 	add.w	r6, r8, #1
 8011dd4:	42b3      	cmp	r3, r6
 8011dd6:	db0b      	blt.n	8011df0 <__lshift+0x38>
 8011dd8:	4638      	mov	r0, r7
 8011dda:	f7ff fd95 	bl	8011908 <_Balloc>
 8011dde:	4605      	mov	r5, r0
 8011de0:	b948      	cbnz	r0, 8011df6 <__lshift+0x3e>
 8011de2:	4602      	mov	r2, r0
 8011de4:	4b28      	ldr	r3, [pc, #160]	@ (8011e88 <__lshift+0xd0>)
 8011de6:	4829      	ldr	r0, [pc, #164]	@ (8011e8c <__lshift+0xd4>)
 8011de8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011dec:	f7fd fcca 	bl	800f784 <__assert_func>
 8011df0:	3101      	adds	r1, #1
 8011df2:	005b      	lsls	r3, r3, #1
 8011df4:	e7ee      	b.n	8011dd4 <__lshift+0x1c>
 8011df6:	2300      	movs	r3, #0
 8011df8:	f100 0114 	add.w	r1, r0, #20
 8011dfc:	f100 0210 	add.w	r2, r0, #16
 8011e00:	4618      	mov	r0, r3
 8011e02:	4553      	cmp	r3, sl
 8011e04:	db33      	blt.n	8011e6e <__lshift+0xb6>
 8011e06:	6920      	ldr	r0, [r4, #16]
 8011e08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011e0c:	f104 0314 	add.w	r3, r4, #20
 8011e10:	f019 091f 	ands.w	r9, r9, #31
 8011e14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011e18:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011e1c:	d02b      	beq.n	8011e76 <__lshift+0xbe>
 8011e1e:	f1c9 0e20 	rsb	lr, r9, #32
 8011e22:	468a      	mov	sl, r1
 8011e24:	2200      	movs	r2, #0
 8011e26:	6818      	ldr	r0, [r3, #0]
 8011e28:	fa00 f009 	lsl.w	r0, r0, r9
 8011e2c:	4310      	orrs	r0, r2
 8011e2e:	f84a 0b04 	str.w	r0, [sl], #4
 8011e32:	f853 2b04 	ldr.w	r2, [r3], #4
 8011e36:	459c      	cmp	ip, r3
 8011e38:	fa22 f20e 	lsr.w	r2, r2, lr
 8011e3c:	d8f3      	bhi.n	8011e26 <__lshift+0x6e>
 8011e3e:	ebac 0304 	sub.w	r3, ip, r4
 8011e42:	3b15      	subs	r3, #21
 8011e44:	f023 0303 	bic.w	r3, r3, #3
 8011e48:	3304      	adds	r3, #4
 8011e4a:	f104 0015 	add.w	r0, r4, #21
 8011e4e:	4584      	cmp	ip, r0
 8011e50:	bf38      	it	cc
 8011e52:	2304      	movcc	r3, #4
 8011e54:	50ca      	str	r2, [r1, r3]
 8011e56:	b10a      	cbz	r2, 8011e5c <__lshift+0xa4>
 8011e58:	f108 0602 	add.w	r6, r8, #2
 8011e5c:	3e01      	subs	r6, #1
 8011e5e:	4638      	mov	r0, r7
 8011e60:	612e      	str	r6, [r5, #16]
 8011e62:	4621      	mov	r1, r4
 8011e64:	f7ff fd90 	bl	8011988 <_Bfree>
 8011e68:	4628      	mov	r0, r5
 8011e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e6e:	f842 0f04 	str.w	r0, [r2, #4]!
 8011e72:	3301      	adds	r3, #1
 8011e74:	e7c5      	b.n	8011e02 <__lshift+0x4a>
 8011e76:	3904      	subs	r1, #4
 8011e78:	f853 2b04 	ldr.w	r2, [r3], #4
 8011e7c:	f841 2f04 	str.w	r2, [r1, #4]!
 8011e80:	459c      	cmp	ip, r3
 8011e82:	d8f9      	bhi.n	8011e78 <__lshift+0xc0>
 8011e84:	e7ea      	b.n	8011e5c <__lshift+0xa4>
 8011e86:	bf00      	nop
 8011e88:	08014255 	.word	0x08014255
 8011e8c:	08014266 	.word	0x08014266

08011e90 <__mcmp>:
 8011e90:	690a      	ldr	r2, [r1, #16]
 8011e92:	4603      	mov	r3, r0
 8011e94:	6900      	ldr	r0, [r0, #16]
 8011e96:	1a80      	subs	r0, r0, r2
 8011e98:	b530      	push	{r4, r5, lr}
 8011e9a:	d10e      	bne.n	8011eba <__mcmp+0x2a>
 8011e9c:	3314      	adds	r3, #20
 8011e9e:	3114      	adds	r1, #20
 8011ea0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011ea4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011ea8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011eac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011eb0:	4295      	cmp	r5, r2
 8011eb2:	d003      	beq.n	8011ebc <__mcmp+0x2c>
 8011eb4:	d205      	bcs.n	8011ec2 <__mcmp+0x32>
 8011eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8011eba:	bd30      	pop	{r4, r5, pc}
 8011ebc:	42a3      	cmp	r3, r4
 8011ebe:	d3f3      	bcc.n	8011ea8 <__mcmp+0x18>
 8011ec0:	e7fb      	b.n	8011eba <__mcmp+0x2a>
 8011ec2:	2001      	movs	r0, #1
 8011ec4:	e7f9      	b.n	8011eba <__mcmp+0x2a>
	...

08011ec8 <__mdiff>:
 8011ec8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ecc:	4689      	mov	r9, r1
 8011ece:	4606      	mov	r6, r0
 8011ed0:	4611      	mov	r1, r2
 8011ed2:	4648      	mov	r0, r9
 8011ed4:	4614      	mov	r4, r2
 8011ed6:	f7ff ffdb 	bl	8011e90 <__mcmp>
 8011eda:	1e05      	subs	r5, r0, #0
 8011edc:	d112      	bne.n	8011f04 <__mdiff+0x3c>
 8011ede:	4629      	mov	r1, r5
 8011ee0:	4630      	mov	r0, r6
 8011ee2:	f7ff fd11 	bl	8011908 <_Balloc>
 8011ee6:	4602      	mov	r2, r0
 8011ee8:	b928      	cbnz	r0, 8011ef6 <__mdiff+0x2e>
 8011eea:	4b3f      	ldr	r3, [pc, #252]	@ (8011fe8 <__mdiff+0x120>)
 8011eec:	f240 2137 	movw	r1, #567	@ 0x237
 8011ef0:	483e      	ldr	r0, [pc, #248]	@ (8011fec <__mdiff+0x124>)
 8011ef2:	f7fd fc47 	bl	800f784 <__assert_func>
 8011ef6:	2301      	movs	r3, #1
 8011ef8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011efc:	4610      	mov	r0, r2
 8011efe:	b003      	add	sp, #12
 8011f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f04:	bfbc      	itt	lt
 8011f06:	464b      	movlt	r3, r9
 8011f08:	46a1      	movlt	r9, r4
 8011f0a:	4630      	mov	r0, r6
 8011f0c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011f10:	bfba      	itte	lt
 8011f12:	461c      	movlt	r4, r3
 8011f14:	2501      	movlt	r5, #1
 8011f16:	2500      	movge	r5, #0
 8011f18:	f7ff fcf6 	bl	8011908 <_Balloc>
 8011f1c:	4602      	mov	r2, r0
 8011f1e:	b918      	cbnz	r0, 8011f28 <__mdiff+0x60>
 8011f20:	4b31      	ldr	r3, [pc, #196]	@ (8011fe8 <__mdiff+0x120>)
 8011f22:	f240 2145 	movw	r1, #581	@ 0x245
 8011f26:	e7e3      	b.n	8011ef0 <__mdiff+0x28>
 8011f28:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011f2c:	6926      	ldr	r6, [r4, #16]
 8011f2e:	60c5      	str	r5, [r0, #12]
 8011f30:	f109 0310 	add.w	r3, r9, #16
 8011f34:	f109 0514 	add.w	r5, r9, #20
 8011f38:	f104 0e14 	add.w	lr, r4, #20
 8011f3c:	f100 0b14 	add.w	fp, r0, #20
 8011f40:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011f44:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011f48:	9301      	str	r3, [sp, #4]
 8011f4a:	46d9      	mov	r9, fp
 8011f4c:	f04f 0c00 	mov.w	ip, #0
 8011f50:	9b01      	ldr	r3, [sp, #4]
 8011f52:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011f56:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011f5a:	9301      	str	r3, [sp, #4]
 8011f5c:	fa1f f38a 	uxth.w	r3, sl
 8011f60:	4619      	mov	r1, r3
 8011f62:	b283      	uxth	r3, r0
 8011f64:	1acb      	subs	r3, r1, r3
 8011f66:	0c00      	lsrs	r0, r0, #16
 8011f68:	4463      	add	r3, ip
 8011f6a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011f6e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011f72:	b29b      	uxth	r3, r3
 8011f74:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011f78:	4576      	cmp	r6, lr
 8011f7a:	f849 3b04 	str.w	r3, [r9], #4
 8011f7e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011f82:	d8e5      	bhi.n	8011f50 <__mdiff+0x88>
 8011f84:	1b33      	subs	r3, r6, r4
 8011f86:	3b15      	subs	r3, #21
 8011f88:	f023 0303 	bic.w	r3, r3, #3
 8011f8c:	3415      	adds	r4, #21
 8011f8e:	3304      	adds	r3, #4
 8011f90:	42a6      	cmp	r6, r4
 8011f92:	bf38      	it	cc
 8011f94:	2304      	movcc	r3, #4
 8011f96:	441d      	add	r5, r3
 8011f98:	445b      	add	r3, fp
 8011f9a:	461e      	mov	r6, r3
 8011f9c:	462c      	mov	r4, r5
 8011f9e:	4544      	cmp	r4, r8
 8011fa0:	d30e      	bcc.n	8011fc0 <__mdiff+0xf8>
 8011fa2:	f108 0103 	add.w	r1, r8, #3
 8011fa6:	1b49      	subs	r1, r1, r5
 8011fa8:	f021 0103 	bic.w	r1, r1, #3
 8011fac:	3d03      	subs	r5, #3
 8011fae:	45a8      	cmp	r8, r5
 8011fb0:	bf38      	it	cc
 8011fb2:	2100      	movcc	r1, #0
 8011fb4:	440b      	add	r3, r1
 8011fb6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011fba:	b191      	cbz	r1, 8011fe2 <__mdiff+0x11a>
 8011fbc:	6117      	str	r7, [r2, #16]
 8011fbe:	e79d      	b.n	8011efc <__mdiff+0x34>
 8011fc0:	f854 1b04 	ldr.w	r1, [r4], #4
 8011fc4:	46e6      	mov	lr, ip
 8011fc6:	0c08      	lsrs	r0, r1, #16
 8011fc8:	fa1c fc81 	uxtah	ip, ip, r1
 8011fcc:	4471      	add	r1, lr
 8011fce:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011fd2:	b289      	uxth	r1, r1
 8011fd4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011fd8:	f846 1b04 	str.w	r1, [r6], #4
 8011fdc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011fe0:	e7dd      	b.n	8011f9e <__mdiff+0xd6>
 8011fe2:	3f01      	subs	r7, #1
 8011fe4:	e7e7      	b.n	8011fb6 <__mdiff+0xee>
 8011fe6:	bf00      	nop
 8011fe8:	08014255 	.word	0x08014255
 8011fec:	08014266 	.word	0x08014266

08011ff0 <__ulp>:
 8011ff0:	b082      	sub	sp, #8
 8011ff2:	ed8d 0b00 	vstr	d0, [sp]
 8011ff6:	9a01      	ldr	r2, [sp, #4]
 8011ff8:	4b0f      	ldr	r3, [pc, #60]	@ (8012038 <__ulp+0x48>)
 8011ffa:	4013      	ands	r3, r2
 8011ffc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8012000:	2b00      	cmp	r3, #0
 8012002:	dc08      	bgt.n	8012016 <__ulp+0x26>
 8012004:	425b      	negs	r3, r3
 8012006:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801200a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801200e:	da04      	bge.n	801201a <__ulp+0x2a>
 8012010:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8012014:	4113      	asrs	r3, r2
 8012016:	2200      	movs	r2, #0
 8012018:	e008      	b.n	801202c <__ulp+0x3c>
 801201a:	f1a2 0314 	sub.w	r3, r2, #20
 801201e:	2b1e      	cmp	r3, #30
 8012020:	bfda      	itte	le
 8012022:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8012026:	40da      	lsrle	r2, r3
 8012028:	2201      	movgt	r2, #1
 801202a:	2300      	movs	r3, #0
 801202c:	4619      	mov	r1, r3
 801202e:	4610      	mov	r0, r2
 8012030:	ec41 0b10 	vmov	d0, r0, r1
 8012034:	b002      	add	sp, #8
 8012036:	4770      	bx	lr
 8012038:	7ff00000 	.word	0x7ff00000

0801203c <__b2d>:
 801203c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012040:	6906      	ldr	r6, [r0, #16]
 8012042:	f100 0814 	add.w	r8, r0, #20
 8012046:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801204a:	1f37      	subs	r7, r6, #4
 801204c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012050:	4610      	mov	r0, r2
 8012052:	f7ff fd4b 	bl	8011aec <__hi0bits>
 8012056:	f1c0 0320 	rsb	r3, r0, #32
 801205a:	280a      	cmp	r0, #10
 801205c:	600b      	str	r3, [r1, #0]
 801205e:	491b      	ldr	r1, [pc, #108]	@ (80120cc <__b2d+0x90>)
 8012060:	dc15      	bgt.n	801208e <__b2d+0x52>
 8012062:	f1c0 0c0b 	rsb	ip, r0, #11
 8012066:	fa22 f30c 	lsr.w	r3, r2, ip
 801206a:	45b8      	cmp	r8, r7
 801206c:	ea43 0501 	orr.w	r5, r3, r1
 8012070:	bf34      	ite	cc
 8012072:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012076:	2300      	movcs	r3, #0
 8012078:	3015      	adds	r0, #21
 801207a:	fa02 f000 	lsl.w	r0, r2, r0
 801207e:	fa23 f30c 	lsr.w	r3, r3, ip
 8012082:	4303      	orrs	r3, r0
 8012084:	461c      	mov	r4, r3
 8012086:	ec45 4b10 	vmov	d0, r4, r5
 801208a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801208e:	45b8      	cmp	r8, r7
 8012090:	bf3a      	itte	cc
 8012092:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012096:	f1a6 0708 	subcc.w	r7, r6, #8
 801209a:	2300      	movcs	r3, #0
 801209c:	380b      	subs	r0, #11
 801209e:	d012      	beq.n	80120c6 <__b2d+0x8a>
 80120a0:	f1c0 0120 	rsb	r1, r0, #32
 80120a4:	fa23 f401 	lsr.w	r4, r3, r1
 80120a8:	4082      	lsls	r2, r0
 80120aa:	4322      	orrs	r2, r4
 80120ac:	4547      	cmp	r7, r8
 80120ae:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80120b2:	bf8c      	ite	hi
 80120b4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80120b8:	2200      	movls	r2, #0
 80120ba:	4083      	lsls	r3, r0
 80120bc:	40ca      	lsrs	r2, r1
 80120be:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80120c2:	4313      	orrs	r3, r2
 80120c4:	e7de      	b.n	8012084 <__b2d+0x48>
 80120c6:	ea42 0501 	orr.w	r5, r2, r1
 80120ca:	e7db      	b.n	8012084 <__b2d+0x48>
 80120cc:	3ff00000 	.word	0x3ff00000

080120d0 <__d2b>:
 80120d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80120d4:	460f      	mov	r7, r1
 80120d6:	2101      	movs	r1, #1
 80120d8:	ec59 8b10 	vmov	r8, r9, d0
 80120dc:	4616      	mov	r6, r2
 80120de:	f7ff fc13 	bl	8011908 <_Balloc>
 80120e2:	4604      	mov	r4, r0
 80120e4:	b930      	cbnz	r0, 80120f4 <__d2b+0x24>
 80120e6:	4602      	mov	r2, r0
 80120e8:	4b23      	ldr	r3, [pc, #140]	@ (8012178 <__d2b+0xa8>)
 80120ea:	4824      	ldr	r0, [pc, #144]	@ (801217c <__d2b+0xac>)
 80120ec:	f240 310f 	movw	r1, #783	@ 0x30f
 80120f0:	f7fd fb48 	bl	800f784 <__assert_func>
 80120f4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80120f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80120fc:	b10d      	cbz	r5, 8012102 <__d2b+0x32>
 80120fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012102:	9301      	str	r3, [sp, #4]
 8012104:	f1b8 0300 	subs.w	r3, r8, #0
 8012108:	d023      	beq.n	8012152 <__d2b+0x82>
 801210a:	4668      	mov	r0, sp
 801210c:	9300      	str	r3, [sp, #0]
 801210e:	f7ff fd0c 	bl	8011b2a <__lo0bits>
 8012112:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012116:	b1d0      	cbz	r0, 801214e <__d2b+0x7e>
 8012118:	f1c0 0320 	rsb	r3, r0, #32
 801211c:	fa02 f303 	lsl.w	r3, r2, r3
 8012120:	430b      	orrs	r3, r1
 8012122:	40c2      	lsrs	r2, r0
 8012124:	6163      	str	r3, [r4, #20]
 8012126:	9201      	str	r2, [sp, #4]
 8012128:	9b01      	ldr	r3, [sp, #4]
 801212a:	61a3      	str	r3, [r4, #24]
 801212c:	2b00      	cmp	r3, #0
 801212e:	bf0c      	ite	eq
 8012130:	2201      	moveq	r2, #1
 8012132:	2202      	movne	r2, #2
 8012134:	6122      	str	r2, [r4, #16]
 8012136:	b1a5      	cbz	r5, 8012162 <__d2b+0x92>
 8012138:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801213c:	4405      	add	r5, r0
 801213e:	603d      	str	r5, [r7, #0]
 8012140:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8012144:	6030      	str	r0, [r6, #0]
 8012146:	4620      	mov	r0, r4
 8012148:	b003      	add	sp, #12
 801214a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801214e:	6161      	str	r1, [r4, #20]
 8012150:	e7ea      	b.n	8012128 <__d2b+0x58>
 8012152:	a801      	add	r0, sp, #4
 8012154:	f7ff fce9 	bl	8011b2a <__lo0bits>
 8012158:	9b01      	ldr	r3, [sp, #4]
 801215a:	6163      	str	r3, [r4, #20]
 801215c:	3020      	adds	r0, #32
 801215e:	2201      	movs	r2, #1
 8012160:	e7e8      	b.n	8012134 <__d2b+0x64>
 8012162:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012166:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801216a:	6038      	str	r0, [r7, #0]
 801216c:	6918      	ldr	r0, [r3, #16]
 801216e:	f7ff fcbd 	bl	8011aec <__hi0bits>
 8012172:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012176:	e7e5      	b.n	8012144 <__d2b+0x74>
 8012178:	08014255 	.word	0x08014255
 801217c:	08014266 	.word	0x08014266

08012180 <__ratio>:
 8012180:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012184:	4688      	mov	r8, r1
 8012186:	4669      	mov	r1, sp
 8012188:	4681      	mov	r9, r0
 801218a:	f7ff ff57 	bl	801203c <__b2d>
 801218e:	a901      	add	r1, sp, #4
 8012190:	4640      	mov	r0, r8
 8012192:	ec55 4b10 	vmov	r4, r5, d0
 8012196:	f7ff ff51 	bl	801203c <__b2d>
 801219a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801219e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80121a2:	1ad2      	subs	r2, r2, r3
 80121a4:	e9dd 3100 	ldrd	r3, r1, [sp]
 80121a8:	1a5b      	subs	r3, r3, r1
 80121aa:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80121ae:	ec57 6b10 	vmov	r6, r7, d0
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	bfd6      	itet	le
 80121b6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80121ba:	462a      	movgt	r2, r5
 80121bc:	463a      	movle	r2, r7
 80121be:	46ab      	mov	fp, r5
 80121c0:	46a2      	mov	sl, r4
 80121c2:	bfce      	itee	gt
 80121c4:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80121c8:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 80121cc:	ee00 3a90 	vmovle	s1, r3
 80121d0:	ec4b ab17 	vmov	d7, sl, fp
 80121d4:	ee87 0b00 	vdiv.f64	d0, d7, d0
 80121d8:	b003      	add	sp, #12
 80121da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080121de <__copybits>:
 80121de:	3901      	subs	r1, #1
 80121e0:	b570      	push	{r4, r5, r6, lr}
 80121e2:	1149      	asrs	r1, r1, #5
 80121e4:	6914      	ldr	r4, [r2, #16]
 80121e6:	3101      	adds	r1, #1
 80121e8:	f102 0314 	add.w	r3, r2, #20
 80121ec:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80121f0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80121f4:	1f05      	subs	r5, r0, #4
 80121f6:	42a3      	cmp	r3, r4
 80121f8:	d30c      	bcc.n	8012214 <__copybits+0x36>
 80121fa:	1aa3      	subs	r3, r4, r2
 80121fc:	3b11      	subs	r3, #17
 80121fe:	f023 0303 	bic.w	r3, r3, #3
 8012202:	3211      	adds	r2, #17
 8012204:	42a2      	cmp	r2, r4
 8012206:	bf88      	it	hi
 8012208:	2300      	movhi	r3, #0
 801220a:	4418      	add	r0, r3
 801220c:	2300      	movs	r3, #0
 801220e:	4288      	cmp	r0, r1
 8012210:	d305      	bcc.n	801221e <__copybits+0x40>
 8012212:	bd70      	pop	{r4, r5, r6, pc}
 8012214:	f853 6b04 	ldr.w	r6, [r3], #4
 8012218:	f845 6f04 	str.w	r6, [r5, #4]!
 801221c:	e7eb      	b.n	80121f6 <__copybits+0x18>
 801221e:	f840 3b04 	str.w	r3, [r0], #4
 8012222:	e7f4      	b.n	801220e <__copybits+0x30>

08012224 <__any_on>:
 8012224:	f100 0214 	add.w	r2, r0, #20
 8012228:	6900      	ldr	r0, [r0, #16]
 801222a:	114b      	asrs	r3, r1, #5
 801222c:	4298      	cmp	r0, r3
 801222e:	b510      	push	{r4, lr}
 8012230:	db11      	blt.n	8012256 <__any_on+0x32>
 8012232:	dd0a      	ble.n	801224a <__any_on+0x26>
 8012234:	f011 011f 	ands.w	r1, r1, #31
 8012238:	d007      	beq.n	801224a <__any_on+0x26>
 801223a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801223e:	fa24 f001 	lsr.w	r0, r4, r1
 8012242:	fa00 f101 	lsl.w	r1, r0, r1
 8012246:	428c      	cmp	r4, r1
 8012248:	d10b      	bne.n	8012262 <__any_on+0x3e>
 801224a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801224e:	4293      	cmp	r3, r2
 8012250:	d803      	bhi.n	801225a <__any_on+0x36>
 8012252:	2000      	movs	r0, #0
 8012254:	bd10      	pop	{r4, pc}
 8012256:	4603      	mov	r3, r0
 8012258:	e7f7      	b.n	801224a <__any_on+0x26>
 801225a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801225e:	2900      	cmp	r1, #0
 8012260:	d0f5      	beq.n	801224e <__any_on+0x2a>
 8012262:	2001      	movs	r0, #1
 8012264:	e7f6      	b.n	8012254 <__any_on+0x30>

08012266 <sulp>:
 8012266:	b570      	push	{r4, r5, r6, lr}
 8012268:	4604      	mov	r4, r0
 801226a:	460d      	mov	r5, r1
 801226c:	4616      	mov	r6, r2
 801226e:	ec45 4b10 	vmov	d0, r4, r5
 8012272:	f7ff febd 	bl	8011ff0 <__ulp>
 8012276:	b17e      	cbz	r6, 8012298 <sulp+0x32>
 8012278:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801227c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8012280:	2b00      	cmp	r3, #0
 8012282:	dd09      	ble.n	8012298 <sulp+0x32>
 8012284:	051b      	lsls	r3, r3, #20
 8012286:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 801228a:	2000      	movs	r0, #0
 801228c:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8012290:	ec41 0b17 	vmov	d7, r0, r1
 8012294:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012298:	bd70      	pop	{r4, r5, r6, pc}
 801229a:	0000      	movs	r0, r0
 801229c:	0000      	movs	r0, r0
	...

080122a0 <_strtod_l>:
 80122a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122a4:	ed2d 8b0a 	vpush	{d8-d12}
 80122a8:	b097      	sub	sp, #92	@ 0x5c
 80122aa:	4688      	mov	r8, r1
 80122ac:	920e      	str	r2, [sp, #56]	@ 0x38
 80122ae:	2200      	movs	r2, #0
 80122b0:	9212      	str	r2, [sp, #72]	@ 0x48
 80122b2:	9005      	str	r0, [sp, #20]
 80122b4:	f04f 0a00 	mov.w	sl, #0
 80122b8:	f04f 0b00 	mov.w	fp, #0
 80122bc:	460a      	mov	r2, r1
 80122be:	9211      	str	r2, [sp, #68]	@ 0x44
 80122c0:	7811      	ldrb	r1, [r2, #0]
 80122c2:	292b      	cmp	r1, #43	@ 0x2b
 80122c4:	d04c      	beq.n	8012360 <_strtod_l+0xc0>
 80122c6:	d839      	bhi.n	801233c <_strtod_l+0x9c>
 80122c8:	290d      	cmp	r1, #13
 80122ca:	d833      	bhi.n	8012334 <_strtod_l+0x94>
 80122cc:	2908      	cmp	r1, #8
 80122ce:	d833      	bhi.n	8012338 <_strtod_l+0x98>
 80122d0:	2900      	cmp	r1, #0
 80122d2:	d03c      	beq.n	801234e <_strtod_l+0xae>
 80122d4:	2200      	movs	r2, #0
 80122d6:	9208      	str	r2, [sp, #32]
 80122d8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80122da:	782a      	ldrb	r2, [r5, #0]
 80122dc:	2a30      	cmp	r2, #48	@ 0x30
 80122de:	f040 80b5 	bne.w	801244c <_strtod_l+0x1ac>
 80122e2:	786a      	ldrb	r2, [r5, #1]
 80122e4:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80122e8:	2a58      	cmp	r2, #88	@ 0x58
 80122ea:	d170      	bne.n	80123ce <_strtod_l+0x12e>
 80122ec:	9302      	str	r3, [sp, #8]
 80122ee:	9b08      	ldr	r3, [sp, #32]
 80122f0:	9301      	str	r3, [sp, #4]
 80122f2:	ab12      	add	r3, sp, #72	@ 0x48
 80122f4:	9300      	str	r3, [sp, #0]
 80122f6:	4a8b      	ldr	r2, [pc, #556]	@ (8012524 <_strtod_l+0x284>)
 80122f8:	9805      	ldr	r0, [sp, #20]
 80122fa:	ab13      	add	r3, sp, #76	@ 0x4c
 80122fc:	a911      	add	r1, sp, #68	@ 0x44
 80122fe:	f001 fa63 	bl	80137c8 <__gethex>
 8012302:	f010 060f 	ands.w	r6, r0, #15
 8012306:	4604      	mov	r4, r0
 8012308:	d005      	beq.n	8012316 <_strtod_l+0x76>
 801230a:	2e06      	cmp	r6, #6
 801230c:	d12a      	bne.n	8012364 <_strtod_l+0xc4>
 801230e:	3501      	adds	r5, #1
 8012310:	2300      	movs	r3, #0
 8012312:	9511      	str	r5, [sp, #68]	@ 0x44
 8012314:	9308      	str	r3, [sp, #32]
 8012316:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012318:	2b00      	cmp	r3, #0
 801231a:	f040 852f 	bne.w	8012d7c <_strtod_l+0xadc>
 801231e:	9b08      	ldr	r3, [sp, #32]
 8012320:	ec4b ab10 	vmov	d0, sl, fp
 8012324:	b1cb      	cbz	r3, 801235a <_strtod_l+0xba>
 8012326:	eeb1 0b40 	vneg.f64	d0, d0
 801232a:	b017      	add	sp, #92	@ 0x5c
 801232c:	ecbd 8b0a 	vpop	{d8-d12}
 8012330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012334:	2920      	cmp	r1, #32
 8012336:	d1cd      	bne.n	80122d4 <_strtod_l+0x34>
 8012338:	3201      	adds	r2, #1
 801233a:	e7c0      	b.n	80122be <_strtod_l+0x1e>
 801233c:	292d      	cmp	r1, #45	@ 0x2d
 801233e:	d1c9      	bne.n	80122d4 <_strtod_l+0x34>
 8012340:	2101      	movs	r1, #1
 8012342:	9108      	str	r1, [sp, #32]
 8012344:	1c51      	adds	r1, r2, #1
 8012346:	9111      	str	r1, [sp, #68]	@ 0x44
 8012348:	7852      	ldrb	r2, [r2, #1]
 801234a:	2a00      	cmp	r2, #0
 801234c:	d1c4      	bne.n	80122d8 <_strtod_l+0x38>
 801234e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012350:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8012354:	2b00      	cmp	r3, #0
 8012356:	f040 850f 	bne.w	8012d78 <_strtod_l+0xad8>
 801235a:	ec4b ab10 	vmov	d0, sl, fp
 801235e:	e7e4      	b.n	801232a <_strtod_l+0x8a>
 8012360:	2100      	movs	r1, #0
 8012362:	e7ee      	b.n	8012342 <_strtod_l+0xa2>
 8012364:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8012366:	b13a      	cbz	r2, 8012378 <_strtod_l+0xd8>
 8012368:	2135      	movs	r1, #53	@ 0x35
 801236a:	a814      	add	r0, sp, #80	@ 0x50
 801236c:	f7ff ff37 	bl	80121de <__copybits>
 8012370:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8012372:	9805      	ldr	r0, [sp, #20]
 8012374:	f7ff fb08 	bl	8011988 <_Bfree>
 8012378:	1e73      	subs	r3, r6, #1
 801237a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801237c:	2b04      	cmp	r3, #4
 801237e:	d806      	bhi.n	801238e <_strtod_l+0xee>
 8012380:	e8df f003 	tbb	[pc, r3]
 8012384:	201d0314 	.word	0x201d0314
 8012388:	14          	.byte	0x14
 8012389:	00          	.byte	0x00
 801238a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 801238e:	05e3      	lsls	r3, r4, #23
 8012390:	bf48      	it	mi
 8012392:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8012396:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801239a:	0d1b      	lsrs	r3, r3, #20
 801239c:	051b      	lsls	r3, r3, #20
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d1b9      	bne.n	8012316 <_strtod_l+0x76>
 80123a2:	f7fe fc45 	bl	8010c30 <__errno>
 80123a6:	2322      	movs	r3, #34	@ 0x22
 80123a8:	6003      	str	r3, [r0, #0]
 80123aa:	e7b4      	b.n	8012316 <_strtod_l+0x76>
 80123ac:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 80123b0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80123b4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80123b8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80123bc:	e7e7      	b.n	801238e <_strtod_l+0xee>
 80123be:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 801252c <_strtod_l+0x28c>
 80123c2:	e7e4      	b.n	801238e <_strtod_l+0xee>
 80123c4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80123c8:	f04f 3aff 	mov.w	sl, #4294967295
 80123cc:	e7df      	b.n	801238e <_strtod_l+0xee>
 80123ce:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80123d0:	1c5a      	adds	r2, r3, #1
 80123d2:	9211      	str	r2, [sp, #68]	@ 0x44
 80123d4:	785b      	ldrb	r3, [r3, #1]
 80123d6:	2b30      	cmp	r3, #48	@ 0x30
 80123d8:	d0f9      	beq.n	80123ce <_strtod_l+0x12e>
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d09b      	beq.n	8012316 <_strtod_l+0x76>
 80123de:	2301      	movs	r3, #1
 80123e0:	2600      	movs	r6, #0
 80123e2:	9307      	str	r3, [sp, #28]
 80123e4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80123e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80123e8:	46b1      	mov	r9, r6
 80123ea:	4635      	mov	r5, r6
 80123ec:	220a      	movs	r2, #10
 80123ee:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80123f0:	7804      	ldrb	r4, [r0, #0]
 80123f2:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 80123f6:	b2d9      	uxtb	r1, r3
 80123f8:	2909      	cmp	r1, #9
 80123fa:	d929      	bls.n	8012450 <_strtod_l+0x1b0>
 80123fc:	494a      	ldr	r1, [pc, #296]	@ (8012528 <_strtod_l+0x288>)
 80123fe:	2201      	movs	r2, #1
 8012400:	f001 f928 	bl	8013654 <strncmp>
 8012404:	b378      	cbz	r0, 8012466 <_strtod_l+0x1c6>
 8012406:	2000      	movs	r0, #0
 8012408:	4622      	mov	r2, r4
 801240a:	462b      	mov	r3, r5
 801240c:	4607      	mov	r7, r0
 801240e:	9006      	str	r0, [sp, #24]
 8012410:	2a65      	cmp	r2, #101	@ 0x65
 8012412:	d001      	beq.n	8012418 <_strtod_l+0x178>
 8012414:	2a45      	cmp	r2, #69	@ 0x45
 8012416:	d117      	bne.n	8012448 <_strtod_l+0x1a8>
 8012418:	b91b      	cbnz	r3, 8012422 <_strtod_l+0x182>
 801241a:	9b07      	ldr	r3, [sp, #28]
 801241c:	4303      	orrs	r3, r0
 801241e:	d096      	beq.n	801234e <_strtod_l+0xae>
 8012420:	2300      	movs	r3, #0
 8012422:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8012426:	f108 0201 	add.w	r2, r8, #1
 801242a:	9211      	str	r2, [sp, #68]	@ 0x44
 801242c:	f898 2001 	ldrb.w	r2, [r8, #1]
 8012430:	2a2b      	cmp	r2, #43	@ 0x2b
 8012432:	d06b      	beq.n	801250c <_strtod_l+0x26c>
 8012434:	2a2d      	cmp	r2, #45	@ 0x2d
 8012436:	d071      	beq.n	801251c <_strtod_l+0x27c>
 8012438:	f04f 0e00 	mov.w	lr, #0
 801243c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8012440:	2c09      	cmp	r4, #9
 8012442:	d979      	bls.n	8012538 <_strtod_l+0x298>
 8012444:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8012448:	2400      	movs	r4, #0
 801244a:	e094      	b.n	8012576 <_strtod_l+0x2d6>
 801244c:	2300      	movs	r3, #0
 801244e:	e7c7      	b.n	80123e0 <_strtod_l+0x140>
 8012450:	2d08      	cmp	r5, #8
 8012452:	f100 0001 	add.w	r0, r0, #1
 8012456:	bfd4      	ite	le
 8012458:	fb02 3909 	mlale	r9, r2, r9, r3
 801245c:	fb02 3606 	mlagt	r6, r2, r6, r3
 8012460:	3501      	adds	r5, #1
 8012462:	9011      	str	r0, [sp, #68]	@ 0x44
 8012464:	e7c3      	b.n	80123ee <_strtod_l+0x14e>
 8012466:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012468:	1c5a      	adds	r2, r3, #1
 801246a:	9211      	str	r2, [sp, #68]	@ 0x44
 801246c:	785a      	ldrb	r2, [r3, #1]
 801246e:	b375      	cbz	r5, 80124ce <_strtod_l+0x22e>
 8012470:	4607      	mov	r7, r0
 8012472:	462b      	mov	r3, r5
 8012474:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8012478:	2909      	cmp	r1, #9
 801247a:	d913      	bls.n	80124a4 <_strtod_l+0x204>
 801247c:	2101      	movs	r1, #1
 801247e:	9106      	str	r1, [sp, #24]
 8012480:	e7c6      	b.n	8012410 <_strtod_l+0x170>
 8012482:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012484:	1c5a      	adds	r2, r3, #1
 8012486:	9211      	str	r2, [sp, #68]	@ 0x44
 8012488:	785a      	ldrb	r2, [r3, #1]
 801248a:	3001      	adds	r0, #1
 801248c:	2a30      	cmp	r2, #48	@ 0x30
 801248e:	d0f8      	beq.n	8012482 <_strtod_l+0x1e2>
 8012490:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8012494:	2b08      	cmp	r3, #8
 8012496:	f200 8476 	bhi.w	8012d86 <_strtod_l+0xae6>
 801249a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801249c:	930a      	str	r3, [sp, #40]	@ 0x28
 801249e:	4607      	mov	r7, r0
 80124a0:	2000      	movs	r0, #0
 80124a2:	4603      	mov	r3, r0
 80124a4:	3a30      	subs	r2, #48	@ 0x30
 80124a6:	f100 0101 	add.w	r1, r0, #1
 80124aa:	d023      	beq.n	80124f4 <_strtod_l+0x254>
 80124ac:	440f      	add	r7, r1
 80124ae:	eb00 0c03 	add.w	ip, r0, r3
 80124b2:	4619      	mov	r1, r3
 80124b4:	240a      	movs	r4, #10
 80124b6:	4561      	cmp	r1, ip
 80124b8:	d10b      	bne.n	80124d2 <_strtod_l+0x232>
 80124ba:	1c5c      	adds	r4, r3, #1
 80124bc:	4403      	add	r3, r0
 80124be:	2b08      	cmp	r3, #8
 80124c0:	4404      	add	r4, r0
 80124c2:	dc11      	bgt.n	80124e8 <_strtod_l+0x248>
 80124c4:	230a      	movs	r3, #10
 80124c6:	fb03 2909 	mla	r9, r3, r9, r2
 80124ca:	2100      	movs	r1, #0
 80124cc:	e013      	b.n	80124f6 <_strtod_l+0x256>
 80124ce:	4628      	mov	r0, r5
 80124d0:	e7dc      	b.n	801248c <_strtod_l+0x1ec>
 80124d2:	2908      	cmp	r1, #8
 80124d4:	f101 0101 	add.w	r1, r1, #1
 80124d8:	dc02      	bgt.n	80124e0 <_strtod_l+0x240>
 80124da:	fb04 f909 	mul.w	r9, r4, r9
 80124de:	e7ea      	b.n	80124b6 <_strtod_l+0x216>
 80124e0:	2910      	cmp	r1, #16
 80124e2:	bfd8      	it	le
 80124e4:	4366      	mulle	r6, r4
 80124e6:	e7e6      	b.n	80124b6 <_strtod_l+0x216>
 80124e8:	2b0f      	cmp	r3, #15
 80124ea:	dcee      	bgt.n	80124ca <_strtod_l+0x22a>
 80124ec:	230a      	movs	r3, #10
 80124ee:	fb03 2606 	mla	r6, r3, r6, r2
 80124f2:	e7ea      	b.n	80124ca <_strtod_l+0x22a>
 80124f4:	461c      	mov	r4, r3
 80124f6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80124f8:	1c5a      	adds	r2, r3, #1
 80124fa:	9211      	str	r2, [sp, #68]	@ 0x44
 80124fc:	785a      	ldrb	r2, [r3, #1]
 80124fe:	4608      	mov	r0, r1
 8012500:	4623      	mov	r3, r4
 8012502:	e7b7      	b.n	8012474 <_strtod_l+0x1d4>
 8012504:	2301      	movs	r3, #1
 8012506:	2700      	movs	r7, #0
 8012508:	9306      	str	r3, [sp, #24]
 801250a:	e786      	b.n	801241a <_strtod_l+0x17a>
 801250c:	f04f 0e00 	mov.w	lr, #0
 8012510:	f108 0202 	add.w	r2, r8, #2
 8012514:	9211      	str	r2, [sp, #68]	@ 0x44
 8012516:	f898 2002 	ldrb.w	r2, [r8, #2]
 801251a:	e78f      	b.n	801243c <_strtod_l+0x19c>
 801251c:	f04f 0e01 	mov.w	lr, #1
 8012520:	e7f6      	b.n	8012510 <_strtod_l+0x270>
 8012522:	bf00      	nop
 8012524:	080143d8 	.word	0x080143d8
 8012528:	080143c0 	.word	0x080143c0
 801252c:	7ff00000 	.word	0x7ff00000
 8012530:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8012532:	1c54      	adds	r4, r2, #1
 8012534:	9411      	str	r4, [sp, #68]	@ 0x44
 8012536:	7852      	ldrb	r2, [r2, #1]
 8012538:	2a30      	cmp	r2, #48	@ 0x30
 801253a:	d0f9      	beq.n	8012530 <_strtod_l+0x290>
 801253c:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8012540:	2c08      	cmp	r4, #8
 8012542:	d881      	bhi.n	8012448 <_strtod_l+0x1a8>
 8012544:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8012548:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801254a:	9209      	str	r2, [sp, #36]	@ 0x24
 801254c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801254e:	1c51      	adds	r1, r2, #1
 8012550:	9111      	str	r1, [sp, #68]	@ 0x44
 8012552:	7852      	ldrb	r2, [r2, #1]
 8012554:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8012558:	2c09      	cmp	r4, #9
 801255a:	d938      	bls.n	80125ce <_strtod_l+0x32e>
 801255c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801255e:	1b0c      	subs	r4, r1, r4
 8012560:	2c08      	cmp	r4, #8
 8012562:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8012566:	dc02      	bgt.n	801256e <_strtod_l+0x2ce>
 8012568:	4564      	cmp	r4, ip
 801256a:	bfa8      	it	ge
 801256c:	4664      	movge	r4, ip
 801256e:	f1be 0f00 	cmp.w	lr, #0
 8012572:	d000      	beq.n	8012576 <_strtod_l+0x2d6>
 8012574:	4264      	negs	r4, r4
 8012576:	2b00      	cmp	r3, #0
 8012578:	d14e      	bne.n	8012618 <_strtod_l+0x378>
 801257a:	9b07      	ldr	r3, [sp, #28]
 801257c:	4318      	orrs	r0, r3
 801257e:	f47f aeca 	bne.w	8012316 <_strtod_l+0x76>
 8012582:	9b06      	ldr	r3, [sp, #24]
 8012584:	2b00      	cmp	r3, #0
 8012586:	f47f aee2 	bne.w	801234e <_strtod_l+0xae>
 801258a:	2a69      	cmp	r2, #105	@ 0x69
 801258c:	d027      	beq.n	80125de <_strtod_l+0x33e>
 801258e:	dc24      	bgt.n	80125da <_strtod_l+0x33a>
 8012590:	2a49      	cmp	r2, #73	@ 0x49
 8012592:	d024      	beq.n	80125de <_strtod_l+0x33e>
 8012594:	2a4e      	cmp	r2, #78	@ 0x4e
 8012596:	f47f aeda 	bne.w	801234e <_strtod_l+0xae>
 801259a:	4997      	ldr	r1, [pc, #604]	@ (80127f8 <_strtod_l+0x558>)
 801259c:	a811      	add	r0, sp, #68	@ 0x44
 801259e:	f001 fb35 	bl	8013c0c <__match>
 80125a2:	2800      	cmp	r0, #0
 80125a4:	f43f aed3 	beq.w	801234e <_strtod_l+0xae>
 80125a8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80125aa:	781b      	ldrb	r3, [r3, #0]
 80125ac:	2b28      	cmp	r3, #40	@ 0x28
 80125ae:	d12d      	bne.n	801260c <_strtod_l+0x36c>
 80125b0:	4992      	ldr	r1, [pc, #584]	@ (80127fc <_strtod_l+0x55c>)
 80125b2:	aa14      	add	r2, sp, #80	@ 0x50
 80125b4:	a811      	add	r0, sp, #68	@ 0x44
 80125b6:	f001 fb3d 	bl	8013c34 <__hexnan>
 80125ba:	2805      	cmp	r0, #5
 80125bc:	d126      	bne.n	801260c <_strtod_l+0x36c>
 80125be:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80125c0:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 80125c4:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80125c8:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80125cc:	e6a3      	b.n	8012316 <_strtod_l+0x76>
 80125ce:	240a      	movs	r4, #10
 80125d0:	fb04 2c0c 	mla	ip, r4, ip, r2
 80125d4:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 80125d8:	e7b8      	b.n	801254c <_strtod_l+0x2ac>
 80125da:	2a6e      	cmp	r2, #110	@ 0x6e
 80125dc:	e7db      	b.n	8012596 <_strtod_l+0x2f6>
 80125de:	4988      	ldr	r1, [pc, #544]	@ (8012800 <_strtod_l+0x560>)
 80125e0:	a811      	add	r0, sp, #68	@ 0x44
 80125e2:	f001 fb13 	bl	8013c0c <__match>
 80125e6:	2800      	cmp	r0, #0
 80125e8:	f43f aeb1 	beq.w	801234e <_strtod_l+0xae>
 80125ec:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80125ee:	4985      	ldr	r1, [pc, #532]	@ (8012804 <_strtod_l+0x564>)
 80125f0:	3b01      	subs	r3, #1
 80125f2:	a811      	add	r0, sp, #68	@ 0x44
 80125f4:	9311      	str	r3, [sp, #68]	@ 0x44
 80125f6:	f001 fb09 	bl	8013c0c <__match>
 80125fa:	b910      	cbnz	r0, 8012602 <_strtod_l+0x362>
 80125fc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80125fe:	3301      	adds	r3, #1
 8012600:	9311      	str	r3, [sp, #68]	@ 0x44
 8012602:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8012818 <_strtod_l+0x578>
 8012606:	f04f 0a00 	mov.w	sl, #0
 801260a:	e684      	b.n	8012316 <_strtod_l+0x76>
 801260c:	487e      	ldr	r0, [pc, #504]	@ (8012808 <_strtod_l+0x568>)
 801260e:	f001 f857 	bl	80136c0 <nan>
 8012612:	ec5b ab10 	vmov	sl, fp, d0
 8012616:	e67e      	b.n	8012316 <_strtod_l+0x76>
 8012618:	ee07 9a90 	vmov	s15, r9
 801261c:	1be2      	subs	r2, r4, r7
 801261e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012622:	2d00      	cmp	r5, #0
 8012624:	bf08      	it	eq
 8012626:	461d      	moveq	r5, r3
 8012628:	2b10      	cmp	r3, #16
 801262a:	9209      	str	r2, [sp, #36]	@ 0x24
 801262c:	461a      	mov	r2, r3
 801262e:	bfa8      	it	ge
 8012630:	2210      	movge	r2, #16
 8012632:	2b09      	cmp	r3, #9
 8012634:	ec5b ab17 	vmov	sl, fp, d7
 8012638:	dc15      	bgt.n	8012666 <_strtod_l+0x3c6>
 801263a:	1be1      	subs	r1, r4, r7
 801263c:	2900      	cmp	r1, #0
 801263e:	f43f ae6a 	beq.w	8012316 <_strtod_l+0x76>
 8012642:	eba4 0107 	sub.w	r1, r4, r7
 8012646:	dd72      	ble.n	801272e <_strtod_l+0x48e>
 8012648:	2916      	cmp	r1, #22
 801264a:	dc59      	bgt.n	8012700 <_strtod_l+0x460>
 801264c:	4b6f      	ldr	r3, [pc, #444]	@ (801280c <_strtod_l+0x56c>)
 801264e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012650:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012654:	ed93 7b00 	vldr	d7, [r3]
 8012658:	ec4b ab16 	vmov	d6, sl, fp
 801265c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012660:	ec5b ab17 	vmov	sl, fp, d7
 8012664:	e657      	b.n	8012316 <_strtod_l+0x76>
 8012666:	4969      	ldr	r1, [pc, #420]	@ (801280c <_strtod_l+0x56c>)
 8012668:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801266c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8012670:	ee06 6a90 	vmov	s13, r6
 8012674:	2b0f      	cmp	r3, #15
 8012676:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 801267a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801267e:	ec5b ab16 	vmov	sl, fp, d6
 8012682:	ddda      	ble.n	801263a <_strtod_l+0x39a>
 8012684:	1a9a      	subs	r2, r3, r2
 8012686:	1be1      	subs	r1, r4, r7
 8012688:	440a      	add	r2, r1
 801268a:	2a00      	cmp	r2, #0
 801268c:	f340 8094 	ble.w	80127b8 <_strtod_l+0x518>
 8012690:	f012 000f 	ands.w	r0, r2, #15
 8012694:	d00a      	beq.n	80126ac <_strtod_l+0x40c>
 8012696:	495d      	ldr	r1, [pc, #372]	@ (801280c <_strtod_l+0x56c>)
 8012698:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801269c:	ed91 7b00 	vldr	d7, [r1]
 80126a0:	ec4b ab16 	vmov	d6, sl, fp
 80126a4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80126a8:	ec5b ab17 	vmov	sl, fp, d7
 80126ac:	f032 020f 	bics.w	r2, r2, #15
 80126b0:	d073      	beq.n	801279a <_strtod_l+0x4fa>
 80126b2:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 80126b6:	dd47      	ble.n	8012748 <_strtod_l+0x4a8>
 80126b8:	2400      	movs	r4, #0
 80126ba:	4625      	mov	r5, r4
 80126bc:	9407      	str	r4, [sp, #28]
 80126be:	4626      	mov	r6, r4
 80126c0:	9a05      	ldr	r2, [sp, #20]
 80126c2:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8012818 <_strtod_l+0x578>
 80126c6:	2322      	movs	r3, #34	@ 0x22
 80126c8:	6013      	str	r3, [r2, #0]
 80126ca:	f04f 0a00 	mov.w	sl, #0
 80126ce:	9b07      	ldr	r3, [sp, #28]
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	f43f ae20 	beq.w	8012316 <_strtod_l+0x76>
 80126d6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80126d8:	9805      	ldr	r0, [sp, #20]
 80126da:	f7ff f955 	bl	8011988 <_Bfree>
 80126de:	9805      	ldr	r0, [sp, #20]
 80126e0:	4631      	mov	r1, r6
 80126e2:	f7ff f951 	bl	8011988 <_Bfree>
 80126e6:	9805      	ldr	r0, [sp, #20]
 80126e8:	4629      	mov	r1, r5
 80126ea:	f7ff f94d 	bl	8011988 <_Bfree>
 80126ee:	9907      	ldr	r1, [sp, #28]
 80126f0:	9805      	ldr	r0, [sp, #20]
 80126f2:	f7ff f949 	bl	8011988 <_Bfree>
 80126f6:	9805      	ldr	r0, [sp, #20]
 80126f8:	4621      	mov	r1, r4
 80126fa:	f7ff f945 	bl	8011988 <_Bfree>
 80126fe:	e60a      	b.n	8012316 <_strtod_l+0x76>
 8012700:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8012704:	1be0      	subs	r0, r4, r7
 8012706:	4281      	cmp	r1, r0
 8012708:	dbbc      	blt.n	8012684 <_strtod_l+0x3e4>
 801270a:	4a40      	ldr	r2, [pc, #256]	@ (801280c <_strtod_l+0x56c>)
 801270c:	f1c3 030f 	rsb	r3, r3, #15
 8012710:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8012714:	ed91 7b00 	vldr	d7, [r1]
 8012718:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801271a:	ec4b ab16 	vmov	d6, sl, fp
 801271e:	1acb      	subs	r3, r1, r3
 8012720:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8012724:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012728:	ed92 6b00 	vldr	d6, [r2]
 801272c:	e796      	b.n	801265c <_strtod_l+0x3bc>
 801272e:	3116      	adds	r1, #22
 8012730:	dba8      	blt.n	8012684 <_strtod_l+0x3e4>
 8012732:	4b36      	ldr	r3, [pc, #216]	@ (801280c <_strtod_l+0x56c>)
 8012734:	1b3c      	subs	r4, r7, r4
 8012736:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801273a:	ed94 7b00 	vldr	d7, [r4]
 801273e:	ec4b ab16 	vmov	d6, sl, fp
 8012742:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8012746:	e78b      	b.n	8012660 <_strtod_l+0x3c0>
 8012748:	2000      	movs	r0, #0
 801274a:	ec4b ab17 	vmov	d7, sl, fp
 801274e:	4e30      	ldr	r6, [pc, #192]	@ (8012810 <_strtod_l+0x570>)
 8012750:	1112      	asrs	r2, r2, #4
 8012752:	4601      	mov	r1, r0
 8012754:	2a01      	cmp	r2, #1
 8012756:	dc23      	bgt.n	80127a0 <_strtod_l+0x500>
 8012758:	b108      	cbz	r0, 801275e <_strtod_l+0x4be>
 801275a:	ec5b ab17 	vmov	sl, fp, d7
 801275e:	4a2c      	ldr	r2, [pc, #176]	@ (8012810 <_strtod_l+0x570>)
 8012760:	482c      	ldr	r0, [pc, #176]	@ (8012814 <_strtod_l+0x574>)
 8012762:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8012766:	ed92 7b00 	vldr	d7, [r2]
 801276a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801276e:	ec4b ab16 	vmov	d6, sl, fp
 8012772:	4a29      	ldr	r2, [pc, #164]	@ (8012818 <_strtod_l+0x578>)
 8012774:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012778:	ee17 1a90 	vmov	r1, s15
 801277c:	400a      	ands	r2, r1
 801277e:	4282      	cmp	r2, r0
 8012780:	ec5b ab17 	vmov	sl, fp, d7
 8012784:	d898      	bhi.n	80126b8 <_strtod_l+0x418>
 8012786:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 801278a:	4282      	cmp	r2, r0
 801278c:	bf86      	itte	hi
 801278e:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 801281c <_strtod_l+0x57c>
 8012792:	f04f 3aff 	movhi.w	sl, #4294967295
 8012796:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 801279a:	2200      	movs	r2, #0
 801279c:	9206      	str	r2, [sp, #24]
 801279e:	e076      	b.n	801288e <_strtod_l+0x5ee>
 80127a0:	f012 0f01 	tst.w	r2, #1
 80127a4:	d004      	beq.n	80127b0 <_strtod_l+0x510>
 80127a6:	ed96 6b00 	vldr	d6, [r6]
 80127aa:	2001      	movs	r0, #1
 80127ac:	ee27 7b06 	vmul.f64	d7, d7, d6
 80127b0:	3101      	adds	r1, #1
 80127b2:	1052      	asrs	r2, r2, #1
 80127b4:	3608      	adds	r6, #8
 80127b6:	e7cd      	b.n	8012754 <_strtod_l+0x4b4>
 80127b8:	d0ef      	beq.n	801279a <_strtod_l+0x4fa>
 80127ba:	4252      	negs	r2, r2
 80127bc:	f012 000f 	ands.w	r0, r2, #15
 80127c0:	d00a      	beq.n	80127d8 <_strtod_l+0x538>
 80127c2:	4912      	ldr	r1, [pc, #72]	@ (801280c <_strtod_l+0x56c>)
 80127c4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80127c8:	ed91 7b00 	vldr	d7, [r1]
 80127cc:	ec4b ab16 	vmov	d6, sl, fp
 80127d0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80127d4:	ec5b ab17 	vmov	sl, fp, d7
 80127d8:	1112      	asrs	r2, r2, #4
 80127da:	d0de      	beq.n	801279a <_strtod_l+0x4fa>
 80127dc:	2a1f      	cmp	r2, #31
 80127de:	dd1f      	ble.n	8012820 <_strtod_l+0x580>
 80127e0:	2400      	movs	r4, #0
 80127e2:	4625      	mov	r5, r4
 80127e4:	9407      	str	r4, [sp, #28]
 80127e6:	4626      	mov	r6, r4
 80127e8:	9a05      	ldr	r2, [sp, #20]
 80127ea:	2322      	movs	r3, #34	@ 0x22
 80127ec:	f04f 0a00 	mov.w	sl, #0
 80127f0:	f04f 0b00 	mov.w	fp, #0
 80127f4:	6013      	str	r3, [r2, #0]
 80127f6:	e76a      	b.n	80126ce <_strtod_l+0x42e>
 80127f8:	080141ad 	.word	0x080141ad
 80127fc:	080143c4 	.word	0x080143c4
 8012800:	080141a5 	.word	0x080141a5
 8012804:	080141dc 	.word	0x080141dc
 8012808:	0801419f 	.word	0x0801419f
 801280c:	080142f8 	.word	0x080142f8
 8012810:	080142d0 	.word	0x080142d0
 8012814:	7ca00000 	.word	0x7ca00000
 8012818:	7ff00000 	.word	0x7ff00000
 801281c:	7fefffff 	.word	0x7fefffff
 8012820:	f012 0110 	ands.w	r1, r2, #16
 8012824:	bf18      	it	ne
 8012826:	216a      	movne	r1, #106	@ 0x6a
 8012828:	9106      	str	r1, [sp, #24]
 801282a:	ec4b ab17 	vmov	d7, sl, fp
 801282e:	49b0      	ldr	r1, [pc, #704]	@ (8012af0 <_strtod_l+0x850>)
 8012830:	2000      	movs	r0, #0
 8012832:	07d6      	lsls	r6, r2, #31
 8012834:	d504      	bpl.n	8012840 <_strtod_l+0x5a0>
 8012836:	ed91 6b00 	vldr	d6, [r1]
 801283a:	2001      	movs	r0, #1
 801283c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012840:	1052      	asrs	r2, r2, #1
 8012842:	f101 0108 	add.w	r1, r1, #8
 8012846:	d1f4      	bne.n	8012832 <_strtod_l+0x592>
 8012848:	b108      	cbz	r0, 801284e <_strtod_l+0x5ae>
 801284a:	ec5b ab17 	vmov	sl, fp, d7
 801284e:	9a06      	ldr	r2, [sp, #24]
 8012850:	b1b2      	cbz	r2, 8012880 <_strtod_l+0x5e0>
 8012852:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8012856:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 801285a:	2a00      	cmp	r2, #0
 801285c:	4658      	mov	r0, fp
 801285e:	dd0f      	ble.n	8012880 <_strtod_l+0x5e0>
 8012860:	2a1f      	cmp	r2, #31
 8012862:	dd55      	ble.n	8012910 <_strtod_l+0x670>
 8012864:	2a34      	cmp	r2, #52	@ 0x34
 8012866:	bfde      	ittt	le
 8012868:	f04f 32ff 	movle.w	r2, #4294967295
 801286c:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8012870:	408a      	lslle	r2, r1
 8012872:	f04f 0a00 	mov.w	sl, #0
 8012876:	bfcc      	ite	gt
 8012878:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 801287c:	ea02 0b00 	andle.w	fp, r2, r0
 8012880:	ec4b ab17 	vmov	d7, sl, fp
 8012884:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801288c:	d0a8      	beq.n	80127e0 <_strtod_l+0x540>
 801288e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012890:	9805      	ldr	r0, [sp, #20]
 8012892:	f8cd 9000 	str.w	r9, [sp]
 8012896:	462a      	mov	r2, r5
 8012898:	f7ff f8de 	bl	8011a58 <__s2b>
 801289c:	9007      	str	r0, [sp, #28]
 801289e:	2800      	cmp	r0, #0
 80128a0:	f43f af0a 	beq.w	80126b8 <_strtod_l+0x418>
 80128a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80128a6:	1b3f      	subs	r7, r7, r4
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	bfb4      	ite	lt
 80128ac:	463b      	movlt	r3, r7
 80128ae:	2300      	movge	r3, #0
 80128b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80128b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80128b4:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8012ae0 <_strtod_l+0x840>
 80128b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80128bc:	2400      	movs	r4, #0
 80128be:	930d      	str	r3, [sp, #52]	@ 0x34
 80128c0:	4625      	mov	r5, r4
 80128c2:	9b07      	ldr	r3, [sp, #28]
 80128c4:	9805      	ldr	r0, [sp, #20]
 80128c6:	6859      	ldr	r1, [r3, #4]
 80128c8:	f7ff f81e 	bl	8011908 <_Balloc>
 80128cc:	4606      	mov	r6, r0
 80128ce:	2800      	cmp	r0, #0
 80128d0:	f43f aef6 	beq.w	80126c0 <_strtod_l+0x420>
 80128d4:	9b07      	ldr	r3, [sp, #28]
 80128d6:	691a      	ldr	r2, [r3, #16]
 80128d8:	ec4b ab19 	vmov	d9, sl, fp
 80128dc:	3202      	adds	r2, #2
 80128de:	f103 010c 	add.w	r1, r3, #12
 80128e2:	0092      	lsls	r2, r2, #2
 80128e4:	300c      	adds	r0, #12
 80128e6:	f7fe f9d0 	bl	8010c8a <memcpy>
 80128ea:	eeb0 0b49 	vmov.f64	d0, d9
 80128ee:	9805      	ldr	r0, [sp, #20]
 80128f0:	aa14      	add	r2, sp, #80	@ 0x50
 80128f2:	a913      	add	r1, sp, #76	@ 0x4c
 80128f4:	f7ff fbec 	bl	80120d0 <__d2b>
 80128f8:	9012      	str	r0, [sp, #72]	@ 0x48
 80128fa:	2800      	cmp	r0, #0
 80128fc:	f43f aee0 	beq.w	80126c0 <_strtod_l+0x420>
 8012900:	9805      	ldr	r0, [sp, #20]
 8012902:	2101      	movs	r1, #1
 8012904:	f7ff f93e 	bl	8011b84 <__i2b>
 8012908:	4605      	mov	r5, r0
 801290a:	b940      	cbnz	r0, 801291e <_strtod_l+0x67e>
 801290c:	2500      	movs	r5, #0
 801290e:	e6d7      	b.n	80126c0 <_strtod_l+0x420>
 8012910:	f04f 31ff 	mov.w	r1, #4294967295
 8012914:	fa01 f202 	lsl.w	r2, r1, r2
 8012918:	ea02 0a0a 	and.w	sl, r2, sl
 801291c:	e7b0      	b.n	8012880 <_strtod_l+0x5e0>
 801291e:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8012920:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8012922:	2f00      	cmp	r7, #0
 8012924:	bfab      	itete	ge
 8012926:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8012928:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 801292a:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 801292e:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8012932:	bfac      	ite	ge
 8012934:	eb07 0903 	addge.w	r9, r7, r3
 8012938:	eba3 0807 	sublt.w	r8, r3, r7
 801293c:	9b06      	ldr	r3, [sp, #24]
 801293e:	1aff      	subs	r7, r7, r3
 8012940:	4417      	add	r7, r2
 8012942:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8012946:	4a6b      	ldr	r2, [pc, #428]	@ (8012af4 <_strtod_l+0x854>)
 8012948:	3f01      	subs	r7, #1
 801294a:	4297      	cmp	r7, r2
 801294c:	da51      	bge.n	80129f2 <_strtod_l+0x752>
 801294e:	1bd1      	subs	r1, r2, r7
 8012950:	291f      	cmp	r1, #31
 8012952:	eba3 0301 	sub.w	r3, r3, r1
 8012956:	f04f 0201 	mov.w	r2, #1
 801295a:	dc3e      	bgt.n	80129da <_strtod_l+0x73a>
 801295c:	408a      	lsls	r2, r1
 801295e:	920c      	str	r2, [sp, #48]	@ 0x30
 8012960:	2200      	movs	r2, #0
 8012962:	920b      	str	r2, [sp, #44]	@ 0x2c
 8012964:	eb09 0703 	add.w	r7, r9, r3
 8012968:	4498      	add	r8, r3
 801296a:	9b06      	ldr	r3, [sp, #24]
 801296c:	45b9      	cmp	r9, r7
 801296e:	4498      	add	r8, r3
 8012970:	464b      	mov	r3, r9
 8012972:	bfa8      	it	ge
 8012974:	463b      	movge	r3, r7
 8012976:	4543      	cmp	r3, r8
 8012978:	bfa8      	it	ge
 801297a:	4643      	movge	r3, r8
 801297c:	2b00      	cmp	r3, #0
 801297e:	bfc2      	ittt	gt
 8012980:	1aff      	subgt	r7, r7, r3
 8012982:	eba8 0803 	subgt.w	r8, r8, r3
 8012986:	eba9 0903 	subgt.w	r9, r9, r3
 801298a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801298c:	2b00      	cmp	r3, #0
 801298e:	dd16      	ble.n	80129be <_strtod_l+0x71e>
 8012990:	4629      	mov	r1, r5
 8012992:	9805      	ldr	r0, [sp, #20]
 8012994:	461a      	mov	r2, r3
 8012996:	f7ff f9b5 	bl	8011d04 <__pow5mult>
 801299a:	4605      	mov	r5, r0
 801299c:	2800      	cmp	r0, #0
 801299e:	d0b5      	beq.n	801290c <_strtod_l+0x66c>
 80129a0:	4601      	mov	r1, r0
 80129a2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80129a4:	9805      	ldr	r0, [sp, #20]
 80129a6:	f7ff f903 	bl	8011bb0 <__multiply>
 80129aa:	900f      	str	r0, [sp, #60]	@ 0x3c
 80129ac:	2800      	cmp	r0, #0
 80129ae:	f43f ae87 	beq.w	80126c0 <_strtod_l+0x420>
 80129b2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80129b4:	9805      	ldr	r0, [sp, #20]
 80129b6:	f7fe ffe7 	bl	8011988 <_Bfree>
 80129ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80129bc:	9312      	str	r3, [sp, #72]	@ 0x48
 80129be:	2f00      	cmp	r7, #0
 80129c0:	dc1b      	bgt.n	80129fa <_strtod_l+0x75a>
 80129c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	dd21      	ble.n	8012a0c <_strtod_l+0x76c>
 80129c8:	4631      	mov	r1, r6
 80129ca:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80129cc:	9805      	ldr	r0, [sp, #20]
 80129ce:	f7ff f999 	bl	8011d04 <__pow5mult>
 80129d2:	4606      	mov	r6, r0
 80129d4:	b9d0      	cbnz	r0, 8012a0c <_strtod_l+0x76c>
 80129d6:	2600      	movs	r6, #0
 80129d8:	e672      	b.n	80126c0 <_strtod_l+0x420>
 80129da:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 80129de:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 80129e2:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 80129e6:	37e2      	adds	r7, #226	@ 0xe2
 80129e8:	fa02 f107 	lsl.w	r1, r2, r7
 80129ec:	910b      	str	r1, [sp, #44]	@ 0x2c
 80129ee:	920c      	str	r2, [sp, #48]	@ 0x30
 80129f0:	e7b8      	b.n	8012964 <_strtod_l+0x6c4>
 80129f2:	2200      	movs	r2, #0
 80129f4:	920b      	str	r2, [sp, #44]	@ 0x2c
 80129f6:	2201      	movs	r2, #1
 80129f8:	e7f9      	b.n	80129ee <_strtod_l+0x74e>
 80129fa:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80129fc:	9805      	ldr	r0, [sp, #20]
 80129fe:	463a      	mov	r2, r7
 8012a00:	f7ff f9da 	bl	8011db8 <__lshift>
 8012a04:	9012      	str	r0, [sp, #72]	@ 0x48
 8012a06:	2800      	cmp	r0, #0
 8012a08:	d1db      	bne.n	80129c2 <_strtod_l+0x722>
 8012a0a:	e659      	b.n	80126c0 <_strtod_l+0x420>
 8012a0c:	f1b8 0f00 	cmp.w	r8, #0
 8012a10:	dd07      	ble.n	8012a22 <_strtod_l+0x782>
 8012a12:	4631      	mov	r1, r6
 8012a14:	9805      	ldr	r0, [sp, #20]
 8012a16:	4642      	mov	r2, r8
 8012a18:	f7ff f9ce 	bl	8011db8 <__lshift>
 8012a1c:	4606      	mov	r6, r0
 8012a1e:	2800      	cmp	r0, #0
 8012a20:	d0d9      	beq.n	80129d6 <_strtod_l+0x736>
 8012a22:	f1b9 0f00 	cmp.w	r9, #0
 8012a26:	dd08      	ble.n	8012a3a <_strtod_l+0x79a>
 8012a28:	4629      	mov	r1, r5
 8012a2a:	9805      	ldr	r0, [sp, #20]
 8012a2c:	464a      	mov	r2, r9
 8012a2e:	f7ff f9c3 	bl	8011db8 <__lshift>
 8012a32:	4605      	mov	r5, r0
 8012a34:	2800      	cmp	r0, #0
 8012a36:	f43f ae43 	beq.w	80126c0 <_strtod_l+0x420>
 8012a3a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8012a3c:	9805      	ldr	r0, [sp, #20]
 8012a3e:	4632      	mov	r2, r6
 8012a40:	f7ff fa42 	bl	8011ec8 <__mdiff>
 8012a44:	4604      	mov	r4, r0
 8012a46:	2800      	cmp	r0, #0
 8012a48:	f43f ae3a 	beq.w	80126c0 <_strtod_l+0x420>
 8012a4c:	2300      	movs	r3, #0
 8012a4e:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8012a52:	60c3      	str	r3, [r0, #12]
 8012a54:	4629      	mov	r1, r5
 8012a56:	f7ff fa1b 	bl	8011e90 <__mcmp>
 8012a5a:	2800      	cmp	r0, #0
 8012a5c:	da4e      	bge.n	8012afc <_strtod_l+0x85c>
 8012a5e:	ea58 080a 	orrs.w	r8, r8, sl
 8012a62:	d174      	bne.n	8012b4e <_strtod_l+0x8ae>
 8012a64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d170      	bne.n	8012b4e <_strtod_l+0x8ae>
 8012a6c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012a70:	0d1b      	lsrs	r3, r3, #20
 8012a72:	051b      	lsls	r3, r3, #20
 8012a74:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8012a78:	d969      	bls.n	8012b4e <_strtod_l+0x8ae>
 8012a7a:	6963      	ldr	r3, [r4, #20]
 8012a7c:	b913      	cbnz	r3, 8012a84 <_strtod_l+0x7e4>
 8012a7e:	6923      	ldr	r3, [r4, #16]
 8012a80:	2b01      	cmp	r3, #1
 8012a82:	dd64      	ble.n	8012b4e <_strtod_l+0x8ae>
 8012a84:	4621      	mov	r1, r4
 8012a86:	2201      	movs	r2, #1
 8012a88:	9805      	ldr	r0, [sp, #20]
 8012a8a:	f7ff f995 	bl	8011db8 <__lshift>
 8012a8e:	4629      	mov	r1, r5
 8012a90:	4604      	mov	r4, r0
 8012a92:	f7ff f9fd 	bl	8011e90 <__mcmp>
 8012a96:	2800      	cmp	r0, #0
 8012a98:	dd59      	ble.n	8012b4e <_strtod_l+0x8ae>
 8012a9a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012a9e:	9a06      	ldr	r2, [sp, #24]
 8012aa0:	0d1b      	lsrs	r3, r3, #20
 8012aa2:	051b      	lsls	r3, r3, #20
 8012aa4:	2a00      	cmp	r2, #0
 8012aa6:	d070      	beq.n	8012b8a <_strtod_l+0x8ea>
 8012aa8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8012aac:	d86d      	bhi.n	8012b8a <_strtod_l+0x8ea>
 8012aae:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8012ab2:	f67f ae99 	bls.w	80127e8 <_strtod_l+0x548>
 8012ab6:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8012ae8 <_strtod_l+0x848>
 8012aba:	ec4b ab16 	vmov	d6, sl, fp
 8012abe:	4b0e      	ldr	r3, [pc, #56]	@ (8012af8 <_strtod_l+0x858>)
 8012ac0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8012ac4:	ee17 2a90 	vmov	r2, s15
 8012ac8:	4013      	ands	r3, r2
 8012aca:	ec5b ab17 	vmov	sl, fp, d7
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	f47f ae01 	bne.w	80126d6 <_strtod_l+0x436>
 8012ad4:	9a05      	ldr	r2, [sp, #20]
 8012ad6:	2322      	movs	r3, #34	@ 0x22
 8012ad8:	6013      	str	r3, [r2, #0]
 8012ada:	e5fc      	b.n	80126d6 <_strtod_l+0x436>
 8012adc:	f3af 8000 	nop.w
 8012ae0:	ffc00000 	.word	0xffc00000
 8012ae4:	41dfffff 	.word	0x41dfffff
 8012ae8:	00000000 	.word	0x00000000
 8012aec:	39500000 	.word	0x39500000
 8012af0:	080143f0 	.word	0x080143f0
 8012af4:	fffffc02 	.word	0xfffffc02
 8012af8:	7ff00000 	.word	0x7ff00000
 8012afc:	46d9      	mov	r9, fp
 8012afe:	d15d      	bne.n	8012bbc <_strtod_l+0x91c>
 8012b00:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012b04:	f1b8 0f00 	cmp.w	r8, #0
 8012b08:	d02a      	beq.n	8012b60 <_strtod_l+0x8c0>
 8012b0a:	4aab      	ldr	r2, [pc, #684]	@ (8012db8 <_strtod_l+0xb18>)
 8012b0c:	4293      	cmp	r3, r2
 8012b0e:	d12a      	bne.n	8012b66 <_strtod_l+0x8c6>
 8012b10:	9b06      	ldr	r3, [sp, #24]
 8012b12:	4652      	mov	r2, sl
 8012b14:	b1fb      	cbz	r3, 8012b56 <_strtod_l+0x8b6>
 8012b16:	4ba9      	ldr	r3, [pc, #676]	@ (8012dbc <_strtod_l+0xb1c>)
 8012b18:	ea0b 0303 	and.w	r3, fp, r3
 8012b1c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8012b20:	f04f 31ff 	mov.w	r1, #4294967295
 8012b24:	d81a      	bhi.n	8012b5c <_strtod_l+0x8bc>
 8012b26:	0d1b      	lsrs	r3, r3, #20
 8012b28:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8012b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8012b30:	429a      	cmp	r2, r3
 8012b32:	d118      	bne.n	8012b66 <_strtod_l+0x8c6>
 8012b34:	4ba2      	ldr	r3, [pc, #648]	@ (8012dc0 <_strtod_l+0xb20>)
 8012b36:	4599      	cmp	r9, r3
 8012b38:	d102      	bne.n	8012b40 <_strtod_l+0x8a0>
 8012b3a:	3201      	adds	r2, #1
 8012b3c:	f43f adc0 	beq.w	80126c0 <_strtod_l+0x420>
 8012b40:	4b9e      	ldr	r3, [pc, #632]	@ (8012dbc <_strtod_l+0xb1c>)
 8012b42:	ea09 0303 	and.w	r3, r9, r3
 8012b46:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8012b4a:	f04f 0a00 	mov.w	sl, #0
 8012b4e:	9b06      	ldr	r3, [sp, #24]
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d1b0      	bne.n	8012ab6 <_strtod_l+0x816>
 8012b54:	e5bf      	b.n	80126d6 <_strtod_l+0x436>
 8012b56:	f04f 33ff 	mov.w	r3, #4294967295
 8012b5a:	e7e9      	b.n	8012b30 <_strtod_l+0x890>
 8012b5c:	460b      	mov	r3, r1
 8012b5e:	e7e7      	b.n	8012b30 <_strtod_l+0x890>
 8012b60:	ea53 030a 	orrs.w	r3, r3, sl
 8012b64:	d099      	beq.n	8012a9a <_strtod_l+0x7fa>
 8012b66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012b68:	b1c3      	cbz	r3, 8012b9c <_strtod_l+0x8fc>
 8012b6a:	ea13 0f09 	tst.w	r3, r9
 8012b6e:	d0ee      	beq.n	8012b4e <_strtod_l+0x8ae>
 8012b70:	9a06      	ldr	r2, [sp, #24]
 8012b72:	4650      	mov	r0, sl
 8012b74:	4659      	mov	r1, fp
 8012b76:	f1b8 0f00 	cmp.w	r8, #0
 8012b7a:	d013      	beq.n	8012ba4 <_strtod_l+0x904>
 8012b7c:	f7ff fb73 	bl	8012266 <sulp>
 8012b80:	ee39 7b00 	vadd.f64	d7, d9, d0
 8012b84:	ec5b ab17 	vmov	sl, fp, d7
 8012b88:	e7e1      	b.n	8012b4e <_strtod_l+0x8ae>
 8012b8a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8012b8e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8012b92:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8012b96:	f04f 3aff 	mov.w	sl, #4294967295
 8012b9a:	e7d8      	b.n	8012b4e <_strtod_l+0x8ae>
 8012b9c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012b9e:	ea13 0f0a 	tst.w	r3, sl
 8012ba2:	e7e4      	b.n	8012b6e <_strtod_l+0x8ce>
 8012ba4:	f7ff fb5f 	bl	8012266 <sulp>
 8012ba8:	ee39 0b40 	vsub.f64	d0, d9, d0
 8012bac:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8012bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bb4:	ec5b ab10 	vmov	sl, fp, d0
 8012bb8:	d1c9      	bne.n	8012b4e <_strtod_l+0x8ae>
 8012bba:	e615      	b.n	80127e8 <_strtod_l+0x548>
 8012bbc:	4629      	mov	r1, r5
 8012bbe:	4620      	mov	r0, r4
 8012bc0:	f7ff fade 	bl	8012180 <__ratio>
 8012bc4:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8012bc8:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8012bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bd0:	d85d      	bhi.n	8012c8e <_strtod_l+0x9ee>
 8012bd2:	f1b8 0f00 	cmp.w	r8, #0
 8012bd6:	d164      	bne.n	8012ca2 <_strtod_l+0xa02>
 8012bd8:	f1ba 0f00 	cmp.w	sl, #0
 8012bdc:	d14b      	bne.n	8012c76 <_strtod_l+0x9d6>
 8012bde:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012be2:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d160      	bne.n	8012cac <_strtod_l+0xa0c>
 8012bea:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8012bee:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8012bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bf6:	d401      	bmi.n	8012bfc <_strtod_l+0x95c>
 8012bf8:	ee20 8b08 	vmul.f64	d8, d0, d8
 8012bfc:	eeb1 ab48 	vneg.f64	d10, d8
 8012c00:	486e      	ldr	r0, [pc, #440]	@ (8012dbc <_strtod_l+0xb1c>)
 8012c02:	4970      	ldr	r1, [pc, #448]	@ (8012dc4 <_strtod_l+0xb24>)
 8012c04:	ea09 0700 	and.w	r7, r9, r0
 8012c08:	428f      	cmp	r7, r1
 8012c0a:	ec53 2b1a 	vmov	r2, r3, d10
 8012c0e:	d17d      	bne.n	8012d0c <_strtod_l+0xa6c>
 8012c10:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8012c14:	ec4b ab1c 	vmov	d12, sl, fp
 8012c18:	eeb0 0b4c 	vmov.f64	d0, d12
 8012c1c:	f7ff f9e8 	bl	8011ff0 <__ulp>
 8012c20:	4866      	ldr	r0, [pc, #408]	@ (8012dbc <_strtod_l+0xb1c>)
 8012c22:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8012c26:	ee1c 3a90 	vmov	r3, s25
 8012c2a:	4a67      	ldr	r2, [pc, #412]	@ (8012dc8 <_strtod_l+0xb28>)
 8012c2c:	ea03 0100 	and.w	r1, r3, r0
 8012c30:	4291      	cmp	r1, r2
 8012c32:	ec5b ab1c 	vmov	sl, fp, d12
 8012c36:	d93c      	bls.n	8012cb2 <_strtod_l+0xa12>
 8012c38:	ee19 2a90 	vmov	r2, s19
 8012c3c:	4b60      	ldr	r3, [pc, #384]	@ (8012dc0 <_strtod_l+0xb20>)
 8012c3e:	429a      	cmp	r2, r3
 8012c40:	d104      	bne.n	8012c4c <_strtod_l+0x9ac>
 8012c42:	ee19 3a10 	vmov	r3, s18
 8012c46:	3301      	adds	r3, #1
 8012c48:	f43f ad3a 	beq.w	80126c0 <_strtod_l+0x420>
 8012c4c:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8012dc0 <_strtod_l+0xb20>
 8012c50:	f04f 3aff 	mov.w	sl, #4294967295
 8012c54:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8012c56:	9805      	ldr	r0, [sp, #20]
 8012c58:	f7fe fe96 	bl	8011988 <_Bfree>
 8012c5c:	9805      	ldr	r0, [sp, #20]
 8012c5e:	4631      	mov	r1, r6
 8012c60:	f7fe fe92 	bl	8011988 <_Bfree>
 8012c64:	9805      	ldr	r0, [sp, #20]
 8012c66:	4629      	mov	r1, r5
 8012c68:	f7fe fe8e 	bl	8011988 <_Bfree>
 8012c6c:	9805      	ldr	r0, [sp, #20]
 8012c6e:	4621      	mov	r1, r4
 8012c70:	f7fe fe8a 	bl	8011988 <_Bfree>
 8012c74:	e625      	b.n	80128c2 <_strtod_l+0x622>
 8012c76:	f1ba 0f01 	cmp.w	sl, #1
 8012c7a:	d103      	bne.n	8012c84 <_strtod_l+0x9e4>
 8012c7c:	f1bb 0f00 	cmp.w	fp, #0
 8012c80:	f43f adb2 	beq.w	80127e8 <_strtod_l+0x548>
 8012c84:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8012c88:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8012c8c:	e7b8      	b.n	8012c00 <_strtod_l+0x960>
 8012c8e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8012c92:	ee20 8b08 	vmul.f64	d8, d0, d8
 8012c96:	f1b8 0f00 	cmp.w	r8, #0
 8012c9a:	d0af      	beq.n	8012bfc <_strtod_l+0x95c>
 8012c9c:	eeb0 ab48 	vmov.f64	d10, d8
 8012ca0:	e7ae      	b.n	8012c00 <_strtod_l+0x960>
 8012ca2:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8012ca6:	eeb0 8b4a 	vmov.f64	d8, d10
 8012caa:	e7a9      	b.n	8012c00 <_strtod_l+0x960>
 8012cac:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8012cb0:	e7a6      	b.n	8012c00 <_strtod_l+0x960>
 8012cb2:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8012cb6:	9b06      	ldr	r3, [sp, #24]
 8012cb8:	46d9      	mov	r9, fp
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d1ca      	bne.n	8012c54 <_strtod_l+0x9b4>
 8012cbe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012cc2:	0d1b      	lsrs	r3, r3, #20
 8012cc4:	051b      	lsls	r3, r3, #20
 8012cc6:	429f      	cmp	r7, r3
 8012cc8:	d1c4      	bne.n	8012c54 <_strtod_l+0x9b4>
 8012cca:	ec51 0b18 	vmov	r0, r1, d8
 8012cce:	f7ed fd3b 	bl	8000748 <__aeabi_d2lz>
 8012cd2:	f7ed fcf3 	bl	80006bc <__aeabi_l2d>
 8012cd6:	f3cb 0913 	ubfx	r9, fp, #0, #20
 8012cda:	ec41 0b17 	vmov	d7, r0, r1
 8012cde:	ea49 090a 	orr.w	r9, r9, sl
 8012ce2:	ea59 0908 	orrs.w	r9, r9, r8
 8012ce6:	ee38 8b47 	vsub.f64	d8, d8, d7
 8012cea:	d03c      	beq.n	8012d66 <_strtod_l+0xac6>
 8012cec:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8012da0 <_strtod_l+0xb00>
 8012cf0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8012cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cf8:	f53f aced 	bmi.w	80126d6 <_strtod_l+0x436>
 8012cfc:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8012da8 <_strtod_l+0xb08>
 8012d00:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8012d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d08:	dda4      	ble.n	8012c54 <_strtod_l+0x9b4>
 8012d0a:	e4e4      	b.n	80126d6 <_strtod_l+0x436>
 8012d0c:	9906      	ldr	r1, [sp, #24]
 8012d0e:	b1e1      	cbz	r1, 8012d4a <_strtod_l+0xaaa>
 8012d10:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8012d14:	d819      	bhi.n	8012d4a <_strtod_l+0xaaa>
 8012d16:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8012d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d1e:	d811      	bhi.n	8012d44 <_strtod_l+0xaa4>
 8012d20:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8012d24:	ee18 3a10 	vmov	r3, s16
 8012d28:	2b01      	cmp	r3, #1
 8012d2a:	bf38      	it	cc
 8012d2c:	2301      	movcc	r3, #1
 8012d2e:	ee08 3a10 	vmov	s16, r3
 8012d32:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8012d36:	f1b8 0f00 	cmp.w	r8, #0
 8012d3a:	d111      	bne.n	8012d60 <_strtod_l+0xac0>
 8012d3c:	eeb1 7b48 	vneg.f64	d7, d8
 8012d40:	ec53 2b17 	vmov	r2, r3, d7
 8012d44:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8012d48:	1bcb      	subs	r3, r1, r7
 8012d4a:	eeb0 0b49 	vmov.f64	d0, d9
 8012d4e:	ec43 2b1a 	vmov	d10, r2, r3
 8012d52:	f7ff f94d 	bl	8011ff0 <__ulp>
 8012d56:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8012d5a:	ec5b ab19 	vmov	sl, fp, d9
 8012d5e:	e7aa      	b.n	8012cb6 <_strtod_l+0xa16>
 8012d60:	eeb0 7b48 	vmov.f64	d7, d8
 8012d64:	e7ec      	b.n	8012d40 <_strtod_l+0xaa0>
 8012d66:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8012db0 <_strtod_l+0xb10>
 8012d6a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8012d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d72:	f57f af6f 	bpl.w	8012c54 <_strtod_l+0x9b4>
 8012d76:	e4ae      	b.n	80126d6 <_strtod_l+0x436>
 8012d78:	2300      	movs	r3, #0
 8012d7a:	9308      	str	r3, [sp, #32]
 8012d7c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012d7e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012d80:	6013      	str	r3, [r2, #0]
 8012d82:	f7ff bacc 	b.w	801231e <_strtod_l+0x7e>
 8012d86:	2a65      	cmp	r2, #101	@ 0x65
 8012d88:	f43f abbc 	beq.w	8012504 <_strtod_l+0x264>
 8012d8c:	2a45      	cmp	r2, #69	@ 0x45
 8012d8e:	f43f abb9 	beq.w	8012504 <_strtod_l+0x264>
 8012d92:	2301      	movs	r3, #1
 8012d94:	9306      	str	r3, [sp, #24]
 8012d96:	f7ff bbf0 	b.w	801257a <_strtod_l+0x2da>
 8012d9a:	bf00      	nop
 8012d9c:	f3af 8000 	nop.w
 8012da0:	94a03595 	.word	0x94a03595
 8012da4:	3fdfffff 	.word	0x3fdfffff
 8012da8:	35afe535 	.word	0x35afe535
 8012dac:	3fe00000 	.word	0x3fe00000
 8012db0:	94a03595 	.word	0x94a03595
 8012db4:	3fcfffff 	.word	0x3fcfffff
 8012db8:	000fffff 	.word	0x000fffff
 8012dbc:	7ff00000 	.word	0x7ff00000
 8012dc0:	7fefffff 	.word	0x7fefffff
 8012dc4:	7fe00000 	.word	0x7fe00000
 8012dc8:	7c9fffff 	.word	0x7c9fffff

08012dcc <_strtod_r>:
 8012dcc:	4b01      	ldr	r3, [pc, #4]	@ (8012dd4 <_strtod_r+0x8>)
 8012dce:	f7ff ba67 	b.w	80122a0 <_strtod_l>
 8012dd2:	bf00      	nop
 8012dd4:	24000070 	.word	0x24000070

08012dd8 <_strtol_l.constprop.0>:
 8012dd8:	2b24      	cmp	r3, #36	@ 0x24
 8012dda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012dde:	4686      	mov	lr, r0
 8012de0:	4690      	mov	r8, r2
 8012de2:	d801      	bhi.n	8012de8 <_strtol_l.constprop.0+0x10>
 8012de4:	2b01      	cmp	r3, #1
 8012de6:	d106      	bne.n	8012df6 <_strtol_l.constprop.0+0x1e>
 8012de8:	f7fd ff22 	bl	8010c30 <__errno>
 8012dec:	2316      	movs	r3, #22
 8012dee:	6003      	str	r3, [r0, #0]
 8012df0:	2000      	movs	r0, #0
 8012df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012df6:	4834      	ldr	r0, [pc, #208]	@ (8012ec8 <_strtol_l.constprop.0+0xf0>)
 8012df8:	460d      	mov	r5, r1
 8012dfa:	462a      	mov	r2, r5
 8012dfc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012e00:	5d06      	ldrb	r6, [r0, r4]
 8012e02:	f016 0608 	ands.w	r6, r6, #8
 8012e06:	d1f8      	bne.n	8012dfa <_strtol_l.constprop.0+0x22>
 8012e08:	2c2d      	cmp	r4, #45	@ 0x2d
 8012e0a:	d12d      	bne.n	8012e68 <_strtol_l.constprop.0+0x90>
 8012e0c:	782c      	ldrb	r4, [r5, #0]
 8012e0e:	2601      	movs	r6, #1
 8012e10:	1c95      	adds	r5, r2, #2
 8012e12:	f033 0210 	bics.w	r2, r3, #16
 8012e16:	d109      	bne.n	8012e2c <_strtol_l.constprop.0+0x54>
 8012e18:	2c30      	cmp	r4, #48	@ 0x30
 8012e1a:	d12a      	bne.n	8012e72 <_strtol_l.constprop.0+0x9a>
 8012e1c:	782a      	ldrb	r2, [r5, #0]
 8012e1e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8012e22:	2a58      	cmp	r2, #88	@ 0x58
 8012e24:	d125      	bne.n	8012e72 <_strtol_l.constprop.0+0x9a>
 8012e26:	786c      	ldrb	r4, [r5, #1]
 8012e28:	2310      	movs	r3, #16
 8012e2a:	3502      	adds	r5, #2
 8012e2c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8012e30:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012e34:	2200      	movs	r2, #0
 8012e36:	fbbc f9f3 	udiv	r9, ip, r3
 8012e3a:	4610      	mov	r0, r2
 8012e3c:	fb03 ca19 	mls	sl, r3, r9, ip
 8012e40:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8012e44:	2f09      	cmp	r7, #9
 8012e46:	d81b      	bhi.n	8012e80 <_strtol_l.constprop.0+0xa8>
 8012e48:	463c      	mov	r4, r7
 8012e4a:	42a3      	cmp	r3, r4
 8012e4c:	dd27      	ble.n	8012e9e <_strtol_l.constprop.0+0xc6>
 8012e4e:	1c57      	adds	r7, r2, #1
 8012e50:	d007      	beq.n	8012e62 <_strtol_l.constprop.0+0x8a>
 8012e52:	4581      	cmp	r9, r0
 8012e54:	d320      	bcc.n	8012e98 <_strtol_l.constprop.0+0xc0>
 8012e56:	d101      	bne.n	8012e5c <_strtol_l.constprop.0+0x84>
 8012e58:	45a2      	cmp	sl, r4
 8012e5a:	db1d      	blt.n	8012e98 <_strtol_l.constprop.0+0xc0>
 8012e5c:	fb00 4003 	mla	r0, r0, r3, r4
 8012e60:	2201      	movs	r2, #1
 8012e62:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012e66:	e7eb      	b.n	8012e40 <_strtol_l.constprop.0+0x68>
 8012e68:	2c2b      	cmp	r4, #43	@ 0x2b
 8012e6a:	bf04      	itt	eq
 8012e6c:	782c      	ldrbeq	r4, [r5, #0]
 8012e6e:	1c95      	addeq	r5, r2, #2
 8012e70:	e7cf      	b.n	8012e12 <_strtol_l.constprop.0+0x3a>
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d1da      	bne.n	8012e2c <_strtol_l.constprop.0+0x54>
 8012e76:	2c30      	cmp	r4, #48	@ 0x30
 8012e78:	bf0c      	ite	eq
 8012e7a:	2308      	moveq	r3, #8
 8012e7c:	230a      	movne	r3, #10
 8012e7e:	e7d5      	b.n	8012e2c <_strtol_l.constprop.0+0x54>
 8012e80:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8012e84:	2f19      	cmp	r7, #25
 8012e86:	d801      	bhi.n	8012e8c <_strtol_l.constprop.0+0xb4>
 8012e88:	3c37      	subs	r4, #55	@ 0x37
 8012e8a:	e7de      	b.n	8012e4a <_strtol_l.constprop.0+0x72>
 8012e8c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8012e90:	2f19      	cmp	r7, #25
 8012e92:	d804      	bhi.n	8012e9e <_strtol_l.constprop.0+0xc6>
 8012e94:	3c57      	subs	r4, #87	@ 0x57
 8012e96:	e7d8      	b.n	8012e4a <_strtol_l.constprop.0+0x72>
 8012e98:	f04f 32ff 	mov.w	r2, #4294967295
 8012e9c:	e7e1      	b.n	8012e62 <_strtol_l.constprop.0+0x8a>
 8012e9e:	1c53      	adds	r3, r2, #1
 8012ea0:	d108      	bne.n	8012eb4 <_strtol_l.constprop.0+0xdc>
 8012ea2:	2322      	movs	r3, #34	@ 0x22
 8012ea4:	f8ce 3000 	str.w	r3, [lr]
 8012ea8:	4660      	mov	r0, ip
 8012eaa:	f1b8 0f00 	cmp.w	r8, #0
 8012eae:	d0a0      	beq.n	8012df2 <_strtol_l.constprop.0+0x1a>
 8012eb0:	1e69      	subs	r1, r5, #1
 8012eb2:	e006      	b.n	8012ec2 <_strtol_l.constprop.0+0xea>
 8012eb4:	b106      	cbz	r6, 8012eb8 <_strtol_l.constprop.0+0xe0>
 8012eb6:	4240      	negs	r0, r0
 8012eb8:	f1b8 0f00 	cmp.w	r8, #0
 8012ebc:	d099      	beq.n	8012df2 <_strtol_l.constprop.0+0x1a>
 8012ebe:	2a00      	cmp	r2, #0
 8012ec0:	d1f6      	bne.n	8012eb0 <_strtol_l.constprop.0+0xd8>
 8012ec2:	f8c8 1000 	str.w	r1, [r8]
 8012ec6:	e794      	b.n	8012df2 <_strtol_l.constprop.0+0x1a>
 8012ec8:	08014419 	.word	0x08014419

08012ecc <_strtol_r>:
 8012ecc:	f7ff bf84 	b.w	8012dd8 <_strtol_l.constprop.0>

08012ed0 <__ssputs_r>:
 8012ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ed4:	688e      	ldr	r6, [r1, #8]
 8012ed6:	461f      	mov	r7, r3
 8012ed8:	42be      	cmp	r6, r7
 8012eda:	680b      	ldr	r3, [r1, #0]
 8012edc:	4682      	mov	sl, r0
 8012ede:	460c      	mov	r4, r1
 8012ee0:	4690      	mov	r8, r2
 8012ee2:	d82d      	bhi.n	8012f40 <__ssputs_r+0x70>
 8012ee4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012ee8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012eec:	d026      	beq.n	8012f3c <__ssputs_r+0x6c>
 8012eee:	6965      	ldr	r5, [r4, #20]
 8012ef0:	6909      	ldr	r1, [r1, #16]
 8012ef2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012ef6:	eba3 0901 	sub.w	r9, r3, r1
 8012efa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012efe:	1c7b      	adds	r3, r7, #1
 8012f00:	444b      	add	r3, r9
 8012f02:	106d      	asrs	r5, r5, #1
 8012f04:	429d      	cmp	r5, r3
 8012f06:	bf38      	it	cc
 8012f08:	461d      	movcc	r5, r3
 8012f0a:	0553      	lsls	r3, r2, #21
 8012f0c:	d527      	bpl.n	8012f5e <__ssputs_r+0x8e>
 8012f0e:	4629      	mov	r1, r5
 8012f10:	f7fc fc88 	bl	800f824 <_malloc_r>
 8012f14:	4606      	mov	r6, r0
 8012f16:	b360      	cbz	r0, 8012f72 <__ssputs_r+0xa2>
 8012f18:	6921      	ldr	r1, [r4, #16]
 8012f1a:	464a      	mov	r2, r9
 8012f1c:	f7fd feb5 	bl	8010c8a <memcpy>
 8012f20:	89a3      	ldrh	r3, [r4, #12]
 8012f22:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012f26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012f2a:	81a3      	strh	r3, [r4, #12]
 8012f2c:	6126      	str	r6, [r4, #16]
 8012f2e:	6165      	str	r5, [r4, #20]
 8012f30:	444e      	add	r6, r9
 8012f32:	eba5 0509 	sub.w	r5, r5, r9
 8012f36:	6026      	str	r6, [r4, #0]
 8012f38:	60a5      	str	r5, [r4, #8]
 8012f3a:	463e      	mov	r6, r7
 8012f3c:	42be      	cmp	r6, r7
 8012f3e:	d900      	bls.n	8012f42 <__ssputs_r+0x72>
 8012f40:	463e      	mov	r6, r7
 8012f42:	6820      	ldr	r0, [r4, #0]
 8012f44:	4632      	mov	r2, r6
 8012f46:	4641      	mov	r1, r8
 8012f48:	f000 fb6a 	bl	8013620 <memmove>
 8012f4c:	68a3      	ldr	r3, [r4, #8]
 8012f4e:	1b9b      	subs	r3, r3, r6
 8012f50:	60a3      	str	r3, [r4, #8]
 8012f52:	6823      	ldr	r3, [r4, #0]
 8012f54:	4433      	add	r3, r6
 8012f56:	6023      	str	r3, [r4, #0]
 8012f58:	2000      	movs	r0, #0
 8012f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f5e:	462a      	mov	r2, r5
 8012f60:	f000 ff15 	bl	8013d8e <_realloc_r>
 8012f64:	4606      	mov	r6, r0
 8012f66:	2800      	cmp	r0, #0
 8012f68:	d1e0      	bne.n	8012f2c <__ssputs_r+0x5c>
 8012f6a:	6921      	ldr	r1, [r4, #16]
 8012f6c:	4650      	mov	r0, sl
 8012f6e:	f7fe fc81 	bl	8011874 <_free_r>
 8012f72:	230c      	movs	r3, #12
 8012f74:	f8ca 3000 	str.w	r3, [sl]
 8012f78:	89a3      	ldrh	r3, [r4, #12]
 8012f7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012f7e:	81a3      	strh	r3, [r4, #12]
 8012f80:	f04f 30ff 	mov.w	r0, #4294967295
 8012f84:	e7e9      	b.n	8012f5a <__ssputs_r+0x8a>
	...

08012f88 <_svfiprintf_r>:
 8012f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f8c:	4698      	mov	r8, r3
 8012f8e:	898b      	ldrh	r3, [r1, #12]
 8012f90:	061b      	lsls	r3, r3, #24
 8012f92:	b09d      	sub	sp, #116	@ 0x74
 8012f94:	4607      	mov	r7, r0
 8012f96:	460d      	mov	r5, r1
 8012f98:	4614      	mov	r4, r2
 8012f9a:	d510      	bpl.n	8012fbe <_svfiprintf_r+0x36>
 8012f9c:	690b      	ldr	r3, [r1, #16]
 8012f9e:	b973      	cbnz	r3, 8012fbe <_svfiprintf_r+0x36>
 8012fa0:	2140      	movs	r1, #64	@ 0x40
 8012fa2:	f7fc fc3f 	bl	800f824 <_malloc_r>
 8012fa6:	6028      	str	r0, [r5, #0]
 8012fa8:	6128      	str	r0, [r5, #16]
 8012faa:	b930      	cbnz	r0, 8012fba <_svfiprintf_r+0x32>
 8012fac:	230c      	movs	r3, #12
 8012fae:	603b      	str	r3, [r7, #0]
 8012fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8012fb4:	b01d      	add	sp, #116	@ 0x74
 8012fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fba:	2340      	movs	r3, #64	@ 0x40
 8012fbc:	616b      	str	r3, [r5, #20]
 8012fbe:	2300      	movs	r3, #0
 8012fc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8012fc2:	2320      	movs	r3, #32
 8012fc4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012fc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8012fcc:	2330      	movs	r3, #48	@ 0x30
 8012fce:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801316c <_svfiprintf_r+0x1e4>
 8012fd2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012fd6:	f04f 0901 	mov.w	r9, #1
 8012fda:	4623      	mov	r3, r4
 8012fdc:	469a      	mov	sl, r3
 8012fde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012fe2:	b10a      	cbz	r2, 8012fe8 <_svfiprintf_r+0x60>
 8012fe4:	2a25      	cmp	r2, #37	@ 0x25
 8012fe6:	d1f9      	bne.n	8012fdc <_svfiprintf_r+0x54>
 8012fe8:	ebba 0b04 	subs.w	fp, sl, r4
 8012fec:	d00b      	beq.n	8013006 <_svfiprintf_r+0x7e>
 8012fee:	465b      	mov	r3, fp
 8012ff0:	4622      	mov	r2, r4
 8012ff2:	4629      	mov	r1, r5
 8012ff4:	4638      	mov	r0, r7
 8012ff6:	f7ff ff6b 	bl	8012ed0 <__ssputs_r>
 8012ffa:	3001      	adds	r0, #1
 8012ffc:	f000 80a7 	beq.w	801314e <_svfiprintf_r+0x1c6>
 8013000:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013002:	445a      	add	r2, fp
 8013004:	9209      	str	r2, [sp, #36]	@ 0x24
 8013006:	f89a 3000 	ldrb.w	r3, [sl]
 801300a:	2b00      	cmp	r3, #0
 801300c:	f000 809f 	beq.w	801314e <_svfiprintf_r+0x1c6>
 8013010:	2300      	movs	r3, #0
 8013012:	f04f 32ff 	mov.w	r2, #4294967295
 8013016:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801301a:	f10a 0a01 	add.w	sl, sl, #1
 801301e:	9304      	str	r3, [sp, #16]
 8013020:	9307      	str	r3, [sp, #28]
 8013022:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013026:	931a      	str	r3, [sp, #104]	@ 0x68
 8013028:	4654      	mov	r4, sl
 801302a:	2205      	movs	r2, #5
 801302c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013030:	484e      	ldr	r0, [pc, #312]	@ (801316c <_svfiprintf_r+0x1e4>)
 8013032:	f7ed f95d 	bl	80002f0 <memchr>
 8013036:	9a04      	ldr	r2, [sp, #16]
 8013038:	b9d8      	cbnz	r0, 8013072 <_svfiprintf_r+0xea>
 801303a:	06d0      	lsls	r0, r2, #27
 801303c:	bf44      	itt	mi
 801303e:	2320      	movmi	r3, #32
 8013040:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013044:	0711      	lsls	r1, r2, #28
 8013046:	bf44      	itt	mi
 8013048:	232b      	movmi	r3, #43	@ 0x2b
 801304a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801304e:	f89a 3000 	ldrb.w	r3, [sl]
 8013052:	2b2a      	cmp	r3, #42	@ 0x2a
 8013054:	d015      	beq.n	8013082 <_svfiprintf_r+0xfa>
 8013056:	9a07      	ldr	r2, [sp, #28]
 8013058:	4654      	mov	r4, sl
 801305a:	2000      	movs	r0, #0
 801305c:	f04f 0c0a 	mov.w	ip, #10
 8013060:	4621      	mov	r1, r4
 8013062:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013066:	3b30      	subs	r3, #48	@ 0x30
 8013068:	2b09      	cmp	r3, #9
 801306a:	d94b      	bls.n	8013104 <_svfiprintf_r+0x17c>
 801306c:	b1b0      	cbz	r0, 801309c <_svfiprintf_r+0x114>
 801306e:	9207      	str	r2, [sp, #28]
 8013070:	e014      	b.n	801309c <_svfiprintf_r+0x114>
 8013072:	eba0 0308 	sub.w	r3, r0, r8
 8013076:	fa09 f303 	lsl.w	r3, r9, r3
 801307a:	4313      	orrs	r3, r2
 801307c:	9304      	str	r3, [sp, #16]
 801307e:	46a2      	mov	sl, r4
 8013080:	e7d2      	b.n	8013028 <_svfiprintf_r+0xa0>
 8013082:	9b03      	ldr	r3, [sp, #12]
 8013084:	1d19      	adds	r1, r3, #4
 8013086:	681b      	ldr	r3, [r3, #0]
 8013088:	9103      	str	r1, [sp, #12]
 801308a:	2b00      	cmp	r3, #0
 801308c:	bfbb      	ittet	lt
 801308e:	425b      	neglt	r3, r3
 8013090:	f042 0202 	orrlt.w	r2, r2, #2
 8013094:	9307      	strge	r3, [sp, #28]
 8013096:	9307      	strlt	r3, [sp, #28]
 8013098:	bfb8      	it	lt
 801309a:	9204      	strlt	r2, [sp, #16]
 801309c:	7823      	ldrb	r3, [r4, #0]
 801309e:	2b2e      	cmp	r3, #46	@ 0x2e
 80130a0:	d10a      	bne.n	80130b8 <_svfiprintf_r+0x130>
 80130a2:	7863      	ldrb	r3, [r4, #1]
 80130a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80130a6:	d132      	bne.n	801310e <_svfiprintf_r+0x186>
 80130a8:	9b03      	ldr	r3, [sp, #12]
 80130aa:	1d1a      	adds	r2, r3, #4
 80130ac:	681b      	ldr	r3, [r3, #0]
 80130ae:	9203      	str	r2, [sp, #12]
 80130b0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80130b4:	3402      	adds	r4, #2
 80130b6:	9305      	str	r3, [sp, #20]
 80130b8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801317c <_svfiprintf_r+0x1f4>
 80130bc:	7821      	ldrb	r1, [r4, #0]
 80130be:	2203      	movs	r2, #3
 80130c0:	4650      	mov	r0, sl
 80130c2:	f7ed f915 	bl	80002f0 <memchr>
 80130c6:	b138      	cbz	r0, 80130d8 <_svfiprintf_r+0x150>
 80130c8:	9b04      	ldr	r3, [sp, #16]
 80130ca:	eba0 000a 	sub.w	r0, r0, sl
 80130ce:	2240      	movs	r2, #64	@ 0x40
 80130d0:	4082      	lsls	r2, r0
 80130d2:	4313      	orrs	r3, r2
 80130d4:	3401      	adds	r4, #1
 80130d6:	9304      	str	r3, [sp, #16]
 80130d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80130dc:	4824      	ldr	r0, [pc, #144]	@ (8013170 <_svfiprintf_r+0x1e8>)
 80130de:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80130e2:	2206      	movs	r2, #6
 80130e4:	f7ed f904 	bl	80002f0 <memchr>
 80130e8:	2800      	cmp	r0, #0
 80130ea:	d036      	beq.n	801315a <_svfiprintf_r+0x1d2>
 80130ec:	4b21      	ldr	r3, [pc, #132]	@ (8013174 <_svfiprintf_r+0x1ec>)
 80130ee:	bb1b      	cbnz	r3, 8013138 <_svfiprintf_r+0x1b0>
 80130f0:	9b03      	ldr	r3, [sp, #12]
 80130f2:	3307      	adds	r3, #7
 80130f4:	f023 0307 	bic.w	r3, r3, #7
 80130f8:	3308      	adds	r3, #8
 80130fa:	9303      	str	r3, [sp, #12]
 80130fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80130fe:	4433      	add	r3, r6
 8013100:	9309      	str	r3, [sp, #36]	@ 0x24
 8013102:	e76a      	b.n	8012fda <_svfiprintf_r+0x52>
 8013104:	fb0c 3202 	mla	r2, ip, r2, r3
 8013108:	460c      	mov	r4, r1
 801310a:	2001      	movs	r0, #1
 801310c:	e7a8      	b.n	8013060 <_svfiprintf_r+0xd8>
 801310e:	2300      	movs	r3, #0
 8013110:	3401      	adds	r4, #1
 8013112:	9305      	str	r3, [sp, #20]
 8013114:	4619      	mov	r1, r3
 8013116:	f04f 0c0a 	mov.w	ip, #10
 801311a:	4620      	mov	r0, r4
 801311c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013120:	3a30      	subs	r2, #48	@ 0x30
 8013122:	2a09      	cmp	r2, #9
 8013124:	d903      	bls.n	801312e <_svfiprintf_r+0x1a6>
 8013126:	2b00      	cmp	r3, #0
 8013128:	d0c6      	beq.n	80130b8 <_svfiprintf_r+0x130>
 801312a:	9105      	str	r1, [sp, #20]
 801312c:	e7c4      	b.n	80130b8 <_svfiprintf_r+0x130>
 801312e:	fb0c 2101 	mla	r1, ip, r1, r2
 8013132:	4604      	mov	r4, r0
 8013134:	2301      	movs	r3, #1
 8013136:	e7f0      	b.n	801311a <_svfiprintf_r+0x192>
 8013138:	ab03      	add	r3, sp, #12
 801313a:	9300      	str	r3, [sp, #0]
 801313c:	462a      	mov	r2, r5
 801313e:	4b0e      	ldr	r3, [pc, #56]	@ (8013178 <_svfiprintf_r+0x1f0>)
 8013140:	a904      	add	r1, sp, #16
 8013142:	4638      	mov	r0, r7
 8013144:	f7fc fc88 	bl	800fa58 <_printf_float>
 8013148:	1c42      	adds	r2, r0, #1
 801314a:	4606      	mov	r6, r0
 801314c:	d1d6      	bne.n	80130fc <_svfiprintf_r+0x174>
 801314e:	89ab      	ldrh	r3, [r5, #12]
 8013150:	065b      	lsls	r3, r3, #25
 8013152:	f53f af2d 	bmi.w	8012fb0 <_svfiprintf_r+0x28>
 8013156:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013158:	e72c      	b.n	8012fb4 <_svfiprintf_r+0x2c>
 801315a:	ab03      	add	r3, sp, #12
 801315c:	9300      	str	r3, [sp, #0]
 801315e:	462a      	mov	r2, r5
 8013160:	4b05      	ldr	r3, [pc, #20]	@ (8013178 <_svfiprintf_r+0x1f0>)
 8013162:	a904      	add	r1, sp, #16
 8013164:	4638      	mov	r0, r7
 8013166:	f7fc feff 	bl	800ff68 <_printf_i>
 801316a:	e7ed      	b.n	8013148 <_svfiprintf_r+0x1c0>
 801316c:	08014519 	.word	0x08014519
 8013170:	08014523 	.word	0x08014523
 8013174:	0800fa59 	.word	0x0800fa59
 8013178:	08012ed1 	.word	0x08012ed1
 801317c:	0801451f 	.word	0x0801451f

08013180 <__sfputc_r>:
 8013180:	6893      	ldr	r3, [r2, #8]
 8013182:	3b01      	subs	r3, #1
 8013184:	2b00      	cmp	r3, #0
 8013186:	b410      	push	{r4}
 8013188:	6093      	str	r3, [r2, #8]
 801318a:	da08      	bge.n	801319e <__sfputc_r+0x1e>
 801318c:	6994      	ldr	r4, [r2, #24]
 801318e:	42a3      	cmp	r3, r4
 8013190:	db01      	blt.n	8013196 <__sfputc_r+0x16>
 8013192:	290a      	cmp	r1, #10
 8013194:	d103      	bne.n	801319e <__sfputc_r+0x1e>
 8013196:	f85d 4b04 	ldr.w	r4, [sp], #4
 801319a:	f7fd bbb8 	b.w	801090e <__swbuf_r>
 801319e:	6813      	ldr	r3, [r2, #0]
 80131a0:	1c58      	adds	r0, r3, #1
 80131a2:	6010      	str	r0, [r2, #0]
 80131a4:	7019      	strb	r1, [r3, #0]
 80131a6:	4608      	mov	r0, r1
 80131a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80131ac:	4770      	bx	lr

080131ae <__sfputs_r>:
 80131ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131b0:	4606      	mov	r6, r0
 80131b2:	460f      	mov	r7, r1
 80131b4:	4614      	mov	r4, r2
 80131b6:	18d5      	adds	r5, r2, r3
 80131b8:	42ac      	cmp	r4, r5
 80131ba:	d101      	bne.n	80131c0 <__sfputs_r+0x12>
 80131bc:	2000      	movs	r0, #0
 80131be:	e007      	b.n	80131d0 <__sfputs_r+0x22>
 80131c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80131c4:	463a      	mov	r2, r7
 80131c6:	4630      	mov	r0, r6
 80131c8:	f7ff ffda 	bl	8013180 <__sfputc_r>
 80131cc:	1c43      	adds	r3, r0, #1
 80131ce:	d1f3      	bne.n	80131b8 <__sfputs_r+0xa>
 80131d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080131d4 <_vfiprintf_r>:
 80131d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131d8:	460d      	mov	r5, r1
 80131da:	b09d      	sub	sp, #116	@ 0x74
 80131dc:	4614      	mov	r4, r2
 80131de:	4698      	mov	r8, r3
 80131e0:	4606      	mov	r6, r0
 80131e2:	b118      	cbz	r0, 80131ec <_vfiprintf_r+0x18>
 80131e4:	6a03      	ldr	r3, [r0, #32]
 80131e6:	b90b      	cbnz	r3, 80131ec <_vfiprintf_r+0x18>
 80131e8:	f7fd fa76 	bl	80106d8 <__sinit>
 80131ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80131ee:	07d9      	lsls	r1, r3, #31
 80131f0:	d405      	bmi.n	80131fe <_vfiprintf_r+0x2a>
 80131f2:	89ab      	ldrh	r3, [r5, #12]
 80131f4:	059a      	lsls	r2, r3, #22
 80131f6:	d402      	bmi.n	80131fe <_vfiprintf_r+0x2a>
 80131f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80131fa:	f7fd fd44 	bl	8010c86 <__retarget_lock_acquire_recursive>
 80131fe:	89ab      	ldrh	r3, [r5, #12]
 8013200:	071b      	lsls	r3, r3, #28
 8013202:	d501      	bpl.n	8013208 <_vfiprintf_r+0x34>
 8013204:	692b      	ldr	r3, [r5, #16]
 8013206:	b99b      	cbnz	r3, 8013230 <_vfiprintf_r+0x5c>
 8013208:	4629      	mov	r1, r5
 801320a:	4630      	mov	r0, r6
 801320c:	f7fd fbbe 	bl	801098c <__swsetup_r>
 8013210:	b170      	cbz	r0, 8013230 <_vfiprintf_r+0x5c>
 8013212:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013214:	07dc      	lsls	r4, r3, #31
 8013216:	d504      	bpl.n	8013222 <_vfiprintf_r+0x4e>
 8013218:	f04f 30ff 	mov.w	r0, #4294967295
 801321c:	b01d      	add	sp, #116	@ 0x74
 801321e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013222:	89ab      	ldrh	r3, [r5, #12]
 8013224:	0598      	lsls	r0, r3, #22
 8013226:	d4f7      	bmi.n	8013218 <_vfiprintf_r+0x44>
 8013228:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801322a:	f7fd fd2d 	bl	8010c88 <__retarget_lock_release_recursive>
 801322e:	e7f3      	b.n	8013218 <_vfiprintf_r+0x44>
 8013230:	2300      	movs	r3, #0
 8013232:	9309      	str	r3, [sp, #36]	@ 0x24
 8013234:	2320      	movs	r3, #32
 8013236:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801323a:	f8cd 800c 	str.w	r8, [sp, #12]
 801323e:	2330      	movs	r3, #48	@ 0x30
 8013240:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80133f0 <_vfiprintf_r+0x21c>
 8013244:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013248:	f04f 0901 	mov.w	r9, #1
 801324c:	4623      	mov	r3, r4
 801324e:	469a      	mov	sl, r3
 8013250:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013254:	b10a      	cbz	r2, 801325a <_vfiprintf_r+0x86>
 8013256:	2a25      	cmp	r2, #37	@ 0x25
 8013258:	d1f9      	bne.n	801324e <_vfiprintf_r+0x7a>
 801325a:	ebba 0b04 	subs.w	fp, sl, r4
 801325e:	d00b      	beq.n	8013278 <_vfiprintf_r+0xa4>
 8013260:	465b      	mov	r3, fp
 8013262:	4622      	mov	r2, r4
 8013264:	4629      	mov	r1, r5
 8013266:	4630      	mov	r0, r6
 8013268:	f7ff ffa1 	bl	80131ae <__sfputs_r>
 801326c:	3001      	adds	r0, #1
 801326e:	f000 80a7 	beq.w	80133c0 <_vfiprintf_r+0x1ec>
 8013272:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013274:	445a      	add	r2, fp
 8013276:	9209      	str	r2, [sp, #36]	@ 0x24
 8013278:	f89a 3000 	ldrb.w	r3, [sl]
 801327c:	2b00      	cmp	r3, #0
 801327e:	f000 809f 	beq.w	80133c0 <_vfiprintf_r+0x1ec>
 8013282:	2300      	movs	r3, #0
 8013284:	f04f 32ff 	mov.w	r2, #4294967295
 8013288:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801328c:	f10a 0a01 	add.w	sl, sl, #1
 8013290:	9304      	str	r3, [sp, #16]
 8013292:	9307      	str	r3, [sp, #28]
 8013294:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013298:	931a      	str	r3, [sp, #104]	@ 0x68
 801329a:	4654      	mov	r4, sl
 801329c:	2205      	movs	r2, #5
 801329e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80132a2:	4853      	ldr	r0, [pc, #332]	@ (80133f0 <_vfiprintf_r+0x21c>)
 80132a4:	f7ed f824 	bl	80002f0 <memchr>
 80132a8:	9a04      	ldr	r2, [sp, #16]
 80132aa:	b9d8      	cbnz	r0, 80132e4 <_vfiprintf_r+0x110>
 80132ac:	06d1      	lsls	r1, r2, #27
 80132ae:	bf44      	itt	mi
 80132b0:	2320      	movmi	r3, #32
 80132b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80132b6:	0713      	lsls	r3, r2, #28
 80132b8:	bf44      	itt	mi
 80132ba:	232b      	movmi	r3, #43	@ 0x2b
 80132bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80132c0:	f89a 3000 	ldrb.w	r3, [sl]
 80132c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80132c6:	d015      	beq.n	80132f4 <_vfiprintf_r+0x120>
 80132c8:	9a07      	ldr	r2, [sp, #28]
 80132ca:	4654      	mov	r4, sl
 80132cc:	2000      	movs	r0, #0
 80132ce:	f04f 0c0a 	mov.w	ip, #10
 80132d2:	4621      	mov	r1, r4
 80132d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80132d8:	3b30      	subs	r3, #48	@ 0x30
 80132da:	2b09      	cmp	r3, #9
 80132dc:	d94b      	bls.n	8013376 <_vfiprintf_r+0x1a2>
 80132de:	b1b0      	cbz	r0, 801330e <_vfiprintf_r+0x13a>
 80132e0:	9207      	str	r2, [sp, #28]
 80132e2:	e014      	b.n	801330e <_vfiprintf_r+0x13a>
 80132e4:	eba0 0308 	sub.w	r3, r0, r8
 80132e8:	fa09 f303 	lsl.w	r3, r9, r3
 80132ec:	4313      	orrs	r3, r2
 80132ee:	9304      	str	r3, [sp, #16]
 80132f0:	46a2      	mov	sl, r4
 80132f2:	e7d2      	b.n	801329a <_vfiprintf_r+0xc6>
 80132f4:	9b03      	ldr	r3, [sp, #12]
 80132f6:	1d19      	adds	r1, r3, #4
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	9103      	str	r1, [sp, #12]
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	bfbb      	ittet	lt
 8013300:	425b      	neglt	r3, r3
 8013302:	f042 0202 	orrlt.w	r2, r2, #2
 8013306:	9307      	strge	r3, [sp, #28]
 8013308:	9307      	strlt	r3, [sp, #28]
 801330a:	bfb8      	it	lt
 801330c:	9204      	strlt	r2, [sp, #16]
 801330e:	7823      	ldrb	r3, [r4, #0]
 8013310:	2b2e      	cmp	r3, #46	@ 0x2e
 8013312:	d10a      	bne.n	801332a <_vfiprintf_r+0x156>
 8013314:	7863      	ldrb	r3, [r4, #1]
 8013316:	2b2a      	cmp	r3, #42	@ 0x2a
 8013318:	d132      	bne.n	8013380 <_vfiprintf_r+0x1ac>
 801331a:	9b03      	ldr	r3, [sp, #12]
 801331c:	1d1a      	adds	r2, r3, #4
 801331e:	681b      	ldr	r3, [r3, #0]
 8013320:	9203      	str	r2, [sp, #12]
 8013322:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013326:	3402      	adds	r4, #2
 8013328:	9305      	str	r3, [sp, #20]
 801332a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013400 <_vfiprintf_r+0x22c>
 801332e:	7821      	ldrb	r1, [r4, #0]
 8013330:	2203      	movs	r2, #3
 8013332:	4650      	mov	r0, sl
 8013334:	f7ec ffdc 	bl	80002f0 <memchr>
 8013338:	b138      	cbz	r0, 801334a <_vfiprintf_r+0x176>
 801333a:	9b04      	ldr	r3, [sp, #16]
 801333c:	eba0 000a 	sub.w	r0, r0, sl
 8013340:	2240      	movs	r2, #64	@ 0x40
 8013342:	4082      	lsls	r2, r0
 8013344:	4313      	orrs	r3, r2
 8013346:	3401      	adds	r4, #1
 8013348:	9304      	str	r3, [sp, #16]
 801334a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801334e:	4829      	ldr	r0, [pc, #164]	@ (80133f4 <_vfiprintf_r+0x220>)
 8013350:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013354:	2206      	movs	r2, #6
 8013356:	f7ec ffcb 	bl	80002f0 <memchr>
 801335a:	2800      	cmp	r0, #0
 801335c:	d03f      	beq.n	80133de <_vfiprintf_r+0x20a>
 801335e:	4b26      	ldr	r3, [pc, #152]	@ (80133f8 <_vfiprintf_r+0x224>)
 8013360:	bb1b      	cbnz	r3, 80133aa <_vfiprintf_r+0x1d6>
 8013362:	9b03      	ldr	r3, [sp, #12]
 8013364:	3307      	adds	r3, #7
 8013366:	f023 0307 	bic.w	r3, r3, #7
 801336a:	3308      	adds	r3, #8
 801336c:	9303      	str	r3, [sp, #12]
 801336e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013370:	443b      	add	r3, r7
 8013372:	9309      	str	r3, [sp, #36]	@ 0x24
 8013374:	e76a      	b.n	801324c <_vfiprintf_r+0x78>
 8013376:	fb0c 3202 	mla	r2, ip, r2, r3
 801337a:	460c      	mov	r4, r1
 801337c:	2001      	movs	r0, #1
 801337e:	e7a8      	b.n	80132d2 <_vfiprintf_r+0xfe>
 8013380:	2300      	movs	r3, #0
 8013382:	3401      	adds	r4, #1
 8013384:	9305      	str	r3, [sp, #20]
 8013386:	4619      	mov	r1, r3
 8013388:	f04f 0c0a 	mov.w	ip, #10
 801338c:	4620      	mov	r0, r4
 801338e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013392:	3a30      	subs	r2, #48	@ 0x30
 8013394:	2a09      	cmp	r2, #9
 8013396:	d903      	bls.n	80133a0 <_vfiprintf_r+0x1cc>
 8013398:	2b00      	cmp	r3, #0
 801339a:	d0c6      	beq.n	801332a <_vfiprintf_r+0x156>
 801339c:	9105      	str	r1, [sp, #20]
 801339e:	e7c4      	b.n	801332a <_vfiprintf_r+0x156>
 80133a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80133a4:	4604      	mov	r4, r0
 80133a6:	2301      	movs	r3, #1
 80133a8:	e7f0      	b.n	801338c <_vfiprintf_r+0x1b8>
 80133aa:	ab03      	add	r3, sp, #12
 80133ac:	9300      	str	r3, [sp, #0]
 80133ae:	462a      	mov	r2, r5
 80133b0:	4b12      	ldr	r3, [pc, #72]	@ (80133fc <_vfiprintf_r+0x228>)
 80133b2:	a904      	add	r1, sp, #16
 80133b4:	4630      	mov	r0, r6
 80133b6:	f7fc fb4f 	bl	800fa58 <_printf_float>
 80133ba:	4607      	mov	r7, r0
 80133bc:	1c78      	adds	r0, r7, #1
 80133be:	d1d6      	bne.n	801336e <_vfiprintf_r+0x19a>
 80133c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80133c2:	07d9      	lsls	r1, r3, #31
 80133c4:	d405      	bmi.n	80133d2 <_vfiprintf_r+0x1fe>
 80133c6:	89ab      	ldrh	r3, [r5, #12]
 80133c8:	059a      	lsls	r2, r3, #22
 80133ca:	d402      	bmi.n	80133d2 <_vfiprintf_r+0x1fe>
 80133cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80133ce:	f7fd fc5b 	bl	8010c88 <__retarget_lock_release_recursive>
 80133d2:	89ab      	ldrh	r3, [r5, #12]
 80133d4:	065b      	lsls	r3, r3, #25
 80133d6:	f53f af1f 	bmi.w	8013218 <_vfiprintf_r+0x44>
 80133da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80133dc:	e71e      	b.n	801321c <_vfiprintf_r+0x48>
 80133de:	ab03      	add	r3, sp, #12
 80133e0:	9300      	str	r3, [sp, #0]
 80133e2:	462a      	mov	r2, r5
 80133e4:	4b05      	ldr	r3, [pc, #20]	@ (80133fc <_vfiprintf_r+0x228>)
 80133e6:	a904      	add	r1, sp, #16
 80133e8:	4630      	mov	r0, r6
 80133ea:	f7fc fdbd 	bl	800ff68 <_printf_i>
 80133ee:	e7e4      	b.n	80133ba <_vfiprintf_r+0x1e6>
 80133f0:	08014519 	.word	0x08014519
 80133f4:	08014523 	.word	0x08014523
 80133f8:	0800fa59 	.word	0x0800fa59
 80133fc:	080131af 	.word	0x080131af
 8013400:	0801451f 	.word	0x0801451f

08013404 <__sflush_r>:
 8013404:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801340c:	0716      	lsls	r6, r2, #28
 801340e:	4605      	mov	r5, r0
 8013410:	460c      	mov	r4, r1
 8013412:	d454      	bmi.n	80134be <__sflush_r+0xba>
 8013414:	684b      	ldr	r3, [r1, #4]
 8013416:	2b00      	cmp	r3, #0
 8013418:	dc02      	bgt.n	8013420 <__sflush_r+0x1c>
 801341a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801341c:	2b00      	cmp	r3, #0
 801341e:	dd48      	ble.n	80134b2 <__sflush_r+0xae>
 8013420:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013422:	2e00      	cmp	r6, #0
 8013424:	d045      	beq.n	80134b2 <__sflush_r+0xae>
 8013426:	2300      	movs	r3, #0
 8013428:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801342c:	682f      	ldr	r7, [r5, #0]
 801342e:	6a21      	ldr	r1, [r4, #32]
 8013430:	602b      	str	r3, [r5, #0]
 8013432:	d030      	beq.n	8013496 <__sflush_r+0x92>
 8013434:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013436:	89a3      	ldrh	r3, [r4, #12]
 8013438:	0759      	lsls	r1, r3, #29
 801343a:	d505      	bpl.n	8013448 <__sflush_r+0x44>
 801343c:	6863      	ldr	r3, [r4, #4]
 801343e:	1ad2      	subs	r2, r2, r3
 8013440:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013442:	b10b      	cbz	r3, 8013448 <__sflush_r+0x44>
 8013444:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013446:	1ad2      	subs	r2, r2, r3
 8013448:	2300      	movs	r3, #0
 801344a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801344c:	6a21      	ldr	r1, [r4, #32]
 801344e:	4628      	mov	r0, r5
 8013450:	47b0      	blx	r6
 8013452:	1c43      	adds	r3, r0, #1
 8013454:	89a3      	ldrh	r3, [r4, #12]
 8013456:	d106      	bne.n	8013466 <__sflush_r+0x62>
 8013458:	6829      	ldr	r1, [r5, #0]
 801345a:	291d      	cmp	r1, #29
 801345c:	d82b      	bhi.n	80134b6 <__sflush_r+0xb2>
 801345e:	4a2a      	ldr	r2, [pc, #168]	@ (8013508 <__sflush_r+0x104>)
 8013460:	410a      	asrs	r2, r1
 8013462:	07d6      	lsls	r6, r2, #31
 8013464:	d427      	bmi.n	80134b6 <__sflush_r+0xb2>
 8013466:	2200      	movs	r2, #0
 8013468:	6062      	str	r2, [r4, #4]
 801346a:	04d9      	lsls	r1, r3, #19
 801346c:	6922      	ldr	r2, [r4, #16]
 801346e:	6022      	str	r2, [r4, #0]
 8013470:	d504      	bpl.n	801347c <__sflush_r+0x78>
 8013472:	1c42      	adds	r2, r0, #1
 8013474:	d101      	bne.n	801347a <__sflush_r+0x76>
 8013476:	682b      	ldr	r3, [r5, #0]
 8013478:	b903      	cbnz	r3, 801347c <__sflush_r+0x78>
 801347a:	6560      	str	r0, [r4, #84]	@ 0x54
 801347c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801347e:	602f      	str	r7, [r5, #0]
 8013480:	b1b9      	cbz	r1, 80134b2 <__sflush_r+0xae>
 8013482:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013486:	4299      	cmp	r1, r3
 8013488:	d002      	beq.n	8013490 <__sflush_r+0x8c>
 801348a:	4628      	mov	r0, r5
 801348c:	f7fe f9f2 	bl	8011874 <_free_r>
 8013490:	2300      	movs	r3, #0
 8013492:	6363      	str	r3, [r4, #52]	@ 0x34
 8013494:	e00d      	b.n	80134b2 <__sflush_r+0xae>
 8013496:	2301      	movs	r3, #1
 8013498:	4628      	mov	r0, r5
 801349a:	47b0      	blx	r6
 801349c:	4602      	mov	r2, r0
 801349e:	1c50      	adds	r0, r2, #1
 80134a0:	d1c9      	bne.n	8013436 <__sflush_r+0x32>
 80134a2:	682b      	ldr	r3, [r5, #0]
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d0c6      	beq.n	8013436 <__sflush_r+0x32>
 80134a8:	2b1d      	cmp	r3, #29
 80134aa:	d001      	beq.n	80134b0 <__sflush_r+0xac>
 80134ac:	2b16      	cmp	r3, #22
 80134ae:	d11e      	bne.n	80134ee <__sflush_r+0xea>
 80134b0:	602f      	str	r7, [r5, #0]
 80134b2:	2000      	movs	r0, #0
 80134b4:	e022      	b.n	80134fc <__sflush_r+0xf8>
 80134b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80134ba:	b21b      	sxth	r3, r3
 80134bc:	e01b      	b.n	80134f6 <__sflush_r+0xf2>
 80134be:	690f      	ldr	r7, [r1, #16]
 80134c0:	2f00      	cmp	r7, #0
 80134c2:	d0f6      	beq.n	80134b2 <__sflush_r+0xae>
 80134c4:	0793      	lsls	r3, r2, #30
 80134c6:	680e      	ldr	r6, [r1, #0]
 80134c8:	bf08      	it	eq
 80134ca:	694b      	ldreq	r3, [r1, #20]
 80134cc:	600f      	str	r7, [r1, #0]
 80134ce:	bf18      	it	ne
 80134d0:	2300      	movne	r3, #0
 80134d2:	eba6 0807 	sub.w	r8, r6, r7
 80134d6:	608b      	str	r3, [r1, #8]
 80134d8:	f1b8 0f00 	cmp.w	r8, #0
 80134dc:	dde9      	ble.n	80134b2 <__sflush_r+0xae>
 80134de:	6a21      	ldr	r1, [r4, #32]
 80134e0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80134e2:	4643      	mov	r3, r8
 80134e4:	463a      	mov	r2, r7
 80134e6:	4628      	mov	r0, r5
 80134e8:	47b0      	blx	r6
 80134ea:	2800      	cmp	r0, #0
 80134ec:	dc08      	bgt.n	8013500 <__sflush_r+0xfc>
 80134ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80134f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80134f6:	81a3      	strh	r3, [r4, #12]
 80134f8:	f04f 30ff 	mov.w	r0, #4294967295
 80134fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013500:	4407      	add	r7, r0
 8013502:	eba8 0800 	sub.w	r8, r8, r0
 8013506:	e7e7      	b.n	80134d8 <__sflush_r+0xd4>
 8013508:	dfbffffe 	.word	0xdfbffffe

0801350c <_fflush_r>:
 801350c:	b538      	push	{r3, r4, r5, lr}
 801350e:	690b      	ldr	r3, [r1, #16]
 8013510:	4605      	mov	r5, r0
 8013512:	460c      	mov	r4, r1
 8013514:	b913      	cbnz	r3, 801351c <_fflush_r+0x10>
 8013516:	2500      	movs	r5, #0
 8013518:	4628      	mov	r0, r5
 801351a:	bd38      	pop	{r3, r4, r5, pc}
 801351c:	b118      	cbz	r0, 8013526 <_fflush_r+0x1a>
 801351e:	6a03      	ldr	r3, [r0, #32]
 8013520:	b90b      	cbnz	r3, 8013526 <_fflush_r+0x1a>
 8013522:	f7fd f8d9 	bl	80106d8 <__sinit>
 8013526:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801352a:	2b00      	cmp	r3, #0
 801352c:	d0f3      	beq.n	8013516 <_fflush_r+0xa>
 801352e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013530:	07d0      	lsls	r0, r2, #31
 8013532:	d404      	bmi.n	801353e <_fflush_r+0x32>
 8013534:	0599      	lsls	r1, r3, #22
 8013536:	d402      	bmi.n	801353e <_fflush_r+0x32>
 8013538:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801353a:	f7fd fba4 	bl	8010c86 <__retarget_lock_acquire_recursive>
 801353e:	4628      	mov	r0, r5
 8013540:	4621      	mov	r1, r4
 8013542:	f7ff ff5f 	bl	8013404 <__sflush_r>
 8013546:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013548:	07da      	lsls	r2, r3, #31
 801354a:	4605      	mov	r5, r0
 801354c:	d4e4      	bmi.n	8013518 <_fflush_r+0xc>
 801354e:	89a3      	ldrh	r3, [r4, #12]
 8013550:	059b      	lsls	r3, r3, #22
 8013552:	d4e1      	bmi.n	8013518 <_fflush_r+0xc>
 8013554:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013556:	f7fd fb97 	bl	8010c88 <__retarget_lock_release_recursive>
 801355a:	e7dd      	b.n	8013518 <_fflush_r+0xc>

0801355c <__swhatbuf_r>:
 801355c:	b570      	push	{r4, r5, r6, lr}
 801355e:	460c      	mov	r4, r1
 8013560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013564:	2900      	cmp	r1, #0
 8013566:	b096      	sub	sp, #88	@ 0x58
 8013568:	4615      	mov	r5, r2
 801356a:	461e      	mov	r6, r3
 801356c:	da0d      	bge.n	801358a <__swhatbuf_r+0x2e>
 801356e:	89a3      	ldrh	r3, [r4, #12]
 8013570:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013574:	f04f 0100 	mov.w	r1, #0
 8013578:	bf14      	ite	ne
 801357a:	2340      	movne	r3, #64	@ 0x40
 801357c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013580:	2000      	movs	r0, #0
 8013582:	6031      	str	r1, [r6, #0]
 8013584:	602b      	str	r3, [r5, #0]
 8013586:	b016      	add	sp, #88	@ 0x58
 8013588:	bd70      	pop	{r4, r5, r6, pc}
 801358a:	466a      	mov	r2, sp
 801358c:	f000 f874 	bl	8013678 <_fstat_r>
 8013590:	2800      	cmp	r0, #0
 8013592:	dbec      	blt.n	801356e <__swhatbuf_r+0x12>
 8013594:	9901      	ldr	r1, [sp, #4]
 8013596:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801359a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801359e:	4259      	negs	r1, r3
 80135a0:	4159      	adcs	r1, r3
 80135a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80135a6:	e7eb      	b.n	8013580 <__swhatbuf_r+0x24>

080135a8 <__smakebuf_r>:
 80135a8:	898b      	ldrh	r3, [r1, #12]
 80135aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80135ac:	079d      	lsls	r5, r3, #30
 80135ae:	4606      	mov	r6, r0
 80135b0:	460c      	mov	r4, r1
 80135b2:	d507      	bpl.n	80135c4 <__smakebuf_r+0x1c>
 80135b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80135b8:	6023      	str	r3, [r4, #0]
 80135ba:	6123      	str	r3, [r4, #16]
 80135bc:	2301      	movs	r3, #1
 80135be:	6163      	str	r3, [r4, #20]
 80135c0:	b003      	add	sp, #12
 80135c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80135c4:	ab01      	add	r3, sp, #4
 80135c6:	466a      	mov	r2, sp
 80135c8:	f7ff ffc8 	bl	801355c <__swhatbuf_r>
 80135cc:	9f00      	ldr	r7, [sp, #0]
 80135ce:	4605      	mov	r5, r0
 80135d0:	4639      	mov	r1, r7
 80135d2:	4630      	mov	r0, r6
 80135d4:	f7fc f926 	bl	800f824 <_malloc_r>
 80135d8:	b948      	cbnz	r0, 80135ee <__smakebuf_r+0x46>
 80135da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80135de:	059a      	lsls	r2, r3, #22
 80135e0:	d4ee      	bmi.n	80135c0 <__smakebuf_r+0x18>
 80135e2:	f023 0303 	bic.w	r3, r3, #3
 80135e6:	f043 0302 	orr.w	r3, r3, #2
 80135ea:	81a3      	strh	r3, [r4, #12]
 80135ec:	e7e2      	b.n	80135b4 <__smakebuf_r+0xc>
 80135ee:	89a3      	ldrh	r3, [r4, #12]
 80135f0:	6020      	str	r0, [r4, #0]
 80135f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80135f6:	81a3      	strh	r3, [r4, #12]
 80135f8:	9b01      	ldr	r3, [sp, #4]
 80135fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80135fe:	b15b      	cbz	r3, 8013618 <__smakebuf_r+0x70>
 8013600:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013604:	4630      	mov	r0, r6
 8013606:	f000 f849 	bl	801369c <_isatty_r>
 801360a:	b128      	cbz	r0, 8013618 <__smakebuf_r+0x70>
 801360c:	89a3      	ldrh	r3, [r4, #12]
 801360e:	f023 0303 	bic.w	r3, r3, #3
 8013612:	f043 0301 	orr.w	r3, r3, #1
 8013616:	81a3      	strh	r3, [r4, #12]
 8013618:	89a3      	ldrh	r3, [r4, #12]
 801361a:	431d      	orrs	r5, r3
 801361c:	81a5      	strh	r5, [r4, #12]
 801361e:	e7cf      	b.n	80135c0 <__smakebuf_r+0x18>

08013620 <memmove>:
 8013620:	4288      	cmp	r0, r1
 8013622:	b510      	push	{r4, lr}
 8013624:	eb01 0402 	add.w	r4, r1, r2
 8013628:	d902      	bls.n	8013630 <memmove+0x10>
 801362a:	4284      	cmp	r4, r0
 801362c:	4623      	mov	r3, r4
 801362e:	d807      	bhi.n	8013640 <memmove+0x20>
 8013630:	1e43      	subs	r3, r0, #1
 8013632:	42a1      	cmp	r1, r4
 8013634:	d008      	beq.n	8013648 <memmove+0x28>
 8013636:	f811 2b01 	ldrb.w	r2, [r1], #1
 801363a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801363e:	e7f8      	b.n	8013632 <memmove+0x12>
 8013640:	4402      	add	r2, r0
 8013642:	4601      	mov	r1, r0
 8013644:	428a      	cmp	r2, r1
 8013646:	d100      	bne.n	801364a <memmove+0x2a>
 8013648:	bd10      	pop	{r4, pc}
 801364a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801364e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013652:	e7f7      	b.n	8013644 <memmove+0x24>

08013654 <strncmp>:
 8013654:	b510      	push	{r4, lr}
 8013656:	b16a      	cbz	r2, 8013674 <strncmp+0x20>
 8013658:	3901      	subs	r1, #1
 801365a:	1884      	adds	r4, r0, r2
 801365c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013660:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8013664:	429a      	cmp	r2, r3
 8013666:	d103      	bne.n	8013670 <strncmp+0x1c>
 8013668:	42a0      	cmp	r0, r4
 801366a:	d001      	beq.n	8013670 <strncmp+0x1c>
 801366c:	2a00      	cmp	r2, #0
 801366e:	d1f5      	bne.n	801365c <strncmp+0x8>
 8013670:	1ad0      	subs	r0, r2, r3
 8013672:	bd10      	pop	{r4, pc}
 8013674:	4610      	mov	r0, r2
 8013676:	e7fc      	b.n	8013672 <strncmp+0x1e>

08013678 <_fstat_r>:
 8013678:	b538      	push	{r3, r4, r5, lr}
 801367a:	4d07      	ldr	r5, [pc, #28]	@ (8013698 <_fstat_r+0x20>)
 801367c:	2300      	movs	r3, #0
 801367e:	4604      	mov	r4, r0
 8013680:	4608      	mov	r0, r1
 8013682:	4611      	mov	r1, r2
 8013684:	602b      	str	r3, [r5, #0]
 8013686:	f7ee f871 	bl	800176c <_fstat>
 801368a:	1c43      	adds	r3, r0, #1
 801368c:	d102      	bne.n	8013694 <_fstat_r+0x1c>
 801368e:	682b      	ldr	r3, [r5, #0]
 8013690:	b103      	cbz	r3, 8013694 <_fstat_r+0x1c>
 8013692:	6023      	str	r3, [r4, #0]
 8013694:	bd38      	pop	{r3, r4, r5, pc}
 8013696:	bf00      	nop
 8013698:	24004f74 	.word	0x24004f74

0801369c <_isatty_r>:
 801369c:	b538      	push	{r3, r4, r5, lr}
 801369e:	4d06      	ldr	r5, [pc, #24]	@ (80136b8 <_isatty_r+0x1c>)
 80136a0:	2300      	movs	r3, #0
 80136a2:	4604      	mov	r4, r0
 80136a4:	4608      	mov	r0, r1
 80136a6:	602b      	str	r3, [r5, #0]
 80136a8:	f7ee f870 	bl	800178c <_isatty>
 80136ac:	1c43      	adds	r3, r0, #1
 80136ae:	d102      	bne.n	80136b6 <_isatty_r+0x1a>
 80136b0:	682b      	ldr	r3, [r5, #0]
 80136b2:	b103      	cbz	r3, 80136b6 <_isatty_r+0x1a>
 80136b4:	6023      	str	r3, [r4, #0]
 80136b6:	bd38      	pop	{r3, r4, r5, pc}
 80136b8:	24004f74 	.word	0x24004f74
 80136bc:	00000000 	.word	0x00000000

080136c0 <nan>:
 80136c0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80136c8 <nan+0x8>
 80136c4:	4770      	bx	lr
 80136c6:	bf00      	nop
 80136c8:	00000000 	.word	0x00000000
 80136cc:	7ff80000 	.word	0x7ff80000

080136d0 <_calloc_r>:
 80136d0:	b570      	push	{r4, r5, r6, lr}
 80136d2:	fba1 5402 	umull	r5, r4, r1, r2
 80136d6:	b93c      	cbnz	r4, 80136e8 <_calloc_r+0x18>
 80136d8:	4629      	mov	r1, r5
 80136da:	f7fc f8a3 	bl	800f824 <_malloc_r>
 80136de:	4606      	mov	r6, r0
 80136e0:	b928      	cbnz	r0, 80136ee <_calloc_r+0x1e>
 80136e2:	2600      	movs	r6, #0
 80136e4:	4630      	mov	r0, r6
 80136e6:	bd70      	pop	{r4, r5, r6, pc}
 80136e8:	220c      	movs	r2, #12
 80136ea:	6002      	str	r2, [r0, #0]
 80136ec:	e7f9      	b.n	80136e2 <_calloc_r+0x12>
 80136ee:	462a      	mov	r2, r5
 80136f0:	4621      	mov	r1, r4
 80136f2:	f7fd f9a1 	bl	8010a38 <memset>
 80136f6:	e7f5      	b.n	80136e4 <_calloc_r+0x14>

080136f8 <rshift>:
 80136f8:	6903      	ldr	r3, [r0, #16]
 80136fa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80136fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013702:	ea4f 1261 	mov.w	r2, r1, asr #5
 8013706:	f100 0414 	add.w	r4, r0, #20
 801370a:	dd45      	ble.n	8013798 <rshift+0xa0>
 801370c:	f011 011f 	ands.w	r1, r1, #31
 8013710:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8013714:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8013718:	d10c      	bne.n	8013734 <rshift+0x3c>
 801371a:	f100 0710 	add.w	r7, r0, #16
 801371e:	4629      	mov	r1, r5
 8013720:	42b1      	cmp	r1, r6
 8013722:	d334      	bcc.n	801378e <rshift+0x96>
 8013724:	1a9b      	subs	r3, r3, r2
 8013726:	009b      	lsls	r3, r3, #2
 8013728:	1eea      	subs	r2, r5, #3
 801372a:	4296      	cmp	r6, r2
 801372c:	bf38      	it	cc
 801372e:	2300      	movcc	r3, #0
 8013730:	4423      	add	r3, r4
 8013732:	e015      	b.n	8013760 <rshift+0x68>
 8013734:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8013738:	f1c1 0820 	rsb	r8, r1, #32
 801373c:	40cf      	lsrs	r7, r1
 801373e:	f105 0e04 	add.w	lr, r5, #4
 8013742:	46a1      	mov	r9, r4
 8013744:	4576      	cmp	r6, lr
 8013746:	46f4      	mov	ip, lr
 8013748:	d815      	bhi.n	8013776 <rshift+0x7e>
 801374a:	1a9a      	subs	r2, r3, r2
 801374c:	0092      	lsls	r2, r2, #2
 801374e:	3a04      	subs	r2, #4
 8013750:	3501      	adds	r5, #1
 8013752:	42ae      	cmp	r6, r5
 8013754:	bf38      	it	cc
 8013756:	2200      	movcc	r2, #0
 8013758:	18a3      	adds	r3, r4, r2
 801375a:	50a7      	str	r7, [r4, r2]
 801375c:	b107      	cbz	r7, 8013760 <rshift+0x68>
 801375e:	3304      	adds	r3, #4
 8013760:	1b1a      	subs	r2, r3, r4
 8013762:	42a3      	cmp	r3, r4
 8013764:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8013768:	bf08      	it	eq
 801376a:	2300      	moveq	r3, #0
 801376c:	6102      	str	r2, [r0, #16]
 801376e:	bf08      	it	eq
 8013770:	6143      	streq	r3, [r0, #20]
 8013772:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013776:	f8dc c000 	ldr.w	ip, [ip]
 801377a:	fa0c fc08 	lsl.w	ip, ip, r8
 801377e:	ea4c 0707 	orr.w	r7, ip, r7
 8013782:	f849 7b04 	str.w	r7, [r9], #4
 8013786:	f85e 7b04 	ldr.w	r7, [lr], #4
 801378a:	40cf      	lsrs	r7, r1
 801378c:	e7da      	b.n	8013744 <rshift+0x4c>
 801378e:	f851 cb04 	ldr.w	ip, [r1], #4
 8013792:	f847 cf04 	str.w	ip, [r7, #4]!
 8013796:	e7c3      	b.n	8013720 <rshift+0x28>
 8013798:	4623      	mov	r3, r4
 801379a:	e7e1      	b.n	8013760 <rshift+0x68>

0801379c <__hexdig_fun>:
 801379c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80137a0:	2b09      	cmp	r3, #9
 80137a2:	d802      	bhi.n	80137aa <__hexdig_fun+0xe>
 80137a4:	3820      	subs	r0, #32
 80137a6:	b2c0      	uxtb	r0, r0
 80137a8:	4770      	bx	lr
 80137aa:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80137ae:	2b05      	cmp	r3, #5
 80137b0:	d801      	bhi.n	80137b6 <__hexdig_fun+0x1a>
 80137b2:	3847      	subs	r0, #71	@ 0x47
 80137b4:	e7f7      	b.n	80137a6 <__hexdig_fun+0xa>
 80137b6:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80137ba:	2b05      	cmp	r3, #5
 80137bc:	d801      	bhi.n	80137c2 <__hexdig_fun+0x26>
 80137be:	3827      	subs	r0, #39	@ 0x27
 80137c0:	e7f1      	b.n	80137a6 <__hexdig_fun+0xa>
 80137c2:	2000      	movs	r0, #0
 80137c4:	4770      	bx	lr
	...

080137c8 <__gethex>:
 80137c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137cc:	b085      	sub	sp, #20
 80137ce:	468a      	mov	sl, r1
 80137d0:	9302      	str	r3, [sp, #8]
 80137d2:	680b      	ldr	r3, [r1, #0]
 80137d4:	9001      	str	r0, [sp, #4]
 80137d6:	4690      	mov	r8, r2
 80137d8:	1c9c      	adds	r4, r3, #2
 80137da:	46a1      	mov	r9, r4
 80137dc:	f814 0b01 	ldrb.w	r0, [r4], #1
 80137e0:	2830      	cmp	r0, #48	@ 0x30
 80137e2:	d0fa      	beq.n	80137da <__gethex+0x12>
 80137e4:	eba9 0303 	sub.w	r3, r9, r3
 80137e8:	f1a3 0b02 	sub.w	fp, r3, #2
 80137ec:	f7ff ffd6 	bl	801379c <__hexdig_fun>
 80137f0:	4605      	mov	r5, r0
 80137f2:	2800      	cmp	r0, #0
 80137f4:	d168      	bne.n	80138c8 <__gethex+0x100>
 80137f6:	49a0      	ldr	r1, [pc, #640]	@ (8013a78 <__gethex+0x2b0>)
 80137f8:	2201      	movs	r2, #1
 80137fa:	4648      	mov	r0, r9
 80137fc:	f7ff ff2a 	bl	8013654 <strncmp>
 8013800:	4607      	mov	r7, r0
 8013802:	2800      	cmp	r0, #0
 8013804:	d167      	bne.n	80138d6 <__gethex+0x10e>
 8013806:	f899 0001 	ldrb.w	r0, [r9, #1]
 801380a:	4626      	mov	r6, r4
 801380c:	f7ff ffc6 	bl	801379c <__hexdig_fun>
 8013810:	2800      	cmp	r0, #0
 8013812:	d062      	beq.n	80138da <__gethex+0x112>
 8013814:	4623      	mov	r3, r4
 8013816:	7818      	ldrb	r0, [r3, #0]
 8013818:	2830      	cmp	r0, #48	@ 0x30
 801381a:	4699      	mov	r9, r3
 801381c:	f103 0301 	add.w	r3, r3, #1
 8013820:	d0f9      	beq.n	8013816 <__gethex+0x4e>
 8013822:	f7ff ffbb 	bl	801379c <__hexdig_fun>
 8013826:	fab0 f580 	clz	r5, r0
 801382a:	096d      	lsrs	r5, r5, #5
 801382c:	f04f 0b01 	mov.w	fp, #1
 8013830:	464a      	mov	r2, r9
 8013832:	4616      	mov	r6, r2
 8013834:	3201      	adds	r2, #1
 8013836:	7830      	ldrb	r0, [r6, #0]
 8013838:	f7ff ffb0 	bl	801379c <__hexdig_fun>
 801383c:	2800      	cmp	r0, #0
 801383e:	d1f8      	bne.n	8013832 <__gethex+0x6a>
 8013840:	498d      	ldr	r1, [pc, #564]	@ (8013a78 <__gethex+0x2b0>)
 8013842:	2201      	movs	r2, #1
 8013844:	4630      	mov	r0, r6
 8013846:	f7ff ff05 	bl	8013654 <strncmp>
 801384a:	2800      	cmp	r0, #0
 801384c:	d13f      	bne.n	80138ce <__gethex+0x106>
 801384e:	b944      	cbnz	r4, 8013862 <__gethex+0x9a>
 8013850:	1c74      	adds	r4, r6, #1
 8013852:	4622      	mov	r2, r4
 8013854:	4616      	mov	r6, r2
 8013856:	3201      	adds	r2, #1
 8013858:	7830      	ldrb	r0, [r6, #0]
 801385a:	f7ff ff9f 	bl	801379c <__hexdig_fun>
 801385e:	2800      	cmp	r0, #0
 8013860:	d1f8      	bne.n	8013854 <__gethex+0x8c>
 8013862:	1ba4      	subs	r4, r4, r6
 8013864:	00a7      	lsls	r7, r4, #2
 8013866:	7833      	ldrb	r3, [r6, #0]
 8013868:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801386c:	2b50      	cmp	r3, #80	@ 0x50
 801386e:	d13e      	bne.n	80138ee <__gethex+0x126>
 8013870:	7873      	ldrb	r3, [r6, #1]
 8013872:	2b2b      	cmp	r3, #43	@ 0x2b
 8013874:	d033      	beq.n	80138de <__gethex+0x116>
 8013876:	2b2d      	cmp	r3, #45	@ 0x2d
 8013878:	d034      	beq.n	80138e4 <__gethex+0x11c>
 801387a:	1c71      	adds	r1, r6, #1
 801387c:	2400      	movs	r4, #0
 801387e:	7808      	ldrb	r0, [r1, #0]
 8013880:	f7ff ff8c 	bl	801379c <__hexdig_fun>
 8013884:	1e43      	subs	r3, r0, #1
 8013886:	b2db      	uxtb	r3, r3
 8013888:	2b18      	cmp	r3, #24
 801388a:	d830      	bhi.n	80138ee <__gethex+0x126>
 801388c:	f1a0 0210 	sub.w	r2, r0, #16
 8013890:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013894:	f7ff ff82 	bl	801379c <__hexdig_fun>
 8013898:	f100 3cff 	add.w	ip, r0, #4294967295
 801389c:	fa5f fc8c 	uxtb.w	ip, ip
 80138a0:	f1bc 0f18 	cmp.w	ip, #24
 80138a4:	f04f 030a 	mov.w	r3, #10
 80138a8:	d91e      	bls.n	80138e8 <__gethex+0x120>
 80138aa:	b104      	cbz	r4, 80138ae <__gethex+0xe6>
 80138ac:	4252      	negs	r2, r2
 80138ae:	4417      	add	r7, r2
 80138b0:	f8ca 1000 	str.w	r1, [sl]
 80138b4:	b1ed      	cbz	r5, 80138f2 <__gethex+0x12a>
 80138b6:	f1bb 0f00 	cmp.w	fp, #0
 80138ba:	bf0c      	ite	eq
 80138bc:	2506      	moveq	r5, #6
 80138be:	2500      	movne	r5, #0
 80138c0:	4628      	mov	r0, r5
 80138c2:	b005      	add	sp, #20
 80138c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138c8:	2500      	movs	r5, #0
 80138ca:	462c      	mov	r4, r5
 80138cc:	e7b0      	b.n	8013830 <__gethex+0x68>
 80138ce:	2c00      	cmp	r4, #0
 80138d0:	d1c7      	bne.n	8013862 <__gethex+0x9a>
 80138d2:	4627      	mov	r7, r4
 80138d4:	e7c7      	b.n	8013866 <__gethex+0x9e>
 80138d6:	464e      	mov	r6, r9
 80138d8:	462f      	mov	r7, r5
 80138da:	2501      	movs	r5, #1
 80138dc:	e7c3      	b.n	8013866 <__gethex+0x9e>
 80138de:	2400      	movs	r4, #0
 80138e0:	1cb1      	adds	r1, r6, #2
 80138e2:	e7cc      	b.n	801387e <__gethex+0xb6>
 80138e4:	2401      	movs	r4, #1
 80138e6:	e7fb      	b.n	80138e0 <__gethex+0x118>
 80138e8:	fb03 0002 	mla	r0, r3, r2, r0
 80138ec:	e7ce      	b.n	801388c <__gethex+0xc4>
 80138ee:	4631      	mov	r1, r6
 80138f0:	e7de      	b.n	80138b0 <__gethex+0xe8>
 80138f2:	eba6 0309 	sub.w	r3, r6, r9
 80138f6:	3b01      	subs	r3, #1
 80138f8:	4629      	mov	r1, r5
 80138fa:	2b07      	cmp	r3, #7
 80138fc:	dc0a      	bgt.n	8013914 <__gethex+0x14c>
 80138fe:	9801      	ldr	r0, [sp, #4]
 8013900:	f7fe f802 	bl	8011908 <_Balloc>
 8013904:	4604      	mov	r4, r0
 8013906:	b940      	cbnz	r0, 801391a <__gethex+0x152>
 8013908:	4b5c      	ldr	r3, [pc, #368]	@ (8013a7c <__gethex+0x2b4>)
 801390a:	4602      	mov	r2, r0
 801390c:	21e4      	movs	r1, #228	@ 0xe4
 801390e:	485c      	ldr	r0, [pc, #368]	@ (8013a80 <__gethex+0x2b8>)
 8013910:	f7fb ff38 	bl	800f784 <__assert_func>
 8013914:	3101      	adds	r1, #1
 8013916:	105b      	asrs	r3, r3, #1
 8013918:	e7ef      	b.n	80138fa <__gethex+0x132>
 801391a:	f100 0a14 	add.w	sl, r0, #20
 801391e:	2300      	movs	r3, #0
 8013920:	4655      	mov	r5, sl
 8013922:	469b      	mov	fp, r3
 8013924:	45b1      	cmp	r9, r6
 8013926:	d337      	bcc.n	8013998 <__gethex+0x1d0>
 8013928:	f845 bb04 	str.w	fp, [r5], #4
 801392c:	eba5 050a 	sub.w	r5, r5, sl
 8013930:	10ad      	asrs	r5, r5, #2
 8013932:	6125      	str	r5, [r4, #16]
 8013934:	4658      	mov	r0, fp
 8013936:	f7fe f8d9 	bl	8011aec <__hi0bits>
 801393a:	016d      	lsls	r5, r5, #5
 801393c:	f8d8 6000 	ldr.w	r6, [r8]
 8013940:	1a2d      	subs	r5, r5, r0
 8013942:	42b5      	cmp	r5, r6
 8013944:	dd54      	ble.n	80139f0 <__gethex+0x228>
 8013946:	1bad      	subs	r5, r5, r6
 8013948:	4629      	mov	r1, r5
 801394a:	4620      	mov	r0, r4
 801394c:	f7fe fc6a 	bl	8012224 <__any_on>
 8013950:	4681      	mov	r9, r0
 8013952:	b178      	cbz	r0, 8013974 <__gethex+0x1ac>
 8013954:	1e6b      	subs	r3, r5, #1
 8013956:	1159      	asrs	r1, r3, #5
 8013958:	f003 021f 	and.w	r2, r3, #31
 801395c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8013960:	f04f 0901 	mov.w	r9, #1
 8013964:	fa09 f202 	lsl.w	r2, r9, r2
 8013968:	420a      	tst	r2, r1
 801396a:	d003      	beq.n	8013974 <__gethex+0x1ac>
 801396c:	454b      	cmp	r3, r9
 801396e:	dc36      	bgt.n	80139de <__gethex+0x216>
 8013970:	f04f 0902 	mov.w	r9, #2
 8013974:	4629      	mov	r1, r5
 8013976:	4620      	mov	r0, r4
 8013978:	f7ff febe 	bl	80136f8 <rshift>
 801397c:	442f      	add	r7, r5
 801397e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013982:	42bb      	cmp	r3, r7
 8013984:	da42      	bge.n	8013a0c <__gethex+0x244>
 8013986:	9801      	ldr	r0, [sp, #4]
 8013988:	4621      	mov	r1, r4
 801398a:	f7fd fffd 	bl	8011988 <_Bfree>
 801398e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013990:	2300      	movs	r3, #0
 8013992:	6013      	str	r3, [r2, #0]
 8013994:	25a3      	movs	r5, #163	@ 0xa3
 8013996:	e793      	b.n	80138c0 <__gethex+0xf8>
 8013998:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801399c:	2a2e      	cmp	r2, #46	@ 0x2e
 801399e:	d012      	beq.n	80139c6 <__gethex+0x1fe>
 80139a0:	2b20      	cmp	r3, #32
 80139a2:	d104      	bne.n	80139ae <__gethex+0x1e6>
 80139a4:	f845 bb04 	str.w	fp, [r5], #4
 80139a8:	f04f 0b00 	mov.w	fp, #0
 80139ac:	465b      	mov	r3, fp
 80139ae:	7830      	ldrb	r0, [r6, #0]
 80139b0:	9303      	str	r3, [sp, #12]
 80139b2:	f7ff fef3 	bl	801379c <__hexdig_fun>
 80139b6:	9b03      	ldr	r3, [sp, #12]
 80139b8:	f000 000f 	and.w	r0, r0, #15
 80139bc:	4098      	lsls	r0, r3
 80139be:	ea4b 0b00 	orr.w	fp, fp, r0
 80139c2:	3304      	adds	r3, #4
 80139c4:	e7ae      	b.n	8013924 <__gethex+0x15c>
 80139c6:	45b1      	cmp	r9, r6
 80139c8:	d8ea      	bhi.n	80139a0 <__gethex+0x1d8>
 80139ca:	492b      	ldr	r1, [pc, #172]	@ (8013a78 <__gethex+0x2b0>)
 80139cc:	9303      	str	r3, [sp, #12]
 80139ce:	2201      	movs	r2, #1
 80139d0:	4630      	mov	r0, r6
 80139d2:	f7ff fe3f 	bl	8013654 <strncmp>
 80139d6:	9b03      	ldr	r3, [sp, #12]
 80139d8:	2800      	cmp	r0, #0
 80139da:	d1e1      	bne.n	80139a0 <__gethex+0x1d8>
 80139dc:	e7a2      	b.n	8013924 <__gethex+0x15c>
 80139de:	1ea9      	subs	r1, r5, #2
 80139e0:	4620      	mov	r0, r4
 80139e2:	f7fe fc1f 	bl	8012224 <__any_on>
 80139e6:	2800      	cmp	r0, #0
 80139e8:	d0c2      	beq.n	8013970 <__gethex+0x1a8>
 80139ea:	f04f 0903 	mov.w	r9, #3
 80139ee:	e7c1      	b.n	8013974 <__gethex+0x1ac>
 80139f0:	da09      	bge.n	8013a06 <__gethex+0x23e>
 80139f2:	1b75      	subs	r5, r6, r5
 80139f4:	4621      	mov	r1, r4
 80139f6:	9801      	ldr	r0, [sp, #4]
 80139f8:	462a      	mov	r2, r5
 80139fa:	f7fe f9dd 	bl	8011db8 <__lshift>
 80139fe:	1b7f      	subs	r7, r7, r5
 8013a00:	4604      	mov	r4, r0
 8013a02:	f100 0a14 	add.w	sl, r0, #20
 8013a06:	f04f 0900 	mov.w	r9, #0
 8013a0a:	e7b8      	b.n	801397e <__gethex+0x1b6>
 8013a0c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8013a10:	42bd      	cmp	r5, r7
 8013a12:	dd6f      	ble.n	8013af4 <__gethex+0x32c>
 8013a14:	1bed      	subs	r5, r5, r7
 8013a16:	42ae      	cmp	r6, r5
 8013a18:	dc34      	bgt.n	8013a84 <__gethex+0x2bc>
 8013a1a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013a1e:	2b02      	cmp	r3, #2
 8013a20:	d022      	beq.n	8013a68 <__gethex+0x2a0>
 8013a22:	2b03      	cmp	r3, #3
 8013a24:	d024      	beq.n	8013a70 <__gethex+0x2a8>
 8013a26:	2b01      	cmp	r3, #1
 8013a28:	d115      	bne.n	8013a56 <__gethex+0x28e>
 8013a2a:	42ae      	cmp	r6, r5
 8013a2c:	d113      	bne.n	8013a56 <__gethex+0x28e>
 8013a2e:	2e01      	cmp	r6, #1
 8013a30:	d10b      	bne.n	8013a4a <__gethex+0x282>
 8013a32:	9a02      	ldr	r2, [sp, #8]
 8013a34:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013a38:	6013      	str	r3, [r2, #0]
 8013a3a:	2301      	movs	r3, #1
 8013a3c:	6123      	str	r3, [r4, #16]
 8013a3e:	f8ca 3000 	str.w	r3, [sl]
 8013a42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013a44:	2562      	movs	r5, #98	@ 0x62
 8013a46:	601c      	str	r4, [r3, #0]
 8013a48:	e73a      	b.n	80138c0 <__gethex+0xf8>
 8013a4a:	1e71      	subs	r1, r6, #1
 8013a4c:	4620      	mov	r0, r4
 8013a4e:	f7fe fbe9 	bl	8012224 <__any_on>
 8013a52:	2800      	cmp	r0, #0
 8013a54:	d1ed      	bne.n	8013a32 <__gethex+0x26a>
 8013a56:	9801      	ldr	r0, [sp, #4]
 8013a58:	4621      	mov	r1, r4
 8013a5a:	f7fd ff95 	bl	8011988 <_Bfree>
 8013a5e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013a60:	2300      	movs	r3, #0
 8013a62:	6013      	str	r3, [r2, #0]
 8013a64:	2550      	movs	r5, #80	@ 0x50
 8013a66:	e72b      	b.n	80138c0 <__gethex+0xf8>
 8013a68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d1f3      	bne.n	8013a56 <__gethex+0x28e>
 8013a6e:	e7e0      	b.n	8013a32 <__gethex+0x26a>
 8013a70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d1dd      	bne.n	8013a32 <__gethex+0x26a>
 8013a76:	e7ee      	b.n	8013a56 <__gethex+0x28e>
 8013a78:	080143c0 	.word	0x080143c0
 8013a7c:	08014255 	.word	0x08014255
 8013a80:	08014532 	.word	0x08014532
 8013a84:	1e6f      	subs	r7, r5, #1
 8013a86:	f1b9 0f00 	cmp.w	r9, #0
 8013a8a:	d130      	bne.n	8013aee <__gethex+0x326>
 8013a8c:	b127      	cbz	r7, 8013a98 <__gethex+0x2d0>
 8013a8e:	4639      	mov	r1, r7
 8013a90:	4620      	mov	r0, r4
 8013a92:	f7fe fbc7 	bl	8012224 <__any_on>
 8013a96:	4681      	mov	r9, r0
 8013a98:	117a      	asrs	r2, r7, #5
 8013a9a:	2301      	movs	r3, #1
 8013a9c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8013aa0:	f007 071f 	and.w	r7, r7, #31
 8013aa4:	40bb      	lsls	r3, r7
 8013aa6:	4213      	tst	r3, r2
 8013aa8:	4629      	mov	r1, r5
 8013aaa:	4620      	mov	r0, r4
 8013aac:	bf18      	it	ne
 8013aae:	f049 0902 	orrne.w	r9, r9, #2
 8013ab2:	f7ff fe21 	bl	80136f8 <rshift>
 8013ab6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8013aba:	1b76      	subs	r6, r6, r5
 8013abc:	2502      	movs	r5, #2
 8013abe:	f1b9 0f00 	cmp.w	r9, #0
 8013ac2:	d047      	beq.n	8013b54 <__gethex+0x38c>
 8013ac4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013ac8:	2b02      	cmp	r3, #2
 8013aca:	d015      	beq.n	8013af8 <__gethex+0x330>
 8013acc:	2b03      	cmp	r3, #3
 8013ace:	d017      	beq.n	8013b00 <__gethex+0x338>
 8013ad0:	2b01      	cmp	r3, #1
 8013ad2:	d109      	bne.n	8013ae8 <__gethex+0x320>
 8013ad4:	f019 0f02 	tst.w	r9, #2
 8013ad8:	d006      	beq.n	8013ae8 <__gethex+0x320>
 8013ada:	f8da 3000 	ldr.w	r3, [sl]
 8013ade:	ea49 0903 	orr.w	r9, r9, r3
 8013ae2:	f019 0f01 	tst.w	r9, #1
 8013ae6:	d10e      	bne.n	8013b06 <__gethex+0x33e>
 8013ae8:	f045 0510 	orr.w	r5, r5, #16
 8013aec:	e032      	b.n	8013b54 <__gethex+0x38c>
 8013aee:	f04f 0901 	mov.w	r9, #1
 8013af2:	e7d1      	b.n	8013a98 <__gethex+0x2d0>
 8013af4:	2501      	movs	r5, #1
 8013af6:	e7e2      	b.n	8013abe <__gethex+0x2f6>
 8013af8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013afa:	f1c3 0301 	rsb	r3, r3, #1
 8013afe:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013b00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d0f0      	beq.n	8013ae8 <__gethex+0x320>
 8013b06:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8013b0a:	f104 0314 	add.w	r3, r4, #20
 8013b0e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8013b12:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8013b16:	f04f 0c00 	mov.w	ip, #0
 8013b1a:	4618      	mov	r0, r3
 8013b1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013b20:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013b24:	d01b      	beq.n	8013b5e <__gethex+0x396>
 8013b26:	3201      	adds	r2, #1
 8013b28:	6002      	str	r2, [r0, #0]
 8013b2a:	2d02      	cmp	r5, #2
 8013b2c:	f104 0314 	add.w	r3, r4, #20
 8013b30:	d13c      	bne.n	8013bac <__gethex+0x3e4>
 8013b32:	f8d8 2000 	ldr.w	r2, [r8]
 8013b36:	3a01      	subs	r2, #1
 8013b38:	42b2      	cmp	r2, r6
 8013b3a:	d109      	bne.n	8013b50 <__gethex+0x388>
 8013b3c:	1171      	asrs	r1, r6, #5
 8013b3e:	2201      	movs	r2, #1
 8013b40:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013b44:	f006 061f 	and.w	r6, r6, #31
 8013b48:	fa02 f606 	lsl.w	r6, r2, r6
 8013b4c:	421e      	tst	r6, r3
 8013b4e:	d13a      	bne.n	8013bc6 <__gethex+0x3fe>
 8013b50:	f045 0520 	orr.w	r5, r5, #32
 8013b54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013b56:	601c      	str	r4, [r3, #0]
 8013b58:	9b02      	ldr	r3, [sp, #8]
 8013b5a:	601f      	str	r7, [r3, #0]
 8013b5c:	e6b0      	b.n	80138c0 <__gethex+0xf8>
 8013b5e:	4299      	cmp	r1, r3
 8013b60:	f843 cc04 	str.w	ip, [r3, #-4]
 8013b64:	d8d9      	bhi.n	8013b1a <__gethex+0x352>
 8013b66:	68a3      	ldr	r3, [r4, #8]
 8013b68:	459b      	cmp	fp, r3
 8013b6a:	db17      	blt.n	8013b9c <__gethex+0x3d4>
 8013b6c:	6861      	ldr	r1, [r4, #4]
 8013b6e:	9801      	ldr	r0, [sp, #4]
 8013b70:	3101      	adds	r1, #1
 8013b72:	f7fd fec9 	bl	8011908 <_Balloc>
 8013b76:	4681      	mov	r9, r0
 8013b78:	b918      	cbnz	r0, 8013b82 <__gethex+0x3ba>
 8013b7a:	4b1a      	ldr	r3, [pc, #104]	@ (8013be4 <__gethex+0x41c>)
 8013b7c:	4602      	mov	r2, r0
 8013b7e:	2184      	movs	r1, #132	@ 0x84
 8013b80:	e6c5      	b.n	801390e <__gethex+0x146>
 8013b82:	6922      	ldr	r2, [r4, #16]
 8013b84:	3202      	adds	r2, #2
 8013b86:	f104 010c 	add.w	r1, r4, #12
 8013b8a:	0092      	lsls	r2, r2, #2
 8013b8c:	300c      	adds	r0, #12
 8013b8e:	f7fd f87c 	bl	8010c8a <memcpy>
 8013b92:	4621      	mov	r1, r4
 8013b94:	9801      	ldr	r0, [sp, #4]
 8013b96:	f7fd fef7 	bl	8011988 <_Bfree>
 8013b9a:	464c      	mov	r4, r9
 8013b9c:	6923      	ldr	r3, [r4, #16]
 8013b9e:	1c5a      	adds	r2, r3, #1
 8013ba0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013ba4:	6122      	str	r2, [r4, #16]
 8013ba6:	2201      	movs	r2, #1
 8013ba8:	615a      	str	r2, [r3, #20]
 8013baa:	e7be      	b.n	8013b2a <__gethex+0x362>
 8013bac:	6922      	ldr	r2, [r4, #16]
 8013bae:	455a      	cmp	r2, fp
 8013bb0:	dd0b      	ble.n	8013bca <__gethex+0x402>
 8013bb2:	2101      	movs	r1, #1
 8013bb4:	4620      	mov	r0, r4
 8013bb6:	f7ff fd9f 	bl	80136f8 <rshift>
 8013bba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013bbe:	3701      	adds	r7, #1
 8013bc0:	42bb      	cmp	r3, r7
 8013bc2:	f6ff aee0 	blt.w	8013986 <__gethex+0x1be>
 8013bc6:	2501      	movs	r5, #1
 8013bc8:	e7c2      	b.n	8013b50 <__gethex+0x388>
 8013bca:	f016 061f 	ands.w	r6, r6, #31
 8013bce:	d0fa      	beq.n	8013bc6 <__gethex+0x3fe>
 8013bd0:	4453      	add	r3, sl
 8013bd2:	f1c6 0620 	rsb	r6, r6, #32
 8013bd6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8013bda:	f7fd ff87 	bl	8011aec <__hi0bits>
 8013bde:	42b0      	cmp	r0, r6
 8013be0:	dbe7      	blt.n	8013bb2 <__gethex+0x3ea>
 8013be2:	e7f0      	b.n	8013bc6 <__gethex+0x3fe>
 8013be4:	08014255 	.word	0x08014255

08013be8 <L_shift>:
 8013be8:	f1c2 0208 	rsb	r2, r2, #8
 8013bec:	0092      	lsls	r2, r2, #2
 8013bee:	b570      	push	{r4, r5, r6, lr}
 8013bf0:	f1c2 0620 	rsb	r6, r2, #32
 8013bf4:	6843      	ldr	r3, [r0, #4]
 8013bf6:	6804      	ldr	r4, [r0, #0]
 8013bf8:	fa03 f506 	lsl.w	r5, r3, r6
 8013bfc:	432c      	orrs	r4, r5
 8013bfe:	40d3      	lsrs	r3, r2
 8013c00:	6004      	str	r4, [r0, #0]
 8013c02:	f840 3f04 	str.w	r3, [r0, #4]!
 8013c06:	4288      	cmp	r0, r1
 8013c08:	d3f4      	bcc.n	8013bf4 <L_shift+0xc>
 8013c0a:	bd70      	pop	{r4, r5, r6, pc}

08013c0c <__match>:
 8013c0c:	b530      	push	{r4, r5, lr}
 8013c0e:	6803      	ldr	r3, [r0, #0]
 8013c10:	3301      	adds	r3, #1
 8013c12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013c16:	b914      	cbnz	r4, 8013c1e <__match+0x12>
 8013c18:	6003      	str	r3, [r0, #0]
 8013c1a:	2001      	movs	r0, #1
 8013c1c:	bd30      	pop	{r4, r5, pc}
 8013c1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013c22:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8013c26:	2d19      	cmp	r5, #25
 8013c28:	bf98      	it	ls
 8013c2a:	3220      	addls	r2, #32
 8013c2c:	42a2      	cmp	r2, r4
 8013c2e:	d0f0      	beq.n	8013c12 <__match+0x6>
 8013c30:	2000      	movs	r0, #0
 8013c32:	e7f3      	b.n	8013c1c <__match+0x10>

08013c34 <__hexnan>:
 8013c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c38:	680b      	ldr	r3, [r1, #0]
 8013c3a:	6801      	ldr	r1, [r0, #0]
 8013c3c:	115e      	asrs	r6, r3, #5
 8013c3e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8013c42:	f013 031f 	ands.w	r3, r3, #31
 8013c46:	b087      	sub	sp, #28
 8013c48:	bf18      	it	ne
 8013c4a:	3604      	addne	r6, #4
 8013c4c:	2500      	movs	r5, #0
 8013c4e:	1f37      	subs	r7, r6, #4
 8013c50:	4682      	mov	sl, r0
 8013c52:	4690      	mov	r8, r2
 8013c54:	9301      	str	r3, [sp, #4]
 8013c56:	f846 5c04 	str.w	r5, [r6, #-4]
 8013c5a:	46b9      	mov	r9, r7
 8013c5c:	463c      	mov	r4, r7
 8013c5e:	9502      	str	r5, [sp, #8]
 8013c60:	46ab      	mov	fp, r5
 8013c62:	784a      	ldrb	r2, [r1, #1]
 8013c64:	1c4b      	adds	r3, r1, #1
 8013c66:	9303      	str	r3, [sp, #12]
 8013c68:	b342      	cbz	r2, 8013cbc <__hexnan+0x88>
 8013c6a:	4610      	mov	r0, r2
 8013c6c:	9105      	str	r1, [sp, #20]
 8013c6e:	9204      	str	r2, [sp, #16]
 8013c70:	f7ff fd94 	bl	801379c <__hexdig_fun>
 8013c74:	2800      	cmp	r0, #0
 8013c76:	d151      	bne.n	8013d1c <__hexnan+0xe8>
 8013c78:	9a04      	ldr	r2, [sp, #16]
 8013c7a:	9905      	ldr	r1, [sp, #20]
 8013c7c:	2a20      	cmp	r2, #32
 8013c7e:	d818      	bhi.n	8013cb2 <__hexnan+0x7e>
 8013c80:	9b02      	ldr	r3, [sp, #8]
 8013c82:	459b      	cmp	fp, r3
 8013c84:	dd13      	ble.n	8013cae <__hexnan+0x7a>
 8013c86:	454c      	cmp	r4, r9
 8013c88:	d206      	bcs.n	8013c98 <__hexnan+0x64>
 8013c8a:	2d07      	cmp	r5, #7
 8013c8c:	dc04      	bgt.n	8013c98 <__hexnan+0x64>
 8013c8e:	462a      	mov	r2, r5
 8013c90:	4649      	mov	r1, r9
 8013c92:	4620      	mov	r0, r4
 8013c94:	f7ff ffa8 	bl	8013be8 <L_shift>
 8013c98:	4544      	cmp	r4, r8
 8013c9a:	d952      	bls.n	8013d42 <__hexnan+0x10e>
 8013c9c:	2300      	movs	r3, #0
 8013c9e:	f1a4 0904 	sub.w	r9, r4, #4
 8013ca2:	f844 3c04 	str.w	r3, [r4, #-4]
 8013ca6:	f8cd b008 	str.w	fp, [sp, #8]
 8013caa:	464c      	mov	r4, r9
 8013cac:	461d      	mov	r5, r3
 8013cae:	9903      	ldr	r1, [sp, #12]
 8013cb0:	e7d7      	b.n	8013c62 <__hexnan+0x2e>
 8013cb2:	2a29      	cmp	r2, #41	@ 0x29
 8013cb4:	d157      	bne.n	8013d66 <__hexnan+0x132>
 8013cb6:	3102      	adds	r1, #2
 8013cb8:	f8ca 1000 	str.w	r1, [sl]
 8013cbc:	f1bb 0f00 	cmp.w	fp, #0
 8013cc0:	d051      	beq.n	8013d66 <__hexnan+0x132>
 8013cc2:	454c      	cmp	r4, r9
 8013cc4:	d206      	bcs.n	8013cd4 <__hexnan+0xa0>
 8013cc6:	2d07      	cmp	r5, #7
 8013cc8:	dc04      	bgt.n	8013cd4 <__hexnan+0xa0>
 8013cca:	462a      	mov	r2, r5
 8013ccc:	4649      	mov	r1, r9
 8013cce:	4620      	mov	r0, r4
 8013cd0:	f7ff ff8a 	bl	8013be8 <L_shift>
 8013cd4:	4544      	cmp	r4, r8
 8013cd6:	d936      	bls.n	8013d46 <__hexnan+0x112>
 8013cd8:	f1a8 0204 	sub.w	r2, r8, #4
 8013cdc:	4623      	mov	r3, r4
 8013cde:	f853 1b04 	ldr.w	r1, [r3], #4
 8013ce2:	f842 1f04 	str.w	r1, [r2, #4]!
 8013ce6:	429f      	cmp	r7, r3
 8013ce8:	d2f9      	bcs.n	8013cde <__hexnan+0xaa>
 8013cea:	1b3b      	subs	r3, r7, r4
 8013cec:	f023 0303 	bic.w	r3, r3, #3
 8013cf0:	3304      	adds	r3, #4
 8013cf2:	3401      	adds	r4, #1
 8013cf4:	3e03      	subs	r6, #3
 8013cf6:	42b4      	cmp	r4, r6
 8013cf8:	bf88      	it	hi
 8013cfa:	2304      	movhi	r3, #4
 8013cfc:	4443      	add	r3, r8
 8013cfe:	2200      	movs	r2, #0
 8013d00:	f843 2b04 	str.w	r2, [r3], #4
 8013d04:	429f      	cmp	r7, r3
 8013d06:	d2fb      	bcs.n	8013d00 <__hexnan+0xcc>
 8013d08:	683b      	ldr	r3, [r7, #0]
 8013d0a:	b91b      	cbnz	r3, 8013d14 <__hexnan+0xe0>
 8013d0c:	4547      	cmp	r7, r8
 8013d0e:	d128      	bne.n	8013d62 <__hexnan+0x12e>
 8013d10:	2301      	movs	r3, #1
 8013d12:	603b      	str	r3, [r7, #0]
 8013d14:	2005      	movs	r0, #5
 8013d16:	b007      	add	sp, #28
 8013d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d1c:	3501      	adds	r5, #1
 8013d1e:	2d08      	cmp	r5, #8
 8013d20:	f10b 0b01 	add.w	fp, fp, #1
 8013d24:	dd06      	ble.n	8013d34 <__hexnan+0x100>
 8013d26:	4544      	cmp	r4, r8
 8013d28:	d9c1      	bls.n	8013cae <__hexnan+0x7a>
 8013d2a:	2300      	movs	r3, #0
 8013d2c:	f844 3c04 	str.w	r3, [r4, #-4]
 8013d30:	2501      	movs	r5, #1
 8013d32:	3c04      	subs	r4, #4
 8013d34:	6822      	ldr	r2, [r4, #0]
 8013d36:	f000 000f 	and.w	r0, r0, #15
 8013d3a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8013d3e:	6020      	str	r0, [r4, #0]
 8013d40:	e7b5      	b.n	8013cae <__hexnan+0x7a>
 8013d42:	2508      	movs	r5, #8
 8013d44:	e7b3      	b.n	8013cae <__hexnan+0x7a>
 8013d46:	9b01      	ldr	r3, [sp, #4]
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	d0dd      	beq.n	8013d08 <__hexnan+0xd4>
 8013d4c:	f1c3 0320 	rsb	r3, r3, #32
 8013d50:	f04f 32ff 	mov.w	r2, #4294967295
 8013d54:	40da      	lsrs	r2, r3
 8013d56:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8013d5a:	4013      	ands	r3, r2
 8013d5c:	f846 3c04 	str.w	r3, [r6, #-4]
 8013d60:	e7d2      	b.n	8013d08 <__hexnan+0xd4>
 8013d62:	3f04      	subs	r7, #4
 8013d64:	e7d0      	b.n	8013d08 <__hexnan+0xd4>
 8013d66:	2004      	movs	r0, #4
 8013d68:	e7d5      	b.n	8013d16 <__hexnan+0xe2>

08013d6a <__ascii_mbtowc>:
 8013d6a:	b082      	sub	sp, #8
 8013d6c:	b901      	cbnz	r1, 8013d70 <__ascii_mbtowc+0x6>
 8013d6e:	a901      	add	r1, sp, #4
 8013d70:	b142      	cbz	r2, 8013d84 <__ascii_mbtowc+0x1a>
 8013d72:	b14b      	cbz	r3, 8013d88 <__ascii_mbtowc+0x1e>
 8013d74:	7813      	ldrb	r3, [r2, #0]
 8013d76:	600b      	str	r3, [r1, #0]
 8013d78:	7812      	ldrb	r2, [r2, #0]
 8013d7a:	1e10      	subs	r0, r2, #0
 8013d7c:	bf18      	it	ne
 8013d7e:	2001      	movne	r0, #1
 8013d80:	b002      	add	sp, #8
 8013d82:	4770      	bx	lr
 8013d84:	4610      	mov	r0, r2
 8013d86:	e7fb      	b.n	8013d80 <__ascii_mbtowc+0x16>
 8013d88:	f06f 0001 	mvn.w	r0, #1
 8013d8c:	e7f8      	b.n	8013d80 <__ascii_mbtowc+0x16>

08013d8e <_realloc_r>:
 8013d8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d92:	4680      	mov	r8, r0
 8013d94:	4615      	mov	r5, r2
 8013d96:	460c      	mov	r4, r1
 8013d98:	b921      	cbnz	r1, 8013da4 <_realloc_r+0x16>
 8013d9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013d9e:	4611      	mov	r1, r2
 8013da0:	f7fb bd40 	b.w	800f824 <_malloc_r>
 8013da4:	b92a      	cbnz	r2, 8013db2 <_realloc_r+0x24>
 8013da6:	f7fd fd65 	bl	8011874 <_free_r>
 8013daa:	2400      	movs	r4, #0
 8013dac:	4620      	mov	r0, r4
 8013dae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013db2:	f000 f827 	bl	8013e04 <_malloc_usable_size_r>
 8013db6:	4285      	cmp	r5, r0
 8013db8:	4606      	mov	r6, r0
 8013dba:	d802      	bhi.n	8013dc2 <_realloc_r+0x34>
 8013dbc:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8013dc0:	d8f4      	bhi.n	8013dac <_realloc_r+0x1e>
 8013dc2:	4629      	mov	r1, r5
 8013dc4:	4640      	mov	r0, r8
 8013dc6:	f7fb fd2d 	bl	800f824 <_malloc_r>
 8013dca:	4607      	mov	r7, r0
 8013dcc:	2800      	cmp	r0, #0
 8013dce:	d0ec      	beq.n	8013daa <_realloc_r+0x1c>
 8013dd0:	42b5      	cmp	r5, r6
 8013dd2:	462a      	mov	r2, r5
 8013dd4:	4621      	mov	r1, r4
 8013dd6:	bf28      	it	cs
 8013dd8:	4632      	movcs	r2, r6
 8013dda:	f7fc ff56 	bl	8010c8a <memcpy>
 8013dde:	4621      	mov	r1, r4
 8013de0:	4640      	mov	r0, r8
 8013de2:	f7fd fd47 	bl	8011874 <_free_r>
 8013de6:	463c      	mov	r4, r7
 8013de8:	e7e0      	b.n	8013dac <_realloc_r+0x1e>

08013dea <__ascii_wctomb>:
 8013dea:	4603      	mov	r3, r0
 8013dec:	4608      	mov	r0, r1
 8013dee:	b141      	cbz	r1, 8013e02 <__ascii_wctomb+0x18>
 8013df0:	2aff      	cmp	r2, #255	@ 0xff
 8013df2:	d904      	bls.n	8013dfe <__ascii_wctomb+0x14>
 8013df4:	228a      	movs	r2, #138	@ 0x8a
 8013df6:	601a      	str	r2, [r3, #0]
 8013df8:	f04f 30ff 	mov.w	r0, #4294967295
 8013dfc:	4770      	bx	lr
 8013dfe:	700a      	strb	r2, [r1, #0]
 8013e00:	2001      	movs	r0, #1
 8013e02:	4770      	bx	lr

08013e04 <_malloc_usable_size_r>:
 8013e04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013e08:	1f18      	subs	r0, r3, #4
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	bfbc      	itt	lt
 8013e0e:	580b      	ldrlt	r3, [r1, r0]
 8013e10:	18c0      	addlt	r0, r0, r3
 8013e12:	4770      	bx	lr

08013e14 <_init>:
 8013e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e16:	bf00      	nop
 8013e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013e1a:	bc08      	pop	{r3}
 8013e1c:	469e      	mov	lr, r3
 8013e1e:	4770      	bx	lr

08013e20 <_fini>:
 8013e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e22:	bf00      	nop
 8013e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013e26:	bc08      	pop	{r3}
 8013e28:	469e      	mov	lr, r3
 8013e2a:	4770      	bx	lr
