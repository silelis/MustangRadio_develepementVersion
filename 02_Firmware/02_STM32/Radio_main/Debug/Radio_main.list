
Radio_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001425c  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ab4  08014510  08014510  00015510  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014fc4  08014fc4  00015fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08014fcc  08014fcc  00015fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08014fd0  08014fd0  00015fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001dc  24000000  08014fd4  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004da4  240001dc  080151b0  000161dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24004f80  080151b0  00016f80  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000161dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   000339ff  00000000  00000000  0001620a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006a19  00000000  00000000  00049c09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001fe8  00000000  00000000  00050628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000018a5  00000000  00000000  00052610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003adfb  00000000  00000000  00053eb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000306c9  00000000  00000000  0008ecb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00153ceb  00000000  00000000  000bf379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00213064  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009904  00000000  00000000  002130a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008b  00000000  00000000  0021c9ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240001dc 	.word	0x240001dc
 80002cc:	00000000 	.word	0x00000000
 80002d0:	080144f4 	.word	0x080144f4

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240001e0 	.word	0x240001e0
 80002ec:	080144f4 	.word	0x080144f4

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <strlen>:
 8000390:	4603      	mov	r3, r0
 8000392:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000396:	2a00      	cmp	r2, #0
 8000398:	d1fb      	bne.n	8000392 <strlen+0x2>
 800039a:	1a18      	subs	r0, r3, r0
 800039c:	3801      	subs	r0, #1
 800039e:	4770      	bx	lr

080003a0 <__aeabi_drsub>:
 80003a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003a4:	e002      	b.n	80003ac <__adddf3>
 80003a6:	bf00      	nop

080003a8 <__aeabi_dsub>:
 80003a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003ac <__adddf3>:
 80003ac:	b530      	push	{r4, r5, lr}
 80003ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003b6:	ea94 0f05 	teq	r4, r5
 80003ba:	bf08      	it	eq
 80003bc:	ea90 0f02 	teqeq	r0, r2
 80003c0:	bf1f      	itttt	ne
 80003c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d2:	f000 80e2 	beq.w	800059a <__adddf3+0x1ee>
 80003d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003de:	bfb8      	it	lt
 80003e0:	426d      	neglt	r5, r5
 80003e2:	dd0c      	ble.n	80003fe <__adddf3+0x52>
 80003e4:	442c      	add	r4, r5
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	ea82 0000 	eor.w	r0, r2, r0
 80003f2:	ea83 0101 	eor.w	r1, r3, r1
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	2d36      	cmp	r5, #54	@ 0x36
 8000400:	bf88      	it	hi
 8000402:	bd30      	pophi	{r4, r5, pc}
 8000404:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000408:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800040c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000410:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000414:	d002      	beq.n	800041c <__adddf3+0x70>
 8000416:	4240      	negs	r0, r0
 8000418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800041c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000420:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000424:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x84>
 800042a:	4252      	negs	r2, r2
 800042c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000430:	ea94 0f05 	teq	r4, r5
 8000434:	f000 80a7 	beq.w	8000586 <__adddf3+0x1da>
 8000438:	f1a4 0401 	sub.w	r4, r4, #1
 800043c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000440:	db0d      	blt.n	800045e <__adddf3+0xb2>
 8000442:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000446:	fa22 f205 	lsr.w	r2, r2, r5
 800044a:	1880      	adds	r0, r0, r2
 800044c:	f141 0100 	adc.w	r1, r1, #0
 8000450:	fa03 f20e 	lsl.w	r2, r3, lr
 8000454:	1880      	adds	r0, r0, r2
 8000456:	fa43 f305 	asr.w	r3, r3, r5
 800045a:	4159      	adcs	r1, r3
 800045c:	e00e      	b.n	800047c <__adddf3+0xd0>
 800045e:	f1a5 0520 	sub.w	r5, r5, #32
 8000462:	f10e 0e20 	add.w	lr, lr, #32
 8000466:	2a01      	cmp	r2, #1
 8000468:	fa03 fc0e 	lsl.w	ip, r3, lr
 800046c:	bf28      	it	cs
 800046e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000472:	fa43 f305 	asr.w	r3, r3, r5
 8000476:	18c0      	adds	r0, r0, r3
 8000478:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000480:	d507      	bpl.n	8000492 <__adddf3+0xe6>
 8000482:	f04f 0e00 	mov.w	lr, #0
 8000486:	f1dc 0c00 	rsbs	ip, ip, #0
 800048a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800048e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000492:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000496:	d31b      	bcc.n	80004d0 <__adddf3+0x124>
 8000498:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800049c:	d30c      	bcc.n	80004b8 <__adddf3+0x10c>
 800049e:	0849      	lsrs	r1, r1, #1
 80004a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004a8:	f104 0401 	add.w	r4, r4, #1
 80004ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004b4:	f080 809a 	bcs.w	80005ec <__adddf3+0x240>
 80004b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004bc:	bf08      	it	eq
 80004be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c2:	f150 0000 	adcs.w	r0, r0, #0
 80004c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ca:	ea41 0105 	orr.w	r1, r1, r5
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d4:	4140      	adcs	r0, r0
 80004d6:	eb41 0101 	adc.w	r1, r1, r1
 80004da:	3c01      	subs	r4, #1
 80004dc:	bf28      	it	cs
 80004de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004e2:	d2e9      	bcs.n	80004b8 <__adddf3+0x10c>
 80004e4:	f091 0f00 	teq	r1, #0
 80004e8:	bf04      	itt	eq
 80004ea:	4601      	moveq	r1, r0
 80004ec:	2000      	moveq	r0, #0
 80004ee:	fab1 f381 	clz	r3, r1
 80004f2:	bf08      	it	eq
 80004f4:	3320      	addeq	r3, #32
 80004f6:	f1a3 030b 	sub.w	r3, r3, #11
 80004fa:	f1b3 0220 	subs.w	r2, r3, #32
 80004fe:	da0c      	bge.n	800051a <__adddf3+0x16e>
 8000500:	320c      	adds	r2, #12
 8000502:	dd08      	ble.n	8000516 <__adddf3+0x16a>
 8000504:	f102 0c14 	add.w	ip, r2, #20
 8000508:	f1c2 020c 	rsb	r2, r2, #12
 800050c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000510:	fa21 f102 	lsr.w	r1, r1, r2
 8000514:	e00c      	b.n	8000530 <__adddf3+0x184>
 8000516:	f102 0214 	add.w	r2, r2, #20
 800051a:	bfd8      	it	le
 800051c:	f1c2 0c20 	rsble	ip, r2, #32
 8000520:	fa01 f102 	lsl.w	r1, r1, r2
 8000524:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000528:	bfdc      	itt	le
 800052a:	ea41 010c 	orrle.w	r1, r1, ip
 800052e:	4090      	lslle	r0, r2
 8000530:	1ae4      	subs	r4, r4, r3
 8000532:	bfa2      	ittt	ge
 8000534:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000538:	4329      	orrge	r1, r5
 800053a:	bd30      	popge	{r4, r5, pc}
 800053c:	ea6f 0404 	mvn.w	r4, r4
 8000540:	3c1f      	subs	r4, #31
 8000542:	da1c      	bge.n	800057e <__adddf3+0x1d2>
 8000544:	340c      	adds	r4, #12
 8000546:	dc0e      	bgt.n	8000566 <__adddf3+0x1ba>
 8000548:	f104 0414 	add.w	r4, r4, #20
 800054c:	f1c4 0220 	rsb	r2, r4, #32
 8000550:	fa20 f004 	lsr.w	r0, r0, r4
 8000554:	fa01 f302 	lsl.w	r3, r1, r2
 8000558:	ea40 0003 	orr.w	r0, r0, r3
 800055c:	fa21 f304 	lsr.w	r3, r1, r4
 8000560:	ea45 0103 	orr.w	r1, r5, r3
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f1c4 040c 	rsb	r4, r4, #12
 800056a:	f1c4 0220 	rsb	r2, r4, #32
 800056e:	fa20 f002 	lsr.w	r0, r0, r2
 8000572:	fa01 f304 	lsl.w	r3, r1, r4
 8000576:	ea40 0003 	orr.w	r0, r0, r3
 800057a:	4629      	mov	r1, r5
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	fa21 f004 	lsr.w	r0, r1, r4
 8000582:	4629      	mov	r1, r5
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f094 0f00 	teq	r4, #0
 800058a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800058e:	bf06      	itte	eq
 8000590:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000594:	3401      	addeq	r4, #1
 8000596:	3d01      	subne	r5, #1
 8000598:	e74e      	b.n	8000438 <__adddf3+0x8c>
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf18      	it	ne
 80005a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a4:	d029      	beq.n	80005fa <__adddf3+0x24e>
 80005a6:	ea94 0f05 	teq	r4, r5
 80005aa:	bf08      	it	eq
 80005ac:	ea90 0f02 	teqeq	r0, r2
 80005b0:	d005      	beq.n	80005be <__adddf3+0x212>
 80005b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005b6:	bf04      	itt	eq
 80005b8:	4619      	moveq	r1, r3
 80005ba:	4610      	moveq	r0, r2
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	ea91 0f03 	teq	r1, r3
 80005c2:	bf1e      	ittt	ne
 80005c4:	2100      	movne	r1, #0
 80005c6:	2000      	movne	r0, #0
 80005c8:	bd30      	popne	{r4, r5, pc}
 80005ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ce:	d105      	bne.n	80005dc <__adddf3+0x230>
 80005d0:	0040      	lsls	r0, r0, #1
 80005d2:	4149      	adcs	r1, r1
 80005d4:	bf28      	it	cs
 80005d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd30      	pop	{r4, r5, pc}
 80005dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005e0:	bf3c      	itt	cc
 80005e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005e6:	bd30      	popcc	{r4, r5, pc}
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005fe:	bf1a      	itte	ne
 8000600:	4619      	movne	r1, r3
 8000602:	4610      	movne	r0, r2
 8000604:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000608:	bf1c      	itt	ne
 800060a:	460b      	movne	r3, r1
 800060c:	4602      	movne	r2, r0
 800060e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000612:	bf06      	itte	eq
 8000614:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000618:	ea91 0f03 	teqeq	r1, r3
 800061c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop

08000624 <__aeabi_ui2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f04f 0500 	mov.w	r5, #0
 800063c:	f04f 0100 	mov.w	r1, #0
 8000640:	e750      	b.n	80004e4 <__adddf3+0x138>
 8000642:	bf00      	nop

08000644 <__aeabi_i2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800065c:	bf48      	it	mi
 800065e:	4240      	negmi	r0, r0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e73e      	b.n	80004e4 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_f2d>:
 8000668:	0042      	lsls	r2, r0, #1
 800066a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800066e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000672:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000676:	bf1f      	itttt	ne
 8000678:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800067c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000680:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000684:	4770      	bxne	lr
 8000686:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800068a:	bf08      	it	eq
 800068c:	4770      	bxeq	lr
 800068e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000692:	bf04      	itt	eq
 8000694:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000698:	4770      	bxeq	lr
 800069a:	b530      	push	{r4, r5, lr}
 800069c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	e71c      	b.n	80004e4 <__adddf3+0x138>
 80006aa:	bf00      	nop

080006ac <__aeabi_ul2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	e00a      	b.n	80006d2 <__aeabi_l2d+0x16>

080006bc <__aeabi_l2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ca:	d502      	bpl.n	80006d2 <__aeabi_l2d+0x16>
 80006cc:	4240      	negs	r0, r0
 80006ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006de:	f43f aed8 	beq.w	8000492 <__adddf3+0xe6>
 80006e2:	f04f 0203 	mov.w	r2, #3
 80006e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ea:	bf18      	it	ne
 80006ec:	3203      	addne	r2, #3
 80006ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f2:	bf18      	it	ne
 80006f4:	3203      	addne	r2, #3
 80006f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fa:	f1c2 0320 	rsb	r3, r2, #32
 80006fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 fe03 	lsl.w	lr, r1, r3
 800070a:	ea40 000e 	orr.w	r0, r0, lr
 800070e:	fa21 f102 	lsr.w	r1, r1, r2
 8000712:	4414      	add	r4, r2
 8000714:	e6bd      	b.n	8000492 <__adddf3+0xe6>
 8000716:	bf00      	nop

08000718 <__aeabi_uldivmod>:
 8000718:	b953      	cbnz	r3, 8000730 <__aeabi_uldivmod+0x18>
 800071a:	b94a      	cbnz	r2, 8000730 <__aeabi_uldivmod+0x18>
 800071c:	2900      	cmp	r1, #0
 800071e:	bf08      	it	eq
 8000720:	2800      	cmpeq	r0, #0
 8000722:	bf1c      	itt	ne
 8000724:	f04f 31ff 	movne.w	r1, #4294967295
 8000728:	f04f 30ff 	movne.w	r0, #4294967295
 800072c:	f000 b9a2 	b.w	8000a74 <__aeabi_idiv0>
 8000730:	f1ad 0c08 	sub.w	ip, sp, #8
 8000734:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000738:	f000 f83e 	bl	80007b8 <__udivmoddi4>
 800073c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000740:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000744:	b004      	add	sp, #16
 8000746:	4770      	bx	lr

08000748 <__aeabi_d2lz>:
 8000748:	b508      	push	{r3, lr}
 800074a:	4602      	mov	r2, r0
 800074c:	460b      	mov	r3, r1
 800074e:	ec43 2b17 	vmov	d7, r2, r3
 8000752:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800075a:	d403      	bmi.n	8000764 <__aeabi_d2lz+0x1c>
 800075c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000760:	f000 b80a 	b.w	8000778 <__aeabi_d2ulz>
 8000764:	eeb1 7b47 	vneg.f64	d7, d7
 8000768:	ec51 0b17 	vmov	r0, r1, d7
 800076c:	f000 f804 	bl	8000778 <__aeabi_d2ulz>
 8000770:	4240      	negs	r0, r0
 8000772:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000776:	bd08      	pop	{r3, pc}

08000778 <__aeabi_d2ulz>:
 8000778:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007a8 <__aeabi_d2ulz+0x30>
 800077c:	ec41 0b17 	vmov	d7, r0, r1
 8000780:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007b0 <__aeabi_d2ulz+0x38>
 8000784:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000788:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800078c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000790:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000794:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000798:	ee16 1a10 	vmov	r1, s12
 800079c:	ee17 0a90 	vmov	r0, s15
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	f3af 8000 	nop.w
 80007a8:	00000000 	.word	0x00000000
 80007ac:	3df00000 	.word	0x3df00000
 80007b0:	00000000 	.word	0x00000000
 80007b4:	41f00000 	.word	0x41f00000

080007b8 <__udivmoddi4>:
 80007b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007bc:	9d08      	ldr	r5, [sp, #32]
 80007be:	460c      	mov	r4, r1
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d14e      	bne.n	8000862 <__udivmoddi4+0xaa>
 80007c4:	4694      	mov	ip, r2
 80007c6:	458c      	cmp	ip, r1
 80007c8:	4686      	mov	lr, r0
 80007ca:	fab2 f282 	clz	r2, r2
 80007ce:	d962      	bls.n	8000896 <__udivmoddi4+0xde>
 80007d0:	b14a      	cbz	r2, 80007e6 <__udivmoddi4+0x2e>
 80007d2:	f1c2 0320 	rsb	r3, r2, #32
 80007d6:	4091      	lsls	r1, r2
 80007d8:	fa20 f303 	lsr.w	r3, r0, r3
 80007dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007e0:	4319      	orrs	r1, r3
 80007e2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007e6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007ea:	fa1f f68c 	uxth.w	r6, ip
 80007ee:	fbb1 f4f7 	udiv	r4, r1, r7
 80007f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007f6:	fb07 1114 	mls	r1, r7, r4, r1
 80007fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007fe:	fb04 f106 	mul.w	r1, r4, r6
 8000802:	4299      	cmp	r1, r3
 8000804:	d90a      	bls.n	800081c <__udivmoddi4+0x64>
 8000806:	eb1c 0303 	adds.w	r3, ip, r3
 800080a:	f104 30ff 	add.w	r0, r4, #4294967295
 800080e:	f080 8112 	bcs.w	8000a36 <__udivmoddi4+0x27e>
 8000812:	4299      	cmp	r1, r3
 8000814:	f240 810f 	bls.w	8000a36 <__udivmoddi4+0x27e>
 8000818:	3c02      	subs	r4, #2
 800081a:	4463      	add	r3, ip
 800081c:	1a59      	subs	r1, r3, r1
 800081e:	fa1f f38e 	uxth.w	r3, lr
 8000822:	fbb1 f0f7 	udiv	r0, r1, r7
 8000826:	fb07 1110 	mls	r1, r7, r0, r1
 800082a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800082e:	fb00 f606 	mul.w	r6, r0, r6
 8000832:	429e      	cmp	r6, r3
 8000834:	d90a      	bls.n	800084c <__udivmoddi4+0x94>
 8000836:	eb1c 0303 	adds.w	r3, ip, r3
 800083a:	f100 31ff 	add.w	r1, r0, #4294967295
 800083e:	f080 80fc 	bcs.w	8000a3a <__udivmoddi4+0x282>
 8000842:	429e      	cmp	r6, r3
 8000844:	f240 80f9 	bls.w	8000a3a <__udivmoddi4+0x282>
 8000848:	4463      	add	r3, ip
 800084a:	3802      	subs	r0, #2
 800084c:	1b9b      	subs	r3, r3, r6
 800084e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000852:	2100      	movs	r1, #0
 8000854:	b11d      	cbz	r5, 800085e <__udivmoddi4+0xa6>
 8000856:	40d3      	lsrs	r3, r2
 8000858:	2200      	movs	r2, #0
 800085a:	e9c5 3200 	strd	r3, r2, [r5]
 800085e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000862:	428b      	cmp	r3, r1
 8000864:	d905      	bls.n	8000872 <__udivmoddi4+0xba>
 8000866:	b10d      	cbz	r5, 800086c <__udivmoddi4+0xb4>
 8000868:	e9c5 0100 	strd	r0, r1, [r5]
 800086c:	2100      	movs	r1, #0
 800086e:	4608      	mov	r0, r1
 8000870:	e7f5      	b.n	800085e <__udivmoddi4+0xa6>
 8000872:	fab3 f183 	clz	r1, r3
 8000876:	2900      	cmp	r1, #0
 8000878:	d146      	bne.n	8000908 <__udivmoddi4+0x150>
 800087a:	42a3      	cmp	r3, r4
 800087c:	d302      	bcc.n	8000884 <__udivmoddi4+0xcc>
 800087e:	4290      	cmp	r0, r2
 8000880:	f0c0 80f0 	bcc.w	8000a64 <__udivmoddi4+0x2ac>
 8000884:	1a86      	subs	r6, r0, r2
 8000886:	eb64 0303 	sbc.w	r3, r4, r3
 800088a:	2001      	movs	r0, #1
 800088c:	2d00      	cmp	r5, #0
 800088e:	d0e6      	beq.n	800085e <__udivmoddi4+0xa6>
 8000890:	e9c5 6300 	strd	r6, r3, [r5]
 8000894:	e7e3      	b.n	800085e <__udivmoddi4+0xa6>
 8000896:	2a00      	cmp	r2, #0
 8000898:	f040 8090 	bne.w	80009bc <__udivmoddi4+0x204>
 800089c:	eba1 040c 	sub.w	r4, r1, ip
 80008a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008a4:	fa1f f78c 	uxth.w	r7, ip
 80008a8:	2101      	movs	r1, #1
 80008aa:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008b2:	fb08 4416 	mls	r4, r8, r6, r4
 80008b6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008ba:	fb07 f006 	mul.w	r0, r7, r6
 80008be:	4298      	cmp	r0, r3
 80008c0:	d908      	bls.n	80008d4 <__udivmoddi4+0x11c>
 80008c2:	eb1c 0303 	adds.w	r3, ip, r3
 80008c6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ca:	d202      	bcs.n	80008d2 <__udivmoddi4+0x11a>
 80008cc:	4298      	cmp	r0, r3
 80008ce:	f200 80cd 	bhi.w	8000a6c <__udivmoddi4+0x2b4>
 80008d2:	4626      	mov	r6, r4
 80008d4:	1a1c      	subs	r4, r3, r0
 80008d6:	fa1f f38e 	uxth.w	r3, lr
 80008da:	fbb4 f0f8 	udiv	r0, r4, r8
 80008de:	fb08 4410 	mls	r4, r8, r0, r4
 80008e2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008e6:	fb00 f707 	mul.w	r7, r0, r7
 80008ea:	429f      	cmp	r7, r3
 80008ec:	d908      	bls.n	8000900 <__udivmoddi4+0x148>
 80008ee:	eb1c 0303 	adds.w	r3, ip, r3
 80008f2:	f100 34ff 	add.w	r4, r0, #4294967295
 80008f6:	d202      	bcs.n	80008fe <__udivmoddi4+0x146>
 80008f8:	429f      	cmp	r7, r3
 80008fa:	f200 80b0 	bhi.w	8000a5e <__udivmoddi4+0x2a6>
 80008fe:	4620      	mov	r0, r4
 8000900:	1bdb      	subs	r3, r3, r7
 8000902:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000906:	e7a5      	b.n	8000854 <__udivmoddi4+0x9c>
 8000908:	f1c1 0620 	rsb	r6, r1, #32
 800090c:	408b      	lsls	r3, r1
 800090e:	fa22 f706 	lsr.w	r7, r2, r6
 8000912:	431f      	orrs	r7, r3
 8000914:	fa20 fc06 	lsr.w	ip, r0, r6
 8000918:	fa04 f301 	lsl.w	r3, r4, r1
 800091c:	ea43 030c 	orr.w	r3, r3, ip
 8000920:	40f4      	lsrs	r4, r6
 8000922:	fa00 f801 	lsl.w	r8, r0, r1
 8000926:	0c38      	lsrs	r0, r7, #16
 8000928:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800092c:	fbb4 fef0 	udiv	lr, r4, r0
 8000930:	fa1f fc87 	uxth.w	ip, r7
 8000934:	fb00 441e 	mls	r4, r0, lr, r4
 8000938:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800093c:	fb0e f90c 	mul.w	r9, lr, ip
 8000940:	45a1      	cmp	r9, r4
 8000942:	fa02 f201 	lsl.w	r2, r2, r1
 8000946:	d90a      	bls.n	800095e <__udivmoddi4+0x1a6>
 8000948:	193c      	adds	r4, r7, r4
 800094a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800094e:	f080 8084 	bcs.w	8000a5a <__udivmoddi4+0x2a2>
 8000952:	45a1      	cmp	r9, r4
 8000954:	f240 8081 	bls.w	8000a5a <__udivmoddi4+0x2a2>
 8000958:	f1ae 0e02 	sub.w	lr, lr, #2
 800095c:	443c      	add	r4, r7
 800095e:	eba4 0409 	sub.w	r4, r4, r9
 8000962:	fa1f f983 	uxth.w	r9, r3
 8000966:	fbb4 f3f0 	udiv	r3, r4, r0
 800096a:	fb00 4413 	mls	r4, r0, r3, r4
 800096e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000972:	fb03 fc0c 	mul.w	ip, r3, ip
 8000976:	45a4      	cmp	ip, r4
 8000978:	d907      	bls.n	800098a <__udivmoddi4+0x1d2>
 800097a:	193c      	adds	r4, r7, r4
 800097c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000980:	d267      	bcs.n	8000a52 <__udivmoddi4+0x29a>
 8000982:	45a4      	cmp	ip, r4
 8000984:	d965      	bls.n	8000a52 <__udivmoddi4+0x29a>
 8000986:	3b02      	subs	r3, #2
 8000988:	443c      	add	r4, r7
 800098a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800098e:	fba0 9302 	umull	r9, r3, r0, r2
 8000992:	eba4 040c 	sub.w	r4, r4, ip
 8000996:	429c      	cmp	r4, r3
 8000998:	46ce      	mov	lr, r9
 800099a:	469c      	mov	ip, r3
 800099c:	d351      	bcc.n	8000a42 <__udivmoddi4+0x28a>
 800099e:	d04e      	beq.n	8000a3e <__udivmoddi4+0x286>
 80009a0:	b155      	cbz	r5, 80009b8 <__udivmoddi4+0x200>
 80009a2:	ebb8 030e 	subs.w	r3, r8, lr
 80009a6:	eb64 040c 	sbc.w	r4, r4, ip
 80009aa:	fa04 f606 	lsl.w	r6, r4, r6
 80009ae:	40cb      	lsrs	r3, r1
 80009b0:	431e      	orrs	r6, r3
 80009b2:	40cc      	lsrs	r4, r1
 80009b4:	e9c5 6400 	strd	r6, r4, [r5]
 80009b8:	2100      	movs	r1, #0
 80009ba:	e750      	b.n	800085e <__udivmoddi4+0xa6>
 80009bc:	f1c2 0320 	rsb	r3, r2, #32
 80009c0:	fa20 f103 	lsr.w	r1, r0, r3
 80009c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009c8:	fa24 f303 	lsr.w	r3, r4, r3
 80009cc:	4094      	lsls	r4, r2
 80009ce:	430c      	orrs	r4, r1
 80009d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009d4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009d8:	fa1f f78c 	uxth.w	r7, ip
 80009dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009e0:	fb08 3110 	mls	r1, r8, r0, r3
 80009e4:	0c23      	lsrs	r3, r4, #16
 80009e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009ea:	fb00 f107 	mul.w	r1, r0, r7
 80009ee:	4299      	cmp	r1, r3
 80009f0:	d908      	bls.n	8000a04 <__udivmoddi4+0x24c>
 80009f2:	eb1c 0303 	adds.w	r3, ip, r3
 80009f6:	f100 36ff 	add.w	r6, r0, #4294967295
 80009fa:	d22c      	bcs.n	8000a56 <__udivmoddi4+0x29e>
 80009fc:	4299      	cmp	r1, r3
 80009fe:	d92a      	bls.n	8000a56 <__udivmoddi4+0x29e>
 8000a00:	3802      	subs	r0, #2
 8000a02:	4463      	add	r3, ip
 8000a04:	1a5b      	subs	r3, r3, r1
 8000a06:	b2a4      	uxth	r4, r4
 8000a08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a14:	fb01 f307 	mul.w	r3, r1, r7
 8000a18:	42a3      	cmp	r3, r4
 8000a1a:	d908      	bls.n	8000a2e <__udivmoddi4+0x276>
 8000a1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a24:	d213      	bcs.n	8000a4e <__udivmoddi4+0x296>
 8000a26:	42a3      	cmp	r3, r4
 8000a28:	d911      	bls.n	8000a4e <__udivmoddi4+0x296>
 8000a2a:	3902      	subs	r1, #2
 8000a2c:	4464      	add	r4, ip
 8000a2e:	1ae4      	subs	r4, r4, r3
 8000a30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a34:	e739      	b.n	80008aa <__udivmoddi4+0xf2>
 8000a36:	4604      	mov	r4, r0
 8000a38:	e6f0      	b.n	800081c <__udivmoddi4+0x64>
 8000a3a:	4608      	mov	r0, r1
 8000a3c:	e706      	b.n	800084c <__udivmoddi4+0x94>
 8000a3e:	45c8      	cmp	r8, r9
 8000a40:	d2ae      	bcs.n	80009a0 <__udivmoddi4+0x1e8>
 8000a42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a4a:	3801      	subs	r0, #1
 8000a4c:	e7a8      	b.n	80009a0 <__udivmoddi4+0x1e8>
 8000a4e:	4631      	mov	r1, r6
 8000a50:	e7ed      	b.n	8000a2e <__udivmoddi4+0x276>
 8000a52:	4603      	mov	r3, r0
 8000a54:	e799      	b.n	800098a <__udivmoddi4+0x1d2>
 8000a56:	4630      	mov	r0, r6
 8000a58:	e7d4      	b.n	8000a04 <__udivmoddi4+0x24c>
 8000a5a:	46d6      	mov	lr, sl
 8000a5c:	e77f      	b.n	800095e <__udivmoddi4+0x1a6>
 8000a5e:	4463      	add	r3, ip
 8000a60:	3802      	subs	r0, #2
 8000a62:	e74d      	b.n	8000900 <__udivmoddi4+0x148>
 8000a64:	4606      	mov	r6, r0
 8000a66:	4623      	mov	r3, r4
 8000a68:	4608      	mov	r0, r1
 8000a6a:	e70f      	b.n	800088c <__udivmoddi4+0xd4>
 8000a6c:	3e02      	subs	r6, #2
 8000a6e:	4463      	add	r3, ip
 8000a70:	e730      	b.n	80008d4 <__udivmoddi4+0x11c>
 8000a72:	bf00      	nop

08000a74 <__aeabi_idiv0>:
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <_Z18calculate_checksumPKvj>:
 * size_t length - długość bufora (z uwzględnieniem pola na wartość
 *                     CRC) z ktorego należy wyliczyć sume kontrolną.                 
 * Returns:
 * NONE
 *---------------------------------------------------------------*/
uint8_t calculate_checksum(const void *buffer, size_t length) {
 8000a78:	b480      	push	{r7}
 8000a7a:	b087      	sub	sp, #28
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	6039      	str	r1, [r7, #0]
	const size_t bufferOffset = 1;        //In my solution bufferOffset is required because 1st 8 bits of buffer is uint8_t CRC field
 8000a82:	2301      	movs	r3, #1
 8000a84:	60fb      	str	r3, [r7, #12]
	const uint8_t *data = (const uint8_t *)buffer;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	60bb      	str	r3, [r7, #8]
	// Zwraca 0 gdy CRC jest ustawione na NONE
	return 0;

#elif I2C_SLAVE_CRC_METHOD == I2C_SLAVE_CRC_XOR
	// Oblicza sumę kontrolną metodą XOR
	uint8_t checksum = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	75fb      	strb	r3, [r7, #23]
	for (size_t i = 0 + bufferOffset; i < length; i++) {
 8000a8e:	2301      	movs	r3, #1
 8000a90:	613b      	str	r3, [r7, #16]
 8000a92:	e009      	b.n	8000aa8 <_Z18calculate_checksumPKvj+0x30>
		checksum ^= data[i];
 8000a94:	68ba      	ldr	r2, [r7, #8]
 8000a96:	693b      	ldr	r3, [r7, #16]
 8000a98:	4413      	add	r3, r2
 8000a9a:	781a      	ldrb	r2, [r3, #0]
 8000a9c:	7dfb      	ldrb	r3, [r7, #23]
 8000a9e:	4053      	eors	r3, r2
 8000aa0:	75fb      	strb	r3, [r7, #23]
	for (size_t i = 0 + bufferOffset; i < length; i++) {
 8000aa2:	693b      	ldr	r3, [r7, #16]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	613b      	str	r3, [r7, #16]
 8000aa8:	693a      	ldr	r2, [r7, #16]
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	d3f1      	bcc.n	8000a94 <_Z18calculate_checksumPKvj+0x1c>
	}
	return checksum;
 8000ab0:	7dfb      	ldrb	r3, [r7, #23]
	return crc;

#else
#error "Nieprawidłowa metoda CRC ustawiona w I2C_SLAVE_CRC_METHOD"
#endif
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	371c      	adds	r7, #28
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
	...

08000ac0 <_ZN27esp32_i2cComunicationDriverC1EP9i2cMaster>:
 * @return [NONE]
 *
 * @note   NONE
 * @warning NONE
 *******************************************************************/
esp32_i2cComunicationDriver::esp32_i2cComunicationDriver(i2cMaster* pointer_to_i2cMasterObject) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	6039      	str	r1, [r7, #0]
 8000aca:	4a1f      	ldr	r2, [pc, #124]	@ (8000b48 <_ZN27esp32_i2cComunicationDriverC1EP9i2cMaster+0x88>)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	223c      	movs	r2, #60	@ 0x3c
 8000ad4:	711a      	strb	r2, [r3, #4]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4a1c      	ldr	r2, [pc, #112]	@ (8000b4c <_ZN27esp32_i2cComunicationDriverC1EP9i2cMaster+0x8c>)
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2215      	movs	r2, #21
 8000ae0:	731a      	strb	r2, [r3, #12]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2205      	movs	r2, #5
 8000ae6:	81da      	strh	r2, [r3, #14]
	// TODO Auto-generated constructor stub
		this->pi2cMaster = pointer_to_i2cMasterObject;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	683a      	ldr	r2, [r7, #0]
 8000aec:	611a      	str	r2, [r3, #16]
		configASSERT(this->esp32IntrrruptRequest_CountingSemaphore = xSemaphoreCreateCounting(this->esp32InterruptRequestCountingSemaphore_MAX, 0));
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	7b1b      	ldrb	r3, [r3, #12]
 8000af2:	2100      	movs	r1, #0
 8000af4:	4618      	mov	r0, r3
 8000af6:	f00c f9d2 	bl	800ce9e <xQueueCreateCountingSemaphore>
 8000afa:	4602      	mov	r2, r0
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	615a      	str	r2, [r3, #20]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	695b      	ldr	r3, [r3, #20]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	bf0c      	ite	eq
 8000b08:	2301      	moveq	r3, #1
 8000b0a:	2300      	movne	r3, #0
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d00b      	beq.n	8000b2a <_ZN27esp32_i2cComunicationDriverC1EP9i2cMaster+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b16:	f383 8811 	msr	BASEPRI, r3
 8000b1a:	f3bf 8f6f 	isb	sy
 8000b1e:	f3bf 8f4f 	dsb	sy
 8000b22:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000b24:	bf00      	nop
 8000b26:	bf00      	nop
 8000b28:	e7fd      	b.n	8000b26 <_ZN27esp32_i2cComunicationDriverC1EP9i2cMaster+0x66>
		this->esp32DynamicmMemeoryAlocationError=this->esp32InrerruptRequest_CountingSemaphoreOverflowError=pdFALSE;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	699a      	ldr	r2, [r3, #24]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	61da      	str	r2, [r3, #28]
		this->esp32CrcSumCounterError=0;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	841a      	strh	r2, [r3, #32]
}
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4618      	mov	r0, r3
 8000b42:	3710      	adds	r7, #16
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	08014b08 	.word	0x08014b08
 8000b4c:	08014510 	.word	0x08014510

08000b50 <_ZN27esp32_i2cComunicationDriver16isCrcSumCorreectE22i2cFrame_transmitQueueh>:
 * kontrolnej, dlatego metoda liczy sume kontrolną od drugiego byte'u.
 * @warning i2cFrame_transmitQueue nie zawiera otrzymanych danych tylko
 * informacje na temat otrzymanych danych i miejsce (wskaźnik) ich
 * przechowywania w RAM.
 *******************************************************************/
BaseType_t esp32_i2cComunicationDriver::isCrcSumCorreect(i2cFrame_transmitQueue I2CReceivedFrame, uint8_t	crcSum){
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	4638      	mov	r0, r7
 8000b5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if(crcSum==calculate_checksum(I2CReceivedFrame.pData, sizeof(i2cFrame_keyboardFrame)))
 8000b5e:	68bb      	ldr	r3, [r7, #8]
 8000b60:	2105      	movs	r1, #5
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff ff88 	bl	8000a78 <_Z18calculate_checksumPKvj>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	7e3b      	ldrb	r3, [r7, #24]
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	bf0c      	ite	eq
 8000b72:	2301      	moveq	r3, #1
 8000b74:	2300      	movne	r3, #0
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d004      	beq.n	8000b86 <_ZN27esp32_i2cComunicationDriver16isCrcSumCorreectE22i2cFrame_transmitQueueh+0x36>
	{
		this->esp32CrcSumCounterError=0;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	2200      	movs	r2, #0
 8000b80:	841a      	strh	r2, [r3, #32]
		return pdPASS;
 8000b82:	2301      	movs	r3, #1
 8000b84:	e00e      	b.n	8000ba4 <_ZN27esp32_i2cComunicationDriver16isCrcSumCorreectE22i2cFrame_transmitQueueh+0x54>
	}
	else{
		this->esp32CrcSumCounterError++;
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	8c1b      	ldrh	r3, [r3, #32]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	b29a      	uxth	r2, r3
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	841a      	strh	r2, [r3, #32]
		printf("%sCRC sum NOT correct: %d time(s)\r\n", this->TAG, this->esp32CrcSumCounterError);
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	6899      	ldr	r1, [r3, #8]
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	8c1b      	ldrh	r3, [r3, #32]
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	4803      	ldr	r0, [pc, #12]	@ (8000bac <_ZN27esp32_i2cComunicationDriver16isCrcSumCorreectE22i2cFrame_transmitQueueh+0x5c>)
 8000b9e:	f010 f953 	bl	8010e48 <iprintf>
		return pdFAIL;
 8000ba2:	2300      	movs	r3, #0
	}
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	08014530 	.word	0x08014530

08000bb0 <_ZN27esp32_i2cComunicationDriver4pingEv>:
 *
 * @note   W praktyce metoda ta jest odwołaniem do funkcji
 * 			HAL_I2C_GetState
 * @warning NONE
 *******************************************************************/
HAL_StatusTypeDef esp32_i2cComunicationDriver::ping(void){
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef retVal;
	this->i2cMasterSemaphoreTake();
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f000 f8a1 	bl	8000d00 <_ZN27esp32_i2cComunicationDriver22i2cMasterSemaphoreTakeEv>
	this->pi2cMaster->while_I2C_STATE_READY();
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	691b      	ldr	r3, [r3, #16]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f000 fa22 	bl	800100c <_ZN9i2cMaster21while_I2C_STATE_READYEv>
	retVal = this->pi2cMaster->ping(this->esp32i2cSlaveAdress_7bit);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	691a      	ldr	r2, [r3, #16]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	791b      	ldrb	r3, [r3, #4]
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4610      	mov	r0, r2
 8000bd4:	f000 f9a6 	bl	8000f24 <_ZN9i2cMaster4pingEt>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	73fb      	strb	r3, [r7, #15]
	this->i2cMasterSemaphoreGive();
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f000 f89d 	bl	8000d1c <_ZN27esp32_i2cComunicationDriver22i2cMasterSemaphoreGiveEv>
	return retVal;
 8000be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <_ZN27esp32_i2cComunicationDriver42incrementInterruptRequestCountingSemaphoreEv>:
 * 			danych dekrementuje semafor zliczający. Dodatkowo gdy zemafor
 * 			jest pusty to wymusza to uśpienie tasku obsługującego odczyt
 * 			danych.
 * @warning [NONE
 *******************************************************************/
void esp32_i2cComunicationDriver::incrementInterruptRequestCountingSemaphore(void){
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60fb      	str	r3, [r7, #12]
	xSemaphoreGiveFromISR(this->esp32IntrrruptRequest_CountingSemaphore, &xHigherPriorityTaskWoken);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	695b      	ldr	r3, [r3, #20]
 8000bfc:	f107 020c 	add.w	r2, r7, #12
 8000c00:	4611      	mov	r1, r2
 8000c02:	4618      	mov	r0, r3
 8000c04:	f00c fb20 	bl	800d248 <xQueueGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d007      	beq.n	8000c1e <_ZN27esp32_i2cComunicationDriver42incrementInterruptRequestCountingSemaphoreEv+0x32>
 8000c0e:	4b06      	ldr	r3, [pc, #24]	@ (8000c28 <_ZN27esp32_i2cComunicationDriver42incrementInterruptRequestCountingSemaphoreEv+0x3c>)
 8000c10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	f3bf 8f4f 	dsb	sy
 8000c1a:	f3bf 8f6f 	isb	sy
}
 8000c1e:	bf00      	nop
 8000c20:	3710      	adds	r7, #16
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	e000ed04 	.word	0xe000ed04

08000c2c <_ZN27esp32_i2cComunicationDriverD1Ev>:




esp32_i2cComunicationDriver::~esp32_i2cComunicationDriver() {
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	4a04      	ldr	r2, [pc, #16]	@ (8000c48 <_ZN27esp32_i2cComunicationDriverD1Ev+0x1c>)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
	#warning zrobic porzadny destruktor np. w destruktorze ma wyłączy ć się radio
}
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	08014b08 	.word	0x08014b08

08000c4c <_ZN27esp32_i2cComunicationDriverD0Ev>:
esp32_i2cComunicationDriver::~esp32_i2cComunicationDriver() {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
}
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f7ff ffe9 	bl	8000c2c <_ZN27esp32_i2cComunicationDriverD1Ev>
 8000c5a:	2124      	movs	r1, #36	@ 0x24
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f00f f8d7 	bl	800fe10 <_ZdlPvj>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4618      	mov	r0, r3
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <_ZN27esp32_i2cComunicationDriver29isCountingSemaphoreOverflowedEv>:
 * @return NONE
 *
 * @note   	NONE
 * @warning NONE
 *******************************************************************/
void esp32_i2cComunicationDriver::isCountingSemaphoreOverflowed(void){
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
	if( uxSemaphoreGetCount(this->esp32IntrrruptRequest_CountingSemaphore)== this->esp32InterruptRequestCountingSemaphore_MAX){		//sprawdza czy licznik esp32 interrupt request nie jest przepełniony
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	695b      	ldr	r3, [r3, #20]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f00c fd67 	bl	800d74c <uxQueueMessagesWaiting>
 8000c7e:	4602      	mov	r2, r0
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	7b1b      	ldrb	r3, [r3, #12]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	bf0c      	ite	eq
 8000c88:	2301      	moveq	r3, #1
 8000c8a:	2300      	movne	r3, #0
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d005      	beq.n	8000c9e <_ZN27esp32_i2cComunicationDriver29isCountingSemaphoreOverflowedEv+0x32>
		this->esp32InrerruptRequest_CountingSemaphoreOverflowError= pdTRUE;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2201      	movs	r2, #1
 8000c96:	619a      	str	r2, [r3, #24]
		printf("!!! ESP32 interrupt request counter overflowed   !!!\r\n");
 8000c98:	4803      	ldr	r0, [pc, #12]	@ (8000ca8 <_ZN27esp32_i2cComunicationDriver29isCountingSemaphoreOverflowedEv+0x3c>)
 8000c9a:	f010 f93d 	bl	8010f18 <puts>
	}
}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	08014554 	.word	0x08014554

08000cac <_ZN27esp32_i2cComunicationDriver32semaphoreTake__CountingSemaphoreEv>:
 *
 * @param  [NONE
 *
 * @return NONE
 *******************************************************************/
BaseType_t esp32_i2cComunicationDriver::semaphoreTake__CountingSemaphore(void){
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
	return xSemaphoreTake(this->esp32IntrrruptRequest_CountingSemaphore, portMAX_DELAY) == pdTRUE;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	695b      	ldr	r3, [r3, #20]
 8000cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f00c fc35 	bl	800d52c <xQueueSemaphoreTake>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	bf0c      	ite	eq
 8000cc8:	2301      	moveq	r3, #1
 8000cca:	2300      	movne	r3, #0
 8000ccc:	b2db      	uxtb	r3, r3
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <_ZN27esp32_i2cComunicationDriver26masterReceiveFromESP32_DMAEPht>:
 * 			HAL_I2C_Master_Receive_DMA
 *
 * @note	NONE
 * @warning	NONE
 *******************************************************************/
BaseType_t esp32_i2cComunicationDriver::masterReceiveFromESP32_DMA(uint8_t *pData, uint16_t Size){
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b084      	sub	sp, #16
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	60f8      	str	r0, [r7, #12]
 8000cde:	60b9      	str	r1, [r7, #8]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	80fb      	strh	r3, [r7, #6]
	return this->pi2cMaster->I2C_Master_Receive_DMA(this->esp32i2cSlaveAdress_7bit, pData, Size);
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	6918      	ldr	r0, [r3, #16]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	791b      	ldrb	r3, [r3, #4]
 8000cec:	4619      	mov	r1, r3
 8000cee:	88fb      	ldrh	r3, [r7, #6]
 8000cf0:	68ba      	ldr	r2, [r7, #8]
 8000cf2:	f000 f9a2 	bl	800103a <_ZN9i2cMaster22I2C_Master_Receive_DMAEtPht>
 8000cf6:	4603      	mov	r3, r0
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3710      	adds	r7, #16
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <_ZN27esp32_i2cComunicationDriver22i2cMasterSemaphoreTakeEv>:
 * @return [BaseType_t] Zwraca wartośc funkcji xSemaphoreTake
 *
 * @note   NONE
 * @warning NONE
 *******************************************************************/
BaseType_t esp32_i2cComunicationDriver::i2cMasterSemaphoreTake(void){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
	return this->pi2cMaster->i2cMasterSemaphoreTake();
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	691b      	ldr	r3, [r3, #16]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f000 f8e9 	bl	8000ee4 <_ZN9i2cMaster22i2cMasterSemaphoreTakeEv>
 8000d12:	4603      	mov	r3, r0
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <_ZN27esp32_i2cComunicationDriver22i2cMasterSemaphoreGiveEv>:
 * @return [BaseType_t] Zwraca wartośc funkcji xSemaphoreGive
 *
 * @note   NONE
 * @warning NONE
 *******************************************************************/
BaseType_t esp32_i2cComunicationDriver::i2cMasterSemaphoreGive(void){
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
	return this->pi2cMaster->i2cMasterSemaphoreGive();
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	691b      	ldr	r3, [r3, #16]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f000 f8eb 	bl	8000f04 <_ZN9i2cMaster22i2cMasterSemaphoreGiveEv>
 8000d2e:	4603      	mov	r3, r0
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <_ZN27esp32_i2cComunicationDriver21while_I2C_STATE_READYEv>:
 * @return NONE
 *
 * @note   NONE
 * @warning NONE
 *******************************************************************/
void esp32_i2cComunicationDriver::while_I2C_STATE_READY(void){
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
	pi2cMaster->while_I2C_STATE_READY();
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	691b      	ldr	r3, [r3, #16]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f000 f961 	bl	800100c <_ZN9i2cMaster21while_I2C_STATE_READYEv>
}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
	...

08000d54 <_ZN27esp32_i2cComunicationDriver33seteDynamicmMemeoryAlocationErrorEv>:
 * @return NONE
 *
 * @note   NONE
 * @warning NONE
 *******************************************************************/
void esp32_i2cComunicationDriver::seteDynamicmMemeoryAlocationError(){
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
	this->esp32DynamicmMemeoryAlocationError=pdTRUE;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2201      	movs	r2, #1
 8000d60:	61da      	str	r2, [r3, #28]
	printf("error with memory allocation\r\n");
 8000d62:	4803      	ldr	r0, [pc, #12]	@ (8000d70 <_ZN27esp32_i2cComunicationDriver33seteDynamicmMemeoryAlocationErrorEv+0x1c>)
 8000d64:	f010 f8d8 	bl	8010f18 <puts>
}
 8000d68:	bf00      	nop
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	0801458c 	.word	0x0801458c

08000d74 <_ZN27esp32_i2cComunicationDriver17parseReceivedDataE22i2cFrame_transmitQueue>:
 * @return NONE
 *
 * @note   NONE
 * @warning NONE
 *******************************************************************/
void esp32_i2cComunicationDriver::parseReceivedData(i2cFrame_transmitQueue I2CReceivedFrame){
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b088      	sub	sp, #32
 8000d78:	af02      	add	r7, sp, #8
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	4638      	mov	r0, r7
 8000d7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	i2cFrame_commonHeader tempI2cFrameCommandHeader;														//tymczasowa zmienna, do któej będa kopiowane otrzymane dane (aby zawsze uzyskać sumę crc z prawidłowego miejsca, nawert jeśli zmieni się typredef i2cFrame_commonHeader)
	memcpy(&tempI2cFrameCommandHeader, I2CReceivedFrame.pData, sizeof(i2cFrame_commonHeader));				//kopiowanie danych z otrzymanego bufora do zmiennej tymczasowej
 8000d82:	68ba      	ldr	r2, [r7, #8]
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	8811      	ldrh	r1, [r2, #0]
 8000d8a:	7892      	ldrb	r2, [r2, #2]
 8000d8c:	8019      	strh	r1, [r3, #0]
 8000d8e:	709a      	strb	r2, [r3, #2]
	if(this->isCrcSumCorreect(I2CReceivedFrame, tempI2cFrameCommandHeader.crcSum))
 8000d90:	7d3b      	ldrb	r3, [r7, #20]
 8000d92:	9300      	str	r3, [sp, #0]
 8000d94:	463b      	mov	r3, r7
 8000d96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d98:	68f8      	ldr	r0, [r7, #12]
 8000d9a:	f7ff fed9 	bl	8000b50 <_ZN27esp32_i2cComunicationDriver16isCrcSumCorreectE22i2cFrame_transmitQueueh>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	bf14      	ite	ne
 8000da4:	2301      	movne	r3, #1
 8000da6:	2300      	moveq	r3, #0
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d016      	beq.n	8000ddc <_ZN27esp32_i2cComunicationDriver17parseReceivedDataE22i2cFrame_transmitQueue+0x68>
	{
		switch(tempI2cFrameCommandHeader.commandGroup){
 8000dae:	7d7b      	ldrb	r3, [r7, #21]
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d105      	bne.n	8000dc0 <_ZN27esp32_i2cComunicationDriver17parseReceivedDataE22i2cFrame_transmitQueue+0x4c>

		case I2C_COMMAND_GROUP_KEYBOARD:
			parserFunction::keyboard((i2cFrame_keyboardFrame*)I2CReceivedFrame.pData);
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	4618      	mov	r0, r3
 8000db8:	f000 f81c 	bl	8000df4 <_ZN14parserFunction8keyboardEP22i2cFrame_keyboardFrame>
			break;
 8000dbc:	bf00      	nop
		default:
			printf("%sunknown commandGroup value:0x%x\r\n",this->TAG, tempI2cFrameCommandHeader.commandGroup);
			assert(0);
		}
	}
}
 8000dbe:	e00d      	b.n	8000ddc <_ZN27esp32_i2cComunicationDriver17parseReceivedDataE22i2cFrame_transmitQueue+0x68>
			printf("%sunknown commandGroup value:0x%x\r\n",this->TAG, tempI2cFrameCommandHeader.commandGroup);
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	7d7a      	ldrb	r2, [r7, #21]
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4806      	ldr	r0, [pc, #24]	@ (8000de4 <_ZN27esp32_i2cComunicationDriver17parseReceivedDataE22i2cFrame_transmitQueue+0x70>)
 8000dca:	f010 f83d 	bl	8010e48 <iprintf>
			assert(0);
 8000dce:	4b06      	ldr	r3, [pc, #24]	@ (8000de8 <_ZN27esp32_i2cComunicationDriver17parseReceivedDataE22i2cFrame_transmitQueue+0x74>)
 8000dd0:	4a06      	ldr	r2, [pc, #24]	@ (8000dec <_ZN27esp32_i2cComunicationDriver17parseReceivedDataE22i2cFrame_transmitQueue+0x78>)
 8000dd2:	f240 1119 	movw	r1, #281	@ 0x119
 8000dd6:	4806      	ldr	r0, [pc, #24]	@ (8000df0 <_ZN27esp32_i2cComunicationDriver17parseReceivedDataE22i2cFrame_transmitQueue+0x7c>)
 8000dd8:	f00f f844 	bl	800fe64 <__assert_func>
}
 8000ddc:	bf00      	nop
 8000dde:	3718      	adds	r7, #24
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	080145ac 	.word	0x080145ac
 8000de8:	080145d0 	.word	0x080145d0
 8000dec:	080145d4 	.word	0x080145d4
 8000df0:	08014620 	.word	0x08014620

08000df4 <_ZN14parserFunction8keyboardEP22i2cFrame_keyboardFrame>:



namespace parserFunction{

	void keyboard(i2cFrame_keyboardFrame* kbrdFrame){
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
		kbrdFrame;
		kbrdFrame->keyboardData.array;
		printf("1\r\n");
 8000dfc:	4803      	ldr	r0, [pc, #12]	@ (8000e0c <_ZN14parserFunction8keyboardEP22i2cFrame_keyboardFrame+0x18>)
 8000dfe:	f010 f88b 	bl	8010f18 <puts>

		#warning tutaj pchamy do kolejki klasy menu
		//tutaj pchamy do kolejki klasy menu
	}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	08014658 	.word	0x08014658

08000e10 <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef>:
 */

//#include <i2cEngine.h>
#include "SileliS_code/i2cEngine.h"

i2cMaster::i2cMaster(I2C_HandleTypeDef *hi2c1) {
 8000e10:	b590      	push	{r4, r7, lr}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	6039      	str	r1, [r7, #0]
 8000e1a:	4a2c      	ldr	r2, [pc, #176]	@ (8000ecc <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef+0xbc>)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4a2b      	ldr	r2, [pc, #172]	@ (8000ed0 <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef+0xc0>)
 8000e24:	60da      	str	r2, [r3, #12]
	// TODO Auto-generated constructor stub
	this->p_hi2c1 =hi2c1;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	683a      	ldr	r2, [r7, #0]
 8000e2a:	609a      	str	r2, [r3, #8]
	this->pReceiveQueueObject = NULL;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	605a      	str	r2, [r3, #4]
	configASSERT(this->pReceiveQueueObject = new i2cQueue4DynamicData(DEFAULT_RECEIVE_QUEUE_SIZE));
 8000e32:	2004      	movs	r0, #4
 8000e34:	f00e fff0 	bl	800fe18 <_Znwj>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	461c      	mov	r4, r3
 8000e3c:	2119      	movs	r1, #25
 8000e3e:	4620      	mov	r0, r4
 8000e40:	f000 f916 	bl	8001070 <_ZN20i2cQueue4DynamicDataC1Em>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	605c      	str	r4, [r3, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	bf0c      	ite	eq
 8000e50:	2301      	moveq	r3, #1
 8000e52:	2300      	movne	r3, #0
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d00b      	beq.n	8000e72 <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef+0x62>
	__asm volatile
 8000e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e5e:	f383 8811 	msr	BASEPRI, r3
 8000e62:	f3bf 8f6f 	isb	sy
 8000e66:	f3bf 8f4f 	dsb	sy
 8000e6a:	60fb      	str	r3, [r7, #12]
}
 8000e6c:	bf00      	nop
 8000e6e:	bf00      	nop
 8000e70:	e7fd      	b.n	8000e6e <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef+0x5e>

//	this->esp32InterruptCounterOverflow =pdFALSE;		//reset interrupt counter overflow indicator
	assert(this->handle_i2cBinarySemaphore = xSemaphoreCreateBinary());
 8000e72:	2203      	movs	r2, #3
 8000e74:	2100      	movs	r1, #0
 8000e76:	2001      	movs	r0, #1
 8000e78:	f00b ffb3 	bl	800cde2 <xQueueGenericCreate>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	611a      	str	r2, [r3, #16]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	691b      	ldr	r3, [r3, #16]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d105      	bne.n	8000e96 <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef+0x86>
 8000e8a:	4b12      	ldr	r3, [pc, #72]	@ (8000ed4 <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef+0xc4>)
 8000e8c:	4a12      	ldr	r2, [pc, #72]	@ (8000ed8 <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef+0xc8>)
 8000e8e:	2112      	movs	r1, #18
 8000e90:	4812      	ldr	r0, [pc, #72]	@ (8000edc <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef+0xcc>)
 8000e92:	f00e ffe7 	bl	800fe64 <__assert_func>
	this->i2cMasterSemaphoreGive();
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f000 f834 	bl	8000f04 <_ZN9i2cMaster22i2cMasterSemaphoreGiveEv>
	this->i2cMasterSemaphoreTake();
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f000 f821 	bl	8000ee4 <_ZN9i2cMaster22i2cMasterSemaphoreTakeEv>
	HAL_I2C_DeInit(p_hi2c1);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f004 fde6 	bl	8005a78 <HAL_I2C_DeInit>
	MX_I2C1_Init();
 8000eac:	f000 fda6 	bl	80019fc <MX_I2C1_Init>
	//vTaskDelay(pdMS_TO_TICKS(1000));
	printf("%s bus had been initialized.\r\n",this->TAG);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	480a      	ldr	r0, [pc, #40]	@ (8000ee0 <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef+0xd0>)
 8000eb8:	f00f ffc6 	bl	8010e48 <iprintf>
	this->i2cMasterSemaphoreGive();
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f000 f821 	bl	8000f04 <_ZN9i2cMaster22i2cMasterSemaphoreGiveEv>
}
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3714      	adds	r7, #20
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd90      	pop	{r4, r7, pc}
 8000ecc:	08014b18 	.word	0x08014b18
 8000ed0:	0801465c 	.word	0x0801465c
 8000ed4:	0801466c 	.word	0x0801466c
 8000ed8:	080146a8 	.word	0x080146a8
 8000edc:	080146d4 	.word	0x080146d4
 8000ee0:	080146fc 	.word	0x080146fc

08000ee4 <_ZN9i2cMaster22i2cMasterSemaphoreTakeEv>:

BaseType_t i2cMaster::i2cMasterSemaphoreTake(void){
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
	return xSemaphoreTake(this->handle_i2cBinarySemaphore, portMAX_DELAY);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	691b      	ldr	r3, [r3, #16]
 8000ef0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f00c fb19 	bl	800d52c <xQueueSemaphoreTake>
 8000efa:	4603      	mov	r3, r0
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <_ZN9i2cMaster22i2cMasterSemaphoreGiveEv>:

BaseType_t i2cMaster::i2cMasterSemaphoreGive(void){
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
	return xSemaphoreGive(this->handle_i2cBinarySemaphore);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6918      	ldr	r0, [r3, #16]
 8000f10:	2300      	movs	r3, #0
 8000f12:	2200      	movs	r2, #0
 8000f14:	2100      	movs	r1, #0
 8000f16:	f00b fff7 	bl	800cf08 <xQueueGenericSend>
 8000f1a:	4603      	mov	r3, r0
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <_ZN9i2cMaster4pingEt>:

HAL_StatusTypeDef i2cMaster::ping(uint16_t DevAddress_7bit){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef retVal;
	retVal = HAL_I2C_IsDeviceReady(this->p_hi2c1, DevAddress_7bit<<1, 100, 1000);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6898      	ldr	r0, [r3, #8]
 8000f34:	887b      	ldrh	r3, [r7, #2]
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	b299      	uxth	r1, r3
 8000f3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f3e:	2264      	movs	r2, #100	@ 0x64
 8000f40:	f004 feba 	bl	8005cb8 <HAL_I2C_IsDeviceReady>
 8000f44:	4603      	mov	r3, r0
 8000f46:	73fb      	strb	r3, [r7, #15]
	if(retVal==HAL_OK){
 8000f48:	7bfb      	ldrb	r3, [r7, #15]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d107      	bne.n	8000f5e <_ZN9i2cMaster4pingEt+0x3a>
			printf("%s i2c slave avaliable on address: 0x%x (7bit).\r\n", this->TAG, DevAddress_7bit/*<<1*/);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	68db      	ldr	r3, [r3, #12]
 8000f52:	887a      	ldrh	r2, [r7, #2]
 8000f54:	4619      	mov	r1, r3
 8000f56:	480b      	ldr	r0, [pc, #44]	@ (8000f84 <_ZN9i2cMaster4pingEt+0x60>)
 8000f58:	f00f ff76 	bl	8010e48 <iprintf>
 8000f5c:	e00c      	b.n	8000f78 <_ZN9i2cMaster4pingEt+0x54>
	}
	else{
		printf("%s i2c slave NOT avaliable on address: 0x%x (7bit).\r\n", this->TAG, DevAddress_7bit/*<<1*/);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	68db      	ldr	r3, [r3, #12]
 8000f62:	887a      	ldrh	r2, [r7, #2]
 8000f64:	4619      	mov	r1, r3
 8000f66:	4808      	ldr	r0, [pc, #32]	@ (8000f88 <_ZN9i2cMaster4pingEt+0x64>)
 8000f68:	f00f ff6e 	bl	8010e48 <iprintf>
		assert(0);
 8000f6c:	4b07      	ldr	r3, [pc, #28]	@ (8000f8c <_ZN9i2cMaster4pingEt+0x68>)
 8000f6e:	4a08      	ldr	r2, [pc, #32]	@ (8000f90 <_ZN9i2cMaster4pingEt+0x6c>)
 8000f70:	212c      	movs	r1, #44	@ 0x2c
 8000f72:	4808      	ldr	r0, [pc, #32]	@ (8000f94 <_ZN9i2cMaster4pingEt+0x70>)
 8000f74:	f00e ff76 	bl	800fe64 <__assert_func>
	}
	return retVal;
 8000f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3710      	adds	r7, #16
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	0801471c 	.word	0x0801471c
 8000f88:	08014750 	.word	0x08014750
 8000f8c:	08014788 	.word	0x08014788
 8000f90:	0801478c 	.word	0x0801478c
 8000f94:	080146d4 	.word	0x080146d4

08000f98 <_ZN9i2cMasterD1Ev>:

i2cMaster::~i2cMaster() {
 8000f98:	b590      	push	{r4, r7, lr}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	4a11      	ldr	r2, [pc, #68]	@ (8000fe8 <_ZN9i2cMasterD1Ev+0x50>)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
	this->i2cMasterSemaphoreTake();
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff ff9c 	bl	8000ee4 <_ZN9i2cMaster22i2cMasterSemaphoreTakeEv>
	HAL_I2C_DeInit(this->p_hi2c1);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f004 fd61 	bl	8005a78 <HAL_I2C_DeInit>
	this->p_hi2c1 = NULL;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
	delete this->pReceiveQueueObject;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	685c      	ldr	r4, [r3, #4]
 8000fc0:	2c00      	cmp	r4, #0
 8000fc2:	d006      	beq.n	8000fd2 <_ZN9i2cMasterD1Ev+0x3a>
 8000fc4:	4620      	mov	r0, r4
 8000fc6:	f000 f87d 	bl	80010c4 <_ZN20i2cQueue4DynamicDataD1Ev>
 8000fca:	2104      	movs	r1, #4
 8000fcc:	4620      	mov	r0, r4
 8000fce:	f00e ff1f 	bl	800fe10 <_ZdlPvj>
	vSemaphoreDelete(this->handle_i2cBinarySemaphore);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	691b      	ldr	r3, [r3, #16]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f00c fbd7 	bl	800d78a <vQueueDelete>
}
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd90      	pop	{r4, r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	08014b18 	.word	0x08014b18

08000fec <_ZN9i2cMasterD0Ev>:
i2cMaster::~i2cMaster() {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
}
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f7ff ffcf 	bl	8000f98 <_ZN9i2cMasterD1Ev>
 8000ffa:	2114      	movs	r1, #20
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f00e ff07 	bl	800fe10 <_ZdlPvj>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4618      	mov	r0, r3
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <_ZN9i2cMaster21while_I2C_STATE_READYEv>:

void i2cMaster::while_I2C_STATE_READY(void){
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	while(HAL_I2C_GetState(this->p_hi2c1)!= HAL_I2C_STATE_READY){};
 8001014:	bf00      	nop
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	4618      	mov	r0, r3
 800101c:	f005 f815 	bl	800604a <HAL_I2C_GetState>
 8001020:	4603      	mov	r3, r0
 8001022:	2b20      	cmp	r3, #32
 8001024:	bf14      	ite	ne
 8001026:	2301      	movne	r3, #1
 8001028:	2300      	moveq	r3, #0
 800102a:	b2db      	uxtb	r3, r3
 800102c:	2b00      	cmp	r3, #0
 800102e:	d1f2      	bne.n	8001016 <_ZN9i2cMaster21while_I2C_STATE_READYEv+0xa>
}
 8001030:	bf00      	nop
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <_ZN9i2cMaster22I2C_Master_Receive_DMAEtPht>:

HAL_StatusTypeDef i2cMaster::I2C_Master_Receive_DMA(uint16_t DevAddress_7bit, uint8_t *pData, uint16_t Size){
 800103a:	b580      	push	{r7, lr}
 800103c:	b084      	sub	sp, #16
 800103e:	af00      	add	r7, sp, #0
 8001040:	60f8      	str	r0, [r7, #12]
 8001042:	607a      	str	r2, [r7, #4]
 8001044:	461a      	mov	r2, r3
 8001046:	460b      	mov	r3, r1
 8001048:	817b      	strh	r3, [r7, #10]
 800104a:	4613      	mov	r3, r2
 800104c:	813b      	strh	r3, [r7, #8]
	this->while_I2C_STATE_READY();
 800104e:	68f8      	ldr	r0, [r7, #12]
 8001050:	f7ff ffdc 	bl	800100c <_ZN9i2cMaster21while_I2C_STATE_READYEv>
	return HAL_I2C_Master_Receive_DMA(this->p_hi2c1, DevAddress_7bit<<1, pData, Size);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	6898      	ldr	r0, [r3, #8]
 8001058:	897b      	ldrh	r3, [r7, #10]
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	b299      	uxth	r1, r3
 800105e:	893b      	ldrh	r3, [r7, #8]
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	f004 fd39 	bl	8005ad8 <HAL_I2C_Master_Receive_DMA>
 8001066:	4603      	mov	r3, r0
}
 8001068:	4618      	mov	r0, r3
 800106a:	3710      	adds	r7, #16
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <_ZN20i2cQueue4DynamicDataC1Em>:
 * @retval NONE
 *
 * @note   NONE
 * @warning NONE
 *******************************************************************/
i2cQueue4DynamicData::i2cQueue4DynamicData(UBaseType_t uxQueueLength)
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
{
	this->handler_Queue = NULL;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
	configASSERT(this->handler_Queue = xQueueCreate(uxQueueLength, sizeof(i2cFrame_transmitQueue)));
 8001080:	2200      	movs	r2, #0
 8001082:	210c      	movs	r1, #12
 8001084:	6838      	ldr	r0, [r7, #0]
 8001086:	f00b feac 	bl	800cde2 <xQueueGenericCreate>
 800108a:	4602      	mov	r2, r0
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	bf0c      	ite	eq
 8001098:	2301      	moveq	r3, #1
 800109a:	2300      	movne	r3, #0
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d00b      	beq.n	80010ba <_ZN20i2cQueue4DynamicDataC1Em+0x4a>
	__asm volatile
 80010a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010a6:	f383 8811 	msr	BASEPRI, r3
 80010aa:	f3bf 8f6f 	isb	sy
 80010ae:	f3bf 8f4f 	dsb	sy
 80010b2:	60fb      	str	r3, [r7, #12]
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	e7fd      	b.n	80010b6 <_ZN20i2cQueue4DynamicDataC1Em+0x46>
}
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4618      	mov	r0, r3
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <_ZN20i2cQueue4DynamicDataD1Ev>:
 * 		   Indormacja o adresach tych danych zawarta jest w poli
 * 		   *pDataposzczególnych elementów trzymanych w
 * 		   i2cFrame_transmitQueue
 * @warning NONE
 *******************************************************************/
i2cQueue4DynamicData::~i2cQueue4DynamicData(void)
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
{
	i2cFrame_transmitQueue tempItemToDestrouQueue;
	BaseType_t tempQueueRetVal;
	do
	{
		tempQueueRetVal = xQueueReceive(this->handler_Queue, &tempItemToDestrouQueue, pdMS_TO_TICKS(1));
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f107 0108 	add.w	r1, r7, #8
 80010d4:	2201      	movs	r2, #1
 80010d6:	4618      	mov	r0, r3
 80010d8:	f00c f946 	bl	800d368 <xQueueReceive>
 80010dc:	6178      	str	r0, [r7, #20]
		if (tempQueueRetVal == pdPASS)
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d105      	bne.n	80010f0 <_ZN20i2cQueue4DynamicDataD1Ev+0x2c>
		{
			this->QueueDeleteDataFromPointer(tempItemToDestrouQueue);
 80010e4:	f107 0308 	add.w	r3, r7, #8
 80010e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f000 f80d 	bl	800110a <_ZN20i2cQueue4DynamicData26QueueDeleteDataFromPointerE22i2cFrame_transmitQueue>
		}			
	} while (tempQueueRetVal == pdPASS);
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d0ea      	beq.n	80010cc <_ZN20i2cQueue4DynamicDataD1Ev+0x8>
	vQueueDelete(this->handler_Queue);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f00c fb45 	bl	800d78a <vQueueDelete>
}
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4618      	mov	r0, r3
 8001104:	3718      	adds	r7, #24
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <_ZN20i2cQueue4DynamicData26QueueDeleteDataFromPointerE22i2cFrame_transmitQueue>:
 *
 * @note   NONE
 * @warning NONE
 *******************************************************************/
void i2cQueue4DynamicData::QueueDeleteDataFromPointer(i2cFrame_transmitQueue structWithPointer)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b084      	sub	sp, #16
 800110e:	af00      	add	r7, sp, #0
 8001110:	60f8      	str	r0, [r7, #12]
 8001112:	4638      	mov	r0, r7
 8001114:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	delete[] static_cast<char*>(structWithPointer.pData);	
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d003      	beq.n	8001126 <_ZN20i2cQueue4DynamicData26QueueDeleteDataFromPointerE22i2cFrame_transmitQueue+0x1c>
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	4618      	mov	r0, r3
 8001122:	f00e fe77 	bl	800fe14 <_ZdaPv>
}
 8001126:	bf00      	nop
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <_ZN20i2cQueue4DynamicData12QueueReceiveEP22i2cFrame_transmitQueuem>:
 *
 * @note   NONE
 * @warning NONE
 *******************************************************************/
BaseType_t  i2cQueue4DynamicData::QueueReceive(/*void*/i2cFrame_transmitQueue * /*const*/ pvBuffer, TickType_t xTicksToWait)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b084      	sub	sp, #16
 8001132:	af00      	add	r7, sp, #0
 8001134:	60f8      	str	r0, [r7, #12]
 8001136:	60b9      	str	r1, [r7, #8]
 8001138:	607a      	str	r2, [r7, #4]
	
	return xQueueReceive(this->handler_Queue, pvBuffer, xTicksToWait);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	68b9      	ldr	r1, [r7, #8]
 8001142:	4618      	mov	r0, r3
 8001144:	f00c f910 	bl	800d368 <xQueueReceive>
 8001148:	4603      	mov	r3, r0
}
 800114a:	4618      	mov	r0, r3
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <_ZN20i2cQueue4DynamicData9QueueSendEP22i2cFrame_transmitQueue>:
 * @warning W przypadku, gdy nie udąło się zapisać i2cFrame_transmitQueue
 * 			w kolejce następuje automatyczne zniszczenie lokowanych
 * 			dynamicznie danych, kóre są pod adresem *pData. Dane te to dane
 * 			jakie sąw ysyłane przez slave po i2c bus.
 *******************************************************************/
BaseType_t i2cQueue4DynamicData::QueueSend(/*const*/ /*void*/i2cFrame_transmitQueue * pvItemToQueue){
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
 800115a:	6039      	str	r1, [r7, #0]
	if (xQueueSend(this->handler_Queue, pvItemToQueue, pdMS_TO_TICKS(700)) == pdTRUE)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6818      	ldr	r0, [r3, #0]
 8001160:	2300      	movs	r3, #0
 8001162:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8001166:	6839      	ldr	r1, [r7, #0]
 8001168:	f00b fece 	bl	800cf08 <xQueueGenericSend>
 800116c:	4603      	mov	r3, r0
 800116e:	2b01      	cmp	r3, #1
 8001170:	bf0c      	ite	eq
 8001172:	2301      	moveq	r3, #1
 8001174:	2300      	movne	r3, #0
 8001176:	b2db      	uxtb	r3, r3
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <_ZN20i2cQueue4DynamicData9QueueSendEP22i2cFrame_transmitQueue+0x2e>
	{
		return pdTRUE;
 800117c:	2301      	movs	r3, #1
 800117e:	e005      	b.n	800118c <_ZN20i2cQueue4DynamicData9QueueSendEP22i2cFrame_transmitQueue+0x3a>
	}
	else
	{
		this->QueueDeleteDataFromPointer(*pvItemToQueue);
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff ffc0 	bl	800110a <_ZN20i2cQueue4DynamicData26QueueDeleteDataFromPointerE22i2cFrame_transmitQueue>
		//delete[] static_cast<char*>(pointerToData);
		return pdFALSE;
 800118a:	2300      	movs	r3, #0
	}
}
 800118c:	4618      	mov	r0, r3
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <_ZN4NodeC1EPKc>:
	uint8_t nodeIndex;
	const char *nodeName;
	menuItem* pMenuOptions;
    Node* next;

    Node(const char* name)
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
        : nodeName(name), nodeIndex(0), next(nullptr), pMenuOptions(nullptr) {}
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	683a      	ldr	r2, [r7, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2200      	movs	r2, #0
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4618      	mov	r0, r3
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <_ZN4NodeD1Ev>:

    // Destruktor
    ~Node() {}
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4618      	mov	r0, r3
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <_ZN4ListC1Ev>:
 */

#include <SileliS_code/list.h>

// Konstruktor: inicjalizuje pustą listę
List::List() : head(nullptr), current(nullptr), indexCounter(0) {}
 80011da:	b480      	push	{r7}
 80011dc:	b083      	sub	sp, #12
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2200      	movs	r2, #0
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2200      	movs	r2, #0
 80011f2:	721a      	strb	r2, [r3, #8]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4618      	mov	r0, r3
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <_ZN4ListD1Ev>:

// Destruktor: zwalnia pamięć zajmowaną przez listę
List::~List() {
 8001202:	b580      	push	{r7, lr}
 8001204:	b082      	sub	sp, #8
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
    freeList();
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f000 f8ba 	bl	8001384 <_ZN4List8freeListEv>
}
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <_ZN4List10createNodeEPKc>:

// Prywatna funkcja pomocnicza do tworzenia nowego węzła
Node* List::createNode(const char *nodeName) {
 800121a:	b590      	push	{r4, r7, lr}
 800121c:	b085      	sub	sp, #20
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
 8001222:	6039      	str	r1, [r7, #0]
    Node* newNode = new Node(nodeName);  // Alokacja pamięci dla nowego węzła
 8001224:	2010      	movs	r0, #16
 8001226:	f00e fdf7 	bl	800fe18 <_Znwj>
 800122a:	4603      	mov	r3, r0
 800122c:	461c      	mov	r4, r3
 800122e:	6839      	ldr	r1, [r7, #0]
 8001230:	4620      	mov	r0, r4
 8001232:	f7ff ffaf 	bl	8001194 <_ZN4NodeC1EPKc>
 8001236:	60fc      	str	r4, [r7, #12]
    if (newNode!=0){
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d00e      	beq.n	800125c <_ZN4List10createNodeEPKc+0x42>
    	//strcpy((char *)newNode->nodeName, nodeName);
    	this->indexCounter++;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	7a1b      	ldrb	r3, [r3, #8]
 8001242:	3301      	adds	r3, #1
 8001244:	b2da      	uxtb	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	721a      	strb	r2, [r3, #8]
        newNode->nodeIndex = this->indexCounter;      // Ręczne przypisanie danych
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	7a1a      	ldrb	r2, [r3, #8]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	701a      	strb	r2, [r3, #0]
        newNode->next = nullptr;   // Ręczne ustawienie wskaźnika na nullptr
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	2200      	movs	r2, #0
 8001256:	60da      	str	r2, [r3, #12]
        return newNode;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	e7ff      	b.n	800125c <_ZN4List10createNodeEPKc+0x42>
    }

}
 800125c:	4618      	mov	r0, r3
 800125e:	3714      	adds	r7, #20
 8001260:	46bd      	mov	sp, r7
 8001262:	bd90      	pop	{r4, r7, pc}

08001264 <_ZN4List10canAddItemEv>:

bool List::canAddItem(void){
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
	if (this->indexCounter<UINT8_MAX){
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	7a1b      	ldrb	r3, [r3, #8]
 8001270:	2bff      	cmp	r3, #255	@ 0xff
 8001272:	d001      	beq.n	8001278 <_ZN4List10canAddItemEv+0x14>
		return true;
 8001274:	2301      	movs	r3, #1
 8001276:	e003      	b.n	8001280 <_ZN4List10canAddItemEv+0x1c>
	}
	else{
		printf("List had reached max number of items.\r\n");
 8001278:	4803      	ldr	r0, [pc, #12]	@ (8001288 <_ZN4List10canAddItemEv+0x24>)
 800127a:	f00f fe4d 	bl	8010f18 <puts>
		return false;
 800127e:	2300      	movs	r3, #0
	}
}
 8001280:	4618      	mov	r0, r3
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	080147b8 	.word	0x080147b8

0800128c <_ZN4List8addAtEndEPKc>:
	    	this->resetToFirst();
	}
}

// Dodawanie elementu na końcu listy
void List::addAtEnd(const char *nodeName) {
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
	if(this->canAddItem()){
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f7ff ffe4 	bl	8001264 <_ZN4List10canAddItemEv>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d025      	beq.n	80012ee <_ZN4List8addAtEndEPKc+0x62>
	    Node* newNode = createNode(nodeName);
 80012a2:	6839      	ldr	r1, [r7, #0]
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f7ff ffb8 	bl	800121a <_ZN4List10createNodeEPKc>
 80012aa:	60b8      	str	r0, [r7, #8]
	    newNode->nodeIndex=this->indexCounter;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	7a1a      	ldrb	r2, [r3, #8]
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	701a      	strb	r2, [r3, #0]
	    if (head == nullptr) {
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d10a      	bne.n	80012d2 <_ZN4List8addAtEndEPKc+0x46>
	        head = newNode;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	68ba      	ldr	r2, [r7, #8]
 80012c0:	601a      	str	r2, [r3, #0]
		    if (this->indexCounter==1)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	7a1b      	ldrb	r3, [r3, #8]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d111      	bne.n	80012ee <_ZN4List8addAtEndEPKc+0x62>
		    	this->resetToFirst();
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f000 f813 	bl	80012f6 <_ZN4List12resetToFirstEv>
	            temp = temp->next;
	        }
	        temp->next = newNode;
	    }
	}
}
 80012d0:	e00d      	b.n	80012ee <_ZN4List8addAtEndEPKc+0x62>
	        Node* temp = head;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	60fb      	str	r3, [r7, #12]
	        while (temp->next != nullptr) {
 80012d8:	e002      	b.n	80012e0 <_ZN4List8addAtEndEPKc+0x54>
	            temp = temp->next;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	68db      	ldr	r3, [r3, #12]
 80012de:	60fb      	str	r3, [r7, #12]
	        while (temp->next != nullptr) {
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d1f8      	bne.n	80012da <_ZN4List8addAtEndEPKc+0x4e>
	        temp->next = newNode;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	60da      	str	r2, [r3, #12]
}
 80012ee:	bf00      	nop
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <_ZN4List12resetToFirstEv>:

// Ustawienie wskaźnika current na pierwszy element listy
void List::resetToFirst() {
 80012f6:	b480      	push	{r7}
 80012f8:	b083      	sub	sp, #12
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
    current = head;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	605a      	str	r2, [r3, #4]
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
	...

08001314 <_ZN4List9printListEv>:
}



// Wydrukowanie elementów listy
void List::printList() {
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
    Node* temp = head;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	60fb      	str	r3, [r7, #12]
    while (temp != nullptr) {
 8001322:	e00b      	b.n	800133c <_ZN4List9printListEv+0x28>
        printf("%d -> %s \r\n", temp->nodeIndex, temp->nodeName);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	4619      	mov	r1, r3
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	461a      	mov	r2, r3
 8001330:	4807      	ldr	r0, [pc, #28]	@ (8001350 <_ZN4List9printListEv+0x3c>)
 8001332:	f00f fd89 	bl	8010e48 <iprintf>
        temp = temp->next;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	60fb      	str	r3, [r7, #12]
    while (temp != nullptr) {
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1f0      	bne.n	8001324 <_ZN4List9printListEv+0x10>
    }
    printf("NULL\r\n");
 8001342:	4804      	ldr	r0, [pc, #16]	@ (8001354 <_ZN4List9printListEv+0x40>)
 8001344:	f00f fde8 	bl	8010f18 <puts>
}
 8001348:	bf00      	nop
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	08014844 	.word	0x08014844
 8001354:	08014850 	.word	0x08014850

08001358 <_ZN4List12printCurrentEv>:

void  List::printCurrent(){
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	printf("Current node:%d -> %s \r\n", current->nodeIndex, current->nodeName);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	4619      	mov	r1, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	461a      	mov	r2, r3
 8001370:	4803      	ldr	r0, [pc, #12]	@ (8001380 <_ZN4List12printCurrentEv+0x28>)
 8001372:	f00f fd69 	bl	8010e48 <iprintf>
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	08014858 	.word	0x08014858

08001384 <_ZN4List8freeListEv>:

// Prywatna funkcja do zwalniania pamięci zajmowanej przez listę
void List::freeList() {
 8001384:	b590      	push	{r4, r7, lr}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
    Node* temp;
    while (head != nullptr) {
 800138c:	e026      	b.n	80013dc <_ZN4List8freeListEv+0x58>
        temp = head;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	60fb      	str	r3, [r7, #12]
        head = head->next;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	68da      	ldr	r2, [r3, #12]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	601a      	str	r2, [r3, #0]

        if (temp->pMenuOptions!=nullptr)
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d00a      	beq.n	80013bc <_ZN4List8freeListEv+0x38>
        	delete temp->pMenuOptions;		//jeżeli do wskaźnika menu przypisano jakies menu to trzeba wywołać destruktor
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	689c      	ldr	r4, [r3, #8]
 80013aa:	2c00      	cmp	r4, #0
 80013ac:	d006      	beq.n	80013bc <_ZN4List8freeListEv+0x38>
 80013ae:	4620      	mov	r0, r4
 80013b0:	f000 f830 	bl	8001414 <_ZN8menuItemD1Ev>
 80013b4:	210c      	movs	r1, #12
 80013b6:	4620      	mov	r0, r4
 80013b8:	f00e fd2a 	bl	800fe10 <_ZdlPvj>

        delete temp;
 80013bc:	68fc      	ldr	r4, [r7, #12]
 80013be:	2c00      	cmp	r4, #0
 80013c0:	d006      	beq.n	80013d0 <_ZN4List8freeListEv+0x4c>
 80013c2:	4620      	mov	r0, r4
 80013c4:	f7ff fefe 	bl	80011c4 <_ZN4NodeD1Ev>
 80013c8:	2110      	movs	r1, #16
 80013ca:	4620      	mov	r0, r4
 80013cc:	f00e fd20 	bl	800fe10 <_ZdlPvj>
        this->indexCounter--;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	7a1b      	ldrb	r3, [r3, #8]
 80013d4:	3b01      	subs	r3, #1
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	721a      	strb	r2, [r3, #8]
    while (head != nullptr) {
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1d4      	bne.n	800138e <_ZN4List8freeListEv+0xa>
    }
    current = nullptr;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	605a      	str	r2, [r3, #4]
}
 80013ea:	bf00      	nop
 80013ec:	3714      	adds	r7, #20
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd90      	pop	{r4, r7, pc}

080013f2 <_ZN8menuItem18deleteExecuteTableEv>:
	printf("%s:pExecute table have not been created. pExecute pointer is not NULL.\r\n", this->TAG);
	assert(0);
	return false;
}

void menuItem::deleteExecuteTable(){
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b082      	sub	sp, #8
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
	delete [] this->pExecute;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d004      	beq.n	800140c <_ZN8menuItem18deleteExecuteTableEv+0x1a>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	4618      	mov	r0, r3
 8001408:	f00e fd04 	bl	800fe14 <_ZdaPv>
}
 800140c:	bf00      	nop
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <_ZN8menuItemD1Ev>:

menuItem::~menuItem(){
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
	this->deleteExecuteTable();
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f7ff ffe8 	bl	80013f2 <_ZN8menuItem18deleteExecuteTableEv>
}
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4618      	mov	r0, r3
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <__io_putchar>:

//#include <printfRedirect.h>
#include <SileliS_code/printfRedirect.h>

//printf to uart redirection
void __io_putchar(uint8_t ch) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, &ch, 1, 0xffff);
 8001436:	1df9      	adds	r1, r7, #7
 8001438:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800143c:	2201      	movs	r2, #1
 800143e:	4803      	ldr	r0, [pc, #12]	@ (800144c <__io_putchar+0x20>)
 8001440:	f009 ffa6 	bl	800b390 <HAL_UART_Transmit>
}
 8001444:	bf00      	nop
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	240003a4 	.word	0x240003a4

08001450 <_ZN10radioMenusC1Ev>:

#include "SileliS_code/radioMenu.h"



radioMenus::radioMenus() {
 8001450:	b590      	push	{r4, r7, lr}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	4a13      	ldr	r2, [pc, #76]	@ (80014a8 <_ZN10radioMenusC1Ev+0x58>)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a12      	ldr	r2, [pc, #72]	@ (80014ac <_ZN10radioMenusC1Ev+0x5c>)
 8001462:	611a      	str	r2, [r3, #16]

	printf("%sMain menu object had been created.\r\n", this->TAG);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	691b      	ldr	r3, [r3, #16]
 8001468:	4619      	mov	r1, r3
 800146a:	4811      	ldr	r0, [pc, #68]	@ (80014b0 <_ZN10radioMenusC1Ev+0x60>)
 800146c:	f00f fcec 	bl	8010e48 <iprintf>

	//listy wielowymiarowe dla urzadzęń audio i equalizera
	this->pAudioDeviceList=nullptr;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2200      	movs	r2, #0
 8001474:	605a      	str	r2, [r3, #4]
	this->pAudioDeviceList = new List();
 8001476:	200c      	movs	r0, #12
 8001478:	f00e fcce 	bl	800fe18 <_Znwj>
 800147c:	4603      	mov	r3, r0
 800147e:	461c      	mov	r4, r3
 8001480:	4620      	mov	r0, r4
 8001482:	f7ff feaa 	bl	80011da <_ZN4ListC1Ev>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	605c      	str	r4, [r3, #4]
	assert(this->pAudioDeviceList);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d105      	bne.n	800149e <_ZN10radioMenusC1Ev+0x4e>
 8001492:	4b08      	ldr	r3, [pc, #32]	@ (80014b4 <_ZN10radioMenusC1Ev+0x64>)
 8001494:	4a08      	ldr	r2, [pc, #32]	@ (80014b8 <_ZN10radioMenusC1Ev+0x68>)
 8001496:	2113      	movs	r1, #19
 8001498:	4808      	ldr	r0, [pc, #32]	@ (80014bc <_ZN10radioMenusC1Ev+0x6c>)
 800149a:	f00e fce3 	bl	800fe64 <__assert_func>
}
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4618      	mov	r0, r3
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd90      	pop	{r4, r7, pc}
 80014a8:	08014b28 	.word	0x08014b28
 80014ac:	08014874 	.word	0x08014874
 80014b0:	08014880 	.word	0x08014880
 80014b4:	080148a8 	.word	0x080148a8
 80014b8:	080148c0 	.word	0x080148c0
 80014bc:	080148dc 	.word	0x080148dc

080014c0 <_ZN10radioMenusD1Ev>:


radioMenus::~radioMenus() {
 80014c0:	b590      	push	{r4, r7, lr}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	4a09      	ldr	r2, [pc, #36]	@ (80014f0 <_ZN10radioMenusD1Ev+0x30>)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
	#warning przed delete this->pAudioDeviceList należy usunąć execute_t* pExecute
	delete this->pAudioDeviceList;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685c      	ldr	r4, [r3, #4]
 80014d2:	2c00      	cmp	r4, #0
 80014d4:	d006      	beq.n	80014e4 <_ZN10radioMenusD1Ev+0x24>
 80014d6:	4620      	mov	r0, r4
 80014d8:	f7ff fe93 	bl	8001202 <_ZN4ListD1Ev>
 80014dc:	210c      	movs	r1, #12
 80014de:	4620      	mov	r0, r4
 80014e0:	f00e fc96 	bl	800fe10 <_ZdlPvj>
}
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4618      	mov	r0, r3
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd90      	pop	{r4, r7, pc}
 80014ee:	bf00      	nop
 80014f0:	08014b28 	.word	0x08014b28

080014f4 <_ZN10radioMenusD0Ev>:
radioMenus::~radioMenus() {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
}
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f7ff ffdf 	bl	80014c0 <_ZN10radioMenusD1Ev>
 8001502:	2114      	movs	r1, #20
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f00e fc83 	bl	800fe10 <_ZdlPvj>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4618      	mov	r0, r3
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <_ZL35i2cMaster_pReceiveQueueObjectParserPv>:





static void i2cMaster_pReceiveQueueObjectParser(void *pNothing){
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
	i2cFrame_transmitQueue tempI2CReceiveFrame;
	while(1){
		if(pi2cMaster->pReceiveQueueObject->QueueReceive(&tempI2CReceiveFrame, portMAX_DELAY)==pdPASS){
 800151c:	4b1b      	ldr	r3, [pc, #108]	@ (800158c <_ZL35i2cMaster_pReceiveQueueObjectParserPv+0x78>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f107 010c 	add.w	r1, r7, #12
 8001526:	f04f 32ff 	mov.w	r2, #4294967295
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff fdff 	bl	800112e <_ZN20i2cQueue4DynamicData12QueueReceiveEP22i2cFrame_transmitQueuem>
 8001530:	4603      	mov	r3, r0
 8001532:	2b01      	cmp	r3, #1
 8001534:	bf0c      	ite	eq
 8001536:	2301      	moveq	r3, #1
 8001538:	2300      	movne	r3, #0
 800153a:	b2db      	uxtb	r3, r3
 800153c:	2b00      	cmp	r3, #0
 800153e:	d0ed      	beq.n	800151c <_ZL35i2cMaster_pReceiveQueueObjectParserPv+0x8>
			switch(tempI2CReceiveFrame.slaveDevice7bitAddress)
 8001540:	7b3b      	ldrb	r3, [r7, #12]
 8001542:	2b3c      	cmp	r3, #60	@ 0x3c
 8001544:	d110      	bne.n	8001568 <_ZL35i2cMaster_pReceiveQueueObjectParserPv+0x54>
			{
			case I2C_SLAVE_ADDRESS_ESP32:
				pESP32->parseReceivedData(tempI2CReceiveFrame);
 8001546:	4b12      	ldr	r3, [pc, #72]	@ (8001590 <_ZL35i2cMaster_pReceiveQueueObjectParserPv+0x7c>)
 8001548:	6818      	ldr	r0, [r3, #0]
 800154a:	f107 030c 	add.w	r3, r7, #12
 800154e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001550:	f7ff fc10 	bl	8000d74 <_ZN27esp32_i2cComunicationDriver17parseReceivedDataE22i2cFrame_transmitQueue>
				break;
 8001554:	bf00      	nop
			default:
				printf("i2cMaster_pReceiveQueueObjectParser: Unknown i2c slave address: 0x%x (7bit).\r\n", tempI2CReceiveFrame.slaveDevice7bitAddress);
				pi2cMaster->ping(tempI2CReceiveFrame.slaveDevice7bitAddress);
				assert(0);
			}
			pi2cMaster->pReceiveQueueObject->QueueDeleteDataFromPointer(tempI2CReceiveFrame);			//BARDZO WAŻNA FUNKCJA, po parsowaniu otrzymanego z i2c pakiedy danych, który jest przetrzymywany pod zmienną alokowaną dynamicznie niszczy tą zmienną. Ta funkcja, w tym miejscu zapobiega wyciekom pamięci!!!!!
 8001556:	4b0d      	ldr	r3, [pc, #52]	@ (800158c <_ZL35i2cMaster_pReceiveQueueObjectParserPv+0x78>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6858      	ldr	r0, [r3, #4]
 800155c:	f107 030c 	add.w	r3, r7, #12
 8001560:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001562:	f7ff fdd2 	bl	800110a <_ZN20i2cQueue4DynamicData26QueueDeleteDataFromPointerE22i2cFrame_transmitQueue>
 8001566:	e7d9      	b.n	800151c <_ZL35i2cMaster_pReceiveQueueObjectParserPv+0x8>
				printf("i2cMaster_pReceiveQueueObjectParser: Unknown i2c slave address: 0x%x (7bit).\r\n", tempI2CReceiveFrame.slaveDevice7bitAddress);
 8001568:	7b3b      	ldrb	r3, [r7, #12]
 800156a:	4619      	mov	r1, r3
 800156c:	4809      	ldr	r0, [pc, #36]	@ (8001594 <_ZL35i2cMaster_pReceiveQueueObjectParserPv+0x80>)
 800156e:	f00f fc6b 	bl	8010e48 <iprintf>
				pi2cMaster->ping(tempI2CReceiveFrame.slaveDevice7bitAddress);
 8001572:	4b06      	ldr	r3, [pc, #24]	@ (800158c <_ZL35i2cMaster_pReceiveQueueObjectParserPv+0x78>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	7b3a      	ldrb	r2, [r7, #12]
 8001578:	4611      	mov	r1, r2
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff fcd2 	bl	8000f24 <_ZN9i2cMaster4pingEt>
				assert(0);
 8001580:	4b05      	ldr	r3, [pc, #20]	@ (8001598 <_ZL35i2cMaster_pReceiveQueueObjectParserPv+0x84>)
 8001582:	4a06      	ldr	r2, [pc, #24]	@ (800159c <_ZL35i2cMaster_pReceiveQueueObjectParserPv+0x88>)
 8001584:	2132      	movs	r1, #50	@ 0x32
 8001586:	4806      	ldr	r0, [pc, #24]	@ (80015a0 <_ZL35i2cMaster_pReceiveQueueObjectParserPv+0x8c>)
 8001588:	f00e fc6c 	bl	800fe64 <__assert_func>
 800158c:	24000200 	.word	0x24000200
 8001590:	24000204 	.word	0x24000204
 8001594:	08014904 	.word	0x08014904
 8001598:	08014954 	.word	0x08014954
 800159c:	08014958 	.word	0x08014958
 80015a0:	08014988 	.word	0x08014988

080015a4 <_ZL29esp32IntrrruptRequestCallbackPv>:
		};
	}
}

static void esp32IntrrruptRequestCallback(void *pNothing){
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
	i2cFrame_transmitQueue tempI2CFrameForESP32;			//
	tempI2CFrameForESP32.slaveDevice7bitAddress = pESP32->esp32i2cSlaveAdress_7bit;		//I2C_SLAVE_ADDRESS_ESP32;
 80015ac:	4b29      	ldr	r3, [pc, #164]	@ (8001654 <_ZL29esp32IntrrruptRequestCallbackPv+0xb0>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	791b      	ldrb	r3, [r3, #4]
 80015b2:	733b      	strb	r3, [r7, #12]
	while(1){
		pESP32->isCountingSemaphoreOverflowed();
 80015b4:	4b27      	ldr	r3, [pc, #156]	@ (8001654 <_ZL29esp32IntrrruptRequestCallbackPv+0xb0>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff fb57 	bl	8000c6c <_ZN27esp32_i2cComunicationDriver29isCountingSemaphoreOverflowedEv>
		if (pESP32->semaphoreTake__CountingSemaphore()){								//czeka dopuki nie pojawi się esp32 interrupt request
 80015be:	4b25      	ldr	r3, [pc, #148]	@ (8001654 <_ZL29esp32IntrrruptRequestCallbackPv+0xb0>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff fb72 	bl	8000cac <_ZN27esp32_i2cComunicationDriver32semaphoreTake__CountingSemaphoreEv>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	bf14      	ite	ne
 80015ce:	2301      	movne	r3, #1
 80015d0:	2300      	moveq	r3, #0
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d0ed      	beq.n	80015b4 <_ZL29esp32IntrrruptRequestCallbackPv+0x10>
			pESP32->i2cMasterSemaphoreTake();
 80015d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001654 <_ZL29esp32IntrrruptRequestCallbackPv+0xb0>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff fb8f 	bl	8000d00 <_ZN27esp32_i2cComunicationDriver22i2cMasterSemaphoreTakeEv>
			pESP32->masterReceiveFromESP32_DMA((uint8_t*) &tempI2CFrameForESP32.dataSize, sizeof(size_t));
 80015e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001654 <_ZL29esp32IntrrruptRequestCallbackPv+0xb0>)
 80015e4:	6818      	ldr	r0, [r3, #0]
 80015e6:	f107 030c 	add.w	r3, r7, #12
 80015ea:	3304      	adds	r3, #4
 80015ec:	2204      	movs	r2, #4
 80015ee:	4619      	mov	r1, r3
 80015f0:	f7ff fb71 	bl	8000cd6 <_ZN27esp32_i2cComunicationDriver26masterReceiveFromESP32_DMAEPht>
			pESP32->while_I2C_STATE_READY();
 80015f4:	4b17      	ldr	r3, [pc, #92]	@ (8001654 <_ZL29esp32IntrrruptRequestCallbackPv+0xb0>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff fb9d 	bl	8000d38 <_ZN27esp32_i2cComunicationDriver21while_I2C_STATE_READYEv>
			tempI2CFrameForESP32.pData = new char[tempI2CFrameForESP32.dataSize];
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	4618      	mov	r0, r3
 8001602:	f00e fc1a 	bl	800fe3a <_Znaj>
 8001606:	4603      	mov	r3, r0
 8001608:	617b      	str	r3, [r7, #20]
			if (tempI2CFrameForESP32.pData!=nullptr){
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d016      	beq.n	800163e <_ZL29esp32IntrrruptRequestCallbackPv+0x9a>
				pESP32->masterReceiveFromESP32_DMA((uint8_t*) tempI2CFrameForESP32.pData, tempI2CFrameForESP32.dataSize);
 8001610:	4b10      	ldr	r3, [pc, #64]	@ (8001654 <_ZL29esp32IntrrruptRequestCallbackPv+0xb0>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6979      	ldr	r1, [r7, #20]
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	b292      	uxth	r2, r2
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff fb5b 	bl	8000cd6 <_ZN27esp32_i2cComunicationDriver26masterReceiveFromESP32_DMAEPht>
				pESP32->while_I2C_STATE_READY();
 8001620:	4b0c      	ldr	r3, [pc, #48]	@ (8001654 <_ZL29esp32IntrrruptRequestCallbackPv+0xb0>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff fb87 	bl	8000d38 <_ZN27esp32_i2cComunicationDriver21while_I2C_STATE_READYEv>
				pi2cMaster->pReceiveQueueObject->QueueSend(&tempI2CFrameForESP32);
 800162a:	4b0b      	ldr	r3, [pc, #44]	@ (8001658 <_ZL29esp32IntrrruptRequestCallbackPv+0xb4>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f107 020c 	add.w	r2, r7, #12
 8001634:	4611      	mov	r1, r2
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff fd8b 	bl	8001152 <_ZN20i2cQueue4DynamicData9QueueSendEP22i2cFrame_transmitQueue>
 800163c:	e004      	b.n	8001648 <_ZL29esp32IntrrruptRequestCallbackPv+0xa4>
			}
			else{
				pESP32->seteDynamicmMemeoryAlocationError();
 800163e:	4b05      	ldr	r3, [pc, #20]	@ (8001654 <_ZL29esp32IntrrruptRequestCallbackPv+0xb0>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff fb86 	bl	8000d54 <_ZN27esp32_i2cComunicationDriver33seteDynamicmMemeoryAlocationErrorEv>
			}
			pESP32->i2cMasterSemaphoreGive();
 8001648:	4b02      	ldr	r3, [pc, #8]	@ (8001654 <_ZL29esp32IntrrruptRequestCallbackPv+0xb0>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff fb65 	bl	8000d1c <_ZN27esp32_i2cComunicationDriver22i2cMasterSemaphoreGiveEv>
		pESP32->isCountingSemaphoreOverflowed();
 8001652:	e7af      	b.n	80015b4 <_ZL29esp32IntrrruptRequestCallbackPv+0x10>
 8001654:	24000204 	.word	0x24000204
 8001658:	24000200 	.word	0x24000200
 800165c:	00000000 	.word	0x00000000

08001660 <_Z17initTaskFunctionsv>:
		}
	};
}


void initTaskFunctions(void){
 8001660:	b590      	push	{r4, r7, lr}
 8001662:	b085      	sub	sp, #20
 8001664:	af02      	add	r7, sp, #8
	assert(pi2cMaster = new i2cMaster(&hi2c1));
 8001666:	2014      	movs	r0, #20
 8001668:	f00e fbd6 	bl	800fe18 <_Znwj>
 800166c:	4603      	mov	r3, r0
 800166e:	461c      	mov	r4, r3
 8001670:	4975      	ldr	r1, [pc, #468]	@ (8001848 <_Z17initTaskFunctionsv+0x1e8>)
 8001672:	4620      	mov	r0, r4
 8001674:	f7ff fbcc 	bl	8000e10 <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef>
 8001678:	4b74      	ldr	r3, [pc, #464]	@ (800184c <_Z17initTaskFunctionsv+0x1ec>)
 800167a:	601c      	str	r4, [r3, #0]
 800167c:	4b73      	ldr	r3, [pc, #460]	@ (800184c <_Z17initTaskFunctionsv+0x1ec>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d105      	bne.n	8001690 <_Z17initTaskFunctionsv+0x30>
 8001684:	4b72      	ldr	r3, [pc, #456]	@ (8001850 <_Z17initTaskFunctionsv+0x1f0>)
 8001686:	4a73      	ldr	r2, [pc, #460]	@ (8001854 <_Z17initTaskFunctionsv+0x1f4>)
 8001688:	2152      	movs	r1, #82	@ 0x52
 800168a:	4873      	ldr	r0, [pc, #460]	@ (8001858 <_Z17initTaskFunctionsv+0x1f8>)
 800168c:	f00e fbea 	bl	800fe64 <__assert_func>
	assert(pESP32 = new esp32_i2cComunicationDriver(pi2cMaster));
 8001690:	2024      	movs	r0, #36	@ 0x24
 8001692:	f00e fbc1 	bl	800fe18 <_Znwj>
 8001696:	4603      	mov	r3, r0
 8001698:	461c      	mov	r4, r3
 800169a:	4b6c      	ldr	r3, [pc, #432]	@ (800184c <_Z17initTaskFunctionsv+0x1ec>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4619      	mov	r1, r3
 80016a0:	4620      	mov	r0, r4
 80016a2:	f7ff fa0d 	bl	8000ac0 <_ZN27esp32_i2cComunicationDriverC1EP9i2cMaster>
 80016a6:	4b6d      	ldr	r3, [pc, #436]	@ (800185c <_Z17initTaskFunctionsv+0x1fc>)
 80016a8:	601c      	str	r4, [r3, #0]
 80016aa:	4b6c      	ldr	r3, [pc, #432]	@ (800185c <_Z17initTaskFunctionsv+0x1fc>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d105      	bne.n	80016be <_Z17initTaskFunctionsv+0x5e>
 80016b2:	4b6b      	ldr	r3, [pc, #428]	@ (8001860 <_Z17initTaskFunctionsv+0x200>)
 80016b4:	4a67      	ldr	r2, [pc, #412]	@ (8001854 <_Z17initTaskFunctionsv+0x1f4>)
 80016b6:	2153      	movs	r1, #83	@ 0x53
 80016b8:	4867      	ldr	r0, [pc, #412]	@ (8001858 <_Z17initTaskFunctionsv+0x1f8>)
 80016ba:	f00e fbd3 	bl	800fe64 <__assert_func>

	//pętla opóźniająca oczekująza aż zakończy się proces bootowania ESP32
	pi2cMaster->i2cMasterSemaphoreTake();
 80016be:	4b63      	ldr	r3, [pc, #396]	@ (800184c <_Z17initTaskFunctionsv+0x1ec>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff fc0e 	bl	8000ee4 <_ZN9i2cMaster22i2cMasterSemaphoreTakeEv>
	while(HAL_I2C_IsDeviceReady(&hi2c1, pESP32->esp32i2cSlaveAdress_7bit<<1, 10000, 10000) != HAL_OK){
 80016c8:	e002      	b.n	80016d0 <_Z17initTaskFunctionsv+0x70>
		printf("ESP32 i2c bus not responding\r\n");
 80016ca:	4866      	ldr	r0, [pc, #408]	@ (8001864 <_Z17initTaskFunctionsv+0x204>)
 80016cc:	f00f fc24 	bl	8010f18 <puts>
	while(HAL_I2C_IsDeviceReady(&hi2c1, pESP32->esp32i2cSlaveAdress_7bit<<1, 10000, 10000) != HAL_OK){
 80016d0:	4b62      	ldr	r3, [pc, #392]	@ (800185c <_Z17initTaskFunctionsv+0x1fc>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	791b      	ldrb	r3, [r3, #4]
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	b299      	uxth	r1, r3
 80016da:	f242 7310 	movw	r3, #10000	@ 0x2710
 80016de:	f242 7210 	movw	r2, #10000	@ 0x2710
 80016e2:	4859      	ldr	r0, [pc, #356]	@ (8001848 <_Z17initTaskFunctionsv+0x1e8>)
 80016e4:	f004 fae8 	bl	8005cb8 <HAL_I2C_IsDeviceReady>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	bf14      	ite	ne
 80016ee:	2301      	movne	r3, #1
 80016f0:	2300      	moveq	r3, #0
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d1e8      	bne.n	80016ca <_Z17initTaskFunctionsv+0x6a>
	};
	pi2cMaster->i2cMasterSemaphoreGive();
 80016f8:	4b54      	ldr	r3, [pc, #336]	@ (800184c <_Z17initTaskFunctionsv+0x1ec>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff fc01 	bl	8000f04 <_ZN9i2cMaster22i2cMasterSemaphoreGiveEv>
	//pętla opóźniająca oczekująza aż zakończy si ę proces bootowania ESP32


	printf("Radio main firmware version: %.2f\r\n", FW_VERSION);
 8001702:	a34f      	add	r3, pc, #316	@ (adr r3, 8001840 <_Z17initTaskFunctionsv+0x1e0>)
 8001704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001708:	4857      	ldr	r0, [pc, #348]	@ (8001868 <_Z17initTaskFunctionsv+0x208>)
 800170a:	f00f fb9d 	bl	8010e48 <iprintf>

	pi2cMaster->while_I2C_STATE_READY();
 800170e:	4b4f      	ldr	r3, [pc, #316]	@ (800184c <_Z17initTaskFunctionsv+0x1ec>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff fc7a 	bl	800100c <_ZN9i2cMaster21while_I2C_STATE_READYEv>
	pESP32->ping();
 8001718:	4b50      	ldr	r3, [pc, #320]	@ (800185c <_Z17initTaskFunctionsv+0x1fc>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff fa47 	bl	8000bb0 <_ZN27esp32_i2cComunicationDriver4pingEv>

	//tworzy task callback na przerwanie od ESP32 informującę, że ESP32 ma jakieś dane do wysłania
	configASSERT(xTaskCreate(esp32IntrrruptRequestCallback, "esp32IntReq", 3*128, NULL, tskIDLE_PRIORITY+1, &taskHandle_esp32IntrrruptRequest));
 8001722:	4b52      	ldr	r3, [pc, #328]	@ (800186c <_Z17initTaskFunctionsv+0x20c>)
 8001724:	9301      	str	r3, [sp, #4]
 8001726:	2301      	movs	r3, #1
 8001728:	9300      	str	r3, [sp, #0]
 800172a:	2300      	movs	r3, #0
 800172c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001730:	494f      	ldr	r1, [pc, #316]	@ (8001870 <_Z17initTaskFunctionsv+0x210>)
 8001732:	4850      	ldr	r0, [pc, #320]	@ (8001874 <_Z17initTaskFunctionsv+0x214>)
 8001734:	f00c fa5e 	bl	800dbf4 <xTaskCreate>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	bf0c      	ite	eq
 800173e:	2301      	moveq	r3, #1
 8001740:	2300      	movne	r3, #0
 8001742:	b2db      	uxtb	r3, r3
 8001744:	2b00      	cmp	r3, #0
 8001746:	d00b      	beq.n	8001760 <_Z17initTaskFunctionsv+0x100>
	__asm volatile
 8001748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800174c:	f383 8811 	msr	BASEPRI, r3
 8001750:	f3bf 8f6f 	isb	sy
 8001754:	f3bf 8f4f 	dsb	sy
 8001758:	607b      	str	r3, [r7, #4]
}
 800175a:	bf00      	nop
 800175c:	bf00      	nop
 800175e:	e7fd      	b.n	800175c <_Z17initTaskFunctionsv+0xfc>
	//tworzy task przetwarzający dane (parsujący) z kolejki odbiorczej i2c Mastera
	configASSERT(xTaskCreate(i2cMaster_pReceiveQueueObjectParser, "i2cMastRecQue, Pars", 3*128, NULL, tskIDLE_PRIORITY, &taskHandle_i2cMaster_pReceiveQueueObjectParser));
 8001760:	4b45      	ldr	r3, [pc, #276]	@ (8001878 <_Z17initTaskFunctionsv+0x218>)
 8001762:	9301      	str	r3, [sp, #4]
 8001764:	2300      	movs	r3, #0
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	2300      	movs	r3, #0
 800176a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800176e:	4943      	ldr	r1, [pc, #268]	@ (800187c <_Z17initTaskFunctionsv+0x21c>)
 8001770:	4843      	ldr	r0, [pc, #268]	@ (8001880 <_Z17initTaskFunctionsv+0x220>)
 8001772:	f00c fa3f 	bl	800dbf4 <xTaskCreate>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	bf0c      	ite	eq
 800177c:	2301      	moveq	r3, #1
 800177e:	2300      	movne	r3, #0
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b00      	cmp	r3, #0
 8001784:	d00b      	beq.n	800179e <_Z17initTaskFunctionsv+0x13e>
	__asm volatile
 8001786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800178a:	f383 8811 	msr	BASEPRI, r3
 800178e:	f3bf 8f6f 	isb	sy
 8001792:	f3bf 8f4f 	dsb	sy
 8001796:	603b      	str	r3, [r7, #0]
}
 8001798:	bf00      	nop
 800179a:	bf00      	nop
 800179c:	e7fd      	b.n	800179a <_Z17initTaskFunctionsv+0x13a>


	pRadioMenu = new radioMenus();
 800179e:	2014      	movs	r0, #20
 80017a0:	f00e fb3a 	bl	800fe18 <_Znwj>
 80017a4:	4603      	mov	r3, r0
 80017a6:	461c      	mov	r4, r3
 80017a8:	4620      	mov	r0, r4
 80017aa:	f7ff fe51 	bl	8001450 <_ZN10radioMenusC1Ev>
 80017ae:	4b35      	ldr	r3, [pc, #212]	@ (8001884 <_Z17initTaskFunctionsv+0x224>)
 80017b0:	601c      	str	r4, [r3, #0]

	assert(pRadioMenu);
 80017b2:	4b34      	ldr	r3, [pc, #208]	@ (8001884 <_Z17initTaskFunctionsv+0x224>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d105      	bne.n	80017c6 <_Z17initTaskFunctionsv+0x166>
 80017ba:	4b33      	ldr	r3, [pc, #204]	@ (8001888 <_Z17initTaskFunctionsv+0x228>)
 80017bc:	4a25      	ldr	r2, [pc, #148]	@ (8001854 <_Z17initTaskFunctionsv+0x1f4>)
 80017be:	216b      	movs	r1, #107	@ 0x6b
 80017c0:	4825      	ldr	r0, [pc, #148]	@ (8001858 <_Z17initTaskFunctionsv+0x1f8>)
 80017c2:	f00e fb4f 	bl	800fe64 <__assert_func>
	//pRadioMenu->pDeviceList->addAtEnd();
	pRadioMenu->pAudioDeviceList->addAtEnd("Si468x_DAB+");
 80017c6:	4b2f      	ldr	r3, [pc, #188]	@ (8001884 <_Z17initTaskFunctionsv+0x224>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	492f      	ldr	r1, [pc, #188]	@ (800188c <_Z17initTaskFunctionsv+0x22c>)
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff fd5c 	bl	800128c <_ZN4List8addAtEndEPKc>
	pRadioMenu->pAudioDeviceList->addAtEnd("Si468x_FM");
 80017d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001884 <_Z17initTaskFunctionsv+0x224>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	492d      	ldr	r1, [pc, #180]	@ (8001890 <_Z17initTaskFunctionsv+0x230>)
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff fd55 	bl	800128c <_ZN4List8addAtEndEPKc>
	pRadioMenu->pAudioDeviceList->addAtEnd("Si468x_AM");
 80017e2:	4b28      	ldr	r3, [pc, #160]	@ (8001884 <_Z17initTaskFunctionsv+0x224>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	492a      	ldr	r1, [pc, #168]	@ (8001894 <_Z17initTaskFunctionsv+0x234>)
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff fd4e 	bl	800128c <_ZN4List8addAtEndEPKc>
	pRadioMenu->pAudioDeviceList->addAtEnd("MP3_USB");
 80017f0:	4b24      	ldr	r3, [pc, #144]	@ (8001884 <_Z17initTaskFunctionsv+0x224>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	4928      	ldr	r1, [pc, #160]	@ (8001898 <_Z17initTaskFunctionsv+0x238>)
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff fd47 	bl	800128c <_ZN4List8addAtEndEPKc>
	pRadioMenu->pAudioDeviceList->addAtEnd("MP3_SD");
 80017fe:	4b21      	ldr	r3, [pc, #132]	@ (8001884 <_Z17initTaskFunctionsv+0x224>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	4925      	ldr	r1, [pc, #148]	@ (800189c <_Z17initTaskFunctionsv+0x23c>)
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff fd40 	bl	800128c <_ZN4List8addAtEndEPKc>
	pRadioMenu->pAudioDeviceList->addAtEnd("Bluetooth");
 800180c:	4b1d      	ldr	r3, [pc, #116]	@ (8001884 <_Z17initTaskFunctionsv+0x224>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	4923      	ldr	r1, [pc, #140]	@ (80018a0 <_Z17initTaskFunctionsv+0x240>)
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff fd39 	bl	800128c <_ZN4List8addAtEndEPKc>
	pRadioMenu->pAudioDeviceList->printList();
 800181a:	4b1a      	ldr	r3, [pc, #104]	@ (8001884 <_Z17initTaskFunctionsv+0x224>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff fd77 	bl	8001314 <_ZN4List9printListEv>
	pRadioMenu->pAudioDeviceList->printCurrent();
 8001826:	4b17      	ldr	r3, [pc, #92]	@ (8001884 <_Z17initTaskFunctionsv+0x224>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff fd93 	bl	8001358 <_ZN4List12printCurrentEv>


	pRadioMenu;


}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	bd90      	pop	{r4, r7, pc}
 800183a:	bf00      	nop
 800183c:	f3af 8000 	nop.w
 8001840:	9999999a 	.word	0x9999999a
 8001844:	3fb99999 	.word	0x3fb99999
 8001848:	24000210 	.word	0x24000210
 800184c:	24000200 	.word	0x24000200
 8001850:	080149b4 	.word	0x080149b4
 8001854:	080149d8 	.word	0x080149d8
 8001858:	08014988 	.word	0x08014988
 800185c:	24000204 	.word	0x24000204
 8001860:	080149f4 	.word	0x080149f4
 8001864:	08014a2c 	.word	0x08014a2c
 8001868:	08014a4c 	.word	0x08014a4c
 800186c:	240001f8 	.word	0x240001f8
 8001870:	08014a70 	.word	0x08014a70
 8001874:	080015a5 	.word	0x080015a5
 8001878:	240001fc 	.word	0x240001fc
 800187c:	08014a7c 	.word	0x08014a7c
 8001880:	08001515 	.word	0x08001515
 8001884:	24000208 	.word	0x24000208
 8001888:	08014a90 	.word	0x08014a90
 800188c:	08014a9c 	.word	0x08014a9c
 8001890:	08014aa8 	.word	0x08014aa8
 8001894:	08014ab4 	.word	0x08014ab4
 8001898:	08014ac0 	.word	0x08014ac0
 800189c:	08014ac8 	.word	0x08014ac8
 80018a0:	08014ad0 	.word	0x08014ad0

080018a4 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	80fb      	strh	r3, [r7, #6]
		pESP32->incrementInterruptRequestCountingSemaphore();		//inkrementacja semafora daje sygnał ,dla metody esp32_i2sComunicationDriver::intrrruptRequestCallback
 80018ae:	4b04      	ldr	r3, [pc, #16]	@ (80018c0 <HAL_GPIO_EXTI_Callback+0x1c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff f99a 	bl	8000bec <_ZN27esp32_i2cComunicationDriver42incrementInterruptRequestCountingSemaphoreEv>
}
 80018b8:	bf00      	nop
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	24000204 	.word	0x24000204

080018c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018ca:	4b11      	ldr	r3, [pc, #68]	@ (8001910 <MX_DMA_Init+0x4c>)
 80018cc:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80018d0:	4a0f      	ldr	r2, [pc, #60]	@ (8001910 <MX_DMA_Init+0x4c>)
 80018d2:	f043 0301 	orr.w	r3, r3, #1
 80018d6:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 80018da:	4b0d      	ldr	r3, [pc, #52]	@ (8001910 <MX_DMA_Init+0x4c>)
 80018dc:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80018e0:	f003 0301 	and.w	r3, r3, #1
 80018e4:	607b      	str	r3, [r7, #4]
 80018e6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 6, 0);
 80018e8:	2200      	movs	r2, #0
 80018ea:	2106      	movs	r1, #6
 80018ec:	200b      	movs	r0, #11
 80018ee:	f000 feb7 	bl	8002660 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80018f2:	200b      	movs	r0, #11
 80018f4:	f000 fece 	bl	8002694 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 6, 0);
 80018f8:	2200      	movs	r2, #0
 80018fa:	2106      	movs	r1, #6
 80018fc:	200c      	movs	r0, #12
 80018fe:	f000 feaf 	bl	8002660 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001902:	200c      	movs	r0, #12
 8001904:	f000 fec6 	bl	8002694 <HAL_NVIC_EnableIRQ>

}
 8001908:	bf00      	nop
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	58024400 	.word	0x58024400

08001914 <PreSleepProcessing>:

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001940:	4a04      	ldr	r2, [pc, #16]	@ (8001954 <MX_FREERTOS_Init+0x18>)
 8001942:	2100      	movs	r1, #0
 8001944:	4804      	ldr	r0, [pc, #16]	@ (8001958 <MX_FREERTOS_Init+0x1c>)
 8001946:	f00a ffcf 	bl	800c8e8 <osThreadNew>
 800194a:	4603      	mov	r3, r0
 800194c:	4a03      	ldr	r2, [pc, #12]	@ (800195c <MX_FREERTOS_Init+0x20>)
 800194e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001950:	bf00      	nop
 8001952:	bd80      	pop	{r7, pc}
 8001954:	08014b30 	.word	0x08014b30
 8001958:	08001961 	.word	0x08001961
 800195c:	2400020c 	.word	0x2400020c

08001960 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001968:	2001      	movs	r0, #1
 800196a:	f00b f84f 	bl	800ca0c <osDelay>
 800196e:	e7fb      	b.n	8001968 <StartDefaultTask+0x8>

08001970 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b088      	sub	sp, #32
 8001974:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001976:	f107 030c 	add.w	r3, r7, #12
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	605a      	str	r2, [r3, #4]
 8001980:	609a      	str	r2, [r3, #8]
 8001982:	60da      	str	r2, [r3, #12]
 8001984:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001986:	4b1b      	ldr	r3, [pc, #108]	@ (80019f4 <MX_GPIO_Init+0x84>)
 8001988:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800198c:	4a19      	ldr	r2, [pc, #100]	@ (80019f4 <MX_GPIO_Init+0x84>)
 800198e:	f043 0302 	orr.w	r3, r3, #2
 8001992:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001996:	4b17      	ldr	r3, [pc, #92]	@ (80019f4 <MX_GPIO_Init+0x84>)
 8001998:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a4:	4b13      	ldr	r3, [pc, #76]	@ (80019f4 <MX_GPIO_Init+0x84>)
 80019a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80019aa:	4a12      	ldr	r2, [pc, #72]	@ (80019f4 <MX_GPIO_Init+0x84>)
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80019b4:	4b0f      	ldr	r3, [pc, #60]	@ (80019f4 <MX_GPIO_Init+0x84>)
 80019b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	607b      	str	r3, [r7, #4]
 80019c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = esp32i2cInterruptReqest_Pin;
 80019c2:	2320      	movs	r3, #32
 80019c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019c6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80019ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(esp32i2cInterruptReqest_GPIO_Port, &GPIO_InitStruct);
 80019d0:	f107 030c 	add.w	r3, r7, #12
 80019d4:	4619      	mov	r1, r3
 80019d6:	4808      	ldr	r0, [pc, #32]	@ (80019f8 <MX_GPIO_Init+0x88>)
 80019d8:	f003 fcde 	bl	8005398 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80019dc:	2200      	movs	r2, #0
 80019de:	2105      	movs	r1, #5
 80019e0:	2017      	movs	r0, #23
 80019e2:	f000 fe3d 	bl	8002660 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80019e6:	2017      	movs	r0, #23
 80019e8:	f000 fe54 	bl	8002694 <HAL_NVIC_EnableIRQ>

}
 80019ec:	bf00      	nop
 80019ee:	3720      	adds	r7, #32
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	58024400 	.word	0x58024400
 80019f8:	58020400 	.word	0x58020400

080019fc <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a00:	4b1b      	ldr	r3, [pc, #108]	@ (8001a70 <MX_I2C1_Init+0x74>)
 8001a02:	4a1c      	ldr	r2, [pc, #112]	@ (8001a74 <MX_I2C1_Init+0x78>)
 8001a04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B0CCFF;
 8001a06:	4b1a      	ldr	r3, [pc, #104]	@ (8001a70 <MX_I2C1_Init+0x74>)
 8001a08:	4a1b      	ldr	r2, [pc, #108]	@ (8001a78 <MX_I2C1_Init+0x7c>)
 8001a0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001a0c:	4b18      	ldr	r3, [pc, #96]	@ (8001a70 <MX_I2C1_Init+0x74>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a12:	4b17      	ldr	r3, [pc, #92]	@ (8001a70 <MX_I2C1_Init+0x74>)
 8001a14:	2201      	movs	r2, #1
 8001a16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a18:	4b15      	ldr	r3, [pc, #84]	@ (8001a70 <MX_I2C1_Init+0x74>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001a1e:	4b14      	ldr	r3, [pc, #80]	@ (8001a70 <MX_I2C1_Init+0x74>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a24:	4b12      	ldr	r3, [pc, #72]	@ (8001a70 <MX_I2C1_Init+0x74>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a2a:	4b11      	ldr	r3, [pc, #68]	@ (8001a70 <MX_I2C1_Init+0x74>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8001a30:	4b0f      	ldr	r3, [pc, #60]	@ (8001a70 <MX_I2C1_Init+0x74>)
 8001a32:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001a36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a38:	480d      	ldr	r0, [pc, #52]	@ (8001a70 <MX_I2C1_Init+0x74>)
 8001a3a:	f003 ff81 	bl	8005940 <HAL_I2C_Init>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a44:	f000 f9da 	bl	8001dfc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a48:	2100      	movs	r1, #0
 8001a4a:	4809      	ldr	r0, [pc, #36]	@ (8001a70 <MX_I2C1_Init+0x74>)
 8001a4c:	f006 fad0 	bl	8007ff0 <HAL_I2CEx_ConfigAnalogFilter>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001a56:	f000 f9d1 	bl	8001dfc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	4804      	ldr	r0, [pc, #16]	@ (8001a70 <MX_I2C1_Init+0x74>)
 8001a5e:	f006 fb12 	bl	8008086 <HAL_I2CEx_ConfigDigitalFilter>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001a68:	f000 f9c8 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a6c:	bf00      	nop
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	24000210 	.word	0x24000210
 8001a74:	40005400 	.word	0x40005400
 8001a78:	20b0ccff 	.word	0x20b0ccff

08001a7c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b0ba      	sub	sp, #232	@ 0xe8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a84:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	60da      	str	r2, [r3, #12]
 8001a92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a94:	f107 0310 	add.w	r3, r7, #16
 8001a98:	22c0      	movs	r2, #192	@ 0xc0
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f00f fb3b 	bl	8011118 <memset>
  if(i2cHandle->Instance==I2C1)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a5c      	ldr	r2, [pc, #368]	@ (8001c18 <HAL_I2C_MspInit+0x19c>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	f040 80b1 	bne.w	8001c10 <HAL_I2C_MspInit+0x194>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001aae:	f04f 0208 	mov.w	r2, #8
 8001ab2:	f04f 0300 	mov.w	r3, #0
 8001ab6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001aba:	2300      	movs	r3, #0
 8001abc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ac0:	f107 0310 	add.w	r3, r7, #16
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f007 fb65 	bl	8009194 <HAL_RCCEx_PeriphCLKConfig>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8001ad0:	f000 f994 	bl	8001dfc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad4:	4b51      	ldr	r3, [pc, #324]	@ (8001c1c <HAL_I2C_MspInit+0x1a0>)
 8001ad6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001ada:	4a50      	ldr	r2, [pc, #320]	@ (8001c1c <HAL_I2C_MspInit+0x1a0>)
 8001adc:	f043 0302 	orr.w	r3, r3, #2
 8001ae0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001ae4:	4b4d      	ldr	r3, [pc, #308]	@ (8001c1c <HAL_I2C_MspInit+0x1a0>)
 8001ae6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001af2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001af6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001afa:	2312      	movs	r3, #18
 8001afc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b00:	2300      	movs	r3, #0
 8001b02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b06:	2300      	movs	r3, #0
 8001b08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b0c:	2304      	movs	r3, #4
 8001b0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b12:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001b16:	4619      	mov	r1, r3
 8001b18:	4841      	ldr	r0, [pc, #260]	@ (8001c20 <HAL_I2C_MspInit+0x1a4>)
 8001b1a:	f003 fc3d 	bl	8005398 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b1e:	4b3f      	ldr	r3, [pc, #252]	@ (8001c1c <HAL_I2C_MspInit+0x1a0>)
 8001b20:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001b24:	4a3d      	ldr	r2, [pc, #244]	@ (8001c1c <HAL_I2C_MspInit+0x1a0>)
 8001b26:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b2a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001b2e:	4b3b      	ldr	r3, [pc, #236]	@ (8001c1c <HAL_I2C_MspInit+0x1a0>)
 8001b30:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001b34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b38:	60bb      	str	r3, [r7, #8]
 8001b3a:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001b3c:	4b39      	ldr	r3, [pc, #228]	@ (8001c24 <HAL_I2C_MspInit+0x1a8>)
 8001b3e:	4a3a      	ldr	r2, [pc, #232]	@ (8001c28 <HAL_I2C_MspInit+0x1ac>)
 8001b40:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8001b42:	4b38      	ldr	r3, [pc, #224]	@ (8001c24 <HAL_I2C_MspInit+0x1a8>)
 8001b44:	2221      	movs	r2, #33	@ 0x21
 8001b46:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b48:	4b36      	ldr	r3, [pc, #216]	@ (8001c24 <HAL_I2C_MspInit+0x1a8>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b4e:	4b35      	ldr	r3, [pc, #212]	@ (8001c24 <HAL_I2C_MspInit+0x1a8>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b54:	4b33      	ldr	r3, [pc, #204]	@ (8001c24 <HAL_I2C_MspInit+0x1a8>)
 8001b56:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b5a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b5c:	4b31      	ldr	r3, [pc, #196]	@ (8001c24 <HAL_I2C_MspInit+0x1a8>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b62:	4b30      	ldr	r3, [pc, #192]	@ (8001c24 <HAL_I2C_MspInit+0x1a8>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001b68:	4b2e      	ldr	r3, [pc, #184]	@ (8001c24 <HAL_I2C_MspInit+0x1a8>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b6e:	4b2d      	ldr	r3, [pc, #180]	@ (8001c24 <HAL_I2C_MspInit+0x1a8>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b74:	4b2b      	ldr	r3, [pc, #172]	@ (8001c24 <HAL_I2C_MspInit+0x1a8>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001b7a:	482a      	ldr	r0, [pc, #168]	@ (8001c24 <HAL_I2C_MspInit+0x1a8>)
 8001b7c:	f000 fda6 	bl	80026cc <HAL_DMA_Init>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8001b86:	f000 f939 	bl	8001dfc <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a25      	ldr	r2, [pc, #148]	@ (8001c24 <HAL_I2C_MspInit+0x1a8>)
 8001b8e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b90:	4a24      	ldr	r2, [pc, #144]	@ (8001c24 <HAL_I2C_MspInit+0x1a8>)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8001b96:	4b25      	ldr	r3, [pc, #148]	@ (8001c2c <HAL_I2C_MspInit+0x1b0>)
 8001b98:	4a25      	ldr	r2, [pc, #148]	@ (8001c30 <HAL_I2C_MspInit+0x1b4>)
 8001b9a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8001b9c:	4b23      	ldr	r3, [pc, #140]	@ (8001c2c <HAL_I2C_MspInit+0x1b0>)
 8001b9e:	2222      	movs	r2, #34	@ 0x22
 8001ba0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ba2:	4b22      	ldr	r3, [pc, #136]	@ (8001c2c <HAL_I2C_MspInit+0x1b0>)
 8001ba4:	2240      	movs	r2, #64	@ 0x40
 8001ba6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ba8:	4b20      	ldr	r3, [pc, #128]	@ (8001c2c <HAL_I2C_MspInit+0x1b0>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001bae:	4b1f      	ldr	r3, [pc, #124]	@ (8001c2c <HAL_I2C_MspInit+0x1b0>)
 8001bb0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bb4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bb6:	4b1d      	ldr	r3, [pc, #116]	@ (8001c2c <HAL_I2C_MspInit+0x1b0>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bbc:	4b1b      	ldr	r3, [pc, #108]	@ (8001c2c <HAL_I2C_MspInit+0x1b0>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001bc2:	4b1a      	ldr	r3, [pc, #104]	@ (8001c2c <HAL_I2C_MspInit+0x1b0>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001bc8:	4b18      	ldr	r3, [pc, #96]	@ (8001c2c <HAL_I2C_MspInit+0x1b0>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bce:	4b17      	ldr	r3, [pc, #92]	@ (8001c2c <HAL_I2C_MspInit+0x1b0>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001bd4:	4815      	ldr	r0, [pc, #84]	@ (8001c2c <HAL_I2C_MspInit+0x1b0>)
 8001bd6:	f000 fd79 	bl	80026cc <HAL_DMA_Init>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <HAL_I2C_MspInit+0x168>
    {
      Error_Handler();
 8001be0:	f000 f90c 	bl	8001dfc <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a11      	ldr	r2, [pc, #68]	@ (8001c2c <HAL_I2C_MspInit+0x1b0>)
 8001be8:	639a      	str	r2, [r3, #56]	@ 0x38
 8001bea:	4a10      	ldr	r2, [pc, #64]	@ (8001c2c <HAL_I2C_MspInit+0x1b0>)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	2105      	movs	r1, #5
 8001bf4:	201f      	movs	r0, #31
 8001bf6:	f000 fd33 	bl	8002660 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001bfa:	201f      	movs	r0, #31
 8001bfc:	f000 fd4a 	bl	8002694 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001c00:	2200      	movs	r2, #0
 8001c02:	2105      	movs	r1, #5
 8001c04:	2020      	movs	r0, #32
 8001c06:	f000 fd2b 	bl	8002660 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001c0a:	2020      	movs	r0, #32
 8001c0c:	f000 fd42 	bl	8002694 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001c10:	bf00      	nop
 8001c12:	37e8      	adds	r7, #232	@ 0xe8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40005400 	.word	0x40005400
 8001c1c:	58024400 	.word	0x58024400
 8001c20:	58020400 	.word	0x58020400
 8001c24:	24000264 	.word	0x24000264
 8001c28:	40020010 	.word	0x40020010
 8001c2c:	240002dc 	.word	0x240002dc
 8001c30:	40020028 	.word	0x40020028

08001c34 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a14      	ldr	r2, [pc, #80]	@ (8001c94 <HAL_I2C_MspDeInit+0x60>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d121      	bne.n	8001c8a <HAL_I2C_MspDeInit+0x56>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001c46:	4b14      	ldr	r3, [pc, #80]	@ (8001c98 <HAL_I2C_MspDeInit+0x64>)
 8001c48:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001c4c:	4a12      	ldr	r2, [pc, #72]	@ (8001c98 <HAL_I2C_MspDeInit+0x64>)
 8001c4e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001c52:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8001c56:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c5a:	4810      	ldr	r0, [pc, #64]	@ (8001c9c <HAL_I2C_MspDeInit+0x68>)
 8001c5c:	f003 fd4c 	bl	80056f8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8001c60:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c64:	480d      	ldr	r0, [pc, #52]	@ (8001c9c <HAL_I2C_MspDeInit+0x68>)
 8001c66:	f003 fd47 	bl	80056f8 <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(i2cHandle->hdmarx);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f001 f8ba 	bl	8002de8 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(i2cHandle->hdmatx);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f001 f8b5 	bl	8002de8 <HAL_DMA_DeInit>

    /* I2C1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8001c7e:	201f      	movs	r0, #31
 8001c80:	f000 fd16 	bl	80026b0 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8001c84:	2020      	movs	r0, #32
 8001c86:	f000 fd13 	bl	80026b0 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40005400 	.word	0x40005400
 8001c98:	58024400 	.word	0x58024400
 8001c9c:	58020400 	.word	0x58020400

08001ca0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ca4:	f000 fba4 	bl	80023f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ca8:	f000 f812 	bl	8001cd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cac:	f7ff fe60 	bl	8001970 <MX_GPIO_Init>
  MX_DMA_Init();
 8001cb0:	f7ff fe08 	bl	80018c4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001cb4:	f000 fabc 	bl	8002230 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001cb8:	f7ff fea0 	bl	80019fc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //delay_ms(1000);
  initTaskFunctions();
 8001cbc:	f7ff fcd0 	bl	8001660 <_Z17initTaskFunctionsv>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001cc0:	f00a fdc8 	bl	800c854 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */

  MX_FREERTOS_Init();
 8001cc4:	f7ff fe3a 	bl	800193c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001cc8:	f00a fde8 	bl	800c89c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ccc:	bf00      	nop
 8001cce:	e7fd      	b.n	8001ccc <main+0x2c>

08001cd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b09c      	sub	sp, #112	@ 0x70
 8001cd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cda:	224c      	movs	r2, #76	@ 0x4c
 8001cdc:	2100      	movs	r1, #0
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f00f fa1a 	bl	8011118 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ce4:	1d3b      	adds	r3, r7, #4
 8001ce6:	2220      	movs	r2, #32
 8001ce8:	2100      	movs	r1, #0
 8001cea:	4618      	mov	r0, r3
 8001cec:	f00f fa14 	bl	8011118 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8001cf0:	4b37      	ldr	r3, [pc, #220]	@ (8001dd0 <SystemClock_Config+0x100>)
 8001cf2:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001cfa:	2002      	movs	r0, #2
 8001cfc:	f006 fa10 	bl	8008120 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001d00:	2300      	movs	r3, #0
 8001d02:	603b      	str	r3, [r7, #0]
 8001d04:	4b33      	ldr	r3, [pc, #204]	@ (8001dd4 <SystemClock_Config+0x104>)
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	4a32      	ldr	r2, [pc, #200]	@ (8001dd4 <SystemClock_Config+0x104>)
 8001d0a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001d0e:	6193      	str	r3, [r2, #24]
 8001d10:	4b30      	ldr	r3, [pc, #192]	@ (8001dd4 <SystemClock_Config+0x104>)
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001d18:	603b      	str	r3, [r7, #0]
 8001d1a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001d1c:	bf00      	nop
 8001d1e:	4b2d      	ldr	r3, [pc, #180]	@ (8001dd4 <SystemClock_Config+0x104>)
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d2a:	bf14      	ite	ne
 8001d2c:	2301      	movne	r3, #1
 8001d2e:	2300      	moveq	r3, #0
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1f3      	bne.n	8001d1e <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d36:	2302      	movs	r3, #2
 8001d38:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001d3e:	2340      	movs	r3, #64	@ 0x40
 8001d40:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d42:	2302      	movs	r3, #2
 8001d44:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d46:	2300      	movs	r3, #0
 8001d48:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001d4a:	2304      	movs	r3, #4
 8001d4c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8001d4e:	2323      	movs	r3, #35	@ 0x23
 8001d50:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001d52:	2302      	movs	r3, #2
 8001d54:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001d56:	2302      	movs	r3, #2
 8001d58:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001d5e:	230c      	movs	r3, #12
 8001d60:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001d62:	2300      	movs	r3, #0
 8001d64:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001d66:	2300      	movs	r3, #0
 8001d68:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f006 fa10 	bl	8008194 <HAL_RCC_OscConfig>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	bf14      	ite	ne
 8001d7a:	2301      	movne	r3, #1
 8001d7c:	2300      	moveq	r3, #0
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001d84:	f000 f83a 	bl	8001dfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d88:	233f      	movs	r3, #63	@ 0x3f
 8001d8a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001d90:	2300      	movs	r3, #0
 8001d92:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001d94:	2300      	movs	r3, #0
 8001d96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001d98:	2340      	movs	r3, #64	@ 0x40
 8001d9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001d9c:	2340      	movs	r3, #64	@ 0x40
 8001d9e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001da0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001da4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001da6:	2340      	movs	r3, #64	@ 0x40
 8001da8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001daa:	1d3b      	adds	r3, r7, #4
 8001dac:	2106      	movs	r1, #6
 8001dae:	4618      	mov	r0, r3
 8001db0:	f006 fe22 	bl	80089f8 <HAL_RCC_ClockConfig>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	bf14      	ite	ne
 8001dba:	2301      	movne	r3, #1
 8001dbc:	2300      	moveq	r3, #0
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8001dc4:	f000 f81a 	bl	8001dfc <Error_Handler>
  }
}
 8001dc8:	bf00      	nop
 8001dca:	3770      	adds	r7, #112	@ 0x70
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	58024400 	.word	0x58024400
 8001dd4:	58024800 	.word	0x58024800

08001dd8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a04      	ldr	r2, [pc, #16]	@ (8001df8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d101      	bne.n	8001dee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001dea:	f000 fb3d 	bl	8002468 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40010000 	.word	0x40010000

08001dfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e00:	b672      	cpsid	i
}
 8001e02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e04:	bf00      	nop
 8001e06:	e7fd      	b.n	8001e04 <Error_Handler+0x8>

08001e08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e0e:	4b0c      	ldr	r3, [pc, #48]	@ (8001e40 <HAL_MspInit+0x38>)
 8001e10:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001e14:	4a0a      	ldr	r2, [pc, #40]	@ (8001e40 <HAL_MspInit+0x38>)
 8001e16:	f043 0302 	orr.w	r3, r3, #2
 8001e1a:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001e1e:	4b08      	ldr	r3, [pc, #32]	@ (8001e40 <HAL_MspInit+0x38>)
 8001e20:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	607b      	str	r3, [r7, #4]
 8001e2a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	210f      	movs	r1, #15
 8001e30:	f06f 0001 	mvn.w	r0, #1
 8001e34:	f000 fc14 	bl	8002660 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e38:	bf00      	nop
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	58024400 	.word	0x58024400

08001e44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b08e      	sub	sp, #56	@ 0x38
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2b0f      	cmp	r3, #15
 8001e50:	d844      	bhi.n	8001edc <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8001e52:	2200      	movs	r2, #0
 8001e54:	6879      	ldr	r1, [r7, #4]
 8001e56:	2019      	movs	r0, #25
 8001e58:	f000 fc02 	bl	8002660 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001e5c:	2019      	movs	r0, #25
 8001e5e:	f000 fc19 	bl	8002694 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001e62:	4a24      	ldr	r2, [pc, #144]	@ (8001ef4 <HAL_InitTick+0xb0>)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001e68:	4b23      	ldr	r3, [pc, #140]	@ (8001ef8 <HAL_InitTick+0xb4>)
 8001e6a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001e6e:	4a22      	ldr	r2, [pc, #136]	@ (8001ef8 <HAL_InitTick+0xb4>)
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8001e78:	4b1f      	ldr	r3, [pc, #124]	@ (8001ef8 <HAL_InitTick+0xb4>)
 8001e7a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	60bb      	str	r3, [r7, #8]
 8001e84:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e86:	f107 020c 	add.w	r2, r7, #12
 8001e8a:	f107 0310 	add.w	r3, r7, #16
 8001e8e:	4611      	mov	r1, r2
 8001e90:	4618      	mov	r0, r3
 8001e92:	f007 f93d 	bl	8009110 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001e96:	f007 f925 	bl	80090e4 <HAL_RCC_GetPCLK2Freq>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ea2:	4a16      	ldr	r2, [pc, #88]	@ (8001efc <HAL_InitTick+0xb8>)
 8001ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea8:	0c9b      	lsrs	r3, r3, #18
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001eae:	4b14      	ldr	r3, [pc, #80]	@ (8001f00 <HAL_InitTick+0xbc>)
 8001eb0:	4a14      	ldr	r2, [pc, #80]	@ (8001f04 <HAL_InitTick+0xc0>)
 8001eb2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001eb4:	4b12      	ldr	r3, [pc, #72]	@ (8001f00 <HAL_InitTick+0xbc>)
 8001eb6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001eba:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001ebc:	4a10      	ldr	r2, [pc, #64]	@ (8001f00 <HAL_InitTick+0xbc>)
 8001ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ec0:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001ec2:	4b0f      	ldr	r3, [pc, #60]	@ (8001f00 <HAL_InitTick+0xbc>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ec8:	4b0d      	ldr	r3, [pc, #52]	@ (8001f00 <HAL_InitTick+0xbc>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001ece:	480c      	ldr	r0, [pc, #48]	@ (8001f00 <HAL_InitTick+0xbc>)
 8001ed0:	f008 ff40 	bl	800ad54 <HAL_TIM_Base_Init>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d107      	bne.n	8001eea <HAL_InitTick+0xa6>
 8001eda:	e001      	b.n	8001ee0 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e005      	b.n	8001eec <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001ee0:	4807      	ldr	r0, [pc, #28]	@ (8001f00 <HAL_InitTick+0xbc>)
 8001ee2:	f008 ff99 	bl	800ae18 <HAL_TIM_Base_Start_IT>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	e000      	b.n	8001eec <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3738      	adds	r7, #56	@ 0x38
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	24000008 	.word	0x24000008
 8001ef8:	58024400 	.word	0x58024400
 8001efc:	431bde83 	.word	0x431bde83
 8001f00:	24000354 	.word	0x24000354
 8001f04:	40010000 	.word	0x40010000

08001f08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f0c:	bf00      	nop
 8001f0e:	e7fd      	b.n	8001f0c <NMI_Handler+0x4>

08001f10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f14:	bf00      	nop
 8001f16:	e7fd      	b.n	8001f14 <HardFault_Handler+0x4>

08001f18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f1c:	bf00      	nop
 8001f1e:	e7fd      	b.n	8001f1c <MemManage_Handler+0x4>

08001f20 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f24:	bf00      	nop
 8001f26:	e7fd      	b.n	8001f24 <BusFault_Handler+0x4>

08001f28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f2c:	bf00      	nop
 8001f2e:	e7fd      	b.n	8001f2c <UsageFault_Handler+0x4>

08001f30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f34:	bf00      	nop
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
	...

08001f40 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001f44:	4802      	ldr	r0, [pc, #8]	@ (8001f50 <DMA1_Stream0_IRQHandler+0x10>)
 8001f46:	f001 fe8b 	bl	8003c60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	24000264 	.word	0x24000264

08001f54 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001f58:	4802      	ldr	r0, [pc, #8]	@ (8001f64 <DMA1_Stream1_IRQHandler+0x10>)
 8001f5a:	f001 fe81 	bl	8003c60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	240002dc 	.word	0x240002dc

08001f68 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(esp32i2cInterruptReqest_Pin);
 8001f6c:	2020      	movs	r0, #32
 8001f6e:	f003 fccd 	bl	800590c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}
	...

08001f78 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f7c:	4802      	ldr	r0, [pc, #8]	@ (8001f88 <TIM1_UP_IRQHandler+0x10>)
 8001f7e:	f008 ffc3 	bl	800af08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	24000354 	.word	0x24000354

08001f8c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001f90:	4802      	ldr	r0, [pc, #8]	@ (8001f9c <I2C1_EV_IRQHandler+0x10>)
 8001f92:	f003 ff7d 	bl	8005e90 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	24000210 	.word	0x24000210

08001fa0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001fa4:	4802      	ldr	r0, [pc, #8]	@ (8001fb0 <I2C1_ER_IRQHandler+0x10>)
 8001fa6:	f003 ff8d 	bl	8005ec4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	24000210 	.word	0x24000210

08001fb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  return 1;
 8001fb8:	2301      	movs	r3, #1
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <_kill>:

int _kill(int pid, int sig)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001fce:	f00f f99f 	bl	8011310 <__errno>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2216      	movs	r2, #22
 8001fd6:	601a      	str	r2, [r3, #0]
  return -1;
 8001fd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <_exit>:

void _exit (int status)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001fec:	f04f 31ff 	mov.w	r1, #4294967295
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f7ff ffe7 	bl	8001fc4 <_kill>
 while (1) {}    /* Make sure we hang here */
 8001ff6:	bf00      	nop
 8001ff8:	e7fd      	b.n	8001ff6 <_exit+0x12>

08001ffa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b086      	sub	sp, #24
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	60f8      	str	r0, [r7, #12]
 8002002:	60b9      	str	r1, [r7, #8]
 8002004:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002006:	2300      	movs	r3, #0
 8002008:	617b      	str	r3, [r7, #20]
 800200a:	e00a      	b.n	8002022 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800200c:	f3af 8000 	nop.w
 8002010:	4601      	mov	r1, r0
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	1c5a      	adds	r2, r3, #1
 8002016:	60ba      	str	r2, [r7, #8]
 8002018:	b2ca      	uxtb	r2, r1
 800201a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	3301      	adds	r3, #1
 8002020:	617b      	str	r3, [r7, #20]
 8002022:	697a      	ldr	r2, [r7, #20]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	429a      	cmp	r2, r3
 8002028:	dbf0      	blt.n	800200c <_read+0x12>
  }

  return len;
 800202a:	687b      	ldr	r3, [r7, #4]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3718      	adds	r7, #24
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]
 8002044:	e009      	b.n	800205a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	1c5a      	adds	r2, r3, #1
 800204a:	60ba      	str	r2, [r7, #8]
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff f9ec 	bl	800142c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	3301      	adds	r3, #1
 8002058:	617b      	str	r3, [r7, #20]
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	429a      	cmp	r2, r3
 8002060:	dbf1      	blt.n	8002046 <_write+0x12>
  }
  return len;
 8002062:	687b      	ldr	r3, [r7, #4]
}
 8002064:	4618      	mov	r0, r3
 8002066:	3718      	adds	r7, #24
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <_close>:

int _close(int file)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002074:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002078:	4618      	mov	r0, r3
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002094:	605a      	str	r2, [r3, #4]
  return 0;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <_isatty>:

int _isatty(int file)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020ac:	2301      	movs	r3, #1
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr

080020ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020ba:	b480      	push	{r7}
 80020bc:	b085      	sub	sp, #20
 80020be:	af00      	add	r7, sp, #0
 80020c0:	60f8      	str	r0, [r7, #12]
 80020c2:	60b9      	str	r1, [r7, #8]
 80020c4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3714      	adds	r7, #20
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020dc:	4a14      	ldr	r2, [pc, #80]	@ (8002130 <_sbrk+0x5c>)
 80020de:	4b15      	ldr	r3, [pc, #84]	@ (8002134 <_sbrk+0x60>)
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020e8:	4b13      	ldr	r3, [pc, #76]	@ (8002138 <_sbrk+0x64>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d102      	bne.n	80020f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020f0:	4b11      	ldr	r3, [pc, #68]	@ (8002138 <_sbrk+0x64>)
 80020f2:	4a12      	ldr	r2, [pc, #72]	@ (800213c <_sbrk+0x68>)
 80020f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020f6:	4b10      	ldr	r3, [pc, #64]	@ (8002138 <_sbrk+0x64>)
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4413      	add	r3, r2
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	429a      	cmp	r2, r3
 8002102:	d207      	bcs.n	8002114 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002104:	f00f f904 	bl	8011310 <__errno>
 8002108:	4603      	mov	r3, r0
 800210a:	220c      	movs	r2, #12
 800210c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800210e:	f04f 33ff 	mov.w	r3, #4294967295
 8002112:	e009      	b.n	8002128 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002114:	4b08      	ldr	r3, [pc, #32]	@ (8002138 <_sbrk+0x64>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800211a:	4b07      	ldr	r3, [pc, #28]	@ (8002138 <_sbrk+0x64>)
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4413      	add	r3, r2
 8002122:	4a05      	ldr	r2, [pc, #20]	@ (8002138 <_sbrk+0x64>)
 8002124:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002126:	68fb      	ldr	r3, [r7, #12]
}
 8002128:	4618      	mov	r0, r3
 800212a:	3718      	adds	r7, #24
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	24100000 	.word	0x24100000
 8002134:	00000400 	.word	0x00000400
 8002138:	240003a0 	.word	0x240003a0
 800213c:	24004f80 	.word	0x24004f80

08002140 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002144:	4b32      	ldr	r3, [pc, #200]	@ (8002210 <SystemInit+0xd0>)
 8002146:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800214a:	4a31      	ldr	r2, [pc, #196]	@ (8002210 <SystemInit+0xd0>)
 800214c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002150:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002154:	4b2f      	ldr	r3, [pc, #188]	@ (8002214 <SystemInit+0xd4>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 030f 	and.w	r3, r3, #15
 800215c:	2b02      	cmp	r3, #2
 800215e:	d807      	bhi.n	8002170 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002160:	4b2c      	ldr	r3, [pc, #176]	@ (8002214 <SystemInit+0xd4>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f023 030f 	bic.w	r3, r3, #15
 8002168:	4a2a      	ldr	r2, [pc, #168]	@ (8002214 <SystemInit+0xd4>)
 800216a:	f043 0303 	orr.w	r3, r3, #3
 800216e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002170:	4b29      	ldr	r3, [pc, #164]	@ (8002218 <SystemInit+0xd8>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a28      	ldr	r2, [pc, #160]	@ (8002218 <SystemInit+0xd8>)
 8002176:	f043 0301 	orr.w	r3, r3, #1
 800217a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800217c:	4b26      	ldr	r3, [pc, #152]	@ (8002218 <SystemInit+0xd8>)
 800217e:	2200      	movs	r2, #0
 8002180:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002182:	4b25      	ldr	r3, [pc, #148]	@ (8002218 <SystemInit+0xd8>)
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	4924      	ldr	r1, [pc, #144]	@ (8002218 <SystemInit+0xd8>)
 8002188:	4b24      	ldr	r3, [pc, #144]	@ (800221c <SystemInit+0xdc>)
 800218a:	4013      	ands	r3, r2
 800218c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800218e:	4b21      	ldr	r3, [pc, #132]	@ (8002214 <SystemInit+0xd4>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 030c 	and.w	r3, r3, #12
 8002196:	2b00      	cmp	r3, #0
 8002198:	d007      	beq.n	80021aa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800219a:	4b1e      	ldr	r3, [pc, #120]	@ (8002214 <SystemInit+0xd4>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f023 030f 	bic.w	r3, r3, #15
 80021a2:	4a1c      	ldr	r2, [pc, #112]	@ (8002214 <SystemInit+0xd4>)
 80021a4:	f043 0303 	orr.w	r3, r3, #3
 80021a8:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80021aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002218 <SystemInit+0xd8>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80021b0:	4b19      	ldr	r3, [pc, #100]	@ (8002218 <SystemInit+0xd8>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80021b6:	4b18      	ldr	r3, [pc, #96]	@ (8002218 <SystemInit+0xd8>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80021bc:	4b16      	ldr	r3, [pc, #88]	@ (8002218 <SystemInit+0xd8>)
 80021be:	4a18      	ldr	r2, [pc, #96]	@ (8002220 <SystemInit+0xe0>)
 80021c0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80021c2:	4b15      	ldr	r3, [pc, #84]	@ (8002218 <SystemInit+0xd8>)
 80021c4:	4a17      	ldr	r2, [pc, #92]	@ (8002224 <SystemInit+0xe4>)
 80021c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80021c8:	4b13      	ldr	r3, [pc, #76]	@ (8002218 <SystemInit+0xd8>)
 80021ca:	4a17      	ldr	r2, [pc, #92]	@ (8002228 <SystemInit+0xe8>)
 80021cc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80021ce:	4b12      	ldr	r3, [pc, #72]	@ (8002218 <SystemInit+0xd8>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80021d4:	4b10      	ldr	r3, [pc, #64]	@ (8002218 <SystemInit+0xd8>)
 80021d6:	4a14      	ldr	r2, [pc, #80]	@ (8002228 <SystemInit+0xe8>)
 80021d8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80021da:	4b0f      	ldr	r3, [pc, #60]	@ (8002218 <SystemInit+0xd8>)
 80021dc:	2200      	movs	r2, #0
 80021de:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80021e0:	4b0d      	ldr	r3, [pc, #52]	@ (8002218 <SystemInit+0xd8>)
 80021e2:	4a11      	ldr	r2, [pc, #68]	@ (8002228 <SystemInit+0xe8>)
 80021e4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80021e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002218 <SystemInit+0xd8>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80021ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002218 <SystemInit+0xd8>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a09      	ldr	r2, [pc, #36]	@ (8002218 <SystemInit+0xd8>)
 80021f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021f6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80021f8:	4b07      	ldr	r3, [pc, #28]	@ (8002218 <SystemInit+0xd8>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80021fe:	4b0b      	ldr	r3, [pc, #44]	@ (800222c <SystemInit+0xec>)
 8002200:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002204:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002206:	bf00      	nop
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	e000ed00 	.word	0xe000ed00
 8002214:	52002000 	.word	0x52002000
 8002218:	58024400 	.word	0x58024400
 800221c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002220:	02020200 	.word	0x02020200
 8002224:	01ff0000 	.word	0x01ff0000
 8002228:	01010280 	.word	0x01010280
 800222c:	52004000 	.word	0x52004000

08002230 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002234:	4b22      	ldr	r3, [pc, #136]	@ (80022c0 <MX_USART1_UART_Init+0x90>)
 8002236:	4a23      	ldr	r2, [pc, #140]	@ (80022c4 <MX_USART1_UART_Init+0x94>)
 8002238:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800223a:	4b21      	ldr	r3, [pc, #132]	@ (80022c0 <MX_USART1_UART_Init+0x90>)
 800223c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002240:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002242:	4b1f      	ldr	r3, [pc, #124]	@ (80022c0 <MX_USART1_UART_Init+0x90>)
 8002244:	2200      	movs	r2, #0
 8002246:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002248:	4b1d      	ldr	r3, [pc, #116]	@ (80022c0 <MX_USART1_UART_Init+0x90>)
 800224a:	2200      	movs	r2, #0
 800224c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800224e:	4b1c      	ldr	r3, [pc, #112]	@ (80022c0 <MX_USART1_UART_Init+0x90>)
 8002250:	2200      	movs	r2, #0
 8002252:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002254:	4b1a      	ldr	r3, [pc, #104]	@ (80022c0 <MX_USART1_UART_Init+0x90>)
 8002256:	220c      	movs	r2, #12
 8002258:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800225a:	4b19      	ldr	r3, [pc, #100]	@ (80022c0 <MX_USART1_UART_Init+0x90>)
 800225c:	2200      	movs	r2, #0
 800225e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002260:	4b17      	ldr	r3, [pc, #92]	@ (80022c0 <MX_USART1_UART_Init+0x90>)
 8002262:	2200      	movs	r2, #0
 8002264:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002266:	4b16      	ldr	r3, [pc, #88]	@ (80022c0 <MX_USART1_UART_Init+0x90>)
 8002268:	2200      	movs	r2, #0
 800226a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800226c:	4b14      	ldr	r3, [pc, #80]	@ (80022c0 <MX_USART1_UART_Init+0x90>)
 800226e:	2200      	movs	r2, #0
 8002270:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002272:	4b13      	ldr	r3, [pc, #76]	@ (80022c0 <MX_USART1_UART_Init+0x90>)
 8002274:	2200      	movs	r2, #0
 8002276:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002278:	4811      	ldr	r0, [pc, #68]	@ (80022c0 <MX_USART1_UART_Init+0x90>)
 800227a:	f009 f839 	bl	800b2f0 <HAL_UART_Init>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002284:	f7ff fdba 	bl	8001dfc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002288:	2100      	movs	r1, #0
 800228a:	480d      	ldr	r0, [pc, #52]	@ (80022c0 <MX_USART1_UART_Init+0x90>)
 800228c:	f00a f9d3 	bl	800c636 <HAL_UARTEx_SetTxFifoThreshold>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002296:	f7ff fdb1 	bl	8001dfc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800229a:	2100      	movs	r1, #0
 800229c:	4808      	ldr	r0, [pc, #32]	@ (80022c0 <MX_USART1_UART_Init+0x90>)
 800229e:	f00a fa08 	bl	800c6b2 <HAL_UARTEx_SetRxFifoThreshold>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80022a8:	f7ff fda8 	bl	8001dfc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80022ac:	4804      	ldr	r0, [pc, #16]	@ (80022c0 <MX_USART1_UART_Init+0x90>)
 80022ae:	f00a f989 	bl	800c5c4 <HAL_UARTEx_DisableFifoMode>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80022b8:	f7ff fda0 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022bc:	bf00      	nop
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	240003a4 	.word	0x240003a4
 80022c4:	40011000 	.word	0x40011000

080022c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b0ba      	sub	sp, #232	@ 0xe8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	605a      	str	r2, [r3, #4]
 80022da:	609a      	str	r2, [r3, #8]
 80022dc:	60da      	str	r2, [r3, #12]
 80022de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022e0:	f107 0310 	add.w	r3, r7, #16
 80022e4:	22c0      	movs	r2, #192	@ 0xc0
 80022e6:	2100      	movs	r1, #0
 80022e8:	4618      	mov	r0, r3
 80022ea:	f00e ff15 	bl	8011118 <memset>
  if(uartHandle->Instance==USART1)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a27      	ldr	r2, [pc, #156]	@ (8002390 <HAL_UART_MspInit+0xc8>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d146      	bne.n	8002386 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80022f8:	f04f 0201 	mov.w	r2, #1
 80022fc:	f04f 0300 	mov.w	r3, #0
 8002300:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002304:	2300      	movs	r3, #0
 8002306:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800230a:	f107 0310 	add.w	r3, r7, #16
 800230e:	4618      	mov	r0, r3
 8002310:	f006 ff40 	bl	8009194 <HAL_RCCEx_PeriphCLKConfig>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800231a:	f7ff fd6f 	bl	8001dfc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800231e:	4b1d      	ldr	r3, [pc, #116]	@ (8002394 <HAL_UART_MspInit+0xcc>)
 8002320:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002324:	4a1b      	ldr	r2, [pc, #108]	@ (8002394 <HAL_UART_MspInit+0xcc>)
 8002326:	f043 0310 	orr.w	r3, r3, #16
 800232a:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 800232e:	4b19      	ldr	r3, [pc, #100]	@ (8002394 <HAL_UART_MspInit+0xcc>)
 8002330:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002334:	f003 0310 	and.w	r3, r3, #16
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800233c:	4b15      	ldr	r3, [pc, #84]	@ (8002394 <HAL_UART_MspInit+0xcc>)
 800233e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002342:	4a14      	ldr	r2, [pc, #80]	@ (8002394 <HAL_UART_MspInit+0xcc>)
 8002344:	f043 0302 	orr.w	r3, r3, #2
 8002348:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800234c:	4b11      	ldr	r3, [pc, #68]	@ (8002394 <HAL_UART_MspInit+0xcc>)
 800234e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	60bb      	str	r3, [r7, #8]
 8002358:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = dbg_UART_TX_Pin|dbg_UART_RX_Pin;
 800235a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800235e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002362:	2302      	movs	r3, #2
 8002364:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002368:	2300      	movs	r3, #0
 800236a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236e:	2300      	movs	r3, #0
 8002370:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002374:	2304      	movs	r3, #4
 8002376:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800237a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800237e:	4619      	mov	r1, r3
 8002380:	4805      	ldr	r0, [pc, #20]	@ (8002398 <HAL_UART_MspInit+0xd0>)
 8002382:	f003 f809 	bl	8005398 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002386:	bf00      	nop
 8002388:	37e8      	adds	r7, #232	@ 0xe8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40011000 	.word	0x40011000
 8002394:	58024400 	.word	0x58024400
 8002398:	58020400 	.word	0x58020400

0800239c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800239c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80023d4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80023a0:	f7ff fece 	bl	8002140 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023a4:	480c      	ldr	r0, [pc, #48]	@ (80023d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023a6:	490d      	ldr	r1, [pc, #52]	@ (80023dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023a8:	4a0d      	ldr	r2, [pc, #52]	@ (80023e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023ac:	e002      	b.n	80023b4 <LoopCopyDataInit>

080023ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023b2:	3304      	adds	r3, #4

080023b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023b8:	d3f9      	bcc.n	80023ae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ba:	4a0a      	ldr	r2, [pc, #40]	@ (80023e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023bc:	4c0a      	ldr	r4, [pc, #40]	@ (80023e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80023be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023c0:	e001      	b.n	80023c6 <LoopFillZerobss>

080023c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023c4:	3204      	adds	r2, #4

080023c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023c8:	d3fb      	bcc.n	80023c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023ca:	f00e ffa7 	bl	801131c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023ce:	f7ff fc67 	bl	8001ca0 <main>
  bx  lr
 80023d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023d4:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80023d8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80023dc:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 80023e0:	08014fd4 	.word	0x08014fd4
  ldr r2, =_sbss
 80023e4:	240001dc 	.word	0x240001dc
  ldr r4, =_ebss
 80023e8:	24004f80 	.word	0x24004f80

080023ec <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023ec:	e7fe      	b.n	80023ec <ADC_IRQHandler>
	...

080023f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023f6:	2003      	movs	r0, #3
 80023f8:	f000 f927 	bl	800264a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80023fc:	f006 fcb2 	bl	8008d64 <HAL_RCC_GetSysClockFreq>
 8002400:	4602      	mov	r2, r0
 8002402:	4b15      	ldr	r3, [pc, #84]	@ (8002458 <HAL_Init+0x68>)
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	0a1b      	lsrs	r3, r3, #8
 8002408:	f003 030f 	and.w	r3, r3, #15
 800240c:	4913      	ldr	r1, [pc, #76]	@ (800245c <HAL_Init+0x6c>)
 800240e:	5ccb      	ldrb	r3, [r1, r3]
 8002410:	f003 031f 	and.w	r3, r3, #31
 8002414:	fa22 f303 	lsr.w	r3, r2, r3
 8002418:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800241a:	4b0f      	ldr	r3, [pc, #60]	@ (8002458 <HAL_Init+0x68>)
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	f003 030f 	and.w	r3, r3, #15
 8002422:	4a0e      	ldr	r2, [pc, #56]	@ (800245c <HAL_Init+0x6c>)
 8002424:	5cd3      	ldrb	r3, [r2, r3]
 8002426:	f003 031f 	and.w	r3, r3, #31
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	fa22 f303 	lsr.w	r3, r2, r3
 8002430:	4a0b      	ldr	r2, [pc, #44]	@ (8002460 <HAL_Init+0x70>)
 8002432:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002434:	4a0b      	ldr	r2, [pc, #44]	@ (8002464 <HAL_Init+0x74>)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800243a:	200f      	movs	r0, #15
 800243c:	f7ff fd02 	bl	8001e44 <HAL_InitTick>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e002      	b.n	8002450 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800244a:	f7ff fcdd 	bl	8001e08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	58024400 	.word	0x58024400
 800245c:	08014b54 	.word	0x08014b54
 8002460:	24000004 	.word	0x24000004
 8002464:	24000000 	.word	0x24000000

08002468 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800246c:	4b06      	ldr	r3, [pc, #24]	@ (8002488 <HAL_IncTick+0x20>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	461a      	mov	r2, r3
 8002472:	4b06      	ldr	r3, [pc, #24]	@ (800248c <HAL_IncTick+0x24>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4413      	add	r3, r2
 8002478:	4a04      	ldr	r2, [pc, #16]	@ (800248c <HAL_IncTick+0x24>)
 800247a:	6013      	str	r3, [r2, #0]
}
 800247c:	bf00      	nop
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	2400000c 	.word	0x2400000c
 800248c:	24000438 	.word	0x24000438

08002490 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  return uwTick;
 8002494:	4b03      	ldr	r3, [pc, #12]	@ (80024a4 <HAL_GetTick+0x14>)
 8002496:	681b      	ldr	r3, [r3, #0]
}
 8002498:	4618      	mov	r0, r3
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	24000438 	.word	0x24000438

080024a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024b8:	4b0b      	ldr	r3, [pc, #44]	@ (80024e8 <__NVIC_SetPriorityGrouping+0x40>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024be:	68ba      	ldr	r2, [r7, #8]
 80024c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024c4:	4013      	ands	r3, r2
 80024c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80024d0:	4b06      	ldr	r3, [pc, #24]	@ (80024ec <__NVIC_SetPriorityGrouping+0x44>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024d6:	4a04      	ldr	r2, [pc, #16]	@ (80024e8 <__NVIC_SetPriorityGrouping+0x40>)
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	60d3      	str	r3, [r2, #12]
}
 80024dc:	bf00      	nop
 80024de:	3714      	adds	r7, #20
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	e000ed00 	.word	0xe000ed00
 80024ec:	05fa0000 	.word	0x05fa0000

080024f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024f4:	4b04      	ldr	r3, [pc, #16]	@ (8002508 <__NVIC_GetPriorityGrouping+0x18>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	0a1b      	lsrs	r3, r3, #8
 80024fa:	f003 0307 	and.w	r3, r3, #7
}
 80024fe:	4618      	mov	r0, r3
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr
 8002508:	e000ed00 	.word	0xe000ed00

0800250c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	4603      	mov	r3, r0
 8002514:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002516:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800251a:	2b00      	cmp	r3, #0
 800251c:	db0b      	blt.n	8002536 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800251e:	88fb      	ldrh	r3, [r7, #6]
 8002520:	f003 021f 	and.w	r2, r3, #31
 8002524:	4907      	ldr	r1, [pc, #28]	@ (8002544 <__NVIC_EnableIRQ+0x38>)
 8002526:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800252a:	095b      	lsrs	r3, r3, #5
 800252c:	2001      	movs	r0, #1
 800252e:	fa00 f202 	lsl.w	r2, r0, r2
 8002532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002536:	bf00      	nop
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	e000e100 	.word	0xe000e100

08002548 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	4603      	mov	r3, r0
 8002550:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002552:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002556:	2b00      	cmp	r3, #0
 8002558:	db12      	blt.n	8002580 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800255a:	88fb      	ldrh	r3, [r7, #6]
 800255c:	f003 021f 	and.w	r2, r3, #31
 8002560:	490a      	ldr	r1, [pc, #40]	@ (800258c <__NVIC_DisableIRQ+0x44>)
 8002562:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002566:	095b      	lsrs	r3, r3, #5
 8002568:	2001      	movs	r0, #1
 800256a:	fa00 f202 	lsl.w	r2, r0, r2
 800256e:	3320      	adds	r3, #32
 8002570:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002574:	f3bf 8f4f 	dsb	sy
}
 8002578:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800257a:	f3bf 8f6f 	isb	sy
}
 800257e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr
 800258c:	e000e100 	.word	0xe000e100

08002590 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	4603      	mov	r3, r0
 8002598:	6039      	str	r1, [r7, #0]
 800259a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800259c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	db0a      	blt.n	80025ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	b2da      	uxtb	r2, r3
 80025a8:	490c      	ldr	r1, [pc, #48]	@ (80025dc <__NVIC_SetPriority+0x4c>)
 80025aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025ae:	0112      	lsls	r2, r2, #4
 80025b0:	b2d2      	uxtb	r2, r2
 80025b2:	440b      	add	r3, r1
 80025b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025b8:	e00a      	b.n	80025d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	b2da      	uxtb	r2, r3
 80025be:	4908      	ldr	r1, [pc, #32]	@ (80025e0 <__NVIC_SetPriority+0x50>)
 80025c0:	88fb      	ldrh	r3, [r7, #6]
 80025c2:	f003 030f 	and.w	r3, r3, #15
 80025c6:	3b04      	subs	r3, #4
 80025c8:	0112      	lsls	r2, r2, #4
 80025ca:	b2d2      	uxtb	r2, r2
 80025cc:	440b      	add	r3, r1
 80025ce:	761a      	strb	r2, [r3, #24]
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	e000e100 	.word	0xe000e100
 80025e0:	e000ed00 	.word	0xe000ed00

080025e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b089      	sub	sp, #36	@ 0x24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f003 0307 	and.w	r3, r3, #7
 80025f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	f1c3 0307 	rsb	r3, r3, #7
 80025fe:	2b04      	cmp	r3, #4
 8002600:	bf28      	it	cs
 8002602:	2304      	movcs	r3, #4
 8002604:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	3304      	adds	r3, #4
 800260a:	2b06      	cmp	r3, #6
 800260c:	d902      	bls.n	8002614 <NVIC_EncodePriority+0x30>
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	3b03      	subs	r3, #3
 8002612:	e000      	b.n	8002616 <NVIC_EncodePriority+0x32>
 8002614:	2300      	movs	r3, #0
 8002616:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002618:	f04f 32ff 	mov.w	r2, #4294967295
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	43da      	mvns	r2, r3
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	401a      	ands	r2, r3
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800262c:	f04f 31ff 	mov.w	r1, #4294967295
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	fa01 f303 	lsl.w	r3, r1, r3
 8002636:	43d9      	mvns	r1, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800263c:	4313      	orrs	r3, r2
         );
}
 800263e:	4618      	mov	r0, r3
 8002640:	3724      	adds	r7, #36	@ 0x24
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr

0800264a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b082      	sub	sp, #8
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7ff ff28 	bl	80024a8 <__NVIC_SetPriorityGrouping>
}
 8002658:	bf00      	nop
 800265a:	3708      	adds	r7, #8
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	4603      	mov	r3, r0
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
 800266c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800266e:	f7ff ff3f 	bl	80024f0 <__NVIC_GetPriorityGrouping>
 8002672:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	68b9      	ldr	r1, [r7, #8]
 8002678:	6978      	ldr	r0, [r7, #20]
 800267a:	f7ff ffb3 	bl	80025e4 <NVIC_EncodePriority>
 800267e:	4602      	mov	r2, r0
 8002680:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002684:	4611      	mov	r1, r2
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff ff82 	bl	8002590 <__NVIC_SetPriority>
}
 800268c:	bf00      	nop
 800268e:	3718      	adds	r7, #24
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	4603      	mov	r3, r0
 800269c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800269e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7ff ff32 	bl	800250c <__NVIC_EnableIRQ>
}
 80026a8:	bf00      	nop
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80026ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff ff42 	bl	8002548 <__NVIC_DisableIRQ>
}
 80026c4:	bf00      	nop
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80026d4:	f7ff fedc 	bl	8002490 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e37d      	b.n	8002de0 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a66      	ldr	r2, [pc, #408]	@ (8002884 <HAL_DMA_Init+0x1b8>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d04a      	beq.n	8002784 <HAL_DMA_Init+0xb8>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a65      	ldr	r2, [pc, #404]	@ (8002888 <HAL_DMA_Init+0x1bc>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d045      	beq.n	8002784 <HAL_DMA_Init+0xb8>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a63      	ldr	r2, [pc, #396]	@ (800288c <HAL_DMA_Init+0x1c0>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d040      	beq.n	8002784 <HAL_DMA_Init+0xb8>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a62      	ldr	r2, [pc, #392]	@ (8002890 <HAL_DMA_Init+0x1c4>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d03b      	beq.n	8002784 <HAL_DMA_Init+0xb8>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a60      	ldr	r2, [pc, #384]	@ (8002894 <HAL_DMA_Init+0x1c8>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d036      	beq.n	8002784 <HAL_DMA_Init+0xb8>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a5f      	ldr	r2, [pc, #380]	@ (8002898 <HAL_DMA_Init+0x1cc>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d031      	beq.n	8002784 <HAL_DMA_Init+0xb8>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a5d      	ldr	r2, [pc, #372]	@ (800289c <HAL_DMA_Init+0x1d0>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d02c      	beq.n	8002784 <HAL_DMA_Init+0xb8>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a5c      	ldr	r2, [pc, #368]	@ (80028a0 <HAL_DMA_Init+0x1d4>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d027      	beq.n	8002784 <HAL_DMA_Init+0xb8>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a5a      	ldr	r2, [pc, #360]	@ (80028a4 <HAL_DMA_Init+0x1d8>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d022      	beq.n	8002784 <HAL_DMA_Init+0xb8>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a59      	ldr	r2, [pc, #356]	@ (80028a8 <HAL_DMA_Init+0x1dc>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d01d      	beq.n	8002784 <HAL_DMA_Init+0xb8>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a57      	ldr	r2, [pc, #348]	@ (80028ac <HAL_DMA_Init+0x1e0>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d018      	beq.n	8002784 <HAL_DMA_Init+0xb8>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a56      	ldr	r2, [pc, #344]	@ (80028b0 <HAL_DMA_Init+0x1e4>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d013      	beq.n	8002784 <HAL_DMA_Init+0xb8>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a54      	ldr	r2, [pc, #336]	@ (80028b4 <HAL_DMA_Init+0x1e8>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d00e      	beq.n	8002784 <HAL_DMA_Init+0xb8>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a53      	ldr	r2, [pc, #332]	@ (80028b8 <HAL_DMA_Init+0x1ec>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d009      	beq.n	8002784 <HAL_DMA_Init+0xb8>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a51      	ldr	r2, [pc, #324]	@ (80028bc <HAL_DMA_Init+0x1f0>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d004      	beq.n	8002784 <HAL_DMA_Init+0xb8>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a50      	ldr	r2, [pc, #320]	@ (80028c0 <HAL_DMA_Init+0x1f4>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d101      	bne.n	8002788 <HAL_DMA_Init+0xbc>
 8002784:	2301      	movs	r3, #1
 8002786:	e000      	b.n	800278a <HAL_DMA_Init+0xbe>
 8002788:	2300      	movs	r3, #0
 800278a:	2b00      	cmp	r3, #0
 800278c:	f000 813c 	beq.w	8002a08 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2202      	movs	r2, #2
 8002794:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a37      	ldr	r2, [pc, #220]	@ (8002884 <HAL_DMA_Init+0x1b8>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d04a      	beq.n	8002840 <HAL_DMA_Init+0x174>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a36      	ldr	r2, [pc, #216]	@ (8002888 <HAL_DMA_Init+0x1bc>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d045      	beq.n	8002840 <HAL_DMA_Init+0x174>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a34      	ldr	r2, [pc, #208]	@ (800288c <HAL_DMA_Init+0x1c0>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d040      	beq.n	8002840 <HAL_DMA_Init+0x174>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a33      	ldr	r2, [pc, #204]	@ (8002890 <HAL_DMA_Init+0x1c4>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d03b      	beq.n	8002840 <HAL_DMA_Init+0x174>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a31      	ldr	r2, [pc, #196]	@ (8002894 <HAL_DMA_Init+0x1c8>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d036      	beq.n	8002840 <HAL_DMA_Init+0x174>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a30      	ldr	r2, [pc, #192]	@ (8002898 <HAL_DMA_Init+0x1cc>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d031      	beq.n	8002840 <HAL_DMA_Init+0x174>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a2e      	ldr	r2, [pc, #184]	@ (800289c <HAL_DMA_Init+0x1d0>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d02c      	beq.n	8002840 <HAL_DMA_Init+0x174>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a2d      	ldr	r2, [pc, #180]	@ (80028a0 <HAL_DMA_Init+0x1d4>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d027      	beq.n	8002840 <HAL_DMA_Init+0x174>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a2b      	ldr	r2, [pc, #172]	@ (80028a4 <HAL_DMA_Init+0x1d8>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d022      	beq.n	8002840 <HAL_DMA_Init+0x174>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a2a      	ldr	r2, [pc, #168]	@ (80028a8 <HAL_DMA_Init+0x1dc>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d01d      	beq.n	8002840 <HAL_DMA_Init+0x174>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a28      	ldr	r2, [pc, #160]	@ (80028ac <HAL_DMA_Init+0x1e0>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d018      	beq.n	8002840 <HAL_DMA_Init+0x174>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a27      	ldr	r2, [pc, #156]	@ (80028b0 <HAL_DMA_Init+0x1e4>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d013      	beq.n	8002840 <HAL_DMA_Init+0x174>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a25      	ldr	r2, [pc, #148]	@ (80028b4 <HAL_DMA_Init+0x1e8>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d00e      	beq.n	8002840 <HAL_DMA_Init+0x174>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a24      	ldr	r2, [pc, #144]	@ (80028b8 <HAL_DMA_Init+0x1ec>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d009      	beq.n	8002840 <HAL_DMA_Init+0x174>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a22      	ldr	r2, [pc, #136]	@ (80028bc <HAL_DMA_Init+0x1f0>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d004      	beq.n	8002840 <HAL_DMA_Init+0x174>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a21      	ldr	r2, [pc, #132]	@ (80028c0 <HAL_DMA_Init+0x1f4>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d108      	bne.n	8002852 <HAL_DMA_Init+0x186>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 0201 	bic.w	r2, r2, #1
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	e007      	b.n	8002862 <HAL_DMA_Init+0x196>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f022 0201 	bic.w	r2, r2, #1
 8002860:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002862:	e02f      	b.n	80028c4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002864:	f7ff fe14 	bl	8002490 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b05      	cmp	r3, #5
 8002870:	d928      	bls.n	80028c4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2220      	movs	r2, #32
 8002876:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2203      	movs	r2, #3
 800287c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e2ad      	b.n	8002de0 <HAL_DMA_Init+0x714>
 8002884:	40020010 	.word	0x40020010
 8002888:	40020028 	.word	0x40020028
 800288c:	40020040 	.word	0x40020040
 8002890:	40020058 	.word	0x40020058
 8002894:	40020070 	.word	0x40020070
 8002898:	40020088 	.word	0x40020088
 800289c:	400200a0 	.word	0x400200a0
 80028a0:	400200b8 	.word	0x400200b8
 80028a4:	40020410 	.word	0x40020410
 80028a8:	40020428 	.word	0x40020428
 80028ac:	40020440 	.word	0x40020440
 80028b0:	40020458 	.word	0x40020458
 80028b4:	40020470 	.word	0x40020470
 80028b8:	40020488 	.word	0x40020488
 80028bc:	400204a0 	.word	0x400204a0
 80028c0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1c8      	bne.n	8002864 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80028da:	697a      	ldr	r2, [r7, #20]
 80028dc:	4b73      	ldr	r3, [pc, #460]	@ (8002aac <HAL_DMA_Init+0x3e0>)
 80028de:	4013      	ands	r3, r2
 80028e0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80028ea:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028f6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002902:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	4313      	orrs	r3, r2
 800290e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002914:	2b04      	cmp	r3, #4
 8002916:	d107      	bne.n	8002928 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002920:	4313      	orrs	r3, r2
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	4313      	orrs	r3, r2
 8002926:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	2b28      	cmp	r3, #40	@ 0x28
 800292e:	d903      	bls.n	8002938 <HAL_DMA_Init+0x26c>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	2b2e      	cmp	r3, #46	@ 0x2e
 8002936:	d91f      	bls.n	8002978 <HAL_DMA_Init+0x2ac>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	2b3e      	cmp	r3, #62	@ 0x3e
 800293e:	d903      	bls.n	8002948 <HAL_DMA_Init+0x27c>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	2b42      	cmp	r3, #66	@ 0x42
 8002946:	d917      	bls.n	8002978 <HAL_DMA_Init+0x2ac>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	2b46      	cmp	r3, #70	@ 0x46
 800294e:	d903      	bls.n	8002958 <HAL_DMA_Init+0x28c>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	2b48      	cmp	r3, #72	@ 0x48
 8002956:	d90f      	bls.n	8002978 <HAL_DMA_Init+0x2ac>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b4e      	cmp	r3, #78	@ 0x4e
 800295e:	d903      	bls.n	8002968 <HAL_DMA_Init+0x29c>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	2b52      	cmp	r3, #82	@ 0x52
 8002966:	d907      	bls.n	8002978 <HAL_DMA_Init+0x2ac>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	2b73      	cmp	r3, #115	@ 0x73
 800296e:	d905      	bls.n	800297c <HAL_DMA_Init+0x2b0>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	2b77      	cmp	r3, #119	@ 0x77
 8002976:	d801      	bhi.n	800297c <HAL_DMA_Init+0x2b0>
 8002978:	2301      	movs	r3, #1
 800297a:	e000      	b.n	800297e <HAL_DMA_Init+0x2b2>
 800297c:	2300      	movs	r3, #0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002988:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	695b      	ldr	r3, [r3, #20]
 8002998:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	f023 0307 	bic.w	r3, r3, #7
 80029a0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b0:	2b04      	cmp	r3, #4
 80029b2:	d117      	bne.n	80029e4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029b8:	697a      	ldr	r2, [r7, #20]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00e      	beq.n	80029e4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f002 fb5c 	bl	8005084 <DMA_CheckFifoParam>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d008      	beq.n	80029e4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2240      	movs	r2, #64	@ 0x40
 80029d6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e1fd      	b.n	8002de0 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	697a      	ldr	r2, [r7, #20]
 80029ea:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f002 fa97 	bl	8004f20 <DMA_CalcBaseAndBitshift>
 80029f2:	4603      	mov	r3, r0
 80029f4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029fa:	f003 031f 	and.w	r3, r3, #31
 80029fe:	223f      	movs	r2, #63	@ 0x3f
 8002a00:	409a      	lsls	r2, r3
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	609a      	str	r2, [r3, #8]
 8002a06:	e0fd      	b.n	8002c04 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a28      	ldr	r2, [pc, #160]	@ (8002ab0 <HAL_DMA_Init+0x3e4>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d04a      	beq.n	8002aa8 <HAL_DMA_Init+0x3dc>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a27      	ldr	r2, [pc, #156]	@ (8002ab4 <HAL_DMA_Init+0x3e8>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d045      	beq.n	8002aa8 <HAL_DMA_Init+0x3dc>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a25      	ldr	r2, [pc, #148]	@ (8002ab8 <HAL_DMA_Init+0x3ec>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d040      	beq.n	8002aa8 <HAL_DMA_Init+0x3dc>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a24      	ldr	r2, [pc, #144]	@ (8002abc <HAL_DMA_Init+0x3f0>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d03b      	beq.n	8002aa8 <HAL_DMA_Init+0x3dc>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a22      	ldr	r2, [pc, #136]	@ (8002ac0 <HAL_DMA_Init+0x3f4>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d036      	beq.n	8002aa8 <HAL_DMA_Init+0x3dc>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a21      	ldr	r2, [pc, #132]	@ (8002ac4 <HAL_DMA_Init+0x3f8>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d031      	beq.n	8002aa8 <HAL_DMA_Init+0x3dc>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a1f      	ldr	r2, [pc, #124]	@ (8002ac8 <HAL_DMA_Init+0x3fc>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d02c      	beq.n	8002aa8 <HAL_DMA_Init+0x3dc>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a1e      	ldr	r2, [pc, #120]	@ (8002acc <HAL_DMA_Init+0x400>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d027      	beq.n	8002aa8 <HAL_DMA_Init+0x3dc>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a1c      	ldr	r2, [pc, #112]	@ (8002ad0 <HAL_DMA_Init+0x404>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d022      	beq.n	8002aa8 <HAL_DMA_Init+0x3dc>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a1b      	ldr	r2, [pc, #108]	@ (8002ad4 <HAL_DMA_Init+0x408>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d01d      	beq.n	8002aa8 <HAL_DMA_Init+0x3dc>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a19      	ldr	r2, [pc, #100]	@ (8002ad8 <HAL_DMA_Init+0x40c>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d018      	beq.n	8002aa8 <HAL_DMA_Init+0x3dc>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a18      	ldr	r2, [pc, #96]	@ (8002adc <HAL_DMA_Init+0x410>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d013      	beq.n	8002aa8 <HAL_DMA_Init+0x3dc>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a16      	ldr	r2, [pc, #88]	@ (8002ae0 <HAL_DMA_Init+0x414>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d00e      	beq.n	8002aa8 <HAL_DMA_Init+0x3dc>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a15      	ldr	r2, [pc, #84]	@ (8002ae4 <HAL_DMA_Init+0x418>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d009      	beq.n	8002aa8 <HAL_DMA_Init+0x3dc>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a13      	ldr	r2, [pc, #76]	@ (8002ae8 <HAL_DMA_Init+0x41c>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d004      	beq.n	8002aa8 <HAL_DMA_Init+0x3dc>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a12      	ldr	r2, [pc, #72]	@ (8002aec <HAL_DMA_Init+0x420>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d123      	bne.n	8002af0 <HAL_DMA_Init+0x424>
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e022      	b.n	8002af2 <HAL_DMA_Init+0x426>
 8002aac:	fe10803f 	.word	0xfe10803f
 8002ab0:	48022c08 	.word	0x48022c08
 8002ab4:	48022c1c 	.word	0x48022c1c
 8002ab8:	48022c30 	.word	0x48022c30
 8002abc:	48022c44 	.word	0x48022c44
 8002ac0:	48022c58 	.word	0x48022c58
 8002ac4:	48022c6c 	.word	0x48022c6c
 8002ac8:	48022c80 	.word	0x48022c80
 8002acc:	48022c94 	.word	0x48022c94
 8002ad0:	58025408 	.word	0x58025408
 8002ad4:	5802541c 	.word	0x5802541c
 8002ad8:	58025430 	.word	0x58025430
 8002adc:	58025444 	.word	0x58025444
 8002ae0:	58025458 	.word	0x58025458
 8002ae4:	5802546c 	.word	0x5802546c
 8002ae8:	58025480 	.word	0x58025480
 8002aec:	58025494 	.word	0x58025494
 8002af0:	2300      	movs	r3, #0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d07d      	beq.n	8002bf2 <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a7f      	ldr	r2, [pc, #508]	@ (8002cf8 <HAL_DMA_Init+0x62c>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d021      	beq.n	8002b44 <HAL_DMA_Init+0x478>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a7d      	ldr	r2, [pc, #500]	@ (8002cfc <HAL_DMA_Init+0x630>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d01c      	beq.n	8002b44 <HAL_DMA_Init+0x478>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a7c      	ldr	r2, [pc, #496]	@ (8002d00 <HAL_DMA_Init+0x634>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d017      	beq.n	8002b44 <HAL_DMA_Init+0x478>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a7a      	ldr	r2, [pc, #488]	@ (8002d04 <HAL_DMA_Init+0x638>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d012      	beq.n	8002b44 <HAL_DMA_Init+0x478>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a79      	ldr	r2, [pc, #484]	@ (8002d08 <HAL_DMA_Init+0x63c>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d00d      	beq.n	8002b44 <HAL_DMA_Init+0x478>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a77      	ldr	r2, [pc, #476]	@ (8002d0c <HAL_DMA_Init+0x640>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d008      	beq.n	8002b44 <HAL_DMA_Init+0x478>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a76      	ldr	r2, [pc, #472]	@ (8002d10 <HAL_DMA_Init+0x644>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d003      	beq.n	8002b44 <HAL_DMA_Init+0x478>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a74      	ldr	r2, [pc, #464]	@ (8002d14 <HAL_DMA_Init+0x648>)
 8002b42:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2202      	movs	r2, #2
 8002b48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	4b6e      	ldr	r3, [pc, #440]	@ (8002d18 <HAL_DMA_Init+0x64c>)
 8002b60:	4013      	ands	r3, r2
 8002b62:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	2b40      	cmp	r3, #64	@ 0x40
 8002b6a:	d008      	beq.n	8002b7e <HAL_DMA_Init+0x4b2>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	2b80      	cmp	r3, #128	@ 0x80
 8002b72:	d102      	bne.n	8002b7a <HAL_DMA_Init+0x4ae>
 8002b74:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002b78:	e002      	b.n	8002b80 <HAL_DMA_Init+0x4b4>
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	e000      	b.n	8002b80 <HAL_DMA_Init+0x4b4>
 8002b7e:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	68d2      	ldr	r2, [r2, #12]
 8002b84:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002b86:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002b8e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002b96:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002b9e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	69db      	ldr	r3, [r3, #28]
 8002ba4:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002ba6:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002bae:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	4b55      	ldr	r3, [pc, #340]	@ (8002d1c <HAL_DMA_Init+0x650>)
 8002bc6:	4413      	add	r3, r2
 8002bc8:	4a55      	ldr	r2, [pc, #340]	@ (8002d20 <HAL_DMA_Init+0x654>)
 8002bca:	fba2 2303 	umull	r2, r3, r2, r3
 8002bce:	091b      	lsrs	r3, r3, #4
 8002bd0:	009a      	lsls	r2, r3, #2
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f002 f9a2 	bl	8004f20 <DMA_CalcBaseAndBitshift>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002be4:	f003 031f 	and.w	r3, r3, #31
 8002be8:	2201      	movs	r2, #1
 8002bea:	409a      	lsls	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	605a      	str	r2, [r3, #4]
 8002bf0:	e008      	b.n	8002c04 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2240      	movs	r2, #64	@ 0x40
 8002bf6:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2203      	movs	r2, #3
 8002bfc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e0ed      	b.n	8002de0 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a46      	ldr	r2, [pc, #280]	@ (8002d24 <HAL_DMA_Init+0x658>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d072      	beq.n	8002cf4 <HAL_DMA_Init+0x628>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a45      	ldr	r2, [pc, #276]	@ (8002d28 <HAL_DMA_Init+0x65c>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d06d      	beq.n	8002cf4 <HAL_DMA_Init+0x628>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a43      	ldr	r2, [pc, #268]	@ (8002d2c <HAL_DMA_Init+0x660>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d068      	beq.n	8002cf4 <HAL_DMA_Init+0x628>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a42      	ldr	r2, [pc, #264]	@ (8002d30 <HAL_DMA_Init+0x664>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d063      	beq.n	8002cf4 <HAL_DMA_Init+0x628>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a40      	ldr	r2, [pc, #256]	@ (8002d34 <HAL_DMA_Init+0x668>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d05e      	beq.n	8002cf4 <HAL_DMA_Init+0x628>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a3f      	ldr	r2, [pc, #252]	@ (8002d38 <HAL_DMA_Init+0x66c>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d059      	beq.n	8002cf4 <HAL_DMA_Init+0x628>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a3d      	ldr	r2, [pc, #244]	@ (8002d3c <HAL_DMA_Init+0x670>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d054      	beq.n	8002cf4 <HAL_DMA_Init+0x628>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a3c      	ldr	r2, [pc, #240]	@ (8002d40 <HAL_DMA_Init+0x674>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d04f      	beq.n	8002cf4 <HAL_DMA_Init+0x628>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a3a      	ldr	r2, [pc, #232]	@ (8002d44 <HAL_DMA_Init+0x678>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d04a      	beq.n	8002cf4 <HAL_DMA_Init+0x628>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a39      	ldr	r2, [pc, #228]	@ (8002d48 <HAL_DMA_Init+0x67c>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d045      	beq.n	8002cf4 <HAL_DMA_Init+0x628>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a37      	ldr	r2, [pc, #220]	@ (8002d4c <HAL_DMA_Init+0x680>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d040      	beq.n	8002cf4 <HAL_DMA_Init+0x628>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a36      	ldr	r2, [pc, #216]	@ (8002d50 <HAL_DMA_Init+0x684>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d03b      	beq.n	8002cf4 <HAL_DMA_Init+0x628>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a34      	ldr	r2, [pc, #208]	@ (8002d54 <HAL_DMA_Init+0x688>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d036      	beq.n	8002cf4 <HAL_DMA_Init+0x628>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a33      	ldr	r2, [pc, #204]	@ (8002d58 <HAL_DMA_Init+0x68c>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d031      	beq.n	8002cf4 <HAL_DMA_Init+0x628>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a31      	ldr	r2, [pc, #196]	@ (8002d5c <HAL_DMA_Init+0x690>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d02c      	beq.n	8002cf4 <HAL_DMA_Init+0x628>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a30      	ldr	r2, [pc, #192]	@ (8002d60 <HAL_DMA_Init+0x694>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d027      	beq.n	8002cf4 <HAL_DMA_Init+0x628>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a13      	ldr	r2, [pc, #76]	@ (8002cf8 <HAL_DMA_Init+0x62c>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d022      	beq.n	8002cf4 <HAL_DMA_Init+0x628>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a12      	ldr	r2, [pc, #72]	@ (8002cfc <HAL_DMA_Init+0x630>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d01d      	beq.n	8002cf4 <HAL_DMA_Init+0x628>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a10      	ldr	r2, [pc, #64]	@ (8002d00 <HAL_DMA_Init+0x634>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d018      	beq.n	8002cf4 <HAL_DMA_Init+0x628>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a0f      	ldr	r2, [pc, #60]	@ (8002d04 <HAL_DMA_Init+0x638>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d013      	beq.n	8002cf4 <HAL_DMA_Init+0x628>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a0d      	ldr	r2, [pc, #52]	@ (8002d08 <HAL_DMA_Init+0x63c>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d00e      	beq.n	8002cf4 <HAL_DMA_Init+0x628>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a0c      	ldr	r2, [pc, #48]	@ (8002d0c <HAL_DMA_Init+0x640>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d009      	beq.n	8002cf4 <HAL_DMA_Init+0x628>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a0a      	ldr	r2, [pc, #40]	@ (8002d10 <HAL_DMA_Init+0x644>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d004      	beq.n	8002cf4 <HAL_DMA_Init+0x628>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a09      	ldr	r2, [pc, #36]	@ (8002d14 <HAL_DMA_Init+0x648>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d137      	bne.n	8002d64 <HAL_DMA_Init+0x698>
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e036      	b.n	8002d66 <HAL_DMA_Init+0x69a>
 8002cf8:	58025408 	.word	0x58025408
 8002cfc:	5802541c 	.word	0x5802541c
 8002d00:	58025430 	.word	0x58025430
 8002d04:	58025444 	.word	0x58025444
 8002d08:	58025458 	.word	0x58025458
 8002d0c:	5802546c 	.word	0x5802546c
 8002d10:	58025480 	.word	0x58025480
 8002d14:	58025494 	.word	0x58025494
 8002d18:	fffe000f 	.word	0xfffe000f
 8002d1c:	a7fdabf8 	.word	0xa7fdabf8
 8002d20:	cccccccd 	.word	0xcccccccd
 8002d24:	40020010 	.word	0x40020010
 8002d28:	40020028 	.word	0x40020028
 8002d2c:	40020040 	.word	0x40020040
 8002d30:	40020058 	.word	0x40020058
 8002d34:	40020070 	.word	0x40020070
 8002d38:	40020088 	.word	0x40020088
 8002d3c:	400200a0 	.word	0x400200a0
 8002d40:	400200b8 	.word	0x400200b8
 8002d44:	40020410 	.word	0x40020410
 8002d48:	40020428 	.word	0x40020428
 8002d4c:	40020440 	.word	0x40020440
 8002d50:	40020458 	.word	0x40020458
 8002d54:	40020470 	.word	0x40020470
 8002d58:	40020488 	.word	0x40020488
 8002d5c:	400204a0 	.word	0x400204a0
 8002d60:	400204b8 	.word	0x400204b8
 8002d64:	2300      	movs	r3, #0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d032      	beq.n	8002dd0 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f002 fa06 	bl	800517c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	2b80      	cmp	r3, #128	@ 0x80
 8002d76:	d102      	bne.n	8002d7e <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d86:	b2d2      	uxtb	r2, r2
 8002d88:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002d92:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d010      	beq.n	8002dbe <HAL_DMA_Init+0x6f2>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	2b08      	cmp	r3, #8
 8002da2:	d80c      	bhi.n	8002dbe <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f002 fa83 	bl	80052b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002dae:	2200      	movs	r2, #0
 8002db0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002dba:	605a      	str	r2, [r3, #4]
 8002dbc:	e008      	b.n	8002dd0 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3718      	adds	r7, #24
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e27e      	b.n	80032f8 <HAL_DMA_DeInit+0x510>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a6d      	ldr	r2, [pc, #436]	@ (8002fb4 <HAL_DMA_DeInit+0x1cc>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d04a      	beq.n	8002e9a <HAL_DMA_DeInit+0xb2>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a6b      	ldr	r2, [pc, #428]	@ (8002fb8 <HAL_DMA_DeInit+0x1d0>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d045      	beq.n	8002e9a <HAL_DMA_DeInit+0xb2>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a6a      	ldr	r2, [pc, #424]	@ (8002fbc <HAL_DMA_DeInit+0x1d4>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d040      	beq.n	8002e9a <HAL_DMA_DeInit+0xb2>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a68      	ldr	r2, [pc, #416]	@ (8002fc0 <HAL_DMA_DeInit+0x1d8>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d03b      	beq.n	8002e9a <HAL_DMA_DeInit+0xb2>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a67      	ldr	r2, [pc, #412]	@ (8002fc4 <HAL_DMA_DeInit+0x1dc>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d036      	beq.n	8002e9a <HAL_DMA_DeInit+0xb2>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a65      	ldr	r2, [pc, #404]	@ (8002fc8 <HAL_DMA_DeInit+0x1e0>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d031      	beq.n	8002e9a <HAL_DMA_DeInit+0xb2>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a64      	ldr	r2, [pc, #400]	@ (8002fcc <HAL_DMA_DeInit+0x1e4>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d02c      	beq.n	8002e9a <HAL_DMA_DeInit+0xb2>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a62      	ldr	r2, [pc, #392]	@ (8002fd0 <HAL_DMA_DeInit+0x1e8>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d027      	beq.n	8002e9a <HAL_DMA_DeInit+0xb2>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a61      	ldr	r2, [pc, #388]	@ (8002fd4 <HAL_DMA_DeInit+0x1ec>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d022      	beq.n	8002e9a <HAL_DMA_DeInit+0xb2>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a5f      	ldr	r2, [pc, #380]	@ (8002fd8 <HAL_DMA_DeInit+0x1f0>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d01d      	beq.n	8002e9a <HAL_DMA_DeInit+0xb2>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a5e      	ldr	r2, [pc, #376]	@ (8002fdc <HAL_DMA_DeInit+0x1f4>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d018      	beq.n	8002e9a <HAL_DMA_DeInit+0xb2>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a5c      	ldr	r2, [pc, #368]	@ (8002fe0 <HAL_DMA_DeInit+0x1f8>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d013      	beq.n	8002e9a <HAL_DMA_DeInit+0xb2>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a5b      	ldr	r2, [pc, #364]	@ (8002fe4 <HAL_DMA_DeInit+0x1fc>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d00e      	beq.n	8002e9a <HAL_DMA_DeInit+0xb2>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a59      	ldr	r2, [pc, #356]	@ (8002fe8 <HAL_DMA_DeInit+0x200>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d009      	beq.n	8002e9a <HAL_DMA_DeInit+0xb2>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a58      	ldr	r2, [pc, #352]	@ (8002fec <HAL_DMA_DeInit+0x204>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d004      	beq.n	8002e9a <HAL_DMA_DeInit+0xb2>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a56      	ldr	r2, [pc, #344]	@ (8002ff0 <HAL_DMA_DeInit+0x208>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d108      	bne.n	8002eac <HAL_DMA_DeInit+0xc4>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f022 0201 	bic.w	r2, r2, #1
 8002ea8:	601a      	str	r2, [r3, #0]
 8002eaa:	e007      	b.n	8002ebc <HAL_DMA_DeInit+0xd4>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 0201 	bic.w	r2, r2, #1
 8002eba:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a3c      	ldr	r2, [pc, #240]	@ (8002fb4 <HAL_DMA_DeInit+0x1cc>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d04a      	beq.n	8002f5c <HAL_DMA_DeInit+0x174>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a3b      	ldr	r2, [pc, #236]	@ (8002fb8 <HAL_DMA_DeInit+0x1d0>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d045      	beq.n	8002f5c <HAL_DMA_DeInit+0x174>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a39      	ldr	r2, [pc, #228]	@ (8002fbc <HAL_DMA_DeInit+0x1d4>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d040      	beq.n	8002f5c <HAL_DMA_DeInit+0x174>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a38      	ldr	r2, [pc, #224]	@ (8002fc0 <HAL_DMA_DeInit+0x1d8>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d03b      	beq.n	8002f5c <HAL_DMA_DeInit+0x174>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a36      	ldr	r2, [pc, #216]	@ (8002fc4 <HAL_DMA_DeInit+0x1dc>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d036      	beq.n	8002f5c <HAL_DMA_DeInit+0x174>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a35      	ldr	r2, [pc, #212]	@ (8002fc8 <HAL_DMA_DeInit+0x1e0>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d031      	beq.n	8002f5c <HAL_DMA_DeInit+0x174>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a33      	ldr	r2, [pc, #204]	@ (8002fcc <HAL_DMA_DeInit+0x1e4>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d02c      	beq.n	8002f5c <HAL_DMA_DeInit+0x174>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a32      	ldr	r2, [pc, #200]	@ (8002fd0 <HAL_DMA_DeInit+0x1e8>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d027      	beq.n	8002f5c <HAL_DMA_DeInit+0x174>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a30      	ldr	r2, [pc, #192]	@ (8002fd4 <HAL_DMA_DeInit+0x1ec>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d022      	beq.n	8002f5c <HAL_DMA_DeInit+0x174>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a2f      	ldr	r2, [pc, #188]	@ (8002fd8 <HAL_DMA_DeInit+0x1f0>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d01d      	beq.n	8002f5c <HAL_DMA_DeInit+0x174>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a2d      	ldr	r2, [pc, #180]	@ (8002fdc <HAL_DMA_DeInit+0x1f4>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d018      	beq.n	8002f5c <HAL_DMA_DeInit+0x174>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a2c      	ldr	r2, [pc, #176]	@ (8002fe0 <HAL_DMA_DeInit+0x1f8>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d013      	beq.n	8002f5c <HAL_DMA_DeInit+0x174>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a2a      	ldr	r2, [pc, #168]	@ (8002fe4 <HAL_DMA_DeInit+0x1fc>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d00e      	beq.n	8002f5c <HAL_DMA_DeInit+0x174>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a29      	ldr	r2, [pc, #164]	@ (8002fe8 <HAL_DMA_DeInit+0x200>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d009      	beq.n	8002f5c <HAL_DMA_DeInit+0x174>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a27      	ldr	r2, [pc, #156]	@ (8002fec <HAL_DMA_DeInit+0x204>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d004      	beq.n	8002f5c <HAL_DMA_DeInit+0x174>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a26      	ldr	r2, [pc, #152]	@ (8002ff0 <HAL_DMA_DeInit+0x208>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d101      	bne.n	8002f60 <HAL_DMA_DeInit+0x178>
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e000      	b.n	8002f62 <HAL_DMA_DeInit+0x17a>
 8002f60:	2300      	movs	r3, #0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d046      	beq.n	8002ff4 <HAL_DMA_DeInit+0x20c>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2200      	movs	r2, #0
 8002f74:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2200      	movs	r2, #0
 8002f84:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2221      	movs	r2, #33	@ 0x21
 8002f94:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f001 ffc2 	bl	8004f20 <DMA_CalcBaseAndBitshift>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa4:	f003 031f 	and.w	r3, r3, #31
 8002fa8:	223f      	movs	r2, #63	@ 0x3f
 8002faa:	409a      	lsls	r2, r3
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	609a      	str	r2, [r3, #8]
 8002fb0:	e099      	b.n	80030e6 <HAL_DMA_DeInit+0x2fe>
 8002fb2:	bf00      	nop
 8002fb4:	40020010 	.word	0x40020010
 8002fb8:	40020028 	.word	0x40020028
 8002fbc:	40020040 	.word	0x40020040
 8002fc0:	40020058 	.word	0x40020058
 8002fc4:	40020070 	.word	0x40020070
 8002fc8:	40020088 	.word	0x40020088
 8002fcc:	400200a0 	.word	0x400200a0
 8002fd0:	400200b8 	.word	0x400200b8
 8002fd4:	40020410 	.word	0x40020410
 8002fd8:	40020428 	.word	0x40020428
 8002fdc:	40020440 	.word	0x40020440
 8002fe0:	40020458 	.word	0x40020458
 8002fe4:	40020470 	.word	0x40020470
 8002fe8:	40020488 	.word	0x40020488
 8002fec:	400204a0 	.word	0x400204a0
 8002ff0:	400204b8 	.word	0x400204b8
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a78      	ldr	r2, [pc, #480]	@ (80031dc <HAL_DMA_DeInit+0x3f4>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d04a      	beq.n	8003094 <HAL_DMA_DeInit+0x2ac>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a77      	ldr	r2, [pc, #476]	@ (80031e0 <HAL_DMA_DeInit+0x3f8>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d045      	beq.n	8003094 <HAL_DMA_DeInit+0x2ac>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a75      	ldr	r2, [pc, #468]	@ (80031e4 <HAL_DMA_DeInit+0x3fc>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d040      	beq.n	8003094 <HAL_DMA_DeInit+0x2ac>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a74      	ldr	r2, [pc, #464]	@ (80031e8 <HAL_DMA_DeInit+0x400>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d03b      	beq.n	8003094 <HAL_DMA_DeInit+0x2ac>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a72      	ldr	r2, [pc, #456]	@ (80031ec <HAL_DMA_DeInit+0x404>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d036      	beq.n	8003094 <HAL_DMA_DeInit+0x2ac>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a71      	ldr	r2, [pc, #452]	@ (80031f0 <HAL_DMA_DeInit+0x408>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d031      	beq.n	8003094 <HAL_DMA_DeInit+0x2ac>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a6f      	ldr	r2, [pc, #444]	@ (80031f4 <HAL_DMA_DeInit+0x40c>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d02c      	beq.n	8003094 <HAL_DMA_DeInit+0x2ac>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a6e      	ldr	r2, [pc, #440]	@ (80031f8 <HAL_DMA_DeInit+0x410>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d027      	beq.n	8003094 <HAL_DMA_DeInit+0x2ac>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a6c      	ldr	r2, [pc, #432]	@ (80031fc <HAL_DMA_DeInit+0x414>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d022      	beq.n	8003094 <HAL_DMA_DeInit+0x2ac>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a6b      	ldr	r2, [pc, #428]	@ (8003200 <HAL_DMA_DeInit+0x418>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d01d      	beq.n	8003094 <HAL_DMA_DeInit+0x2ac>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a69      	ldr	r2, [pc, #420]	@ (8003204 <HAL_DMA_DeInit+0x41c>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d018      	beq.n	8003094 <HAL_DMA_DeInit+0x2ac>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a68      	ldr	r2, [pc, #416]	@ (8003208 <HAL_DMA_DeInit+0x420>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d013      	beq.n	8003094 <HAL_DMA_DeInit+0x2ac>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a66      	ldr	r2, [pc, #408]	@ (800320c <HAL_DMA_DeInit+0x424>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d00e      	beq.n	8003094 <HAL_DMA_DeInit+0x2ac>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a65      	ldr	r2, [pc, #404]	@ (8003210 <HAL_DMA_DeInit+0x428>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d009      	beq.n	8003094 <HAL_DMA_DeInit+0x2ac>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a63      	ldr	r2, [pc, #396]	@ (8003214 <HAL_DMA_DeInit+0x42c>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d004      	beq.n	8003094 <HAL_DMA_DeInit+0x2ac>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a62      	ldr	r2, [pc, #392]	@ (8003218 <HAL_DMA_DeInit+0x430>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d101      	bne.n	8003098 <HAL_DMA_DeInit+0x2b0>
 8003094:	2301      	movs	r3, #1
 8003096:	e000      	b.n	800309a <HAL_DMA_DeInit+0x2b2>
 8003098:	2300      	movs	r3, #0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d021      	beq.n	80030e2 <HAL_DMA_DeInit+0x2fa>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2200      	movs	r2, #0
 80030a4:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2200      	movs	r2, #0
 80030ac:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2200      	movs	r2, #0
 80030b4:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2200      	movs	r2, #0
 80030bc:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2200      	movs	r2, #0
 80030c4:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f001 ff2a 	bl	8004f20 <DMA_CalcBaseAndBitshift>
 80030cc:	4603      	mov	r3, r0
 80030ce:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030d4:	f003 031f 	and.w	r3, r3, #31
 80030d8:	2201      	movs	r2, #1
 80030da:	409a      	lsls	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	605a      	str	r2, [r3, #4]
 80030e0:	e001      	b.n	80030e6 <HAL_DMA_DeInit+0x2fe>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e108      	b.n	80032f8 <HAL_DMA_DeInit+0x510>
  }

#if defined (BDMA1) /* No DMAMUX available for BDMA1 available on  STM32H7Ax/Bx devices only */
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a4c      	ldr	r2, [pc, #304]	@ (800321c <HAL_DMA_DeInit+0x434>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d072      	beq.n	80031d6 <HAL_DMA_DeInit+0x3ee>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a4a      	ldr	r2, [pc, #296]	@ (8003220 <HAL_DMA_DeInit+0x438>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d06d      	beq.n	80031d6 <HAL_DMA_DeInit+0x3ee>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a49      	ldr	r2, [pc, #292]	@ (8003224 <HAL_DMA_DeInit+0x43c>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d068      	beq.n	80031d6 <HAL_DMA_DeInit+0x3ee>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a47      	ldr	r2, [pc, #284]	@ (8003228 <HAL_DMA_DeInit+0x440>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d063      	beq.n	80031d6 <HAL_DMA_DeInit+0x3ee>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a46      	ldr	r2, [pc, #280]	@ (800322c <HAL_DMA_DeInit+0x444>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d05e      	beq.n	80031d6 <HAL_DMA_DeInit+0x3ee>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a44      	ldr	r2, [pc, #272]	@ (8003230 <HAL_DMA_DeInit+0x448>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d059      	beq.n	80031d6 <HAL_DMA_DeInit+0x3ee>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a43      	ldr	r2, [pc, #268]	@ (8003234 <HAL_DMA_DeInit+0x44c>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d054      	beq.n	80031d6 <HAL_DMA_DeInit+0x3ee>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a41      	ldr	r2, [pc, #260]	@ (8003238 <HAL_DMA_DeInit+0x450>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d04f      	beq.n	80031d6 <HAL_DMA_DeInit+0x3ee>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a40      	ldr	r2, [pc, #256]	@ (800323c <HAL_DMA_DeInit+0x454>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d04a      	beq.n	80031d6 <HAL_DMA_DeInit+0x3ee>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a3e      	ldr	r2, [pc, #248]	@ (8003240 <HAL_DMA_DeInit+0x458>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d045      	beq.n	80031d6 <HAL_DMA_DeInit+0x3ee>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a3d      	ldr	r2, [pc, #244]	@ (8003244 <HAL_DMA_DeInit+0x45c>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d040      	beq.n	80031d6 <HAL_DMA_DeInit+0x3ee>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a3b      	ldr	r2, [pc, #236]	@ (8003248 <HAL_DMA_DeInit+0x460>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d03b      	beq.n	80031d6 <HAL_DMA_DeInit+0x3ee>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a3a      	ldr	r2, [pc, #232]	@ (800324c <HAL_DMA_DeInit+0x464>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d036      	beq.n	80031d6 <HAL_DMA_DeInit+0x3ee>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a38      	ldr	r2, [pc, #224]	@ (8003250 <HAL_DMA_DeInit+0x468>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d031      	beq.n	80031d6 <HAL_DMA_DeInit+0x3ee>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a37      	ldr	r2, [pc, #220]	@ (8003254 <HAL_DMA_DeInit+0x46c>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d02c      	beq.n	80031d6 <HAL_DMA_DeInit+0x3ee>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a35      	ldr	r2, [pc, #212]	@ (8003258 <HAL_DMA_DeInit+0x470>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d027      	beq.n	80031d6 <HAL_DMA_DeInit+0x3ee>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a1c      	ldr	r2, [pc, #112]	@ (80031fc <HAL_DMA_DeInit+0x414>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d022      	beq.n	80031d6 <HAL_DMA_DeInit+0x3ee>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a1a      	ldr	r2, [pc, #104]	@ (8003200 <HAL_DMA_DeInit+0x418>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d01d      	beq.n	80031d6 <HAL_DMA_DeInit+0x3ee>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a19      	ldr	r2, [pc, #100]	@ (8003204 <HAL_DMA_DeInit+0x41c>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d018      	beq.n	80031d6 <HAL_DMA_DeInit+0x3ee>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a17      	ldr	r2, [pc, #92]	@ (8003208 <HAL_DMA_DeInit+0x420>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d013      	beq.n	80031d6 <HAL_DMA_DeInit+0x3ee>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a16      	ldr	r2, [pc, #88]	@ (800320c <HAL_DMA_DeInit+0x424>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d00e      	beq.n	80031d6 <HAL_DMA_DeInit+0x3ee>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a14      	ldr	r2, [pc, #80]	@ (8003210 <HAL_DMA_DeInit+0x428>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d009      	beq.n	80031d6 <HAL_DMA_DeInit+0x3ee>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a13      	ldr	r2, [pc, #76]	@ (8003214 <HAL_DMA_DeInit+0x42c>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d004      	beq.n	80031d6 <HAL_DMA_DeInit+0x3ee>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a11      	ldr	r2, [pc, #68]	@ (8003218 <HAL_DMA_DeInit+0x430>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d142      	bne.n	800325c <HAL_DMA_DeInit+0x474>
 80031d6:	2301      	movs	r3, #1
 80031d8:	e041      	b.n	800325e <HAL_DMA_DeInit+0x476>
 80031da:	bf00      	nop
 80031dc:	48022c08 	.word	0x48022c08
 80031e0:	48022c1c 	.word	0x48022c1c
 80031e4:	48022c30 	.word	0x48022c30
 80031e8:	48022c44 	.word	0x48022c44
 80031ec:	48022c58 	.word	0x48022c58
 80031f0:	48022c6c 	.word	0x48022c6c
 80031f4:	48022c80 	.word	0x48022c80
 80031f8:	48022c94 	.word	0x48022c94
 80031fc:	58025408 	.word	0x58025408
 8003200:	5802541c 	.word	0x5802541c
 8003204:	58025430 	.word	0x58025430
 8003208:	58025444 	.word	0x58025444
 800320c:	58025458 	.word	0x58025458
 8003210:	5802546c 	.word	0x5802546c
 8003214:	58025480 	.word	0x58025480
 8003218:	58025494 	.word	0x58025494
 800321c:	40020010 	.word	0x40020010
 8003220:	40020028 	.word	0x40020028
 8003224:	40020040 	.word	0x40020040
 8003228:	40020058 	.word	0x40020058
 800322c:	40020070 	.word	0x40020070
 8003230:	40020088 	.word	0x40020088
 8003234:	400200a0 	.word	0x400200a0
 8003238:	400200b8 	.word	0x400200b8
 800323c:	40020410 	.word	0x40020410
 8003240:	40020428 	.word	0x40020428
 8003244:	40020440 	.word	0x40020440
 8003248:	40020458 	.word	0x40020458
 800324c:	40020470 	.word	0x40020470
 8003250:	40020488 	.word	0x40020488
 8003254:	400204a0 	.word	0x400204a0
 8003258:	400204b8 	.word	0x400204b8
 800325c:	2300      	movs	r3, #0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d02c      	beq.n	80032bc <HAL_DMA_DeInit+0x4d4>
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f001 ff8a 	bl	800517c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800326c:	2b00      	cmp	r3, #0
 800326e:	d008      	beq.n	8003282 <HAL_DMA_DeInit+0x49a>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003274:	2200      	movs	r2, #0
 8003276:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003280:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00f      	beq.n	80032aa <HAL_DMA_DeInit+0x4c2>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2b08      	cmp	r3, #8
 8003290:	d80b      	bhi.n	80032aa <HAL_DMA_DeInit+0x4c2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f002 f80c 	bl	80052b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800329c:	2200      	movs	r2, #0
 800329e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80032a8:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	671a      	str	r2, [r3, #112]	@ 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	675a      	str	r2, [r3, #116]	@ 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback     = NULL;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback      = NULL;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback      = NULL;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
 800330c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800330e:	2300      	movs	r3, #0
 8003310:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d101      	bne.n	800331c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e226      	b.n	800376a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003322:	2b01      	cmp	r3, #1
 8003324:	d101      	bne.n	800332a <HAL_DMA_Start_IT+0x2a>
 8003326:	2302      	movs	r3, #2
 8003328:	e21f      	b.n	800376a <HAL_DMA_Start_IT+0x46a>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b01      	cmp	r3, #1
 800333c:	f040 820a 	bne.w	8003754 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2202      	movs	r2, #2
 8003344:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a68      	ldr	r2, [pc, #416]	@ (80034f4 <HAL_DMA_Start_IT+0x1f4>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d04a      	beq.n	80033ee <HAL_DMA_Start_IT+0xee>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a66      	ldr	r2, [pc, #408]	@ (80034f8 <HAL_DMA_Start_IT+0x1f8>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d045      	beq.n	80033ee <HAL_DMA_Start_IT+0xee>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a65      	ldr	r2, [pc, #404]	@ (80034fc <HAL_DMA_Start_IT+0x1fc>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d040      	beq.n	80033ee <HAL_DMA_Start_IT+0xee>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a63      	ldr	r2, [pc, #396]	@ (8003500 <HAL_DMA_Start_IT+0x200>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d03b      	beq.n	80033ee <HAL_DMA_Start_IT+0xee>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a62      	ldr	r2, [pc, #392]	@ (8003504 <HAL_DMA_Start_IT+0x204>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d036      	beq.n	80033ee <HAL_DMA_Start_IT+0xee>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a60      	ldr	r2, [pc, #384]	@ (8003508 <HAL_DMA_Start_IT+0x208>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d031      	beq.n	80033ee <HAL_DMA_Start_IT+0xee>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a5f      	ldr	r2, [pc, #380]	@ (800350c <HAL_DMA_Start_IT+0x20c>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d02c      	beq.n	80033ee <HAL_DMA_Start_IT+0xee>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a5d      	ldr	r2, [pc, #372]	@ (8003510 <HAL_DMA_Start_IT+0x210>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d027      	beq.n	80033ee <HAL_DMA_Start_IT+0xee>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a5c      	ldr	r2, [pc, #368]	@ (8003514 <HAL_DMA_Start_IT+0x214>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d022      	beq.n	80033ee <HAL_DMA_Start_IT+0xee>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a5a      	ldr	r2, [pc, #360]	@ (8003518 <HAL_DMA_Start_IT+0x218>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d01d      	beq.n	80033ee <HAL_DMA_Start_IT+0xee>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a59      	ldr	r2, [pc, #356]	@ (800351c <HAL_DMA_Start_IT+0x21c>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d018      	beq.n	80033ee <HAL_DMA_Start_IT+0xee>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a57      	ldr	r2, [pc, #348]	@ (8003520 <HAL_DMA_Start_IT+0x220>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d013      	beq.n	80033ee <HAL_DMA_Start_IT+0xee>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a56      	ldr	r2, [pc, #344]	@ (8003524 <HAL_DMA_Start_IT+0x224>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d00e      	beq.n	80033ee <HAL_DMA_Start_IT+0xee>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a54      	ldr	r2, [pc, #336]	@ (8003528 <HAL_DMA_Start_IT+0x228>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d009      	beq.n	80033ee <HAL_DMA_Start_IT+0xee>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a53      	ldr	r2, [pc, #332]	@ (800352c <HAL_DMA_Start_IT+0x22c>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d004      	beq.n	80033ee <HAL_DMA_Start_IT+0xee>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a51      	ldr	r2, [pc, #324]	@ (8003530 <HAL_DMA_Start_IT+0x230>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d108      	bne.n	8003400 <HAL_DMA_Start_IT+0x100>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 0201 	bic.w	r2, r2, #1
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	e007      	b.n	8003410 <HAL_DMA_Start_IT+0x110>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 0201 	bic.w	r2, r2, #1
 800340e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	68b9      	ldr	r1, [r7, #8]
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f001 fb9e 	bl	8004b58 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a34      	ldr	r2, [pc, #208]	@ (80034f4 <HAL_DMA_Start_IT+0x1f4>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d04a      	beq.n	80034bc <HAL_DMA_Start_IT+0x1bc>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a33      	ldr	r2, [pc, #204]	@ (80034f8 <HAL_DMA_Start_IT+0x1f8>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d045      	beq.n	80034bc <HAL_DMA_Start_IT+0x1bc>
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a31      	ldr	r2, [pc, #196]	@ (80034fc <HAL_DMA_Start_IT+0x1fc>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d040      	beq.n	80034bc <HAL_DMA_Start_IT+0x1bc>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a30      	ldr	r2, [pc, #192]	@ (8003500 <HAL_DMA_Start_IT+0x200>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d03b      	beq.n	80034bc <HAL_DMA_Start_IT+0x1bc>
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a2e      	ldr	r2, [pc, #184]	@ (8003504 <HAL_DMA_Start_IT+0x204>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d036      	beq.n	80034bc <HAL_DMA_Start_IT+0x1bc>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a2d      	ldr	r2, [pc, #180]	@ (8003508 <HAL_DMA_Start_IT+0x208>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d031      	beq.n	80034bc <HAL_DMA_Start_IT+0x1bc>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a2b      	ldr	r2, [pc, #172]	@ (800350c <HAL_DMA_Start_IT+0x20c>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d02c      	beq.n	80034bc <HAL_DMA_Start_IT+0x1bc>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a2a      	ldr	r2, [pc, #168]	@ (8003510 <HAL_DMA_Start_IT+0x210>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d027      	beq.n	80034bc <HAL_DMA_Start_IT+0x1bc>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a28      	ldr	r2, [pc, #160]	@ (8003514 <HAL_DMA_Start_IT+0x214>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d022      	beq.n	80034bc <HAL_DMA_Start_IT+0x1bc>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a27      	ldr	r2, [pc, #156]	@ (8003518 <HAL_DMA_Start_IT+0x218>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d01d      	beq.n	80034bc <HAL_DMA_Start_IT+0x1bc>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a25      	ldr	r2, [pc, #148]	@ (800351c <HAL_DMA_Start_IT+0x21c>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d018      	beq.n	80034bc <HAL_DMA_Start_IT+0x1bc>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a24      	ldr	r2, [pc, #144]	@ (8003520 <HAL_DMA_Start_IT+0x220>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d013      	beq.n	80034bc <HAL_DMA_Start_IT+0x1bc>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a22      	ldr	r2, [pc, #136]	@ (8003524 <HAL_DMA_Start_IT+0x224>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d00e      	beq.n	80034bc <HAL_DMA_Start_IT+0x1bc>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a21      	ldr	r2, [pc, #132]	@ (8003528 <HAL_DMA_Start_IT+0x228>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d009      	beq.n	80034bc <HAL_DMA_Start_IT+0x1bc>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a1f      	ldr	r2, [pc, #124]	@ (800352c <HAL_DMA_Start_IT+0x22c>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d004      	beq.n	80034bc <HAL_DMA_Start_IT+0x1bc>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a1e      	ldr	r2, [pc, #120]	@ (8003530 <HAL_DMA_Start_IT+0x230>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d101      	bne.n	80034c0 <HAL_DMA_Start_IT+0x1c0>
 80034bc:	2301      	movs	r3, #1
 80034be:	e000      	b.n	80034c2 <HAL_DMA_Start_IT+0x1c2>
 80034c0:	2300      	movs	r3, #0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d036      	beq.n	8003534 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f023 021e 	bic.w	r2, r3, #30
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f042 0216 	orr.w	r2, r2, #22
 80034d8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d03e      	beq.n	8003560 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f042 0208 	orr.w	r2, r2, #8
 80034f0:	601a      	str	r2, [r3, #0]
 80034f2:	e035      	b.n	8003560 <HAL_DMA_Start_IT+0x260>
 80034f4:	40020010 	.word	0x40020010
 80034f8:	40020028 	.word	0x40020028
 80034fc:	40020040 	.word	0x40020040
 8003500:	40020058 	.word	0x40020058
 8003504:	40020070 	.word	0x40020070
 8003508:	40020088 	.word	0x40020088
 800350c:	400200a0 	.word	0x400200a0
 8003510:	400200b8 	.word	0x400200b8
 8003514:	40020410 	.word	0x40020410
 8003518:	40020428 	.word	0x40020428
 800351c:	40020440 	.word	0x40020440
 8003520:	40020458 	.word	0x40020458
 8003524:	40020470 	.word	0x40020470
 8003528:	40020488 	.word	0x40020488
 800352c:	400204a0 	.word	0x400204a0
 8003530:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f023 020e 	bic.w	r2, r3, #14
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f042 020a 	orr.w	r2, r2, #10
 8003546:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800354c:	2b00      	cmp	r3, #0
 800354e:	d007      	beq.n	8003560 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f042 0204 	orr.w	r2, r2, #4
 800355e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a83      	ldr	r2, [pc, #524]	@ (8003774 <HAL_DMA_Start_IT+0x474>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d072      	beq.n	8003650 <HAL_DMA_Start_IT+0x350>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a82      	ldr	r2, [pc, #520]	@ (8003778 <HAL_DMA_Start_IT+0x478>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d06d      	beq.n	8003650 <HAL_DMA_Start_IT+0x350>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a80      	ldr	r2, [pc, #512]	@ (800377c <HAL_DMA_Start_IT+0x47c>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d068      	beq.n	8003650 <HAL_DMA_Start_IT+0x350>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a7f      	ldr	r2, [pc, #508]	@ (8003780 <HAL_DMA_Start_IT+0x480>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d063      	beq.n	8003650 <HAL_DMA_Start_IT+0x350>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a7d      	ldr	r2, [pc, #500]	@ (8003784 <HAL_DMA_Start_IT+0x484>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d05e      	beq.n	8003650 <HAL_DMA_Start_IT+0x350>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a7c      	ldr	r2, [pc, #496]	@ (8003788 <HAL_DMA_Start_IT+0x488>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d059      	beq.n	8003650 <HAL_DMA_Start_IT+0x350>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a7a      	ldr	r2, [pc, #488]	@ (800378c <HAL_DMA_Start_IT+0x48c>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d054      	beq.n	8003650 <HAL_DMA_Start_IT+0x350>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a79      	ldr	r2, [pc, #484]	@ (8003790 <HAL_DMA_Start_IT+0x490>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d04f      	beq.n	8003650 <HAL_DMA_Start_IT+0x350>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a77      	ldr	r2, [pc, #476]	@ (8003794 <HAL_DMA_Start_IT+0x494>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d04a      	beq.n	8003650 <HAL_DMA_Start_IT+0x350>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a76      	ldr	r2, [pc, #472]	@ (8003798 <HAL_DMA_Start_IT+0x498>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d045      	beq.n	8003650 <HAL_DMA_Start_IT+0x350>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a74      	ldr	r2, [pc, #464]	@ (800379c <HAL_DMA_Start_IT+0x49c>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d040      	beq.n	8003650 <HAL_DMA_Start_IT+0x350>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a73      	ldr	r2, [pc, #460]	@ (80037a0 <HAL_DMA_Start_IT+0x4a0>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d03b      	beq.n	8003650 <HAL_DMA_Start_IT+0x350>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a71      	ldr	r2, [pc, #452]	@ (80037a4 <HAL_DMA_Start_IT+0x4a4>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d036      	beq.n	8003650 <HAL_DMA_Start_IT+0x350>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a70      	ldr	r2, [pc, #448]	@ (80037a8 <HAL_DMA_Start_IT+0x4a8>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d031      	beq.n	8003650 <HAL_DMA_Start_IT+0x350>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a6e      	ldr	r2, [pc, #440]	@ (80037ac <HAL_DMA_Start_IT+0x4ac>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d02c      	beq.n	8003650 <HAL_DMA_Start_IT+0x350>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a6d      	ldr	r2, [pc, #436]	@ (80037b0 <HAL_DMA_Start_IT+0x4b0>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d027      	beq.n	8003650 <HAL_DMA_Start_IT+0x350>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a6b      	ldr	r2, [pc, #428]	@ (80037b4 <HAL_DMA_Start_IT+0x4b4>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d022      	beq.n	8003650 <HAL_DMA_Start_IT+0x350>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a6a      	ldr	r2, [pc, #424]	@ (80037b8 <HAL_DMA_Start_IT+0x4b8>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d01d      	beq.n	8003650 <HAL_DMA_Start_IT+0x350>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a68      	ldr	r2, [pc, #416]	@ (80037bc <HAL_DMA_Start_IT+0x4bc>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d018      	beq.n	8003650 <HAL_DMA_Start_IT+0x350>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a67      	ldr	r2, [pc, #412]	@ (80037c0 <HAL_DMA_Start_IT+0x4c0>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d013      	beq.n	8003650 <HAL_DMA_Start_IT+0x350>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a65      	ldr	r2, [pc, #404]	@ (80037c4 <HAL_DMA_Start_IT+0x4c4>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d00e      	beq.n	8003650 <HAL_DMA_Start_IT+0x350>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a64      	ldr	r2, [pc, #400]	@ (80037c8 <HAL_DMA_Start_IT+0x4c8>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d009      	beq.n	8003650 <HAL_DMA_Start_IT+0x350>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a62      	ldr	r2, [pc, #392]	@ (80037cc <HAL_DMA_Start_IT+0x4cc>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d004      	beq.n	8003650 <HAL_DMA_Start_IT+0x350>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a61      	ldr	r2, [pc, #388]	@ (80037d0 <HAL_DMA_Start_IT+0x4d0>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d101      	bne.n	8003654 <HAL_DMA_Start_IT+0x354>
 8003650:	2301      	movs	r3, #1
 8003652:	e000      	b.n	8003656 <HAL_DMA_Start_IT+0x356>
 8003654:	2300      	movs	r3, #0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d01a      	beq.n	8003690 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d007      	beq.n	8003678 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003672:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003676:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800367c:	2b00      	cmp	r3, #0
 800367e:	d007      	beq.n	8003690 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800368a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800368e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a37      	ldr	r2, [pc, #220]	@ (8003774 <HAL_DMA_Start_IT+0x474>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d04a      	beq.n	8003730 <HAL_DMA_Start_IT+0x430>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a36      	ldr	r2, [pc, #216]	@ (8003778 <HAL_DMA_Start_IT+0x478>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d045      	beq.n	8003730 <HAL_DMA_Start_IT+0x430>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a34      	ldr	r2, [pc, #208]	@ (800377c <HAL_DMA_Start_IT+0x47c>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d040      	beq.n	8003730 <HAL_DMA_Start_IT+0x430>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a33      	ldr	r2, [pc, #204]	@ (8003780 <HAL_DMA_Start_IT+0x480>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d03b      	beq.n	8003730 <HAL_DMA_Start_IT+0x430>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a31      	ldr	r2, [pc, #196]	@ (8003784 <HAL_DMA_Start_IT+0x484>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d036      	beq.n	8003730 <HAL_DMA_Start_IT+0x430>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a30      	ldr	r2, [pc, #192]	@ (8003788 <HAL_DMA_Start_IT+0x488>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d031      	beq.n	8003730 <HAL_DMA_Start_IT+0x430>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a2e      	ldr	r2, [pc, #184]	@ (800378c <HAL_DMA_Start_IT+0x48c>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d02c      	beq.n	8003730 <HAL_DMA_Start_IT+0x430>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a2d      	ldr	r2, [pc, #180]	@ (8003790 <HAL_DMA_Start_IT+0x490>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d027      	beq.n	8003730 <HAL_DMA_Start_IT+0x430>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a2b      	ldr	r2, [pc, #172]	@ (8003794 <HAL_DMA_Start_IT+0x494>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d022      	beq.n	8003730 <HAL_DMA_Start_IT+0x430>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a2a      	ldr	r2, [pc, #168]	@ (8003798 <HAL_DMA_Start_IT+0x498>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d01d      	beq.n	8003730 <HAL_DMA_Start_IT+0x430>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a28      	ldr	r2, [pc, #160]	@ (800379c <HAL_DMA_Start_IT+0x49c>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d018      	beq.n	8003730 <HAL_DMA_Start_IT+0x430>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a27      	ldr	r2, [pc, #156]	@ (80037a0 <HAL_DMA_Start_IT+0x4a0>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d013      	beq.n	8003730 <HAL_DMA_Start_IT+0x430>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a25      	ldr	r2, [pc, #148]	@ (80037a4 <HAL_DMA_Start_IT+0x4a4>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d00e      	beq.n	8003730 <HAL_DMA_Start_IT+0x430>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a24      	ldr	r2, [pc, #144]	@ (80037a8 <HAL_DMA_Start_IT+0x4a8>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d009      	beq.n	8003730 <HAL_DMA_Start_IT+0x430>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a22      	ldr	r2, [pc, #136]	@ (80037ac <HAL_DMA_Start_IT+0x4ac>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d004      	beq.n	8003730 <HAL_DMA_Start_IT+0x430>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a21      	ldr	r2, [pc, #132]	@ (80037b0 <HAL_DMA_Start_IT+0x4b0>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d108      	bne.n	8003742 <HAL_DMA_Start_IT+0x442>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f042 0201 	orr.w	r2, r2, #1
 800373e:	601a      	str	r2, [r3, #0]
 8003740:	e012      	b.n	8003768 <HAL_DMA_Start_IT+0x468>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f042 0201 	orr.w	r2, r2, #1
 8003750:	601a      	str	r2, [r3, #0]
 8003752:	e009      	b.n	8003768 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800375a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003768:	7dfb      	ldrb	r3, [r7, #23]
}
 800376a:	4618      	mov	r0, r3
 800376c:	3718      	adds	r7, #24
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	40020010 	.word	0x40020010
 8003778:	40020028 	.word	0x40020028
 800377c:	40020040 	.word	0x40020040
 8003780:	40020058 	.word	0x40020058
 8003784:	40020070 	.word	0x40020070
 8003788:	40020088 	.word	0x40020088
 800378c:	400200a0 	.word	0x400200a0
 8003790:	400200b8 	.word	0x400200b8
 8003794:	40020410 	.word	0x40020410
 8003798:	40020428 	.word	0x40020428
 800379c:	40020440 	.word	0x40020440
 80037a0:	40020458 	.word	0x40020458
 80037a4:	40020470 	.word	0x40020470
 80037a8:	40020488 	.word	0x40020488
 80037ac:	400204a0 	.word	0x400204a0
 80037b0:	400204b8 	.word	0x400204b8
 80037b4:	58025408 	.word	0x58025408
 80037b8:	5802541c 	.word	0x5802541c
 80037bc:	58025430 	.word	0x58025430
 80037c0:	58025444 	.word	0x58025444
 80037c4:	58025458 	.word	0x58025458
 80037c8:	5802546c 	.word	0x5802546c
 80037cc:	58025480 	.word	0x58025480
 80037d0:	58025494 	.word	0x58025494

080037d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e237      	b.n	8003c56 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d004      	beq.n	80037fc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2280      	movs	r2, #128	@ 0x80
 80037f6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e22c      	b.n	8003c56 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a5c      	ldr	r2, [pc, #368]	@ (8003974 <HAL_DMA_Abort_IT+0x1a0>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d04a      	beq.n	800389c <HAL_DMA_Abort_IT+0xc8>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a5b      	ldr	r2, [pc, #364]	@ (8003978 <HAL_DMA_Abort_IT+0x1a4>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d045      	beq.n	800389c <HAL_DMA_Abort_IT+0xc8>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a59      	ldr	r2, [pc, #356]	@ (800397c <HAL_DMA_Abort_IT+0x1a8>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d040      	beq.n	800389c <HAL_DMA_Abort_IT+0xc8>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a58      	ldr	r2, [pc, #352]	@ (8003980 <HAL_DMA_Abort_IT+0x1ac>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d03b      	beq.n	800389c <HAL_DMA_Abort_IT+0xc8>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a56      	ldr	r2, [pc, #344]	@ (8003984 <HAL_DMA_Abort_IT+0x1b0>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d036      	beq.n	800389c <HAL_DMA_Abort_IT+0xc8>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a55      	ldr	r2, [pc, #340]	@ (8003988 <HAL_DMA_Abort_IT+0x1b4>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d031      	beq.n	800389c <HAL_DMA_Abort_IT+0xc8>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a53      	ldr	r2, [pc, #332]	@ (800398c <HAL_DMA_Abort_IT+0x1b8>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d02c      	beq.n	800389c <HAL_DMA_Abort_IT+0xc8>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a52      	ldr	r2, [pc, #328]	@ (8003990 <HAL_DMA_Abort_IT+0x1bc>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d027      	beq.n	800389c <HAL_DMA_Abort_IT+0xc8>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a50      	ldr	r2, [pc, #320]	@ (8003994 <HAL_DMA_Abort_IT+0x1c0>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d022      	beq.n	800389c <HAL_DMA_Abort_IT+0xc8>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a4f      	ldr	r2, [pc, #316]	@ (8003998 <HAL_DMA_Abort_IT+0x1c4>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d01d      	beq.n	800389c <HAL_DMA_Abort_IT+0xc8>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a4d      	ldr	r2, [pc, #308]	@ (800399c <HAL_DMA_Abort_IT+0x1c8>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d018      	beq.n	800389c <HAL_DMA_Abort_IT+0xc8>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a4c      	ldr	r2, [pc, #304]	@ (80039a0 <HAL_DMA_Abort_IT+0x1cc>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d013      	beq.n	800389c <HAL_DMA_Abort_IT+0xc8>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a4a      	ldr	r2, [pc, #296]	@ (80039a4 <HAL_DMA_Abort_IT+0x1d0>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d00e      	beq.n	800389c <HAL_DMA_Abort_IT+0xc8>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a49      	ldr	r2, [pc, #292]	@ (80039a8 <HAL_DMA_Abort_IT+0x1d4>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d009      	beq.n	800389c <HAL_DMA_Abort_IT+0xc8>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a47      	ldr	r2, [pc, #284]	@ (80039ac <HAL_DMA_Abort_IT+0x1d8>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d004      	beq.n	800389c <HAL_DMA_Abort_IT+0xc8>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a46      	ldr	r2, [pc, #280]	@ (80039b0 <HAL_DMA_Abort_IT+0x1dc>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d101      	bne.n	80038a0 <HAL_DMA_Abort_IT+0xcc>
 800389c:	2301      	movs	r3, #1
 800389e:	e000      	b.n	80038a2 <HAL_DMA_Abort_IT+0xce>
 80038a0:	2300      	movs	r3, #0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f000 8086 	beq.w	80039b4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2204      	movs	r2, #4
 80038ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a2f      	ldr	r2, [pc, #188]	@ (8003974 <HAL_DMA_Abort_IT+0x1a0>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d04a      	beq.n	8003950 <HAL_DMA_Abort_IT+0x17c>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a2e      	ldr	r2, [pc, #184]	@ (8003978 <HAL_DMA_Abort_IT+0x1a4>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d045      	beq.n	8003950 <HAL_DMA_Abort_IT+0x17c>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a2c      	ldr	r2, [pc, #176]	@ (800397c <HAL_DMA_Abort_IT+0x1a8>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d040      	beq.n	8003950 <HAL_DMA_Abort_IT+0x17c>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a2b      	ldr	r2, [pc, #172]	@ (8003980 <HAL_DMA_Abort_IT+0x1ac>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d03b      	beq.n	8003950 <HAL_DMA_Abort_IT+0x17c>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a29      	ldr	r2, [pc, #164]	@ (8003984 <HAL_DMA_Abort_IT+0x1b0>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d036      	beq.n	8003950 <HAL_DMA_Abort_IT+0x17c>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a28      	ldr	r2, [pc, #160]	@ (8003988 <HAL_DMA_Abort_IT+0x1b4>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d031      	beq.n	8003950 <HAL_DMA_Abort_IT+0x17c>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a26      	ldr	r2, [pc, #152]	@ (800398c <HAL_DMA_Abort_IT+0x1b8>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d02c      	beq.n	8003950 <HAL_DMA_Abort_IT+0x17c>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a25      	ldr	r2, [pc, #148]	@ (8003990 <HAL_DMA_Abort_IT+0x1bc>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d027      	beq.n	8003950 <HAL_DMA_Abort_IT+0x17c>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a23      	ldr	r2, [pc, #140]	@ (8003994 <HAL_DMA_Abort_IT+0x1c0>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d022      	beq.n	8003950 <HAL_DMA_Abort_IT+0x17c>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a22      	ldr	r2, [pc, #136]	@ (8003998 <HAL_DMA_Abort_IT+0x1c4>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d01d      	beq.n	8003950 <HAL_DMA_Abort_IT+0x17c>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a20      	ldr	r2, [pc, #128]	@ (800399c <HAL_DMA_Abort_IT+0x1c8>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d018      	beq.n	8003950 <HAL_DMA_Abort_IT+0x17c>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a1f      	ldr	r2, [pc, #124]	@ (80039a0 <HAL_DMA_Abort_IT+0x1cc>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d013      	beq.n	8003950 <HAL_DMA_Abort_IT+0x17c>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a1d      	ldr	r2, [pc, #116]	@ (80039a4 <HAL_DMA_Abort_IT+0x1d0>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d00e      	beq.n	8003950 <HAL_DMA_Abort_IT+0x17c>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a1c      	ldr	r2, [pc, #112]	@ (80039a8 <HAL_DMA_Abort_IT+0x1d4>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d009      	beq.n	8003950 <HAL_DMA_Abort_IT+0x17c>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a1a      	ldr	r2, [pc, #104]	@ (80039ac <HAL_DMA_Abort_IT+0x1d8>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d004      	beq.n	8003950 <HAL_DMA_Abort_IT+0x17c>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a19      	ldr	r2, [pc, #100]	@ (80039b0 <HAL_DMA_Abort_IT+0x1dc>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d108      	bne.n	8003962 <HAL_DMA_Abort_IT+0x18e>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f022 0201 	bic.w	r2, r2, #1
 800395e:	601a      	str	r2, [r3, #0]
 8003960:	e178      	b.n	8003c54 <HAL_DMA_Abort_IT+0x480>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 0201 	bic.w	r2, r2, #1
 8003970:	601a      	str	r2, [r3, #0]
 8003972:	e16f      	b.n	8003c54 <HAL_DMA_Abort_IT+0x480>
 8003974:	40020010 	.word	0x40020010
 8003978:	40020028 	.word	0x40020028
 800397c:	40020040 	.word	0x40020040
 8003980:	40020058 	.word	0x40020058
 8003984:	40020070 	.word	0x40020070
 8003988:	40020088 	.word	0x40020088
 800398c:	400200a0 	.word	0x400200a0
 8003990:	400200b8 	.word	0x400200b8
 8003994:	40020410 	.word	0x40020410
 8003998:	40020428 	.word	0x40020428
 800399c:	40020440 	.word	0x40020440
 80039a0:	40020458 	.word	0x40020458
 80039a4:	40020470 	.word	0x40020470
 80039a8:	40020488 	.word	0x40020488
 80039ac:	400204a0 	.word	0x400204a0
 80039b0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f022 020e 	bic.w	r2, r2, #14
 80039c2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a6c      	ldr	r2, [pc, #432]	@ (8003b7c <HAL_DMA_Abort_IT+0x3a8>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d04a      	beq.n	8003a64 <HAL_DMA_Abort_IT+0x290>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a6b      	ldr	r2, [pc, #428]	@ (8003b80 <HAL_DMA_Abort_IT+0x3ac>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d045      	beq.n	8003a64 <HAL_DMA_Abort_IT+0x290>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a69      	ldr	r2, [pc, #420]	@ (8003b84 <HAL_DMA_Abort_IT+0x3b0>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d040      	beq.n	8003a64 <HAL_DMA_Abort_IT+0x290>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a68      	ldr	r2, [pc, #416]	@ (8003b88 <HAL_DMA_Abort_IT+0x3b4>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d03b      	beq.n	8003a64 <HAL_DMA_Abort_IT+0x290>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a66      	ldr	r2, [pc, #408]	@ (8003b8c <HAL_DMA_Abort_IT+0x3b8>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d036      	beq.n	8003a64 <HAL_DMA_Abort_IT+0x290>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a65      	ldr	r2, [pc, #404]	@ (8003b90 <HAL_DMA_Abort_IT+0x3bc>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d031      	beq.n	8003a64 <HAL_DMA_Abort_IT+0x290>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a63      	ldr	r2, [pc, #396]	@ (8003b94 <HAL_DMA_Abort_IT+0x3c0>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d02c      	beq.n	8003a64 <HAL_DMA_Abort_IT+0x290>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a62      	ldr	r2, [pc, #392]	@ (8003b98 <HAL_DMA_Abort_IT+0x3c4>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d027      	beq.n	8003a64 <HAL_DMA_Abort_IT+0x290>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a60      	ldr	r2, [pc, #384]	@ (8003b9c <HAL_DMA_Abort_IT+0x3c8>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d022      	beq.n	8003a64 <HAL_DMA_Abort_IT+0x290>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a5f      	ldr	r2, [pc, #380]	@ (8003ba0 <HAL_DMA_Abort_IT+0x3cc>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d01d      	beq.n	8003a64 <HAL_DMA_Abort_IT+0x290>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a5d      	ldr	r2, [pc, #372]	@ (8003ba4 <HAL_DMA_Abort_IT+0x3d0>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d018      	beq.n	8003a64 <HAL_DMA_Abort_IT+0x290>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a5c      	ldr	r2, [pc, #368]	@ (8003ba8 <HAL_DMA_Abort_IT+0x3d4>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d013      	beq.n	8003a64 <HAL_DMA_Abort_IT+0x290>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a5a      	ldr	r2, [pc, #360]	@ (8003bac <HAL_DMA_Abort_IT+0x3d8>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d00e      	beq.n	8003a64 <HAL_DMA_Abort_IT+0x290>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a59      	ldr	r2, [pc, #356]	@ (8003bb0 <HAL_DMA_Abort_IT+0x3dc>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d009      	beq.n	8003a64 <HAL_DMA_Abort_IT+0x290>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a57      	ldr	r2, [pc, #348]	@ (8003bb4 <HAL_DMA_Abort_IT+0x3e0>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d004      	beq.n	8003a64 <HAL_DMA_Abort_IT+0x290>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a56      	ldr	r2, [pc, #344]	@ (8003bb8 <HAL_DMA_Abort_IT+0x3e4>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d108      	bne.n	8003a76 <HAL_DMA_Abort_IT+0x2a2>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 0201 	bic.w	r2, r2, #1
 8003a72:	601a      	str	r2, [r3, #0]
 8003a74:	e007      	b.n	8003a86 <HAL_DMA_Abort_IT+0x2b2>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 0201 	bic.w	r2, r2, #1
 8003a84:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a3c      	ldr	r2, [pc, #240]	@ (8003b7c <HAL_DMA_Abort_IT+0x3a8>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d072      	beq.n	8003b76 <HAL_DMA_Abort_IT+0x3a2>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a3a      	ldr	r2, [pc, #232]	@ (8003b80 <HAL_DMA_Abort_IT+0x3ac>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d06d      	beq.n	8003b76 <HAL_DMA_Abort_IT+0x3a2>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a39      	ldr	r2, [pc, #228]	@ (8003b84 <HAL_DMA_Abort_IT+0x3b0>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d068      	beq.n	8003b76 <HAL_DMA_Abort_IT+0x3a2>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a37      	ldr	r2, [pc, #220]	@ (8003b88 <HAL_DMA_Abort_IT+0x3b4>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d063      	beq.n	8003b76 <HAL_DMA_Abort_IT+0x3a2>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a36      	ldr	r2, [pc, #216]	@ (8003b8c <HAL_DMA_Abort_IT+0x3b8>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d05e      	beq.n	8003b76 <HAL_DMA_Abort_IT+0x3a2>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a34      	ldr	r2, [pc, #208]	@ (8003b90 <HAL_DMA_Abort_IT+0x3bc>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d059      	beq.n	8003b76 <HAL_DMA_Abort_IT+0x3a2>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a33      	ldr	r2, [pc, #204]	@ (8003b94 <HAL_DMA_Abort_IT+0x3c0>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d054      	beq.n	8003b76 <HAL_DMA_Abort_IT+0x3a2>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a31      	ldr	r2, [pc, #196]	@ (8003b98 <HAL_DMA_Abort_IT+0x3c4>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d04f      	beq.n	8003b76 <HAL_DMA_Abort_IT+0x3a2>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a30      	ldr	r2, [pc, #192]	@ (8003b9c <HAL_DMA_Abort_IT+0x3c8>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d04a      	beq.n	8003b76 <HAL_DMA_Abort_IT+0x3a2>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a2e      	ldr	r2, [pc, #184]	@ (8003ba0 <HAL_DMA_Abort_IT+0x3cc>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d045      	beq.n	8003b76 <HAL_DMA_Abort_IT+0x3a2>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a2d      	ldr	r2, [pc, #180]	@ (8003ba4 <HAL_DMA_Abort_IT+0x3d0>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d040      	beq.n	8003b76 <HAL_DMA_Abort_IT+0x3a2>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a2b      	ldr	r2, [pc, #172]	@ (8003ba8 <HAL_DMA_Abort_IT+0x3d4>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d03b      	beq.n	8003b76 <HAL_DMA_Abort_IT+0x3a2>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a2a      	ldr	r2, [pc, #168]	@ (8003bac <HAL_DMA_Abort_IT+0x3d8>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d036      	beq.n	8003b76 <HAL_DMA_Abort_IT+0x3a2>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a28      	ldr	r2, [pc, #160]	@ (8003bb0 <HAL_DMA_Abort_IT+0x3dc>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d031      	beq.n	8003b76 <HAL_DMA_Abort_IT+0x3a2>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a27      	ldr	r2, [pc, #156]	@ (8003bb4 <HAL_DMA_Abort_IT+0x3e0>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d02c      	beq.n	8003b76 <HAL_DMA_Abort_IT+0x3a2>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a25      	ldr	r2, [pc, #148]	@ (8003bb8 <HAL_DMA_Abort_IT+0x3e4>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d027      	beq.n	8003b76 <HAL_DMA_Abort_IT+0x3a2>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a24      	ldr	r2, [pc, #144]	@ (8003bbc <HAL_DMA_Abort_IT+0x3e8>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d022      	beq.n	8003b76 <HAL_DMA_Abort_IT+0x3a2>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a22      	ldr	r2, [pc, #136]	@ (8003bc0 <HAL_DMA_Abort_IT+0x3ec>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d01d      	beq.n	8003b76 <HAL_DMA_Abort_IT+0x3a2>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a21      	ldr	r2, [pc, #132]	@ (8003bc4 <HAL_DMA_Abort_IT+0x3f0>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d018      	beq.n	8003b76 <HAL_DMA_Abort_IT+0x3a2>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a1f      	ldr	r2, [pc, #124]	@ (8003bc8 <HAL_DMA_Abort_IT+0x3f4>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d013      	beq.n	8003b76 <HAL_DMA_Abort_IT+0x3a2>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a1e      	ldr	r2, [pc, #120]	@ (8003bcc <HAL_DMA_Abort_IT+0x3f8>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d00e      	beq.n	8003b76 <HAL_DMA_Abort_IT+0x3a2>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a1c      	ldr	r2, [pc, #112]	@ (8003bd0 <HAL_DMA_Abort_IT+0x3fc>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d009      	beq.n	8003b76 <HAL_DMA_Abort_IT+0x3a2>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a1b      	ldr	r2, [pc, #108]	@ (8003bd4 <HAL_DMA_Abort_IT+0x400>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d004      	beq.n	8003b76 <HAL_DMA_Abort_IT+0x3a2>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a19      	ldr	r2, [pc, #100]	@ (8003bd8 <HAL_DMA_Abort_IT+0x404>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d132      	bne.n	8003bdc <HAL_DMA_Abort_IT+0x408>
 8003b76:	2301      	movs	r3, #1
 8003b78:	e031      	b.n	8003bde <HAL_DMA_Abort_IT+0x40a>
 8003b7a:	bf00      	nop
 8003b7c:	40020010 	.word	0x40020010
 8003b80:	40020028 	.word	0x40020028
 8003b84:	40020040 	.word	0x40020040
 8003b88:	40020058 	.word	0x40020058
 8003b8c:	40020070 	.word	0x40020070
 8003b90:	40020088 	.word	0x40020088
 8003b94:	400200a0 	.word	0x400200a0
 8003b98:	400200b8 	.word	0x400200b8
 8003b9c:	40020410 	.word	0x40020410
 8003ba0:	40020428 	.word	0x40020428
 8003ba4:	40020440 	.word	0x40020440
 8003ba8:	40020458 	.word	0x40020458
 8003bac:	40020470 	.word	0x40020470
 8003bb0:	40020488 	.word	0x40020488
 8003bb4:	400204a0 	.word	0x400204a0
 8003bb8:	400204b8 	.word	0x400204b8
 8003bbc:	58025408 	.word	0x58025408
 8003bc0:	5802541c 	.word	0x5802541c
 8003bc4:	58025430 	.word	0x58025430
 8003bc8:	58025444 	.word	0x58025444
 8003bcc:	58025458 	.word	0x58025458
 8003bd0:	5802546c 	.word	0x5802546c
 8003bd4:	58025480 	.word	0x58025480
 8003bd8:	58025494 	.word	0x58025494
 8003bdc:	2300      	movs	r3, #0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d028      	beq.n	8003c34 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003bf0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bf6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bfc:	f003 031f 	and.w	r3, r3, #31
 8003c00:	2201      	movs	r2, #1
 8003c02:	409a      	lsls	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003c10:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00c      	beq.n	8003c34 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c24:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c28:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003c32:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d003      	beq.n	8003c54 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3710      	adds	r7, #16
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop

08003c60 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b08a      	sub	sp, #40	@ 0x28
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c6c:	4b67      	ldr	r3, [pc, #412]	@ (8003e0c <HAL_DMA_IRQHandler+0x1ac>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a67      	ldr	r2, [pc, #412]	@ (8003e10 <HAL_DMA_IRQHandler+0x1b0>)
 8003c72:	fba2 2303 	umull	r2, r3, r2, r3
 8003c76:	0a9b      	lsrs	r3, r3, #10
 8003c78:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c7e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c84:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003c86:	6a3b      	ldr	r3, [r7, #32]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a5f      	ldr	r2, [pc, #380]	@ (8003e14 <HAL_DMA_IRQHandler+0x1b4>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d04a      	beq.n	8003d32 <HAL_DMA_IRQHandler+0xd2>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a5d      	ldr	r2, [pc, #372]	@ (8003e18 <HAL_DMA_IRQHandler+0x1b8>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d045      	beq.n	8003d32 <HAL_DMA_IRQHandler+0xd2>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a5c      	ldr	r2, [pc, #368]	@ (8003e1c <HAL_DMA_IRQHandler+0x1bc>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d040      	beq.n	8003d32 <HAL_DMA_IRQHandler+0xd2>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a5a      	ldr	r2, [pc, #360]	@ (8003e20 <HAL_DMA_IRQHandler+0x1c0>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d03b      	beq.n	8003d32 <HAL_DMA_IRQHandler+0xd2>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a59      	ldr	r2, [pc, #356]	@ (8003e24 <HAL_DMA_IRQHandler+0x1c4>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d036      	beq.n	8003d32 <HAL_DMA_IRQHandler+0xd2>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a57      	ldr	r2, [pc, #348]	@ (8003e28 <HAL_DMA_IRQHandler+0x1c8>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d031      	beq.n	8003d32 <HAL_DMA_IRQHandler+0xd2>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a56      	ldr	r2, [pc, #344]	@ (8003e2c <HAL_DMA_IRQHandler+0x1cc>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d02c      	beq.n	8003d32 <HAL_DMA_IRQHandler+0xd2>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a54      	ldr	r2, [pc, #336]	@ (8003e30 <HAL_DMA_IRQHandler+0x1d0>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d027      	beq.n	8003d32 <HAL_DMA_IRQHandler+0xd2>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a53      	ldr	r2, [pc, #332]	@ (8003e34 <HAL_DMA_IRQHandler+0x1d4>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d022      	beq.n	8003d32 <HAL_DMA_IRQHandler+0xd2>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a51      	ldr	r2, [pc, #324]	@ (8003e38 <HAL_DMA_IRQHandler+0x1d8>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d01d      	beq.n	8003d32 <HAL_DMA_IRQHandler+0xd2>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a50      	ldr	r2, [pc, #320]	@ (8003e3c <HAL_DMA_IRQHandler+0x1dc>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d018      	beq.n	8003d32 <HAL_DMA_IRQHandler+0xd2>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a4e      	ldr	r2, [pc, #312]	@ (8003e40 <HAL_DMA_IRQHandler+0x1e0>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d013      	beq.n	8003d32 <HAL_DMA_IRQHandler+0xd2>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a4d      	ldr	r2, [pc, #308]	@ (8003e44 <HAL_DMA_IRQHandler+0x1e4>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d00e      	beq.n	8003d32 <HAL_DMA_IRQHandler+0xd2>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a4b      	ldr	r2, [pc, #300]	@ (8003e48 <HAL_DMA_IRQHandler+0x1e8>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d009      	beq.n	8003d32 <HAL_DMA_IRQHandler+0xd2>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a4a      	ldr	r2, [pc, #296]	@ (8003e4c <HAL_DMA_IRQHandler+0x1ec>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d004      	beq.n	8003d32 <HAL_DMA_IRQHandler+0xd2>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a48      	ldr	r2, [pc, #288]	@ (8003e50 <HAL_DMA_IRQHandler+0x1f0>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d101      	bne.n	8003d36 <HAL_DMA_IRQHandler+0xd6>
 8003d32:	2301      	movs	r3, #1
 8003d34:	e000      	b.n	8003d38 <HAL_DMA_IRQHandler+0xd8>
 8003d36:	2300      	movs	r3, #0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f000 842b 	beq.w	8004594 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d42:	f003 031f 	and.w	r3, r3, #31
 8003d46:	2208      	movs	r2, #8
 8003d48:	409a      	lsls	r2, r3
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	f000 80a2 	beq.w	8003e98 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a2e      	ldr	r2, [pc, #184]	@ (8003e14 <HAL_DMA_IRQHandler+0x1b4>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d04a      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x194>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a2d      	ldr	r2, [pc, #180]	@ (8003e18 <HAL_DMA_IRQHandler+0x1b8>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d045      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x194>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a2b      	ldr	r2, [pc, #172]	@ (8003e1c <HAL_DMA_IRQHandler+0x1bc>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d040      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x194>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a2a      	ldr	r2, [pc, #168]	@ (8003e20 <HAL_DMA_IRQHandler+0x1c0>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d03b      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x194>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a28      	ldr	r2, [pc, #160]	@ (8003e24 <HAL_DMA_IRQHandler+0x1c4>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d036      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x194>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a27      	ldr	r2, [pc, #156]	@ (8003e28 <HAL_DMA_IRQHandler+0x1c8>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d031      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x194>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a25      	ldr	r2, [pc, #148]	@ (8003e2c <HAL_DMA_IRQHandler+0x1cc>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d02c      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x194>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a24      	ldr	r2, [pc, #144]	@ (8003e30 <HAL_DMA_IRQHandler+0x1d0>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d027      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x194>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a22      	ldr	r2, [pc, #136]	@ (8003e34 <HAL_DMA_IRQHandler+0x1d4>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d022      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x194>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a21      	ldr	r2, [pc, #132]	@ (8003e38 <HAL_DMA_IRQHandler+0x1d8>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d01d      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x194>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a1f      	ldr	r2, [pc, #124]	@ (8003e3c <HAL_DMA_IRQHandler+0x1dc>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d018      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x194>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a1e      	ldr	r2, [pc, #120]	@ (8003e40 <HAL_DMA_IRQHandler+0x1e0>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d013      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x194>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a1c      	ldr	r2, [pc, #112]	@ (8003e44 <HAL_DMA_IRQHandler+0x1e4>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d00e      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x194>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a1b      	ldr	r2, [pc, #108]	@ (8003e48 <HAL_DMA_IRQHandler+0x1e8>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d009      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x194>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a19      	ldr	r2, [pc, #100]	@ (8003e4c <HAL_DMA_IRQHandler+0x1ec>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d004      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x194>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a18      	ldr	r2, [pc, #96]	@ (8003e50 <HAL_DMA_IRQHandler+0x1f0>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d12f      	bne.n	8003e54 <HAL_DMA_IRQHandler+0x1f4>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0304 	and.w	r3, r3, #4
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	bf14      	ite	ne
 8003e02:	2301      	movne	r3, #1
 8003e04:	2300      	moveq	r3, #0
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	e02e      	b.n	8003e68 <HAL_DMA_IRQHandler+0x208>
 8003e0a:	bf00      	nop
 8003e0c:	24000000 	.word	0x24000000
 8003e10:	1b4e81b5 	.word	0x1b4e81b5
 8003e14:	40020010 	.word	0x40020010
 8003e18:	40020028 	.word	0x40020028
 8003e1c:	40020040 	.word	0x40020040
 8003e20:	40020058 	.word	0x40020058
 8003e24:	40020070 	.word	0x40020070
 8003e28:	40020088 	.word	0x40020088
 8003e2c:	400200a0 	.word	0x400200a0
 8003e30:	400200b8 	.word	0x400200b8
 8003e34:	40020410 	.word	0x40020410
 8003e38:	40020428 	.word	0x40020428
 8003e3c:	40020440 	.word	0x40020440
 8003e40:	40020458 	.word	0x40020458
 8003e44:	40020470 	.word	0x40020470
 8003e48:	40020488 	.word	0x40020488
 8003e4c:	400204a0 	.word	0x400204a0
 8003e50:	400204b8 	.word	0x400204b8
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0308 	and.w	r3, r3, #8
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	bf14      	ite	ne
 8003e62:	2301      	movne	r3, #1
 8003e64:	2300      	moveq	r3, #0
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d015      	beq.n	8003e98 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 0204 	bic.w	r2, r2, #4
 8003e7a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e80:	f003 031f 	and.w	r3, r3, #31
 8003e84:	2208      	movs	r2, #8
 8003e86:	409a      	lsls	r2, r3
 8003e88:	6a3b      	ldr	r3, [r7, #32]
 8003e8a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e90:	f043 0201 	orr.w	r2, r3, #1
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e9c:	f003 031f 	and.w	r3, r3, #31
 8003ea0:	69ba      	ldr	r2, [r7, #24]
 8003ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d06e      	beq.n	8003f8c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a69      	ldr	r2, [pc, #420]	@ (8004058 <HAL_DMA_IRQHandler+0x3f8>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d04a      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x2ee>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a67      	ldr	r2, [pc, #412]	@ (800405c <HAL_DMA_IRQHandler+0x3fc>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d045      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x2ee>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a66      	ldr	r2, [pc, #408]	@ (8004060 <HAL_DMA_IRQHandler+0x400>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d040      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x2ee>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a64      	ldr	r2, [pc, #400]	@ (8004064 <HAL_DMA_IRQHandler+0x404>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d03b      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x2ee>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a63      	ldr	r2, [pc, #396]	@ (8004068 <HAL_DMA_IRQHandler+0x408>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d036      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x2ee>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a61      	ldr	r2, [pc, #388]	@ (800406c <HAL_DMA_IRQHandler+0x40c>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d031      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x2ee>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a60      	ldr	r2, [pc, #384]	@ (8004070 <HAL_DMA_IRQHandler+0x410>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d02c      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x2ee>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a5e      	ldr	r2, [pc, #376]	@ (8004074 <HAL_DMA_IRQHandler+0x414>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d027      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x2ee>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a5d      	ldr	r2, [pc, #372]	@ (8004078 <HAL_DMA_IRQHandler+0x418>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d022      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x2ee>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a5b      	ldr	r2, [pc, #364]	@ (800407c <HAL_DMA_IRQHandler+0x41c>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d01d      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x2ee>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a5a      	ldr	r2, [pc, #360]	@ (8004080 <HAL_DMA_IRQHandler+0x420>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d018      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x2ee>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a58      	ldr	r2, [pc, #352]	@ (8004084 <HAL_DMA_IRQHandler+0x424>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d013      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x2ee>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a57      	ldr	r2, [pc, #348]	@ (8004088 <HAL_DMA_IRQHandler+0x428>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d00e      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x2ee>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a55      	ldr	r2, [pc, #340]	@ (800408c <HAL_DMA_IRQHandler+0x42c>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d009      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x2ee>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a54      	ldr	r2, [pc, #336]	@ (8004090 <HAL_DMA_IRQHandler+0x430>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d004      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x2ee>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a52      	ldr	r2, [pc, #328]	@ (8004094 <HAL_DMA_IRQHandler+0x434>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d10a      	bne.n	8003f64 <HAL_DMA_IRQHandler+0x304>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	bf14      	ite	ne
 8003f5c:	2301      	movne	r3, #1
 8003f5e:	2300      	moveq	r3, #0
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	e003      	b.n	8003f6c <HAL_DMA_IRQHandler+0x30c>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00d      	beq.n	8003f8c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f74:	f003 031f 	and.w	r3, r3, #31
 8003f78:	2201      	movs	r2, #1
 8003f7a:	409a      	lsls	r2, r3
 8003f7c:	6a3b      	ldr	r3, [r7, #32]
 8003f7e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f84:	f043 0202 	orr.w	r2, r3, #2
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f90:	f003 031f 	and.w	r3, r3, #31
 8003f94:	2204      	movs	r2, #4
 8003f96:	409a      	lsls	r2, r3
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f000 808f 	beq.w	80040c0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a2c      	ldr	r2, [pc, #176]	@ (8004058 <HAL_DMA_IRQHandler+0x3f8>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d04a      	beq.n	8004042 <HAL_DMA_IRQHandler+0x3e2>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a2a      	ldr	r2, [pc, #168]	@ (800405c <HAL_DMA_IRQHandler+0x3fc>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d045      	beq.n	8004042 <HAL_DMA_IRQHandler+0x3e2>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a29      	ldr	r2, [pc, #164]	@ (8004060 <HAL_DMA_IRQHandler+0x400>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d040      	beq.n	8004042 <HAL_DMA_IRQHandler+0x3e2>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a27      	ldr	r2, [pc, #156]	@ (8004064 <HAL_DMA_IRQHandler+0x404>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d03b      	beq.n	8004042 <HAL_DMA_IRQHandler+0x3e2>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a26      	ldr	r2, [pc, #152]	@ (8004068 <HAL_DMA_IRQHandler+0x408>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d036      	beq.n	8004042 <HAL_DMA_IRQHandler+0x3e2>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a24      	ldr	r2, [pc, #144]	@ (800406c <HAL_DMA_IRQHandler+0x40c>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d031      	beq.n	8004042 <HAL_DMA_IRQHandler+0x3e2>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a23      	ldr	r2, [pc, #140]	@ (8004070 <HAL_DMA_IRQHandler+0x410>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d02c      	beq.n	8004042 <HAL_DMA_IRQHandler+0x3e2>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a21      	ldr	r2, [pc, #132]	@ (8004074 <HAL_DMA_IRQHandler+0x414>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d027      	beq.n	8004042 <HAL_DMA_IRQHandler+0x3e2>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a20      	ldr	r2, [pc, #128]	@ (8004078 <HAL_DMA_IRQHandler+0x418>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d022      	beq.n	8004042 <HAL_DMA_IRQHandler+0x3e2>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a1e      	ldr	r2, [pc, #120]	@ (800407c <HAL_DMA_IRQHandler+0x41c>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d01d      	beq.n	8004042 <HAL_DMA_IRQHandler+0x3e2>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a1d      	ldr	r2, [pc, #116]	@ (8004080 <HAL_DMA_IRQHandler+0x420>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d018      	beq.n	8004042 <HAL_DMA_IRQHandler+0x3e2>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a1b      	ldr	r2, [pc, #108]	@ (8004084 <HAL_DMA_IRQHandler+0x424>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d013      	beq.n	8004042 <HAL_DMA_IRQHandler+0x3e2>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a1a      	ldr	r2, [pc, #104]	@ (8004088 <HAL_DMA_IRQHandler+0x428>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d00e      	beq.n	8004042 <HAL_DMA_IRQHandler+0x3e2>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a18      	ldr	r2, [pc, #96]	@ (800408c <HAL_DMA_IRQHandler+0x42c>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d009      	beq.n	8004042 <HAL_DMA_IRQHandler+0x3e2>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a17      	ldr	r2, [pc, #92]	@ (8004090 <HAL_DMA_IRQHandler+0x430>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d004      	beq.n	8004042 <HAL_DMA_IRQHandler+0x3e2>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a15      	ldr	r2, [pc, #84]	@ (8004094 <HAL_DMA_IRQHandler+0x434>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d12a      	bne.n	8004098 <HAL_DMA_IRQHandler+0x438>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0302 	and.w	r3, r3, #2
 800404c:	2b00      	cmp	r3, #0
 800404e:	bf14      	ite	ne
 8004050:	2301      	movne	r3, #1
 8004052:	2300      	moveq	r3, #0
 8004054:	b2db      	uxtb	r3, r3
 8004056:	e023      	b.n	80040a0 <HAL_DMA_IRQHandler+0x440>
 8004058:	40020010 	.word	0x40020010
 800405c:	40020028 	.word	0x40020028
 8004060:	40020040 	.word	0x40020040
 8004064:	40020058 	.word	0x40020058
 8004068:	40020070 	.word	0x40020070
 800406c:	40020088 	.word	0x40020088
 8004070:	400200a0 	.word	0x400200a0
 8004074:	400200b8 	.word	0x400200b8
 8004078:	40020410 	.word	0x40020410
 800407c:	40020428 	.word	0x40020428
 8004080:	40020440 	.word	0x40020440
 8004084:	40020458 	.word	0x40020458
 8004088:	40020470 	.word	0x40020470
 800408c:	40020488 	.word	0x40020488
 8004090:	400204a0 	.word	0x400204a0
 8004094:	400204b8 	.word	0x400204b8
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2300      	movs	r3, #0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00d      	beq.n	80040c0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040a8:	f003 031f 	and.w	r3, r3, #31
 80040ac:	2204      	movs	r2, #4
 80040ae:	409a      	lsls	r2, r3
 80040b0:	6a3b      	ldr	r3, [r7, #32]
 80040b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040b8:	f043 0204 	orr.w	r2, r3, #4
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040c4:	f003 031f 	and.w	r3, r3, #31
 80040c8:	2210      	movs	r2, #16
 80040ca:	409a      	lsls	r2, r3
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	4013      	ands	r3, r2
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f000 80a6 	beq.w	8004222 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a85      	ldr	r2, [pc, #532]	@ (80042f0 <HAL_DMA_IRQHandler+0x690>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d04a      	beq.n	8004176 <HAL_DMA_IRQHandler+0x516>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a83      	ldr	r2, [pc, #524]	@ (80042f4 <HAL_DMA_IRQHandler+0x694>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d045      	beq.n	8004176 <HAL_DMA_IRQHandler+0x516>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a82      	ldr	r2, [pc, #520]	@ (80042f8 <HAL_DMA_IRQHandler+0x698>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d040      	beq.n	8004176 <HAL_DMA_IRQHandler+0x516>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a80      	ldr	r2, [pc, #512]	@ (80042fc <HAL_DMA_IRQHandler+0x69c>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d03b      	beq.n	8004176 <HAL_DMA_IRQHandler+0x516>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a7f      	ldr	r2, [pc, #508]	@ (8004300 <HAL_DMA_IRQHandler+0x6a0>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d036      	beq.n	8004176 <HAL_DMA_IRQHandler+0x516>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a7d      	ldr	r2, [pc, #500]	@ (8004304 <HAL_DMA_IRQHandler+0x6a4>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d031      	beq.n	8004176 <HAL_DMA_IRQHandler+0x516>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a7c      	ldr	r2, [pc, #496]	@ (8004308 <HAL_DMA_IRQHandler+0x6a8>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d02c      	beq.n	8004176 <HAL_DMA_IRQHandler+0x516>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a7a      	ldr	r2, [pc, #488]	@ (800430c <HAL_DMA_IRQHandler+0x6ac>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d027      	beq.n	8004176 <HAL_DMA_IRQHandler+0x516>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a79      	ldr	r2, [pc, #484]	@ (8004310 <HAL_DMA_IRQHandler+0x6b0>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d022      	beq.n	8004176 <HAL_DMA_IRQHandler+0x516>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a77      	ldr	r2, [pc, #476]	@ (8004314 <HAL_DMA_IRQHandler+0x6b4>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d01d      	beq.n	8004176 <HAL_DMA_IRQHandler+0x516>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a76      	ldr	r2, [pc, #472]	@ (8004318 <HAL_DMA_IRQHandler+0x6b8>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d018      	beq.n	8004176 <HAL_DMA_IRQHandler+0x516>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a74      	ldr	r2, [pc, #464]	@ (800431c <HAL_DMA_IRQHandler+0x6bc>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d013      	beq.n	8004176 <HAL_DMA_IRQHandler+0x516>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a73      	ldr	r2, [pc, #460]	@ (8004320 <HAL_DMA_IRQHandler+0x6c0>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d00e      	beq.n	8004176 <HAL_DMA_IRQHandler+0x516>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a71      	ldr	r2, [pc, #452]	@ (8004324 <HAL_DMA_IRQHandler+0x6c4>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d009      	beq.n	8004176 <HAL_DMA_IRQHandler+0x516>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a70      	ldr	r2, [pc, #448]	@ (8004328 <HAL_DMA_IRQHandler+0x6c8>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d004      	beq.n	8004176 <HAL_DMA_IRQHandler+0x516>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a6e      	ldr	r2, [pc, #440]	@ (800432c <HAL_DMA_IRQHandler+0x6cc>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d10a      	bne.n	800418c <HAL_DMA_IRQHandler+0x52c>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0308 	and.w	r3, r3, #8
 8004180:	2b00      	cmp	r3, #0
 8004182:	bf14      	ite	ne
 8004184:	2301      	movne	r3, #1
 8004186:	2300      	moveq	r3, #0
 8004188:	b2db      	uxtb	r3, r3
 800418a:	e009      	b.n	80041a0 <HAL_DMA_IRQHandler+0x540>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0304 	and.w	r3, r3, #4
 8004196:	2b00      	cmp	r3, #0
 8004198:	bf14      	ite	ne
 800419a:	2301      	movne	r3, #1
 800419c:	2300      	moveq	r3, #0
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d03e      	beq.n	8004222 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041a8:	f003 031f 	and.w	r3, r3, #31
 80041ac:	2210      	movs	r2, #16
 80041ae:	409a      	lsls	r2, r3
 80041b0:	6a3b      	ldr	r3, [r7, #32]
 80041b2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d018      	beq.n	80041f4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d108      	bne.n	80041e2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d024      	beq.n	8004222 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	4798      	blx	r3
 80041e0:	e01f      	b.n	8004222 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d01b      	beq.n	8004222 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	4798      	blx	r3
 80041f2:	e016      	b.n	8004222 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d107      	bne.n	8004212 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 0208 	bic.w	r2, r2, #8
 8004210:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004216:	2b00      	cmp	r3, #0
 8004218:	d003      	beq.n	8004222 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004226:	f003 031f 	and.w	r3, r3, #31
 800422a:	2220      	movs	r2, #32
 800422c:	409a      	lsls	r2, r3
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	4013      	ands	r3, r2
 8004232:	2b00      	cmp	r3, #0
 8004234:	f000 8110 	beq.w	8004458 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a2c      	ldr	r2, [pc, #176]	@ (80042f0 <HAL_DMA_IRQHandler+0x690>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d04a      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x678>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a2b      	ldr	r2, [pc, #172]	@ (80042f4 <HAL_DMA_IRQHandler+0x694>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d045      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x678>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a29      	ldr	r2, [pc, #164]	@ (80042f8 <HAL_DMA_IRQHandler+0x698>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d040      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x678>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a28      	ldr	r2, [pc, #160]	@ (80042fc <HAL_DMA_IRQHandler+0x69c>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d03b      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x678>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a26      	ldr	r2, [pc, #152]	@ (8004300 <HAL_DMA_IRQHandler+0x6a0>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d036      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x678>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a25      	ldr	r2, [pc, #148]	@ (8004304 <HAL_DMA_IRQHandler+0x6a4>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d031      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x678>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a23      	ldr	r2, [pc, #140]	@ (8004308 <HAL_DMA_IRQHandler+0x6a8>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d02c      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x678>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a22      	ldr	r2, [pc, #136]	@ (800430c <HAL_DMA_IRQHandler+0x6ac>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d027      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x678>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a20      	ldr	r2, [pc, #128]	@ (8004310 <HAL_DMA_IRQHandler+0x6b0>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d022      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x678>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a1f      	ldr	r2, [pc, #124]	@ (8004314 <HAL_DMA_IRQHandler+0x6b4>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d01d      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x678>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a1d      	ldr	r2, [pc, #116]	@ (8004318 <HAL_DMA_IRQHandler+0x6b8>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d018      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x678>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a1c      	ldr	r2, [pc, #112]	@ (800431c <HAL_DMA_IRQHandler+0x6bc>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d013      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x678>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a1a      	ldr	r2, [pc, #104]	@ (8004320 <HAL_DMA_IRQHandler+0x6c0>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d00e      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x678>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a19      	ldr	r2, [pc, #100]	@ (8004324 <HAL_DMA_IRQHandler+0x6c4>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d009      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x678>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a17      	ldr	r2, [pc, #92]	@ (8004328 <HAL_DMA_IRQHandler+0x6c8>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d004      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x678>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a16      	ldr	r2, [pc, #88]	@ (800432c <HAL_DMA_IRQHandler+0x6cc>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d12b      	bne.n	8004330 <HAL_DMA_IRQHandler+0x6d0>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0310 	and.w	r3, r3, #16
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	bf14      	ite	ne
 80042e6:	2301      	movne	r3, #1
 80042e8:	2300      	moveq	r3, #0
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	e02a      	b.n	8004344 <HAL_DMA_IRQHandler+0x6e4>
 80042ee:	bf00      	nop
 80042f0:	40020010 	.word	0x40020010
 80042f4:	40020028 	.word	0x40020028
 80042f8:	40020040 	.word	0x40020040
 80042fc:	40020058 	.word	0x40020058
 8004300:	40020070 	.word	0x40020070
 8004304:	40020088 	.word	0x40020088
 8004308:	400200a0 	.word	0x400200a0
 800430c:	400200b8 	.word	0x400200b8
 8004310:	40020410 	.word	0x40020410
 8004314:	40020428 	.word	0x40020428
 8004318:	40020440 	.word	0x40020440
 800431c:	40020458 	.word	0x40020458
 8004320:	40020470 	.word	0x40020470
 8004324:	40020488 	.word	0x40020488
 8004328:	400204a0 	.word	0x400204a0
 800432c:	400204b8 	.word	0x400204b8
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b00      	cmp	r3, #0
 800433c:	bf14      	ite	ne
 800433e:	2301      	movne	r3, #1
 8004340:	2300      	moveq	r3, #0
 8004342:	b2db      	uxtb	r3, r3
 8004344:	2b00      	cmp	r3, #0
 8004346:	f000 8087 	beq.w	8004458 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800434e:	f003 031f 	and.w	r3, r3, #31
 8004352:	2220      	movs	r2, #32
 8004354:	409a      	lsls	r2, r3
 8004356:	6a3b      	ldr	r3, [r7, #32]
 8004358:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b04      	cmp	r3, #4
 8004364:	d139      	bne.n	80043da <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f022 0216 	bic.w	r2, r2, #22
 8004374:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	695a      	ldr	r2, [r3, #20]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004384:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438a:	2b00      	cmp	r3, #0
 800438c:	d103      	bne.n	8004396 <HAL_DMA_IRQHandler+0x736>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004392:	2b00      	cmp	r3, #0
 8004394:	d007      	beq.n	80043a6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f022 0208 	bic.w	r2, r2, #8
 80043a4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043aa:	f003 031f 	and.w	r3, r3, #31
 80043ae:	223f      	movs	r2, #63	@ 0x3f
 80043b0:	409a      	lsls	r2, r3
 80043b2:	6a3b      	ldr	r3, [r7, #32]
 80043b4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f000 8382 	beq.w	8004ad4 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	4798      	blx	r3
          }
          return;
 80043d8:	e37c      	b.n	8004ad4 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d018      	beq.n	800441a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d108      	bne.n	8004408 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d02c      	beq.n	8004458 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	4798      	blx	r3
 8004406:	e027      	b.n	8004458 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800440c:	2b00      	cmp	r3, #0
 800440e:	d023      	beq.n	8004458 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	4798      	blx	r3
 8004418:	e01e      	b.n	8004458 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004424:	2b00      	cmp	r3, #0
 8004426:	d10f      	bne.n	8004448 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f022 0210 	bic.w	r2, r2, #16
 8004436:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800444c:	2b00      	cmp	r3, #0
 800444e:	d003      	beq.n	8004458 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800445c:	2b00      	cmp	r3, #0
 800445e:	f000 833e 	beq.w	8004ade <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	2b00      	cmp	r3, #0
 800446c:	f000 8088 	beq.w	8004580 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2204      	movs	r2, #4
 8004474:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a89      	ldr	r2, [pc, #548]	@ (80046a4 <HAL_DMA_IRQHandler+0xa44>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d04a      	beq.n	8004518 <HAL_DMA_IRQHandler+0x8b8>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a88      	ldr	r2, [pc, #544]	@ (80046a8 <HAL_DMA_IRQHandler+0xa48>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d045      	beq.n	8004518 <HAL_DMA_IRQHandler+0x8b8>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a86      	ldr	r2, [pc, #536]	@ (80046ac <HAL_DMA_IRQHandler+0xa4c>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d040      	beq.n	8004518 <HAL_DMA_IRQHandler+0x8b8>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a85      	ldr	r2, [pc, #532]	@ (80046b0 <HAL_DMA_IRQHandler+0xa50>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d03b      	beq.n	8004518 <HAL_DMA_IRQHandler+0x8b8>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a83      	ldr	r2, [pc, #524]	@ (80046b4 <HAL_DMA_IRQHandler+0xa54>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d036      	beq.n	8004518 <HAL_DMA_IRQHandler+0x8b8>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a82      	ldr	r2, [pc, #520]	@ (80046b8 <HAL_DMA_IRQHandler+0xa58>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d031      	beq.n	8004518 <HAL_DMA_IRQHandler+0x8b8>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a80      	ldr	r2, [pc, #512]	@ (80046bc <HAL_DMA_IRQHandler+0xa5c>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d02c      	beq.n	8004518 <HAL_DMA_IRQHandler+0x8b8>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a7f      	ldr	r2, [pc, #508]	@ (80046c0 <HAL_DMA_IRQHandler+0xa60>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d027      	beq.n	8004518 <HAL_DMA_IRQHandler+0x8b8>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a7d      	ldr	r2, [pc, #500]	@ (80046c4 <HAL_DMA_IRQHandler+0xa64>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d022      	beq.n	8004518 <HAL_DMA_IRQHandler+0x8b8>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a7c      	ldr	r2, [pc, #496]	@ (80046c8 <HAL_DMA_IRQHandler+0xa68>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d01d      	beq.n	8004518 <HAL_DMA_IRQHandler+0x8b8>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a7a      	ldr	r2, [pc, #488]	@ (80046cc <HAL_DMA_IRQHandler+0xa6c>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d018      	beq.n	8004518 <HAL_DMA_IRQHandler+0x8b8>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a79      	ldr	r2, [pc, #484]	@ (80046d0 <HAL_DMA_IRQHandler+0xa70>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d013      	beq.n	8004518 <HAL_DMA_IRQHandler+0x8b8>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a77      	ldr	r2, [pc, #476]	@ (80046d4 <HAL_DMA_IRQHandler+0xa74>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d00e      	beq.n	8004518 <HAL_DMA_IRQHandler+0x8b8>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a76      	ldr	r2, [pc, #472]	@ (80046d8 <HAL_DMA_IRQHandler+0xa78>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d009      	beq.n	8004518 <HAL_DMA_IRQHandler+0x8b8>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a74      	ldr	r2, [pc, #464]	@ (80046dc <HAL_DMA_IRQHandler+0xa7c>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d004      	beq.n	8004518 <HAL_DMA_IRQHandler+0x8b8>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a73      	ldr	r2, [pc, #460]	@ (80046e0 <HAL_DMA_IRQHandler+0xa80>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d108      	bne.n	800452a <HAL_DMA_IRQHandler+0x8ca>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f022 0201 	bic.w	r2, r2, #1
 8004526:	601a      	str	r2, [r3, #0]
 8004528:	e007      	b.n	800453a <HAL_DMA_IRQHandler+0x8da>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f022 0201 	bic.w	r2, r2, #1
 8004538:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	3301      	adds	r3, #1
 800453e:	60fb      	str	r3, [r7, #12]
 8004540:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004542:	429a      	cmp	r2, r3
 8004544:	d307      	bcc.n	8004556 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0301 	and.w	r3, r3, #1
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1f2      	bne.n	800453a <HAL_DMA_IRQHandler+0x8da>
 8004554:	e000      	b.n	8004558 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004556:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b00      	cmp	r3, #0
 8004564:	d004      	beq.n	8004570 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2203      	movs	r2, #3
 800456a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800456e:	e003      	b.n	8004578 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004584:	2b00      	cmp	r3, #0
 8004586:	f000 82aa 	beq.w	8004ade <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	4798      	blx	r3
 8004592:	e2a4      	b.n	8004ade <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a52      	ldr	r2, [pc, #328]	@ (80046e4 <HAL_DMA_IRQHandler+0xa84>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d04a      	beq.n	8004634 <HAL_DMA_IRQHandler+0x9d4>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a51      	ldr	r2, [pc, #324]	@ (80046e8 <HAL_DMA_IRQHandler+0xa88>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d045      	beq.n	8004634 <HAL_DMA_IRQHandler+0x9d4>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a4f      	ldr	r2, [pc, #316]	@ (80046ec <HAL_DMA_IRQHandler+0xa8c>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d040      	beq.n	8004634 <HAL_DMA_IRQHandler+0x9d4>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a4e      	ldr	r2, [pc, #312]	@ (80046f0 <HAL_DMA_IRQHandler+0xa90>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d03b      	beq.n	8004634 <HAL_DMA_IRQHandler+0x9d4>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a4c      	ldr	r2, [pc, #304]	@ (80046f4 <HAL_DMA_IRQHandler+0xa94>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d036      	beq.n	8004634 <HAL_DMA_IRQHandler+0x9d4>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a4b      	ldr	r2, [pc, #300]	@ (80046f8 <HAL_DMA_IRQHandler+0xa98>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d031      	beq.n	8004634 <HAL_DMA_IRQHandler+0x9d4>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a49      	ldr	r2, [pc, #292]	@ (80046fc <HAL_DMA_IRQHandler+0xa9c>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d02c      	beq.n	8004634 <HAL_DMA_IRQHandler+0x9d4>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a48      	ldr	r2, [pc, #288]	@ (8004700 <HAL_DMA_IRQHandler+0xaa0>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d027      	beq.n	8004634 <HAL_DMA_IRQHandler+0x9d4>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a46      	ldr	r2, [pc, #280]	@ (8004704 <HAL_DMA_IRQHandler+0xaa4>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d022      	beq.n	8004634 <HAL_DMA_IRQHandler+0x9d4>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a45      	ldr	r2, [pc, #276]	@ (8004708 <HAL_DMA_IRQHandler+0xaa8>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d01d      	beq.n	8004634 <HAL_DMA_IRQHandler+0x9d4>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a43      	ldr	r2, [pc, #268]	@ (800470c <HAL_DMA_IRQHandler+0xaac>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d018      	beq.n	8004634 <HAL_DMA_IRQHandler+0x9d4>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a42      	ldr	r2, [pc, #264]	@ (8004710 <HAL_DMA_IRQHandler+0xab0>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d013      	beq.n	8004634 <HAL_DMA_IRQHandler+0x9d4>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a40      	ldr	r2, [pc, #256]	@ (8004714 <HAL_DMA_IRQHandler+0xab4>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d00e      	beq.n	8004634 <HAL_DMA_IRQHandler+0x9d4>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a3f      	ldr	r2, [pc, #252]	@ (8004718 <HAL_DMA_IRQHandler+0xab8>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d009      	beq.n	8004634 <HAL_DMA_IRQHandler+0x9d4>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a3d      	ldr	r2, [pc, #244]	@ (800471c <HAL_DMA_IRQHandler+0xabc>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d004      	beq.n	8004634 <HAL_DMA_IRQHandler+0x9d4>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a3c      	ldr	r2, [pc, #240]	@ (8004720 <HAL_DMA_IRQHandler+0xac0>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d101      	bne.n	8004638 <HAL_DMA_IRQHandler+0x9d8>
 8004634:	2301      	movs	r3, #1
 8004636:	e000      	b.n	800463a <HAL_DMA_IRQHandler+0x9da>
 8004638:	2300      	movs	r3, #0
 800463a:	2b00      	cmp	r3, #0
 800463c:	f000 824f 	beq.w	8004ade <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800464c:	f003 031f 	and.w	r3, r3, #31
 8004650:	2204      	movs	r2, #4
 8004652:	409a      	lsls	r2, r3
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	4013      	ands	r3, r2
 8004658:	2b00      	cmp	r3, #0
 800465a:	f000 80dd 	beq.w	8004818 <HAL_DMA_IRQHandler+0xbb8>
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	f003 0304 	and.w	r3, r3, #4
 8004664:	2b00      	cmp	r3, #0
 8004666:	f000 80d7 	beq.w	8004818 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800466e:	f003 031f 	and.w	r3, r3, #31
 8004672:	2204      	movs	r2, #4
 8004674:	409a      	lsls	r2, r3
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d059      	beq.n	8004738 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d14a      	bne.n	8004724 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004692:	2b00      	cmp	r3, #0
 8004694:	f000 8220 	beq.w	8004ad8 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046a0:	e21a      	b.n	8004ad8 <HAL_DMA_IRQHandler+0xe78>
 80046a2:	bf00      	nop
 80046a4:	40020010 	.word	0x40020010
 80046a8:	40020028 	.word	0x40020028
 80046ac:	40020040 	.word	0x40020040
 80046b0:	40020058 	.word	0x40020058
 80046b4:	40020070 	.word	0x40020070
 80046b8:	40020088 	.word	0x40020088
 80046bc:	400200a0 	.word	0x400200a0
 80046c0:	400200b8 	.word	0x400200b8
 80046c4:	40020410 	.word	0x40020410
 80046c8:	40020428 	.word	0x40020428
 80046cc:	40020440 	.word	0x40020440
 80046d0:	40020458 	.word	0x40020458
 80046d4:	40020470 	.word	0x40020470
 80046d8:	40020488 	.word	0x40020488
 80046dc:	400204a0 	.word	0x400204a0
 80046e0:	400204b8 	.word	0x400204b8
 80046e4:	48022c08 	.word	0x48022c08
 80046e8:	48022c1c 	.word	0x48022c1c
 80046ec:	48022c30 	.word	0x48022c30
 80046f0:	48022c44 	.word	0x48022c44
 80046f4:	48022c58 	.word	0x48022c58
 80046f8:	48022c6c 	.word	0x48022c6c
 80046fc:	48022c80 	.word	0x48022c80
 8004700:	48022c94 	.word	0x48022c94
 8004704:	58025408 	.word	0x58025408
 8004708:	5802541c 	.word	0x5802541c
 800470c:	58025430 	.word	0x58025430
 8004710:	58025444 	.word	0x58025444
 8004714:	58025458 	.word	0x58025458
 8004718:	5802546c 	.word	0x5802546c
 800471c:	58025480 	.word	0x58025480
 8004720:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004728:	2b00      	cmp	r3, #0
 800472a:	f000 81d5 	beq.w	8004ad8 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004736:	e1cf      	b.n	8004ad8 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	f003 0320 	and.w	r3, r3, #32
 800473e:	2b00      	cmp	r3, #0
 8004740:	d160      	bne.n	8004804 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a7f      	ldr	r2, [pc, #508]	@ (8004944 <HAL_DMA_IRQHandler+0xce4>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d04a      	beq.n	80047e2 <HAL_DMA_IRQHandler+0xb82>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a7d      	ldr	r2, [pc, #500]	@ (8004948 <HAL_DMA_IRQHandler+0xce8>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d045      	beq.n	80047e2 <HAL_DMA_IRQHandler+0xb82>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a7c      	ldr	r2, [pc, #496]	@ (800494c <HAL_DMA_IRQHandler+0xcec>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d040      	beq.n	80047e2 <HAL_DMA_IRQHandler+0xb82>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a7a      	ldr	r2, [pc, #488]	@ (8004950 <HAL_DMA_IRQHandler+0xcf0>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d03b      	beq.n	80047e2 <HAL_DMA_IRQHandler+0xb82>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a79      	ldr	r2, [pc, #484]	@ (8004954 <HAL_DMA_IRQHandler+0xcf4>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d036      	beq.n	80047e2 <HAL_DMA_IRQHandler+0xb82>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a77      	ldr	r2, [pc, #476]	@ (8004958 <HAL_DMA_IRQHandler+0xcf8>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d031      	beq.n	80047e2 <HAL_DMA_IRQHandler+0xb82>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a76      	ldr	r2, [pc, #472]	@ (800495c <HAL_DMA_IRQHandler+0xcfc>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d02c      	beq.n	80047e2 <HAL_DMA_IRQHandler+0xb82>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a74      	ldr	r2, [pc, #464]	@ (8004960 <HAL_DMA_IRQHandler+0xd00>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d027      	beq.n	80047e2 <HAL_DMA_IRQHandler+0xb82>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a73      	ldr	r2, [pc, #460]	@ (8004964 <HAL_DMA_IRQHandler+0xd04>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d022      	beq.n	80047e2 <HAL_DMA_IRQHandler+0xb82>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a71      	ldr	r2, [pc, #452]	@ (8004968 <HAL_DMA_IRQHandler+0xd08>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d01d      	beq.n	80047e2 <HAL_DMA_IRQHandler+0xb82>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a70      	ldr	r2, [pc, #448]	@ (800496c <HAL_DMA_IRQHandler+0xd0c>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d018      	beq.n	80047e2 <HAL_DMA_IRQHandler+0xb82>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a6e      	ldr	r2, [pc, #440]	@ (8004970 <HAL_DMA_IRQHandler+0xd10>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d013      	beq.n	80047e2 <HAL_DMA_IRQHandler+0xb82>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a6d      	ldr	r2, [pc, #436]	@ (8004974 <HAL_DMA_IRQHandler+0xd14>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d00e      	beq.n	80047e2 <HAL_DMA_IRQHandler+0xb82>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a6b      	ldr	r2, [pc, #428]	@ (8004978 <HAL_DMA_IRQHandler+0xd18>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d009      	beq.n	80047e2 <HAL_DMA_IRQHandler+0xb82>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a6a      	ldr	r2, [pc, #424]	@ (800497c <HAL_DMA_IRQHandler+0xd1c>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d004      	beq.n	80047e2 <HAL_DMA_IRQHandler+0xb82>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a68      	ldr	r2, [pc, #416]	@ (8004980 <HAL_DMA_IRQHandler+0xd20>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d108      	bne.n	80047f4 <HAL_DMA_IRQHandler+0xb94>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f022 0208 	bic.w	r2, r2, #8
 80047f0:	601a      	str	r2, [r3, #0]
 80047f2:	e007      	b.n	8004804 <HAL_DMA_IRQHandler+0xba4>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f022 0204 	bic.w	r2, r2, #4
 8004802:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004808:	2b00      	cmp	r3, #0
 800480a:	f000 8165 	beq.w	8004ad8 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004816:	e15f      	b.n	8004ad8 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800481c:	f003 031f 	and.w	r3, r3, #31
 8004820:	2202      	movs	r2, #2
 8004822:	409a      	lsls	r2, r3
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	4013      	ands	r3, r2
 8004828:	2b00      	cmp	r3, #0
 800482a:	f000 80c5 	beq.w	80049b8 <HAL_DMA_IRQHandler+0xd58>
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	f003 0302 	and.w	r3, r3, #2
 8004834:	2b00      	cmp	r3, #0
 8004836:	f000 80bf 	beq.w	80049b8 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800483e:	f003 031f 	and.w	r3, r3, #31
 8004842:	2202      	movs	r2, #2
 8004844:	409a      	lsls	r2, r3
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d018      	beq.n	8004886 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d109      	bne.n	8004872 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004862:	2b00      	cmp	r3, #0
 8004864:	f000 813a 	beq.w	8004adc <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004870:	e134      	b.n	8004adc <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004876:	2b00      	cmp	r3, #0
 8004878:	f000 8130 	beq.w	8004adc <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004884:	e12a      	b.n	8004adc <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	f003 0320 	and.w	r3, r3, #32
 800488c:	2b00      	cmp	r3, #0
 800488e:	f040 8089 	bne.w	80049a4 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a2b      	ldr	r2, [pc, #172]	@ (8004944 <HAL_DMA_IRQHandler+0xce4>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d04a      	beq.n	8004932 <HAL_DMA_IRQHandler+0xcd2>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a29      	ldr	r2, [pc, #164]	@ (8004948 <HAL_DMA_IRQHandler+0xce8>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d045      	beq.n	8004932 <HAL_DMA_IRQHandler+0xcd2>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a28      	ldr	r2, [pc, #160]	@ (800494c <HAL_DMA_IRQHandler+0xcec>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d040      	beq.n	8004932 <HAL_DMA_IRQHandler+0xcd2>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a26      	ldr	r2, [pc, #152]	@ (8004950 <HAL_DMA_IRQHandler+0xcf0>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d03b      	beq.n	8004932 <HAL_DMA_IRQHandler+0xcd2>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a25      	ldr	r2, [pc, #148]	@ (8004954 <HAL_DMA_IRQHandler+0xcf4>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d036      	beq.n	8004932 <HAL_DMA_IRQHandler+0xcd2>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a23      	ldr	r2, [pc, #140]	@ (8004958 <HAL_DMA_IRQHandler+0xcf8>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d031      	beq.n	8004932 <HAL_DMA_IRQHandler+0xcd2>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a22      	ldr	r2, [pc, #136]	@ (800495c <HAL_DMA_IRQHandler+0xcfc>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d02c      	beq.n	8004932 <HAL_DMA_IRQHandler+0xcd2>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a20      	ldr	r2, [pc, #128]	@ (8004960 <HAL_DMA_IRQHandler+0xd00>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d027      	beq.n	8004932 <HAL_DMA_IRQHandler+0xcd2>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a1f      	ldr	r2, [pc, #124]	@ (8004964 <HAL_DMA_IRQHandler+0xd04>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d022      	beq.n	8004932 <HAL_DMA_IRQHandler+0xcd2>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a1d      	ldr	r2, [pc, #116]	@ (8004968 <HAL_DMA_IRQHandler+0xd08>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d01d      	beq.n	8004932 <HAL_DMA_IRQHandler+0xcd2>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a1c      	ldr	r2, [pc, #112]	@ (800496c <HAL_DMA_IRQHandler+0xd0c>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d018      	beq.n	8004932 <HAL_DMA_IRQHandler+0xcd2>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a1a      	ldr	r2, [pc, #104]	@ (8004970 <HAL_DMA_IRQHandler+0xd10>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d013      	beq.n	8004932 <HAL_DMA_IRQHandler+0xcd2>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a19      	ldr	r2, [pc, #100]	@ (8004974 <HAL_DMA_IRQHandler+0xd14>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d00e      	beq.n	8004932 <HAL_DMA_IRQHandler+0xcd2>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a17      	ldr	r2, [pc, #92]	@ (8004978 <HAL_DMA_IRQHandler+0xd18>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d009      	beq.n	8004932 <HAL_DMA_IRQHandler+0xcd2>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a16      	ldr	r2, [pc, #88]	@ (800497c <HAL_DMA_IRQHandler+0xd1c>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d004      	beq.n	8004932 <HAL_DMA_IRQHandler+0xcd2>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a14      	ldr	r2, [pc, #80]	@ (8004980 <HAL_DMA_IRQHandler+0xd20>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d128      	bne.n	8004984 <HAL_DMA_IRQHandler+0xd24>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f022 0214 	bic.w	r2, r2, #20
 8004940:	601a      	str	r2, [r3, #0]
 8004942:	e027      	b.n	8004994 <HAL_DMA_IRQHandler+0xd34>
 8004944:	40020010 	.word	0x40020010
 8004948:	40020028 	.word	0x40020028
 800494c:	40020040 	.word	0x40020040
 8004950:	40020058 	.word	0x40020058
 8004954:	40020070 	.word	0x40020070
 8004958:	40020088 	.word	0x40020088
 800495c:	400200a0 	.word	0x400200a0
 8004960:	400200b8 	.word	0x400200b8
 8004964:	40020410 	.word	0x40020410
 8004968:	40020428 	.word	0x40020428
 800496c:	40020440 	.word	0x40020440
 8004970:	40020458 	.word	0x40020458
 8004974:	40020470 	.word	0x40020470
 8004978:	40020488 	.word	0x40020488
 800497c:	400204a0 	.word	0x400204a0
 8004980:	400204b8 	.word	0x400204b8
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f022 020a 	bic.w	r2, r2, #10
 8004992:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	f000 8097 	beq.w	8004adc <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049b6:	e091      	b.n	8004adc <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049bc:	f003 031f 	and.w	r3, r3, #31
 80049c0:	2208      	movs	r2, #8
 80049c2:	409a      	lsls	r2, r3
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	4013      	ands	r3, r2
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f000 8088 	beq.w	8004ade <HAL_DMA_IRQHandler+0xe7e>
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	f003 0308 	and.w	r3, r3, #8
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	f000 8082 	beq.w	8004ade <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a41      	ldr	r2, [pc, #260]	@ (8004ae4 <HAL_DMA_IRQHandler+0xe84>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d04a      	beq.n	8004a7a <HAL_DMA_IRQHandler+0xe1a>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a3f      	ldr	r2, [pc, #252]	@ (8004ae8 <HAL_DMA_IRQHandler+0xe88>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d045      	beq.n	8004a7a <HAL_DMA_IRQHandler+0xe1a>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a3e      	ldr	r2, [pc, #248]	@ (8004aec <HAL_DMA_IRQHandler+0xe8c>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d040      	beq.n	8004a7a <HAL_DMA_IRQHandler+0xe1a>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a3c      	ldr	r2, [pc, #240]	@ (8004af0 <HAL_DMA_IRQHandler+0xe90>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d03b      	beq.n	8004a7a <HAL_DMA_IRQHandler+0xe1a>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a3b      	ldr	r2, [pc, #236]	@ (8004af4 <HAL_DMA_IRQHandler+0xe94>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d036      	beq.n	8004a7a <HAL_DMA_IRQHandler+0xe1a>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a39      	ldr	r2, [pc, #228]	@ (8004af8 <HAL_DMA_IRQHandler+0xe98>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d031      	beq.n	8004a7a <HAL_DMA_IRQHandler+0xe1a>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a38      	ldr	r2, [pc, #224]	@ (8004afc <HAL_DMA_IRQHandler+0xe9c>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d02c      	beq.n	8004a7a <HAL_DMA_IRQHandler+0xe1a>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a36      	ldr	r2, [pc, #216]	@ (8004b00 <HAL_DMA_IRQHandler+0xea0>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d027      	beq.n	8004a7a <HAL_DMA_IRQHandler+0xe1a>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a35      	ldr	r2, [pc, #212]	@ (8004b04 <HAL_DMA_IRQHandler+0xea4>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d022      	beq.n	8004a7a <HAL_DMA_IRQHandler+0xe1a>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a33      	ldr	r2, [pc, #204]	@ (8004b08 <HAL_DMA_IRQHandler+0xea8>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d01d      	beq.n	8004a7a <HAL_DMA_IRQHandler+0xe1a>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a32      	ldr	r2, [pc, #200]	@ (8004b0c <HAL_DMA_IRQHandler+0xeac>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d018      	beq.n	8004a7a <HAL_DMA_IRQHandler+0xe1a>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a30      	ldr	r2, [pc, #192]	@ (8004b10 <HAL_DMA_IRQHandler+0xeb0>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d013      	beq.n	8004a7a <HAL_DMA_IRQHandler+0xe1a>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a2f      	ldr	r2, [pc, #188]	@ (8004b14 <HAL_DMA_IRQHandler+0xeb4>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d00e      	beq.n	8004a7a <HAL_DMA_IRQHandler+0xe1a>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a2d      	ldr	r2, [pc, #180]	@ (8004b18 <HAL_DMA_IRQHandler+0xeb8>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d009      	beq.n	8004a7a <HAL_DMA_IRQHandler+0xe1a>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a2c      	ldr	r2, [pc, #176]	@ (8004b1c <HAL_DMA_IRQHandler+0xebc>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d004      	beq.n	8004a7a <HAL_DMA_IRQHandler+0xe1a>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a2a      	ldr	r2, [pc, #168]	@ (8004b20 <HAL_DMA_IRQHandler+0xec0>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d108      	bne.n	8004a8c <HAL_DMA_IRQHandler+0xe2c>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f022 021c 	bic.w	r2, r2, #28
 8004a88:	601a      	str	r2, [r3, #0]
 8004a8a:	e007      	b.n	8004a9c <HAL_DMA_IRQHandler+0xe3c>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f022 020e 	bic.w	r2, r2, #14
 8004a9a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aa0:	f003 031f 	and.w	r3, r3, #31
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	409a      	lsls	r2, r3
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d009      	beq.n	8004ade <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	4798      	blx	r3
 8004ad2:	e004      	b.n	8004ade <HAL_DMA_IRQHandler+0xe7e>
          return;
 8004ad4:	bf00      	nop
 8004ad6:	e002      	b.n	8004ade <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ad8:	bf00      	nop
 8004ada:	e000      	b.n	8004ade <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004adc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004ade:	3728      	adds	r7, #40	@ 0x28
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	40020010 	.word	0x40020010
 8004ae8:	40020028 	.word	0x40020028
 8004aec:	40020040 	.word	0x40020040
 8004af0:	40020058 	.word	0x40020058
 8004af4:	40020070 	.word	0x40020070
 8004af8:	40020088 	.word	0x40020088
 8004afc:	400200a0 	.word	0x400200a0
 8004b00:	400200b8 	.word	0x400200b8
 8004b04:	40020410 	.word	0x40020410
 8004b08:	40020428 	.word	0x40020428
 8004b0c:	40020440 	.word	0x40020440
 8004b10:	40020458 	.word	0x40020458
 8004b14:	40020470 	.word	0x40020470
 8004b18:	40020488 	.word	0x40020488
 8004b1c:	400204a0 	.word	0x400204a0
 8004b20:	400204b8 	.word	0x400204b8

08004b24 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b32:	b2db      	uxtb	r3, r3
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b087      	sub	sp, #28
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
 8004b64:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b6a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b70:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a7f      	ldr	r2, [pc, #508]	@ (8004d74 <DMA_SetConfig+0x21c>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d072      	beq.n	8004c62 <DMA_SetConfig+0x10a>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a7d      	ldr	r2, [pc, #500]	@ (8004d78 <DMA_SetConfig+0x220>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d06d      	beq.n	8004c62 <DMA_SetConfig+0x10a>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a7c      	ldr	r2, [pc, #496]	@ (8004d7c <DMA_SetConfig+0x224>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d068      	beq.n	8004c62 <DMA_SetConfig+0x10a>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a7a      	ldr	r2, [pc, #488]	@ (8004d80 <DMA_SetConfig+0x228>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d063      	beq.n	8004c62 <DMA_SetConfig+0x10a>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a79      	ldr	r2, [pc, #484]	@ (8004d84 <DMA_SetConfig+0x22c>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d05e      	beq.n	8004c62 <DMA_SetConfig+0x10a>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a77      	ldr	r2, [pc, #476]	@ (8004d88 <DMA_SetConfig+0x230>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d059      	beq.n	8004c62 <DMA_SetConfig+0x10a>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a76      	ldr	r2, [pc, #472]	@ (8004d8c <DMA_SetConfig+0x234>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d054      	beq.n	8004c62 <DMA_SetConfig+0x10a>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a74      	ldr	r2, [pc, #464]	@ (8004d90 <DMA_SetConfig+0x238>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d04f      	beq.n	8004c62 <DMA_SetConfig+0x10a>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a73      	ldr	r2, [pc, #460]	@ (8004d94 <DMA_SetConfig+0x23c>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d04a      	beq.n	8004c62 <DMA_SetConfig+0x10a>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a71      	ldr	r2, [pc, #452]	@ (8004d98 <DMA_SetConfig+0x240>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d045      	beq.n	8004c62 <DMA_SetConfig+0x10a>
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a70      	ldr	r2, [pc, #448]	@ (8004d9c <DMA_SetConfig+0x244>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d040      	beq.n	8004c62 <DMA_SetConfig+0x10a>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a6e      	ldr	r2, [pc, #440]	@ (8004da0 <DMA_SetConfig+0x248>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d03b      	beq.n	8004c62 <DMA_SetConfig+0x10a>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a6d      	ldr	r2, [pc, #436]	@ (8004da4 <DMA_SetConfig+0x24c>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d036      	beq.n	8004c62 <DMA_SetConfig+0x10a>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a6b      	ldr	r2, [pc, #428]	@ (8004da8 <DMA_SetConfig+0x250>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d031      	beq.n	8004c62 <DMA_SetConfig+0x10a>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a6a      	ldr	r2, [pc, #424]	@ (8004dac <DMA_SetConfig+0x254>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d02c      	beq.n	8004c62 <DMA_SetConfig+0x10a>
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a68      	ldr	r2, [pc, #416]	@ (8004db0 <DMA_SetConfig+0x258>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d027      	beq.n	8004c62 <DMA_SetConfig+0x10a>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a67      	ldr	r2, [pc, #412]	@ (8004db4 <DMA_SetConfig+0x25c>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d022      	beq.n	8004c62 <DMA_SetConfig+0x10a>
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a65      	ldr	r2, [pc, #404]	@ (8004db8 <DMA_SetConfig+0x260>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d01d      	beq.n	8004c62 <DMA_SetConfig+0x10a>
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a64      	ldr	r2, [pc, #400]	@ (8004dbc <DMA_SetConfig+0x264>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d018      	beq.n	8004c62 <DMA_SetConfig+0x10a>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a62      	ldr	r2, [pc, #392]	@ (8004dc0 <DMA_SetConfig+0x268>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d013      	beq.n	8004c62 <DMA_SetConfig+0x10a>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a61      	ldr	r2, [pc, #388]	@ (8004dc4 <DMA_SetConfig+0x26c>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d00e      	beq.n	8004c62 <DMA_SetConfig+0x10a>
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a5f      	ldr	r2, [pc, #380]	@ (8004dc8 <DMA_SetConfig+0x270>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d009      	beq.n	8004c62 <DMA_SetConfig+0x10a>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a5e      	ldr	r2, [pc, #376]	@ (8004dcc <DMA_SetConfig+0x274>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d004      	beq.n	8004c62 <DMA_SetConfig+0x10a>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a5c      	ldr	r2, [pc, #368]	@ (8004dd0 <DMA_SetConfig+0x278>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d101      	bne.n	8004c66 <DMA_SetConfig+0x10e>
 8004c62:	2301      	movs	r3, #1
 8004c64:	e000      	b.n	8004c68 <DMA_SetConfig+0x110>
 8004c66:	2300      	movs	r3, #0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00d      	beq.n	8004c88 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004c74:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d004      	beq.n	8004c88 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004c86:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a39      	ldr	r2, [pc, #228]	@ (8004d74 <DMA_SetConfig+0x21c>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d04a      	beq.n	8004d28 <DMA_SetConfig+0x1d0>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a38      	ldr	r2, [pc, #224]	@ (8004d78 <DMA_SetConfig+0x220>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d045      	beq.n	8004d28 <DMA_SetConfig+0x1d0>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a36      	ldr	r2, [pc, #216]	@ (8004d7c <DMA_SetConfig+0x224>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d040      	beq.n	8004d28 <DMA_SetConfig+0x1d0>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a35      	ldr	r2, [pc, #212]	@ (8004d80 <DMA_SetConfig+0x228>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d03b      	beq.n	8004d28 <DMA_SetConfig+0x1d0>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a33      	ldr	r2, [pc, #204]	@ (8004d84 <DMA_SetConfig+0x22c>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d036      	beq.n	8004d28 <DMA_SetConfig+0x1d0>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a32      	ldr	r2, [pc, #200]	@ (8004d88 <DMA_SetConfig+0x230>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d031      	beq.n	8004d28 <DMA_SetConfig+0x1d0>
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a30      	ldr	r2, [pc, #192]	@ (8004d8c <DMA_SetConfig+0x234>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d02c      	beq.n	8004d28 <DMA_SetConfig+0x1d0>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a2f      	ldr	r2, [pc, #188]	@ (8004d90 <DMA_SetConfig+0x238>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d027      	beq.n	8004d28 <DMA_SetConfig+0x1d0>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a2d      	ldr	r2, [pc, #180]	@ (8004d94 <DMA_SetConfig+0x23c>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d022      	beq.n	8004d28 <DMA_SetConfig+0x1d0>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a2c      	ldr	r2, [pc, #176]	@ (8004d98 <DMA_SetConfig+0x240>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d01d      	beq.n	8004d28 <DMA_SetConfig+0x1d0>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a2a      	ldr	r2, [pc, #168]	@ (8004d9c <DMA_SetConfig+0x244>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d018      	beq.n	8004d28 <DMA_SetConfig+0x1d0>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a29      	ldr	r2, [pc, #164]	@ (8004da0 <DMA_SetConfig+0x248>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d013      	beq.n	8004d28 <DMA_SetConfig+0x1d0>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a27      	ldr	r2, [pc, #156]	@ (8004da4 <DMA_SetConfig+0x24c>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d00e      	beq.n	8004d28 <DMA_SetConfig+0x1d0>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a26      	ldr	r2, [pc, #152]	@ (8004da8 <DMA_SetConfig+0x250>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d009      	beq.n	8004d28 <DMA_SetConfig+0x1d0>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a24      	ldr	r2, [pc, #144]	@ (8004dac <DMA_SetConfig+0x254>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d004      	beq.n	8004d28 <DMA_SetConfig+0x1d0>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a23      	ldr	r2, [pc, #140]	@ (8004db0 <DMA_SetConfig+0x258>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d101      	bne.n	8004d2c <DMA_SetConfig+0x1d4>
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e000      	b.n	8004d2e <DMA_SetConfig+0x1d6>
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d059      	beq.n	8004de6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d36:	f003 031f 	and.w	r3, r3, #31
 8004d3a:	223f      	movs	r2, #63	@ 0x3f
 8004d3c:	409a      	lsls	r2, r3
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004d50:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	683a      	ldr	r2, [r7, #0]
 8004d58:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	2b40      	cmp	r3, #64	@ 0x40
 8004d60:	d138      	bne.n	8004dd4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68ba      	ldr	r2, [r7, #8]
 8004d70:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004d72:	e0ae      	b.n	8004ed2 <DMA_SetConfig+0x37a>
 8004d74:	40020010 	.word	0x40020010
 8004d78:	40020028 	.word	0x40020028
 8004d7c:	40020040 	.word	0x40020040
 8004d80:	40020058 	.word	0x40020058
 8004d84:	40020070 	.word	0x40020070
 8004d88:	40020088 	.word	0x40020088
 8004d8c:	400200a0 	.word	0x400200a0
 8004d90:	400200b8 	.word	0x400200b8
 8004d94:	40020410 	.word	0x40020410
 8004d98:	40020428 	.word	0x40020428
 8004d9c:	40020440 	.word	0x40020440
 8004da0:	40020458 	.word	0x40020458
 8004da4:	40020470 	.word	0x40020470
 8004da8:	40020488 	.word	0x40020488
 8004dac:	400204a0 	.word	0x400204a0
 8004db0:	400204b8 	.word	0x400204b8
 8004db4:	58025408 	.word	0x58025408
 8004db8:	5802541c 	.word	0x5802541c
 8004dbc:	58025430 	.word	0x58025430
 8004dc0:	58025444 	.word	0x58025444
 8004dc4:	58025458 	.word	0x58025458
 8004dc8:	5802546c 	.word	0x5802546c
 8004dcc:	58025480 	.word	0x58025480
 8004dd0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68ba      	ldr	r2, [r7, #8]
 8004dda:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	60da      	str	r2, [r3, #12]
}
 8004de4:	e075      	b.n	8004ed2 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a3d      	ldr	r2, [pc, #244]	@ (8004ee0 <DMA_SetConfig+0x388>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d04a      	beq.n	8004e86 <DMA_SetConfig+0x32e>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a3b      	ldr	r2, [pc, #236]	@ (8004ee4 <DMA_SetConfig+0x38c>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d045      	beq.n	8004e86 <DMA_SetConfig+0x32e>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a3a      	ldr	r2, [pc, #232]	@ (8004ee8 <DMA_SetConfig+0x390>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d040      	beq.n	8004e86 <DMA_SetConfig+0x32e>
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a38      	ldr	r2, [pc, #224]	@ (8004eec <DMA_SetConfig+0x394>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d03b      	beq.n	8004e86 <DMA_SetConfig+0x32e>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a37      	ldr	r2, [pc, #220]	@ (8004ef0 <DMA_SetConfig+0x398>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d036      	beq.n	8004e86 <DMA_SetConfig+0x32e>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a35      	ldr	r2, [pc, #212]	@ (8004ef4 <DMA_SetConfig+0x39c>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d031      	beq.n	8004e86 <DMA_SetConfig+0x32e>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a34      	ldr	r2, [pc, #208]	@ (8004ef8 <DMA_SetConfig+0x3a0>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d02c      	beq.n	8004e86 <DMA_SetConfig+0x32e>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a32      	ldr	r2, [pc, #200]	@ (8004efc <DMA_SetConfig+0x3a4>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d027      	beq.n	8004e86 <DMA_SetConfig+0x32e>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a31      	ldr	r2, [pc, #196]	@ (8004f00 <DMA_SetConfig+0x3a8>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d022      	beq.n	8004e86 <DMA_SetConfig+0x32e>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a2f      	ldr	r2, [pc, #188]	@ (8004f04 <DMA_SetConfig+0x3ac>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d01d      	beq.n	8004e86 <DMA_SetConfig+0x32e>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a2e      	ldr	r2, [pc, #184]	@ (8004f08 <DMA_SetConfig+0x3b0>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d018      	beq.n	8004e86 <DMA_SetConfig+0x32e>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a2c      	ldr	r2, [pc, #176]	@ (8004f0c <DMA_SetConfig+0x3b4>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d013      	beq.n	8004e86 <DMA_SetConfig+0x32e>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a2b      	ldr	r2, [pc, #172]	@ (8004f10 <DMA_SetConfig+0x3b8>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d00e      	beq.n	8004e86 <DMA_SetConfig+0x32e>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a29      	ldr	r2, [pc, #164]	@ (8004f14 <DMA_SetConfig+0x3bc>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d009      	beq.n	8004e86 <DMA_SetConfig+0x32e>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a28      	ldr	r2, [pc, #160]	@ (8004f18 <DMA_SetConfig+0x3c0>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d004      	beq.n	8004e86 <DMA_SetConfig+0x32e>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a26      	ldr	r2, [pc, #152]	@ (8004f1c <DMA_SetConfig+0x3c4>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d101      	bne.n	8004e8a <DMA_SetConfig+0x332>
 8004e86:	2301      	movs	r3, #1
 8004e88:	e000      	b.n	8004e8c <DMA_SetConfig+0x334>
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d020      	beq.n	8004ed2 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e94:	f003 031f 	and.w	r3, r3, #31
 8004e98:	2201      	movs	r2, #1
 8004e9a:	409a      	lsls	r2, r3
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	683a      	ldr	r2, [r7, #0]
 8004ea6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	2b40      	cmp	r3, #64	@ 0x40
 8004eae:	d108      	bne.n	8004ec2 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68ba      	ldr	r2, [r7, #8]
 8004ebe:	60da      	str	r2, [r3, #12]
}
 8004ec0:	e007      	b.n	8004ed2 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68ba      	ldr	r2, [r7, #8]
 8004ec8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	60da      	str	r2, [r3, #12]
}
 8004ed2:	bf00      	nop
 8004ed4:	371c      	adds	r7, #28
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	48022c08 	.word	0x48022c08
 8004ee4:	48022c1c 	.word	0x48022c1c
 8004ee8:	48022c30 	.word	0x48022c30
 8004eec:	48022c44 	.word	0x48022c44
 8004ef0:	48022c58 	.word	0x48022c58
 8004ef4:	48022c6c 	.word	0x48022c6c
 8004ef8:	48022c80 	.word	0x48022c80
 8004efc:	48022c94 	.word	0x48022c94
 8004f00:	58025408 	.word	0x58025408
 8004f04:	5802541c 	.word	0x5802541c
 8004f08:	58025430 	.word	0x58025430
 8004f0c:	58025444 	.word	0x58025444
 8004f10:	58025458 	.word	0x58025458
 8004f14:	5802546c 	.word	0x5802546c
 8004f18:	58025480 	.word	0x58025480
 8004f1c:	58025494 	.word	0x58025494

08004f20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b085      	sub	sp, #20
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a42      	ldr	r2, [pc, #264]	@ (8005038 <DMA_CalcBaseAndBitshift+0x118>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d04a      	beq.n	8004fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a41      	ldr	r2, [pc, #260]	@ (800503c <DMA_CalcBaseAndBitshift+0x11c>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d045      	beq.n	8004fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a3f      	ldr	r2, [pc, #252]	@ (8005040 <DMA_CalcBaseAndBitshift+0x120>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d040      	beq.n	8004fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a3e      	ldr	r2, [pc, #248]	@ (8005044 <DMA_CalcBaseAndBitshift+0x124>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d03b      	beq.n	8004fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a3c      	ldr	r2, [pc, #240]	@ (8005048 <DMA_CalcBaseAndBitshift+0x128>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d036      	beq.n	8004fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a3b      	ldr	r2, [pc, #236]	@ (800504c <DMA_CalcBaseAndBitshift+0x12c>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d031      	beq.n	8004fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a39      	ldr	r2, [pc, #228]	@ (8005050 <DMA_CalcBaseAndBitshift+0x130>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d02c      	beq.n	8004fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a38      	ldr	r2, [pc, #224]	@ (8005054 <DMA_CalcBaseAndBitshift+0x134>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d027      	beq.n	8004fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a36      	ldr	r2, [pc, #216]	@ (8005058 <DMA_CalcBaseAndBitshift+0x138>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d022      	beq.n	8004fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a35      	ldr	r2, [pc, #212]	@ (800505c <DMA_CalcBaseAndBitshift+0x13c>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d01d      	beq.n	8004fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a33      	ldr	r2, [pc, #204]	@ (8005060 <DMA_CalcBaseAndBitshift+0x140>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d018      	beq.n	8004fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a32      	ldr	r2, [pc, #200]	@ (8005064 <DMA_CalcBaseAndBitshift+0x144>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d013      	beq.n	8004fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a30      	ldr	r2, [pc, #192]	@ (8005068 <DMA_CalcBaseAndBitshift+0x148>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d00e      	beq.n	8004fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a2f      	ldr	r2, [pc, #188]	@ (800506c <DMA_CalcBaseAndBitshift+0x14c>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d009      	beq.n	8004fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a2d      	ldr	r2, [pc, #180]	@ (8005070 <DMA_CalcBaseAndBitshift+0x150>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d004      	beq.n	8004fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a2c      	ldr	r2, [pc, #176]	@ (8005074 <DMA_CalcBaseAndBitshift+0x154>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d101      	bne.n	8004fcc <DMA_CalcBaseAndBitshift+0xac>
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e000      	b.n	8004fce <DMA_CalcBaseAndBitshift+0xae>
 8004fcc:	2300      	movs	r3, #0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d024      	beq.n	800501c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	3b10      	subs	r3, #16
 8004fda:	4a27      	ldr	r2, [pc, #156]	@ (8005078 <DMA_CalcBaseAndBitshift+0x158>)
 8004fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe0:	091b      	lsrs	r3, r3, #4
 8004fe2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f003 0307 	and.w	r3, r3, #7
 8004fea:	4a24      	ldr	r2, [pc, #144]	@ (800507c <DMA_CalcBaseAndBitshift+0x15c>)
 8004fec:	5cd3      	ldrb	r3, [r2, r3]
 8004fee:	461a      	mov	r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2b03      	cmp	r3, #3
 8004ff8:	d908      	bls.n	800500c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	461a      	mov	r2, r3
 8005000:	4b1f      	ldr	r3, [pc, #124]	@ (8005080 <DMA_CalcBaseAndBitshift+0x160>)
 8005002:	4013      	ands	r3, r2
 8005004:	1d1a      	adds	r2, r3, #4
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	659a      	str	r2, [r3, #88]	@ 0x58
 800500a:	e00d      	b.n	8005028 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	461a      	mov	r2, r3
 8005012:	4b1b      	ldr	r3, [pc, #108]	@ (8005080 <DMA_CalcBaseAndBitshift+0x160>)
 8005014:	4013      	ands	r3, r2
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	6593      	str	r3, [r2, #88]	@ 0x58
 800501a:	e005      	b.n	8005028 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800502c:	4618      	mov	r0, r3
 800502e:	3714      	adds	r7, #20
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr
 8005038:	40020010 	.word	0x40020010
 800503c:	40020028 	.word	0x40020028
 8005040:	40020040 	.word	0x40020040
 8005044:	40020058 	.word	0x40020058
 8005048:	40020070 	.word	0x40020070
 800504c:	40020088 	.word	0x40020088
 8005050:	400200a0 	.word	0x400200a0
 8005054:	400200b8 	.word	0x400200b8
 8005058:	40020410 	.word	0x40020410
 800505c:	40020428 	.word	0x40020428
 8005060:	40020440 	.word	0x40020440
 8005064:	40020458 	.word	0x40020458
 8005068:	40020470 	.word	0x40020470
 800506c:	40020488 	.word	0x40020488
 8005070:	400204a0 	.word	0x400204a0
 8005074:	400204b8 	.word	0x400204b8
 8005078:	aaaaaaab 	.word	0xaaaaaaab
 800507c:	08014b64 	.word	0x08014b64
 8005080:	fffffc00 	.word	0xfffffc00

08005084 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005084:	b480      	push	{r7}
 8005086:	b085      	sub	sp, #20
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800508c:	2300      	movs	r3, #0
 800508e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d120      	bne.n	80050da <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800509c:	2b03      	cmp	r3, #3
 800509e:	d858      	bhi.n	8005152 <DMA_CheckFifoParam+0xce>
 80050a0:	a201      	add	r2, pc, #4	@ (adr r2, 80050a8 <DMA_CheckFifoParam+0x24>)
 80050a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a6:	bf00      	nop
 80050a8:	080050b9 	.word	0x080050b9
 80050ac:	080050cb 	.word	0x080050cb
 80050b0:	080050b9 	.word	0x080050b9
 80050b4:	08005153 	.word	0x08005153
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d048      	beq.n	8005156 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80050c8:	e045      	b.n	8005156 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ce:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80050d2:	d142      	bne.n	800515a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80050d8:	e03f      	b.n	800515a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050e2:	d123      	bne.n	800512c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050e8:	2b03      	cmp	r3, #3
 80050ea:	d838      	bhi.n	800515e <DMA_CheckFifoParam+0xda>
 80050ec:	a201      	add	r2, pc, #4	@ (adr r2, 80050f4 <DMA_CheckFifoParam+0x70>)
 80050ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f2:	bf00      	nop
 80050f4:	08005105 	.word	0x08005105
 80050f8:	0800510b 	.word	0x0800510b
 80050fc:	08005105 	.word	0x08005105
 8005100:	0800511d 	.word	0x0800511d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	73fb      	strb	r3, [r7, #15]
        break;
 8005108:	e030      	b.n	800516c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800510e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d025      	beq.n	8005162 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800511a:	e022      	b.n	8005162 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005120:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005124:	d11f      	bne.n	8005166 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800512a:	e01c      	b.n	8005166 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005130:	2b02      	cmp	r3, #2
 8005132:	d902      	bls.n	800513a <DMA_CheckFifoParam+0xb6>
 8005134:	2b03      	cmp	r3, #3
 8005136:	d003      	beq.n	8005140 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005138:	e018      	b.n	800516c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	73fb      	strb	r3, [r7, #15]
        break;
 800513e:	e015      	b.n	800516c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005144:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005148:	2b00      	cmp	r3, #0
 800514a:	d00e      	beq.n	800516a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	73fb      	strb	r3, [r7, #15]
    break;
 8005150:	e00b      	b.n	800516a <DMA_CheckFifoParam+0xe6>
        break;
 8005152:	bf00      	nop
 8005154:	e00a      	b.n	800516c <DMA_CheckFifoParam+0xe8>
        break;
 8005156:	bf00      	nop
 8005158:	e008      	b.n	800516c <DMA_CheckFifoParam+0xe8>
        break;
 800515a:	bf00      	nop
 800515c:	e006      	b.n	800516c <DMA_CheckFifoParam+0xe8>
        break;
 800515e:	bf00      	nop
 8005160:	e004      	b.n	800516c <DMA_CheckFifoParam+0xe8>
        break;
 8005162:	bf00      	nop
 8005164:	e002      	b.n	800516c <DMA_CheckFifoParam+0xe8>
        break;
 8005166:	bf00      	nop
 8005168:	e000      	b.n	800516c <DMA_CheckFifoParam+0xe8>
    break;
 800516a:	bf00      	nop
    }
  }

  return status;
 800516c:	7bfb      	ldrb	r3, [r7, #15]
}
 800516e:	4618      	mov	r0, r3
 8005170:	3714      	adds	r7, #20
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop

0800517c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800517c:	b480      	push	{r7}
 800517e:	b085      	sub	sp, #20
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a38      	ldr	r2, [pc, #224]	@ (8005270 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d022      	beq.n	80051da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a36      	ldr	r2, [pc, #216]	@ (8005274 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d01d      	beq.n	80051da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a35      	ldr	r2, [pc, #212]	@ (8005278 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d018      	beq.n	80051da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a33      	ldr	r2, [pc, #204]	@ (800527c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d013      	beq.n	80051da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a32      	ldr	r2, [pc, #200]	@ (8005280 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d00e      	beq.n	80051da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a30      	ldr	r2, [pc, #192]	@ (8005284 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d009      	beq.n	80051da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a2f      	ldr	r2, [pc, #188]	@ (8005288 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d004      	beq.n	80051da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a2d      	ldr	r2, [pc, #180]	@ (800528c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d101      	bne.n	80051de <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80051da:	2301      	movs	r3, #1
 80051dc:	e000      	b.n	80051e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80051de:	2300      	movs	r3, #0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d01a      	beq.n	800521a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	3b08      	subs	r3, #8
 80051ec:	4a28      	ldr	r2, [pc, #160]	@ (8005290 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80051ee:	fba2 2303 	umull	r2, r3, r2, r3
 80051f2:	091b      	lsrs	r3, r3, #4
 80051f4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	4b26      	ldr	r3, [pc, #152]	@ (8005294 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80051fa:	4413      	add	r3, r2
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	461a      	mov	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a24      	ldr	r2, [pc, #144]	@ (8005298 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005208:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f003 031f 	and.w	r3, r3, #31
 8005210:	2201      	movs	r2, #1
 8005212:	409a      	lsls	r2, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005218:	e024      	b.n	8005264 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	b2db      	uxtb	r3, r3
 8005220:	3b10      	subs	r3, #16
 8005222:	4a1e      	ldr	r2, [pc, #120]	@ (800529c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005224:	fba2 2303 	umull	r2, r3, r2, r3
 8005228:	091b      	lsrs	r3, r3, #4
 800522a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	4a1c      	ldr	r2, [pc, #112]	@ (80052a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d806      	bhi.n	8005242 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	4a1b      	ldr	r2, [pc, #108]	@ (80052a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d902      	bls.n	8005242 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	3308      	adds	r3, #8
 8005240:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	4b18      	ldr	r3, [pc, #96]	@ (80052a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005246:	4413      	add	r3, r2
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	461a      	mov	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a16      	ldr	r2, [pc, #88]	@ (80052ac <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005254:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f003 031f 	and.w	r3, r3, #31
 800525c:	2201      	movs	r2, #1
 800525e:	409a      	lsls	r2, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005264:	bf00      	nop
 8005266:	3714      	adds	r7, #20
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr
 8005270:	58025408 	.word	0x58025408
 8005274:	5802541c 	.word	0x5802541c
 8005278:	58025430 	.word	0x58025430
 800527c:	58025444 	.word	0x58025444
 8005280:	58025458 	.word	0x58025458
 8005284:	5802546c 	.word	0x5802546c
 8005288:	58025480 	.word	0x58025480
 800528c:	58025494 	.word	0x58025494
 8005290:	cccccccd 	.word	0xcccccccd
 8005294:	16009600 	.word	0x16009600
 8005298:	58025880 	.word	0x58025880
 800529c:	aaaaaaab 	.word	0xaaaaaaab
 80052a0:	400204b8 	.word	0x400204b8
 80052a4:	4002040f 	.word	0x4002040f
 80052a8:	10008200 	.word	0x10008200
 80052ac:	40020880 	.word	0x40020880

080052b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d04a      	beq.n	800535c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2b08      	cmp	r3, #8
 80052ca:	d847      	bhi.n	800535c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a25      	ldr	r2, [pc, #148]	@ (8005368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d022      	beq.n	800531c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a24      	ldr	r2, [pc, #144]	@ (800536c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d01d      	beq.n	800531c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a22      	ldr	r2, [pc, #136]	@ (8005370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d018      	beq.n	800531c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a21      	ldr	r2, [pc, #132]	@ (8005374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d013      	beq.n	800531c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a1f      	ldr	r2, [pc, #124]	@ (8005378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d00e      	beq.n	800531c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a1e      	ldr	r2, [pc, #120]	@ (800537c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d009      	beq.n	800531c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a1c      	ldr	r2, [pc, #112]	@ (8005380 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d004      	beq.n	800531c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a1b      	ldr	r2, [pc, #108]	@ (8005384 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d101      	bne.n	8005320 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800531c:	2301      	movs	r3, #1
 800531e:	e000      	b.n	8005322 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005320:	2300      	movs	r3, #0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00a      	beq.n	800533c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	4b17      	ldr	r3, [pc, #92]	@ (8005388 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800532a:	4413      	add	r3, r2
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	461a      	mov	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a15      	ldr	r2, [pc, #84]	@ (800538c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005338:	671a      	str	r2, [r3, #112]	@ 0x70
 800533a:	e009      	b.n	8005350 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	4b14      	ldr	r3, [pc, #80]	@ (8005390 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005340:	4413      	add	r3, r2
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	461a      	mov	r2, r3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a11      	ldr	r2, [pc, #68]	@ (8005394 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800534e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	3b01      	subs	r3, #1
 8005354:	2201      	movs	r2, #1
 8005356:	409a      	lsls	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800535c:	bf00      	nop
 800535e:	3714      	adds	r7, #20
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr
 8005368:	58025408 	.word	0x58025408
 800536c:	5802541c 	.word	0x5802541c
 8005370:	58025430 	.word	0x58025430
 8005374:	58025444 	.word	0x58025444
 8005378:	58025458 	.word	0x58025458
 800537c:	5802546c 	.word	0x5802546c
 8005380:	58025480 	.word	0x58025480
 8005384:	58025494 	.word	0x58025494
 8005388:	1600963f 	.word	0x1600963f
 800538c:	58025940 	.word	0x58025940
 8005390:	1000823f 	.word	0x1000823f
 8005394:	40020940 	.word	0x40020940

08005398 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005398:	b480      	push	{r7}
 800539a:	b089      	sub	sp, #36	@ 0x24
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80053a2:	2300      	movs	r3, #0
 80053a4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80053a6:	4b89      	ldr	r3, [pc, #548]	@ (80055cc <HAL_GPIO_Init+0x234>)
 80053a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80053aa:	e194      	b.n	80056d6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	2101      	movs	r1, #1
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	fa01 f303 	lsl.w	r3, r1, r3
 80053b8:	4013      	ands	r3, r2
 80053ba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	f000 8186 	beq.w	80056d0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	f003 0303 	and.w	r3, r3, #3
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d005      	beq.n	80053dc <HAL_GPIO_Init+0x44>
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f003 0303 	and.w	r3, r3, #3
 80053d8:	2b02      	cmp	r3, #2
 80053da:	d130      	bne.n	800543e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	005b      	lsls	r3, r3, #1
 80053e6:	2203      	movs	r2, #3
 80053e8:	fa02 f303 	lsl.w	r3, r2, r3
 80053ec:	43db      	mvns	r3, r3
 80053ee:	69ba      	ldr	r2, [r7, #24]
 80053f0:	4013      	ands	r3, r2
 80053f2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	68da      	ldr	r2, [r3, #12]
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	005b      	lsls	r3, r3, #1
 80053fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005400:	69ba      	ldr	r2, [r7, #24]
 8005402:	4313      	orrs	r3, r2
 8005404:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	69ba      	ldr	r2, [r7, #24]
 800540a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005412:	2201      	movs	r2, #1
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	fa02 f303 	lsl.w	r3, r2, r3
 800541a:	43db      	mvns	r3, r3
 800541c:	69ba      	ldr	r2, [r7, #24]
 800541e:	4013      	ands	r3, r2
 8005420:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	091b      	lsrs	r3, r3, #4
 8005428:	f003 0201 	and.w	r2, r3, #1
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	fa02 f303 	lsl.w	r3, r2, r3
 8005432:	69ba      	ldr	r2, [r7, #24]
 8005434:	4313      	orrs	r3, r2
 8005436:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	69ba      	ldr	r2, [r7, #24]
 800543c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f003 0303 	and.w	r3, r3, #3
 8005446:	2b03      	cmp	r3, #3
 8005448:	d017      	beq.n	800547a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	005b      	lsls	r3, r3, #1
 8005454:	2203      	movs	r2, #3
 8005456:	fa02 f303 	lsl.w	r3, r2, r3
 800545a:	43db      	mvns	r3, r3
 800545c:	69ba      	ldr	r2, [r7, #24]
 800545e:	4013      	ands	r3, r2
 8005460:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	689a      	ldr	r2, [r3, #8]
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	005b      	lsls	r3, r3, #1
 800546a:	fa02 f303 	lsl.w	r3, r2, r3
 800546e:	69ba      	ldr	r2, [r7, #24]
 8005470:	4313      	orrs	r3, r2
 8005472:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	69ba      	ldr	r2, [r7, #24]
 8005478:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	f003 0303 	and.w	r3, r3, #3
 8005482:	2b02      	cmp	r3, #2
 8005484:	d123      	bne.n	80054ce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	08da      	lsrs	r2, r3, #3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	3208      	adds	r2, #8
 800548e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005492:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	f003 0307 	and.w	r3, r3, #7
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	220f      	movs	r2, #15
 800549e:	fa02 f303 	lsl.w	r3, r2, r3
 80054a2:	43db      	mvns	r3, r3
 80054a4:	69ba      	ldr	r2, [r7, #24]
 80054a6:	4013      	ands	r3, r2
 80054a8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	691a      	ldr	r2, [r3, #16]
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	f003 0307 	and.w	r3, r3, #7
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	fa02 f303 	lsl.w	r3, r2, r3
 80054ba:	69ba      	ldr	r2, [r7, #24]
 80054bc:	4313      	orrs	r3, r2
 80054be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	08da      	lsrs	r2, r3, #3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	3208      	adds	r2, #8
 80054c8:	69b9      	ldr	r1, [r7, #24]
 80054ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	005b      	lsls	r3, r3, #1
 80054d8:	2203      	movs	r2, #3
 80054da:	fa02 f303 	lsl.w	r3, r2, r3
 80054de:	43db      	mvns	r3, r3
 80054e0:	69ba      	ldr	r2, [r7, #24]
 80054e2:	4013      	ands	r3, r2
 80054e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	f003 0203 	and.w	r2, r3, #3
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	005b      	lsls	r3, r3, #1
 80054f2:	fa02 f303 	lsl.w	r3, r2, r3
 80054f6:	69ba      	ldr	r2, [r7, #24]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	69ba      	ldr	r2, [r7, #24]
 8005500:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800550a:	2b00      	cmp	r3, #0
 800550c:	f000 80e0 	beq.w	80056d0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005510:	4b2f      	ldr	r3, [pc, #188]	@ (80055d0 <HAL_GPIO_Init+0x238>)
 8005512:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8005516:	4a2e      	ldr	r2, [pc, #184]	@ (80055d0 <HAL_GPIO_Init+0x238>)
 8005518:	f043 0302 	orr.w	r3, r3, #2
 800551c:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8005520:	4b2b      	ldr	r3, [pc, #172]	@ (80055d0 <HAL_GPIO_Init+0x238>)
 8005522:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8005526:	f003 0302 	and.w	r3, r3, #2
 800552a:	60fb      	str	r3, [r7, #12]
 800552c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800552e:	4a29      	ldr	r2, [pc, #164]	@ (80055d4 <HAL_GPIO_Init+0x23c>)
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	089b      	lsrs	r3, r3, #2
 8005534:	3302      	adds	r3, #2
 8005536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800553a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	f003 0303 	and.w	r3, r3, #3
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	220f      	movs	r2, #15
 8005546:	fa02 f303 	lsl.w	r3, r2, r3
 800554a:	43db      	mvns	r3, r3
 800554c:	69ba      	ldr	r2, [r7, #24]
 800554e:	4013      	ands	r3, r2
 8005550:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a20      	ldr	r2, [pc, #128]	@ (80055d8 <HAL_GPIO_Init+0x240>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d052      	beq.n	8005600 <HAL_GPIO_Init+0x268>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a1f      	ldr	r2, [pc, #124]	@ (80055dc <HAL_GPIO_Init+0x244>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d031      	beq.n	80055c6 <HAL_GPIO_Init+0x22e>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a1e      	ldr	r2, [pc, #120]	@ (80055e0 <HAL_GPIO_Init+0x248>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d02b      	beq.n	80055c2 <HAL_GPIO_Init+0x22a>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a1d      	ldr	r2, [pc, #116]	@ (80055e4 <HAL_GPIO_Init+0x24c>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d025      	beq.n	80055be <HAL_GPIO_Init+0x226>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a1c      	ldr	r2, [pc, #112]	@ (80055e8 <HAL_GPIO_Init+0x250>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d01f      	beq.n	80055ba <HAL_GPIO_Init+0x222>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a1b      	ldr	r2, [pc, #108]	@ (80055ec <HAL_GPIO_Init+0x254>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d019      	beq.n	80055b6 <HAL_GPIO_Init+0x21e>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a1a      	ldr	r2, [pc, #104]	@ (80055f0 <HAL_GPIO_Init+0x258>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d013      	beq.n	80055b2 <HAL_GPIO_Init+0x21a>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a19      	ldr	r2, [pc, #100]	@ (80055f4 <HAL_GPIO_Init+0x25c>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d00d      	beq.n	80055ae <HAL_GPIO_Init+0x216>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a18      	ldr	r2, [pc, #96]	@ (80055f8 <HAL_GPIO_Init+0x260>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d007      	beq.n	80055aa <HAL_GPIO_Init+0x212>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a17      	ldr	r2, [pc, #92]	@ (80055fc <HAL_GPIO_Init+0x264>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d101      	bne.n	80055a6 <HAL_GPIO_Init+0x20e>
 80055a2:	2309      	movs	r3, #9
 80055a4:	e02d      	b.n	8005602 <HAL_GPIO_Init+0x26a>
 80055a6:	230a      	movs	r3, #10
 80055a8:	e02b      	b.n	8005602 <HAL_GPIO_Init+0x26a>
 80055aa:	2308      	movs	r3, #8
 80055ac:	e029      	b.n	8005602 <HAL_GPIO_Init+0x26a>
 80055ae:	2307      	movs	r3, #7
 80055b0:	e027      	b.n	8005602 <HAL_GPIO_Init+0x26a>
 80055b2:	2306      	movs	r3, #6
 80055b4:	e025      	b.n	8005602 <HAL_GPIO_Init+0x26a>
 80055b6:	2305      	movs	r3, #5
 80055b8:	e023      	b.n	8005602 <HAL_GPIO_Init+0x26a>
 80055ba:	2304      	movs	r3, #4
 80055bc:	e021      	b.n	8005602 <HAL_GPIO_Init+0x26a>
 80055be:	2303      	movs	r3, #3
 80055c0:	e01f      	b.n	8005602 <HAL_GPIO_Init+0x26a>
 80055c2:	2302      	movs	r3, #2
 80055c4:	e01d      	b.n	8005602 <HAL_GPIO_Init+0x26a>
 80055c6:	2301      	movs	r3, #1
 80055c8:	e01b      	b.n	8005602 <HAL_GPIO_Init+0x26a>
 80055ca:	bf00      	nop
 80055cc:	58000080 	.word	0x58000080
 80055d0:	58024400 	.word	0x58024400
 80055d4:	58000400 	.word	0x58000400
 80055d8:	58020000 	.word	0x58020000
 80055dc:	58020400 	.word	0x58020400
 80055e0:	58020800 	.word	0x58020800
 80055e4:	58020c00 	.word	0x58020c00
 80055e8:	58021000 	.word	0x58021000
 80055ec:	58021400 	.word	0x58021400
 80055f0:	58021800 	.word	0x58021800
 80055f4:	58021c00 	.word	0x58021c00
 80055f8:	58022000 	.word	0x58022000
 80055fc:	58022400 	.word	0x58022400
 8005600:	2300      	movs	r3, #0
 8005602:	69fa      	ldr	r2, [r7, #28]
 8005604:	f002 0203 	and.w	r2, r2, #3
 8005608:	0092      	lsls	r2, r2, #2
 800560a:	4093      	lsls	r3, r2
 800560c:	69ba      	ldr	r2, [r7, #24]
 800560e:	4313      	orrs	r3, r2
 8005610:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005612:	4938      	ldr	r1, [pc, #224]	@ (80056f4 <HAL_GPIO_Init+0x35c>)
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	089b      	lsrs	r3, r3, #2
 8005618:	3302      	adds	r3, #2
 800561a:	69ba      	ldr	r2, [r7, #24]
 800561c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005620:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	43db      	mvns	r3, r3
 800562c:	69ba      	ldr	r2, [r7, #24]
 800562e:	4013      	ands	r3, r2
 8005630:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d003      	beq.n	8005646 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800563e:	69ba      	ldr	r2, [r7, #24]
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	4313      	orrs	r3, r2
 8005644:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005646:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800564e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	43db      	mvns	r3, r3
 800565a:	69ba      	ldr	r2, [r7, #24]
 800565c:	4013      	ands	r3, r2
 800565e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005668:	2b00      	cmp	r3, #0
 800566a:	d003      	beq.n	8005674 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800566c:	69ba      	ldr	r2, [r7, #24]
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	4313      	orrs	r3, r2
 8005672:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005674:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	43db      	mvns	r3, r3
 8005686:	69ba      	ldr	r2, [r7, #24]
 8005688:	4013      	ands	r3, r2
 800568a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d003      	beq.n	80056a0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005698:	69ba      	ldr	r2, [r7, #24]
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	4313      	orrs	r3, r2
 800569e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	69ba      	ldr	r2, [r7, #24]
 80056a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	43db      	mvns	r3, r3
 80056b0:	69ba      	ldr	r2, [r7, #24]
 80056b2:	4013      	ands	r3, r2
 80056b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d003      	beq.n	80056ca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80056c2:	69ba      	ldr	r2, [r7, #24]
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	3301      	adds	r3, #1
 80056d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	fa22 f303 	lsr.w	r3, r2, r3
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	f47f ae63 	bne.w	80053ac <HAL_GPIO_Init+0x14>
  }
}
 80056e6:	bf00      	nop
 80056e8:	bf00      	nop
 80056ea:	3724      	adds	r7, #36	@ 0x24
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr
 80056f4:	58000400 	.word	0x58000400

080056f8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b087      	sub	sp, #28
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005702:	2300      	movs	r3, #0
 8005704:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005706:	4b75      	ldr	r3, [pc, #468]	@ (80058dc <HAL_GPIO_DeInit+0x1e4>)
 8005708:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800570a:	e0d9      	b.n	80058c0 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 800570c:	2201      	movs	r2, #1
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	fa02 f303 	lsl.w	r3, r2, r3
 8005714:	683a      	ldr	r2, [r7, #0]
 8005716:	4013      	ands	r3, r2
 8005718:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2b00      	cmp	r3, #0
 800571e:	f000 80cc 	beq.w	80058ba <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005722:	4a6f      	ldr	r2, [pc, #444]	@ (80058e0 <HAL_GPIO_DeInit+0x1e8>)
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	089b      	lsrs	r3, r3, #2
 8005728:	3302      	adds	r3, #2
 800572a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800572e:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	f003 0303 	and.w	r3, r3, #3
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	220f      	movs	r2, #15
 800573a:	fa02 f303 	lsl.w	r3, r2, r3
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	4013      	ands	r3, r2
 8005742:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a67      	ldr	r2, [pc, #412]	@ (80058e4 <HAL_GPIO_DeInit+0x1ec>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d037      	beq.n	80057bc <HAL_GPIO_DeInit+0xc4>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a66      	ldr	r2, [pc, #408]	@ (80058e8 <HAL_GPIO_DeInit+0x1f0>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d031      	beq.n	80057b8 <HAL_GPIO_DeInit+0xc0>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a65      	ldr	r2, [pc, #404]	@ (80058ec <HAL_GPIO_DeInit+0x1f4>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d02b      	beq.n	80057b4 <HAL_GPIO_DeInit+0xbc>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a64      	ldr	r2, [pc, #400]	@ (80058f0 <HAL_GPIO_DeInit+0x1f8>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d025      	beq.n	80057b0 <HAL_GPIO_DeInit+0xb8>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a63      	ldr	r2, [pc, #396]	@ (80058f4 <HAL_GPIO_DeInit+0x1fc>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d01f      	beq.n	80057ac <HAL_GPIO_DeInit+0xb4>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a62      	ldr	r2, [pc, #392]	@ (80058f8 <HAL_GPIO_DeInit+0x200>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d019      	beq.n	80057a8 <HAL_GPIO_DeInit+0xb0>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a61      	ldr	r2, [pc, #388]	@ (80058fc <HAL_GPIO_DeInit+0x204>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d013      	beq.n	80057a4 <HAL_GPIO_DeInit+0xac>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a60      	ldr	r2, [pc, #384]	@ (8005900 <HAL_GPIO_DeInit+0x208>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d00d      	beq.n	80057a0 <HAL_GPIO_DeInit+0xa8>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a5f      	ldr	r2, [pc, #380]	@ (8005904 <HAL_GPIO_DeInit+0x20c>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d007      	beq.n	800579c <HAL_GPIO_DeInit+0xa4>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a5e      	ldr	r2, [pc, #376]	@ (8005908 <HAL_GPIO_DeInit+0x210>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d101      	bne.n	8005798 <HAL_GPIO_DeInit+0xa0>
 8005794:	2309      	movs	r3, #9
 8005796:	e012      	b.n	80057be <HAL_GPIO_DeInit+0xc6>
 8005798:	230a      	movs	r3, #10
 800579a:	e010      	b.n	80057be <HAL_GPIO_DeInit+0xc6>
 800579c:	2308      	movs	r3, #8
 800579e:	e00e      	b.n	80057be <HAL_GPIO_DeInit+0xc6>
 80057a0:	2307      	movs	r3, #7
 80057a2:	e00c      	b.n	80057be <HAL_GPIO_DeInit+0xc6>
 80057a4:	2306      	movs	r3, #6
 80057a6:	e00a      	b.n	80057be <HAL_GPIO_DeInit+0xc6>
 80057a8:	2305      	movs	r3, #5
 80057aa:	e008      	b.n	80057be <HAL_GPIO_DeInit+0xc6>
 80057ac:	2304      	movs	r3, #4
 80057ae:	e006      	b.n	80057be <HAL_GPIO_DeInit+0xc6>
 80057b0:	2303      	movs	r3, #3
 80057b2:	e004      	b.n	80057be <HAL_GPIO_DeInit+0xc6>
 80057b4:	2302      	movs	r3, #2
 80057b6:	e002      	b.n	80057be <HAL_GPIO_DeInit+0xc6>
 80057b8:	2301      	movs	r3, #1
 80057ba:	e000      	b.n	80057be <HAL_GPIO_DeInit+0xc6>
 80057bc:	2300      	movs	r3, #0
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	f002 0203 	and.w	r2, r2, #3
 80057c4:	0092      	lsls	r2, r2, #2
 80057c6:	4093      	lsls	r3, r2
 80057c8:	68ba      	ldr	r2, [r7, #8]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d136      	bne.n	800583c <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	43db      	mvns	r3, r3
 80057d6:	401a      	ands	r2, r3
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	685a      	ldr	r2, [r3, #4]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	43db      	mvns	r3, r3
 80057e4:	401a      	ands	r2, r3
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80057ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057ee:	685a      	ldr	r2, [r3, #4]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	43db      	mvns	r3, r3
 80057f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80057f8:	4013      	ands	r3, r2
 80057fa:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80057fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	43db      	mvns	r3, r3
 8005806:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800580a:	4013      	ands	r3, r2
 800580c:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	f003 0303 	and.w	r3, r3, #3
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	220f      	movs	r2, #15
 8005818:	fa02 f303 	lsl.w	r3, r2, r3
 800581c:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800581e:	4a30      	ldr	r2, [pc, #192]	@ (80058e0 <HAL_GPIO_DeInit+0x1e8>)
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	089b      	lsrs	r3, r3, #2
 8005824:	3302      	adds	r3, #2
 8005826:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	43da      	mvns	r2, r3
 800582e:	482c      	ldr	r0, [pc, #176]	@ (80058e0 <HAL_GPIO_DeInit+0x1e8>)
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	089b      	lsrs	r3, r3, #2
 8005834:	400a      	ands	r2, r1
 8005836:	3302      	adds	r3, #2
 8005838:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	005b      	lsls	r3, r3, #1
 8005844:	2103      	movs	r1, #3
 8005846:	fa01 f303 	lsl.w	r3, r1, r3
 800584a:	431a      	orrs	r2, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	08da      	lsrs	r2, r3, #3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	3208      	adds	r2, #8
 8005858:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	f003 0307 	and.w	r3, r3, #7
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	220f      	movs	r2, #15
 8005866:	fa02 f303 	lsl.w	r3, r2, r3
 800586a:	43db      	mvns	r3, r3
 800586c:	697a      	ldr	r2, [r7, #20]
 800586e:	08d2      	lsrs	r2, r2, #3
 8005870:	4019      	ands	r1, r3
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	3208      	adds	r2, #8
 8005876:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	68da      	ldr	r2, [r3, #12]
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	005b      	lsls	r3, r3, #1
 8005882:	2103      	movs	r1, #3
 8005884:	fa01 f303 	lsl.w	r3, r1, r3
 8005888:	43db      	mvns	r3, r3
 800588a:	401a      	ands	r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685a      	ldr	r2, [r3, #4]
 8005894:	2101      	movs	r1, #1
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	fa01 f303 	lsl.w	r3, r1, r3
 800589c:	43db      	mvns	r3, r3
 800589e:	401a      	ands	r2, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	689a      	ldr	r2, [r3, #8]
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	005b      	lsls	r3, r3, #1
 80058ac:	2103      	movs	r1, #3
 80058ae:	fa01 f303 	lsl.w	r3, r1, r3
 80058b2:	43db      	mvns	r3, r3
 80058b4:	401a      	ands	r2, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	609a      	str	r2, [r3, #8]
    }

    position++;
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	3301      	adds	r3, #1
 80058be:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 80058c0:	683a      	ldr	r2, [r7, #0]
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	fa22 f303 	lsr.w	r3, r2, r3
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f47f af1f 	bne.w	800570c <HAL_GPIO_DeInit+0x14>
  }
}
 80058ce:	bf00      	nop
 80058d0:	bf00      	nop
 80058d2:	371c      	adds	r7, #28
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr
 80058dc:	58000080 	.word	0x58000080
 80058e0:	58000400 	.word	0x58000400
 80058e4:	58020000 	.word	0x58020000
 80058e8:	58020400 	.word	0x58020400
 80058ec:	58020800 	.word	0x58020800
 80058f0:	58020c00 	.word	0x58020c00
 80058f4:	58021000 	.word	0x58021000
 80058f8:	58021400 	.word	0x58021400
 80058fc:	58021800 	.word	0x58021800
 8005900:	58021c00 	.word	0x58021c00
 8005904:	58022000 	.word	0x58022000
 8005908:	58022400 	.word	0x58022400

0800590c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
 8005912:	4603      	mov	r3, r0
 8005914:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005916:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800591a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800591e:	88fb      	ldrh	r3, [r7, #6]
 8005920:	4013      	ands	r3, r2
 8005922:	2b00      	cmp	r3, #0
 8005924:	d008      	beq.n	8005938 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005926:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800592a:	88fb      	ldrh	r3, [r7, #6]
 800592c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005930:	88fb      	ldrh	r3, [r7, #6]
 8005932:	4618      	mov	r0, r3
 8005934:	f7fb ffb6 	bl	80018a4 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005938:	bf00      	nop
 800593a:	3708      	adds	r7, #8
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d101      	bne.n	8005952 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e08b      	b.n	8005a6a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d106      	bne.n	800596c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f7fc f888 	bl	8001a7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2224      	movs	r2, #36	@ 0x24
 8005970:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f022 0201 	bic.w	r2, r2, #1
 8005982:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685a      	ldr	r2, [r3, #4]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005990:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	689a      	ldr	r2, [r3, #8]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80059a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d107      	bne.n	80059ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	689a      	ldr	r2, [r3, #8]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80059b6:	609a      	str	r2, [r3, #8]
 80059b8:	e006      	b.n	80059c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	689a      	ldr	r2, [r3, #8]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80059c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d108      	bne.n	80059e2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	685a      	ldr	r2, [r3, #4]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059de:	605a      	str	r2, [r3, #4]
 80059e0:	e007      	b.n	80059f2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	685a      	ldr	r2, [r3, #4]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80059f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	6859      	ldr	r1, [r3, #4]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	4b1d      	ldr	r3, [pc, #116]	@ (8005a74 <HAL_I2C_Init+0x134>)
 80059fe:	430b      	orrs	r3, r1
 8005a00:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68da      	ldr	r2, [r3, #12]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005a10:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	691a      	ldr	r2, [r3, #16]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	695b      	ldr	r3, [r3, #20]
 8005a1a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	430a      	orrs	r2, r1
 8005a2a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	69d9      	ldr	r1, [r3, #28]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6a1a      	ldr	r2, [r3, #32]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	430a      	orrs	r2, r1
 8005a3a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f042 0201 	orr.w	r2, r2, #1
 8005a4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2220      	movs	r2, #32
 8005a56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3708      	adds	r7, #8
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	02008000 	.word	0x02008000

08005a78 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d101      	bne.n	8005a8a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e021      	b.n	8005ace <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2224      	movs	r2, #36	@ 0x24
 8005a8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f022 0201 	bic.w	r2, r2, #1
 8005aa0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f7fc f8c6 	bl	8001c34 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3708      	adds	r7, #8
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
	...

08005ad8 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b088      	sub	sp, #32
 8005adc:	af02      	add	r7, sp, #8
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	607a      	str	r2, [r7, #4]
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	817b      	strh	r3, [r7, #10]
 8005ae8:	4613      	mov	r3, r2
 8005aea:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	2b20      	cmp	r3, #32
 8005af6:	f040 80cd 	bne.w	8005c94 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b08:	d101      	bne.n	8005b0e <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 8005b0a:	2302      	movs	r3, #2
 8005b0c:	e0c3      	b.n	8005c96 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d101      	bne.n	8005b1c <HAL_I2C_Master_Receive_DMA+0x44>
 8005b18:	2302      	movs	r3, #2
 8005b1a:	e0bc      	b.n	8005c96 <HAL_I2C_Master_Receive_DMA+0x1be>
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2222      	movs	r2, #34	@ 0x22
 8005b28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2210      	movs	r2, #16
 8005b30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2200      	movs	r2, #0
 8005b38:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	893a      	ldrh	r2, [r7, #8]
 8005b44:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	4a55      	ldr	r2, [pc, #340]	@ (8005ca0 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 8005b4a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	4a55      	ldr	r2, [pc, #340]	@ (8005ca4 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 8005b50:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	2bff      	cmp	r3, #255	@ 0xff
 8005b5a:	d906      	bls.n	8005b6a <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	22ff      	movs	r2, #255	@ 0xff
 8005b60:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005b62:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005b66:	617b      	str	r3, [r7, #20]
 8005b68:	e007      	b.n	8005b7a <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b6e:	b29a      	uxth	r2, r3
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005b74:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005b78:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d070      	beq.n	8005c64 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d020      	beq.n	8005bcc <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b8e:	4a46      	ldr	r2, [pc, #280]	@ (8005ca8 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 8005b90:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b96:	4a45      	ldr	r2, [pc, #276]	@ (8005cac <HAL_I2C_Master_Receive_DMA+0x1d4>)
 8005b98:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	3324      	adds	r3, #36	@ 0x24
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005bbc:	f7fd fba0 	bl	8003300 <HAL_DMA_Start_IT>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005bc4:	7cfb      	ldrb	r3, [r7, #19]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d138      	bne.n	8005c3c <HAL_I2C_Master_Receive_DMA+0x164>
 8005bca:	e013      	b.n	8005bf4 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2220      	movs	r2, #32
 8005bd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005be0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e050      	b.n	8005c96 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bf8:	b2da      	uxtb	r2, r3
 8005bfa:	8979      	ldrh	r1, [r7, #10]
 8005bfc:	4b2c      	ldr	r3, [pc, #176]	@ (8005cb0 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8005bfe:	9300      	str	r3, [sp, #0]
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	68f8      	ldr	r0, [r7, #12]
 8005c04:	f002 f8e0 	bl	8007dc8 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c0c:	b29a      	uxth	r2, r3
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	b29a      	uxth	r2, r3
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005c22:	2110      	movs	r1, #16
 8005c24:	68f8      	ldr	r0, [r7, #12]
 8005c26:	f002 f901 	bl	8007e2c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c38:	601a      	str	r2, [r3, #0]
 8005c3a:	e029      	b.n	8005c90 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2220      	movs	r2, #32
 8005c40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c50:	f043 0210 	orr.w	r2, r3, #16
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e018      	b.n	8005c96 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	4a13      	ldr	r2, [pc, #76]	@ (8005cb4 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 8005c68:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c6e:	b2da      	uxtb	r2, r3
 8005c70:	8979      	ldrh	r1, [r7, #10]
 8005c72:	4b0f      	ldr	r3, [pc, #60]	@ (8005cb0 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8005c74:	9300      	str	r3, [sp, #0]
 8005c76:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005c7a:	68f8      	ldr	r0, [r7, #12]
 8005c7c:	f002 f8a4 	bl	8007dc8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005c88:	2102      	movs	r1, #2
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	f002 f8ce 	bl	8007e2c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005c90:	2300      	movs	r3, #0
 8005c92:	e000      	b.n	8005c96 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8005c94:	2302      	movs	r3, #2
  }
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3718      	adds	r7, #24
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	ffff0000 	.word	0xffff0000
 8005ca4:	080064a7 	.word	0x080064a7
 8005ca8:	0800780f 	.word	0x0800780f
 8005cac:	080078a5 	.word	0x080078a5
 8005cb0:	80002400 	.word	0x80002400
 8005cb4:	08006067 	.word	0x08006067

08005cb8 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b08a      	sub	sp, #40	@ 0x28
 8005cbc:	af02      	add	r7, sp, #8
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	607a      	str	r2, [r7, #4]
 8005cc2:	603b      	str	r3, [r7, #0]
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	2b20      	cmp	r3, #32
 8005cd6:	f040 80d2 	bne.w	8005e7e <HAL_I2C_IsDeviceReady+0x1c6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	699b      	ldr	r3, [r3, #24]
 8005ce0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ce4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ce8:	d101      	bne.n	8005cee <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8005cea:	2302      	movs	r3, #2
 8005cec:	e0c8      	b.n	8005e80 <HAL_I2C_IsDeviceReady+0x1c8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d101      	bne.n	8005cfc <HAL_I2C_IsDeviceReady+0x44>
 8005cf8:	2302      	movs	r3, #2
 8005cfa:	e0c1      	b.n	8005e80 <HAL_I2C_IsDeviceReady+0x1c8>
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2224      	movs	r2, #36	@ 0x24
 8005d08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d105      	bne.n	8005d26 <HAL_I2C_IsDeviceReady+0x6e>
 8005d1a:	897b      	ldrh	r3, [r7, #10]
 8005d1c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005d20:	4b59      	ldr	r3, [pc, #356]	@ (8005e88 <HAL_I2C_IsDeviceReady+0x1d0>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	e004      	b.n	8005d30 <HAL_I2C_IsDeviceReady+0x78>
 8005d26:	897b      	ldrh	r3, [r7, #10]
 8005d28:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005d2c:	4b57      	ldr	r3, [pc, #348]	@ (8005e8c <HAL_I2C_IsDeviceReady+0x1d4>)
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	6812      	ldr	r2, [r2, #0]
 8005d34:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8005d36:	f7fc fbab 	bl	8002490 <HAL_GetTick>
 8005d3a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	699b      	ldr	r3, [r3, #24]
 8005d42:	f003 0320 	and.w	r3, r3, #32
 8005d46:	2b20      	cmp	r3, #32
 8005d48:	bf0c      	ite	eq
 8005d4a:	2301      	moveq	r3, #1
 8005d4c:	2300      	movne	r3, #0
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	699b      	ldr	r3, [r3, #24]
 8005d58:	f003 0310 	and.w	r3, r3, #16
 8005d5c:	2b10      	cmp	r3, #16
 8005d5e:	bf0c      	ite	eq
 8005d60:	2301      	moveq	r3, #1
 8005d62:	2300      	movne	r3, #0
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005d68:	e034      	b.n	8005dd4 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d70:	d01a      	beq.n	8005da8 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005d72:	f7fc fb8d 	bl	8002490 <HAL_GetTick>
 8005d76:	4602      	mov	r2, r0
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	1ad3      	subs	r3, r2, r3
 8005d7c:	683a      	ldr	r2, [r7, #0]
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d302      	bcc.n	8005d88 <HAL_I2C_IsDeviceReady+0xd0>
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d10f      	bne.n	8005da8 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2220      	movs	r2, #32
 8005d8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d94:	f043 0220 	orr.w	r2, r3, #32
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	e06b      	b.n	8005e80 <HAL_I2C_IsDeviceReady+0x1c8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	699b      	ldr	r3, [r3, #24]
 8005dae:	f003 0320 	and.w	r3, r3, #32
 8005db2:	2b20      	cmp	r3, #32
 8005db4:	bf0c      	ite	eq
 8005db6:	2301      	moveq	r3, #1
 8005db8:	2300      	movne	r3, #0
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	699b      	ldr	r3, [r3, #24]
 8005dc4:	f003 0310 	and.w	r3, r3, #16
 8005dc8:	2b10      	cmp	r3, #16
 8005dca:	bf0c      	ite	eq
 8005dcc:	2301      	moveq	r3, #1
 8005dce:	2300      	movne	r3, #0
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005dd4:	7ffb      	ldrb	r3, [r7, #31]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d102      	bne.n	8005de0 <HAL_I2C_IsDeviceReady+0x128>
 8005dda:	7fbb      	ldrb	r3, [r7, #30]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d0c4      	beq.n	8005d6a <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	699b      	ldr	r3, [r3, #24]
 8005de6:	f003 0310 	and.w	r3, r3, #16
 8005dea:	2b10      	cmp	r3, #16
 8005dec:	d01a      	beq.n	8005e24 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	9300      	str	r3, [sp, #0]
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	2200      	movs	r2, #0
 8005df6:	2120      	movs	r1, #32
 8005df8:	68f8      	ldr	r0, [r7, #12]
 8005dfa:	f001 feab 	bl	8007b54 <I2C_WaitOnFlagUntilTimeout>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d001      	beq.n	8005e08 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e03b      	b.n	8005e80 <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2220      	movs	r2, #32
 8005e0e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2220      	movs	r2, #32
 8005e14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8005e20:	2300      	movs	r3, #0
 8005e22:	e02d      	b.n	8005e80 <HAL_I2C_IsDeviceReady+0x1c8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	9300      	str	r3, [sp, #0]
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	2120      	movs	r1, #32
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	f001 fe90 	bl	8007b54 <I2C_WaitOnFlagUntilTimeout>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d001      	beq.n	8005e3e <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e020      	b.n	8005e80 <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2210      	movs	r2, #16
 8005e44:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2220      	movs	r2, #32
 8005e4c:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	3301      	adds	r3, #1
 8005e52:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	f63f af5a 	bhi.w	8005d12 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2220      	movs	r2, #32
 8005e62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e6a:	f043 0220 	orr.w	r2, r3, #32
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e000      	b.n	8005e80 <HAL_I2C_IsDeviceReady+0x1c8>
  }
  else
  {
    return HAL_BUSY;
 8005e7e:	2302      	movs	r3, #2
  }
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3720      	adds	r7, #32
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	02002000 	.word	0x02002000
 8005e8c:	02002800 	.word	0x02002800

08005e90 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d005      	beq.n	8005ebc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005eb4:	68ba      	ldr	r2, [r7, #8]
 8005eb6:	68f9      	ldr	r1, [r7, #12]
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	4798      	blx	r3
  }
}
 8005ebc:	bf00      	nop
 8005ebe:	3710      	adds	r7, #16
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b086      	sub	sp, #24
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	699b      	ldr	r3, [r3, #24]
 8005ed2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d00f      	beq.n	8005f06 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d00a      	beq.n	8005f06 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ef4:	f043 0201 	orr.w	r2, r3, #1
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005f04:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00f      	beq.n	8005f30 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00a      	beq.n	8005f30 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f1e:	f043 0208 	orr.w	r2, r3, #8
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005f2e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00f      	beq.n	8005f5a <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d00a      	beq.n	8005f5a <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f48:	f043 0202 	orr.w	r2, r3, #2
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f58:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f5e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f003 030b 	and.w	r3, r3, #11
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d003      	beq.n	8005f72 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8005f6a:	68f9      	ldr	r1, [r7, #12]
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f001 fb13 	bl	8007598 <I2C_ITError>
  }
}
 8005f72:	bf00      	nop
 8005f74:	3718      	adds	r7, #24
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}

08005f7a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f7a:	b480      	push	{r7}
 8005f7c:	b083      	sub	sp, #12
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005f82:	bf00      	nop
 8005f84:	370c      	adds	r7, #12
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr

08005f8e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f8e:	b480      	push	{r7}
 8005f90:	b083      	sub	sp, #12
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005f96:	bf00      	nop
 8005f98:	370c      	adds	r7, #12
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr

08005fa2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005fa2:	b480      	push	{r7}
 8005fa4:	b083      	sub	sp, #12
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005faa:	bf00      	nop
 8005fac:	370c      	adds	r7, #12
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr

08005fb6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005fb6:	b480      	push	{r7}
 8005fb8:	b083      	sub	sp, #12
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005fbe:	bf00      	nop
 8005fc0:	370c      	adds	r7, #12
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr

08005fca <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005fca:	b480      	push	{r7}
 8005fcc:	b083      	sub	sp, #12
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	70fb      	strb	r3, [r7, #3]
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005fda:	bf00      	nop
 8005fdc:	370c      	adds	r7, #12
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr

08005fe6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005fe6:	b480      	push	{r7}
 8005fe8:	b083      	sub	sp, #12
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005fee:	bf00      	nop
 8005ff0:	370c      	adds	r7, #12
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr

08005ffa <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ffa:	b480      	push	{r7}
 8005ffc:	b083      	sub	sp, #12
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006002:	bf00      	nop
 8006004:	370c      	adds	r7, #12
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr

0800600e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800600e:	b480      	push	{r7}
 8006010:	b083      	sub	sp, #12
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006016:	bf00      	nop
 8006018:	370c      	adds	r7, #12
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr

08006022 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006022:	b480      	push	{r7}
 8006024:	b083      	sub	sp, #12
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800602a:	bf00      	nop
 800602c:	370c      	adds	r7, #12
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr

08006036 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006036:	b480      	push	{r7}
 8006038:	b083      	sub	sp, #12
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800603e:	bf00      	nop
 8006040:	370c      	adds	r7, #12
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr

0800604a <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800604a:	b480      	push	{r7}
 800604c:	b083      	sub	sp, #12
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006058:	b2db      	uxtb	r3, r3
}
 800605a:	4618      	mov	r0, r3
 800605c:	370c      	adds	r7, #12
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr

08006066 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8006066:	b580      	push	{r7, lr}
 8006068:	b088      	sub	sp, #32
 800606a:	af02      	add	r7, sp, #8
 800606c:	60f8      	str	r0, [r7, #12]
 800606e:	60b9      	str	r1, [r7, #8]
 8006070:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800607c:	2b01      	cmp	r3, #1
 800607e:	d101      	bne.n	8006084 <I2C_Master_ISR_IT+0x1e>
 8006080:	2302      	movs	r3, #2
 8006082:	e113      	b.n	80062ac <I2C_Master_ISR_IT+0x246>
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	f003 0310 	and.w	r3, r3, #16
 8006092:	2b00      	cmp	r3, #0
 8006094:	d012      	beq.n	80060bc <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800609c:	2b00      	cmp	r3, #0
 800609e:	d00d      	beq.n	80060bc <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2210      	movs	r2, #16
 80060a6:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060ac:	f043 0204 	orr.w	r2, r3, #4
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80060b4:	68f8      	ldr	r0, [r7, #12]
 80060b6:	f001 fb86 	bl	80077c6 <I2C_Flush_TXDR>
 80060ba:	e0e4      	b.n	8006286 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	f003 0304 	and.w	r3, r3, #4
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d022      	beq.n	800610c <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d01d      	beq.n	800610c <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	f023 0304 	bic.w	r3, r3, #4
 80060d6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e2:	b2d2      	uxtb	r2, r2
 80060e4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ea:	1c5a      	adds	r2, r3, #1
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060f4:	3b01      	subs	r3, #1
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006100:	b29b      	uxth	r3, r3
 8006102:	3b01      	subs	r3, #1
 8006104:	b29a      	uxth	r2, r3
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800610a:	e0bc      	b.n	8006286 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006112:	2b00      	cmp	r3, #0
 8006114:	d128      	bne.n	8006168 <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800611c:	2b00      	cmp	r3, #0
 800611e:	d023      	beq.n	8006168 <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006126:	2b00      	cmp	r3, #0
 8006128:	d01e      	beq.n	8006168 <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800612e:	b29b      	uxth	r3, r3
 8006130:	2b00      	cmp	r3, #0
 8006132:	f000 80a8 	beq.w	8006286 <I2C_Master_ISR_IT+0x220>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800613a:	781a      	ldrb	r2, [r3, #0]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006146:	1c5a      	adds	r2, r3, #1
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006150:	3b01      	subs	r3, #1
 8006152:	b29a      	uxth	r2, r3
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800615c:	b29b      	uxth	r3, r3
 800615e:	3b01      	subs	r3, #1
 8006160:	b29a      	uxth	r2, r3
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8006166:	e08e      	b.n	8006286 <I2C_Master_ISR_IT+0x220>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800616e:	2b00      	cmp	r3, #0
 8006170:	d05c      	beq.n	800622c <I2C_Master_ISR_IT+0x1c6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8006178:	2b00      	cmp	r3, #0
 800617a:	d057      	beq.n	800622c <I2C_Master_ISR_IT+0x1c6>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006180:	b29b      	uxth	r3, r3
 8006182:	2b00      	cmp	r3, #0
 8006184:	d040      	beq.n	8006208 <I2C_Master_ISR_IT+0x1a2>
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800618a:	2b00      	cmp	r3, #0
 800618c:	d13c      	bne.n	8006208 <I2C_Master_ISR_IT+0x1a2>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	b29b      	uxth	r3, r3
 8006196:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800619a:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	2bff      	cmp	r3, #255	@ 0xff
 80061a4:	d90e      	bls.n	80061c4 <I2C_Master_ISR_IT+0x15e>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	22ff      	movs	r2, #255	@ 0xff
 80061aa:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061b0:	b2da      	uxtb	r2, r3
 80061b2:	8a79      	ldrh	r1, [r7, #18]
 80061b4:	2300      	movs	r3, #0
 80061b6:	9300      	str	r3, [sp, #0]
 80061b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f001 fe03 	bl	8007dc8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80061c2:	e032      	b.n	800622a <I2C_Master_ISR_IT+0x1c4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061c8:	b29a      	uxth	r2, r3
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061d2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80061d6:	d00b      	beq.n	80061f0 <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061dc:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80061e2:	8a79      	ldrh	r1, [r7, #18]
 80061e4:	2000      	movs	r0, #0
 80061e6:	9000      	str	r0, [sp, #0]
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f001 fded 	bl	8007dc8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80061ee:	e01c      	b.n	800622a <I2C_Master_ISR_IT+0x1c4>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061f4:	b2da      	uxtb	r2, r3
 80061f6:	8a79      	ldrh	r1, [r7, #18]
 80061f8:	2300      	movs	r3, #0
 80061fa:	9300      	str	r3, [sp, #0]
 80061fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006200:	68f8      	ldr	r0, [r7, #12]
 8006202:	f001 fde1 	bl	8007dc8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006206:	e010      	b.n	800622a <I2C_Master_ISR_IT+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006212:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006216:	d003      	beq.n	8006220 <I2C_Master_ISR_IT+0x1ba>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006218:	68f8      	ldr	r0, [r7, #12]
 800621a:	f000 fdb3 	bl	8006d84 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800621e:	e032      	b.n	8006286 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006220:	2140      	movs	r1, #64	@ 0x40
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	f001 f9b8 	bl	8007598 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006228:	e02d      	b.n	8006286 <I2C_Master_ISR_IT+0x220>
 800622a:	e02c      	b.n	8006286 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006232:	2b00      	cmp	r3, #0
 8006234:	d027      	beq.n	8006286 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800623c:	2b00      	cmp	r3, #0
 800623e:	d022      	beq.n	8006286 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006244:	b29b      	uxth	r3, r3
 8006246:	2b00      	cmp	r3, #0
 8006248:	d119      	bne.n	800627e <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006254:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006258:	d015      	beq.n	8006286 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800625e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006262:	d108      	bne.n	8006276 <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	685a      	ldr	r2, [r3, #4]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006272:	605a      	str	r2, [r3, #4]
 8006274:	e007      	b.n	8006286 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006276:	68f8      	ldr	r0, [r7, #12]
 8006278:	f000 fd84 	bl	8006d84 <I2C_ITMasterSeqCplt>
 800627c:	e003      	b.n	8006286 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800627e:	2140      	movs	r1, #64	@ 0x40
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f001 f989 	bl	8007598 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	f003 0320 	and.w	r3, r3, #32
 800628c:	2b00      	cmp	r3, #0
 800628e:	d008      	beq.n	80062a2 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006296:	2b00      	cmp	r3, #0
 8006298:	d003      	beq.n	80062a2 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800629a:	6979      	ldr	r1, [r7, #20]
 800629c:	68f8      	ldr	r0, [r7, #12]
 800629e:	f000 fe0b 	bl	8006eb8 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80062aa:	2300      	movs	r3, #0
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3718      	adds	r7, #24
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b086      	sub	sp, #24
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	60b9      	str	r1, [r7, #8]
 80062be:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062c4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d101      	bne.n	80062d8 <I2C_Slave_ISR_IT+0x24>
 80062d4:	2302      	movs	r3, #2
 80062d6:	e0e2      	b.n	800649e <I2C_Slave_ISR_IT+0x1ea>
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	f003 0320 	and.w	r3, r3, #32
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d009      	beq.n	80062fe <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d004      	beq.n	80062fe <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80062f4:	6939      	ldr	r1, [r7, #16]
 80062f6:	68f8      	ldr	r0, [r7, #12]
 80062f8:	f000 fea6 	bl	8007048 <I2C_ITSlaveCplt>
 80062fc:	e0ca      	b.n	8006494 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	f003 0310 	and.w	r3, r3, #16
 8006304:	2b00      	cmp	r3, #0
 8006306:	d04b      	beq.n	80063a0 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800630e:	2b00      	cmp	r3, #0
 8006310:	d046      	beq.n	80063a0 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006316:	b29b      	uxth	r3, r3
 8006318:	2b00      	cmp	r3, #0
 800631a:	d128      	bne.n	800636e <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006322:	b2db      	uxtb	r3, r3
 8006324:	2b28      	cmp	r3, #40	@ 0x28
 8006326:	d108      	bne.n	800633a <I2C_Slave_ISR_IT+0x86>
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800632e:	d104      	bne.n	800633a <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006330:	6939      	ldr	r1, [r7, #16]
 8006332:	68f8      	ldr	r0, [r7, #12]
 8006334:	f001 f8dc 	bl	80074f0 <I2C_ITListenCplt>
 8006338:	e031      	b.n	800639e <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006340:	b2db      	uxtb	r3, r3
 8006342:	2b29      	cmp	r3, #41	@ 0x29
 8006344:	d10e      	bne.n	8006364 <I2C_Slave_ISR_IT+0xb0>
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800634c:	d00a      	beq.n	8006364 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2210      	movs	r2, #16
 8006354:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006356:	68f8      	ldr	r0, [r7, #12]
 8006358:	f001 fa35 	bl	80077c6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800635c:	68f8      	ldr	r0, [r7, #12]
 800635e:	f000 fd4e 	bl	8006dfe <I2C_ITSlaveSeqCplt>
 8006362:	e01c      	b.n	800639e <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2210      	movs	r2, #16
 800636a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800636c:	e08f      	b.n	800648e <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2210      	movs	r2, #16
 8006374:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800637a:	f043 0204 	orr.w	r2, r3, #4
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d003      	beq.n	8006390 <I2C_Slave_ISR_IT+0xdc>
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800638e:	d17e      	bne.n	800648e <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006394:	4619      	mov	r1, r3
 8006396:	68f8      	ldr	r0, [r7, #12]
 8006398:	f001 f8fe 	bl	8007598 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800639c:	e077      	b.n	800648e <I2C_Slave_ISR_IT+0x1da>
 800639e:	e076      	b.n	800648e <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	f003 0304 	and.w	r3, r3, #4
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d02f      	beq.n	800640a <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d02a      	beq.n	800640a <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d018      	beq.n	80063f0 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c8:	b2d2      	uxtb	r2, r2
 80063ca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063d0:	1c5a      	adds	r2, r3, #1
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063da:	3b01      	subs	r3, #1
 80063dc:	b29a      	uxth	r2, r3
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	3b01      	subs	r3, #1
 80063ea:	b29a      	uxth	r2, r3
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d14b      	bne.n	8006492 <I2C_Slave_ISR_IT+0x1de>
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006400:	d047      	beq.n	8006492 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	f000 fcfb 	bl	8006dfe <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006408:	e043      	b.n	8006492 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	f003 0308 	and.w	r3, r3, #8
 8006410:	2b00      	cmp	r3, #0
 8006412:	d009      	beq.n	8006428 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800641a:	2b00      	cmp	r3, #0
 800641c:	d004      	beq.n	8006428 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800641e:	6939      	ldr	r1, [r7, #16]
 8006420:	68f8      	ldr	r0, [r7, #12]
 8006422:	f000 fc2b 	bl	8006c7c <I2C_ITAddrCplt>
 8006426:	e035      	b.n	8006494 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	f003 0302 	and.w	r3, r3, #2
 800642e:	2b00      	cmp	r3, #0
 8006430:	d030      	beq.n	8006494 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006438:	2b00      	cmp	r3, #0
 800643a:	d02b      	beq.n	8006494 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006440:	b29b      	uxth	r3, r3
 8006442:	2b00      	cmp	r3, #0
 8006444:	d018      	beq.n	8006478 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800644a:	781a      	ldrb	r2, [r3, #0]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006456:	1c5a      	adds	r2, r3, #1
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006460:	b29b      	uxth	r3, r3
 8006462:	3b01      	subs	r3, #1
 8006464:	b29a      	uxth	r2, r3
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800646e:	3b01      	subs	r3, #1
 8006470:	b29a      	uxth	r2, r3
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006476:	e00d      	b.n	8006494 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800647e:	d002      	beq.n	8006486 <I2C_Slave_ISR_IT+0x1d2>
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d106      	bne.n	8006494 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006486:	68f8      	ldr	r0, [r7, #12]
 8006488:	f000 fcb9 	bl	8006dfe <I2C_ITSlaveSeqCplt>
 800648c:	e002      	b.n	8006494 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800648e:	bf00      	nop
 8006490:	e000      	b.n	8006494 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8006492:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2200      	movs	r2, #0
 8006498:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3718      	adds	r7, #24
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}

080064a6 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80064a6:	b580      	push	{r7, lr}
 80064a8:	b088      	sub	sp, #32
 80064aa:	af02      	add	r7, sp, #8
 80064ac:	60f8      	str	r0, [r7, #12]
 80064ae:	60b9      	str	r1, [r7, #8]
 80064b0:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d101      	bne.n	80064c0 <I2C_Master_ISR_DMA+0x1a>
 80064bc:	2302      	movs	r3, #2
 80064be:	e0d9      	b.n	8006674 <I2C_Master_ISR_DMA+0x1ce>
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	f003 0310 	and.w	r3, r3, #16
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d016      	beq.n	8006500 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d011      	beq.n	8006500 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	2210      	movs	r2, #16
 80064e2:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064e8:	f043 0204 	orr.w	r2, r3, #4
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80064f0:	2120      	movs	r1, #32
 80064f2:	68f8      	ldr	r0, [r7, #12]
 80064f4:	f001 fc9a 	bl	8007e2c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80064f8:	68f8      	ldr	r0, [r7, #12]
 80064fa:	f001 f964 	bl	80077c6 <I2C_Flush_TXDR>
 80064fe:	e0b4      	b.n	800666a <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006506:	2b00      	cmp	r3, #0
 8006508:	d071      	beq.n	80065ee <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006510:	2b00      	cmp	r3, #0
 8006512:	d06c      	beq.n	80065ee <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006522:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006528:	b29b      	uxth	r3, r3
 800652a:	2b00      	cmp	r3, #0
 800652c:	d04e      	beq.n	80065cc <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	b29b      	uxth	r3, r3
 8006536:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800653a:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006540:	b29b      	uxth	r3, r3
 8006542:	2bff      	cmp	r3, #255	@ 0xff
 8006544:	d906      	bls.n	8006554 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	22ff      	movs	r2, #255	@ 0xff
 800654a:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800654c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006550:	617b      	str	r3, [r7, #20]
 8006552:	e010      	b.n	8006576 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006558:	b29a      	uxth	r2, r3
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006562:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006566:	d003      	beq.n	8006570 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800656c:	617b      	str	r3, [r7, #20]
 800656e:	e002      	b.n	8006576 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8006570:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006574:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800657a:	b2da      	uxtb	r2, r3
 800657c:	8a79      	ldrh	r1, [r7, #18]
 800657e:	2300      	movs	r3, #0
 8006580:	9300      	str	r3, [sp, #0]
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	f001 fc1f 	bl	8007dc8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800658e:	b29a      	uxth	r2, r3
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006594:	1ad3      	subs	r3, r2, r3
 8006596:	b29a      	uxth	r2, r3
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	2b22      	cmp	r3, #34	@ 0x22
 80065a6:	d108      	bne.n	80065ba <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80065b6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80065b8:	e057      	b.n	800666a <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80065c8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80065ca:	e04e      	b.n	800666a <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80065da:	d003      	beq.n	80065e4 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f000 fbd1 	bl	8006d84 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80065e2:	e042      	b.n	800666a <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80065e4:	2140      	movs	r1, #64	@ 0x40
 80065e6:	68f8      	ldr	r0, [r7, #12]
 80065e8:	f000 ffd6 	bl	8007598 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80065ec:	e03d      	b.n	800666a <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d028      	beq.n	800664a <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d023      	beq.n	800664a <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006606:	b29b      	uxth	r3, r3
 8006608:	2b00      	cmp	r3, #0
 800660a:	d119      	bne.n	8006640 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006616:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800661a:	d025      	beq.n	8006668 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006620:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006624:	d108      	bne.n	8006638 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	685a      	ldr	r2, [r3, #4]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006634:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8006636:	e017      	b.n	8006668 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006638:	68f8      	ldr	r0, [r7, #12]
 800663a:	f000 fba3 	bl	8006d84 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800663e:	e013      	b.n	8006668 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006640:	2140      	movs	r1, #64	@ 0x40
 8006642:	68f8      	ldr	r0, [r7, #12]
 8006644:	f000 ffa8 	bl	8007598 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006648:	e00e      	b.n	8006668 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	f003 0320 	and.w	r3, r3, #32
 8006650:	2b00      	cmp	r3, #0
 8006652:	d00a      	beq.n	800666a <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800665a:	2b00      	cmp	r3, #0
 800665c:	d005      	beq.n	800666a <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800665e:	68b9      	ldr	r1, [r7, #8]
 8006660:	68f8      	ldr	r0, [r7, #12]
 8006662:	f000 fc29 	bl	8006eb8 <I2C_ITMasterCplt>
 8006666:	e000      	b.n	800666a <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8006668:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2200      	movs	r2, #0
 800666e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006672:	2300      	movs	r3, #0
}
 8006674:	4618      	mov	r0, r3
 8006676:	3718      	adds	r7, #24
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b088      	sub	sp, #32
 8006680:	af02      	add	r7, sp, #8
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8006688:	4b8d      	ldr	r3, [pc, #564]	@ (80068c0 <I2C_Mem_ISR_DMA+0x244>)
 800668a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006692:	2b01      	cmp	r3, #1
 8006694:	d101      	bne.n	800669a <I2C_Mem_ISR_DMA+0x1e>
 8006696:	2302      	movs	r3, #2
 8006698:	e10e      	b.n	80068b8 <I2C_Mem_ISR_DMA+0x23c>
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2201      	movs	r2, #1
 800669e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	f003 0310 	and.w	r3, r3, #16
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d016      	beq.n	80066da <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d011      	beq.n	80066da <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2210      	movs	r2, #16
 80066bc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066c2:	f043 0204 	orr.w	r2, r3, #4
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80066ca:	2120      	movs	r1, #32
 80066cc:	68f8      	ldr	r0, [r7, #12]
 80066ce:	f001 fbad 	bl	8007e2c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80066d2:	68f8      	ldr	r0, [r7, #12]
 80066d4:	f001 f877 	bl	80077c6 <I2C_Flush_TXDR>
 80066d8:	e0e9      	b.n	80068ae <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	f003 0302 	and.w	r3, r3, #2
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d00e      	beq.n	8006702 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d009      	beq.n	8006702 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80066f6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f04f 32ff 	mov.w	r2, #4294967295
 80066fe:	651a      	str	r2, [r3, #80]	@ 0x50
 8006700:	e0d5      	b.n	80068ae <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006708:	2b00      	cmp	r3, #0
 800670a:	d05f      	beq.n	80067cc <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006712:	2b00      	cmp	r3, #0
 8006714:	d05a      	beq.n	80067cc <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006716:	2101      	movs	r1, #1
 8006718:	68f8      	ldr	r0, [r7, #12]
 800671a:	f001 fc0b 	bl	8007f34 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800671e:	2110      	movs	r1, #16
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	f001 fb83 	bl	8007e2c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800672a:	b29b      	uxth	r3, r3
 800672c:	2b00      	cmp	r3, #0
 800672e:	d048      	beq.n	80067c2 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006734:	b29b      	uxth	r3, r3
 8006736:	2bff      	cmp	r3, #255	@ 0xff
 8006738:	d910      	bls.n	800675c <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	22ff      	movs	r2, #255	@ 0xff
 800673e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006744:	b299      	uxth	r1, r3
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800674a:	b2da      	uxtb	r2, r3
 800674c:	2300      	movs	r3, #0
 800674e:	9300      	str	r3, [sp, #0]
 8006750:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006754:	68f8      	ldr	r0, [r7, #12]
 8006756:	f001 fb37 	bl	8007dc8 <I2C_TransferConfig>
 800675a:	e011      	b.n	8006780 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006760:	b29a      	uxth	r2, r3
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800676a:	b299      	uxth	r1, r3
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006770:	b2da      	uxtb	r2, r3
 8006772:	2300      	movs	r3, #0
 8006774:	9300      	str	r3, [sp, #0]
 8006776:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800677a:	68f8      	ldr	r0, [r7, #12]
 800677c:	f001 fb24 	bl	8007dc8 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006784:	b29a      	uxth	r2, r3
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800678a:	1ad3      	subs	r3, r2, r3
 800678c:	b29a      	uxth	r2, r3
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006798:	b2db      	uxtb	r3, r3
 800679a:	2b22      	cmp	r3, #34	@ 0x22
 800679c:	d108      	bne.n	80067b0 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80067ac:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80067ae:	e07e      	b.n	80068ae <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80067be:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80067c0:	e075      	b.n	80068ae <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80067c2:	2140      	movs	r1, #64	@ 0x40
 80067c4:	68f8      	ldr	r0, [r7, #12]
 80067c6:	f000 fee7 	bl	8007598 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80067ca:	e070      	b.n	80068ae <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d05d      	beq.n	8006892 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d058      	beq.n	8006892 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80067e0:	2101      	movs	r1, #1
 80067e2:	68f8      	ldr	r0, [r7, #12]
 80067e4:	f001 fba6 	bl	8007f34 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80067e8:	2110      	movs	r1, #16
 80067ea:	68f8      	ldr	r0, [r7, #12]
 80067ec:	f001 fb1e 	bl	8007e2c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	2b22      	cmp	r3, #34	@ 0x22
 80067fa:	d101      	bne.n	8006800 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 80067fc:	4b31      	ldr	r3, [pc, #196]	@ (80068c4 <I2C_Mem_ISR_DMA+0x248>)
 80067fe:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006804:	b29b      	uxth	r3, r3
 8006806:	2bff      	cmp	r3, #255	@ 0xff
 8006808:	d910      	bls.n	800682c <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	22ff      	movs	r2, #255	@ 0xff
 800680e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006814:	b299      	uxth	r1, r3
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800681a:	b2da      	uxtb	r2, r3
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	9300      	str	r3, [sp, #0]
 8006820:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006824:	68f8      	ldr	r0, [r7, #12]
 8006826:	f001 facf 	bl	8007dc8 <I2C_TransferConfig>
 800682a:	e011      	b.n	8006850 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006830:	b29a      	uxth	r2, r3
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800683a:	b299      	uxth	r1, r3
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006840:	b2da      	uxtb	r2, r3
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	9300      	str	r3, [sp, #0]
 8006846:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	f001 fabc 	bl	8007dc8 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006854:	b29a      	uxth	r2, r3
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800685a:	1ad3      	subs	r3, r2, r3
 800685c:	b29a      	uxth	r2, r3
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006868:	b2db      	uxtb	r3, r3
 800686a:	2b22      	cmp	r3, #34	@ 0x22
 800686c:	d108      	bne.n	8006880 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800687c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800687e:	e016      	b.n	80068ae <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800688e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006890:	e00d      	b.n	80068ae <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	f003 0320 	and.w	r3, r3, #32
 8006898:	2b00      	cmp	r3, #0
 800689a:	d008      	beq.n	80068ae <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d003      	beq.n	80068ae <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80068a6:	68b9      	ldr	r1, [r7, #8]
 80068a8:	68f8      	ldr	r0, [r7, #12]
 80068aa:	f000 fb05 	bl	8006eb8 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80068b6:	2300      	movs	r3, #0
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3718      	adds	r7, #24
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	80002000 	.word	0x80002000
 80068c4:	80002400 	.word	0x80002400

080068c8 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b088      	sub	sp, #32
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	60b9      	str	r1, [r7, #8]
 80068d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068d8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80068da:	2300      	movs	r3, #0
 80068dc:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d101      	bne.n	80068ec <I2C_Slave_ISR_DMA+0x24>
 80068e8:	2302      	movs	r3, #2
 80068ea:	e1c2      	b.n	8006c72 <I2C_Slave_ISR_DMA+0x3aa>
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	f003 0320 	and.w	r3, r3, #32
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d009      	beq.n	8006912 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006904:	2b00      	cmp	r3, #0
 8006906:	d004      	beq.n	8006912 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006908:	68b9      	ldr	r1, [r7, #8]
 800690a:	68f8      	ldr	r0, [r7, #12]
 800690c:	f000 fb9c 	bl	8007048 <I2C_ITSlaveCplt>
 8006910:	e1aa      	b.n	8006c68 <I2C_Slave_ISR_DMA+0x3a0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	f003 0310 	and.w	r3, r3, #16
 8006918:	2b00      	cmp	r3, #0
 800691a:	f000 8197 	beq.w	8006c4c <I2C_Slave_ISR_DMA+0x384>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006924:	2b00      	cmp	r3, #0
 8006926:	f000 8191 	beq.w	8006c4c <I2C_Slave_ISR_DMA+0x384>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006930:	2b00      	cmp	r3, #0
 8006932:	d105      	bne.n	8006940 <I2C_Slave_ISR_DMA+0x78>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800693a:	2b00      	cmp	r3, #0
 800693c:	f000 817f 	beq.w	8006c3e <I2C_Slave_ISR_DMA+0x376>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006944:	2b00      	cmp	r3, #0
 8006946:	d07b      	beq.n	8006a40 <I2C_Slave_ISR_DMA+0x178>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800694e:	2b00      	cmp	r3, #0
 8006950:	d076      	beq.n	8006a40 <I2C_Slave_ISR_DMA+0x178>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a74      	ldr	r2, [pc, #464]	@ (8006b2c <I2C_Slave_ISR_DMA+0x264>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d059      	beq.n	8006a12 <I2C_Slave_ISR_DMA+0x14a>
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a72      	ldr	r2, [pc, #456]	@ (8006b30 <I2C_Slave_ISR_DMA+0x268>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d053      	beq.n	8006a12 <I2C_Slave_ISR_DMA+0x14a>
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a70      	ldr	r2, [pc, #448]	@ (8006b34 <I2C_Slave_ISR_DMA+0x26c>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d04d      	beq.n	8006a12 <I2C_Slave_ISR_DMA+0x14a>
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a6e      	ldr	r2, [pc, #440]	@ (8006b38 <I2C_Slave_ISR_DMA+0x270>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d047      	beq.n	8006a12 <I2C_Slave_ISR_DMA+0x14a>
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a6c      	ldr	r2, [pc, #432]	@ (8006b3c <I2C_Slave_ISR_DMA+0x274>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d041      	beq.n	8006a12 <I2C_Slave_ISR_DMA+0x14a>
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a6a      	ldr	r2, [pc, #424]	@ (8006b40 <I2C_Slave_ISR_DMA+0x278>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d03b      	beq.n	8006a12 <I2C_Slave_ISR_DMA+0x14a>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a68      	ldr	r2, [pc, #416]	@ (8006b44 <I2C_Slave_ISR_DMA+0x27c>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d035      	beq.n	8006a12 <I2C_Slave_ISR_DMA+0x14a>
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a66      	ldr	r2, [pc, #408]	@ (8006b48 <I2C_Slave_ISR_DMA+0x280>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d02f      	beq.n	8006a12 <I2C_Slave_ISR_DMA+0x14a>
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a64      	ldr	r2, [pc, #400]	@ (8006b4c <I2C_Slave_ISR_DMA+0x284>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d029      	beq.n	8006a12 <I2C_Slave_ISR_DMA+0x14a>
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a62      	ldr	r2, [pc, #392]	@ (8006b50 <I2C_Slave_ISR_DMA+0x288>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d023      	beq.n	8006a12 <I2C_Slave_ISR_DMA+0x14a>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a60      	ldr	r2, [pc, #384]	@ (8006b54 <I2C_Slave_ISR_DMA+0x28c>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d01d      	beq.n	8006a12 <I2C_Slave_ISR_DMA+0x14a>
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a5e      	ldr	r2, [pc, #376]	@ (8006b58 <I2C_Slave_ISR_DMA+0x290>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d017      	beq.n	8006a12 <I2C_Slave_ISR_DMA+0x14a>
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a5c      	ldr	r2, [pc, #368]	@ (8006b5c <I2C_Slave_ISR_DMA+0x294>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d011      	beq.n	8006a12 <I2C_Slave_ISR_DMA+0x14a>
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a5a      	ldr	r2, [pc, #360]	@ (8006b60 <I2C_Slave_ISR_DMA+0x298>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d00b      	beq.n	8006a12 <I2C_Slave_ISR_DMA+0x14a>
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a58      	ldr	r2, [pc, #352]	@ (8006b64 <I2C_Slave_ISR_DMA+0x29c>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d005      	beq.n	8006a12 <I2C_Slave_ISR_DMA+0x14a>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a56      	ldr	r2, [pc, #344]	@ (8006b68 <I2C_Slave_ISR_DMA+0x2a0>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d109      	bne.n	8006a26 <I2C_Slave_ISR_DMA+0x15e>
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	bf0c      	ite	eq
 8006a1e:	2301      	moveq	r3, #1
 8006a20:	2300      	movne	r3, #0
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	e008      	b.n	8006a38 <I2C_Slave_ISR_DMA+0x170>
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	bf0c      	ite	eq
 8006a32:	2301      	moveq	r3, #1
 8006a34:	2300      	movne	r3, #0
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d001      	beq.n	8006a40 <I2C_Slave_ISR_DMA+0x178>
          {
            treatdmanack = 1U;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f000 809e 	beq.w	8006b86 <I2C_Slave_ISR_DMA+0x2be>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	f000 8098 	beq.w	8006b86 <I2C_Slave_ISR_DMA+0x2be>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a33      	ldr	r2, [pc, #204]	@ (8006b2c <I2C_Slave_ISR_DMA+0x264>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d059      	beq.n	8006b16 <I2C_Slave_ISR_DMA+0x24e>
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a31      	ldr	r2, [pc, #196]	@ (8006b30 <I2C_Slave_ISR_DMA+0x268>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d053      	beq.n	8006b16 <I2C_Slave_ISR_DMA+0x24e>
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a2f      	ldr	r2, [pc, #188]	@ (8006b34 <I2C_Slave_ISR_DMA+0x26c>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d04d      	beq.n	8006b16 <I2C_Slave_ISR_DMA+0x24e>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a2d      	ldr	r2, [pc, #180]	@ (8006b38 <I2C_Slave_ISR_DMA+0x270>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d047      	beq.n	8006b16 <I2C_Slave_ISR_DMA+0x24e>
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a2b      	ldr	r2, [pc, #172]	@ (8006b3c <I2C_Slave_ISR_DMA+0x274>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d041      	beq.n	8006b16 <I2C_Slave_ISR_DMA+0x24e>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a29      	ldr	r2, [pc, #164]	@ (8006b40 <I2C_Slave_ISR_DMA+0x278>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d03b      	beq.n	8006b16 <I2C_Slave_ISR_DMA+0x24e>
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a27      	ldr	r2, [pc, #156]	@ (8006b44 <I2C_Slave_ISR_DMA+0x27c>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d035      	beq.n	8006b16 <I2C_Slave_ISR_DMA+0x24e>
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a25      	ldr	r2, [pc, #148]	@ (8006b48 <I2C_Slave_ISR_DMA+0x280>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d02f      	beq.n	8006b16 <I2C_Slave_ISR_DMA+0x24e>
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a23      	ldr	r2, [pc, #140]	@ (8006b4c <I2C_Slave_ISR_DMA+0x284>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d029      	beq.n	8006b16 <I2C_Slave_ISR_DMA+0x24e>
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a21      	ldr	r2, [pc, #132]	@ (8006b50 <I2C_Slave_ISR_DMA+0x288>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d023      	beq.n	8006b16 <I2C_Slave_ISR_DMA+0x24e>
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a1f      	ldr	r2, [pc, #124]	@ (8006b54 <I2C_Slave_ISR_DMA+0x28c>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d01d      	beq.n	8006b16 <I2C_Slave_ISR_DMA+0x24e>
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a1d      	ldr	r2, [pc, #116]	@ (8006b58 <I2C_Slave_ISR_DMA+0x290>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d017      	beq.n	8006b16 <I2C_Slave_ISR_DMA+0x24e>
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a1b      	ldr	r2, [pc, #108]	@ (8006b5c <I2C_Slave_ISR_DMA+0x294>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d011      	beq.n	8006b16 <I2C_Slave_ISR_DMA+0x24e>
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a19      	ldr	r2, [pc, #100]	@ (8006b60 <I2C_Slave_ISR_DMA+0x298>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d00b      	beq.n	8006b16 <I2C_Slave_ISR_DMA+0x24e>
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a17      	ldr	r2, [pc, #92]	@ (8006b64 <I2C_Slave_ISR_DMA+0x29c>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d005      	beq.n	8006b16 <I2C_Slave_ISR_DMA+0x24e>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a15      	ldr	r2, [pc, #84]	@ (8006b68 <I2C_Slave_ISR_DMA+0x2a0>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d12a      	bne.n	8006b6c <I2C_Slave_ISR_DMA+0x2a4>
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	bf0c      	ite	eq
 8006b22:	2301      	moveq	r3, #1
 8006b24:	2300      	movne	r3, #0
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	e029      	b.n	8006b7e <I2C_Slave_ISR_DMA+0x2b6>
 8006b2a:	bf00      	nop
 8006b2c:	40020010 	.word	0x40020010
 8006b30:	40020028 	.word	0x40020028
 8006b34:	40020040 	.word	0x40020040
 8006b38:	40020058 	.word	0x40020058
 8006b3c:	40020070 	.word	0x40020070
 8006b40:	40020088 	.word	0x40020088
 8006b44:	400200a0 	.word	0x400200a0
 8006b48:	400200b8 	.word	0x400200b8
 8006b4c:	40020410 	.word	0x40020410
 8006b50:	40020428 	.word	0x40020428
 8006b54:	40020440 	.word	0x40020440
 8006b58:	40020458 	.word	0x40020458
 8006b5c:	40020470 	.word	0x40020470
 8006b60:	40020488 	.word	0x40020488
 8006b64:	400204a0 	.word	0x400204a0
 8006b68:	400204b8 	.word	0x400204b8
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	bf0c      	ite	eq
 8006b78:	2301      	moveq	r3, #1
 8006b7a:	2300      	movne	r3, #0
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d001      	beq.n	8006b86 <I2C_Slave_ISR_DMA+0x2be>
          {
            treatdmanack = 1U;
 8006b82:	2301      	movs	r3, #1
 8006b84:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8006b86:	69fb      	ldr	r3, [r7, #28]
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d128      	bne.n	8006bde <I2C_Slave_ISR_DMA+0x316>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	2b28      	cmp	r3, #40	@ 0x28
 8006b96:	d108      	bne.n	8006baa <I2C_Slave_ISR_DMA+0x2e2>
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b9e:	d104      	bne.n	8006baa <I2C_Slave_ISR_DMA+0x2e2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8006ba0:	68b9      	ldr	r1, [r7, #8]
 8006ba2:	68f8      	ldr	r0, [r7, #12]
 8006ba4:	f000 fca4 	bl	80074f0 <I2C_ITListenCplt>
 8006ba8:	e048      	b.n	8006c3c <I2C_Slave_ISR_DMA+0x374>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	2b29      	cmp	r3, #41	@ 0x29
 8006bb4:	d10e      	bne.n	8006bd4 <I2C_Slave_ISR_DMA+0x30c>
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006bbc:	d00a      	beq.n	8006bd4 <I2C_Slave_ISR_DMA+0x30c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	2210      	movs	r2, #16
 8006bc4:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8006bc6:	68f8      	ldr	r0, [r7, #12]
 8006bc8:	f000 fdfd 	bl	80077c6 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f000 f916 	bl	8006dfe <I2C_ITSlaveSeqCplt>
 8006bd2:	e033      	b.n	8006c3c <I2C_Slave_ISR_DMA+0x374>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2210      	movs	r2, #16
 8006bda:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8006bdc:	e034      	b.n	8006c48 <I2C_Slave_ISR_DMA+0x380>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	2210      	movs	r2, #16
 8006be4:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bea:	f043 0204 	orr.w	r2, r3, #4
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bf8:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d003      	beq.n	8006c08 <I2C_Slave_ISR_DMA+0x340>
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006c06:	d11f      	bne.n	8006c48 <I2C_Slave_ISR_DMA+0x380>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006c08:	7dfb      	ldrb	r3, [r7, #23]
 8006c0a:	2b21      	cmp	r3, #33	@ 0x21
 8006c0c:	d002      	beq.n	8006c14 <I2C_Slave_ISR_DMA+0x34c>
 8006c0e:	7dfb      	ldrb	r3, [r7, #23]
 8006c10:	2b29      	cmp	r3, #41	@ 0x29
 8006c12:	d103      	bne.n	8006c1c <I2C_Slave_ISR_DMA+0x354>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2221      	movs	r2, #33	@ 0x21
 8006c18:	631a      	str	r2, [r3, #48]	@ 0x30
 8006c1a:	e008      	b.n	8006c2e <I2C_Slave_ISR_DMA+0x366>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006c1c:	7dfb      	ldrb	r3, [r7, #23]
 8006c1e:	2b22      	cmp	r3, #34	@ 0x22
 8006c20:	d002      	beq.n	8006c28 <I2C_Slave_ISR_DMA+0x360>
 8006c22:	7dfb      	ldrb	r3, [r7, #23]
 8006c24:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c26:	d102      	bne.n	8006c2e <I2C_Slave_ISR_DMA+0x366>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2222      	movs	r2, #34	@ 0x22
 8006c2c:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c32:	4619      	mov	r1, r3
 8006c34:	68f8      	ldr	r0, [r7, #12]
 8006c36:	f000 fcaf 	bl	8007598 <I2C_ITError>
      if (treatdmanack == 1U)
 8006c3a:	e005      	b.n	8006c48 <I2C_Slave_ISR_DMA+0x380>
 8006c3c:	e004      	b.n	8006c48 <I2C_Slave_ISR_DMA+0x380>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2210      	movs	r2, #16
 8006c44:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006c46:	e00f      	b.n	8006c68 <I2C_Slave_ISR_DMA+0x3a0>
      if (treatdmanack == 1U)
 8006c48:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006c4a:	e00d      	b.n	8006c68 <I2C_Slave_ISR_DMA+0x3a0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	f003 0308 	and.w	r3, r3, #8
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d008      	beq.n	8006c68 <I2C_Slave_ISR_DMA+0x3a0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d003      	beq.n	8006c68 <I2C_Slave_ISR_DMA+0x3a0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8006c60:	68b9      	ldr	r1, [r7, #8]
 8006c62:	68f8      	ldr	r0, [r7, #12]
 8006c64:	f000 f80a 	bl	8006c7c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006c70:	2300      	movs	r3, #0
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3720      	adds	r7, #32
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop

08006c7c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b084      	sub	sp, #16
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006c92:	2b28      	cmp	r3, #40	@ 0x28
 8006c94:	d16a      	bne.n	8006d6c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	699b      	ldr	r3, [r3, #24]
 8006c9c:	0c1b      	lsrs	r3, r3, #16
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	f003 0301 	and.w	r3, r3, #1
 8006ca4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	699b      	ldr	r3, [r3, #24]
 8006cac:	0c1b      	lsrs	r3, r3, #16
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006cb4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006cc2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	68db      	ldr	r3, [r3, #12]
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006cd0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	d138      	bne.n	8006d4c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006cda:	897b      	ldrh	r3, [r7, #10]
 8006cdc:	09db      	lsrs	r3, r3, #7
 8006cde:	b29a      	uxth	r2, r3
 8006ce0:	89bb      	ldrh	r3, [r7, #12]
 8006ce2:	4053      	eors	r3, r2
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	f003 0306 	and.w	r3, r3, #6
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d11c      	bne.n	8006d28 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006cee:	897b      	ldrh	r3, [r7, #10]
 8006cf0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cf6:	1c5a      	adds	r2, r3, #1
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	d13b      	bne.n	8006d7c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	2208      	movs	r2, #8
 8006d10:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006d1a:	89ba      	ldrh	r2, [r7, #12]
 8006d1c:	7bfb      	ldrb	r3, [r7, #15]
 8006d1e:	4619      	mov	r1, r3
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f7ff f952 	bl	8005fca <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006d26:	e029      	b.n	8006d7c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006d28:	893b      	ldrh	r3, [r7, #8]
 8006d2a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006d2c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f001 f8ff 	bl	8007f34 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006d3e:	89ba      	ldrh	r2, [r7, #12]
 8006d40:	7bfb      	ldrb	r3, [r7, #15]
 8006d42:	4619      	mov	r1, r3
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f7ff f940 	bl	8005fca <HAL_I2C_AddrCallback>
}
 8006d4a:	e017      	b.n	8006d7c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006d4c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f001 f8ef 	bl	8007f34 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006d5e:	89ba      	ldrh	r2, [r7, #12]
 8006d60:	7bfb      	ldrb	r3, [r7, #15]
 8006d62:	4619      	mov	r1, r3
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f7ff f930 	bl	8005fca <HAL_I2C_AddrCallback>
}
 8006d6a:	e007      	b.n	8006d7c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2208      	movs	r2, #8
 8006d72:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8006d7c:	bf00      	nop
 8006d7e:	3710      	adds	r7, #16
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b082      	sub	sp, #8
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	2b21      	cmp	r3, #33	@ 0x21
 8006d9e:	d115      	bne.n	8006dcc <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2220      	movs	r2, #32
 8006da4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2211      	movs	r2, #17
 8006dac:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006db4:	2101      	movs	r1, #1
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f001 f8bc 	bl	8007f34 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f7ff f8d8 	bl	8005f7a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006dca:	e014      	b.n	8006df6 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2220      	movs	r2, #32
 8006dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2212      	movs	r2, #18
 8006dd8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006de0:	2102      	movs	r1, #2
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f001 f8a6 	bl	8007f34 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f7ff f8cc 	bl	8005f8e <HAL_I2C_MasterRxCpltCallback>
}
 8006df6:	bf00      	nop
 8006df8:	3708      	adds	r7, #8
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}

08006dfe <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006dfe:	b580      	push	{r7, lr}
 8006e00:	b084      	sub	sp, #16
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d008      	beq.n	8006e32 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006e2e:	601a      	str	r2, [r3, #0]
 8006e30:	e00c      	b.n	8006e4c <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d007      	beq.n	8006e4c <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006e4a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	2b29      	cmp	r3, #41	@ 0x29
 8006e56:	d112      	bne.n	8006e7e <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2228      	movs	r2, #40	@ 0x28
 8006e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2221      	movs	r2, #33	@ 0x21
 8006e64:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006e66:	2101      	movs	r1, #1
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f001 f863 	bl	8007f34 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f7ff f893 	bl	8005fa2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006e7c:	e017      	b.n	8006eae <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e88:	d111      	bne.n	8006eae <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2228      	movs	r2, #40	@ 0x28
 8006e8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2222      	movs	r2, #34	@ 0x22
 8006e96:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006e98:	2102      	movs	r1, #2
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f001 f84a 	bl	8007f34 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f7ff f884 	bl	8005fb6 <HAL_I2C_SlaveRxCpltCallback>
}
 8006eae:	bf00      	nop
 8006eb0:	3710      	adds	r7, #16
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
	...

08006eb8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b086      	sub	sp, #24
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	2220      	movs	r2, #32
 8006ecc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	2b21      	cmp	r3, #33	@ 0x21
 8006ed8:	d107      	bne.n	8006eea <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006eda:	2101      	movs	r1, #1
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f001 f829 	bl	8007f34 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2211      	movs	r2, #17
 8006ee6:	631a      	str	r2, [r3, #48]	@ 0x30
 8006ee8:	e00c      	b.n	8006f04 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	2b22      	cmp	r3, #34	@ 0x22
 8006ef4:	d106      	bne.n	8006f04 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006ef6:	2102      	movs	r1, #2
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f001 f81b 	bl	8007f34 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2212      	movs	r2, #18
 8006f02:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	6859      	ldr	r1, [r3, #4]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	4b4c      	ldr	r3, [pc, #304]	@ (8007040 <I2C_ITMasterCplt+0x188>)
 8006f10:	400b      	ands	r3, r1
 8006f12:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a49      	ldr	r2, [pc, #292]	@ (8007044 <I2C_ITMasterCplt+0x18c>)
 8006f1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	f003 0310 	and.w	r3, r3, #16
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d009      	beq.n	8006f3e <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	2210      	movs	r2, #16
 8006f30:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f36:	f043 0204 	orr.w	r2, r3, #4
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	2b60      	cmp	r3, #96	@ 0x60
 8006f48:	d10a      	bne.n	8006f60 <I2C_ITMasterCplt+0xa8>
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	f003 0304 	and.w	r3, r3, #4
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d005      	beq.n	8006f60 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 fc30 	bl	80077c6 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f6a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	2b60      	cmp	r3, #96	@ 0x60
 8006f76:	d002      	beq.n	8006f7e <I2C_ITMasterCplt+0xc6>
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d006      	beq.n	8006f8c <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f82:	4619      	mov	r1, r3
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 fb07 	bl	8007598 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006f8a:	e054      	b.n	8007036 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	2b21      	cmp	r3, #33	@ 0x21
 8006f96:	d124      	bne.n	8006fe2 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2220      	movs	r2, #32
 8006f9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	2b40      	cmp	r3, #64	@ 0x40
 8006fb0:	d10b      	bne.n	8006fca <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f7ff f819 	bl	8005ffa <HAL_I2C_MemTxCpltCallback>
}
 8006fc8:	e035      	b.n	8007036 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f7fe ffcd 	bl	8005f7a <HAL_I2C_MasterTxCpltCallback>
}
 8006fe0:	e029      	b.n	8007036 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	2b22      	cmp	r3, #34	@ 0x22
 8006fec:	d123      	bne.n	8007036 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2220      	movs	r2, #32
 8006ff2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007002:	b2db      	uxtb	r3, r3
 8007004:	2b40      	cmp	r3, #64	@ 0x40
 8007006:	d10b      	bne.n	8007020 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2200      	movs	r2, #0
 800700c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f7fe fff8 	bl	800600e <HAL_I2C_MemRxCpltCallback>
}
 800701e:	e00a      	b.n	8007036 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f7fe ffac 	bl	8005f8e <HAL_I2C_MasterRxCpltCallback>
}
 8007036:	bf00      	nop
 8007038:	3718      	adds	r7, #24
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	fe00e800 	.word	0xfe00e800
 8007044:	ffff0000 	.word	0xffff0000

08007048 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b086      	sub	sp, #24
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007062:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800706a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	2220      	movs	r2, #32
 8007072:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007074:	7afb      	ldrb	r3, [r7, #11]
 8007076:	2b21      	cmp	r3, #33	@ 0x21
 8007078:	d002      	beq.n	8007080 <I2C_ITSlaveCplt+0x38>
 800707a:	7afb      	ldrb	r3, [r7, #11]
 800707c:	2b29      	cmp	r3, #41	@ 0x29
 800707e:	d108      	bne.n	8007092 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8007080:	f248 0101 	movw	r1, #32769	@ 0x8001
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 ff55 	bl	8007f34 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2221      	movs	r2, #33	@ 0x21
 800708e:	631a      	str	r2, [r3, #48]	@ 0x30
 8007090:	e019      	b.n	80070c6 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007092:	7afb      	ldrb	r3, [r7, #11]
 8007094:	2b22      	cmp	r3, #34	@ 0x22
 8007096:	d002      	beq.n	800709e <I2C_ITSlaveCplt+0x56>
 8007098:	7afb      	ldrb	r3, [r7, #11]
 800709a:	2b2a      	cmp	r3, #42	@ 0x2a
 800709c:	d108      	bne.n	80070b0 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800709e:	f248 0102 	movw	r1, #32770	@ 0x8002
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 ff46 	bl	8007f34 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2222      	movs	r2, #34	@ 0x22
 80070ac:	631a      	str	r2, [r3, #48]	@ 0x30
 80070ae:	e00a      	b.n	80070c6 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80070b0:	7afb      	ldrb	r3, [r7, #11]
 80070b2:	2b28      	cmp	r3, #40	@ 0x28
 80070b4:	d107      	bne.n	80070c6 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80070b6:	f248 0103 	movw	r1, #32771	@ 0x8003
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 ff3a 	bl	8007f34 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	685a      	ldr	r2, [r3, #4]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80070d4:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	6859      	ldr	r1, [r3, #4]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	4b7f      	ldr	r3, [pc, #508]	@ (80072e0 <I2C_ITSlaveCplt+0x298>)
 80070e2:	400b      	ands	r3, r1
 80070e4:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 fb6d 	bl	80077c6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d07a      	beq.n	80071ec <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007104:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800710a:	2b00      	cmp	r3, #0
 800710c:	f000 8111 	beq.w	8007332 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a73      	ldr	r2, [pc, #460]	@ (80072e4 <I2C_ITSlaveCplt+0x29c>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d059      	beq.n	80071d0 <I2C_ITSlaveCplt+0x188>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a71      	ldr	r2, [pc, #452]	@ (80072e8 <I2C_ITSlaveCplt+0x2a0>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d053      	beq.n	80071d0 <I2C_ITSlaveCplt+0x188>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a6f      	ldr	r2, [pc, #444]	@ (80072ec <I2C_ITSlaveCplt+0x2a4>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d04d      	beq.n	80071d0 <I2C_ITSlaveCplt+0x188>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a6d      	ldr	r2, [pc, #436]	@ (80072f0 <I2C_ITSlaveCplt+0x2a8>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d047      	beq.n	80071d0 <I2C_ITSlaveCplt+0x188>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a6b      	ldr	r2, [pc, #428]	@ (80072f4 <I2C_ITSlaveCplt+0x2ac>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d041      	beq.n	80071d0 <I2C_ITSlaveCplt+0x188>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a69      	ldr	r2, [pc, #420]	@ (80072f8 <I2C_ITSlaveCplt+0x2b0>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d03b      	beq.n	80071d0 <I2C_ITSlaveCplt+0x188>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a67      	ldr	r2, [pc, #412]	@ (80072fc <I2C_ITSlaveCplt+0x2b4>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d035      	beq.n	80071d0 <I2C_ITSlaveCplt+0x188>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a65      	ldr	r2, [pc, #404]	@ (8007300 <I2C_ITSlaveCplt+0x2b8>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d02f      	beq.n	80071d0 <I2C_ITSlaveCplt+0x188>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a63      	ldr	r2, [pc, #396]	@ (8007304 <I2C_ITSlaveCplt+0x2bc>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d029      	beq.n	80071d0 <I2C_ITSlaveCplt+0x188>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a61      	ldr	r2, [pc, #388]	@ (8007308 <I2C_ITSlaveCplt+0x2c0>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d023      	beq.n	80071d0 <I2C_ITSlaveCplt+0x188>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a5f      	ldr	r2, [pc, #380]	@ (800730c <I2C_ITSlaveCplt+0x2c4>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d01d      	beq.n	80071d0 <I2C_ITSlaveCplt+0x188>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a5d      	ldr	r2, [pc, #372]	@ (8007310 <I2C_ITSlaveCplt+0x2c8>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d017      	beq.n	80071d0 <I2C_ITSlaveCplt+0x188>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a5b      	ldr	r2, [pc, #364]	@ (8007314 <I2C_ITSlaveCplt+0x2cc>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d011      	beq.n	80071d0 <I2C_ITSlaveCplt+0x188>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a59      	ldr	r2, [pc, #356]	@ (8007318 <I2C_ITSlaveCplt+0x2d0>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d00b      	beq.n	80071d0 <I2C_ITSlaveCplt+0x188>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a57      	ldr	r2, [pc, #348]	@ (800731c <I2C_ITSlaveCplt+0x2d4>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d005      	beq.n	80071d0 <I2C_ITSlaveCplt+0x188>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a55      	ldr	r2, [pc, #340]	@ (8007320 <I2C_ITSlaveCplt+0x2d8>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d105      	bne.n	80071dc <I2C_ITSlaveCplt+0x194>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	b29b      	uxth	r3, r3
 80071da:	e004      	b.n	80071e6 <I2C_ITSlaveCplt+0x19e>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	8553      	strh	r3, [r2, #42]	@ 0x2a
 80071ea:	e0a2      	b.n	8007332 <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	f000 809d 	beq.w	8007332 <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007206:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800720c:	2b00      	cmp	r3, #0
 800720e:	f000 8090 	beq.w	8007332 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a32      	ldr	r2, [pc, #200]	@ (80072e4 <I2C_ITSlaveCplt+0x29c>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d059      	beq.n	80072d2 <I2C_ITSlaveCplt+0x28a>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a30      	ldr	r2, [pc, #192]	@ (80072e8 <I2C_ITSlaveCplt+0x2a0>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d053      	beq.n	80072d2 <I2C_ITSlaveCplt+0x28a>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a2e      	ldr	r2, [pc, #184]	@ (80072ec <I2C_ITSlaveCplt+0x2a4>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d04d      	beq.n	80072d2 <I2C_ITSlaveCplt+0x28a>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a2c      	ldr	r2, [pc, #176]	@ (80072f0 <I2C_ITSlaveCplt+0x2a8>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d047      	beq.n	80072d2 <I2C_ITSlaveCplt+0x28a>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a2a      	ldr	r2, [pc, #168]	@ (80072f4 <I2C_ITSlaveCplt+0x2ac>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d041      	beq.n	80072d2 <I2C_ITSlaveCplt+0x28a>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a28      	ldr	r2, [pc, #160]	@ (80072f8 <I2C_ITSlaveCplt+0x2b0>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d03b      	beq.n	80072d2 <I2C_ITSlaveCplt+0x28a>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a26      	ldr	r2, [pc, #152]	@ (80072fc <I2C_ITSlaveCplt+0x2b4>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d035      	beq.n	80072d2 <I2C_ITSlaveCplt+0x28a>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a24      	ldr	r2, [pc, #144]	@ (8007300 <I2C_ITSlaveCplt+0x2b8>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d02f      	beq.n	80072d2 <I2C_ITSlaveCplt+0x28a>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a22      	ldr	r2, [pc, #136]	@ (8007304 <I2C_ITSlaveCplt+0x2bc>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d029      	beq.n	80072d2 <I2C_ITSlaveCplt+0x28a>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a20      	ldr	r2, [pc, #128]	@ (8007308 <I2C_ITSlaveCplt+0x2c0>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d023      	beq.n	80072d2 <I2C_ITSlaveCplt+0x28a>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a1e      	ldr	r2, [pc, #120]	@ (800730c <I2C_ITSlaveCplt+0x2c4>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d01d      	beq.n	80072d2 <I2C_ITSlaveCplt+0x28a>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a1c      	ldr	r2, [pc, #112]	@ (8007310 <I2C_ITSlaveCplt+0x2c8>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d017      	beq.n	80072d2 <I2C_ITSlaveCplt+0x28a>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a1a      	ldr	r2, [pc, #104]	@ (8007314 <I2C_ITSlaveCplt+0x2cc>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d011      	beq.n	80072d2 <I2C_ITSlaveCplt+0x28a>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a18      	ldr	r2, [pc, #96]	@ (8007318 <I2C_ITSlaveCplt+0x2d0>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d00b      	beq.n	80072d2 <I2C_ITSlaveCplt+0x28a>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a16      	ldr	r2, [pc, #88]	@ (800731c <I2C_ITSlaveCplt+0x2d4>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d005      	beq.n	80072d2 <I2C_ITSlaveCplt+0x28a>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a14      	ldr	r2, [pc, #80]	@ (8007320 <I2C_ITSlaveCplt+0x2d8>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d128      	bne.n	8007324 <I2C_ITSlaveCplt+0x2dc>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	b29b      	uxth	r3, r3
 80072dc:	e027      	b.n	800732e <I2C_ITSlaveCplt+0x2e6>
 80072de:	bf00      	nop
 80072e0:	fe00e800 	.word	0xfe00e800
 80072e4:	40020010 	.word	0x40020010
 80072e8:	40020028 	.word	0x40020028
 80072ec:	40020040 	.word	0x40020040
 80072f0:	40020058 	.word	0x40020058
 80072f4:	40020070 	.word	0x40020070
 80072f8:	40020088 	.word	0x40020088
 80072fc:	400200a0 	.word	0x400200a0
 8007300:	400200b8 	.word	0x400200b8
 8007304:	40020410 	.word	0x40020410
 8007308:	40020428 	.word	0x40020428
 800730c:	40020440 	.word	0x40020440
 8007310:	40020458 	.word	0x40020458
 8007314:	40020470 	.word	0x40020470
 8007318:	40020488 	.word	0x40020488
 800731c:	400204a0 	.word	0x400204a0
 8007320:	400204b8 	.word	0x400204b8
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	b29b      	uxth	r3, r3
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	f003 0304 	and.w	r3, r3, #4
 8007338:	2b00      	cmp	r3, #0
 800733a:	d020      	beq.n	800737e <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	f023 0304 	bic.w	r3, r3, #4
 8007342:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800734e:	b2d2      	uxtb	r2, r2
 8007350:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007356:	1c5a      	adds	r2, r3, #1
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007360:	2b00      	cmp	r3, #0
 8007362:	d00c      	beq.n	800737e <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007368:	3b01      	subs	r3, #1
 800736a:	b29a      	uxth	r2, r3
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007374:	b29b      	uxth	r3, r3
 8007376:	3b01      	subs	r3, #1
 8007378:	b29a      	uxth	r2, r3
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007382:	b29b      	uxth	r3, r3
 8007384:	2b00      	cmp	r3, #0
 8007386:	d005      	beq.n	8007394 <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800738c:	f043 0204 	orr.w	r2, r3, #4
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	f003 0310 	and.w	r3, r3, #16
 800739a:	2b00      	cmp	r3, #0
 800739c:	d049      	beq.n	8007432 <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d044      	beq.n	8007432 <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d128      	bne.n	8007404 <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	2b28      	cmp	r3, #40	@ 0x28
 80073bc:	d108      	bne.n	80073d0 <I2C_ITSlaveCplt+0x388>
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80073c4:	d104      	bne.n	80073d0 <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80073c6:	6979      	ldr	r1, [r7, #20]
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 f891 	bl	80074f0 <I2C_ITListenCplt>
 80073ce:	e030      	b.n	8007432 <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	2b29      	cmp	r3, #41	@ 0x29
 80073da:	d10e      	bne.n	80073fa <I2C_ITSlaveCplt+0x3b2>
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80073e2:	d00a      	beq.n	80073fa <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	2210      	movs	r2, #16
 80073ea:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 f9ea 	bl	80077c6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f7ff fd03 	bl	8006dfe <I2C_ITSlaveSeqCplt>
 80073f8:	e01b      	b.n	8007432 <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2210      	movs	r2, #16
 8007400:	61da      	str	r2, [r3, #28]
 8007402:	e016      	b.n	8007432 <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2210      	movs	r2, #16
 800740a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007410:	f043 0204 	orr.w	r2, r3, #4
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d003      	beq.n	8007426 <I2C_ITSlaveCplt+0x3de>
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007424:	d105      	bne.n	8007432 <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800742a:	4619      	mov	r1, r3
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 f8b3 	bl	8007598 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007444:	2b00      	cmp	r3, #0
 8007446:	d010      	beq.n	800746a <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800744c:	4619      	mov	r1, r3
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 f8a2 	bl	8007598 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800745a:	b2db      	uxtb	r3, r3
 800745c:	2b28      	cmp	r3, #40	@ 0x28
 800745e:	d141      	bne.n	80074e4 <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8007460:	6979      	ldr	r1, [r7, #20]
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 f844 	bl	80074f0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007468:	e03c      	b.n	80074e4 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800746e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007472:	d014      	beq.n	800749e <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f7ff fcc2 	bl	8006dfe <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	4a1b      	ldr	r2, [pc, #108]	@ (80074ec <I2C_ITSlaveCplt+0x4a4>)
 800747e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2220      	movs	r2, #32
 8007484:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f7fe fda5 	bl	8005fe6 <HAL_I2C_ListenCpltCallback>
}
 800749c:	e022      	b.n	80074e4 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	2b22      	cmp	r3, #34	@ 0x22
 80074a8:	d10e      	bne.n	80074c8 <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2220      	movs	r2, #32
 80074ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2200      	movs	r2, #0
 80074bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f7fe fd78 	bl	8005fb6 <HAL_I2C_SlaveRxCpltCallback>
}
 80074c6:	e00d      	b.n	80074e4 <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2220      	movs	r2, #32
 80074cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f7fe fd5f 	bl	8005fa2 <HAL_I2C_SlaveTxCpltCallback>
}
 80074e4:	bf00      	nop
 80074e6:	3718      	adds	r7, #24
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}
 80074ec:	ffff0000 	.word	0xffff0000

080074f0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4a25      	ldr	r2, [pc, #148]	@ (8007594 <I2C_ITListenCplt+0xa4>)
 80074fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2220      	movs	r2, #32
 800750a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2200      	movs	r2, #0
 8007512:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2200      	movs	r2, #0
 800751a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	f003 0304 	and.w	r3, r3, #4
 8007522:	2b00      	cmp	r3, #0
 8007524:	d022      	beq.n	800756c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007530:	b2d2      	uxtb	r2, r2
 8007532:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007538:	1c5a      	adds	r2, r3, #1
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007542:	2b00      	cmp	r3, #0
 8007544:	d012      	beq.n	800756c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800754a:	3b01      	subs	r3, #1
 800754c:	b29a      	uxth	r2, r3
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007556:	b29b      	uxth	r3, r3
 8007558:	3b01      	subs	r3, #1
 800755a:	b29a      	uxth	r2, r3
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007564:	f043 0204 	orr.w	r2, r3, #4
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800756c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f000 fcdf 	bl	8007f34 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	2210      	movs	r2, #16
 800757c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f7fe fd2d 	bl	8005fe6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800758c:	bf00      	nop
 800758e:	3708      	adds	r7, #8
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}
 8007594:	ffff0000 	.word	0xffff0000

08007598 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075a8:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4a6d      	ldr	r2, [pc, #436]	@ (800776c <I2C_ITError+0x1d4>)
 80075b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	431a      	orrs	r2, r3
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80075ca:	7bfb      	ldrb	r3, [r7, #15]
 80075cc:	2b28      	cmp	r3, #40	@ 0x28
 80075ce:	d005      	beq.n	80075dc <I2C_ITError+0x44>
 80075d0:	7bfb      	ldrb	r3, [r7, #15]
 80075d2:	2b29      	cmp	r3, #41	@ 0x29
 80075d4:	d002      	beq.n	80075dc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80075d6:	7bfb      	ldrb	r3, [r7, #15]
 80075d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80075da:	d10b      	bne.n	80075f4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80075dc:	2103      	movs	r1, #3
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 fca8 	bl	8007f34 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2228      	movs	r2, #40	@ 0x28
 80075e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	4a60      	ldr	r2, [pc, #384]	@ (8007770 <I2C_ITError+0x1d8>)
 80075f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80075f2:	e030      	b.n	8007656 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80075f4:	f248 0103 	movw	r1, #32771	@ 0x8003
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f000 fc9b 	bl	8007f34 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 f8e1 	bl	80077c6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800760a:	b2db      	uxtb	r3, r3
 800760c:	2b60      	cmp	r3, #96	@ 0x60
 800760e:	d01f      	beq.n	8007650 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2220      	movs	r2, #32
 8007614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	699b      	ldr	r3, [r3, #24]
 800761e:	f003 0320 	and.w	r3, r3, #32
 8007622:	2b20      	cmp	r3, #32
 8007624:	d114      	bne.n	8007650 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	699b      	ldr	r3, [r3, #24]
 800762c:	f003 0310 	and.w	r3, r3, #16
 8007630:	2b10      	cmp	r3, #16
 8007632:	d109      	bne.n	8007648 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2210      	movs	r2, #16
 800763a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007640:	f043 0204 	orr.w	r2, r3, #4
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	2220      	movs	r2, #32
 800764e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800765a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007660:	2b00      	cmp	r3, #0
 8007662:	d039      	beq.n	80076d8 <I2C_ITError+0x140>
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	2b11      	cmp	r3, #17
 8007668:	d002      	beq.n	8007670 <I2C_ITError+0xd8>
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	2b21      	cmp	r3, #33	@ 0x21
 800766e:	d133      	bne.n	80076d8 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800767a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800767e:	d107      	bne.n	8007690 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800768e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007694:	4618      	mov	r0, r3
 8007696:	f7fd fa45 	bl	8004b24 <HAL_DMA_GetState>
 800769a:	4603      	mov	r3, r0
 800769c:	2b01      	cmp	r3, #1
 800769e:	d017      	beq.n	80076d0 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076a4:	4a33      	ldr	r2, [pc, #204]	@ (8007774 <I2C_ITError+0x1dc>)
 80076a6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2200      	movs	r2, #0
 80076ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076b4:	4618      	mov	r0, r3
 80076b6:	f7fc f88d 	bl	80037d4 <HAL_DMA_Abort_IT>
 80076ba:	4603      	mov	r3, r0
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d04d      	beq.n	800775c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80076ca:	4610      	mov	r0, r2
 80076cc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80076ce:	e045      	b.n	800775c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 f851 	bl	8007778 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80076d6:	e041      	b.n	800775c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d039      	beq.n	8007754 <I2C_ITError+0x1bc>
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	2b12      	cmp	r3, #18
 80076e4:	d002      	beq.n	80076ec <I2C_ITError+0x154>
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	2b22      	cmp	r3, #34	@ 0x22
 80076ea:	d133      	bne.n	8007754 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80076f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80076fa:	d107      	bne.n	800770c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800770a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007710:	4618      	mov	r0, r3
 8007712:	f7fd fa07 	bl	8004b24 <HAL_DMA_GetState>
 8007716:	4603      	mov	r3, r0
 8007718:	2b01      	cmp	r3, #1
 800771a:	d017      	beq.n	800774c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007720:	4a14      	ldr	r2, [pc, #80]	@ (8007774 <I2C_ITError+0x1dc>)
 8007722:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007730:	4618      	mov	r0, r3
 8007732:	f7fc f84f 	bl	80037d4 <HAL_DMA_Abort_IT>
 8007736:	4603      	mov	r3, r0
 8007738:	2b00      	cmp	r3, #0
 800773a:	d011      	beq.n	8007760 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007740:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007746:	4610      	mov	r0, r2
 8007748:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800774a:	e009      	b.n	8007760 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 f813 	bl	8007778 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007752:	e005      	b.n	8007760 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 f80f 	bl	8007778 <I2C_TreatErrorCallback>
  }
}
 800775a:	e002      	b.n	8007762 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800775c:	bf00      	nop
 800775e:	e000      	b.n	8007762 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007760:	bf00      	nop
}
 8007762:	bf00      	nop
 8007764:	3710      	adds	r7, #16
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop
 800776c:	ffff0000 	.word	0xffff0000
 8007770:	080062b5 	.word	0x080062b5
 8007774:	08007b19 	.word	0x08007b19

08007778 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007786:	b2db      	uxtb	r3, r3
 8007788:	2b60      	cmp	r3, #96	@ 0x60
 800778a:	d10e      	bne.n	80077aa <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2220      	movs	r2, #32
 8007790:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2200      	movs	r2, #0
 800779e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f7fe fc47 	bl	8006036 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80077a8:	e009      	b.n	80077be <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f7fe fc32 	bl	8006022 <HAL_I2C_ErrorCallback>
}
 80077be:	bf00      	nop
 80077c0:	3708      	adds	r7, #8
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80077c6:	b480      	push	{r7}
 80077c8:	b083      	sub	sp, #12
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	699b      	ldr	r3, [r3, #24]
 80077d4:	f003 0302 	and.w	r3, r3, #2
 80077d8:	2b02      	cmp	r3, #2
 80077da:	d103      	bne.n	80077e4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	2200      	movs	r2, #0
 80077e2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	699b      	ldr	r3, [r3, #24]
 80077ea:	f003 0301 	and.w	r3, r3, #1
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d007      	beq.n	8007802 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	699a      	ldr	r2, [r3, #24]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f042 0201 	orr.w	r2, r2, #1
 8007800:	619a      	str	r2, [r3, #24]
  }
}
 8007802:	bf00      	nop
 8007804:	370c      	adds	r7, #12
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr

0800780e <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800780e:	b580      	push	{r7, lr}
 8007810:	b084      	sub	sp, #16
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800781a:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800782a:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007830:	b29b      	uxth	r3, r3
 8007832:	2b00      	cmp	r3, #0
 8007834:	d104      	bne.n	8007840 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007836:	2120      	movs	r1, #32
 8007838:	68f8      	ldr	r0, [r7, #12]
 800783a:	f000 faf7 	bl	8007e2c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800783e:	e02d      	b.n	800789c <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007844:	68fa      	ldr	r2, [r7, #12]
 8007846:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8007848:	441a      	add	r2, r3
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007852:	b29b      	uxth	r3, r3
 8007854:	2bff      	cmp	r3, #255	@ 0xff
 8007856:	d903      	bls.n	8007860 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	22ff      	movs	r2, #255	@ 0xff
 800785c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800785e:	e004      	b.n	800786a <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007864:	b29a      	uxth	r2, r3
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	3324      	adds	r3, #36	@ 0x24
 8007874:	4619      	mov	r1, r3
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800787a:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8007880:	f7fb fd3e 	bl	8003300 <HAL_DMA_Start_IT>
 8007884:	4603      	mov	r3, r0
 8007886:	2b00      	cmp	r3, #0
 8007888:	d004      	beq.n	8007894 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800788a:	2110      	movs	r1, #16
 800788c:	68f8      	ldr	r0, [r7, #12]
 800788e:	f7ff fe83 	bl	8007598 <I2C_ITError>
}
 8007892:	e003      	b.n	800789c <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8007894:	2140      	movs	r1, #64	@ 0x40
 8007896:	68f8      	ldr	r0, [r7, #12]
 8007898:	f000 fac8 	bl	8007e2c <I2C_Enable_IRQ>
}
 800789c:	bf00      	nop
 800789e:	3710      	adds	r7, #16
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 80078ac:	2300      	movs	r3, #0
 80078ae:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078b4:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d076      	beq.n	80079ac <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a71      	ldr	r2, [pc, #452]	@ (8007a8c <I2C_DMAError+0x1e8>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d059      	beq.n	800797e <I2C_DMAError+0xda>
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a6f      	ldr	r2, [pc, #444]	@ (8007a90 <I2C_DMAError+0x1ec>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d053      	beq.n	800797e <I2C_DMAError+0xda>
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a6d      	ldr	r2, [pc, #436]	@ (8007a94 <I2C_DMAError+0x1f0>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d04d      	beq.n	800797e <I2C_DMAError+0xda>
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a6b      	ldr	r2, [pc, #428]	@ (8007a98 <I2C_DMAError+0x1f4>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d047      	beq.n	800797e <I2C_DMAError+0xda>
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a69      	ldr	r2, [pc, #420]	@ (8007a9c <I2C_DMAError+0x1f8>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d041      	beq.n	800797e <I2C_DMAError+0xda>
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a67      	ldr	r2, [pc, #412]	@ (8007aa0 <I2C_DMAError+0x1fc>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d03b      	beq.n	800797e <I2C_DMAError+0xda>
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a65      	ldr	r2, [pc, #404]	@ (8007aa4 <I2C_DMAError+0x200>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d035      	beq.n	800797e <I2C_DMAError+0xda>
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a63      	ldr	r2, [pc, #396]	@ (8007aa8 <I2C_DMAError+0x204>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d02f      	beq.n	800797e <I2C_DMAError+0xda>
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a61      	ldr	r2, [pc, #388]	@ (8007aac <I2C_DMAError+0x208>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d029      	beq.n	800797e <I2C_DMAError+0xda>
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a5f      	ldr	r2, [pc, #380]	@ (8007ab0 <I2C_DMAError+0x20c>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d023      	beq.n	800797e <I2C_DMAError+0xda>
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a5d      	ldr	r2, [pc, #372]	@ (8007ab4 <I2C_DMAError+0x210>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d01d      	beq.n	800797e <I2C_DMAError+0xda>
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a5b      	ldr	r2, [pc, #364]	@ (8007ab8 <I2C_DMAError+0x214>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d017      	beq.n	800797e <I2C_DMAError+0xda>
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a59      	ldr	r2, [pc, #356]	@ (8007abc <I2C_DMAError+0x218>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d011      	beq.n	800797e <I2C_DMAError+0xda>
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a57      	ldr	r2, [pc, #348]	@ (8007ac0 <I2C_DMAError+0x21c>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d00b      	beq.n	800797e <I2C_DMAError+0xda>
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a55      	ldr	r2, [pc, #340]	@ (8007ac4 <I2C_DMAError+0x220>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d005      	beq.n	800797e <I2C_DMAError+0xda>
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a53      	ldr	r2, [pc, #332]	@ (8007ac8 <I2C_DMAError+0x224>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d109      	bne.n	8007992 <I2C_DMAError+0xee>
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	2b00      	cmp	r3, #0
 8007988:	bf0c      	ite	eq
 800798a:	2301      	moveq	r3, #1
 800798c:	2300      	movne	r3, #0
 800798e:	b2db      	uxtb	r3, r3
 8007990:	e008      	b.n	80079a4 <I2C_DMAError+0x100>
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	2b00      	cmp	r3, #0
 800799c:	bf0c      	ite	eq
 800799e:	2301      	moveq	r3, #1
 80079a0:	2300      	movne	r3, #0
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d001      	beq.n	80079ac <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 80079a8:	2301      	movs	r3, #1
 80079aa:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	f000 8098 	beq.w	8007ae6 <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a33      	ldr	r2, [pc, #204]	@ (8007a8c <I2C_DMAError+0x1e8>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d059      	beq.n	8007a76 <I2C_DMAError+0x1d2>
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a31      	ldr	r2, [pc, #196]	@ (8007a90 <I2C_DMAError+0x1ec>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d053      	beq.n	8007a76 <I2C_DMAError+0x1d2>
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a2f      	ldr	r2, [pc, #188]	@ (8007a94 <I2C_DMAError+0x1f0>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d04d      	beq.n	8007a76 <I2C_DMAError+0x1d2>
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a2d      	ldr	r2, [pc, #180]	@ (8007a98 <I2C_DMAError+0x1f4>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d047      	beq.n	8007a76 <I2C_DMAError+0x1d2>
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a2b      	ldr	r2, [pc, #172]	@ (8007a9c <I2C_DMAError+0x1f8>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d041      	beq.n	8007a76 <I2C_DMAError+0x1d2>
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a29      	ldr	r2, [pc, #164]	@ (8007aa0 <I2C_DMAError+0x1fc>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d03b      	beq.n	8007a76 <I2C_DMAError+0x1d2>
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a27      	ldr	r2, [pc, #156]	@ (8007aa4 <I2C_DMAError+0x200>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d035      	beq.n	8007a76 <I2C_DMAError+0x1d2>
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a25      	ldr	r2, [pc, #148]	@ (8007aa8 <I2C_DMAError+0x204>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d02f      	beq.n	8007a76 <I2C_DMAError+0x1d2>
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a23      	ldr	r2, [pc, #140]	@ (8007aac <I2C_DMAError+0x208>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d029      	beq.n	8007a76 <I2C_DMAError+0x1d2>
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a21      	ldr	r2, [pc, #132]	@ (8007ab0 <I2C_DMAError+0x20c>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d023      	beq.n	8007a76 <I2C_DMAError+0x1d2>
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a1f      	ldr	r2, [pc, #124]	@ (8007ab4 <I2C_DMAError+0x210>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d01d      	beq.n	8007a76 <I2C_DMAError+0x1d2>
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a1d      	ldr	r2, [pc, #116]	@ (8007ab8 <I2C_DMAError+0x214>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d017      	beq.n	8007a76 <I2C_DMAError+0x1d2>
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a1b      	ldr	r2, [pc, #108]	@ (8007abc <I2C_DMAError+0x218>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d011      	beq.n	8007a76 <I2C_DMAError+0x1d2>
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a19      	ldr	r2, [pc, #100]	@ (8007ac0 <I2C_DMAError+0x21c>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d00b      	beq.n	8007a76 <I2C_DMAError+0x1d2>
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a17      	ldr	r2, [pc, #92]	@ (8007ac4 <I2C_DMAError+0x220>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d005      	beq.n	8007a76 <I2C_DMAError+0x1d2>
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a15      	ldr	r2, [pc, #84]	@ (8007ac8 <I2C_DMAError+0x224>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d12a      	bne.n	8007acc <I2C_DMAError+0x228>
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	bf0c      	ite	eq
 8007a82:	2301      	moveq	r3, #1
 8007a84:	2300      	movne	r3, #0
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	e029      	b.n	8007ade <I2C_DMAError+0x23a>
 8007a8a:	bf00      	nop
 8007a8c:	40020010 	.word	0x40020010
 8007a90:	40020028 	.word	0x40020028
 8007a94:	40020040 	.word	0x40020040
 8007a98:	40020058 	.word	0x40020058
 8007a9c:	40020070 	.word	0x40020070
 8007aa0:	40020088 	.word	0x40020088
 8007aa4:	400200a0 	.word	0x400200a0
 8007aa8:	400200b8 	.word	0x400200b8
 8007aac:	40020410 	.word	0x40020410
 8007ab0:	40020428 	.word	0x40020428
 8007ab4:	40020440 	.word	0x40020440
 8007ab8:	40020458 	.word	0x40020458
 8007abc:	40020470 	.word	0x40020470
 8007ac0:	40020488 	.word	0x40020488
 8007ac4:	400204a0 	.word	0x400204a0
 8007ac8:	400204b8 	.word	0x400204b8
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	bf0c      	ite	eq
 8007ad8:	2301      	moveq	r3, #1
 8007ada:	2300      	movne	r3, #0
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d001      	beq.n	8007ae6 <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f7fd f82a 	bl	8004b40 <HAL_DMA_GetError>
 8007aec:	4603      	mov	r3, r0
 8007aee:	2b02      	cmp	r3, #2
 8007af0:	d00e      	beq.n	8007b10 <I2C_DMAError+0x26c>
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d00b      	beq.n	8007b10 <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	685a      	ldr	r2, [r3, #4]
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007b06:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007b08:	2110      	movs	r1, #16
 8007b0a:	68b8      	ldr	r0, [r7, #8]
 8007b0c:	f7ff fd44 	bl	8007598 <I2C_ITError>
  }
}
 8007b10:	bf00      	nop
 8007b12:	3710      	adds	r7, #16
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b24:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d003      	beq.n	8007b36 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b32:	2200      	movs	r2, #0
 8007b34:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d003      	beq.n	8007b46 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b42:	2200      	movs	r2, #0
 8007b44:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8007b46:	68f8      	ldr	r0, [r7, #12]
 8007b48:	f7ff fe16 	bl	8007778 <I2C_TreatErrorCallback>
}
 8007b4c:	bf00      	nop
 8007b4e:	3710      	adds	r7, #16
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	60b9      	str	r1, [r7, #8]
 8007b5e:	603b      	str	r3, [r7, #0]
 8007b60:	4613      	mov	r3, r2
 8007b62:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b64:	e03b      	b.n	8007bde <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b66:	69ba      	ldr	r2, [r7, #24]
 8007b68:	6839      	ldr	r1, [r7, #0]
 8007b6a:	68f8      	ldr	r0, [r7, #12]
 8007b6c:	f000 f84c 	bl	8007c08 <I2C_IsErrorOccurred>
 8007b70:	4603      	mov	r3, r0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d001      	beq.n	8007b7a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	e041      	b.n	8007bfe <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b80:	d02d      	beq.n	8007bde <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b82:	f7fa fc85 	bl	8002490 <HAL_GetTick>
 8007b86:	4602      	mov	r2, r0
 8007b88:	69bb      	ldr	r3, [r7, #24]
 8007b8a:	1ad3      	subs	r3, r2, r3
 8007b8c:	683a      	ldr	r2, [r7, #0]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d302      	bcc.n	8007b98 <I2C_WaitOnFlagUntilTimeout+0x44>
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d122      	bne.n	8007bde <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	699a      	ldr	r2, [r3, #24]
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	4013      	ands	r3, r2
 8007ba2:	68ba      	ldr	r2, [r7, #8]
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	bf0c      	ite	eq
 8007ba8:	2301      	moveq	r3, #1
 8007baa:	2300      	movne	r3, #0
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	461a      	mov	r2, r3
 8007bb0:	79fb      	ldrb	r3, [r7, #7]
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d113      	bne.n	8007bde <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bba:	f043 0220 	orr.w	r2, r3, #32
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2220      	movs	r2, #32
 8007bc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	e00f      	b.n	8007bfe <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	699a      	ldr	r2, [r3, #24]
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	4013      	ands	r3, r2
 8007be8:	68ba      	ldr	r2, [r7, #8]
 8007bea:	429a      	cmp	r2, r3
 8007bec:	bf0c      	ite	eq
 8007bee:	2301      	moveq	r3, #1
 8007bf0:	2300      	movne	r3, #0
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	79fb      	ldrb	r3, [r7, #7]
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d0b4      	beq.n	8007b66 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007bfc:	2300      	movs	r3, #0
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3710      	adds	r7, #16
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
	...

08007c08 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b08a      	sub	sp, #40	@ 0x28
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	60f8      	str	r0, [r7, #12]
 8007c10:	60b9      	str	r1, [r7, #8]
 8007c12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c14:	2300      	movs	r3, #0
 8007c16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	699b      	ldr	r3, [r3, #24]
 8007c20:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007c22:	2300      	movs	r3, #0
 8007c24:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007c2a:	69bb      	ldr	r3, [r7, #24]
 8007c2c:	f003 0310 	and.w	r3, r3, #16
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d068      	beq.n	8007d06 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	2210      	movs	r2, #16
 8007c3a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007c3c:	e049      	b.n	8007cd2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c44:	d045      	beq.n	8007cd2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007c46:	f7fa fc23 	bl	8002490 <HAL_GetTick>
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	69fb      	ldr	r3, [r7, #28]
 8007c4e:	1ad3      	subs	r3, r2, r3
 8007c50:	68ba      	ldr	r2, [r7, #8]
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d302      	bcc.n	8007c5c <I2C_IsErrorOccurred+0x54>
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d13a      	bne.n	8007cd2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007c66:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007c6e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	699b      	ldr	r3, [r3, #24]
 8007c76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c7e:	d121      	bne.n	8007cc4 <I2C_IsErrorOccurred+0xbc>
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c86:	d01d      	beq.n	8007cc4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007c88:	7cfb      	ldrb	r3, [r7, #19]
 8007c8a:	2b20      	cmp	r3, #32
 8007c8c:	d01a      	beq.n	8007cc4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	685a      	ldr	r2, [r3, #4]
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007c9c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007c9e:	f7fa fbf7 	bl	8002490 <HAL_GetTick>
 8007ca2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007ca4:	e00e      	b.n	8007cc4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007ca6:	f7fa fbf3 	bl	8002490 <HAL_GetTick>
 8007caa:	4602      	mov	r2, r0
 8007cac:	69fb      	ldr	r3, [r7, #28]
 8007cae:	1ad3      	subs	r3, r2, r3
 8007cb0:	2b19      	cmp	r3, #25
 8007cb2:	d907      	bls.n	8007cc4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007cb4:	6a3b      	ldr	r3, [r7, #32]
 8007cb6:	f043 0320 	orr.w	r3, r3, #32
 8007cba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8007cc2:	e006      	b.n	8007cd2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	699b      	ldr	r3, [r3, #24]
 8007cca:	f003 0320 	and.w	r3, r3, #32
 8007cce:	2b20      	cmp	r3, #32
 8007cd0:	d1e9      	bne.n	8007ca6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	699b      	ldr	r3, [r3, #24]
 8007cd8:	f003 0320 	and.w	r3, r3, #32
 8007cdc:	2b20      	cmp	r3, #32
 8007cde:	d003      	beq.n	8007ce8 <I2C_IsErrorOccurred+0xe0>
 8007ce0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d0aa      	beq.n	8007c3e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007ce8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d103      	bne.n	8007cf8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	2220      	movs	r2, #32
 8007cf6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007cf8:	6a3b      	ldr	r3, [r7, #32]
 8007cfa:	f043 0304 	orr.w	r3, r3, #4
 8007cfe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007d00:	2301      	movs	r3, #1
 8007d02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	699b      	ldr	r3, [r3, #24]
 8007d0c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007d0e:	69bb      	ldr	r3, [r7, #24]
 8007d10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d00b      	beq.n	8007d30 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007d18:	6a3b      	ldr	r3, [r7, #32]
 8007d1a:	f043 0301 	orr.w	r3, r3, #1
 8007d1e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007d28:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007d30:	69bb      	ldr	r3, [r7, #24]
 8007d32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d00b      	beq.n	8007d52 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007d3a:	6a3b      	ldr	r3, [r7, #32]
 8007d3c:	f043 0308 	orr.w	r3, r3, #8
 8007d40:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007d4a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007d52:	69bb      	ldr	r3, [r7, #24]
 8007d54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d00b      	beq.n	8007d74 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007d5c:	6a3b      	ldr	r3, [r7, #32]
 8007d5e:	f043 0302 	orr.w	r3, r3, #2
 8007d62:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007d6c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8007d74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d01c      	beq.n	8007db6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007d7c:	68f8      	ldr	r0, [r7, #12]
 8007d7e:	f7ff fd22 	bl	80077c6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	6859      	ldr	r1, [r3, #4]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	4b0d      	ldr	r3, [pc, #52]	@ (8007dc4 <I2C_IsErrorOccurred+0x1bc>)
 8007d8e:	400b      	ands	r3, r1
 8007d90:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d96:	6a3b      	ldr	r3, [r7, #32]
 8007d98:	431a      	orrs	r2, r3
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2220      	movs	r2, #32
 8007da2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2200      	movs	r2, #0
 8007daa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2200      	movs	r2, #0
 8007db2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8007db6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3728      	adds	r7, #40	@ 0x28
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	fe00e800 	.word	0xfe00e800

08007dc8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b087      	sub	sp, #28
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	607b      	str	r3, [r7, #4]
 8007dd2:	460b      	mov	r3, r1
 8007dd4:	817b      	strh	r3, [r7, #10]
 8007dd6:	4613      	mov	r3, r2
 8007dd8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007dda:	897b      	ldrh	r3, [r7, #10]
 8007ddc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007de0:	7a7b      	ldrb	r3, [r7, #9]
 8007de2:	041b      	lsls	r3, r3, #16
 8007de4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007de8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007dee:	6a3b      	ldr	r3, [r7, #32]
 8007df0:	4313      	orrs	r3, r2
 8007df2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007df6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	685a      	ldr	r2, [r3, #4]
 8007dfe:	6a3b      	ldr	r3, [r7, #32]
 8007e00:	0d5b      	lsrs	r3, r3, #21
 8007e02:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007e06:	4b08      	ldr	r3, [pc, #32]	@ (8007e28 <I2C_TransferConfig+0x60>)
 8007e08:	430b      	orrs	r3, r1
 8007e0a:	43db      	mvns	r3, r3
 8007e0c:	ea02 0103 	and.w	r1, r2, r3
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	697a      	ldr	r2, [r7, #20]
 8007e16:	430a      	orrs	r2, r1
 8007e18:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007e1a:	bf00      	nop
 8007e1c:	371c      	adds	r7, #28
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr
 8007e26:	bf00      	nop
 8007e28:	03ff63ff 	.word	0x03ff63ff

08007e2c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b085      	sub	sp, #20
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	460b      	mov	r3, r1
 8007e36:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e40:	4a39      	ldr	r2, [pc, #228]	@ (8007f28 <I2C_Enable_IRQ+0xfc>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d032      	beq.n	8007eac <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8007e4a:	4a38      	ldr	r2, [pc, #224]	@ (8007f2c <I2C_Enable_IRQ+0x100>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d02d      	beq.n	8007eac <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8007e54:	4a36      	ldr	r2, [pc, #216]	@ (8007f30 <I2C_Enable_IRQ+0x104>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d028      	beq.n	8007eac <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007e5a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	da03      	bge.n	8007e6a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007e68:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007e6a:	887b      	ldrh	r3, [r7, #2]
 8007e6c:	f003 0301 	and.w	r3, r3, #1
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d003      	beq.n	8007e7c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8007e7a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007e7c:	887b      	ldrh	r3, [r7, #2]
 8007e7e:	f003 0302 	and.w	r3, r3, #2
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d003      	beq.n	8007e8e <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8007e8c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007e8e:	887b      	ldrh	r3, [r7, #2]
 8007e90:	2b10      	cmp	r3, #16
 8007e92:	d103      	bne.n	8007e9c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007e9a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007e9c:	887b      	ldrh	r3, [r7, #2]
 8007e9e:	2b20      	cmp	r3, #32
 8007ea0:	d133      	bne.n	8007f0a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f043 0320 	orr.w	r3, r3, #32
 8007ea8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007eaa:	e02e      	b.n	8007f0a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007eac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	da03      	bge.n	8007ebc <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007eba:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007ebc:	887b      	ldrh	r3, [r7, #2]
 8007ebe:	f003 0301 	and.w	r3, r3, #1
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d003      	beq.n	8007ece <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8007ecc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007ece:	887b      	ldrh	r3, [r7, #2]
 8007ed0:	f003 0302 	and.w	r3, r3, #2
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d003      	beq.n	8007ee0 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8007ede:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007ee0:	887b      	ldrh	r3, [r7, #2]
 8007ee2:	2b10      	cmp	r3, #16
 8007ee4:	d103      	bne.n	8007eee <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007eec:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007eee:	887b      	ldrh	r3, [r7, #2]
 8007ef0:	2b20      	cmp	r3, #32
 8007ef2:	d103      	bne.n	8007efc <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007efa:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007efc:	887b      	ldrh	r3, [r7, #2]
 8007efe:	2b40      	cmp	r3, #64	@ 0x40
 8007f00:	d103      	bne.n	8007f0a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f08:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	6819      	ldr	r1, [r3, #0]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	68fa      	ldr	r2, [r7, #12]
 8007f16:	430a      	orrs	r2, r1
 8007f18:	601a      	str	r2, [r3, #0]
}
 8007f1a:	bf00      	nop
 8007f1c:	3714      	adds	r7, #20
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f24:	4770      	bx	lr
 8007f26:	bf00      	nop
 8007f28:	080064a7 	.word	0x080064a7
 8007f2c:	080068c9 	.word	0x080068c9
 8007f30:	0800667d 	.word	0x0800667d

08007f34 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b085      	sub	sp, #20
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007f40:	2300      	movs	r3, #0
 8007f42:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007f44:	887b      	ldrh	r3, [r7, #2]
 8007f46:	f003 0301 	and.w	r3, r3, #1
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d00f      	beq.n	8007f6e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8007f54:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007f62:	2b28      	cmp	r3, #40	@ 0x28
 8007f64:	d003      	beq.n	8007f6e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007f6c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007f6e:	887b      	ldrh	r3, [r7, #2]
 8007f70:	f003 0302 	and.w	r3, r3, #2
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d00f      	beq.n	8007f98 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8007f7e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007f8c:	2b28      	cmp	r3, #40	@ 0x28
 8007f8e:	d003      	beq.n	8007f98 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007f96:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007f98:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	da03      	bge.n	8007fa8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007fa6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007fa8:	887b      	ldrh	r3, [r7, #2]
 8007faa:	2b10      	cmp	r3, #16
 8007fac:	d103      	bne.n	8007fb6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007fb4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007fb6:	887b      	ldrh	r3, [r7, #2]
 8007fb8:	2b20      	cmp	r3, #32
 8007fba:	d103      	bne.n	8007fc4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f043 0320 	orr.w	r3, r3, #32
 8007fc2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007fc4:	887b      	ldrh	r3, [r7, #2]
 8007fc6:	2b40      	cmp	r3, #64	@ 0x40
 8007fc8:	d103      	bne.n	8007fd2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fd0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	6819      	ldr	r1, [r3, #0]
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	43da      	mvns	r2, r3
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	400a      	ands	r2, r1
 8007fe2:	601a      	str	r2, [r3, #0]
}
 8007fe4:	bf00      	nop
 8007fe6:	3714      	adds	r7, #20
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b083      	sub	sp, #12
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008000:	b2db      	uxtb	r3, r3
 8008002:	2b20      	cmp	r3, #32
 8008004:	d138      	bne.n	8008078 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800800c:	2b01      	cmp	r3, #1
 800800e:	d101      	bne.n	8008014 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008010:	2302      	movs	r3, #2
 8008012:	e032      	b.n	800807a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2201      	movs	r2, #1
 8008018:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2224      	movs	r2, #36	@ 0x24
 8008020:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f022 0201 	bic.w	r2, r2, #1
 8008032:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008042:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	6819      	ldr	r1, [r3, #0]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	683a      	ldr	r2, [r7, #0]
 8008050:	430a      	orrs	r2, r1
 8008052:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f042 0201 	orr.w	r2, r2, #1
 8008062:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2220      	movs	r2, #32
 8008068:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2200      	movs	r2, #0
 8008070:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008074:	2300      	movs	r3, #0
 8008076:	e000      	b.n	800807a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008078:	2302      	movs	r3, #2
  }
}
 800807a:	4618      	mov	r0, r3
 800807c:	370c      	adds	r7, #12
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr

08008086 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008086:	b480      	push	{r7}
 8008088:	b085      	sub	sp, #20
 800808a:	af00      	add	r7, sp, #0
 800808c:	6078      	str	r0, [r7, #4]
 800808e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008096:	b2db      	uxtb	r3, r3
 8008098:	2b20      	cmp	r3, #32
 800809a:	d139      	bne.n	8008110 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d101      	bne.n	80080aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80080a6:	2302      	movs	r3, #2
 80080a8:	e033      	b.n	8008112 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2201      	movs	r2, #1
 80080ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2224      	movs	r2, #36	@ 0x24
 80080b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	681a      	ldr	r2, [r3, #0]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f022 0201 	bic.w	r2, r2, #1
 80080c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80080d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	021b      	lsls	r3, r3, #8
 80080de:	68fa      	ldr	r2, [r7, #12]
 80080e0:	4313      	orrs	r3, r2
 80080e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	68fa      	ldr	r2, [r7, #12]
 80080ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	681a      	ldr	r2, [r3, #0]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f042 0201 	orr.w	r2, r2, #1
 80080fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2220      	movs	r2, #32
 8008100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800810c:	2300      	movs	r3, #0
 800810e:	e000      	b.n	8008112 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008110:	2302      	movs	r3, #2
  }
}
 8008112:	4618      	mov	r0, r3
 8008114:	3714      	adds	r7, #20
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr
	...

08008120 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008128:	4b19      	ldr	r3, [pc, #100]	@ (8008190 <HAL_PWREx_ConfigSupply+0x70>)
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	f003 0304 	and.w	r3, r3, #4
 8008130:	2b04      	cmp	r3, #4
 8008132:	d00a      	beq.n	800814a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008134:	4b16      	ldr	r3, [pc, #88]	@ (8008190 <HAL_PWREx_ConfigSupply+0x70>)
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	f003 0307 	and.w	r3, r3, #7
 800813c:	687a      	ldr	r2, [r7, #4]
 800813e:	429a      	cmp	r2, r3
 8008140:	d001      	beq.n	8008146 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008142:	2301      	movs	r3, #1
 8008144:	e01f      	b.n	8008186 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008146:	2300      	movs	r3, #0
 8008148:	e01d      	b.n	8008186 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800814a:	4b11      	ldr	r3, [pc, #68]	@ (8008190 <HAL_PWREx_ConfigSupply+0x70>)
 800814c:	68db      	ldr	r3, [r3, #12]
 800814e:	f023 0207 	bic.w	r2, r3, #7
 8008152:	490f      	ldr	r1, [pc, #60]	@ (8008190 <HAL_PWREx_ConfigSupply+0x70>)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	4313      	orrs	r3, r2
 8008158:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800815a:	f7fa f999 	bl	8002490 <HAL_GetTick>
 800815e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008160:	e009      	b.n	8008176 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008162:	f7fa f995 	bl	8002490 <HAL_GetTick>
 8008166:	4602      	mov	r2, r0
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	1ad3      	subs	r3, r2, r3
 800816c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008170:	d901      	bls.n	8008176 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008172:	2301      	movs	r3, #1
 8008174:	e007      	b.n	8008186 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008176:	4b06      	ldr	r3, [pc, #24]	@ (8008190 <HAL_PWREx_ConfigSupply+0x70>)
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800817e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008182:	d1ee      	bne.n	8008162 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008184:	2300      	movs	r3, #0
}
 8008186:	4618      	mov	r0, r3
 8008188:	3710      	adds	r7, #16
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop
 8008190:	58024800 	.word	0x58024800

08008194 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b08c      	sub	sp, #48	@ 0x30
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d102      	bne.n	80081a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80081a2:	2301      	movs	r3, #1
 80081a4:	f000 bc1f 	b.w	80089e6 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f003 0301 	and.w	r3, r3, #1
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	f000 80b3 	beq.w	800831c <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80081b6:	4b95      	ldr	r3, [pc, #596]	@ (800840c <HAL_RCC_OscConfig+0x278>)
 80081b8:	691b      	ldr	r3, [r3, #16]
 80081ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80081be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80081c0:	4b92      	ldr	r3, [pc, #584]	@ (800840c <HAL_RCC_OscConfig+0x278>)
 80081c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80081c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081c8:	2b10      	cmp	r3, #16
 80081ca:	d007      	beq.n	80081dc <HAL_RCC_OscConfig+0x48>
 80081cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081ce:	2b18      	cmp	r3, #24
 80081d0:	d112      	bne.n	80081f8 <HAL_RCC_OscConfig+0x64>
 80081d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081d4:	f003 0303 	and.w	r3, r3, #3
 80081d8:	2b02      	cmp	r3, #2
 80081da:	d10d      	bne.n	80081f8 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80081dc:	4b8b      	ldr	r3, [pc, #556]	@ (800840c <HAL_RCC_OscConfig+0x278>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	f000 8098 	beq.w	800831a <HAL_RCC_OscConfig+0x186>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	f040 8093 	bne.w	800831a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80081f4:	2301      	movs	r3, #1
 80081f6:	e3f6      	b.n	80089e6 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008200:	d106      	bne.n	8008210 <HAL_RCC_OscConfig+0x7c>
 8008202:	4b82      	ldr	r3, [pc, #520]	@ (800840c <HAL_RCC_OscConfig+0x278>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a81      	ldr	r2, [pc, #516]	@ (800840c <HAL_RCC_OscConfig+0x278>)
 8008208:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800820c:	6013      	str	r3, [r2, #0]
 800820e:	e058      	b.n	80082c2 <HAL_RCC_OscConfig+0x12e>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d112      	bne.n	800823e <HAL_RCC_OscConfig+0xaa>
 8008218:	4b7c      	ldr	r3, [pc, #496]	@ (800840c <HAL_RCC_OscConfig+0x278>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a7b      	ldr	r2, [pc, #492]	@ (800840c <HAL_RCC_OscConfig+0x278>)
 800821e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008222:	6013      	str	r3, [r2, #0]
 8008224:	4b79      	ldr	r3, [pc, #484]	@ (800840c <HAL_RCC_OscConfig+0x278>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a78      	ldr	r2, [pc, #480]	@ (800840c <HAL_RCC_OscConfig+0x278>)
 800822a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800822e:	6013      	str	r3, [r2, #0]
 8008230:	4b76      	ldr	r3, [pc, #472]	@ (800840c <HAL_RCC_OscConfig+0x278>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a75      	ldr	r2, [pc, #468]	@ (800840c <HAL_RCC_OscConfig+0x278>)
 8008236:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800823a:	6013      	str	r3, [r2, #0]
 800823c:	e041      	b.n	80082c2 <HAL_RCC_OscConfig+0x12e>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008246:	d112      	bne.n	800826e <HAL_RCC_OscConfig+0xda>
 8008248:	4b70      	ldr	r3, [pc, #448]	@ (800840c <HAL_RCC_OscConfig+0x278>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a6f      	ldr	r2, [pc, #444]	@ (800840c <HAL_RCC_OscConfig+0x278>)
 800824e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008252:	6013      	str	r3, [r2, #0]
 8008254:	4b6d      	ldr	r3, [pc, #436]	@ (800840c <HAL_RCC_OscConfig+0x278>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a6c      	ldr	r2, [pc, #432]	@ (800840c <HAL_RCC_OscConfig+0x278>)
 800825a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800825e:	6013      	str	r3, [r2, #0]
 8008260:	4b6a      	ldr	r3, [pc, #424]	@ (800840c <HAL_RCC_OscConfig+0x278>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a69      	ldr	r2, [pc, #420]	@ (800840c <HAL_RCC_OscConfig+0x278>)
 8008266:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800826a:	6013      	str	r3, [r2, #0]
 800826c:	e029      	b.n	80082c2 <HAL_RCC_OscConfig+0x12e>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8008276:	d112      	bne.n	800829e <HAL_RCC_OscConfig+0x10a>
 8008278:	4b64      	ldr	r3, [pc, #400]	@ (800840c <HAL_RCC_OscConfig+0x278>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a63      	ldr	r2, [pc, #396]	@ (800840c <HAL_RCC_OscConfig+0x278>)
 800827e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008282:	6013      	str	r3, [r2, #0]
 8008284:	4b61      	ldr	r3, [pc, #388]	@ (800840c <HAL_RCC_OscConfig+0x278>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a60      	ldr	r2, [pc, #384]	@ (800840c <HAL_RCC_OscConfig+0x278>)
 800828a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800828e:	6013      	str	r3, [r2, #0]
 8008290:	4b5e      	ldr	r3, [pc, #376]	@ (800840c <HAL_RCC_OscConfig+0x278>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a5d      	ldr	r2, [pc, #372]	@ (800840c <HAL_RCC_OscConfig+0x278>)
 8008296:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800829a:	6013      	str	r3, [r2, #0]
 800829c:	e011      	b.n	80082c2 <HAL_RCC_OscConfig+0x12e>
 800829e:	4b5b      	ldr	r3, [pc, #364]	@ (800840c <HAL_RCC_OscConfig+0x278>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a5a      	ldr	r2, [pc, #360]	@ (800840c <HAL_RCC_OscConfig+0x278>)
 80082a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80082a8:	6013      	str	r3, [r2, #0]
 80082aa:	4b58      	ldr	r3, [pc, #352]	@ (800840c <HAL_RCC_OscConfig+0x278>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a57      	ldr	r2, [pc, #348]	@ (800840c <HAL_RCC_OscConfig+0x278>)
 80082b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80082b4:	6013      	str	r3, [r2, #0]
 80082b6:	4b55      	ldr	r3, [pc, #340]	@ (800840c <HAL_RCC_OscConfig+0x278>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a54      	ldr	r2, [pc, #336]	@ (800840c <HAL_RCC_OscConfig+0x278>)
 80082bc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80082c0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d013      	beq.n	80082f2 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082ca:	f7fa f8e1 	bl	8002490 <HAL_GetTick>
 80082ce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80082d0:	e008      	b.n	80082e4 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80082d2:	f7fa f8dd 	bl	8002490 <HAL_GetTick>
 80082d6:	4602      	mov	r2, r0
 80082d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082da:	1ad3      	subs	r3, r2, r3
 80082dc:	2b64      	cmp	r3, #100	@ 0x64
 80082de:	d901      	bls.n	80082e4 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80082e0:	2303      	movs	r3, #3
 80082e2:	e380      	b.n	80089e6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80082e4:	4b49      	ldr	r3, [pc, #292]	@ (800840c <HAL_RCC_OscConfig+0x278>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d0f0      	beq.n	80082d2 <HAL_RCC_OscConfig+0x13e>
 80082f0:	e014      	b.n	800831c <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082f2:	f7fa f8cd 	bl	8002490 <HAL_GetTick>
 80082f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80082f8:	e008      	b.n	800830c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80082fa:	f7fa f8c9 	bl	8002490 <HAL_GetTick>
 80082fe:	4602      	mov	r2, r0
 8008300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008302:	1ad3      	subs	r3, r2, r3
 8008304:	2b64      	cmp	r3, #100	@ 0x64
 8008306:	d901      	bls.n	800830c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8008308:	2303      	movs	r3, #3
 800830a:	e36c      	b.n	80089e6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800830c:	4b3f      	ldr	r3, [pc, #252]	@ (800840c <HAL_RCC_OscConfig+0x278>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008314:	2b00      	cmp	r3, #0
 8008316:	d1f0      	bne.n	80082fa <HAL_RCC_OscConfig+0x166>
 8008318:	e000      	b.n	800831c <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800831a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f003 0302 	and.w	r3, r3, #2
 8008324:	2b00      	cmp	r3, #0
 8008326:	f000 808c 	beq.w	8008442 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800832a:	4b38      	ldr	r3, [pc, #224]	@ (800840c <HAL_RCC_OscConfig+0x278>)
 800832c:	691b      	ldr	r3, [r3, #16]
 800832e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008332:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008334:	4b35      	ldr	r3, [pc, #212]	@ (800840c <HAL_RCC_OscConfig+0x278>)
 8008336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008338:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800833a:	6a3b      	ldr	r3, [r7, #32]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d007      	beq.n	8008350 <HAL_RCC_OscConfig+0x1bc>
 8008340:	6a3b      	ldr	r3, [r7, #32]
 8008342:	2b18      	cmp	r3, #24
 8008344:	d137      	bne.n	80083b6 <HAL_RCC_OscConfig+0x222>
 8008346:	69fb      	ldr	r3, [r7, #28]
 8008348:	f003 0303 	and.w	r3, r3, #3
 800834c:	2b00      	cmp	r3, #0
 800834e:	d132      	bne.n	80083b6 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008350:	4b2e      	ldr	r3, [pc, #184]	@ (800840c <HAL_RCC_OscConfig+0x278>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f003 0304 	and.w	r3, r3, #4
 8008358:	2b00      	cmp	r3, #0
 800835a:	d005      	beq.n	8008368 <HAL_RCC_OscConfig+0x1d4>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	68db      	ldr	r3, [r3, #12]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d101      	bne.n	8008368 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8008364:	2301      	movs	r3, #1
 8008366:	e33e      	b.n	80089e6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008368:	4b28      	ldr	r3, [pc, #160]	@ (800840c <HAL_RCC_OscConfig+0x278>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f023 0219 	bic.w	r2, r3, #25
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	68db      	ldr	r3, [r3, #12]
 8008374:	4925      	ldr	r1, [pc, #148]	@ (800840c <HAL_RCC_OscConfig+0x278>)
 8008376:	4313      	orrs	r3, r2
 8008378:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800837a:	f7fa f889 	bl	8002490 <HAL_GetTick>
 800837e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008380:	e008      	b.n	8008394 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008382:	f7fa f885 	bl	8002490 <HAL_GetTick>
 8008386:	4602      	mov	r2, r0
 8008388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800838a:	1ad3      	subs	r3, r2, r3
 800838c:	2b02      	cmp	r3, #2
 800838e:	d901      	bls.n	8008394 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8008390:	2303      	movs	r3, #3
 8008392:	e328      	b.n	80089e6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008394:	4b1d      	ldr	r3, [pc, #116]	@ (800840c <HAL_RCC_OscConfig+0x278>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f003 0304 	and.w	r3, r3, #4
 800839c:	2b00      	cmp	r3, #0
 800839e:	d0f0      	beq.n	8008382 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083a0:	4b1a      	ldr	r3, [pc, #104]	@ (800840c <HAL_RCC_OscConfig+0x278>)
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	691b      	ldr	r3, [r3, #16]
 80083ac:	061b      	lsls	r3, r3, #24
 80083ae:	4917      	ldr	r1, [pc, #92]	@ (800840c <HAL_RCC_OscConfig+0x278>)
 80083b0:	4313      	orrs	r3, r2
 80083b2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80083b4:	e045      	b.n	8008442 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	68db      	ldr	r3, [r3, #12]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d028      	beq.n	8008410 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80083be:	4b13      	ldr	r3, [pc, #76]	@ (800840c <HAL_RCC_OscConfig+0x278>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f023 0219 	bic.w	r2, r3, #25
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	68db      	ldr	r3, [r3, #12]
 80083ca:	4910      	ldr	r1, [pc, #64]	@ (800840c <HAL_RCC_OscConfig+0x278>)
 80083cc:	4313      	orrs	r3, r2
 80083ce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083d0:	f7fa f85e 	bl	8002490 <HAL_GetTick>
 80083d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80083d6:	e008      	b.n	80083ea <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80083d8:	f7fa f85a 	bl	8002490 <HAL_GetTick>
 80083dc:	4602      	mov	r2, r0
 80083de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083e0:	1ad3      	subs	r3, r2, r3
 80083e2:	2b02      	cmp	r3, #2
 80083e4:	d901      	bls.n	80083ea <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80083e6:	2303      	movs	r3, #3
 80083e8:	e2fd      	b.n	80089e6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80083ea:	4b08      	ldr	r3, [pc, #32]	@ (800840c <HAL_RCC_OscConfig+0x278>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f003 0304 	and.w	r3, r3, #4
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d0f0      	beq.n	80083d8 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083f6:	4b05      	ldr	r3, [pc, #20]	@ (800840c <HAL_RCC_OscConfig+0x278>)
 80083f8:	685b      	ldr	r3, [r3, #4]
 80083fa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	691b      	ldr	r3, [r3, #16]
 8008402:	061b      	lsls	r3, r3, #24
 8008404:	4901      	ldr	r1, [pc, #4]	@ (800840c <HAL_RCC_OscConfig+0x278>)
 8008406:	4313      	orrs	r3, r2
 8008408:	604b      	str	r3, [r1, #4]
 800840a:	e01a      	b.n	8008442 <HAL_RCC_OscConfig+0x2ae>
 800840c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008410:	4b97      	ldr	r3, [pc, #604]	@ (8008670 <HAL_RCC_OscConfig+0x4dc>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a96      	ldr	r2, [pc, #600]	@ (8008670 <HAL_RCC_OscConfig+0x4dc>)
 8008416:	f023 0301 	bic.w	r3, r3, #1
 800841a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800841c:	f7fa f838 	bl	8002490 <HAL_GetTick>
 8008420:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008422:	e008      	b.n	8008436 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008424:	f7fa f834 	bl	8002490 <HAL_GetTick>
 8008428:	4602      	mov	r2, r0
 800842a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800842c:	1ad3      	subs	r3, r2, r3
 800842e:	2b02      	cmp	r3, #2
 8008430:	d901      	bls.n	8008436 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8008432:	2303      	movs	r3, #3
 8008434:	e2d7      	b.n	80089e6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008436:	4b8e      	ldr	r3, [pc, #568]	@ (8008670 <HAL_RCC_OscConfig+0x4dc>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f003 0304 	and.w	r3, r3, #4
 800843e:	2b00      	cmp	r3, #0
 8008440:	d1f0      	bne.n	8008424 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f003 0310 	and.w	r3, r3, #16
 800844a:	2b00      	cmp	r3, #0
 800844c:	d06a      	beq.n	8008524 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800844e:	4b88      	ldr	r3, [pc, #544]	@ (8008670 <HAL_RCC_OscConfig+0x4dc>)
 8008450:	691b      	ldr	r3, [r3, #16]
 8008452:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008456:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008458:	4b85      	ldr	r3, [pc, #532]	@ (8008670 <HAL_RCC_OscConfig+0x4dc>)
 800845a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800845c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800845e:	69bb      	ldr	r3, [r7, #24]
 8008460:	2b08      	cmp	r3, #8
 8008462:	d007      	beq.n	8008474 <HAL_RCC_OscConfig+0x2e0>
 8008464:	69bb      	ldr	r3, [r7, #24]
 8008466:	2b18      	cmp	r3, #24
 8008468:	d11b      	bne.n	80084a2 <HAL_RCC_OscConfig+0x30e>
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	f003 0303 	and.w	r3, r3, #3
 8008470:	2b01      	cmp	r3, #1
 8008472:	d116      	bne.n	80084a2 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008474:	4b7e      	ldr	r3, [pc, #504]	@ (8008670 <HAL_RCC_OscConfig+0x4dc>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800847c:	2b00      	cmp	r3, #0
 800847e:	d005      	beq.n	800848c <HAL_RCC_OscConfig+0x2f8>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	69db      	ldr	r3, [r3, #28]
 8008484:	2b80      	cmp	r3, #128	@ 0x80
 8008486:	d001      	beq.n	800848c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8008488:	2301      	movs	r3, #1
 800848a:	e2ac      	b.n	80089e6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800848c:	4b78      	ldr	r3, [pc, #480]	@ (8008670 <HAL_RCC_OscConfig+0x4dc>)
 800848e:	68db      	ldr	r3, [r3, #12]
 8008490:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6a1b      	ldr	r3, [r3, #32]
 8008498:	061b      	lsls	r3, r3, #24
 800849a:	4975      	ldr	r1, [pc, #468]	@ (8008670 <HAL_RCC_OscConfig+0x4dc>)
 800849c:	4313      	orrs	r3, r2
 800849e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80084a0:	e040      	b.n	8008524 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	69db      	ldr	r3, [r3, #28]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d023      	beq.n	80084f2 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80084aa:	4b71      	ldr	r3, [pc, #452]	@ (8008670 <HAL_RCC_OscConfig+0x4dc>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a70      	ldr	r2, [pc, #448]	@ (8008670 <HAL_RCC_OscConfig+0x4dc>)
 80084b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084b6:	f7f9 ffeb 	bl	8002490 <HAL_GetTick>
 80084ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80084bc:	e008      	b.n	80084d0 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80084be:	f7f9 ffe7 	bl	8002490 <HAL_GetTick>
 80084c2:	4602      	mov	r2, r0
 80084c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c6:	1ad3      	subs	r3, r2, r3
 80084c8:	2b02      	cmp	r3, #2
 80084ca:	d901      	bls.n	80084d0 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80084cc:	2303      	movs	r3, #3
 80084ce:	e28a      	b.n	80089e6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80084d0:	4b67      	ldr	r3, [pc, #412]	@ (8008670 <HAL_RCC_OscConfig+0x4dc>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d0f0      	beq.n	80084be <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80084dc:	4b64      	ldr	r3, [pc, #400]	@ (8008670 <HAL_RCC_OscConfig+0x4dc>)
 80084de:	68db      	ldr	r3, [r3, #12]
 80084e0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6a1b      	ldr	r3, [r3, #32]
 80084e8:	061b      	lsls	r3, r3, #24
 80084ea:	4961      	ldr	r1, [pc, #388]	@ (8008670 <HAL_RCC_OscConfig+0x4dc>)
 80084ec:	4313      	orrs	r3, r2
 80084ee:	60cb      	str	r3, [r1, #12]
 80084f0:	e018      	b.n	8008524 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80084f2:	4b5f      	ldr	r3, [pc, #380]	@ (8008670 <HAL_RCC_OscConfig+0x4dc>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a5e      	ldr	r2, [pc, #376]	@ (8008670 <HAL_RCC_OscConfig+0x4dc>)
 80084f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80084fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084fe:	f7f9 ffc7 	bl	8002490 <HAL_GetTick>
 8008502:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008504:	e008      	b.n	8008518 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008506:	f7f9 ffc3 	bl	8002490 <HAL_GetTick>
 800850a:	4602      	mov	r2, r0
 800850c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800850e:	1ad3      	subs	r3, r2, r3
 8008510:	2b02      	cmp	r3, #2
 8008512:	d901      	bls.n	8008518 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8008514:	2303      	movs	r3, #3
 8008516:	e266      	b.n	80089e6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008518:	4b55      	ldr	r3, [pc, #340]	@ (8008670 <HAL_RCC_OscConfig+0x4dc>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008520:	2b00      	cmp	r3, #0
 8008522:	d1f0      	bne.n	8008506 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f003 0308 	and.w	r3, r3, #8
 800852c:	2b00      	cmp	r3, #0
 800852e:	d036      	beq.n	800859e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	695b      	ldr	r3, [r3, #20]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d019      	beq.n	800856c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008538:	4b4d      	ldr	r3, [pc, #308]	@ (8008670 <HAL_RCC_OscConfig+0x4dc>)
 800853a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800853c:	4a4c      	ldr	r2, [pc, #304]	@ (8008670 <HAL_RCC_OscConfig+0x4dc>)
 800853e:	f043 0301 	orr.w	r3, r3, #1
 8008542:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008544:	f7f9 ffa4 	bl	8002490 <HAL_GetTick>
 8008548:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800854a:	e008      	b.n	800855e <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800854c:	f7f9 ffa0 	bl	8002490 <HAL_GetTick>
 8008550:	4602      	mov	r2, r0
 8008552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008554:	1ad3      	subs	r3, r2, r3
 8008556:	2b02      	cmp	r3, #2
 8008558:	d901      	bls.n	800855e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800855a:	2303      	movs	r3, #3
 800855c:	e243      	b.n	80089e6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800855e:	4b44      	ldr	r3, [pc, #272]	@ (8008670 <HAL_RCC_OscConfig+0x4dc>)
 8008560:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008562:	f003 0302 	and.w	r3, r3, #2
 8008566:	2b00      	cmp	r3, #0
 8008568:	d0f0      	beq.n	800854c <HAL_RCC_OscConfig+0x3b8>
 800856a:	e018      	b.n	800859e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800856c:	4b40      	ldr	r3, [pc, #256]	@ (8008670 <HAL_RCC_OscConfig+0x4dc>)
 800856e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008570:	4a3f      	ldr	r2, [pc, #252]	@ (8008670 <HAL_RCC_OscConfig+0x4dc>)
 8008572:	f023 0301 	bic.w	r3, r3, #1
 8008576:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008578:	f7f9 ff8a 	bl	8002490 <HAL_GetTick>
 800857c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800857e:	e008      	b.n	8008592 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008580:	f7f9 ff86 	bl	8002490 <HAL_GetTick>
 8008584:	4602      	mov	r2, r0
 8008586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008588:	1ad3      	subs	r3, r2, r3
 800858a:	2b02      	cmp	r3, #2
 800858c:	d901      	bls.n	8008592 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800858e:	2303      	movs	r3, #3
 8008590:	e229      	b.n	80089e6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008592:	4b37      	ldr	r3, [pc, #220]	@ (8008670 <HAL_RCC_OscConfig+0x4dc>)
 8008594:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008596:	f003 0302 	and.w	r3, r3, #2
 800859a:	2b00      	cmp	r3, #0
 800859c:	d1f0      	bne.n	8008580 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f003 0320 	and.w	r3, r3, #32
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d036      	beq.n	8008618 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	699b      	ldr	r3, [r3, #24]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d019      	beq.n	80085e6 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80085b2:	4b2f      	ldr	r3, [pc, #188]	@ (8008670 <HAL_RCC_OscConfig+0x4dc>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a2e      	ldr	r2, [pc, #184]	@ (8008670 <HAL_RCC_OscConfig+0x4dc>)
 80085b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80085bc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80085be:	f7f9 ff67 	bl	8002490 <HAL_GetTick>
 80085c2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80085c4:	e008      	b.n	80085d8 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80085c6:	f7f9 ff63 	bl	8002490 <HAL_GetTick>
 80085ca:	4602      	mov	r2, r0
 80085cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ce:	1ad3      	subs	r3, r2, r3
 80085d0:	2b02      	cmp	r3, #2
 80085d2:	d901      	bls.n	80085d8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80085d4:	2303      	movs	r3, #3
 80085d6:	e206      	b.n	80089e6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80085d8:	4b25      	ldr	r3, [pc, #148]	@ (8008670 <HAL_RCC_OscConfig+0x4dc>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d0f0      	beq.n	80085c6 <HAL_RCC_OscConfig+0x432>
 80085e4:	e018      	b.n	8008618 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80085e6:	4b22      	ldr	r3, [pc, #136]	@ (8008670 <HAL_RCC_OscConfig+0x4dc>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a21      	ldr	r2, [pc, #132]	@ (8008670 <HAL_RCC_OscConfig+0x4dc>)
 80085ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80085f0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80085f2:	f7f9 ff4d 	bl	8002490 <HAL_GetTick>
 80085f6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80085f8:	e008      	b.n	800860c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80085fa:	f7f9 ff49 	bl	8002490 <HAL_GetTick>
 80085fe:	4602      	mov	r2, r0
 8008600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008602:	1ad3      	subs	r3, r2, r3
 8008604:	2b02      	cmp	r3, #2
 8008606:	d901      	bls.n	800860c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8008608:	2303      	movs	r3, #3
 800860a:	e1ec      	b.n	80089e6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800860c:	4b18      	ldr	r3, [pc, #96]	@ (8008670 <HAL_RCC_OscConfig+0x4dc>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008614:	2b00      	cmp	r3, #0
 8008616:	d1f0      	bne.n	80085fa <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f003 0304 	and.w	r3, r3, #4
 8008620:	2b00      	cmp	r3, #0
 8008622:	f000 80af 	beq.w	8008784 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008626:	4b13      	ldr	r3, [pc, #76]	@ (8008674 <HAL_RCC_OscConfig+0x4e0>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a12      	ldr	r2, [pc, #72]	@ (8008674 <HAL_RCC_OscConfig+0x4e0>)
 800862c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008630:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008632:	f7f9 ff2d 	bl	8002490 <HAL_GetTick>
 8008636:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008638:	e008      	b.n	800864c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800863a:	f7f9 ff29 	bl	8002490 <HAL_GetTick>
 800863e:	4602      	mov	r2, r0
 8008640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008642:	1ad3      	subs	r3, r2, r3
 8008644:	2b64      	cmp	r3, #100	@ 0x64
 8008646:	d901      	bls.n	800864c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8008648:	2303      	movs	r3, #3
 800864a:	e1cc      	b.n	80089e6 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800864c:	4b09      	ldr	r3, [pc, #36]	@ (8008674 <HAL_RCC_OscConfig+0x4e0>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008654:	2b00      	cmp	r3, #0
 8008656:	d0f0      	beq.n	800863a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	689b      	ldr	r3, [r3, #8]
 800865c:	2b01      	cmp	r3, #1
 800865e:	d10b      	bne.n	8008678 <HAL_RCC_OscConfig+0x4e4>
 8008660:	4b03      	ldr	r3, [pc, #12]	@ (8008670 <HAL_RCC_OscConfig+0x4dc>)
 8008662:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008664:	4a02      	ldr	r2, [pc, #8]	@ (8008670 <HAL_RCC_OscConfig+0x4dc>)
 8008666:	f043 0301 	orr.w	r3, r3, #1
 800866a:	6713      	str	r3, [r2, #112]	@ 0x70
 800866c:	e05b      	b.n	8008726 <HAL_RCC_OscConfig+0x592>
 800866e:	bf00      	nop
 8008670:	58024400 	.word	0x58024400
 8008674:	58024800 	.word	0x58024800
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	689b      	ldr	r3, [r3, #8]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d112      	bne.n	80086a6 <HAL_RCC_OscConfig+0x512>
 8008680:	4b9d      	ldr	r3, [pc, #628]	@ (80088f8 <HAL_RCC_OscConfig+0x764>)
 8008682:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008684:	4a9c      	ldr	r2, [pc, #624]	@ (80088f8 <HAL_RCC_OscConfig+0x764>)
 8008686:	f023 0301 	bic.w	r3, r3, #1
 800868a:	6713      	str	r3, [r2, #112]	@ 0x70
 800868c:	4b9a      	ldr	r3, [pc, #616]	@ (80088f8 <HAL_RCC_OscConfig+0x764>)
 800868e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008690:	4a99      	ldr	r2, [pc, #612]	@ (80088f8 <HAL_RCC_OscConfig+0x764>)
 8008692:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008696:	6713      	str	r3, [r2, #112]	@ 0x70
 8008698:	4b97      	ldr	r3, [pc, #604]	@ (80088f8 <HAL_RCC_OscConfig+0x764>)
 800869a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800869c:	4a96      	ldr	r2, [pc, #600]	@ (80088f8 <HAL_RCC_OscConfig+0x764>)
 800869e:	f023 0304 	bic.w	r3, r3, #4
 80086a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80086a4:	e03f      	b.n	8008726 <HAL_RCC_OscConfig+0x592>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	689b      	ldr	r3, [r3, #8]
 80086aa:	2b05      	cmp	r3, #5
 80086ac:	d112      	bne.n	80086d4 <HAL_RCC_OscConfig+0x540>
 80086ae:	4b92      	ldr	r3, [pc, #584]	@ (80088f8 <HAL_RCC_OscConfig+0x764>)
 80086b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086b2:	4a91      	ldr	r2, [pc, #580]	@ (80088f8 <HAL_RCC_OscConfig+0x764>)
 80086b4:	f043 0304 	orr.w	r3, r3, #4
 80086b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80086ba:	4b8f      	ldr	r3, [pc, #572]	@ (80088f8 <HAL_RCC_OscConfig+0x764>)
 80086bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086be:	4a8e      	ldr	r2, [pc, #568]	@ (80088f8 <HAL_RCC_OscConfig+0x764>)
 80086c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80086c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80086c6:	4b8c      	ldr	r3, [pc, #560]	@ (80088f8 <HAL_RCC_OscConfig+0x764>)
 80086c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086ca:	4a8b      	ldr	r2, [pc, #556]	@ (80088f8 <HAL_RCC_OscConfig+0x764>)
 80086cc:	f043 0301 	orr.w	r3, r3, #1
 80086d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80086d2:	e028      	b.n	8008726 <HAL_RCC_OscConfig+0x592>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	689b      	ldr	r3, [r3, #8]
 80086d8:	2b85      	cmp	r3, #133	@ 0x85
 80086da:	d112      	bne.n	8008702 <HAL_RCC_OscConfig+0x56e>
 80086dc:	4b86      	ldr	r3, [pc, #536]	@ (80088f8 <HAL_RCC_OscConfig+0x764>)
 80086de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086e0:	4a85      	ldr	r2, [pc, #532]	@ (80088f8 <HAL_RCC_OscConfig+0x764>)
 80086e2:	f043 0304 	orr.w	r3, r3, #4
 80086e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80086e8:	4b83      	ldr	r3, [pc, #524]	@ (80088f8 <HAL_RCC_OscConfig+0x764>)
 80086ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086ec:	4a82      	ldr	r2, [pc, #520]	@ (80088f8 <HAL_RCC_OscConfig+0x764>)
 80086ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80086f4:	4b80      	ldr	r3, [pc, #512]	@ (80088f8 <HAL_RCC_OscConfig+0x764>)
 80086f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086f8:	4a7f      	ldr	r2, [pc, #508]	@ (80088f8 <HAL_RCC_OscConfig+0x764>)
 80086fa:	f043 0301 	orr.w	r3, r3, #1
 80086fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8008700:	e011      	b.n	8008726 <HAL_RCC_OscConfig+0x592>
 8008702:	4b7d      	ldr	r3, [pc, #500]	@ (80088f8 <HAL_RCC_OscConfig+0x764>)
 8008704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008706:	4a7c      	ldr	r2, [pc, #496]	@ (80088f8 <HAL_RCC_OscConfig+0x764>)
 8008708:	f023 0301 	bic.w	r3, r3, #1
 800870c:	6713      	str	r3, [r2, #112]	@ 0x70
 800870e:	4b7a      	ldr	r3, [pc, #488]	@ (80088f8 <HAL_RCC_OscConfig+0x764>)
 8008710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008712:	4a79      	ldr	r2, [pc, #484]	@ (80088f8 <HAL_RCC_OscConfig+0x764>)
 8008714:	f023 0304 	bic.w	r3, r3, #4
 8008718:	6713      	str	r3, [r2, #112]	@ 0x70
 800871a:	4b77      	ldr	r3, [pc, #476]	@ (80088f8 <HAL_RCC_OscConfig+0x764>)
 800871c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800871e:	4a76      	ldr	r2, [pc, #472]	@ (80088f8 <HAL_RCC_OscConfig+0x764>)
 8008720:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008724:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d015      	beq.n	800875a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800872e:	f7f9 feaf 	bl	8002490 <HAL_GetTick>
 8008732:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008734:	e00a      	b.n	800874c <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008736:	f7f9 feab 	bl	8002490 <HAL_GetTick>
 800873a:	4602      	mov	r2, r0
 800873c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800873e:	1ad3      	subs	r3, r2, r3
 8008740:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008744:	4293      	cmp	r3, r2
 8008746:	d901      	bls.n	800874c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8008748:	2303      	movs	r3, #3
 800874a:	e14c      	b.n	80089e6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800874c:	4b6a      	ldr	r3, [pc, #424]	@ (80088f8 <HAL_RCC_OscConfig+0x764>)
 800874e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008750:	f003 0302 	and.w	r3, r3, #2
 8008754:	2b00      	cmp	r3, #0
 8008756:	d0ee      	beq.n	8008736 <HAL_RCC_OscConfig+0x5a2>
 8008758:	e014      	b.n	8008784 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800875a:	f7f9 fe99 	bl	8002490 <HAL_GetTick>
 800875e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008760:	e00a      	b.n	8008778 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008762:	f7f9 fe95 	bl	8002490 <HAL_GetTick>
 8008766:	4602      	mov	r2, r0
 8008768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800876a:	1ad3      	subs	r3, r2, r3
 800876c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008770:	4293      	cmp	r3, r2
 8008772:	d901      	bls.n	8008778 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8008774:	2303      	movs	r3, #3
 8008776:	e136      	b.n	80089e6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008778:	4b5f      	ldr	r3, [pc, #380]	@ (80088f8 <HAL_RCC_OscConfig+0x764>)
 800877a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800877c:	f003 0302 	and.w	r3, r3, #2
 8008780:	2b00      	cmp	r3, #0
 8008782:	d1ee      	bne.n	8008762 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008788:	2b00      	cmp	r3, #0
 800878a:	f000 812b 	beq.w	80089e4 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800878e:	4b5a      	ldr	r3, [pc, #360]	@ (80088f8 <HAL_RCC_OscConfig+0x764>)
 8008790:	691b      	ldr	r3, [r3, #16]
 8008792:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008796:	2b18      	cmp	r3, #24
 8008798:	f000 80bb 	beq.w	8008912 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087a0:	2b02      	cmp	r3, #2
 80087a2:	f040 8095 	bne.w	80088d0 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087a6:	4b54      	ldr	r3, [pc, #336]	@ (80088f8 <HAL_RCC_OscConfig+0x764>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a53      	ldr	r2, [pc, #332]	@ (80088f8 <HAL_RCC_OscConfig+0x764>)
 80087ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80087b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087b2:	f7f9 fe6d 	bl	8002490 <HAL_GetTick>
 80087b6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80087b8:	e008      	b.n	80087cc <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087ba:	f7f9 fe69 	bl	8002490 <HAL_GetTick>
 80087be:	4602      	mov	r2, r0
 80087c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087c2:	1ad3      	subs	r3, r2, r3
 80087c4:	2b02      	cmp	r3, #2
 80087c6:	d901      	bls.n	80087cc <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80087c8:	2303      	movs	r3, #3
 80087ca:	e10c      	b.n	80089e6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80087cc:	4b4a      	ldr	r3, [pc, #296]	@ (80088f8 <HAL_RCC_OscConfig+0x764>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d1f0      	bne.n	80087ba <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80087d8:	4b47      	ldr	r3, [pc, #284]	@ (80088f8 <HAL_RCC_OscConfig+0x764>)
 80087da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80087dc:	4b47      	ldr	r3, [pc, #284]	@ (80088fc <HAL_RCC_OscConfig+0x768>)
 80087de:	4013      	ands	r3, r2
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80087e8:	0112      	lsls	r2, r2, #4
 80087ea:	430a      	orrs	r2, r1
 80087ec:	4942      	ldr	r1, [pc, #264]	@ (80088f8 <HAL_RCC_OscConfig+0x764>)
 80087ee:	4313      	orrs	r3, r2
 80087f0:	628b      	str	r3, [r1, #40]	@ 0x28
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087f6:	3b01      	subs	r3, #1
 80087f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008800:	3b01      	subs	r3, #1
 8008802:	025b      	lsls	r3, r3, #9
 8008804:	b29b      	uxth	r3, r3
 8008806:	431a      	orrs	r2, r3
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800880c:	3b01      	subs	r3, #1
 800880e:	041b      	lsls	r3, r3, #16
 8008810:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008814:	431a      	orrs	r2, r3
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800881a:	3b01      	subs	r3, #1
 800881c:	061b      	lsls	r3, r3, #24
 800881e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008822:	4935      	ldr	r1, [pc, #212]	@ (80088f8 <HAL_RCC_OscConfig+0x764>)
 8008824:	4313      	orrs	r3, r2
 8008826:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008828:	4b33      	ldr	r3, [pc, #204]	@ (80088f8 <HAL_RCC_OscConfig+0x764>)
 800882a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800882c:	4a32      	ldr	r2, [pc, #200]	@ (80088f8 <HAL_RCC_OscConfig+0x764>)
 800882e:	f023 0301 	bic.w	r3, r3, #1
 8008832:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008834:	4b30      	ldr	r3, [pc, #192]	@ (80088f8 <HAL_RCC_OscConfig+0x764>)
 8008836:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008838:	4b31      	ldr	r3, [pc, #196]	@ (8008900 <HAL_RCC_OscConfig+0x76c>)
 800883a:	4013      	ands	r3, r2
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008840:	00d2      	lsls	r2, r2, #3
 8008842:	492d      	ldr	r1, [pc, #180]	@ (80088f8 <HAL_RCC_OscConfig+0x764>)
 8008844:	4313      	orrs	r3, r2
 8008846:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008848:	4b2b      	ldr	r3, [pc, #172]	@ (80088f8 <HAL_RCC_OscConfig+0x764>)
 800884a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800884c:	f023 020c 	bic.w	r2, r3, #12
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008854:	4928      	ldr	r1, [pc, #160]	@ (80088f8 <HAL_RCC_OscConfig+0x764>)
 8008856:	4313      	orrs	r3, r2
 8008858:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800885a:	4b27      	ldr	r3, [pc, #156]	@ (80088f8 <HAL_RCC_OscConfig+0x764>)
 800885c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800885e:	f023 0202 	bic.w	r2, r3, #2
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008866:	4924      	ldr	r1, [pc, #144]	@ (80088f8 <HAL_RCC_OscConfig+0x764>)
 8008868:	4313      	orrs	r3, r2
 800886a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800886c:	4b22      	ldr	r3, [pc, #136]	@ (80088f8 <HAL_RCC_OscConfig+0x764>)
 800886e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008870:	4a21      	ldr	r2, [pc, #132]	@ (80088f8 <HAL_RCC_OscConfig+0x764>)
 8008872:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008876:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008878:	4b1f      	ldr	r3, [pc, #124]	@ (80088f8 <HAL_RCC_OscConfig+0x764>)
 800887a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800887c:	4a1e      	ldr	r2, [pc, #120]	@ (80088f8 <HAL_RCC_OscConfig+0x764>)
 800887e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008882:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008884:	4b1c      	ldr	r3, [pc, #112]	@ (80088f8 <HAL_RCC_OscConfig+0x764>)
 8008886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008888:	4a1b      	ldr	r2, [pc, #108]	@ (80088f8 <HAL_RCC_OscConfig+0x764>)
 800888a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800888e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008890:	4b19      	ldr	r3, [pc, #100]	@ (80088f8 <HAL_RCC_OscConfig+0x764>)
 8008892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008894:	4a18      	ldr	r2, [pc, #96]	@ (80088f8 <HAL_RCC_OscConfig+0x764>)
 8008896:	f043 0301 	orr.w	r3, r3, #1
 800889a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800889c:	4b16      	ldr	r3, [pc, #88]	@ (80088f8 <HAL_RCC_OscConfig+0x764>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4a15      	ldr	r2, [pc, #84]	@ (80088f8 <HAL_RCC_OscConfig+0x764>)
 80088a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80088a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088a8:	f7f9 fdf2 	bl	8002490 <HAL_GetTick>
 80088ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80088ae:	e008      	b.n	80088c2 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80088b0:	f7f9 fdee 	bl	8002490 <HAL_GetTick>
 80088b4:	4602      	mov	r2, r0
 80088b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088b8:	1ad3      	subs	r3, r2, r3
 80088ba:	2b02      	cmp	r3, #2
 80088bc:	d901      	bls.n	80088c2 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80088be:	2303      	movs	r3, #3
 80088c0:	e091      	b.n	80089e6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80088c2:	4b0d      	ldr	r3, [pc, #52]	@ (80088f8 <HAL_RCC_OscConfig+0x764>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d0f0      	beq.n	80088b0 <HAL_RCC_OscConfig+0x71c>
 80088ce:	e089      	b.n	80089e4 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088d0:	4b09      	ldr	r3, [pc, #36]	@ (80088f8 <HAL_RCC_OscConfig+0x764>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a08      	ldr	r2, [pc, #32]	@ (80088f8 <HAL_RCC_OscConfig+0x764>)
 80088d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80088da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088dc:	f7f9 fdd8 	bl	8002490 <HAL_GetTick>
 80088e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80088e2:	e00f      	b.n	8008904 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80088e4:	f7f9 fdd4 	bl	8002490 <HAL_GetTick>
 80088e8:	4602      	mov	r2, r0
 80088ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ec:	1ad3      	subs	r3, r2, r3
 80088ee:	2b02      	cmp	r3, #2
 80088f0:	d908      	bls.n	8008904 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80088f2:	2303      	movs	r3, #3
 80088f4:	e077      	b.n	80089e6 <HAL_RCC_OscConfig+0x852>
 80088f6:	bf00      	nop
 80088f8:	58024400 	.word	0x58024400
 80088fc:	fffffc0c 	.word	0xfffffc0c
 8008900:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008904:	4b3a      	ldr	r3, [pc, #232]	@ (80089f0 <HAL_RCC_OscConfig+0x85c>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800890c:	2b00      	cmp	r3, #0
 800890e:	d1e9      	bne.n	80088e4 <HAL_RCC_OscConfig+0x750>
 8008910:	e068      	b.n	80089e4 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008912:	4b37      	ldr	r3, [pc, #220]	@ (80089f0 <HAL_RCC_OscConfig+0x85c>)
 8008914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008916:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008918:	4b35      	ldr	r3, [pc, #212]	@ (80089f0 <HAL_RCC_OscConfig+0x85c>)
 800891a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800891c:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008922:	2b01      	cmp	r3, #1
 8008924:	d031      	beq.n	800898a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	f003 0203 	and.w	r2, r3, #3
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008930:	429a      	cmp	r2, r3
 8008932:	d12a      	bne.n	800898a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	091b      	lsrs	r3, r3, #4
 8008938:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008940:	429a      	cmp	r2, r3
 8008942:	d122      	bne.n	800898a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800894e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008950:	429a      	cmp	r2, r3
 8008952:	d11a      	bne.n	800898a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	0a5b      	lsrs	r3, r3, #9
 8008958:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008960:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008962:	429a      	cmp	r2, r3
 8008964:	d111      	bne.n	800898a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	0c1b      	lsrs	r3, r3, #16
 800896a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008972:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008974:	429a      	cmp	r2, r3
 8008976:	d108      	bne.n	800898a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	0e1b      	lsrs	r3, r3, #24
 800897c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008984:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008986:	429a      	cmp	r2, r3
 8008988:	d001      	beq.n	800898e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800898a:	2301      	movs	r3, #1
 800898c:	e02b      	b.n	80089e6 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800898e:	4b18      	ldr	r3, [pc, #96]	@ (80089f0 <HAL_RCC_OscConfig+0x85c>)
 8008990:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008992:	08db      	lsrs	r3, r3, #3
 8008994:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008998:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800899e:	693a      	ldr	r2, [r7, #16]
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d01f      	beq.n	80089e4 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80089a4:	4b12      	ldr	r3, [pc, #72]	@ (80089f0 <HAL_RCC_OscConfig+0x85c>)
 80089a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089a8:	4a11      	ldr	r2, [pc, #68]	@ (80089f0 <HAL_RCC_OscConfig+0x85c>)
 80089aa:	f023 0301 	bic.w	r3, r3, #1
 80089ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80089b0:	f7f9 fd6e 	bl	8002490 <HAL_GetTick>
 80089b4:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80089b6:	bf00      	nop
 80089b8:	f7f9 fd6a 	bl	8002490 <HAL_GetTick>
 80089bc:	4602      	mov	r2, r0
 80089be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d0f9      	beq.n	80089b8 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80089c4:	4b0a      	ldr	r3, [pc, #40]	@ (80089f0 <HAL_RCC_OscConfig+0x85c>)
 80089c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80089c8:	4b0a      	ldr	r3, [pc, #40]	@ (80089f4 <HAL_RCC_OscConfig+0x860>)
 80089ca:	4013      	ands	r3, r2
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80089d0:	00d2      	lsls	r2, r2, #3
 80089d2:	4907      	ldr	r1, [pc, #28]	@ (80089f0 <HAL_RCC_OscConfig+0x85c>)
 80089d4:	4313      	orrs	r3, r2
 80089d6:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80089d8:	4b05      	ldr	r3, [pc, #20]	@ (80089f0 <HAL_RCC_OscConfig+0x85c>)
 80089da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089dc:	4a04      	ldr	r2, [pc, #16]	@ (80089f0 <HAL_RCC_OscConfig+0x85c>)
 80089de:	f043 0301 	orr.w	r3, r3, #1
 80089e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80089e4:	2300      	movs	r3, #0
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3730      	adds	r7, #48	@ 0x30
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	bf00      	nop
 80089f0:	58024400 	.word	0x58024400
 80089f4:	ffff0007 	.word	0xffff0007

080089f8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b086      	sub	sp, #24
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d101      	bne.n	8008a0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008a08:	2301      	movs	r3, #1
 8008a0a:	e19c      	b.n	8008d46 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008a0c:	4b8a      	ldr	r3, [pc, #552]	@ (8008c38 <HAL_RCC_ClockConfig+0x240>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f003 030f 	and.w	r3, r3, #15
 8008a14:	683a      	ldr	r2, [r7, #0]
 8008a16:	429a      	cmp	r2, r3
 8008a18:	d910      	bls.n	8008a3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a1a:	4b87      	ldr	r3, [pc, #540]	@ (8008c38 <HAL_RCC_ClockConfig+0x240>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f023 020f 	bic.w	r2, r3, #15
 8008a22:	4985      	ldr	r1, [pc, #532]	@ (8008c38 <HAL_RCC_ClockConfig+0x240>)
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	4313      	orrs	r3, r2
 8008a28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a2a:	4b83      	ldr	r3, [pc, #524]	@ (8008c38 <HAL_RCC_ClockConfig+0x240>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f003 030f 	and.w	r3, r3, #15
 8008a32:	683a      	ldr	r2, [r7, #0]
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d001      	beq.n	8008a3c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	e184      	b.n	8008d46 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f003 0304 	and.w	r3, r3, #4
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d010      	beq.n	8008a6a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	691a      	ldr	r2, [r3, #16]
 8008a4c:	4b7b      	ldr	r3, [pc, #492]	@ (8008c3c <HAL_RCC_ClockConfig+0x244>)
 8008a4e:	699b      	ldr	r3, [r3, #24]
 8008a50:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d908      	bls.n	8008a6a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008a58:	4b78      	ldr	r3, [pc, #480]	@ (8008c3c <HAL_RCC_ClockConfig+0x244>)
 8008a5a:	699b      	ldr	r3, [r3, #24]
 8008a5c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	691b      	ldr	r3, [r3, #16]
 8008a64:	4975      	ldr	r1, [pc, #468]	@ (8008c3c <HAL_RCC_ClockConfig+0x244>)
 8008a66:	4313      	orrs	r3, r2
 8008a68:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f003 0308 	and.w	r3, r3, #8
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d010      	beq.n	8008a98 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	695a      	ldr	r2, [r3, #20]
 8008a7a:	4b70      	ldr	r3, [pc, #448]	@ (8008c3c <HAL_RCC_ClockConfig+0x244>)
 8008a7c:	69db      	ldr	r3, [r3, #28]
 8008a7e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d908      	bls.n	8008a98 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008a86:	4b6d      	ldr	r3, [pc, #436]	@ (8008c3c <HAL_RCC_ClockConfig+0x244>)
 8008a88:	69db      	ldr	r3, [r3, #28]
 8008a8a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	695b      	ldr	r3, [r3, #20]
 8008a92:	496a      	ldr	r1, [pc, #424]	@ (8008c3c <HAL_RCC_ClockConfig+0x244>)
 8008a94:	4313      	orrs	r3, r2
 8008a96:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f003 0310 	and.w	r3, r3, #16
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d010      	beq.n	8008ac6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	699a      	ldr	r2, [r3, #24]
 8008aa8:	4b64      	ldr	r3, [pc, #400]	@ (8008c3c <HAL_RCC_ClockConfig+0x244>)
 8008aaa:	69db      	ldr	r3, [r3, #28]
 8008aac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d908      	bls.n	8008ac6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008ab4:	4b61      	ldr	r3, [pc, #388]	@ (8008c3c <HAL_RCC_ClockConfig+0x244>)
 8008ab6:	69db      	ldr	r3, [r3, #28]
 8008ab8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	699b      	ldr	r3, [r3, #24]
 8008ac0:	495e      	ldr	r1, [pc, #376]	@ (8008c3c <HAL_RCC_ClockConfig+0x244>)
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f003 0320 	and.w	r3, r3, #32
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d010      	beq.n	8008af4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	69da      	ldr	r2, [r3, #28]
 8008ad6:	4b59      	ldr	r3, [pc, #356]	@ (8008c3c <HAL_RCC_ClockConfig+0x244>)
 8008ad8:	6a1b      	ldr	r3, [r3, #32]
 8008ada:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d908      	bls.n	8008af4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008ae2:	4b56      	ldr	r3, [pc, #344]	@ (8008c3c <HAL_RCC_ClockConfig+0x244>)
 8008ae4:	6a1b      	ldr	r3, [r3, #32]
 8008ae6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	69db      	ldr	r3, [r3, #28]
 8008aee:	4953      	ldr	r1, [pc, #332]	@ (8008c3c <HAL_RCC_ClockConfig+0x244>)
 8008af0:	4313      	orrs	r3, r2
 8008af2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f003 0302 	and.w	r3, r3, #2
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d010      	beq.n	8008b22 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	68da      	ldr	r2, [r3, #12]
 8008b04:	4b4d      	ldr	r3, [pc, #308]	@ (8008c3c <HAL_RCC_ClockConfig+0x244>)
 8008b06:	699b      	ldr	r3, [r3, #24]
 8008b08:	f003 030f 	and.w	r3, r3, #15
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d908      	bls.n	8008b22 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b10:	4b4a      	ldr	r3, [pc, #296]	@ (8008c3c <HAL_RCC_ClockConfig+0x244>)
 8008b12:	699b      	ldr	r3, [r3, #24]
 8008b14:	f023 020f 	bic.w	r2, r3, #15
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	4947      	ldr	r1, [pc, #284]	@ (8008c3c <HAL_RCC_ClockConfig+0x244>)
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f003 0301 	and.w	r3, r3, #1
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d055      	beq.n	8008bda <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008b2e:	4b43      	ldr	r3, [pc, #268]	@ (8008c3c <HAL_RCC_ClockConfig+0x244>)
 8008b30:	699b      	ldr	r3, [r3, #24]
 8008b32:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	689b      	ldr	r3, [r3, #8]
 8008b3a:	4940      	ldr	r1, [pc, #256]	@ (8008c3c <HAL_RCC_ClockConfig+0x244>)
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	2b02      	cmp	r3, #2
 8008b46:	d107      	bne.n	8008b58 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008b48:	4b3c      	ldr	r3, [pc, #240]	@ (8008c3c <HAL_RCC_ClockConfig+0x244>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d121      	bne.n	8008b98 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008b54:	2301      	movs	r3, #1
 8008b56:	e0f6      	b.n	8008d46 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	2b03      	cmp	r3, #3
 8008b5e:	d107      	bne.n	8008b70 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008b60:	4b36      	ldr	r3, [pc, #216]	@ (8008c3c <HAL_RCC_ClockConfig+0x244>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d115      	bne.n	8008b98 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	e0ea      	b.n	8008d46 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d107      	bne.n	8008b88 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008b78:	4b30      	ldr	r3, [pc, #192]	@ (8008c3c <HAL_RCC_ClockConfig+0x244>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d109      	bne.n	8008b98 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008b84:	2301      	movs	r3, #1
 8008b86:	e0de      	b.n	8008d46 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008b88:	4b2c      	ldr	r3, [pc, #176]	@ (8008c3c <HAL_RCC_ClockConfig+0x244>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f003 0304 	and.w	r3, r3, #4
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d101      	bne.n	8008b98 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008b94:	2301      	movs	r3, #1
 8008b96:	e0d6      	b.n	8008d46 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008b98:	4b28      	ldr	r3, [pc, #160]	@ (8008c3c <HAL_RCC_ClockConfig+0x244>)
 8008b9a:	691b      	ldr	r3, [r3, #16]
 8008b9c:	f023 0207 	bic.w	r2, r3, #7
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	4925      	ldr	r1, [pc, #148]	@ (8008c3c <HAL_RCC_ClockConfig+0x244>)
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008baa:	f7f9 fc71 	bl	8002490 <HAL_GetTick>
 8008bae:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008bb0:	e00a      	b.n	8008bc8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008bb2:	f7f9 fc6d 	bl	8002490 <HAL_GetTick>
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	1ad3      	subs	r3, r2, r3
 8008bbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d901      	bls.n	8008bc8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008bc4:	2303      	movs	r3, #3
 8008bc6:	e0be      	b.n	8008d46 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008bc8:	4b1c      	ldr	r3, [pc, #112]	@ (8008c3c <HAL_RCC_ClockConfig+0x244>)
 8008bca:	691b      	ldr	r3, [r3, #16]
 8008bcc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	00db      	lsls	r3, r3, #3
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d1eb      	bne.n	8008bb2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f003 0302 	and.w	r3, r3, #2
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d010      	beq.n	8008c08 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	68da      	ldr	r2, [r3, #12]
 8008bea:	4b14      	ldr	r3, [pc, #80]	@ (8008c3c <HAL_RCC_ClockConfig+0x244>)
 8008bec:	699b      	ldr	r3, [r3, #24]
 8008bee:	f003 030f 	and.w	r3, r3, #15
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d208      	bcs.n	8008c08 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008bf6:	4b11      	ldr	r3, [pc, #68]	@ (8008c3c <HAL_RCC_ClockConfig+0x244>)
 8008bf8:	699b      	ldr	r3, [r3, #24]
 8008bfa:	f023 020f 	bic.w	r2, r3, #15
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	68db      	ldr	r3, [r3, #12]
 8008c02:	490e      	ldr	r1, [pc, #56]	@ (8008c3c <HAL_RCC_ClockConfig+0x244>)
 8008c04:	4313      	orrs	r3, r2
 8008c06:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008c08:	4b0b      	ldr	r3, [pc, #44]	@ (8008c38 <HAL_RCC_ClockConfig+0x240>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f003 030f 	and.w	r3, r3, #15
 8008c10:	683a      	ldr	r2, [r7, #0]
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d214      	bcs.n	8008c40 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c16:	4b08      	ldr	r3, [pc, #32]	@ (8008c38 <HAL_RCC_ClockConfig+0x240>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f023 020f 	bic.w	r2, r3, #15
 8008c1e:	4906      	ldr	r1, [pc, #24]	@ (8008c38 <HAL_RCC_ClockConfig+0x240>)
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	4313      	orrs	r3, r2
 8008c24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c26:	4b04      	ldr	r3, [pc, #16]	@ (8008c38 <HAL_RCC_ClockConfig+0x240>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f003 030f 	and.w	r3, r3, #15
 8008c2e:	683a      	ldr	r2, [r7, #0]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d005      	beq.n	8008c40 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008c34:	2301      	movs	r3, #1
 8008c36:	e086      	b.n	8008d46 <HAL_RCC_ClockConfig+0x34e>
 8008c38:	52002000 	.word	0x52002000
 8008c3c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f003 0304 	and.w	r3, r3, #4
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d010      	beq.n	8008c6e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	691a      	ldr	r2, [r3, #16]
 8008c50:	4b3f      	ldr	r3, [pc, #252]	@ (8008d50 <HAL_RCC_ClockConfig+0x358>)
 8008c52:	699b      	ldr	r3, [r3, #24]
 8008c54:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d208      	bcs.n	8008c6e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008c5c:	4b3c      	ldr	r3, [pc, #240]	@ (8008d50 <HAL_RCC_ClockConfig+0x358>)
 8008c5e:	699b      	ldr	r3, [r3, #24]
 8008c60:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	691b      	ldr	r3, [r3, #16]
 8008c68:	4939      	ldr	r1, [pc, #228]	@ (8008d50 <HAL_RCC_ClockConfig+0x358>)
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f003 0308 	and.w	r3, r3, #8
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d010      	beq.n	8008c9c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	695a      	ldr	r2, [r3, #20]
 8008c7e:	4b34      	ldr	r3, [pc, #208]	@ (8008d50 <HAL_RCC_ClockConfig+0x358>)
 8008c80:	69db      	ldr	r3, [r3, #28]
 8008c82:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d208      	bcs.n	8008c9c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008c8a:	4b31      	ldr	r3, [pc, #196]	@ (8008d50 <HAL_RCC_ClockConfig+0x358>)
 8008c8c:	69db      	ldr	r3, [r3, #28]
 8008c8e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	695b      	ldr	r3, [r3, #20]
 8008c96:	492e      	ldr	r1, [pc, #184]	@ (8008d50 <HAL_RCC_ClockConfig+0x358>)
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f003 0310 	and.w	r3, r3, #16
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d010      	beq.n	8008cca <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	699a      	ldr	r2, [r3, #24]
 8008cac:	4b28      	ldr	r3, [pc, #160]	@ (8008d50 <HAL_RCC_ClockConfig+0x358>)
 8008cae:	69db      	ldr	r3, [r3, #28]
 8008cb0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	d208      	bcs.n	8008cca <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008cb8:	4b25      	ldr	r3, [pc, #148]	@ (8008d50 <HAL_RCC_ClockConfig+0x358>)
 8008cba:	69db      	ldr	r3, [r3, #28]
 8008cbc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	699b      	ldr	r3, [r3, #24]
 8008cc4:	4922      	ldr	r1, [pc, #136]	@ (8008d50 <HAL_RCC_ClockConfig+0x358>)
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f003 0320 	and.w	r3, r3, #32
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d010      	beq.n	8008cf8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	69da      	ldr	r2, [r3, #28]
 8008cda:	4b1d      	ldr	r3, [pc, #116]	@ (8008d50 <HAL_RCC_ClockConfig+0x358>)
 8008cdc:	6a1b      	ldr	r3, [r3, #32]
 8008cde:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	d208      	bcs.n	8008cf8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8008d50 <HAL_RCC_ClockConfig+0x358>)
 8008ce8:	6a1b      	ldr	r3, [r3, #32]
 8008cea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	69db      	ldr	r3, [r3, #28]
 8008cf2:	4917      	ldr	r1, [pc, #92]	@ (8008d50 <HAL_RCC_ClockConfig+0x358>)
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8008cf8:	f000 f834 	bl	8008d64 <HAL_RCC_GetSysClockFreq>
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	4b14      	ldr	r3, [pc, #80]	@ (8008d50 <HAL_RCC_ClockConfig+0x358>)
 8008d00:	699b      	ldr	r3, [r3, #24]
 8008d02:	0a1b      	lsrs	r3, r3, #8
 8008d04:	f003 030f 	and.w	r3, r3, #15
 8008d08:	4912      	ldr	r1, [pc, #72]	@ (8008d54 <HAL_RCC_ClockConfig+0x35c>)
 8008d0a:	5ccb      	ldrb	r3, [r1, r3]
 8008d0c:	f003 031f 	and.w	r3, r3, #31
 8008d10:	fa22 f303 	lsr.w	r3, r2, r3
 8008d14:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8008d16:	4b0e      	ldr	r3, [pc, #56]	@ (8008d50 <HAL_RCC_ClockConfig+0x358>)
 8008d18:	699b      	ldr	r3, [r3, #24]
 8008d1a:	f003 030f 	and.w	r3, r3, #15
 8008d1e:	4a0d      	ldr	r2, [pc, #52]	@ (8008d54 <HAL_RCC_ClockConfig+0x35c>)
 8008d20:	5cd3      	ldrb	r3, [r2, r3]
 8008d22:	f003 031f 	and.w	r3, r3, #31
 8008d26:	693a      	ldr	r2, [r7, #16]
 8008d28:	fa22 f303 	lsr.w	r3, r2, r3
 8008d2c:	4a0a      	ldr	r2, [pc, #40]	@ (8008d58 <HAL_RCC_ClockConfig+0x360>)
 8008d2e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008d30:	4a0a      	ldr	r2, [pc, #40]	@ (8008d5c <HAL_RCC_ClockConfig+0x364>)
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008d36:	4b0a      	ldr	r3, [pc, #40]	@ (8008d60 <HAL_RCC_ClockConfig+0x368>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f7f9 f882 	bl	8001e44 <HAL_InitTick>
 8008d40:	4603      	mov	r3, r0
 8008d42:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3718      	adds	r7, #24
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	bf00      	nop
 8008d50:	58024400 	.word	0x58024400
 8008d54:	08014b54 	.word	0x08014b54
 8008d58:	24000004 	.word	0x24000004
 8008d5c:	24000000 	.word	0x24000000
 8008d60:	24000008 	.word	0x24000008

08008d64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b089      	sub	sp, #36	@ 0x24
 8008d68:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008d6a:	4bb3      	ldr	r3, [pc, #716]	@ (8009038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d6c:	691b      	ldr	r3, [r3, #16]
 8008d6e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008d72:	2b18      	cmp	r3, #24
 8008d74:	f200 8155 	bhi.w	8009022 <HAL_RCC_GetSysClockFreq+0x2be>
 8008d78:	a201      	add	r2, pc, #4	@ (adr r2, 8008d80 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d7e:	bf00      	nop
 8008d80:	08008de5 	.word	0x08008de5
 8008d84:	08009023 	.word	0x08009023
 8008d88:	08009023 	.word	0x08009023
 8008d8c:	08009023 	.word	0x08009023
 8008d90:	08009023 	.word	0x08009023
 8008d94:	08009023 	.word	0x08009023
 8008d98:	08009023 	.word	0x08009023
 8008d9c:	08009023 	.word	0x08009023
 8008da0:	08008e0b 	.word	0x08008e0b
 8008da4:	08009023 	.word	0x08009023
 8008da8:	08009023 	.word	0x08009023
 8008dac:	08009023 	.word	0x08009023
 8008db0:	08009023 	.word	0x08009023
 8008db4:	08009023 	.word	0x08009023
 8008db8:	08009023 	.word	0x08009023
 8008dbc:	08009023 	.word	0x08009023
 8008dc0:	08008e11 	.word	0x08008e11
 8008dc4:	08009023 	.word	0x08009023
 8008dc8:	08009023 	.word	0x08009023
 8008dcc:	08009023 	.word	0x08009023
 8008dd0:	08009023 	.word	0x08009023
 8008dd4:	08009023 	.word	0x08009023
 8008dd8:	08009023 	.word	0x08009023
 8008ddc:	08009023 	.word	0x08009023
 8008de0:	08008e17 	.word	0x08008e17
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008de4:	4b94      	ldr	r3, [pc, #592]	@ (8009038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f003 0320 	and.w	r3, r3, #32
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d009      	beq.n	8008e04 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008df0:	4b91      	ldr	r3, [pc, #580]	@ (8009038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	08db      	lsrs	r3, r3, #3
 8008df6:	f003 0303 	and.w	r3, r3, #3
 8008dfa:	4a90      	ldr	r2, [pc, #576]	@ (800903c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8008e00:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008e02:	e111      	b.n	8009028 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008e04:	4b8d      	ldr	r3, [pc, #564]	@ (800903c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008e06:	61bb      	str	r3, [r7, #24]
      break;
 8008e08:	e10e      	b.n	8009028 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008e0a:	4b8d      	ldr	r3, [pc, #564]	@ (8009040 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008e0c:	61bb      	str	r3, [r7, #24]
      break;
 8008e0e:	e10b      	b.n	8009028 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008e10:	4b8c      	ldr	r3, [pc, #560]	@ (8009044 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008e12:	61bb      	str	r3, [r7, #24]
      break;
 8008e14:	e108      	b.n	8009028 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008e16:	4b88      	ldr	r3, [pc, #544]	@ (8009038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e1a:	f003 0303 	and.w	r3, r3, #3
 8008e1e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008e20:	4b85      	ldr	r3, [pc, #532]	@ (8009038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e24:	091b      	lsrs	r3, r3, #4
 8008e26:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008e2a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008e2c:	4b82      	ldr	r3, [pc, #520]	@ (8009038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e30:	f003 0301 	and.w	r3, r3, #1
 8008e34:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008e36:	4b80      	ldr	r3, [pc, #512]	@ (8009038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e3a:	08db      	lsrs	r3, r3, #3
 8008e3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008e40:	68fa      	ldr	r2, [r7, #12]
 8008e42:	fb02 f303 	mul.w	r3, r2, r3
 8008e46:	ee07 3a90 	vmov	s15, r3
 8008e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e4e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	f000 80e1 	beq.w	800901c <HAL_RCC_GetSysClockFreq+0x2b8>
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	2b02      	cmp	r3, #2
 8008e5e:	f000 8083 	beq.w	8008f68 <HAL_RCC_GetSysClockFreq+0x204>
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	2b02      	cmp	r3, #2
 8008e66:	f200 80a1 	bhi.w	8008fac <HAL_RCC_GetSysClockFreq+0x248>
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d003      	beq.n	8008e78 <HAL_RCC_GetSysClockFreq+0x114>
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d056      	beq.n	8008f24 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008e76:	e099      	b.n	8008fac <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e78:	4b6f      	ldr	r3, [pc, #444]	@ (8009038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f003 0320 	and.w	r3, r3, #32
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d02d      	beq.n	8008ee0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e84:	4b6c      	ldr	r3, [pc, #432]	@ (8009038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	08db      	lsrs	r3, r3, #3
 8008e8a:	f003 0303 	and.w	r3, r3, #3
 8008e8e:	4a6b      	ldr	r2, [pc, #428]	@ (800903c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008e90:	fa22 f303 	lsr.w	r3, r2, r3
 8008e94:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	ee07 3a90 	vmov	s15, r3
 8008e9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ea0:	693b      	ldr	r3, [r7, #16]
 8008ea2:	ee07 3a90 	vmov	s15, r3
 8008ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008eae:	4b62      	ldr	r3, [pc, #392]	@ (8009038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eb6:	ee07 3a90 	vmov	s15, r3
 8008eba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ebe:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ec2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8009048 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008ec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008eca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ece:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008eda:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008ede:	e087      	b.n	8008ff0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	ee07 3a90 	vmov	s15, r3
 8008ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eea:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800904c <HAL_RCC_GetSysClockFreq+0x2e8>
 8008eee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ef2:	4b51      	ldr	r3, [pc, #324]	@ (8009038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008efa:	ee07 3a90 	vmov	s15, r3
 8008efe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f02:	ed97 6a02 	vldr	s12, [r7, #8]
 8008f06:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8009048 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008f0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f1e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008f22:	e065      	b.n	8008ff0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	ee07 3a90 	vmov	s15, r3
 8008f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f2e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8009050 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008f32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f36:	4b40      	ldr	r3, [pc, #256]	@ (8009038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f3e:	ee07 3a90 	vmov	s15, r3
 8008f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f46:	ed97 6a02 	vldr	s12, [r7, #8]
 8008f4a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009048 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008f4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f62:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008f66:	e043      	b.n	8008ff0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	ee07 3a90 	vmov	s15, r3
 8008f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f72:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8009054 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f7a:	4b2f      	ldr	r3, [pc, #188]	@ (8009038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f82:	ee07 3a90 	vmov	s15, r3
 8008f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008f8e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8009048 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fa6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008faa:	e021      	b.n	8008ff0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	ee07 3a90 	vmov	s15, r3
 8008fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fb6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8009050 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fbe:	4b1e      	ldr	r3, [pc, #120]	@ (8009038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fc6:	ee07 3a90 	vmov	s15, r3
 8008fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fce:	ed97 6a02 	vldr	s12, [r7, #8]
 8008fd2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8009048 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008fd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008fe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008fee:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008ff0:	4b11      	ldr	r3, [pc, #68]	@ (8009038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ff4:	0a5b      	lsrs	r3, r3, #9
 8008ff6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ffa:	3301      	adds	r3, #1
 8008ffc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	ee07 3a90 	vmov	s15, r3
 8009004:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009008:	edd7 6a07 	vldr	s13, [r7, #28]
 800900c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009010:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009014:	ee17 3a90 	vmov	r3, s15
 8009018:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800901a:	e005      	b.n	8009028 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800901c:	2300      	movs	r3, #0
 800901e:	61bb      	str	r3, [r7, #24]
      break;
 8009020:	e002      	b.n	8009028 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009022:	4b07      	ldr	r3, [pc, #28]	@ (8009040 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009024:	61bb      	str	r3, [r7, #24]
      break;
 8009026:	bf00      	nop
  }

  return sysclockfreq;
 8009028:	69bb      	ldr	r3, [r7, #24]
}
 800902a:	4618      	mov	r0, r3
 800902c:	3724      	adds	r7, #36	@ 0x24
 800902e:	46bd      	mov	sp, r7
 8009030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009034:	4770      	bx	lr
 8009036:	bf00      	nop
 8009038:	58024400 	.word	0x58024400
 800903c:	03d09000 	.word	0x03d09000
 8009040:	003d0900 	.word	0x003d0900
 8009044:	016e3600 	.word	0x016e3600
 8009048:	46000000 	.word	0x46000000
 800904c:	4c742400 	.word	0x4c742400
 8009050:	4a742400 	.word	0x4a742400
 8009054:	4bb71b00 	.word	0x4bb71b00

08009058 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b082      	sub	sp, #8
 800905c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800905e:	f7ff fe81 	bl	8008d64 <HAL_RCC_GetSysClockFreq>
 8009062:	4602      	mov	r2, r0
 8009064:	4b10      	ldr	r3, [pc, #64]	@ (80090a8 <HAL_RCC_GetHCLKFreq+0x50>)
 8009066:	699b      	ldr	r3, [r3, #24]
 8009068:	0a1b      	lsrs	r3, r3, #8
 800906a:	f003 030f 	and.w	r3, r3, #15
 800906e:	490f      	ldr	r1, [pc, #60]	@ (80090ac <HAL_RCC_GetHCLKFreq+0x54>)
 8009070:	5ccb      	ldrb	r3, [r1, r3]
 8009072:	f003 031f 	and.w	r3, r3, #31
 8009076:	fa22 f303 	lsr.w	r3, r2, r3
 800907a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800907c:	4b0a      	ldr	r3, [pc, #40]	@ (80090a8 <HAL_RCC_GetHCLKFreq+0x50>)
 800907e:	699b      	ldr	r3, [r3, #24]
 8009080:	f003 030f 	and.w	r3, r3, #15
 8009084:	4a09      	ldr	r2, [pc, #36]	@ (80090ac <HAL_RCC_GetHCLKFreq+0x54>)
 8009086:	5cd3      	ldrb	r3, [r2, r3]
 8009088:	f003 031f 	and.w	r3, r3, #31
 800908c:	687a      	ldr	r2, [r7, #4]
 800908e:	fa22 f303 	lsr.w	r3, r2, r3
 8009092:	4a07      	ldr	r2, [pc, #28]	@ (80090b0 <HAL_RCC_GetHCLKFreq+0x58>)
 8009094:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009096:	4a07      	ldr	r2, [pc, #28]	@ (80090b4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800909c:	4b04      	ldr	r3, [pc, #16]	@ (80090b0 <HAL_RCC_GetHCLKFreq+0x58>)
 800909e:	681b      	ldr	r3, [r3, #0]
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3708      	adds	r7, #8
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}
 80090a8:	58024400 	.word	0x58024400
 80090ac:	08014b54 	.word	0x08014b54
 80090b0:	24000004 	.word	0x24000004
 80090b4:	24000000 	.word	0x24000000

080090b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80090bc:	f7ff ffcc 	bl	8009058 <HAL_RCC_GetHCLKFreq>
 80090c0:	4602      	mov	r2, r0
 80090c2:	4b06      	ldr	r3, [pc, #24]	@ (80090dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80090c4:	69db      	ldr	r3, [r3, #28]
 80090c6:	091b      	lsrs	r3, r3, #4
 80090c8:	f003 0307 	and.w	r3, r3, #7
 80090cc:	4904      	ldr	r1, [pc, #16]	@ (80090e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80090ce:	5ccb      	ldrb	r3, [r1, r3]
 80090d0:	f003 031f 	and.w	r3, r3, #31
 80090d4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80090d8:	4618      	mov	r0, r3
 80090da:	bd80      	pop	{r7, pc}
 80090dc:	58024400 	.word	0x58024400
 80090e0:	08014b54 	.word	0x08014b54

080090e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80090e8:	f7ff ffb6 	bl	8009058 <HAL_RCC_GetHCLKFreq>
 80090ec:	4602      	mov	r2, r0
 80090ee:	4b06      	ldr	r3, [pc, #24]	@ (8009108 <HAL_RCC_GetPCLK2Freq+0x24>)
 80090f0:	69db      	ldr	r3, [r3, #28]
 80090f2:	0a1b      	lsrs	r3, r3, #8
 80090f4:	f003 0307 	and.w	r3, r3, #7
 80090f8:	4904      	ldr	r1, [pc, #16]	@ (800910c <HAL_RCC_GetPCLK2Freq+0x28>)
 80090fa:	5ccb      	ldrb	r3, [r1, r3]
 80090fc:	f003 031f 	and.w	r3, r3, #31
 8009100:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8009104:	4618      	mov	r0, r3
 8009106:	bd80      	pop	{r7, pc}
 8009108:	58024400 	.word	0x58024400
 800910c:	08014b54 	.word	0x08014b54

08009110 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009110:	b480      	push	{r7}
 8009112:	b083      	sub	sp, #12
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	223f      	movs	r2, #63	@ 0x3f
 800911e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009120:	4b1a      	ldr	r3, [pc, #104]	@ (800918c <HAL_RCC_GetClockConfig+0x7c>)
 8009122:	691b      	ldr	r3, [r3, #16]
 8009124:	f003 0207 	and.w	r2, r3, #7
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 800912c:	4b17      	ldr	r3, [pc, #92]	@ (800918c <HAL_RCC_GetClockConfig+0x7c>)
 800912e:	699b      	ldr	r3, [r3, #24]
 8009130:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 8009138:	4b14      	ldr	r3, [pc, #80]	@ (800918c <HAL_RCC_GetClockConfig+0x7c>)
 800913a:	699b      	ldr	r3, [r3, #24]
 800913c:	f003 020f 	and.w	r2, r3, #15
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 8009144:	4b11      	ldr	r3, [pc, #68]	@ (800918c <HAL_RCC_GetClockConfig+0x7c>)
 8009146:	699b      	ldr	r3, [r3, #24]
 8009148:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 8009150:	4b0e      	ldr	r3, [pc, #56]	@ (800918c <HAL_RCC_GetClockConfig+0x7c>)
 8009152:	69db      	ldr	r3, [r3, #28]
 8009154:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 800915c:	4b0b      	ldr	r3, [pc, #44]	@ (800918c <HAL_RCC_GetClockConfig+0x7c>)
 800915e:	69db      	ldr	r3, [r3, #28]
 8009160:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 8009168:	4b08      	ldr	r3, [pc, #32]	@ (800918c <HAL_RCC_GetClockConfig+0x7c>)
 800916a:	6a1b      	ldr	r3, [r3, #32]
 800916c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009174:	4b06      	ldr	r3, [pc, #24]	@ (8009190 <HAL_RCC_GetClockConfig+0x80>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f003 020f 	and.w	r2, r3, #15
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	601a      	str	r2, [r3, #0]
}
 8009180:	bf00      	nop
 8009182:	370c      	adds	r7, #12
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr
 800918c:	58024400 	.word	0x58024400
 8009190:	52002000 	.word	0x52002000

08009194 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009194:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009198:	b0c8      	sub	sp, #288	@ 0x120
 800919a:	af00      	add	r7, sp, #0
 800919c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80091a0:	2300      	movs	r3, #0
 80091a2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80091a6:	2300      	movs	r3, #0
 80091a8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80091ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80091b8:	2500      	movs	r5, #0
 80091ba:	ea54 0305 	orrs.w	r3, r4, r5
 80091be:	d049      	beq.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80091c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091c6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80091ca:	d02f      	beq.n	800922c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80091cc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80091d0:	d828      	bhi.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80091d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80091d6:	d01a      	beq.n	800920e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80091d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80091dc:	d822      	bhi.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d003      	beq.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0x56>
 80091e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80091e6:	d007      	beq.n	80091f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80091e8:	e01c      	b.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091ea:	4ba7      	ldr	r3, [pc, #668]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80091ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091ee:	4aa6      	ldr	r2, [pc, #664]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80091f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80091f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80091f6:	e01a      	b.n	800922e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80091f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091fc:	3308      	adds	r3, #8
 80091fe:	2102      	movs	r1, #2
 8009200:	4618      	mov	r0, r3
 8009202:	f001 fc43 	bl	800aa8c <RCCEx_PLL2_Config>
 8009206:	4603      	mov	r3, r0
 8009208:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800920c:	e00f      	b.n	800922e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800920e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009212:	3328      	adds	r3, #40	@ 0x28
 8009214:	2102      	movs	r1, #2
 8009216:	4618      	mov	r0, r3
 8009218:	f001 fcea 	bl	800abf0 <RCCEx_PLL3_Config>
 800921c:	4603      	mov	r3, r0
 800921e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009222:	e004      	b.n	800922e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009224:	2301      	movs	r3, #1
 8009226:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800922a:	e000      	b.n	800922e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800922c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800922e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009232:	2b00      	cmp	r3, #0
 8009234:	d10a      	bne.n	800924c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009236:	4b94      	ldr	r3, [pc, #592]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009238:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800923a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800923e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009242:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009244:	4a90      	ldr	r2, [pc, #576]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009246:	430b      	orrs	r3, r1
 8009248:	6513      	str	r3, [r2, #80]	@ 0x50
 800924a:	e003      	b.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800924c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009250:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009254:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800925c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8009260:	f04f 0900 	mov.w	r9, #0
 8009264:	ea58 0309 	orrs.w	r3, r8, r9
 8009268:	d047      	beq.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800926a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800926e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009270:	2b04      	cmp	r3, #4
 8009272:	d82a      	bhi.n	80092ca <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009274:	a201      	add	r2, pc, #4	@ (adr r2, 800927c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800927a:	bf00      	nop
 800927c:	08009291 	.word	0x08009291
 8009280:	0800929f 	.word	0x0800929f
 8009284:	080092b5 	.word	0x080092b5
 8009288:	080092d3 	.word	0x080092d3
 800928c:	080092d3 	.word	0x080092d3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009290:	4b7d      	ldr	r3, [pc, #500]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009294:	4a7c      	ldr	r2, [pc, #496]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009296:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800929a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800929c:	e01a      	b.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800929e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092a2:	3308      	adds	r3, #8
 80092a4:	2100      	movs	r1, #0
 80092a6:	4618      	mov	r0, r3
 80092a8:	f001 fbf0 	bl	800aa8c <RCCEx_PLL2_Config>
 80092ac:	4603      	mov	r3, r0
 80092ae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80092b2:	e00f      	b.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80092b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092b8:	3328      	adds	r3, #40	@ 0x28
 80092ba:	2100      	movs	r1, #0
 80092bc:	4618      	mov	r0, r3
 80092be:	f001 fc97 	bl	800abf0 <RCCEx_PLL3_Config>
 80092c2:	4603      	mov	r3, r0
 80092c4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80092c8:	e004      	b.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092ca:	2301      	movs	r3, #1
 80092cc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80092d0:	e000      	b.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80092d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092d4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d10a      	bne.n	80092f2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80092dc:	4b6a      	ldr	r3, [pc, #424]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80092de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092e0:	f023 0107 	bic.w	r1, r3, #7
 80092e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092ea:	4a67      	ldr	r2, [pc, #412]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80092ec:	430b      	orrs	r3, r1
 80092ee:	6513      	str	r3, [r2, #80]	@ 0x50
 80092f0:	e003      	b.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092f2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80092f6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80092fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009302:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8009306:	f04f 0b00 	mov.w	fp, #0
 800930a:	ea5a 030b 	orrs.w	r3, sl, fp
 800930e:	d054      	beq.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8009310:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009314:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009316:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800931a:	d036      	beq.n	800938a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800931c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8009320:	d82f      	bhi.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009322:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009326:	d032      	beq.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009328:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800932c:	d829      	bhi.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800932e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009330:	d02f      	beq.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8009332:	2bc0      	cmp	r3, #192	@ 0xc0
 8009334:	d825      	bhi.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009336:	2b80      	cmp	r3, #128	@ 0x80
 8009338:	d018      	beq.n	800936c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800933a:	2b80      	cmp	r3, #128	@ 0x80
 800933c:	d821      	bhi.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800933e:	2b00      	cmp	r3, #0
 8009340:	d002      	beq.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8009342:	2b40      	cmp	r3, #64	@ 0x40
 8009344:	d007      	beq.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8009346:	e01c      	b.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009348:	4b4f      	ldr	r3, [pc, #316]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800934a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800934c:	4a4e      	ldr	r2, [pc, #312]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800934e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009352:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8009354:	e01e      	b.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009356:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800935a:	3308      	adds	r3, #8
 800935c:	2100      	movs	r1, #0
 800935e:	4618      	mov	r0, r3
 8009360:	f001 fb94 	bl	800aa8c <RCCEx_PLL2_Config>
 8009364:	4603      	mov	r3, r0
 8009366:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800936a:	e013      	b.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800936c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009370:	3328      	adds	r3, #40	@ 0x28
 8009372:	2100      	movs	r1, #0
 8009374:	4618      	mov	r0, r3
 8009376:	f001 fc3b 	bl	800abf0 <RCCEx_PLL3_Config>
 800937a:	4603      	mov	r3, r0
 800937c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8009380:	e008      	b.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009382:	2301      	movs	r3, #1
 8009384:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009388:	e004      	b.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800938a:	bf00      	nop
 800938c:	e002      	b.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800938e:	bf00      	nop
 8009390:	e000      	b.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8009392:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009394:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009398:	2b00      	cmp	r3, #0
 800939a:	d10a      	bne.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800939c:	4b3a      	ldr	r3, [pc, #232]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800939e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093a0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80093a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80093aa:	4a37      	ldr	r2, [pc, #220]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80093ac:	430b      	orrs	r3, r1
 80093ae:	6513      	str	r3, [r2, #80]	@ 0x50
 80093b0:	e003      	b.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093b2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80093b6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80093ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80093c6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80093ca:	2300      	movs	r3, #0
 80093cc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80093d0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80093d4:	460b      	mov	r3, r1
 80093d6:	4313      	orrs	r3, r2
 80093d8:	d05c      	beq.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80093da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093e0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80093e4:	d03b      	beq.n	800945e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80093e6:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80093ea:	d834      	bhi.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80093ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80093f0:	d037      	beq.n	8009462 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80093f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80093f6:	d82e      	bhi.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80093f8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80093fc:	d033      	beq.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80093fe:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009402:	d828      	bhi.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8009404:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009408:	d01a      	beq.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800940a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800940e:	d822      	bhi.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8009410:	2b00      	cmp	r3, #0
 8009412:	d003      	beq.n	800941c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8009414:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009418:	d007      	beq.n	800942a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800941a:	e01c      	b.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800941c:	4b1a      	ldr	r3, [pc, #104]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800941e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009420:	4a19      	ldr	r2, [pc, #100]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009422:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009426:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8009428:	e01e      	b.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800942a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800942e:	3308      	adds	r3, #8
 8009430:	2100      	movs	r1, #0
 8009432:	4618      	mov	r0, r3
 8009434:	f001 fb2a 	bl	800aa8c <RCCEx_PLL2_Config>
 8009438:	4603      	mov	r3, r0
 800943a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800943e:	e013      	b.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009440:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009444:	3328      	adds	r3, #40	@ 0x28
 8009446:	2100      	movs	r1, #0
 8009448:	4618      	mov	r0, r3
 800944a:	f001 fbd1 	bl	800abf0 <RCCEx_PLL3_Config>
 800944e:	4603      	mov	r3, r0
 8009450:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8009454:	e008      	b.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009456:	2301      	movs	r3, #1
 8009458:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800945c:	e004      	b.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800945e:	bf00      	nop
 8009460:	e002      	b.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8009462:	bf00      	nop
 8009464:	e000      	b.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8009466:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009468:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800946c:	2b00      	cmp	r3, #0
 800946e:	d10d      	bne.n	800948c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8009470:	4b05      	ldr	r3, [pc, #20]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009472:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009474:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8009478:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800947c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800947e:	4a02      	ldr	r2, [pc, #8]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009480:	430b      	orrs	r3, r1
 8009482:	6513      	str	r3, [r2, #80]	@ 0x50
 8009484:	e006      	b.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8009486:	bf00      	nop
 8009488:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800948c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009490:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009494:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800949c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80094a0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80094a4:	2300      	movs	r3, #0
 80094a6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80094aa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80094ae:	460b      	mov	r3, r1
 80094b0:	4313      	orrs	r3, r2
 80094b2:	d03a      	beq.n	800952a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80094b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094ba:	2b30      	cmp	r3, #48	@ 0x30
 80094bc:	d01f      	beq.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80094be:	2b30      	cmp	r3, #48	@ 0x30
 80094c0:	d819      	bhi.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80094c2:	2b20      	cmp	r3, #32
 80094c4:	d00c      	beq.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80094c6:	2b20      	cmp	r3, #32
 80094c8:	d815      	bhi.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d019      	beq.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80094ce:	2b10      	cmp	r3, #16
 80094d0:	d111      	bne.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094d2:	4bae      	ldr	r3, [pc, #696]	@ (800978c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80094d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094d6:	4aad      	ldr	r2, [pc, #692]	@ (800978c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80094d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80094dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80094de:	e011      	b.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80094e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094e4:	3308      	adds	r3, #8
 80094e6:	2102      	movs	r1, #2
 80094e8:	4618      	mov	r0, r3
 80094ea:	f001 facf 	bl	800aa8c <RCCEx_PLL2_Config>
 80094ee:	4603      	mov	r3, r0
 80094f0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80094f4:	e006      	b.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80094f6:	2301      	movs	r3, #1
 80094f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80094fc:	e002      	b.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80094fe:	bf00      	nop
 8009500:	e000      	b.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8009502:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009504:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009508:	2b00      	cmp	r3, #0
 800950a:	d10a      	bne.n	8009522 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800950c:	4b9f      	ldr	r3, [pc, #636]	@ (800978c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800950e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009510:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009514:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800951a:	4a9c      	ldr	r2, [pc, #624]	@ (800978c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800951c:	430b      	orrs	r3, r1
 800951e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009520:	e003      	b.n	800952a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009522:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009526:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800952a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800952e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009532:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8009536:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800953a:	2300      	movs	r3, #0
 800953c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009540:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009544:	460b      	mov	r3, r1
 8009546:	4313      	orrs	r3, r2
 8009548:	d051      	beq.n	80095ee <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800954a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800954e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009550:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009554:	d035      	beq.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8009556:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800955a:	d82e      	bhi.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0x426>
 800955c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009560:	d031      	beq.n	80095c6 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8009562:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009566:	d828      	bhi.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0x426>
 8009568:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800956c:	d01a      	beq.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800956e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009572:	d822      	bhi.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0x426>
 8009574:	2b00      	cmp	r3, #0
 8009576:	d003      	beq.n	8009580 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8009578:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800957c:	d007      	beq.n	800958e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800957e:	e01c      	b.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009580:	4b82      	ldr	r3, [pc, #520]	@ (800978c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009584:	4a81      	ldr	r2, [pc, #516]	@ (800978c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009586:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800958a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800958c:	e01c      	b.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800958e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009592:	3308      	adds	r3, #8
 8009594:	2100      	movs	r1, #0
 8009596:	4618      	mov	r0, r3
 8009598:	f001 fa78 	bl	800aa8c <RCCEx_PLL2_Config>
 800959c:	4603      	mov	r3, r0
 800959e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80095a2:	e011      	b.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80095a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095a8:	3328      	adds	r3, #40	@ 0x28
 80095aa:	2100      	movs	r1, #0
 80095ac:	4618      	mov	r0, r3
 80095ae:	f001 fb1f 	bl	800abf0 <RCCEx_PLL3_Config>
 80095b2:	4603      	mov	r3, r0
 80095b4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80095b8:	e006      	b.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095ba:	2301      	movs	r3, #1
 80095bc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80095c0:	e002      	b.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80095c2:	bf00      	nop
 80095c4:	e000      	b.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80095c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d10a      	bne.n	80095e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80095d0:	4b6e      	ldr	r3, [pc, #440]	@ (800978c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80095d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095d4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80095d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80095de:	4a6b      	ldr	r2, [pc, #428]	@ (800978c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80095e0:	430b      	orrs	r3, r1
 80095e2:	6513      	str	r3, [r2, #80]	@ 0x50
 80095e4:	e003      	b.n	80095ee <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095e6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80095ea:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80095ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80095fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80095fe:	2300      	movs	r3, #0
 8009600:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009604:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8009608:	460b      	mov	r3, r1
 800960a:	4313      	orrs	r3, r2
 800960c:	d053      	beq.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800960e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009612:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009614:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009618:	d033      	beq.n	8009682 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800961a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800961e:	d82c      	bhi.n	800967a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8009620:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009624:	d02f      	beq.n	8009686 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8009626:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800962a:	d826      	bhi.n	800967a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800962c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009630:	d02b      	beq.n	800968a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009632:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009636:	d820      	bhi.n	800967a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8009638:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800963c:	d012      	beq.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800963e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009642:	d81a      	bhi.n	800967a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8009644:	2b00      	cmp	r3, #0
 8009646:	d022      	beq.n	800968e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8009648:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800964c:	d115      	bne.n	800967a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800964e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009652:	3308      	adds	r3, #8
 8009654:	2101      	movs	r1, #1
 8009656:	4618      	mov	r0, r3
 8009658:	f001 fa18 	bl	800aa8c <RCCEx_PLL2_Config>
 800965c:	4603      	mov	r3, r0
 800965e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009662:	e015      	b.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009664:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009668:	3328      	adds	r3, #40	@ 0x28
 800966a:	2101      	movs	r1, #1
 800966c:	4618      	mov	r0, r3
 800966e:	f001 fabf 	bl	800abf0 <RCCEx_PLL3_Config>
 8009672:	4603      	mov	r3, r0
 8009674:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009678:	e00a      	b.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800967a:	2301      	movs	r3, #1
 800967c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009680:	e006      	b.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8009682:	bf00      	nop
 8009684:	e004      	b.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8009686:	bf00      	nop
 8009688:	e002      	b.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800968a:	bf00      	nop
 800968c:	e000      	b.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800968e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009690:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009694:	2b00      	cmp	r3, #0
 8009696:	d10a      	bne.n	80096ae <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009698:	4b3c      	ldr	r3, [pc, #240]	@ (800978c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800969a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800969c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80096a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80096a6:	4a39      	ldr	r2, [pc, #228]	@ (800978c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80096a8:	430b      	orrs	r3, r1
 80096aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80096ac:	e003      	b.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096ae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80096b2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80096b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096be:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80096c2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80096c6:	2300      	movs	r3, #0
 80096c8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80096cc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80096d0:	460b      	mov	r3, r1
 80096d2:	4313      	orrs	r3, r2
 80096d4:	d060      	beq.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80096d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80096de:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80096e2:	d039      	beq.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80096e4:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80096e8:	d832      	bhi.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80096ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80096ee:	d035      	beq.n	800975c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80096f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80096f4:	d82c      	bhi.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80096f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096fa:	d031      	beq.n	8009760 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80096fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009700:	d826      	bhi.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8009702:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009706:	d02d      	beq.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8009708:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800970c:	d820      	bhi.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800970e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009712:	d012      	beq.n	800973a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009714:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009718:	d81a      	bhi.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800971a:	2b00      	cmp	r3, #0
 800971c:	d024      	beq.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800971e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009722:	d115      	bne.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009724:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009728:	3308      	adds	r3, #8
 800972a:	2101      	movs	r1, #1
 800972c:	4618      	mov	r0, r3
 800972e:	f001 f9ad 	bl	800aa8c <RCCEx_PLL2_Config>
 8009732:	4603      	mov	r3, r0
 8009734:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009738:	e017      	b.n	800976a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800973a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800973e:	3328      	adds	r3, #40	@ 0x28
 8009740:	2101      	movs	r1, #1
 8009742:	4618      	mov	r0, r3
 8009744:	f001 fa54 	bl	800abf0 <RCCEx_PLL3_Config>
 8009748:	4603      	mov	r3, r0
 800974a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800974e:	e00c      	b.n	800976a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009750:	2301      	movs	r3, #1
 8009752:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009756:	e008      	b.n	800976a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009758:	bf00      	nop
 800975a:	e006      	b.n	800976a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800975c:	bf00      	nop
 800975e:	e004      	b.n	800976a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009760:	bf00      	nop
 8009762:	e002      	b.n	800976a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009764:	bf00      	nop
 8009766:	e000      	b.n	800976a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009768:	bf00      	nop
    }

    if (ret == HAL_OK)
 800976a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800976e:	2b00      	cmp	r3, #0
 8009770:	d10e      	bne.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009772:	4b06      	ldr	r3, [pc, #24]	@ (800978c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009776:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800977a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800977e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009782:	4a02      	ldr	r2, [pc, #8]	@ (800978c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009784:	430b      	orrs	r3, r1
 8009786:	6593      	str	r3, [r2, #88]	@ 0x58
 8009788:	e006      	b.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800978a:	bf00      	nop
 800978c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009790:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009794:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009798:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800979c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80097a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80097a8:	2300      	movs	r3, #0
 80097aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80097ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80097b2:	460b      	mov	r3, r1
 80097b4:	4313      	orrs	r3, r2
 80097b6:	d037      	beq.n	8009828 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80097b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80097be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80097c2:	d00e      	beq.n	80097e2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80097c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80097c8:	d816      	bhi.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d018      	beq.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80097ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097d2:	d111      	bne.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097d4:	4bc4      	ldr	r3, [pc, #784]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80097d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097d8:	4ac3      	ldr	r2, [pc, #780]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80097da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80097de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80097e0:	e00f      	b.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80097e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097e6:	3308      	adds	r3, #8
 80097e8:	2101      	movs	r1, #1
 80097ea:	4618      	mov	r0, r3
 80097ec:	f001 f94e 	bl	800aa8c <RCCEx_PLL2_Config>
 80097f0:	4603      	mov	r3, r0
 80097f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80097f6:	e004      	b.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097f8:	2301      	movs	r3, #1
 80097fa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80097fe:	e000      	b.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8009800:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009802:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009806:	2b00      	cmp	r3, #0
 8009808:	d10a      	bne.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800980a:	4bb7      	ldr	r3, [pc, #732]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800980c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800980e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009812:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009816:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009818:	4ab3      	ldr	r2, [pc, #716]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800981a:	430b      	orrs	r3, r1
 800981c:	6513      	str	r3, [r2, #80]	@ 0x50
 800981e:	e003      	b.n	8009828 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009820:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009824:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009828:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800982c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009830:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009834:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009838:	2300      	movs	r3, #0
 800983a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800983e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8009842:	460b      	mov	r3, r1
 8009844:	4313      	orrs	r3, r2
 8009846:	d039      	beq.n	80098bc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009848:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800984c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800984e:	2b03      	cmp	r3, #3
 8009850:	d81c      	bhi.n	800988c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8009852:	a201      	add	r2, pc, #4	@ (adr r2, 8009858 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8009854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009858:	08009895 	.word	0x08009895
 800985c:	08009869 	.word	0x08009869
 8009860:	08009877 	.word	0x08009877
 8009864:	08009895 	.word	0x08009895
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009868:	4b9f      	ldr	r3, [pc, #636]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800986a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800986c:	4a9e      	ldr	r2, [pc, #632]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800986e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009872:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009874:	e00f      	b.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009876:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800987a:	3308      	adds	r3, #8
 800987c:	2102      	movs	r1, #2
 800987e:	4618      	mov	r0, r3
 8009880:	f001 f904 	bl	800aa8c <RCCEx_PLL2_Config>
 8009884:	4603      	mov	r3, r0
 8009886:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800988a:	e004      	b.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800988c:	2301      	movs	r3, #1
 800988e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009892:	e000      	b.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8009894:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009896:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800989a:	2b00      	cmp	r3, #0
 800989c:	d10a      	bne.n	80098b4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800989e:	4b92      	ldr	r3, [pc, #584]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80098a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80098a2:	f023 0103 	bic.w	r1, r3, #3
 80098a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80098ac:	4a8e      	ldr	r2, [pc, #568]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80098ae:	430b      	orrs	r3, r1
 80098b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80098b2:	e003      	b.n	80098bc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098b4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80098b8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80098bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80098c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80098cc:	2300      	movs	r3, #0
 80098ce:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80098d2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80098d6:	460b      	mov	r3, r1
 80098d8:	4313      	orrs	r3, r2
 80098da:	f000 8099 	beq.w	8009a10 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80098de:	4b83      	ldr	r3, [pc, #524]	@ (8009aec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	4a82      	ldr	r2, [pc, #520]	@ (8009aec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80098e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80098e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80098ea:	f7f8 fdd1 	bl	8002490 <HAL_GetTick>
 80098ee:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80098f2:	e00b      	b.n	800990c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80098f4:	f7f8 fdcc 	bl	8002490 <HAL_GetTick>
 80098f8:	4602      	mov	r2, r0
 80098fa:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80098fe:	1ad3      	subs	r3, r2, r3
 8009900:	2b64      	cmp	r3, #100	@ 0x64
 8009902:	d903      	bls.n	800990c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8009904:	2303      	movs	r3, #3
 8009906:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800990a:	e005      	b.n	8009918 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800990c:	4b77      	ldr	r3, [pc, #476]	@ (8009aec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009914:	2b00      	cmp	r3, #0
 8009916:	d0ed      	beq.n	80098f4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8009918:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800991c:	2b00      	cmp	r3, #0
 800991e:	d173      	bne.n	8009a08 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009920:	4b71      	ldr	r3, [pc, #452]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009922:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009924:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009928:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800992c:	4053      	eors	r3, r2
 800992e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009932:	2b00      	cmp	r3, #0
 8009934:	d015      	beq.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009936:	4b6c      	ldr	r3, [pc, #432]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009938:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800993a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800993e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009942:	4b69      	ldr	r3, [pc, #420]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009944:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009946:	4a68      	ldr	r2, [pc, #416]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009948:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800994c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800994e:	4b66      	ldr	r3, [pc, #408]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009950:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009952:	4a65      	ldr	r2, [pc, #404]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009954:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009958:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800995a:	4a63      	ldr	r2, [pc, #396]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800995c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009960:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009962:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009966:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800996a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800996e:	d118      	bne.n	80099a2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009970:	f7f8 fd8e 	bl	8002490 <HAL_GetTick>
 8009974:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009978:	e00d      	b.n	8009996 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800997a:	f7f8 fd89 	bl	8002490 <HAL_GetTick>
 800997e:	4602      	mov	r2, r0
 8009980:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009984:	1ad2      	subs	r2, r2, r3
 8009986:	f241 3388 	movw	r3, #5000	@ 0x1388
 800998a:	429a      	cmp	r2, r3
 800998c:	d903      	bls.n	8009996 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800998e:	2303      	movs	r3, #3
 8009990:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8009994:	e005      	b.n	80099a2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009996:	4b54      	ldr	r3, [pc, #336]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009998:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800999a:	f003 0302 	and.w	r3, r3, #2
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d0eb      	beq.n	800997a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80099a2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d129      	bne.n	80099fe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80099aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80099b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80099b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80099ba:	d10e      	bne.n	80099da <HAL_RCCEx_PeriphCLKConfig+0x846>
 80099bc:	4b4a      	ldr	r3, [pc, #296]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80099be:	691b      	ldr	r3, [r3, #16]
 80099c0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80099c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80099cc:	091a      	lsrs	r2, r3, #4
 80099ce:	4b48      	ldr	r3, [pc, #288]	@ (8009af0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80099d0:	4013      	ands	r3, r2
 80099d2:	4a45      	ldr	r2, [pc, #276]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80099d4:	430b      	orrs	r3, r1
 80099d6:	6113      	str	r3, [r2, #16]
 80099d8:	e005      	b.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80099da:	4b43      	ldr	r3, [pc, #268]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80099dc:	691b      	ldr	r3, [r3, #16]
 80099de:	4a42      	ldr	r2, [pc, #264]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80099e0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80099e4:	6113      	str	r3, [r2, #16]
 80099e6:	4b40      	ldr	r3, [pc, #256]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80099e8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80099ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80099f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80099f6:	4a3c      	ldr	r2, [pc, #240]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80099f8:	430b      	orrs	r3, r1
 80099fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80099fc:	e008      	b.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80099fe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009a02:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8009a06:	e003      	b.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a08:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009a0c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009a10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a18:	f002 0301 	and.w	r3, r2, #1
 8009a1c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009a20:	2300      	movs	r3, #0
 8009a22:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009a26:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009a2a:	460b      	mov	r3, r1
 8009a2c:	4313      	orrs	r3, r2
 8009a2e:	f000 8090 	beq.w	8009b52 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009a32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a3a:	2b28      	cmp	r3, #40	@ 0x28
 8009a3c:	d870      	bhi.n	8009b20 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8009a3e:	a201      	add	r2, pc, #4	@ (adr r2, 8009a44 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8009a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a44:	08009b29 	.word	0x08009b29
 8009a48:	08009b21 	.word	0x08009b21
 8009a4c:	08009b21 	.word	0x08009b21
 8009a50:	08009b21 	.word	0x08009b21
 8009a54:	08009b21 	.word	0x08009b21
 8009a58:	08009b21 	.word	0x08009b21
 8009a5c:	08009b21 	.word	0x08009b21
 8009a60:	08009b21 	.word	0x08009b21
 8009a64:	08009af5 	.word	0x08009af5
 8009a68:	08009b21 	.word	0x08009b21
 8009a6c:	08009b21 	.word	0x08009b21
 8009a70:	08009b21 	.word	0x08009b21
 8009a74:	08009b21 	.word	0x08009b21
 8009a78:	08009b21 	.word	0x08009b21
 8009a7c:	08009b21 	.word	0x08009b21
 8009a80:	08009b21 	.word	0x08009b21
 8009a84:	08009b0b 	.word	0x08009b0b
 8009a88:	08009b21 	.word	0x08009b21
 8009a8c:	08009b21 	.word	0x08009b21
 8009a90:	08009b21 	.word	0x08009b21
 8009a94:	08009b21 	.word	0x08009b21
 8009a98:	08009b21 	.word	0x08009b21
 8009a9c:	08009b21 	.word	0x08009b21
 8009aa0:	08009b21 	.word	0x08009b21
 8009aa4:	08009b29 	.word	0x08009b29
 8009aa8:	08009b21 	.word	0x08009b21
 8009aac:	08009b21 	.word	0x08009b21
 8009ab0:	08009b21 	.word	0x08009b21
 8009ab4:	08009b21 	.word	0x08009b21
 8009ab8:	08009b21 	.word	0x08009b21
 8009abc:	08009b21 	.word	0x08009b21
 8009ac0:	08009b21 	.word	0x08009b21
 8009ac4:	08009b29 	.word	0x08009b29
 8009ac8:	08009b21 	.word	0x08009b21
 8009acc:	08009b21 	.word	0x08009b21
 8009ad0:	08009b21 	.word	0x08009b21
 8009ad4:	08009b21 	.word	0x08009b21
 8009ad8:	08009b21 	.word	0x08009b21
 8009adc:	08009b21 	.word	0x08009b21
 8009ae0:	08009b21 	.word	0x08009b21
 8009ae4:	08009b29 	.word	0x08009b29
 8009ae8:	58024400 	.word	0x58024400
 8009aec:	58024800 	.word	0x58024800
 8009af0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009af4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009af8:	3308      	adds	r3, #8
 8009afa:	2101      	movs	r1, #1
 8009afc:	4618      	mov	r0, r3
 8009afe:	f000 ffc5 	bl	800aa8c <RCCEx_PLL2_Config>
 8009b02:	4603      	mov	r3, r0
 8009b04:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009b08:	e00f      	b.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009b0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b0e:	3328      	adds	r3, #40	@ 0x28
 8009b10:	2101      	movs	r1, #1
 8009b12:	4618      	mov	r0, r3
 8009b14:	f001 f86c 	bl	800abf0 <RCCEx_PLL3_Config>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009b1e:	e004      	b.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b20:	2301      	movs	r3, #1
 8009b22:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009b26:	e000      	b.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8009b28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b2a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d10b      	bne.n	8009b4a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009b32:	4bc0      	ldr	r3, [pc, #768]	@ (8009e34 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009b34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b36:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009b3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b42:	4abc      	ldr	r2, [pc, #752]	@ (8009e34 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009b44:	430b      	orrs	r3, r1
 8009b46:	6553      	str	r3, [r2, #84]	@ 0x54
 8009b48:	e003      	b.n	8009b52 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b4a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009b4e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009b52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b5a:	f002 0302 	and.w	r3, r2, #2
 8009b5e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009b62:	2300      	movs	r3, #0
 8009b64:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009b68:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009b6c:	460b      	mov	r3, r1
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	d043      	beq.n	8009bfa <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009b72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b7a:	2b05      	cmp	r3, #5
 8009b7c:	d824      	bhi.n	8009bc8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8009b7e:	a201      	add	r2, pc, #4	@ (adr r2, 8009b84 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8009b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b84:	08009bd1 	.word	0x08009bd1
 8009b88:	08009b9d 	.word	0x08009b9d
 8009b8c:	08009bb3 	.word	0x08009bb3
 8009b90:	08009bd1 	.word	0x08009bd1
 8009b94:	08009bd1 	.word	0x08009bd1
 8009b98:	08009bd1 	.word	0x08009bd1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009b9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ba0:	3308      	adds	r3, #8
 8009ba2:	2101      	movs	r1, #1
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f000 ff71 	bl	800aa8c <RCCEx_PLL2_Config>
 8009baa:	4603      	mov	r3, r0
 8009bac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009bb0:	e00f      	b.n	8009bd2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009bb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bb6:	3328      	adds	r3, #40	@ 0x28
 8009bb8:	2101      	movs	r1, #1
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f001 f818 	bl	800abf0 <RCCEx_PLL3_Config>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009bc6:	e004      	b.n	8009bd2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009bc8:	2301      	movs	r3, #1
 8009bca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009bce:	e000      	b.n	8009bd2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8009bd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bd2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d10b      	bne.n	8009bf2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009bda:	4b96      	ldr	r3, [pc, #600]	@ (8009e34 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009bdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bde:	f023 0107 	bic.w	r1, r3, #7
 8009be2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009be6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bea:	4a92      	ldr	r2, [pc, #584]	@ (8009e34 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009bec:	430b      	orrs	r3, r1
 8009bee:	6553      	str	r3, [r2, #84]	@ 0x54
 8009bf0:	e003      	b.n	8009bfa <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bf2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009bf6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009bfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c02:	f002 0304 	and.w	r3, r2, #4
 8009c06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009c10:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009c14:	460b      	mov	r3, r1
 8009c16:	4313      	orrs	r3, r2
 8009c18:	d043      	beq.n	8009ca2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009c1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009c22:	2b05      	cmp	r3, #5
 8009c24:	d824      	bhi.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8009c26:	a201      	add	r2, pc, #4	@ (adr r2, 8009c2c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8009c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c2c:	08009c79 	.word	0x08009c79
 8009c30:	08009c45 	.word	0x08009c45
 8009c34:	08009c5b 	.word	0x08009c5b
 8009c38:	08009c79 	.word	0x08009c79
 8009c3c:	08009c79 	.word	0x08009c79
 8009c40:	08009c79 	.word	0x08009c79
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009c44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c48:	3308      	adds	r3, #8
 8009c4a:	2101      	movs	r1, #1
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	f000 ff1d 	bl	800aa8c <RCCEx_PLL2_Config>
 8009c52:	4603      	mov	r3, r0
 8009c54:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009c58:	e00f      	b.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009c5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c5e:	3328      	adds	r3, #40	@ 0x28
 8009c60:	2101      	movs	r1, #1
 8009c62:	4618      	mov	r0, r3
 8009c64:	f000 ffc4 	bl	800abf0 <RCCEx_PLL3_Config>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009c6e:	e004      	b.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c70:	2301      	movs	r3, #1
 8009c72:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009c76:	e000      	b.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8009c78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c7a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d10b      	bne.n	8009c9a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009c82:	4b6c      	ldr	r3, [pc, #432]	@ (8009e34 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009c84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c86:	f023 0107 	bic.w	r1, r3, #7
 8009c8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009c92:	4a68      	ldr	r2, [pc, #416]	@ (8009e34 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009c94:	430b      	orrs	r3, r1
 8009c96:	6593      	str	r3, [r2, #88]	@ 0x58
 8009c98:	e003      	b.n	8009ca2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c9a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009c9e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009ca2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009caa:	f002 0320 	and.w	r3, r2, #32
 8009cae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009cb8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009cbc:	460b      	mov	r3, r1
 8009cbe:	4313      	orrs	r3, r2
 8009cc0:	d055      	beq.n	8009d6e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009cc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009cc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009cca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009cce:	d033      	beq.n	8009d38 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8009cd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009cd4:	d82c      	bhi.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8009cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009cda:	d02f      	beq.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8009cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ce0:	d826      	bhi.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8009ce2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009ce6:	d02b      	beq.n	8009d40 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8009ce8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009cec:	d820      	bhi.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8009cee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009cf2:	d012      	beq.n	8009d1a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8009cf4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009cf8:	d81a      	bhi.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d022      	beq.n	8009d44 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8009cfe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009d02:	d115      	bne.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d08:	3308      	adds	r3, #8
 8009d0a:	2100      	movs	r1, #0
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f000 febd 	bl	800aa8c <RCCEx_PLL2_Config>
 8009d12:	4603      	mov	r3, r0
 8009d14:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009d18:	e015      	b.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009d1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d1e:	3328      	adds	r3, #40	@ 0x28
 8009d20:	2102      	movs	r1, #2
 8009d22:	4618      	mov	r0, r3
 8009d24:	f000 ff64 	bl	800abf0 <RCCEx_PLL3_Config>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009d2e:	e00a      	b.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d30:	2301      	movs	r3, #1
 8009d32:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009d36:	e006      	b.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8009d38:	bf00      	nop
 8009d3a:	e004      	b.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8009d3c:	bf00      	nop
 8009d3e:	e002      	b.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8009d40:	bf00      	nop
 8009d42:	e000      	b.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8009d44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d46:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d10b      	bne.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009d4e:	4b39      	ldr	r3, [pc, #228]	@ (8009e34 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009d50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d52:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009d56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009d5e:	4a35      	ldr	r2, [pc, #212]	@ (8009e34 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009d60:	430b      	orrs	r3, r1
 8009d62:	6553      	str	r3, [r2, #84]	@ 0x54
 8009d64:	e003      	b.n	8009d6e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d66:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009d6a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009d6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d76:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009d7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009d7e:	2300      	movs	r3, #0
 8009d80:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009d84:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009d88:	460b      	mov	r3, r1
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	d058      	beq.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009d8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d92:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009d96:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009d9a:	d033      	beq.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8009d9c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009da0:	d82c      	bhi.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8009da2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009da6:	d02f      	beq.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8009da8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009dac:	d826      	bhi.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8009dae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009db2:	d02b      	beq.n	8009e0c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8009db4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009db8:	d820      	bhi.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8009dba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009dbe:	d012      	beq.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8009dc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009dc4:	d81a      	bhi.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d022      	beq.n	8009e10 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8009dca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009dce:	d115      	bne.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009dd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009dd4:	3308      	adds	r3, #8
 8009dd6:	2100      	movs	r1, #0
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f000 fe57 	bl	800aa8c <RCCEx_PLL2_Config>
 8009dde:	4603      	mov	r3, r0
 8009de0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009de4:	e015      	b.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009de6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009dea:	3328      	adds	r3, #40	@ 0x28
 8009dec:	2102      	movs	r1, #2
 8009dee:	4618      	mov	r0, r3
 8009df0:	f000 fefe 	bl	800abf0 <RCCEx_PLL3_Config>
 8009df4:	4603      	mov	r3, r0
 8009df6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009dfa:	e00a      	b.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009e02:	e006      	b.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8009e04:	bf00      	nop
 8009e06:	e004      	b.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8009e08:	bf00      	nop
 8009e0a:	e002      	b.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8009e0c:	bf00      	nop
 8009e0e:	e000      	b.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8009e10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e12:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d10e      	bne.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009e1a:	4b06      	ldr	r3, [pc, #24]	@ (8009e34 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e1e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009e22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e26:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009e2a:	4a02      	ldr	r2, [pc, #8]	@ (8009e34 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009e2c:	430b      	orrs	r3, r1
 8009e2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009e30:	e006      	b.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8009e32:	bf00      	nop
 8009e34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e38:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009e3c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009e40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e48:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009e4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009e50:	2300      	movs	r3, #0
 8009e52:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009e56:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009e5a:	460b      	mov	r3, r1
 8009e5c:	4313      	orrs	r3, r2
 8009e5e:	d055      	beq.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009e60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e64:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009e68:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009e6c:	d033      	beq.n	8009ed6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8009e6e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009e72:	d82c      	bhi.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8009e74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009e78:	d02f      	beq.n	8009eda <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8009e7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009e7e:	d826      	bhi.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8009e80:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009e84:	d02b      	beq.n	8009ede <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8009e86:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009e8a:	d820      	bhi.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8009e8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009e90:	d012      	beq.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8009e92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009e96:	d81a      	bhi.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d022      	beq.n	8009ee2 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8009e9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ea0:	d115      	bne.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009ea2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ea6:	3308      	adds	r3, #8
 8009ea8:	2100      	movs	r1, #0
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f000 fdee 	bl	800aa8c <RCCEx_PLL2_Config>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009eb6:	e015      	b.n	8009ee4 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009eb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ebc:	3328      	adds	r3, #40	@ 0x28
 8009ebe:	2102      	movs	r1, #2
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f000 fe95 	bl	800abf0 <RCCEx_PLL3_Config>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009ecc:	e00a      	b.n	8009ee4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009ed4:	e006      	b.n	8009ee4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8009ed6:	bf00      	nop
 8009ed8:	e004      	b.n	8009ee4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8009eda:	bf00      	nop
 8009edc:	e002      	b.n	8009ee4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8009ede:	bf00      	nop
 8009ee0:	e000      	b.n	8009ee4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8009ee2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ee4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d10b      	bne.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009eec:	4ba1      	ldr	r3, [pc, #644]	@ (800a174 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009eee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ef0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009ef4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ef8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009efc:	4a9d      	ldr	r2, [pc, #628]	@ (800a174 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009efe:	430b      	orrs	r3, r1
 8009f00:	6593      	str	r3, [r2, #88]	@ 0x58
 8009f02:	e003      	b.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f04:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009f08:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009f0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f14:	f002 0308 	and.w	r3, r2, #8
 8009f18:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009f22:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009f26:	460b      	mov	r3, r1
 8009f28:	4313      	orrs	r3, r2
 8009f2a:	d01e      	beq.n	8009f6a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009f2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009f34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f38:	d10c      	bne.n	8009f54 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009f3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f3e:	3328      	adds	r3, #40	@ 0x28
 8009f40:	2102      	movs	r1, #2
 8009f42:	4618      	mov	r0, r3
 8009f44:	f000 fe54 	bl	800abf0 <RCCEx_PLL3_Config>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d002      	beq.n	8009f54 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8009f4e:	2301      	movs	r3, #1
 8009f50:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009f54:	4b87      	ldr	r3, [pc, #540]	@ (800a174 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f58:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009f5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009f64:	4a83      	ldr	r2, [pc, #524]	@ (800a174 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009f66:	430b      	orrs	r3, r1
 8009f68:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009f6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f72:	f002 0310 	and.w	r3, r2, #16
 8009f76:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009f80:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009f84:	460b      	mov	r3, r1
 8009f86:	4313      	orrs	r3, r2
 8009f88:	d01e      	beq.n	8009fc8 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009f8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f8e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009f92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f96:	d10c      	bne.n	8009fb2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009f98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f9c:	3328      	adds	r3, #40	@ 0x28
 8009f9e:	2102      	movs	r1, #2
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	f000 fe25 	bl	800abf0 <RCCEx_PLL3_Config>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d002      	beq.n	8009fb2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8009fac:	2301      	movs	r3, #1
 8009fae:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009fb2:	4b70      	ldr	r3, [pc, #448]	@ (800a174 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009fb6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009fba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fbe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009fc2:	4a6c      	ldr	r2, [pc, #432]	@ (800a174 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009fc4:	430b      	orrs	r3, r1
 8009fc6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009fc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009fd4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009fd8:	2300      	movs	r3, #0
 8009fda:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009fde:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009fe2:	460b      	mov	r3, r1
 8009fe4:	4313      	orrs	r3, r2
 8009fe6:	d03e      	beq.n	800a066 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009fe8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009ff0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009ff4:	d022      	beq.n	800a03c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8009ff6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009ffa:	d81b      	bhi.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d003      	beq.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800a000:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a004:	d00b      	beq.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800a006:	e015      	b.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a008:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a00c:	3308      	adds	r3, #8
 800a00e:	2100      	movs	r1, #0
 800a010:	4618      	mov	r0, r3
 800a012:	f000 fd3b 	bl	800aa8c <RCCEx_PLL2_Config>
 800a016:	4603      	mov	r3, r0
 800a018:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a01c:	e00f      	b.n	800a03e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a01e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a022:	3328      	adds	r3, #40	@ 0x28
 800a024:	2102      	movs	r1, #2
 800a026:	4618      	mov	r0, r3
 800a028:	f000 fde2 	bl	800abf0 <RCCEx_PLL3_Config>
 800a02c:	4603      	mov	r3, r0
 800a02e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a032:	e004      	b.n	800a03e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a034:	2301      	movs	r3, #1
 800a036:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a03a:	e000      	b.n	800a03e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800a03c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a03e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a042:	2b00      	cmp	r3, #0
 800a044:	d10b      	bne.n	800a05e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a046:	4b4b      	ldr	r3, [pc, #300]	@ (800a174 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a04a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800a04e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a052:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a056:	4a47      	ldr	r2, [pc, #284]	@ (800a174 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a058:	430b      	orrs	r3, r1
 800a05a:	6593      	str	r3, [r2, #88]	@ 0x58
 800a05c:	e003      	b.n	800a066 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a05e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a062:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a066:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a06e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800a072:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a074:	2300      	movs	r3, #0
 800a076:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a078:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800a07c:	460b      	mov	r3, r1
 800a07e:	4313      	orrs	r3, r2
 800a080:	d03b      	beq.n	800a0fa <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a082:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a086:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a08a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a08e:	d01f      	beq.n	800a0d0 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800a090:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a094:	d818      	bhi.n	800a0c8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800a096:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a09a:	d003      	beq.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800a09c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a0a0:	d007      	beq.n	800a0b2 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800a0a2:	e011      	b.n	800a0c8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0a4:	4b33      	ldr	r3, [pc, #204]	@ (800a174 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a0a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0a8:	4a32      	ldr	r2, [pc, #200]	@ (800a174 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a0aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a0ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a0b0:	e00f      	b.n	800a0d2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a0b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a0b6:	3328      	adds	r3, #40	@ 0x28
 800a0b8:	2101      	movs	r1, #1
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f000 fd98 	bl	800abf0 <RCCEx_PLL3_Config>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800a0c6:	e004      	b.n	800a0d2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a0ce:	e000      	b.n	800a0d2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800a0d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0d2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d10b      	bne.n	800a0f2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a0da:	4b26      	ldr	r3, [pc, #152]	@ (800a174 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a0dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0de:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a0e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a0e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a0ea:	4a22      	ldr	r2, [pc, #136]	@ (800a174 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a0ec:	430b      	orrs	r3, r1
 800a0ee:	6553      	str	r3, [r2, #84]	@ 0x54
 800a0f0:	e003      	b.n	800a0fa <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0f2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a0f6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a0fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a102:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800a106:	673b      	str	r3, [r7, #112]	@ 0x70
 800a108:	2300      	movs	r3, #0
 800a10a:	677b      	str	r3, [r7, #116]	@ 0x74
 800a10c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800a110:	460b      	mov	r3, r1
 800a112:	4313      	orrs	r3, r2
 800a114:	d034      	beq.n	800a180 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a116:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a11a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d003      	beq.n	800a128 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800a120:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a124:	d007      	beq.n	800a136 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800a126:	e011      	b.n	800a14c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a128:	4b12      	ldr	r3, [pc, #72]	@ (800a174 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a12a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a12c:	4a11      	ldr	r2, [pc, #68]	@ (800a174 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a12e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a132:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a134:	e00e      	b.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a136:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a13a:	3308      	adds	r3, #8
 800a13c:	2102      	movs	r1, #2
 800a13e:	4618      	mov	r0, r3
 800a140:	f000 fca4 	bl	800aa8c <RCCEx_PLL2_Config>
 800a144:	4603      	mov	r3, r0
 800a146:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a14a:	e003      	b.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800a14c:	2301      	movs	r3, #1
 800a14e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a152:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a154:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d10d      	bne.n	800a178 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a15c:	4b05      	ldr	r3, [pc, #20]	@ (800a174 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a15e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a160:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a164:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a168:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a16a:	4a02      	ldr	r2, [pc, #8]	@ (800a174 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a16c:	430b      	orrs	r3, r1
 800a16e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a170:	e006      	b.n	800a180 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800a172:	bf00      	nop
 800a174:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a178:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a17c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a180:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a188:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800a18c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a18e:	2300      	movs	r3, #0
 800a190:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a192:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800a196:	460b      	mov	r3, r1
 800a198:	4313      	orrs	r3, r2
 800a19a:	d00c      	beq.n	800a1b6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a19c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a1a0:	3328      	adds	r3, #40	@ 0x28
 800a1a2:	2102      	movs	r1, #2
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f000 fd23 	bl	800abf0 <RCCEx_PLL3_Config>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d002      	beq.n	800a1b6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a1b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1be:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800a1c2:	663b      	str	r3, [r7, #96]	@ 0x60
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	667b      	str	r3, [r7, #100]	@ 0x64
 800a1c8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800a1cc:	460b      	mov	r3, r1
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	d038      	beq.n	800a244 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a1d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a1d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a1de:	d018      	beq.n	800a212 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800a1e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a1e4:	d811      	bhi.n	800a20a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800a1e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a1ea:	d014      	beq.n	800a216 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800a1ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a1f0:	d80b      	bhi.n	800a20a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d011      	beq.n	800a21a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800a1f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1fa:	d106      	bne.n	800a20a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1fc:	4bc3      	ldr	r3, [pc, #780]	@ (800a50c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a1fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a200:	4ac2      	ldr	r2, [pc, #776]	@ (800a50c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a202:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a206:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a208:	e008      	b.n	800a21c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a20a:	2301      	movs	r3, #1
 800a20c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a210:	e004      	b.n	800a21c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800a212:	bf00      	nop
 800a214:	e002      	b.n	800a21c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800a216:	bf00      	nop
 800a218:	e000      	b.n	800a21c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800a21a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a21c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a220:	2b00      	cmp	r3, #0
 800a222:	d10b      	bne.n	800a23c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a224:	4bb9      	ldr	r3, [pc, #740]	@ (800a50c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a226:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a228:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a22c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a230:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a234:	4ab5      	ldr	r2, [pc, #724]	@ (800a50c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a236:	430b      	orrs	r3, r1
 800a238:	6553      	str	r3, [r2, #84]	@ 0x54
 800a23a:	e003      	b.n	800a244 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a23c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a240:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a244:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a24c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800a250:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a252:	2300      	movs	r3, #0
 800a254:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a256:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a25a:	460b      	mov	r3, r1
 800a25c:	4313      	orrs	r3, r2
 800a25e:	d009      	beq.n	800a274 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a260:	4baa      	ldr	r3, [pc, #680]	@ (800a50c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a262:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a264:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a268:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a26c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a26e:	4aa7      	ldr	r2, [pc, #668]	@ (800a50c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a270:	430b      	orrs	r3, r1
 800a272:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a274:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a27c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a280:	653b      	str	r3, [r7, #80]	@ 0x50
 800a282:	2300      	movs	r3, #0
 800a284:	657b      	str	r3, [r7, #84]	@ 0x54
 800a286:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a28a:	460b      	mov	r3, r1
 800a28c:	4313      	orrs	r3, r2
 800a28e:	d009      	beq.n	800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a290:	4b9e      	ldr	r3, [pc, #632]	@ (800a50c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a292:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a294:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800a298:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a29c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a29e:	4a9b      	ldr	r2, [pc, #620]	@ (800a50c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a2a0:	430b      	orrs	r3, r1
 800a2a2:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800a2a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ac:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800a2b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a2b6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a2ba:	460b      	mov	r3, r1
 800a2bc:	4313      	orrs	r3, r2
 800a2be:	d009      	beq.n	800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800a2c0:	4b92      	ldr	r3, [pc, #584]	@ (800a50c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a2c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2c4:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 800a2c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a2ce:	4a8f      	ldr	r2, [pc, #572]	@ (800a50c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a2d0:	430b      	orrs	r3, r1
 800a2d2:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a2d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2dc:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a2e0:	643b      	str	r3, [r7, #64]	@ 0x40
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	647b      	str	r3, [r7, #68]	@ 0x44
 800a2e6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a2ea:	460b      	mov	r3, r1
 800a2ec:	4313      	orrs	r3, r2
 800a2ee:	d00e      	beq.n	800a30e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a2f0:	4b86      	ldr	r3, [pc, #536]	@ (800a50c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a2f2:	691b      	ldr	r3, [r3, #16]
 800a2f4:	4a85      	ldr	r2, [pc, #532]	@ (800a50c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a2f6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a2fa:	6113      	str	r3, [r2, #16]
 800a2fc:	4b83      	ldr	r3, [pc, #524]	@ (800a50c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a2fe:	6919      	ldr	r1, [r3, #16]
 800a300:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a304:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a308:	4a80      	ldr	r2, [pc, #512]	@ (800a50c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a30a:	430b      	orrs	r3, r1
 800a30c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a30e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a312:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a316:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a31a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a31c:	2300      	movs	r3, #0
 800a31e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a320:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a324:	460b      	mov	r3, r1
 800a326:	4313      	orrs	r3, r2
 800a328:	d009      	beq.n	800a33e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a32a:	4b78      	ldr	r3, [pc, #480]	@ (800a50c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a32c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a32e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a332:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a336:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a338:	4a74      	ldr	r2, [pc, #464]	@ (800a50c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a33a:	430b      	orrs	r3, r1
 800a33c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a33e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a346:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a34a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a34c:	2300      	movs	r3, #0
 800a34e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a350:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a354:	460b      	mov	r3, r1
 800a356:	4313      	orrs	r3, r2
 800a358:	d00a      	beq.n	800a370 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a35a:	4b6c      	ldr	r3, [pc, #432]	@ (800a50c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a35c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a35e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a362:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a366:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a36a:	4a68      	ldr	r2, [pc, #416]	@ (800a50c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a36c:	430b      	orrs	r3, r1
 800a36e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a370:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a378:	2100      	movs	r1, #0
 800a37a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a37c:	f003 0301 	and.w	r3, r3, #1
 800a380:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a382:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a386:	460b      	mov	r3, r1
 800a388:	4313      	orrs	r3, r2
 800a38a:	d011      	beq.n	800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a38c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a390:	3308      	adds	r3, #8
 800a392:	2100      	movs	r1, #0
 800a394:	4618      	mov	r0, r3
 800a396:	f000 fb79 	bl	800aa8c <RCCEx_PLL2_Config>
 800a39a:	4603      	mov	r3, r0
 800a39c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800a3a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d003      	beq.n	800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a3ac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a3b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b8:	2100      	movs	r1, #0
 800a3ba:	6239      	str	r1, [r7, #32]
 800a3bc:	f003 0302 	and.w	r3, r3, #2
 800a3c0:	627b      	str	r3, [r7, #36]	@ 0x24
 800a3c2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a3c6:	460b      	mov	r3, r1
 800a3c8:	4313      	orrs	r3, r2
 800a3ca:	d011      	beq.n	800a3f0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a3cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3d0:	3308      	adds	r3, #8
 800a3d2:	2101      	movs	r1, #1
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f000 fb59 	bl	800aa8c <RCCEx_PLL2_Config>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800a3e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d003      	beq.n	800a3f0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3e8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a3ec:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a3f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f8:	2100      	movs	r1, #0
 800a3fa:	61b9      	str	r1, [r7, #24]
 800a3fc:	f003 0304 	and.w	r3, r3, #4
 800a400:	61fb      	str	r3, [r7, #28]
 800a402:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a406:	460b      	mov	r3, r1
 800a408:	4313      	orrs	r3, r2
 800a40a:	d011      	beq.n	800a430 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a40c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a410:	3308      	adds	r3, #8
 800a412:	2102      	movs	r1, #2
 800a414:	4618      	mov	r0, r3
 800a416:	f000 fb39 	bl	800aa8c <RCCEx_PLL2_Config>
 800a41a:	4603      	mov	r3, r0
 800a41c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800a420:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a424:	2b00      	cmp	r3, #0
 800a426:	d003      	beq.n	800a430 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a428:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a42c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a430:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a434:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a438:	2100      	movs	r1, #0
 800a43a:	6139      	str	r1, [r7, #16]
 800a43c:	f003 0308 	and.w	r3, r3, #8
 800a440:	617b      	str	r3, [r7, #20]
 800a442:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a446:	460b      	mov	r3, r1
 800a448:	4313      	orrs	r3, r2
 800a44a:	d011      	beq.n	800a470 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a44c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a450:	3328      	adds	r3, #40	@ 0x28
 800a452:	2100      	movs	r1, #0
 800a454:	4618      	mov	r0, r3
 800a456:	f000 fbcb 	bl	800abf0 <RCCEx_PLL3_Config>
 800a45a:	4603      	mov	r3, r0
 800a45c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 800a460:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a464:	2b00      	cmp	r3, #0
 800a466:	d003      	beq.n	800a470 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a468:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a46c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a470:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a478:	2100      	movs	r1, #0
 800a47a:	60b9      	str	r1, [r7, #8]
 800a47c:	f003 0310 	and.w	r3, r3, #16
 800a480:	60fb      	str	r3, [r7, #12]
 800a482:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a486:	460b      	mov	r3, r1
 800a488:	4313      	orrs	r3, r2
 800a48a:	d011      	beq.n	800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a48c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a490:	3328      	adds	r3, #40	@ 0x28
 800a492:	2101      	movs	r1, #1
 800a494:	4618      	mov	r0, r3
 800a496:	f000 fbab 	bl	800abf0 <RCCEx_PLL3_Config>
 800a49a:	4603      	mov	r3, r0
 800a49c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800a4a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d003      	beq.n	800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a4ac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a4b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b8:	2100      	movs	r1, #0
 800a4ba:	6039      	str	r1, [r7, #0]
 800a4bc:	f003 0320 	and.w	r3, r3, #32
 800a4c0:	607b      	str	r3, [r7, #4]
 800a4c2:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a4c6:	460b      	mov	r3, r1
 800a4c8:	4313      	orrs	r3, r2
 800a4ca:	d011      	beq.n	800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a4cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4d0:	3328      	adds	r3, #40	@ 0x28
 800a4d2:	2102      	movs	r1, #2
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f000 fb8b 	bl	800abf0 <RCCEx_PLL3_Config>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800a4e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d003      	beq.n	800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4e8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a4ec:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 800a4f0:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d101      	bne.n	800a4fc <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	e000      	b.n	800a4fe <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800a4fc:	2301      	movs	r3, #1
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800a504:	46bd      	mov	sp, r7
 800a506:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a50a:	bf00      	nop
 800a50c:	58024400 	.word	0x58024400

0800a510 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800a514:	f7fe fda0 	bl	8009058 <HAL_RCC_GetHCLKFreq>
 800a518:	4602      	mov	r2, r0
 800a51a:	4b06      	ldr	r3, [pc, #24]	@ (800a534 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a51c:	6a1b      	ldr	r3, [r3, #32]
 800a51e:	091b      	lsrs	r3, r3, #4
 800a520:	f003 0307 	and.w	r3, r3, #7
 800a524:	4904      	ldr	r1, [pc, #16]	@ (800a538 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a526:	5ccb      	ldrb	r3, [r1, r3]
 800a528:	f003 031f 	and.w	r3, r3, #31
 800a52c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800a530:	4618      	mov	r0, r3
 800a532:	bd80      	pop	{r7, pc}
 800a534:	58024400 	.word	0x58024400
 800a538:	08014b54 	.word	0x08014b54

0800a53c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a53c:	b480      	push	{r7}
 800a53e:	b089      	sub	sp, #36	@ 0x24
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a544:	4ba1      	ldr	r3, [pc, #644]	@ (800a7cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a548:	f003 0303 	and.w	r3, r3, #3
 800a54c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a54e:	4b9f      	ldr	r3, [pc, #636]	@ (800a7cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a552:	0b1b      	lsrs	r3, r3, #12
 800a554:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a558:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a55a:	4b9c      	ldr	r3, [pc, #624]	@ (800a7cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a55c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a55e:	091b      	lsrs	r3, r3, #4
 800a560:	f003 0301 	and.w	r3, r3, #1
 800a564:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a566:	4b99      	ldr	r3, [pc, #612]	@ (800a7cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a568:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a56a:	08db      	lsrs	r3, r3, #3
 800a56c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a570:	693a      	ldr	r2, [r7, #16]
 800a572:	fb02 f303 	mul.w	r3, r2, r3
 800a576:	ee07 3a90 	vmov	s15, r3
 800a57a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a57e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	2b00      	cmp	r3, #0
 800a586:	f000 8111 	beq.w	800a7ac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a58a:	69bb      	ldr	r3, [r7, #24]
 800a58c:	2b02      	cmp	r3, #2
 800a58e:	f000 8083 	beq.w	800a698 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a592:	69bb      	ldr	r3, [r7, #24]
 800a594:	2b02      	cmp	r3, #2
 800a596:	f200 80a1 	bhi.w	800a6dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a59a:	69bb      	ldr	r3, [r7, #24]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d003      	beq.n	800a5a8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a5a0:	69bb      	ldr	r3, [r7, #24]
 800a5a2:	2b01      	cmp	r3, #1
 800a5a4:	d056      	beq.n	800a654 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a5a6:	e099      	b.n	800a6dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a5a8:	4b88      	ldr	r3, [pc, #544]	@ (800a7cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f003 0320 	and.w	r3, r3, #32
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d02d      	beq.n	800a610 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a5b4:	4b85      	ldr	r3, [pc, #532]	@ (800a7cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	08db      	lsrs	r3, r3, #3
 800a5ba:	f003 0303 	and.w	r3, r3, #3
 800a5be:	4a84      	ldr	r2, [pc, #528]	@ (800a7d0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a5c0:	fa22 f303 	lsr.w	r3, r2, r3
 800a5c4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	ee07 3a90 	vmov	s15, r3
 800a5cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	ee07 3a90 	vmov	s15, r3
 800a5d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5de:	4b7b      	ldr	r3, [pc, #492]	@ (800a7cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a5e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5e6:	ee07 3a90 	vmov	s15, r3
 800a5ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800a5f2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a7d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a5f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a60a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a60e:	e087      	b.n	800a720 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	ee07 3a90 	vmov	s15, r3
 800a616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a61a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a7d8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a61e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a622:	4b6a      	ldr	r3, [pc, #424]	@ (800a7cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a62a:	ee07 3a90 	vmov	s15, r3
 800a62e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a632:	ed97 6a03 	vldr	s12, [r7, #12]
 800a636:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a7d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a63a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a63e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a642:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a646:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a64a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a64e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a652:	e065      	b.n	800a720 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a654:	697b      	ldr	r3, [r7, #20]
 800a656:	ee07 3a90 	vmov	s15, r3
 800a65a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a65e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a7dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a662:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a666:	4b59      	ldr	r3, [pc, #356]	@ (800a7cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a668:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a66a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a66e:	ee07 3a90 	vmov	s15, r3
 800a672:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a676:	ed97 6a03 	vldr	s12, [r7, #12]
 800a67a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a7d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a67e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a682:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a686:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a68a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a68e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a692:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a696:	e043      	b.n	800a720 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	ee07 3a90 	vmov	s15, r3
 800a69e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6a2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a7e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a6a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6aa:	4b48      	ldr	r3, [pc, #288]	@ (800a7cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6b2:	ee07 3a90 	vmov	s15, r3
 800a6b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800a6be:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a7d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a6c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a6ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a6da:	e021      	b.n	800a720 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	ee07 3a90 	vmov	s15, r3
 800a6e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6e6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a7dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a6ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6ee:	4b37      	ldr	r3, [pc, #220]	@ (800a7cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6f6:	ee07 3a90 	vmov	s15, r3
 800a6fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800a702:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a7d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a706:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a70a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a70e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a71a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a71e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a720:	4b2a      	ldr	r3, [pc, #168]	@ (800a7cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a724:	0a5b      	lsrs	r3, r3, #9
 800a726:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a72a:	ee07 3a90 	vmov	s15, r3
 800a72e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a732:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a736:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a73a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a73e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a742:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a746:	ee17 2a90 	vmov	r2, s15
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a74e:	4b1f      	ldr	r3, [pc, #124]	@ (800a7cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a752:	0c1b      	lsrs	r3, r3, #16
 800a754:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a758:	ee07 3a90 	vmov	s15, r3
 800a75c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a760:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a764:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a768:	edd7 6a07 	vldr	s13, [r7, #28]
 800a76c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a770:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a774:	ee17 2a90 	vmov	r2, s15
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a77c:	4b13      	ldr	r3, [pc, #76]	@ (800a7cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a77e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a780:	0e1b      	lsrs	r3, r3, #24
 800a782:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a786:	ee07 3a90 	vmov	s15, r3
 800a78a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a78e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a792:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a796:	edd7 6a07 	vldr	s13, [r7, #28]
 800a79a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a79e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7a2:	ee17 2a90 	vmov	r2, s15
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a7aa:	e008      	b.n	800a7be <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	609a      	str	r2, [r3, #8]
}
 800a7be:	bf00      	nop
 800a7c0:	3724      	adds	r7, #36	@ 0x24
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c8:	4770      	bx	lr
 800a7ca:	bf00      	nop
 800a7cc:	58024400 	.word	0x58024400
 800a7d0:	03d09000 	.word	0x03d09000
 800a7d4:	46000000 	.word	0x46000000
 800a7d8:	4c742400 	.word	0x4c742400
 800a7dc:	4a742400 	.word	0x4a742400
 800a7e0:	4bb71b00 	.word	0x4bb71b00

0800a7e4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b089      	sub	sp, #36	@ 0x24
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a7ec:	4ba1      	ldr	r3, [pc, #644]	@ (800aa74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a7ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7f0:	f003 0303 	and.w	r3, r3, #3
 800a7f4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a7f6:	4b9f      	ldr	r3, [pc, #636]	@ (800aa74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a7f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7fa:	0d1b      	lsrs	r3, r3, #20
 800a7fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a800:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a802:	4b9c      	ldr	r3, [pc, #624]	@ (800aa74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a806:	0a1b      	lsrs	r3, r3, #8
 800a808:	f003 0301 	and.w	r3, r3, #1
 800a80c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a80e:	4b99      	ldr	r3, [pc, #612]	@ (800aa74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a812:	08db      	lsrs	r3, r3, #3
 800a814:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a818:	693a      	ldr	r2, [r7, #16]
 800a81a:	fb02 f303 	mul.w	r3, r2, r3
 800a81e:	ee07 3a90 	vmov	s15, r3
 800a822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a826:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a82a:	697b      	ldr	r3, [r7, #20]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	f000 8111 	beq.w	800aa54 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a832:	69bb      	ldr	r3, [r7, #24]
 800a834:	2b02      	cmp	r3, #2
 800a836:	f000 8083 	beq.w	800a940 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a83a:	69bb      	ldr	r3, [r7, #24]
 800a83c:	2b02      	cmp	r3, #2
 800a83e:	f200 80a1 	bhi.w	800a984 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a842:	69bb      	ldr	r3, [r7, #24]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d003      	beq.n	800a850 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a848:	69bb      	ldr	r3, [r7, #24]
 800a84a:	2b01      	cmp	r3, #1
 800a84c:	d056      	beq.n	800a8fc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a84e:	e099      	b.n	800a984 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a850:	4b88      	ldr	r3, [pc, #544]	@ (800aa74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f003 0320 	and.w	r3, r3, #32
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d02d      	beq.n	800a8b8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a85c:	4b85      	ldr	r3, [pc, #532]	@ (800aa74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	08db      	lsrs	r3, r3, #3
 800a862:	f003 0303 	and.w	r3, r3, #3
 800a866:	4a84      	ldr	r2, [pc, #528]	@ (800aa78 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a868:	fa22 f303 	lsr.w	r3, r2, r3
 800a86c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	ee07 3a90 	vmov	s15, r3
 800a874:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	ee07 3a90 	vmov	s15, r3
 800a87e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a886:	4b7b      	ldr	r3, [pc, #492]	@ (800aa74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a88a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a88e:	ee07 3a90 	vmov	s15, r3
 800a892:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a896:	ed97 6a03 	vldr	s12, [r7, #12]
 800a89a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800aa7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a89e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a8aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a8b6:	e087      	b.n	800a9c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	ee07 3a90 	vmov	s15, r3
 800a8be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8c2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800aa80 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a8c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8ca:	4b6a      	ldr	r3, [pc, #424]	@ (800aa74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a8cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8d2:	ee07 3a90 	vmov	s15, r3
 800a8d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8da:	ed97 6a03 	vldr	s12, [r7, #12]
 800a8de:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800aa7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a8e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a8ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a8fa:	e065      	b.n	800a9c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	ee07 3a90 	vmov	s15, r3
 800a902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a906:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800aa84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a90a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a90e:	4b59      	ldr	r3, [pc, #356]	@ (800aa74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a916:	ee07 3a90 	vmov	s15, r3
 800a91a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a91e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a922:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800aa7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a926:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a92a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a92e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a932:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a93a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a93e:	e043      	b.n	800a9c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	ee07 3a90 	vmov	s15, r3
 800a946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a94a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800aa88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a94e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a952:	4b48      	ldr	r3, [pc, #288]	@ (800aa74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a95a:	ee07 3a90 	vmov	s15, r3
 800a95e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a962:	ed97 6a03 	vldr	s12, [r7, #12]
 800a966:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800aa7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a96a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a96e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a972:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a976:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a97a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a97e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a982:	e021      	b.n	800a9c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	ee07 3a90 	vmov	s15, r3
 800a98a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a98e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800aa84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a992:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a996:	4b37      	ldr	r3, [pc, #220]	@ (800aa74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a99a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a99e:	ee07 3a90 	vmov	s15, r3
 800a9a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9aa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800aa7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a9ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a9ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a9c6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a9c8:	4b2a      	ldr	r3, [pc, #168]	@ (800aa74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a9ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9cc:	0a5b      	lsrs	r3, r3, #9
 800a9ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a9d2:	ee07 3a90 	vmov	s15, r3
 800a9d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a9de:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a9e2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a9e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a9ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9ee:	ee17 2a90 	vmov	r2, s15
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a9f6:	4b1f      	ldr	r3, [pc, #124]	@ (800aa74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a9f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9fa:	0c1b      	lsrs	r3, r3, #16
 800a9fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa00:	ee07 3a90 	vmov	s15, r3
 800aa04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa08:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aa0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aa10:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa1c:	ee17 2a90 	vmov	r2, s15
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800aa24:	4b13      	ldr	r3, [pc, #76]	@ (800aa74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa28:	0e1b      	lsrs	r3, r3, #24
 800aa2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa2e:	ee07 3a90 	vmov	s15, r3
 800aa32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aa3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aa3e:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa4a:	ee17 2a90 	vmov	r2, s15
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800aa52:	e008      	b.n	800aa66 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2200      	movs	r2, #0
 800aa58:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2200      	movs	r2, #0
 800aa64:	609a      	str	r2, [r3, #8]
}
 800aa66:	bf00      	nop
 800aa68:	3724      	adds	r7, #36	@ 0x24
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa70:	4770      	bx	lr
 800aa72:	bf00      	nop
 800aa74:	58024400 	.word	0x58024400
 800aa78:	03d09000 	.word	0x03d09000
 800aa7c:	46000000 	.word	0x46000000
 800aa80:	4c742400 	.word	0x4c742400
 800aa84:	4a742400 	.word	0x4a742400
 800aa88:	4bb71b00 	.word	0x4bb71b00

0800aa8c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b084      	sub	sp, #16
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
 800aa94:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800aa96:	2300      	movs	r3, #0
 800aa98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800aa9a:	4b53      	ldr	r3, [pc, #332]	@ (800abe8 <RCCEx_PLL2_Config+0x15c>)
 800aa9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa9e:	f003 0303 	and.w	r3, r3, #3
 800aaa2:	2b03      	cmp	r3, #3
 800aaa4:	d101      	bne.n	800aaaa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800aaa6:	2301      	movs	r3, #1
 800aaa8:	e099      	b.n	800abde <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800aaaa:	4b4f      	ldr	r3, [pc, #316]	@ (800abe8 <RCCEx_PLL2_Config+0x15c>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	4a4e      	ldr	r2, [pc, #312]	@ (800abe8 <RCCEx_PLL2_Config+0x15c>)
 800aab0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800aab4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aab6:	f7f7 fceb 	bl	8002490 <HAL_GetTick>
 800aaba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800aabc:	e008      	b.n	800aad0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800aabe:	f7f7 fce7 	bl	8002490 <HAL_GetTick>
 800aac2:	4602      	mov	r2, r0
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	1ad3      	subs	r3, r2, r3
 800aac8:	2b02      	cmp	r3, #2
 800aaca:	d901      	bls.n	800aad0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800aacc:	2303      	movs	r3, #3
 800aace:	e086      	b.n	800abde <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800aad0:	4b45      	ldr	r3, [pc, #276]	@ (800abe8 <RCCEx_PLL2_Config+0x15c>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d1f0      	bne.n	800aabe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800aadc:	4b42      	ldr	r3, [pc, #264]	@ (800abe8 <RCCEx_PLL2_Config+0x15c>)
 800aade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aae0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	031b      	lsls	r3, r3, #12
 800aaea:	493f      	ldr	r1, [pc, #252]	@ (800abe8 <RCCEx_PLL2_Config+0x15c>)
 800aaec:	4313      	orrs	r3, r2
 800aaee:	628b      	str	r3, [r1, #40]	@ 0x28
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	685b      	ldr	r3, [r3, #4]
 800aaf4:	3b01      	subs	r3, #1
 800aaf6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	689b      	ldr	r3, [r3, #8]
 800aafe:	3b01      	subs	r3, #1
 800ab00:	025b      	lsls	r3, r3, #9
 800ab02:	b29b      	uxth	r3, r3
 800ab04:	431a      	orrs	r2, r3
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	68db      	ldr	r3, [r3, #12]
 800ab0a:	3b01      	subs	r3, #1
 800ab0c:	041b      	lsls	r3, r3, #16
 800ab0e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ab12:	431a      	orrs	r2, r3
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	691b      	ldr	r3, [r3, #16]
 800ab18:	3b01      	subs	r3, #1
 800ab1a:	061b      	lsls	r3, r3, #24
 800ab1c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ab20:	4931      	ldr	r1, [pc, #196]	@ (800abe8 <RCCEx_PLL2_Config+0x15c>)
 800ab22:	4313      	orrs	r3, r2
 800ab24:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ab26:	4b30      	ldr	r3, [pc, #192]	@ (800abe8 <RCCEx_PLL2_Config+0x15c>)
 800ab28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab2a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	695b      	ldr	r3, [r3, #20]
 800ab32:	492d      	ldr	r1, [pc, #180]	@ (800abe8 <RCCEx_PLL2_Config+0x15c>)
 800ab34:	4313      	orrs	r3, r2
 800ab36:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ab38:	4b2b      	ldr	r3, [pc, #172]	@ (800abe8 <RCCEx_PLL2_Config+0x15c>)
 800ab3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab3c:	f023 0220 	bic.w	r2, r3, #32
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	699b      	ldr	r3, [r3, #24]
 800ab44:	4928      	ldr	r1, [pc, #160]	@ (800abe8 <RCCEx_PLL2_Config+0x15c>)
 800ab46:	4313      	orrs	r3, r2
 800ab48:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ab4a:	4b27      	ldr	r3, [pc, #156]	@ (800abe8 <RCCEx_PLL2_Config+0x15c>)
 800ab4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab4e:	4a26      	ldr	r2, [pc, #152]	@ (800abe8 <RCCEx_PLL2_Config+0x15c>)
 800ab50:	f023 0310 	bic.w	r3, r3, #16
 800ab54:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ab56:	4b24      	ldr	r3, [pc, #144]	@ (800abe8 <RCCEx_PLL2_Config+0x15c>)
 800ab58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ab5a:	4b24      	ldr	r3, [pc, #144]	@ (800abec <RCCEx_PLL2_Config+0x160>)
 800ab5c:	4013      	ands	r3, r2
 800ab5e:	687a      	ldr	r2, [r7, #4]
 800ab60:	69d2      	ldr	r2, [r2, #28]
 800ab62:	00d2      	lsls	r2, r2, #3
 800ab64:	4920      	ldr	r1, [pc, #128]	@ (800abe8 <RCCEx_PLL2_Config+0x15c>)
 800ab66:	4313      	orrs	r3, r2
 800ab68:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ab6a:	4b1f      	ldr	r3, [pc, #124]	@ (800abe8 <RCCEx_PLL2_Config+0x15c>)
 800ab6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab6e:	4a1e      	ldr	r2, [pc, #120]	@ (800abe8 <RCCEx_PLL2_Config+0x15c>)
 800ab70:	f043 0310 	orr.w	r3, r3, #16
 800ab74:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d106      	bne.n	800ab8a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ab7c:	4b1a      	ldr	r3, [pc, #104]	@ (800abe8 <RCCEx_PLL2_Config+0x15c>)
 800ab7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab80:	4a19      	ldr	r2, [pc, #100]	@ (800abe8 <RCCEx_PLL2_Config+0x15c>)
 800ab82:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ab86:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ab88:	e00f      	b.n	800abaa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	2b01      	cmp	r3, #1
 800ab8e:	d106      	bne.n	800ab9e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ab90:	4b15      	ldr	r3, [pc, #84]	@ (800abe8 <RCCEx_PLL2_Config+0x15c>)
 800ab92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab94:	4a14      	ldr	r2, [pc, #80]	@ (800abe8 <RCCEx_PLL2_Config+0x15c>)
 800ab96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ab9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ab9c:	e005      	b.n	800abaa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ab9e:	4b12      	ldr	r3, [pc, #72]	@ (800abe8 <RCCEx_PLL2_Config+0x15c>)
 800aba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aba2:	4a11      	ldr	r2, [pc, #68]	@ (800abe8 <RCCEx_PLL2_Config+0x15c>)
 800aba4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800aba8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800abaa:	4b0f      	ldr	r3, [pc, #60]	@ (800abe8 <RCCEx_PLL2_Config+0x15c>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	4a0e      	ldr	r2, [pc, #56]	@ (800abe8 <RCCEx_PLL2_Config+0x15c>)
 800abb0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800abb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800abb6:	f7f7 fc6b 	bl	8002490 <HAL_GetTick>
 800abba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800abbc:	e008      	b.n	800abd0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800abbe:	f7f7 fc67 	bl	8002490 <HAL_GetTick>
 800abc2:	4602      	mov	r2, r0
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	1ad3      	subs	r3, r2, r3
 800abc8:	2b02      	cmp	r3, #2
 800abca:	d901      	bls.n	800abd0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800abcc:	2303      	movs	r3, #3
 800abce:	e006      	b.n	800abde <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800abd0:	4b05      	ldr	r3, [pc, #20]	@ (800abe8 <RCCEx_PLL2_Config+0x15c>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d0f0      	beq.n	800abbe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800abdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800abde:	4618      	mov	r0, r3
 800abe0:	3710      	adds	r7, #16
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}
 800abe6:	bf00      	nop
 800abe8:	58024400 	.word	0x58024400
 800abec:	ffff0007 	.word	0xffff0007

0800abf0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b084      	sub	sp, #16
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
 800abf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800abfa:	2300      	movs	r3, #0
 800abfc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800abfe:	4b53      	ldr	r3, [pc, #332]	@ (800ad4c <RCCEx_PLL3_Config+0x15c>)
 800ac00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac02:	f003 0303 	and.w	r3, r3, #3
 800ac06:	2b03      	cmp	r3, #3
 800ac08:	d101      	bne.n	800ac0e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	e099      	b.n	800ad42 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ac0e:	4b4f      	ldr	r3, [pc, #316]	@ (800ad4c <RCCEx_PLL3_Config+0x15c>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	4a4e      	ldr	r2, [pc, #312]	@ (800ad4c <RCCEx_PLL3_Config+0x15c>)
 800ac14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ac18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac1a:	f7f7 fc39 	bl	8002490 <HAL_GetTick>
 800ac1e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ac20:	e008      	b.n	800ac34 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ac22:	f7f7 fc35 	bl	8002490 <HAL_GetTick>
 800ac26:	4602      	mov	r2, r0
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	1ad3      	subs	r3, r2, r3
 800ac2c:	2b02      	cmp	r3, #2
 800ac2e:	d901      	bls.n	800ac34 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ac30:	2303      	movs	r3, #3
 800ac32:	e086      	b.n	800ad42 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ac34:	4b45      	ldr	r3, [pc, #276]	@ (800ad4c <RCCEx_PLL3_Config+0x15c>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d1f0      	bne.n	800ac22 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ac40:	4b42      	ldr	r3, [pc, #264]	@ (800ad4c <RCCEx_PLL3_Config+0x15c>)
 800ac42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac44:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	051b      	lsls	r3, r3, #20
 800ac4e:	493f      	ldr	r1, [pc, #252]	@ (800ad4c <RCCEx_PLL3_Config+0x15c>)
 800ac50:	4313      	orrs	r3, r2
 800ac52:	628b      	str	r3, [r1, #40]	@ 0x28
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	685b      	ldr	r3, [r3, #4]
 800ac58:	3b01      	subs	r3, #1
 800ac5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	689b      	ldr	r3, [r3, #8]
 800ac62:	3b01      	subs	r3, #1
 800ac64:	025b      	lsls	r3, r3, #9
 800ac66:	b29b      	uxth	r3, r3
 800ac68:	431a      	orrs	r2, r3
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	68db      	ldr	r3, [r3, #12]
 800ac6e:	3b01      	subs	r3, #1
 800ac70:	041b      	lsls	r3, r3, #16
 800ac72:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ac76:	431a      	orrs	r2, r3
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	691b      	ldr	r3, [r3, #16]
 800ac7c:	3b01      	subs	r3, #1
 800ac7e:	061b      	lsls	r3, r3, #24
 800ac80:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ac84:	4931      	ldr	r1, [pc, #196]	@ (800ad4c <RCCEx_PLL3_Config+0x15c>)
 800ac86:	4313      	orrs	r3, r2
 800ac88:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ac8a:	4b30      	ldr	r3, [pc, #192]	@ (800ad4c <RCCEx_PLL3_Config+0x15c>)
 800ac8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac8e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	695b      	ldr	r3, [r3, #20]
 800ac96:	492d      	ldr	r1, [pc, #180]	@ (800ad4c <RCCEx_PLL3_Config+0x15c>)
 800ac98:	4313      	orrs	r3, r2
 800ac9a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ac9c:	4b2b      	ldr	r3, [pc, #172]	@ (800ad4c <RCCEx_PLL3_Config+0x15c>)
 800ac9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aca0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	699b      	ldr	r3, [r3, #24]
 800aca8:	4928      	ldr	r1, [pc, #160]	@ (800ad4c <RCCEx_PLL3_Config+0x15c>)
 800acaa:	4313      	orrs	r3, r2
 800acac:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800acae:	4b27      	ldr	r3, [pc, #156]	@ (800ad4c <RCCEx_PLL3_Config+0x15c>)
 800acb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acb2:	4a26      	ldr	r2, [pc, #152]	@ (800ad4c <RCCEx_PLL3_Config+0x15c>)
 800acb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800acb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800acba:	4b24      	ldr	r3, [pc, #144]	@ (800ad4c <RCCEx_PLL3_Config+0x15c>)
 800acbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800acbe:	4b24      	ldr	r3, [pc, #144]	@ (800ad50 <RCCEx_PLL3_Config+0x160>)
 800acc0:	4013      	ands	r3, r2
 800acc2:	687a      	ldr	r2, [r7, #4]
 800acc4:	69d2      	ldr	r2, [r2, #28]
 800acc6:	00d2      	lsls	r2, r2, #3
 800acc8:	4920      	ldr	r1, [pc, #128]	@ (800ad4c <RCCEx_PLL3_Config+0x15c>)
 800acca:	4313      	orrs	r3, r2
 800accc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800acce:	4b1f      	ldr	r3, [pc, #124]	@ (800ad4c <RCCEx_PLL3_Config+0x15c>)
 800acd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acd2:	4a1e      	ldr	r2, [pc, #120]	@ (800ad4c <RCCEx_PLL3_Config+0x15c>)
 800acd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800acd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d106      	bne.n	800acee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ace0:	4b1a      	ldr	r3, [pc, #104]	@ (800ad4c <RCCEx_PLL3_Config+0x15c>)
 800ace2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ace4:	4a19      	ldr	r2, [pc, #100]	@ (800ad4c <RCCEx_PLL3_Config+0x15c>)
 800ace6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800acea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800acec:	e00f      	b.n	800ad0e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	2b01      	cmp	r3, #1
 800acf2:	d106      	bne.n	800ad02 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800acf4:	4b15      	ldr	r3, [pc, #84]	@ (800ad4c <RCCEx_PLL3_Config+0x15c>)
 800acf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acf8:	4a14      	ldr	r2, [pc, #80]	@ (800ad4c <RCCEx_PLL3_Config+0x15c>)
 800acfa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800acfe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ad00:	e005      	b.n	800ad0e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ad02:	4b12      	ldr	r3, [pc, #72]	@ (800ad4c <RCCEx_PLL3_Config+0x15c>)
 800ad04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad06:	4a11      	ldr	r2, [pc, #68]	@ (800ad4c <RCCEx_PLL3_Config+0x15c>)
 800ad08:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ad0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ad0e:	4b0f      	ldr	r3, [pc, #60]	@ (800ad4c <RCCEx_PLL3_Config+0x15c>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	4a0e      	ldr	r2, [pc, #56]	@ (800ad4c <RCCEx_PLL3_Config+0x15c>)
 800ad14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ad18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ad1a:	f7f7 fbb9 	bl	8002490 <HAL_GetTick>
 800ad1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ad20:	e008      	b.n	800ad34 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ad22:	f7f7 fbb5 	bl	8002490 <HAL_GetTick>
 800ad26:	4602      	mov	r2, r0
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	1ad3      	subs	r3, r2, r3
 800ad2c:	2b02      	cmp	r3, #2
 800ad2e:	d901      	bls.n	800ad34 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ad30:	2303      	movs	r3, #3
 800ad32:	e006      	b.n	800ad42 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ad34:	4b05      	ldr	r3, [pc, #20]	@ (800ad4c <RCCEx_PLL3_Config+0x15c>)
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d0f0      	beq.n	800ad22 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ad40:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	3710      	adds	r7, #16
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}
 800ad4a:	bf00      	nop
 800ad4c:	58024400 	.word	0x58024400
 800ad50:	ffff0007 	.word	0xffff0007

0800ad54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b082      	sub	sp, #8
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d101      	bne.n	800ad66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ad62:	2301      	movs	r3, #1
 800ad64:	e049      	b.n	800adfa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ad6c:	b2db      	uxtb	r3, r3
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d106      	bne.n	800ad80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2200      	movs	r2, #0
 800ad76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f000 f841 	bl	800ae02 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2202      	movs	r2, #2
 800ad84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681a      	ldr	r2, [r3, #0]
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	3304      	adds	r3, #4
 800ad90:	4619      	mov	r1, r3
 800ad92:	4610      	mov	r0, r2
 800ad94:	f000 f9e8 	bl	800b168 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2201      	movs	r2, #1
 800ada4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2201      	movs	r2, #1
 800adac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2201      	movs	r2, #1
 800adb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2201      	movs	r2, #1
 800adbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2201      	movs	r2, #1
 800adc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2201      	movs	r2, #1
 800adcc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2201      	movs	r2, #1
 800add4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2201      	movs	r2, #1
 800addc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2201      	movs	r2, #1
 800ade4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2201      	movs	r2, #1
 800adec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2201      	movs	r2, #1
 800adf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800adf8:	2300      	movs	r3, #0
}
 800adfa:	4618      	mov	r0, r3
 800adfc:	3708      	adds	r7, #8
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}

0800ae02 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800ae02:	b480      	push	{r7}
 800ae04:	b083      	sub	sp, #12
 800ae06:	af00      	add	r7, sp, #0
 800ae08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800ae0a:	bf00      	nop
 800ae0c:	370c      	adds	r7, #12
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae14:	4770      	bx	lr
	...

0800ae18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ae18:	b480      	push	{r7}
 800ae1a:	b085      	sub	sp, #20
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ae26:	b2db      	uxtb	r3, r3
 800ae28:	2b01      	cmp	r3, #1
 800ae2a:	d001      	beq.n	800ae30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ae2c:	2301      	movs	r3, #1
 800ae2e:	e054      	b.n	800aeda <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2202      	movs	r2, #2
 800ae34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	68da      	ldr	r2, [r3, #12]
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	f042 0201 	orr.w	r2, r2, #1
 800ae46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	4a26      	ldr	r2, [pc, #152]	@ (800aee8 <HAL_TIM_Base_Start_IT+0xd0>)
 800ae4e:	4293      	cmp	r3, r2
 800ae50:	d022      	beq.n	800ae98 <HAL_TIM_Base_Start_IT+0x80>
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae5a:	d01d      	beq.n	800ae98 <HAL_TIM_Base_Start_IT+0x80>
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	4a22      	ldr	r2, [pc, #136]	@ (800aeec <HAL_TIM_Base_Start_IT+0xd4>)
 800ae62:	4293      	cmp	r3, r2
 800ae64:	d018      	beq.n	800ae98 <HAL_TIM_Base_Start_IT+0x80>
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	4a21      	ldr	r2, [pc, #132]	@ (800aef0 <HAL_TIM_Base_Start_IT+0xd8>)
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	d013      	beq.n	800ae98 <HAL_TIM_Base_Start_IT+0x80>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	4a1f      	ldr	r2, [pc, #124]	@ (800aef4 <HAL_TIM_Base_Start_IT+0xdc>)
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d00e      	beq.n	800ae98 <HAL_TIM_Base_Start_IT+0x80>
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	4a1e      	ldr	r2, [pc, #120]	@ (800aef8 <HAL_TIM_Base_Start_IT+0xe0>)
 800ae80:	4293      	cmp	r3, r2
 800ae82:	d009      	beq.n	800ae98 <HAL_TIM_Base_Start_IT+0x80>
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	4a1c      	ldr	r2, [pc, #112]	@ (800aefc <HAL_TIM_Base_Start_IT+0xe4>)
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	d004      	beq.n	800ae98 <HAL_TIM_Base_Start_IT+0x80>
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	4a1b      	ldr	r2, [pc, #108]	@ (800af00 <HAL_TIM_Base_Start_IT+0xe8>)
 800ae94:	4293      	cmp	r3, r2
 800ae96:	d115      	bne.n	800aec4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	689a      	ldr	r2, [r3, #8]
 800ae9e:	4b19      	ldr	r3, [pc, #100]	@ (800af04 <HAL_TIM_Base_Start_IT+0xec>)
 800aea0:	4013      	ands	r3, r2
 800aea2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	2b06      	cmp	r3, #6
 800aea8:	d015      	beq.n	800aed6 <HAL_TIM_Base_Start_IT+0xbe>
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aeb0:	d011      	beq.n	800aed6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	681a      	ldr	r2, [r3, #0]
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	f042 0201 	orr.w	r2, r2, #1
 800aec0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aec2:	e008      	b.n	800aed6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	681a      	ldr	r2, [r3, #0]
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f042 0201 	orr.w	r2, r2, #1
 800aed2:	601a      	str	r2, [r3, #0]
 800aed4:	e000      	b.n	800aed8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aed6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800aed8:	2300      	movs	r3, #0
}
 800aeda:	4618      	mov	r0, r3
 800aedc:	3714      	adds	r7, #20
 800aede:	46bd      	mov	sp, r7
 800aee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee4:	4770      	bx	lr
 800aee6:	bf00      	nop
 800aee8:	40010000 	.word	0x40010000
 800aeec:	40000400 	.word	0x40000400
 800aef0:	40000800 	.word	0x40000800
 800aef4:	40000c00 	.word	0x40000c00
 800aef8:	40010400 	.word	0x40010400
 800aefc:	40001800 	.word	0x40001800
 800af00:	40014000 	.word	0x40014000
 800af04:	00010007 	.word	0x00010007

0800af08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b084      	sub	sp, #16
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	68db      	ldr	r3, [r3, #12]
 800af16:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	691b      	ldr	r3, [r3, #16]
 800af1e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	f003 0302 	and.w	r3, r3, #2
 800af26:	2b00      	cmp	r3, #0
 800af28:	d020      	beq.n	800af6c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	f003 0302 	and.w	r3, r3, #2
 800af30:	2b00      	cmp	r3, #0
 800af32:	d01b      	beq.n	800af6c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f06f 0202 	mvn.w	r2, #2
 800af3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2201      	movs	r2, #1
 800af42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	699b      	ldr	r3, [r3, #24]
 800af4a:	f003 0303 	and.w	r3, r3, #3
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d003      	beq.n	800af5a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800af52:	6878      	ldr	r0, [r7, #4]
 800af54:	f000 f8e9 	bl	800b12a <HAL_TIM_IC_CaptureCallback>
 800af58:	e005      	b.n	800af66 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f000 f8db 	bl	800b116 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f000 f8ec 	bl	800b13e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2200      	movs	r2, #0
 800af6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	f003 0304 	and.w	r3, r3, #4
 800af72:	2b00      	cmp	r3, #0
 800af74:	d020      	beq.n	800afb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	f003 0304 	and.w	r3, r3, #4
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d01b      	beq.n	800afb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	f06f 0204 	mvn.w	r2, #4
 800af88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	2202      	movs	r2, #2
 800af8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	699b      	ldr	r3, [r3, #24]
 800af96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d003      	beq.n	800afa6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f000 f8c3 	bl	800b12a <HAL_TIM_IC_CaptureCallback>
 800afa4:	e005      	b.n	800afb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f000 f8b5 	bl	800b116 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f000 f8c6 	bl	800b13e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2200      	movs	r2, #0
 800afb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	f003 0308 	and.w	r3, r3, #8
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d020      	beq.n	800b004 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	f003 0308 	and.w	r3, r3, #8
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d01b      	beq.n	800b004 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	f06f 0208 	mvn.w	r2, #8
 800afd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2204      	movs	r2, #4
 800afda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	69db      	ldr	r3, [r3, #28]
 800afe2:	f003 0303 	and.w	r3, r3, #3
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d003      	beq.n	800aff2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f000 f89d 	bl	800b12a <HAL_TIM_IC_CaptureCallback>
 800aff0:	e005      	b.n	800affe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f000 f88f 	bl	800b116 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f000 f8a0 	bl	800b13e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2200      	movs	r2, #0
 800b002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	f003 0310 	and.w	r3, r3, #16
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d020      	beq.n	800b050 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	f003 0310 	and.w	r3, r3, #16
 800b014:	2b00      	cmp	r3, #0
 800b016:	d01b      	beq.n	800b050 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f06f 0210 	mvn.w	r2, #16
 800b020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2208      	movs	r2, #8
 800b026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	69db      	ldr	r3, [r3, #28]
 800b02e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b032:	2b00      	cmp	r3, #0
 800b034:	d003      	beq.n	800b03e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f000 f877 	bl	800b12a <HAL_TIM_IC_CaptureCallback>
 800b03c:	e005      	b.n	800b04a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f000 f869 	bl	800b116 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f000 f87a 	bl	800b13e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2200      	movs	r2, #0
 800b04e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	f003 0301 	and.w	r3, r3, #1
 800b056:	2b00      	cmp	r3, #0
 800b058:	d00c      	beq.n	800b074 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	f003 0301 	and.w	r3, r3, #1
 800b060:	2b00      	cmp	r3, #0
 800b062:	d007      	beq.n	800b074 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	f06f 0201 	mvn.w	r2, #1
 800b06c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f7f6 feb2 	bl	8001dd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d104      	bne.n	800b088 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b084:	2b00      	cmp	r3, #0
 800b086:	d00c      	beq.n	800b0a2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d007      	beq.n	800b0a2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b09a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b09c:	6878      	ldr	r0, [r7, #4]
 800b09e:	f000 f913 	bl	800b2c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d00c      	beq.n	800b0c6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d007      	beq.n	800b0c6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b0be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f000 f90b 	bl	800b2dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d00c      	beq.n	800b0ea <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d007      	beq.n	800b0ea <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b0e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f000 f834 	bl	800b152 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	f003 0320 	and.w	r3, r3, #32
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d00c      	beq.n	800b10e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	f003 0320 	and.w	r3, r3, #32
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d007      	beq.n	800b10e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	f06f 0220 	mvn.w	r2, #32
 800b106:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	f000 f8d3 	bl	800b2b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b10e:	bf00      	nop
 800b110:	3710      	adds	r7, #16
 800b112:	46bd      	mov	sp, r7
 800b114:	bd80      	pop	{r7, pc}

0800b116 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b116:	b480      	push	{r7}
 800b118:	b083      	sub	sp, #12
 800b11a:	af00      	add	r7, sp, #0
 800b11c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b11e:	bf00      	nop
 800b120:	370c      	adds	r7, #12
 800b122:	46bd      	mov	sp, r7
 800b124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b128:	4770      	bx	lr

0800b12a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b12a:	b480      	push	{r7}
 800b12c:	b083      	sub	sp, #12
 800b12e:	af00      	add	r7, sp, #0
 800b130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b132:	bf00      	nop
 800b134:	370c      	adds	r7, #12
 800b136:	46bd      	mov	sp, r7
 800b138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13c:	4770      	bx	lr

0800b13e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b13e:	b480      	push	{r7}
 800b140:	b083      	sub	sp, #12
 800b142:	af00      	add	r7, sp, #0
 800b144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b146:	bf00      	nop
 800b148:	370c      	adds	r7, #12
 800b14a:	46bd      	mov	sp, r7
 800b14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b150:	4770      	bx	lr

0800b152 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b152:	b480      	push	{r7}
 800b154:	b083      	sub	sp, #12
 800b156:	af00      	add	r7, sp, #0
 800b158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b15a:	bf00      	nop
 800b15c:	370c      	adds	r7, #12
 800b15e:	46bd      	mov	sp, r7
 800b160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b164:	4770      	bx	lr
	...

0800b168 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b168:	b480      	push	{r7}
 800b16a:	b085      	sub	sp, #20
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
 800b170:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	4a46      	ldr	r2, [pc, #280]	@ (800b294 <TIM_Base_SetConfig+0x12c>)
 800b17c:	4293      	cmp	r3, r2
 800b17e:	d013      	beq.n	800b1a8 <TIM_Base_SetConfig+0x40>
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b186:	d00f      	beq.n	800b1a8 <TIM_Base_SetConfig+0x40>
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	4a43      	ldr	r2, [pc, #268]	@ (800b298 <TIM_Base_SetConfig+0x130>)
 800b18c:	4293      	cmp	r3, r2
 800b18e:	d00b      	beq.n	800b1a8 <TIM_Base_SetConfig+0x40>
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	4a42      	ldr	r2, [pc, #264]	@ (800b29c <TIM_Base_SetConfig+0x134>)
 800b194:	4293      	cmp	r3, r2
 800b196:	d007      	beq.n	800b1a8 <TIM_Base_SetConfig+0x40>
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	4a41      	ldr	r2, [pc, #260]	@ (800b2a0 <TIM_Base_SetConfig+0x138>)
 800b19c:	4293      	cmp	r3, r2
 800b19e:	d003      	beq.n	800b1a8 <TIM_Base_SetConfig+0x40>
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	4a40      	ldr	r2, [pc, #256]	@ (800b2a4 <TIM_Base_SetConfig+0x13c>)
 800b1a4:	4293      	cmp	r3, r2
 800b1a6:	d108      	bne.n	800b1ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b1ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	685b      	ldr	r3, [r3, #4]
 800b1b4:	68fa      	ldr	r2, [r7, #12]
 800b1b6:	4313      	orrs	r3, r2
 800b1b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	4a35      	ldr	r2, [pc, #212]	@ (800b294 <TIM_Base_SetConfig+0x12c>)
 800b1be:	4293      	cmp	r3, r2
 800b1c0:	d01f      	beq.n	800b202 <TIM_Base_SetConfig+0x9a>
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b1c8:	d01b      	beq.n	800b202 <TIM_Base_SetConfig+0x9a>
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	4a32      	ldr	r2, [pc, #200]	@ (800b298 <TIM_Base_SetConfig+0x130>)
 800b1ce:	4293      	cmp	r3, r2
 800b1d0:	d017      	beq.n	800b202 <TIM_Base_SetConfig+0x9a>
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	4a31      	ldr	r2, [pc, #196]	@ (800b29c <TIM_Base_SetConfig+0x134>)
 800b1d6:	4293      	cmp	r3, r2
 800b1d8:	d013      	beq.n	800b202 <TIM_Base_SetConfig+0x9a>
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	4a30      	ldr	r2, [pc, #192]	@ (800b2a0 <TIM_Base_SetConfig+0x138>)
 800b1de:	4293      	cmp	r3, r2
 800b1e0:	d00f      	beq.n	800b202 <TIM_Base_SetConfig+0x9a>
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	4a2f      	ldr	r2, [pc, #188]	@ (800b2a4 <TIM_Base_SetConfig+0x13c>)
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	d00b      	beq.n	800b202 <TIM_Base_SetConfig+0x9a>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	4a2e      	ldr	r2, [pc, #184]	@ (800b2a8 <TIM_Base_SetConfig+0x140>)
 800b1ee:	4293      	cmp	r3, r2
 800b1f0:	d007      	beq.n	800b202 <TIM_Base_SetConfig+0x9a>
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	4a2d      	ldr	r2, [pc, #180]	@ (800b2ac <TIM_Base_SetConfig+0x144>)
 800b1f6:	4293      	cmp	r3, r2
 800b1f8:	d003      	beq.n	800b202 <TIM_Base_SetConfig+0x9a>
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	4a2c      	ldr	r2, [pc, #176]	@ (800b2b0 <TIM_Base_SetConfig+0x148>)
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d108      	bne.n	800b214 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b208:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	68db      	ldr	r3, [r3, #12]
 800b20e:	68fa      	ldr	r2, [r7, #12]
 800b210:	4313      	orrs	r3, r2
 800b212:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	695b      	ldr	r3, [r3, #20]
 800b21e:	4313      	orrs	r3, r2
 800b220:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	68fa      	ldr	r2, [r7, #12]
 800b226:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	689a      	ldr	r2, [r3, #8]
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	681a      	ldr	r2, [r3, #0]
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	4a16      	ldr	r2, [pc, #88]	@ (800b294 <TIM_Base_SetConfig+0x12c>)
 800b23c:	4293      	cmp	r3, r2
 800b23e:	d00f      	beq.n	800b260 <TIM_Base_SetConfig+0xf8>
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	4a18      	ldr	r2, [pc, #96]	@ (800b2a4 <TIM_Base_SetConfig+0x13c>)
 800b244:	4293      	cmp	r3, r2
 800b246:	d00b      	beq.n	800b260 <TIM_Base_SetConfig+0xf8>
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	4a17      	ldr	r2, [pc, #92]	@ (800b2a8 <TIM_Base_SetConfig+0x140>)
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d007      	beq.n	800b260 <TIM_Base_SetConfig+0xf8>
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	4a16      	ldr	r2, [pc, #88]	@ (800b2ac <TIM_Base_SetConfig+0x144>)
 800b254:	4293      	cmp	r3, r2
 800b256:	d003      	beq.n	800b260 <TIM_Base_SetConfig+0xf8>
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	4a15      	ldr	r2, [pc, #84]	@ (800b2b0 <TIM_Base_SetConfig+0x148>)
 800b25c:	4293      	cmp	r3, r2
 800b25e:	d103      	bne.n	800b268 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	691a      	ldr	r2, [r3, #16]
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2201      	movs	r2, #1
 800b26c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	691b      	ldr	r3, [r3, #16]
 800b272:	f003 0301 	and.w	r3, r3, #1
 800b276:	2b01      	cmp	r3, #1
 800b278:	d105      	bne.n	800b286 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	691b      	ldr	r3, [r3, #16]
 800b27e:	f023 0201 	bic.w	r2, r3, #1
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	611a      	str	r2, [r3, #16]
  }
}
 800b286:	bf00      	nop
 800b288:	3714      	adds	r7, #20
 800b28a:	46bd      	mov	sp, r7
 800b28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b290:	4770      	bx	lr
 800b292:	bf00      	nop
 800b294:	40010000 	.word	0x40010000
 800b298:	40000400 	.word	0x40000400
 800b29c:	40000800 	.word	0x40000800
 800b2a0:	40000c00 	.word	0x40000c00
 800b2a4:	40010400 	.word	0x40010400
 800b2a8:	40014000 	.word	0x40014000
 800b2ac:	40014400 	.word	0x40014400
 800b2b0:	40014800 	.word	0x40014800

0800b2b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b083      	sub	sp, #12
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b2bc:	bf00      	nop
 800b2be:	370c      	adds	r7, #12
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c6:	4770      	bx	lr

0800b2c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b083      	sub	sp, #12
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b2d0:	bf00      	nop
 800b2d2:	370c      	adds	r7, #12
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2da:	4770      	bx	lr

0800b2dc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b2dc:	b480      	push	{r7}
 800b2de:	b083      	sub	sp, #12
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b2e4:	bf00      	nop
 800b2e6:	370c      	adds	r7, #12
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ee:	4770      	bx	lr

0800b2f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b082      	sub	sp, #8
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d101      	bne.n	800b302 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b2fe:	2301      	movs	r3, #1
 800b300:	e042      	b.n	800b388 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d106      	bne.n	800b31a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2200      	movs	r2, #0
 800b310:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f7f6 ffd7 	bl	80022c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2224      	movs	r2, #36	@ 0x24
 800b31e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	681a      	ldr	r2, [r3, #0]
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	f022 0201 	bic.w	r2, r2, #1
 800b330:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b336:	2b00      	cmp	r3, #0
 800b338:	d002      	beq.n	800b340 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f000 ff22 	bl	800c184 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f000 f8b3 	bl	800b4ac <UART_SetConfig>
 800b346:	4603      	mov	r3, r0
 800b348:	2b01      	cmp	r3, #1
 800b34a:	d101      	bne.n	800b350 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b34c:	2301      	movs	r3, #1
 800b34e:	e01b      	b.n	800b388 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	685a      	ldr	r2, [r3, #4]
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b35e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	689a      	ldr	r2, [r3, #8]
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b36e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	681a      	ldr	r2, [r3, #0]
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	f042 0201 	orr.w	r2, r2, #1
 800b37e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	f000 ffa1 	bl	800c2c8 <UART_CheckIdleState>
 800b386:	4603      	mov	r3, r0
}
 800b388:	4618      	mov	r0, r3
 800b38a:	3708      	adds	r7, #8
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}

0800b390 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b08a      	sub	sp, #40	@ 0x28
 800b394:	af02      	add	r7, sp, #8
 800b396:	60f8      	str	r0, [r7, #12]
 800b398:	60b9      	str	r1, [r7, #8]
 800b39a:	603b      	str	r3, [r7, #0]
 800b39c:	4613      	mov	r3, r2
 800b39e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b3a6:	2b20      	cmp	r3, #32
 800b3a8:	d17b      	bne.n	800b4a2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d002      	beq.n	800b3b6 <HAL_UART_Transmit+0x26>
 800b3b0:	88fb      	ldrh	r3, [r7, #6]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d101      	bne.n	800b3ba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	e074      	b.n	800b4a4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	2200      	movs	r2, #0
 800b3be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	2221      	movs	r2, #33	@ 0x21
 800b3c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b3ca:	f7f7 f861 	bl	8002490 <HAL_GetTick>
 800b3ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	88fa      	ldrh	r2, [r7, #6]
 800b3d4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	88fa      	ldrh	r2, [r7, #6]
 800b3dc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	689b      	ldr	r3, [r3, #8]
 800b3e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b3e8:	d108      	bne.n	800b3fc <HAL_UART_Transmit+0x6c>
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	691b      	ldr	r3, [r3, #16]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d104      	bne.n	800b3fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b3f6:	68bb      	ldr	r3, [r7, #8]
 800b3f8:	61bb      	str	r3, [r7, #24]
 800b3fa:	e003      	b.n	800b404 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b400:	2300      	movs	r3, #0
 800b402:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b404:	e030      	b.n	800b468 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	9300      	str	r3, [sp, #0]
 800b40a:	697b      	ldr	r3, [r7, #20]
 800b40c:	2200      	movs	r2, #0
 800b40e:	2180      	movs	r1, #128	@ 0x80
 800b410:	68f8      	ldr	r0, [r7, #12]
 800b412:	f001 f803 	bl	800c41c <UART_WaitOnFlagUntilTimeout>
 800b416:	4603      	mov	r3, r0
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d005      	beq.n	800b428 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	2220      	movs	r2, #32
 800b420:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800b424:	2303      	movs	r3, #3
 800b426:	e03d      	b.n	800b4a4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b428:	69fb      	ldr	r3, [r7, #28]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d10b      	bne.n	800b446 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b42e:	69bb      	ldr	r3, [r7, #24]
 800b430:	881b      	ldrh	r3, [r3, #0]
 800b432:	461a      	mov	r2, r3
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b43c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b43e:	69bb      	ldr	r3, [r7, #24]
 800b440:	3302      	adds	r3, #2
 800b442:	61bb      	str	r3, [r7, #24]
 800b444:	e007      	b.n	800b456 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b446:	69fb      	ldr	r3, [r7, #28]
 800b448:	781a      	ldrb	r2, [r3, #0]
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b450:	69fb      	ldr	r3, [r7, #28]
 800b452:	3301      	adds	r3, #1
 800b454:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b45c:	b29b      	uxth	r3, r3
 800b45e:	3b01      	subs	r3, #1
 800b460:	b29a      	uxth	r2, r3
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b46e:	b29b      	uxth	r3, r3
 800b470:	2b00      	cmp	r3, #0
 800b472:	d1c8      	bne.n	800b406 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	9300      	str	r3, [sp, #0]
 800b478:	697b      	ldr	r3, [r7, #20]
 800b47a:	2200      	movs	r2, #0
 800b47c:	2140      	movs	r1, #64	@ 0x40
 800b47e:	68f8      	ldr	r0, [r7, #12]
 800b480:	f000 ffcc 	bl	800c41c <UART_WaitOnFlagUntilTimeout>
 800b484:	4603      	mov	r3, r0
 800b486:	2b00      	cmp	r3, #0
 800b488:	d005      	beq.n	800b496 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	2220      	movs	r2, #32
 800b48e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b492:	2303      	movs	r3, #3
 800b494:	e006      	b.n	800b4a4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	2220      	movs	r2, #32
 800b49a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	e000      	b.n	800b4a4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b4a2:	2302      	movs	r3, #2
  }
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	3720      	adds	r7, #32
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}

0800b4ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b4ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b4b0:	b092      	sub	sp, #72	@ 0x48
 800b4b2:	af00      	add	r7, sp, #0
 800b4b4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b4bc:	697b      	ldr	r3, [r7, #20]
 800b4be:	689a      	ldr	r2, [r3, #8]
 800b4c0:	697b      	ldr	r3, [r7, #20]
 800b4c2:	691b      	ldr	r3, [r3, #16]
 800b4c4:	431a      	orrs	r2, r3
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	695b      	ldr	r3, [r3, #20]
 800b4ca:	431a      	orrs	r2, r3
 800b4cc:	697b      	ldr	r3, [r7, #20]
 800b4ce:	69db      	ldr	r3, [r3, #28]
 800b4d0:	4313      	orrs	r3, r2
 800b4d2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b4d4:	697b      	ldr	r3, [r7, #20]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	681a      	ldr	r2, [r3, #0]
 800b4da:	4bbe      	ldr	r3, [pc, #760]	@ (800b7d4 <UART_SetConfig+0x328>)
 800b4dc:	4013      	ands	r3, r2
 800b4de:	697a      	ldr	r2, [r7, #20]
 800b4e0:	6812      	ldr	r2, [r2, #0]
 800b4e2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b4e4:	430b      	orrs	r3, r1
 800b4e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b4e8:	697b      	ldr	r3, [r7, #20]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	685b      	ldr	r3, [r3, #4]
 800b4ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	68da      	ldr	r2, [r3, #12]
 800b4f6:	697b      	ldr	r3, [r7, #20]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	430a      	orrs	r2, r1
 800b4fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b4fe:	697b      	ldr	r3, [r7, #20]
 800b500:	699b      	ldr	r3, [r3, #24]
 800b502:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b504:	697b      	ldr	r3, [r7, #20]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	4ab3      	ldr	r2, [pc, #716]	@ (800b7d8 <UART_SetConfig+0x32c>)
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d004      	beq.n	800b518 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	6a1b      	ldr	r3, [r3, #32]
 800b512:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b514:	4313      	orrs	r3, r2
 800b516:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b518:	697b      	ldr	r3, [r7, #20]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	689a      	ldr	r2, [r3, #8]
 800b51e:	4baf      	ldr	r3, [pc, #700]	@ (800b7dc <UART_SetConfig+0x330>)
 800b520:	4013      	ands	r3, r2
 800b522:	697a      	ldr	r2, [r7, #20]
 800b524:	6812      	ldr	r2, [r2, #0]
 800b526:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b528:	430b      	orrs	r3, r1
 800b52a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b52c:	697b      	ldr	r3, [r7, #20]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b532:	f023 010f 	bic.w	r1, r3, #15
 800b536:	697b      	ldr	r3, [r7, #20]
 800b538:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b53a:	697b      	ldr	r3, [r7, #20]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	430a      	orrs	r2, r1
 800b540:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b542:	697b      	ldr	r3, [r7, #20]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	4aa6      	ldr	r2, [pc, #664]	@ (800b7e0 <UART_SetConfig+0x334>)
 800b548:	4293      	cmp	r3, r2
 800b54a:	d177      	bne.n	800b63c <UART_SetConfig+0x190>
 800b54c:	4ba5      	ldr	r3, [pc, #660]	@ (800b7e4 <UART_SetConfig+0x338>)
 800b54e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b550:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b554:	2b28      	cmp	r3, #40	@ 0x28
 800b556:	d86d      	bhi.n	800b634 <UART_SetConfig+0x188>
 800b558:	a201      	add	r2, pc, #4	@ (adr r2, 800b560 <UART_SetConfig+0xb4>)
 800b55a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b55e:	bf00      	nop
 800b560:	0800b605 	.word	0x0800b605
 800b564:	0800b635 	.word	0x0800b635
 800b568:	0800b635 	.word	0x0800b635
 800b56c:	0800b635 	.word	0x0800b635
 800b570:	0800b635 	.word	0x0800b635
 800b574:	0800b635 	.word	0x0800b635
 800b578:	0800b635 	.word	0x0800b635
 800b57c:	0800b635 	.word	0x0800b635
 800b580:	0800b60d 	.word	0x0800b60d
 800b584:	0800b635 	.word	0x0800b635
 800b588:	0800b635 	.word	0x0800b635
 800b58c:	0800b635 	.word	0x0800b635
 800b590:	0800b635 	.word	0x0800b635
 800b594:	0800b635 	.word	0x0800b635
 800b598:	0800b635 	.word	0x0800b635
 800b59c:	0800b635 	.word	0x0800b635
 800b5a0:	0800b615 	.word	0x0800b615
 800b5a4:	0800b635 	.word	0x0800b635
 800b5a8:	0800b635 	.word	0x0800b635
 800b5ac:	0800b635 	.word	0x0800b635
 800b5b0:	0800b635 	.word	0x0800b635
 800b5b4:	0800b635 	.word	0x0800b635
 800b5b8:	0800b635 	.word	0x0800b635
 800b5bc:	0800b635 	.word	0x0800b635
 800b5c0:	0800b61d 	.word	0x0800b61d
 800b5c4:	0800b635 	.word	0x0800b635
 800b5c8:	0800b635 	.word	0x0800b635
 800b5cc:	0800b635 	.word	0x0800b635
 800b5d0:	0800b635 	.word	0x0800b635
 800b5d4:	0800b635 	.word	0x0800b635
 800b5d8:	0800b635 	.word	0x0800b635
 800b5dc:	0800b635 	.word	0x0800b635
 800b5e0:	0800b625 	.word	0x0800b625
 800b5e4:	0800b635 	.word	0x0800b635
 800b5e8:	0800b635 	.word	0x0800b635
 800b5ec:	0800b635 	.word	0x0800b635
 800b5f0:	0800b635 	.word	0x0800b635
 800b5f4:	0800b635 	.word	0x0800b635
 800b5f8:	0800b635 	.word	0x0800b635
 800b5fc:	0800b635 	.word	0x0800b635
 800b600:	0800b62d 	.word	0x0800b62d
 800b604:	2301      	movs	r3, #1
 800b606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b60a:	e326      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800b60c:	2304      	movs	r3, #4
 800b60e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b612:	e322      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800b614:	2308      	movs	r3, #8
 800b616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b61a:	e31e      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800b61c:	2310      	movs	r3, #16
 800b61e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b622:	e31a      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800b624:	2320      	movs	r3, #32
 800b626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b62a:	e316      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800b62c:	2340      	movs	r3, #64	@ 0x40
 800b62e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b632:	e312      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800b634:	2380      	movs	r3, #128	@ 0x80
 800b636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b63a:	e30e      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800b63c:	697b      	ldr	r3, [r7, #20]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	4a69      	ldr	r2, [pc, #420]	@ (800b7e8 <UART_SetConfig+0x33c>)
 800b642:	4293      	cmp	r3, r2
 800b644:	d130      	bne.n	800b6a8 <UART_SetConfig+0x1fc>
 800b646:	4b67      	ldr	r3, [pc, #412]	@ (800b7e4 <UART_SetConfig+0x338>)
 800b648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b64a:	f003 0307 	and.w	r3, r3, #7
 800b64e:	2b05      	cmp	r3, #5
 800b650:	d826      	bhi.n	800b6a0 <UART_SetConfig+0x1f4>
 800b652:	a201      	add	r2, pc, #4	@ (adr r2, 800b658 <UART_SetConfig+0x1ac>)
 800b654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b658:	0800b671 	.word	0x0800b671
 800b65c:	0800b679 	.word	0x0800b679
 800b660:	0800b681 	.word	0x0800b681
 800b664:	0800b689 	.word	0x0800b689
 800b668:	0800b691 	.word	0x0800b691
 800b66c:	0800b699 	.word	0x0800b699
 800b670:	2300      	movs	r3, #0
 800b672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b676:	e2f0      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800b678:	2304      	movs	r3, #4
 800b67a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b67e:	e2ec      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800b680:	2308      	movs	r3, #8
 800b682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b686:	e2e8      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800b688:	2310      	movs	r3, #16
 800b68a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b68e:	e2e4      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800b690:	2320      	movs	r3, #32
 800b692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b696:	e2e0      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800b698:	2340      	movs	r3, #64	@ 0x40
 800b69a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b69e:	e2dc      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800b6a0:	2380      	movs	r3, #128	@ 0x80
 800b6a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6a6:	e2d8      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800b6a8:	697b      	ldr	r3, [r7, #20]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	4a4f      	ldr	r2, [pc, #316]	@ (800b7ec <UART_SetConfig+0x340>)
 800b6ae:	4293      	cmp	r3, r2
 800b6b0:	d130      	bne.n	800b714 <UART_SetConfig+0x268>
 800b6b2:	4b4c      	ldr	r3, [pc, #304]	@ (800b7e4 <UART_SetConfig+0x338>)
 800b6b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6b6:	f003 0307 	and.w	r3, r3, #7
 800b6ba:	2b05      	cmp	r3, #5
 800b6bc:	d826      	bhi.n	800b70c <UART_SetConfig+0x260>
 800b6be:	a201      	add	r2, pc, #4	@ (adr r2, 800b6c4 <UART_SetConfig+0x218>)
 800b6c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6c4:	0800b6dd 	.word	0x0800b6dd
 800b6c8:	0800b6e5 	.word	0x0800b6e5
 800b6cc:	0800b6ed 	.word	0x0800b6ed
 800b6d0:	0800b6f5 	.word	0x0800b6f5
 800b6d4:	0800b6fd 	.word	0x0800b6fd
 800b6d8:	0800b705 	.word	0x0800b705
 800b6dc:	2300      	movs	r3, #0
 800b6de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6e2:	e2ba      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800b6e4:	2304      	movs	r3, #4
 800b6e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6ea:	e2b6      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800b6ec:	2308      	movs	r3, #8
 800b6ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6f2:	e2b2      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800b6f4:	2310      	movs	r3, #16
 800b6f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6fa:	e2ae      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800b6fc:	2320      	movs	r3, #32
 800b6fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b702:	e2aa      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800b704:	2340      	movs	r3, #64	@ 0x40
 800b706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b70a:	e2a6      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800b70c:	2380      	movs	r3, #128	@ 0x80
 800b70e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b712:	e2a2      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800b714:	697b      	ldr	r3, [r7, #20]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	4a35      	ldr	r2, [pc, #212]	@ (800b7f0 <UART_SetConfig+0x344>)
 800b71a:	4293      	cmp	r3, r2
 800b71c:	d130      	bne.n	800b780 <UART_SetConfig+0x2d4>
 800b71e:	4b31      	ldr	r3, [pc, #196]	@ (800b7e4 <UART_SetConfig+0x338>)
 800b720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b722:	f003 0307 	and.w	r3, r3, #7
 800b726:	2b05      	cmp	r3, #5
 800b728:	d826      	bhi.n	800b778 <UART_SetConfig+0x2cc>
 800b72a:	a201      	add	r2, pc, #4	@ (adr r2, 800b730 <UART_SetConfig+0x284>)
 800b72c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b730:	0800b749 	.word	0x0800b749
 800b734:	0800b751 	.word	0x0800b751
 800b738:	0800b759 	.word	0x0800b759
 800b73c:	0800b761 	.word	0x0800b761
 800b740:	0800b769 	.word	0x0800b769
 800b744:	0800b771 	.word	0x0800b771
 800b748:	2300      	movs	r3, #0
 800b74a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b74e:	e284      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800b750:	2304      	movs	r3, #4
 800b752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b756:	e280      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800b758:	2308      	movs	r3, #8
 800b75a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b75e:	e27c      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800b760:	2310      	movs	r3, #16
 800b762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b766:	e278      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800b768:	2320      	movs	r3, #32
 800b76a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b76e:	e274      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800b770:	2340      	movs	r3, #64	@ 0x40
 800b772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b776:	e270      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800b778:	2380      	movs	r3, #128	@ 0x80
 800b77a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b77e:	e26c      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800b780:	697b      	ldr	r3, [r7, #20]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	4a1b      	ldr	r2, [pc, #108]	@ (800b7f4 <UART_SetConfig+0x348>)
 800b786:	4293      	cmp	r3, r2
 800b788:	d142      	bne.n	800b810 <UART_SetConfig+0x364>
 800b78a:	4b16      	ldr	r3, [pc, #88]	@ (800b7e4 <UART_SetConfig+0x338>)
 800b78c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b78e:	f003 0307 	and.w	r3, r3, #7
 800b792:	2b05      	cmp	r3, #5
 800b794:	d838      	bhi.n	800b808 <UART_SetConfig+0x35c>
 800b796:	a201      	add	r2, pc, #4	@ (adr r2, 800b79c <UART_SetConfig+0x2f0>)
 800b798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b79c:	0800b7b5 	.word	0x0800b7b5
 800b7a0:	0800b7bd 	.word	0x0800b7bd
 800b7a4:	0800b7c5 	.word	0x0800b7c5
 800b7a8:	0800b7cd 	.word	0x0800b7cd
 800b7ac:	0800b7f9 	.word	0x0800b7f9
 800b7b0:	0800b801 	.word	0x0800b801
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7ba:	e24e      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800b7bc:	2304      	movs	r3, #4
 800b7be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7c2:	e24a      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800b7c4:	2308      	movs	r3, #8
 800b7c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7ca:	e246      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800b7cc:	2310      	movs	r3, #16
 800b7ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7d2:	e242      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800b7d4:	cfff69f3 	.word	0xcfff69f3
 800b7d8:	58000c00 	.word	0x58000c00
 800b7dc:	11fff4ff 	.word	0x11fff4ff
 800b7e0:	40011000 	.word	0x40011000
 800b7e4:	58024400 	.word	0x58024400
 800b7e8:	40004400 	.word	0x40004400
 800b7ec:	40004800 	.word	0x40004800
 800b7f0:	40004c00 	.word	0x40004c00
 800b7f4:	40005000 	.word	0x40005000
 800b7f8:	2320      	movs	r3, #32
 800b7fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7fe:	e22c      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800b800:	2340      	movs	r3, #64	@ 0x40
 800b802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b806:	e228      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800b808:	2380      	movs	r3, #128	@ 0x80
 800b80a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b80e:	e224      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800b810:	697b      	ldr	r3, [r7, #20]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	4ab1      	ldr	r2, [pc, #708]	@ (800badc <UART_SetConfig+0x630>)
 800b816:	4293      	cmp	r3, r2
 800b818:	d176      	bne.n	800b908 <UART_SetConfig+0x45c>
 800b81a:	4bb1      	ldr	r3, [pc, #708]	@ (800bae0 <UART_SetConfig+0x634>)
 800b81c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b81e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b822:	2b28      	cmp	r3, #40	@ 0x28
 800b824:	d86c      	bhi.n	800b900 <UART_SetConfig+0x454>
 800b826:	a201      	add	r2, pc, #4	@ (adr r2, 800b82c <UART_SetConfig+0x380>)
 800b828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b82c:	0800b8d1 	.word	0x0800b8d1
 800b830:	0800b901 	.word	0x0800b901
 800b834:	0800b901 	.word	0x0800b901
 800b838:	0800b901 	.word	0x0800b901
 800b83c:	0800b901 	.word	0x0800b901
 800b840:	0800b901 	.word	0x0800b901
 800b844:	0800b901 	.word	0x0800b901
 800b848:	0800b901 	.word	0x0800b901
 800b84c:	0800b8d9 	.word	0x0800b8d9
 800b850:	0800b901 	.word	0x0800b901
 800b854:	0800b901 	.word	0x0800b901
 800b858:	0800b901 	.word	0x0800b901
 800b85c:	0800b901 	.word	0x0800b901
 800b860:	0800b901 	.word	0x0800b901
 800b864:	0800b901 	.word	0x0800b901
 800b868:	0800b901 	.word	0x0800b901
 800b86c:	0800b8e1 	.word	0x0800b8e1
 800b870:	0800b901 	.word	0x0800b901
 800b874:	0800b901 	.word	0x0800b901
 800b878:	0800b901 	.word	0x0800b901
 800b87c:	0800b901 	.word	0x0800b901
 800b880:	0800b901 	.word	0x0800b901
 800b884:	0800b901 	.word	0x0800b901
 800b888:	0800b901 	.word	0x0800b901
 800b88c:	0800b8e9 	.word	0x0800b8e9
 800b890:	0800b901 	.word	0x0800b901
 800b894:	0800b901 	.word	0x0800b901
 800b898:	0800b901 	.word	0x0800b901
 800b89c:	0800b901 	.word	0x0800b901
 800b8a0:	0800b901 	.word	0x0800b901
 800b8a4:	0800b901 	.word	0x0800b901
 800b8a8:	0800b901 	.word	0x0800b901
 800b8ac:	0800b8f1 	.word	0x0800b8f1
 800b8b0:	0800b901 	.word	0x0800b901
 800b8b4:	0800b901 	.word	0x0800b901
 800b8b8:	0800b901 	.word	0x0800b901
 800b8bc:	0800b901 	.word	0x0800b901
 800b8c0:	0800b901 	.word	0x0800b901
 800b8c4:	0800b901 	.word	0x0800b901
 800b8c8:	0800b901 	.word	0x0800b901
 800b8cc:	0800b8f9 	.word	0x0800b8f9
 800b8d0:	2301      	movs	r3, #1
 800b8d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8d6:	e1c0      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800b8d8:	2304      	movs	r3, #4
 800b8da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8de:	e1bc      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800b8e0:	2308      	movs	r3, #8
 800b8e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8e6:	e1b8      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800b8e8:	2310      	movs	r3, #16
 800b8ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8ee:	e1b4      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800b8f0:	2320      	movs	r3, #32
 800b8f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8f6:	e1b0      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800b8f8:	2340      	movs	r3, #64	@ 0x40
 800b8fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8fe:	e1ac      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800b900:	2380      	movs	r3, #128	@ 0x80
 800b902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b906:	e1a8      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800b908:	697b      	ldr	r3, [r7, #20]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	4a75      	ldr	r2, [pc, #468]	@ (800bae4 <UART_SetConfig+0x638>)
 800b90e:	4293      	cmp	r3, r2
 800b910:	d130      	bne.n	800b974 <UART_SetConfig+0x4c8>
 800b912:	4b73      	ldr	r3, [pc, #460]	@ (800bae0 <UART_SetConfig+0x634>)
 800b914:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b916:	f003 0307 	and.w	r3, r3, #7
 800b91a:	2b05      	cmp	r3, #5
 800b91c:	d826      	bhi.n	800b96c <UART_SetConfig+0x4c0>
 800b91e:	a201      	add	r2, pc, #4	@ (adr r2, 800b924 <UART_SetConfig+0x478>)
 800b920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b924:	0800b93d 	.word	0x0800b93d
 800b928:	0800b945 	.word	0x0800b945
 800b92c:	0800b94d 	.word	0x0800b94d
 800b930:	0800b955 	.word	0x0800b955
 800b934:	0800b95d 	.word	0x0800b95d
 800b938:	0800b965 	.word	0x0800b965
 800b93c:	2300      	movs	r3, #0
 800b93e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b942:	e18a      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800b944:	2304      	movs	r3, #4
 800b946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b94a:	e186      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800b94c:	2308      	movs	r3, #8
 800b94e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b952:	e182      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800b954:	2310      	movs	r3, #16
 800b956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b95a:	e17e      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800b95c:	2320      	movs	r3, #32
 800b95e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b962:	e17a      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800b964:	2340      	movs	r3, #64	@ 0x40
 800b966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b96a:	e176      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800b96c:	2380      	movs	r3, #128	@ 0x80
 800b96e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b972:	e172      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800b974:	697b      	ldr	r3, [r7, #20]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	4a5b      	ldr	r2, [pc, #364]	@ (800bae8 <UART_SetConfig+0x63c>)
 800b97a:	4293      	cmp	r3, r2
 800b97c:	d130      	bne.n	800b9e0 <UART_SetConfig+0x534>
 800b97e:	4b58      	ldr	r3, [pc, #352]	@ (800bae0 <UART_SetConfig+0x634>)
 800b980:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b982:	f003 0307 	and.w	r3, r3, #7
 800b986:	2b05      	cmp	r3, #5
 800b988:	d826      	bhi.n	800b9d8 <UART_SetConfig+0x52c>
 800b98a:	a201      	add	r2, pc, #4	@ (adr r2, 800b990 <UART_SetConfig+0x4e4>)
 800b98c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b990:	0800b9a9 	.word	0x0800b9a9
 800b994:	0800b9b1 	.word	0x0800b9b1
 800b998:	0800b9b9 	.word	0x0800b9b9
 800b99c:	0800b9c1 	.word	0x0800b9c1
 800b9a0:	0800b9c9 	.word	0x0800b9c9
 800b9a4:	0800b9d1 	.word	0x0800b9d1
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9ae:	e154      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800b9b0:	2304      	movs	r3, #4
 800b9b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9b6:	e150      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800b9b8:	2308      	movs	r3, #8
 800b9ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9be:	e14c      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800b9c0:	2310      	movs	r3, #16
 800b9c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9c6:	e148      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800b9c8:	2320      	movs	r3, #32
 800b9ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9ce:	e144      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800b9d0:	2340      	movs	r3, #64	@ 0x40
 800b9d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9d6:	e140      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800b9d8:	2380      	movs	r3, #128	@ 0x80
 800b9da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9de:	e13c      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800b9e0:	697b      	ldr	r3, [r7, #20]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	4a41      	ldr	r2, [pc, #260]	@ (800baec <UART_SetConfig+0x640>)
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	f040 8082 	bne.w	800baf0 <UART_SetConfig+0x644>
 800b9ec:	4b3c      	ldr	r3, [pc, #240]	@ (800bae0 <UART_SetConfig+0x634>)
 800b9ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b9f4:	2b28      	cmp	r3, #40	@ 0x28
 800b9f6:	d86d      	bhi.n	800bad4 <UART_SetConfig+0x628>
 800b9f8:	a201      	add	r2, pc, #4	@ (adr r2, 800ba00 <UART_SetConfig+0x554>)
 800b9fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9fe:	bf00      	nop
 800ba00:	0800baa5 	.word	0x0800baa5
 800ba04:	0800bad5 	.word	0x0800bad5
 800ba08:	0800bad5 	.word	0x0800bad5
 800ba0c:	0800bad5 	.word	0x0800bad5
 800ba10:	0800bad5 	.word	0x0800bad5
 800ba14:	0800bad5 	.word	0x0800bad5
 800ba18:	0800bad5 	.word	0x0800bad5
 800ba1c:	0800bad5 	.word	0x0800bad5
 800ba20:	0800baad 	.word	0x0800baad
 800ba24:	0800bad5 	.word	0x0800bad5
 800ba28:	0800bad5 	.word	0x0800bad5
 800ba2c:	0800bad5 	.word	0x0800bad5
 800ba30:	0800bad5 	.word	0x0800bad5
 800ba34:	0800bad5 	.word	0x0800bad5
 800ba38:	0800bad5 	.word	0x0800bad5
 800ba3c:	0800bad5 	.word	0x0800bad5
 800ba40:	0800bab5 	.word	0x0800bab5
 800ba44:	0800bad5 	.word	0x0800bad5
 800ba48:	0800bad5 	.word	0x0800bad5
 800ba4c:	0800bad5 	.word	0x0800bad5
 800ba50:	0800bad5 	.word	0x0800bad5
 800ba54:	0800bad5 	.word	0x0800bad5
 800ba58:	0800bad5 	.word	0x0800bad5
 800ba5c:	0800bad5 	.word	0x0800bad5
 800ba60:	0800babd 	.word	0x0800babd
 800ba64:	0800bad5 	.word	0x0800bad5
 800ba68:	0800bad5 	.word	0x0800bad5
 800ba6c:	0800bad5 	.word	0x0800bad5
 800ba70:	0800bad5 	.word	0x0800bad5
 800ba74:	0800bad5 	.word	0x0800bad5
 800ba78:	0800bad5 	.word	0x0800bad5
 800ba7c:	0800bad5 	.word	0x0800bad5
 800ba80:	0800bac5 	.word	0x0800bac5
 800ba84:	0800bad5 	.word	0x0800bad5
 800ba88:	0800bad5 	.word	0x0800bad5
 800ba8c:	0800bad5 	.word	0x0800bad5
 800ba90:	0800bad5 	.word	0x0800bad5
 800ba94:	0800bad5 	.word	0x0800bad5
 800ba98:	0800bad5 	.word	0x0800bad5
 800ba9c:	0800bad5 	.word	0x0800bad5
 800baa0:	0800bacd 	.word	0x0800bacd
 800baa4:	2301      	movs	r3, #1
 800baa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800baaa:	e0d6      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800baac:	2304      	movs	r3, #4
 800baae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bab2:	e0d2      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800bab4:	2308      	movs	r3, #8
 800bab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800baba:	e0ce      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800babc:	2310      	movs	r3, #16
 800babe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bac2:	e0ca      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800bac4:	2320      	movs	r3, #32
 800bac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800baca:	e0c6      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800bacc:	2340      	movs	r3, #64	@ 0x40
 800bace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bad2:	e0c2      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800bad4:	2380      	movs	r3, #128	@ 0x80
 800bad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bada:	e0be      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800badc:	40011400 	.word	0x40011400
 800bae0:	58024400 	.word	0x58024400
 800bae4:	40007800 	.word	0x40007800
 800bae8:	40007c00 	.word	0x40007c00
 800baec:	40011800 	.word	0x40011800
 800baf0:	697b      	ldr	r3, [r7, #20]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	4aad      	ldr	r2, [pc, #692]	@ (800bdac <UART_SetConfig+0x900>)
 800baf6:	4293      	cmp	r3, r2
 800baf8:	d176      	bne.n	800bbe8 <UART_SetConfig+0x73c>
 800bafa:	4bad      	ldr	r3, [pc, #692]	@ (800bdb0 <UART_SetConfig+0x904>)
 800bafc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bafe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bb02:	2b28      	cmp	r3, #40	@ 0x28
 800bb04:	d86c      	bhi.n	800bbe0 <UART_SetConfig+0x734>
 800bb06:	a201      	add	r2, pc, #4	@ (adr r2, 800bb0c <UART_SetConfig+0x660>)
 800bb08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb0c:	0800bbb1 	.word	0x0800bbb1
 800bb10:	0800bbe1 	.word	0x0800bbe1
 800bb14:	0800bbe1 	.word	0x0800bbe1
 800bb18:	0800bbe1 	.word	0x0800bbe1
 800bb1c:	0800bbe1 	.word	0x0800bbe1
 800bb20:	0800bbe1 	.word	0x0800bbe1
 800bb24:	0800bbe1 	.word	0x0800bbe1
 800bb28:	0800bbe1 	.word	0x0800bbe1
 800bb2c:	0800bbb9 	.word	0x0800bbb9
 800bb30:	0800bbe1 	.word	0x0800bbe1
 800bb34:	0800bbe1 	.word	0x0800bbe1
 800bb38:	0800bbe1 	.word	0x0800bbe1
 800bb3c:	0800bbe1 	.word	0x0800bbe1
 800bb40:	0800bbe1 	.word	0x0800bbe1
 800bb44:	0800bbe1 	.word	0x0800bbe1
 800bb48:	0800bbe1 	.word	0x0800bbe1
 800bb4c:	0800bbc1 	.word	0x0800bbc1
 800bb50:	0800bbe1 	.word	0x0800bbe1
 800bb54:	0800bbe1 	.word	0x0800bbe1
 800bb58:	0800bbe1 	.word	0x0800bbe1
 800bb5c:	0800bbe1 	.word	0x0800bbe1
 800bb60:	0800bbe1 	.word	0x0800bbe1
 800bb64:	0800bbe1 	.word	0x0800bbe1
 800bb68:	0800bbe1 	.word	0x0800bbe1
 800bb6c:	0800bbc9 	.word	0x0800bbc9
 800bb70:	0800bbe1 	.word	0x0800bbe1
 800bb74:	0800bbe1 	.word	0x0800bbe1
 800bb78:	0800bbe1 	.word	0x0800bbe1
 800bb7c:	0800bbe1 	.word	0x0800bbe1
 800bb80:	0800bbe1 	.word	0x0800bbe1
 800bb84:	0800bbe1 	.word	0x0800bbe1
 800bb88:	0800bbe1 	.word	0x0800bbe1
 800bb8c:	0800bbd1 	.word	0x0800bbd1
 800bb90:	0800bbe1 	.word	0x0800bbe1
 800bb94:	0800bbe1 	.word	0x0800bbe1
 800bb98:	0800bbe1 	.word	0x0800bbe1
 800bb9c:	0800bbe1 	.word	0x0800bbe1
 800bba0:	0800bbe1 	.word	0x0800bbe1
 800bba4:	0800bbe1 	.word	0x0800bbe1
 800bba8:	0800bbe1 	.word	0x0800bbe1
 800bbac:	0800bbd9 	.word	0x0800bbd9
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbb6:	e050      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800bbb8:	2304      	movs	r3, #4
 800bbba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbbe:	e04c      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800bbc0:	2308      	movs	r3, #8
 800bbc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbc6:	e048      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800bbc8:	2310      	movs	r3, #16
 800bbca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbce:	e044      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800bbd0:	2320      	movs	r3, #32
 800bbd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbd6:	e040      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800bbd8:	2340      	movs	r3, #64	@ 0x40
 800bbda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbde:	e03c      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800bbe0:	2380      	movs	r3, #128	@ 0x80
 800bbe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbe6:	e038      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800bbe8:	697b      	ldr	r3, [r7, #20]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	4a71      	ldr	r2, [pc, #452]	@ (800bdb4 <UART_SetConfig+0x908>)
 800bbee:	4293      	cmp	r3, r2
 800bbf0:	d130      	bne.n	800bc54 <UART_SetConfig+0x7a8>
 800bbf2:	4b6f      	ldr	r3, [pc, #444]	@ (800bdb0 <UART_SetConfig+0x904>)
 800bbf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bbf6:	f003 0307 	and.w	r3, r3, #7
 800bbfa:	2b05      	cmp	r3, #5
 800bbfc:	d826      	bhi.n	800bc4c <UART_SetConfig+0x7a0>
 800bbfe:	a201      	add	r2, pc, #4	@ (adr r2, 800bc04 <UART_SetConfig+0x758>)
 800bc00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc04:	0800bc1d 	.word	0x0800bc1d
 800bc08:	0800bc25 	.word	0x0800bc25
 800bc0c:	0800bc2d 	.word	0x0800bc2d
 800bc10:	0800bc35 	.word	0x0800bc35
 800bc14:	0800bc3d 	.word	0x0800bc3d
 800bc18:	0800bc45 	.word	0x0800bc45
 800bc1c:	2302      	movs	r3, #2
 800bc1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc22:	e01a      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800bc24:	2304      	movs	r3, #4
 800bc26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc2a:	e016      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800bc2c:	2308      	movs	r3, #8
 800bc2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc32:	e012      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800bc34:	2310      	movs	r3, #16
 800bc36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc3a:	e00e      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800bc3c:	2320      	movs	r3, #32
 800bc3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc42:	e00a      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800bc44:	2340      	movs	r3, #64	@ 0x40
 800bc46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc4a:	e006      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800bc4c:	2380      	movs	r3, #128	@ 0x80
 800bc4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc52:	e002      	b.n	800bc5a <UART_SetConfig+0x7ae>
 800bc54:	2380      	movs	r3, #128	@ 0x80
 800bc56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bc5a:	697b      	ldr	r3, [r7, #20]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	4a55      	ldr	r2, [pc, #340]	@ (800bdb4 <UART_SetConfig+0x908>)
 800bc60:	4293      	cmp	r3, r2
 800bc62:	f040 80f8 	bne.w	800be56 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bc66:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bc6a:	2b20      	cmp	r3, #32
 800bc6c:	dc46      	bgt.n	800bcfc <UART_SetConfig+0x850>
 800bc6e:	2b02      	cmp	r3, #2
 800bc70:	db75      	blt.n	800bd5e <UART_SetConfig+0x8b2>
 800bc72:	3b02      	subs	r3, #2
 800bc74:	2b1e      	cmp	r3, #30
 800bc76:	d872      	bhi.n	800bd5e <UART_SetConfig+0x8b2>
 800bc78:	a201      	add	r2, pc, #4	@ (adr r2, 800bc80 <UART_SetConfig+0x7d4>)
 800bc7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc7e:	bf00      	nop
 800bc80:	0800bd03 	.word	0x0800bd03
 800bc84:	0800bd5f 	.word	0x0800bd5f
 800bc88:	0800bd0b 	.word	0x0800bd0b
 800bc8c:	0800bd5f 	.word	0x0800bd5f
 800bc90:	0800bd5f 	.word	0x0800bd5f
 800bc94:	0800bd5f 	.word	0x0800bd5f
 800bc98:	0800bd1b 	.word	0x0800bd1b
 800bc9c:	0800bd5f 	.word	0x0800bd5f
 800bca0:	0800bd5f 	.word	0x0800bd5f
 800bca4:	0800bd5f 	.word	0x0800bd5f
 800bca8:	0800bd5f 	.word	0x0800bd5f
 800bcac:	0800bd5f 	.word	0x0800bd5f
 800bcb0:	0800bd5f 	.word	0x0800bd5f
 800bcb4:	0800bd5f 	.word	0x0800bd5f
 800bcb8:	0800bd2b 	.word	0x0800bd2b
 800bcbc:	0800bd5f 	.word	0x0800bd5f
 800bcc0:	0800bd5f 	.word	0x0800bd5f
 800bcc4:	0800bd5f 	.word	0x0800bd5f
 800bcc8:	0800bd5f 	.word	0x0800bd5f
 800bccc:	0800bd5f 	.word	0x0800bd5f
 800bcd0:	0800bd5f 	.word	0x0800bd5f
 800bcd4:	0800bd5f 	.word	0x0800bd5f
 800bcd8:	0800bd5f 	.word	0x0800bd5f
 800bcdc:	0800bd5f 	.word	0x0800bd5f
 800bce0:	0800bd5f 	.word	0x0800bd5f
 800bce4:	0800bd5f 	.word	0x0800bd5f
 800bce8:	0800bd5f 	.word	0x0800bd5f
 800bcec:	0800bd5f 	.word	0x0800bd5f
 800bcf0:	0800bd5f 	.word	0x0800bd5f
 800bcf4:	0800bd5f 	.word	0x0800bd5f
 800bcf8:	0800bd51 	.word	0x0800bd51
 800bcfc:	2b40      	cmp	r3, #64	@ 0x40
 800bcfe:	d02a      	beq.n	800bd56 <UART_SetConfig+0x8aa>
 800bd00:	e02d      	b.n	800bd5e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800bd02:	f7fe fc05 	bl	800a510 <HAL_RCCEx_GetD3PCLK1Freq>
 800bd06:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bd08:	e02f      	b.n	800bd6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bd0e:	4618      	mov	r0, r3
 800bd10:	f7fe fc14 	bl	800a53c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bd14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd18:	e027      	b.n	800bd6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd1a:	f107 0318 	add.w	r3, r7, #24
 800bd1e:	4618      	mov	r0, r3
 800bd20:	f7fe fd60 	bl	800a7e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bd24:	69fb      	ldr	r3, [r7, #28]
 800bd26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd28:	e01f      	b.n	800bd6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bd2a:	4b21      	ldr	r3, [pc, #132]	@ (800bdb0 <UART_SetConfig+0x904>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	f003 0320 	and.w	r3, r3, #32
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d009      	beq.n	800bd4a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bd36:	4b1e      	ldr	r3, [pc, #120]	@ (800bdb0 <UART_SetConfig+0x904>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	08db      	lsrs	r3, r3, #3
 800bd3c:	f003 0303 	and.w	r3, r3, #3
 800bd40:	4a1d      	ldr	r2, [pc, #116]	@ (800bdb8 <UART_SetConfig+0x90c>)
 800bd42:	fa22 f303 	lsr.w	r3, r2, r3
 800bd46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bd48:	e00f      	b.n	800bd6a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800bd4a:	4b1b      	ldr	r3, [pc, #108]	@ (800bdb8 <UART_SetConfig+0x90c>)
 800bd4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd4e:	e00c      	b.n	800bd6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bd50:	4b1a      	ldr	r3, [pc, #104]	@ (800bdbc <UART_SetConfig+0x910>)
 800bd52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd54:	e009      	b.n	800bd6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bd56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bd5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd5c:	e005      	b.n	800bd6a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800bd5e:	2300      	movs	r3, #0
 800bd60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bd62:	2301      	movs	r3, #1
 800bd64:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bd68:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bd6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	f000 81ee 	beq.w	800c14e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bd72:	697b      	ldr	r3, [r7, #20]
 800bd74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd76:	4a12      	ldr	r2, [pc, #72]	@ (800bdc0 <UART_SetConfig+0x914>)
 800bd78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd7c:	461a      	mov	r2, r3
 800bd7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd80:	fbb3 f3f2 	udiv	r3, r3, r2
 800bd84:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bd86:	697b      	ldr	r3, [r7, #20]
 800bd88:	685a      	ldr	r2, [r3, #4]
 800bd8a:	4613      	mov	r3, r2
 800bd8c:	005b      	lsls	r3, r3, #1
 800bd8e:	4413      	add	r3, r2
 800bd90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd92:	429a      	cmp	r2, r3
 800bd94:	d305      	bcc.n	800bda2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bd96:	697b      	ldr	r3, [r7, #20]
 800bd98:	685b      	ldr	r3, [r3, #4]
 800bd9a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bd9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd9e:	429a      	cmp	r2, r3
 800bda0:	d910      	bls.n	800bdc4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800bda2:	2301      	movs	r3, #1
 800bda4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bda8:	e1d1      	b.n	800c14e <UART_SetConfig+0xca2>
 800bdaa:	bf00      	nop
 800bdac:	40011c00 	.word	0x40011c00
 800bdb0:	58024400 	.word	0x58024400
 800bdb4:	58000c00 	.word	0x58000c00
 800bdb8:	03d09000 	.word	0x03d09000
 800bdbc:	003d0900 	.word	0x003d0900
 800bdc0:	08014b6c 	.word	0x08014b6c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bdc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	60bb      	str	r3, [r7, #8]
 800bdca:	60fa      	str	r2, [r7, #12]
 800bdcc:	697b      	ldr	r3, [r7, #20]
 800bdce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdd0:	4ac0      	ldr	r2, [pc, #768]	@ (800c0d4 <UART_SetConfig+0xc28>)
 800bdd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bdd6:	b29b      	uxth	r3, r3
 800bdd8:	2200      	movs	r2, #0
 800bdda:	603b      	str	r3, [r7, #0]
 800bddc:	607a      	str	r2, [r7, #4]
 800bdde:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bde2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bde6:	f7f4 fc97 	bl	8000718 <__aeabi_uldivmod>
 800bdea:	4602      	mov	r2, r0
 800bdec:	460b      	mov	r3, r1
 800bdee:	4610      	mov	r0, r2
 800bdf0:	4619      	mov	r1, r3
 800bdf2:	f04f 0200 	mov.w	r2, #0
 800bdf6:	f04f 0300 	mov.w	r3, #0
 800bdfa:	020b      	lsls	r3, r1, #8
 800bdfc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800be00:	0202      	lsls	r2, r0, #8
 800be02:	6979      	ldr	r1, [r7, #20]
 800be04:	6849      	ldr	r1, [r1, #4]
 800be06:	0849      	lsrs	r1, r1, #1
 800be08:	2000      	movs	r0, #0
 800be0a:	460c      	mov	r4, r1
 800be0c:	4605      	mov	r5, r0
 800be0e:	eb12 0804 	adds.w	r8, r2, r4
 800be12:	eb43 0905 	adc.w	r9, r3, r5
 800be16:	697b      	ldr	r3, [r7, #20]
 800be18:	685b      	ldr	r3, [r3, #4]
 800be1a:	2200      	movs	r2, #0
 800be1c:	469a      	mov	sl, r3
 800be1e:	4693      	mov	fp, r2
 800be20:	4652      	mov	r2, sl
 800be22:	465b      	mov	r3, fp
 800be24:	4640      	mov	r0, r8
 800be26:	4649      	mov	r1, r9
 800be28:	f7f4 fc76 	bl	8000718 <__aeabi_uldivmod>
 800be2c:	4602      	mov	r2, r0
 800be2e:	460b      	mov	r3, r1
 800be30:	4613      	mov	r3, r2
 800be32:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800be34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800be3a:	d308      	bcc.n	800be4e <UART_SetConfig+0x9a2>
 800be3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800be42:	d204      	bcs.n	800be4e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800be44:	697b      	ldr	r3, [r7, #20]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800be4a:	60da      	str	r2, [r3, #12]
 800be4c:	e17f      	b.n	800c14e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800be4e:	2301      	movs	r3, #1
 800be50:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800be54:	e17b      	b.n	800c14e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800be56:	697b      	ldr	r3, [r7, #20]
 800be58:	69db      	ldr	r3, [r3, #28]
 800be5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800be5e:	f040 80bd 	bne.w	800bfdc <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800be62:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800be66:	2b20      	cmp	r3, #32
 800be68:	dc48      	bgt.n	800befc <UART_SetConfig+0xa50>
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	db7b      	blt.n	800bf66 <UART_SetConfig+0xaba>
 800be6e:	2b20      	cmp	r3, #32
 800be70:	d879      	bhi.n	800bf66 <UART_SetConfig+0xaba>
 800be72:	a201      	add	r2, pc, #4	@ (adr r2, 800be78 <UART_SetConfig+0x9cc>)
 800be74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be78:	0800bf03 	.word	0x0800bf03
 800be7c:	0800bf0b 	.word	0x0800bf0b
 800be80:	0800bf67 	.word	0x0800bf67
 800be84:	0800bf67 	.word	0x0800bf67
 800be88:	0800bf13 	.word	0x0800bf13
 800be8c:	0800bf67 	.word	0x0800bf67
 800be90:	0800bf67 	.word	0x0800bf67
 800be94:	0800bf67 	.word	0x0800bf67
 800be98:	0800bf23 	.word	0x0800bf23
 800be9c:	0800bf67 	.word	0x0800bf67
 800bea0:	0800bf67 	.word	0x0800bf67
 800bea4:	0800bf67 	.word	0x0800bf67
 800bea8:	0800bf67 	.word	0x0800bf67
 800beac:	0800bf67 	.word	0x0800bf67
 800beb0:	0800bf67 	.word	0x0800bf67
 800beb4:	0800bf67 	.word	0x0800bf67
 800beb8:	0800bf33 	.word	0x0800bf33
 800bebc:	0800bf67 	.word	0x0800bf67
 800bec0:	0800bf67 	.word	0x0800bf67
 800bec4:	0800bf67 	.word	0x0800bf67
 800bec8:	0800bf67 	.word	0x0800bf67
 800becc:	0800bf67 	.word	0x0800bf67
 800bed0:	0800bf67 	.word	0x0800bf67
 800bed4:	0800bf67 	.word	0x0800bf67
 800bed8:	0800bf67 	.word	0x0800bf67
 800bedc:	0800bf67 	.word	0x0800bf67
 800bee0:	0800bf67 	.word	0x0800bf67
 800bee4:	0800bf67 	.word	0x0800bf67
 800bee8:	0800bf67 	.word	0x0800bf67
 800beec:	0800bf67 	.word	0x0800bf67
 800bef0:	0800bf67 	.word	0x0800bf67
 800bef4:	0800bf67 	.word	0x0800bf67
 800bef8:	0800bf59 	.word	0x0800bf59
 800befc:	2b40      	cmp	r3, #64	@ 0x40
 800befe:	d02e      	beq.n	800bf5e <UART_SetConfig+0xab2>
 800bf00:	e031      	b.n	800bf66 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bf02:	f7fd f8d9 	bl	80090b8 <HAL_RCC_GetPCLK1Freq>
 800bf06:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bf08:	e033      	b.n	800bf72 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bf0a:	f7fd f8eb 	bl	80090e4 <HAL_RCC_GetPCLK2Freq>
 800bf0e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bf10:	e02f      	b.n	800bf72 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bf16:	4618      	mov	r0, r3
 800bf18:	f7fe fb10 	bl	800a53c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bf1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf20:	e027      	b.n	800bf72 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf22:	f107 0318 	add.w	r3, r7, #24
 800bf26:	4618      	mov	r0, r3
 800bf28:	f7fe fc5c 	bl	800a7e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bf2c:	69fb      	ldr	r3, [r7, #28]
 800bf2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf30:	e01f      	b.n	800bf72 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bf32:	4b69      	ldr	r3, [pc, #420]	@ (800c0d8 <UART_SetConfig+0xc2c>)
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	f003 0320 	and.w	r3, r3, #32
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d009      	beq.n	800bf52 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bf3e:	4b66      	ldr	r3, [pc, #408]	@ (800c0d8 <UART_SetConfig+0xc2c>)
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	08db      	lsrs	r3, r3, #3
 800bf44:	f003 0303 	and.w	r3, r3, #3
 800bf48:	4a64      	ldr	r2, [pc, #400]	@ (800c0dc <UART_SetConfig+0xc30>)
 800bf4a:	fa22 f303 	lsr.w	r3, r2, r3
 800bf4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bf50:	e00f      	b.n	800bf72 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800bf52:	4b62      	ldr	r3, [pc, #392]	@ (800c0dc <UART_SetConfig+0xc30>)
 800bf54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf56:	e00c      	b.n	800bf72 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bf58:	4b61      	ldr	r3, [pc, #388]	@ (800c0e0 <UART_SetConfig+0xc34>)
 800bf5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf5c:	e009      	b.n	800bf72 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bf5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bf62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf64:	e005      	b.n	800bf72 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800bf66:	2300      	movs	r3, #0
 800bf68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bf6a:	2301      	movs	r3, #1
 800bf6c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bf70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bf72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	f000 80ea 	beq.w	800c14e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf7e:	4a55      	ldr	r2, [pc, #340]	@ (800c0d4 <UART_SetConfig+0xc28>)
 800bf80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf84:	461a      	mov	r2, r3
 800bf86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf88:	fbb3 f3f2 	udiv	r3, r3, r2
 800bf8c:	005a      	lsls	r2, r3, #1
 800bf8e:	697b      	ldr	r3, [r7, #20]
 800bf90:	685b      	ldr	r3, [r3, #4]
 800bf92:	085b      	lsrs	r3, r3, #1
 800bf94:	441a      	add	r2, r3
 800bf96:	697b      	ldr	r3, [r7, #20]
 800bf98:	685b      	ldr	r3, [r3, #4]
 800bf9a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf9e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bfa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfa2:	2b0f      	cmp	r3, #15
 800bfa4:	d916      	bls.n	800bfd4 <UART_SetConfig+0xb28>
 800bfa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bfac:	d212      	bcs.n	800bfd4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bfae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfb0:	b29b      	uxth	r3, r3
 800bfb2:	f023 030f 	bic.w	r3, r3, #15
 800bfb6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bfb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfba:	085b      	lsrs	r3, r3, #1
 800bfbc:	b29b      	uxth	r3, r3
 800bfbe:	f003 0307 	and.w	r3, r3, #7
 800bfc2:	b29a      	uxth	r2, r3
 800bfc4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bfc6:	4313      	orrs	r3, r2
 800bfc8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800bfca:	697b      	ldr	r3, [r7, #20]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800bfd0:	60da      	str	r2, [r3, #12]
 800bfd2:	e0bc      	b.n	800c14e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800bfd4:	2301      	movs	r3, #1
 800bfd6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bfda:	e0b8      	b.n	800c14e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bfdc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bfe0:	2b20      	cmp	r3, #32
 800bfe2:	dc4b      	bgt.n	800c07c <UART_SetConfig+0xbd0>
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	f2c0 8087 	blt.w	800c0f8 <UART_SetConfig+0xc4c>
 800bfea:	2b20      	cmp	r3, #32
 800bfec:	f200 8084 	bhi.w	800c0f8 <UART_SetConfig+0xc4c>
 800bff0:	a201      	add	r2, pc, #4	@ (adr r2, 800bff8 <UART_SetConfig+0xb4c>)
 800bff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bff6:	bf00      	nop
 800bff8:	0800c083 	.word	0x0800c083
 800bffc:	0800c08b 	.word	0x0800c08b
 800c000:	0800c0f9 	.word	0x0800c0f9
 800c004:	0800c0f9 	.word	0x0800c0f9
 800c008:	0800c093 	.word	0x0800c093
 800c00c:	0800c0f9 	.word	0x0800c0f9
 800c010:	0800c0f9 	.word	0x0800c0f9
 800c014:	0800c0f9 	.word	0x0800c0f9
 800c018:	0800c0a3 	.word	0x0800c0a3
 800c01c:	0800c0f9 	.word	0x0800c0f9
 800c020:	0800c0f9 	.word	0x0800c0f9
 800c024:	0800c0f9 	.word	0x0800c0f9
 800c028:	0800c0f9 	.word	0x0800c0f9
 800c02c:	0800c0f9 	.word	0x0800c0f9
 800c030:	0800c0f9 	.word	0x0800c0f9
 800c034:	0800c0f9 	.word	0x0800c0f9
 800c038:	0800c0b3 	.word	0x0800c0b3
 800c03c:	0800c0f9 	.word	0x0800c0f9
 800c040:	0800c0f9 	.word	0x0800c0f9
 800c044:	0800c0f9 	.word	0x0800c0f9
 800c048:	0800c0f9 	.word	0x0800c0f9
 800c04c:	0800c0f9 	.word	0x0800c0f9
 800c050:	0800c0f9 	.word	0x0800c0f9
 800c054:	0800c0f9 	.word	0x0800c0f9
 800c058:	0800c0f9 	.word	0x0800c0f9
 800c05c:	0800c0f9 	.word	0x0800c0f9
 800c060:	0800c0f9 	.word	0x0800c0f9
 800c064:	0800c0f9 	.word	0x0800c0f9
 800c068:	0800c0f9 	.word	0x0800c0f9
 800c06c:	0800c0f9 	.word	0x0800c0f9
 800c070:	0800c0f9 	.word	0x0800c0f9
 800c074:	0800c0f9 	.word	0x0800c0f9
 800c078:	0800c0eb 	.word	0x0800c0eb
 800c07c:	2b40      	cmp	r3, #64	@ 0x40
 800c07e:	d037      	beq.n	800c0f0 <UART_SetConfig+0xc44>
 800c080:	e03a      	b.n	800c0f8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c082:	f7fd f819 	bl	80090b8 <HAL_RCC_GetPCLK1Freq>
 800c086:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c088:	e03c      	b.n	800c104 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c08a:	f7fd f82b 	bl	80090e4 <HAL_RCC_GetPCLK2Freq>
 800c08e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c090:	e038      	b.n	800c104 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c092:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c096:	4618      	mov	r0, r3
 800c098:	f7fe fa50 	bl	800a53c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c09c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c09e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c0a0:	e030      	b.n	800c104 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c0a2:	f107 0318 	add.w	r3, r7, #24
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f7fe fb9c 	bl	800a7e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c0ac:	69fb      	ldr	r3, [r7, #28]
 800c0ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c0b0:	e028      	b.n	800c104 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c0b2:	4b09      	ldr	r3, [pc, #36]	@ (800c0d8 <UART_SetConfig+0xc2c>)
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	f003 0320 	and.w	r3, r3, #32
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d012      	beq.n	800c0e4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c0be:	4b06      	ldr	r3, [pc, #24]	@ (800c0d8 <UART_SetConfig+0xc2c>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	08db      	lsrs	r3, r3, #3
 800c0c4:	f003 0303 	and.w	r3, r3, #3
 800c0c8:	4a04      	ldr	r2, [pc, #16]	@ (800c0dc <UART_SetConfig+0xc30>)
 800c0ca:	fa22 f303 	lsr.w	r3, r2, r3
 800c0ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c0d0:	e018      	b.n	800c104 <UART_SetConfig+0xc58>
 800c0d2:	bf00      	nop
 800c0d4:	08014b6c 	.word	0x08014b6c
 800c0d8:	58024400 	.word	0x58024400
 800c0dc:	03d09000 	.word	0x03d09000
 800c0e0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800c0e4:	4b24      	ldr	r3, [pc, #144]	@ (800c178 <UART_SetConfig+0xccc>)
 800c0e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c0e8:	e00c      	b.n	800c104 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c0ea:	4b24      	ldr	r3, [pc, #144]	@ (800c17c <UART_SetConfig+0xcd0>)
 800c0ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c0ee:	e009      	b.n	800c104 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c0f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c0f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c0f6:	e005      	b.n	800c104 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c102:	bf00      	nop
    }

    if (pclk != 0U)
 800c104:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c106:	2b00      	cmp	r3, #0
 800c108:	d021      	beq.n	800c14e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c10a:	697b      	ldr	r3, [r7, #20]
 800c10c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c10e:	4a1c      	ldr	r2, [pc, #112]	@ (800c180 <UART_SetConfig+0xcd4>)
 800c110:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c114:	461a      	mov	r2, r3
 800c116:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c118:	fbb3 f2f2 	udiv	r2, r3, r2
 800c11c:	697b      	ldr	r3, [r7, #20]
 800c11e:	685b      	ldr	r3, [r3, #4]
 800c120:	085b      	lsrs	r3, r3, #1
 800c122:	441a      	add	r2, r3
 800c124:	697b      	ldr	r3, [r7, #20]
 800c126:	685b      	ldr	r3, [r3, #4]
 800c128:	fbb2 f3f3 	udiv	r3, r2, r3
 800c12c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c12e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c130:	2b0f      	cmp	r3, #15
 800c132:	d909      	bls.n	800c148 <UART_SetConfig+0xc9c>
 800c134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c136:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c13a:	d205      	bcs.n	800c148 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c13c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c13e:	b29a      	uxth	r2, r3
 800c140:	697b      	ldr	r3, [r7, #20]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	60da      	str	r2, [r3, #12]
 800c146:	e002      	b.n	800c14e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800c148:	2301      	movs	r3, #1
 800c14a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c14e:	697b      	ldr	r3, [r7, #20]
 800c150:	2201      	movs	r2, #1
 800c152:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c156:	697b      	ldr	r3, [r7, #20]
 800c158:	2201      	movs	r2, #1
 800c15a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c15e:	697b      	ldr	r3, [r7, #20]
 800c160:	2200      	movs	r2, #0
 800c162:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c164:	697b      	ldr	r3, [r7, #20]
 800c166:	2200      	movs	r2, #0
 800c168:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c16a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800c16e:	4618      	mov	r0, r3
 800c170:	3748      	adds	r7, #72	@ 0x48
 800c172:	46bd      	mov	sp, r7
 800c174:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c178:	03d09000 	.word	0x03d09000
 800c17c:	003d0900 	.word	0x003d0900
 800c180:	08014b6c 	.word	0x08014b6c

0800c184 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c184:	b480      	push	{r7}
 800c186:	b083      	sub	sp, #12
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c190:	f003 0308 	and.w	r3, r3, #8
 800c194:	2b00      	cmp	r3, #0
 800c196:	d00a      	beq.n	800c1ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	685b      	ldr	r3, [r3, #4]
 800c19e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	430a      	orrs	r2, r1
 800c1ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1b2:	f003 0301 	and.w	r3, r3, #1
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d00a      	beq.n	800c1d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	685b      	ldr	r3, [r3, #4]
 800c1c0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	430a      	orrs	r2, r1
 800c1ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1d4:	f003 0302 	and.w	r3, r3, #2
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d00a      	beq.n	800c1f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	685b      	ldr	r3, [r3, #4]
 800c1e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	430a      	orrs	r2, r1
 800c1f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1f6:	f003 0304 	and.w	r3, r3, #4
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d00a      	beq.n	800c214 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	685b      	ldr	r3, [r3, #4]
 800c204:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	430a      	orrs	r2, r1
 800c212:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c218:	f003 0310 	and.w	r3, r3, #16
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d00a      	beq.n	800c236 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	689b      	ldr	r3, [r3, #8]
 800c226:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	430a      	orrs	r2, r1
 800c234:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c23a:	f003 0320 	and.w	r3, r3, #32
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d00a      	beq.n	800c258 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	689b      	ldr	r3, [r3, #8]
 800c248:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	430a      	orrs	r2, r1
 800c256:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c25c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c260:	2b00      	cmp	r3, #0
 800c262:	d01a      	beq.n	800c29a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	685b      	ldr	r3, [r3, #4]
 800c26a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	430a      	orrs	r2, r1
 800c278:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c27e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c282:	d10a      	bne.n	800c29a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	685b      	ldr	r3, [r3, #4]
 800c28a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	430a      	orrs	r2, r1
 800c298:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c29e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d00a      	beq.n	800c2bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	685b      	ldr	r3, [r3, #4]
 800c2ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	430a      	orrs	r2, r1
 800c2ba:	605a      	str	r2, [r3, #4]
  }
}
 800c2bc:	bf00      	nop
 800c2be:	370c      	adds	r7, #12
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c6:	4770      	bx	lr

0800c2c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b098      	sub	sp, #96	@ 0x60
 800c2cc:	af02      	add	r7, sp, #8
 800c2ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c2d8:	f7f6 f8da 	bl	8002490 <HAL_GetTick>
 800c2dc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	f003 0308 	and.w	r3, r3, #8
 800c2e8:	2b08      	cmp	r3, #8
 800c2ea:	d12f      	bne.n	800c34c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c2ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c2f0:	9300      	str	r3, [sp, #0]
 800c2f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c2fa:	6878      	ldr	r0, [r7, #4]
 800c2fc:	f000 f88e 	bl	800c41c <UART_WaitOnFlagUntilTimeout>
 800c300:	4603      	mov	r3, r0
 800c302:	2b00      	cmp	r3, #0
 800c304:	d022      	beq.n	800c34c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c30c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c30e:	e853 3f00 	ldrex	r3, [r3]
 800c312:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c316:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c31a:	653b      	str	r3, [r7, #80]	@ 0x50
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	461a      	mov	r2, r3
 800c322:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c324:	647b      	str	r3, [r7, #68]	@ 0x44
 800c326:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c328:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c32a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c32c:	e841 2300 	strex	r3, r2, [r1]
 800c330:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c332:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c334:	2b00      	cmp	r3, #0
 800c336:	d1e6      	bne.n	800c306 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2220      	movs	r2, #32
 800c33c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2200      	movs	r2, #0
 800c344:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c348:	2303      	movs	r3, #3
 800c34a:	e063      	b.n	800c414 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	f003 0304 	and.w	r3, r3, #4
 800c356:	2b04      	cmp	r3, #4
 800c358:	d149      	bne.n	800c3ee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c35a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c35e:	9300      	str	r3, [sp, #0]
 800c360:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c362:	2200      	movs	r2, #0
 800c364:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c368:	6878      	ldr	r0, [r7, #4]
 800c36a:	f000 f857 	bl	800c41c <UART_WaitOnFlagUntilTimeout>
 800c36e:	4603      	mov	r3, r0
 800c370:	2b00      	cmp	r3, #0
 800c372:	d03c      	beq.n	800c3ee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c37a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c37c:	e853 3f00 	ldrex	r3, [r3]
 800c380:	623b      	str	r3, [r7, #32]
   return(result);
 800c382:	6a3b      	ldr	r3, [r7, #32]
 800c384:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c388:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	461a      	mov	r2, r3
 800c390:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c392:	633b      	str	r3, [r7, #48]	@ 0x30
 800c394:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c396:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c398:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c39a:	e841 2300 	strex	r3, r2, [r1]
 800c39e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c3a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d1e6      	bne.n	800c374 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	3308      	adds	r3, #8
 800c3ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3ae:	693b      	ldr	r3, [r7, #16]
 800c3b0:	e853 3f00 	ldrex	r3, [r3]
 800c3b4:	60fb      	str	r3, [r7, #12]
   return(result);
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	f023 0301 	bic.w	r3, r3, #1
 800c3bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	3308      	adds	r3, #8
 800c3c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c3c6:	61fa      	str	r2, [r7, #28]
 800c3c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3ca:	69b9      	ldr	r1, [r7, #24]
 800c3cc:	69fa      	ldr	r2, [r7, #28]
 800c3ce:	e841 2300 	strex	r3, r2, [r1]
 800c3d2:	617b      	str	r3, [r7, #20]
   return(result);
 800c3d4:	697b      	ldr	r3, [r7, #20]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d1e5      	bne.n	800c3a6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2220      	movs	r2, #32
 800c3de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c3ea:	2303      	movs	r3, #3
 800c3ec:	e012      	b.n	800c414 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	2220      	movs	r2, #32
 800c3f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	2220      	movs	r2, #32
 800c3fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2200      	movs	r2, #0
 800c402:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2200      	movs	r2, #0
 800c408:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2200      	movs	r2, #0
 800c40e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c412:	2300      	movs	r3, #0
}
 800c414:	4618      	mov	r0, r3
 800c416:	3758      	adds	r7, #88	@ 0x58
 800c418:	46bd      	mov	sp, r7
 800c41a:	bd80      	pop	{r7, pc}

0800c41c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b084      	sub	sp, #16
 800c420:	af00      	add	r7, sp, #0
 800c422:	60f8      	str	r0, [r7, #12]
 800c424:	60b9      	str	r1, [r7, #8]
 800c426:	603b      	str	r3, [r7, #0]
 800c428:	4613      	mov	r3, r2
 800c42a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c42c:	e04f      	b.n	800c4ce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c42e:	69bb      	ldr	r3, [r7, #24]
 800c430:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c434:	d04b      	beq.n	800c4ce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c436:	f7f6 f82b 	bl	8002490 <HAL_GetTick>
 800c43a:	4602      	mov	r2, r0
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	1ad3      	subs	r3, r2, r3
 800c440:	69ba      	ldr	r2, [r7, #24]
 800c442:	429a      	cmp	r2, r3
 800c444:	d302      	bcc.n	800c44c <UART_WaitOnFlagUntilTimeout+0x30>
 800c446:	69bb      	ldr	r3, [r7, #24]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d101      	bne.n	800c450 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c44c:	2303      	movs	r3, #3
 800c44e:	e04e      	b.n	800c4ee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	f003 0304 	and.w	r3, r3, #4
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d037      	beq.n	800c4ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800c45e:	68bb      	ldr	r3, [r7, #8]
 800c460:	2b80      	cmp	r3, #128	@ 0x80
 800c462:	d034      	beq.n	800c4ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	2b40      	cmp	r3, #64	@ 0x40
 800c468:	d031      	beq.n	800c4ce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	69db      	ldr	r3, [r3, #28]
 800c470:	f003 0308 	and.w	r3, r3, #8
 800c474:	2b08      	cmp	r3, #8
 800c476:	d110      	bne.n	800c49a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	2208      	movs	r2, #8
 800c47e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c480:	68f8      	ldr	r0, [r7, #12]
 800c482:	f000 f839 	bl	800c4f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	2208      	movs	r2, #8
 800c48a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	2200      	movs	r2, #0
 800c492:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c496:	2301      	movs	r3, #1
 800c498:	e029      	b.n	800c4ee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	69db      	ldr	r3, [r3, #28]
 800c4a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c4a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c4a8:	d111      	bne.n	800c4ce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c4b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c4b4:	68f8      	ldr	r0, [r7, #12]
 800c4b6:	f000 f81f 	bl	800c4f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	2220      	movs	r2, #32
 800c4be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c4ca:	2303      	movs	r3, #3
 800c4cc:	e00f      	b.n	800c4ee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	69da      	ldr	r2, [r3, #28]
 800c4d4:	68bb      	ldr	r3, [r7, #8]
 800c4d6:	4013      	ands	r3, r2
 800c4d8:	68ba      	ldr	r2, [r7, #8]
 800c4da:	429a      	cmp	r2, r3
 800c4dc:	bf0c      	ite	eq
 800c4de:	2301      	moveq	r3, #1
 800c4e0:	2300      	movne	r3, #0
 800c4e2:	b2db      	uxtb	r3, r3
 800c4e4:	461a      	mov	r2, r3
 800c4e6:	79fb      	ldrb	r3, [r7, #7]
 800c4e8:	429a      	cmp	r2, r3
 800c4ea:	d0a0      	beq.n	800c42e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c4ec:	2300      	movs	r3, #0
}
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	3710      	adds	r7, #16
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	bd80      	pop	{r7, pc}
	...

0800c4f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c4f8:	b480      	push	{r7}
 800c4fa:	b095      	sub	sp, #84	@ 0x54
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c506:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c508:	e853 3f00 	ldrex	r3, [r3]
 800c50c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c50e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c510:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c514:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	461a      	mov	r2, r3
 800c51c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c51e:	643b      	str	r3, [r7, #64]	@ 0x40
 800c520:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c522:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c524:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c526:	e841 2300 	strex	r3, r2, [r1]
 800c52a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c52c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d1e6      	bne.n	800c500 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	3308      	adds	r3, #8
 800c538:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c53a:	6a3b      	ldr	r3, [r7, #32]
 800c53c:	e853 3f00 	ldrex	r3, [r3]
 800c540:	61fb      	str	r3, [r7, #28]
   return(result);
 800c542:	69fa      	ldr	r2, [r7, #28]
 800c544:	4b1e      	ldr	r3, [pc, #120]	@ (800c5c0 <UART_EndRxTransfer+0xc8>)
 800c546:	4013      	ands	r3, r2
 800c548:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	3308      	adds	r3, #8
 800c550:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c552:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c554:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c556:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c558:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c55a:	e841 2300 	strex	r3, r2, [r1]
 800c55e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c562:	2b00      	cmp	r3, #0
 800c564:	d1e5      	bne.n	800c532 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c56a:	2b01      	cmp	r3, #1
 800c56c:	d118      	bne.n	800c5a0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	e853 3f00 	ldrex	r3, [r3]
 800c57a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c57c:	68bb      	ldr	r3, [r7, #8]
 800c57e:	f023 0310 	bic.w	r3, r3, #16
 800c582:	647b      	str	r3, [r7, #68]	@ 0x44
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	461a      	mov	r2, r3
 800c58a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c58c:	61bb      	str	r3, [r7, #24]
 800c58e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c590:	6979      	ldr	r1, [r7, #20]
 800c592:	69ba      	ldr	r2, [r7, #24]
 800c594:	e841 2300 	strex	r3, r2, [r1]
 800c598:	613b      	str	r3, [r7, #16]
   return(result);
 800c59a:	693b      	ldr	r3, [r7, #16]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d1e6      	bne.n	800c56e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2220      	movs	r2, #32
 800c5a4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	2200      	movs	r2, #0
 800c5b2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c5b4:	bf00      	nop
 800c5b6:	3754      	adds	r7, #84	@ 0x54
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5be:	4770      	bx	lr
 800c5c0:	effffffe 	.word	0xeffffffe

0800c5c4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c5c4:	b480      	push	{r7}
 800c5c6:	b085      	sub	sp, #20
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c5d2:	2b01      	cmp	r3, #1
 800c5d4:	d101      	bne.n	800c5da <HAL_UARTEx_DisableFifoMode+0x16>
 800c5d6:	2302      	movs	r3, #2
 800c5d8:	e027      	b.n	800c62a <HAL_UARTEx_DisableFifoMode+0x66>
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	2201      	movs	r2, #1
 800c5de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	2224      	movs	r2, #36	@ 0x24
 800c5e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	681a      	ldr	r2, [r3, #0]
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	f022 0201 	bic.w	r2, r2, #1
 800c600:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c608:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2200      	movs	r2, #0
 800c60e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	68fa      	ldr	r2, [r7, #12]
 800c616:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2220      	movs	r2, #32
 800c61c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2200      	movs	r2, #0
 800c624:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c628:	2300      	movs	r3, #0
}
 800c62a:	4618      	mov	r0, r3
 800c62c:	3714      	adds	r7, #20
 800c62e:	46bd      	mov	sp, r7
 800c630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c634:	4770      	bx	lr

0800c636 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c636:	b580      	push	{r7, lr}
 800c638:	b084      	sub	sp, #16
 800c63a:	af00      	add	r7, sp, #0
 800c63c:	6078      	str	r0, [r7, #4]
 800c63e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c646:	2b01      	cmp	r3, #1
 800c648:	d101      	bne.n	800c64e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c64a:	2302      	movs	r3, #2
 800c64c:	e02d      	b.n	800c6aa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	2201      	movs	r2, #1
 800c652:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	2224      	movs	r2, #36	@ 0x24
 800c65a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	681a      	ldr	r2, [r3, #0]
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	f022 0201 	bic.w	r2, r2, #1
 800c674:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	689b      	ldr	r3, [r3, #8]
 800c67c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	683a      	ldr	r2, [r7, #0]
 800c686:	430a      	orrs	r2, r1
 800c688:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c68a:	6878      	ldr	r0, [r7, #4]
 800c68c:	f000 f850 	bl	800c730 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	68fa      	ldr	r2, [r7, #12]
 800c696:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2220      	movs	r2, #32
 800c69c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c6a8:	2300      	movs	r3, #0
}
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	3710      	adds	r7, #16
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	bd80      	pop	{r7, pc}

0800c6b2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c6b2:	b580      	push	{r7, lr}
 800c6b4:	b084      	sub	sp, #16
 800c6b6:	af00      	add	r7, sp, #0
 800c6b8:	6078      	str	r0, [r7, #4]
 800c6ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c6c2:	2b01      	cmp	r3, #1
 800c6c4:	d101      	bne.n	800c6ca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c6c6:	2302      	movs	r3, #2
 800c6c8:	e02d      	b.n	800c726 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2201      	movs	r2, #1
 800c6ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	2224      	movs	r2, #36	@ 0x24
 800c6d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	681a      	ldr	r2, [r3, #0]
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	f022 0201 	bic.w	r2, r2, #1
 800c6f0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	689b      	ldr	r3, [r3, #8]
 800c6f8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	683a      	ldr	r2, [r7, #0]
 800c702:	430a      	orrs	r2, r1
 800c704:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c706:	6878      	ldr	r0, [r7, #4]
 800c708:	f000 f812 	bl	800c730 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	68fa      	ldr	r2, [r7, #12]
 800c712:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2220      	movs	r2, #32
 800c718:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2200      	movs	r2, #0
 800c720:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c724:	2300      	movs	r3, #0
}
 800c726:	4618      	mov	r0, r3
 800c728:	3710      	adds	r7, #16
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bd80      	pop	{r7, pc}
	...

0800c730 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c730:	b480      	push	{r7}
 800c732:	b085      	sub	sp, #20
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d108      	bne.n	800c752 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2201      	movs	r2, #1
 800c744:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2201      	movs	r2, #1
 800c74c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c750:	e031      	b.n	800c7b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c752:	2310      	movs	r3, #16
 800c754:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c756:	2310      	movs	r3, #16
 800c758:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	689b      	ldr	r3, [r3, #8]
 800c760:	0e5b      	lsrs	r3, r3, #25
 800c762:	b2db      	uxtb	r3, r3
 800c764:	f003 0307 	and.w	r3, r3, #7
 800c768:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	689b      	ldr	r3, [r3, #8]
 800c770:	0f5b      	lsrs	r3, r3, #29
 800c772:	b2db      	uxtb	r3, r3
 800c774:	f003 0307 	and.w	r3, r3, #7
 800c778:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c77a:	7bbb      	ldrb	r3, [r7, #14]
 800c77c:	7b3a      	ldrb	r2, [r7, #12]
 800c77e:	4911      	ldr	r1, [pc, #68]	@ (800c7c4 <UARTEx_SetNbDataToProcess+0x94>)
 800c780:	5c8a      	ldrb	r2, [r1, r2]
 800c782:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c786:	7b3a      	ldrb	r2, [r7, #12]
 800c788:	490f      	ldr	r1, [pc, #60]	@ (800c7c8 <UARTEx_SetNbDataToProcess+0x98>)
 800c78a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c78c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c790:	b29a      	uxth	r2, r3
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c798:	7bfb      	ldrb	r3, [r7, #15]
 800c79a:	7b7a      	ldrb	r2, [r7, #13]
 800c79c:	4909      	ldr	r1, [pc, #36]	@ (800c7c4 <UARTEx_SetNbDataToProcess+0x94>)
 800c79e:	5c8a      	ldrb	r2, [r1, r2]
 800c7a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c7a4:	7b7a      	ldrb	r2, [r7, #13]
 800c7a6:	4908      	ldr	r1, [pc, #32]	@ (800c7c8 <UARTEx_SetNbDataToProcess+0x98>)
 800c7a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c7aa:	fb93 f3f2 	sdiv	r3, r3, r2
 800c7ae:	b29a      	uxth	r2, r3
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c7b6:	bf00      	nop
 800c7b8:	3714      	adds	r7, #20
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c0:	4770      	bx	lr
 800c7c2:	bf00      	nop
 800c7c4:	08014b84 	.word	0x08014b84
 800c7c8:	08014b8c 	.word	0x08014b8c

0800c7cc <__NVIC_SetPriority>:
{
 800c7cc:	b480      	push	{r7}
 800c7ce:	b083      	sub	sp, #12
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	4603      	mov	r3, r0
 800c7d4:	6039      	str	r1, [r7, #0]
 800c7d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800c7d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	db0a      	blt.n	800c7f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c7e0:	683b      	ldr	r3, [r7, #0]
 800c7e2:	b2da      	uxtb	r2, r3
 800c7e4:	490c      	ldr	r1, [pc, #48]	@ (800c818 <__NVIC_SetPriority+0x4c>)
 800c7e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c7ea:	0112      	lsls	r2, r2, #4
 800c7ec:	b2d2      	uxtb	r2, r2
 800c7ee:	440b      	add	r3, r1
 800c7f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800c7f4:	e00a      	b.n	800c80c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	b2da      	uxtb	r2, r3
 800c7fa:	4908      	ldr	r1, [pc, #32]	@ (800c81c <__NVIC_SetPriority+0x50>)
 800c7fc:	88fb      	ldrh	r3, [r7, #6]
 800c7fe:	f003 030f 	and.w	r3, r3, #15
 800c802:	3b04      	subs	r3, #4
 800c804:	0112      	lsls	r2, r2, #4
 800c806:	b2d2      	uxtb	r2, r2
 800c808:	440b      	add	r3, r1
 800c80a:	761a      	strb	r2, [r3, #24]
}
 800c80c:	bf00      	nop
 800c80e:	370c      	adds	r7, #12
 800c810:	46bd      	mov	sp, r7
 800c812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c816:	4770      	bx	lr
 800c818:	e000e100 	.word	0xe000e100
 800c81c:	e000ed00 	.word	0xe000ed00

0800c820 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c820:	b580      	push	{r7, lr}
 800c822:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c824:	4b05      	ldr	r3, [pc, #20]	@ (800c83c <SysTick_Handler+0x1c>)
 800c826:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c828:	f002 f894 	bl	800e954 <xTaskGetSchedulerState>
 800c82c:	4603      	mov	r3, r0
 800c82e:	2b01      	cmp	r3, #1
 800c830:	d001      	beq.n	800c836 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c832:	f002 ff89 	bl	800f748 <xPortSysTickHandler>
  }
}
 800c836:	bf00      	nop
 800c838:	bd80      	pop	{r7, pc}
 800c83a:	bf00      	nop
 800c83c:	e000e010 	.word	0xe000e010

0800c840 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c840:	b580      	push	{r7, lr}
 800c842:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c844:	2100      	movs	r1, #0
 800c846:	f06f 0004 	mvn.w	r0, #4
 800c84a:	f7ff ffbf 	bl	800c7cc <__NVIC_SetPriority>
#endif
}
 800c84e:	bf00      	nop
 800c850:	bd80      	pop	{r7, pc}
	...

0800c854 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c854:	b480      	push	{r7}
 800c856:	b083      	sub	sp, #12
 800c858:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c85a:	f3ef 8305 	mrs	r3, IPSR
 800c85e:	603b      	str	r3, [r7, #0]
  return(result);
 800c860:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c862:	2b00      	cmp	r3, #0
 800c864:	d003      	beq.n	800c86e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c866:	f06f 0305 	mvn.w	r3, #5
 800c86a:	607b      	str	r3, [r7, #4]
 800c86c:	e00c      	b.n	800c888 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c86e:	4b0a      	ldr	r3, [pc, #40]	@ (800c898 <osKernelInitialize+0x44>)
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d105      	bne.n	800c882 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c876:	4b08      	ldr	r3, [pc, #32]	@ (800c898 <osKernelInitialize+0x44>)
 800c878:	2201      	movs	r2, #1
 800c87a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c87c:	2300      	movs	r3, #0
 800c87e:	607b      	str	r3, [r7, #4]
 800c880:	e002      	b.n	800c888 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c882:	f04f 33ff 	mov.w	r3, #4294967295
 800c886:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c888:	687b      	ldr	r3, [r7, #4]
}
 800c88a:	4618      	mov	r0, r3
 800c88c:	370c      	adds	r7, #12
 800c88e:	46bd      	mov	sp, r7
 800c890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c894:	4770      	bx	lr
 800c896:	bf00      	nop
 800c898:	2400043c 	.word	0x2400043c

0800c89c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b082      	sub	sp, #8
 800c8a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c8a2:	f3ef 8305 	mrs	r3, IPSR
 800c8a6:	603b      	str	r3, [r7, #0]
  return(result);
 800c8a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d003      	beq.n	800c8b6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800c8ae:	f06f 0305 	mvn.w	r3, #5
 800c8b2:	607b      	str	r3, [r7, #4]
 800c8b4:	e010      	b.n	800c8d8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c8b6:	4b0b      	ldr	r3, [pc, #44]	@ (800c8e4 <osKernelStart+0x48>)
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	2b01      	cmp	r3, #1
 800c8bc:	d109      	bne.n	800c8d2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c8be:	f7ff ffbf 	bl	800c840 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c8c2:	4b08      	ldr	r3, [pc, #32]	@ (800c8e4 <osKernelStart+0x48>)
 800c8c4:	2202      	movs	r2, #2
 800c8c6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c8c8:	f001 fb28 	bl	800df1c <vTaskStartScheduler>
      stat = osOK;
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	607b      	str	r3, [r7, #4]
 800c8d0:	e002      	b.n	800c8d8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c8d2:	f04f 33ff 	mov.w	r3, #4294967295
 800c8d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c8d8:	687b      	ldr	r3, [r7, #4]
}
 800c8da:	4618      	mov	r0, r3
 800c8dc:	3708      	adds	r7, #8
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bd80      	pop	{r7, pc}
 800c8e2:	bf00      	nop
 800c8e4:	2400043c 	.word	0x2400043c

0800c8e8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b08e      	sub	sp, #56	@ 0x38
 800c8ec:	af04      	add	r7, sp, #16
 800c8ee:	60f8      	str	r0, [r7, #12]
 800c8f0:	60b9      	str	r1, [r7, #8]
 800c8f2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c8f8:	f3ef 8305 	mrs	r3, IPSR
 800c8fc:	617b      	str	r3, [r7, #20]
  return(result);
 800c8fe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c900:	2b00      	cmp	r3, #0
 800c902:	d17e      	bne.n	800ca02 <osThreadNew+0x11a>
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d07b      	beq.n	800ca02 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c90a:	2380      	movs	r3, #128	@ 0x80
 800c90c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c90e:	2318      	movs	r3, #24
 800c910:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c912:	2300      	movs	r3, #0
 800c914:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800c916:	f04f 33ff 	mov.w	r3, #4294967295
 800c91a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d045      	beq.n	800c9ae <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d002      	beq.n	800c930 <osThreadNew+0x48>
        name = attr->name;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	699b      	ldr	r3, [r3, #24]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d002      	beq.n	800c93e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	699b      	ldr	r3, [r3, #24]
 800c93c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c93e:	69fb      	ldr	r3, [r7, #28]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d008      	beq.n	800c956 <osThreadNew+0x6e>
 800c944:	69fb      	ldr	r3, [r7, #28]
 800c946:	2b38      	cmp	r3, #56	@ 0x38
 800c948:	d805      	bhi.n	800c956 <osThreadNew+0x6e>
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	685b      	ldr	r3, [r3, #4]
 800c94e:	f003 0301 	and.w	r3, r3, #1
 800c952:	2b00      	cmp	r3, #0
 800c954:	d001      	beq.n	800c95a <osThreadNew+0x72>
        return (NULL);
 800c956:	2300      	movs	r3, #0
 800c958:	e054      	b.n	800ca04 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	695b      	ldr	r3, [r3, #20]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d003      	beq.n	800c96a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	695b      	ldr	r3, [r3, #20]
 800c966:	089b      	lsrs	r3, r3, #2
 800c968:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	689b      	ldr	r3, [r3, #8]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d00e      	beq.n	800c990 <osThreadNew+0xa8>
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	68db      	ldr	r3, [r3, #12]
 800c976:	2ba7      	cmp	r3, #167	@ 0xa7
 800c978:	d90a      	bls.n	800c990 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d006      	beq.n	800c990 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	695b      	ldr	r3, [r3, #20]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d002      	beq.n	800c990 <osThreadNew+0xa8>
        mem = 1;
 800c98a:	2301      	movs	r3, #1
 800c98c:	61bb      	str	r3, [r7, #24]
 800c98e:	e010      	b.n	800c9b2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	689b      	ldr	r3, [r3, #8]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d10c      	bne.n	800c9b2 <osThreadNew+0xca>
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	68db      	ldr	r3, [r3, #12]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d108      	bne.n	800c9b2 <osThreadNew+0xca>
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	691b      	ldr	r3, [r3, #16]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d104      	bne.n	800c9b2 <osThreadNew+0xca>
          mem = 0;
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	61bb      	str	r3, [r7, #24]
 800c9ac:	e001      	b.n	800c9b2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c9b2:	69bb      	ldr	r3, [r7, #24]
 800c9b4:	2b01      	cmp	r3, #1
 800c9b6:	d110      	bne.n	800c9da <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c9bc:	687a      	ldr	r2, [r7, #4]
 800c9be:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c9c0:	9202      	str	r2, [sp, #8]
 800c9c2:	9301      	str	r3, [sp, #4]
 800c9c4:	69fb      	ldr	r3, [r7, #28]
 800c9c6:	9300      	str	r3, [sp, #0]
 800c9c8:	68bb      	ldr	r3, [r7, #8]
 800c9ca:	6a3a      	ldr	r2, [r7, #32]
 800c9cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c9ce:	68f8      	ldr	r0, [r7, #12]
 800c9d0:	f001 f8b0 	bl	800db34 <xTaskCreateStatic>
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	613b      	str	r3, [r7, #16]
 800c9d8:	e013      	b.n	800ca02 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c9da:	69bb      	ldr	r3, [r7, #24]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d110      	bne.n	800ca02 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c9e0:	6a3b      	ldr	r3, [r7, #32]
 800c9e2:	b29a      	uxth	r2, r3
 800c9e4:	f107 0310 	add.w	r3, r7, #16
 800c9e8:	9301      	str	r3, [sp, #4]
 800c9ea:	69fb      	ldr	r3, [r7, #28]
 800c9ec:	9300      	str	r3, [sp, #0]
 800c9ee:	68bb      	ldr	r3, [r7, #8]
 800c9f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c9f2:	68f8      	ldr	r0, [r7, #12]
 800c9f4:	f001 f8fe 	bl	800dbf4 <xTaskCreate>
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	2b01      	cmp	r3, #1
 800c9fc:	d001      	beq.n	800ca02 <osThreadNew+0x11a>
            hTask = NULL;
 800c9fe:	2300      	movs	r3, #0
 800ca00:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ca02:	693b      	ldr	r3, [r7, #16]
}
 800ca04:	4618      	mov	r0, r3
 800ca06:	3728      	adds	r7, #40	@ 0x28
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	bd80      	pop	{r7, pc}

0800ca0c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b084      	sub	sp, #16
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ca14:	f3ef 8305 	mrs	r3, IPSR
 800ca18:	60bb      	str	r3, [r7, #8]
  return(result);
 800ca1a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d003      	beq.n	800ca28 <osDelay+0x1c>
    stat = osErrorISR;
 800ca20:	f06f 0305 	mvn.w	r3, #5
 800ca24:	60fb      	str	r3, [r7, #12]
 800ca26:	e007      	b.n	800ca38 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ca28:	2300      	movs	r3, #0
 800ca2a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d002      	beq.n	800ca38 <osDelay+0x2c>
      vTaskDelay(ticks);
 800ca32:	6878      	ldr	r0, [r7, #4]
 800ca34:	f001 fa3c 	bl	800deb0 <vTaskDelay>
    }
  }

  return (stat);
 800ca38:	68fb      	ldr	r3, [r7, #12]
}
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	3710      	adds	r7, #16
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	bd80      	pop	{r7, pc}
	...

0800ca44 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ca44:	b480      	push	{r7}
 800ca46:	b085      	sub	sp, #20
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	60f8      	str	r0, [r7, #12]
 800ca4c:	60b9      	str	r1, [r7, #8]
 800ca4e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	4a07      	ldr	r2, [pc, #28]	@ (800ca70 <vApplicationGetIdleTaskMemory+0x2c>)
 800ca54:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ca56:	68bb      	ldr	r3, [r7, #8]
 800ca58:	4a06      	ldr	r2, [pc, #24]	@ (800ca74 <vApplicationGetIdleTaskMemory+0x30>)
 800ca5a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	2280      	movs	r2, #128	@ 0x80
 800ca60:	601a      	str	r2, [r3, #0]
}
 800ca62:	bf00      	nop
 800ca64:	3714      	adds	r7, #20
 800ca66:	46bd      	mov	sp, r7
 800ca68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6c:	4770      	bx	lr
 800ca6e:	bf00      	nop
 800ca70:	24000440 	.word	0x24000440
 800ca74:	240004e8 	.word	0x240004e8

0800ca78 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ca78:	b480      	push	{r7}
 800ca7a:	b085      	sub	sp, #20
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	60f8      	str	r0, [r7, #12]
 800ca80:	60b9      	str	r1, [r7, #8]
 800ca82:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	4a07      	ldr	r2, [pc, #28]	@ (800caa4 <vApplicationGetTimerTaskMemory+0x2c>)
 800ca88:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ca8a:	68bb      	ldr	r3, [r7, #8]
 800ca8c:	4a06      	ldr	r2, [pc, #24]	@ (800caa8 <vApplicationGetTimerTaskMemory+0x30>)
 800ca8e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ca96:	601a      	str	r2, [r3, #0]
}
 800ca98:	bf00      	nop
 800ca9a:	3714      	adds	r7, #20
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa2:	4770      	bx	lr
 800caa4:	240006e8 	.word	0x240006e8
 800caa8:	24000790 	.word	0x24000790

0800caac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800caac:	b480      	push	{r7}
 800caae:	b083      	sub	sp, #12
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	f103 0208 	add.w	r2, r3, #8
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	f04f 32ff 	mov.w	r2, #4294967295
 800cac4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	f103 0208 	add.w	r2, r3, #8
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	f103 0208 	add.w	r2, r3, #8
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	2200      	movs	r2, #0
 800cade:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cae0:	bf00      	nop
 800cae2:	370c      	adds	r7, #12
 800cae4:	46bd      	mov	sp, r7
 800cae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caea:	4770      	bx	lr

0800caec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800caec:	b480      	push	{r7}
 800caee:	b083      	sub	sp, #12
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	2200      	movs	r2, #0
 800caf8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cafa:	bf00      	nop
 800cafc:	370c      	adds	r7, #12
 800cafe:	46bd      	mov	sp, r7
 800cb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb04:	4770      	bx	lr

0800cb06 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cb06:	b480      	push	{r7}
 800cb08:	b085      	sub	sp, #20
 800cb0a:	af00      	add	r7, sp, #0
 800cb0c:	6078      	str	r0, [r7, #4]
 800cb0e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	685b      	ldr	r3, [r3, #4]
 800cb14:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	68fa      	ldr	r2, [r7, #12]
 800cb1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	689a      	ldr	r2, [r3, #8]
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	689b      	ldr	r3, [r3, #8]
 800cb28:	683a      	ldr	r2, [r7, #0]
 800cb2a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	683a      	ldr	r2, [r7, #0]
 800cb30:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	687a      	ldr	r2, [r7, #4]
 800cb36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	1c5a      	adds	r2, r3, #1
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	601a      	str	r2, [r3, #0]
}
 800cb42:	bf00      	nop
 800cb44:	3714      	adds	r7, #20
 800cb46:	46bd      	mov	sp, r7
 800cb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4c:	4770      	bx	lr

0800cb4e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cb4e:	b480      	push	{r7}
 800cb50:	b085      	sub	sp, #20
 800cb52:	af00      	add	r7, sp, #0
 800cb54:	6078      	str	r0, [r7, #4]
 800cb56:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cb5e:	68bb      	ldr	r3, [r7, #8]
 800cb60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb64:	d103      	bne.n	800cb6e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	691b      	ldr	r3, [r3, #16]
 800cb6a:	60fb      	str	r3, [r7, #12]
 800cb6c:	e00c      	b.n	800cb88 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	3308      	adds	r3, #8
 800cb72:	60fb      	str	r3, [r7, #12]
 800cb74:	e002      	b.n	800cb7c <vListInsert+0x2e>
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	685b      	ldr	r3, [r3, #4]
 800cb7a:	60fb      	str	r3, [r7, #12]
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	685b      	ldr	r3, [r3, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	68ba      	ldr	r2, [r7, #8]
 800cb84:	429a      	cmp	r2, r3
 800cb86:	d2f6      	bcs.n	800cb76 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	685a      	ldr	r2, [r3, #4]
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	685b      	ldr	r3, [r3, #4]
 800cb94:	683a      	ldr	r2, [r7, #0]
 800cb96:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	68fa      	ldr	r2, [r7, #12]
 800cb9c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	683a      	ldr	r2, [r7, #0]
 800cba2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	687a      	ldr	r2, [r7, #4]
 800cba8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	1c5a      	adds	r2, r3, #1
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	601a      	str	r2, [r3, #0]
}
 800cbb4:	bf00      	nop
 800cbb6:	3714      	adds	r7, #20
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbbe:	4770      	bx	lr

0800cbc0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cbc0:	b480      	push	{r7}
 800cbc2:	b085      	sub	sp, #20
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	691b      	ldr	r3, [r3, #16]
 800cbcc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	685b      	ldr	r3, [r3, #4]
 800cbd2:	687a      	ldr	r2, [r7, #4]
 800cbd4:	6892      	ldr	r2, [r2, #8]
 800cbd6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	689b      	ldr	r3, [r3, #8]
 800cbdc:	687a      	ldr	r2, [r7, #4]
 800cbde:	6852      	ldr	r2, [r2, #4]
 800cbe0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	685b      	ldr	r3, [r3, #4]
 800cbe6:	687a      	ldr	r2, [r7, #4]
 800cbe8:	429a      	cmp	r2, r3
 800cbea:	d103      	bne.n	800cbf4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	689a      	ldr	r2, [r3, #8]
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	1e5a      	subs	r2, r3, #1
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	681b      	ldr	r3, [r3, #0]
}
 800cc08:	4618      	mov	r0, r3
 800cc0a:	3714      	adds	r7, #20
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc12:	4770      	bx	lr

0800cc14 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b084      	sub	sp, #16
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
 800cc1c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d10b      	bne.n	800cc40 <xQueueGenericReset+0x2c>
	__asm volatile
 800cc28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc2c:	f383 8811 	msr	BASEPRI, r3
 800cc30:	f3bf 8f6f 	isb	sy
 800cc34:	f3bf 8f4f 	dsb	sy
 800cc38:	60bb      	str	r3, [r7, #8]
}
 800cc3a:	bf00      	nop
 800cc3c:	bf00      	nop
 800cc3e:	e7fd      	b.n	800cc3c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cc40:	f002 fcf2 	bl	800f628 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	681a      	ldr	r2, [r3, #0]
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc4c:	68f9      	ldr	r1, [r7, #12]
 800cc4e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800cc50:	fb01 f303 	mul.w	r3, r1, r3
 800cc54:	441a      	add	r2, r3
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	681a      	ldr	r2, [r3, #0]
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	681a      	ldr	r2, [r3, #0]
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc70:	3b01      	subs	r3, #1
 800cc72:	68f9      	ldr	r1, [r7, #12]
 800cc74:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800cc76:	fb01 f303 	mul.w	r3, r1, r3
 800cc7a:	441a      	add	r2, r3
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	22ff      	movs	r2, #255	@ 0xff
 800cc84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	22ff      	movs	r2, #255	@ 0xff
 800cc8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d114      	bne.n	800ccc0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	691b      	ldr	r3, [r3, #16]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d01a      	beq.n	800ccd4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	3310      	adds	r3, #16
 800cca2:	4618      	mov	r0, r3
 800cca4:	f001 fc38 	bl	800e518 <xTaskRemoveFromEventList>
 800cca8:	4603      	mov	r3, r0
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d012      	beq.n	800ccd4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ccae:	4b0d      	ldr	r3, [pc, #52]	@ (800cce4 <xQueueGenericReset+0xd0>)
 800ccb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ccb4:	601a      	str	r2, [r3, #0]
 800ccb6:	f3bf 8f4f 	dsb	sy
 800ccba:	f3bf 8f6f 	isb	sy
 800ccbe:	e009      	b.n	800ccd4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	3310      	adds	r3, #16
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	f7ff fef1 	bl	800caac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	3324      	adds	r3, #36	@ 0x24
 800ccce:	4618      	mov	r0, r3
 800ccd0:	f7ff feec 	bl	800caac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ccd4:	f002 fcda 	bl	800f68c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ccd8:	2301      	movs	r3, #1
}
 800ccda:	4618      	mov	r0, r3
 800ccdc:	3710      	adds	r7, #16
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd80      	pop	{r7, pc}
 800cce2:	bf00      	nop
 800cce4:	e000ed04 	.word	0xe000ed04

0800cce8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b08e      	sub	sp, #56	@ 0x38
 800ccec:	af02      	add	r7, sp, #8
 800ccee:	60f8      	str	r0, [r7, #12]
 800ccf0:	60b9      	str	r1, [r7, #8]
 800ccf2:	607a      	str	r2, [r7, #4]
 800ccf4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d10b      	bne.n	800cd14 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800ccfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd00:	f383 8811 	msr	BASEPRI, r3
 800cd04:	f3bf 8f6f 	isb	sy
 800cd08:	f3bf 8f4f 	dsb	sy
 800cd0c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cd0e:	bf00      	nop
 800cd10:	bf00      	nop
 800cd12:	e7fd      	b.n	800cd10 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d10b      	bne.n	800cd32 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800cd1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd1e:	f383 8811 	msr	BASEPRI, r3
 800cd22:	f3bf 8f6f 	isb	sy
 800cd26:	f3bf 8f4f 	dsb	sy
 800cd2a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cd2c:	bf00      	nop
 800cd2e:	bf00      	nop
 800cd30:	e7fd      	b.n	800cd2e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d002      	beq.n	800cd3e <xQueueGenericCreateStatic+0x56>
 800cd38:	68bb      	ldr	r3, [r7, #8]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d001      	beq.n	800cd42 <xQueueGenericCreateStatic+0x5a>
 800cd3e:	2301      	movs	r3, #1
 800cd40:	e000      	b.n	800cd44 <xQueueGenericCreateStatic+0x5c>
 800cd42:	2300      	movs	r3, #0
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d10b      	bne.n	800cd60 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800cd48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd4c:	f383 8811 	msr	BASEPRI, r3
 800cd50:	f3bf 8f6f 	isb	sy
 800cd54:	f3bf 8f4f 	dsb	sy
 800cd58:	623b      	str	r3, [r7, #32]
}
 800cd5a:	bf00      	nop
 800cd5c:	bf00      	nop
 800cd5e:	e7fd      	b.n	800cd5c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d102      	bne.n	800cd6c <xQueueGenericCreateStatic+0x84>
 800cd66:	68bb      	ldr	r3, [r7, #8]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d101      	bne.n	800cd70 <xQueueGenericCreateStatic+0x88>
 800cd6c:	2301      	movs	r3, #1
 800cd6e:	e000      	b.n	800cd72 <xQueueGenericCreateStatic+0x8a>
 800cd70:	2300      	movs	r3, #0
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d10b      	bne.n	800cd8e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800cd76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd7a:	f383 8811 	msr	BASEPRI, r3
 800cd7e:	f3bf 8f6f 	isb	sy
 800cd82:	f3bf 8f4f 	dsb	sy
 800cd86:	61fb      	str	r3, [r7, #28]
}
 800cd88:	bf00      	nop
 800cd8a:	bf00      	nop
 800cd8c:	e7fd      	b.n	800cd8a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cd8e:	2350      	movs	r3, #80	@ 0x50
 800cd90:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cd92:	697b      	ldr	r3, [r7, #20]
 800cd94:	2b50      	cmp	r3, #80	@ 0x50
 800cd96:	d00b      	beq.n	800cdb0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800cd98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd9c:	f383 8811 	msr	BASEPRI, r3
 800cda0:	f3bf 8f6f 	isb	sy
 800cda4:	f3bf 8f4f 	dsb	sy
 800cda8:	61bb      	str	r3, [r7, #24]
}
 800cdaa:	bf00      	nop
 800cdac:	bf00      	nop
 800cdae:	e7fd      	b.n	800cdac <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cdb0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cdb2:	683b      	ldr	r3, [r7, #0]
 800cdb4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800cdb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d00d      	beq.n	800cdd8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cdbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdbe:	2201      	movs	r2, #1
 800cdc0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cdc4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800cdc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdca:	9300      	str	r3, [sp, #0]
 800cdcc:	4613      	mov	r3, r2
 800cdce:	687a      	ldr	r2, [r7, #4]
 800cdd0:	68b9      	ldr	r1, [r7, #8]
 800cdd2:	68f8      	ldr	r0, [r7, #12]
 800cdd4:	f000 f840 	bl	800ce58 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cdd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800cdda:	4618      	mov	r0, r3
 800cddc:	3730      	adds	r7, #48	@ 0x30
 800cdde:	46bd      	mov	sp, r7
 800cde0:	bd80      	pop	{r7, pc}

0800cde2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cde2:	b580      	push	{r7, lr}
 800cde4:	b08a      	sub	sp, #40	@ 0x28
 800cde6:	af02      	add	r7, sp, #8
 800cde8:	60f8      	str	r0, [r7, #12]
 800cdea:	60b9      	str	r1, [r7, #8]
 800cdec:	4613      	mov	r3, r2
 800cdee:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d10b      	bne.n	800ce0e <xQueueGenericCreate+0x2c>
	__asm volatile
 800cdf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdfa:	f383 8811 	msr	BASEPRI, r3
 800cdfe:	f3bf 8f6f 	isb	sy
 800ce02:	f3bf 8f4f 	dsb	sy
 800ce06:	613b      	str	r3, [r7, #16]
}
 800ce08:	bf00      	nop
 800ce0a:	bf00      	nop
 800ce0c:	e7fd      	b.n	800ce0a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	68ba      	ldr	r2, [r7, #8]
 800ce12:	fb02 f303 	mul.w	r3, r2, r3
 800ce16:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ce18:	69fb      	ldr	r3, [r7, #28]
 800ce1a:	3350      	adds	r3, #80	@ 0x50
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	f002 fe09 	bl	800fa34 <pvPortMalloc>
 800ce22:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ce24:	69bb      	ldr	r3, [r7, #24]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d011      	beq.n	800ce4e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ce2a:	69bb      	ldr	r3, [r7, #24]
 800ce2c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ce2e:	697b      	ldr	r3, [r7, #20]
 800ce30:	3350      	adds	r3, #80	@ 0x50
 800ce32:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ce34:	69bb      	ldr	r3, [r7, #24]
 800ce36:	2200      	movs	r2, #0
 800ce38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ce3c:	79fa      	ldrb	r2, [r7, #7]
 800ce3e:	69bb      	ldr	r3, [r7, #24]
 800ce40:	9300      	str	r3, [sp, #0]
 800ce42:	4613      	mov	r3, r2
 800ce44:	697a      	ldr	r2, [r7, #20]
 800ce46:	68b9      	ldr	r1, [r7, #8]
 800ce48:	68f8      	ldr	r0, [r7, #12]
 800ce4a:	f000 f805 	bl	800ce58 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ce4e:	69bb      	ldr	r3, [r7, #24]
	}
 800ce50:	4618      	mov	r0, r3
 800ce52:	3720      	adds	r7, #32
 800ce54:	46bd      	mov	sp, r7
 800ce56:	bd80      	pop	{r7, pc}

0800ce58 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b084      	sub	sp, #16
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	60f8      	str	r0, [r7, #12]
 800ce60:	60b9      	str	r1, [r7, #8]
 800ce62:	607a      	str	r2, [r7, #4]
 800ce64:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ce66:	68bb      	ldr	r3, [r7, #8]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d103      	bne.n	800ce74 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ce6c:	69bb      	ldr	r3, [r7, #24]
 800ce6e:	69ba      	ldr	r2, [r7, #24]
 800ce70:	601a      	str	r2, [r3, #0]
 800ce72:	e002      	b.n	800ce7a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ce74:	69bb      	ldr	r3, [r7, #24]
 800ce76:	687a      	ldr	r2, [r7, #4]
 800ce78:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ce7a:	69bb      	ldr	r3, [r7, #24]
 800ce7c:	68fa      	ldr	r2, [r7, #12]
 800ce7e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ce80:	69bb      	ldr	r3, [r7, #24]
 800ce82:	68ba      	ldr	r2, [r7, #8]
 800ce84:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ce86:	2101      	movs	r1, #1
 800ce88:	69b8      	ldr	r0, [r7, #24]
 800ce8a:	f7ff fec3 	bl	800cc14 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ce8e:	69bb      	ldr	r3, [r7, #24]
 800ce90:	78fa      	ldrb	r2, [r7, #3]
 800ce92:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ce96:	bf00      	nop
 800ce98:	3710      	adds	r7, #16
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	bd80      	pop	{r7, pc}

0800ce9e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800ce9e:	b580      	push	{r7, lr}
 800cea0:	b086      	sub	sp, #24
 800cea2:	af00      	add	r7, sp, #0
 800cea4:	6078      	str	r0, [r7, #4]
 800cea6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d10b      	bne.n	800cec6 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800ceae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ceb2:	f383 8811 	msr	BASEPRI, r3
 800ceb6:	f3bf 8f6f 	isb	sy
 800ceba:	f3bf 8f4f 	dsb	sy
 800cebe:	613b      	str	r3, [r7, #16]
}
 800cec0:	bf00      	nop
 800cec2:	bf00      	nop
 800cec4:	e7fd      	b.n	800cec2 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800cec6:	683a      	ldr	r2, [r7, #0]
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	429a      	cmp	r2, r3
 800cecc:	d90b      	bls.n	800cee6 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800cece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ced2:	f383 8811 	msr	BASEPRI, r3
 800ced6:	f3bf 8f6f 	isb	sy
 800ceda:	f3bf 8f4f 	dsb	sy
 800cede:	60fb      	str	r3, [r7, #12]
}
 800cee0:	bf00      	nop
 800cee2:	bf00      	nop
 800cee4:	e7fd      	b.n	800cee2 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800cee6:	2202      	movs	r2, #2
 800cee8:	2100      	movs	r1, #0
 800ceea:	6878      	ldr	r0, [r7, #4]
 800ceec:	f7ff ff79 	bl	800cde2 <xQueueGenericCreate>
 800cef0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800cef2:	697b      	ldr	r3, [r7, #20]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d002      	beq.n	800cefe <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800cef8:	697b      	ldr	r3, [r7, #20]
 800cefa:	683a      	ldr	r2, [r7, #0]
 800cefc:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800cefe:	697b      	ldr	r3, [r7, #20]
	}
 800cf00:	4618      	mov	r0, r3
 800cf02:	3718      	adds	r7, #24
 800cf04:	46bd      	mov	sp, r7
 800cf06:	bd80      	pop	{r7, pc}

0800cf08 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b08e      	sub	sp, #56	@ 0x38
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	60f8      	str	r0, [r7, #12]
 800cf10:	60b9      	str	r1, [r7, #8]
 800cf12:	607a      	str	r2, [r7, #4]
 800cf14:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cf16:	2300      	movs	r3, #0
 800cf18:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800cf1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d10b      	bne.n	800cf3c <xQueueGenericSend+0x34>
	__asm volatile
 800cf24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf28:	f383 8811 	msr	BASEPRI, r3
 800cf2c:	f3bf 8f6f 	isb	sy
 800cf30:	f3bf 8f4f 	dsb	sy
 800cf34:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cf36:	bf00      	nop
 800cf38:	bf00      	nop
 800cf3a:	e7fd      	b.n	800cf38 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cf3c:	68bb      	ldr	r3, [r7, #8]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d103      	bne.n	800cf4a <xQueueGenericSend+0x42>
 800cf42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d101      	bne.n	800cf4e <xQueueGenericSend+0x46>
 800cf4a:	2301      	movs	r3, #1
 800cf4c:	e000      	b.n	800cf50 <xQueueGenericSend+0x48>
 800cf4e:	2300      	movs	r3, #0
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d10b      	bne.n	800cf6c <xQueueGenericSend+0x64>
	__asm volatile
 800cf54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf58:	f383 8811 	msr	BASEPRI, r3
 800cf5c:	f3bf 8f6f 	isb	sy
 800cf60:	f3bf 8f4f 	dsb	sy
 800cf64:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cf66:	bf00      	nop
 800cf68:	bf00      	nop
 800cf6a:	e7fd      	b.n	800cf68 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cf6c:	683b      	ldr	r3, [r7, #0]
 800cf6e:	2b02      	cmp	r3, #2
 800cf70:	d103      	bne.n	800cf7a <xQueueGenericSend+0x72>
 800cf72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf76:	2b01      	cmp	r3, #1
 800cf78:	d101      	bne.n	800cf7e <xQueueGenericSend+0x76>
 800cf7a:	2301      	movs	r3, #1
 800cf7c:	e000      	b.n	800cf80 <xQueueGenericSend+0x78>
 800cf7e:	2300      	movs	r3, #0
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d10b      	bne.n	800cf9c <xQueueGenericSend+0x94>
	__asm volatile
 800cf84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf88:	f383 8811 	msr	BASEPRI, r3
 800cf8c:	f3bf 8f6f 	isb	sy
 800cf90:	f3bf 8f4f 	dsb	sy
 800cf94:	623b      	str	r3, [r7, #32]
}
 800cf96:	bf00      	nop
 800cf98:	bf00      	nop
 800cf9a:	e7fd      	b.n	800cf98 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cf9c:	f001 fcda 	bl	800e954 <xTaskGetSchedulerState>
 800cfa0:	4603      	mov	r3, r0
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d102      	bne.n	800cfac <xQueueGenericSend+0xa4>
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d101      	bne.n	800cfb0 <xQueueGenericSend+0xa8>
 800cfac:	2301      	movs	r3, #1
 800cfae:	e000      	b.n	800cfb2 <xQueueGenericSend+0xaa>
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d10b      	bne.n	800cfce <xQueueGenericSend+0xc6>
	__asm volatile
 800cfb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfba:	f383 8811 	msr	BASEPRI, r3
 800cfbe:	f3bf 8f6f 	isb	sy
 800cfc2:	f3bf 8f4f 	dsb	sy
 800cfc6:	61fb      	str	r3, [r7, #28]
}
 800cfc8:	bf00      	nop
 800cfca:	bf00      	nop
 800cfcc:	e7fd      	b.n	800cfca <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cfce:	f002 fb2b 	bl	800f628 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cfd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cfd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfda:	429a      	cmp	r2, r3
 800cfdc:	d302      	bcc.n	800cfe4 <xQueueGenericSend+0xdc>
 800cfde:	683b      	ldr	r3, [r7, #0]
 800cfe0:	2b02      	cmp	r3, #2
 800cfe2:	d129      	bne.n	800d038 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cfe4:	683a      	ldr	r2, [r7, #0]
 800cfe6:	68b9      	ldr	r1, [r7, #8]
 800cfe8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cfea:	f000 fc0a 	bl	800d802 <prvCopyDataToQueue>
 800cfee:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d010      	beq.n	800d01a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cffa:	3324      	adds	r3, #36	@ 0x24
 800cffc:	4618      	mov	r0, r3
 800cffe:	f001 fa8b 	bl	800e518 <xTaskRemoveFromEventList>
 800d002:	4603      	mov	r3, r0
 800d004:	2b00      	cmp	r3, #0
 800d006:	d013      	beq.n	800d030 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d008:	4b3f      	ldr	r3, [pc, #252]	@ (800d108 <xQueueGenericSend+0x200>)
 800d00a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d00e:	601a      	str	r2, [r3, #0]
 800d010:	f3bf 8f4f 	dsb	sy
 800d014:	f3bf 8f6f 	isb	sy
 800d018:	e00a      	b.n	800d030 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d01a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d007      	beq.n	800d030 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d020:	4b39      	ldr	r3, [pc, #228]	@ (800d108 <xQueueGenericSend+0x200>)
 800d022:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d026:	601a      	str	r2, [r3, #0]
 800d028:	f3bf 8f4f 	dsb	sy
 800d02c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d030:	f002 fb2c 	bl	800f68c <vPortExitCritical>
				return pdPASS;
 800d034:	2301      	movs	r3, #1
 800d036:	e063      	b.n	800d100 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d103      	bne.n	800d046 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d03e:	f002 fb25 	bl	800f68c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d042:	2300      	movs	r3, #0
 800d044:	e05c      	b.n	800d100 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d106      	bne.n	800d05a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d04c:	f107 0314 	add.w	r3, r7, #20
 800d050:	4618      	mov	r0, r3
 800d052:	f001 fac7 	bl	800e5e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d056:	2301      	movs	r3, #1
 800d058:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d05a:	f002 fb17 	bl	800f68c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d05e:	f000 ffcd 	bl	800dffc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d062:	f002 fae1 	bl	800f628 <vPortEnterCritical>
 800d066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d068:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d06c:	b25b      	sxtb	r3, r3
 800d06e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d072:	d103      	bne.n	800d07c <xQueueGenericSend+0x174>
 800d074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d076:	2200      	movs	r2, #0
 800d078:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d07c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d07e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d082:	b25b      	sxtb	r3, r3
 800d084:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d088:	d103      	bne.n	800d092 <xQueueGenericSend+0x18a>
 800d08a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d08c:	2200      	movs	r2, #0
 800d08e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d092:	f002 fafb 	bl	800f68c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d096:	1d3a      	adds	r2, r7, #4
 800d098:	f107 0314 	add.w	r3, r7, #20
 800d09c:	4611      	mov	r1, r2
 800d09e:	4618      	mov	r0, r3
 800d0a0:	f001 fab6 	bl	800e610 <xTaskCheckForTimeOut>
 800d0a4:	4603      	mov	r3, r0
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d124      	bne.n	800d0f4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d0aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d0ac:	f000 fca1 	bl	800d9f2 <prvIsQueueFull>
 800d0b0:	4603      	mov	r3, r0
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d018      	beq.n	800d0e8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d0b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0b8:	3310      	adds	r3, #16
 800d0ba:	687a      	ldr	r2, [r7, #4]
 800d0bc:	4611      	mov	r1, r2
 800d0be:	4618      	mov	r0, r3
 800d0c0:	f001 f9d8 	bl	800e474 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d0c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d0c6:	f000 fc2c 	bl	800d922 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d0ca:	f000 ffdd 	bl	800e088 <xTaskResumeAll>
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	f47f af7c 	bne.w	800cfce <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d0d6:	4b0c      	ldr	r3, [pc, #48]	@ (800d108 <xQueueGenericSend+0x200>)
 800d0d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d0dc:	601a      	str	r2, [r3, #0]
 800d0de:	f3bf 8f4f 	dsb	sy
 800d0e2:	f3bf 8f6f 	isb	sy
 800d0e6:	e772      	b.n	800cfce <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d0e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d0ea:	f000 fc1a 	bl	800d922 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d0ee:	f000 ffcb 	bl	800e088 <xTaskResumeAll>
 800d0f2:	e76c      	b.n	800cfce <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d0f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d0f6:	f000 fc14 	bl	800d922 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d0fa:	f000 ffc5 	bl	800e088 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d0fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d100:	4618      	mov	r0, r3
 800d102:	3738      	adds	r7, #56	@ 0x38
 800d104:	46bd      	mov	sp, r7
 800d106:	bd80      	pop	{r7, pc}
 800d108:	e000ed04 	.word	0xe000ed04

0800d10c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b090      	sub	sp, #64	@ 0x40
 800d110:	af00      	add	r7, sp, #0
 800d112:	60f8      	str	r0, [r7, #12]
 800d114:	60b9      	str	r1, [r7, #8]
 800d116:	607a      	str	r2, [r7, #4]
 800d118:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800d11e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d120:	2b00      	cmp	r3, #0
 800d122:	d10b      	bne.n	800d13c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800d124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d128:	f383 8811 	msr	BASEPRI, r3
 800d12c:	f3bf 8f6f 	isb	sy
 800d130:	f3bf 8f4f 	dsb	sy
 800d134:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d136:	bf00      	nop
 800d138:	bf00      	nop
 800d13a:	e7fd      	b.n	800d138 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d13c:	68bb      	ldr	r3, [r7, #8]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d103      	bne.n	800d14a <xQueueGenericSendFromISR+0x3e>
 800d142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d146:	2b00      	cmp	r3, #0
 800d148:	d101      	bne.n	800d14e <xQueueGenericSendFromISR+0x42>
 800d14a:	2301      	movs	r3, #1
 800d14c:	e000      	b.n	800d150 <xQueueGenericSendFromISR+0x44>
 800d14e:	2300      	movs	r3, #0
 800d150:	2b00      	cmp	r3, #0
 800d152:	d10b      	bne.n	800d16c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800d154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d158:	f383 8811 	msr	BASEPRI, r3
 800d15c:	f3bf 8f6f 	isb	sy
 800d160:	f3bf 8f4f 	dsb	sy
 800d164:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d166:	bf00      	nop
 800d168:	bf00      	nop
 800d16a:	e7fd      	b.n	800d168 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	2b02      	cmp	r3, #2
 800d170:	d103      	bne.n	800d17a <xQueueGenericSendFromISR+0x6e>
 800d172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d174:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d176:	2b01      	cmp	r3, #1
 800d178:	d101      	bne.n	800d17e <xQueueGenericSendFromISR+0x72>
 800d17a:	2301      	movs	r3, #1
 800d17c:	e000      	b.n	800d180 <xQueueGenericSendFromISR+0x74>
 800d17e:	2300      	movs	r3, #0
 800d180:	2b00      	cmp	r3, #0
 800d182:	d10b      	bne.n	800d19c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800d184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d188:	f383 8811 	msr	BASEPRI, r3
 800d18c:	f3bf 8f6f 	isb	sy
 800d190:	f3bf 8f4f 	dsb	sy
 800d194:	623b      	str	r3, [r7, #32]
}
 800d196:	bf00      	nop
 800d198:	bf00      	nop
 800d19a:	e7fd      	b.n	800d198 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d19c:	f002 fc08 	bl	800f9b0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d1a0:	f3ef 8211 	mrs	r2, BASEPRI
 800d1a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1a8:	f383 8811 	msr	BASEPRI, r3
 800d1ac:	f3bf 8f6f 	isb	sy
 800d1b0:	f3bf 8f4f 	dsb	sy
 800d1b4:	61fa      	str	r2, [r7, #28]
 800d1b6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d1b8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d1ba:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d1bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d1c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d1c4:	429a      	cmp	r2, r3
 800d1c6:	d302      	bcc.n	800d1ce <xQueueGenericSendFromISR+0xc2>
 800d1c8:	683b      	ldr	r3, [r7, #0]
 800d1ca:	2b02      	cmp	r3, #2
 800d1cc:	d12f      	bne.n	800d22e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d1ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d1d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d1d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d1dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d1de:	683a      	ldr	r2, [r7, #0]
 800d1e0:	68b9      	ldr	r1, [r7, #8]
 800d1e2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d1e4:	f000 fb0d 	bl	800d802 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d1e8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800d1ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1f0:	d112      	bne.n	800d218 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d1f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d016      	beq.n	800d228 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d1fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1fc:	3324      	adds	r3, #36	@ 0x24
 800d1fe:	4618      	mov	r0, r3
 800d200:	f001 f98a 	bl	800e518 <xTaskRemoveFromEventList>
 800d204:	4603      	mov	r3, r0
 800d206:	2b00      	cmp	r3, #0
 800d208:	d00e      	beq.n	800d228 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d00b      	beq.n	800d228 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2201      	movs	r2, #1
 800d214:	601a      	str	r2, [r3, #0]
 800d216:	e007      	b.n	800d228 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d218:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d21c:	3301      	adds	r3, #1
 800d21e:	b2db      	uxtb	r3, r3
 800d220:	b25a      	sxtb	r2, r3
 800d222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d224:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d228:	2301      	movs	r3, #1
 800d22a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800d22c:	e001      	b.n	800d232 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d22e:	2300      	movs	r3, #0
 800d230:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d232:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d234:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d236:	697b      	ldr	r3, [r7, #20]
 800d238:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d23c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d23e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d240:	4618      	mov	r0, r3
 800d242:	3740      	adds	r7, #64	@ 0x40
 800d244:	46bd      	mov	sp, r7
 800d246:	bd80      	pop	{r7, pc}

0800d248 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b08e      	sub	sp, #56	@ 0x38
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
 800d250:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d10b      	bne.n	800d274 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800d25c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d260:	f383 8811 	msr	BASEPRI, r3
 800d264:	f3bf 8f6f 	isb	sy
 800d268:	f3bf 8f4f 	dsb	sy
 800d26c:	623b      	str	r3, [r7, #32]
}
 800d26e:	bf00      	nop
 800d270:	bf00      	nop
 800d272:	e7fd      	b.n	800d270 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d00b      	beq.n	800d294 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800d27c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d280:	f383 8811 	msr	BASEPRI, r3
 800d284:	f3bf 8f6f 	isb	sy
 800d288:	f3bf 8f4f 	dsb	sy
 800d28c:	61fb      	str	r3, [r7, #28]
}
 800d28e:	bf00      	nop
 800d290:	bf00      	nop
 800d292:	e7fd      	b.n	800d290 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d103      	bne.n	800d2a4 <xQueueGiveFromISR+0x5c>
 800d29c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d29e:	689b      	ldr	r3, [r3, #8]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d101      	bne.n	800d2a8 <xQueueGiveFromISR+0x60>
 800d2a4:	2301      	movs	r3, #1
 800d2a6:	e000      	b.n	800d2aa <xQueueGiveFromISR+0x62>
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d10b      	bne.n	800d2c6 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800d2ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2b2:	f383 8811 	msr	BASEPRI, r3
 800d2b6:	f3bf 8f6f 	isb	sy
 800d2ba:	f3bf 8f4f 	dsb	sy
 800d2be:	61bb      	str	r3, [r7, #24]
}
 800d2c0:	bf00      	nop
 800d2c2:	bf00      	nop
 800d2c4:	e7fd      	b.n	800d2c2 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d2c6:	f002 fb73 	bl	800f9b0 <vPortValidateInterruptPriority>
	__asm volatile
 800d2ca:	f3ef 8211 	mrs	r2, BASEPRI
 800d2ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2d2:	f383 8811 	msr	BASEPRI, r3
 800d2d6:	f3bf 8f6f 	isb	sy
 800d2da:	f3bf 8f4f 	dsb	sy
 800d2de:	617a      	str	r2, [r7, #20]
 800d2e0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d2e2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d2e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d2e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2ea:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d2ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d2f2:	429a      	cmp	r2, r3
 800d2f4:	d22b      	bcs.n	800d34e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d2f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d2fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d302:	1c5a      	adds	r2, r3, #1
 800d304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d306:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d308:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d30c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d310:	d112      	bne.n	800d338 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d316:	2b00      	cmp	r3, #0
 800d318:	d016      	beq.n	800d348 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d31a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d31c:	3324      	adds	r3, #36	@ 0x24
 800d31e:	4618      	mov	r0, r3
 800d320:	f001 f8fa 	bl	800e518 <xTaskRemoveFromEventList>
 800d324:	4603      	mov	r3, r0
 800d326:	2b00      	cmp	r3, #0
 800d328:	d00e      	beq.n	800d348 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d00b      	beq.n	800d348 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	2201      	movs	r2, #1
 800d334:	601a      	str	r2, [r3, #0]
 800d336:	e007      	b.n	800d348 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d338:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d33c:	3301      	adds	r3, #1
 800d33e:	b2db      	uxtb	r3, r3
 800d340:	b25a      	sxtb	r2, r3
 800d342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d344:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d348:	2301      	movs	r3, #1
 800d34a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d34c:	e001      	b.n	800d352 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d34e:	2300      	movs	r3, #0
 800d350:	637b      	str	r3, [r7, #52]	@ 0x34
 800d352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d354:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	f383 8811 	msr	BASEPRI, r3
}
 800d35c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d35e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d360:	4618      	mov	r0, r3
 800d362:	3738      	adds	r7, #56	@ 0x38
 800d364:	46bd      	mov	sp, r7
 800d366:	bd80      	pop	{r7, pc}

0800d368 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b08c      	sub	sp, #48	@ 0x30
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	60f8      	str	r0, [r7, #12]
 800d370:	60b9      	str	r1, [r7, #8]
 800d372:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d374:	2300      	movs	r3, #0
 800d376:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d37c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d10b      	bne.n	800d39a <xQueueReceive+0x32>
	__asm volatile
 800d382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d386:	f383 8811 	msr	BASEPRI, r3
 800d38a:	f3bf 8f6f 	isb	sy
 800d38e:	f3bf 8f4f 	dsb	sy
 800d392:	623b      	str	r3, [r7, #32]
}
 800d394:	bf00      	nop
 800d396:	bf00      	nop
 800d398:	e7fd      	b.n	800d396 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d39a:	68bb      	ldr	r3, [r7, #8]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d103      	bne.n	800d3a8 <xQueueReceive+0x40>
 800d3a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d101      	bne.n	800d3ac <xQueueReceive+0x44>
 800d3a8:	2301      	movs	r3, #1
 800d3aa:	e000      	b.n	800d3ae <xQueueReceive+0x46>
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d10b      	bne.n	800d3ca <xQueueReceive+0x62>
	__asm volatile
 800d3b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3b6:	f383 8811 	msr	BASEPRI, r3
 800d3ba:	f3bf 8f6f 	isb	sy
 800d3be:	f3bf 8f4f 	dsb	sy
 800d3c2:	61fb      	str	r3, [r7, #28]
}
 800d3c4:	bf00      	nop
 800d3c6:	bf00      	nop
 800d3c8:	e7fd      	b.n	800d3c6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d3ca:	f001 fac3 	bl	800e954 <xTaskGetSchedulerState>
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d102      	bne.n	800d3da <xQueueReceive+0x72>
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d101      	bne.n	800d3de <xQueueReceive+0x76>
 800d3da:	2301      	movs	r3, #1
 800d3dc:	e000      	b.n	800d3e0 <xQueueReceive+0x78>
 800d3de:	2300      	movs	r3, #0
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d10b      	bne.n	800d3fc <xQueueReceive+0x94>
	__asm volatile
 800d3e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3e8:	f383 8811 	msr	BASEPRI, r3
 800d3ec:	f3bf 8f6f 	isb	sy
 800d3f0:	f3bf 8f4f 	dsb	sy
 800d3f4:	61bb      	str	r3, [r7, #24]
}
 800d3f6:	bf00      	nop
 800d3f8:	bf00      	nop
 800d3fa:	e7fd      	b.n	800d3f8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d3fc:	f002 f914 	bl	800f628 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d404:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d01f      	beq.n	800d44c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d40c:	68b9      	ldr	r1, [r7, #8]
 800d40e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d410:	f000 fa61 	bl	800d8d6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d416:	1e5a      	subs	r2, r3, #1
 800d418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d41a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d41c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d41e:	691b      	ldr	r3, [r3, #16]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d00f      	beq.n	800d444 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d426:	3310      	adds	r3, #16
 800d428:	4618      	mov	r0, r3
 800d42a:	f001 f875 	bl	800e518 <xTaskRemoveFromEventList>
 800d42e:	4603      	mov	r3, r0
 800d430:	2b00      	cmp	r3, #0
 800d432:	d007      	beq.n	800d444 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d434:	4b3c      	ldr	r3, [pc, #240]	@ (800d528 <xQueueReceive+0x1c0>)
 800d436:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d43a:	601a      	str	r2, [r3, #0]
 800d43c:	f3bf 8f4f 	dsb	sy
 800d440:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d444:	f002 f922 	bl	800f68c <vPortExitCritical>
				return pdPASS;
 800d448:	2301      	movs	r3, #1
 800d44a:	e069      	b.n	800d520 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d103      	bne.n	800d45a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d452:	f002 f91b 	bl	800f68c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d456:	2300      	movs	r3, #0
 800d458:	e062      	b.n	800d520 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d45a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d106      	bne.n	800d46e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d460:	f107 0310 	add.w	r3, r7, #16
 800d464:	4618      	mov	r0, r3
 800d466:	f001 f8bd 	bl	800e5e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d46a:	2301      	movs	r3, #1
 800d46c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d46e:	f002 f90d 	bl	800f68c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d472:	f000 fdc3 	bl	800dffc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d476:	f002 f8d7 	bl	800f628 <vPortEnterCritical>
 800d47a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d47c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d480:	b25b      	sxtb	r3, r3
 800d482:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d486:	d103      	bne.n	800d490 <xQueueReceive+0x128>
 800d488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d48a:	2200      	movs	r2, #0
 800d48c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d492:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d496:	b25b      	sxtb	r3, r3
 800d498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d49c:	d103      	bne.n	800d4a6 <xQueueReceive+0x13e>
 800d49e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d4a6:	f002 f8f1 	bl	800f68c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d4aa:	1d3a      	adds	r2, r7, #4
 800d4ac:	f107 0310 	add.w	r3, r7, #16
 800d4b0:	4611      	mov	r1, r2
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	f001 f8ac 	bl	800e610 <xTaskCheckForTimeOut>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d123      	bne.n	800d506 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d4be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d4c0:	f000 fa81 	bl	800d9c6 <prvIsQueueEmpty>
 800d4c4:	4603      	mov	r3, r0
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d017      	beq.n	800d4fa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d4ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4cc:	3324      	adds	r3, #36	@ 0x24
 800d4ce:	687a      	ldr	r2, [r7, #4]
 800d4d0:	4611      	mov	r1, r2
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	f000 ffce 	bl	800e474 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d4d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d4da:	f000 fa22 	bl	800d922 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d4de:	f000 fdd3 	bl	800e088 <xTaskResumeAll>
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d189      	bne.n	800d3fc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d4e8:	4b0f      	ldr	r3, [pc, #60]	@ (800d528 <xQueueReceive+0x1c0>)
 800d4ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d4ee:	601a      	str	r2, [r3, #0]
 800d4f0:	f3bf 8f4f 	dsb	sy
 800d4f4:	f3bf 8f6f 	isb	sy
 800d4f8:	e780      	b.n	800d3fc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d4fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d4fc:	f000 fa11 	bl	800d922 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d500:	f000 fdc2 	bl	800e088 <xTaskResumeAll>
 800d504:	e77a      	b.n	800d3fc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d506:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d508:	f000 fa0b 	bl	800d922 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d50c:	f000 fdbc 	bl	800e088 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d510:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d512:	f000 fa58 	bl	800d9c6 <prvIsQueueEmpty>
 800d516:	4603      	mov	r3, r0
 800d518:	2b00      	cmp	r3, #0
 800d51a:	f43f af6f 	beq.w	800d3fc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d51e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d520:	4618      	mov	r0, r3
 800d522:	3730      	adds	r7, #48	@ 0x30
 800d524:	46bd      	mov	sp, r7
 800d526:	bd80      	pop	{r7, pc}
 800d528:	e000ed04 	.word	0xe000ed04

0800d52c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b08e      	sub	sp, #56	@ 0x38
 800d530:	af00      	add	r7, sp, #0
 800d532:	6078      	str	r0, [r7, #4]
 800d534:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d536:	2300      	movs	r3, #0
 800d538:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d53e:	2300      	movs	r3, #0
 800d540:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d544:	2b00      	cmp	r3, #0
 800d546:	d10b      	bne.n	800d560 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800d548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d54c:	f383 8811 	msr	BASEPRI, r3
 800d550:	f3bf 8f6f 	isb	sy
 800d554:	f3bf 8f4f 	dsb	sy
 800d558:	623b      	str	r3, [r7, #32]
}
 800d55a:	bf00      	nop
 800d55c:	bf00      	nop
 800d55e:	e7fd      	b.n	800d55c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d564:	2b00      	cmp	r3, #0
 800d566:	d00b      	beq.n	800d580 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800d568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d56c:	f383 8811 	msr	BASEPRI, r3
 800d570:	f3bf 8f6f 	isb	sy
 800d574:	f3bf 8f4f 	dsb	sy
 800d578:	61fb      	str	r3, [r7, #28]
}
 800d57a:	bf00      	nop
 800d57c:	bf00      	nop
 800d57e:	e7fd      	b.n	800d57c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d580:	f001 f9e8 	bl	800e954 <xTaskGetSchedulerState>
 800d584:	4603      	mov	r3, r0
 800d586:	2b00      	cmp	r3, #0
 800d588:	d102      	bne.n	800d590 <xQueueSemaphoreTake+0x64>
 800d58a:	683b      	ldr	r3, [r7, #0]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d101      	bne.n	800d594 <xQueueSemaphoreTake+0x68>
 800d590:	2301      	movs	r3, #1
 800d592:	e000      	b.n	800d596 <xQueueSemaphoreTake+0x6a>
 800d594:	2300      	movs	r3, #0
 800d596:	2b00      	cmp	r3, #0
 800d598:	d10b      	bne.n	800d5b2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800d59a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d59e:	f383 8811 	msr	BASEPRI, r3
 800d5a2:	f3bf 8f6f 	isb	sy
 800d5a6:	f3bf 8f4f 	dsb	sy
 800d5aa:	61bb      	str	r3, [r7, #24]
}
 800d5ac:	bf00      	nop
 800d5ae:	bf00      	nop
 800d5b0:	e7fd      	b.n	800d5ae <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d5b2:	f002 f839 	bl	800f628 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d5b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5ba:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d5bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d024      	beq.n	800d60c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d5c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5c4:	1e5a      	subs	r2, r3, #1
 800d5c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5c8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d5ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d104      	bne.n	800d5dc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d5d2:	f001 fb39 	bl	800ec48 <pvTaskIncrementMutexHeldCount>
 800d5d6:	4602      	mov	r2, r0
 800d5d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5da:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d5dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5de:	691b      	ldr	r3, [r3, #16]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d00f      	beq.n	800d604 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d5e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5e6:	3310      	adds	r3, #16
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	f000 ff95 	bl	800e518 <xTaskRemoveFromEventList>
 800d5ee:	4603      	mov	r3, r0
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d007      	beq.n	800d604 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d5f4:	4b54      	ldr	r3, [pc, #336]	@ (800d748 <xQueueSemaphoreTake+0x21c>)
 800d5f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d5fa:	601a      	str	r2, [r3, #0]
 800d5fc:	f3bf 8f4f 	dsb	sy
 800d600:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d604:	f002 f842 	bl	800f68c <vPortExitCritical>
				return pdPASS;
 800d608:	2301      	movs	r3, #1
 800d60a:	e098      	b.n	800d73e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d60c:	683b      	ldr	r3, [r7, #0]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d112      	bne.n	800d638 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d614:	2b00      	cmp	r3, #0
 800d616:	d00b      	beq.n	800d630 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800d618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d61c:	f383 8811 	msr	BASEPRI, r3
 800d620:	f3bf 8f6f 	isb	sy
 800d624:	f3bf 8f4f 	dsb	sy
 800d628:	617b      	str	r3, [r7, #20]
}
 800d62a:	bf00      	nop
 800d62c:	bf00      	nop
 800d62e:	e7fd      	b.n	800d62c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d630:	f002 f82c 	bl	800f68c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d634:	2300      	movs	r3, #0
 800d636:	e082      	b.n	800d73e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d638:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d106      	bne.n	800d64c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d63e:	f107 030c 	add.w	r3, r7, #12
 800d642:	4618      	mov	r0, r3
 800d644:	f000 ffce 	bl	800e5e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d648:	2301      	movs	r3, #1
 800d64a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d64c:	f002 f81e 	bl	800f68c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d650:	f000 fcd4 	bl	800dffc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d654:	f001 ffe8 	bl	800f628 <vPortEnterCritical>
 800d658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d65a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d65e:	b25b      	sxtb	r3, r3
 800d660:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d664:	d103      	bne.n	800d66e <xQueueSemaphoreTake+0x142>
 800d666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d668:	2200      	movs	r2, #0
 800d66a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d66e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d670:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d674:	b25b      	sxtb	r3, r3
 800d676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d67a:	d103      	bne.n	800d684 <xQueueSemaphoreTake+0x158>
 800d67c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d67e:	2200      	movs	r2, #0
 800d680:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d684:	f002 f802 	bl	800f68c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d688:	463a      	mov	r2, r7
 800d68a:	f107 030c 	add.w	r3, r7, #12
 800d68e:	4611      	mov	r1, r2
 800d690:	4618      	mov	r0, r3
 800d692:	f000 ffbd 	bl	800e610 <xTaskCheckForTimeOut>
 800d696:	4603      	mov	r3, r0
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d132      	bne.n	800d702 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d69c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d69e:	f000 f992 	bl	800d9c6 <prvIsQueueEmpty>
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d026      	beq.n	800d6f6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d6a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d109      	bne.n	800d6c4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800d6b0:	f001 ffba 	bl	800f628 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d6b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6b6:	689b      	ldr	r3, [r3, #8]
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	f001 f969 	bl	800e990 <xTaskPriorityInherit>
 800d6be:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800d6c0:	f001 ffe4 	bl	800f68c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d6c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6c6:	3324      	adds	r3, #36	@ 0x24
 800d6c8:	683a      	ldr	r2, [r7, #0]
 800d6ca:	4611      	mov	r1, r2
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	f000 fed1 	bl	800e474 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d6d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d6d4:	f000 f925 	bl	800d922 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d6d8:	f000 fcd6 	bl	800e088 <xTaskResumeAll>
 800d6dc:	4603      	mov	r3, r0
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	f47f af67 	bne.w	800d5b2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800d6e4:	4b18      	ldr	r3, [pc, #96]	@ (800d748 <xQueueSemaphoreTake+0x21c>)
 800d6e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d6ea:	601a      	str	r2, [r3, #0]
 800d6ec:	f3bf 8f4f 	dsb	sy
 800d6f0:	f3bf 8f6f 	isb	sy
 800d6f4:	e75d      	b.n	800d5b2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d6f6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d6f8:	f000 f913 	bl	800d922 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d6fc:	f000 fcc4 	bl	800e088 <xTaskResumeAll>
 800d700:	e757      	b.n	800d5b2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d702:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d704:	f000 f90d 	bl	800d922 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d708:	f000 fcbe 	bl	800e088 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d70c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d70e:	f000 f95a 	bl	800d9c6 <prvIsQueueEmpty>
 800d712:	4603      	mov	r3, r0
 800d714:	2b00      	cmp	r3, #0
 800d716:	f43f af4c 	beq.w	800d5b2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d71a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d00d      	beq.n	800d73c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800d720:	f001 ff82 	bl	800f628 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d724:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d726:	f000 f854 	bl	800d7d2 <prvGetDisinheritPriorityAfterTimeout>
 800d72a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d72c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d72e:	689b      	ldr	r3, [r3, #8]
 800d730:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d732:	4618      	mov	r0, r3
 800d734:	f001 fa04 	bl	800eb40 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d738:	f001 ffa8 	bl	800f68c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d73c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d73e:	4618      	mov	r0, r3
 800d740:	3738      	adds	r7, #56	@ 0x38
 800d742:	46bd      	mov	sp, r7
 800d744:	bd80      	pop	{r7, pc}
 800d746:	bf00      	nop
 800d748:	e000ed04 	.word	0xe000ed04

0800d74c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b084      	sub	sp, #16
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d10b      	bne.n	800d772 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 800d75a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d75e:	f383 8811 	msr	BASEPRI, r3
 800d762:	f3bf 8f6f 	isb	sy
 800d766:	f3bf 8f4f 	dsb	sy
 800d76a:	60bb      	str	r3, [r7, #8]
}
 800d76c:	bf00      	nop
 800d76e:	bf00      	nop
 800d770:	e7fd      	b.n	800d76e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800d772:	f001 ff59 	bl	800f628 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d77a:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800d77c:	f001 ff86 	bl	800f68c <vPortExitCritical>

	return uxReturn;
 800d780:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800d782:	4618      	mov	r0, r3
 800d784:	3710      	adds	r7, #16
 800d786:	46bd      	mov	sp, r7
 800d788:	bd80      	pop	{r7, pc}

0800d78a <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d78a:	b580      	push	{r7, lr}
 800d78c:	b084      	sub	sp, #16
 800d78e:	af00      	add	r7, sp, #0
 800d790:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d10b      	bne.n	800d7b4 <vQueueDelete+0x2a>
	__asm volatile
 800d79c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7a0:	f383 8811 	msr	BASEPRI, r3
 800d7a4:	f3bf 8f6f 	isb	sy
 800d7a8:	f3bf 8f4f 	dsb	sy
 800d7ac:	60bb      	str	r3, [r7, #8]
}
 800d7ae:	bf00      	nop
 800d7b0:	bf00      	nop
 800d7b2:	e7fd      	b.n	800d7b0 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d7b4:	68f8      	ldr	r0, [r7, #12]
 800d7b6:	f000 f95f 	bl	800da78 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d102      	bne.n	800d7ca <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800d7c4:	68f8      	ldr	r0, [r7, #12]
 800d7c6:	f002 fa03 	bl	800fbd0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d7ca:	bf00      	nop
 800d7cc:	3710      	adds	r7, #16
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	bd80      	pop	{r7, pc}

0800d7d2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d7d2:	b480      	push	{r7}
 800d7d4:	b085      	sub	sp, #20
 800d7d6:	af00      	add	r7, sp, #0
 800d7d8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d006      	beq.n	800d7f0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800d7ec:	60fb      	str	r3, [r7, #12]
 800d7ee:	e001      	b.n	800d7f4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d7f4:	68fb      	ldr	r3, [r7, #12]
	}
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	3714      	adds	r7, #20
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d800:	4770      	bx	lr

0800d802 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d802:	b580      	push	{r7, lr}
 800d804:	b086      	sub	sp, #24
 800d806:	af00      	add	r7, sp, #0
 800d808:	60f8      	str	r0, [r7, #12]
 800d80a:	60b9      	str	r1, [r7, #8]
 800d80c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d80e:	2300      	movs	r3, #0
 800d810:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d816:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d10d      	bne.n	800d83c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d14d      	bne.n	800d8c4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	689b      	ldr	r3, [r3, #8]
 800d82c:	4618      	mov	r0, r3
 800d82e:	f001 f917 	bl	800ea60 <xTaskPriorityDisinherit>
 800d832:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	2200      	movs	r2, #0
 800d838:	609a      	str	r2, [r3, #8]
 800d83a:	e043      	b.n	800d8c4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d119      	bne.n	800d876 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	6858      	ldr	r0, [r3, #4]
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d84a:	461a      	mov	r2, r3
 800d84c:	68b9      	ldr	r1, [r7, #8]
 800d84e:	f003 fd8c 	bl	801136a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	685a      	ldr	r2, [r3, #4]
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d85a:	441a      	add	r2, r3
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	685a      	ldr	r2, [r3, #4]
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	689b      	ldr	r3, [r3, #8]
 800d868:	429a      	cmp	r2, r3
 800d86a:	d32b      	bcc.n	800d8c4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	681a      	ldr	r2, [r3, #0]
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	605a      	str	r2, [r3, #4]
 800d874:	e026      	b.n	800d8c4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	68d8      	ldr	r0, [r3, #12]
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d87e:	461a      	mov	r2, r3
 800d880:	68b9      	ldr	r1, [r7, #8]
 800d882:	f003 fd72 	bl	801136a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	68da      	ldr	r2, [r3, #12]
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d88e:	425b      	negs	r3, r3
 800d890:	441a      	add	r2, r3
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	68da      	ldr	r2, [r3, #12]
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	429a      	cmp	r2, r3
 800d8a0:	d207      	bcs.n	800d8b2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	689a      	ldr	r2, [r3, #8]
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8aa:	425b      	negs	r3, r3
 800d8ac:	441a      	add	r2, r3
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	2b02      	cmp	r3, #2
 800d8b6:	d105      	bne.n	800d8c4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d8b8:	693b      	ldr	r3, [r7, #16]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d002      	beq.n	800d8c4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d8be:	693b      	ldr	r3, [r7, #16]
 800d8c0:	3b01      	subs	r3, #1
 800d8c2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d8c4:	693b      	ldr	r3, [r7, #16]
 800d8c6:	1c5a      	adds	r2, r3, #1
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800d8cc:	697b      	ldr	r3, [r7, #20]
}
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	3718      	adds	r7, #24
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	bd80      	pop	{r7, pc}

0800d8d6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d8d6:	b580      	push	{r7, lr}
 800d8d8:	b082      	sub	sp, #8
 800d8da:	af00      	add	r7, sp, #0
 800d8dc:	6078      	str	r0, [r7, #4]
 800d8de:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d018      	beq.n	800d91a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	68da      	ldr	r2, [r3, #12]
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8f0:	441a      	add	r2, r3
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	68da      	ldr	r2, [r3, #12]
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	689b      	ldr	r3, [r3, #8]
 800d8fe:	429a      	cmp	r2, r3
 800d900:	d303      	bcc.n	800d90a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	681a      	ldr	r2, [r3, #0]
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	68d9      	ldr	r1, [r3, #12]
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d912:	461a      	mov	r2, r3
 800d914:	6838      	ldr	r0, [r7, #0]
 800d916:	f003 fd28 	bl	801136a <memcpy>
	}
}
 800d91a:	bf00      	nop
 800d91c:	3708      	adds	r7, #8
 800d91e:	46bd      	mov	sp, r7
 800d920:	bd80      	pop	{r7, pc}

0800d922 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d922:	b580      	push	{r7, lr}
 800d924:	b084      	sub	sp, #16
 800d926:	af00      	add	r7, sp, #0
 800d928:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d92a:	f001 fe7d 	bl	800f628 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d934:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d936:	e011      	b.n	800d95c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d012      	beq.n	800d966 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	3324      	adds	r3, #36	@ 0x24
 800d944:	4618      	mov	r0, r3
 800d946:	f000 fde7 	bl	800e518 <xTaskRemoveFromEventList>
 800d94a:	4603      	mov	r3, r0
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d001      	beq.n	800d954 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d950:	f000 fec2 	bl	800e6d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d954:	7bfb      	ldrb	r3, [r7, #15]
 800d956:	3b01      	subs	r3, #1
 800d958:	b2db      	uxtb	r3, r3
 800d95a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d95c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d960:	2b00      	cmp	r3, #0
 800d962:	dce9      	bgt.n	800d938 <prvUnlockQueue+0x16>
 800d964:	e000      	b.n	800d968 <prvUnlockQueue+0x46>
					break;
 800d966:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	22ff      	movs	r2, #255	@ 0xff
 800d96c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800d970:	f001 fe8c 	bl	800f68c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d974:	f001 fe58 	bl	800f628 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d97e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d980:	e011      	b.n	800d9a6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	691b      	ldr	r3, [r3, #16]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d012      	beq.n	800d9b0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	3310      	adds	r3, #16
 800d98e:	4618      	mov	r0, r3
 800d990:	f000 fdc2 	bl	800e518 <xTaskRemoveFromEventList>
 800d994:	4603      	mov	r3, r0
 800d996:	2b00      	cmp	r3, #0
 800d998:	d001      	beq.n	800d99e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d99a:	f000 fe9d 	bl	800e6d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d99e:	7bbb      	ldrb	r3, [r7, #14]
 800d9a0:	3b01      	subs	r3, #1
 800d9a2:	b2db      	uxtb	r3, r3
 800d9a4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d9a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	dce9      	bgt.n	800d982 <prvUnlockQueue+0x60>
 800d9ae:	e000      	b.n	800d9b2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d9b0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	22ff      	movs	r2, #255	@ 0xff
 800d9b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800d9ba:	f001 fe67 	bl	800f68c <vPortExitCritical>
}
 800d9be:	bf00      	nop
 800d9c0:	3710      	adds	r7, #16
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	bd80      	pop	{r7, pc}

0800d9c6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d9c6:	b580      	push	{r7, lr}
 800d9c8:	b084      	sub	sp, #16
 800d9ca:	af00      	add	r7, sp, #0
 800d9cc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d9ce:	f001 fe2b 	bl	800f628 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d102      	bne.n	800d9e0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d9da:	2301      	movs	r3, #1
 800d9dc:	60fb      	str	r3, [r7, #12]
 800d9de:	e001      	b.n	800d9e4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d9e4:	f001 fe52 	bl	800f68c <vPortExitCritical>

	return xReturn;
 800d9e8:	68fb      	ldr	r3, [r7, #12]
}
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	3710      	adds	r7, #16
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	bd80      	pop	{r7, pc}

0800d9f2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d9f2:	b580      	push	{r7, lr}
 800d9f4:	b084      	sub	sp, #16
 800d9f6:	af00      	add	r7, sp, #0
 800d9f8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d9fa:	f001 fe15 	bl	800f628 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800da06:	429a      	cmp	r2, r3
 800da08:	d102      	bne.n	800da10 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800da0a:	2301      	movs	r3, #1
 800da0c:	60fb      	str	r3, [r7, #12]
 800da0e:	e001      	b.n	800da14 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800da10:	2300      	movs	r3, #0
 800da12:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800da14:	f001 fe3a 	bl	800f68c <vPortExitCritical>

	return xReturn;
 800da18:	68fb      	ldr	r3, [r7, #12]
}
 800da1a:	4618      	mov	r0, r3
 800da1c:	3710      	adds	r7, #16
 800da1e:	46bd      	mov	sp, r7
 800da20:	bd80      	pop	{r7, pc}
	...

0800da24 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800da24:	b480      	push	{r7}
 800da26:	b085      	sub	sp, #20
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
 800da2c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800da2e:	2300      	movs	r3, #0
 800da30:	60fb      	str	r3, [r7, #12]
 800da32:	e014      	b.n	800da5e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800da34:	4a0f      	ldr	r2, [pc, #60]	@ (800da74 <vQueueAddToRegistry+0x50>)
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d10b      	bne.n	800da58 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800da40:	490c      	ldr	r1, [pc, #48]	@ (800da74 <vQueueAddToRegistry+0x50>)
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	683a      	ldr	r2, [r7, #0]
 800da46:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800da4a:	4a0a      	ldr	r2, [pc, #40]	@ (800da74 <vQueueAddToRegistry+0x50>)
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	00db      	lsls	r3, r3, #3
 800da50:	4413      	add	r3, r2
 800da52:	687a      	ldr	r2, [r7, #4]
 800da54:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800da56:	e006      	b.n	800da66 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	3301      	adds	r3, #1
 800da5c:	60fb      	str	r3, [r7, #12]
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	2b07      	cmp	r3, #7
 800da62:	d9e7      	bls.n	800da34 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800da64:	bf00      	nop
 800da66:	bf00      	nop
 800da68:	3714      	adds	r7, #20
 800da6a:	46bd      	mov	sp, r7
 800da6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da70:	4770      	bx	lr
 800da72:	bf00      	nop
 800da74:	24000b90 	.word	0x24000b90

0800da78 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800da78:	b480      	push	{r7}
 800da7a:	b085      	sub	sp, #20
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800da80:	2300      	movs	r3, #0
 800da82:	60fb      	str	r3, [r7, #12]
 800da84:	e016      	b.n	800dab4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800da86:	4a10      	ldr	r2, [pc, #64]	@ (800dac8 <vQueueUnregisterQueue+0x50>)
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	00db      	lsls	r3, r3, #3
 800da8c:	4413      	add	r3, r2
 800da8e:	685b      	ldr	r3, [r3, #4]
 800da90:	687a      	ldr	r2, [r7, #4]
 800da92:	429a      	cmp	r2, r3
 800da94:	d10b      	bne.n	800daae <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800da96:	4a0c      	ldr	r2, [pc, #48]	@ (800dac8 <vQueueUnregisterQueue+0x50>)
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	2100      	movs	r1, #0
 800da9c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800daa0:	4a09      	ldr	r2, [pc, #36]	@ (800dac8 <vQueueUnregisterQueue+0x50>)
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	00db      	lsls	r3, r3, #3
 800daa6:	4413      	add	r3, r2
 800daa8:	2200      	movs	r2, #0
 800daaa:	605a      	str	r2, [r3, #4]
				break;
 800daac:	e006      	b.n	800dabc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	3301      	adds	r3, #1
 800dab2:	60fb      	str	r3, [r7, #12]
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	2b07      	cmp	r3, #7
 800dab8:	d9e5      	bls.n	800da86 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800daba:	bf00      	nop
 800dabc:	bf00      	nop
 800dabe:	3714      	adds	r7, #20
 800dac0:	46bd      	mov	sp, r7
 800dac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac6:	4770      	bx	lr
 800dac8:	24000b90 	.word	0x24000b90

0800dacc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dacc:	b580      	push	{r7, lr}
 800dace:	b086      	sub	sp, #24
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	60f8      	str	r0, [r7, #12]
 800dad4:	60b9      	str	r1, [r7, #8]
 800dad6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800dadc:	f001 fda4 	bl	800f628 <vPortEnterCritical>
 800dae0:	697b      	ldr	r3, [r7, #20]
 800dae2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dae6:	b25b      	sxtb	r3, r3
 800dae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daec:	d103      	bne.n	800daf6 <vQueueWaitForMessageRestricted+0x2a>
 800daee:	697b      	ldr	r3, [r7, #20]
 800daf0:	2200      	movs	r2, #0
 800daf2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800daf6:	697b      	ldr	r3, [r7, #20]
 800daf8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dafc:	b25b      	sxtb	r3, r3
 800dafe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db02:	d103      	bne.n	800db0c <vQueueWaitForMessageRestricted+0x40>
 800db04:	697b      	ldr	r3, [r7, #20]
 800db06:	2200      	movs	r2, #0
 800db08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800db0c:	f001 fdbe 	bl	800f68c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800db10:	697b      	ldr	r3, [r7, #20]
 800db12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db14:	2b00      	cmp	r3, #0
 800db16:	d106      	bne.n	800db26 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800db18:	697b      	ldr	r3, [r7, #20]
 800db1a:	3324      	adds	r3, #36	@ 0x24
 800db1c:	687a      	ldr	r2, [r7, #4]
 800db1e:	68b9      	ldr	r1, [r7, #8]
 800db20:	4618      	mov	r0, r3
 800db22:	f000 fccd 	bl	800e4c0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800db26:	6978      	ldr	r0, [r7, #20]
 800db28:	f7ff fefb 	bl	800d922 <prvUnlockQueue>
	}
 800db2c:	bf00      	nop
 800db2e:	3718      	adds	r7, #24
 800db30:	46bd      	mov	sp, r7
 800db32:	bd80      	pop	{r7, pc}

0800db34 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800db34:	b580      	push	{r7, lr}
 800db36:	b08e      	sub	sp, #56	@ 0x38
 800db38:	af04      	add	r7, sp, #16
 800db3a:	60f8      	str	r0, [r7, #12]
 800db3c:	60b9      	str	r1, [r7, #8]
 800db3e:	607a      	str	r2, [r7, #4]
 800db40:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800db42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db44:	2b00      	cmp	r3, #0
 800db46:	d10b      	bne.n	800db60 <xTaskCreateStatic+0x2c>
	__asm volatile
 800db48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db4c:	f383 8811 	msr	BASEPRI, r3
 800db50:	f3bf 8f6f 	isb	sy
 800db54:	f3bf 8f4f 	dsb	sy
 800db58:	623b      	str	r3, [r7, #32]
}
 800db5a:	bf00      	nop
 800db5c:	bf00      	nop
 800db5e:	e7fd      	b.n	800db5c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800db60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db62:	2b00      	cmp	r3, #0
 800db64:	d10b      	bne.n	800db7e <xTaskCreateStatic+0x4a>
	__asm volatile
 800db66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db6a:	f383 8811 	msr	BASEPRI, r3
 800db6e:	f3bf 8f6f 	isb	sy
 800db72:	f3bf 8f4f 	dsb	sy
 800db76:	61fb      	str	r3, [r7, #28]
}
 800db78:	bf00      	nop
 800db7a:	bf00      	nop
 800db7c:	e7fd      	b.n	800db7a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800db7e:	23a8      	movs	r3, #168	@ 0xa8
 800db80:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800db82:	693b      	ldr	r3, [r7, #16]
 800db84:	2ba8      	cmp	r3, #168	@ 0xa8
 800db86:	d00b      	beq.n	800dba0 <xTaskCreateStatic+0x6c>
	__asm volatile
 800db88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db8c:	f383 8811 	msr	BASEPRI, r3
 800db90:	f3bf 8f6f 	isb	sy
 800db94:	f3bf 8f4f 	dsb	sy
 800db98:	61bb      	str	r3, [r7, #24]
}
 800db9a:	bf00      	nop
 800db9c:	bf00      	nop
 800db9e:	e7fd      	b.n	800db9c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800dba0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800dba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d01e      	beq.n	800dbe6 <xTaskCreateStatic+0xb2>
 800dba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d01b      	beq.n	800dbe6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dbae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbb0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800dbb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbb4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dbb6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800dbb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbba:	2202      	movs	r2, #2
 800dbbc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	9303      	str	r3, [sp, #12]
 800dbc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbc6:	9302      	str	r3, [sp, #8]
 800dbc8:	f107 0314 	add.w	r3, r7, #20
 800dbcc:	9301      	str	r3, [sp, #4]
 800dbce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbd0:	9300      	str	r3, [sp, #0]
 800dbd2:	683b      	ldr	r3, [r7, #0]
 800dbd4:	687a      	ldr	r2, [r7, #4]
 800dbd6:	68b9      	ldr	r1, [r7, #8]
 800dbd8:	68f8      	ldr	r0, [r7, #12]
 800dbda:	f000 f851 	bl	800dc80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dbde:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dbe0:	f000 f8f6 	bl	800ddd0 <prvAddNewTaskToReadyList>
 800dbe4:	e001      	b.n	800dbea <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800dbea:	697b      	ldr	r3, [r7, #20]
	}
 800dbec:	4618      	mov	r0, r3
 800dbee:	3728      	adds	r7, #40	@ 0x28
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	bd80      	pop	{r7, pc}

0800dbf4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b08c      	sub	sp, #48	@ 0x30
 800dbf8:	af04      	add	r7, sp, #16
 800dbfa:	60f8      	str	r0, [r7, #12]
 800dbfc:	60b9      	str	r1, [r7, #8]
 800dbfe:	603b      	str	r3, [r7, #0]
 800dc00:	4613      	mov	r3, r2
 800dc02:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800dc04:	88fb      	ldrh	r3, [r7, #6]
 800dc06:	009b      	lsls	r3, r3, #2
 800dc08:	4618      	mov	r0, r3
 800dc0a:	f001 ff13 	bl	800fa34 <pvPortMalloc>
 800dc0e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800dc10:	697b      	ldr	r3, [r7, #20]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d00e      	beq.n	800dc34 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800dc16:	20a8      	movs	r0, #168	@ 0xa8
 800dc18:	f001 ff0c 	bl	800fa34 <pvPortMalloc>
 800dc1c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800dc1e:	69fb      	ldr	r3, [r7, #28]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d003      	beq.n	800dc2c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800dc24:	69fb      	ldr	r3, [r7, #28]
 800dc26:	697a      	ldr	r2, [r7, #20]
 800dc28:	631a      	str	r2, [r3, #48]	@ 0x30
 800dc2a:	e005      	b.n	800dc38 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800dc2c:	6978      	ldr	r0, [r7, #20]
 800dc2e:	f001 ffcf 	bl	800fbd0 <vPortFree>
 800dc32:	e001      	b.n	800dc38 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800dc34:	2300      	movs	r3, #0
 800dc36:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800dc38:	69fb      	ldr	r3, [r7, #28]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d017      	beq.n	800dc6e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dc3e:	69fb      	ldr	r3, [r7, #28]
 800dc40:	2200      	movs	r2, #0
 800dc42:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800dc46:	88fa      	ldrh	r2, [r7, #6]
 800dc48:	2300      	movs	r3, #0
 800dc4a:	9303      	str	r3, [sp, #12]
 800dc4c:	69fb      	ldr	r3, [r7, #28]
 800dc4e:	9302      	str	r3, [sp, #8]
 800dc50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc52:	9301      	str	r3, [sp, #4]
 800dc54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc56:	9300      	str	r3, [sp, #0]
 800dc58:	683b      	ldr	r3, [r7, #0]
 800dc5a:	68b9      	ldr	r1, [r7, #8]
 800dc5c:	68f8      	ldr	r0, [r7, #12]
 800dc5e:	f000 f80f 	bl	800dc80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dc62:	69f8      	ldr	r0, [r7, #28]
 800dc64:	f000 f8b4 	bl	800ddd0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800dc68:	2301      	movs	r3, #1
 800dc6a:	61bb      	str	r3, [r7, #24]
 800dc6c:	e002      	b.n	800dc74 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dc6e:	f04f 33ff 	mov.w	r3, #4294967295
 800dc72:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800dc74:	69bb      	ldr	r3, [r7, #24]
	}
 800dc76:	4618      	mov	r0, r3
 800dc78:	3720      	adds	r7, #32
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	bd80      	pop	{r7, pc}
	...

0800dc80 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b088      	sub	sp, #32
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	60f8      	str	r0, [r7, #12]
 800dc88:	60b9      	str	r1, [r7, #8]
 800dc8a:	607a      	str	r2, [r7, #4]
 800dc8c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800dc8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc90:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	009b      	lsls	r3, r3, #2
 800dc96:	461a      	mov	r2, r3
 800dc98:	21a5      	movs	r1, #165	@ 0xa5
 800dc9a:	f003 fa3d 	bl	8011118 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800dc9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dca0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dca2:	6879      	ldr	r1, [r7, #4]
 800dca4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800dca8:	440b      	add	r3, r1
 800dcaa:	009b      	lsls	r3, r3, #2
 800dcac:	4413      	add	r3, r2
 800dcae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dcb0:	69bb      	ldr	r3, [r7, #24]
 800dcb2:	f023 0307 	bic.w	r3, r3, #7
 800dcb6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800dcb8:	69bb      	ldr	r3, [r7, #24]
 800dcba:	f003 0307 	and.w	r3, r3, #7
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d00b      	beq.n	800dcda <prvInitialiseNewTask+0x5a>
	__asm volatile
 800dcc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcc6:	f383 8811 	msr	BASEPRI, r3
 800dcca:	f3bf 8f6f 	isb	sy
 800dcce:	f3bf 8f4f 	dsb	sy
 800dcd2:	617b      	str	r3, [r7, #20]
}
 800dcd4:	bf00      	nop
 800dcd6:	bf00      	nop
 800dcd8:	e7fd      	b.n	800dcd6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800dcda:	68bb      	ldr	r3, [r7, #8]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d01f      	beq.n	800dd20 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dce0:	2300      	movs	r3, #0
 800dce2:	61fb      	str	r3, [r7, #28]
 800dce4:	e012      	b.n	800dd0c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800dce6:	68ba      	ldr	r2, [r7, #8]
 800dce8:	69fb      	ldr	r3, [r7, #28]
 800dcea:	4413      	add	r3, r2
 800dcec:	7819      	ldrb	r1, [r3, #0]
 800dcee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dcf0:	69fb      	ldr	r3, [r7, #28]
 800dcf2:	4413      	add	r3, r2
 800dcf4:	3334      	adds	r3, #52	@ 0x34
 800dcf6:	460a      	mov	r2, r1
 800dcf8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800dcfa:	68ba      	ldr	r2, [r7, #8]
 800dcfc:	69fb      	ldr	r3, [r7, #28]
 800dcfe:	4413      	add	r3, r2
 800dd00:	781b      	ldrb	r3, [r3, #0]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d006      	beq.n	800dd14 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dd06:	69fb      	ldr	r3, [r7, #28]
 800dd08:	3301      	adds	r3, #1
 800dd0a:	61fb      	str	r3, [r7, #28]
 800dd0c:	69fb      	ldr	r3, [r7, #28]
 800dd0e:	2b0f      	cmp	r3, #15
 800dd10:	d9e9      	bls.n	800dce6 <prvInitialiseNewTask+0x66>
 800dd12:	e000      	b.n	800dd16 <prvInitialiseNewTask+0x96>
			{
				break;
 800dd14:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dd16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd18:	2200      	movs	r2, #0
 800dd1a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800dd1e:	e003      	b.n	800dd28 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dd20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd22:	2200      	movs	r2, #0
 800dd24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dd28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd2a:	2b37      	cmp	r3, #55	@ 0x37
 800dd2c:	d901      	bls.n	800dd32 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dd2e:	2337      	movs	r3, #55	@ 0x37
 800dd30:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800dd32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dd36:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800dd38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dd3c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800dd3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd40:	2200      	movs	r2, #0
 800dd42:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dd44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd46:	3304      	adds	r3, #4
 800dd48:	4618      	mov	r0, r3
 800dd4a:	f7fe fecf 	bl	800caec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dd4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd50:	3318      	adds	r3, #24
 800dd52:	4618      	mov	r0, r3
 800dd54:	f7fe feca 	bl	800caec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800dd58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dd5c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd60:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800dd64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd66:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dd68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dd6c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dd6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd70:	2200      	movs	r2, #0
 800dd72:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dd76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd78:	2200      	movs	r2, #0
 800dd7a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800dd7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd80:	3354      	adds	r3, #84	@ 0x54
 800dd82:	224c      	movs	r2, #76	@ 0x4c
 800dd84:	2100      	movs	r1, #0
 800dd86:	4618      	mov	r0, r3
 800dd88:	f003 f9c6 	bl	8011118 <memset>
 800dd8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd8e:	4a0d      	ldr	r2, [pc, #52]	@ (800ddc4 <prvInitialiseNewTask+0x144>)
 800dd90:	659a      	str	r2, [r3, #88]	@ 0x58
 800dd92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd94:	4a0c      	ldr	r2, [pc, #48]	@ (800ddc8 <prvInitialiseNewTask+0x148>)
 800dd96:	65da      	str	r2, [r3, #92]	@ 0x5c
 800dd98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd9a:	4a0c      	ldr	r2, [pc, #48]	@ (800ddcc <prvInitialiseNewTask+0x14c>)
 800dd9c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dd9e:	683a      	ldr	r2, [r7, #0]
 800dda0:	68f9      	ldr	r1, [r7, #12]
 800dda2:	69b8      	ldr	r0, [r7, #24]
 800dda4:	f001 fb12 	bl	800f3cc <pxPortInitialiseStack>
 800dda8:	4602      	mov	r2, r0
 800ddaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ddae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d002      	beq.n	800ddba <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ddb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ddb8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ddba:	bf00      	nop
 800ddbc:	3720      	adds	r7, #32
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	bd80      	pop	{r7, pc}
 800ddc2:	bf00      	nop
 800ddc4:	24004e3c 	.word	0x24004e3c
 800ddc8:	24004ea4 	.word	0x24004ea4
 800ddcc:	24004f0c 	.word	0x24004f0c

0800ddd0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b082      	sub	sp, #8
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ddd8:	f001 fc26 	bl	800f628 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dddc:	4b2d      	ldr	r3, [pc, #180]	@ (800de94 <prvAddNewTaskToReadyList+0xc4>)
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	3301      	adds	r3, #1
 800dde2:	4a2c      	ldr	r2, [pc, #176]	@ (800de94 <prvAddNewTaskToReadyList+0xc4>)
 800dde4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dde6:	4b2c      	ldr	r3, [pc, #176]	@ (800de98 <prvAddNewTaskToReadyList+0xc8>)
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d109      	bne.n	800de02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ddee:	4a2a      	ldr	r2, [pc, #168]	@ (800de98 <prvAddNewTaskToReadyList+0xc8>)
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ddf4:	4b27      	ldr	r3, [pc, #156]	@ (800de94 <prvAddNewTaskToReadyList+0xc4>)
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	2b01      	cmp	r3, #1
 800ddfa:	d110      	bne.n	800de1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ddfc:	f000 fce6 	bl	800e7cc <prvInitialiseTaskLists>
 800de00:	e00d      	b.n	800de1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800de02:	4b26      	ldr	r3, [pc, #152]	@ (800de9c <prvAddNewTaskToReadyList+0xcc>)
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d109      	bne.n	800de1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800de0a:	4b23      	ldr	r3, [pc, #140]	@ (800de98 <prvAddNewTaskToReadyList+0xc8>)
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de14:	429a      	cmp	r2, r3
 800de16:	d802      	bhi.n	800de1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800de18:	4a1f      	ldr	r2, [pc, #124]	@ (800de98 <prvAddNewTaskToReadyList+0xc8>)
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800de1e:	4b20      	ldr	r3, [pc, #128]	@ (800dea0 <prvAddNewTaskToReadyList+0xd0>)
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	3301      	adds	r3, #1
 800de24:	4a1e      	ldr	r2, [pc, #120]	@ (800dea0 <prvAddNewTaskToReadyList+0xd0>)
 800de26:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800de28:	4b1d      	ldr	r3, [pc, #116]	@ (800dea0 <prvAddNewTaskToReadyList+0xd0>)
 800de2a:	681a      	ldr	r2, [r3, #0]
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de34:	4b1b      	ldr	r3, [pc, #108]	@ (800dea4 <prvAddNewTaskToReadyList+0xd4>)
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	429a      	cmp	r2, r3
 800de3a:	d903      	bls.n	800de44 <prvAddNewTaskToReadyList+0x74>
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de40:	4a18      	ldr	r2, [pc, #96]	@ (800dea4 <prvAddNewTaskToReadyList+0xd4>)
 800de42:	6013      	str	r3, [r2, #0]
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de48:	4613      	mov	r3, r2
 800de4a:	009b      	lsls	r3, r3, #2
 800de4c:	4413      	add	r3, r2
 800de4e:	009b      	lsls	r3, r3, #2
 800de50:	4a15      	ldr	r2, [pc, #84]	@ (800dea8 <prvAddNewTaskToReadyList+0xd8>)
 800de52:	441a      	add	r2, r3
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	3304      	adds	r3, #4
 800de58:	4619      	mov	r1, r3
 800de5a:	4610      	mov	r0, r2
 800de5c:	f7fe fe53 	bl	800cb06 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800de60:	f001 fc14 	bl	800f68c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800de64:	4b0d      	ldr	r3, [pc, #52]	@ (800de9c <prvAddNewTaskToReadyList+0xcc>)
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d00e      	beq.n	800de8a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800de6c:	4b0a      	ldr	r3, [pc, #40]	@ (800de98 <prvAddNewTaskToReadyList+0xc8>)
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de76:	429a      	cmp	r2, r3
 800de78:	d207      	bcs.n	800de8a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800de7a:	4b0c      	ldr	r3, [pc, #48]	@ (800deac <prvAddNewTaskToReadyList+0xdc>)
 800de7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800de80:	601a      	str	r2, [r3, #0]
 800de82:	f3bf 8f4f 	dsb	sy
 800de86:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800de8a:	bf00      	nop
 800de8c:	3708      	adds	r7, #8
 800de8e:	46bd      	mov	sp, r7
 800de90:	bd80      	pop	{r7, pc}
 800de92:	bf00      	nop
 800de94:	240010a4 	.word	0x240010a4
 800de98:	24000bd0 	.word	0x24000bd0
 800de9c:	240010b0 	.word	0x240010b0
 800dea0:	240010c0 	.word	0x240010c0
 800dea4:	240010ac 	.word	0x240010ac
 800dea8:	24000bd4 	.word	0x24000bd4
 800deac:	e000ed04 	.word	0xe000ed04

0800deb0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800deb0:	b580      	push	{r7, lr}
 800deb2:	b084      	sub	sp, #16
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800deb8:	2300      	movs	r3, #0
 800deba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d018      	beq.n	800def4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800dec2:	4b14      	ldr	r3, [pc, #80]	@ (800df14 <vTaskDelay+0x64>)
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d00b      	beq.n	800dee2 <vTaskDelay+0x32>
	__asm volatile
 800deca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dece:	f383 8811 	msr	BASEPRI, r3
 800ded2:	f3bf 8f6f 	isb	sy
 800ded6:	f3bf 8f4f 	dsb	sy
 800deda:	60bb      	str	r3, [r7, #8]
}
 800dedc:	bf00      	nop
 800dede:	bf00      	nop
 800dee0:	e7fd      	b.n	800dede <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800dee2:	f000 f88b 	bl	800dffc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dee6:	2100      	movs	r1, #0
 800dee8:	6878      	ldr	r0, [r7, #4]
 800deea:	f000 fec1 	bl	800ec70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800deee:	f000 f8cb 	bl	800e088 <xTaskResumeAll>
 800def2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d107      	bne.n	800df0a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800defa:	4b07      	ldr	r3, [pc, #28]	@ (800df18 <vTaskDelay+0x68>)
 800defc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df00:	601a      	str	r2, [r3, #0]
 800df02:	f3bf 8f4f 	dsb	sy
 800df06:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800df0a:	bf00      	nop
 800df0c:	3710      	adds	r7, #16
 800df0e:	46bd      	mov	sp, r7
 800df10:	bd80      	pop	{r7, pc}
 800df12:	bf00      	nop
 800df14:	240010cc 	.word	0x240010cc
 800df18:	e000ed04 	.word	0xe000ed04

0800df1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800df1c:	b580      	push	{r7, lr}
 800df1e:	b08a      	sub	sp, #40	@ 0x28
 800df20:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800df22:	2300      	movs	r3, #0
 800df24:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800df26:	2300      	movs	r3, #0
 800df28:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800df2a:	463a      	mov	r2, r7
 800df2c:	1d39      	adds	r1, r7, #4
 800df2e:	f107 0308 	add.w	r3, r7, #8
 800df32:	4618      	mov	r0, r3
 800df34:	f7fe fd86 	bl	800ca44 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800df38:	6839      	ldr	r1, [r7, #0]
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	68ba      	ldr	r2, [r7, #8]
 800df3e:	9202      	str	r2, [sp, #8]
 800df40:	9301      	str	r3, [sp, #4]
 800df42:	2300      	movs	r3, #0
 800df44:	9300      	str	r3, [sp, #0]
 800df46:	2300      	movs	r3, #0
 800df48:	460a      	mov	r2, r1
 800df4a:	4924      	ldr	r1, [pc, #144]	@ (800dfdc <vTaskStartScheduler+0xc0>)
 800df4c:	4824      	ldr	r0, [pc, #144]	@ (800dfe0 <vTaskStartScheduler+0xc4>)
 800df4e:	f7ff fdf1 	bl	800db34 <xTaskCreateStatic>
 800df52:	4603      	mov	r3, r0
 800df54:	4a23      	ldr	r2, [pc, #140]	@ (800dfe4 <vTaskStartScheduler+0xc8>)
 800df56:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800df58:	4b22      	ldr	r3, [pc, #136]	@ (800dfe4 <vTaskStartScheduler+0xc8>)
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d002      	beq.n	800df66 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800df60:	2301      	movs	r3, #1
 800df62:	617b      	str	r3, [r7, #20]
 800df64:	e001      	b.n	800df6a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800df66:	2300      	movs	r3, #0
 800df68:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800df6a:	697b      	ldr	r3, [r7, #20]
 800df6c:	2b01      	cmp	r3, #1
 800df6e:	d102      	bne.n	800df76 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800df70:	f000 fed2 	bl	800ed18 <xTimerCreateTimerTask>
 800df74:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800df76:	697b      	ldr	r3, [r7, #20]
 800df78:	2b01      	cmp	r3, #1
 800df7a:	d11b      	bne.n	800dfb4 <vTaskStartScheduler+0x98>
	__asm volatile
 800df7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df80:	f383 8811 	msr	BASEPRI, r3
 800df84:	f3bf 8f6f 	isb	sy
 800df88:	f3bf 8f4f 	dsb	sy
 800df8c:	613b      	str	r3, [r7, #16]
}
 800df8e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800df90:	4b15      	ldr	r3, [pc, #84]	@ (800dfe8 <vTaskStartScheduler+0xcc>)
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	3354      	adds	r3, #84	@ 0x54
 800df96:	4a15      	ldr	r2, [pc, #84]	@ (800dfec <vTaskStartScheduler+0xd0>)
 800df98:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800df9a:	4b15      	ldr	r3, [pc, #84]	@ (800dff0 <vTaskStartScheduler+0xd4>)
 800df9c:	f04f 32ff 	mov.w	r2, #4294967295
 800dfa0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dfa2:	4b14      	ldr	r3, [pc, #80]	@ (800dff4 <vTaskStartScheduler+0xd8>)
 800dfa4:	2201      	movs	r2, #1
 800dfa6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dfa8:	4b13      	ldr	r3, [pc, #76]	@ (800dff8 <vTaskStartScheduler+0xdc>)
 800dfaa:	2200      	movs	r2, #0
 800dfac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dfae:	f001 fa97 	bl	800f4e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dfb2:	e00f      	b.n	800dfd4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dfb4:	697b      	ldr	r3, [r7, #20]
 800dfb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfba:	d10b      	bne.n	800dfd4 <vTaskStartScheduler+0xb8>
	__asm volatile
 800dfbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfc0:	f383 8811 	msr	BASEPRI, r3
 800dfc4:	f3bf 8f6f 	isb	sy
 800dfc8:	f3bf 8f4f 	dsb	sy
 800dfcc:	60fb      	str	r3, [r7, #12]
}
 800dfce:	bf00      	nop
 800dfd0:	bf00      	nop
 800dfd2:	e7fd      	b.n	800dfd0 <vTaskStartScheduler+0xb4>
}
 800dfd4:	bf00      	nop
 800dfd6:	3718      	adds	r7, #24
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	bd80      	pop	{r7, pc}
 800dfdc:	08014ae8 	.word	0x08014ae8
 800dfe0:	0800e6f1 	.word	0x0800e6f1
 800dfe4:	240010c8 	.word	0x240010c8
 800dfe8:	24000bd0 	.word	0x24000bd0
 800dfec:	24000020 	.word	0x24000020
 800dff0:	240010c4 	.word	0x240010c4
 800dff4:	240010b0 	.word	0x240010b0
 800dff8:	240010a8 	.word	0x240010a8

0800dffc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dffc:	b480      	push	{r7}
 800dffe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e000:	4b04      	ldr	r3, [pc, #16]	@ (800e014 <vTaskSuspendAll+0x18>)
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	3301      	adds	r3, #1
 800e006:	4a03      	ldr	r2, [pc, #12]	@ (800e014 <vTaskSuspendAll+0x18>)
 800e008:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e00a:	bf00      	nop
 800e00c:	46bd      	mov	sp, r7
 800e00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e012:	4770      	bx	lr
 800e014:	240010cc 	.word	0x240010cc

0800e018 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 800e018:	b480      	push	{r7}
 800e01a:	b083      	sub	sp, #12
 800e01c:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800e01e:	2300      	movs	r3, #0
 800e020:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800e022:	4b14      	ldr	r3, [pc, #80]	@ (800e074 <prvGetExpectedIdleTime+0x5c>)
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d001      	beq.n	800e02e <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800e02a:	2301      	movs	r3, #1
 800e02c:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800e02e:	4b12      	ldr	r3, [pc, #72]	@ (800e078 <prvGetExpectedIdleTime+0x60>)
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e034:	2b00      	cmp	r3, #0
 800e036:	d002      	beq.n	800e03e <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 800e038:	2300      	movs	r3, #0
 800e03a:	607b      	str	r3, [r7, #4]
 800e03c:	e012      	b.n	800e064 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800e03e:	4b0f      	ldr	r3, [pc, #60]	@ (800e07c <prvGetExpectedIdleTime+0x64>)
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	2b01      	cmp	r3, #1
 800e044:	d902      	bls.n	800e04c <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800e046:	2300      	movs	r3, #0
 800e048:	607b      	str	r3, [r7, #4]
 800e04a:	e00b      	b.n	800e064 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800e04c:	683b      	ldr	r3, [r7, #0]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d002      	beq.n	800e058 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800e052:	2300      	movs	r3, #0
 800e054:	607b      	str	r3, [r7, #4]
 800e056:	e005      	b.n	800e064 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800e058:	4b09      	ldr	r3, [pc, #36]	@ (800e080 <prvGetExpectedIdleTime+0x68>)
 800e05a:	681a      	ldr	r2, [r3, #0]
 800e05c:	4b09      	ldr	r3, [pc, #36]	@ (800e084 <prvGetExpectedIdleTime+0x6c>)
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	1ad3      	subs	r3, r2, r3
 800e062:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 800e064:	687b      	ldr	r3, [r7, #4]
	}
 800e066:	4618      	mov	r0, r3
 800e068:	370c      	adds	r7, #12
 800e06a:	46bd      	mov	sp, r7
 800e06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e070:	4770      	bx	lr
 800e072:	bf00      	nop
 800e074:	240010ac 	.word	0x240010ac
 800e078:	24000bd0 	.word	0x24000bd0
 800e07c:	24000bd4 	.word	0x24000bd4
 800e080:	240010c4 	.word	0x240010c4
 800e084:	240010a8 	.word	0x240010a8

0800e088 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b084      	sub	sp, #16
 800e08c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e08e:	2300      	movs	r3, #0
 800e090:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e092:	2300      	movs	r3, #0
 800e094:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e096:	4b42      	ldr	r3, [pc, #264]	@ (800e1a0 <xTaskResumeAll+0x118>)
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d10b      	bne.n	800e0b6 <xTaskResumeAll+0x2e>
	__asm volatile
 800e09e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0a2:	f383 8811 	msr	BASEPRI, r3
 800e0a6:	f3bf 8f6f 	isb	sy
 800e0aa:	f3bf 8f4f 	dsb	sy
 800e0ae:	603b      	str	r3, [r7, #0]
}
 800e0b0:	bf00      	nop
 800e0b2:	bf00      	nop
 800e0b4:	e7fd      	b.n	800e0b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e0b6:	f001 fab7 	bl	800f628 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e0ba:	4b39      	ldr	r3, [pc, #228]	@ (800e1a0 <xTaskResumeAll+0x118>)
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	3b01      	subs	r3, #1
 800e0c0:	4a37      	ldr	r2, [pc, #220]	@ (800e1a0 <xTaskResumeAll+0x118>)
 800e0c2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e0c4:	4b36      	ldr	r3, [pc, #216]	@ (800e1a0 <xTaskResumeAll+0x118>)
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d162      	bne.n	800e192 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e0cc:	4b35      	ldr	r3, [pc, #212]	@ (800e1a4 <xTaskResumeAll+0x11c>)
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d05e      	beq.n	800e192 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e0d4:	e02f      	b.n	800e136 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0d6:	4b34      	ldr	r3, [pc, #208]	@ (800e1a8 <xTaskResumeAll+0x120>)
 800e0d8:	68db      	ldr	r3, [r3, #12]
 800e0da:	68db      	ldr	r3, [r3, #12]
 800e0dc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	3318      	adds	r3, #24
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	f7fe fd6c 	bl	800cbc0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	3304      	adds	r3, #4
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	f7fe fd67 	bl	800cbc0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0f6:	4b2d      	ldr	r3, [pc, #180]	@ (800e1ac <xTaskResumeAll+0x124>)
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	429a      	cmp	r2, r3
 800e0fc:	d903      	bls.n	800e106 <xTaskResumeAll+0x7e>
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e102:	4a2a      	ldr	r2, [pc, #168]	@ (800e1ac <xTaskResumeAll+0x124>)
 800e104:	6013      	str	r3, [r2, #0]
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e10a:	4613      	mov	r3, r2
 800e10c:	009b      	lsls	r3, r3, #2
 800e10e:	4413      	add	r3, r2
 800e110:	009b      	lsls	r3, r3, #2
 800e112:	4a27      	ldr	r2, [pc, #156]	@ (800e1b0 <xTaskResumeAll+0x128>)
 800e114:	441a      	add	r2, r3
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	3304      	adds	r3, #4
 800e11a:	4619      	mov	r1, r3
 800e11c:	4610      	mov	r0, r2
 800e11e:	f7fe fcf2 	bl	800cb06 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e126:	4b23      	ldr	r3, [pc, #140]	@ (800e1b4 <xTaskResumeAll+0x12c>)
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e12c:	429a      	cmp	r2, r3
 800e12e:	d302      	bcc.n	800e136 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e130:	4b21      	ldr	r3, [pc, #132]	@ (800e1b8 <xTaskResumeAll+0x130>)
 800e132:	2201      	movs	r2, #1
 800e134:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e136:	4b1c      	ldr	r3, [pc, #112]	@ (800e1a8 <xTaskResumeAll+0x120>)
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d1cb      	bne.n	800e0d6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d001      	beq.n	800e148 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e144:	f000 fbe6 	bl	800e914 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e148:	4b1c      	ldr	r3, [pc, #112]	@ (800e1bc <xTaskResumeAll+0x134>)
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d010      	beq.n	800e176 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e154:	f000 f86e 	bl	800e234 <xTaskIncrementTick>
 800e158:	4603      	mov	r3, r0
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d002      	beq.n	800e164 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e15e:	4b16      	ldr	r3, [pc, #88]	@ (800e1b8 <xTaskResumeAll+0x130>)
 800e160:	2201      	movs	r2, #1
 800e162:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	3b01      	subs	r3, #1
 800e168:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d1f1      	bne.n	800e154 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800e170:	4b12      	ldr	r3, [pc, #72]	@ (800e1bc <xTaskResumeAll+0x134>)
 800e172:	2200      	movs	r2, #0
 800e174:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e176:	4b10      	ldr	r3, [pc, #64]	@ (800e1b8 <xTaskResumeAll+0x130>)
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d009      	beq.n	800e192 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e17e:	2301      	movs	r3, #1
 800e180:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e182:	4b0f      	ldr	r3, [pc, #60]	@ (800e1c0 <xTaskResumeAll+0x138>)
 800e184:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e188:	601a      	str	r2, [r3, #0]
 800e18a:	f3bf 8f4f 	dsb	sy
 800e18e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e192:	f001 fa7b 	bl	800f68c <vPortExitCritical>

	return xAlreadyYielded;
 800e196:	68bb      	ldr	r3, [r7, #8]
}
 800e198:	4618      	mov	r0, r3
 800e19a:	3710      	adds	r7, #16
 800e19c:	46bd      	mov	sp, r7
 800e19e:	bd80      	pop	{r7, pc}
 800e1a0:	240010cc 	.word	0x240010cc
 800e1a4:	240010a4 	.word	0x240010a4
 800e1a8:	24001064 	.word	0x24001064
 800e1ac:	240010ac 	.word	0x240010ac
 800e1b0:	24000bd4 	.word	0x24000bd4
 800e1b4:	24000bd0 	.word	0x24000bd0
 800e1b8:	240010b8 	.word	0x240010b8
 800e1bc:	240010b4 	.word	0x240010b4
 800e1c0:	e000ed04 	.word	0xe000ed04

0800e1c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e1c4:	b480      	push	{r7}
 800e1c6:	b083      	sub	sp, #12
 800e1c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e1ca:	4b05      	ldr	r3, [pc, #20]	@ (800e1e0 <xTaskGetTickCount+0x1c>)
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e1d0:	687b      	ldr	r3, [r7, #4]
}
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	370c      	adds	r7, #12
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1dc:	4770      	bx	lr
 800e1de:	bf00      	nop
 800e1e0:	240010a8 	.word	0x240010a8

0800e1e4 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 800e1e4:	b480      	push	{r7}
 800e1e6:	b085      	sub	sp, #20
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 800e1ec:	4b0f      	ldr	r3, [pc, #60]	@ (800e22c <vTaskStepTick+0x48>)
 800e1ee:	681a      	ldr	r2, [r3, #0]
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	441a      	add	r2, r3
 800e1f4:	4b0e      	ldr	r3, [pc, #56]	@ (800e230 <vTaskStepTick+0x4c>)
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	429a      	cmp	r2, r3
 800e1fa:	d90b      	bls.n	800e214 <vTaskStepTick+0x30>
	__asm volatile
 800e1fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e200:	f383 8811 	msr	BASEPRI, r3
 800e204:	f3bf 8f6f 	isb	sy
 800e208:	f3bf 8f4f 	dsb	sy
 800e20c:	60fb      	str	r3, [r7, #12]
}
 800e20e:	bf00      	nop
 800e210:	bf00      	nop
 800e212:	e7fd      	b.n	800e210 <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 800e214:	4b05      	ldr	r3, [pc, #20]	@ (800e22c <vTaskStepTick+0x48>)
 800e216:	681a      	ldr	r2, [r3, #0]
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	4413      	add	r3, r2
 800e21c:	4a03      	ldr	r2, [pc, #12]	@ (800e22c <vTaskStepTick+0x48>)
 800e21e:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 800e220:	bf00      	nop
 800e222:	3714      	adds	r7, #20
 800e224:	46bd      	mov	sp, r7
 800e226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22a:	4770      	bx	lr
 800e22c:	240010a8 	.word	0x240010a8
 800e230:	240010c4 	.word	0x240010c4

0800e234 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e234:	b580      	push	{r7, lr}
 800e236:	b086      	sub	sp, #24
 800e238:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e23a:	2300      	movs	r3, #0
 800e23c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e23e:	4b4f      	ldr	r3, [pc, #316]	@ (800e37c <xTaskIncrementTick+0x148>)
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	2b00      	cmp	r3, #0
 800e244:	f040 8090 	bne.w	800e368 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e248:	4b4d      	ldr	r3, [pc, #308]	@ (800e380 <xTaskIncrementTick+0x14c>)
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	3301      	adds	r3, #1
 800e24e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e250:	4a4b      	ldr	r2, [pc, #300]	@ (800e380 <xTaskIncrementTick+0x14c>)
 800e252:	693b      	ldr	r3, [r7, #16]
 800e254:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e256:	693b      	ldr	r3, [r7, #16]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d121      	bne.n	800e2a0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e25c:	4b49      	ldr	r3, [pc, #292]	@ (800e384 <xTaskIncrementTick+0x150>)
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d00b      	beq.n	800e27e <xTaskIncrementTick+0x4a>
	__asm volatile
 800e266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e26a:	f383 8811 	msr	BASEPRI, r3
 800e26e:	f3bf 8f6f 	isb	sy
 800e272:	f3bf 8f4f 	dsb	sy
 800e276:	603b      	str	r3, [r7, #0]
}
 800e278:	bf00      	nop
 800e27a:	bf00      	nop
 800e27c:	e7fd      	b.n	800e27a <xTaskIncrementTick+0x46>
 800e27e:	4b41      	ldr	r3, [pc, #260]	@ (800e384 <xTaskIncrementTick+0x150>)
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	60fb      	str	r3, [r7, #12]
 800e284:	4b40      	ldr	r3, [pc, #256]	@ (800e388 <xTaskIncrementTick+0x154>)
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	4a3e      	ldr	r2, [pc, #248]	@ (800e384 <xTaskIncrementTick+0x150>)
 800e28a:	6013      	str	r3, [r2, #0]
 800e28c:	4a3e      	ldr	r2, [pc, #248]	@ (800e388 <xTaskIncrementTick+0x154>)
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	6013      	str	r3, [r2, #0]
 800e292:	4b3e      	ldr	r3, [pc, #248]	@ (800e38c <xTaskIncrementTick+0x158>)
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	3301      	adds	r3, #1
 800e298:	4a3c      	ldr	r2, [pc, #240]	@ (800e38c <xTaskIncrementTick+0x158>)
 800e29a:	6013      	str	r3, [r2, #0]
 800e29c:	f000 fb3a 	bl	800e914 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e2a0:	4b3b      	ldr	r3, [pc, #236]	@ (800e390 <xTaskIncrementTick+0x15c>)
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	693a      	ldr	r2, [r7, #16]
 800e2a6:	429a      	cmp	r2, r3
 800e2a8:	d349      	bcc.n	800e33e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e2aa:	4b36      	ldr	r3, [pc, #216]	@ (800e384 <xTaskIncrementTick+0x150>)
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d104      	bne.n	800e2be <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e2b4:	4b36      	ldr	r3, [pc, #216]	@ (800e390 <xTaskIncrementTick+0x15c>)
 800e2b6:	f04f 32ff 	mov.w	r2, #4294967295
 800e2ba:	601a      	str	r2, [r3, #0]
					break;
 800e2bc:	e03f      	b.n	800e33e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2be:	4b31      	ldr	r3, [pc, #196]	@ (800e384 <xTaskIncrementTick+0x150>)
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	68db      	ldr	r3, [r3, #12]
 800e2c4:	68db      	ldr	r3, [r3, #12]
 800e2c6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e2c8:	68bb      	ldr	r3, [r7, #8]
 800e2ca:	685b      	ldr	r3, [r3, #4]
 800e2cc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e2ce:	693a      	ldr	r2, [r7, #16]
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	429a      	cmp	r2, r3
 800e2d4:	d203      	bcs.n	800e2de <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e2d6:	4a2e      	ldr	r2, [pc, #184]	@ (800e390 <xTaskIncrementTick+0x15c>)
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e2dc:	e02f      	b.n	800e33e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e2de:	68bb      	ldr	r3, [r7, #8]
 800e2e0:	3304      	adds	r3, #4
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	f7fe fc6c 	bl	800cbc0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e2e8:	68bb      	ldr	r3, [r7, #8]
 800e2ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d004      	beq.n	800e2fa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e2f0:	68bb      	ldr	r3, [r7, #8]
 800e2f2:	3318      	adds	r3, #24
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	f7fe fc63 	bl	800cbc0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e2fa:	68bb      	ldr	r3, [r7, #8]
 800e2fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2fe:	4b25      	ldr	r3, [pc, #148]	@ (800e394 <xTaskIncrementTick+0x160>)
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	429a      	cmp	r2, r3
 800e304:	d903      	bls.n	800e30e <xTaskIncrementTick+0xda>
 800e306:	68bb      	ldr	r3, [r7, #8]
 800e308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e30a:	4a22      	ldr	r2, [pc, #136]	@ (800e394 <xTaskIncrementTick+0x160>)
 800e30c:	6013      	str	r3, [r2, #0]
 800e30e:	68bb      	ldr	r3, [r7, #8]
 800e310:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e312:	4613      	mov	r3, r2
 800e314:	009b      	lsls	r3, r3, #2
 800e316:	4413      	add	r3, r2
 800e318:	009b      	lsls	r3, r3, #2
 800e31a:	4a1f      	ldr	r2, [pc, #124]	@ (800e398 <xTaskIncrementTick+0x164>)
 800e31c:	441a      	add	r2, r3
 800e31e:	68bb      	ldr	r3, [r7, #8]
 800e320:	3304      	adds	r3, #4
 800e322:	4619      	mov	r1, r3
 800e324:	4610      	mov	r0, r2
 800e326:	f7fe fbee 	bl	800cb06 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e32a:	68bb      	ldr	r3, [r7, #8]
 800e32c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e32e:	4b1b      	ldr	r3, [pc, #108]	@ (800e39c <xTaskIncrementTick+0x168>)
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e334:	429a      	cmp	r2, r3
 800e336:	d3b8      	bcc.n	800e2aa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e338:	2301      	movs	r3, #1
 800e33a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e33c:	e7b5      	b.n	800e2aa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e33e:	4b17      	ldr	r3, [pc, #92]	@ (800e39c <xTaskIncrementTick+0x168>)
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e344:	4914      	ldr	r1, [pc, #80]	@ (800e398 <xTaskIncrementTick+0x164>)
 800e346:	4613      	mov	r3, r2
 800e348:	009b      	lsls	r3, r3, #2
 800e34a:	4413      	add	r3, r2
 800e34c:	009b      	lsls	r3, r3, #2
 800e34e:	440b      	add	r3, r1
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	2b01      	cmp	r3, #1
 800e354:	d901      	bls.n	800e35a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800e356:	2301      	movs	r3, #1
 800e358:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e35a:	4b11      	ldr	r3, [pc, #68]	@ (800e3a0 <xTaskIncrementTick+0x16c>)
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d007      	beq.n	800e372 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800e362:	2301      	movs	r3, #1
 800e364:	617b      	str	r3, [r7, #20]
 800e366:	e004      	b.n	800e372 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e368:	4b0e      	ldr	r3, [pc, #56]	@ (800e3a4 <xTaskIncrementTick+0x170>)
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	3301      	adds	r3, #1
 800e36e:	4a0d      	ldr	r2, [pc, #52]	@ (800e3a4 <xTaskIncrementTick+0x170>)
 800e370:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e372:	697b      	ldr	r3, [r7, #20]
}
 800e374:	4618      	mov	r0, r3
 800e376:	3718      	adds	r7, #24
 800e378:	46bd      	mov	sp, r7
 800e37a:	bd80      	pop	{r7, pc}
 800e37c:	240010cc 	.word	0x240010cc
 800e380:	240010a8 	.word	0x240010a8
 800e384:	2400105c 	.word	0x2400105c
 800e388:	24001060 	.word	0x24001060
 800e38c:	240010bc 	.word	0x240010bc
 800e390:	240010c4 	.word	0x240010c4
 800e394:	240010ac 	.word	0x240010ac
 800e398:	24000bd4 	.word	0x24000bd4
 800e39c:	24000bd0 	.word	0x24000bd0
 800e3a0:	240010b8 	.word	0x240010b8
 800e3a4:	240010b4 	.word	0x240010b4

0800e3a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e3a8:	b480      	push	{r7}
 800e3aa:	b085      	sub	sp, #20
 800e3ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e3ae:	4b2b      	ldr	r3, [pc, #172]	@ (800e45c <vTaskSwitchContext+0xb4>)
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d003      	beq.n	800e3be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e3b6:	4b2a      	ldr	r3, [pc, #168]	@ (800e460 <vTaskSwitchContext+0xb8>)
 800e3b8:	2201      	movs	r2, #1
 800e3ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e3bc:	e047      	b.n	800e44e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800e3be:	4b28      	ldr	r3, [pc, #160]	@ (800e460 <vTaskSwitchContext+0xb8>)
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3c4:	4b27      	ldr	r3, [pc, #156]	@ (800e464 <vTaskSwitchContext+0xbc>)
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	60fb      	str	r3, [r7, #12]
 800e3ca:	e011      	b.n	800e3f0 <vTaskSwitchContext+0x48>
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d10b      	bne.n	800e3ea <vTaskSwitchContext+0x42>
	__asm volatile
 800e3d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3d6:	f383 8811 	msr	BASEPRI, r3
 800e3da:	f3bf 8f6f 	isb	sy
 800e3de:	f3bf 8f4f 	dsb	sy
 800e3e2:	607b      	str	r3, [r7, #4]
}
 800e3e4:	bf00      	nop
 800e3e6:	bf00      	nop
 800e3e8:	e7fd      	b.n	800e3e6 <vTaskSwitchContext+0x3e>
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	3b01      	subs	r3, #1
 800e3ee:	60fb      	str	r3, [r7, #12]
 800e3f0:	491d      	ldr	r1, [pc, #116]	@ (800e468 <vTaskSwitchContext+0xc0>)
 800e3f2:	68fa      	ldr	r2, [r7, #12]
 800e3f4:	4613      	mov	r3, r2
 800e3f6:	009b      	lsls	r3, r3, #2
 800e3f8:	4413      	add	r3, r2
 800e3fa:	009b      	lsls	r3, r3, #2
 800e3fc:	440b      	add	r3, r1
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d0e3      	beq.n	800e3cc <vTaskSwitchContext+0x24>
 800e404:	68fa      	ldr	r2, [r7, #12]
 800e406:	4613      	mov	r3, r2
 800e408:	009b      	lsls	r3, r3, #2
 800e40a:	4413      	add	r3, r2
 800e40c:	009b      	lsls	r3, r3, #2
 800e40e:	4a16      	ldr	r2, [pc, #88]	@ (800e468 <vTaskSwitchContext+0xc0>)
 800e410:	4413      	add	r3, r2
 800e412:	60bb      	str	r3, [r7, #8]
 800e414:	68bb      	ldr	r3, [r7, #8]
 800e416:	685b      	ldr	r3, [r3, #4]
 800e418:	685a      	ldr	r2, [r3, #4]
 800e41a:	68bb      	ldr	r3, [r7, #8]
 800e41c:	605a      	str	r2, [r3, #4]
 800e41e:	68bb      	ldr	r3, [r7, #8]
 800e420:	685a      	ldr	r2, [r3, #4]
 800e422:	68bb      	ldr	r3, [r7, #8]
 800e424:	3308      	adds	r3, #8
 800e426:	429a      	cmp	r2, r3
 800e428:	d104      	bne.n	800e434 <vTaskSwitchContext+0x8c>
 800e42a:	68bb      	ldr	r3, [r7, #8]
 800e42c:	685b      	ldr	r3, [r3, #4]
 800e42e:	685a      	ldr	r2, [r3, #4]
 800e430:	68bb      	ldr	r3, [r7, #8]
 800e432:	605a      	str	r2, [r3, #4]
 800e434:	68bb      	ldr	r3, [r7, #8]
 800e436:	685b      	ldr	r3, [r3, #4]
 800e438:	68db      	ldr	r3, [r3, #12]
 800e43a:	4a0c      	ldr	r2, [pc, #48]	@ (800e46c <vTaskSwitchContext+0xc4>)
 800e43c:	6013      	str	r3, [r2, #0]
 800e43e:	4a09      	ldr	r2, [pc, #36]	@ (800e464 <vTaskSwitchContext+0xbc>)
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e444:	4b09      	ldr	r3, [pc, #36]	@ (800e46c <vTaskSwitchContext+0xc4>)
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	3354      	adds	r3, #84	@ 0x54
 800e44a:	4a09      	ldr	r2, [pc, #36]	@ (800e470 <vTaskSwitchContext+0xc8>)
 800e44c:	6013      	str	r3, [r2, #0]
}
 800e44e:	bf00      	nop
 800e450:	3714      	adds	r7, #20
 800e452:	46bd      	mov	sp, r7
 800e454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e458:	4770      	bx	lr
 800e45a:	bf00      	nop
 800e45c:	240010cc 	.word	0x240010cc
 800e460:	240010b8 	.word	0x240010b8
 800e464:	240010ac 	.word	0x240010ac
 800e468:	24000bd4 	.word	0x24000bd4
 800e46c:	24000bd0 	.word	0x24000bd0
 800e470:	24000020 	.word	0x24000020

0800e474 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e474:	b580      	push	{r7, lr}
 800e476:	b084      	sub	sp, #16
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
 800e47c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	2b00      	cmp	r3, #0
 800e482:	d10b      	bne.n	800e49c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800e484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e488:	f383 8811 	msr	BASEPRI, r3
 800e48c:	f3bf 8f6f 	isb	sy
 800e490:	f3bf 8f4f 	dsb	sy
 800e494:	60fb      	str	r3, [r7, #12]
}
 800e496:	bf00      	nop
 800e498:	bf00      	nop
 800e49a:	e7fd      	b.n	800e498 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e49c:	4b07      	ldr	r3, [pc, #28]	@ (800e4bc <vTaskPlaceOnEventList+0x48>)
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	3318      	adds	r3, #24
 800e4a2:	4619      	mov	r1, r3
 800e4a4:	6878      	ldr	r0, [r7, #4]
 800e4a6:	f7fe fb52 	bl	800cb4e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e4aa:	2101      	movs	r1, #1
 800e4ac:	6838      	ldr	r0, [r7, #0]
 800e4ae:	f000 fbdf 	bl	800ec70 <prvAddCurrentTaskToDelayedList>
}
 800e4b2:	bf00      	nop
 800e4b4:	3710      	adds	r7, #16
 800e4b6:	46bd      	mov	sp, r7
 800e4b8:	bd80      	pop	{r7, pc}
 800e4ba:	bf00      	nop
 800e4bc:	24000bd0 	.word	0x24000bd0

0800e4c0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b086      	sub	sp, #24
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	60f8      	str	r0, [r7, #12]
 800e4c8:	60b9      	str	r1, [r7, #8]
 800e4ca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d10b      	bne.n	800e4ea <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800e4d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4d6:	f383 8811 	msr	BASEPRI, r3
 800e4da:	f3bf 8f6f 	isb	sy
 800e4de:	f3bf 8f4f 	dsb	sy
 800e4e2:	617b      	str	r3, [r7, #20]
}
 800e4e4:	bf00      	nop
 800e4e6:	bf00      	nop
 800e4e8:	e7fd      	b.n	800e4e6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e4ea:	4b0a      	ldr	r3, [pc, #40]	@ (800e514 <vTaskPlaceOnEventListRestricted+0x54>)
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	3318      	adds	r3, #24
 800e4f0:	4619      	mov	r1, r3
 800e4f2:	68f8      	ldr	r0, [r7, #12]
 800e4f4:	f7fe fb07 	bl	800cb06 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d002      	beq.n	800e504 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e4fe:	f04f 33ff 	mov.w	r3, #4294967295
 800e502:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e504:	6879      	ldr	r1, [r7, #4]
 800e506:	68b8      	ldr	r0, [r7, #8]
 800e508:	f000 fbb2 	bl	800ec70 <prvAddCurrentTaskToDelayedList>
	}
 800e50c:	bf00      	nop
 800e50e:	3718      	adds	r7, #24
 800e510:	46bd      	mov	sp, r7
 800e512:	bd80      	pop	{r7, pc}
 800e514:	24000bd0 	.word	0x24000bd0

0800e518 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b086      	sub	sp, #24
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	68db      	ldr	r3, [r3, #12]
 800e524:	68db      	ldr	r3, [r3, #12]
 800e526:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e528:	693b      	ldr	r3, [r7, #16]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d10b      	bne.n	800e546 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e52e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e532:	f383 8811 	msr	BASEPRI, r3
 800e536:	f3bf 8f6f 	isb	sy
 800e53a:	f3bf 8f4f 	dsb	sy
 800e53e:	60fb      	str	r3, [r7, #12]
}
 800e540:	bf00      	nop
 800e542:	bf00      	nop
 800e544:	e7fd      	b.n	800e542 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e546:	693b      	ldr	r3, [r7, #16]
 800e548:	3318      	adds	r3, #24
 800e54a:	4618      	mov	r0, r3
 800e54c:	f7fe fb38 	bl	800cbc0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e550:	4b1e      	ldr	r3, [pc, #120]	@ (800e5cc <xTaskRemoveFromEventList+0xb4>)
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d11f      	bne.n	800e598 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e558:	693b      	ldr	r3, [r7, #16]
 800e55a:	3304      	adds	r3, #4
 800e55c:	4618      	mov	r0, r3
 800e55e:	f7fe fb2f 	bl	800cbc0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e562:	693b      	ldr	r3, [r7, #16]
 800e564:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e566:	4b1a      	ldr	r3, [pc, #104]	@ (800e5d0 <xTaskRemoveFromEventList+0xb8>)
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	429a      	cmp	r2, r3
 800e56c:	d903      	bls.n	800e576 <xTaskRemoveFromEventList+0x5e>
 800e56e:	693b      	ldr	r3, [r7, #16]
 800e570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e572:	4a17      	ldr	r2, [pc, #92]	@ (800e5d0 <xTaskRemoveFromEventList+0xb8>)
 800e574:	6013      	str	r3, [r2, #0]
 800e576:	693b      	ldr	r3, [r7, #16]
 800e578:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e57a:	4613      	mov	r3, r2
 800e57c:	009b      	lsls	r3, r3, #2
 800e57e:	4413      	add	r3, r2
 800e580:	009b      	lsls	r3, r3, #2
 800e582:	4a14      	ldr	r2, [pc, #80]	@ (800e5d4 <xTaskRemoveFromEventList+0xbc>)
 800e584:	441a      	add	r2, r3
 800e586:	693b      	ldr	r3, [r7, #16]
 800e588:	3304      	adds	r3, #4
 800e58a:	4619      	mov	r1, r3
 800e58c:	4610      	mov	r0, r2
 800e58e:	f7fe faba 	bl	800cb06 <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 800e592:	f000 f9bf 	bl	800e914 <prvResetNextTaskUnblockTime>
 800e596:	e005      	b.n	800e5a4 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e598:	693b      	ldr	r3, [r7, #16]
 800e59a:	3318      	adds	r3, #24
 800e59c:	4619      	mov	r1, r3
 800e59e:	480e      	ldr	r0, [pc, #56]	@ (800e5d8 <xTaskRemoveFromEventList+0xc0>)
 800e5a0:	f7fe fab1 	bl	800cb06 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e5a4:	693b      	ldr	r3, [r7, #16]
 800e5a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e5a8:	4b0c      	ldr	r3, [pc, #48]	@ (800e5dc <xTaskRemoveFromEventList+0xc4>)
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5ae:	429a      	cmp	r2, r3
 800e5b0:	d905      	bls.n	800e5be <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e5b2:	2301      	movs	r3, #1
 800e5b4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e5b6:	4b0a      	ldr	r3, [pc, #40]	@ (800e5e0 <xTaskRemoveFromEventList+0xc8>)
 800e5b8:	2201      	movs	r2, #1
 800e5ba:	601a      	str	r2, [r3, #0]
 800e5bc:	e001      	b.n	800e5c2 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800e5be:	2300      	movs	r3, #0
 800e5c0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e5c2:	697b      	ldr	r3, [r7, #20]
}
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	3718      	adds	r7, #24
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	bd80      	pop	{r7, pc}
 800e5cc:	240010cc 	.word	0x240010cc
 800e5d0:	240010ac 	.word	0x240010ac
 800e5d4:	24000bd4 	.word	0x24000bd4
 800e5d8:	24001064 	.word	0x24001064
 800e5dc:	24000bd0 	.word	0x24000bd0
 800e5e0:	240010b8 	.word	0x240010b8

0800e5e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e5e4:	b480      	push	{r7}
 800e5e6:	b083      	sub	sp, #12
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e5ec:	4b06      	ldr	r3, [pc, #24]	@ (800e608 <vTaskInternalSetTimeOutState+0x24>)
 800e5ee:	681a      	ldr	r2, [r3, #0]
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e5f4:	4b05      	ldr	r3, [pc, #20]	@ (800e60c <vTaskInternalSetTimeOutState+0x28>)
 800e5f6:	681a      	ldr	r2, [r3, #0]
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	605a      	str	r2, [r3, #4]
}
 800e5fc:	bf00      	nop
 800e5fe:	370c      	adds	r7, #12
 800e600:	46bd      	mov	sp, r7
 800e602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e606:	4770      	bx	lr
 800e608:	240010bc 	.word	0x240010bc
 800e60c:	240010a8 	.word	0x240010a8

0800e610 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b088      	sub	sp, #32
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
 800e618:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d10b      	bne.n	800e638 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800e620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e624:	f383 8811 	msr	BASEPRI, r3
 800e628:	f3bf 8f6f 	isb	sy
 800e62c:	f3bf 8f4f 	dsb	sy
 800e630:	613b      	str	r3, [r7, #16]
}
 800e632:	bf00      	nop
 800e634:	bf00      	nop
 800e636:	e7fd      	b.n	800e634 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e638:	683b      	ldr	r3, [r7, #0]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d10b      	bne.n	800e656 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800e63e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e642:	f383 8811 	msr	BASEPRI, r3
 800e646:	f3bf 8f6f 	isb	sy
 800e64a:	f3bf 8f4f 	dsb	sy
 800e64e:	60fb      	str	r3, [r7, #12]
}
 800e650:	bf00      	nop
 800e652:	bf00      	nop
 800e654:	e7fd      	b.n	800e652 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800e656:	f000 ffe7 	bl	800f628 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e65a:	4b1d      	ldr	r3, [pc, #116]	@ (800e6d0 <xTaskCheckForTimeOut+0xc0>)
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	685b      	ldr	r3, [r3, #4]
 800e664:	69ba      	ldr	r2, [r7, #24]
 800e666:	1ad3      	subs	r3, r2, r3
 800e668:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e66a:	683b      	ldr	r3, [r7, #0]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e672:	d102      	bne.n	800e67a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e674:	2300      	movs	r3, #0
 800e676:	61fb      	str	r3, [r7, #28]
 800e678:	e023      	b.n	800e6c2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	681a      	ldr	r2, [r3, #0]
 800e67e:	4b15      	ldr	r3, [pc, #84]	@ (800e6d4 <xTaskCheckForTimeOut+0xc4>)
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	429a      	cmp	r2, r3
 800e684:	d007      	beq.n	800e696 <xTaskCheckForTimeOut+0x86>
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	685b      	ldr	r3, [r3, #4]
 800e68a:	69ba      	ldr	r2, [r7, #24]
 800e68c:	429a      	cmp	r2, r3
 800e68e:	d302      	bcc.n	800e696 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e690:	2301      	movs	r3, #1
 800e692:	61fb      	str	r3, [r7, #28]
 800e694:	e015      	b.n	800e6c2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e696:	683b      	ldr	r3, [r7, #0]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	697a      	ldr	r2, [r7, #20]
 800e69c:	429a      	cmp	r2, r3
 800e69e:	d20b      	bcs.n	800e6b8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e6a0:	683b      	ldr	r3, [r7, #0]
 800e6a2:	681a      	ldr	r2, [r3, #0]
 800e6a4:	697b      	ldr	r3, [r7, #20]
 800e6a6:	1ad2      	subs	r2, r2, r3
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e6ac:	6878      	ldr	r0, [r7, #4]
 800e6ae:	f7ff ff99 	bl	800e5e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	61fb      	str	r3, [r7, #28]
 800e6b6:	e004      	b.n	800e6c2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e6b8:	683b      	ldr	r3, [r7, #0]
 800e6ba:	2200      	movs	r2, #0
 800e6bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e6be:	2301      	movs	r3, #1
 800e6c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e6c2:	f000 ffe3 	bl	800f68c <vPortExitCritical>

	return xReturn;
 800e6c6:	69fb      	ldr	r3, [r7, #28]
}
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	3720      	adds	r7, #32
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	bd80      	pop	{r7, pc}
 800e6d0:	240010a8 	.word	0x240010a8
 800e6d4:	240010bc 	.word	0x240010bc

0800e6d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e6d8:	b480      	push	{r7}
 800e6da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e6dc:	4b03      	ldr	r3, [pc, #12]	@ (800e6ec <vTaskMissedYield+0x14>)
 800e6de:	2201      	movs	r2, #1
 800e6e0:	601a      	str	r2, [r3, #0]
}
 800e6e2:	bf00      	nop
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ea:	4770      	bx	lr
 800e6ec:	240010b8 	.word	0x240010b8

0800e6f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b084      	sub	sp, #16
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e6f8:	f000 f8a8 	bl	800e84c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e6fc:	4b18      	ldr	r3, [pc, #96]	@ (800e760 <prvIdleTask+0x70>)
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	2b01      	cmp	r3, #1
 800e702:	d907      	bls.n	800e714 <prvIdleTask+0x24>
			{
				taskYIELD();
 800e704:	4b17      	ldr	r3, [pc, #92]	@ (800e764 <prvIdleTask+0x74>)
 800e706:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e70a:	601a      	str	r2, [r3, #0]
 800e70c:	f3bf 8f4f 	dsb	sy
 800e710:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800e714:	f7ff fc80 	bl	800e018 <prvGetExpectedIdleTime>
 800e718:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	2b01      	cmp	r3, #1
 800e71e:	d9eb      	bls.n	800e6f8 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 800e720:	f7ff fc6c 	bl	800dffc <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800e724:	4b10      	ldr	r3, [pc, #64]	@ (800e768 <prvIdleTask+0x78>)
 800e726:	681a      	ldr	r2, [r3, #0]
 800e728:	4b10      	ldr	r3, [pc, #64]	@ (800e76c <prvIdleTask+0x7c>)
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	429a      	cmp	r2, r3
 800e72e:	d20b      	bcs.n	800e748 <prvIdleTask+0x58>
	__asm volatile
 800e730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e734:	f383 8811 	msr	BASEPRI, r3
 800e738:	f3bf 8f6f 	isb	sy
 800e73c:	f3bf 8f4f 	dsb	sy
 800e740:	60bb      	str	r3, [r7, #8]
}
 800e742:	bf00      	nop
 800e744:	bf00      	nop
 800e746:	e7fd      	b.n	800e744 <prvIdleTask+0x54>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800e748:	f7ff fc66 	bl	800e018 <prvGetExpectedIdleTime>
 800e74c:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	2b01      	cmp	r3, #1
 800e752:	d902      	bls.n	800e75a <prvIdleTask+0x6a>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800e754:	68f8      	ldr	r0, [r7, #12]
 800e756:	f001 f819 	bl	800f78c <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 800e75a:	f7ff fc95 	bl	800e088 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800e75e:	e7cb      	b.n	800e6f8 <prvIdleTask+0x8>
 800e760:	24000bd4 	.word	0x24000bd4
 800e764:	e000ed04 	.word	0xe000ed04
 800e768:	240010c4 	.word	0x240010c4
 800e76c:	240010a8 	.word	0x240010a8

0800e770 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 800e770:	b480      	push	{r7}
 800e772:	b083      	sub	sp, #12
 800e774:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 800e776:	2301      	movs	r3, #1
 800e778:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 800e77a:	2301      	movs	r3, #1
 800e77c:	71fb      	strb	r3, [r7, #7]

		/* This function must be called from a critical section. */

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 800e77e:	4b0f      	ldr	r3, [pc, #60]	@ (800e7bc <eTaskConfirmSleepModeStatus+0x4c>)
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d002      	beq.n	800e78c <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800e786:	2300      	movs	r3, #0
 800e788:	71fb      	strb	r3, [r7, #7]
 800e78a:	e010      	b.n	800e7ae <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 800e78c:	4b0c      	ldr	r3, [pc, #48]	@ (800e7c0 <eTaskConfirmSleepModeStatus+0x50>)
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d002      	beq.n	800e79a <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800e794:	2300      	movs	r3, #0
 800e796:	71fb      	strb	r3, [r7, #7]
 800e798:	e009      	b.n	800e7ae <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 800e79a:	4b0a      	ldr	r3, [pc, #40]	@ (800e7c4 <eTaskConfirmSleepModeStatus+0x54>)
 800e79c:	681a      	ldr	r2, [r3, #0]
 800e79e:	4b0a      	ldr	r3, [pc, #40]	@ (800e7c8 <eTaskConfirmSleepModeStatus+0x58>)
 800e7a0:	6819      	ldr	r1, [r3, #0]
 800e7a2:	683b      	ldr	r3, [r7, #0]
 800e7a4:	1acb      	subs	r3, r1, r3
 800e7a6:	429a      	cmp	r2, r3
 800e7a8:	d101      	bne.n	800e7ae <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 800e7aa:	2302      	movs	r3, #2
 800e7ac:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 800e7ae:	79fb      	ldrb	r3, [r7, #7]
	}
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	370c      	adds	r7, #12
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ba:	4770      	bx	lr
 800e7bc:	24001064 	.word	0x24001064
 800e7c0:	240010b8 	.word	0x240010b8
 800e7c4:	24001090 	.word	0x24001090
 800e7c8:	240010a4 	.word	0x240010a4

0800e7cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b082      	sub	sp, #8
 800e7d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	607b      	str	r3, [r7, #4]
 800e7d6:	e00c      	b.n	800e7f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e7d8:	687a      	ldr	r2, [r7, #4]
 800e7da:	4613      	mov	r3, r2
 800e7dc:	009b      	lsls	r3, r3, #2
 800e7de:	4413      	add	r3, r2
 800e7e0:	009b      	lsls	r3, r3, #2
 800e7e2:	4a12      	ldr	r2, [pc, #72]	@ (800e82c <prvInitialiseTaskLists+0x60>)
 800e7e4:	4413      	add	r3, r2
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	f7fe f960 	bl	800caac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	3301      	adds	r3, #1
 800e7f0:	607b      	str	r3, [r7, #4]
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	2b37      	cmp	r3, #55	@ 0x37
 800e7f6:	d9ef      	bls.n	800e7d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e7f8:	480d      	ldr	r0, [pc, #52]	@ (800e830 <prvInitialiseTaskLists+0x64>)
 800e7fa:	f7fe f957 	bl	800caac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e7fe:	480d      	ldr	r0, [pc, #52]	@ (800e834 <prvInitialiseTaskLists+0x68>)
 800e800:	f7fe f954 	bl	800caac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e804:	480c      	ldr	r0, [pc, #48]	@ (800e838 <prvInitialiseTaskLists+0x6c>)
 800e806:	f7fe f951 	bl	800caac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e80a:	480c      	ldr	r0, [pc, #48]	@ (800e83c <prvInitialiseTaskLists+0x70>)
 800e80c:	f7fe f94e 	bl	800caac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e810:	480b      	ldr	r0, [pc, #44]	@ (800e840 <prvInitialiseTaskLists+0x74>)
 800e812:	f7fe f94b 	bl	800caac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e816:	4b0b      	ldr	r3, [pc, #44]	@ (800e844 <prvInitialiseTaskLists+0x78>)
 800e818:	4a05      	ldr	r2, [pc, #20]	@ (800e830 <prvInitialiseTaskLists+0x64>)
 800e81a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e81c:	4b0a      	ldr	r3, [pc, #40]	@ (800e848 <prvInitialiseTaskLists+0x7c>)
 800e81e:	4a05      	ldr	r2, [pc, #20]	@ (800e834 <prvInitialiseTaskLists+0x68>)
 800e820:	601a      	str	r2, [r3, #0]
}
 800e822:	bf00      	nop
 800e824:	3708      	adds	r7, #8
 800e826:	46bd      	mov	sp, r7
 800e828:	bd80      	pop	{r7, pc}
 800e82a:	bf00      	nop
 800e82c:	24000bd4 	.word	0x24000bd4
 800e830:	24001034 	.word	0x24001034
 800e834:	24001048 	.word	0x24001048
 800e838:	24001064 	.word	0x24001064
 800e83c:	24001078 	.word	0x24001078
 800e840:	24001090 	.word	0x24001090
 800e844:	2400105c 	.word	0x2400105c
 800e848:	24001060 	.word	0x24001060

0800e84c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b082      	sub	sp, #8
 800e850:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e852:	e019      	b.n	800e888 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e854:	f000 fee8 	bl	800f628 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e858:	4b10      	ldr	r3, [pc, #64]	@ (800e89c <prvCheckTasksWaitingTermination+0x50>)
 800e85a:	68db      	ldr	r3, [r3, #12]
 800e85c:	68db      	ldr	r3, [r3, #12]
 800e85e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	3304      	adds	r3, #4
 800e864:	4618      	mov	r0, r3
 800e866:	f7fe f9ab 	bl	800cbc0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e86a:	4b0d      	ldr	r3, [pc, #52]	@ (800e8a0 <prvCheckTasksWaitingTermination+0x54>)
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	3b01      	subs	r3, #1
 800e870:	4a0b      	ldr	r2, [pc, #44]	@ (800e8a0 <prvCheckTasksWaitingTermination+0x54>)
 800e872:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e874:	4b0b      	ldr	r3, [pc, #44]	@ (800e8a4 <prvCheckTasksWaitingTermination+0x58>)
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	3b01      	subs	r3, #1
 800e87a:	4a0a      	ldr	r2, [pc, #40]	@ (800e8a4 <prvCheckTasksWaitingTermination+0x58>)
 800e87c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e87e:	f000 ff05 	bl	800f68c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e882:	6878      	ldr	r0, [r7, #4]
 800e884:	f000 f810 	bl	800e8a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e888:	4b06      	ldr	r3, [pc, #24]	@ (800e8a4 <prvCheckTasksWaitingTermination+0x58>)
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d1e1      	bne.n	800e854 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e890:	bf00      	nop
 800e892:	bf00      	nop
 800e894:	3708      	adds	r7, #8
 800e896:	46bd      	mov	sp, r7
 800e898:	bd80      	pop	{r7, pc}
 800e89a:	bf00      	nop
 800e89c:	24001078 	.word	0x24001078
 800e8a0:	240010a4 	.word	0x240010a4
 800e8a4:	2400108c 	.word	0x2400108c

0800e8a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	b084      	sub	sp, #16
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	3354      	adds	r3, #84	@ 0x54
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	f002 fc7b 	bl	80111b0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d108      	bne.n	800e8d6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	f001 f981 	bl	800fbd0 <vPortFree>
				vPortFree( pxTCB );
 800e8ce:	6878      	ldr	r0, [r7, #4]
 800e8d0:	f001 f97e 	bl	800fbd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e8d4:	e019      	b.n	800e90a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800e8dc:	2b01      	cmp	r3, #1
 800e8de:	d103      	bne.n	800e8e8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e8e0:	6878      	ldr	r0, [r7, #4]
 800e8e2:	f001 f975 	bl	800fbd0 <vPortFree>
	}
 800e8e6:	e010      	b.n	800e90a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800e8ee:	2b02      	cmp	r3, #2
 800e8f0:	d00b      	beq.n	800e90a <prvDeleteTCB+0x62>
	__asm volatile
 800e8f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8f6:	f383 8811 	msr	BASEPRI, r3
 800e8fa:	f3bf 8f6f 	isb	sy
 800e8fe:	f3bf 8f4f 	dsb	sy
 800e902:	60fb      	str	r3, [r7, #12]
}
 800e904:	bf00      	nop
 800e906:	bf00      	nop
 800e908:	e7fd      	b.n	800e906 <prvDeleteTCB+0x5e>
	}
 800e90a:	bf00      	nop
 800e90c:	3710      	adds	r7, #16
 800e90e:	46bd      	mov	sp, r7
 800e910:	bd80      	pop	{r7, pc}
	...

0800e914 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e914:	b480      	push	{r7}
 800e916:	b083      	sub	sp, #12
 800e918:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e91a:	4b0c      	ldr	r3, [pc, #48]	@ (800e94c <prvResetNextTaskUnblockTime+0x38>)
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d104      	bne.n	800e92e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e924:	4b0a      	ldr	r3, [pc, #40]	@ (800e950 <prvResetNextTaskUnblockTime+0x3c>)
 800e926:	f04f 32ff 	mov.w	r2, #4294967295
 800e92a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e92c:	e008      	b.n	800e940 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e92e:	4b07      	ldr	r3, [pc, #28]	@ (800e94c <prvResetNextTaskUnblockTime+0x38>)
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	68db      	ldr	r3, [r3, #12]
 800e934:	68db      	ldr	r3, [r3, #12]
 800e936:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	685b      	ldr	r3, [r3, #4]
 800e93c:	4a04      	ldr	r2, [pc, #16]	@ (800e950 <prvResetNextTaskUnblockTime+0x3c>)
 800e93e:	6013      	str	r3, [r2, #0]
}
 800e940:	bf00      	nop
 800e942:	370c      	adds	r7, #12
 800e944:	46bd      	mov	sp, r7
 800e946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e94a:	4770      	bx	lr
 800e94c:	2400105c 	.word	0x2400105c
 800e950:	240010c4 	.word	0x240010c4

0800e954 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e954:	b480      	push	{r7}
 800e956:	b083      	sub	sp, #12
 800e958:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e95a:	4b0b      	ldr	r3, [pc, #44]	@ (800e988 <xTaskGetSchedulerState+0x34>)
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d102      	bne.n	800e968 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e962:	2301      	movs	r3, #1
 800e964:	607b      	str	r3, [r7, #4]
 800e966:	e008      	b.n	800e97a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e968:	4b08      	ldr	r3, [pc, #32]	@ (800e98c <xTaskGetSchedulerState+0x38>)
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d102      	bne.n	800e976 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e970:	2302      	movs	r3, #2
 800e972:	607b      	str	r3, [r7, #4]
 800e974:	e001      	b.n	800e97a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e976:	2300      	movs	r3, #0
 800e978:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e97a:	687b      	ldr	r3, [r7, #4]
	}
 800e97c:	4618      	mov	r0, r3
 800e97e:	370c      	adds	r7, #12
 800e980:	46bd      	mov	sp, r7
 800e982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e986:	4770      	bx	lr
 800e988:	240010b0 	.word	0x240010b0
 800e98c:	240010cc 	.word	0x240010cc

0800e990 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e990:	b580      	push	{r7, lr}
 800e992:	b084      	sub	sp, #16
 800e994:	af00      	add	r7, sp, #0
 800e996:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e99c:	2300      	movs	r3, #0
 800e99e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d051      	beq.n	800ea4a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e9a6:	68bb      	ldr	r3, [r7, #8]
 800e9a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e9aa:	4b2a      	ldr	r3, [pc, #168]	@ (800ea54 <xTaskPriorityInherit+0xc4>)
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9b0:	429a      	cmp	r2, r3
 800e9b2:	d241      	bcs.n	800ea38 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e9b4:	68bb      	ldr	r3, [r7, #8]
 800e9b6:	699b      	ldr	r3, [r3, #24]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	db06      	blt.n	800e9ca <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e9bc:	4b25      	ldr	r3, [pc, #148]	@ (800ea54 <xTaskPriorityInherit+0xc4>)
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9c2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e9c6:	68bb      	ldr	r3, [r7, #8]
 800e9c8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e9ca:	68bb      	ldr	r3, [r7, #8]
 800e9cc:	6959      	ldr	r1, [r3, #20]
 800e9ce:	68bb      	ldr	r3, [r7, #8]
 800e9d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e9d2:	4613      	mov	r3, r2
 800e9d4:	009b      	lsls	r3, r3, #2
 800e9d6:	4413      	add	r3, r2
 800e9d8:	009b      	lsls	r3, r3, #2
 800e9da:	4a1f      	ldr	r2, [pc, #124]	@ (800ea58 <xTaskPriorityInherit+0xc8>)
 800e9dc:	4413      	add	r3, r2
 800e9de:	4299      	cmp	r1, r3
 800e9e0:	d122      	bne.n	800ea28 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e9e2:	68bb      	ldr	r3, [r7, #8]
 800e9e4:	3304      	adds	r3, #4
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	f7fe f8ea 	bl	800cbc0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e9ec:	4b19      	ldr	r3, [pc, #100]	@ (800ea54 <xTaskPriorityInherit+0xc4>)
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e9f2:	68bb      	ldr	r3, [r7, #8]
 800e9f4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e9f6:	68bb      	ldr	r3, [r7, #8]
 800e9f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e9fa:	4b18      	ldr	r3, [pc, #96]	@ (800ea5c <xTaskPriorityInherit+0xcc>)
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	429a      	cmp	r2, r3
 800ea00:	d903      	bls.n	800ea0a <xTaskPriorityInherit+0x7a>
 800ea02:	68bb      	ldr	r3, [r7, #8]
 800ea04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea06:	4a15      	ldr	r2, [pc, #84]	@ (800ea5c <xTaskPriorityInherit+0xcc>)
 800ea08:	6013      	str	r3, [r2, #0]
 800ea0a:	68bb      	ldr	r3, [r7, #8]
 800ea0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea0e:	4613      	mov	r3, r2
 800ea10:	009b      	lsls	r3, r3, #2
 800ea12:	4413      	add	r3, r2
 800ea14:	009b      	lsls	r3, r3, #2
 800ea16:	4a10      	ldr	r2, [pc, #64]	@ (800ea58 <xTaskPriorityInherit+0xc8>)
 800ea18:	441a      	add	r2, r3
 800ea1a:	68bb      	ldr	r3, [r7, #8]
 800ea1c:	3304      	adds	r3, #4
 800ea1e:	4619      	mov	r1, r3
 800ea20:	4610      	mov	r0, r2
 800ea22:	f7fe f870 	bl	800cb06 <vListInsertEnd>
 800ea26:	e004      	b.n	800ea32 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ea28:	4b0a      	ldr	r3, [pc, #40]	@ (800ea54 <xTaskPriorityInherit+0xc4>)
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea2e:	68bb      	ldr	r3, [r7, #8]
 800ea30:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ea32:	2301      	movs	r3, #1
 800ea34:	60fb      	str	r3, [r7, #12]
 800ea36:	e008      	b.n	800ea4a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ea38:	68bb      	ldr	r3, [r7, #8]
 800ea3a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ea3c:	4b05      	ldr	r3, [pc, #20]	@ (800ea54 <xTaskPriorityInherit+0xc4>)
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea42:	429a      	cmp	r2, r3
 800ea44:	d201      	bcs.n	800ea4a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ea46:	2301      	movs	r3, #1
 800ea48:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ea4a:	68fb      	ldr	r3, [r7, #12]
	}
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	3710      	adds	r7, #16
 800ea50:	46bd      	mov	sp, r7
 800ea52:	bd80      	pop	{r7, pc}
 800ea54:	24000bd0 	.word	0x24000bd0
 800ea58:	24000bd4 	.word	0x24000bd4
 800ea5c:	240010ac 	.word	0x240010ac

0800ea60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b086      	sub	sp, #24
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d058      	beq.n	800eb28 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ea76:	4b2f      	ldr	r3, [pc, #188]	@ (800eb34 <xTaskPriorityDisinherit+0xd4>)
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	693a      	ldr	r2, [r7, #16]
 800ea7c:	429a      	cmp	r2, r3
 800ea7e:	d00b      	beq.n	800ea98 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ea80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea84:	f383 8811 	msr	BASEPRI, r3
 800ea88:	f3bf 8f6f 	isb	sy
 800ea8c:	f3bf 8f4f 	dsb	sy
 800ea90:	60fb      	str	r3, [r7, #12]
}
 800ea92:	bf00      	nop
 800ea94:	bf00      	nop
 800ea96:	e7fd      	b.n	800ea94 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ea98:	693b      	ldr	r3, [r7, #16]
 800ea9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d10b      	bne.n	800eab8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800eaa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eaa4:	f383 8811 	msr	BASEPRI, r3
 800eaa8:	f3bf 8f6f 	isb	sy
 800eaac:	f3bf 8f4f 	dsb	sy
 800eab0:	60bb      	str	r3, [r7, #8]
}
 800eab2:	bf00      	nop
 800eab4:	bf00      	nop
 800eab6:	e7fd      	b.n	800eab4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800eab8:	693b      	ldr	r3, [r7, #16]
 800eaba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eabc:	1e5a      	subs	r2, r3, #1
 800eabe:	693b      	ldr	r3, [r7, #16]
 800eac0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800eac2:	693b      	ldr	r3, [r7, #16]
 800eac4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eac6:	693b      	ldr	r3, [r7, #16]
 800eac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eaca:	429a      	cmp	r2, r3
 800eacc:	d02c      	beq.n	800eb28 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800eace:	693b      	ldr	r3, [r7, #16]
 800ead0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d128      	bne.n	800eb28 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ead6:	693b      	ldr	r3, [r7, #16]
 800ead8:	3304      	adds	r3, #4
 800eada:	4618      	mov	r0, r3
 800eadc:	f7fe f870 	bl	800cbc0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800eae0:	693b      	ldr	r3, [r7, #16]
 800eae2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800eae4:	693b      	ldr	r3, [r7, #16]
 800eae6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eae8:	693b      	ldr	r3, [r7, #16]
 800eaea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eaec:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800eaf0:	693b      	ldr	r3, [r7, #16]
 800eaf2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800eaf4:	693b      	ldr	r3, [r7, #16]
 800eaf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eaf8:	4b0f      	ldr	r3, [pc, #60]	@ (800eb38 <xTaskPriorityDisinherit+0xd8>)
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	429a      	cmp	r2, r3
 800eafe:	d903      	bls.n	800eb08 <xTaskPriorityDisinherit+0xa8>
 800eb00:	693b      	ldr	r3, [r7, #16]
 800eb02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb04:	4a0c      	ldr	r2, [pc, #48]	@ (800eb38 <xTaskPriorityDisinherit+0xd8>)
 800eb06:	6013      	str	r3, [r2, #0]
 800eb08:	693b      	ldr	r3, [r7, #16]
 800eb0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb0c:	4613      	mov	r3, r2
 800eb0e:	009b      	lsls	r3, r3, #2
 800eb10:	4413      	add	r3, r2
 800eb12:	009b      	lsls	r3, r3, #2
 800eb14:	4a09      	ldr	r2, [pc, #36]	@ (800eb3c <xTaskPriorityDisinherit+0xdc>)
 800eb16:	441a      	add	r2, r3
 800eb18:	693b      	ldr	r3, [r7, #16]
 800eb1a:	3304      	adds	r3, #4
 800eb1c:	4619      	mov	r1, r3
 800eb1e:	4610      	mov	r0, r2
 800eb20:	f7fd fff1 	bl	800cb06 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800eb24:	2301      	movs	r3, #1
 800eb26:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800eb28:	697b      	ldr	r3, [r7, #20]
	}
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	3718      	adds	r7, #24
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	bd80      	pop	{r7, pc}
 800eb32:	bf00      	nop
 800eb34:	24000bd0 	.word	0x24000bd0
 800eb38:	240010ac 	.word	0x240010ac
 800eb3c:	24000bd4 	.word	0x24000bd4

0800eb40 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800eb40:	b580      	push	{r7, lr}
 800eb42:	b088      	sub	sp, #32
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	6078      	str	r0, [r7, #4]
 800eb48:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800eb4e:	2301      	movs	r3, #1
 800eb50:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d06c      	beq.n	800ec32 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800eb58:	69bb      	ldr	r3, [r7, #24]
 800eb5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d10b      	bne.n	800eb78 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800eb60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb64:	f383 8811 	msr	BASEPRI, r3
 800eb68:	f3bf 8f6f 	isb	sy
 800eb6c:	f3bf 8f4f 	dsb	sy
 800eb70:	60fb      	str	r3, [r7, #12]
}
 800eb72:	bf00      	nop
 800eb74:	bf00      	nop
 800eb76:	e7fd      	b.n	800eb74 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800eb78:	69bb      	ldr	r3, [r7, #24]
 800eb7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eb7c:	683a      	ldr	r2, [r7, #0]
 800eb7e:	429a      	cmp	r2, r3
 800eb80:	d902      	bls.n	800eb88 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800eb82:	683b      	ldr	r3, [r7, #0]
 800eb84:	61fb      	str	r3, [r7, #28]
 800eb86:	e002      	b.n	800eb8e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800eb88:	69bb      	ldr	r3, [r7, #24]
 800eb8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eb8c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800eb8e:	69bb      	ldr	r3, [r7, #24]
 800eb90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb92:	69fa      	ldr	r2, [r7, #28]
 800eb94:	429a      	cmp	r2, r3
 800eb96:	d04c      	beq.n	800ec32 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800eb98:	69bb      	ldr	r3, [r7, #24]
 800eb9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eb9c:	697a      	ldr	r2, [r7, #20]
 800eb9e:	429a      	cmp	r2, r3
 800eba0:	d147      	bne.n	800ec32 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800eba2:	4b26      	ldr	r3, [pc, #152]	@ (800ec3c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	69ba      	ldr	r2, [r7, #24]
 800eba8:	429a      	cmp	r2, r3
 800ebaa:	d10b      	bne.n	800ebc4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800ebac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebb0:	f383 8811 	msr	BASEPRI, r3
 800ebb4:	f3bf 8f6f 	isb	sy
 800ebb8:	f3bf 8f4f 	dsb	sy
 800ebbc:	60bb      	str	r3, [r7, #8]
}
 800ebbe:	bf00      	nop
 800ebc0:	bf00      	nop
 800ebc2:	e7fd      	b.n	800ebc0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ebc4:	69bb      	ldr	r3, [r7, #24]
 800ebc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebc8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ebca:	69bb      	ldr	r3, [r7, #24]
 800ebcc:	69fa      	ldr	r2, [r7, #28]
 800ebce:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ebd0:	69bb      	ldr	r3, [r7, #24]
 800ebd2:	699b      	ldr	r3, [r3, #24]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	db04      	blt.n	800ebe2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ebd8:	69fb      	ldr	r3, [r7, #28]
 800ebda:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ebde:	69bb      	ldr	r3, [r7, #24]
 800ebe0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ebe2:	69bb      	ldr	r3, [r7, #24]
 800ebe4:	6959      	ldr	r1, [r3, #20]
 800ebe6:	693a      	ldr	r2, [r7, #16]
 800ebe8:	4613      	mov	r3, r2
 800ebea:	009b      	lsls	r3, r3, #2
 800ebec:	4413      	add	r3, r2
 800ebee:	009b      	lsls	r3, r3, #2
 800ebf0:	4a13      	ldr	r2, [pc, #76]	@ (800ec40 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ebf2:	4413      	add	r3, r2
 800ebf4:	4299      	cmp	r1, r3
 800ebf6:	d11c      	bne.n	800ec32 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ebf8:	69bb      	ldr	r3, [r7, #24]
 800ebfa:	3304      	adds	r3, #4
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	f7fd ffdf 	bl	800cbc0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ec02:	69bb      	ldr	r3, [r7, #24]
 800ec04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec06:	4b0f      	ldr	r3, [pc, #60]	@ (800ec44 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	429a      	cmp	r2, r3
 800ec0c:	d903      	bls.n	800ec16 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800ec0e:	69bb      	ldr	r3, [r7, #24]
 800ec10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec12:	4a0c      	ldr	r2, [pc, #48]	@ (800ec44 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ec14:	6013      	str	r3, [r2, #0]
 800ec16:	69bb      	ldr	r3, [r7, #24]
 800ec18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec1a:	4613      	mov	r3, r2
 800ec1c:	009b      	lsls	r3, r3, #2
 800ec1e:	4413      	add	r3, r2
 800ec20:	009b      	lsls	r3, r3, #2
 800ec22:	4a07      	ldr	r2, [pc, #28]	@ (800ec40 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ec24:	441a      	add	r2, r3
 800ec26:	69bb      	ldr	r3, [r7, #24]
 800ec28:	3304      	adds	r3, #4
 800ec2a:	4619      	mov	r1, r3
 800ec2c:	4610      	mov	r0, r2
 800ec2e:	f7fd ff6a 	bl	800cb06 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ec32:	bf00      	nop
 800ec34:	3720      	adds	r7, #32
 800ec36:	46bd      	mov	sp, r7
 800ec38:	bd80      	pop	{r7, pc}
 800ec3a:	bf00      	nop
 800ec3c:	24000bd0 	.word	0x24000bd0
 800ec40:	24000bd4 	.word	0x24000bd4
 800ec44:	240010ac 	.word	0x240010ac

0800ec48 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ec48:	b480      	push	{r7}
 800ec4a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ec4c:	4b07      	ldr	r3, [pc, #28]	@ (800ec6c <pvTaskIncrementMutexHeldCount+0x24>)
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d004      	beq.n	800ec5e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ec54:	4b05      	ldr	r3, [pc, #20]	@ (800ec6c <pvTaskIncrementMutexHeldCount+0x24>)
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ec5a:	3201      	adds	r2, #1
 800ec5c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800ec5e:	4b03      	ldr	r3, [pc, #12]	@ (800ec6c <pvTaskIncrementMutexHeldCount+0x24>)
 800ec60:	681b      	ldr	r3, [r3, #0]
	}
 800ec62:	4618      	mov	r0, r3
 800ec64:	46bd      	mov	sp, r7
 800ec66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6a:	4770      	bx	lr
 800ec6c:	24000bd0 	.word	0x24000bd0

0800ec70 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b084      	sub	sp, #16
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]
 800ec78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ec7a:	4b21      	ldr	r3, [pc, #132]	@ (800ed00 <prvAddCurrentTaskToDelayedList+0x90>)
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ec80:	4b20      	ldr	r3, [pc, #128]	@ (800ed04 <prvAddCurrentTaskToDelayedList+0x94>)
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	3304      	adds	r3, #4
 800ec86:	4618      	mov	r0, r3
 800ec88:	f7fd ff9a 	bl	800cbc0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec92:	d10a      	bne.n	800ecaa <prvAddCurrentTaskToDelayedList+0x3a>
 800ec94:	683b      	ldr	r3, [r7, #0]
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d007      	beq.n	800ecaa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ec9a:	4b1a      	ldr	r3, [pc, #104]	@ (800ed04 <prvAddCurrentTaskToDelayedList+0x94>)
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	3304      	adds	r3, #4
 800eca0:	4619      	mov	r1, r3
 800eca2:	4819      	ldr	r0, [pc, #100]	@ (800ed08 <prvAddCurrentTaskToDelayedList+0x98>)
 800eca4:	f7fd ff2f 	bl	800cb06 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800eca8:	e026      	b.n	800ecf8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ecaa:	68fa      	ldr	r2, [r7, #12]
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	4413      	add	r3, r2
 800ecb0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ecb2:	4b14      	ldr	r3, [pc, #80]	@ (800ed04 <prvAddCurrentTaskToDelayedList+0x94>)
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	68ba      	ldr	r2, [r7, #8]
 800ecb8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ecba:	68ba      	ldr	r2, [r7, #8]
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	429a      	cmp	r2, r3
 800ecc0:	d209      	bcs.n	800ecd6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ecc2:	4b12      	ldr	r3, [pc, #72]	@ (800ed0c <prvAddCurrentTaskToDelayedList+0x9c>)
 800ecc4:	681a      	ldr	r2, [r3, #0]
 800ecc6:	4b0f      	ldr	r3, [pc, #60]	@ (800ed04 <prvAddCurrentTaskToDelayedList+0x94>)
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	3304      	adds	r3, #4
 800eccc:	4619      	mov	r1, r3
 800ecce:	4610      	mov	r0, r2
 800ecd0:	f7fd ff3d 	bl	800cb4e <vListInsert>
}
 800ecd4:	e010      	b.n	800ecf8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ecd6:	4b0e      	ldr	r3, [pc, #56]	@ (800ed10 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ecd8:	681a      	ldr	r2, [r3, #0]
 800ecda:	4b0a      	ldr	r3, [pc, #40]	@ (800ed04 <prvAddCurrentTaskToDelayedList+0x94>)
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	3304      	adds	r3, #4
 800ece0:	4619      	mov	r1, r3
 800ece2:	4610      	mov	r0, r2
 800ece4:	f7fd ff33 	bl	800cb4e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ece8:	4b0a      	ldr	r3, [pc, #40]	@ (800ed14 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	68ba      	ldr	r2, [r7, #8]
 800ecee:	429a      	cmp	r2, r3
 800ecf0:	d202      	bcs.n	800ecf8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ecf2:	4a08      	ldr	r2, [pc, #32]	@ (800ed14 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ecf4:	68bb      	ldr	r3, [r7, #8]
 800ecf6:	6013      	str	r3, [r2, #0]
}
 800ecf8:	bf00      	nop
 800ecfa:	3710      	adds	r7, #16
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	bd80      	pop	{r7, pc}
 800ed00:	240010a8 	.word	0x240010a8
 800ed04:	24000bd0 	.word	0x24000bd0
 800ed08:	24001090 	.word	0x24001090
 800ed0c:	24001060 	.word	0x24001060
 800ed10:	2400105c 	.word	0x2400105c
 800ed14:	240010c4 	.word	0x240010c4

0800ed18 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b08a      	sub	sp, #40	@ 0x28
 800ed1c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ed1e:	2300      	movs	r3, #0
 800ed20:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ed22:	f000 fb13 	bl	800f34c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ed26:	4b1d      	ldr	r3, [pc, #116]	@ (800ed9c <xTimerCreateTimerTask+0x84>)
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d021      	beq.n	800ed72 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ed2e:	2300      	movs	r3, #0
 800ed30:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ed32:	2300      	movs	r3, #0
 800ed34:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ed36:	1d3a      	adds	r2, r7, #4
 800ed38:	f107 0108 	add.w	r1, r7, #8
 800ed3c:	f107 030c 	add.w	r3, r7, #12
 800ed40:	4618      	mov	r0, r3
 800ed42:	f7fd fe99 	bl	800ca78 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ed46:	6879      	ldr	r1, [r7, #4]
 800ed48:	68bb      	ldr	r3, [r7, #8]
 800ed4a:	68fa      	ldr	r2, [r7, #12]
 800ed4c:	9202      	str	r2, [sp, #8]
 800ed4e:	9301      	str	r3, [sp, #4]
 800ed50:	2302      	movs	r3, #2
 800ed52:	9300      	str	r3, [sp, #0]
 800ed54:	2300      	movs	r3, #0
 800ed56:	460a      	mov	r2, r1
 800ed58:	4911      	ldr	r1, [pc, #68]	@ (800eda0 <xTimerCreateTimerTask+0x88>)
 800ed5a:	4812      	ldr	r0, [pc, #72]	@ (800eda4 <xTimerCreateTimerTask+0x8c>)
 800ed5c:	f7fe feea 	bl	800db34 <xTaskCreateStatic>
 800ed60:	4603      	mov	r3, r0
 800ed62:	4a11      	ldr	r2, [pc, #68]	@ (800eda8 <xTimerCreateTimerTask+0x90>)
 800ed64:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ed66:	4b10      	ldr	r3, [pc, #64]	@ (800eda8 <xTimerCreateTimerTask+0x90>)
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d001      	beq.n	800ed72 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ed6e:	2301      	movs	r3, #1
 800ed70:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ed72:	697b      	ldr	r3, [r7, #20]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d10b      	bne.n	800ed90 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800ed78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed7c:	f383 8811 	msr	BASEPRI, r3
 800ed80:	f3bf 8f6f 	isb	sy
 800ed84:	f3bf 8f4f 	dsb	sy
 800ed88:	613b      	str	r3, [r7, #16]
}
 800ed8a:	bf00      	nop
 800ed8c:	bf00      	nop
 800ed8e:	e7fd      	b.n	800ed8c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ed90:	697b      	ldr	r3, [r7, #20]
}
 800ed92:	4618      	mov	r0, r3
 800ed94:	3718      	adds	r7, #24
 800ed96:	46bd      	mov	sp, r7
 800ed98:	bd80      	pop	{r7, pc}
 800ed9a:	bf00      	nop
 800ed9c:	24001100 	.word	0x24001100
 800eda0:	08014af0 	.word	0x08014af0
 800eda4:	0800eee5 	.word	0x0800eee5
 800eda8:	24001104 	.word	0x24001104

0800edac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800edac:	b580      	push	{r7, lr}
 800edae:	b08a      	sub	sp, #40	@ 0x28
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	60f8      	str	r0, [r7, #12]
 800edb4:	60b9      	str	r1, [r7, #8]
 800edb6:	607a      	str	r2, [r7, #4]
 800edb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800edba:	2300      	movs	r3, #0
 800edbc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d10b      	bne.n	800eddc <xTimerGenericCommand+0x30>
	__asm volatile
 800edc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edc8:	f383 8811 	msr	BASEPRI, r3
 800edcc:	f3bf 8f6f 	isb	sy
 800edd0:	f3bf 8f4f 	dsb	sy
 800edd4:	623b      	str	r3, [r7, #32]
}
 800edd6:	bf00      	nop
 800edd8:	bf00      	nop
 800edda:	e7fd      	b.n	800edd8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800eddc:	4b19      	ldr	r3, [pc, #100]	@ (800ee44 <xTimerGenericCommand+0x98>)
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d02a      	beq.n	800ee3a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ede4:	68bb      	ldr	r3, [r7, #8]
 800ede6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800edf0:	68bb      	ldr	r3, [r7, #8]
 800edf2:	2b05      	cmp	r3, #5
 800edf4:	dc18      	bgt.n	800ee28 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800edf6:	f7ff fdad 	bl	800e954 <xTaskGetSchedulerState>
 800edfa:	4603      	mov	r3, r0
 800edfc:	2b02      	cmp	r3, #2
 800edfe:	d109      	bne.n	800ee14 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ee00:	4b10      	ldr	r3, [pc, #64]	@ (800ee44 <xTimerGenericCommand+0x98>)
 800ee02:	6818      	ldr	r0, [r3, #0]
 800ee04:	f107 0110 	add.w	r1, r7, #16
 800ee08:	2300      	movs	r3, #0
 800ee0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ee0c:	f7fe f87c 	bl	800cf08 <xQueueGenericSend>
 800ee10:	6278      	str	r0, [r7, #36]	@ 0x24
 800ee12:	e012      	b.n	800ee3a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ee14:	4b0b      	ldr	r3, [pc, #44]	@ (800ee44 <xTimerGenericCommand+0x98>)
 800ee16:	6818      	ldr	r0, [r3, #0]
 800ee18:	f107 0110 	add.w	r1, r7, #16
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	2200      	movs	r2, #0
 800ee20:	f7fe f872 	bl	800cf08 <xQueueGenericSend>
 800ee24:	6278      	str	r0, [r7, #36]	@ 0x24
 800ee26:	e008      	b.n	800ee3a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ee28:	4b06      	ldr	r3, [pc, #24]	@ (800ee44 <xTimerGenericCommand+0x98>)
 800ee2a:	6818      	ldr	r0, [r3, #0]
 800ee2c:	f107 0110 	add.w	r1, r7, #16
 800ee30:	2300      	movs	r3, #0
 800ee32:	683a      	ldr	r2, [r7, #0]
 800ee34:	f7fe f96a 	bl	800d10c <xQueueGenericSendFromISR>
 800ee38:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ee3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	3728      	adds	r7, #40	@ 0x28
 800ee40:	46bd      	mov	sp, r7
 800ee42:	bd80      	pop	{r7, pc}
 800ee44:	24001100 	.word	0x24001100

0800ee48 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ee48:	b580      	push	{r7, lr}
 800ee4a:	b088      	sub	sp, #32
 800ee4c:	af02      	add	r7, sp, #8
 800ee4e:	6078      	str	r0, [r7, #4]
 800ee50:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee52:	4b23      	ldr	r3, [pc, #140]	@ (800eee0 <prvProcessExpiredTimer+0x98>)
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	68db      	ldr	r3, [r3, #12]
 800ee58:	68db      	ldr	r3, [r3, #12]
 800ee5a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ee5c:	697b      	ldr	r3, [r7, #20]
 800ee5e:	3304      	adds	r3, #4
 800ee60:	4618      	mov	r0, r3
 800ee62:	f7fd fead 	bl	800cbc0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ee66:	697b      	ldr	r3, [r7, #20]
 800ee68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ee6c:	f003 0304 	and.w	r3, r3, #4
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d023      	beq.n	800eebc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ee74:	697b      	ldr	r3, [r7, #20]
 800ee76:	699a      	ldr	r2, [r3, #24]
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	18d1      	adds	r1, r2, r3
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	683a      	ldr	r2, [r7, #0]
 800ee80:	6978      	ldr	r0, [r7, #20]
 800ee82:	f000 f8d5 	bl	800f030 <prvInsertTimerInActiveList>
 800ee86:	4603      	mov	r3, r0
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d020      	beq.n	800eece <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	9300      	str	r3, [sp, #0]
 800ee90:	2300      	movs	r3, #0
 800ee92:	687a      	ldr	r2, [r7, #4]
 800ee94:	2100      	movs	r1, #0
 800ee96:	6978      	ldr	r0, [r7, #20]
 800ee98:	f7ff ff88 	bl	800edac <xTimerGenericCommand>
 800ee9c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ee9e:	693b      	ldr	r3, [r7, #16]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d114      	bne.n	800eece <prvProcessExpiredTimer+0x86>
	__asm volatile
 800eea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eea8:	f383 8811 	msr	BASEPRI, r3
 800eeac:	f3bf 8f6f 	isb	sy
 800eeb0:	f3bf 8f4f 	dsb	sy
 800eeb4:	60fb      	str	r3, [r7, #12]
}
 800eeb6:	bf00      	nop
 800eeb8:	bf00      	nop
 800eeba:	e7fd      	b.n	800eeb8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eebc:	697b      	ldr	r3, [r7, #20]
 800eebe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eec2:	f023 0301 	bic.w	r3, r3, #1
 800eec6:	b2da      	uxtb	r2, r3
 800eec8:	697b      	ldr	r3, [r7, #20]
 800eeca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eece:	697b      	ldr	r3, [r7, #20]
 800eed0:	6a1b      	ldr	r3, [r3, #32]
 800eed2:	6978      	ldr	r0, [r7, #20]
 800eed4:	4798      	blx	r3
}
 800eed6:	bf00      	nop
 800eed8:	3718      	adds	r7, #24
 800eeda:	46bd      	mov	sp, r7
 800eedc:	bd80      	pop	{r7, pc}
 800eede:	bf00      	nop
 800eee0:	240010f8 	.word	0x240010f8

0800eee4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800eee4:	b580      	push	{r7, lr}
 800eee6:	b084      	sub	sp, #16
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800eeec:	f107 0308 	add.w	r3, r7, #8
 800eef0:	4618      	mov	r0, r3
 800eef2:	f000 f859 	bl	800efa8 <prvGetNextExpireTime>
 800eef6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800eef8:	68bb      	ldr	r3, [r7, #8]
 800eefa:	4619      	mov	r1, r3
 800eefc:	68f8      	ldr	r0, [r7, #12]
 800eefe:	f000 f805 	bl	800ef0c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ef02:	f000 f8d7 	bl	800f0b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ef06:	bf00      	nop
 800ef08:	e7f0      	b.n	800eeec <prvTimerTask+0x8>
	...

0800ef0c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ef0c:	b580      	push	{r7, lr}
 800ef0e:	b084      	sub	sp, #16
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	6078      	str	r0, [r7, #4]
 800ef14:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ef16:	f7ff f871 	bl	800dffc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ef1a:	f107 0308 	add.w	r3, r7, #8
 800ef1e:	4618      	mov	r0, r3
 800ef20:	f000 f866 	bl	800eff0 <prvSampleTimeNow>
 800ef24:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ef26:	68bb      	ldr	r3, [r7, #8]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d130      	bne.n	800ef8e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ef2c:	683b      	ldr	r3, [r7, #0]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d10a      	bne.n	800ef48 <prvProcessTimerOrBlockTask+0x3c>
 800ef32:	687a      	ldr	r2, [r7, #4]
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	429a      	cmp	r2, r3
 800ef38:	d806      	bhi.n	800ef48 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ef3a:	f7ff f8a5 	bl	800e088 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ef3e:	68f9      	ldr	r1, [r7, #12]
 800ef40:	6878      	ldr	r0, [r7, #4]
 800ef42:	f7ff ff81 	bl	800ee48 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ef46:	e024      	b.n	800ef92 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ef48:	683b      	ldr	r3, [r7, #0]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d008      	beq.n	800ef60 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ef4e:	4b13      	ldr	r3, [pc, #76]	@ (800ef9c <prvProcessTimerOrBlockTask+0x90>)
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d101      	bne.n	800ef5c <prvProcessTimerOrBlockTask+0x50>
 800ef58:	2301      	movs	r3, #1
 800ef5a:	e000      	b.n	800ef5e <prvProcessTimerOrBlockTask+0x52>
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ef60:	4b0f      	ldr	r3, [pc, #60]	@ (800efa0 <prvProcessTimerOrBlockTask+0x94>)
 800ef62:	6818      	ldr	r0, [r3, #0]
 800ef64:	687a      	ldr	r2, [r7, #4]
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	1ad3      	subs	r3, r2, r3
 800ef6a:	683a      	ldr	r2, [r7, #0]
 800ef6c:	4619      	mov	r1, r3
 800ef6e:	f7fe fdad 	bl	800dacc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ef72:	f7ff f889 	bl	800e088 <xTaskResumeAll>
 800ef76:	4603      	mov	r3, r0
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d10a      	bne.n	800ef92 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ef7c:	4b09      	ldr	r3, [pc, #36]	@ (800efa4 <prvProcessTimerOrBlockTask+0x98>)
 800ef7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ef82:	601a      	str	r2, [r3, #0]
 800ef84:	f3bf 8f4f 	dsb	sy
 800ef88:	f3bf 8f6f 	isb	sy
}
 800ef8c:	e001      	b.n	800ef92 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ef8e:	f7ff f87b 	bl	800e088 <xTaskResumeAll>
}
 800ef92:	bf00      	nop
 800ef94:	3710      	adds	r7, #16
 800ef96:	46bd      	mov	sp, r7
 800ef98:	bd80      	pop	{r7, pc}
 800ef9a:	bf00      	nop
 800ef9c:	240010fc 	.word	0x240010fc
 800efa0:	24001100 	.word	0x24001100
 800efa4:	e000ed04 	.word	0xe000ed04

0800efa8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800efa8:	b480      	push	{r7}
 800efaa:	b085      	sub	sp, #20
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800efb0:	4b0e      	ldr	r3, [pc, #56]	@ (800efec <prvGetNextExpireTime+0x44>)
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d101      	bne.n	800efbe <prvGetNextExpireTime+0x16>
 800efba:	2201      	movs	r2, #1
 800efbc:	e000      	b.n	800efc0 <prvGetNextExpireTime+0x18>
 800efbe:	2200      	movs	r2, #0
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d105      	bne.n	800efd8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800efcc:	4b07      	ldr	r3, [pc, #28]	@ (800efec <prvGetNextExpireTime+0x44>)
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	68db      	ldr	r3, [r3, #12]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	60fb      	str	r3, [r7, #12]
 800efd6:	e001      	b.n	800efdc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800efd8:	2300      	movs	r3, #0
 800efda:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800efdc:	68fb      	ldr	r3, [r7, #12]
}
 800efde:	4618      	mov	r0, r3
 800efe0:	3714      	adds	r7, #20
 800efe2:	46bd      	mov	sp, r7
 800efe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe8:	4770      	bx	lr
 800efea:	bf00      	nop
 800efec:	240010f8 	.word	0x240010f8

0800eff0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800eff0:	b580      	push	{r7, lr}
 800eff2:	b084      	sub	sp, #16
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800eff8:	f7ff f8e4 	bl	800e1c4 <xTaskGetTickCount>
 800effc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800effe:	4b0b      	ldr	r3, [pc, #44]	@ (800f02c <prvSampleTimeNow+0x3c>)
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	68fa      	ldr	r2, [r7, #12]
 800f004:	429a      	cmp	r2, r3
 800f006:	d205      	bcs.n	800f014 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f008:	f000 f93a 	bl	800f280 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	2201      	movs	r2, #1
 800f010:	601a      	str	r2, [r3, #0]
 800f012:	e002      	b.n	800f01a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	2200      	movs	r2, #0
 800f018:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f01a:	4a04      	ldr	r2, [pc, #16]	@ (800f02c <prvSampleTimeNow+0x3c>)
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f020:	68fb      	ldr	r3, [r7, #12]
}
 800f022:	4618      	mov	r0, r3
 800f024:	3710      	adds	r7, #16
 800f026:	46bd      	mov	sp, r7
 800f028:	bd80      	pop	{r7, pc}
 800f02a:	bf00      	nop
 800f02c:	24001108 	.word	0x24001108

0800f030 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f030:	b580      	push	{r7, lr}
 800f032:	b086      	sub	sp, #24
 800f034:	af00      	add	r7, sp, #0
 800f036:	60f8      	str	r0, [r7, #12]
 800f038:	60b9      	str	r1, [r7, #8]
 800f03a:	607a      	str	r2, [r7, #4]
 800f03c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f03e:	2300      	movs	r3, #0
 800f040:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	68ba      	ldr	r2, [r7, #8]
 800f046:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	68fa      	ldr	r2, [r7, #12]
 800f04c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f04e:	68ba      	ldr	r2, [r7, #8]
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	429a      	cmp	r2, r3
 800f054:	d812      	bhi.n	800f07c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f056:	687a      	ldr	r2, [r7, #4]
 800f058:	683b      	ldr	r3, [r7, #0]
 800f05a:	1ad2      	subs	r2, r2, r3
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	699b      	ldr	r3, [r3, #24]
 800f060:	429a      	cmp	r2, r3
 800f062:	d302      	bcc.n	800f06a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f064:	2301      	movs	r3, #1
 800f066:	617b      	str	r3, [r7, #20]
 800f068:	e01b      	b.n	800f0a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f06a:	4b10      	ldr	r3, [pc, #64]	@ (800f0ac <prvInsertTimerInActiveList+0x7c>)
 800f06c:	681a      	ldr	r2, [r3, #0]
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	3304      	adds	r3, #4
 800f072:	4619      	mov	r1, r3
 800f074:	4610      	mov	r0, r2
 800f076:	f7fd fd6a 	bl	800cb4e <vListInsert>
 800f07a:	e012      	b.n	800f0a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f07c:	687a      	ldr	r2, [r7, #4]
 800f07e:	683b      	ldr	r3, [r7, #0]
 800f080:	429a      	cmp	r2, r3
 800f082:	d206      	bcs.n	800f092 <prvInsertTimerInActiveList+0x62>
 800f084:	68ba      	ldr	r2, [r7, #8]
 800f086:	683b      	ldr	r3, [r7, #0]
 800f088:	429a      	cmp	r2, r3
 800f08a:	d302      	bcc.n	800f092 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f08c:	2301      	movs	r3, #1
 800f08e:	617b      	str	r3, [r7, #20]
 800f090:	e007      	b.n	800f0a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f092:	4b07      	ldr	r3, [pc, #28]	@ (800f0b0 <prvInsertTimerInActiveList+0x80>)
 800f094:	681a      	ldr	r2, [r3, #0]
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	3304      	adds	r3, #4
 800f09a:	4619      	mov	r1, r3
 800f09c:	4610      	mov	r0, r2
 800f09e:	f7fd fd56 	bl	800cb4e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f0a2:	697b      	ldr	r3, [r7, #20]
}
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	3718      	adds	r7, #24
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	bd80      	pop	{r7, pc}
 800f0ac:	240010fc 	.word	0x240010fc
 800f0b0:	240010f8 	.word	0x240010f8

0800f0b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f0b4:	b580      	push	{r7, lr}
 800f0b6:	b08e      	sub	sp, #56	@ 0x38
 800f0b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f0ba:	e0ce      	b.n	800f25a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	da19      	bge.n	800f0f6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f0c2:	1d3b      	adds	r3, r7, #4
 800f0c4:	3304      	adds	r3, #4
 800f0c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f0c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d10b      	bne.n	800f0e6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800f0ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0d2:	f383 8811 	msr	BASEPRI, r3
 800f0d6:	f3bf 8f6f 	isb	sy
 800f0da:	f3bf 8f4f 	dsb	sy
 800f0de:	61fb      	str	r3, [r7, #28]
}
 800f0e0:	bf00      	nop
 800f0e2:	bf00      	nop
 800f0e4:	e7fd      	b.n	800f0e2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f0e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f0ec:	6850      	ldr	r0, [r2, #4]
 800f0ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f0f0:	6892      	ldr	r2, [r2, #8]
 800f0f2:	4611      	mov	r1, r2
 800f0f4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	f2c0 80ae 	blt.w	800f25a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f104:	695b      	ldr	r3, [r3, #20]
 800f106:	2b00      	cmp	r3, #0
 800f108:	d004      	beq.n	800f114 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f10a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f10c:	3304      	adds	r3, #4
 800f10e:	4618      	mov	r0, r3
 800f110:	f7fd fd56 	bl	800cbc0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f114:	463b      	mov	r3, r7
 800f116:	4618      	mov	r0, r3
 800f118:	f7ff ff6a 	bl	800eff0 <prvSampleTimeNow>
 800f11c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	2b09      	cmp	r3, #9
 800f122:	f200 8097 	bhi.w	800f254 <prvProcessReceivedCommands+0x1a0>
 800f126:	a201      	add	r2, pc, #4	@ (adr r2, 800f12c <prvProcessReceivedCommands+0x78>)
 800f128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f12c:	0800f155 	.word	0x0800f155
 800f130:	0800f155 	.word	0x0800f155
 800f134:	0800f155 	.word	0x0800f155
 800f138:	0800f1cb 	.word	0x0800f1cb
 800f13c:	0800f1df 	.word	0x0800f1df
 800f140:	0800f22b 	.word	0x0800f22b
 800f144:	0800f155 	.word	0x0800f155
 800f148:	0800f155 	.word	0x0800f155
 800f14c:	0800f1cb 	.word	0x0800f1cb
 800f150:	0800f1df 	.word	0x0800f1df
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f156:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f15a:	f043 0301 	orr.w	r3, r3, #1
 800f15e:	b2da      	uxtb	r2, r3
 800f160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f162:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f166:	68ba      	ldr	r2, [r7, #8]
 800f168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f16a:	699b      	ldr	r3, [r3, #24]
 800f16c:	18d1      	adds	r1, r2, r3
 800f16e:	68bb      	ldr	r3, [r7, #8]
 800f170:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f172:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f174:	f7ff ff5c 	bl	800f030 <prvInsertTimerInActiveList>
 800f178:	4603      	mov	r3, r0
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d06c      	beq.n	800f258 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f17e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f180:	6a1b      	ldr	r3, [r3, #32]
 800f182:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f184:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f188:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f18c:	f003 0304 	and.w	r3, r3, #4
 800f190:	2b00      	cmp	r3, #0
 800f192:	d061      	beq.n	800f258 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f194:	68ba      	ldr	r2, [r7, #8]
 800f196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f198:	699b      	ldr	r3, [r3, #24]
 800f19a:	441a      	add	r2, r3
 800f19c:	2300      	movs	r3, #0
 800f19e:	9300      	str	r3, [sp, #0]
 800f1a0:	2300      	movs	r3, #0
 800f1a2:	2100      	movs	r1, #0
 800f1a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f1a6:	f7ff fe01 	bl	800edac <xTimerGenericCommand>
 800f1aa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f1ac:	6a3b      	ldr	r3, [r7, #32]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d152      	bne.n	800f258 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800f1b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1b6:	f383 8811 	msr	BASEPRI, r3
 800f1ba:	f3bf 8f6f 	isb	sy
 800f1be:	f3bf 8f4f 	dsb	sy
 800f1c2:	61bb      	str	r3, [r7, #24]
}
 800f1c4:	bf00      	nop
 800f1c6:	bf00      	nop
 800f1c8:	e7fd      	b.n	800f1c6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f1ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f1d0:	f023 0301 	bic.w	r3, r3, #1
 800f1d4:	b2da      	uxtb	r2, r3
 800f1d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1d8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f1dc:	e03d      	b.n	800f25a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f1de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f1e4:	f043 0301 	orr.w	r3, r3, #1
 800f1e8:	b2da      	uxtb	r2, r3
 800f1ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1ec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f1f0:	68ba      	ldr	r2, [r7, #8]
 800f1f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1f4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f1f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1f8:	699b      	ldr	r3, [r3, #24]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d10b      	bne.n	800f216 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800f1fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f202:	f383 8811 	msr	BASEPRI, r3
 800f206:	f3bf 8f6f 	isb	sy
 800f20a:	f3bf 8f4f 	dsb	sy
 800f20e:	617b      	str	r3, [r7, #20]
}
 800f210:	bf00      	nop
 800f212:	bf00      	nop
 800f214:	e7fd      	b.n	800f212 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f218:	699a      	ldr	r2, [r3, #24]
 800f21a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f21c:	18d1      	adds	r1, r2, r3
 800f21e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f220:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f222:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f224:	f7ff ff04 	bl	800f030 <prvInsertTimerInActiveList>
					break;
 800f228:	e017      	b.n	800f25a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f22a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f22c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f230:	f003 0302 	and.w	r3, r3, #2
 800f234:	2b00      	cmp	r3, #0
 800f236:	d103      	bne.n	800f240 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800f238:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f23a:	f000 fcc9 	bl	800fbd0 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f23e:	e00c      	b.n	800f25a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f242:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f246:	f023 0301 	bic.w	r3, r3, #1
 800f24a:	b2da      	uxtb	r2, r3
 800f24c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f24e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f252:	e002      	b.n	800f25a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800f254:	bf00      	nop
 800f256:	e000      	b.n	800f25a <prvProcessReceivedCommands+0x1a6>
					break;
 800f258:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f25a:	4b08      	ldr	r3, [pc, #32]	@ (800f27c <prvProcessReceivedCommands+0x1c8>)
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	1d39      	adds	r1, r7, #4
 800f260:	2200      	movs	r2, #0
 800f262:	4618      	mov	r0, r3
 800f264:	f7fe f880 	bl	800d368 <xQueueReceive>
 800f268:	4603      	mov	r3, r0
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	f47f af26 	bne.w	800f0bc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800f270:	bf00      	nop
 800f272:	bf00      	nop
 800f274:	3730      	adds	r7, #48	@ 0x30
 800f276:	46bd      	mov	sp, r7
 800f278:	bd80      	pop	{r7, pc}
 800f27a:	bf00      	nop
 800f27c:	24001100 	.word	0x24001100

0800f280 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f280:	b580      	push	{r7, lr}
 800f282:	b088      	sub	sp, #32
 800f284:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f286:	e049      	b.n	800f31c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f288:	4b2e      	ldr	r3, [pc, #184]	@ (800f344 <prvSwitchTimerLists+0xc4>)
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	68db      	ldr	r3, [r3, #12]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f292:	4b2c      	ldr	r3, [pc, #176]	@ (800f344 <prvSwitchTimerLists+0xc4>)
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	68db      	ldr	r3, [r3, #12]
 800f298:	68db      	ldr	r3, [r3, #12]
 800f29a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	3304      	adds	r3, #4
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	f7fd fc8d 	bl	800cbc0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	6a1b      	ldr	r3, [r3, #32]
 800f2aa:	68f8      	ldr	r0, [r7, #12]
 800f2ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f2b4:	f003 0304 	and.w	r3, r3, #4
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d02f      	beq.n	800f31c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	699b      	ldr	r3, [r3, #24]
 800f2c0:	693a      	ldr	r2, [r7, #16]
 800f2c2:	4413      	add	r3, r2
 800f2c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f2c6:	68ba      	ldr	r2, [r7, #8]
 800f2c8:	693b      	ldr	r3, [r7, #16]
 800f2ca:	429a      	cmp	r2, r3
 800f2cc:	d90e      	bls.n	800f2ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	68ba      	ldr	r2, [r7, #8]
 800f2d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	68fa      	ldr	r2, [r7, #12]
 800f2d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f2da:	4b1a      	ldr	r3, [pc, #104]	@ (800f344 <prvSwitchTimerLists+0xc4>)
 800f2dc:	681a      	ldr	r2, [r3, #0]
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	3304      	adds	r3, #4
 800f2e2:	4619      	mov	r1, r3
 800f2e4:	4610      	mov	r0, r2
 800f2e6:	f7fd fc32 	bl	800cb4e <vListInsert>
 800f2ea:	e017      	b.n	800f31c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	9300      	str	r3, [sp, #0]
 800f2f0:	2300      	movs	r3, #0
 800f2f2:	693a      	ldr	r2, [r7, #16]
 800f2f4:	2100      	movs	r1, #0
 800f2f6:	68f8      	ldr	r0, [r7, #12]
 800f2f8:	f7ff fd58 	bl	800edac <xTimerGenericCommand>
 800f2fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	2b00      	cmp	r3, #0
 800f302:	d10b      	bne.n	800f31c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800f304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f308:	f383 8811 	msr	BASEPRI, r3
 800f30c:	f3bf 8f6f 	isb	sy
 800f310:	f3bf 8f4f 	dsb	sy
 800f314:	603b      	str	r3, [r7, #0]
}
 800f316:	bf00      	nop
 800f318:	bf00      	nop
 800f31a:	e7fd      	b.n	800f318 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f31c:	4b09      	ldr	r3, [pc, #36]	@ (800f344 <prvSwitchTimerLists+0xc4>)
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d1b0      	bne.n	800f288 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f326:	4b07      	ldr	r3, [pc, #28]	@ (800f344 <prvSwitchTimerLists+0xc4>)
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f32c:	4b06      	ldr	r3, [pc, #24]	@ (800f348 <prvSwitchTimerLists+0xc8>)
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	4a04      	ldr	r2, [pc, #16]	@ (800f344 <prvSwitchTimerLists+0xc4>)
 800f332:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f334:	4a04      	ldr	r2, [pc, #16]	@ (800f348 <prvSwitchTimerLists+0xc8>)
 800f336:	697b      	ldr	r3, [r7, #20]
 800f338:	6013      	str	r3, [r2, #0]
}
 800f33a:	bf00      	nop
 800f33c:	3718      	adds	r7, #24
 800f33e:	46bd      	mov	sp, r7
 800f340:	bd80      	pop	{r7, pc}
 800f342:	bf00      	nop
 800f344:	240010f8 	.word	0x240010f8
 800f348:	240010fc 	.word	0x240010fc

0800f34c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f34c:	b580      	push	{r7, lr}
 800f34e:	b082      	sub	sp, #8
 800f350:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f352:	f000 f969 	bl	800f628 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f356:	4b15      	ldr	r3, [pc, #84]	@ (800f3ac <prvCheckForValidListAndQueue+0x60>)
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d120      	bne.n	800f3a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f35e:	4814      	ldr	r0, [pc, #80]	@ (800f3b0 <prvCheckForValidListAndQueue+0x64>)
 800f360:	f7fd fba4 	bl	800caac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f364:	4813      	ldr	r0, [pc, #76]	@ (800f3b4 <prvCheckForValidListAndQueue+0x68>)
 800f366:	f7fd fba1 	bl	800caac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f36a:	4b13      	ldr	r3, [pc, #76]	@ (800f3b8 <prvCheckForValidListAndQueue+0x6c>)
 800f36c:	4a10      	ldr	r2, [pc, #64]	@ (800f3b0 <prvCheckForValidListAndQueue+0x64>)
 800f36e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f370:	4b12      	ldr	r3, [pc, #72]	@ (800f3bc <prvCheckForValidListAndQueue+0x70>)
 800f372:	4a10      	ldr	r2, [pc, #64]	@ (800f3b4 <prvCheckForValidListAndQueue+0x68>)
 800f374:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f376:	2300      	movs	r3, #0
 800f378:	9300      	str	r3, [sp, #0]
 800f37a:	4b11      	ldr	r3, [pc, #68]	@ (800f3c0 <prvCheckForValidListAndQueue+0x74>)
 800f37c:	4a11      	ldr	r2, [pc, #68]	@ (800f3c4 <prvCheckForValidListAndQueue+0x78>)
 800f37e:	2110      	movs	r1, #16
 800f380:	200a      	movs	r0, #10
 800f382:	f7fd fcb1 	bl	800cce8 <xQueueGenericCreateStatic>
 800f386:	4603      	mov	r3, r0
 800f388:	4a08      	ldr	r2, [pc, #32]	@ (800f3ac <prvCheckForValidListAndQueue+0x60>)
 800f38a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f38c:	4b07      	ldr	r3, [pc, #28]	@ (800f3ac <prvCheckForValidListAndQueue+0x60>)
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d005      	beq.n	800f3a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f394:	4b05      	ldr	r3, [pc, #20]	@ (800f3ac <prvCheckForValidListAndQueue+0x60>)
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	490b      	ldr	r1, [pc, #44]	@ (800f3c8 <prvCheckForValidListAndQueue+0x7c>)
 800f39a:	4618      	mov	r0, r3
 800f39c:	f7fe fb42 	bl	800da24 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f3a0:	f000 f974 	bl	800f68c <vPortExitCritical>
}
 800f3a4:	bf00      	nop
 800f3a6:	46bd      	mov	sp, r7
 800f3a8:	bd80      	pop	{r7, pc}
 800f3aa:	bf00      	nop
 800f3ac:	24001100 	.word	0x24001100
 800f3b0:	240010d0 	.word	0x240010d0
 800f3b4:	240010e4 	.word	0x240010e4
 800f3b8:	240010f8 	.word	0x240010f8
 800f3bc:	240010fc 	.word	0x240010fc
 800f3c0:	240011ac 	.word	0x240011ac
 800f3c4:	2400110c 	.word	0x2400110c
 800f3c8:	08014af8 	.word	0x08014af8

0800f3cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f3cc:	b480      	push	{r7}
 800f3ce:	b085      	sub	sp, #20
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	60f8      	str	r0, [r7, #12]
 800f3d4:	60b9      	str	r1, [r7, #8]
 800f3d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	3b04      	subs	r3, #4
 800f3dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800f3e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	3b04      	subs	r3, #4
 800f3ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f3ec:	68bb      	ldr	r3, [r7, #8]
 800f3ee:	f023 0201 	bic.w	r2, r3, #1
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	3b04      	subs	r3, #4
 800f3fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f3fc:	4a0c      	ldr	r2, [pc, #48]	@ (800f430 <pxPortInitialiseStack+0x64>)
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	3b14      	subs	r3, #20
 800f406:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f408:	687a      	ldr	r2, [r7, #4]
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	3b04      	subs	r3, #4
 800f412:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	f06f 0202 	mvn.w	r2, #2
 800f41a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	3b20      	subs	r3, #32
 800f420:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f422:	68fb      	ldr	r3, [r7, #12]
}
 800f424:	4618      	mov	r0, r3
 800f426:	3714      	adds	r7, #20
 800f428:	46bd      	mov	sp, r7
 800f42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f42e:	4770      	bx	lr
 800f430:	0800f435 	.word	0x0800f435

0800f434 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f434:	b480      	push	{r7}
 800f436:	b085      	sub	sp, #20
 800f438:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f43a:	2300      	movs	r3, #0
 800f43c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f43e:	4b13      	ldr	r3, [pc, #76]	@ (800f48c <prvTaskExitError+0x58>)
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f446:	d00b      	beq.n	800f460 <prvTaskExitError+0x2c>
	__asm volatile
 800f448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f44c:	f383 8811 	msr	BASEPRI, r3
 800f450:	f3bf 8f6f 	isb	sy
 800f454:	f3bf 8f4f 	dsb	sy
 800f458:	60fb      	str	r3, [r7, #12]
}
 800f45a:	bf00      	nop
 800f45c:	bf00      	nop
 800f45e:	e7fd      	b.n	800f45c <prvTaskExitError+0x28>
	__asm volatile
 800f460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f464:	f383 8811 	msr	BASEPRI, r3
 800f468:	f3bf 8f6f 	isb	sy
 800f46c:	f3bf 8f4f 	dsb	sy
 800f470:	60bb      	str	r3, [r7, #8]
}
 800f472:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f474:	bf00      	nop
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d0fc      	beq.n	800f476 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f47c:	bf00      	nop
 800f47e:	bf00      	nop
 800f480:	3714      	adds	r7, #20
 800f482:	46bd      	mov	sp, r7
 800f484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f488:	4770      	bx	lr
 800f48a:	bf00      	nop
 800f48c:	24000010 	.word	0x24000010

0800f490 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f490:	4b07      	ldr	r3, [pc, #28]	@ (800f4b0 <pxCurrentTCBConst2>)
 800f492:	6819      	ldr	r1, [r3, #0]
 800f494:	6808      	ldr	r0, [r1, #0]
 800f496:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f49a:	f380 8809 	msr	PSP, r0
 800f49e:	f3bf 8f6f 	isb	sy
 800f4a2:	f04f 0000 	mov.w	r0, #0
 800f4a6:	f380 8811 	msr	BASEPRI, r0
 800f4aa:	4770      	bx	lr
 800f4ac:	f3af 8000 	nop.w

0800f4b0 <pxCurrentTCBConst2>:
 800f4b0:	24000bd0 	.word	0x24000bd0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f4b4:	bf00      	nop
 800f4b6:	bf00      	nop

0800f4b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f4b8:	4808      	ldr	r0, [pc, #32]	@ (800f4dc <prvPortStartFirstTask+0x24>)
 800f4ba:	6800      	ldr	r0, [r0, #0]
 800f4bc:	6800      	ldr	r0, [r0, #0]
 800f4be:	f380 8808 	msr	MSP, r0
 800f4c2:	f04f 0000 	mov.w	r0, #0
 800f4c6:	f380 8814 	msr	CONTROL, r0
 800f4ca:	b662      	cpsie	i
 800f4cc:	b661      	cpsie	f
 800f4ce:	f3bf 8f4f 	dsb	sy
 800f4d2:	f3bf 8f6f 	isb	sy
 800f4d6:	df00      	svc	0
 800f4d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f4da:	bf00      	nop
 800f4dc:	e000ed08 	.word	0xe000ed08

0800f4e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f4e0:	b580      	push	{r7, lr}
 800f4e2:	b086      	sub	sp, #24
 800f4e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f4e6:	4b47      	ldr	r3, [pc, #284]	@ (800f604 <xPortStartScheduler+0x124>)
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	4a47      	ldr	r2, [pc, #284]	@ (800f608 <xPortStartScheduler+0x128>)
 800f4ec:	4293      	cmp	r3, r2
 800f4ee:	d10b      	bne.n	800f508 <xPortStartScheduler+0x28>
	__asm volatile
 800f4f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4f4:	f383 8811 	msr	BASEPRI, r3
 800f4f8:	f3bf 8f6f 	isb	sy
 800f4fc:	f3bf 8f4f 	dsb	sy
 800f500:	613b      	str	r3, [r7, #16]
}
 800f502:	bf00      	nop
 800f504:	bf00      	nop
 800f506:	e7fd      	b.n	800f504 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f508:	4b3e      	ldr	r3, [pc, #248]	@ (800f604 <xPortStartScheduler+0x124>)
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	4a3f      	ldr	r2, [pc, #252]	@ (800f60c <xPortStartScheduler+0x12c>)
 800f50e:	4293      	cmp	r3, r2
 800f510:	d10b      	bne.n	800f52a <xPortStartScheduler+0x4a>
	__asm volatile
 800f512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f516:	f383 8811 	msr	BASEPRI, r3
 800f51a:	f3bf 8f6f 	isb	sy
 800f51e:	f3bf 8f4f 	dsb	sy
 800f522:	60fb      	str	r3, [r7, #12]
}
 800f524:	bf00      	nop
 800f526:	bf00      	nop
 800f528:	e7fd      	b.n	800f526 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f52a:	4b39      	ldr	r3, [pc, #228]	@ (800f610 <xPortStartScheduler+0x130>)
 800f52c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f52e:	697b      	ldr	r3, [r7, #20]
 800f530:	781b      	ldrb	r3, [r3, #0]
 800f532:	b2db      	uxtb	r3, r3
 800f534:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f536:	697b      	ldr	r3, [r7, #20]
 800f538:	22ff      	movs	r2, #255	@ 0xff
 800f53a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f53c:	697b      	ldr	r3, [r7, #20]
 800f53e:	781b      	ldrb	r3, [r3, #0]
 800f540:	b2db      	uxtb	r3, r3
 800f542:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f544:	78fb      	ldrb	r3, [r7, #3]
 800f546:	b2db      	uxtb	r3, r3
 800f548:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800f54c:	b2da      	uxtb	r2, r3
 800f54e:	4b31      	ldr	r3, [pc, #196]	@ (800f614 <xPortStartScheduler+0x134>)
 800f550:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f552:	4b31      	ldr	r3, [pc, #196]	@ (800f618 <xPortStartScheduler+0x138>)
 800f554:	2207      	movs	r2, #7
 800f556:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f558:	e009      	b.n	800f56e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800f55a:	4b2f      	ldr	r3, [pc, #188]	@ (800f618 <xPortStartScheduler+0x138>)
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	3b01      	subs	r3, #1
 800f560:	4a2d      	ldr	r2, [pc, #180]	@ (800f618 <xPortStartScheduler+0x138>)
 800f562:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f564:	78fb      	ldrb	r3, [r7, #3]
 800f566:	b2db      	uxtb	r3, r3
 800f568:	005b      	lsls	r3, r3, #1
 800f56a:	b2db      	uxtb	r3, r3
 800f56c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f56e:	78fb      	ldrb	r3, [r7, #3]
 800f570:	b2db      	uxtb	r3, r3
 800f572:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f576:	2b80      	cmp	r3, #128	@ 0x80
 800f578:	d0ef      	beq.n	800f55a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f57a:	4b27      	ldr	r3, [pc, #156]	@ (800f618 <xPortStartScheduler+0x138>)
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	f1c3 0307 	rsb	r3, r3, #7
 800f582:	2b04      	cmp	r3, #4
 800f584:	d00b      	beq.n	800f59e <xPortStartScheduler+0xbe>
	__asm volatile
 800f586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f58a:	f383 8811 	msr	BASEPRI, r3
 800f58e:	f3bf 8f6f 	isb	sy
 800f592:	f3bf 8f4f 	dsb	sy
 800f596:	60bb      	str	r3, [r7, #8]
}
 800f598:	bf00      	nop
 800f59a:	bf00      	nop
 800f59c:	e7fd      	b.n	800f59a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f59e:	4b1e      	ldr	r3, [pc, #120]	@ (800f618 <xPortStartScheduler+0x138>)
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	021b      	lsls	r3, r3, #8
 800f5a4:	4a1c      	ldr	r2, [pc, #112]	@ (800f618 <xPortStartScheduler+0x138>)
 800f5a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f5a8:	4b1b      	ldr	r3, [pc, #108]	@ (800f618 <xPortStartScheduler+0x138>)
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f5b0:	4a19      	ldr	r2, [pc, #100]	@ (800f618 <xPortStartScheduler+0x138>)
 800f5b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	b2da      	uxtb	r2, r3
 800f5b8:	697b      	ldr	r3, [r7, #20]
 800f5ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f5bc:	4b17      	ldr	r3, [pc, #92]	@ (800f61c <xPortStartScheduler+0x13c>)
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	4a16      	ldr	r2, [pc, #88]	@ (800f61c <xPortStartScheduler+0x13c>)
 800f5c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f5c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f5c8:	4b14      	ldr	r3, [pc, #80]	@ (800f61c <xPortStartScheduler+0x13c>)
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	4a13      	ldr	r2, [pc, #76]	@ (800f61c <xPortStartScheduler+0x13c>)
 800f5ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800f5d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f5d4:	f000 f9a6 	bl	800f924 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f5d8:	4b11      	ldr	r3, [pc, #68]	@ (800f620 <xPortStartScheduler+0x140>)
 800f5da:	2200      	movs	r2, #0
 800f5dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f5de:	f000 f9dd 	bl	800f99c <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f5e2:	4b10      	ldr	r3, [pc, #64]	@ (800f624 <xPortStartScheduler+0x144>)
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	4a0f      	ldr	r2, [pc, #60]	@ (800f624 <xPortStartScheduler+0x144>)
 800f5e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800f5ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f5ee:	f7ff ff63 	bl	800f4b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f5f2:	f7fe fed9 	bl	800e3a8 <vTaskSwitchContext>
	prvTaskExitError();
 800f5f6:	f7ff ff1d 	bl	800f434 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f5fa:	2300      	movs	r3, #0
}
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	3718      	adds	r7, #24
 800f600:	46bd      	mov	sp, r7
 800f602:	bd80      	pop	{r7, pc}
 800f604:	e000ed00 	.word	0xe000ed00
 800f608:	410fc271 	.word	0x410fc271
 800f60c:	410fc270 	.word	0x410fc270
 800f610:	e000e400 	.word	0xe000e400
 800f614:	24001208 	.word	0x24001208
 800f618:	2400120c 	.word	0x2400120c
 800f61c:	e000ed20 	.word	0xe000ed20
 800f620:	24000010 	.word	0x24000010
 800f624:	e000ef34 	.word	0xe000ef34

0800f628 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f628:	b480      	push	{r7}
 800f62a:	b083      	sub	sp, #12
 800f62c:	af00      	add	r7, sp, #0
	__asm volatile
 800f62e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f632:	f383 8811 	msr	BASEPRI, r3
 800f636:	f3bf 8f6f 	isb	sy
 800f63a:	f3bf 8f4f 	dsb	sy
 800f63e:	607b      	str	r3, [r7, #4]
}
 800f640:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f642:	4b10      	ldr	r3, [pc, #64]	@ (800f684 <vPortEnterCritical+0x5c>)
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	3301      	adds	r3, #1
 800f648:	4a0e      	ldr	r2, [pc, #56]	@ (800f684 <vPortEnterCritical+0x5c>)
 800f64a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f64c:	4b0d      	ldr	r3, [pc, #52]	@ (800f684 <vPortEnterCritical+0x5c>)
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	2b01      	cmp	r3, #1
 800f652:	d110      	bne.n	800f676 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f654:	4b0c      	ldr	r3, [pc, #48]	@ (800f688 <vPortEnterCritical+0x60>)
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	b2db      	uxtb	r3, r3
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d00b      	beq.n	800f676 <vPortEnterCritical+0x4e>
	__asm volatile
 800f65e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f662:	f383 8811 	msr	BASEPRI, r3
 800f666:	f3bf 8f6f 	isb	sy
 800f66a:	f3bf 8f4f 	dsb	sy
 800f66e:	603b      	str	r3, [r7, #0]
}
 800f670:	bf00      	nop
 800f672:	bf00      	nop
 800f674:	e7fd      	b.n	800f672 <vPortEnterCritical+0x4a>
	}
}
 800f676:	bf00      	nop
 800f678:	370c      	adds	r7, #12
 800f67a:	46bd      	mov	sp, r7
 800f67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f680:	4770      	bx	lr
 800f682:	bf00      	nop
 800f684:	24000010 	.word	0x24000010
 800f688:	e000ed04 	.word	0xe000ed04

0800f68c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f68c:	b480      	push	{r7}
 800f68e:	b083      	sub	sp, #12
 800f690:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f692:	4b12      	ldr	r3, [pc, #72]	@ (800f6dc <vPortExitCritical+0x50>)
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	2b00      	cmp	r3, #0
 800f698:	d10b      	bne.n	800f6b2 <vPortExitCritical+0x26>
	__asm volatile
 800f69a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f69e:	f383 8811 	msr	BASEPRI, r3
 800f6a2:	f3bf 8f6f 	isb	sy
 800f6a6:	f3bf 8f4f 	dsb	sy
 800f6aa:	607b      	str	r3, [r7, #4]
}
 800f6ac:	bf00      	nop
 800f6ae:	bf00      	nop
 800f6b0:	e7fd      	b.n	800f6ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f6b2:	4b0a      	ldr	r3, [pc, #40]	@ (800f6dc <vPortExitCritical+0x50>)
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	3b01      	subs	r3, #1
 800f6b8:	4a08      	ldr	r2, [pc, #32]	@ (800f6dc <vPortExitCritical+0x50>)
 800f6ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f6bc:	4b07      	ldr	r3, [pc, #28]	@ (800f6dc <vPortExitCritical+0x50>)
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d105      	bne.n	800f6d0 <vPortExitCritical+0x44>
 800f6c4:	2300      	movs	r3, #0
 800f6c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f6c8:	683b      	ldr	r3, [r7, #0]
 800f6ca:	f383 8811 	msr	BASEPRI, r3
}
 800f6ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f6d0:	bf00      	nop
 800f6d2:	370c      	adds	r7, #12
 800f6d4:	46bd      	mov	sp, r7
 800f6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6da:	4770      	bx	lr
 800f6dc:	24000010 	.word	0x24000010

0800f6e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f6e0:	f3ef 8009 	mrs	r0, PSP
 800f6e4:	f3bf 8f6f 	isb	sy
 800f6e8:	4b15      	ldr	r3, [pc, #84]	@ (800f740 <pxCurrentTCBConst>)
 800f6ea:	681a      	ldr	r2, [r3, #0]
 800f6ec:	f01e 0f10 	tst.w	lr, #16
 800f6f0:	bf08      	it	eq
 800f6f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f6f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6fa:	6010      	str	r0, [r2, #0]
 800f6fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f700:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800f704:	f380 8811 	msr	BASEPRI, r0
 800f708:	f3bf 8f4f 	dsb	sy
 800f70c:	f3bf 8f6f 	isb	sy
 800f710:	f7fe fe4a 	bl	800e3a8 <vTaskSwitchContext>
 800f714:	f04f 0000 	mov.w	r0, #0
 800f718:	f380 8811 	msr	BASEPRI, r0
 800f71c:	bc09      	pop	{r0, r3}
 800f71e:	6819      	ldr	r1, [r3, #0]
 800f720:	6808      	ldr	r0, [r1, #0]
 800f722:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f726:	f01e 0f10 	tst.w	lr, #16
 800f72a:	bf08      	it	eq
 800f72c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f730:	f380 8809 	msr	PSP, r0
 800f734:	f3bf 8f6f 	isb	sy
 800f738:	4770      	bx	lr
 800f73a:	bf00      	nop
 800f73c:	f3af 8000 	nop.w

0800f740 <pxCurrentTCBConst>:
 800f740:	24000bd0 	.word	0x24000bd0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f744:	bf00      	nop
 800f746:	bf00      	nop

0800f748 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f748:	b580      	push	{r7, lr}
 800f74a:	b082      	sub	sp, #8
 800f74c:	af00      	add	r7, sp, #0
	__asm volatile
 800f74e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f752:	f383 8811 	msr	BASEPRI, r3
 800f756:	f3bf 8f6f 	isb	sy
 800f75a:	f3bf 8f4f 	dsb	sy
 800f75e:	607b      	str	r3, [r7, #4]
}
 800f760:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f762:	f7fe fd67 	bl	800e234 <xTaskIncrementTick>
 800f766:	4603      	mov	r3, r0
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d003      	beq.n	800f774 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f76c:	4b06      	ldr	r3, [pc, #24]	@ (800f788 <xPortSysTickHandler+0x40>)
 800f76e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f772:	601a      	str	r2, [r3, #0]
 800f774:	2300      	movs	r3, #0
 800f776:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f778:	683b      	ldr	r3, [r7, #0]
 800f77a:	f383 8811 	msr	BASEPRI, r3
}
 800f77e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f780:	bf00      	nop
 800f782:	3708      	adds	r7, #8
 800f784:	46bd      	mov	sp, r7
 800f786:	bd80      	pop	{r7, pc}
 800f788:	e000ed04 	.word	0xe000ed04

0800f78c <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 800f78c:	b580      	push	{r7, lr}
 800f78e:	b088      	sub	sp, #32
 800f790:	af00      	add	r7, sp, #0
 800f792:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 800f794:	4b5d      	ldr	r3, [pc, #372]	@ (800f90c <vPortSuppressTicksAndSleep+0x180>)
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	687a      	ldr	r2, [r7, #4]
 800f79a:	429a      	cmp	r2, r3
 800f79c:	d902      	bls.n	800f7a4 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 800f79e:	4b5b      	ldr	r3, [pc, #364]	@ (800f90c <vPortSuppressTicksAndSleep+0x180>)
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 800f7a4:	4b5a      	ldr	r3, [pc, #360]	@ (800f910 <vPortSuppressTicksAndSleep+0x184>)
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	4a59      	ldr	r2, [pc, #356]	@ (800f910 <vPortSuppressTicksAndSleep+0x184>)
 800f7aa:	f023 0301 	bic.w	r3, r3, #1
 800f7ae:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 800f7b0:	4b58      	ldr	r3, [pc, #352]	@ (800f914 <vPortSuppressTicksAndSleep+0x188>)
 800f7b2:	681a      	ldr	r2, [r3, #0]
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	3b01      	subs	r3, #1
 800f7b8:	4957      	ldr	r1, [pc, #348]	@ (800f918 <vPortSuppressTicksAndSleep+0x18c>)
 800f7ba:	6809      	ldr	r1, [r1, #0]
 800f7bc:	fb01 f303 	mul.w	r3, r1, r3
 800f7c0:	4413      	add	r3, r2
 800f7c2:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 800f7c4:	4b55      	ldr	r3, [pc, #340]	@ (800f91c <vPortSuppressTicksAndSleep+0x190>)
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	69fa      	ldr	r2, [r7, #28]
 800f7ca:	429a      	cmp	r2, r3
 800f7cc:	d904      	bls.n	800f7d8 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 800f7ce:	4b53      	ldr	r3, [pc, #332]	@ (800f91c <vPortSuppressTicksAndSleep+0x190>)
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	69fa      	ldr	r2, [r7, #28]
 800f7d4:	1ad3      	subs	r3, r2, r3
 800f7d6:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 800f7d8:	b672      	cpsid	i
		__asm volatile( "dsb" );
 800f7da:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 800f7de:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 800f7e2:	f7fe ffc5 	bl	800e770 <eTaskConfirmSleepModeStatus>
 800f7e6:	4603      	mov	r3, r0
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d110      	bne.n	800f80e <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800f7ec:	4b49      	ldr	r3, [pc, #292]	@ (800f914 <vPortSuppressTicksAndSleep+0x188>)
 800f7ee:	4a4c      	ldr	r2, [pc, #304]	@ (800f920 <vPortSuppressTicksAndSleep+0x194>)
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800f7f4:	4b46      	ldr	r3, [pc, #280]	@ (800f910 <vPortSuppressTicksAndSleep+0x184>)
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	4a45      	ldr	r2, [pc, #276]	@ (800f910 <vPortSuppressTicksAndSleep+0x184>)
 800f7fa:	f043 0301 	orr.w	r3, r3, #1
 800f7fe:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800f800:	4b45      	ldr	r3, [pc, #276]	@ (800f918 <vPortSuppressTicksAndSleep+0x18c>)
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	4a46      	ldr	r2, [pc, #280]	@ (800f920 <vPortSuppressTicksAndSleep+0x194>)
 800f806:	3b01      	subs	r3, #1
 800f808:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 800f80a:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrupts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 800f80c:	e079      	b.n	800f902 <vPortSuppressTicksAndSleep+0x176>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 800f80e:	4a44      	ldr	r2, [pc, #272]	@ (800f920 <vPortSuppressTicksAndSleep+0x194>)
 800f810:	69fb      	ldr	r3, [r7, #28]
 800f812:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f814:	4b3f      	ldr	r3, [pc, #252]	@ (800f914 <vPortSuppressTicksAndSleep+0x188>)
 800f816:	2200      	movs	r2, #0
 800f818:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800f81a:	4b3d      	ldr	r3, [pc, #244]	@ (800f910 <vPortSuppressTicksAndSleep+0x184>)
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	4a3c      	ldr	r2, [pc, #240]	@ (800f910 <vPortSuppressTicksAndSleep+0x184>)
 800f820:	f043 0301 	orr.w	r3, r3, #1
 800f824:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	613b      	str	r3, [r7, #16]
			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 800f82a:	2300      	movs	r3, #0
 800f82c:	613b      	str	r3, [r7, #16]
 800f82e:	6938      	ldr	r0, [r7, #16]
 800f830:	f7f2 f870 	bl	8001914 <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 800f834:	693b      	ldr	r3, [r7, #16]
 800f836:	2b00      	cmp	r3, #0
 800f838:	d004      	beq.n	800f844 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 800f83a:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 800f83e:	bf30      	wfi
				__asm volatile( "isb" );
 800f840:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 800f844:	6878      	ldr	r0, [r7, #4]
 800f846:	f7f2 f86f 	bl	8001928 <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 800f84a:	b662      	cpsie	i
			__asm volatile( "dsb" );
 800f84c:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800f850:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 800f854:	b672      	cpsid	i
			__asm volatile( "dsb" );
 800f856:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800f85a:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 800f85e:	4b2c      	ldr	r3, [pc, #176]	@ (800f910 <vPortSuppressTicksAndSleep+0x184>)
 800f860:	2206      	movs	r2, #6
 800f862:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 800f864:	4b2a      	ldr	r3, [pc, #168]	@ (800f910 <vPortSuppressTicksAndSleep+0x184>)
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d01d      	beq.n	800f8ac <vPortSuppressTicksAndSleep+0x120>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 800f870:	4b29      	ldr	r3, [pc, #164]	@ (800f918 <vPortSuppressTicksAndSleep+0x18c>)
 800f872:	681a      	ldr	r2, [r3, #0]
 800f874:	4b27      	ldr	r3, [pc, #156]	@ (800f914 <vPortSuppressTicksAndSleep+0x188>)
 800f876:	6819      	ldr	r1, [r3, #0]
 800f878:	69fb      	ldr	r3, [r7, #28]
 800f87a:	1acb      	subs	r3, r1, r3
 800f87c:	4413      	add	r3, r2
 800f87e:	3b01      	subs	r3, #1
 800f880:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 800f882:	4b26      	ldr	r3, [pc, #152]	@ (800f91c <vPortSuppressTicksAndSleep+0x190>)
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	697a      	ldr	r2, [r7, #20]
 800f888:	429a      	cmp	r2, r3
 800f88a:	d304      	bcc.n	800f896 <vPortSuppressTicksAndSleep+0x10a>
 800f88c:	4b22      	ldr	r3, [pc, #136]	@ (800f918 <vPortSuppressTicksAndSleep+0x18c>)
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	697a      	ldr	r2, [r7, #20]
 800f892:	429a      	cmp	r2, r3
 800f894:	d903      	bls.n	800f89e <vPortSuppressTicksAndSleep+0x112>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 800f896:	4b20      	ldr	r3, [pc, #128]	@ (800f918 <vPortSuppressTicksAndSleep+0x18c>)
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	3b01      	subs	r3, #1
 800f89c:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 800f89e:	4a20      	ldr	r2, [pc, #128]	@ (800f920 <vPortSuppressTicksAndSleep+0x194>)
 800f8a0:	697b      	ldr	r3, [r7, #20]
 800f8a2:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	3b01      	subs	r3, #1
 800f8a8:	61bb      	str	r3, [r7, #24]
 800f8aa:	e018      	b.n	800f8de <vPortSuppressTicksAndSleep+0x152>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800f8ac:	4b1a      	ldr	r3, [pc, #104]	@ (800f918 <vPortSuppressTicksAndSleep+0x18c>)
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	687a      	ldr	r2, [r7, #4]
 800f8b2:	fb03 f202 	mul.w	r2, r3, r2
 800f8b6:	4b17      	ldr	r3, [pc, #92]	@ (800f914 <vPortSuppressTicksAndSleep+0x188>)
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	1ad3      	subs	r3, r2, r3
 800f8bc:	60fb      	str	r3, [r7, #12]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 800f8be:	4b16      	ldr	r3, [pc, #88]	@ (800f918 <vPortSuppressTicksAndSleep+0x18c>)
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	68fa      	ldr	r2, [r7, #12]
 800f8c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800f8c8:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 800f8ca:	69bb      	ldr	r3, [r7, #24]
 800f8cc:	3301      	adds	r3, #1
 800f8ce:	4a12      	ldr	r2, [pc, #72]	@ (800f918 <vPortSuppressTicksAndSleep+0x18c>)
 800f8d0:	6812      	ldr	r2, [r2, #0]
 800f8d2:	fb03 f202 	mul.w	r2, r3, r2
 800f8d6:	4912      	ldr	r1, [pc, #72]	@ (800f920 <vPortSuppressTicksAndSleep+0x194>)
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	1ad3      	subs	r3, r2, r3
 800f8dc:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f8de:	4b0d      	ldr	r3, [pc, #52]	@ (800f914 <vPortSuppressTicksAndSleep+0x188>)
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800f8e4:	4b0a      	ldr	r3, [pc, #40]	@ (800f910 <vPortSuppressTicksAndSleep+0x184>)
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	4a09      	ldr	r2, [pc, #36]	@ (800f910 <vPortSuppressTicksAndSleep+0x184>)
 800f8ea:	f043 0301 	orr.w	r3, r3, #1
 800f8ee:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 800f8f0:	69b8      	ldr	r0, [r7, #24]
 800f8f2:	f7fe fc77 	bl	800e1e4 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800f8f6:	4b08      	ldr	r3, [pc, #32]	@ (800f918 <vPortSuppressTicksAndSleep+0x18c>)
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	4a09      	ldr	r2, [pc, #36]	@ (800f920 <vPortSuppressTicksAndSleep+0x194>)
 800f8fc:	3b01      	subs	r3, #1
 800f8fe:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 800f900:	b662      	cpsie	i
	}
 800f902:	bf00      	nop
 800f904:	3720      	adds	r7, #32
 800f906:	46bd      	mov	sp, r7
 800f908:	bd80      	pop	{r7, pc}
 800f90a:	bf00      	nop
 800f90c:	24001200 	.word	0x24001200
 800f910:	e000e010 	.word	0xe000e010
 800f914:	e000e018 	.word	0xe000e018
 800f918:	240011fc 	.word	0x240011fc
 800f91c:	24001204 	.word	0x24001204
 800f920:	e000e014 	.word	0xe000e014

0800f924 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f924:	b480      	push	{r7}
 800f926:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 800f928:	4b14      	ldr	r3, [pc, #80]	@ (800f97c <vPortSetupTimerInterrupt+0x58>)
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	4a14      	ldr	r2, [pc, #80]	@ (800f980 <vPortSetupTimerInterrupt+0x5c>)
 800f92e:	fba2 2303 	umull	r2, r3, r2, r3
 800f932:	099b      	lsrs	r3, r3, #6
 800f934:	4a13      	ldr	r2, [pc, #76]	@ (800f984 <vPortSetupTimerInterrupt+0x60>)
 800f936:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 800f938:	4b12      	ldr	r3, [pc, #72]	@ (800f984 <vPortSetupTimerInterrupt+0x60>)
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800f940:	fbb2 f3f3 	udiv	r3, r2, r3
 800f944:	4a10      	ldr	r2, [pc, #64]	@ (800f988 <vPortSetupTimerInterrupt+0x64>)
 800f946:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 800f948:	4b10      	ldr	r3, [pc, #64]	@ (800f98c <vPortSetupTimerInterrupt+0x68>)
 800f94a:	222d      	movs	r2, #45	@ 0x2d
 800f94c:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f94e:	4b10      	ldr	r3, [pc, #64]	@ (800f990 <vPortSetupTimerInterrupt+0x6c>)
 800f950:	2200      	movs	r2, #0
 800f952:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f954:	4b0f      	ldr	r3, [pc, #60]	@ (800f994 <vPortSetupTimerInterrupt+0x70>)
 800f956:	2200      	movs	r2, #0
 800f958:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f95a:	4b08      	ldr	r3, [pc, #32]	@ (800f97c <vPortSetupTimerInterrupt+0x58>)
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	4a08      	ldr	r2, [pc, #32]	@ (800f980 <vPortSetupTimerInterrupt+0x5c>)
 800f960:	fba2 2303 	umull	r2, r3, r2, r3
 800f964:	099b      	lsrs	r3, r3, #6
 800f966:	4a0c      	ldr	r2, [pc, #48]	@ (800f998 <vPortSetupTimerInterrupt+0x74>)
 800f968:	3b01      	subs	r3, #1
 800f96a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f96c:	4b08      	ldr	r3, [pc, #32]	@ (800f990 <vPortSetupTimerInterrupt+0x6c>)
 800f96e:	2207      	movs	r2, #7
 800f970:	601a      	str	r2, [r3, #0]
}
 800f972:	bf00      	nop
 800f974:	46bd      	mov	sp, r7
 800f976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f97a:	4770      	bx	lr
 800f97c:	24000000 	.word	0x24000000
 800f980:	10624dd3 	.word	0x10624dd3
 800f984:	240011fc 	.word	0x240011fc
 800f988:	24001200 	.word	0x24001200
 800f98c:	24001204 	.word	0x24001204
 800f990:	e000e010 	.word	0xe000e010
 800f994:	e000e018 	.word	0xe000e018
 800f998:	e000e014 	.word	0xe000e014

0800f99c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f99c:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800f9ac <vPortEnableVFP+0x10>
 800f9a0:	6801      	ldr	r1, [r0, #0]
 800f9a2:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800f9a6:	6001      	str	r1, [r0, #0]
 800f9a8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f9aa:	bf00      	nop
 800f9ac:	e000ed88 	.word	0xe000ed88

0800f9b0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f9b0:	b480      	push	{r7}
 800f9b2:	b085      	sub	sp, #20
 800f9b4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f9b6:	f3ef 8305 	mrs	r3, IPSR
 800f9ba:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	2b0f      	cmp	r3, #15
 800f9c0:	d915      	bls.n	800f9ee <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f9c2:	4a18      	ldr	r2, [pc, #96]	@ (800fa24 <vPortValidateInterruptPriority+0x74>)
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	4413      	add	r3, r2
 800f9c8:	781b      	ldrb	r3, [r3, #0]
 800f9ca:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f9cc:	4b16      	ldr	r3, [pc, #88]	@ (800fa28 <vPortValidateInterruptPriority+0x78>)
 800f9ce:	781b      	ldrb	r3, [r3, #0]
 800f9d0:	7afa      	ldrb	r2, [r7, #11]
 800f9d2:	429a      	cmp	r2, r3
 800f9d4:	d20b      	bcs.n	800f9ee <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800f9d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9da:	f383 8811 	msr	BASEPRI, r3
 800f9de:	f3bf 8f6f 	isb	sy
 800f9e2:	f3bf 8f4f 	dsb	sy
 800f9e6:	607b      	str	r3, [r7, #4]
}
 800f9e8:	bf00      	nop
 800f9ea:	bf00      	nop
 800f9ec:	e7fd      	b.n	800f9ea <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f9ee:	4b0f      	ldr	r3, [pc, #60]	@ (800fa2c <vPortValidateInterruptPriority+0x7c>)
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800f9f6:	4b0e      	ldr	r3, [pc, #56]	@ (800fa30 <vPortValidateInterruptPriority+0x80>)
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	429a      	cmp	r2, r3
 800f9fc:	d90b      	bls.n	800fa16 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800f9fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa02:	f383 8811 	msr	BASEPRI, r3
 800fa06:	f3bf 8f6f 	isb	sy
 800fa0a:	f3bf 8f4f 	dsb	sy
 800fa0e:	603b      	str	r3, [r7, #0]
}
 800fa10:	bf00      	nop
 800fa12:	bf00      	nop
 800fa14:	e7fd      	b.n	800fa12 <vPortValidateInterruptPriority+0x62>
	}
 800fa16:	bf00      	nop
 800fa18:	3714      	adds	r7, #20
 800fa1a:	46bd      	mov	sp, r7
 800fa1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa20:	4770      	bx	lr
 800fa22:	bf00      	nop
 800fa24:	e000e3f0 	.word	0xe000e3f0
 800fa28:	24001208 	.word	0x24001208
 800fa2c:	e000ed0c 	.word	0xe000ed0c
 800fa30:	2400120c 	.word	0x2400120c

0800fa34 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b08a      	sub	sp, #40	@ 0x28
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fa40:	f7fe fadc 	bl	800dffc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fa44:	4b5c      	ldr	r3, [pc, #368]	@ (800fbb8 <pvPortMalloc+0x184>)
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d101      	bne.n	800fa50 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fa4c:	f000 f924 	bl	800fc98 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fa50:	4b5a      	ldr	r3, [pc, #360]	@ (800fbbc <pvPortMalloc+0x188>)
 800fa52:	681a      	ldr	r2, [r3, #0]
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	4013      	ands	r3, r2
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	f040 8095 	bne.w	800fb88 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d01e      	beq.n	800faa2 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800fa64:	2208      	movs	r2, #8
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	4413      	add	r3, r2
 800fa6a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	f003 0307 	and.w	r3, r3, #7
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d015      	beq.n	800faa2 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	f023 0307 	bic.w	r3, r3, #7
 800fa7c:	3308      	adds	r3, #8
 800fa7e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	f003 0307 	and.w	r3, r3, #7
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d00b      	beq.n	800faa2 <pvPortMalloc+0x6e>
	__asm volatile
 800fa8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa8e:	f383 8811 	msr	BASEPRI, r3
 800fa92:	f3bf 8f6f 	isb	sy
 800fa96:	f3bf 8f4f 	dsb	sy
 800fa9a:	617b      	str	r3, [r7, #20]
}
 800fa9c:	bf00      	nop
 800fa9e:	bf00      	nop
 800faa0:	e7fd      	b.n	800fa9e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d06f      	beq.n	800fb88 <pvPortMalloc+0x154>
 800faa8:	4b45      	ldr	r3, [pc, #276]	@ (800fbc0 <pvPortMalloc+0x18c>)
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	687a      	ldr	r2, [r7, #4]
 800faae:	429a      	cmp	r2, r3
 800fab0:	d86a      	bhi.n	800fb88 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fab2:	4b44      	ldr	r3, [pc, #272]	@ (800fbc4 <pvPortMalloc+0x190>)
 800fab4:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fab6:	4b43      	ldr	r3, [pc, #268]	@ (800fbc4 <pvPortMalloc+0x190>)
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fabc:	e004      	b.n	800fac8 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800fabe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fac0:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800faca:	685b      	ldr	r3, [r3, #4]
 800facc:	687a      	ldr	r2, [r7, #4]
 800face:	429a      	cmp	r2, r3
 800fad0:	d903      	bls.n	800fada <pvPortMalloc+0xa6>
 800fad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d1f1      	bne.n	800fabe <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fada:	4b37      	ldr	r3, [pc, #220]	@ (800fbb8 <pvPortMalloc+0x184>)
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fae0:	429a      	cmp	r2, r3
 800fae2:	d051      	beq.n	800fb88 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fae4:	6a3b      	ldr	r3, [r7, #32]
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	2208      	movs	r2, #8
 800faea:	4413      	add	r3, r2
 800faec:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800faee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800faf0:	681a      	ldr	r2, [r3, #0]
 800faf2:	6a3b      	ldr	r3, [r7, #32]
 800faf4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800faf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800faf8:	685a      	ldr	r2, [r3, #4]
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	1ad2      	subs	r2, r2, r3
 800fafe:	2308      	movs	r3, #8
 800fb00:	005b      	lsls	r3, r3, #1
 800fb02:	429a      	cmp	r2, r3
 800fb04:	d920      	bls.n	800fb48 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fb06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	4413      	add	r3, r2
 800fb0c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fb0e:	69bb      	ldr	r3, [r7, #24]
 800fb10:	f003 0307 	and.w	r3, r3, #7
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d00b      	beq.n	800fb30 <pvPortMalloc+0xfc>
	__asm volatile
 800fb18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb1c:	f383 8811 	msr	BASEPRI, r3
 800fb20:	f3bf 8f6f 	isb	sy
 800fb24:	f3bf 8f4f 	dsb	sy
 800fb28:	613b      	str	r3, [r7, #16]
}
 800fb2a:	bf00      	nop
 800fb2c:	bf00      	nop
 800fb2e:	e7fd      	b.n	800fb2c <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fb30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb32:	685a      	ldr	r2, [r3, #4]
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	1ad2      	subs	r2, r2, r3
 800fb38:	69bb      	ldr	r3, [r7, #24]
 800fb3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fb3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb3e:	687a      	ldr	r2, [r7, #4]
 800fb40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fb42:	69b8      	ldr	r0, [r7, #24]
 800fb44:	f000 f90a 	bl	800fd5c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fb48:	4b1d      	ldr	r3, [pc, #116]	@ (800fbc0 <pvPortMalloc+0x18c>)
 800fb4a:	681a      	ldr	r2, [r3, #0]
 800fb4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb4e:	685b      	ldr	r3, [r3, #4]
 800fb50:	1ad3      	subs	r3, r2, r3
 800fb52:	4a1b      	ldr	r2, [pc, #108]	@ (800fbc0 <pvPortMalloc+0x18c>)
 800fb54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fb56:	4b1a      	ldr	r3, [pc, #104]	@ (800fbc0 <pvPortMalloc+0x18c>)
 800fb58:	681a      	ldr	r2, [r3, #0]
 800fb5a:	4b1b      	ldr	r3, [pc, #108]	@ (800fbc8 <pvPortMalloc+0x194>)
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	429a      	cmp	r2, r3
 800fb60:	d203      	bcs.n	800fb6a <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fb62:	4b17      	ldr	r3, [pc, #92]	@ (800fbc0 <pvPortMalloc+0x18c>)
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	4a18      	ldr	r2, [pc, #96]	@ (800fbc8 <pvPortMalloc+0x194>)
 800fb68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fb6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb6c:	685a      	ldr	r2, [r3, #4]
 800fb6e:	4b13      	ldr	r3, [pc, #76]	@ (800fbbc <pvPortMalloc+0x188>)
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	431a      	orrs	r2, r3
 800fb74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fb78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb7a:	2200      	movs	r2, #0
 800fb7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800fb7e:	4b13      	ldr	r3, [pc, #76]	@ (800fbcc <pvPortMalloc+0x198>)
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	3301      	adds	r3, #1
 800fb84:	4a11      	ldr	r2, [pc, #68]	@ (800fbcc <pvPortMalloc+0x198>)
 800fb86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fb88:	f7fe fa7e 	bl	800e088 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fb8c:	69fb      	ldr	r3, [r7, #28]
 800fb8e:	f003 0307 	and.w	r3, r3, #7
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d00b      	beq.n	800fbae <pvPortMalloc+0x17a>
	__asm volatile
 800fb96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb9a:	f383 8811 	msr	BASEPRI, r3
 800fb9e:	f3bf 8f6f 	isb	sy
 800fba2:	f3bf 8f4f 	dsb	sy
 800fba6:	60fb      	str	r3, [r7, #12]
}
 800fba8:	bf00      	nop
 800fbaa:	bf00      	nop
 800fbac:	e7fd      	b.n	800fbaa <pvPortMalloc+0x176>
	return pvReturn;
 800fbae:	69fb      	ldr	r3, [r7, #28]
}
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	3728      	adds	r7, #40	@ 0x28
 800fbb4:	46bd      	mov	sp, r7
 800fbb6:	bd80      	pop	{r7, pc}
 800fbb8:	24004e18 	.word	0x24004e18
 800fbbc:	24004e2c 	.word	0x24004e2c
 800fbc0:	24004e1c 	.word	0x24004e1c
 800fbc4:	24004e10 	.word	0x24004e10
 800fbc8:	24004e20 	.word	0x24004e20
 800fbcc:	24004e24 	.word	0x24004e24

0800fbd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	b086      	sub	sp, #24
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d04f      	beq.n	800fc82 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fbe2:	2308      	movs	r3, #8
 800fbe4:	425b      	negs	r3, r3
 800fbe6:	697a      	ldr	r2, [r7, #20]
 800fbe8:	4413      	add	r3, r2
 800fbea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fbec:	697b      	ldr	r3, [r7, #20]
 800fbee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fbf0:	693b      	ldr	r3, [r7, #16]
 800fbf2:	685a      	ldr	r2, [r3, #4]
 800fbf4:	4b25      	ldr	r3, [pc, #148]	@ (800fc8c <vPortFree+0xbc>)
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	4013      	ands	r3, r2
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d10b      	bne.n	800fc16 <vPortFree+0x46>
	__asm volatile
 800fbfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc02:	f383 8811 	msr	BASEPRI, r3
 800fc06:	f3bf 8f6f 	isb	sy
 800fc0a:	f3bf 8f4f 	dsb	sy
 800fc0e:	60fb      	str	r3, [r7, #12]
}
 800fc10:	bf00      	nop
 800fc12:	bf00      	nop
 800fc14:	e7fd      	b.n	800fc12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fc16:	693b      	ldr	r3, [r7, #16]
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d00b      	beq.n	800fc36 <vPortFree+0x66>
	__asm volatile
 800fc1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc22:	f383 8811 	msr	BASEPRI, r3
 800fc26:	f3bf 8f6f 	isb	sy
 800fc2a:	f3bf 8f4f 	dsb	sy
 800fc2e:	60bb      	str	r3, [r7, #8]
}
 800fc30:	bf00      	nop
 800fc32:	bf00      	nop
 800fc34:	e7fd      	b.n	800fc32 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fc36:	693b      	ldr	r3, [r7, #16]
 800fc38:	685a      	ldr	r2, [r3, #4]
 800fc3a:	4b14      	ldr	r3, [pc, #80]	@ (800fc8c <vPortFree+0xbc>)
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	4013      	ands	r3, r2
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d01e      	beq.n	800fc82 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fc44:	693b      	ldr	r3, [r7, #16]
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d11a      	bne.n	800fc82 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fc4c:	693b      	ldr	r3, [r7, #16]
 800fc4e:	685a      	ldr	r2, [r3, #4]
 800fc50:	4b0e      	ldr	r3, [pc, #56]	@ (800fc8c <vPortFree+0xbc>)
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	43db      	mvns	r3, r3
 800fc56:	401a      	ands	r2, r3
 800fc58:	693b      	ldr	r3, [r7, #16]
 800fc5a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fc5c:	f7fe f9ce 	bl	800dffc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fc60:	693b      	ldr	r3, [r7, #16]
 800fc62:	685a      	ldr	r2, [r3, #4]
 800fc64:	4b0a      	ldr	r3, [pc, #40]	@ (800fc90 <vPortFree+0xc0>)
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	4413      	add	r3, r2
 800fc6a:	4a09      	ldr	r2, [pc, #36]	@ (800fc90 <vPortFree+0xc0>)
 800fc6c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fc6e:	6938      	ldr	r0, [r7, #16]
 800fc70:	f000 f874 	bl	800fd5c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800fc74:	4b07      	ldr	r3, [pc, #28]	@ (800fc94 <vPortFree+0xc4>)
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	3301      	adds	r3, #1
 800fc7a:	4a06      	ldr	r2, [pc, #24]	@ (800fc94 <vPortFree+0xc4>)
 800fc7c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800fc7e:	f7fe fa03 	bl	800e088 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fc82:	bf00      	nop
 800fc84:	3718      	adds	r7, #24
 800fc86:	46bd      	mov	sp, r7
 800fc88:	bd80      	pop	{r7, pc}
 800fc8a:	bf00      	nop
 800fc8c:	24004e2c 	.word	0x24004e2c
 800fc90:	24004e1c 	.word	0x24004e1c
 800fc94:	24004e28 	.word	0x24004e28

0800fc98 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fc98:	b480      	push	{r7}
 800fc9a:	b085      	sub	sp, #20
 800fc9c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fc9e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800fca2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fca4:	4b27      	ldr	r3, [pc, #156]	@ (800fd44 <prvHeapInit+0xac>)
 800fca6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	f003 0307 	and.w	r3, r3, #7
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d00c      	beq.n	800fccc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	3307      	adds	r3, #7
 800fcb6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	f023 0307 	bic.w	r3, r3, #7
 800fcbe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fcc0:	68ba      	ldr	r2, [r7, #8]
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	1ad3      	subs	r3, r2, r3
 800fcc6:	4a1f      	ldr	r2, [pc, #124]	@ (800fd44 <prvHeapInit+0xac>)
 800fcc8:	4413      	add	r3, r2
 800fcca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fcd0:	4a1d      	ldr	r2, [pc, #116]	@ (800fd48 <prvHeapInit+0xb0>)
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fcd6:	4b1c      	ldr	r3, [pc, #112]	@ (800fd48 <prvHeapInit+0xb0>)
 800fcd8:	2200      	movs	r2, #0
 800fcda:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	68ba      	ldr	r2, [r7, #8]
 800fce0:	4413      	add	r3, r2
 800fce2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fce4:	2208      	movs	r2, #8
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	1a9b      	subs	r3, r3, r2
 800fcea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	f023 0307 	bic.w	r3, r3, #7
 800fcf2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	4a15      	ldr	r2, [pc, #84]	@ (800fd4c <prvHeapInit+0xb4>)
 800fcf8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fcfa:	4b14      	ldr	r3, [pc, #80]	@ (800fd4c <prvHeapInit+0xb4>)
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	2200      	movs	r2, #0
 800fd00:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fd02:	4b12      	ldr	r3, [pc, #72]	@ (800fd4c <prvHeapInit+0xb4>)
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	2200      	movs	r2, #0
 800fd08:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fd0e:	683b      	ldr	r3, [r7, #0]
 800fd10:	68fa      	ldr	r2, [r7, #12]
 800fd12:	1ad2      	subs	r2, r2, r3
 800fd14:	683b      	ldr	r3, [r7, #0]
 800fd16:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fd18:	4b0c      	ldr	r3, [pc, #48]	@ (800fd4c <prvHeapInit+0xb4>)
 800fd1a:	681a      	ldr	r2, [r3, #0]
 800fd1c:	683b      	ldr	r3, [r7, #0]
 800fd1e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fd20:	683b      	ldr	r3, [r7, #0]
 800fd22:	685b      	ldr	r3, [r3, #4]
 800fd24:	4a0a      	ldr	r2, [pc, #40]	@ (800fd50 <prvHeapInit+0xb8>)
 800fd26:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fd28:	683b      	ldr	r3, [r7, #0]
 800fd2a:	685b      	ldr	r3, [r3, #4]
 800fd2c:	4a09      	ldr	r2, [pc, #36]	@ (800fd54 <prvHeapInit+0xbc>)
 800fd2e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fd30:	4b09      	ldr	r3, [pc, #36]	@ (800fd58 <prvHeapInit+0xc0>)
 800fd32:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800fd36:	601a      	str	r2, [r3, #0]
}
 800fd38:	bf00      	nop
 800fd3a:	3714      	adds	r7, #20
 800fd3c:	46bd      	mov	sp, r7
 800fd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd42:	4770      	bx	lr
 800fd44:	24001210 	.word	0x24001210
 800fd48:	24004e10 	.word	0x24004e10
 800fd4c:	24004e18 	.word	0x24004e18
 800fd50:	24004e20 	.word	0x24004e20
 800fd54:	24004e1c 	.word	0x24004e1c
 800fd58:	24004e2c 	.word	0x24004e2c

0800fd5c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fd5c:	b480      	push	{r7}
 800fd5e:	b085      	sub	sp, #20
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fd64:	4b28      	ldr	r3, [pc, #160]	@ (800fe08 <prvInsertBlockIntoFreeList+0xac>)
 800fd66:	60fb      	str	r3, [r7, #12]
 800fd68:	e002      	b.n	800fd70 <prvInsertBlockIntoFreeList+0x14>
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	60fb      	str	r3, [r7, #12]
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	687a      	ldr	r2, [r7, #4]
 800fd76:	429a      	cmp	r2, r3
 800fd78:	d8f7      	bhi.n	800fd6a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	685b      	ldr	r3, [r3, #4]
 800fd82:	68ba      	ldr	r2, [r7, #8]
 800fd84:	4413      	add	r3, r2
 800fd86:	687a      	ldr	r2, [r7, #4]
 800fd88:	429a      	cmp	r2, r3
 800fd8a:	d108      	bne.n	800fd9e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	685a      	ldr	r2, [r3, #4]
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	685b      	ldr	r3, [r3, #4]
 800fd94:	441a      	add	r2, r3
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	685b      	ldr	r3, [r3, #4]
 800fda6:	68ba      	ldr	r2, [r7, #8]
 800fda8:	441a      	add	r2, r3
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	429a      	cmp	r2, r3
 800fdb0:	d118      	bne.n	800fde4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	681a      	ldr	r2, [r3, #0]
 800fdb6:	4b15      	ldr	r3, [pc, #84]	@ (800fe0c <prvInsertBlockIntoFreeList+0xb0>)
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	429a      	cmp	r2, r3
 800fdbc:	d00d      	beq.n	800fdda <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	685a      	ldr	r2, [r3, #4]
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	685b      	ldr	r3, [r3, #4]
 800fdc8:	441a      	add	r2, r3
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	681a      	ldr	r2, [r3, #0]
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	601a      	str	r2, [r3, #0]
 800fdd8:	e008      	b.n	800fdec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fdda:	4b0c      	ldr	r3, [pc, #48]	@ (800fe0c <prvInsertBlockIntoFreeList+0xb0>)
 800fddc:	681a      	ldr	r2, [r3, #0]
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	601a      	str	r2, [r3, #0]
 800fde2:	e003      	b.n	800fdec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	681a      	ldr	r2, [r3, #0]
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fdec:	68fa      	ldr	r2, [r7, #12]
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	429a      	cmp	r2, r3
 800fdf2:	d002      	beq.n	800fdfa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	687a      	ldr	r2, [r7, #4]
 800fdf8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fdfa:	bf00      	nop
 800fdfc:	3714      	adds	r7, #20
 800fdfe:	46bd      	mov	sp, r7
 800fe00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe04:	4770      	bx	lr
 800fe06:	bf00      	nop
 800fe08:	24004e10 	.word	0x24004e10
 800fe0c:	24004e18 	.word	0x24004e18

0800fe10 <_ZdlPvj>:
 800fe10:	f000 b815 	b.w	800fe3e <_ZdlPv>

0800fe14 <_ZdaPv>:
 800fe14:	f000 b813 	b.w	800fe3e <_ZdlPv>

0800fe18 <_Znwj>:
 800fe18:	2801      	cmp	r0, #1
 800fe1a:	bf38      	it	cc
 800fe1c:	2001      	movcc	r0, #1
 800fe1e:	b510      	push	{r4, lr}
 800fe20:	4604      	mov	r4, r0
 800fe22:	4620      	mov	r0, r4
 800fe24:	f000 f83c 	bl	800fea0 <malloc>
 800fe28:	b100      	cbz	r0, 800fe2c <_Znwj+0x14>
 800fe2a:	bd10      	pop	{r4, pc}
 800fe2c:	f000 f80a 	bl	800fe44 <_ZSt15get_new_handlerv>
 800fe30:	b908      	cbnz	r0, 800fe36 <_Znwj+0x1e>
 800fe32:	f000 f80f 	bl	800fe54 <abort>
 800fe36:	4780      	blx	r0
 800fe38:	e7f3      	b.n	800fe22 <_Znwj+0xa>

0800fe3a <_Znaj>:
 800fe3a:	f7ff bfed 	b.w	800fe18 <_Znwj>

0800fe3e <_ZdlPv>:
 800fe3e:	f000 b837 	b.w	800feb0 <free>
	...

0800fe44 <_ZSt15get_new_handlerv>:
 800fe44:	4b02      	ldr	r3, [pc, #8]	@ (800fe50 <_ZSt15get_new_handlerv+0xc>)
 800fe46:	6818      	ldr	r0, [r3, #0]
 800fe48:	f3bf 8f5b 	dmb	ish
 800fe4c:	4770      	bx	lr
 800fe4e:	bf00      	nop
 800fe50:	24004e30 	.word	0x24004e30

0800fe54 <abort>:
 800fe54:	b508      	push	{r3, lr}
 800fe56:	2006      	movs	r0, #6
 800fe58:	f001 f98e 	bl	8011178 <raise>
 800fe5c:	2001      	movs	r0, #1
 800fe5e:	f7f2 f8c1 	bl	8001fe4 <_exit>
	...

0800fe64 <__assert_func>:
 800fe64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fe66:	4614      	mov	r4, r2
 800fe68:	461a      	mov	r2, r3
 800fe6a:	4b09      	ldr	r3, [pc, #36]	@ (800fe90 <__assert_func+0x2c>)
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	4605      	mov	r5, r0
 800fe70:	68d8      	ldr	r0, [r3, #12]
 800fe72:	b954      	cbnz	r4, 800fe8a <__assert_func+0x26>
 800fe74:	4b07      	ldr	r3, [pc, #28]	@ (800fe94 <__assert_func+0x30>)
 800fe76:	461c      	mov	r4, r3
 800fe78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fe7c:	9100      	str	r1, [sp, #0]
 800fe7e:	462b      	mov	r3, r5
 800fe80:	4905      	ldr	r1, [pc, #20]	@ (800fe98 <__assert_func+0x34>)
 800fe82:	f000 ffb1 	bl	8010de8 <fiprintf>
 800fe86:	f7ff ffe5 	bl	800fe54 <abort>
 800fe8a:	4b04      	ldr	r3, [pc, #16]	@ (800fe9c <__assert_func+0x38>)
 800fe8c:	e7f4      	b.n	800fe78 <__assert_func+0x14>
 800fe8e:	bf00      	nop
 800fe90:	24000020 	.word	0x24000020
 800fe94:	08014bcf 	.word	0x08014bcf
 800fe98:	08014ba1 	.word	0x08014ba1
 800fe9c:	08014b94 	.word	0x08014b94

0800fea0 <malloc>:
 800fea0:	4b02      	ldr	r3, [pc, #8]	@ (800feac <malloc+0xc>)
 800fea2:	4601      	mov	r1, r0
 800fea4:	6818      	ldr	r0, [r3, #0]
 800fea6:	f000 b82d 	b.w	800ff04 <_malloc_r>
 800feaa:	bf00      	nop
 800feac:	24000020 	.word	0x24000020

0800feb0 <free>:
 800feb0:	4b02      	ldr	r3, [pc, #8]	@ (800febc <free+0xc>)
 800feb2:	4601      	mov	r1, r0
 800feb4:	6818      	ldr	r0, [r3, #0]
 800feb6:	f002 b84d 	b.w	8011f54 <_free_r>
 800feba:	bf00      	nop
 800febc:	24000020 	.word	0x24000020

0800fec0 <sbrk_aligned>:
 800fec0:	b570      	push	{r4, r5, r6, lr}
 800fec2:	4e0f      	ldr	r6, [pc, #60]	@ (800ff00 <sbrk_aligned+0x40>)
 800fec4:	460c      	mov	r4, r1
 800fec6:	6831      	ldr	r1, [r6, #0]
 800fec8:	4605      	mov	r5, r0
 800feca:	b911      	cbnz	r1, 800fed2 <sbrk_aligned+0x12>
 800fecc:	f001 f9fe 	bl	80112cc <_sbrk_r>
 800fed0:	6030      	str	r0, [r6, #0]
 800fed2:	4621      	mov	r1, r4
 800fed4:	4628      	mov	r0, r5
 800fed6:	f001 f9f9 	bl	80112cc <_sbrk_r>
 800feda:	1c43      	adds	r3, r0, #1
 800fedc:	d103      	bne.n	800fee6 <sbrk_aligned+0x26>
 800fede:	f04f 34ff 	mov.w	r4, #4294967295
 800fee2:	4620      	mov	r0, r4
 800fee4:	bd70      	pop	{r4, r5, r6, pc}
 800fee6:	1cc4      	adds	r4, r0, #3
 800fee8:	f024 0403 	bic.w	r4, r4, #3
 800feec:	42a0      	cmp	r0, r4
 800feee:	d0f8      	beq.n	800fee2 <sbrk_aligned+0x22>
 800fef0:	1a21      	subs	r1, r4, r0
 800fef2:	4628      	mov	r0, r5
 800fef4:	f001 f9ea 	bl	80112cc <_sbrk_r>
 800fef8:	3001      	adds	r0, #1
 800fefa:	d1f2      	bne.n	800fee2 <sbrk_aligned+0x22>
 800fefc:	e7ef      	b.n	800fede <sbrk_aligned+0x1e>
 800fefe:	bf00      	nop
 800ff00:	24004e34 	.word	0x24004e34

0800ff04 <_malloc_r>:
 800ff04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff08:	1ccd      	adds	r5, r1, #3
 800ff0a:	f025 0503 	bic.w	r5, r5, #3
 800ff0e:	3508      	adds	r5, #8
 800ff10:	2d0c      	cmp	r5, #12
 800ff12:	bf38      	it	cc
 800ff14:	250c      	movcc	r5, #12
 800ff16:	2d00      	cmp	r5, #0
 800ff18:	4606      	mov	r6, r0
 800ff1a:	db01      	blt.n	800ff20 <_malloc_r+0x1c>
 800ff1c:	42a9      	cmp	r1, r5
 800ff1e:	d904      	bls.n	800ff2a <_malloc_r+0x26>
 800ff20:	230c      	movs	r3, #12
 800ff22:	6033      	str	r3, [r6, #0]
 800ff24:	2000      	movs	r0, #0
 800ff26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010000 <_malloc_r+0xfc>
 800ff2e:	f000 f869 	bl	8010004 <__malloc_lock>
 800ff32:	f8d8 3000 	ldr.w	r3, [r8]
 800ff36:	461c      	mov	r4, r3
 800ff38:	bb44      	cbnz	r4, 800ff8c <_malloc_r+0x88>
 800ff3a:	4629      	mov	r1, r5
 800ff3c:	4630      	mov	r0, r6
 800ff3e:	f7ff ffbf 	bl	800fec0 <sbrk_aligned>
 800ff42:	1c43      	adds	r3, r0, #1
 800ff44:	4604      	mov	r4, r0
 800ff46:	d158      	bne.n	800fffa <_malloc_r+0xf6>
 800ff48:	f8d8 4000 	ldr.w	r4, [r8]
 800ff4c:	4627      	mov	r7, r4
 800ff4e:	2f00      	cmp	r7, #0
 800ff50:	d143      	bne.n	800ffda <_malloc_r+0xd6>
 800ff52:	2c00      	cmp	r4, #0
 800ff54:	d04b      	beq.n	800ffee <_malloc_r+0xea>
 800ff56:	6823      	ldr	r3, [r4, #0]
 800ff58:	4639      	mov	r1, r7
 800ff5a:	4630      	mov	r0, r6
 800ff5c:	eb04 0903 	add.w	r9, r4, r3
 800ff60:	f001 f9b4 	bl	80112cc <_sbrk_r>
 800ff64:	4581      	cmp	r9, r0
 800ff66:	d142      	bne.n	800ffee <_malloc_r+0xea>
 800ff68:	6821      	ldr	r1, [r4, #0]
 800ff6a:	1a6d      	subs	r5, r5, r1
 800ff6c:	4629      	mov	r1, r5
 800ff6e:	4630      	mov	r0, r6
 800ff70:	f7ff ffa6 	bl	800fec0 <sbrk_aligned>
 800ff74:	3001      	adds	r0, #1
 800ff76:	d03a      	beq.n	800ffee <_malloc_r+0xea>
 800ff78:	6823      	ldr	r3, [r4, #0]
 800ff7a:	442b      	add	r3, r5
 800ff7c:	6023      	str	r3, [r4, #0]
 800ff7e:	f8d8 3000 	ldr.w	r3, [r8]
 800ff82:	685a      	ldr	r2, [r3, #4]
 800ff84:	bb62      	cbnz	r2, 800ffe0 <_malloc_r+0xdc>
 800ff86:	f8c8 7000 	str.w	r7, [r8]
 800ff8a:	e00f      	b.n	800ffac <_malloc_r+0xa8>
 800ff8c:	6822      	ldr	r2, [r4, #0]
 800ff8e:	1b52      	subs	r2, r2, r5
 800ff90:	d420      	bmi.n	800ffd4 <_malloc_r+0xd0>
 800ff92:	2a0b      	cmp	r2, #11
 800ff94:	d917      	bls.n	800ffc6 <_malloc_r+0xc2>
 800ff96:	1961      	adds	r1, r4, r5
 800ff98:	42a3      	cmp	r3, r4
 800ff9a:	6025      	str	r5, [r4, #0]
 800ff9c:	bf18      	it	ne
 800ff9e:	6059      	strne	r1, [r3, #4]
 800ffa0:	6863      	ldr	r3, [r4, #4]
 800ffa2:	bf08      	it	eq
 800ffa4:	f8c8 1000 	streq.w	r1, [r8]
 800ffa8:	5162      	str	r2, [r4, r5]
 800ffaa:	604b      	str	r3, [r1, #4]
 800ffac:	4630      	mov	r0, r6
 800ffae:	f000 f82f 	bl	8010010 <__malloc_unlock>
 800ffb2:	f104 000b 	add.w	r0, r4, #11
 800ffb6:	1d23      	adds	r3, r4, #4
 800ffb8:	f020 0007 	bic.w	r0, r0, #7
 800ffbc:	1ac2      	subs	r2, r0, r3
 800ffbe:	bf1c      	itt	ne
 800ffc0:	1a1b      	subne	r3, r3, r0
 800ffc2:	50a3      	strne	r3, [r4, r2]
 800ffc4:	e7af      	b.n	800ff26 <_malloc_r+0x22>
 800ffc6:	6862      	ldr	r2, [r4, #4]
 800ffc8:	42a3      	cmp	r3, r4
 800ffca:	bf0c      	ite	eq
 800ffcc:	f8c8 2000 	streq.w	r2, [r8]
 800ffd0:	605a      	strne	r2, [r3, #4]
 800ffd2:	e7eb      	b.n	800ffac <_malloc_r+0xa8>
 800ffd4:	4623      	mov	r3, r4
 800ffd6:	6864      	ldr	r4, [r4, #4]
 800ffd8:	e7ae      	b.n	800ff38 <_malloc_r+0x34>
 800ffda:	463c      	mov	r4, r7
 800ffdc:	687f      	ldr	r7, [r7, #4]
 800ffde:	e7b6      	b.n	800ff4e <_malloc_r+0x4a>
 800ffe0:	461a      	mov	r2, r3
 800ffe2:	685b      	ldr	r3, [r3, #4]
 800ffe4:	42a3      	cmp	r3, r4
 800ffe6:	d1fb      	bne.n	800ffe0 <_malloc_r+0xdc>
 800ffe8:	2300      	movs	r3, #0
 800ffea:	6053      	str	r3, [r2, #4]
 800ffec:	e7de      	b.n	800ffac <_malloc_r+0xa8>
 800ffee:	230c      	movs	r3, #12
 800fff0:	6033      	str	r3, [r6, #0]
 800fff2:	4630      	mov	r0, r6
 800fff4:	f000 f80c 	bl	8010010 <__malloc_unlock>
 800fff8:	e794      	b.n	800ff24 <_malloc_r+0x20>
 800fffa:	6005      	str	r5, [r0, #0]
 800fffc:	e7d6      	b.n	800ffac <_malloc_r+0xa8>
 800fffe:	bf00      	nop
 8010000:	24004e38 	.word	0x24004e38

08010004 <__malloc_lock>:
 8010004:	4801      	ldr	r0, [pc, #4]	@ (801000c <__malloc_lock+0x8>)
 8010006:	f001 b9ae 	b.w	8011366 <__retarget_lock_acquire_recursive>
 801000a:	bf00      	nop
 801000c:	24004f7c 	.word	0x24004f7c

08010010 <__malloc_unlock>:
 8010010:	4801      	ldr	r0, [pc, #4]	@ (8010018 <__malloc_unlock+0x8>)
 8010012:	f001 b9a9 	b.w	8011368 <__retarget_lock_release_recursive>
 8010016:	bf00      	nop
 8010018:	24004f7c 	.word	0x24004f7c

0801001c <__cvt>:
 801001c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801001e:	ed2d 8b02 	vpush	{d8}
 8010022:	eeb0 8b40 	vmov.f64	d8, d0
 8010026:	b085      	sub	sp, #20
 8010028:	4617      	mov	r7, r2
 801002a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801002c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801002e:	ee18 2a90 	vmov	r2, s17
 8010032:	f025 0520 	bic.w	r5, r5, #32
 8010036:	2a00      	cmp	r2, #0
 8010038:	bfb6      	itet	lt
 801003a:	222d      	movlt	r2, #45	@ 0x2d
 801003c:	2200      	movge	r2, #0
 801003e:	eeb1 8b40 	vneglt.f64	d8, d0
 8010042:	2d46      	cmp	r5, #70	@ 0x46
 8010044:	460c      	mov	r4, r1
 8010046:	701a      	strb	r2, [r3, #0]
 8010048:	d004      	beq.n	8010054 <__cvt+0x38>
 801004a:	2d45      	cmp	r5, #69	@ 0x45
 801004c:	d100      	bne.n	8010050 <__cvt+0x34>
 801004e:	3401      	adds	r4, #1
 8010050:	2102      	movs	r1, #2
 8010052:	e000      	b.n	8010056 <__cvt+0x3a>
 8010054:	2103      	movs	r1, #3
 8010056:	ab03      	add	r3, sp, #12
 8010058:	9301      	str	r3, [sp, #4]
 801005a:	ab02      	add	r3, sp, #8
 801005c:	9300      	str	r3, [sp, #0]
 801005e:	4622      	mov	r2, r4
 8010060:	4633      	mov	r3, r6
 8010062:	eeb0 0b48 	vmov.f64	d0, d8
 8010066:	f001 fa1f 	bl	80114a8 <_dtoa_r>
 801006a:	2d47      	cmp	r5, #71	@ 0x47
 801006c:	d114      	bne.n	8010098 <__cvt+0x7c>
 801006e:	07fb      	lsls	r3, r7, #31
 8010070:	d50a      	bpl.n	8010088 <__cvt+0x6c>
 8010072:	1902      	adds	r2, r0, r4
 8010074:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801007c:	bf08      	it	eq
 801007e:	9203      	streq	r2, [sp, #12]
 8010080:	2130      	movs	r1, #48	@ 0x30
 8010082:	9b03      	ldr	r3, [sp, #12]
 8010084:	4293      	cmp	r3, r2
 8010086:	d319      	bcc.n	80100bc <__cvt+0xa0>
 8010088:	9b03      	ldr	r3, [sp, #12]
 801008a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801008c:	1a1b      	subs	r3, r3, r0
 801008e:	6013      	str	r3, [r2, #0]
 8010090:	b005      	add	sp, #20
 8010092:	ecbd 8b02 	vpop	{d8}
 8010096:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010098:	2d46      	cmp	r5, #70	@ 0x46
 801009a:	eb00 0204 	add.w	r2, r0, r4
 801009e:	d1e9      	bne.n	8010074 <__cvt+0x58>
 80100a0:	7803      	ldrb	r3, [r0, #0]
 80100a2:	2b30      	cmp	r3, #48	@ 0x30
 80100a4:	d107      	bne.n	80100b6 <__cvt+0x9a>
 80100a6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80100aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100ae:	bf1c      	itt	ne
 80100b0:	f1c4 0401 	rsbne	r4, r4, #1
 80100b4:	6034      	strne	r4, [r6, #0]
 80100b6:	6833      	ldr	r3, [r6, #0]
 80100b8:	441a      	add	r2, r3
 80100ba:	e7db      	b.n	8010074 <__cvt+0x58>
 80100bc:	1c5c      	adds	r4, r3, #1
 80100be:	9403      	str	r4, [sp, #12]
 80100c0:	7019      	strb	r1, [r3, #0]
 80100c2:	e7de      	b.n	8010082 <__cvt+0x66>

080100c4 <__exponent>:
 80100c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80100c6:	2900      	cmp	r1, #0
 80100c8:	bfba      	itte	lt
 80100ca:	4249      	neglt	r1, r1
 80100cc:	232d      	movlt	r3, #45	@ 0x2d
 80100ce:	232b      	movge	r3, #43	@ 0x2b
 80100d0:	2909      	cmp	r1, #9
 80100d2:	7002      	strb	r2, [r0, #0]
 80100d4:	7043      	strb	r3, [r0, #1]
 80100d6:	dd29      	ble.n	801012c <__exponent+0x68>
 80100d8:	f10d 0307 	add.w	r3, sp, #7
 80100dc:	461d      	mov	r5, r3
 80100de:	270a      	movs	r7, #10
 80100e0:	461a      	mov	r2, r3
 80100e2:	fbb1 f6f7 	udiv	r6, r1, r7
 80100e6:	fb07 1416 	mls	r4, r7, r6, r1
 80100ea:	3430      	adds	r4, #48	@ 0x30
 80100ec:	f802 4c01 	strb.w	r4, [r2, #-1]
 80100f0:	460c      	mov	r4, r1
 80100f2:	2c63      	cmp	r4, #99	@ 0x63
 80100f4:	f103 33ff 	add.w	r3, r3, #4294967295
 80100f8:	4631      	mov	r1, r6
 80100fa:	dcf1      	bgt.n	80100e0 <__exponent+0x1c>
 80100fc:	3130      	adds	r1, #48	@ 0x30
 80100fe:	1e94      	subs	r4, r2, #2
 8010100:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010104:	1c41      	adds	r1, r0, #1
 8010106:	4623      	mov	r3, r4
 8010108:	42ab      	cmp	r3, r5
 801010a:	d30a      	bcc.n	8010122 <__exponent+0x5e>
 801010c:	f10d 0309 	add.w	r3, sp, #9
 8010110:	1a9b      	subs	r3, r3, r2
 8010112:	42ac      	cmp	r4, r5
 8010114:	bf88      	it	hi
 8010116:	2300      	movhi	r3, #0
 8010118:	3302      	adds	r3, #2
 801011a:	4403      	add	r3, r0
 801011c:	1a18      	subs	r0, r3, r0
 801011e:	b003      	add	sp, #12
 8010120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010122:	f813 6b01 	ldrb.w	r6, [r3], #1
 8010126:	f801 6f01 	strb.w	r6, [r1, #1]!
 801012a:	e7ed      	b.n	8010108 <__exponent+0x44>
 801012c:	2330      	movs	r3, #48	@ 0x30
 801012e:	3130      	adds	r1, #48	@ 0x30
 8010130:	7083      	strb	r3, [r0, #2]
 8010132:	70c1      	strb	r1, [r0, #3]
 8010134:	1d03      	adds	r3, r0, #4
 8010136:	e7f1      	b.n	801011c <__exponent+0x58>

08010138 <_printf_float>:
 8010138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801013c:	b08d      	sub	sp, #52	@ 0x34
 801013e:	460c      	mov	r4, r1
 8010140:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8010144:	4616      	mov	r6, r2
 8010146:	461f      	mov	r7, r3
 8010148:	4605      	mov	r5, r0
 801014a:	f001 f81d 	bl	8011188 <_localeconv_r>
 801014e:	f8d0 b000 	ldr.w	fp, [r0]
 8010152:	4658      	mov	r0, fp
 8010154:	f7f0 f91c 	bl	8000390 <strlen>
 8010158:	2300      	movs	r3, #0
 801015a:	930a      	str	r3, [sp, #40]	@ 0x28
 801015c:	f8d8 3000 	ldr.w	r3, [r8]
 8010160:	f894 9018 	ldrb.w	r9, [r4, #24]
 8010164:	6822      	ldr	r2, [r4, #0]
 8010166:	9005      	str	r0, [sp, #20]
 8010168:	3307      	adds	r3, #7
 801016a:	f023 0307 	bic.w	r3, r3, #7
 801016e:	f103 0108 	add.w	r1, r3, #8
 8010172:	f8c8 1000 	str.w	r1, [r8]
 8010176:	ed93 0b00 	vldr	d0, [r3]
 801017a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80103d8 <_printf_float+0x2a0>
 801017e:	eeb0 7bc0 	vabs.f64	d7, d0
 8010182:	eeb4 7b46 	vcmp.f64	d7, d6
 8010186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801018a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 801018e:	dd24      	ble.n	80101da <_printf_float+0xa2>
 8010190:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010198:	d502      	bpl.n	80101a0 <_printf_float+0x68>
 801019a:	232d      	movs	r3, #45	@ 0x2d
 801019c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80101a0:	498f      	ldr	r1, [pc, #572]	@ (80103e0 <_printf_float+0x2a8>)
 80101a2:	4b90      	ldr	r3, [pc, #576]	@ (80103e4 <_printf_float+0x2ac>)
 80101a4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80101a8:	bf94      	ite	ls
 80101aa:	4688      	movls	r8, r1
 80101ac:	4698      	movhi	r8, r3
 80101ae:	f022 0204 	bic.w	r2, r2, #4
 80101b2:	2303      	movs	r3, #3
 80101b4:	6123      	str	r3, [r4, #16]
 80101b6:	6022      	str	r2, [r4, #0]
 80101b8:	f04f 0a00 	mov.w	sl, #0
 80101bc:	9700      	str	r7, [sp, #0]
 80101be:	4633      	mov	r3, r6
 80101c0:	aa0b      	add	r2, sp, #44	@ 0x2c
 80101c2:	4621      	mov	r1, r4
 80101c4:	4628      	mov	r0, r5
 80101c6:	f000 f9d1 	bl	801056c <_printf_common>
 80101ca:	3001      	adds	r0, #1
 80101cc:	f040 8089 	bne.w	80102e2 <_printf_float+0x1aa>
 80101d0:	f04f 30ff 	mov.w	r0, #4294967295
 80101d4:	b00d      	add	sp, #52	@ 0x34
 80101d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101da:	eeb4 0b40 	vcmp.f64	d0, d0
 80101de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101e2:	d709      	bvc.n	80101f8 <_printf_float+0xc0>
 80101e4:	ee10 3a90 	vmov	r3, s1
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	bfbc      	itt	lt
 80101ec:	232d      	movlt	r3, #45	@ 0x2d
 80101ee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80101f2:	497d      	ldr	r1, [pc, #500]	@ (80103e8 <_printf_float+0x2b0>)
 80101f4:	4b7d      	ldr	r3, [pc, #500]	@ (80103ec <_printf_float+0x2b4>)
 80101f6:	e7d5      	b.n	80101a4 <_printf_float+0x6c>
 80101f8:	6863      	ldr	r3, [r4, #4]
 80101fa:	1c59      	adds	r1, r3, #1
 80101fc:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8010200:	d139      	bne.n	8010276 <_printf_float+0x13e>
 8010202:	2306      	movs	r3, #6
 8010204:	6063      	str	r3, [r4, #4]
 8010206:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801020a:	2300      	movs	r3, #0
 801020c:	6022      	str	r2, [r4, #0]
 801020e:	9303      	str	r3, [sp, #12]
 8010210:	ab0a      	add	r3, sp, #40	@ 0x28
 8010212:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8010216:	ab09      	add	r3, sp, #36	@ 0x24
 8010218:	9300      	str	r3, [sp, #0]
 801021a:	6861      	ldr	r1, [r4, #4]
 801021c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8010220:	4628      	mov	r0, r5
 8010222:	f7ff fefb 	bl	801001c <__cvt>
 8010226:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801022a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801022c:	4680      	mov	r8, r0
 801022e:	d129      	bne.n	8010284 <_printf_float+0x14c>
 8010230:	1cc8      	adds	r0, r1, #3
 8010232:	db02      	blt.n	801023a <_printf_float+0x102>
 8010234:	6863      	ldr	r3, [r4, #4]
 8010236:	4299      	cmp	r1, r3
 8010238:	dd41      	ble.n	80102be <_printf_float+0x186>
 801023a:	f1a9 0902 	sub.w	r9, r9, #2
 801023e:	fa5f f989 	uxtb.w	r9, r9
 8010242:	3901      	subs	r1, #1
 8010244:	464a      	mov	r2, r9
 8010246:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801024a:	9109      	str	r1, [sp, #36]	@ 0x24
 801024c:	f7ff ff3a 	bl	80100c4 <__exponent>
 8010250:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010252:	1813      	adds	r3, r2, r0
 8010254:	2a01      	cmp	r2, #1
 8010256:	4682      	mov	sl, r0
 8010258:	6123      	str	r3, [r4, #16]
 801025a:	dc02      	bgt.n	8010262 <_printf_float+0x12a>
 801025c:	6822      	ldr	r2, [r4, #0]
 801025e:	07d2      	lsls	r2, r2, #31
 8010260:	d501      	bpl.n	8010266 <_printf_float+0x12e>
 8010262:	3301      	adds	r3, #1
 8010264:	6123      	str	r3, [r4, #16]
 8010266:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801026a:	2b00      	cmp	r3, #0
 801026c:	d0a6      	beq.n	80101bc <_printf_float+0x84>
 801026e:	232d      	movs	r3, #45	@ 0x2d
 8010270:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010274:	e7a2      	b.n	80101bc <_printf_float+0x84>
 8010276:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801027a:	d1c4      	bne.n	8010206 <_printf_float+0xce>
 801027c:	2b00      	cmp	r3, #0
 801027e:	d1c2      	bne.n	8010206 <_printf_float+0xce>
 8010280:	2301      	movs	r3, #1
 8010282:	e7bf      	b.n	8010204 <_printf_float+0xcc>
 8010284:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8010288:	d9db      	bls.n	8010242 <_printf_float+0x10a>
 801028a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 801028e:	d118      	bne.n	80102c2 <_printf_float+0x18a>
 8010290:	2900      	cmp	r1, #0
 8010292:	6863      	ldr	r3, [r4, #4]
 8010294:	dd0b      	ble.n	80102ae <_printf_float+0x176>
 8010296:	6121      	str	r1, [r4, #16]
 8010298:	b913      	cbnz	r3, 80102a0 <_printf_float+0x168>
 801029a:	6822      	ldr	r2, [r4, #0]
 801029c:	07d0      	lsls	r0, r2, #31
 801029e:	d502      	bpl.n	80102a6 <_printf_float+0x16e>
 80102a0:	3301      	adds	r3, #1
 80102a2:	440b      	add	r3, r1
 80102a4:	6123      	str	r3, [r4, #16]
 80102a6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80102a8:	f04f 0a00 	mov.w	sl, #0
 80102ac:	e7db      	b.n	8010266 <_printf_float+0x12e>
 80102ae:	b913      	cbnz	r3, 80102b6 <_printf_float+0x17e>
 80102b0:	6822      	ldr	r2, [r4, #0]
 80102b2:	07d2      	lsls	r2, r2, #31
 80102b4:	d501      	bpl.n	80102ba <_printf_float+0x182>
 80102b6:	3302      	adds	r3, #2
 80102b8:	e7f4      	b.n	80102a4 <_printf_float+0x16c>
 80102ba:	2301      	movs	r3, #1
 80102bc:	e7f2      	b.n	80102a4 <_printf_float+0x16c>
 80102be:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80102c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80102c4:	4299      	cmp	r1, r3
 80102c6:	db05      	blt.n	80102d4 <_printf_float+0x19c>
 80102c8:	6823      	ldr	r3, [r4, #0]
 80102ca:	6121      	str	r1, [r4, #16]
 80102cc:	07d8      	lsls	r0, r3, #31
 80102ce:	d5ea      	bpl.n	80102a6 <_printf_float+0x16e>
 80102d0:	1c4b      	adds	r3, r1, #1
 80102d2:	e7e7      	b.n	80102a4 <_printf_float+0x16c>
 80102d4:	2900      	cmp	r1, #0
 80102d6:	bfd4      	ite	le
 80102d8:	f1c1 0202 	rsble	r2, r1, #2
 80102dc:	2201      	movgt	r2, #1
 80102de:	4413      	add	r3, r2
 80102e0:	e7e0      	b.n	80102a4 <_printf_float+0x16c>
 80102e2:	6823      	ldr	r3, [r4, #0]
 80102e4:	055a      	lsls	r2, r3, #21
 80102e6:	d407      	bmi.n	80102f8 <_printf_float+0x1c0>
 80102e8:	6923      	ldr	r3, [r4, #16]
 80102ea:	4642      	mov	r2, r8
 80102ec:	4631      	mov	r1, r6
 80102ee:	4628      	mov	r0, r5
 80102f0:	47b8      	blx	r7
 80102f2:	3001      	adds	r0, #1
 80102f4:	d12a      	bne.n	801034c <_printf_float+0x214>
 80102f6:	e76b      	b.n	80101d0 <_printf_float+0x98>
 80102f8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80102fc:	f240 80e0 	bls.w	80104c0 <_printf_float+0x388>
 8010300:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8010304:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801030c:	d133      	bne.n	8010376 <_printf_float+0x23e>
 801030e:	4a38      	ldr	r2, [pc, #224]	@ (80103f0 <_printf_float+0x2b8>)
 8010310:	2301      	movs	r3, #1
 8010312:	4631      	mov	r1, r6
 8010314:	4628      	mov	r0, r5
 8010316:	47b8      	blx	r7
 8010318:	3001      	adds	r0, #1
 801031a:	f43f af59 	beq.w	80101d0 <_printf_float+0x98>
 801031e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8010322:	4543      	cmp	r3, r8
 8010324:	db02      	blt.n	801032c <_printf_float+0x1f4>
 8010326:	6823      	ldr	r3, [r4, #0]
 8010328:	07d8      	lsls	r0, r3, #31
 801032a:	d50f      	bpl.n	801034c <_printf_float+0x214>
 801032c:	9b05      	ldr	r3, [sp, #20]
 801032e:	465a      	mov	r2, fp
 8010330:	4631      	mov	r1, r6
 8010332:	4628      	mov	r0, r5
 8010334:	47b8      	blx	r7
 8010336:	3001      	adds	r0, #1
 8010338:	f43f af4a 	beq.w	80101d0 <_printf_float+0x98>
 801033c:	f04f 0900 	mov.w	r9, #0
 8010340:	f108 38ff 	add.w	r8, r8, #4294967295
 8010344:	f104 0a1a 	add.w	sl, r4, #26
 8010348:	45c8      	cmp	r8, r9
 801034a:	dc09      	bgt.n	8010360 <_printf_float+0x228>
 801034c:	6823      	ldr	r3, [r4, #0]
 801034e:	079b      	lsls	r3, r3, #30
 8010350:	f100 8107 	bmi.w	8010562 <_printf_float+0x42a>
 8010354:	68e0      	ldr	r0, [r4, #12]
 8010356:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010358:	4298      	cmp	r0, r3
 801035a:	bfb8      	it	lt
 801035c:	4618      	movlt	r0, r3
 801035e:	e739      	b.n	80101d4 <_printf_float+0x9c>
 8010360:	2301      	movs	r3, #1
 8010362:	4652      	mov	r2, sl
 8010364:	4631      	mov	r1, r6
 8010366:	4628      	mov	r0, r5
 8010368:	47b8      	blx	r7
 801036a:	3001      	adds	r0, #1
 801036c:	f43f af30 	beq.w	80101d0 <_printf_float+0x98>
 8010370:	f109 0901 	add.w	r9, r9, #1
 8010374:	e7e8      	b.n	8010348 <_printf_float+0x210>
 8010376:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010378:	2b00      	cmp	r3, #0
 801037a:	dc3b      	bgt.n	80103f4 <_printf_float+0x2bc>
 801037c:	4a1c      	ldr	r2, [pc, #112]	@ (80103f0 <_printf_float+0x2b8>)
 801037e:	2301      	movs	r3, #1
 8010380:	4631      	mov	r1, r6
 8010382:	4628      	mov	r0, r5
 8010384:	47b8      	blx	r7
 8010386:	3001      	adds	r0, #1
 8010388:	f43f af22 	beq.w	80101d0 <_printf_float+0x98>
 801038c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8010390:	ea59 0303 	orrs.w	r3, r9, r3
 8010394:	d102      	bne.n	801039c <_printf_float+0x264>
 8010396:	6823      	ldr	r3, [r4, #0]
 8010398:	07d9      	lsls	r1, r3, #31
 801039a:	d5d7      	bpl.n	801034c <_printf_float+0x214>
 801039c:	9b05      	ldr	r3, [sp, #20]
 801039e:	465a      	mov	r2, fp
 80103a0:	4631      	mov	r1, r6
 80103a2:	4628      	mov	r0, r5
 80103a4:	47b8      	blx	r7
 80103a6:	3001      	adds	r0, #1
 80103a8:	f43f af12 	beq.w	80101d0 <_printf_float+0x98>
 80103ac:	f04f 0a00 	mov.w	sl, #0
 80103b0:	f104 0b1a 	add.w	fp, r4, #26
 80103b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80103b6:	425b      	negs	r3, r3
 80103b8:	4553      	cmp	r3, sl
 80103ba:	dc01      	bgt.n	80103c0 <_printf_float+0x288>
 80103bc:	464b      	mov	r3, r9
 80103be:	e794      	b.n	80102ea <_printf_float+0x1b2>
 80103c0:	2301      	movs	r3, #1
 80103c2:	465a      	mov	r2, fp
 80103c4:	4631      	mov	r1, r6
 80103c6:	4628      	mov	r0, r5
 80103c8:	47b8      	blx	r7
 80103ca:	3001      	adds	r0, #1
 80103cc:	f43f af00 	beq.w	80101d0 <_printf_float+0x98>
 80103d0:	f10a 0a01 	add.w	sl, sl, #1
 80103d4:	e7ee      	b.n	80103b4 <_printf_float+0x27c>
 80103d6:	bf00      	nop
 80103d8:	ffffffff 	.word	0xffffffff
 80103dc:	7fefffff 	.word	0x7fefffff
 80103e0:	08014bd0 	.word	0x08014bd0
 80103e4:	08014bd4 	.word	0x08014bd4
 80103e8:	08014bd8 	.word	0x08014bd8
 80103ec:	08014bdc 	.word	0x08014bdc
 80103f0:	08014be0 	.word	0x08014be0
 80103f4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80103f6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80103fa:	4553      	cmp	r3, sl
 80103fc:	bfa8      	it	ge
 80103fe:	4653      	movge	r3, sl
 8010400:	2b00      	cmp	r3, #0
 8010402:	4699      	mov	r9, r3
 8010404:	dc37      	bgt.n	8010476 <_printf_float+0x33e>
 8010406:	2300      	movs	r3, #0
 8010408:	9307      	str	r3, [sp, #28]
 801040a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801040e:	f104 021a 	add.w	r2, r4, #26
 8010412:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010414:	9907      	ldr	r1, [sp, #28]
 8010416:	9306      	str	r3, [sp, #24]
 8010418:	eba3 0309 	sub.w	r3, r3, r9
 801041c:	428b      	cmp	r3, r1
 801041e:	dc31      	bgt.n	8010484 <_printf_float+0x34c>
 8010420:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010422:	459a      	cmp	sl, r3
 8010424:	dc3b      	bgt.n	801049e <_printf_float+0x366>
 8010426:	6823      	ldr	r3, [r4, #0]
 8010428:	07da      	lsls	r2, r3, #31
 801042a:	d438      	bmi.n	801049e <_printf_float+0x366>
 801042c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801042e:	ebaa 0903 	sub.w	r9, sl, r3
 8010432:	9b06      	ldr	r3, [sp, #24]
 8010434:	ebaa 0303 	sub.w	r3, sl, r3
 8010438:	4599      	cmp	r9, r3
 801043a:	bfa8      	it	ge
 801043c:	4699      	movge	r9, r3
 801043e:	f1b9 0f00 	cmp.w	r9, #0
 8010442:	dc34      	bgt.n	80104ae <_printf_float+0x376>
 8010444:	f04f 0800 	mov.w	r8, #0
 8010448:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801044c:	f104 0b1a 	add.w	fp, r4, #26
 8010450:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010452:	ebaa 0303 	sub.w	r3, sl, r3
 8010456:	eba3 0309 	sub.w	r3, r3, r9
 801045a:	4543      	cmp	r3, r8
 801045c:	f77f af76 	ble.w	801034c <_printf_float+0x214>
 8010460:	2301      	movs	r3, #1
 8010462:	465a      	mov	r2, fp
 8010464:	4631      	mov	r1, r6
 8010466:	4628      	mov	r0, r5
 8010468:	47b8      	blx	r7
 801046a:	3001      	adds	r0, #1
 801046c:	f43f aeb0 	beq.w	80101d0 <_printf_float+0x98>
 8010470:	f108 0801 	add.w	r8, r8, #1
 8010474:	e7ec      	b.n	8010450 <_printf_float+0x318>
 8010476:	4642      	mov	r2, r8
 8010478:	4631      	mov	r1, r6
 801047a:	4628      	mov	r0, r5
 801047c:	47b8      	blx	r7
 801047e:	3001      	adds	r0, #1
 8010480:	d1c1      	bne.n	8010406 <_printf_float+0x2ce>
 8010482:	e6a5      	b.n	80101d0 <_printf_float+0x98>
 8010484:	2301      	movs	r3, #1
 8010486:	4631      	mov	r1, r6
 8010488:	4628      	mov	r0, r5
 801048a:	9206      	str	r2, [sp, #24]
 801048c:	47b8      	blx	r7
 801048e:	3001      	adds	r0, #1
 8010490:	f43f ae9e 	beq.w	80101d0 <_printf_float+0x98>
 8010494:	9b07      	ldr	r3, [sp, #28]
 8010496:	9a06      	ldr	r2, [sp, #24]
 8010498:	3301      	adds	r3, #1
 801049a:	9307      	str	r3, [sp, #28]
 801049c:	e7b9      	b.n	8010412 <_printf_float+0x2da>
 801049e:	9b05      	ldr	r3, [sp, #20]
 80104a0:	465a      	mov	r2, fp
 80104a2:	4631      	mov	r1, r6
 80104a4:	4628      	mov	r0, r5
 80104a6:	47b8      	blx	r7
 80104a8:	3001      	adds	r0, #1
 80104aa:	d1bf      	bne.n	801042c <_printf_float+0x2f4>
 80104ac:	e690      	b.n	80101d0 <_printf_float+0x98>
 80104ae:	9a06      	ldr	r2, [sp, #24]
 80104b0:	464b      	mov	r3, r9
 80104b2:	4442      	add	r2, r8
 80104b4:	4631      	mov	r1, r6
 80104b6:	4628      	mov	r0, r5
 80104b8:	47b8      	blx	r7
 80104ba:	3001      	adds	r0, #1
 80104bc:	d1c2      	bne.n	8010444 <_printf_float+0x30c>
 80104be:	e687      	b.n	80101d0 <_printf_float+0x98>
 80104c0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80104c4:	f1b9 0f01 	cmp.w	r9, #1
 80104c8:	dc01      	bgt.n	80104ce <_printf_float+0x396>
 80104ca:	07db      	lsls	r3, r3, #31
 80104cc:	d536      	bpl.n	801053c <_printf_float+0x404>
 80104ce:	2301      	movs	r3, #1
 80104d0:	4642      	mov	r2, r8
 80104d2:	4631      	mov	r1, r6
 80104d4:	4628      	mov	r0, r5
 80104d6:	47b8      	blx	r7
 80104d8:	3001      	adds	r0, #1
 80104da:	f43f ae79 	beq.w	80101d0 <_printf_float+0x98>
 80104de:	9b05      	ldr	r3, [sp, #20]
 80104e0:	465a      	mov	r2, fp
 80104e2:	4631      	mov	r1, r6
 80104e4:	4628      	mov	r0, r5
 80104e6:	47b8      	blx	r7
 80104e8:	3001      	adds	r0, #1
 80104ea:	f43f ae71 	beq.w	80101d0 <_printf_float+0x98>
 80104ee:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80104f2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80104f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104fa:	f109 39ff 	add.w	r9, r9, #4294967295
 80104fe:	d018      	beq.n	8010532 <_printf_float+0x3fa>
 8010500:	464b      	mov	r3, r9
 8010502:	f108 0201 	add.w	r2, r8, #1
 8010506:	4631      	mov	r1, r6
 8010508:	4628      	mov	r0, r5
 801050a:	47b8      	blx	r7
 801050c:	3001      	adds	r0, #1
 801050e:	d10c      	bne.n	801052a <_printf_float+0x3f2>
 8010510:	e65e      	b.n	80101d0 <_printf_float+0x98>
 8010512:	2301      	movs	r3, #1
 8010514:	465a      	mov	r2, fp
 8010516:	4631      	mov	r1, r6
 8010518:	4628      	mov	r0, r5
 801051a:	47b8      	blx	r7
 801051c:	3001      	adds	r0, #1
 801051e:	f43f ae57 	beq.w	80101d0 <_printf_float+0x98>
 8010522:	f108 0801 	add.w	r8, r8, #1
 8010526:	45c8      	cmp	r8, r9
 8010528:	dbf3      	blt.n	8010512 <_printf_float+0x3da>
 801052a:	4653      	mov	r3, sl
 801052c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8010530:	e6dc      	b.n	80102ec <_printf_float+0x1b4>
 8010532:	f04f 0800 	mov.w	r8, #0
 8010536:	f104 0b1a 	add.w	fp, r4, #26
 801053a:	e7f4      	b.n	8010526 <_printf_float+0x3ee>
 801053c:	2301      	movs	r3, #1
 801053e:	4642      	mov	r2, r8
 8010540:	e7e1      	b.n	8010506 <_printf_float+0x3ce>
 8010542:	2301      	movs	r3, #1
 8010544:	464a      	mov	r2, r9
 8010546:	4631      	mov	r1, r6
 8010548:	4628      	mov	r0, r5
 801054a:	47b8      	blx	r7
 801054c:	3001      	adds	r0, #1
 801054e:	f43f ae3f 	beq.w	80101d0 <_printf_float+0x98>
 8010552:	f108 0801 	add.w	r8, r8, #1
 8010556:	68e3      	ldr	r3, [r4, #12]
 8010558:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801055a:	1a5b      	subs	r3, r3, r1
 801055c:	4543      	cmp	r3, r8
 801055e:	dcf0      	bgt.n	8010542 <_printf_float+0x40a>
 8010560:	e6f8      	b.n	8010354 <_printf_float+0x21c>
 8010562:	f04f 0800 	mov.w	r8, #0
 8010566:	f104 0919 	add.w	r9, r4, #25
 801056a:	e7f4      	b.n	8010556 <_printf_float+0x41e>

0801056c <_printf_common>:
 801056c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010570:	4616      	mov	r6, r2
 8010572:	4698      	mov	r8, r3
 8010574:	688a      	ldr	r2, [r1, #8]
 8010576:	690b      	ldr	r3, [r1, #16]
 8010578:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801057c:	4293      	cmp	r3, r2
 801057e:	bfb8      	it	lt
 8010580:	4613      	movlt	r3, r2
 8010582:	6033      	str	r3, [r6, #0]
 8010584:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010588:	4607      	mov	r7, r0
 801058a:	460c      	mov	r4, r1
 801058c:	b10a      	cbz	r2, 8010592 <_printf_common+0x26>
 801058e:	3301      	adds	r3, #1
 8010590:	6033      	str	r3, [r6, #0]
 8010592:	6823      	ldr	r3, [r4, #0]
 8010594:	0699      	lsls	r1, r3, #26
 8010596:	bf42      	ittt	mi
 8010598:	6833      	ldrmi	r3, [r6, #0]
 801059a:	3302      	addmi	r3, #2
 801059c:	6033      	strmi	r3, [r6, #0]
 801059e:	6825      	ldr	r5, [r4, #0]
 80105a0:	f015 0506 	ands.w	r5, r5, #6
 80105a4:	d106      	bne.n	80105b4 <_printf_common+0x48>
 80105a6:	f104 0a19 	add.w	sl, r4, #25
 80105aa:	68e3      	ldr	r3, [r4, #12]
 80105ac:	6832      	ldr	r2, [r6, #0]
 80105ae:	1a9b      	subs	r3, r3, r2
 80105b0:	42ab      	cmp	r3, r5
 80105b2:	dc26      	bgt.n	8010602 <_printf_common+0x96>
 80105b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80105b8:	6822      	ldr	r2, [r4, #0]
 80105ba:	3b00      	subs	r3, #0
 80105bc:	bf18      	it	ne
 80105be:	2301      	movne	r3, #1
 80105c0:	0692      	lsls	r2, r2, #26
 80105c2:	d42b      	bmi.n	801061c <_printf_common+0xb0>
 80105c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80105c8:	4641      	mov	r1, r8
 80105ca:	4638      	mov	r0, r7
 80105cc:	47c8      	blx	r9
 80105ce:	3001      	adds	r0, #1
 80105d0:	d01e      	beq.n	8010610 <_printf_common+0xa4>
 80105d2:	6823      	ldr	r3, [r4, #0]
 80105d4:	6922      	ldr	r2, [r4, #16]
 80105d6:	f003 0306 	and.w	r3, r3, #6
 80105da:	2b04      	cmp	r3, #4
 80105dc:	bf02      	ittt	eq
 80105de:	68e5      	ldreq	r5, [r4, #12]
 80105e0:	6833      	ldreq	r3, [r6, #0]
 80105e2:	1aed      	subeq	r5, r5, r3
 80105e4:	68a3      	ldr	r3, [r4, #8]
 80105e6:	bf0c      	ite	eq
 80105e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80105ec:	2500      	movne	r5, #0
 80105ee:	4293      	cmp	r3, r2
 80105f0:	bfc4      	itt	gt
 80105f2:	1a9b      	subgt	r3, r3, r2
 80105f4:	18ed      	addgt	r5, r5, r3
 80105f6:	2600      	movs	r6, #0
 80105f8:	341a      	adds	r4, #26
 80105fa:	42b5      	cmp	r5, r6
 80105fc:	d11a      	bne.n	8010634 <_printf_common+0xc8>
 80105fe:	2000      	movs	r0, #0
 8010600:	e008      	b.n	8010614 <_printf_common+0xa8>
 8010602:	2301      	movs	r3, #1
 8010604:	4652      	mov	r2, sl
 8010606:	4641      	mov	r1, r8
 8010608:	4638      	mov	r0, r7
 801060a:	47c8      	blx	r9
 801060c:	3001      	adds	r0, #1
 801060e:	d103      	bne.n	8010618 <_printf_common+0xac>
 8010610:	f04f 30ff 	mov.w	r0, #4294967295
 8010614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010618:	3501      	adds	r5, #1
 801061a:	e7c6      	b.n	80105aa <_printf_common+0x3e>
 801061c:	18e1      	adds	r1, r4, r3
 801061e:	1c5a      	adds	r2, r3, #1
 8010620:	2030      	movs	r0, #48	@ 0x30
 8010622:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010626:	4422      	add	r2, r4
 8010628:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801062c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010630:	3302      	adds	r3, #2
 8010632:	e7c7      	b.n	80105c4 <_printf_common+0x58>
 8010634:	2301      	movs	r3, #1
 8010636:	4622      	mov	r2, r4
 8010638:	4641      	mov	r1, r8
 801063a:	4638      	mov	r0, r7
 801063c:	47c8      	blx	r9
 801063e:	3001      	adds	r0, #1
 8010640:	d0e6      	beq.n	8010610 <_printf_common+0xa4>
 8010642:	3601      	adds	r6, #1
 8010644:	e7d9      	b.n	80105fa <_printf_common+0x8e>
	...

08010648 <_printf_i>:
 8010648:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801064c:	7e0f      	ldrb	r7, [r1, #24]
 801064e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010650:	2f78      	cmp	r7, #120	@ 0x78
 8010652:	4691      	mov	r9, r2
 8010654:	4680      	mov	r8, r0
 8010656:	460c      	mov	r4, r1
 8010658:	469a      	mov	sl, r3
 801065a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801065e:	d807      	bhi.n	8010670 <_printf_i+0x28>
 8010660:	2f62      	cmp	r7, #98	@ 0x62
 8010662:	d80a      	bhi.n	801067a <_printf_i+0x32>
 8010664:	2f00      	cmp	r7, #0
 8010666:	f000 80d2 	beq.w	801080e <_printf_i+0x1c6>
 801066a:	2f58      	cmp	r7, #88	@ 0x58
 801066c:	f000 80b9 	beq.w	80107e2 <_printf_i+0x19a>
 8010670:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010674:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010678:	e03a      	b.n	80106f0 <_printf_i+0xa8>
 801067a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801067e:	2b15      	cmp	r3, #21
 8010680:	d8f6      	bhi.n	8010670 <_printf_i+0x28>
 8010682:	a101      	add	r1, pc, #4	@ (adr r1, 8010688 <_printf_i+0x40>)
 8010684:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010688:	080106e1 	.word	0x080106e1
 801068c:	080106f5 	.word	0x080106f5
 8010690:	08010671 	.word	0x08010671
 8010694:	08010671 	.word	0x08010671
 8010698:	08010671 	.word	0x08010671
 801069c:	08010671 	.word	0x08010671
 80106a0:	080106f5 	.word	0x080106f5
 80106a4:	08010671 	.word	0x08010671
 80106a8:	08010671 	.word	0x08010671
 80106ac:	08010671 	.word	0x08010671
 80106b0:	08010671 	.word	0x08010671
 80106b4:	080107f5 	.word	0x080107f5
 80106b8:	0801071f 	.word	0x0801071f
 80106bc:	080107af 	.word	0x080107af
 80106c0:	08010671 	.word	0x08010671
 80106c4:	08010671 	.word	0x08010671
 80106c8:	08010817 	.word	0x08010817
 80106cc:	08010671 	.word	0x08010671
 80106d0:	0801071f 	.word	0x0801071f
 80106d4:	08010671 	.word	0x08010671
 80106d8:	08010671 	.word	0x08010671
 80106dc:	080107b7 	.word	0x080107b7
 80106e0:	6833      	ldr	r3, [r6, #0]
 80106e2:	1d1a      	adds	r2, r3, #4
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	6032      	str	r2, [r6, #0]
 80106e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80106ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80106f0:	2301      	movs	r3, #1
 80106f2:	e09d      	b.n	8010830 <_printf_i+0x1e8>
 80106f4:	6833      	ldr	r3, [r6, #0]
 80106f6:	6820      	ldr	r0, [r4, #0]
 80106f8:	1d19      	adds	r1, r3, #4
 80106fa:	6031      	str	r1, [r6, #0]
 80106fc:	0606      	lsls	r6, r0, #24
 80106fe:	d501      	bpl.n	8010704 <_printf_i+0xbc>
 8010700:	681d      	ldr	r5, [r3, #0]
 8010702:	e003      	b.n	801070c <_printf_i+0xc4>
 8010704:	0645      	lsls	r5, r0, #25
 8010706:	d5fb      	bpl.n	8010700 <_printf_i+0xb8>
 8010708:	f9b3 5000 	ldrsh.w	r5, [r3]
 801070c:	2d00      	cmp	r5, #0
 801070e:	da03      	bge.n	8010718 <_printf_i+0xd0>
 8010710:	232d      	movs	r3, #45	@ 0x2d
 8010712:	426d      	negs	r5, r5
 8010714:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010718:	4859      	ldr	r0, [pc, #356]	@ (8010880 <_printf_i+0x238>)
 801071a:	230a      	movs	r3, #10
 801071c:	e011      	b.n	8010742 <_printf_i+0xfa>
 801071e:	6821      	ldr	r1, [r4, #0]
 8010720:	6833      	ldr	r3, [r6, #0]
 8010722:	0608      	lsls	r0, r1, #24
 8010724:	f853 5b04 	ldr.w	r5, [r3], #4
 8010728:	d402      	bmi.n	8010730 <_printf_i+0xe8>
 801072a:	0649      	lsls	r1, r1, #25
 801072c:	bf48      	it	mi
 801072e:	b2ad      	uxthmi	r5, r5
 8010730:	2f6f      	cmp	r7, #111	@ 0x6f
 8010732:	4853      	ldr	r0, [pc, #332]	@ (8010880 <_printf_i+0x238>)
 8010734:	6033      	str	r3, [r6, #0]
 8010736:	bf14      	ite	ne
 8010738:	230a      	movne	r3, #10
 801073a:	2308      	moveq	r3, #8
 801073c:	2100      	movs	r1, #0
 801073e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010742:	6866      	ldr	r6, [r4, #4]
 8010744:	60a6      	str	r6, [r4, #8]
 8010746:	2e00      	cmp	r6, #0
 8010748:	bfa2      	ittt	ge
 801074a:	6821      	ldrge	r1, [r4, #0]
 801074c:	f021 0104 	bicge.w	r1, r1, #4
 8010750:	6021      	strge	r1, [r4, #0]
 8010752:	b90d      	cbnz	r5, 8010758 <_printf_i+0x110>
 8010754:	2e00      	cmp	r6, #0
 8010756:	d04b      	beq.n	80107f0 <_printf_i+0x1a8>
 8010758:	4616      	mov	r6, r2
 801075a:	fbb5 f1f3 	udiv	r1, r5, r3
 801075e:	fb03 5711 	mls	r7, r3, r1, r5
 8010762:	5dc7      	ldrb	r7, [r0, r7]
 8010764:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010768:	462f      	mov	r7, r5
 801076a:	42bb      	cmp	r3, r7
 801076c:	460d      	mov	r5, r1
 801076e:	d9f4      	bls.n	801075a <_printf_i+0x112>
 8010770:	2b08      	cmp	r3, #8
 8010772:	d10b      	bne.n	801078c <_printf_i+0x144>
 8010774:	6823      	ldr	r3, [r4, #0]
 8010776:	07df      	lsls	r7, r3, #31
 8010778:	d508      	bpl.n	801078c <_printf_i+0x144>
 801077a:	6923      	ldr	r3, [r4, #16]
 801077c:	6861      	ldr	r1, [r4, #4]
 801077e:	4299      	cmp	r1, r3
 8010780:	bfde      	ittt	le
 8010782:	2330      	movle	r3, #48	@ 0x30
 8010784:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010788:	f106 36ff 	addle.w	r6, r6, #4294967295
 801078c:	1b92      	subs	r2, r2, r6
 801078e:	6122      	str	r2, [r4, #16]
 8010790:	f8cd a000 	str.w	sl, [sp]
 8010794:	464b      	mov	r3, r9
 8010796:	aa03      	add	r2, sp, #12
 8010798:	4621      	mov	r1, r4
 801079a:	4640      	mov	r0, r8
 801079c:	f7ff fee6 	bl	801056c <_printf_common>
 80107a0:	3001      	adds	r0, #1
 80107a2:	d14a      	bne.n	801083a <_printf_i+0x1f2>
 80107a4:	f04f 30ff 	mov.w	r0, #4294967295
 80107a8:	b004      	add	sp, #16
 80107aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107ae:	6823      	ldr	r3, [r4, #0]
 80107b0:	f043 0320 	orr.w	r3, r3, #32
 80107b4:	6023      	str	r3, [r4, #0]
 80107b6:	4833      	ldr	r0, [pc, #204]	@ (8010884 <_printf_i+0x23c>)
 80107b8:	2778      	movs	r7, #120	@ 0x78
 80107ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80107be:	6823      	ldr	r3, [r4, #0]
 80107c0:	6831      	ldr	r1, [r6, #0]
 80107c2:	061f      	lsls	r7, r3, #24
 80107c4:	f851 5b04 	ldr.w	r5, [r1], #4
 80107c8:	d402      	bmi.n	80107d0 <_printf_i+0x188>
 80107ca:	065f      	lsls	r7, r3, #25
 80107cc:	bf48      	it	mi
 80107ce:	b2ad      	uxthmi	r5, r5
 80107d0:	6031      	str	r1, [r6, #0]
 80107d2:	07d9      	lsls	r1, r3, #31
 80107d4:	bf44      	itt	mi
 80107d6:	f043 0320 	orrmi.w	r3, r3, #32
 80107da:	6023      	strmi	r3, [r4, #0]
 80107dc:	b11d      	cbz	r5, 80107e6 <_printf_i+0x19e>
 80107de:	2310      	movs	r3, #16
 80107e0:	e7ac      	b.n	801073c <_printf_i+0xf4>
 80107e2:	4827      	ldr	r0, [pc, #156]	@ (8010880 <_printf_i+0x238>)
 80107e4:	e7e9      	b.n	80107ba <_printf_i+0x172>
 80107e6:	6823      	ldr	r3, [r4, #0]
 80107e8:	f023 0320 	bic.w	r3, r3, #32
 80107ec:	6023      	str	r3, [r4, #0]
 80107ee:	e7f6      	b.n	80107de <_printf_i+0x196>
 80107f0:	4616      	mov	r6, r2
 80107f2:	e7bd      	b.n	8010770 <_printf_i+0x128>
 80107f4:	6833      	ldr	r3, [r6, #0]
 80107f6:	6825      	ldr	r5, [r4, #0]
 80107f8:	6961      	ldr	r1, [r4, #20]
 80107fa:	1d18      	adds	r0, r3, #4
 80107fc:	6030      	str	r0, [r6, #0]
 80107fe:	062e      	lsls	r6, r5, #24
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	d501      	bpl.n	8010808 <_printf_i+0x1c0>
 8010804:	6019      	str	r1, [r3, #0]
 8010806:	e002      	b.n	801080e <_printf_i+0x1c6>
 8010808:	0668      	lsls	r0, r5, #25
 801080a:	d5fb      	bpl.n	8010804 <_printf_i+0x1bc>
 801080c:	8019      	strh	r1, [r3, #0]
 801080e:	2300      	movs	r3, #0
 8010810:	6123      	str	r3, [r4, #16]
 8010812:	4616      	mov	r6, r2
 8010814:	e7bc      	b.n	8010790 <_printf_i+0x148>
 8010816:	6833      	ldr	r3, [r6, #0]
 8010818:	1d1a      	adds	r2, r3, #4
 801081a:	6032      	str	r2, [r6, #0]
 801081c:	681e      	ldr	r6, [r3, #0]
 801081e:	6862      	ldr	r2, [r4, #4]
 8010820:	2100      	movs	r1, #0
 8010822:	4630      	mov	r0, r6
 8010824:	f7ef fd64 	bl	80002f0 <memchr>
 8010828:	b108      	cbz	r0, 801082e <_printf_i+0x1e6>
 801082a:	1b80      	subs	r0, r0, r6
 801082c:	6060      	str	r0, [r4, #4]
 801082e:	6863      	ldr	r3, [r4, #4]
 8010830:	6123      	str	r3, [r4, #16]
 8010832:	2300      	movs	r3, #0
 8010834:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010838:	e7aa      	b.n	8010790 <_printf_i+0x148>
 801083a:	6923      	ldr	r3, [r4, #16]
 801083c:	4632      	mov	r2, r6
 801083e:	4649      	mov	r1, r9
 8010840:	4640      	mov	r0, r8
 8010842:	47d0      	blx	sl
 8010844:	3001      	adds	r0, #1
 8010846:	d0ad      	beq.n	80107a4 <_printf_i+0x15c>
 8010848:	6823      	ldr	r3, [r4, #0]
 801084a:	079b      	lsls	r3, r3, #30
 801084c:	d413      	bmi.n	8010876 <_printf_i+0x22e>
 801084e:	68e0      	ldr	r0, [r4, #12]
 8010850:	9b03      	ldr	r3, [sp, #12]
 8010852:	4298      	cmp	r0, r3
 8010854:	bfb8      	it	lt
 8010856:	4618      	movlt	r0, r3
 8010858:	e7a6      	b.n	80107a8 <_printf_i+0x160>
 801085a:	2301      	movs	r3, #1
 801085c:	4632      	mov	r2, r6
 801085e:	4649      	mov	r1, r9
 8010860:	4640      	mov	r0, r8
 8010862:	47d0      	blx	sl
 8010864:	3001      	adds	r0, #1
 8010866:	d09d      	beq.n	80107a4 <_printf_i+0x15c>
 8010868:	3501      	adds	r5, #1
 801086a:	68e3      	ldr	r3, [r4, #12]
 801086c:	9903      	ldr	r1, [sp, #12]
 801086e:	1a5b      	subs	r3, r3, r1
 8010870:	42ab      	cmp	r3, r5
 8010872:	dcf2      	bgt.n	801085a <_printf_i+0x212>
 8010874:	e7eb      	b.n	801084e <_printf_i+0x206>
 8010876:	2500      	movs	r5, #0
 8010878:	f104 0619 	add.w	r6, r4, #25
 801087c:	e7f5      	b.n	801086a <_printf_i+0x222>
 801087e:	bf00      	nop
 8010880:	08014be2 	.word	0x08014be2
 8010884:	08014bf3 	.word	0x08014bf3

08010888 <_scanf_float>:
 8010888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801088c:	b087      	sub	sp, #28
 801088e:	4617      	mov	r7, r2
 8010890:	9303      	str	r3, [sp, #12]
 8010892:	688b      	ldr	r3, [r1, #8]
 8010894:	1e5a      	subs	r2, r3, #1
 8010896:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801089a:	bf81      	itttt	hi
 801089c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80108a0:	eb03 0b05 	addhi.w	fp, r3, r5
 80108a4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80108a8:	608b      	strhi	r3, [r1, #8]
 80108aa:	680b      	ldr	r3, [r1, #0]
 80108ac:	460a      	mov	r2, r1
 80108ae:	f04f 0500 	mov.w	r5, #0
 80108b2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80108b6:	f842 3b1c 	str.w	r3, [r2], #28
 80108ba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80108be:	4680      	mov	r8, r0
 80108c0:	460c      	mov	r4, r1
 80108c2:	bf98      	it	ls
 80108c4:	f04f 0b00 	movls.w	fp, #0
 80108c8:	9201      	str	r2, [sp, #4]
 80108ca:	4616      	mov	r6, r2
 80108cc:	46aa      	mov	sl, r5
 80108ce:	46a9      	mov	r9, r5
 80108d0:	9502      	str	r5, [sp, #8]
 80108d2:	68a2      	ldr	r2, [r4, #8]
 80108d4:	b152      	cbz	r2, 80108ec <_scanf_float+0x64>
 80108d6:	683b      	ldr	r3, [r7, #0]
 80108d8:	781b      	ldrb	r3, [r3, #0]
 80108da:	2b4e      	cmp	r3, #78	@ 0x4e
 80108dc:	d864      	bhi.n	80109a8 <_scanf_float+0x120>
 80108de:	2b40      	cmp	r3, #64	@ 0x40
 80108e0:	d83c      	bhi.n	801095c <_scanf_float+0xd4>
 80108e2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80108e6:	b2c8      	uxtb	r0, r1
 80108e8:	280e      	cmp	r0, #14
 80108ea:	d93a      	bls.n	8010962 <_scanf_float+0xda>
 80108ec:	f1b9 0f00 	cmp.w	r9, #0
 80108f0:	d003      	beq.n	80108fa <_scanf_float+0x72>
 80108f2:	6823      	ldr	r3, [r4, #0]
 80108f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80108f8:	6023      	str	r3, [r4, #0]
 80108fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80108fe:	f1ba 0f01 	cmp.w	sl, #1
 8010902:	f200 8117 	bhi.w	8010b34 <_scanf_float+0x2ac>
 8010906:	9b01      	ldr	r3, [sp, #4]
 8010908:	429e      	cmp	r6, r3
 801090a:	f200 8108 	bhi.w	8010b1e <_scanf_float+0x296>
 801090e:	2001      	movs	r0, #1
 8010910:	b007      	add	sp, #28
 8010912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010916:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801091a:	2a0d      	cmp	r2, #13
 801091c:	d8e6      	bhi.n	80108ec <_scanf_float+0x64>
 801091e:	a101      	add	r1, pc, #4	@ (adr r1, 8010924 <_scanf_float+0x9c>)
 8010920:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010924:	08010a6b 	.word	0x08010a6b
 8010928:	080108ed 	.word	0x080108ed
 801092c:	080108ed 	.word	0x080108ed
 8010930:	080108ed 	.word	0x080108ed
 8010934:	08010acb 	.word	0x08010acb
 8010938:	08010aa3 	.word	0x08010aa3
 801093c:	080108ed 	.word	0x080108ed
 8010940:	080108ed 	.word	0x080108ed
 8010944:	08010a79 	.word	0x08010a79
 8010948:	080108ed 	.word	0x080108ed
 801094c:	080108ed 	.word	0x080108ed
 8010950:	080108ed 	.word	0x080108ed
 8010954:	080108ed 	.word	0x080108ed
 8010958:	08010a31 	.word	0x08010a31
 801095c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8010960:	e7db      	b.n	801091a <_scanf_float+0x92>
 8010962:	290e      	cmp	r1, #14
 8010964:	d8c2      	bhi.n	80108ec <_scanf_float+0x64>
 8010966:	a001      	add	r0, pc, #4	@ (adr r0, 801096c <_scanf_float+0xe4>)
 8010968:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801096c:	08010a21 	.word	0x08010a21
 8010970:	080108ed 	.word	0x080108ed
 8010974:	08010a21 	.word	0x08010a21
 8010978:	08010ab7 	.word	0x08010ab7
 801097c:	080108ed 	.word	0x080108ed
 8010980:	080109c9 	.word	0x080109c9
 8010984:	08010a07 	.word	0x08010a07
 8010988:	08010a07 	.word	0x08010a07
 801098c:	08010a07 	.word	0x08010a07
 8010990:	08010a07 	.word	0x08010a07
 8010994:	08010a07 	.word	0x08010a07
 8010998:	08010a07 	.word	0x08010a07
 801099c:	08010a07 	.word	0x08010a07
 80109a0:	08010a07 	.word	0x08010a07
 80109a4:	08010a07 	.word	0x08010a07
 80109a8:	2b6e      	cmp	r3, #110	@ 0x6e
 80109aa:	d809      	bhi.n	80109c0 <_scanf_float+0x138>
 80109ac:	2b60      	cmp	r3, #96	@ 0x60
 80109ae:	d8b2      	bhi.n	8010916 <_scanf_float+0x8e>
 80109b0:	2b54      	cmp	r3, #84	@ 0x54
 80109b2:	d07b      	beq.n	8010aac <_scanf_float+0x224>
 80109b4:	2b59      	cmp	r3, #89	@ 0x59
 80109b6:	d199      	bne.n	80108ec <_scanf_float+0x64>
 80109b8:	2d07      	cmp	r5, #7
 80109ba:	d197      	bne.n	80108ec <_scanf_float+0x64>
 80109bc:	2508      	movs	r5, #8
 80109be:	e02c      	b.n	8010a1a <_scanf_float+0x192>
 80109c0:	2b74      	cmp	r3, #116	@ 0x74
 80109c2:	d073      	beq.n	8010aac <_scanf_float+0x224>
 80109c4:	2b79      	cmp	r3, #121	@ 0x79
 80109c6:	e7f6      	b.n	80109b6 <_scanf_float+0x12e>
 80109c8:	6821      	ldr	r1, [r4, #0]
 80109ca:	05c8      	lsls	r0, r1, #23
 80109cc:	d51b      	bpl.n	8010a06 <_scanf_float+0x17e>
 80109ce:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80109d2:	6021      	str	r1, [r4, #0]
 80109d4:	f109 0901 	add.w	r9, r9, #1
 80109d8:	f1bb 0f00 	cmp.w	fp, #0
 80109dc:	d003      	beq.n	80109e6 <_scanf_float+0x15e>
 80109de:	3201      	adds	r2, #1
 80109e0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80109e4:	60a2      	str	r2, [r4, #8]
 80109e6:	68a3      	ldr	r3, [r4, #8]
 80109e8:	3b01      	subs	r3, #1
 80109ea:	60a3      	str	r3, [r4, #8]
 80109ec:	6923      	ldr	r3, [r4, #16]
 80109ee:	3301      	adds	r3, #1
 80109f0:	6123      	str	r3, [r4, #16]
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	3b01      	subs	r3, #1
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	607b      	str	r3, [r7, #4]
 80109fa:	f340 8087 	ble.w	8010b0c <_scanf_float+0x284>
 80109fe:	683b      	ldr	r3, [r7, #0]
 8010a00:	3301      	adds	r3, #1
 8010a02:	603b      	str	r3, [r7, #0]
 8010a04:	e765      	b.n	80108d2 <_scanf_float+0x4a>
 8010a06:	eb1a 0105 	adds.w	r1, sl, r5
 8010a0a:	f47f af6f 	bne.w	80108ec <_scanf_float+0x64>
 8010a0e:	6822      	ldr	r2, [r4, #0]
 8010a10:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8010a14:	6022      	str	r2, [r4, #0]
 8010a16:	460d      	mov	r5, r1
 8010a18:	468a      	mov	sl, r1
 8010a1a:	f806 3b01 	strb.w	r3, [r6], #1
 8010a1e:	e7e2      	b.n	80109e6 <_scanf_float+0x15e>
 8010a20:	6822      	ldr	r2, [r4, #0]
 8010a22:	0610      	lsls	r0, r2, #24
 8010a24:	f57f af62 	bpl.w	80108ec <_scanf_float+0x64>
 8010a28:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8010a2c:	6022      	str	r2, [r4, #0]
 8010a2e:	e7f4      	b.n	8010a1a <_scanf_float+0x192>
 8010a30:	f1ba 0f00 	cmp.w	sl, #0
 8010a34:	d10e      	bne.n	8010a54 <_scanf_float+0x1cc>
 8010a36:	f1b9 0f00 	cmp.w	r9, #0
 8010a3a:	d10e      	bne.n	8010a5a <_scanf_float+0x1d2>
 8010a3c:	6822      	ldr	r2, [r4, #0]
 8010a3e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8010a42:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8010a46:	d108      	bne.n	8010a5a <_scanf_float+0x1d2>
 8010a48:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8010a4c:	6022      	str	r2, [r4, #0]
 8010a4e:	f04f 0a01 	mov.w	sl, #1
 8010a52:	e7e2      	b.n	8010a1a <_scanf_float+0x192>
 8010a54:	f1ba 0f02 	cmp.w	sl, #2
 8010a58:	d055      	beq.n	8010b06 <_scanf_float+0x27e>
 8010a5a:	2d01      	cmp	r5, #1
 8010a5c:	d002      	beq.n	8010a64 <_scanf_float+0x1dc>
 8010a5e:	2d04      	cmp	r5, #4
 8010a60:	f47f af44 	bne.w	80108ec <_scanf_float+0x64>
 8010a64:	3501      	adds	r5, #1
 8010a66:	b2ed      	uxtb	r5, r5
 8010a68:	e7d7      	b.n	8010a1a <_scanf_float+0x192>
 8010a6a:	f1ba 0f01 	cmp.w	sl, #1
 8010a6e:	f47f af3d 	bne.w	80108ec <_scanf_float+0x64>
 8010a72:	f04f 0a02 	mov.w	sl, #2
 8010a76:	e7d0      	b.n	8010a1a <_scanf_float+0x192>
 8010a78:	b97d      	cbnz	r5, 8010a9a <_scanf_float+0x212>
 8010a7a:	f1b9 0f00 	cmp.w	r9, #0
 8010a7e:	f47f af38 	bne.w	80108f2 <_scanf_float+0x6a>
 8010a82:	6822      	ldr	r2, [r4, #0]
 8010a84:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8010a88:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8010a8c:	f040 8101 	bne.w	8010c92 <_scanf_float+0x40a>
 8010a90:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8010a94:	6022      	str	r2, [r4, #0]
 8010a96:	2501      	movs	r5, #1
 8010a98:	e7bf      	b.n	8010a1a <_scanf_float+0x192>
 8010a9a:	2d03      	cmp	r5, #3
 8010a9c:	d0e2      	beq.n	8010a64 <_scanf_float+0x1dc>
 8010a9e:	2d05      	cmp	r5, #5
 8010aa0:	e7de      	b.n	8010a60 <_scanf_float+0x1d8>
 8010aa2:	2d02      	cmp	r5, #2
 8010aa4:	f47f af22 	bne.w	80108ec <_scanf_float+0x64>
 8010aa8:	2503      	movs	r5, #3
 8010aaa:	e7b6      	b.n	8010a1a <_scanf_float+0x192>
 8010aac:	2d06      	cmp	r5, #6
 8010aae:	f47f af1d 	bne.w	80108ec <_scanf_float+0x64>
 8010ab2:	2507      	movs	r5, #7
 8010ab4:	e7b1      	b.n	8010a1a <_scanf_float+0x192>
 8010ab6:	6822      	ldr	r2, [r4, #0]
 8010ab8:	0591      	lsls	r1, r2, #22
 8010aba:	f57f af17 	bpl.w	80108ec <_scanf_float+0x64>
 8010abe:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8010ac2:	6022      	str	r2, [r4, #0]
 8010ac4:	f8cd 9008 	str.w	r9, [sp, #8]
 8010ac8:	e7a7      	b.n	8010a1a <_scanf_float+0x192>
 8010aca:	6822      	ldr	r2, [r4, #0]
 8010acc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8010ad0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8010ad4:	d006      	beq.n	8010ae4 <_scanf_float+0x25c>
 8010ad6:	0550      	lsls	r0, r2, #21
 8010ad8:	f57f af08 	bpl.w	80108ec <_scanf_float+0x64>
 8010adc:	f1b9 0f00 	cmp.w	r9, #0
 8010ae0:	f000 80d7 	beq.w	8010c92 <_scanf_float+0x40a>
 8010ae4:	0591      	lsls	r1, r2, #22
 8010ae6:	bf58      	it	pl
 8010ae8:	9902      	ldrpl	r1, [sp, #8]
 8010aea:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8010aee:	bf58      	it	pl
 8010af0:	eba9 0101 	subpl.w	r1, r9, r1
 8010af4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8010af8:	bf58      	it	pl
 8010afa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8010afe:	6022      	str	r2, [r4, #0]
 8010b00:	f04f 0900 	mov.w	r9, #0
 8010b04:	e789      	b.n	8010a1a <_scanf_float+0x192>
 8010b06:	f04f 0a03 	mov.w	sl, #3
 8010b0a:	e786      	b.n	8010a1a <_scanf_float+0x192>
 8010b0c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8010b10:	4639      	mov	r1, r7
 8010b12:	4640      	mov	r0, r8
 8010b14:	4798      	blx	r3
 8010b16:	2800      	cmp	r0, #0
 8010b18:	f43f aedb 	beq.w	80108d2 <_scanf_float+0x4a>
 8010b1c:	e6e6      	b.n	80108ec <_scanf_float+0x64>
 8010b1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010b22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010b26:	463a      	mov	r2, r7
 8010b28:	4640      	mov	r0, r8
 8010b2a:	4798      	blx	r3
 8010b2c:	6923      	ldr	r3, [r4, #16]
 8010b2e:	3b01      	subs	r3, #1
 8010b30:	6123      	str	r3, [r4, #16]
 8010b32:	e6e8      	b.n	8010906 <_scanf_float+0x7e>
 8010b34:	1e6b      	subs	r3, r5, #1
 8010b36:	2b06      	cmp	r3, #6
 8010b38:	d824      	bhi.n	8010b84 <_scanf_float+0x2fc>
 8010b3a:	2d02      	cmp	r5, #2
 8010b3c:	d836      	bhi.n	8010bac <_scanf_float+0x324>
 8010b3e:	9b01      	ldr	r3, [sp, #4]
 8010b40:	429e      	cmp	r6, r3
 8010b42:	f67f aee4 	bls.w	801090e <_scanf_float+0x86>
 8010b46:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010b4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010b4e:	463a      	mov	r2, r7
 8010b50:	4640      	mov	r0, r8
 8010b52:	4798      	blx	r3
 8010b54:	6923      	ldr	r3, [r4, #16]
 8010b56:	3b01      	subs	r3, #1
 8010b58:	6123      	str	r3, [r4, #16]
 8010b5a:	e7f0      	b.n	8010b3e <_scanf_float+0x2b6>
 8010b5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010b60:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8010b64:	463a      	mov	r2, r7
 8010b66:	4640      	mov	r0, r8
 8010b68:	4798      	blx	r3
 8010b6a:	6923      	ldr	r3, [r4, #16]
 8010b6c:	3b01      	subs	r3, #1
 8010b6e:	6123      	str	r3, [r4, #16]
 8010b70:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010b74:	fa5f fa8a 	uxtb.w	sl, sl
 8010b78:	f1ba 0f02 	cmp.w	sl, #2
 8010b7c:	d1ee      	bne.n	8010b5c <_scanf_float+0x2d4>
 8010b7e:	3d03      	subs	r5, #3
 8010b80:	b2ed      	uxtb	r5, r5
 8010b82:	1b76      	subs	r6, r6, r5
 8010b84:	6823      	ldr	r3, [r4, #0]
 8010b86:	05da      	lsls	r2, r3, #23
 8010b88:	d530      	bpl.n	8010bec <_scanf_float+0x364>
 8010b8a:	055b      	lsls	r3, r3, #21
 8010b8c:	d511      	bpl.n	8010bb2 <_scanf_float+0x32a>
 8010b8e:	9b01      	ldr	r3, [sp, #4]
 8010b90:	429e      	cmp	r6, r3
 8010b92:	f67f aebc 	bls.w	801090e <_scanf_float+0x86>
 8010b96:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010b9a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010b9e:	463a      	mov	r2, r7
 8010ba0:	4640      	mov	r0, r8
 8010ba2:	4798      	blx	r3
 8010ba4:	6923      	ldr	r3, [r4, #16]
 8010ba6:	3b01      	subs	r3, #1
 8010ba8:	6123      	str	r3, [r4, #16]
 8010baa:	e7f0      	b.n	8010b8e <_scanf_float+0x306>
 8010bac:	46aa      	mov	sl, r5
 8010bae:	46b3      	mov	fp, r6
 8010bb0:	e7de      	b.n	8010b70 <_scanf_float+0x2e8>
 8010bb2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8010bb6:	6923      	ldr	r3, [r4, #16]
 8010bb8:	2965      	cmp	r1, #101	@ 0x65
 8010bba:	f103 33ff 	add.w	r3, r3, #4294967295
 8010bbe:	f106 35ff 	add.w	r5, r6, #4294967295
 8010bc2:	6123      	str	r3, [r4, #16]
 8010bc4:	d00c      	beq.n	8010be0 <_scanf_float+0x358>
 8010bc6:	2945      	cmp	r1, #69	@ 0x45
 8010bc8:	d00a      	beq.n	8010be0 <_scanf_float+0x358>
 8010bca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010bce:	463a      	mov	r2, r7
 8010bd0:	4640      	mov	r0, r8
 8010bd2:	4798      	blx	r3
 8010bd4:	6923      	ldr	r3, [r4, #16]
 8010bd6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8010bda:	3b01      	subs	r3, #1
 8010bdc:	1eb5      	subs	r5, r6, #2
 8010bde:	6123      	str	r3, [r4, #16]
 8010be0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010be4:	463a      	mov	r2, r7
 8010be6:	4640      	mov	r0, r8
 8010be8:	4798      	blx	r3
 8010bea:	462e      	mov	r6, r5
 8010bec:	6822      	ldr	r2, [r4, #0]
 8010bee:	f012 0210 	ands.w	r2, r2, #16
 8010bf2:	d001      	beq.n	8010bf8 <_scanf_float+0x370>
 8010bf4:	2000      	movs	r0, #0
 8010bf6:	e68b      	b.n	8010910 <_scanf_float+0x88>
 8010bf8:	7032      	strb	r2, [r6, #0]
 8010bfa:	6823      	ldr	r3, [r4, #0]
 8010bfc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8010c00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010c04:	d11a      	bne.n	8010c3c <_scanf_float+0x3b4>
 8010c06:	9b02      	ldr	r3, [sp, #8]
 8010c08:	454b      	cmp	r3, r9
 8010c0a:	eba3 0209 	sub.w	r2, r3, r9
 8010c0e:	d121      	bne.n	8010c54 <_scanf_float+0x3cc>
 8010c10:	9901      	ldr	r1, [sp, #4]
 8010c12:	2200      	movs	r2, #0
 8010c14:	4640      	mov	r0, r8
 8010c16:	f002 fc49 	bl	80134ac <_strtod_r>
 8010c1a:	9b03      	ldr	r3, [sp, #12]
 8010c1c:	6821      	ldr	r1, [r4, #0]
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	f011 0f02 	tst.w	r1, #2
 8010c24:	f103 0204 	add.w	r2, r3, #4
 8010c28:	d01f      	beq.n	8010c6a <_scanf_float+0x3e2>
 8010c2a:	9903      	ldr	r1, [sp, #12]
 8010c2c:	600a      	str	r2, [r1, #0]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	ed83 0b00 	vstr	d0, [r3]
 8010c34:	68e3      	ldr	r3, [r4, #12]
 8010c36:	3301      	adds	r3, #1
 8010c38:	60e3      	str	r3, [r4, #12]
 8010c3a:	e7db      	b.n	8010bf4 <_scanf_float+0x36c>
 8010c3c:	9b04      	ldr	r3, [sp, #16]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d0e6      	beq.n	8010c10 <_scanf_float+0x388>
 8010c42:	9905      	ldr	r1, [sp, #20]
 8010c44:	230a      	movs	r3, #10
 8010c46:	3101      	adds	r1, #1
 8010c48:	4640      	mov	r0, r8
 8010c4a:	f002 fcaf 	bl	80135ac <_strtol_r>
 8010c4e:	9b04      	ldr	r3, [sp, #16]
 8010c50:	9e05      	ldr	r6, [sp, #20]
 8010c52:	1ac2      	subs	r2, r0, r3
 8010c54:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8010c58:	429e      	cmp	r6, r3
 8010c5a:	bf28      	it	cs
 8010c5c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8010c60:	490d      	ldr	r1, [pc, #52]	@ (8010c98 <_scanf_float+0x410>)
 8010c62:	4630      	mov	r0, r6
 8010c64:	f000 f960 	bl	8010f28 <siprintf>
 8010c68:	e7d2      	b.n	8010c10 <_scanf_float+0x388>
 8010c6a:	f011 0f04 	tst.w	r1, #4
 8010c6e:	9903      	ldr	r1, [sp, #12]
 8010c70:	600a      	str	r2, [r1, #0]
 8010c72:	d1dc      	bne.n	8010c2e <_scanf_float+0x3a6>
 8010c74:	eeb4 0b40 	vcmp.f64	d0, d0
 8010c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c7c:	681d      	ldr	r5, [r3, #0]
 8010c7e:	d705      	bvc.n	8010c8c <_scanf_float+0x404>
 8010c80:	4806      	ldr	r0, [pc, #24]	@ (8010c9c <_scanf_float+0x414>)
 8010c82:	f000 fb81 	bl	8011388 <nanf>
 8010c86:	ed85 0a00 	vstr	s0, [r5]
 8010c8a:	e7d3      	b.n	8010c34 <_scanf_float+0x3ac>
 8010c8c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8010c90:	e7f9      	b.n	8010c86 <_scanf_float+0x3fe>
 8010c92:	f04f 0900 	mov.w	r9, #0
 8010c96:	e630      	b.n	80108fa <_scanf_float+0x72>
 8010c98:	08014c04 	.word	0x08014c04
 8010c9c:	08014bcf 	.word	0x08014bcf

08010ca0 <std>:
 8010ca0:	2300      	movs	r3, #0
 8010ca2:	b510      	push	{r4, lr}
 8010ca4:	4604      	mov	r4, r0
 8010ca6:	e9c0 3300 	strd	r3, r3, [r0]
 8010caa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010cae:	6083      	str	r3, [r0, #8]
 8010cb0:	8181      	strh	r1, [r0, #12]
 8010cb2:	6643      	str	r3, [r0, #100]	@ 0x64
 8010cb4:	81c2      	strh	r2, [r0, #14]
 8010cb6:	6183      	str	r3, [r0, #24]
 8010cb8:	4619      	mov	r1, r3
 8010cba:	2208      	movs	r2, #8
 8010cbc:	305c      	adds	r0, #92	@ 0x5c
 8010cbe:	f000 fa2b 	bl	8011118 <memset>
 8010cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8010cf8 <std+0x58>)
 8010cc4:	6263      	str	r3, [r4, #36]	@ 0x24
 8010cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8010cfc <std+0x5c>)
 8010cc8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010cca:	4b0d      	ldr	r3, [pc, #52]	@ (8010d00 <std+0x60>)
 8010ccc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010cce:	4b0d      	ldr	r3, [pc, #52]	@ (8010d04 <std+0x64>)
 8010cd0:	6323      	str	r3, [r4, #48]	@ 0x30
 8010cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8010d08 <std+0x68>)
 8010cd4:	6224      	str	r4, [r4, #32]
 8010cd6:	429c      	cmp	r4, r3
 8010cd8:	d006      	beq.n	8010ce8 <std+0x48>
 8010cda:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010cde:	4294      	cmp	r4, r2
 8010ce0:	d002      	beq.n	8010ce8 <std+0x48>
 8010ce2:	33d0      	adds	r3, #208	@ 0xd0
 8010ce4:	429c      	cmp	r4, r3
 8010ce6:	d105      	bne.n	8010cf4 <std+0x54>
 8010ce8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010cf0:	f000 bb38 	b.w	8011364 <__retarget_lock_init_recursive>
 8010cf4:	bd10      	pop	{r4, pc}
 8010cf6:	bf00      	nop
 8010cf8:	08010f69 	.word	0x08010f69
 8010cfc:	08010f8b 	.word	0x08010f8b
 8010d00:	08010fc3 	.word	0x08010fc3
 8010d04:	08010fe7 	.word	0x08010fe7
 8010d08:	24004e3c 	.word	0x24004e3c

08010d0c <stdio_exit_handler>:
 8010d0c:	4a02      	ldr	r2, [pc, #8]	@ (8010d18 <stdio_exit_handler+0xc>)
 8010d0e:	4903      	ldr	r1, [pc, #12]	@ (8010d1c <stdio_exit_handler+0x10>)
 8010d10:	4803      	ldr	r0, [pc, #12]	@ (8010d20 <stdio_exit_handler+0x14>)
 8010d12:	f000 b87b 	b.w	8010e0c <_fwalk_sglue>
 8010d16:	bf00      	nop
 8010d18:	24000014 	.word	0x24000014
 8010d1c:	08013bed 	.word	0x08013bed
 8010d20:	24000024 	.word	0x24000024

08010d24 <cleanup_stdio>:
 8010d24:	6841      	ldr	r1, [r0, #4]
 8010d26:	4b0c      	ldr	r3, [pc, #48]	@ (8010d58 <cleanup_stdio+0x34>)
 8010d28:	4299      	cmp	r1, r3
 8010d2a:	b510      	push	{r4, lr}
 8010d2c:	4604      	mov	r4, r0
 8010d2e:	d001      	beq.n	8010d34 <cleanup_stdio+0x10>
 8010d30:	f002 ff5c 	bl	8013bec <_fflush_r>
 8010d34:	68a1      	ldr	r1, [r4, #8]
 8010d36:	4b09      	ldr	r3, [pc, #36]	@ (8010d5c <cleanup_stdio+0x38>)
 8010d38:	4299      	cmp	r1, r3
 8010d3a:	d002      	beq.n	8010d42 <cleanup_stdio+0x1e>
 8010d3c:	4620      	mov	r0, r4
 8010d3e:	f002 ff55 	bl	8013bec <_fflush_r>
 8010d42:	68e1      	ldr	r1, [r4, #12]
 8010d44:	4b06      	ldr	r3, [pc, #24]	@ (8010d60 <cleanup_stdio+0x3c>)
 8010d46:	4299      	cmp	r1, r3
 8010d48:	d004      	beq.n	8010d54 <cleanup_stdio+0x30>
 8010d4a:	4620      	mov	r0, r4
 8010d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d50:	f002 bf4c 	b.w	8013bec <_fflush_r>
 8010d54:	bd10      	pop	{r4, pc}
 8010d56:	bf00      	nop
 8010d58:	24004e3c 	.word	0x24004e3c
 8010d5c:	24004ea4 	.word	0x24004ea4
 8010d60:	24004f0c 	.word	0x24004f0c

08010d64 <global_stdio_init.part.0>:
 8010d64:	b510      	push	{r4, lr}
 8010d66:	4b0b      	ldr	r3, [pc, #44]	@ (8010d94 <global_stdio_init.part.0+0x30>)
 8010d68:	4c0b      	ldr	r4, [pc, #44]	@ (8010d98 <global_stdio_init.part.0+0x34>)
 8010d6a:	4a0c      	ldr	r2, [pc, #48]	@ (8010d9c <global_stdio_init.part.0+0x38>)
 8010d6c:	601a      	str	r2, [r3, #0]
 8010d6e:	4620      	mov	r0, r4
 8010d70:	2200      	movs	r2, #0
 8010d72:	2104      	movs	r1, #4
 8010d74:	f7ff ff94 	bl	8010ca0 <std>
 8010d78:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010d7c:	2201      	movs	r2, #1
 8010d7e:	2109      	movs	r1, #9
 8010d80:	f7ff ff8e 	bl	8010ca0 <std>
 8010d84:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010d88:	2202      	movs	r2, #2
 8010d8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d8e:	2112      	movs	r1, #18
 8010d90:	f7ff bf86 	b.w	8010ca0 <std>
 8010d94:	24004f74 	.word	0x24004f74
 8010d98:	24004e3c 	.word	0x24004e3c
 8010d9c:	08010d0d 	.word	0x08010d0d

08010da0 <__sfp_lock_acquire>:
 8010da0:	4801      	ldr	r0, [pc, #4]	@ (8010da8 <__sfp_lock_acquire+0x8>)
 8010da2:	f000 bae0 	b.w	8011366 <__retarget_lock_acquire_recursive>
 8010da6:	bf00      	nop
 8010da8:	24004f7d 	.word	0x24004f7d

08010dac <__sfp_lock_release>:
 8010dac:	4801      	ldr	r0, [pc, #4]	@ (8010db4 <__sfp_lock_release+0x8>)
 8010dae:	f000 badb 	b.w	8011368 <__retarget_lock_release_recursive>
 8010db2:	bf00      	nop
 8010db4:	24004f7d 	.word	0x24004f7d

08010db8 <__sinit>:
 8010db8:	b510      	push	{r4, lr}
 8010dba:	4604      	mov	r4, r0
 8010dbc:	f7ff fff0 	bl	8010da0 <__sfp_lock_acquire>
 8010dc0:	6a23      	ldr	r3, [r4, #32]
 8010dc2:	b11b      	cbz	r3, 8010dcc <__sinit+0x14>
 8010dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010dc8:	f7ff bff0 	b.w	8010dac <__sfp_lock_release>
 8010dcc:	4b04      	ldr	r3, [pc, #16]	@ (8010de0 <__sinit+0x28>)
 8010dce:	6223      	str	r3, [r4, #32]
 8010dd0:	4b04      	ldr	r3, [pc, #16]	@ (8010de4 <__sinit+0x2c>)
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d1f5      	bne.n	8010dc4 <__sinit+0xc>
 8010dd8:	f7ff ffc4 	bl	8010d64 <global_stdio_init.part.0>
 8010ddc:	e7f2      	b.n	8010dc4 <__sinit+0xc>
 8010dde:	bf00      	nop
 8010de0:	08010d25 	.word	0x08010d25
 8010de4:	24004f74 	.word	0x24004f74

08010de8 <fiprintf>:
 8010de8:	b40e      	push	{r1, r2, r3}
 8010dea:	b503      	push	{r0, r1, lr}
 8010dec:	4601      	mov	r1, r0
 8010dee:	ab03      	add	r3, sp, #12
 8010df0:	4805      	ldr	r0, [pc, #20]	@ (8010e08 <fiprintf+0x20>)
 8010df2:	f853 2b04 	ldr.w	r2, [r3], #4
 8010df6:	6800      	ldr	r0, [r0, #0]
 8010df8:	9301      	str	r3, [sp, #4]
 8010dfa:	f002 fd5b 	bl	80138b4 <_vfiprintf_r>
 8010dfe:	b002      	add	sp, #8
 8010e00:	f85d eb04 	ldr.w	lr, [sp], #4
 8010e04:	b003      	add	sp, #12
 8010e06:	4770      	bx	lr
 8010e08:	24000020 	.word	0x24000020

08010e0c <_fwalk_sglue>:
 8010e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e10:	4607      	mov	r7, r0
 8010e12:	4688      	mov	r8, r1
 8010e14:	4614      	mov	r4, r2
 8010e16:	2600      	movs	r6, #0
 8010e18:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010e1c:	f1b9 0901 	subs.w	r9, r9, #1
 8010e20:	d505      	bpl.n	8010e2e <_fwalk_sglue+0x22>
 8010e22:	6824      	ldr	r4, [r4, #0]
 8010e24:	2c00      	cmp	r4, #0
 8010e26:	d1f7      	bne.n	8010e18 <_fwalk_sglue+0xc>
 8010e28:	4630      	mov	r0, r6
 8010e2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e2e:	89ab      	ldrh	r3, [r5, #12]
 8010e30:	2b01      	cmp	r3, #1
 8010e32:	d907      	bls.n	8010e44 <_fwalk_sglue+0x38>
 8010e34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010e38:	3301      	adds	r3, #1
 8010e3a:	d003      	beq.n	8010e44 <_fwalk_sglue+0x38>
 8010e3c:	4629      	mov	r1, r5
 8010e3e:	4638      	mov	r0, r7
 8010e40:	47c0      	blx	r8
 8010e42:	4306      	orrs	r6, r0
 8010e44:	3568      	adds	r5, #104	@ 0x68
 8010e46:	e7e9      	b.n	8010e1c <_fwalk_sglue+0x10>

08010e48 <iprintf>:
 8010e48:	b40f      	push	{r0, r1, r2, r3}
 8010e4a:	b507      	push	{r0, r1, r2, lr}
 8010e4c:	4906      	ldr	r1, [pc, #24]	@ (8010e68 <iprintf+0x20>)
 8010e4e:	ab04      	add	r3, sp, #16
 8010e50:	6808      	ldr	r0, [r1, #0]
 8010e52:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e56:	6881      	ldr	r1, [r0, #8]
 8010e58:	9301      	str	r3, [sp, #4]
 8010e5a:	f002 fd2b 	bl	80138b4 <_vfiprintf_r>
 8010e5e:	b003      	add	sp, #12
 8010e60:	f85d eb04 	ldr.w	lr, [sp], #4
 8010e64:	b004      	add	sp, #16
 8010e66:	4770      	bx	lr
 8010e68:	24000020 	.word	0x24000020

08010e6c <_puts_r>:
 8010e6c:	6a03      	ldr	r3, [r0, #32]
 8010e6e:	b570      	push	{r4, r5, r6, lr}
 8010e70:	6884      	ldr	r4, [r0, #8]
 8010e72:	4605      	mov	r5, r0
 8010e74:	460e      	mov	r6, r1
 8010e76:	b90b      	cbnz	r3, 8010e7c <_puts_r+0x10>
 8010e78:	f7ff ff9e 	bl	8010db8 <__sinit>
 8010e7c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010e7e:	07db      	lsls	r3, r3, #31
 8010e80:	d405      	bmi.n	8010e8e <_puts_r+0x22>
 8010e82:	89a3      	ldrh	r3, [r4, #12]
 8010e84:	0598      	lsls	r0, r3, #22
 8010e86:	d402      	bmi.n	8010e8e <_puts_r+0x22>
 8010e88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010e8a:	f000 fa6c 	bl	8011366 <__retarget_lock_acquire_recursive>
 8010e8e:	89a3      	ldrh	r3, [r4, #12]
 8010e90:	0719      	lsls	r1, r3, #28
 8010e92:	d502      	bpl.n	8010e9a <_puts_r+0x2e>
 8010e94:	6923      	ldr	r3, [r4, #16]
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d135      	bne.n	8010f06 <_puts_r+0x9a>
 8010e9a:	4621      	mov	r1, r4
 8010e9c:	4628      	mov	r0, r5
 8010e9e:	f000 f8e5 	bl	801106c <__swsetup_r>
 8010ea2:	b380      	cbz	r0, 8010f06 <_puts_r+0x9a>
 8010ea4:	f04f 35ff 	mov.w	r5, #4294967295
 8010ea8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010eaa:	07da      	lsls	r2, r3, #31
 8010eac:	d405      	bmi.n	8010eba <_puts_r+0x4e>
 8010eae:	89a3      	ldrh	r3, [r4, #12]
 8010eb0:	059b      	lsls	r3, r3, #22
 8010eb2:	d402      	bmi.n	8010eba <_puts_r+0x4e>
 8010eb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010eb6:	f000 fa57 	bl	8011368 <__retarget_lock_release_recursive>
 8010eba:	4628      	mov	r0, r5
 8010ebc:	bd70      	pop	{r4, r5, r6, pc}
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	da04      	bge.n	8010ecc <_puts_r+0x60>
 8010ec2:	69a2      	ldr	r2, [r4, #24]
 8010ec4:	429a      	cmp	r2, r3
 8010ec6:	dc17      	bgt.n	8010ef8 <_puts_r+0x8c>
 8010ec8:	290a      	cmp	r1, #10
 8010eca:	d015      	beq.n	8010ef8 <_puts_r+0x8c>
 8010ecc:	6823      	ldr	r3, [r4, #0]
 8010ece:	1c5a      	adds	r2, r3, #1
 8010ed0:	6022      	str	r2, [r4, #0]
 8010ed2:	7019      	strb	r1, [r3, #0]
 8010ed4:	68a3      	ldr	r3, [r4, #8]
 8010ed6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010eda:	3b01      	subs	r3, #1
 8010edc:	60a3      	str	r3, [r4, #8]
 8010ede:	2900      	cmp	r1, #0
 8010ee0:	d1ed      	bne.n	8010ebe <_puts_r+0x52>
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	da11      	bge.n	8010f0a <_puts_r+0x9e>
 8010ee6:	4622      	mov	r2, r4
 8010ee8:	210a      	movs	r1, #10
 8010eea:	4628      	mov	r0, r5
 8010eec:	f000 f87f 	bl	8010fee <__swbuf_r>
 8010ef0:	3001      	adds	r0, #1
 8010ef2:	d0d7      	beq.n	8010ea4 <_puts_r+0x38>
 8010ef4:	250a      	movs	r5, #10
 8010ef6:	e7d7      	b.n	8010ea8 <_puts_r+0x3c>
 8010ef8:	4622      	mov	r2, r4
 8010efa:	4628      	mov	r0, r5
 8010efc:	f000 f877 	bl	8010fee <__swbuf_r>
 8010f00:	3001      	adds	r0, #1
 8010f02:	d1e7      	bne.n	8010ed4 <_puts_r+0x68>
 8010f04:	e7ce      	b.n	8010ea4 <_puts_r+0x38>
 8010f06:	3e01      	subs	r6, #1
 8010f08:	e7e4      	b.n	8010ed4 <_puts_r+0x68>
 8010f0a:	6823      	ldr	r3, [r4, #0]
 8010f0c:	1c5a      	adds	r2, r3, #1
 8010f0e:	6022      	str	r2, [r4, #0]
 8010f10:	220a      	movs	r2, #10
 8010f12:	701a      	strb	r2, [r3, #0]
 8010f14:	e7ee      	b.n	8010ef4 <_puts_r+0x88>
	...

08010f18 <puts>:
 8010f18:	4b02      	ldr	r3, [pc, #8]	@ (8010f24 <puts+0xc>)
 8010f1a:	4601      	mov	r1, r0
 8010f1c:	6818      	ldr	r0, [r3, #0]
 8010f1e:	f7ff bfa5 	b.w	8010e6c <_puts_r>
 8010f22:	bf00      	nop
 8010f24:	24000020 	.word	0x24000020

08010f28 <siprintf>:
 8010f28:	b40e      	push	{r1, r2, r3}
 8010f2a:	b500      	push	{lr}
 8010f2c:	b09c      	sub	sp, #112	@ 0x70
 8010f2e:	ab1d      	add	r3, sp, #116	@ 0x74
 8010f30:	9002      	str	r0, [sp, #8]
 8010f32:	9006      	str	r0, [sp, #24]
 8010f34:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010f38:	4809      	ldr	r0, [pc, #36]	@ (8010f60 <siprintf+0x38>)
 8010f3a:	9107      	str	r1, [sp, #28]
 8010f3c:	9104      	str	r1, [sp, #16]
 8010f3e:	4909      	ldr	r1, [pc, #36]	@ (8010f64 <siprintf+0x3c>)
 8010f40:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f44:	9105      	str	r1, [sp, #20]
 8010f46:	6800      	ldr	r0, [r0, #0]
 8010f48:	9301      	str	r3, [sp, #4]
 8010f4a:	a902      	add	r1, sp, #8
 8010f4c:	f002 fb8c 	bl	8013668 <_svfiprintf_r>
 8010f50:	9b02      	ldr	r3, [sp, #8]
 8010f52:	2200      	movs	r2, #0
 8010f54:	701a      	strb	r2, [r3, #0]
 8010f56:	b01c      	add	sp, #112	@ 0x70
 8010f58:	f85d eb04 	ldr.w	lr, [sp], #4
 8010f5c:	b003      	add	sp, #12
 8010f5e:	4770      	bx	lr
 8010f60:	24000020 	.word	0x24000020
 8010f64:	ffff0208 	.word	0xffff0208

08010f68 <__sread>:
 8010f68:	b510      	push	{r4, lr}
 8010f6a:	460c      	mov	r4, r1
 8010f6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f70:	f000 f986 	bl	8011280 <_read_r>
 8010f74:	2800      	cmp	r0, #0
 8010f76:	bfab      	itete	ge
 8010f78:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010f7a:	89a3      	ldrhlt	r3, [r4, #12]
 8010f7c:	181b      	addge	r3, r3, r0
 8010f7e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010f82:	bfac      	ite	ge
 8010f84:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010f86:	81a3      	strhlt	r3, [r4, #12]
 8010f88:	bd10      	pop	{r4, pc}

08010f8a <__swrite>:
 8010f8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f8e:	461f      	mov	r7, r3
 8010f90:	898b      	ldrh	r3, [r1, #12]
 8010f92:	05db      	lsls	r3, r3, #23
 8010f94:	4605      	mov	r5, r0
 8010f96:	460c      	mov	r4, r1
 8010f98:	4616      	mov	r6, r2
 8010f9a:	d505      	bpl.n	8010fa8 <__swrite+0x1e>
 8010f9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010fa0:	2302      	movs	r3, #2
 8010fa2:	2200      	movs	r2, #0
 8010fa4:	f000 f95a 	bl	801125c <_lseek_r>
 8010fa8:	89a3      	ldrh	r3, [r4, #12]
 8010faa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010fae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010fb2:	81a3      	strh	r3, [r4, #12]
 8010fb4:	4632      	mov	r2, r6
 8010fb6:	463b      	mov	r3, r7
 8010fb8:	4628      	mov	r0, r5
 8010fba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010fbe:	f000 b995 	b.w	80112ec <_write_r>

08010fc2 <__sseek>:
 8010fc2:	b510      	push	{r4, lr}
 8010fc4:	460c      	mov	r4, r1
 8010fc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010fca:	f000 f947 	bl	801125c <_lseek_r>
 8010fce:	1c43      	adds	r3, r0, #1
 8010fd0:	89a3      	ldrh	r3, [r4, #12]
 8010fd2:	bf15      	itete	ne
 8010fd4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010fd6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010fda:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010fde:	81a3      	strheq	r3, [r4, #12]
 8010fe0:	bf18      	it	ne
 8010fe2:	81a3      	strhne	r3, [r4, #12]
 8010fe4:	bd10      	pop	{r4, pc}

08010fe6 <__sclose>:
 8010fe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010fea:	f000 b8d1 	b.w	8011190 <_close_r>

08010fee <__swbuf_r>:
 8010fee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ff0:	460e      	mov	r6, r1
 8010ff2:	4614      	mov	r4, r2
 8010ff4:	4605      	mov	r5, r0
 8010ff6:	b118      	cbz	r0, 8011000 <__swbuf_r+0x12>
 8010ff8:	6a03      	ldr	r3, [r0, #32]
 8010ffa:	b90b      	cbnz	r3, 8011000 <__swbuf_r+0x12>
 8010ffc:	f7ff fedc 	bl	8010db8 <__sinit>
 8011000:	69a3      	ldr	r3, [r4, #24]
 8011002:	60a3      	str	r3, [r4, #8]
 8011004:	89a3      	ldrh	r3, [r4, #12]
 8011006:	071a      	lsls	r2, r3, #28
 8011008:	d501      	bpl.n	801100e <__swbuf_r+0x20>
 801100a:	6923      	ldr	r3, [r4, #16]
 801100c:	b943      	cbnz	r3, 8011020 <__swbuf_r+0x32>
 801100e:	4621      	mov	r1, r4
 8011010:	4628      	mov	r0, r5
 8011012:	f000 f82b 	bl	801106c <__swsetup_r>
 8011016:	b118      	cbz	r0, 8011020 <__swbuf_r+0x32>
 8011018:	f04f 37ff 	mov.w	r7, #4294967295
 801101c:	4638      	mov	r0, r7
 801101e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011020:	6823      	ldr	r3, [r4, #0]
 8011022:	6922      	ldr	r2, [r4, #16]
 8011024:	1a98      	subs	r0, r3, r2
 8011026:	6963      	ldr	r3, [r4, #20]
 8011028:	b2f6      	uxtb	r6, r6
 801102a:	4283      	cmp	r3, r0
 801102c:	4637      	mov	r7, r6
 801102e:	dc05      	bgt.n	801103c <__swbuf_r+0x4e>
 8011030:	4621      	mov	r1, r4
 8011032:	4628      	mov	r0, r5
 8011034:	f002 fdda 	bl	8013bec <_fflush_r>
 8011038:	2800      	cmp	r0, #0
 801103a:	d1ed      	bne.n	8011018 <__swbuf_r+0x2a>
 801103c:	68a3      	ldr	r3, [r4, #8]
 801103e:	3b01      	subs	r3, #1
 8011040:	60a3      	str	r3, [r4, #8]
 8011042:	6823      	ldr	r3, [r4, #0]
 8011044:	1c5a      	adds	r2, r3, #1
 8011046:	6022      	str	r2, [r4, #0]
 8011048:	701e      	strb	r6, [r3, #0]
 801104a:	6962      	ldr	r2, [r4, #20]
 801104c:	1c43      	adds	r3, r0, #1
 801104e:	429a      	cmp	r2, r3
 8011050:	d004      	beq.n	801105c <__swbuf_r+0x6e>
 8011052:	89a3      	ldrh	r3, [r4, #12]
 8011054:	07db      	lsls	r3, r3, #31
 8011056:	d5e1      	bpl.n	801101c <__swbuf_r+0x2e>
 8011058:	2e0a      	cmp	r6, #10
 801105a:	d1df      	bne.n	801101c <__swbuf_r+0x2e>
 801105c:	4621      	mov	r1, r4
 801105e:	4628      	mov	r0, r5
 8011060:	f002 fdc4 	bl	8013bec <_fflush_r>
 8011064:	2800      	cmp	r0, #0
 8011066:	d0d9      	beq.n	801101c <__swbuf_r+0x2e>
 8011068:	e7d6      	b.n	8011018 <__swbuf_r+0x2a>
	...

0801106c <__swsetup_r>:
 801106c:	b538      	push	{r3, r4, r5, lr}
 801106e:	4b29      	ldr	r3, [pc, #164]	@ (8011114 <__swsetup_r+0xa8>)
 8011070:	4605      	mov	r5, r0
 8011072:	6818      	ldr	r0, [r3, #0]
 8011074:	460c      	mov	r4, r1
 8011076:	b118      	cbz	r0, 8011080 <__swsetup_r+0x14>
 8011078:	6a03      	ldr	r3, [r0, #32]
 801107a:	b90b      	cbnz	r3, 8011080 <__swsetup_r+0x14>
 801107c:	f7ff fe9c 	bl	8010db8 <__sinit>
 8011080:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011084:	0719      	lsls	r1, r3, #28
 8011086:	d422      	bmi.n	80110ce <__swsetup_r+0x62>
 8011088:	06da      	lsls	r2, r3, #27
 801108a:	d407      	bmi.n	801109c <__swsetup_r+0x30>
 801108c:	2209      	movs	r2, #9
 801108e:	602a      	str	r2, [r5, #0]
 8011090:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011094:	81a3      	strh	r3, [r4, #12]
 8011096:	f04f 30ff 	mov.w	r0, #4294967295
 801109a:	e033      	b.n	8011104 <__swsetup_r+0x98>
 801109c:	0758      	lsls	r0, r3, #29
 801109e:	d512      	bpl.n	80110c6 <__swsetup_r+0x5a>
 80110a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80110a2:	b141      	cbz	r1, 80110b6 <__swsetup_r+0x4a>
 80110a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80110a8:	4299      	cmp	r1, r3
 80110aa:	d002      	beq.n	80110b2 <__swsetup_r+0x46>
 80110ac:	4628      	mov	r0, r5
 80110ae:	f000 ff51 	bl	8011f54 <_free_r>
 80110b2:	2300      	movs	r3, #0
 80110b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80110b6:	89a3      	ldrh	r3, [r4, #12]
 80110b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80110bc:	81a3      	strh	r3, [r4, #12]
 80110be:	2300      	movs	r3, #0
 80110c0:	6063      	str	r3, [r4, #4]
 80110c2:	6923      	ldr	r3, [r4, #16]
 80110c4:	6023      	str	r3, [r4, #0]
 80110c6:	89a3      	ldrh	r3, [r4, #12]
 80110c8:	f043 0308 	orr.w	r3, r3, #8
 80110cc:	81a3      	strh	r3, [r4, #12]
 80110ce:	6923      	ldr	r3, [r4, #16]
 80110d0:	b94b      	cbnz	r3, 80110e6 <__swsetup_r+0x7a>
 80110d2:	89a3      	ldrh	r3, [r4, #12]
 80110d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80110d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80110dc:	d003      	beq.n	80110e6 <__swsetup_r+0x7a>
 80110de:	4621      	mov	r1, r4
 80110e0:	4628      	mov	r0, r5
 80110e2:	f002 fdd1 	bl	8013c88 <__smakebuf_r>
 80110e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80110ea:	f013 0201 	ands.w	r2, r3, #1
 80110ee:	d00a      	beq.n	8011106 <__swsetup_r+0x9a>
 80110f0:	2200      	movs	r2, #0
 80110f2:	60a2      	str	r2, [r4, #8]
 80110f4:	6962      	ldr	r2, [r4, #20]
 80110f6:	4252      	negs	r2, r2
 80110f8:	61a2      	str	r2, [r4, #24]
 80110fa:	6922      	ldr	r2, [r4, #16]
 80110fc:	b942      	cbnz	r2, 8011110 <__swsetup_r+0xa4>
 80110fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011102:	d1c5      	bne.n	8011090 <__swsetup_r+0x24>
 8011104:	bd38      	pop	{r3, r4, r5, pc}
 8011106:	0799      	lsls	r1, r3, #30
 8011108:	bf58      	it	pl
 801110a:	6962      	ldrpl	r2, [r4, #20]
 801110c:	60a2      	str	r2, [r4, #8]
 801110e:	e7f4      	b.n	80110fa <__swsetup_r+0x8e>
 8011110:	2000      	movs	r0, #0
 8011112:	e7f7      	b.n	8011104 <__swsetup_r+0x98>
 8011114:	24000020 	.word	0x24000020

08011118 <memset>:
 8011118:	4402      	add	r2, r0
 801111a:	4603      	mov	r3, r0
 801111c:	4293      	cmp	r3, r2
 801111e:	d100      	bne.n	8011122 <memset+0xa>
 8011120:	4770      	bx	lr
 8011122:	f803 1b01 	strb.w	r1, [r3], #1
 8011126:	e7f9      	b.n	801111c <memset+0x4>

08011128 <_raise_r>:
 8011128:	291f      	cmp	r1, #31
 801112a:	b538      	push	{r3, r4, r5, lr}
 801112c:	4605      	mov	r5, r0
 801112e:	460c      	mov	r4, r1
 8011130:	d904      	bls.n	801113c <_raise_r+0x14>
 8011132:	2316      	movs	r3, #22
 8011134:	6003      	str	r3, [r0, #0]
 8011136:	f04f 30ff 	mov.w	r0, #4294967295
 801113a:	bd38      	pop	{r3, r4, r5, pc}
 801113c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801113e:	b112      	cbz	r2, 8011146 <_raise_r+0x1e>
 8011140:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011144:	b94b      	cbnz	r3, 801115a <_raise_r+0x32>
 8011146:	4628      	mov	r0, r5
 8011148:	f000 f8be 	bl	80112c8 <_getpid_r>
 801114c:	4622      	mov	r2, r4
 801114e:	4601      	mov	r1, r0
 8011150:	4628      	mov	r0, r5
 8011152:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011156:	f000 b8a5 	b.w	80112a4 <_kill_r>
 801115a:	2b01      	cmp	r3, #1
 801115c:	d00a      	beq.n	8011174 <_raise_r+0x4c>
 801115e:	1c59      	adds	r1, r3, #1
 8011160:	d103      	bne.n	801116a <_raise_r+0x42>
 8011162:	2316      	movs	r3, #22
 8011164:	6003      	str	r3, [r0, #0]
 8011166:	2001      	movs	r0, #1
 8011168:	e7e7      	b.n	801113a <_raise_r+0x12>
 801116a:	2100      	movs	r1, #0
 801116c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011170:	4620      	mov	r0, r4
 8011172:	4798      	blx	r3
 8011174:	2000      	movs	r0, #0
 8011176:	e7e0      	b.n	801113a <_raise_r+0x12>

08011178 <raise>:
 8011178:	4b02      	ldr	r3, [pc, #8]	@ (8011184 <raise+0xc>)
 801117a:	4601      	mov	r1, r0
 801117c:	6818      	ldr	r0, [r3, #0]
 801117e:	f7ff bfd3 	b.w	8011128 <_raise_r>
 8011182:	bf00      	nop
 8011184:	24000020 	.word	0x24000020

08011188 <_localeconv_r>:
 8011188:	4800      	ldr	r0, [pc, #0]	@ (801118c <_localeconv_r+0x4>)
 801118a:	4770      	bx	lr
 801118c:	24000160 	.word	0x24000160

08011190 <_close_r>:
 8011190:	b538      	push	{r3, r4, r5, lr}
 8011192:	4d06      	ldr	r5, [pc, #24]	@ (80111ac <_close_r+0x1c>)
 8011194:	2300      	movs	r3, #0
 8011196:	4604      	mov	r4, r0
 8011198:	4608      	mov	r0, r1
 801119a:	602b      	str	r3, [r5, #0]
 801119c:	f7f0 ff66 	bl	800206c <_close>
 80111a0:	1c43      	adds	r3, r0, #1
 80111a2:	d102      	bne.n	80111aa <_close_r+0x1a>
 80111a4:	682b      	ldr	r3, [r5, #0]
 80111a6:	b103      	cbz	r3, 80111aa <_close_r+0x1a>
 80111a8:	6023      	str	r3, [r4, #0]
 80111aa:	bd38      	pop	{r3, r4, r5, pc}
 80111ac:	24004f78 	.word	0x24004f78

080111b0 <_reclaim_reent>:
 80111b0:	4b29      	ldr	r3, [pc, #164]	@ (8011258 <_reclaim_reent+0xa8>)
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	4283      	cmp	r3, r0
 80111b6:	b570      	push	{r4, r5, r6, lr}
 80111b8:	4604      	mov	r4, r0
 80111ba:	d04b      	beq.n	8011254 <_reclaim_reent+0xa4>
 80111bc:	69c3      	ldr	r3, [r0, #28]
 80111be:	b1ab      	cbz	r3, 80111ec <_reclaim_reent+0x3c>
 80111c0:	68db      	ldr	r3, [r3, #12]
 80111c2:	b16b      	cbz	r3, 80111e0 <_reclaim_reent+0x30>
 80111c4:	2500      	movs	r5, #0
 80111c6:	69e3      	ldr	r3, [r4, #28]
 80111c8:	68db      	ldr	r3, [r3, #12]
 80111ca:	5959      	ldr	r1, [r3, r5]
 80111cc:	2900      	cmp	r1, #0
 80111ce:	d13b      	bne.n	8011248 <_reclaim_reent+0x98>
 80111d0:	3504      	adds	r5, #4
 80111d2:	2d80      	cmp	r5, #128	@ 0x80
 80111d4:	d1f7      	bne.n	80111c6 <_reclaim_reent+0x16>
 80111d6:	69e3      	ldr	r3, [r4, #28]
 80111d8:	4620      	mov	r0, r4
 80111da:	68d9      	ldr	r1, [r3, #12]
 80111dc:	f000 feba 	bl	8011f54 <_free_r>
 80111e0:	69e3      	ldr	r3, [r4, #28]
 80111e2:	6819      	ldr	r1, [r3, #0]
 80111e4:	b111      	cbz	r1, 80111ec <_reclaim_reent+0x3c>
 80111e6:	4620      	mov	r0, r4
 80111e8:	f000 feb4 	bl	8011f54 <_free_r>
 80111ec:	6961      	ldr	r1, [r4, #20]
 80111ee:	b111      	cbz	r1, 80111f6 <_reclaim_reent+0x46>
 80111f0:	4620      	mov	r0, r4
 80111f2:	f000 feaf 	bl	8011f54 <_free_r>
 80111f6:	69e1      	ldr	r1, [r4, #28]
 80111f8:	b111      	cbz	r1, 8011200 <_reclaim_reent+0x50>
 80111fa:	4620      	mov	r0, r4
 80111fc:	f000 feaa 	bl	8011f54 <_free_r>
 8011200:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8011202:	b111      	cbz	r1, 801120a <_reclaim_reent+0x5a>
 8011204:	4620      	mov	r0, r4
 8011206:	f000 fea5 	bl	8011f54 <_free_r>
 801120a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801120c:	b111      	cbz	r1, 8011214 <_reclaim_reent+0x64>
 801120e:	4620      	mov	r0, r4
 8011210:	f000 fea0 	bl	8011f54 <_free_r>
 8011214:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8011216:	b111      	cbz	r1, 801121e <_reclaim_reent+0x6e>
 8011218:	4620      	mov	r0, r4
 801121a:	f000 fe9b 	bl	8011f54 <_free_r>
 801121e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8011220:	b111      	cbz	r1, 8011228 <_reclaim_reent+0x78>
 8011222:	4620      	mov	r0, r4
 8011224:	f000 fe96 	bl	8011f54 <_free_r>
 8011228:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801122a:	b111      	cbz	r1, 8011232 <_reclaim_reent+0x82>
 801122c:	4620      	mov	r0, r4
 801122e:	f000 fe91 	bl	8011f54 <_free_r>
 8011232:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8011234:	b111      	cbz	r1, 801123c <_reclaim_reent+0x8c>
 8011236:	4620      	mov	r0, r4
 8011238:	f000 fe8c 	bl	8011f54 <_free_r>
 801123c:	6a23      	ldr	r3, [r4, #32]
 801123e:	b14b      	cbz	r3, 8011254 <_reclaim_reent+0xa4>
 8011240:	4620      	mov	r0, r4
 8011242:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011246:	4718      	bx	r3
 8011248:	680e      	ldr	r6, [r1, #0]
 801124a:	4620      	mov	r0, r4
 801124c:	f000 fe82 	bl	8011f54 <_free_r>
 8011250:	4631      	mov	r1, r6
 8011252:	e7bb      	b.n	80111cc <_reclaim_reent+0x1c>
 8011254:	bd70      	pop	{r4, r5, r6, pc}
 8011256:	bf00      	nop
 8011258:	24000020 	.word	0x24000020

0801125c <_lseek_r>:
 801125c:	b538      	push	{r3, r4, r5, lr}
 801125e:	4d07      	ldr	r5, [pc, #28]	@ (801127c <_lseek_r+0x20>)
 8011260:	4604      	mov	r4, r0
 8011262:	4608      	mov	r0, r1
 8011264:	4611      	mov	r1, r2
 8011266:	2200      	movs	r2, #0
 8011268:	602a      	str	r2, [r5, #0]
 801126a:	461a      	mov	r2, r3
 801126c:	f7f0 ff25 	bl	80020ba <_lseek>
 8011270:	1c43      	adds	r3, r0, #1
 8011272:	d102      	bne.n	801127a <_lseek_r+0x1e>
 8011274:	682b      	ldr	r3, [r5, #0]
 8011276:	b103      	cbz	r3, 801127a <_lseek_r+0x1e>
 8011278:	6023      	str	r3, [r4, #0]
 801127a:	bd38      	pop	{r3, r4, r5, pc}
 801127c:	24004f78 	.word	0x24004f78

08011280 <_read_r>:
 8011280:	b538      	push	{r3, r4, r5, lr}
 8011282:	4d07      	ldr	r5, [pc, #28]	@ (80112a0 <_read_r+0x20>)
 8011284:	4604      	mov	r4, r0
 8011286:	4608      	mov	r0, r1
 8011288:	4611      	mov	r1, r2
 801128a:	2200      	movs	r2, #0
 801128c:	602a      	str	r2, [r5, #0]
 801128e:	461a      	mov	r2, r3
 8011290:	f7f0 feb3 	bl	8001ffa <_read>
 8011294:	1c43      	adds	r3, r0, #1
 8011296:	d102      	bne.n	801129e <_read_r+0x1e>
 8011298:	682b      	ldr	r3, [r5, #0]
 801129a:	b103      	cbz	r3, 801129e <_read_r+0x1e>
 801129c:	6023      	str	r3, [r4, #0]
 801129e:	bd38      	pop	{r3, r4, r5, pc}
 80112a0:	24004f78 	.word	0x24004f78

080112a4 <_kill_r>:
 80112a4:	b538      	push	{r3, r4, r5, lr}
 80112a6:	4d07      	ldr	r5, [pc, #28]	@ (80112c4 <_kill_r+0x20>)
 80112a8:	2300      	movs	r3, #0
 80112aa:	4604      	mov	r4, r0
 80112ac:	4608      	mov	r0, r1
 80112ae:	4611      	mov	r1, r2
 80112b0:	602b      	str	r3, [r5, #0]
 80112b2:	f7f0 fe87 	bl	8001fc4 <_kill>
 80112b6:	1c43      	adds	r3, r0, #1
 80112b8:	d102      	bne.n	80112c0 <_kill_r+0x1c>
 80112ba:	682b      	ldr	r3, [r5, #0]
 80112bc:	b103      	cbz	r3, 80112c0 <_kill_r+0x1c>
 80112be:	6023      	str	r3, [r4, #0]
 80112c0:	bd38      	pop	{r3, r4, r5, pc}
 80112c2:	bf00      	nop
 80112c4:	24004f78 	.word	0x24004f78

080112c8 <_getpid_r>:
 80112c8:	f7f0 be74 	b.w	8001fb4 <_getpid>

080112cc <_sbrk_r>:
 80112cc:	b538      	push	{r3, r4, r5, lr}
 80112ce:	4d06      	ldr	r5, [pc, #24]	@ (80112e8 <_sbrk_r+0x1c>)
 80112d0:	2300      	movs	r3, #0
 80112d2:	4604      	mov	r4, r0
 80112d4:	4608      	mov	r0, r1
 80112d6:	602b      	str	r3, [r5, #0]
 80112d8:	f7f0 fefc 	bl	80020d4 <_sbrk>
 80112dc:	1c43      	adds	r3, r0, #1
 80112de:	d102      	bne.n	80112e6 <_sbrk_r+0x1a>
 80112e0:	682b      	ldr	r3, [r5, #0]
 80112e2:	b103      	cbz	r3, 80112e6 <_sbrk_r+0x1a>
 80112e4:	6023      	str	r3, [r4, #0]
 80112e6:	bd38      	pop	{r3, r4, r5, pc}
 80112e8:	24004f78 	.word	0x24004f78

080112ec <_write_r>:
 80112ec:	b538      	push	{r3, r4, r5, lr}
 80112ee:	4d07      	ldr	r5, [pc, #28]	@ (801130c <_write_r+0x20>)
 80112f0:	4604      	mov	r4, r0
 80112f2:	4608      	mov	r0, r1
 80112f4:	4611      	mov	r1, r2
 80112f6:	2200      	movs	r2, #0
 80112f8:	602a      	str	r2, [r5, #0]
 80112fa:	461a      	mov	r2, r3
 80112fc:	f7f0 fe9a 	bl	8002034 <_write>
 8011300:	1c43      	adds	r3, r0, #1
 8011302:	d102      	bne.n	801130a <_write_r+0x1e>
 8011304:	682b      	ldr	r3, [r5, #0]
 8011306:	b103      	cbz	r3, 801130a <_write_r+0x1e>
 8011308:	6023      	str	r3, [r4, #0]
 801130a:	bd38      	pop	{r3, r4, r5, pc}
 801130c:	24004f78 	.word	0x24004f78

08011310 <__errno>:
 8011310:	4b01      	ldr	r3, [pc, #4]	@ (8011318 <__errno+0x8>)
 8011312:	6818      	ldr	r0, [r3, #0]
 8011314:	4770      	bx	lr
 8011316:	bf00      	nop
 8011318:	24000020 	.word	0x24000020

0801131c <__libc_init_array>:
 801131c:	b570      	push	{r4, r5, r6, lr}
 801131e:	4d0d      	ldr	r5, [pc, #52]	@ (8011354 <__libc_init_array+0x38>)
 8011320:	4c0d      	ldr	r4, [pc, #52]	@ (8011358 <__libc_init_array+0x3c>)
 8011322:	1b64      	subs	r4, r4, r5
 8011324:	10a4      	asrs	r4, r4, #2
 8011326:	2600      	movs	r6, #0
 8011328:	42a6      	cmp	r6, r4
 801132a:	d109      	bne.n	8011340 <__libc_init_array+0x24>
 801132c:	4d0b      	ldr	r5, [pc, #44]	@ (801135c <__libc_init_array+0x40>)
 801132e:	4c0c      	ldr	r4, [pc, #48]	@ (8011360 <__libc_init_array+0x44>)
 8011330:	f003 f8e0 	bl	80144f4 <_init>
 8011334:	1b64      	subs	r4, r4, r5
 8011336:	10a4      	asrs	r4, r4, #2
 8011338:	2600      	movs	r6, #0
 801133a:	42a6      	cmp	r6, r4
 801133c:	d105      	bne.n	801134a <__libc_init_array+0x2e>
 801133e:	bd70      	pop	{r4, r5, r6, pc}
 8011340:	f855 3b04 	ldr.w	r3, [r5], #4
 8011344:	4798      	blx	r3
 8011346:	3601      	adds	r6, #1
 8011348:	e7ee      	b.n	8011328 <__libc_init_array+0xc>
 801134a:	f855 3b04 	ldr.w	r3, [r5], #4
 801134e:	4798      	blx	r3
 8011350:	3601      	adds	r6, #1
 8011352:	e7f2      	b.n	801133a <__libc_init_array+0x1e>
 8011354:	08014fcc 	.word	0x08014fcc
 8011358:	08014fcc 	.word	0x08014fcc
 801135c:	08014fcc 	.word	0x08014fcc
 8011360:	08014fd0 	.word	0x08014fd0

08011364 <__retarget_lock_init_recursive>:
 8011364:	4770      	bx	lr

08011366 <__retarget_lock_acquire_recursive>:
 8011366:	4770      	bx	lr

08011368 <__retarget_lock_release_recursive>:
 8011368:	4770      	bx	lr

0801136a <memcpy>:
 801136a:	440a      	add	r2, r1
 801136c:	4291      	cmp	r1, r2
 801136e:	f100 33ff 	add.w	r3, r0, #4294967295
 8011372:	d100      	bne.n	8011376 <memcpy+0xc>
 8011374:	4770      	bx	lr
 8011376:	b510      	push	{r4, lr}
 8011378:	f811 4b01 	ldrb.w	r4, [r1], #1
 801137c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011380:	4291      	cmp	r1, r2
 8011382:	d1f9      	bne.n	8011378 <memcpy+0xe>
 8011384:	bd10      	pop	{r4, pc}
	...

08011388 <nanf>:
 8011388:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8011390 <nanf+0x8>
 801138c:	4770      	bx	lr
 801138e:	bf00      	nop
 8011390:	7fc00000 	.word	0x7fc00000

08011394 <quorem>:
 8011394:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011398:	6903      	ldr	r3, [r0, #16]
 801139a:	690c      	ldr	r4, [r1, #16]
 801139c:	42a3      	cmp	r3, r4
 801139e:	4607      	mov	r7, r0
 80113a0:	db7e      	blt.n	80114a0 <quorem+0x10c>
 80113a2:	3c01      	subs	r4, #1
 80113a4:	f101 0814 	add.w	r8, r1, #20
 80113a8:	00a3      	lsls	r3, r4, #2
 80113aa:	f100 0514 	add.w	r5, r0, #20
 80113ae:	9300      	str	r3, [sp, #0]
 80113b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80113b4:	9301      	str	r3, [sp, #4]
 80113b6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80113ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80113be:	3301      	adds	r3, #1
 80113c0:	429a      	cmp	r2, r3
 80113c2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80113c6:	fbb2 f6f3 	udiv	r6, r2, r3
 80113ca:	d32e      	bcc.n	801142a <quorem+0x96>
 80113cc:	f04f 0a00 	mov.w	sl, #0
 80113d0:	46c4      	mov	ip, r8
 80113d2:	46ae      	mov	lr, r5
 80113d4:	46d3      	mov	fp, sl
 80113d6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80113da:	b298      	uxth	r0, r3
 80113dc:	fb06 a000 	mla	r0, r6, r0, sl
 80113e0:	0c02      	lsrs	r2, r0, #16
 80113e2:	0c1b      	lsrs	r3, r3, #16
 80113e4:	fb06 2303 	mla	r3, r6, r3, r2
 80113e8:	f8de 2000 	ldr.w	r2, [lr]
 80113ec:	b280      	uxth	r0, r0
 80113ee:	b292      	uxth	r2, r2
 80113f0:	1a12      	subs	r2, r2, r0
 80113f2:	445a      	add	r2, fp
 80113f4:	f8de 0000 	ldr.w	r0, [lr]
 80113f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80113fc:	b29b      	uxth	r3, r3
 80113fe:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8011402:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8011406:	b292      	uxth	r2, r2
 8011408:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801140c:	45e1      	cmp	r9, ip
 801140e:	f84e 2b04 	str.w	r2, [lr], #4
 8011412:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8011416:	d2de      	bcs.n	80113d6 <quorem+0x42>
 8011418:	9b00      	ldr	r3, [sp, #0]
 801141a:	58eb      	ldr	r3, [r5, r3]
 801141c:	b92b      	cbnz	r3, 801142a <quorem+0x96>
 801141e:	9b01      	ldr	r3, [sp, #4]
 8011420:	3b04      	subs	r3, #4
 8011422:	429d      	cmp	r5, r3
 8011424:	461a      	mov	r2, r3
 8011426:	d32f      	bcc.n	8011488 <quorem+0xf4>
 8011428:	613c      	str	r4, [r7, #16]
 801142a:	4638      	mov	r0, r7
 801142c:	f001 f8a0 	bl	8012570 <__mcmp>
 8011430:	2800      	cmp	r0, #0
 8011432:	db25      	blt.n	8011480 <quorem+0xec>
 8011434:	4629      	mov	r1, r5
 8011436:	2000      	movs	r0, #0
 8011438:	f858 2b04 	ldr.w	r2, [r8], #4
 801143c:	f8d1 c000 	ldr.w	ip, [r1]
 8011440:	fa1f fe82 	uxth.w	lr, r2
 8011444:	fa1f f38c 	uxth.w	r3, ip
 8011448:	eba3 030e 	sub.w	r3, r3, lr
 801144c:	4403      	add	r3, r0
 801144e:	0c12      	lsrs	r2, r2, #16
 8011450:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8011454:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8011458:	b29b      	uxth	r3, r3
 801145a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801145e:	45c1      	cmp	r9, r8
 8011460:	f841 3b04 	str.w	r3, [r1], #4
 8011464:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011468:	d2e6      	bcs.n	8011438 <quorem+0xa4>
 801146a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801146e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011472:	b922      	cbnz	r2, 801147e <quorem+0xea>
 8011474:	3b04      	subs	r3, #4
 8011476:	429d      	cmp	r5, r3
 8011478:	461a      	mov	r2, r3
 801147a:	d30b      	bcc.n	8011494 <quorem+0x100>
 801147c:	613c      	str	r4, [r7, #16]
 801147e:	3601      	adds	r6, #1
 8011480:	4630      	mov	r0, r6
 8011482:	b003      	add	sp, #12
 8011484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011488:	6812      	ldr	r2, [r2, #0]
 801148a:	3b04      	subs	r3, #4
 801148c:	2a00      	cmp	r2, #0
 801148e:	d1cb      	bne.n	8011428 <quorem+0x94>
 8011490:	3c01      	subs	r4, #1
 8011492:	e7c6      	b.n	8011422 <quorem+0x8e>
 8011494:	6812      	ldr	r2, [r2, #0]
 8011496:	3b04      	subs	r3, #4
 8011498:	2a00      	cmp	r2, #0
 801149a:	d1ef      	bne.n	801147c <quorem+0xe8>
 801149c:	3c01      	subs	r4, #1
 801149e:	e7ea      	b.n	8011476 <quorem+0xe2>
 80114a0:	2000      	movs	r0, #0
 80114a2:	e7ee      	b.n	8011482 <quorem+0xee>
 80114a4:	0000      	movs	r0, r0
	...

080114a8 <_dtoa_r>:
 80114a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114ac:	ed2d 8b02 	vpush	{d8}
 80114b0:	69c7      	ldr	r7, [r0, #28]
 80114b2:	b091      	sub	sp, #68	@ 0x44
 80114b4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80114b8:	ec55 4b10 	vmov	r4, r5, d0
 80114bc:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80114be:	9107      	str	r1, [sp, #28]
 80114c0:	4681      	mov	r9, r0
 80114c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80114c4:	930d      	str	r3, [sp, #52]	@ 0x34
 80114c6:	b97f      	cbnz	r7, 80114e8 <_dtoa_r+0x40>
 80114c8:	2010      	movs	r0, #16
 80114ca:	f7fe fce9 	bl	800fea0 <malloc>
 80114ce:	4602      	mov	r2, r0
 80114d0:	f8c9 001c 	str.w	r0, [r9, #28]
 80114d4:	b920      	cbnz	r0, 80114e0 <_dtoa_r+0x38>
 80114d6:	4ba0      	ldr	r3, [pc, #640]	@ (8011758 <_dtoa_r+0x2b0>)
 80114d8:	21ef      	movs	r1, #239	@ 0xef
 80114da:	48a0      	ldr	r0, [pc, #640]	@ (801175c <_dtoa_r+0x2b4>)
 80114dc:	f7fe fcc2 	bl	800fe64 <__assert_func>
 80114e0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80114e4:	6007      	str	r7, [r0, #0]
 80114e6:	60c7      	str	r7, [r0, #12]
 80114e8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80114ec:	6819      	ldr	r1, [r3, #0]
 80114ee:	b159      	cbz	r1, 8011508 <_dtoa_r+0x60>
 80114f0:	685a      	ldr	r2, [r3, #4]
 80114f2:	604a      	str	r2, [r1, #4]
 80114f4:	2301      	movs	r3, #1
 80114f6:	4093      	lsls	r3, r2
 80114f8:	608b      	str	r3, [r1, #8]
 80114fa:	4648      	mov	r0, r9
 80114fc:	f000 fdb4 	bl	8012068 <_Bfree>
 8011500:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8011504:	2200      	movs	r2, #0
 8011506:	601a      	str	r2, [r3, #0]
 8011508:	1e2b      	subs	r3, r5, #0
 801150a:	bfbb      	ittet	lt
 801150c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8011510:	9303      	strlt	r3, [sp, #12]
 8011512:	2300      	movge	r3, #0
 8011514:	2201      	movlt	r2, #1
 8011516:	bfac      	ite	ge
 8011518:	6033      	strge	r3, [r6, #0]
 801151a:	6032      	strlt	r2, [r6, #0]
 801151c:	4b90      	ldr	r3, [pc, #576]	@ (8011760 <_dtoa_r+0x2b8>)
 801151e:	9e03      	ldr	r6, [sp, #12]
 8011520:	43b3      	bics	r3, r6
 8011522:	d110      	bne.n	8011546 <_dtoa_r+0x9e>
 8011524:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011526:	f242 730f 	movw	r3, #9999	@ 0x270f
 801152a:	6013      	str	r3, [r2, #0]
 801152c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8011530:	4323      	orrs	r3, r4
 8011532:	f000 84de 	beq.w	8011ef2 <_dtoa_r+0xa4a>
 8011536:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011538:	4f8a      	ldr	r7, [pc, #552]	@ (8011764 <_dtoa_r+0x2bc>)
 801153a:	2b00      	cmp	r3, #0
 801153c:	f000 84e0 	beq.w	8011f00 <_dtoa_r+0xa58>
 8011540:	1cfb      	adds	r3, r7, #3
 8011542:	f000 bcdb 	b.w	8011efc <_dtoa_r+0xa54>
 8011546:	ed9d 8b02 	vldr	d8, [sp, #8]
 801154a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801154e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011552:	d10a      	bne.n	801156a <_dtoa_r+0xc2>
 8011554:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011556:	2301      	movs	r3, #1
 8011558:	6013      	str	r3, [r2, #0]
 801155a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801155c:	b113      	cbz	r3, 8011564 <_dtoa_r+0xbc>
 801155e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8011560:	4b81      	ldr	r3, [pc, #516]	@ (8011768 <_dtoa_r+0x2c0>)
 8011562:	6013      	str	r3, [r2, #0]
 8011564:	4f81      	ldr	r7, [pc, #516]	@ (801176c <_dtoa_r+0x2c4>)
 8011566:	f000 bccb 	b.w	8011f00 <_dtoa_r+0xa58>
 801156a:	aa0e      	add	r2, sp, #56	@ 0x38
 801156c:	a90f      	add	r1, sp, #60	@ 0x3c
 801156e:	4648      	mov	r0, r9
 8011570:	eeb0 0b48 	vmov.f64	d0, d8
 8011574:	f001 f91c 	bl	80127b0 <__d2b>
 8011578:	f3c6 530a 	ubfx	r3, r6, #20, #11
 801157c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801157e:	9001      	str	r0, [sp, #4]
 8011580:	2b00      	cmp	r3, #0
 8011582:	d045      	beq.n	8011610 <_dtoa_r+0x168>
 8011584:	eeb0 7b48 	vmov.f64	d7, d8
 8011588:	ee18 1a90 	vmov	r1, s17
 801158c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8011590:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8011594:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8011598:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801159c:	2500      	movs	r5, #0
 801159e:	ee07 1a90 	vmov	s15, r1
 80115a2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80115a6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8011740 <_dtoa_r+0x298>
 80115aa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80115ae:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8011748 <_dtoa_r+0x2a0>
 80115b2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80115b6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8011750 <_dtoa_r+0x2a8>
 80115ba:	ee07 3a90 	vmov	s15, r3
 80115be:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80115c2:	eeb0 7b46 	vmov.f64	d7, d6
 80115c6:	eea4 7b05 	vfma.f64	d7, d4, d5
 80115ca:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80115ce:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80115d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115d6:	ee16 8a90 	vmov	r8, s13
 80115da:	d508      	bpl.n	80115ee <_dtoa_r+0x146>
 80115dc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80115e0:	eeb4 6b47 	vcmp.f64	d6, d7
 80115e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115e8:	bf18      	it	ne
 80115ea:	f108 38ff 	addne.w	r8, r8, #4294967295
 80115ee:	f1b8 0f16 	cmp.w	r8, #22
 80115f2:	d82b      	bhi.n	801164c <_dtoa_r+0x1a4>
 80115f4:	495e      	ldr	r1, [pc, #376]	@ (8011770 <_dtoa_r+0x2c8>)
 80115f6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80115fa:	ed91 7b00 	vldr	d7, [r1]
 80115fe:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8011602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011606:	d501      	bpl.n	801160c <_dtoa_r+0x164>
 8011608:	f108 38ff 	add.w	r8, r8, #4294967295
 801160c:	2100      	movs	r1, #0
 801160e:	e01e      	b.n	801164e <_dtoa_r+0x1a6>
 8011610:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011612:	4413      	add	r3, r2
 8011614:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8011618:	2920      	cmp	r1, #32
 801161a:	bfc1      	itttt	gt
 801161c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8011620:	408e      	lslgt	r6, r1
 8011622:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8011626:	fa24 f101 	lsrgt.w	r1, r4, r1
 801162a:	bfd6      	itet	le
 801162c:	f1c1 0120 	rsble	r1, r1, #32
 8011630:	4331      	orrgt	r1, r6
 8011632:	fa04 f101 	lslle.w	r1, r4, r1
 8011636:	ee07 1a90 	vmov	s15, r1
 801163a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801163e:	3b01      	subs	r3, #1
 8011640:	ee17 1a90 	vmov	r1, s15
 8011644:	2501      	movs	r5, #1
 8011646:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 801164a:	e7a8      	b.n	801159e <_dtoa_r+0xf6>
 801164c:	2101      	movs	r1, #1
 801164e:	1ad2      	subs	r2, r2, r3
 8011650:	1e53      	subs	r3, r2, #1
 8011652:	9306      	str	r3, [sp, #24]
 8011654:	bf45      	ittet	mi
 8011656:	f1c2 0301 	rsbmi	r3, r2, #1
 801165a:	9305      	strmi	r3, [sp, #20]
 801165c:	2300      	movpl	r3, #0
 801165e:	2300      	movmi	r3, #0
 8011660:	bf4c      	ite	mi
 8011662:	9306      	strmi	r3, [sp, #24]
 8011664:	9305      	strpl	r3, [sp, #20]
 8011666:	f1b8 0f00 	cmp.w	r8, #0
 801166a:	910c      	str	r1, [sp, #48]	@ 0x30
 801166c:	db18      	blt.n	80116a0 <_dtoa_r+0x1f8>
 801166e:	9b06      	ldr	r3, [sp, #24]
 8011670:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8011674:	4443      	add	r3, r8
 8011676:	9306      	str	r3, [sp, #24]
 8011678:	2300      	movs	r3, #0
 801167a:	9a07      	ldr	r2, [sp, #28]
 801167c:	2a09      	cmp	r2, #9
 801167e:	d849      	bhi.n	8011714 <_dtoa_r+0x26c>
 8011680:	2a05      	cmp	r2, #5
 8011682:	bfc4      	itt	gt
 8011684:	3a04      	subgt	r2, #4
 8011686:	9207      	strgt	r2, [sp, #28]
 8011688:	9a07      	ldr	r2, [sp, #28]
 801168a:	f1a2 0202 	sub.w	r2, r2, #2
 801168e:	bfcc      	ite	gt
 8011690:	2400      	movgt	r4, #0
 8011692:	2401      	movle	r4, #1
 8011694:	2a03      	cmp	r2, #3
 8011696:	d848      	bhi.n	801172a <_dtoa_r+0x282>
 8011698:	e8df f002 	tbb	[pc, r2]
 801169c:	3a2c2e0b 	.word	0x3a2c2e0b
 80116a0:	9b05      	ldr	r3, [sp, #20]
 80116a2:	2200      	movs	r2, #0
 80116a4:	eba3 0308 	sub.w	r3, r3, r8
 80116a8:	9305      	str	r3, [sp, #20]
 80116aa:	920a      	str	r2, [sp, #40]	@ 0x28
 80116ac:	f1c8 0300 	rsb	r3, r8, #0
 80116b0:	e7e3      	b.n	801167a <_dtoa_r+0x1d2>
 80116b2:	2200      	movs	r2, #0
 80116b4:	9208      	str	r2, [sp, #32]
 80116b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80116b8:	2a00      	cmp	r2, #0
 80116ba:	dc39      	bgt.n	8011730 <_dtoa_r+0x288>
 80116bc:	f04f 0b01 	mov.w	fp, #1
 80116c0:	46da      	mov	sl, fp
 80116c2:	465a      	mov	r2, fp
 80116c4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80116c8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80116cc:	2100      	movs	r1, #0
 80116ce:	2004      	movs	r0, #4
 80116d0:	f100 0614 	add.w	r6, r0, #20
 80116d4:	4296      	cmp	r6, r2
 80116d6:	d930      	bls.n	801173a <_dtoa_r+0x292>
 80116d8:	6079      	str	r1, [r7, #4]
 80116da:	4648      	mov	r0, r9
 80116dc:	9304      	str	r3, [sp, #16]
 80116de:	f000 fc83 	bl	8011fe8 <_Balloc>
 80116e2:	9b04      	ldr	r3, [sp, #16]
 80116e4:	4607      	mov	r7, r0
 80116e6:	2800      	cmp	r0, #0
 80116e8:	d146      	bne.n	8011778 <_dtoa_r+0x2d0>
 80116ea:	4b22      	ldr	r3, [pc, #136]	@ (8011774 <_dtoa_r+0x2cc>)
 80116ec:	4602      	mov	r2, r0
 80116ee:	f240 11af 	movw	r1, #431	@ 0x1af
 80116f2:	e6f2      	b.n	80114da <_dtoa_r+0x32>
 80116f4:	2201      	movs	r2, #1
 80116f6:	e7dd      	b.n	80116b4 <_dtoa_r+0x20c>
 80116f8:	2200      	movs	r2, #0
 80116fa:	9208      	str	r2, [sp, #32]
 80116fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80116fe:	eb08 0b02 	add.w	fp, r8, r2
 8011702:	f10b 0a01 	add.w	sl, fp, #1
 8011706:	4652      	mov	r2, sl
 8011708:	2a01      	cmp	r2, #1
 801170a:	bfb8      	it	lt
 801170c:	2201      	movlt	r2, #1
 801170e:	e7db      	b.n	80116c8 <_dtoa_r+0x220>
 8011710:	2201      	movs	r2, #1
 8011712:	e7f2      	b.n	80116fa <_dtoa_r+0x252>
 8011714:	2401      	movs	r4, #1
 8011716:	2200      	movs	r2, #0
 8011718:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801171c:	f04f 3bff 	mov.w	fp, #4294967295
 8011720:	2100      	movs	r1, #0
 8011722:	46da      	mov	sl, fp
 8011724:	2212      	movs	r2, #18
 8011726:	9109      	str	r1, [sp, #36]	@ 0x24
 8011728:	e7ce      	b.n	80116c8 <_dtoa_r+0x220>
 801172a:	2201      	movs	r2, #1
 801172c:	9208      	str	r2, [sp, #32]
 801172e:	e7f5      	b.n	801171c <_dtoa_r+0x274>
 8011730:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8011734:	46da      	mov	sl, fp
 8011736:	465a      	mov	r2, fp
 8011738:	e7c6      	b.n	80116c8 <_dtoa_r+0x220>
 801173a:	3101      	adds	r1, #1
 801173c:	0040      	lsls	r0, r0, #1
 801173e:	e7c7      	b.n	80116d0 <_dtoa_r+0x228>
 8011740:	636f4361 	.word	0x636f4361
 8011744:	3fd287a7 	.word	0x3fd287a7
 8011748:	8b60c8b3 	.word	0x8b60c8b3
 801174c:	3fc68a28 	.word	0x3fc68a28
 8011750:	509f79fb 	.word	0x509f79fb
 8011754:	3fd34413 	.word	0x3fd34413
 8011758:	08014c16 	.word	0x08014c16
 801175c:	08014c2d 	.word	0x08014c2d
 8011760:	7ff00000 	.word	0x7ff00000
 8011764:	08014c12 	.word	0x08014c12
 8011768:	08014be1 	.word	0x08014be1
 801176c:	08014be0 	.word	0x08014be0
 8011770:	08014d28 	.word	0x08014d28
 8011774:	08014c85 	.word	0x08014c85
 8011778:	f8d9 201c 	ldr.w	r2, [r9, #28]
 801177c:	f1ba 0f0e 	cmp.w	sl, #14
 8011780:	6010      	str	r0, [r2, #0]
 8011782:	d86f      	bhi.n	8011864 <_dtoa_r+0x3bc>
 8011784:	2c00      	cmp	r4, #0
 8011786:	d06d      	beq.n	8011864 <_dtoa_r+0x3bc>
 8011788:	f1b8 0f00 	cmp.w	r8, #0
 801178c:	f340 80c2 	ble.w	8011914 <_dtoa_r+0x46c>
 8011790:	4aca      	ldr	r2, [pc, #808]	@ (8011abc <_dtoa_r+0x614>)
 8011792:	f008 010f 	and.w	r1, r8, #15
 8011796:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801179a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 801179e:	ed92 7b00 	vldr	d7, [r2]
 80117a2:	ea4f 1128 	mov.w	r1, r8, asr #4
 80117a6:	f000 80a9 	beq.w	80118fc <_dtoa_r+0x454>
 80117aa:	4ac5      	ldr	r2, [pc, #788]	@ (8011ac0 <_dtoa_r+0x618>)
 80117ac:	ed92 6b08 	vldr	d6, [r2, #32]
 80117b0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80117b4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80117b8:	f001 010f 	and.w	r1, r1, #15
 80117bc:	2203      	movs	r2, #3
 80117be:	48c0      	ldr	r0, [pc, #768]	@ (8011ac0 <_dtoa_r+0x618>)
 80117c0:	2900      	cmp	r1, #0
 80117c2:	f040 809d 	bne.w	8011900 <_dtoa_r+0x458>
 80117c6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80117ca:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80117ce:	ed8d 7b02 	vstr	d7, [sp, #8]
 80117d2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80117d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80117d8:	2900      	cmp	r1, #0
 80117da:	f000 80c1 	beq.w	8011960 <_dtoa_r+0x4b8>
 80117de:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80117e2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80117e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117ea:	f140 80b9 	bpl.w	8011960 <_dtoa_r+0x4b8>
 80117ee:	f1ba 0f00 	cmp.w	sl, #0
 80117f2:	f000 80b5 	beq.w	8011960 <_dtoa_r+0x4b8>
 80117f6:	f1bb 0f00 	cmp.w	fp, #0
 80117fa:	dd31      	ble.n	8011860 <_dtoa_r+0x3b8>
 80117fc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8011800:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011804:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011808:	f108 31ff 	add.w	r1, r8, #4294967295
 801180c:	9104      	str	r1, [sp, #16]
 801180e:	3201      	adds	r2, #1
 8011810:	465c      	mov	r4, fp
 8011812:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011816:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 801181a:	ee07 2a90 	vmov	s15, r2
 801181e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011822:	eea7 5b06 	vfma.f64	d5, d7, d6
 8011826:	ee15 2a90 	vmov	r2, s11
 801182a:	ec51 0b15 	vmov	r0, r1, d5
 801182e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8011832:	2c00      	cmp	r4, #0
 8011834:	f040 8098 	bne.w	8011968 <_dtoa_r+0x4c0>
 8011838:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801183c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8011840:	ec41 0b17 	vmov	d7, r0, r1
 8011844:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801184c:	f300 8261 	bgt.w	8011d12 <_dtoa_r+0x86a>
 8011850:	eeb1 7b47 	vneg.f64	d7, d7
 8011854:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801185c:	f100 80f5 	bmi.w	8011a4a <_dtoa_r+0x5a2>
 8011860:	ed8d 8b02 	vstr	d8, [sp, #8]
 8011864:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011866:	2a00      	cmp	r2, #0
 8011868:	f2c0 812c 	blt.w	8011ac4 <_dtoa_r+0x61c>
 801186c:	f1b8 0f0e 	cmp.w	r8, #14
 8011870:	f300 8128 	bgt.w	8011ac4 <_dtoa_r+0x61c>
 8011874:	4b91      	ldr	r3, [pc, #580]	@ (8011abc <_dtoa_r+0x614>)
 8011876:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801187a:	ed93 6b00 	vldr	d6, [r3]
 801187e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011880:	2b00      	cmp	r3, #0
 8011882:	da03      	bge.n	801188c <_dtoa_r+0x3e4>
 8011884:	f1ba 0f00 	cmp.w	sl, #0
 8011888:	f340 80d2 	ble.w	8011a30 <_dtoa_r+0x588>
 801188c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8011890:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011894:	463e      	mov	r6, r7
 8011896:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801189a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801189e:	ee15 3a10 	vmov	r3, s10
 80118a2:	3330      	adds	r3, #48	@ 0x30
 80118a4:	f806 3b01 	strb.w	r3, [r6], #1
 80118a8:	1bf3      	subs	r3, r6, r7
 80118aa:	459a      	cmp	sl, r3
 80118ac:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80118b0:	eea3 7b46 	vfms.f64	d7, d3, d6
 80118b4:	f040 80f8 	bne.w	8011aa8 <_dtoa_r+0x600>
 80118b8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80118bc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80118c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118c4:	f300 80dd 	bgt.w	8011a82 <_dtoa_r+0x5da>
 80118c8:	eeb4 7b46 	vcmp.f64	d7, d6
 80118cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118d0:	d104      	bne.n	80118dc <_dtoa_r+0x434>
 80118d2:	ee15 3a10 	vmov	r3, s10
 80118d6:	07db      	lsls	r3, r3, #31
 80118d8:	f100 80d3 	bmi.w	8011a82 <_dtoa_r+0x5da>
 80118dc:	9901      	ldr	r1, [sp, #4]
 80118de:	4648      	mov	r0, r9
 80118e0:	f000 fbc2 	bl	8012068 <_Bfree>
 80118e4:	2300      	movs	r3, #0
 80118e6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80118e8:	7033      	strb	r3, [r6, #0]
 80118ea:	f108 0301 	add.w	r3, r8, #1
 80118ee:	6013      	str	r3, [r2, #0]
 80118f0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	f000 8304 	beq.w	8011f00 <_dtoa_r+0xa58>
 80118f8:	601e      	str	r6, [r3, #0]
 80118fa:	e301      	b.n	8011f00 <_dtoa_r+0xa58>
 80118fc:	2202      	movs	r2, #2
 80118fe:	e75e      	b.n	80117be <_dtoa_r+0x316>
 8011900:	07cc      	lsls	r4, r1, #31
 8011902:	d504      	bpl.n	801190e <_dtoa_r+0x466>
 8011904:	ed90 6b00 	vldr	d6, [r0]
 8011908:	3201      	adds	r2, #1
 801190a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801190e:	1049      	asrs	r1, r1, #1
 8011910:	3008      	adds	r0, #8
 8011912:	e755      	b.n	80117c0 <_dtoa_r+0x318>
 8011914:	d022      	beq.n	801195c <_dtoa_r+0x4b4>
 8011916:	f1c8 0100 	rsb	r1, r8, #0
 801191a:	4a68      	ldr	r2, [pc, #416]	@ (8011abc <_dtoa_r+0x614>)
 801191c:	f001 000f 	and.w	r0, r1, #15
 8011920:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8011924:	ed92 7b00 	vldr	d7, [r2]
 8011928:	ee28 7b07 	vmul.f64	d7, d8, d7
 801192c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011930:	4863      	ldr	r0, [pc, #396]	@ (8011ac0 <_dtoa_r+0x618>)
 8011932:	1109      	asrs	r1, r1, #4
 8011934:	2400      	movs	r4, #0
 8011936:	2202      	movs	r2, #2
 8011938:	b929      	cbnz	r1, 8011946 <_dtoa_r+0x49e>
 801193a:	2c00      	cmp	r4, #0
 801193c:	f43f af49 	beq.w	80117d2 <_dtoa_r+0x32a>
 8011940:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011944:	e745      	b.n	80117d2 <_dtoa_r+0x32a>
 8011946:	07ce      	lsls	r6, r1, #31
 8011948:	d505      	bpl.n	8011956 <_dtoa_r+0x4ae>
 801194a:	ed90 6b00 	vldr	d6, [r0]
 801194e:	3201      	adds	r2, #1
 8011950:	2401      	movs	r4, #1
 8011952:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011956:	1049      	asrs	r1, r1, #1
 8011958:	3008      	adds	r0, #8
 801195a:	e7ed      	b.n	8011938 <_dtoa_r+0x490>
 801195c:	2202      	movs	r2, #2
 801195e:	e738      	b.n	80117d2 <_dtoa_r+0x32a>
 8011960:	f8cd 8010 	str.w	r8, [sp, #16]
 8011964:	4654      	mov	r4, sl
 8011966:	e754      	b.n	8011812 <_dtoa_r+0x36a>
 8011968:	4a54      	ldr	r2, [pc, #336]	@ (8011abc <_dtoa_r+0x614>)
 801196a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801196e:	ed12 4b02 	vldr	d4, [r2, #-8]
 8011972:	9a08      	ldr	r2, [sp, #32]
 8011974:	ec41 0b17 	vmov	d7, r0, r1
 8011978:	443c      	add	r4, r7
 801197a:	b34a      	cbz	r2, 80119d0 <_dtoa_r+0x528>
 801197c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8011980:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8011984:	463e      	mov	r6, r7
 8011986:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801198a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801198e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011992:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8011996:	ee14 2a90 	vmov	r2, s9
 801199a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801199e:	3230      	adds	r2, #48	@ 0x30
 80119a0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80119a4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80119a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119ac:	f806 2b01 	strb.w	r2, [r6], #1
 80119b0:	d438      	bmi.n	8011a24 <_dtoa_r+0x57c>
 80119b2:	ee32 5b46 	vsub.f64	d5, d2, d6
 80119b6:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80119ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119be:	d462      	bmi.n	8011a86 <_dtoa_r+0x5de>
 80119c0:	42a6      	cmp	r6, r4
 80119c2:	f43f af4d 	beq.w	8011860 <_dtoa_r+0x3b8>
 80119c6:	ee27 7b03 	vmul.f64	d7, d7, d3
 80119ca:	ee26 6b03 	vmul.f64	d6, d6, d3
 80119ce:	e7e0      	b.n	8011992 <_dtoa_r+0x4ea>
 80119d0:	4621      	mov	r1, r4
 80119d2:	463e      	mov	r6, r7
 80119d4:	ee27 7b04 	vmul.f64	d7, d7, d4
 80119d8:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80119dc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80119e0:	ee14 2a90 	vmov	r2, s9
 80119e4:	3230      	adds	r2, #48	@ 0x30
 80119e6:	f806 2b01 	strb.w	r2, [r6], #1
 80119ea:	42a6      	cmp	r6, r4
 80119ec:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80119f0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80119f4:	d119      	bne.n	8011a2a <_dtoa_r+0x582>
 80119f6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80119fa:	ee37 4b05 	vadd.f64	d4, d7, d5
 80119fe:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8011a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a06:	dc3e      	bgt.n	8011a86 <_dtoa_r+0x5de>
 8011a08:	ee35 5b47 	vsub.f64	d5, d5, d7
 8011a0c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8011a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a14:	f57f af24 	bpl.w	8011860 <_dtoa_r+0x3b8>
 8011a18:	460e      	mov	r6, r1
 8011a1a:	3901      	subs	r1, #1
 8011a1c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011a20:	2b30      	cmp	r3, #48	@ 0x30
 8011a22:	d0f9      	beq.n	8011a18 <_dtoa_r+0x570>
 8011a24:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8011a28:	e758      	b.n	80118dc <_dtoa_r+0x434>
 8011a2a:	ee26 6b03 	vmul.f64	d6, d6, d3
 8011a2e:	e7d5      	b.n	80119dc <_dtoa_r+0x534>
 8011a30:	d10b      	bne.n	8011a4a <_dtoa_r+0x5a2>
 8011a32:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8011a36:	ee26 6b07 	vmul.f64	d6, d6, d7
 8011a3a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011a3e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a46:	f2c0 8161 	blt.w	8011d0c <_dtoa_r+0x864>
 8011a4a:	2400      	movs	r4, #0
 8011a4c:	4625      	mov	r5, r4
 8011a4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011a50:	43db      	mvns	r3, r3
 8011a52:	9304      	str	r3, [sp, #16]
 8011a54:	463e      	mov	r6, r7
 8011a56:	f04f 0800 	mov.w	r8, #0
 8011a5a:	4621      	mov	r1, r4
 8011a5c:	4648      	mov	r0, r9
 8011a5e:	f000 fb03 	bl	8012068 <_Bfree>
 8011a62:	2d00      	cmp	r5, #0
 8011a64:	d0de      	beq.n	8011a24 <_dtoa_r+0x57c>
 8011a66:	f1b8 0f00 	cmp.w	r8, #0
 8011a6a:	d005      	beq.n	8011a78 <_dtoa_r+0x5d0>
 8011a6c:	45a8      	cmp	r8, r5
 8011a6e:	d003      	beq.n	8011a78 <_dtoa_r+0x5d0>
 8011a70:	4641      	mov	r1, r8
 8011a72:	4648      	mov	r0, r9
 8011a74:	f000 faf8 	bl	8012068 <_Bfree>
 8011a78:	4629      	mov	r1, r5
 8011a7a:	4648      	mov	r0, r9
 8011a7c:	f000 faf4 	bl	8012068 <_Bfree>
 8011a80:	e7d0      	b.n	8011a24 <_dtoa_r+0x57c>
 8011a82:	f8cd 8010 	str.w	r8, [sp, #16]
 8011a86:	4633      	mov	r3, r6
 8011a88:	461e      	mov	r6, r3
 8011a8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011a8e:	2a39      	cmp	r2, #57	@ 0x39
 8011a90:	d106      	bne.n	8011aa0 <_dtoa_r+0x5f8>
 8011a92:	429f      	cmp	r7, r3
 8011a94:	d1f8      	bne.n	8011a88 <_dtoa_r+0x5e0>
 8011a96:	9a04      	ldr	r2, [sp, #16]
 8011a98:	3201      	adds	r2, #1
 8011a9a:	9204      	str	r2, [sp, #16]
 8011a9c:	2230      	movs	r2, #48	@ 0x30
 8011a9e:	703a      	strb	r2, [r7, #0]
 8011aa0:	781a      	ldrb	r2, [r3, #0]
 8011aa2:	3201      	adds	r2, #1
 8011aa4:	701a      	strb	r2, [r3, #0]
 8011aa6:	e7bd      	b.n	8011a24 <_dtoa_r+0x57c>
 8011aa8:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011aac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ab4:	f47f aeef 	bne.w	8011896 <_dtoa_r+0x3ee>
 8011ab8:	e710      	b.n	80118dc <_dtoa_r+0x434>
 8011aba:	bf00      	nop
 8011abc:	08014d28 	.word	0x08014d28
 8011ac0:	08014d00 	.word	0x08014d00
 8011ac4:	9908      	ldr	r1, [sp, #32]
 8011ac6:	2900      	cmp	r1, #0
 8011ac8:	f000 80e3 	beq.w	8011c92 <_dtoa_r+0x7ea>
 8011acc:	9907      	ldr	r1, [sp, #28]
 8011ace:	2901      	cmp	r1, #1
 8011ad0:	f300 80c8 	bgt.w	8011c64 <_dtoa_r+0x7bc>
 8011ad4:	2d00      	cmp	r5, #0
 8011ad6:	f000 80c1 	beq.w	8011c5c <_dtoa_r+0x7b4>
 8011ada:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8011ade:	9e05      	ldr	r6, [sp, #20]
 8011ae0:	461c      	mov	r4, r3
 8011ae2:	9304      	str	r3, [sp, #16]
 8011ae4:	9b05      	ldr	r3, [sp, #20]
 8011ae6:	4413      	add	r3, r2
 8011ae8:	9305      	str	r3, [sp, #20]
 8011aea:	9b06      	ldr	r3, [sp, #24]
 8011aec:	2101      	movs	r1, #1
 8011aee:	4413      	add	r3, r2
 8011af0:	4648      	mov	r0, r9
 8011af2:	9306      	str	r3, [sp, #24]
 8011af4:	f000 fbb6 	bl	8012264 <__i2b>
 8011af8:	9b04      	ldr	r3, [sp, #16]
 8011afa:	4605      	mov	r5, r0
 8011afc:	b166      	cbz	r6, 8011b18 <_dtoa_r+0x670>
 8011afe:	9a06      	ldr	r2, [sp, #24]
 8011b00:	2a00      	cmp	r2, #0
 8011b02:	dd09      	ble.n	8011b18 <_dtoa_r+0x670>
 8011b04:	42b2      	cmp	r2, r6
 8011b06:	9905      	ldr	r1, [sp, #20]
 8011b08:	bfa8      	it	ge
 8011b0a:	4632      	movge	r2, r6
 8011b0c:	1a89      	subs	r1, r1, r2
 8011b0e:	9105      	str	r1, [sp, #20]
 8011b10:	9906      	ldr	r1, [sp, #24]
 8011b12:	1ab6      	subs	r6, r6, r2
 8011b14:	1a8a      	subs	r2, r1, r2
 8011b16:	9206      	str	r2, [sp, #24]
 8011b18:	b1fb      	cbz	r3, 8011b5a <_dtoa_r+0x6b2>
 8011b1a:	9a08      	ldr	r2, [sp, #32]
 8011b1c:	2a00      	cmp	r2, #0
 8011b1e:	f000 80bc 	beq.w	8011c9a <_dtoa_r+0x7f2>
 8011b22:	b19c      	cbz	r4, 8011b4c <_dtoa_r+0x6a4>
 8011b24:	4629      	mov	r1, r5
 8011b26:	4622      	mov	r2, r4
 8011b28:	4648      	mov	r0, r9
 8011b2a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011b2c:	f000 fc5a 	bl	80123e4 <__pow5mult>
 8011b30:	9a01      	ldr	r2, [sp, #4]
 8011b32:	4601      	mov	r1, r0
 8011b34:	4605      	mov	r5, r0
 8011b36:	4648      	mov	r0, r9
 8011b38:	f000 fbaa 	bl	8012290 <__multiply>
 8011b3c:	9901      	ldr	r1, [sp, #4]
 8011b3e:	9004      	str	r0, [sp, #16]
 8011b40:	4648      	mov	r0, r9
 8011b42:	f000 fa91 	bl	8012068 <_Bfree>
 8011b46:	9a04      	ldr	r2, [sp, #16]
 8011b48:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011b4a:	9201      	str	r2, [sp, #4]
 8011b4c:	1b1a      	subs	r2, r3, r4
 8011b4e:	d004      	beq.n	8011b5a <_dtoa_r+0x6b2>
 8011b50:	9901      	ldr	r1, [sp, #4]
 8011b52:	4648      	mov	r0, r9
 8011b54:	f000 fc46 	bl	80123e4 <__pow5mult>
 8011b58:	9001      	str	r0, [sp, #4]
 8011b5a:	2101      	movs	r1, #1
 8011b5c:	4648      	mov	r0, r9
 8011b5e:	f000 fb81 	bl	8012264 <__i2b>
 8011b62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011b64:	4604      	mov	r4, r0
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	f000 81d0 	beq.w	8011f0c <_dtoa_r+0xa64>
 8011b6c:	461a      	mov	r2, r3
 8011b6e:	4601      	mov	r1, r0
 8011b70:	4648      	mov	r0, r9
 8011b72:	f000 fc37 	bl	80123e4 <__pow5mult>
 8011b76:	9b07      	ldr	r3, [sp, #28]
 8011b78:	2b01      	cmp	r3, #1
 8011b7a:	4604      	mov	r4, r0
 8011b7c:	f300 8095 	bgt.w	8011caa <_dtoa_r+0x802>
 8011b80:	9b02      	ldr	r3, [sp, #8]
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	f040 808b 	bne.w	8011c9e <_dtoa_r+0x7f6>
 8011b88:	9b03      	ldr	r3, [sp, #12]
 8011b8a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8011b8e:	2a00      	cmp	r2, #0
 8011b90:	f040 8087 	bne.w	8011ca2 <_dtoa_r+0x7fa>
 8011b94:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8011b98:	0d12      	lsrs	r2, r2, #20
 8011b9a:	0512      	lsls	r2, r2, #20
 8011b9c:	2a00      	cmp	r2, #0
 8011b9e:	f000 8082 	beq.w	8011ca6 <_dtoa_r+0x7fe>
 8011ba2:	9b05      	ldr	r3, [sp, #20]
 8011ba4:	3301      	adds	r3, #1
 8011ba6:	9305      	str	r3, [sp, #20]
 8011ba8:	9b06      	ldr	r3, [sp, #24]
 8011baa:	3301      	adds	r3, #1
 8011bac:	9306      	str	r3, [sp, #24]
 8011bae:	2301      	movs	r3, #1
 8011bb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011bb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	f000 81af 	beq.w	8011f18 <_dtoa_r+0xa70>
 8011bba:	6922      	ldr	r2, [r4, #16]
 8011bbc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8011bc0:	6910      	ldr	r0, [r2, #16]
 8011bc2:	f000 fb03 	bl	80121cc <__hi0bits>
 8011bc6:	f1c0 0020 	rsb	r0, r0, #32
 8011bca:	9b06      	ldr	r3, [sp, #24]
 8011bcc:	4418      	add	r0, r3
 8011bce:	f010 001f 	ands.w	r0, r0, #31
 8011bd2:	d076      	beq.n	8011cc2 <_dtoa_r+0x81a>
 8011bd4:	f1c0 0220 	rsb	r2, r0, #32
 8011bd8:	2a04      	cmp	r2, #4
 8011bda:	dd69      	ble.n	8011cb0 <_dtoa_r+0x808>
 8011bdc:	9b05      	ldr	r3, [sp, #20]
 8011bde:	f1c0 001c 	rsb	r0, r0, #28
 8011be2:	4403      	add	r3, r0
 8011be4:	9305      	str	r3, [sp, #20]
 8011be6:	9b06      	ldr	r3, [sp, #24]
 8011be8:	4406      	add	r6, r0
 8011bea:	4403      	add	r3, r0
 8011bec:	9306      	str	r3, [sp, #24]
 8011bee:	9b05      	ldr	r3, [sp, #20]
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	dd05      	ble.n	8011c00 <_dtoa_r+0x758>
 8011bf4:	9901      	ldr	r1, [sp, #4]
 8011bf6:	461a      	mov	r2, r3
 8011bf8:	4648      	mov	r0, r9
 8011bfa:	f000 fc4d 	bl	8012498 <__lshift>
 8011bfe:	9001      	str	r0, [sp, #4]
 8011c00:	9b06      	ldr	r3, [sp, #24]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	dd05      	ble.n	8011c12 <_dtoa_r+0x76a>
 8011c06:	4621      	mov	r1, r4
 8011c08:	461a      	mov	r2, r3
 8011c0a:	4648      	mov	r0, r9
 8011c0c:	f000 fc44 	bl	8012498 <__lshift>
 8011c10:	4604      	mov	r4, r0
 8011c12:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d056      	beq.n	8011cc6 <_dtoa_r+0x81e>
 8011c18:	9801      	ldr	r0, [sp, #4]
 8011c1a:	4621      	mov	r1, r4
 8011c1c:	f000 fca8 	bl	8012570 <__mcmp>
 8011c20:	2800      	cmp	r0, #0
 8011c22:	da50      	bge.n	8011cc6 <_dtoa_r+0x81e>
 8011c24:	f108 33ff 	add.w	r3, r8, #4294967295
 8011c28:	9304      	str	r3, [sp, #16]
 8011c2a:	9901      	ldr	r1, [sp, #4]
 8011c2c:	2300      	movs	r3, #0
 8011c2e:	220a      	movs	r2, #10
 8011c30:	4648      	mov	r0, r9
 8011c32:	f000 fa3b 	bl	80120ac <__multadd>
 8011c36:	9b08      	ldr	r3, [sp, #32]
 8011c38:	9001      	str	r0, [sp, #4]
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	f000 816e 	beq.w	8011f1c <_dtoa_r+0xa74>
 8011c40:	4629      	mov	r1, r5
 8011c42:	2300      	movs	r3, #0
 8011c44:	220a      	movs	r2, #10
 8011c46:	4648      	mov	r0, r9
 8011c48:	f000 fa30 	bl	80120ac <__multadd>
 8011c4c:	f1bb 0f00 	cmp.w	fp, #0
 8011c50:	4605      	mov	r5, r0
 8011c52:	dc64      	bgt.n	8011d1e <_dtoa_r+0x876>
 8011c54:	9b07      	ldr	r3, [sp, #28]
 8011c56:	2b02      	cmp	r3, #2
 8011c58:	dc3e      	bgt.n	8011cd8 <_dtoa_r+0x830>
 8011c5a:	e060      	b.n	8011d1e <_dtoa_r+0x876>
 8011c5c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011c5e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8011c62:	e73c      	b.n	8011ade <_dtoa_r+0x636>
 8011c64:	f10a 34ff 	add.w	r4, sl, #4294967295
 8011c68:	42a3      	cmp	r3, r4
 8011c6a:	bfbf      	itttt	lt
 8011c6c:	1ae2      	sublt	r2, r4, r3
 8011c6e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8011c70:	189b      	addlt	r3, r3, r2
 8011c72:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8011c74:	bfae      	itee	ge
 8011c76:	1b1c      	subge	r4, r3, r4
 8011c78:	4623      	movlt	r3, r4
 8011c7a:	2400      	movlt	r4, #0
 8011c7c:	f1ba 0f00 	cmp.w	sl, #0
 8011c80:	bfb5      	itete	lt
 8011c82:	9a05      	ldrlt	r2, [sp, #20]
 8011c84:	9e05      	ldrge	r6, [sp, #20]
 8011c86:	eba2 060a 	sublt.w	r6, r2, sl
 8011c8a:	4652      	movge	r2, sl
 8011c8c:	bfb8      	it	lt
 8011c8e:	2200      	movlt	r2, #0
 8011c90:	e727      	b.n	8011ae2 <_dtoa_r+0x63a>
 8011c92:	9e05      	ldr	r6, [sp, #20]
 8011c94:	9d08      	ldr	r5, [sp, #32]
 8011c96:	461c      	mov	r4, r3
 8011c98:	e730      	b.n	8011afc <_dtoa_r+0x654>
 8011c9a:	461a      	mov	r2, r3
 8011c9c:	e758      	b.n	8011b50 <_dtoa_r+0x6a8>
 8011c9e:	2300      	movs	r3, #0
 8011ca0:	e786      	b.n	8011bb0 <_dtoa_r+0x708>
 8011ca2:	9b02      	ldr	r3, [sp, #8]
 8011ca4:	e784      	b.n	8011bb0 <_dtoa_r+0x708>
 8011ca6:	920b      	str	r2, [sp, #44]	@ 0x2c
 8011ca8:	e783      	b.n	8011bb2 <_dtoa_r+0x70a>
 8011caa:	2300      	movs	r3, #0
 8011cac:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011cae:	e784      	b.n	8011bba <_dtoa_r+0x712>
 8011cb0:	d09d      	beq.n	8011bee <_dtoa_r+0x746>
 8011cb2:	9b05      	ldr	r3, [sp, #20]
 8011cb4:	321c      	adds	r2, #28
 8011cb6:	4413      	add	r3, r2
 8011cb8:	9305      	str	r3, [sp, #20]
 8011cba:	9b06      	ldr	r3, [sp, #24]
 8011cbc:	4416      	add	r6, r2
 8011cbe:	4413      	add	r3, r2
 8011cc0:	e794      	b.n	8011bec <_dtoa_r+0x744>
 8011cc2:	4602      	mov	r2, r0
 8011cc4:	e7f5      	b.n	8011cb2 <_dtoa_r+0x80a>
 8011cc6:	f1ba 0f00 	cmp.w	sl, #0
 8011cca:	f8cd 8010 	str.w	r8, [sp, #16]
 8011cce:	46d3      	mov	fp, sl
 8011cd0:	dc21      	bgt.n	8011d16 <_dtoa_r+0x86e>
 8011cd2:	9b07      	ldr	r3, [sp, #28]
 8011cd4:	2b02      	cmp	r3, #2
 8011cd6:	dd1e      	ble.n	8011d16 <_dtoa_r+0x86e>
 8011cd8:	f1bb 0f00 	cmp.w	fp, #0
 8011cdc:	f47f aeb7 	bne.w	8011a4e <_dtoa_r+0x5a6>
 8011ce0:	4621      	mov	r1, r4
 8011ce2:	465b      	mov	r3, fp
 8011ce4:	2205      	movs	r2, #5
 8011ce6:	4648      	mov	r0, r9
 8011ce8:	f000 f9e0 	bl	80120ac <__multadd>
 8011cec:	4601      	mov	r1, r0
 8011cee:	4604      	mov	r4, r0
 8011cf0:	9801      	ldr	r0, [sp, #4]
 8011cf2:	f000 fc3d 	bl	8012570 <__mcmp>
 8011cf6:	2800      	cmp	r0, #0
 8011cf8:	f77f aea9 	ble.w	8011a4e <_dtoa_r+0x5a6>
 8011cfc:	463e      	mov	r6, r7
 8011cfe:	2331      	movs	r3, #49	@ 0x31
 8011d00:	f806 3b01 	strb.w	r3, [r6], #1
 8011d04:	9b04      	ldr	r3, [sp, #16]
 8011d06:	3301      	adds	r3, #1
 8011d08:	9304      	str	r3, [sp, #16]
 8011d0a:	e6a4      	b.n	8011a56 <_dtoa_r+0x5ae>
 8011d0c:	f8cd 8010 	str.w	r8, [sp, #16]
 8011d10:	4654      	mov	r4, sl
 8011d12:	4625      	mov	r5, r4
 8011d14:	e7f2      	b.n	8011cfc <_dtoa_r+0x854>
 8011d16:	9b08      	ldr	r3, [sp, #32]
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	f000 8103 	beq.w	8011f24 <_dtoa_r+0xa7c>
 8011d1e:	2e00      	cmp	r6, #0
 8011d20:	dd05      	ble.n	8011d2e <_dtoa_r+0x886>
 8011d22:	4629      	mov	r1, r5
 8011d24:	4632      	mov	r2, r6
 8011d26:	4648      	mov	r0, r9
 8011d28:	f000 fbb6 	bl	8012498 <__lshift>
 8011d2c:	4605      	mov	r5, r0
 8011d2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d058      	beq.n	8011de6 <_dtoa_r+0x93e>
 8011d34:	6869      	ldr	r1, [r5, #4]
 8011d36:	4648      	mov	r0, r9
 8011d38:	f000 f956 	bl	8011fe8 <_Balloc>
 8011d3c:	4606      	mov	r6, r0
 8011d3e:	b928      	cbnz	r0, 8011d4c <_dtoa_r+0x8a4>
 8011d40:	4b82      	ldr	r3, [pc, #520]	@ (8011f4c <_dtoa_r+0xaa4>)
 8011d42:	4602      	mov	r2, r0
 8011d44:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8011d48:	f7ff bbc7 	b.w	80114da <_dtoa_r+0x32>
 8011d4c:	692a      	ldr	r2, [r5, #16]
 8011d4e:	3202      	adds	r2, #2
 8011d50:	0092      	lsls	r2, r2, #2
 8011d52:	f105 010c 	add.w	r1, r5, #12
 8011d56:	300c      	adds	r0, #12
 8011d58:	f7ff fb07 	bl	801136a <memcpy>
 8011d5c:	2201      	movs	r2, #1
 8011d5e:	4631      	mov	r1, r6
 8011d60:	4648      	mov	r0, r9
 8011d62:	f000 fb99 	bl	8012498 <__lshift>
 8011d66:	1c7b      	adds	r3, r7, #1
 8011d68:	9305      	str	r3, [sp, #20]
 8011d6a:	eb07 030b 	add.w	r3, r7, fp
 8011d6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011d70:	9b02      	ldr	r3, [sp, #8]
 8011d72:	f003 0301 	and.w	r3, r3, #1
 8011d76:	46a8      	mov	r8, r5
 8011d78:	9308      	str	r3, [sp, #32]
 8011d7a:	4605      	mov	r5, r0
 8011d7c:	9b05      	ldr	r3, [sp, #20]
 8011d7e:	9801      	ldr	r0, [sp, #4]
 8011d80:	4621      	mov	r1, r4
 8011d82:	f103 3bff 	add.w	fp, r3, #4294967295
 8011d86:	f7ff fb05 	bl	8011394 <quorem>
 8011d8a:	4641      	mov	r1, r8
 8011d8c:	9002      	str	r0, [sp, #8]
 8011d8e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8011d92:	9801      	ldr	r0, [sp, #4]
 8011d94:	f000 fbec 	bl	8012570 <__mcmp>
 8011d98:	462a      	mov	r2, r5
 8011d9a:	9006      	str	r0, [sp, #24]
 8011d9c:	4621      	mov	r1, r4
 8011d9e:	4648      	mov	r0, r9
 8011da0:	f000 fc02 	bl	80125a8 <__mdiff>
 8011da4:	68c2      	ldr	r2, [r0, #12]
 8011da6:	4606      	mov	r6, r0
 8011da8:	b9fa      	cbnz	r2, 8011dea <_dtoa_r+0x942>
 8011daa:	4601      	mov	r1, r0
 8011dac:	9801      	ldr	r0, [sp, #4]
 8011dae:	f000 fbdf 	bl	8012570 <__mcmp>
 8011db2:	4602      	mov	r2, r0
 8011db4:	4631      	mov	r1, r6
 8011db6:	4648      	mov	r0, r9
 8011db8:	920a      	str	r2, [sp, #40]	@ 0x28
 8011dba:	f000 f955 	bl	8012068 <_Bfree>
 8011dbe:	9b07      	ldr	r3, [sp, #28]
 8011dc0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011dc2:	9e05      	ldr	r6, [sp, #20]
 8011dc4:	ea43 0102 	orr.w	r1, r3, r2
 8011dc8:	9b08      	ldr	r3, [sp, #32]
 8011dca:	4319      	orrs	r1, r3
 8011dcc:	d10f      	bne.n	8011dee <_dtoa_r+0x946>
 8011dce:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8011dd2:	d028      	beq.n	8011e26 <_dtoa_r+0x97e>
 8011dd4:	9b06      	ldr	r3, [sp, #24]
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	dd02      	ble.n	8011de0 <_dtoa_r+0x938>
 8011dda:	9b02      	ldr	r3, [sp, #8]
 8011ddc:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8011de0:	f88b a000 	strb.w	sl, [fp]
 8011de4:	e639      	b.n	8011a5a <_dtoa_r+0x5b2>
 8011de6:	4628      	mov	r0, r5
 8011de8:	e7bd      	b.n	8011d66 <_dtoa_r+0x8be>
 8011dea:	2201      	movs	r2, #1
 8011dec:	e7e2      	b.n	8011db4 <_dtoa_r+0x90c>
 8011dee:	9b06      	ldr	r3, [sp, #24]
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	db04      	blt.n	8011dfe <_dtoa_r+0x956>
 8011df4:	9907      	ldr	r1, [sp, #28]
 8011df6:	430b      	orrs	r3, r1
 8011df8:	9908      	ldr	r1, [sp, #32]
 8011dfa:	430b      	orrs	r3, r1
 8011dfc:	d120      	bne.n	8011e40 <_dtoa_r+0x998>
 8011dfe:	2a00      	cmp	r2, #0
 8011e00:	ddee      	ble.n	8011de0 <_dtoa_r+0x938>
 8011e02:	9901      	ldr	r1, [sp, #4]
 8011e04:	2201      	movs	r2, #1
 8011e06:	4648      	mov	r0, r9
 8011e08:	f000 fb46 	bl	8012498 <__lshift>
 8011e0c:	4621      	mov	r1, r4
 8011e0e:	9001      	str	r0, [sp, #4]
 8011e10:	f000 fbae 	bl	8012570 <__mcmp>
 8011e14:	2800      	cmp	r0, #0
 8011e16:	dc03      	bgt.n	8011e20 <_dtoa_r+0x978>
 8011e18:	d1e2      	bne.n	8011de0 <_dtoa_r+0x938>
 8011e1a:	f01a 0f01 	tst.w	sl, #1
 8011e1e:	d0df      	beq.n	8011de0 <_dtoa_r+0x938>
 8011e20:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8011e24:	d1d9      	bne.n	8011dda <_dtoa_r+0x932>
 8011e26:	2339      	movs	r3, #57	@ 0x39
 8011e28:	f88b 3000 	strb.w	r3, [fp]
 8011e2c:	4633      	mov	r3, r6
 8011e2e:	461e      	mov	r6, r3
 8011e30:	3b01      	subs	r3, #1
 8011e32:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011e36:	2a39      	cmp	r2, #57	@ 0x39
 8011e38:	d053      	beq.n	8011ee2 <_dtoa_r+0xa3a>
 8011e3a:	3201      	adds	r2, #1
 8011e3c:	701a      	strb	r2, [r3, #0]
 8011e3e:	e60c      	b.n	8011a5a <_dtoa_r+0x5b2>
 8011e40:	2a00      	cmp	r2, #0
 8011e42:	dd07      	ble.n	8011e54 <_dtoa_r+0x9ac>
 8011e44:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8011e48:	d0ed      	beq.n	8011e26 <_dtoa_r+0x97e>
 8011e4a:	f10a 0301 	add.w	r3, sl, #1
 8011e4e:	f88b 3000 	strb.w	r3, [fp]
 8011e52:	e602      	b.n	8011a5a <_dtoa_r+0x5b2>
 8011e54:	9b05      	ldr	r3, [sp, #20]
 8011e56:	9a05      	ldr	r2, [sp, #20]
 8011e58:	f803 ac01 	strb.w	sl, [r3, #-1]
 8011e5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e5e:	4293      	cmp	r3, r2
 8011e60:	d029      	beq.n	8011eb6 <_dtoa_r+0xa0e>
 8011e62:	9901      	ldr	r1, [sp, #4]
 8011e64:	2300      	movs	r3, #0
 8011e66:	220a      	movs	r2, #10
 8011e68:	4648      	mov	r0, r9
 8011e6a:	f000 f91f 	bl	80120ac <__multadd>
 8011e6e:	45a8      	cmp	r8, r5
 8011e70:	9001      	str	r0, [sp, #4]
 8011e72:	f04f 0300 	mov.w	r3, #0
 8011e76:	f04f 020a 	mov.w	r2, #10
 8011e7a:	4641      	mov	r1, r8
 8011e7c:	4648      	mov	r0, r9
 8011e7e:	d107      	bne.n	8011e90 <_dtoa_r+0x9e8>
 8011e80:	f000 f914 	bl	80120ac <__multadd>
 8011e84:	4680      	mov	r8, r0
 8011e86:	4605      	mov	r5, r0
 8011e88:	9b05      	ldr	r3, [sp, #20]
 8011e8a:	3301      	adds	r3, #1
 8011e8c:	9305      	str	r3, [sp, #20]
 8011e8e:	e775      	b.n	8011d7c <_dtoa_r+0x8d4>
 8011e90:	f000 f90c 	bl	80120ac <__multadd>
 8011e94:	4629      	mov	r1, r5
 8011e96:	4680      	mov	r8, r0
 8011e98:	2300      	movs	r3, #0
 8011e9a:	220a      	movs	r2, #10
 8011e9c:	4648      	mov	r0, r9
 8011e9e:	f000 f905 	bl	80120ac <__multadd>
 8011ea2:	4605      	mov	r5, r0
 8011ea4:	e7f0      	b.n	8011e88 <_dtoa_r+0x9e0>
 8011ea6:	f1bb 0f00 	cmp.w	fp, #0
 8011eaa:	bfcc      	ite	gt
 8011eac:	465e      	movgt	r6, fp
 8011eae:	2601      	movle	r6, #1
 8011eb0:	443e      	add	r6, r7
 8011eb2:	f04f 0800 	mov.w	r8, #0
 8011eb6:	9901      	ldr	r1, [sp, #4]
 8011eb8:	2201      	movs	r2, #1
 8011eba:	4648      	mov	r0, r9
 8011ebc:	f000 faec 	bl	8012498 <__lshift>
 8011ec0:	4621      	mov	r1, r4
 8011ec2:	9001      	str	r0, [sp, #4]
 8011ec4:	f000 fb54 	bl	8012570 <__mcmp>
 8011ec8:	2800      	cmp	r0, #0
 8011eca:	dcaf      	bgt.n	8011e2c <_dtoa_r+0x984>
 8011ecc:	d102      	bne.n	8011ed4 <_dtoa_r+0xa2c>
 8011ece:	f01a 0f01 	tst.w	sl, #1
 8011ed2:	d1ab      	bne.n	8011e2c <_dtoa_r+0x984>
 8011ed4:	4633      	mov	r3, r6
 8011ed6:	461e      	mov	r6, r3
 8011ed8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011edc:	2a30      	cmp	r2, #48	@ 0x30
 8011ede:	d0fa      	beq.n	8011ed6 <_dtoa_r+0xa2e>
 8011ee0:	e5bb      	b.n	8011a5a <_dtoa_r+0x5b2>
 8011ee2:	429f      	cmp	r7, r3
 8011ee4:	d1a3      	bne.n	8011e2e <_dtoa_r+0x986>
 8011ee6:	9b04      	ldr	r3, [sp, #16]
 8011ee8:	3301      	adds	r3, #1
 8011eea:	9304      	str	r3, [sp, #16]
 8011eec:	2331      	movs	r3, #49	@ 0x31
 8011eee:	703b      	strb	r3, [r7, #0]
 8011ef0:	e5b3      	b.n	8011a5a <_dtoa_r+0x5b2>
 8011ef2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011ef4:	4f16      	ldr	r7, [pc, #88]	@ (8011f50 <_dtoa_r+0xaa8>)
 8011ef6:	b11b      	cbz	r3, 8011f00 <_dtoa_r+0xa58>
 8011ef8:	f107 0308 	add.w	r3, r7, #8
 8011efc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8011efe:	6013      	str	r3, [r2, #0]
 8011f00:	4638      	mov	r0, r7
 8011f02:	b011      	add	sp, #68	@ 0x44
 8011f04:	ecbd 8b02 	vpop	{d8}
 8011f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f0c:	9b07      	ldr	r3, [sp, #28]
 8011f0e:	2b01      	cmp	r3, #1
 8011f10:	f77f ae36 	ble.w	8011b80 <_dtoa_r+0x6d8>
 8011f14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011f16:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011f18:	2001      	movs	r0, #1
 8011f1a:	e656      	b.n	8011bca <_dtoa_r+0x722>
 8011f1c:	f1bb 0f00 	cmp.w	fp, #0
 8011f20:	f77f aed7 	ble.w	8011cd2 <_dtoa_r+0x82a>
 8011f24:	463e      	mov	r6, r7
 8011f26:	9801      	ldr	r0, [sp, #4]
 8011f28:	4621      	mov	r1, r4
 8011f2a:	f7ff fa33 	bl	8011394 <quorem>
 8011f2e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8011f32:	f806 ab01 	strb.w	sl, [r6], #1
 8011f36:	1bf2      	subs	r2, r6, r7
 8011f38:	4593      	cmp	fp, r2
 8011f3a:	ddb4      	ble.n	8011ea6 <_dtoa_r+0x9fe>
 8011f3c:	9901      	ldr	r1, [sp, #4]
 8011f3e:	2300      	movs	r3, #0
 8011f40:	220a      	movs	r2, #10
 8011f42:	4648      	mov	r0, r9
 8011f44:	f000 f8b2 	bl	80120ac <__multadd>
 8011f48:	9001      	str	r0, [sp, #4]
 8011f4a:	e7ec      	b.n	8011f26 <_dtoa_r+0xa7e>
 8011f4c:	08014c85 	.word	0x08014c85
 8011f50:	08014c09 	.word	0x08014c09

08011f54 <_free_r>:
 8011f54:	b538      	push	{r3, r4, r5, lr}
 8011f56:	4605      	mov	r5, r0
 8011f58:	2900      	cmp	r1, #0
 8011f5a:	d041      	beq.n	8011fe0 <_free_r+0x8c>
 8011f5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011f60:	1f0c      	subs	r4, r1, #4
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	bfb8      	it	lt
 8011f66:	18e4      	addlt	r4, r4, r3
 8011f68:	f7fe f84c 	bl	8010004 <__malloc_lock>
 8011f6c:	4a1d      	ldr	r2, [pc, #116]	@ (8011fe4 <_free_r+0x90>)
 8011f6e:	6813      	ldr	r3, [r2, #0]
 8011f70:	b933      	cbnz	r3, 8011f80 <_free_r+0x2c>
 8011f72:	6063      	str	r3, [r4, #4]
 8011f74:	6014      	str	r4, [r2, #0]
 8011f76:	4628      	mov	r0, r5
 8011f78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011f7c:	f7fe b848 	b.w	8010010 <__malloc_unlock>
 8011f80:	42a3      	cmp	r3, r4
 8011f82:	d908      	bls.n	8011f96 <_free_r+0x42>
 8011f84:	6820      	ldr	r0, [r4, #0]
 8011f86:	1821      	adds	r1, r4, r0
 8011f88:	428b      	cmp	r3, r1
 8011f8a:	bf01      	itttt	eq
 8011f8c:	6819      	ldreq	r1, [r3, #0]
 8011f8e:	685b      	ldreq	r3, [r3, #4]
 8011f90:	1809      	addeq	r1, r1, r0
 8011f92:	6021      	streq	r1, [r4, #0]
 8011f94:	e7ed      	b.n	8011f72 <_free_r+0x1e>
 8011f96:	461a      	mov	r2, r3
 8011f98:	685b      	ldr	r3, [r3, #4]
 8011f9a:	b10b      	cbz	r3, 8011fa0 <_free_r+0x4c>
 8011f9c:	42a3      	cmp	r3, r4
 8011f9e:	d9fa      	bls.n	8011f96 <_free_r+0x42>
 8011fa0:	6811      	ldr	r1, [r2, #0]
 8011fa2:	1850      	adds	r0, r2, r1
 8011fa4:	42a0      	cmp	r0, r4
 8011fa6:	d10b      	bne.n	8011fc0 <_free_r+0x6c>
 8011fa8:	6820      	ldr	r0, [r4, #0]
 8011faa:	4401      	add	r1, r0
 8011fac:	1850      	adds	r0, r2, r1
 8011fae:	4283      	cmp	r3, r0
 8011fb0:	6011      	str	r1, [r2, #0]
 8011fb2:	d1e0      	bne.n	8011f76 <_free_r+0x22>
 8011fb4:	6818      	ldr	r0, [r3, #0]
 8011fb6:	685b      	ldr	r3, [r3, #4]
 8011fb8:	6053      	str	r3, [r2, #4]
 8011fba:	4408      	add	r0, r1
 8011fbc:	6010      	str	r0, [r2, #0]
 8011fbe:	e7da      	b.n	8011f76 <_free_r+0x22>
 8011fc0:	d902      	bls.n	8011fc8 <_free_r+0x74>
 8011fc2:	230c      	movs	r3, #12
 8011fc4:	602b      	str	r3, [r5, #0]
 8011fc6:	e7d6      	b.n	8011f76 <_free_r+0x22>
 8011fc8:	6820      	ldr	r0, [r4, #0]
 8011fca:	1821      	adds	r1, r4, r0
 8011fcc:	428b      	cmp	r3, r1
 8011fce:	bf04      	itt	eq
 8011fd0:	6819      	ldreq	r1, [r3, #0]
 8011fd2:	685b      	ldreq	r3, [r3, #4]
 8011fd4:	6063      	str	r3, [r4, #4]
 8011fd6:	bf04      	itt	eq
 8011fd8:	1809      	addeq	r1, r1, r0
 8011fda:	6021      	streq	r1, [r4, #0]
 8011fdc:	6054      	str	r4, [r2, #4]
 8011fde:	e7ca      	b.n	8011f76 <_free_r+0x22>
 8011fe0:	bd38      	pop	{r3, r4, r5, pc}
 8011fe2:	bf00      	nop
 8011fe4:	24004e38 	.word	0x24004e38

08011fe8 <_Balloc>:
 8011fe8:	b570      	push	{r4, r5, r6, lr}
 8011fea:	69c6      	ldr	r6, [r0, #28]
 8011fec:	4604      	mov	r4, r0
 8011fee:	460d      	mov	r5, r1
 8011ff0:	b976      	cbnz	r6, 8012010 <_Balloc+0x28>
 8011ff2:	2010      	movs	r0, #16
 8011ff4:	f7fd ff54 	bl	800fea0 <malloc>
 8011ff8:	4602      	mov	r2, r0
 8011ffa:	61e0      	str	r0, [r4, #28]
 8011ffc:	b920      	cbnz	r0, 8012008 <_Balloc+0x20>
 8011ffe:	4b18      	ldr	r3, [pc, #96]	@ (8012060 <_Balloc+0x78>)
 8012000:	4818      	ldr	r0, [pc, #96]	@ (8012064 <_Balloc+0x7c>)
 8012002:	216b      	movs	r1, #107	@ 0x6b
 8012004:	f7fd ff2e 	bl	800fe64 <__assert_func>
 8012008:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801200c:	6006      	str	r6, [r0, #0]
 801200e:	60c6      	str	r6, [r0, #12]
 8012010:	69e6      	ldr	r6, [r4, #28]
 8012012:	68f3      	ldr	r3, [r6, #12]
 8012014:	b183      	cbz	r3, 8012038 <_Balloc+0x50>
 8012016:	69e3      	ldr	r3, [r4, #28]
 8012018:	68db      	ldr	r3, [r3, #12]
 801201a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801201e:	b9b8      	cbnz	r0, 8012050 <_Balloc+0x68>
 8012020:	2101      	movs	r1, #1
 8012022:	fa01 f605 	lsl.w	r6, r1, r5
 8012026:	1d72      	adds	r2, r6, #5
 8012028:	0092      	lsls	r2, r2, #2
 801202a:	4620      	mov	r0, r4
 801202c:	f001 fec0 	bl	8013db0 <_calloc_r>
 8012030:	b160      	cbz	r0, 801204c <_Balloc+0x64>
 8012032:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012036:	e00e      	b.n	8012056 <_Balloc+0x6e>
 8012038:	2221      	movs	r2, #33	@ 0x21
 801203a:	2104      	movs	r1, #4
 801203c:	4620      	mov	r0, r4
 801203e:	f001 feb7 	bl	8013db0 <_calloc_r>
 8012042:	69e3      	ldr	r3, [r4, #28]
 8012044:	60f0      	str	r0, [r6, #12]
 8012046:	68db      	ldr	r3, [r3, #12]
 8012048:	2b00      	cmp	r3, #0
 801204a:	d1e4      	bne.n	8012016 <_Balloc+0x2e>
 801204c:	2000      	movs	r0, #0
 801204e:	bd70      	pop	{r4, r5, r6, pc}
 8012050:	6802      	ldr	r2, [r0, #0]
 8012052:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012056:	2300      	movs	r3, #0
 8012058:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801205c:	e7f7      	b.n	801204e <_Balloc+0x66>
 801205e:	bf00      	nop
 8012060:	08014c16 	.word	0x08014c16
 8012064:	08014c96 	.word	0x08014c96

08012068 <_Bfree>:
 8012068:	b570      	push	{r4, r5, r6, lr}
 801206a:	69c6      	ldr	r6, [r0, #28]
 801206c:	4605      	mov	r5, r0
 801206e:	460c      	mov	r4, r1
 8012070:	b976      	cbnz	r6, 8012090 <_Bfree+0x28>
 8012072:	2010      	movs	r0, #16
 8012074:	f7fd ff14 	bl	800fea0 <malloc>
 8012078:	4602      	mov	r2, r0
 801207a:	61e8      	str	r0, [r5, #28]
 801207c:	b920      	cbnz	r0, 8012088 <_Bfree+0x20>
 801207e:	4b09      	ldr	r3, [pc, #36]	@ (80120a4 <_Bfree+0x3c>)
 8012080:	4809      	ldr	r0, [pc, #36]	@ (80120a8 <_Bfree+0x40>)
 8012082:	218f      	movs	r1, #143	@ 0x8f
 8012084:	f7fd feee 	bl	800fe64 <__assert_func>
 8012088:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801208c:	6006      	str	r6, [r0, #0]
 801208e:	60c6      	str	r6, [r0, #12]
 8012090:	b13c      	cbz	r4, 80120a2 <_Bfree+0x3a>
 8012092:	69eb      	ldr	r3, [r5, #28]
 8012094:	6862      	ldr	r2, [r4, #4]
 8012096:	68db      	ldr	r3, [r3, #12]
 8012098:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801209c:	6021      	str	r1, [r4, #0]
 801209e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80120a2:	bd70      	pop	{r4, r5, r6, pc}
 80120a4:	08014c16 	.word	0x08014c16
 80120a8:	08014c96 	.word	0x08014c96

080120ac <__multadd>:
 80120ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120b0:	690d      	ldr	r5, [r1, #16]
 80120b2:	4607      	mov	r7, r0
 80120b4:	460c      	mov	r4, r1
 80120b6:	461e      	mov	r6, r3
 80120b8:	f101 0c14 	add.w	ip, r1, #20
 80120bc:	2000      	movs	r0, #0
 80120be:	f8dc 3000 	ldr.w	r3, [ip]
 80120c2:	b299      	uxth	r1, r3
 80120c4:	fb02 6101 	mla	r1, r2, r1, r6
 80120c8:	0c1e      	lsrs	r6, r3, #16
 80120ca:	0c0b      	lsrs	r3, r1, #16
 80120cc:	fb02 3306 	mla	r3, r2, r6, r3
 80120d0:	b289      	uxth	r1, r1
 80120d2:	3001      	adds	r0, #1
 80120d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80120d8:	4285      	cmp	r5, r0
 80120da:	f84c 1b04 	str.w	r1, [ip], #4
 80120de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80120e2:	dcec      	bgt.n	80120be <__multadd+0x12>
 80120e4:	b30e      	cbz	r6, 801212a <__multadd+0x7e>
 80120e6:	68a3      	ldr	r3, [r4, #8]
 80120e8:	42ab      	cmp	r3, r5
 80120ea:	dc19      	bgt.n	8012120 <__multadd+0x74>
 80120ec:	6861      	ldr	r1, [r4, #4]
 80120ee:	4638      	mov	r0, r7
 80120f0:	3101      	adds	r1, #1
 80120f2:	f7ff ff79 	bl	8011fe8 <_Balloc>
 80120f6:	4680      	mov	r8, r0
 80120f8:	b928      	cbnz	r0, 8012106 <__multadd+0x5a>
 80120fa:	4602      	mov	r2, r0
 80120fc:	4b0c      	ldr	r3, [pc, #48]	@ (8012130 <__multadd+0x84>)
 80120fe:	480d      	ldr	r0, [pc, #52]	@ (8012134 <__multadd+0x88>)
 8012100:	21ba      	movs	r1, #186	@ 0xba
 8012102:	f7fd feaf 	bl	800fe64 <__assert_func>
 8012106:	6922      	ldr	r2, [r4, #16]
 8012108:	3202      	adds	r2, #2
 801210a:	f104 010c 	add.w	r1, r4, #12
 801210e:	0092      	lsls	r2, r2, #2
 8012110:	300c      	adds	r0, #12
 8012112:	f7ff f92a 	bl	801136a <memcpy>
 8012116:	4621      	mov	r1, r4
 8012118:	4638      	mov	r0, r7
 801211a:	f7ff ffa5 	bl	8012068 <_Bfree>
 801211e:	4644      	mov	r4, r8
 8012120:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012124:	3501      	adds	r5, #1
 8012126:	615e      	str	r6, [r3, #20]
 8012128:	6125      	str	r5, [r4, #16]
 801212a:	4620      	mov	r0, r4
 801212c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012130:	08014c85 	.word	0x08014c85
 8012134:	08014c96 	.word	0x08014c96

08012138 <__s2b>:
 8012138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801213c:	460c      	mov	r4, r1
 801213e:	4615      	mov	r5, r2
 8012140:	461f      	mov	r7, r3
 8012142:	2209      	movs	r2, #9
 8012144:	3308      	adds	r3, #8
 8012146:	4606      	mov	r6, r0
 8012148:	fb93 f3f2 	sdiv	r3, r3, r2
 801214c:	2100      	movs	r1, #0
 801214e:	2201      	movs	r2, #1
 8012150:	429a      	cmp	r2, r3
 8012152:	db09      	blt.n	8012168 <__s2b+0x30>
 8012154:	4630      	mov	r0, r6
 8012156:	f7ff ff47 	bl	8011fe8 <_Balloc>
 801215a:	b940      	cbnz	r0, 801216e <__s2b+0x36>
 801215c:	4602      	mov	r2, r0
 801215e:	4b19      	ldr	r3, [pc, #100]	@ (80121c4 <__s2b+0x8c>)
 8012160:	4819      	ldr	r0, [pc, #100]	@ (80121c8 <__s2b+0x90>)
 8012162:	21d3      	movs	r1, #211	@ 0xd3
 8012164:	f7fd fe7e 	bl	800fe64 <__assert_func>
 8012168:	0052      	lsls	r2, r2, #1
 801216a:	3101      	adds	r1, #1
 801216c:	e7f0      	b.n	8012150 <__s2b+0x18>
 801216e:	9b08      	ldr	r3, [sp, #32]
 8012170:	6143      	str	r3, [r0, #20]
 8012172:	2d09      	cmp	r5, #9
 8012174:	f04f 0301 	mov.w	r3, #1
 8012178:	6103      	str	r3, [r0, #16]
 801217a:	dd16      	ble.n	80121aa <__s2b+0x72>
 801217c:	f104 0909 	add.w	r9, r4, #9
 8012180:	46c8      	mov	r8, r9
 8012182:	442c      	add	r4, r5
 8012184:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012188:	4601      	mov	r1, r0
 801218a:	3b30      	subs	r3, #48	@ 0x30
 801218c:	220a      	movs	r2, #10
 801218e:	4630      	mov	r0, r6
 8012190:	f7ff ff8c 	bl	80120ac <__multadd>
 8012194:	45a0      	cmp	r8, r4
 8012196:	d1f5      	bne.n	8012184 <__s2b+0x4c>
 8012198:	f1a5 0408 	sub.w	r4, r5, #8
 801219c:	444c      	add	r4, r9
 801219e:	1b2d      	subs	r5, r5, r4
 80121a0:	1963      	adds	r3, r4, r5
 80121a2:	42bb      	cmp	r3, r7
 80121a4:	db04      	blt.n	80121b0 <__s2b+0x78>
 80121a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80121aa:	340a      	adds	r4, #10
 80121ac:	2509      	movs	r5, #9
 80121ae:	e7f6      	b.n	801219e <__s2b+0x66>
 80121b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80121b4:	4601      	mov	r1, r0
 80121b6:	3b30      	subs	r3, #48	@ 0x30
 80121b8:	220a      	movs	r2, #10
 80121ba:	4630      	mov	r0, r6
 80121bc:	f7ff ff76 	bl	80120ac <__multadd>
 80121c0:	e7ee      	b.n	80121a0 <__s2b+0x68>
 80121c2:	bf00      	nop
 80121c4:	08014c85 	.word	0x08014c85
 80121c8:	08014c96 	.word	0x08014c96

080121cc <__hi0bits>:
 80121cc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80121d0:	4603      	mov	r3, r0
 80121d2:	bf36      	itet	cc
 80121d4:	0403      	lslcc	r3, r0, #16
 80121d6:	2000      	movcs	r0, #0
 80121d8:	2010      	movcc	r0, #16
 80121da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80121de:	bf3c      	itt	cc
 80121e0:	021b      	lslcc	r3, r3, #8
 80121e2:	3008      	addcc	r0, #8
 80121e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80121e8:	bf3c      	itt	cc
 80121ea:	011b      	lslcc	r3, r3, #4
 80121ec:	3004      	addcc	r0, #4
 80121ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80121f2:	bf3c      	itt	cc
 80121f4:	009b      	lslcc	r3, r3, #2
 80121f6:	3002      	addcc	r0, #2
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	db05      	blt.n	8012208 <__hi0bits+0x3c>
 80121fc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8012200:	f100 0001 	add.w	r0, r0, #1
 8012204:	bf08      	it	eq
 8012206:	2020      	moveq	r0, #32
 8012208:	4770      	bx	lr

0801220a <__lo0bits>:
 801220a:	6803      	ldr	r3, [r0, #0]
 801220c:	4602      	mov	r2, r0
 801220e:	f013 0007 	ands.w	r0, r3, #7
 8012212:	d00b      	beq.n	801222c <__lo0bits+0x22>
 8012214:	07d9      	lsls	r1, r3, #31
 8012216:	d421      	bmi.n	801225c <__lo0bits+0x52>
 8012218:	0798      	lsls	r0, r3, #30
 801221a:	bf49      	itett	mi
 801221c:	085b      	lsrmi	r3, r3, #1
 801221e:	089b      	lsrpl	r3, r3, #2
 8012220:	2001      	movmi	r0, #1
 8012222:	6013      	strmi	r3, [r2, #0]
 8012224:	bf5c      	itt	pl
 8012226:	6013      	strpl	r3, [r2, #0]
 8012228:	2002      	movpl	r0, #2
 801222a:	4770      	bx	lr
 801222c:	b299      	uxth	r1, r3
 801222e:	b909      	cbnz	r1, 8012234 <__lo0bits+0x2a>
 8012230:	0c1b      	lsrs	r3, r3, #16
 8012232:	2010      	movs	r0, #16
 8012234:	b2d9      	uxtb	r1, r3
 8012236:	b909      	cbnz	r1, 801223c <__lo0bits+0x32>
 8012238:	3008      	adds	r0, #8
 801223a:	0a1b      	lsrs	r3, r3, #8
 801223c:	0719      	lsls	r1, r3, #28
 801223e:	bf04      	itt	eq
 8012240:	091b      	lsreq	r3, r3, #4
 8012242:	3004      	addeq	r0, #4
 8012244:	0799      	lsls	r1, r3, #30
 8012246:	bf04      	itt	eq
 8012248:	089b      	lsreq	r3, r3, #2
 801224a:	3002      	addeq	r0, #2
 801224c:	07d9      	lsls	r1, r3, #31
 801224e:	d403      	bmi.n	8012258 <__lo0bits+0x4e>
 8012250:	085b      	lsrs	r3, r3, #1
 8012252:	f100 0001 	add.w	r0, r0, #1
 8012256:	d003      	beq.n	8012260 <__lo0bits+0x56>
 8012258:	6013      	str	r3, [r2, #0]
 801225a:	4770      	bx	lr
 801225c:	2000      	movs	r0, #0
 801225e:	4770      	bx	lr
 8012260:	2020      	movs	r0, #32
 8012262:	4770      	bx	lr

08012264 <__i2b>:
 8012264:	b510      	push	{r4, lr}
 8012266:	460c      	mov	r4, r1
 8012268:	2101      	movs	r1, #1
 801226a:	f7ff febd 	bl	8011fe8 <_Balloc>
 801226e:	4602      	mov	r2, r0
 8012270:	b928      	cbnz	r0, 801227e <__i2b+0x1a>
 8012272:	4b05      	ldr	r3, [pc, #20]	@ (8012288 <__i2b+0x24>)
 8012274:	4805      	ldr	r0, [pc, #20]	@ (801228c <__i2b+0x28>)
 8012276:	f240 1145 	movw	r1, #325	@ 0x145
 801227a:	f7fd fdf3 	bl	800fe64 <__assert_func>
 801227e:	2301      	movs	r3, #1
 8012280:	6144      	str	r4, [r0, #20]
 8012282:	6103      	str	r3, [r0, #16]
 8012284:	bd10      	pop	{r4, pc}
 8012286:	bf00      	nop
 8012288:	08014c85 	.word	0x08014c85
 801228c:	08014c96 	.word	0x08014c96

08012290 <__multiply>:
 8012290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012294:	4614      	mov	r4, r2
 8012296:	690a      	ldr	r2, [r1, #16]
 8012298:	6923      	ldr	r3, [r4, #16]
 801229a:	429a      	cmp	r2, r3
 801229c:	bfa8      	it	ge
 801229e:	4623      	movge	r3, r4
 80122a0:	460f      	mov	r7, r1
 80122a2:	bfa4      	itt	ge
 80122a4:	460c      	movge	r4, r1
 80122a6:	461f      	movge	r7, r3
 80122a8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80122ac:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80122b0:	68a3      	ldr	r3, [r4, #8]
 80122b2:	6861      	ldr	r1, [r4, #4]
 80122b4:	eb0a 0609 	add.w	r6, sl, r9
 80122b8:	42b3      	cmp	r3, r6
 80122ba:	b085      	sub	sp, #20
 80122bc:	bfb8      	it	lt
 80122be:	3101      	addlt	r1, #1
 80122c0:	f7ff fe92 	bl	8011fe8 <_Balloc>
 80122c4:	b930      	cbnz	r0, 80122d4 <__multiply+0x44>
 80122c6:	4602      	mov	r2, r0
 80122c8:	4b44      	ldr	r3, [pc, #272]	@ (80123dc <__multiply+0x14c>)
 80122ca:	4845      	ldr	r0, [pc, #276]	@ (80123e0 <__multiply+0x150>)
 80122cc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80122d0:	f7fd fdc8 	bl	800fe64 <__assert_func>
 80122d4:	f100 0514 	add.w	r5, r0, #20
 80122d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80122dc:	462b      	mov	r3, r5
 80122de:	2200      	movs	r2, #0
 80122e0:	4543      	cmp	r3, r8
 80122e2:	d321      	bcc.n	8012328 <__multiply+0x98>
 80122e4:	f107 0114 	add.w	r1, r7, #20
 80122e8:	f104 0214 	add.w	r2, r4, #20
 80122ec:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80122f0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80122f4:	9302      	str	r3, [sp, #8]
 80122f6:	1b13      	subs	r3, r2, r4
 80122f8:	3b15      	subs	r3, #21
 80122fa:	f023 0303 	bic.w	r3, r3, #3
 80122fe:	3304      	adds	r3, #4
 8012300:	f104 0715 	add.w	r7, r4, #21
 8012304:	42ba      	cmp	r2, r7
 8012306:	bf38      	it	cc
 8012308:	2304      	movcc	r3, #4
 801230a:	9301      	str	r3, [sp, #4]
 801230c:	9b02      	ldr	r3, [sp, #8]
 801230e:	9103      	str	r1, [sp, #12]
 8012310:	428b      	cmp	r3, r1
 8012312:	d80c      	bhi.n	801232e <__multiply+0x9e>
 8012314:	2e00      	cmp	r6, #0
 8012316:	dd03      	ble.n	8012320 <__multiply+0x90>
 8012318:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801231c:	2b00      	cmp	r3, #0
 801231e:	d05b      	beq.n	80123d8 <__multiply+0x148>
 8012320:	6106      	str	r6, [r0, #16]
 8012322:	b005      	add	sp, #20
 8012324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012328:	f843 2b04 	str.w	r2, [r3], #4
 801232c:	e7d8      	b.n	80122e0 <__multiply+0x50>
 801232e:	f8b1 a000 	ldrh.w	sl, [r1]
 8012332:	f1ba 0f00 	cmp.w	sl, #0
 8012336:	d024      	beq.n	8012382 <__multiply+0xf2>
 8012338:	f104 0e14 	add.w	lr, r4, #20
 801233c:	46a9      	mov	r9, r5
 801233e:	f04f 0c00 	mov.w	ip, #0
 8012342:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012346:	f8d9 3000 	ldr.w	r3, [r9]
 801234a:	fa1f fb87 	uxth.w	fp, r7
 801234e:	b29b      	uxth	r3, r3
 8012350:	fb0a 330b 	mla	r3, sl, fp, r3
 8012354:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8012358:	f8d9 7000 	ldr.w	r7, [r9]
 801235c:	4463      	add	r3, ip
 801235e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012362:	fb0a c70b 	mla	r7, sl, fp, ip
 8012366:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801236a:	b29b      	uxth	r3, r3
 801236c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012370:	4572      	cmp	r2, lr
 8012372:	f849 3b04 	str.w	r3, [r9], #4
 8012376:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801237a:	d8e2      	bhi.n	8012342 <__multiply+0xb2>
 801237c:	9b01      	ldr	r3, [sp, #4]
 801237e:	f845 c003 	str.w	ip, [r5, r3]
 8012382:	9b03      	ldr	r3, [sp, #12]
 8012384:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8012388:	3104      	adds	r1, #4
 801238a:	f1b9 0f00 	cmp.w	r9, #0
 801238e:	d021      	beq.n	80123d4 <__multiply+0x144>
 8012390:	682b      	ldr	r3, [r5, #0]
 8012392:	f104 0c14 	add.w	ip, r4, #20
 8012396:	46ae      	mov	lr, r5
 8012398:	f04f 0a00 	mov.w	sl, #0
 801239c:	f8bc b000 	ldrh.w	fp, [ip]
 80123a0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80123a4:	fb09 770b 	mla	r7, r9, fp, r7
 80123a8:	4457      	add	r7, sl
 80123aa:	b29b      	uxth	r3, r3
 80123ac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80123b0:	f84e 3b04 	str.w	r3, [lr], #4
 80123b4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80123b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80123bc:	f8be 3000 	ldrh.w	r3, [lr]
 80123c0:	fb09 330a 	mla	r3, r9, sl, r3
 80123c4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80123c8:	4562      	cmp	r2, ip
 80123ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80123ce:	d8e5      	bhi.n	801239c <__multiply+0x10c>
 80123d0:	9f01      	ldr	r7, [sp, #4]
 80123d2:	51eb      	str	r3, [r5, r7]
 80123d4:	3504      	adds	r5, #4
 80123d6:	e799      	b.n	801230c <__multiply+0x7c>
 80123d8:	3e01      	subs	r6, #1
 80123da:	e79b      	b.n	8012314 <__multiply+0x84>
 80123dc:	08014c85 	.word	0x08014c85
 80123e0:	08014c96 	.word	0x08014c96

080123e4 <__pow5mult>:
 80123e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80123e8:	4615      	mov	r5, r2
 80123ea:	f012 0203 	ands.w	r2, r2, #3
 80123ee:	4607      	mov	r7, r0
 80123f0:	460e      	mov	r6, r1
 80123f2:	d007      	beq.n	8012404 <__pow5mult+0x20>
 80123f4:	4c25      	ldr	r4, [pc, #148]	@ (801248c <__pow5mult+0xa8>)
 80123f6:	3a01      	subs	r2, #1
 80123f8:	2300      	movs	r3, #0
 80123fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80123fe:	f7ff fe55 	bl	80120ac <__multadd>
 8012402:	4606      	mov	r6, r0
 8012404:	10ad      	asrs	r5, r5, #2
 8012406:	d03d      	beq.n	8012484 <__pow5mult+0xa0>
 8012408:	69fc      	ldr	r4, [r7, #28]
 801240a:	b97c      	cbnz	r4, 801242c <__pow5mult+0x48>
 801240c:	2010      	movs	r0, #16
 801240e:	f7fd fd47 	bl	800fea0 <malloc>
 8012412:	4602      	mov	r2, r0
 8012414:	61f8      	str	r0, [r7, #28]
 8012416:	b928      	cbnz	r0, 8012424 <__pow5mult+0x40>
 8012418:	4b1d      	ldr	r3, [pc, #116]	@ (8012490 <__pow5mult+0xac>)
 801241a:	481e      	ldr	r0, [pc, #120]	@ (8012494 <__pow5mult+0xb0>)
 801241c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8012420:	f7fd fd20 	bl	800fe64 <__assert_func>
 8012424:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012428:	6004      	str	r4, [r0, #0]
 801242a:	60c4      	str	r4, [r0, #12]
 801242c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8012430:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012434:	b94c      	cbnz	r4, 801244a <__pow5mult+0x66>
 8012436:	f240 2171 	movw	r1, #625	@ 0x271
 801243a:	4638      	mov	r0, r7
 801243c:	f7ff ff12 	bl	8012264 <__i2b>
 8012440:	2300      	movs	r3, #0
 8012442:	f8c8 0008 	str.w	r0, [r8, #8]
 8012446:	4604      	mov	r4, r0
 8012448:	6003      	str	r3, [r0, #0]
 801244a:	f04f 0900 	mov.w	r9, #0
 801244e:	07eb      	lsls	r3, r5, #31
 8012450:	d50a      	bpl.n	8012468 <__pow5mult+0x84>
 8012452:	4631      	mov	r1, r6
 8012454:	4622      	mov	r2, r4
 8012456:	4638      	mov	r0, r7
 8012458:	f7ff ff1a 	bl	8012290 <__multiply>
 801245c:	4631      	mov	r1, r6
 801245e:	4680      	mov	r8, r0
 8012460:	4638      	mov	r0, r7
 8012462:	f7ff fe01 	bl	8012068 <_Bfree>
 8012466:	4646      	mov	r6, r8
 8012468:	106d      	asrs	r5, r5, #1
 801246a:	d00b      	beq.n	8012484 <__pow5mult+0xa0>
 801246c:	6820      	ldr	r0, [r4, #0]
 801246e:	b938      	cbnz	r0, 8012480 <__pow5mult+0x9c>
 8012470:	4622      	mov	r2, r4
 8012472:	4621      	mov	r1, r4
 8012474:	4638      	mov	r0, r7
 8012476:	f7ff ff0b 	bl	8012290 <__multiply>
 801247a:	6020      	str	r0, [r4, #0]
 801247c:	f8c0 9000 	str.w	r9, [r0]
 8012480:	4604      	mov	r4, r0
 8012482:	e7e4      	b.n	801244e <__pow5mult+0x6a>
 8012484:	4630      	mov	r0, r6
 8012486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801248a:	bf00      	nop
 801248c:	08014cf0 	.word	0x08014cf0
 8012490:	08014c16 	.word	0x08014c16
 8012494:	08014c96 	.word	0x08014c96

08012498 <__lshift>:
 8012498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801249c:	460c      	mov	r4, r1
 801249e:	6849      	ldr	r1, [r1, #4]
 80124a0:	6923      	ldr	r3, [r4, #16]
 80124a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80124a6:	68a3      	ldr	r3, [r4, #8]
 80124a8:	4607      	mov	r7, r0
 80124aa:	4691      	mov	r9, r2
 80124ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80124b0:	f108 0601 	add.w	r6, r8, #1
 80124b4:	42b3      	cmp	r3, r6
 80124b6:	db0b      	blt.n	80124d0 <__lshift+0x38>
 80124b8:	4638      	mov	r0, r7
 80124ba:	f7ff fd95 	bl	8011fe8 <_Balloc>
 80124be:	4605      	mov	r5, r0
 80124c0:	b948      	cbnz	r0, 80124d6 <__lshift+0x3e>
 80124c2:	4602      	mov	r2, r0
 80124c4:	4b28      	ldr	r3, [pc, #160]	@ (8012568 <__lshift+0xd0>)
 80124c6:	4829      	ldr	r0, [pc, #164]	@ (801256c <__lshift+0xd4>)
 80124c8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80124cc:	f7fd fcca 	bl	800fe64 <__assert_func>
 80124d0:	3101      	adds	r1, #1
 80124d2:	005b      	lsls	r3, r3, #1
 80124d4:	e7ee      	b.n	80124b4 <__lshift+0x1c>
 80124d6:	2300      	movs	r3, #0
 80124d8:	f100 0114 	add.w	r1, r0, #20
 80124dc:	f100 0210 	add.w	r2, r0, #16
 80124e0:	4618      	mov	r0, r3
 80124e2:	4553      	cmp	r3, sl
 80124e4:	db33      	blt.n	801254e <__lshift+0xb6>
 80124e6:	6920      	ldr	r0, [r4, #16]
 80124e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80124ec:	f104 0314 	add.w	r3, r4, #20
 80124f0:	f019 091f 	ands.w	r9, r9, #31
 80124f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80124f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80124fc:	d02b      	beq.n	8012556 <__lshift+0xbe>
 80124fe:	f1c9 0e20 	rsb	lr, r9, #32
 8012502:	468a      	mov	sl, r1
 8012504:	2200      	movs	r2, #0
 8012506:	6818      	ldr	r0, [r3, #0]
 8012508:	fa00 f009 	lsl.w	r0, r0, r9
 801250c:	4310      	orrs	r0, r2
 801250e:	f84a 0b04 	str.w	r0, [sl], #4
 8012512:	f853 2b04 	ldr.w	r2, [r3], #4
 8012516:	459c      	cmp	ip, r3
 8012518:	fa22 f20e 	lsr.w	r2, r2, lr
 801251c:	d8f3      	bhi.n	8012506 <__lshift+0x6e>
 801251e:	ebac 0304 	sub.w	r3, ip, r4
 8012522:	3b15      	subs	r3, #21
 8012524:	f023 0303 	bic.w	r3, r3, #3
 8012528:	3304      	adds	r3, #4
 801252a:	f104 0015 	add.w	r0, r4, #21
 801252e:	4584      	cmp	ip, r0
 8012530:	bf38      	it	cc
 8012532:	2304      	movcc	r3, #4
 8012534:	50ca      	str	r2, [r1, r3]
 8012536:	b10a      	cbz	r2, 801253c <__lshift+0xa4>
 8012538:	f108 0602 	add.w	r6, r8, #2
 801253c:	3e01      	subs	r6, #1
 801253e:	4638      	mov	r0, r7
 8012540:	612e      	str	r6, [r5, #16]
 8012542:	4621      	mov	r1, r4
 8012544:	f7ff fd90 	bl	8012068 <_Bfree>
 8012548:	4628      	mov	r0, r5
 801254a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801254e:	f842 0f04 	str.w	r0, [r2, #4]!
 8012552:	3301      	adds	r3, #1
 8012554:	e7c5      	b.n	80124e2 <__lshift+0x4a>
 8012556:	3904      	subs	r1, #4
 8012558:	f853 2b04 	ldr.w	r2, [r3], #4
 801255c:	f841 2f04 	str.w	r2, [r1, #4]!
 8012560:	459c      	cmp	ip, r3
 8012562:	d8f9      	bhi.n	8012558 <__lshift+0xc0>
 8012564:	e7ea      	b.n	801253c <__lshift+0xa4>
 8012566:	bf00      	nop
 8012568:	08014c85 	.word	0x08014c85
 801256c:	08014c96 	.word	0x08014c96

08012570 <__mcmp>:
 8012570:	690a      	ldr	r2, [r1, #16]
 8012572:	4603      	mov	r3, r0
 8012574:	6900      	ldr	r0, [r0, #16]
 8012576:	1a80      	subs	r0, r0, r2
 8012578:	b530      	push	{r4, r5, lr}
 801257a:	d10e      	bne.n	801259a <__mcmp+0x2a>
 801257c:	3314      	adds	r3, #20
 801257e:	3114      	adds	r1, #20
 8012580:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012584:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012588:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801258c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012590:	4295      	cmp	r5, r2
 8012592:	d003      	beq.n	801259c <__mcmp+0x2c>
 8012594:	d205      	bcs.n	80125a2 <__mcmp+0x32>
 8012596:	f04f 30ff 	mov.w	r0, #4294967295
 801259a:	bd30      	pop	{r4, r5, pc}
 801259c:	42a3      	cmp	r3, r4
 801259e:	d3f3      	bcc.n	8012588 <__mcmp+0x18>
 80125a0:	e7fb      	b.n	801259a <__mcmp+0x2a>
 80125a2:	2001      	movs	r0, #1
 80125a4:	e7f9      	b.n	801259a <__mcmp+0x2a>
	...

080125a8 <__mdiff>:
 80125a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125ac:	4689      	mov	r9, r1
 80125ae:	4606      	mov	r6, r0
 80125b0:	4611      	mov	r1, r2
 80125b2:	4648      	mov	r0, r9
 80125b4:	4614      	mov	r4, r2
 80125b6:	f7ff ffdb 	bl	8012570 <__mcmp>
 80125ba:	1e05      	subs	r5, r0, #0
 80125bc:	d112      	bne.n	80125e4 <__mdiff+0x3c>
 80125be:	4629      	mov	r1, r5
 80125c0:	4630      	mov	r0, r6
 80125c2:	f7ff fd11 	bl	8011fe8 <_Balloc>
 80125c6:	4602      	mov	r2, r0
 80125c8:	b928      	cbnz	r0, 80125d6 <__mdiff+0x2e>
 80125ca:	4b3f      	ldr	r3, [pc, #252]	@ (80126c8 <__mdiff+0x120>)
 80125cc:	f240 2137 	movw	r1, #567	@ 0x237
 80125d0:	483e      	ldr	r0, [pc, #248]	@ (80126cc <__mdiff+0x124>)
 80125d2:	f7fd fc47 	bl	800fe64 <__assert_func>
 80125d6:	2301      	movs	r3, #1
 80125d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80125dc:	4610      	mov	r0, r2
 80125de:	b003      	add	sp, #12
 80125e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125e4:	bfbc      	itt	lt
 80125e6:	464b      	movlt	r3, r9
 80125e8:	46a1      	movlt	r9, r4
 80125ea:	4630      	mov	r0, r6
 80125ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80125f0:	bfba      	itte	lt
 80125f2:	461c      	movlt	r4, r3
 80125f4:	2501      	movlt	r5, #1
 80125f6:	2500      	movge	r5, #0
 80125f8:	f7ff fcf6 	bl	8011fe8 <_Balloc>
 80125fc:	4602      	mov	r2, r0
 80125fe:	b918      	cbnz	r0, 8012608 <__mdiff+0x60>
 8012600:	4b31      	ldr	r3, [pc, #196]	@ (80126c8 <__mdiff+0x120>)
 8012602:	f240 2145 	movw	r1, #581	@ 0x245
 8012606:	e7e3      	b.n	80125d0 <__mdiff+0x28>
 8012608:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801260c:	6926      	ldr	r6, [r4, #16]
 801260e:	60c5      	str	r5, [r0, #12]
 8012610:	f109 0310 	add.w	r3, r9, #16
 8012614:	f109 0514 	add.w	r5, r9, #20
 8012618:	f104 0e14 	add.w	lr, r4, #20
 801261c:	f100 0b14 	add.w	fp, r0, #20
 8012620:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8012624:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8012628:	9301      	str	r3, [sp, #4]
 801262a:	46d9      	mov	r9, fp
 801262c:	f04f 0c00 	mov.w	ip, #0
 8012630:	9b01      	ldr	r3, [sp, #4]
 8012632:	f85e 0b04 	ldr.w	r0, [lr], #4
 8012636:	f853 af04 	ldr.w	sl, [r3, #4]!
 801263a:	9301      	str	r3, [sp, #4]
 801263c:	fa1f f38a 	uxth.w	r3, sl
 8012640:	4619      	mov	r1, r3
 8012642:	b283      	uxth	r3, r0
 8012644:	1acb      	subs	r3, r1, r3
 8012646:	0c00      	lsrs	r0, r0, #16
 8012648:	4463      	add	r3, ip
 801264a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801264e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8012652:	b29b      	uxth	r3, r3
 8012654:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012658:	4576      	cmp	r6, lr
 801265a:	f849 3b04 	str.w	r3, [r9], #4
 801265e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012662:	d8e5      	bhi.n	8012630 <__mdiff+0x88>
 8012664:	1b33      	subs	r3, r6, r4
 8012666:	3b15      	subs	r3, #21
 8012668:	f023 0303 	bic.w	r3, r3, #3
 801266c:	3415      	adds	r4, #21
 801266e:	3304      	adds	r3, #4
 8012670:	42a6      	cmp	r6, r4
 8012672:	bf38      	it	cc
 8012674:	2304      	movcc	r3, #4
 8012676:	441d      	add	r5, r3
 8012678:	445b      	add	r3, fp
 801267a:	461e      	mov	r6, r3
 801267c:	462c      	mov	r4, r5
 801267e:	4544      	cmp	r4, r8
 8012680:	d30e      	bcc.n	80126a0 <__mdiff+0xf8>
 8012682:	f108 0103 	add.w	r1, r8, #3
 8012686:	1b49      	subs	r1, r1, r5
 8012688:	f021 0103 	bic.w	r1, r1, #3
 801268c:	3d03      	subs	r5, #3
 801268e:	45a8      	cmp	r8, r5
 8012690:	bf38      	it	cc
 8012692:	2100      	movcc	r1, #0
 8012694:	440b      	add	r3, r1
 8012696:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801269a:	b191      	cbz	r1, 80126c2 <__mdiff+0x11a>
 801269c:	6117      	str	r7, [r2, #16]
 801269e:	e79d      	b.n	80125dc <__mdiff+0x34>
 80126a0:	f854 1b04 	ldr.w	r1, [r4], #4
 80126a4:	46e6      	mov	lr, ip
 80126a6:	0c08      	lsrs	r0, r1, #16
 80126a8:	fa1c fc81 	uxtah	ip, ip, r1
 80126ac:	4471      	add	r1, lr
 80126ae:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80126b2:	b289      	uxth	r1, r1
 80126b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80126b8:	f846 1b04 	str.w	r1, [r6], #4
 80126bc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80126c0:	e7dd      	b.n	801267e <__mdiff+0xd6>
 80126c2:	3f01      	subs	r7, #1
 80126c4:	e7e7      	b.n	8012696 <__mdiff+0xee>
 80126c6:	bf00      	nop
 80126c8:	08014c85 	.word	0x08014c85
 80126cc:	08014c96 	.word	0x08014c96

080126d0 <__ulp>:
 80126d0:	b082      	sub	sp, #8
 80126d2:	ed8d 0b00 	vstr	d0, [sp]
 80126d6:	9a01      	ldr	r2, [sp, #4]
 80126d8:	4b0f      	ldr	r3, [pc, #60]	@ (8012718 <__ulp+0x48>)
 80126da:	4013      	ands	r3, r2
 80126dc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	dc08      	bgt.n	80126f6 <__ulp+0x26>
 80126e4:	425b      	negs	r3, r3
 80126e6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80126ea:	ea4f 5223 	mov.w	r2, r3, asr #20
 80126ee:	da04      	bge.n	80126fa <__ulp+0x2a>
 80126f0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80126f4:	4113      	asrs	r3, r2
 80126f6:	2200      	movs	r2, #0
 80126f8:	e008      	b.n	801270c <__ulp+0x3c>
 80126fa:	f1a2 0314 	sub.w	r3, r2, #20
 80126fe:	2b1e      	cmp	r3, #30
 8012700:	bfda      	itte	le
 8012702:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8012706:	40da      	lsrle	r2, r3
 8012708:	2201      	movgt	r2, #1
 801270a:	2300      	movs	r3, #0
 801270c:	4619      	mov	r1, r3
 801270e:	4610      	mov	r0, r2
 8012710:	ec41 0b10 	vmov	d0, r0, r1
 8012714:	b002      	add	sp, #8
 8012716:	4770      	bx	lr
 8012718:	7ff00000 	.word	0x7ff00000

0801271c <__b2d>:
 801271c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012720:	6906      	ldr	r6, [r0, #16]
 8012722:	f100 0814 	add.w	r8, r0, #20
 8012726:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801272a:	1f37      	subs	r7, r6, #4
 801272c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012730:	4610      	mov	r0, r2
 8012732:	f7ff fd4b 	bl	80121cc <__hi0bits>
 8012736:	f1c0 0320 	rsb	r3, r0, #32
 801273a:	280a      	cmp	r0, #10
 801273c:	600b      	str	r3, [r1, #0]
 801273e:	491b      	ldr	r1, [pc, #108]	@ (80127ac <__b2d+0x90>)
 8012740:	dc15      	bgt.n	801276e <__b2d+0x52>
 8012742:	f1c0 0c0b 	rsb	ip, r0, #11
 8012746:	fa22 f30c 	lsr.w	r3, r2, ip
 801274a:	45b8      	cmp	r8, r7
 801274c:	ea43 0501 	orr.w	r5, r3, r1
 8012750:	bf34      	ite	cc
 8012752:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012756:	2300      	movcs	r3, #0
 8012758:	3015      	adds	r0, #21
 801275a:	fa02 f000 	lsl.w	r0, r2, r0
 801275e:	fa23 f30c 	lsr.w	r3, r3, ip
 8012762:	4303      	orrs	r3, r0
 8012764:	461c      	mov	r4, r3
 8012766:	ec45 4b10 	vmov	d0, r4, r5
 801276a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801276e:	45b8      	cmp	r8, r7
 8012770:	bf3a      	itte	cc
 8012772:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012776:	f1a6 0708 	subcc.w	r7, r6, #8
 801277a:	2300      	movcs	r3, #0
 801277c:	380b      	subs	r0, #11
 801277e:	d012      	beq.n	80127a6 <__b2d+0x8a>
 8012780:	f1c0 0120 	rsb	r1, r0, #32
 8012784:	fa23 f401 	lsr.w	r4, r3, r1
 8012788:	4082      	lsls	r2, r0
 801278a:	4322      	orrs	r2, r4
 801278c:	4547      	cmp	r7, r8
 801278e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8012792:	bf8c      	ite	hi
 8012794:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8012798:	2200      	movls	r2, #0
 801279a:	4083      	lsls	r3, r0
 801279c:	40ca      	lsrs	r2, r1
 801279e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80127a2:	4313      	orrs	r3, r2
 80127a4:	e7de      	b.n	8012764 <__b2d+0x48>
 80127a6:	ea42 0501 	orr.w	r5, r2, r1
 80127aa:	e7db      	b.n	8012764 <__b2d+0x48>
 80127ac:	3ff00000 	.word	0x3ff00000

080127b0 <__d2b>:
 80127b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80127b4:	460f      	mov	r7, r1
 80127b6:	2101      	movs	r1, #1
 80127b8:	ec59 8b10 	vmov	r8, r9, d0
 80127bc:	4616      	mov	r6, r2
 80127be:	f7ff fc13 	bl	8011fe8 <_Balloc>
 80127c2:	4604      	mov	r4, r0
 80127c4:	b930      	cbnz	r0, 80127d4 <__d2b+0x24>
 80127c6:	4602      	mov	r2, r0
 80127c8:	4b23      	ldr	r3, [pc, #140]	@ (8012858 <__d2b+0xa8>)
 80127ca:	4824      	ldr	r0, [pc, #144]	@ (801285c <__d2b+0xac>)
 80127cc:	f240 310f 	movw	r1, #783	@ 0x30f
 80127d0:	f7fd fb48 	bl	800fe64 <__assert_func>
 80127d4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80127d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80127dc:	b10d      	cbz	r5, 80127e2 <__d2b+0x32>
 80127de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80127e2:	9301      	str	r3, [sp, #4]
 80127e4:	f1b8 0300 	subs.w	r3, r8, #0
 80127e8:	d023      	beq.n	8012832 <__d2b+0x82>
 80127ea:	4668      	mov	r0, sp
 80127ec:	9300      	str	r3, [sp, #0]
 80127ee:	f7ff fd0c 	bl	801220a <__lo0bits>
 80127f2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80127f6:	b1d0      	cbz	r0, 801282e <__d2b+0x7e>
 80127f8:	f1c0 0320 	rsb	r3, r0, #32
 80127fc:	fa02 f303 	lsl.w	r3, r2, r3
 8012800:	430b      	orrs	r3, r1
 8012802:	40c2      	lsrs	r2, r0
 8012804:	6163      	str	r3, [r4, #20]
 8012806:	9201      	str	r2, [sp, #4]
 8012808:	9b01      	ldr	r3, [sp, #4]
 801280a:	61a3      	str	r3, [r4, #24]
 801280c:	2b00      	cmp	r3, #0
 801280e:	bf0c      	ite	eq
 8012810:	2201      	moveq	r2, #1
 8012812:	2202      	movne	r2, #2
 8012814:	6122      	str	r2, [r4, #16]
 8012816:	b1a5      	cbz	r5, 8012842 <__d2b+0x92>
 8012818:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801281c:	4405      	add	r5, r0
 801281e:	603d      	str	r5, [r7, #0]
 8012820:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8012824:	6030      	str	r0, [r6, #0]
 8012826:	4620      	mov	r0, r4
 8012828:	b003      	add	sp, #12
 801282a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801282e:	6161      	str	r1, [r4, #20]
 8012830:	e7ea      	b.n	8012808 <__d2b+0x58>
 8012832:	a801      	add	r0, sp, #4
 8012834:	f7ff fce9 	bl	801220a <__lo0bits>
 8012838:	9b01      	ldr	r3, [sp, #4]
 801283a:	6163      	str	r3, [r4, #20]
 801283c:	3020      	adds	r0, #32
 801283e:	2201      	movs	r2, #1
 8012840:	e7e8      	b.n	8012814 <__d2b+0x64>
 8012842:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012846:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801284a:	6038      	str	r0, [r7, #0]
 801284c:	6918      	ldr	r0, [r3, #16]
 801284e:	f7ff fcbd 	bl	80121cc <__hi0bits>
 8012852:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012856:	e7e5      	b.n	8012824 <__d2b+0x74>
 8012858:	08014c85 	.word	0x08014c85
 801285c:	08014c96 	.word	0x08014c96

08012860 <__ratio>:
 8012860:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012864:	4688      	mov	r8, r1
 8012866:	4669      	mov	r1, sp
 8012868:	4681      	mov	r9, r0
 801286a:	f7ff ff57 	bl	801271c <__b2d>
 801286e:	a901      	add	r1, sp, #4
 8012870:	4640      	mov	r0, r8
 8012872:	ec55 4b10 	vmov	r4, r5, d0
 8012876:	f7ff ff51 	bl	801271c <__b2d>
 801287a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801287e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8012882:	1ad2      	subs	r2, r2, r3
 8012884:	e9dd 3100 	ldrd	r3, r1, [sp]
 8012888:	1a5b      	subs	r3, r3, r1
 801288a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801288e:	ec57 6b10 	vmov	r6, r7, d0
 8012892:	2b00      	cmp	r3, #0
 8012894:	bfd6      	itet	le
 8012896:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801289a:	462a      	movgt	r2, r5
 801289c:	463a      	movle	r2, r7
 801289e:	46ab      	mov	fp, r5
 80128a0:	46a2      	mov	sl, r4
 80128a2:	bfce      	itee	gt
 80128a4:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80128a8:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 80128ac:	ee00 3a90 	vmovle	s1, r3
 80128b0:	ec4b ab17 	vmov	d7, sl, fp
 80128b4:	ee87 0b00 	vdiv.f64	d0, d7, d0
 80128b8:	b003      	add	sp, #12
 80128ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080128be <__copybits>:
 80128be:	3901      	subs	r1, #1
 80128c0:	b570      	push	{r4, r5, r6, lr}
 80128c2:	1149      	asrs	r1, r1, #5
 80128c4:	6914      	ldr	r4, [r2, #16]
 80128c6:	3101      	adds	r1, #1
 80128c8:	f102 0314 	add.w	r3, r2, #20
 80128cc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80128d0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80128d4:	1f05      	subs	r5, r0, #4
 80128d6:	42a3      	cmp	r3, r4
 80128d8:	d30c      	bcc.n	80128f4 <__copybits+0x36>
 80128da:	1aa3      	subs	r3, r4, r2
 80128dc:	3b11      	subs	r3, #17
 80128de:	f023 0303 	bic.w	r3, r3, #3
 80128e2:	3211      	adds	r2, #17
 80128e4:	42a2      	cmp	r2, r4
 80128e6:	bf88      	it	hi
 80128e8:	2300      	movhi	r3, #0
 80128ea:	4418      	add	r0, r3
 80128ec:	2300      	movs	r3, #0
 80128ee:	4288      	cmp	r0, r1
 80128f0:	d305      	bcc.n	80128fe <__copybits+0x40>
 80128f2:	bd70      	pop	{r4, r5, r6, pc}
 80128f4:	f853 6b04 	ldr.w	r6, [r3], #4
 80128f8:	f845 6f04 	str.w	r6, [r5, #4]!
 80128fc:	e7eb      	b.n	80128d6 <__copybits+0x18>
 80128fe:	f840 3b04 	str.w	r3, [r0], #4
 8012902:	e7f4      	b.n	80128ee <__copybits+0x30>

08012904 <__any_on>:
 8012904:	f100 0214 	add.w	r2, r0, #20
 8012908:	6900      	ldr	r0, [r0, #16]
 801290a:	114b      	asrs	r3, r1, #5
 801290c:	4298      	cmp	r0, r3
 801290e:	b510      	push	{r4, lr}
 8012910:	db11      	blt.n	8012936 <__any_on+0x32>
 8012912:	dd0a      	ble.n	801292a <__any_on+0x26>
 8012914:	f011 011f 	ands.w	r1, r1, #31
 8012918:	d007      	beq.n	801292a <__any_on+0x26>
 801291a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801291e:	fa24 f001 	lsr.w	r0, r4, r1
 8012922:	fa00 f101 	lsl.w	r1, r0, r1
 8012926:	428c      	cmp	r4, r1
 8012928:	d10b      	bne.n	8012942 <__any_on+0x3e>
 801292a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801292e:	4293      	cmp	r3, r2
 8012930:	d803      	bhi.n	801293a <__any_on+0x36>
 8012932:	2000      	movs	r0, #0
 8012934:	bd10      	pop	{r4, pc}
 8012936:	4603      	mov	r3, r0
 8012938:	e7f7      	b.n	801292a <__any_on+0x26>
 801293a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801293e:	2900      	cmp	r1, #0
 8012940:	d0f5      	beq.n	801292e <__any_on+0x2a>
 8012942:	2001      	movs	r0, #1
 8012944:	e7f6      	b.n	8012934 <__any_on+0x30>

08012946 <sulp>:
 8012946:	b570      	push	{r4, r5, r6, lr}
 8012948:	4604      	mov	r4, r0
 801294a:	460d      	mov	r5, r1
 801294c:	4616      	mov	r6, r2
 801294e:	ec45 4b10 	vmov	d0, r4, r5
 8012952:	f7ff febd 	bl	80126d0 <__ulp>
 8012956:	b17e      	cbz	r6, 8012978 <sulp+0x32>
 8012958:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801295c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8012960:	2b00      	cmp	r3, #0
 8012962:	dd09      	ble.n	8012978 <sulp+0x32>
 8012964:	051b      	lsls	r3, r3, #20
 8012966:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 801296a:	2000      	movs	r0, #0
 801296c:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8012970:	ec41 0b17 	vmov	d7, r0, r1
 8012974:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012978:	bd70      	pop	{r4, r5, r6, pc}
 801297a:	0000      	movs	r0, r0
 801297c:	0000      	movs	r0, r0
	...

08012980 <_strtod_l>:
 8012980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012984:	ed2d 8b0a 	vpush	{d8-d12}
 8012988:	b097      	sub	sp, #92	@ 0x5c
 801298a:	4688      	mov	r8, r1
 801298c:	920e      	str	r2, [sp, #56]	@ 0x38
 801298e:	2200      	movs	r2, #0
 8012990:	9212      	str	r2, [sp, #72]	@ 0x48
 8012992:	9005      	str	r0, [sp, #20]
 8012994:	f04f 0a00 	mov.w	sl, #0
 8012998:	f04f 0b00 	mov.w	fp, #0
 801299c:	460a      	mov	r2, r1
 801299e:	9211      	str	r2, [sp, #68]	@ 0x44
 80129a0:	7811      	ldrb	r1, [r2, #0]
 80129a2:	292b      	cmp	r1, #43	@ 0x2b
 80129a4:	d04c      	beq.n	8012a40 <_strtod_l+0xc0>
 80129a6:	d839      	bhi.n	8012a1c <_strtod_l+0x9c>
 80129a8:	290d      	cmp	r1, #13
 80129aa:	d833      	bhi.n	8012a14 <_strtod_l+0x94>
 80129ac:	2908      	cmp	r1, #8
 80129ae:	d833      	bhi.n	8012a18 <_strtod_l+0x98>
 80129b0:	2900      	cmp	r1, #0
 80129b2:	d03c      	beq.n	8012a2e <_strtod_l+0xae>
 80129b4:	2200      	movs	r2, #0
 80129b6:	9208      	str	r2, [sp, #32]
 80129b8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80129ba:	782a      	ldrb	r2, [r5, #0]
 80129bc:	2a30      	cmp	r2, #48	@ 0x30
 80129be:	f040 80b5 	bne.w	8012b2c <_strtod_l+0x1ac>
 80129c2:	786a      	ldrb	r2, [r5, #1]
 80129c4:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80129c8:	2a58      	cmp	r2, #88	@ 0x58
 80129ca:	d170      	bne.n	8012aae <_strtod_l+0x12e>
 80129cc:	9302      	str	r3, [sp, #8]
 80129ce:	9b08      	ldr	r3, [sp, #32]
 80129d0:	9301      	str	r3, [sp, #4]
 80129d2:	ab12      	add	r3, sp, #72	@ 0x48
 80129d4:	9300      	str	r3, [sp, #0]
 80129d6:	4a8b      	ldr	r2, [pc, #556]	@ (8012c04 <_strtod_l+0x284>)
 80129d8:	9805      	ldr	r0, [sp, #20]
 80129da:	ab13      	add	r3, sp, #76	@ 0x4c
 80129dc:	a911      	add	r1, sp, #68	@ 0x44
 80129de:	f001 fa63 	bl	8013ea8 <__gethex>
 80129e2:	f010 060f 	ands.w	r6, r0, #15
 80129e6:	4604      	mov	r4, r0
 80129e8:	d005      	beq.n	80129f6 <_strtod_l+0x76>
 80129ea:	2e06      	cmp	r6, #6
 80129ec:	d12a      	bne.n	8012a44 <_strtod_l+0xc4>
 80129ee:	3501      	adds	r5, #1
 80129f0:	2300      	movs	r3, #0
 80129f2:	9511      	str	r5, [sp, #68]	@ 0x44
 80129f4:	9308      	str	r3, [sp, #32]
 80129f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	f040 852f 	bne.w	801345c <_strtod_l+0xadc>
 80129fe:	9b08      	ldr	r3, [sp, #32]
 8012a00:	ec4b ab10 	vmov	d0, sl, fp
 8012a04:	b1cb      	cbz	r3, 8012a3a <_strtod_l+0xba>
 8012a06:	eeb1 0b40 	vneg.f64	d0, d0
 8012a0a:	b017      	add	sp, #92	@ 0x5c
 8012a0c:	ecbd 8b0a 	vpop	{d8-d12}
 8012a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a14:	2920      	cmp	r1, #32
 8012a16:	d1cd      	bne.n	80129b4 <_strtod_l+0x34>
 8012a18:	3201      	adds	r2, #1
 8012a1a:	e7c0      	b.n	801299e <_strtod_l+0x1e>
 8012a1c:	292d      	cmp	r1, #45	@ 0x2d
 8012a1e:	d1c9      	bne.n	80129b4 <_strtod_l+0x34>
 8012a20:	2101      	movs	r1, #1
 8012a22:	9108      	str	r1, [sp, #32]
 8012a24:	1c51      	adds	r1, r2, #1
 8012a26:	9111      	str	r1, [sp, #68]	@ 0x44
 8012a28:	7852      	ldrb	r2, [r2, #1]
 8012a2a:	2a00      	cmp	r2, #0
 8012a2c:	d1c4      	bne.n	80129b8 <_strtod_l+0x38>
 8012a2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012a30:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	f040 850f 	bne.w	8013458 <_strtod_l+0xad8>
 8012a3a:	ec4b ab10 	vmov	d0, sl, fp
 8012a3e:	e7e4      	b.n	8012a0a <_strtod_l+0x8a>
 8012a40:	2100      	movs	r1, #0
 8012a42:	e7ee      	b.n	8012a22 <_strtod_l+0xa2>
 8012a44:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8012a46:	b13a      	cbz	r2, 8012a58 <_strtod_l+0xd8>
 8012a48:	2135      	movs	r1, #53	@ 0x35
 8012a4a:	a814      	add	r0, sp, #80	@ 0x50
 8012a4c:	f7ff ff37 	bl	80128be <__copybits>
 8012a50:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8012a52:	9805      	ldr	r0, [sp, #20]
 8012a54:	f7ff fb08 	bl	8012068 <_Bfree>
 8012a58:	1e73      	subs	r3, r6, #1
 8012a5a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012a5c:	2b04      	cmp	r3, #4
 8012a5e:	d806      	bhi.n	8012a6e <_strtod_l+0xee>
 8012a60:	e8df f003 	tbb	[pc, r3]
 8012a64:	201d0314 	.word	0x201d0314
 8012a68:	14          	.byte	0x14
 8012a69:	00          	.byte	0x00
 8012a6a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8012a6e:	05e3      	lsls	r3, r4, #23
 8012a70:	bf48      	it	mi
 8012a72:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8012a76:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012a7a:	0d1b      	lsrs	r3, r3, #20
 8012a7c:	051b      	lsls	r3, r3, #20
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d1b9      	bne.n	80129f6 <_strtod_l+0x76>
 8012a82:	f7fe fc45 	bl	8011310 <__errno>
 8012a86:	2322      	movs	r3, #34	@ 0x22
 8012a88:	6003      	str	r3, [r0, #0]
 8012a8a:	e7b4      	b.n	80129f6 <_strtod_l+0x76>
 8012a8c:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8012a90:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8012a94:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8012a98:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8012a9c:	e7e7      	b.n	8012a6e <_strtod_l+0xee>
 8012a9e:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 8012c0c <_strtod_l+0x28c>
 8012aa2:	e7e4      	b.n	8012a6e <_strtod_l+0xee>
 8012aa4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8012aa8:	f04f 3aff 	mov.w	sl, #4294967295
 8012aac:	e7df      	b.n	8012a6e <_strtod_l+0xee>
 8012aae:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012ab0:	1c5a      	adds	r2, r3, #1
 8012ab2:	9211      	str	r2, [sp, #68]	@ 0x44
 8012ab4:	785b      	ldrb	r3, [r3, #1]
 8012ab6:	2b30      	cmp	r3, #48	@ 0x30
 8012ab8:	d0f9      	beq.n	8012aae <_strtod_l+0x12e>
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d09b      	beq.n	80129f6 <_strtod_l+0x76>
 8012abe:	2301      	movs	r3, #1
 8012ac0:	2600      	movs	r6, #0
 8012ac2:	9307      	str	r3, [sp, #28]
 8012ac4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012ac6:	930a      	str	r3, [sp, #40]	@ 0x28
 8012ac8:	46b1      	mov	r9, r6
 8012aca:	4635      	mov	r5, r6
 8012acc:	220a      	movs	r2, #10
 8012ace:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8012ad0:	7804      	ldrb	r4, [r0, #0]
 8012ad2:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8012ad6:	b2d9      	uxtb	r1, r3
 8012ad8:	2909      	cmp	r1, #9
 8012ada:	d929      	bls.n	8012b30 <_strtod_l+0x1b0>
 8012adc:	494a      	ldr	r1, [pc, #296]	@ (8012c08 <_strtod_l+0x288>)
 8012ade:	2201      	movs	r2, #1
 8012ae0:	f001 f928 	bl	8013d34 <strncmp>
 8012ae4:	b378      	cbz	r0, 8012b46 <_strtod_l+0x1c6>
 8012ae6:	2000      	movs	r0, #0
 8012ae8:	4622      	mov	r2, r4
 8012aea:	462b      	mov	r3, r5
 8012aec:	4607      	mov	r7, r0
 8012aee:	9006      	str	r0, [sp, #24]
 8012af0:	2a65      	cmp	r2, #101	@ 0x65
 8012af2:	d001      	beq.n	8012af8 <_strtod_l+0x178>
 8012af4:	2a45      	cmp	r2, #69	@ 0x45
 8012af6:	d117      	bne.n	8012b28 <_strtod_l+0x1a8>
 8012af8:	b91b      	cbnz	r3, 8012b02 <_strtod_l+0x182>
 8012afa:	9b07      	ldr	r3, [sp, #28]
 8012afc:	4303      	orrs	r3, r0
 8012afe:	d096      	beq.n	8012a2e <_strtod_l+0xae>
 8012b00:	2300      	movs	r3, #0
 8012b02:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8012b06:	f108 0201 	add.w	r2, r8, #1
 8012b0a:	9211      	str	r2, [sp, #68]	@ 0x44
 8012b0c:	f898 2001 	ldrb.w	r2, [r8, #1]
 8012b10:	2a2b      	cmp	r2, #43	@ 0x2b
 8012b12:	d06b      	beq.n	8012bec <_strtod_l+0x26c>
 8012b14:	2a2d      	cmp	r2, #45	@ 0x2d
 8012b16:	d071      	beq.n	8012bfc <_strtod_l+0x27c>
 8012b18:	f04f 0e00 	mov.w	lr, #0
 8012b1c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8012b20:	2c09      	cmp	r4, #9
 8012b22:	d979      	bls.n	8012c18 <_strtod_l+0x298>
 8012b24:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8012b28:	2400      	movs	r4, #0
 8012b2a:	e094      	b.n	8012c56 <_strtod_l+0x2d6>
 8012b2c:	2300      	movs	r3, #0
 8012b2e:	e7c7      	b.n	8012ac0 <_strtod_l+0x140>
 8012b30:	2d08      	cmp	r5, #8
 8012b32:	f100 0001 	add.w	r0, r0, #1
 8012b36:	bfd4      	ite	le
 8012b38:	fb02 3909 	mlale	r9, r2, r9, r3
 8012b3c:	fb02 3606 	mlagt	r6, r2, r6, r3
 8012b40:	3501      	adds	r5, #1
 8012b42:	9011      	str	r0, [sp, #68]	@ 0x44
 8012b44:	e7c3      	b.n	8012ace <_strtod_l+0x14e>
 8012b46:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012b48:	1c5a      	adds	r2, r3, #1
 8012b4a:	9211      	str	r2, [sp, #68]	@ 0x44
 8012b4c:	785a      	ldrb	r2, [r3, #1]
 8012b4e:	b375      	cbz	r5, 8012bae <_strtod_l+0x22e>
 8012b50:	4607      	mov	r7, r0
 8012b52:	462b      	mov	r3, r5
 8012b54:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8012b58:	2909      	cmp	r1, #9
 8012b5a:	d913      	bls.n	8012b84 <_strtod_l+0x204>
 8012b5c:	2101      	movs	r1, #1
 8012b5e:	9106      	str	r1, [sp, #24]
 8012b60:	e7c6      	b.n	8012af0 <_strtod_l+0x170>
 8012b62:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012b64:	1c5a      	adds	r2, r3, #1
 8012b66:	9211      	str	r2, [sp, #68]	@ 0x44
 8012b68:	785a      	ldrb	r2, [r3, #1]
 8012b6a:	3001      	adds	r0, #1
 8012b6c:	2a30      	cmp	r2, #48	@ 0x30
 8012b6e:	d0f8      	beq.n	8012b62 <_strtod_l+0x1e2>
 8012b70:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8012b74:	2b08      	cmp	r3, #8
 8012b76:	f200 8476 	bhi.w	8013466 <_strtod_l+0xae6>
 8012b7a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012b7c:	930a      	str	r3, [sp, #40]	@ 0x28
 8012b7e:	4607      	mov	r7, r0
 8012b80:	2000      	movs	r0, #0
 8012b82:	4603      	mov	r3, r0
 8012b84:	3a30      	subs	r2, #48	@ 0x30
 8012b86:	f100 0101 	add.w	r1, r0, #1
 8012b8a:	d023      	beq.n	8012bd4 <_strtod_l+0x254>
 8012b8c:	440f      	add	r7, r1
 8012b8e:	eb00 0c03 	add.w	ip, r0, r3
 8012b92:	4619      	mov	r1, r3
 8012b94:	240a      	movs	r4, #10
 8012b96:	4561      	cmp	r1, ip
 8012b98:	d10b      	bne.n	8012bb2 <_strtod_l+0x232>
 8012b9a:	1c5c      	adds	r4, r3, #1
 8012b9c:	4403      	add	r3, r0
 8012b9e:	2b08      	cmp	r3, #8
 8012ba0:	4404      	add	r4, r0
 8012ba2:	dc11      	bgt.n	8012bc8 <_strtod_l+0x248>
 8012ba4:	230a      	movs	r3, #10
 8012ba6:	fb03 2909 	mla	r9, r3, r9, r2
 8012baa:	2100      	movs	r1, #0
 8012bac:	e013      	b.n	8012bd6 <_strtod_l+0x256>
 8012bae:	4628      	mov	r0, r5
 8012bb0:	e7dc      	b.n	8012b6c <_strtod_l+0x1ec>
 8012bb2:	2908      	cmp	r1, #8
 8012bb4:	f101 0101 	add.w	r1, r1, #1
 8012bb8:	dc02      	bgt.n	8012bc0 <_strtod_l+0x240>
 8012bba:	fb04 f909 	mul.w	r9, r4, r9
 8012bbe:	e7ea      	b.n	8012b96 <_strtod_l+0x216>
 8012bc0:	2910      	cmp	r1, #16
 8012bc2:	bfd8      	it	le
 8012bc4:	4366      	mulle	r6, r4
 8012bc6:	e7e6      	b.n	8012b96 <_strtod_l+0x216>
 8012bc8:	2b0f      	cmp	r3, #15
 8012bca:	dcee      	bgt.n	8012baa <_strtod_l+0x22a>
 8012bcc:	230a      	movs	r3, #10
 8012bce:	fb03 2606 	mla	r6, r3, r6, r2
 8012bd2:	e7ea      	b.n	8012baa <_strtod_l+0x22a>
 8012bd4:	461c      	mov	r4, r3
 8012bd6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012bd8:	1c5a      	adds	r2, r3, #1
 8012bda:	9211      	str	r2, [sp, #68]	@ 0x44
 8012bdc:	785a      	ldrb	r2, [r3, #1]
 8012bde:	4608      	mov	r0, r1
 8012be0:	4623      	mov	r3, r4
 8012be2:	e7b7      	b.n	8012b54 <_strtod_l+0x1d4>
 8012be4:	2301      	movs	r3, #1
 8012be6:	2700      	movs	r7, #0
 8012be8:	9306      	str	r3, [sp, #24]
 8012bea:	e786      	b.n	8012afa <_strtod_l+0x17a>
 8012bec:	f04f 0e00 	mov.w	lr, #0
 8012bf0:	f108 0202 	add.w	r2, r8, #2
 8012bf4:	9211      	str	r2, [sp, #68]	@ 0x44
 8012bf6:	f898 2002 	ldrb.w	r2, [r8, #2]
 8012bfa:	e78f      	b.n	8012b1c <_strtod_l+0x19c>
 8012bfc:	f04f 0e01 	mov.w	lr, #1
 8012c00:	e7f6      	b.n	8012bf0 <_strtod_l+0x270>
 8012c02:	bf00      	nop
 8012c04:	08014e08 	.word	0x08014e08
 8012c08:	08014df0 	.word	0x08014df0
 8012c0c:	7ff00000 	.word	0x7ff00000
 8012c10:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8012c12:	1c54      	adds	r4, r2, #1
 8012c14:	9411      	str	r4, [sp, #68]	@ 0x44
 8012c16:	7852      	ldrb	r2, [r2, #1]
 8012c18:	2a30      	cmp	r2, #48	@ 0x30
 8012c1a:	d0f9      	beq.n	8012c10 <_strtod_l+0x290>
 8012c1c:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8012c20:	2c08      	cmp	r4, #8
 8012c22:	d881      	bhi.n	8012b28 <_strtod_l+0x1a8>
 8012c24:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8012c28:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8012c2a:	9209      	str	r2, [sp, #36]	@ 0x24
 8012c2c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8012c2e:	1c51      	adds	r1, r2, #1
 8012c30:	9111      	str	r1, [sp, #68]	@ 0x44
 8012c32:	7852      	ldrb	r2, [r2, #1]
 8012c34:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8012c38:	2c09      	cmp	r4, #9
 8012c3a:	d938      	bls.n	8012cae <_strtod_l+0x32e>
 8012c3c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8012c3e:	1b0c      	subs	r4, r1, r4
 8012c40:	2c08      	cmp	r4, #8
 8012c42:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8012c46:	dc02      	bgt.n	8012c4e <_strtod_l+0x2ce>
 8012c48:	4564      	cmp	r4, ip
 8012c4a:	bfa8      	it	ge
 8012c4c:	4664      	movge	r4, ip
 8012c4e:	f1be 0f00 	cmp.w	lr, #0
 8012c52:	d000      	beq.n	8012c56 <_strtod_l+0x2d6>
 8012c54:	4264      	negs	r4, r4
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d14e      	bne.n	8012cf8 <_strtod_l+0x378>
 8012c5a:	9b07      	ldr	r3, [sp, #28]
 8012c5c:	4318      	orrs	r0, r3
 8012c5e:	f47f aeca 	bne.w	80129f6 <_strtod_l+0x76>
 8012c62:	9b06      	ldr	r3, [sp, #24]
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	f47f aee2 	bne.w	8012a2e <_strtod_l+0xae>
 8012c6a:	2a69      	cmp	r2, #105	@ 0x69
 8012c6c:	d027      	beq.n	8012cbe <_strtod_l+0x33e>
 8012c6e:	dc24      	bgt.n	8012cba <_strtod_l+0x33a>
 8012c70:	2a49      	cmp	r2, #73	@ 0x49
 8012c72:	d024      	beq.n	8012cbe <_strtod_l+0x33e>
 8012c74:	2a4e      	cmp	r2, #78	@ 0x4e
 8012c76:	f47f aeda 	bne.w	8012a2e <_strtod_l+0xae>
 8012c7a:	4997      	ldr	r1, [pc, #604]	@ (8012ed8 <_strtod_l+0x558>)
 8012c7c:	a811      	add	r0, sp, #68	@ 0x44
 8012c7e:	f001 fb35 	bl	80142ec <__match>
 8012c82:	2800      	cmp	r0, #0
 8012c84:	f43f aed3 	beq.w	8012a2e <_strtod_l+0xae>
 8012c88:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012c8a:	781b      	ldrb	r3, [r3, #0]
 8012c8c:	2b28      	cmp	r3, #40	@ 0x28
 8012c8e:	d12d      	bne.n	8012cec <_strtod_l+0x36c>
 8012c90:	4992      	ldr	r1, [pc, #584]	@ (8012edc <_strtod_l+0x55c>)
 8012c92:	aa14      	add	r2, sp, #80	@ 0x50
 8012c94:	a811      	add	r0, sp, #68	@ 0x44
 8012c96:	f001 fb3d 	bl	8014314 <__hexnan>
 8012c9a:	2805      	cmp	r0, #5
 8012c9c:	d126      	bne.n	8012cec <_strtod_l+0x36c>
 8012c9e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8012ca0:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8012ca4:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8012ca8:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8012cac:	e6a3      	b.n	80129f6 <_strtod_l+0x76>
 8012cae:	240a      	movs	r4, #10
 8012cb0:	fb04 2c0c 	mla	ip, r4, ip, r2
 8012cb4:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8012cb8:	e7b8      	b.n	8012c2c <_strtod_l+0x2ac>
 8012cba:	2a6e      	cmp	r2, #110	@ 0x6e
 8012cbc:	e7db      	b.n	8012c76 <_strtod_l+0x2f6>
 8012cbe:	4988      	ldr	r1, [pc, #544]	@ (8012ee0 <_strtod_l+0x560>)
 8012cc0:	a811      	add	r0, sp, #68	@ 0x44
 8012cc2:	f001 fb13 	bl	80142ec <__match>
 8012cc6:	2800      	cmp	r0, #0
 8012cc8:	f43f aeb1 	beq.w	8012a2e <_strtod_l+0xae>
 8012ccc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012cce:	4985      	ldr	r1, [pc, #532]	@ (8012ee4 <_strtod_l+0x564>)
 8012cd0:	3b01      	subs	r3, #1
 8012cd2:	a811      	add	r0, sp, #68	@ 0x44
 8012cd4:	9311      	str	r3, [sp, #68]	@ 0x44
 8012cd6:	f001 fb09 	bl	80142ec <__match>
 8012cda:	b910      	cbnz	r0, 8012ce2 <_strtod_l+0x362>
 8012cdc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012cde:	3301      	adds	r3, #1
 8012ce0:	9311      	str	r3, [sp, #68]	@ 0x44
 8012ce2:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8012ef8 <_strtod_l+0x578>
 8012ce6:	f04f 0a00 	mov.w	sl, #0
 8012cea:	e684      	b.n	80129f6 <_strtod_l+0x76>
 8012cec:	487e      	ldr	r0, [pc, #504]	@ (8012ee8 <_strtod_l+0x568>)
 8012cee:	f001 f857 	bl	8013da0 <nan>
 8012cf2:	ec5b ab10 	vmov	sl, fp, d0
 8012cf6:	e67e      	b.n	80129f6 <_strtod_l+0x76>
 8012cf8:	ee07 9a90 	vmov	s15, r9
 8012cfc:	1be2      	subs	r2, r4, r7
 8012cfe:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012d02:	2d00      	cmp	r5, #0
 8012d04:	bf08      	it	eq
 8012d06:	461d      	moveq	r5, r3
 8012d08:	2b10      	cmp	r3, #16
 8012d0a:	9209      	str	r2, [sp, #36]	@ 0x24
 8012d0c:	461a      	mov	r2, r3
 8012d0e:	bfa8      	it	ge
 8012d10:	2210      	movge	r2, #16
 8012d12:	2b09      	cmp	r3, #9
 8012d14:	ec5b ab17 	vmov	sl, fp, d7
 8012d18:	dc15      	bgt.n	8012d46 <_strtod_l+0x3c6>
 8012d1a:	1be1      	subs	r1, r4, r7
 8012d1c:	2900      	cmp	r1, #0
 8012d1e:	f43f ae6a 	beq.w	80129f6 <_strtod_l+0x76>
 8012d22:	eba4 0107 	sub.w	r1, r4, r7
 8012d26:	dd72      	ble.n	8012e0e <_strtod_l+0x48e>
 8012d28:	2916      	cmp	r1, #22
 8012d2a:	dc59      	bgt.n	8012de0 <_strtod_l+0x460>
 8012d2c:	4b6f      	ldr	r3, [pc, #444]	@ (8012eec <_strtod_l+0x56c>)
 8012d2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012d30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012d34:	ed93 7b00 	vldr	d7, [r3]
 8012d38:	ec4b ab16 	vmov	d6, sl, fp
 8012d3c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012d40:	ec5b ab17 	vmov	sl, fp, d7
 8012d44:	e657      	b.n	80129f6 <_strtod_l+0x76>
 8012d46:	4969      	ldr	r1, [pc, #420]	@ (8012eec <_strtod_l+0x56c>)
 8012d48:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8012d4c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8012d50:	ee06 6a90 	vmov	s13, r6
 8012d54:	2b0f      	cmp	r3, #15
 8012d56:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8012d5a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8012d5e:	ec5b ab16 	vmov	sl, fp, d6
 8012d62:	ddda      	ble.n	8012d1a <_strtod_l+0x39a>
 8012d64:	1a9a      	subs	r2, r3, r2
 8012d66:	1be1      	subs	r1, r4, r7
 8012d68:	440a      	add	r2, r1
 8012d6a:	2a00      	cmp	r2, #0
 8012d6c:	f340 8094 	ble.w	8012e98 <_strtod_l+0x518>
 8012d70:	f012 000f 	ands.w	r0, r2, #15
 8012d74:	d00a      	beq.n	8012d8c <_strtod_l+0x40c>
 8012d76:	495d      	ldr	r1, [pc, #372]	@ (8012eec <_strtod_l+0x56c>)
 8012d78:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8012d7c:	ed91 7b00 	vldr	d7, [r1]
 8012d80:	ec4b ab16 	vmov	d6, sl, fp
 8012d84:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012d88:	ec5b ab17 	vmov	sl, fp, d7
 8012d8c:	f032 020f 	bics.w	r2, r2, #15
 8012d90:	d073      	beq.n	8012e7a <_strtod_l+0x4fa>
 8012d92:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8012d96:	dd47      	ble.n	8012e28 <_strtod_l+0x4a8>
 8012d98:	2400      	movs	r4, #0
 8012d9a:	4625      	mov	r5, r4
 8012d9c:	9407      	str	r4, [sp, #28]
 8012d9e:	4626      	mov	r6, r4
 8012da0:	9a05      	ldr	r2, [sp, #20]
 8012da2:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8012ef8 <_strtod_l+0x578>
 8012da6:	2322      	movs	r3, #34	@ 0x22
 8012da8:	6013      	str	r3, [r2, #0]
 8012daa:	f04f 0a00 	mov.w	sl, #0
 8012dae:	9b07      	ldr	r3, [sp, #28]
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	f43f ae20 	beq.w	80129f6 <_strtod_l+0x76>
 8012db6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8012db8:	9805      	ldr	r0, [sp, #20]
 8012dba:	f7ff f955 	bl	8012068 <_Bfree>
 8012dbe:	9805      	ldr	r0, [sp, #20]
 8012dc0:	4631      	mov	r1, r6
 8012dc2:	f7ff f951 	bl	8012068 <_Bfree>
 8012dc6:	9805      	ldr	r0, [sp, #20]
 8012dc8:	4629      	mov	r1, r5
 8012dca:	f7ff f94d 	bl	8012068 <_Bfree>
 8012dce:	9907      	ldr	r1, [sp, #28]
 8012dd0:	9805      	ldr	r0, [sp, #20]
 8012dd2:	f7ff f949 	bl	8012068 <_Bfree>
 8012dd6:	9805      	ldr	r0, [sp, #20]
 8012dd8:	4621      	mov	r1, r4
 8012dda:	f7ff f945 	bl	8012068 <_Bfree>
 8012dde:	e60a      	b.n	80129f6 <_strtod_l+0x76>
 8012de0:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8012de4:	1be0      	subs	r0, r4, r7
 8012de6:	4281      	cmp	r1, r0
 8012de8:	dbbc      	blt.n	8012d64 <_strtod_l+0x3e4>
 8012dea:	4a40      	ldr	r2, [pc, #256]	@ (8012eec <_strtod_l+0x56c>)
 8012dec:	f1c3 030f 	rsb	r3, r3, #15
 8012df0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8012df4:	ed91 7b00 	vldr	d7, [r1]
 8012df8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012dfa:	ec4b ab16 	vmov	d6, sl, fp
 8012dfe:	1acb      	subs	r3, r1, r3
 8012e00:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8012e04:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012e08:	ed92 6b00 	vldr	d6, [r2]
 8012e0c:	e796      	b.n	8012d3c <_strtod_l+0x3bc>
 8012e0e:	3116      	adds	r1, #22
 8012e10:	dba8      	blt.n	8012d64 <_strtod_l+0x3e4>
 8012e12:	4b36      	ldr	r3, [pc, #216]	@ (8012eec <_strtod_l+0x56c>)
 8012e14:	1b3c      	subs	r4, r7, r4
 8012e16:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8012e1a:	ed94 7b00 	vldr	d7, [r4]
 8012e1e:	ec4b ab16 	vmov	d6, sl, fp
 8012e22:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8012e26:	e78b      	b.n	8012d40 <_strtod_l+0x3c0>
 8012e28:	2000      	movs	r0, #0
 8012e2a:	ec4b ab17 	vmov	d7, sl, fp
 8012e2e:	4e30      	ldr	r6, [pc, #192]	@ (8012ef0 <_strtod_l+0x570>)
 8012e30:	1112      	asrs	r2, r2, #4
 8012e32:	4601      	mov	r1, r0
 8012e34:	2a01      	cmp	r2, #1
 8012e36:	dc23      	bgt.n	8012e80 <_strtod_l+0x500>
 8012e38:	b108      	cbz	r0, 8012e3e <_strtod_l+0x4be>
 8012e3a:	ec5b ab17 	vmov	sl, fp, d7
 8012e3e:	4a2c      	ldr	r2, [pc, #176]	@ (8012ef0 <_strtod_l+0x570>)
 8012e40:	482c      	ldr	r0, [pc, #176]	@ (8012ef4 <_strtod_l+0x574>)
 8012e42:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8012e46:	ed92 7b00 	vldr	d7, [r2]
 8012e4a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8012e4e:	ec4b ab16 	vmov	d6, sl, fp
 8012e52:	4a29      	ldr	r2, [pc, #164]	@ (8012ef8 <_strtod_l+0x578>)
 8012e54:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012e58:	ee17 1a90 	vmov	r1, s15
 8012e5c:	400a      	ands	r2, r1
 8012e5e:	4282      	cmp	r2, r0
 8012e60:	ec5b ab17 	vmov	sl, fp, d7
 8012e64:	d898      	bhi.n	8012d98 <_strtod_l+0x418>
 8012e66:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8012e6a:	4282      	cmp	r2, r0
 8012e6c:	bf86      	itte	hi
 8012e6e:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8012efc <_strtod_l+0x57c>
 8012e72:	f04f 3aff 	movhi.w	sl, #4294967295
 8012e76:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8012e7a:	2200      	movs	r2, #0
 8012e7c:	9206      	str	r2, [sp, #24]
 8012e7e:	e076      	b.n	8012f6e <_strtod_l+0x5ee>
 8012e80:	f012 0f01 	tst.w	r2, #1
 8012e84:	d004      	beq.n	8012e90 <_strtod_l+0x510>
 8012e86:	ed96 6b00 	vldr	d6, [r6]
 8012e8a:	2001      	movs	r0, #1
 8012e8c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012e90:	3101      	adds	r1, #1
 8012e92:	1052      	asrs	r2, r2, #1
 8012e94:	3608      	adds	r6, #8
 8012e96:	e7cd      	b.n	8012e34 <_strtod_l+0x4b4>
 8012e98:	d0ef      	beq.n	8012e7a <_strtod_l+0x4fa>
 8012e9a:	4252      	negs	r2, r2
 8012e9c:	f012 000f 	ands.w	r0, r2, #15
 8012ea0:	d00a      	beq.n	8012eb8 <_strtod_l+0x538>
 8012ea2:	4912      	ldr	r1, [pc, #72]	@ (8012eec <_strtod_l+0x56c>)
 8012ea4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8012ea8:	ed91 7b00 	vldr	d7, [r1]
 8012eac:	ec4b ab16 	vmov	d6, sl, fp
 8012eb0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8012eb4:	ec5b ab17 	vmov	sl, fp, d7
 8012eb8:	1112      	asrs	r2, r2, #4
 8012eba:	d0de      	beq.n	8012e7a <_strtod_l+0x4fa>
 8012ebc:	2a1f      	cmp	r2, #31
 8012ebe:	dd1f      	ble.n	8012f00 <_strtod_l+0x580>
 8012ec0:	2400      	movs	r4, #0
 8012ec2:	4625      	mov	r5, r4
 8012ec4:	9407      	str	r4, [sp, #28]
 8012ec6:	4626      	mov	r6, r4
 8012ec8:	9a05      	ldr	r2, [sp, #20]
 8012eca:	2322      	movs	r3, #34	@ 0x22
 8012ecc:	f04f 0a00 	mov.w	sl, #0
 8012ed0:	f04f 0b00 	mov.w	fp, #0
 8012ed4:	6013      	str	r3, [r2, #0]
 8012ed6:	e76a      	b.n	8012dae <_strtod_l+0x42e>
 8012ed8:	08014bdd 	.word	0x08014bdd
 8012edc:	08014df4 	.word	0x08014df4
 8012ee0:	08014bd5 	.word	0x08014bd5
 8012ee4:	08014c0c 	.word	0x08014c0c
 8012ee8:	08014bcf 	.word	0x08014bcf
 8012eec:	08014d28 	.word	0x08014d28
 8012ef0:	08014d00 	.word	0x08014d00
 8012ef4:	7ca00000 	.word	0x7ca00000
 8012ef8:	7ff00000 	.word	0x7ff00000
 8012efc:	7fefffff 	.word	0x7fefffff
 8012f00:	f012 0110 	ands.w	r1, r2, #16
 8012f04:	bf18      	it	ne
 8012f06:	216a      	movne	r1, #106	@ 0x6a
 8012f08:	9106      	str	r1, [sp, #24]
 8012f0a:	ec4b ab17 	vmov	d7, sl, fp
 8012f0e:	49b0      	ldr	r1, [pc, #704]	@ (80131d0 <_strtod_l+0x850>)
 8012f10:	2000      	movs	r0, #0
 8012f12:	07d6      	lsls	r6, r2, #31
 8012f14:	d504      	bpl.n	8012f20 <_strtod_l+0x5a0>
 8012f16:	ed91 6b00 	vldr	d6, [r1]
 8012f1a:	2001      	movs	r0, #1
 8012f1c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012f20:	1052      	asrs	r2, r2, #1
 8012f22:	f101 0108 	add.w	r1, r1, #8
 8012f26:	d1f4      	bne.n	8012f12 <_strtod_l+0x592>
 8012f28:	b108      	cbz	r0, 8012f2e <_strtod_l+0x5ae>
 8012f2a:	ec5b ab17 	vmov	sl, fp, d7
 8012f2e:	9a06      	ldr	r2, [sp, #24]
 8012f30:	b1b2      	cbz	r2, 8012f60 <_strtod_l+0x5e0>
 8012f32:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8012f36:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8012f3a:	2a00      	cmp	r2, #0
 8012f3c:	4658      	mov	r0, fp
 8012f3e:	dd0f      	ble.n	8012f60 <_strtod_l+0x5e0>
 8012f40:	2a1f      	cmp	r2, #31
 8012f42:	dd55      	ble.n	8012ff0 <_strtod_l+0x670>
 8012f44:	2a34      	cmp	r2, #52	@ 0x34
 8012f46:	bfde      	ittt	le
 8012f48:	f04f 32ff 	movle.w	r2, #4294967295
 8012f4c:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8012f50:	408a      	lslle	r2, r1
 8012f52:	f04f 0a00 	mov.w	sl, #0
 8012f56:	bfcc      	ite	gt
 8012f58:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8012f5c:	ea02 0b00 	andle.w	fp, r2, r0
 8012f60:	ec4b ab17 	vmov	d7, sl, fp
 8012f64:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f6c:	d0a8      	beq.n	8012ec0 <_strtod_l+0x540>
 8012f6e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012f70:	9805      	ldr	r0, [sp, #20]
 8012f72:	f8cd 9000 	str.w	r9, [sp]
 8012f76:	462a      	mov	r2, r5
 8012f78:	f7ff f8de 	bl	8012138 <__s2b>
 8012f7c:	9007      	str	r0, [sp, #28]
 8012f7e:	2800      	cmp	r0, #0
 8012f80:	f43f af0a 	beq.w	8012d98 <_strtod_l+0x418>
 8012f84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012f86:	1b3f      	subs	r7, r7, r4
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	bfb4      	ite	lt
 8012f8c:	463b      	movlt	r3, r7
 8012f8e:	2300      	movge	r3, #0
 8012f90:	930a      	str	r3, [sp, #40]	@ 0x28
 8012f92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012f94:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 80131c0 <_strtod_l+0x840>
 8012f98:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012f9c:	2400      	movs	r4, #0
 8012f9e:	930d      	str	r3, [sp, #52]	@ 0x34
 8012fa0:	4625      	mov	r5, r4
 8012fa2:	9b07      	ldr	r3, [sp, #28]
 8012fa4:	9805      	ldr	r0, [sp, #20]
 8012fa6:	6859      	ldr	r1, [r3, #4]
 8012fa8:	f7ff f81e 	bl	8011fe8 <_Balloc>
 8012fac:	4606      	mov	r6, r0
 8012fae:	2800      	cmp	r0, #0
 8012fb0:	f43f aef6 	beq.w	8012da0 <_strtod_l+0x420>
 8012fb4:	9b07      	ldr	r3, [sp, #28]
 8012fb6:	691a      	ldr	r2, [r3, #16]
 8012fb8:	ec4b ab19 	vmov	d9, sl, fp
 8012fbc:	3202      	adds	r2, #2
 8012fbe:	f103 010c 	add.w	r1, r3, #12
 8012fc2:	0092      	lsls	r2, r2, #2
 8012fc4:	300c      	adds	r0, #12
 8012fc6:	f7fe f9d0 	bl	801136a <memcpy>
 8012fca:	eeb0 0b49 	vmov.f64	d0, d9
 8012fce:	9805      	ldr	r0, [sp, #20]
 8012fd0:	aa14      	add	r2, sp, #80	@ 0x50
 8012fd2:	a913      	add	r1, sp, #76	@ 0x4c
 8012fd4:	f7ff fbec 	bl	80127b0 <__d2b>
 8012fd8:	9012      	str	r0, [sp, #72]	@ 0x48
 8012fda:	2800      	cmp	r0, #0
 8012fdc:	f43f aee0 	beq.w	8012da0 <_strtod_l+0x420>
 8012fe0:	9805      	ldr	r0, [sp, #20]
 8012fe2:	2101      	movs	r1, #1
 8012fe4:	f7ff f93e 	bl	8012264 <__i2b>
 8012fe8:	4605      	mov	r5, r0
 8012fea:	b940      	cbnz	r0, 8012ffe <_strtod_l+0x67e>
 8012fec:	2500      	movs	r5, #0
 8012fee:	e6d7      	b.n	8012da0 <_strtod_l+0x420>
 8012ff0:	f04f 31ff 	mov.w	r1, #4294967295
 8012ff4:	fa01 f202 	lsl.w	r2, r1, r2
 8012ff8:	ea02 0a0a 	and.w	sl, r2, sl
 8012ffc:	e7b0      	b.n	8012f60 <_strtod_l+0x5e0>
 8012ffe:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8013000:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8013002:	2f00      	cmp	r7, #0
 8013004:	bfab      	itete	ge
 8013006:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8013008:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 801300a:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 801300e:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8013012:	bfac      	ite	ge
 8013014:	eb07 0903 	addge.w	r9, r7, r3
 8013018:	eba3 0807 	sublt.w	r8, r3, r7
 801301c:	9b06      	ldr	r3, [sp, #24]
 801301e:	1aff      	subs	r7, r7, r3
 8013020:	4417      	add	r7, r2
 8013022:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8013026:	4a6b      	ldr	r2, [pc, #428]	@ (80131d4 <_strtod_l+0x854>)
 8013028:	3f01      	subs	r7, #1
 801302a:	4297      	cmp	r7, r2
 801302c:	da51      	bge.n	80130d2 <_strtod_l+0x752>
 801302e:	1bd1      	subs	r1, r2, r7
 8013030:	291f      	cmp	r1, #31
 8013032:	eba3 0301 	sub.w	r3, r3, r1
 8013036:	f04f 0201 	mov.w	r2, #1
 801303a:	dc3e      	bgt.n	80130ba <_strtod_l+0x73a>
 801303c:	408a      	lsls	r2, r1
 801303e:	920c      	str	r2, [sp, #48]	@ 0x30
 8013040:	2200      	movs	r2, #0
 8013042:	920b      	str	r2, [sp, #44]	@ 0x2c
 8013044:	eb09 0703 	add.w	r7, r9, r3
 8013048:	4498      	add	r8, r3
 801304a:	9b06      	ldr	r3, [sp, #24]
 801304c:	45b9      	cmp	r9, r7
 801304e:	4498      	add	r8, r3
 8013050:	464b      	mov	r3, r9
 8013052:	bfa8      	it	ge
 8013054:	463b      	movge	r3, r7
 8013056:	4543      	cmp	r3, r8
 8013058:	bfa8      	it	ge
 801305a:	4643      	movge	r3, r8
 801305c:	2b00      	cmp	r3, #0
 801305e:	bfc2      	ittt	gt
 8013060:	1aff      	subgt	r7, r7, r3
 8013062:	eba8 0803 	subgt.w	r8, r8, r3
 8013066:	eba9 0903 	subgt.w	r9, r9, r3
 801306a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801306c:	2b00      	cmp	r3, #0
 801306e:	dd16      	ble.n	801309e <_strtod_l+0x71e>
 8013070:	4629      	mov	r1, r5
 8013072:	9805      	ldr	r0, [sp, #20]
 8013074:	461a      	mov	r2, r3
 8013076:	f7ff f9b5 	bl	80123e4 <__pow5mult>
 801307a:	4605      	mov	r5, r0
 801307c:	2800      	cmp	r0, #0
 801307e:	d0b5      	beq.n	8012fec <_strtod_l+0x66c>
 8013080:	4601      	mov	r1, r0
 8013082:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8013084:	9805      	ldr	r0, [sp, #20]
 8013086:	f7ff f903 	bl	8012290 <__multiply>
 801308a:	900f      	str	r0, [sp, #60]	@ 0x3c
 801308c:	2800      	cmp	r0, #0
 801308e:	f43f ae87 	beq.w	8012da0 <_strtod_l+0x420>
 8013092:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013094:	9805      	ldr	r0, [sp, #20]
 8013096:	f7fe ffe7 	bl	8012068 <_Bfree>
 801309a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801309c:	9312      	str	r3, [sp, #72]	@ 0x48
 801309e:	2f00      	cmp	r7, #0
 80130a0:	dc1b      	bgt.n	80130da <_strtod_l+0x75a>
 80130a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	dd21      	ble.n	80130ec <_strtod_l+0x76c>
 80130a8:	4631      	mov	r1, r6
 80130aa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80130ac:	9805      	ldr	r0, [sp, #20]
 80130ae:	f7ff f999 	bl	80123e4 <__pow5mult>
 80130b2:	4606      	mov	r6, r0
 80130b4:	b9d0      	cbnz	r0, 80130ec <_strtod_l+0x76c>
 80130b6:	2600      	movs	r6, #0
 80130b8:	e672      	b.n	8012da0 <_strtod_l+0x420>
 80130ba:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 80130be:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 80130c2:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 80130c6:	37e2      	adds	r7, #226	@ 0xe2
 80130c8:	fa02 f107 	lsl.w	r1, r2, r7
 80130cc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80130ce:	920c      	str	r2, [sp, #48]	@ 0x30
 80130d0:	e7b8      	b.n	8013044 <_strtod_l+0x6c4>
 80130d2:	2200      	movs	r2, #0
 80130d4:	920b      	str	r2, [sp, #44]	@ 0x2c
 80130d6:	2201      	movs	r2, #1
 80130d8:	e7f9      	b.n	80130ce <_strtod_l+0x74e>
 80130da:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80130dc:	9805      	ldr	r0, [sp, #20]
 80130de:	463a      	mov	r2, r7
 80130e0:	f7ff f9da 	bl	8012498 <__lshift>
 80130e4:	9012      	str	r0, [sp, #72]	@ 0x48
 80130e6:	2800      	cmp	r0, #0
 80130e8:	d1db      	bne.n	80130a2 <_strtod_l+0x722>
 80130ea:	e659      	b.n	8012da0 <_strtod_l+0x420>
 80130ec:	f1b8 0f00 	cmp.w	r8, #0
 80130f0:	dd07      	ble.n	8013102 <_strtod_l+0x782>
 80130f2:	4631      	mov	r1, r6
 80130f4:	9805      	ldr	r0, [sp, #20]
 80130f6:	4642      	mov	r2, r8
 80130f8:	f7ff f9ce 	bl	8012498 <__lshift>
 80130fc:	4606      	mov	r6, r0
 80130fe:	2800      	cmp	r0, #0
 8013100:	d0d9      	beq.n	80130b6 <_strtod_l+0x736>
 8013102:	f1b9 0f00 	cmp.w	r9, #0
 8013106:	dd08      	ble.n	801311a <_strtod_l+0x79a>
 8013108:	4629      	mov	r1, r5
 801310a:	9805      	ldr	r0, [sp, #20]
 801310c:	464a      	mov	r2, r9
 801310e:	f7ff f9c3 	bl	8012498 <__lshift>
 8013112:	4605      	mov	r5, r0
 8013114:	2800      	cmp	r0, #0
 8013116:	f43f ae43 	beq.w	8012da0 <_strtod_l+0x420>
 801311a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801311c:	9805      	ldr	r0, [sp, #20]
 801311e:	4632      	mov	r2, r6
 8013120:	f7ff fa42 	bl	80125a8 <__mdiff>
 8013124:	4604      	mov	r4, r0
 8013126:	2800      	cmp	r0, #0
 8013128:	f43f ae3a 	beq.w	8012da0 <_strtod_l+0x420>
 801312c:	2300      	movs	r3, #0
 801312e:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8013132:	60c3      	str	r3, [r0, #12]
 8013134:	4629      	mov	r1, r5
 8013136:	f7ff fa1b 	bl	8012570 <__mcmp>
 801313a:	2800      	cmp	r0, #0
 801313c:	da4e      	bge.n	80131dc <_strtod_l+0x85c>
 801313e:	ea58 080a 	orrs.w	r8, r8, sl
 8013142:	d174      	bne.n	801322e <_strtod_l+0x8ae>
 8013144:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013148:	2b00      	cmp	r3, #0
 801314a:	d170      	bne.n	801322e <_strtod_l+0x8ae>
 801314c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013150:	0d1b      	lsrs	r3, r3, #20
 8013152:	051b      	lsls	r3, r3, #20
 8013154:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8013158:	d969      	bls.n	801322e <_strtod_l+0x8ae>
 801315a:	6963      	ldr	r3, [r4, #20]
 801315c:	b913      	cbnz	r3, 8013164 <_strtod_l+0x7e4>
 801315e:	6923      	ldr	r3, [r4, #16]
 8013160:	2b01      	cmp	r3, #1
 8013162:	dd64      	ble.n	801322e <_strtod_l+0x8ae>
 8013164:	4621      	mov	r1, r4
 8013166:	2201      	movs	r2, #1
 8013168:	9805      	ldr	r0, [sp, #20]
 801316a:	f7ff f995 	bl	8012498 <__lshift>
 801316e:	4629      	mov	r1, r5
 8013170:	4604      	mov	r4, r0
 8013172:	f7ff f9fd 	bl	8012570 <__mcmp>
 8013176:	2800      	cmp	r0, #0
 8013178:	dd59      	ble.n	801322e <_strtod_l+0x8ae>
 801317a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801317e:	9a06      	ldr	r2, [sp, #24]
 8013180:	0d1b      	lsrs	r3, r3, #20
 8013182:	051b      	lsls	r3, r3, #20
 8013184:	2a00      	cmp	r2, #0
 8013186:	d070      	beq.n	801326a <_strtod_l+0x8ea>
 8013188:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801318c:	d86d      	bhi.n	801326a <_strtod_l+0x8ea>
 801318e:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8013192:	f67f ae99 	bls.w	8012ec8 <_strtod_l+0x548>
 8013196:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 80131c8 <_strtod_l+0x848>
 801319a:	ec4b ab16 	vmov	d6, sl, fp
 801319e:	4b0e      	ldr	r3, [pc, #56]	@ (80131d8 <_strtod_l+0x858>)
 80131a0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80131a4:	ee17 2a90 	vmov	r2, s15
 80131a8:	4013      	ands	r3, r2
 80131aa:	ec5b ab17 	vmov	sl, fp, d7
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	f47f ae01 	bne.w	8012db6 <_strtod_l+0x436>
 80131b4:	9a05      	ldr	r2, [sp, #20]
 80131b6:	2322      	movs	r3, #34	@ 0x22
 80131b8:	6013      	str	r3, [r2, #0]
 80131ba:	e5fc      	b.n	8012db6 <_strtod_l+0x436>
 80131bc:	f3af 8000 	nop.w
 80131c0:	ffc00000 	.word	0xffc00000
 80131c4:	41dfffff 	.word	0x41dfffff
 80131c8:	00000000 	.word	0x00000000
 80131cc:	39500000 	.word	0x39500000
 80131d0:	08014e20 	.word	0x08014e20
 80131d4:	fffffc02 	.word	0xfffffc02
 80131d8:	7ff00000 	.word	0x7ff00000
 80131dc:	46d9      	mov	r9, fp
 80131de:	d15d      	bne.n	801329c <_strtod_l+0x91c>
 80131e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80131e4:	f1b8 0f00 	cmp.w	r8, #0
 80131e8:	d02a      	beq.n	8013240 <_strtod_l+0x8c0>
 80131ea:	4aab      	ldr	r2, [pc, #684]	@ (8013498 <_strtod_l+0xb18>)
 80131ec:	4293      	cmp	r3, r2
 80131ee:	d12a      	bne.n	8013246 <_strtod_l+0x8c6>
 80131f0:	9b06      	ldr	r3, [sp, #24]
 80131f2:	4652      	mov	r2, sl
 80131f4:	b1fb      	cbz	r3, 8013236 <_strtod_l+0x8b6>
 80131f6:	4ba9      	ldr	r3, [pc, #676]	@ (801349c <_strtod_l+0xb1c>)
 80131f8:	ea0b 0303 	and.w	r3, fp, r3
 80131fc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8013200:	f04f 31ff 	mov.w	r1, #4294967295
 8013204:	d81a      	bhi.n	801323c <_strtod_l+0x8bc>
 8013206:	0d1b      	lsrs	r3, r3, #20
 8013208:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801320c:	fa01 f303 	lsl.w	r3, r1, r3
 8013210:	429a      	cmp	r2, r3
 8013212:	d118      	bne.n	8013246 <_strtod_l+0x8c6>
 8013214:	4ba2      	ldr	r3, [pc, #648]	@ (80134a0 <_strtod_l+0xb20>)
 8013216:	4599      	cmp	r9, r3
 8013218:	d102      	bne.n	8013220 <_strtod_l+0x8a0>
 801321a:	3201      	adds	r2, #1
 801321c:	f43f adc0 	beq.w	8012da0 <_strtod_l+0x420>
 8013220:	4b9e      	ldr	r3, [pc, #632]	@ (801349c <_strtod_l+0xb1c>)
 8013222:	ea09 0303 	and.w	r3, r9, r3
 8013226:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 801322a:	f04f 0a00 	mov.w	sl, #0
 801322e:	9b06      	ldr	r3, [sp, #24]
 8013230:	2b00      	cmp	r3, #0
 8013232:	d1b0      	bne.n	8013196 <_strtod_l+0x816>
 8013234:	e5bf      	b.n	8012db6 <_strtod_l+0x436>
 8013236:	f04f 33ff 	mov.w	r3, #4294967295
 801323a:	e7e9      	b.n	8013210 <_strtod_l+0x890>
 801323c:	460b      	mov	r3, r1
 801323e:	e7e7      	b.n	8013210 <_strtod_l+0x890>
 8013240:	ea53 030a 	orrs.w	r3, r3, sl
 8013244:	d099      	beq.n	801317a <_strtod_l+0x7fa>
 8013246:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013248:	b1c3      	cbz	r3, 801327c <_strtod_l+0x8fc>
 801324a:	ea13 0f09 	tst.w	r3, r9
 801324e:	d0ee      	beq.n	801322e <_strtod_l+0x8ae>
 8013250:	9a06      	ldr	r2, [sp, #24]
 8013252:	4650      	mov	r0, sl
 8013254:	4659      	mov	r1, fp
 8013256:	f1b8 0f00 	cmp.w	r8, #0
 801325a:	d013      	beq.n	8013284 <_strtod_l+0x904>
 801325c:	f7ff fb73 	bl	8012946 <sulp>
 8013260:	ee39 7b00 	vadd.f64	d7, d9, d0
 8013264:	ec5b ab17 	vmov	sl, fp, d7
 8013268:	e7e1      	b.n	801322e <_strtod_l+0x8ae>
 801326a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801326e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8013272:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8013276:	f04f 3aff 	mov.w	sl, #4294967295
 801327a:	e7d8      	b.n	801322e <_strtod_l+0x8ae>
 801327c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801327e:	ea13 0f0a 	tst.w	r3, sl
 8013282:	e7e4      	b.n	801324e <_strtod_l+0x8ce>
 8013284:	f7ff fb5f 	bl	8012946 <sulp>
 8013288:	ee39 0b40 	vsub.f64	d0, d9, d0
 801328c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8013290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013294:	ec5b ab10 	vmov	sl, fp, d0
 8013298:	d1c9      	bne.n	801322e <_strtod_l+0x8ae>
 801329a:	e615      	b.n	8012ec8 <_strtod_l+0x548>
 801329c:	4629      	mov	r1, r5
 801329e:	4620      	mov	r0, r4
 80132a0:	f7ff fade 	bl	8012860 <__ratio>
 80132a4:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 80132a8:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80132ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132b0:	d85d      	bhi.n	801336e <_strtod_l+0x9ee>
 80132b2:	f1b8 0f00 	cmp.w	r8, #0
 80132b6:	d164      	bne.n	8013382 <_strtod_l+0xa02>
 80132b8:	f1ba 0f00 	cmp.w	sl, #0
 80132bc:	d14b      	bne.n	8013356 <_strtod_l+0x9d6>
 80132be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80132c2:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d160      	bne.n	801338c <_strtod_l+0xa0c>
 80132ca:	eeb4 0bc8 	vcmpe.f64	d0, d8
 80132ce:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 80132d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132d6:	d401      	bmi.n	80132dc <_strtod_l+0x95c>
 80132d8:	ee20 8b08 	vmul.f64	d8, d0, d8
 80132dc:	eeb1 ab48 	vneg.f64	d10, d8
 80132e0:	486e      	ldr	r0, [pc, #440]	@ (801349c <_strtod_l+0xb1c>)
 80132e2:	4970      	ldr	r1, [pc, #448]	@ (80134a4 <_strtod_l+0xb24>)
 80132e4:	ea09 0700 	and.w	r7, r9, r0
 80132e8:	428f      	cmp	r7, r1
 80132ea:	ec53 2b1a 	vmov	r2, r3, d10
 80132ee:	d17d      	bne.n	80133ec <_strtod_l+0xa6c>
 80132f0:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 80132f4:	ec4b ab1c 	vmov	d12, sl, fp
 80132f8:	eeb0 0b4c 	vmov.f64	d0, d12
 80132fc:	f7ff f9e8 	bl	80126d0 <__ulp>
 8013300:	4866      	ldr	r0, [pc, #408]	@ (801349c <_strtod_l+0xb1c>)
 8013302:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8013306:	ee1c 3a90 	vmov	r3, s25
 801330a:	4a67      	ldr	r2, [pc, #412]	@ (80134a8 <_strtod_l+0xb28>)
 801330c:	ea03 0100 	and.w	r1, r3, r0
 8013310:	4291      	cmp	r1, r2
 8013312:	ec5b ab1c 	vmov	sl, fp, d12
 8013316:	d93c      	bls.n	8013392 <_strtod_l+0xa12>
 8013318:	ee19 2a90 	vmov	r2, s19
 801331c:	4b60      	ldr	r3, [pc, #384]	@ (80134a0 <_strtod_l+0xb20>)
 801331e:	429a      	cmp	r2, r3
 8013320:	d104      	bne.n	801332c <_strtod_l+0x9ac>
 8013322:	ee19 3a10 	vmov	r3, s18
 8013326:	3301      	adds	r3, #1
 8013328:	f43f ad3a 	beq.w	8012da0 <_strtod_l+0x420>
 801332c:	f8df b170 	ldr.w	fp, [pc, #368]	@ 80134a0 <_strtod_l+0xb20>
 8013330:	f04f 3aff 	mov.w	sl, #4294967295
 8013334:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013336:	9805      	ldr	r0, [sp, #20]
 8013338:	f7fe fe96 	bl	8012068 <_Bfree>
 801333c:	9805      	ldr	r0, [sp, #20]
 801333e:	4631      	mov	r1, r6
 8013340:	f7fe fe92 	bl	8012068 <_Bfree>
 8013344:	9805      	ldr	r0, [sp, #20]
 8013346:	4629      	mov	r1, r5
 8013348:	f7fe fe8e 	bl	8012068 <_Bfree>
 801334c:	9805      	ldr	r0, [sp, #20]
 801334e:	4621      	mov	r1, r4
 8013350:	f7fe fe8a 	bl	8012068 <_Bfree>
 8013354:	e625      	b.n	8012fa2 <_strtod_l+0x622>
 8013356:	f1ba 0f01 	cmp.w	sl, #1
 801335a:	d103      	bne.n	8013364 <_strtod_l+0x9e4>
 801335c:	f1bb 0f00 	cmp.w	fp, #0
 8013360:	f43f adb2 	beq.w	8012ec8 <_strtod_l+0x548>
 8013364:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8013368:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 801336c:	e7b8      	b.n	80132e0 <_strtod_l+0x960>
 801336e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8013372:	ee20 8b08 	vmul.f64	d8, d0, d8
 8013376:	f1b8 0f00 	cmp.w	r8, #0
 801337a:	d0af      	beq.n	80132dc <_strtod_l+0x95c>
 801337c:	eeb0 ab48 	vmov.f64	d10, d8
 8013380:	e7ae      	b.n	80132e0 <_strtod_l+0x960>
 8013382:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8013386:	eeb0 8b4a 	vmov.f64	d8, d10
 801338a:	e7a9      	b.n	80132e0 <_strtod_l+0x960>
 801338c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8013390:	e7a6      	b.n	80132e0 <_strtod_l+0x960>
 8013392:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8013396:	9b06      	ldr	r3, [sp, #24]
 8013398:	46d9      	mov	r9, fp
 801339a:	2b00      	cmp	r3, #0
 801339c:	d1ca      	bne.n	8013334 <_strtod_l+0x9b4>
 801339e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80133a2:	0d1b      	lsrs	r3, r3, #20
 80133a4:	051b      	lsls	r3, r3, #20
 80133a6:	429f      	cmp	r7, r3
 80133a8:	d1c4      	bne.n	8013334 <_strtod_l+0x9b4>
 80133aa:	ec51 0b18 	vmov	r0, r1, d8
 80133ae:	f7ed f9cb 	bl	8000748 <__aeabi_d2lz>
 80133b2:	f7ed f983 	bl	80006bc <__aeabi_l2d>
 80133b6:	f3cb 0913 	ubfx	r9, fp, #0, #20
 80133ba:	ec41 0b17 	vmov	d7, r0, r1
 80133be:	ea49 090a 	orr.w	r9, r9, sl
 80133c2:	ea59 0908 	orrs.w	r9, r9, r8
 80133c6:	ee38 8b47 	vsub.f64	d8, d8, d7
 80133ca:	d03c      	beq.n	8013446 <_strtod_l+0xac6>
 80133cc:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8013480 <_strtod_l+0xb00>
 80133d0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80133d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133d8:	f53f aced 	bmi.w	8012db6 <_strtod_l+0x436>
 80133dc:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8013488 <_strtod_l+0xb08>
 80133e0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80133e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133e8:	dda4      	ble.n	8013334 <_strtod_l+0x9b4>
 80133ea:	e4e4      	b.n	8012db6 <_strtod_l+0x436>
 80133ec:	9906      	ldr	r1, [sp, #24]
 80133ee:	b1e1      	cbz	r1, 801342a <_strtod_l+0xaaa>
 80133f0:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 80133f4:	d819      	bhi.n	801342a <_strtod_l+0xaaa>
 80133f6:	eeb4 8bcb 	vcmpe.f64	d8, d11
 80133fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133fe:	d811      	bhi.n	8013424 <_strtod_l+0xaa4>
 8013400:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8013404:	ee18 3a10 	vmov	r3, s16
 8013408:	2b01      	cmp	r3, #1
 801340a:	bf38      	it	cc
 801340c:	2301      	movcc	r3, #1
 801340e:	ee08 3a10 	vmov	s16, r3
 8013412:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8013416:	f1b8 0f00 	cmp.w	r8, #0
 801341a:	d111      	bne.n	8013440 <_strtod_l+0xac0>
 801341c:	eeb1 7b48 	vneg.f64	d7, d8
 8013420:	ec53 2b17 	vmov	r2, r3, d7
 8013424:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8013428:	1bcb      	subs	r3, r1, r7
 801342a:	eeb0 0b49 	vmov.f64	d0, d9
 801342e:	ec43 2b1a 	vmov	d10, r2, r3
 8013432:	f7ff f94d 	bl	80126d0 <__ulp>
 8013436:	eeaa 9b00 	vfma.f64	d9, d10, d0
 801343a:	ec5b ab19 	vmov	sl, fp, d9
 801343e:	e7aa      	b.n	8013396 <_strtod_l+0xa16>
 8013440:	eeb0 7b48 	vmov.f64	d7, d8
 8013444:	e7ec      	b.n	8013420 <_strtod_l+0xaa0>
 8013446:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8013490 <_strtod_l+0xb10>
 801344a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801344e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013452:	f57f af6f 	bpl.w	8013334 <_strtod_l+0x9b4>
 8013456:	e4ae      	b.n	8012db6 <_strtod_l+0x436>
 8013458:	2300      	movs	r3, #0
 801345a:	9308      	str	r3, [sp, #32]
 801345c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801345e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013460:	6013      	str	r3, [r2, #0]
 8013462:	f7ff bacc 	b.w	80129fe <_strtod_l+0x7e>
 8013466:	2a65      	cmp	r2, #101	@ 0x65
 8013468:	f43f abbc 	beq.w	8012be4 <_strtod_l+0x264>
 801346c:	2a45      	cmp	r2, #69	@ 0x45
 801346e:	f43f abb9 	beq.w	8012be4 <_strtod_l+0x264>
 8013472:	2301      	movs	r3, #1
 8013474:	9306      	str	r3, [sp, #24]
 8013476:	f7ff bbf0 	b.w	8012c5a <_strtod_l+0x2da>
 801347a:	bf00      	nop
 801347c:	f3af 8000 	nop.w
 8013480:	94a03595 	.word	0x94a03595
 8013484:	3fdfffff 	.word	0x3fdfffff
 8013488:	35afe535 	.word	0x35afe535
 801348c:	3fe00000 	.word	0x3fe00000
 8013490:	94a03595 	.word	0x94a03595
 8013494:	3fcfffff 	.word	0x3fcfffff
 8013498:	000fffff 	.word	0x000fffff
 801349c:	7ff00000 	.word	0x7ff00000
 80134a0:	7fefffff 	.word	0x7fefffff
 80134a4:	7fe00000 	.word	0x7fe00000
 80134a8:	7c9fffff 	.word	0x7c9fffff

080134ac <_strtod_r>:
 80134ac:	4b01      	ldr	r3, [pc, #4]	@ (80134b4 <_strtod_r+0x8>)
 80134ae:	f7ff ba67 	b.w	8012980 <_strtod_l>
 80134b2:	bf00      	nop
 80134b4:	24000070 	.word	0x24000070

080134b8 <_strtol_l.constprop.0>:
 80134b8:	2b24      	cmp	r3, #36	@ 0x24
 80134ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80134be:	4686      	mov	lr, r0
 80134c0:	4690      	mov	r8, r2
 80134c2:	d801      	bhi.n	80134c8 <_strtol_l.constprop.0+0x10>
 80134c4:	2b01      	cmp	r3, #1
 80134c6:	d106      	bne.n	80134d6 <_strtol_l.constprop.0+0x1e>
 80134c8:	f7fd ff22 	bl	8011310 <__errno>
 80134cc:	2316      	movs	r3, #22
 80134ce:	6003      	str	r3, [r0, #0]
 80134d0:	2000      	movs	r0, #0
 80134d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134d6:	4834      	ldr	r0, [pc, #208]	@ (80135a8 <_strtol_l.constprop.0+0xf0>)
 80134d8:	460d      	mov	r5, r1
 80134da:	462a      	mov	r2, r5
 80134dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80134e0:	5d06      	ldrb	r6, [r0, r4]
 80134e2:	f016 0608 	ands.w	r6, r6, #8
 80134e6:	d1f8      	bne.n	80134da <_strtol_l.constprop.0+0x22>
 80134e8:	2c2d      	cmp	r4, #45	@ 0x2d
 80134ea:	d12d      	bne.n	8013548 <_strtol_l.constprop.0+0x90>
 80134ec:	782c      	ldrb	r4, [r5, #0]
 80134ee:	2601      	movs	r6, #1
 80134f0:	1c95      	adds	r5, r2, #2
 80134f2:	f033 0210 	bics.w	r2, r3, #16
 80134f6:	d109      	bne.n	801350c <_strtol_l.constprop.0+0x54>
 80134f8:	2c30      	cmp	r4, #48	@ 0x30
 80134fa:	d12a      	bne.n	8013552 <_strtol_l.constprop.0+0x9a>
 80134fc:	782a      	ldrb	r2, [r5, #0]
 80134fe:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8013502:	2a58      	cmp	r2, #88	@ 0x58
 8013504:	d125      	bne.n	8013552 <_strtol_l.constprop.0+0x9a>
 8013506:	786c      	ldrb	r4, [r5, #1]
 8013508:	2310      	movs	r3, #16
 801350a:	3502      	adds	r5, #2
 801350c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8013510:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013514:	2200      	movs	r2, #0
 8013516:	fbbc f9f3 	udiv	r9, ip, r3
 801351a:	4610      	mov	r0, r2
 801351c:	fb03 ca19 	mls	sl, r3, r9, ip
 8013520:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8013524:	2f09      	cmp	r7, #9
 8013526:	d81b      	bhi.n	8013560 <_strtol_l.constprop.0+0xa8>
 8013528:	463c      	mov	r4, r7
 801352a:	42a3      	cmp	r3, r4
 801352c:	dd27      	ble.n	801357e <_strtol_l.constprop.0+0xc6>
 801352e:	1c57      	adds	r7, r2, #1
 8013530:	d007      	beq.n	8013542 <_strtol_l.constprop.0+0x8a>
 8013532:	4581      	cmp	r9, r0
 8013534:	d320      	bcc.n	8013578 <_strtol_l.constprop.0+0xc0>
 8013536:	d101      	bne.n	801353c <_strtol_l.constprop.0+0x84>
 8013538:	45a2      	cmp	sl, r4
 801353a:	db1d      	blt.n	8013578 <_strtol_l.constprop.0+0xc0>
 801353c:	fb00 4003 	mla	r0, r0, r3, r4
 8013540:	2201      	movs	r2, #1
 8013542:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013546:	e7eb      	b.n	8013520 <_strtol_l.constprop.0+0x68>
 8013548:	2c2b      	cmp	r4, #43	@ 0x2b
 801354a:	bf04      	itt	eq
 801354c:	782c      	ldrbeq	r4, [r5, #0]
 801354e:	1c95      	addeq	r5, r2, #2
 8013550:	e7cf      	b.n	80134f2 <_strtol_l.constprop.0+0x3a>
 8013552:	2b00      	cmp	r3, #0
 8013554:	d1da      	bne.n	801350c <_strtol_l.constprop.0+0x54>
 8013556:	2c30      	cmp	r4, #48	@ 0x30
 8013558:	bf0c      	ite	eq
 801355a:	2308      	moveq	r3, #8
 801355c:	230a      	movne	r3, #10
 801355e:	e7d5      	b.n	801350c <_strtol_l.constprop.0+0x54>
 8013560:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8013564:	2f19      	cmp	r7, #25
 8013566:	d801      	bhi.n	801356c <_strtol_l.constprop.0+0xb4>
 8013568:	3c37      	subs	r4, #55	@ 0x37
 801356a:	e7de      	b.n	801352a <_strtol_l.constprop.0+0x72>
 801356c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8013570:	2f19      	cmp	r7, #25
 8013572:	d804      	bhi.n	801357e <_strtol_l.constprop.0+0xc6>
 8013574:	3c57      	subs	r4, #87	@ 0x57
 8013576:	e7d8      	b.n	801352a <_strtol_l.constprop.0+0x72>
 8013578:	f04f 32ff 	mov.w	r2, #4294967295
 801357c:	e7e1      	b.n	8013542 <_strtol_l.constprop.0+0x8a>
 801357e:	1c53      	adds	r3, r2, #1
 8013580:	d108      	bne.n	8013594 <_strtol_l.constprop.0+0xdc>
 8013582:	2322      	movs	r3, #34	@ 0x22
 8013584:	f8ce 3000 	str.w	r3, [lr]
 8013588:	4660      	mov	r0, ip
 801358a:	f1b8 0f00 	cmp.w	r8, #0
 801358e:	d0a0      	beq.n	80134d2 <_strtol_l.constprop.0+0x1a>
 8013590:	1e69      	subs	r1, r5, #1
 8013592:	e006      	b.n	80135a2 <_strtol_l.constprop.0+0xea>
 8013594:	b106      	cbz	r6, 8013598 <_strtol_l.constprop.0+0xe0>
 8013596:	4240      	negs	r0, r0
 8013598:	f1b8 0f00 	cmp.w	r8, #0
 801359c:	d099      	beq.n	80134d2 <_strtol_l.constprop.0+0x1a>
 801359e:	2a00      	cmp	r2, #0
 80135a0:	d1f6      	bne.n	8013590 <_strtol_l.constprop.0+0xd8>
 80135a2:	f8c8 1000 	str.w	r1, [r8]
 80135a6:	e794      	b.n	80134d2 <_strtol_l.constprop.0+0x1a>
 80135a8:	08014e49 	.word	0x08014e49

080135ac <_strtol_r>:
 80135ac:	f7ff bf84 	b.w	80134b8 <_strtol_l.constprop.0>

080135b0 <__ssputs_r>:
 80135b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80135b4:	688e      	ldr	r6, [r1, #8]
 80135b6:	461f      	mov	r7, r3
 80135b8:	42be      	cmp	r6, r7
 80135ba:	680b      	ldr	r3, [r1, #0]
 80135bc:	4682      	mov	sl, r0
 80135be:	460c      	mov	r4, r1
 80135c0:	4690      	mov	r8, r2
 80135c2:	d82d      	bhi.n	8013620 <__ssputs_r+0x70>
 80135c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80135c8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80135cc:	d026      	beq.n	801361c <__ssputs_r+0x6c>
 80135ce:	6965      	ldr	r5, [r4, #20]
 80135d0:	6909      	ldr	r1, [r1, #16]
 80135d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80135d6:	eba3 0901 	sub.w	r9, r3, r1
 80135da:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80135de:	1c7b      	adds	r3, r7, #1
 80135e0:	444b      	add	r3, r9
 80135e2:	106d      	asrs	r5, r5, #1
 80135e4:	429d      	cmp	r5, r3
 80135e6:	bf38      	it	cc
 80135e8:	461d      	movcc	r5, r3
 80135ea:	0553      	lsls	r3, r2, #21
 80135ec:	d527      	bpl.n	801363e <__ssputs_r+0x8e>
 80135ee:	4629      	mov	r1, r5
 80135f0:	f7fc fc88 	bl	800ff04 <_malloc_r>
 80135f4:	4606      	mov	r6, r0
 80135f6:	b360      	cbz	r0, 8013652 <__ssputs_r+0xa2>
 80135f8:	6921      	ldr	r1, [r4, #16]
 80135fa:	464a      	mov	r2, r9
 80135fc:	f7fd feb5 	bl	801136a <memcpy>
 8013600:	89a3      	ldrh	r3, [r4, #12]
 8013602:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8013606:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801360a:	81a3      	strh	r3, [r4, #12]
 801360c:	6126      	str	r6, [r4, #16]
 801360e:	6165      	str	r5, [r4, #20]
 8013610:	444e      	add	r6, r9
 8013612:	eba5 0509 	sub.w	r5, r5, r9
 8013616:	6026      	str	r6, [r4, #0]
 8013618:	60a5      	str	r5, [r4, #8]
 801361a:	463e      	mov	r6, r7
 801361c:	42be      	cmp	r6, r7
 801361e:	d900      	bls.n	8013622 <__ssputs_r+0x72>
 8013620:	463e      	mov	r6, r7
 8013622:	6820      	ldr	r0, [r4, #0]
 8013624:	4632      	mov	r2, r6
 8013626:	4641      	mov	r1, r8
 8013628:	f000 fb6a 	bl	8013d00 <memmove>
 801362c:	68a3      	ldr	r3, [r4, #8]
 801362e:	1b9b      	subs	r3, r3, r6
 8013630:	60a3      	str	r3, [r4, #8]
 8013632:	6823      	ldr	r3, [r4, #0]
 8013634:	4433      	add	r3, r6
 8013636:	6023      	str	r3, [r4, #0]
 8013638:	2000      	movs	r0, #0
 801363a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801363e:	462a      	mov	r2, r5
 8013640:	f000 ff15 	bl	801446e <_realloc_r>
 8013644:	4606      	mov	r6, r0
 8013646:	2800      	cmp	r0, #0
 8013648:	d1e0      	bne.n	801360c <__ssputs_r+0x5c>
 801364a:	6921      	ldr	r1, [r4, #16]
 801364c:	4650      	mov	r0, sl
 801364e:	f7fe fc81 	bl	8011f54 <_free_r>
 8013652:	230c      	movs	r3, #12
 8013654:	f8ca 3000 	str.w	r3, [sl]
 8013658:	89a3      	ldrh	r3, [r4, #12]
 801365a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801365e:	81a3      	strh	r3, [r4, #12]
 8013660:	f04f 30ff 	mov.w	r0, #4294967295
 8013664:	e7e9      	b.n	801363a <__ssputs_r+0x8a>
	...

08013668 <_svfiprintf_r>:
 8013668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801366c:	4698      	mov	r8, r3
 801366e:	898b      	ldrh	r3, [r1, #12]
 8013670:	061b      	lsls	r3, r3, #24
 8013672:	b09d      	sub	sp, #116	@ 0x74
 8013674:	4607      	mov	r7, r0
 8013676:	460d      	mov	r5, r1
 8013678:	4614      	mov	r4, r2
 801367a:	d510      	bpl.n	801369e <_svfiprintf_r+0x36>
 801367c:	690b      	ldr	r3, [r1, #16]
 801367e:	b973      	cbnz	r3, 801369e <_svfiprintf_r+0x36>
 8013680:	2140      	movs	r1, #64	@ 0x40
 8013682:	f7fc fc3f 	bl	800ff04 <_malloc_r>
 8013686:	6028      	str	r0, [r5, #0]
 8013688:	6128      	str	r0, [r5, #16]
 801368a:	b930      	cbnz	r0, 801369a <_svfiprintf_r+0x32>
 801368c:	230c      	movs	r3, #12
 801368e:	603b      	str	r3, [r7, #0]
 8013690:	f04f 30ff 	mov.w	r0, #4294967295
 8013694:	b01d      	add	sp, #116	@ 0x74
 8013696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801369a:	2340      	movs	r3, #64	@ 0x40
 801369c:	616b      	str	r3, [r5, #20]
 801369e:	2300      	movs	r3, #0
 80136a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80136a2:	2320      	movs	r3, #32
 80136a4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80136a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80136ac:	2330      	movs	r3, #48	@ 0x30
 80136ae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801384c <_svfiprintf_r+0x1e4>
 80136b2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80136b6:	f04f 0901 	mov.w	r9, #1
 80136ba:	4623      	mov	r3, r4
 80136bc:	469a      	mov	sl, r3
 80136be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80136c2:	b10a      	cbz	r2, 80136c8 <_svfiprintf_r+0x60>
 80136c4:	2a25      	cmp	r2, #37	@ 0x25
 80136c6:	d1f9      	bne.n	80136bc <_svfiprintf_r+0x54>
 80136c8:	ebba 0b04 	subs.w	fp, sl, r4
 80136cc:	d00b      	beq.n	80136e6 <_svfiprintf_r+0x7e>
 80136ce:	465b      	mov	r3, fp
 80136d0:	4622      	mov	r2, r4
 80136d2:	4629      	mov	r1, r5
 80136d4:	4638      	mov	r0, r7
 80136d6:	f7ff ff6b 	bl	80135b0 <__ssputs_r>
 80136da:	3001      	adds	r0, #1
 80136dc:	f000 80a7 	beq.w	801382e <_svfiprintf_r+0x1c6>
 80136e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80136e2:	445a      	add	r2, fp
 80136e4:	9209      	str	r2, [sp, #36]	@ 0x24
 80136e6:	f89a 3000 	ldrb.w	r3, [sl]
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	f000 809f 	beq.w	801382e <_svfiprintf_r+0x1c6>
 80136f0:	2300      	movs	r3, #0
 80136f2:	f04f 32ff 	mov.w	r2, #4294967295
 80136f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80136fa:	f10a 0a01 	add.w	sl, sl, #1
 80136fe:	9304      	str	r3, [sp, #16]
 8013700:	9307      	str	r3, [sp, #28]
 8013702:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013706:	931a      	str	r3, [sp, #104]	@ 0x68
 8013708:	4654      	mov	r4, sl
 801370a:	2205      	movs	r2, #5
 801370c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013710:	484e      	ldr	r0, [pc, #312]	@ (801384c <_svfiprintf_r+0x1e4>)
 8013712:	f7ec fded 	bl	80002f0 <memchr>
 8013716:	9a04      	ldr	r2, [sp, #16]
 8013718:	b9d8      	cbnz	r0, 8013752 <_svfiprintf_r+0xea>
 801371a:	06d0      	lsls	r0, r2, #27
 801371c:	bf44      	itt	mi
 801371e:	2320      	movmi	r3, #32
 8013720:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013724:	0711      	lsls	r1, r2, #28
 8013726:	bf44      	itt	mi
 8013728:	232b      	movmi	r3, #43	@ 0x2b
 801372a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801372e:	f89a 3000 	ldrb.w	r3, [sl]
 8013732:	2b2a      	cmp	r3, #42	@ 0x2a
 8013734:	d015      	beq.n	8013762 <_svfiprintf_r+0xfa>
 8013736:	9a07      	ldr	r2, [sp, #28]
 8013738:	4654      	mov	r4, sl
 801373a:	2000      	movs	r0, #0
 801373c:	f04f 0c0a 	mov.w	ip, #10
 8013740:	4621      	mov	r1, r4
 8013742:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013746:	3b30      	subs	r3, #48	@ 0x30
 8013748:	2b09      	cmp	r3, #9
 801374a:	d94b      	bls.n	80137e4 <_svfiprintf_r+0x17c>
 801374c:	b1b0      	cbz	r0, 801377c <_svfiprintf_r+0x114>
 801374e:	9207      	str	r2, [sp, #28]
 8013750:	e014      	b.n	801377c <_svfiprintf_r+0x114>
 8013752:	eba0 0308 	sub.w	r3, r0, r8
 8013756:	fa09 f303 	lsl.w	r3, r9, r3
 801375a:	4313      	orrs	r3, r2
 801375c:	9304      	str	r3, [sp, #16]
 801375e:	46a2      	mov	sl, r4
 8013760:	e7d2      	b.n	8013708 <_svfiprintf_r+0xa0>
 8013762:	9b03      	ldr	r3, [sp, #12]
 8013764:	1d19      	adds	r1, r3, #4
 8013766:	681b      	ldr	r3, [r3, #0]
 8013768:	9103      	str	r1, [sp, #12]
 801376a:	2b00      	cmp	r3, #0
 801376c:	bfbb      	ittet	lt
 801376e:	425b      	neglt	r3, r3
 8013770:	f042 0202 	orrlt.w	r2, r2, #2
 8013774:	9307      	strge	r3, [sp, #28]
 8013776:	9307      	strlt	r3, [sp, #28]
 8013778:	bfb8      	it	lt
 801377a:	9204      	strlt	r2, [sp, #16]
 801377c:	7823      	ldrb	r3, [r4, #0]
 801377e:	2b2e      	cmp	r3, #46	@ 0x2e
 8013780:	d10a      	bne.n	8013798 <_svfiprintf_r+0x130>
 8013782:	7863      	ldrb	r3, [r4, #1]
 8013784:	2b2a      	cmp	r3, #42	@ 0x2a
 8013786:	d132      	bne.n	80137ee <_svfiprintf_r+0x186>
 8013788:	9b03      	ldr	r3, [sp, #12]
 801378a:	1d1a      	adds	r2, r3, #4
 801378c:	681b      	ldr	r3, [r3, #0]
 801378e:	9203      	str	r2, [sp, #12]
 8013790:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013794:	3402      	adds	r4, #2
 8013796:	9305      	str	r3, [sp, #20]
 8013798:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801385c <_svfiprintf_r+0x1f4>
 801379c:	7821      	ldrb	r1, [r4, #0]
 801379e:	2203      	movs	r2, #3
 80137a0:	4650      	mov	r0, sl
 80137a2:	f7ec fda5 	bl	80002f0 <memchr>
 80137a6:	b138      	cbz	r0, 80137b8 <_svfiprintf_r+0x150>
 80137a8:	9b04      	ldr	r3, [sp, #16]
 80137aa:	eba0 000a 	sub.w	r0, r0, sl
 80137ae:	2240      	movs	r2, #64	@ 0x40
 80137b0:	4082      	lsls	r2, r0
 80137b2:	4313      	orrs	r3, r2
 80137b4:	3401      	adds	r4, #1
 80137b6:	9304      	str	r3, [sp, #16]
 80137b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80137bc:	4824      	ldr	r0, [pc, #144]	@ (8013850 <_svfiprintf_r+0x1e8>)
 80137be:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80137c2:	2206      	movs	r2, #6
 80137c4:	f7ec fd94 	bl	80002f0 <memchr>
 80137c8:	2800      	cmp	r0, #0
 80137ca:	d036      	beq.n	801383a <_svfiprintf_r+0x1d2>
 80137cc:	4b21      	ldr	r3, [pc, #132]	@ (8013854 <_svfiprintf_r+0x1ec>)
 80137ce:	bb1b      	cbnz	r3, 8013818 <_svfiprintf_r+0x1b0>
 80137d0:	9b03      	ldr	r3, [sp, #12]
 80137d2:	3307      	adds	r3, #7
 80137d4:	f023 0307 	bic.w	r3, r3, #7
 80137d8:	3308      	adds	r3, #8
 80137da:	9303      	str	r3, [sp, #12]
 80137dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80137de:	4433      	add	r3, r6
 80137e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80137e2:	e76a      	b.n	80136ba <_svfiprintf_r+0x52>
 80137e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80137e8:	460c      	mov	r4, r1
 80137ea:	2001      	movs	r0, #1
 80137ec:	e7a8      	b.n	8013740 <_svfiprintf_r+0xd8>
 80137ee:	2300      	movs	r3, #0
 80137f0:	3401      	adds	r4, #1
 80137f2:	9305      	str	r3, [sp, #20]
 80137f4:	4619      	mov	r1, r3
 80137f6:	f04f 0c0a 	mov.w	ip, #10
 80137fa:	4620      	mov	r0, r4
 80137fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013800:	3a30      	subs	r2, #48	@ 0x30
 8013802:	2a09      	cmp	r2, #9
 8013804:	d903      	bls.n	801380e <_svfiprintf_r+0x1a6>
 8013806:	2b00      	cmp	r3, #0
 8013808:	d0c6      	beq.n	8013798 <_svfiprintf_r+0x130>
 801380a:	9105      	str	r1, [sp, #20]
 801380c:	e7c4      	b.n	8013798 <_svfiprintf_r+0x130>
 801380e:	fb0c 2101 	mla	r1, ip, r1, r2
 8013812:	4604      	mov	r4, r0
 8013814:	2301      	movs	r3, #1
 8013816:	e7f0      	b.n	80137fa <_svfiprintf_r+0x192>
 8013818:	ab03      	add	r3, sp, #12
 801381a:	9300      	str	r3, [sp, #0]
 801381c:	462a      	mov	r2, r5
 801381e:	4b0e      	ldr	r3, [pc, #56]	@ (8013858 <_svfiprintf_r+0x1f0>)
 8013820:	a904      	add	r1, sp, #16
 8013822:	4638      	mov	r0, r7
 8013824:	f7fc fc88 	bl	8010138 <_printf_float>
 8013828:	1c42      	adds	r2, r0, #1
 801382a:	4606      	mov	r6, r0
 801382c:	d1d6      	bne.n	80137dc <_svfiprintf_r+0x174>
 801382e:	89ab      	ldrh	r3, [r5, #12]
 8013830:	065b      	lsls	r3, r3, #25
 8013832:	f53f af2d 	bmi.w	8013690 <_svfiprintf_r+0x28>
 8013836:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013838:	e72c      	b.n	8013694 <_svfiprintf_r+0x2c>
 801383a:	ab03      	add	r3, sp, #12
 801383c:	9300      	str	r3, [sp, #0]
 801383e:	462a      	mov	r2, r5
 8013840:	4b05      	ldr	r3, [pc, #20]	@ (8013858 <_svfiprintf_r+0x1f0>)
 8013842:	a904      	add	r1, sp, #16
 8013844:	4638      	mov	r0, r7
 8013846:	f7fc feff 	bl	8010648 <_printf_i>
 801384a:	e7ed      	b.n	8013828 <_svfiprintf_r+0x1c0>
 801384c:	08014f49 	.word	0x08014f49
 8013850:	08014f53 	.word	0x08014f53
 8013854:	08010139 	.word	0x08010139
 8013858:	080135b1 	.word	0x080135b1
 801385c:	08014f4f 	.word	0x08014f4f

08013860 <__sfputc_r>:
 8013860:	6893      	ldr	r3, [r2, #8]
 8013862:	3b01      	subs	r3, #1
 8013864:	2b00      	cmp	r3, #0
 8013866:	b410      	push	{r4}
 8013868:	6093      	str	r3, [r2, #8]
 801386a:	da08      	bge.n	801387e <__sfputc_r+0x1e>
 801386c:	6994      	ldr	r4, [r2, #24]
 801386e:	42a3      	cmp	r3, r4
 8013870:	db01      	blt.n	8013876 <__sfputc_r+0x16>
 8013872:	290a      	cmp	r1, #10
 8013874:	d103      	bne.n	801387e <__sfputc_r+0x1e>
 8013876:	f85d 4b04 	ldr.w	r4, [sp], #4
 801387a:	f7fd bbb8 	b.w	8010fee <__swbuf_r>
 801387e:	6813      	ldr	r3, [r2, #0]
 8013880:	1c58      	adds	r0, r3, #1
 8013882:	6010      	str	r0, [r2, #0]
 8013884:	7019      	strb	r1, [r3, #0]
 8013886:	4608      	mov	r0, r1
 8013888:	f85d 4b04 	ldr.w	r4, [sp], #4
 801388c:	4770      	bx	lr

0801388e <__sfputs_r>:
 801388e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013890:	4606      	mov	r6, r0
 8013892:	460f      	mov	r7, r1
 8013894:	4614      	mov	r4, r2
 8013896:	18d5      	adds	r5, r2, r3
 8013898:	42ac      	cmp	r4, r5
 801389a:	d101      	bne.n	80138a0 <__sfputs_r+0x12>
 801389c:	2000      	movs	r0, #0
 801389e:	e007      	b.n	80138b0 <__sfputs_r+0x22>
 80138a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80138a4:	463a      	mov	r2, r7
 80138a6:	4630      	mov	r0, r6
 80138a8:	f7ff ffda 	bl	8013860 <__sfputc_r>
 80138ac:	1c43      	adds	r3, r0, #1
 80138ae:	d1f3      	bne.n	8013898 <__sfputs_r+0xa>
 80138b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080138b4 <_vfiprintf_r>:
 80138b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138b8:	460d      	mov	r5, r1
 80138ba:	b09d      	sub	sp, #116	@ 0x74
 80138bc:	4614      	mov	r4, r2
 80138be:	4698      	mov	r8, r3
 80138c0:	4606      	mov	r6, r0
 80138c2:	b118      	cbz	r0, 80138cc <_vfiprintf_r+0x18>
 80138c4:	6a03      	ldr	r3, [r0, #32]
 80138c6:	b90b      	cbnz	r3, 80138cc <_vfiprintf_r+0x18>
 80138c8:	f7fd fa76 	bl	8010db8 <__sinit>
 80138cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80138ce:	07d9      	lsls	r1, r3, #31
 80138d0:	d405      	bmi.n	80138de <_vfiprintf_r+0x2a>
 80138d2:	89ab      	ldrh	r3, [r5, #12]
 80138d4:	059a      	lsls	r2, r3, #22
 80138d6:	d402      	bmi.n	80138de <_vfiprintf_r+0x2a>
 80138d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80138da:	f7fd fd44 	bl	8011366 <__retarget_lock_acquire_recursive>
 80138de:	89ab      	ldrh	r3, [r5, #12]
 80138e0:	071b      	lsls	r3, r3, #28
 80138e2:	d501      	bpl.n	80138e8 <_vfiprintf_r+0x34>
 80138e4:	692b      	ldr	r3, [r5, #16]
 80138e6:	b99b      	cbnz	r3, 8013910 <_vfiprintf_r+0x5c>
 80138e8:	4629      	mov	r1, r5
 80138ea:	4630      	mov	r0, r6
 80138ec:	f7fd fbbe 	bl	801106c <__swsetup_r>
 80138f0:	b170      	cbz	r0, 8013910 <_vfiprintf_r+0x5c>
 80138f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80138f4:	07dc      	lsls	r4, r3, #31
 80138f6:	d504      	bpl.n	8013902 <_vfiprintf_r+0x4e>
 80138f8:	f04f 30ff 	mov.w	r0, #4294967295
 80138fc:	b01d      	add	sp, #116	@ 0x74
 80138fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013902:	89ab      	ldrh	r3, [r5, #12]
 8013904:	0598      	lsls	r0, r3, #22
 8013906:	d4f7      	bmi.n	80138f8 <_vfiprintf_r+0x44>
 8013908:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801390a:	f7fd fd2d 	bl	8011368 <__retarget_lock_release_recursive>
 801390e:	e7f3      	b.n	80138f8 <_vfiprintf_r+0x44>
 8013910:	2300      	movs	r3, #0
 8013912:	9309      	str	r3, [sp, #36]	@ 0x24
 8013914:	2320      	movs	r3, #32
 8013916:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801391a:	f8cd 800c 	str.w	r8, [sp, #12]
 801391e:	2330      	movs	r3, #48	@ 0x30
 8013920:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013ad0 <_vfiprintf_r+0x21c>
 8013924:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013928:	f04f 0901 	mov.w	r9, #1
 801392c:	4623      	mov	r3, r4
 801392e:	469a      	mov	sl, r3
 8013930:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013934:	b10a      	cbz	r2, 801393a <_vfiprintf_r+0x86>
 8013936:	2a25      	cmp	r2, #37	@ 0x25
 8013938:	d1f9      	bne.n	801392e <_vfiprintf_r+0x7a>
 801393a:	ebba 0b04 	subs.w	fp, sl, r4
 801393e:	d00b      	beq.n	8013958 <_vfiprintf_r+0xa4>
 8013940:	465b      	mov	r3, fp
 8013942:	4622      	mov	r2, r4
 8013944:	4629      	mov	r1, r5
 8013946:	4630      	mov	r0, r6
 8013948:	f7ff ffa1 	bl	801388e <__sfputs_r>
 801394c:	3001      	adds	r0, #1
 801394e:	f000 80a7 	beq.w	8013aa0 <_vfiprintf_r+0x1ec>
 8013952:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013954:	445a      	add	r2, fp
 8013956:	9209      	str	r2, [sp, #36]	@ 0x24
 8013958:	f89a 3000 	ldrb.w	r3, [sl]
 801395c:	2b00      	cmp	r3, #0
 801395e:	f000 809f 	beq.w	8013aa0 <_vfiprintf_r+0x1ec>
 8013962:	2300      	movs	r3, #0
 8013964:	f04f 32ff 	mov.w	r2, #4294967295
 8013968:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801396c:	f10a 0a01 	add.w	sl, sl, #1
 8013970:	9304      	str	r3, [sp, #16]
 8013972:	9307      	str	r3, [sp, #28]
 8013974:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013978:	931a      	str	r3, [sp, #104]	@ 0x68
 801397a:	4654      	mov	r4, sl
 801397c:	2205      	movs	r2, #5
 801397e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013982:	4853      	ldr	r0, [pc, #332]	@ (8013ad0 <_vfiprintf_r+0x21c>)
 8013984:	f7ec fcb4 	bl	80002f0 <memchr>
 8013988:	9a04      	ldr	r2, [sp, #16]
 801398a:	b9d8      	cbnz	r0, 80139c4 <_vfiprintf_r+0x110>
 801398c:	06d1      	lsls	r1, r2, #27
 801398e:	bf44      	itt	mi
 8013990:	2320      	movmi	r3, #32
 8013992:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013996:	0713      	lsls	r3, r2, #28
 8013998:	bf44      	itt	mi
 801399a:	232b      	movmi	r3, #43	@ 0x2b
 801399c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80139a0:	f89a 3000 	ldrb.w	r3, [sl]
 80139a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80139a6:	d015      	beq.n	80139d4 <_vfiprintf_r+0x120>
 80139a8:	9a07      	ldr	r2, [sp, #28]
 80139aa:	4654      	mov	r4, sl
 80139ac:	2000      	movs	r0, #0
 80139ae:	f04f 0c0a 	mov.w	ip, #10
 80139b2:	4621      	mov	r1, r4
 80139b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80139b8:	3b30      	subs	r3, #48	@ 0x30
 80139ba:	2b09      	cmp	r3, #9
 80139bc:	d94b      	bls.n	8013a56 <_vfiprintf_r+0x1a2>
 80139be:	b1b0      	cbz	r0, 80139ee <_vfiprintf_r+0x13a>
 80139c0:	9207      	str	r2, [sp, #28]
 80139c2:	e014      	b.n	80139ee <_vfiprintf_r+0x13a>
 80139c4:	eba0 0308 	sub.w	r3, r0, r8
 80139c8:	fa09 f303 	lsl.w	r3, r9, r3
 80139cc:	4313      	orrs	r3, r2
 80139ce:	9304      	str	r3, [sp, #16]
 80139d0:	46a2      	mov	sl, r4
 80139d2:	e7d2      	b.n	801397a <_vfiprintf_r+0xc6>
 80139d4:	9b03      	ldr	r3, [sp, #12]
 80139d6:	1d19      	adds	r1, r3, #4
 80139d8:	681b      	ldr	r3, [r3, #0]
 80139da:	9103      	str	r1, [sp, #12]
 80139dc:	2b00      	cmp	r3, #0
 80139de:	bfbb      	ittet	lt
 80139e0:	425b      	neglt	r3, r3
 80139e2:	f042 0202 	orrlt.w	r2, r2, #2
 80139e6:	9307      	strge	r3, [sp, #28]
 80139e8:	9307      	strlt	r3, [sp, #28]
 80139ea:	bfb8      	it	lt
 80139ec:	9204      	strlt	r2, [sp, #16]
 80139ee:	7823      	ldrb	r3, [r4, #0]
 80139f0:	2b2e      	cmp	r3, #46	@ 0x2e
 80139f2:	d10a      	bne.n	8013a0a <_vfiprintf_r+0x156>
 80139f4:	7863      	ldrb	r3, [r4, #1]
 80139f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80139f8:	d132      	bne.n	8013a60 <_vfiprintf_r+0x1ac>
 80139fa:	9b03      	ldr	r3, [sp, #12]
 80139fc:	1d1a      	adds	r2, r3, #4
 80139fe:	681b      	ldr	r3, [r3, #0]
 8013a00:	9203      	str	r2, [sp, #12]
 8013a02:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013a06:	3402      	adds	r4, #2
 8013a08:	9305      	str	r3, [sp, #20]
 8013a0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013ae0 <_vfiprintf_r+0x22c>
 8013a0e:	7821      	ldrb	r1, [r4, #0]
 8013a10:	2203      	movs	r2, #3
 8013a12:	4650      	mov	r0, sl
 8013a14:	f7ec fc6c 	bl	80002f0 <memchr>
 8013a18:	b138      	cbz	r0, 8013a2a <_vfiprintf_r+0x176>
 8013a1a:	9b04      	ldr	r3, [sp, #16]
 8013a1c:	eba0 000a 	sub.w	r0, r0, sl
 8013a20:	2240      	movs	r2, #64	@ 0x40
 8013a22:	4082      	lsls	r2, r0
 8013a24:	4313      	orrs	r3, r2
 8013a26:	3401      	adds	r4, #1
 8013a28:	9304      	str	r3, [sp, #16]
 8013a2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013a2e:	4829      	ldr	r0, [pc, #164]	@ (8013ad4 <_vfiprintf_r+0x220>)
 8013a30:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013a34:	2206      	movs	r2, #6
 8013a36:	f7ec fc5b 	bl	80002f0 <memchr>
 8013a3a:	2800      	cmp	r0, #0
 8013a3c:	d03f      	beq.n	8013abe <_vfiprintf_r+0x20a>
 8013a3e:	4b26      	ldr	r3, [pc, #152]	@ (8013ad8 <_vfiprintf_r+0x224>)
 8013a40:	bb1b      	cbnz	r3, 8013a8a <_vfiprintf_r+0x1d6>
 8013a42:	9b03      	ldr	r3, [sp, #12]
 8013a44:	3307      	adds	r3, #7
 8013a46:	f023 0307 	bic.w	r3, r3, #7
 8013a4a:	3308      	adds	r3, #8
 8013a4c:	9303      	str	r3, [sp, #12]
 8013a4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013a50:	443b      	add	r3, r7
 8013a52:	9309      	str	r3, [sp, #36]	@ 0x24
 8013a54:	e76a      	b.n	801392c <_vfiprintf_r+0x78>
 8013a56:	fb0c 3202 	mla	r2, ip, r2, r3
 8013a5a:	460c      	mov	r4, r1
 8013a5c:	2001      	movs	r0, #1
 8013a5e:	e7a8      	b.n	80139b2 <_vfiprintf_r+0xfe>
 8013a60:	2300      	movs	r3, #0
 8013a62:	3401      	adds	r4, #1
 8013a64:	9305      	str	r3, [sp, #20]
 8013a66:	4619      	mov	r1, r3
 8013a68:	f04f 0c0a 	mov.w	ip, #10
 8013a6c:	4620      	mov	r0, r4
 8013a6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013a72:	3a30      	subs	r2, #48	@ 0x30
 8013a74:	2a09      	cmp	r2, #9
 8013a76:	d903      	bls.n	8013a80 <_vfiprintf_r+0x1cc>
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d0c6      	beq.n	8013a0a <_vfiprintf_r+0x156>
 8013a7c:	9105      	str	r1, [sp, #20]
 8013a7e:	e7c4      	b.n	8013a0a <_vfiprintf_r+0x156>
 8013a80:	fb0c 2101 	mla	r1, ip, r1, r2
 8013a84:	4604      	mov	r4, r0
 8013a86:	2301      	movs	r3, #1
 8013a88:	e7f0      	b.n	8013a6c <_vfiprintf_r+0x1b8>
 8013a8a:	ab03      	add	r3, sp, #12
 8013a8c:	9300      	str	r3, [sp, #0]
 8013a8e:	462a      	mov	r2, r5
 8013a90:	4b12      	ldr	r3, [pc, #72]	@ (8013adc <_vfiprintf_r+0x228>)
 8013a92:	a904      	add	r1, sp, #16
 8013a94:	4630      	mov	r0, r6
 8013a96:	f7fc fb4f 	bl	8010138 <_printf_float>
 8013a9a:	4607      	mov	r7, r0
 8013a9c:	1c78      	adds	r0, r7, #1
 8013a9e:	d1d6      	bne.n	8013a4e <_vfiprintf_r+0x19a>
 8013aa0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013aa2:	07d9      	lsls	r1, r3, #31
 8013aa4:	d405      	bmi.n	8013ab2 <_vfiprintf_r+0x1fe>
 8013aa6:	89ab      	ldrh	r3, [r5, #12]
 8013aa8:	059a      	lsls	r2, r3, #22
 8013aaa:	d402      	bmi.n	8013ab2 <_vfiprintf_r+0x1fe>
 8013aac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013aae:	f7fd fc5b 	bl	8011368 <__retarget_lock_release_recursive>
 8013ab2:	89ab      	ldrh	r3, [r5, #12]
 8013ab4:	065b      	lsls	r3, r3, #25
 8013ab6:	f53f af1f 	bmi.w	80138f8 <_vfiprintf_r+0x44>
 8013aba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013abc:	e71e      	b.n	80138fc <_vfiprintf_r+0x48>
 8013abe:	ab03      	add	r3, sp, #12
 8013ac0:	9300      	str	r3, [sp, #0]
 8013ac2:	462a      	mov	r2, r5
 8013ac4:	4b05      	ldr	r3, [pc, #20]	@ (8013adc <_vfiprintf_r+0x228>)
 8013ac6:	a904      	add	r1, sp, #16
 8013ac8:	4630      	mov	r0, r6
 8013aca:	f7fc fdbd 	bl	8010648 <_printf_i>
 8013ace:	e7e4      	b.n	8013a9a <_vfiprintf_r+0x1e6>
 8013ad0:	08014f49 	.word	0x08014f49
 8013ad4:	08014f53 	.word	0x08014f53
 8013ad8:	08010139 	.word	0x08010139
 8013adc:	0801388f 	.word	0x0801388f
 8013ae0:	08014f4f 	.word	0x08014f4f

08013ae4 <__sflush_r>:
 8013ae4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013aec:	0716      	lsls	r6, r2, #28
 8013aee:	4605      	mov	r5, r0
 8013af0:	460c      	mov	r4, r1
 8013af2:	d454      	bmi.n	8013b9e <__sflush_r+0xba>
 8013af4:	684b      	ldr	r3, [r1, #4]
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	dc02      	bgt.n	8013b00 <__sflush_r+0x1c>
 8013afa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	dd48      	ble.n	8013b92 <__sflush_r+0xae>
 8013b00:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013b02:	2e00      	cmp	r6, #0
 8013b04:	d045      	beq.n	8013b92 <__sflush_r+0xae>
 8013b06:	2300      	movs	r3, #0
 8013b08:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013b0c:	682f      	ldr	r7, [r5, #0]
 8013b0e:	6a21      	ldr	r1, [r4, #32]
 8013b10:	602b      	str	r3, [r5, #0]
 8013b12:	d030      	beq.n	8013b76 <__sflush_r+0x92>
 8013b14:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013b16:	89a3      	ldrh	r3, [r4, #12]
 8013b18:	0759      	lsls	r1, r3, #29
 8013b1a:	d505      	bpl.n	8013b28 <__sflush_r+0x44>
 8013b1c:	6863      	ldr	r3, [r4, #4]
 8013b1e:	1ad2      	subs	r2, r2, r3
 8013b20:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013b22:	b10b      	cbz	r3, 8013b28 <__sflush_r+0x44>
 8013b24:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013b26:	1ad2      	subs	r2, r2, r3
 8013b28:	2300      	movs	r3, #0
 8013b2a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013b2c:	6a21      	ldr	r1, [r4, #32]
 8013b2e:	4628      	mov	r0, r5
 8013b30:	47b0      	blx	r6
 8013b32:	1c43      	adds	r3, r0, #1
 8013b34:	89a3      	ldrh	r3, [r4, #12]
 8013b36:	d106      	bne.n	8013b46 <__sflush_r+0x62>
 8013b38:	6829      	ldr	r1, [r5, #0]
 8013b3a:	291d      	cmp	r1, #29
 8013b3c:	d82b      	bhi.n	8013b96 <__sflush_r+0xb2>
 8013b3e:	4a2a      	ldr	r2, [pc, #168]	@ (8013be8 <__sflush_r+0x104>)
 8013b40:	410a      	asrs	r2, r1
 8013b42:	07d6      	lsls	r6, r2, #31
 8013b44:	d427      	bmi.n	8013b96 <__sflush_r+0xb2>
 8013b46:	2200      	movs	r2, #0
 8013b48:	6062      	str	r2, [r4, #4]
 8013b4a:	04d9      	lsls	r1, r3, #19
 8013b4c:	6922      	ldr	r2, [r4, #16]
 8013b4e:	6022      	str	r2, [r4, #0]
 8013b50:	d504      	bpl.n	8013b5c <__sflush_r+0x78>
 8013b52:	1c42      	adds	r2, r0, #1
 8013b54:	d101      	bne.n	8013b5a <__sflush_r+0x76>
 8013b56:	682b      	ldr	r3, [r5, #0]
 8013b58:	b903      	cbnz	r3, 8013b5c <__sflush_r+0x78>
 8013b5a:	6560      	str	r0, [r4, #84]	@ 0x54
 8013b5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013b5e:	602f      	str	r7, [r5, #0]
 8013b60:	b1b9      	cbz	r1, 8013b92 <__sflush_r+0xae>
 8013b62:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013b66:	4299      	cmp	r1, r3
 8013b68:	d002      	beq.n	8013b70 <__sflush_r+0x8c>
 8013b6a:	4628      	mov	r0, r5
 8013b6c:	f7fe f9f2 	bl	8011f54 <_free_r>
 8013b70:	2300      	movs	r3, #0
 8013b72:	6363      	str	r3, [r4, #52]	@ 0x34
 8013b74:	e00d      	b.n	8013b92 <__sflush_r+0xae>
 8013b76:	2301      	movs	r3, #1
 8013b78:	4628      	mov	r0, r5
 8013b7a:	47b0      	blx	r6
 8013b7c:	4602      	mov	r2, r0
 8013b7e:	1c50      	adds	r0, r2, #1
 8013b80:	d1c9      	bne.n	8013b16 <__sflush_r+0x32>
 8013b82:	682b      	ldr	r3, [r5, #0]
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d0c6      	beq.n	8013b16 <__sflush_r+0x32>
 8013b88:	2b1d      	cmp	r3, #29
 8013b8a:	d001      	beq.n	8013b90 <__sflush_r+0xac>
 8013b8c:	2b16      	cmp	r3, #22
 8013b8e:	d11e      	bne.n	8013bce <__sflush_r+0xea>
 8013b90:	602f      	str	r7, [r5, #0]
 8013b92:	2000      	movs	r0, #0
 8013b94:	e022      	b.n	8013bdc <__sflush_r+0xf8>
 8013b96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013b9a:	b21b      	sxth	r3, r3
 8013b9c:	e01b      	b.n	8013bd6 <__sflush_r+0xf2>
 8013b9e:	690f      	ldr	r7, [r1, #16]
 8013ba0:	2f00      	cmp	r7, #0
 8013ba2:	d0f6      	beq.n	8013b92 <__sflush_r+0xae>
 8013ba4:	0793      	lsls	r3, r2, #30
 8013ba6:	680e      	ldr	r6, [r1, #0]
 8013ba8:	bf08      	it	eq
 8013baa:	694b      	ldreq	r3, [r1, #20]
 8013bac:	600f      	str	r7, [r1, #0]
 8013bae:	bf18      	it	ne
 8013bb0:	2300      	movne	r3, #0
 8013bb2:	eba6 0807 	sub.w	r8, r6, r7
 8013bb6:	608b      	str	r3, [r1, #8]
 8013bb8:	f1b8 0f00 	cmp.w	r8, #0
 8013bbc:	dde9      	ble.n	8013b92 <__sflush_r+0xae>
 8013bbe:	6a21      	ldr	r1, [r4, #32]
 8013bc0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013bc2:	4643      	mov	r3, r8
 8013bc4:	463a      	mov	r2, r7
 8013bc6:	4628      	mov	r0, r5
 8013bc8:	47b0      	blx	r6
 8013bca:	2800      	cmp	r0, #0
 8013bcc:	dc08      	bgt.n	8013be0 <__sflush_r+0xfc>
 8013bce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013bd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013bd6:	81a3      	strh	r3, [r4, #12]
 8013bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8013bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013be0:	4407      	add	r7, r0
 8013be2:	eba8 0800 	sub.w	r8, r8, r0
 8013be6:	e7e7      	b.n	8013bb8 <__sflush_r+0xd4>
 8013be8:	dfbffffe 	.word	0xdfbffffe

08013bec <_fflush_r>:
 8013bec:	b538      	push	{r3, r4, r5, lr}
 8013bee:	690b      	ldr	r3, [r1, #16]
 8013bf0:	4605      	mov	r5, r0
 8013bf2:	460c      	mov	r4, r1
 8013bf4:	b913      	cbnz	r3, 8013bfc <_fflush_r+0x10>
 8013bf6:	2500      	movs	r5, #0
 8013bf8:	4628      	mov	r0, r5
 8013bfa:	bd38      	pop	{r3, r4, r5, pc}
 8013bfc:	b118      	cbz	r0, 8013c06 <_fflush_r+0x1a>
 8013bfe:	6a03      	ldr	r3, [r0, #32]
 8013c00:	b90b      	cbnz	r3, 8013c06 <_fflush_r+0x1a>
 8013c02:	f7fd f8d9 	bl	8010db8 <__sinit>
 8013c06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d0f3      	beq.n	8013bf6 <_fflush_r+0xa>
 8013c0e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013c10:	07d0      	lsls	r0, r2, #31
 8013c12:	d404      	bmi.n	8013c1e <_fflush_r+0x32>
 8013c14:	0599      	lsls	r1, r3, #22
 8013c16:	d402      	bmi.n	8013c1e <_fflush_r+0x32>
 8013c18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013c1a:	f7fd fba4 	bl	8011366 <__retarget_lock_acquire_recursive>
 8013c1e:	4628      	mov	r0, r5
 8013c20:	4621      	mov	r1, r4
 8013c22:	f7ff ff5f 	bl	8013ae4 <__sflush_r>
 8013c26:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013c28:	07da      	lsls	r2, r3, #31
 8013c2a:	4605      	mov	r5, r0
 8013c2c:	d4e4      	bmi.n	8013bf8 <_fflush_r+0xc>
 8013c2e:	89a3      	ldrh	r3, [r4, #12]
 8013c30:	059b      	lsls	r3, r3, #22
 8013c32:	d4e1      	bmi.n	8013bf8 <_fflush_r+0xc>
 8013c34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013c36:	f7fd fb97 	bl	8011368 <__retarget_lock_release_recursive>
 8013c3a:	e7dd      	b.n	8013bf8 <_fflush_r+0xc>

08013c3c <__swhatbuf_r>:
 8013c3c:	b570      	push	{r4, r5, r6, lr}
 8013c3e:	460c      	mov	r4, r1
 8013c40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013c44:	2900      	cmp	r1, #0
 8013c46:	b096      	sub	sp, #88	@ 0x58
 8013c48:	4615      	mov	r5, r2
 8013c4a:	461e      	mov	r6, r3
 8013c4c:	da0d      	bge.n	8013c6a <__swhatbuf_r+0x2e>
 8013c4e:	89a3      	ldrh	r3, [r4, #12]
 8013c50:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013c54:	f04f 0100 	mov.w	r1, #0
 8013c58:	bf14      	ite	ne
 8013c5a:	2340      	movne	r3, #64	@ 0x40
 8013c5c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013c60:	2000      	movs	r0, #0
 8013c62:	6031      	str	r1, [r6, #0]
 8013c64:	602b      	str	r3, [r5, #0]
 8013c66:	b016      	add	sp, #88	@ 0x58
 8013c68:	bd70      	pop	{r4, r5, r6, pc}
 8013c6a:	466a      	mov	r2, sp
 8013c6c:	f000 f874 	bl	8013d58 <_fstat_r>
 8013c70:	2800      	cmp	r0, #0
 8013c72:	dbec      	blt.n	8013c4e <__swhatbuf_r+0x12>
 8013c74:	9901      	ldr	r1, [sp, #4]
 8013c76:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013c7a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013c7e:	4259      	negs	r1, r3
 8013c80:	4159      	adcs	r1, r3
 8013c82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013c86:	e7eb      	b.n	8013c60 <__swhatbuf_r+0x24>

08013c88 <__smakebuf_r>:
 8013c88:	898b      	ldrh	r3, [r1, #12]
 8013c8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013c8c:	079d      	lsls	r5, r3, #30
 8013c8e:	4606      	mov	r6, r0
 8013c90:	460c      	mov	r4, r1
 8013c92:	d507      	bpl.n	8013ca4 <__smakebuf_r+0x1c>
 8013c94:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013c98:	6023      	str	r3, [r4, #0]
 8013c9a:	6123      	str	r3, [r4, #16]
 8013c9c:	2301      	movs	r3, #1
 8013c9e:	6163      	str	r3, [r4, #20]
 8013ca0:	b003      	add	sp, #12
 8013ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013ca4:	ab01      	add	r3, sp, #4
 8013ca6:	466a      	mov	r2, sp
 8013ca8:	f7ff ffc8 	bl	8013c3c <__swhatbuf_r>
 8013cac:	9f00      	ldr	r7, [sp, #0]
 8013cae:	4605      	mov	r5, r0
 8013cb0:	4639      	mov	r1, r7
 8013cb2:	4630      	mov	r0, r6
 8013cb4:	f7fc f926 	bl	800ff04 <_malloc_r>
 8013cb8:	b948      	cbnz	r0, 8013cce <__smakebuf_r+0x46>
 8013cba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013cbe:	059a      	lsls	r2, r3, #22
 8013cc0:	d4ee      	bmi.n	8013ca0 <__smakebuf_r+0x18>
 8013cc2:	f023 0303 	bic.w	r3, r3, #3
 8013cc6:	f043 0302 	orr.w	r3, r3, #2
 8013cca:	81a3      	strh	r3, [r4, #12]
 8013ccc:	e7e2      	b.n	8013c94 <__smakebuf_r+0xc>
 8013cce:	89a3      	ldrh	r3, [r4, #12]
 8013cd0:	6020      	str	r0, [r4, #0]
 8013cd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013cd6:	81a3      	strh	r3, [r4, #12]
 8013cd8:	9b01      	ldr	r3, [sp, #4]
 8013cda:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013cde:	b15b      	cbz	r3, 8013cf8 <__smakebuf_r+0x70>
 8013ce0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013ce4:	4630      	mov	r0, r6
 8013ce6:	f000 f849 	bl	8013d7c <_isatty_r>
 8013cea:	b128      	cbz	r0, 8013cf8 <__smakebuf_r+0x70>
 8013cec:	89a3      	ldrh	r3, [r4, #12]
 8013cee:	f023 0303 	bic.w	r3, r3, #3
 8013cf2:	f043 0301 	orr.w	r3, r3, #1
 8013cf6:	81a3      	strh	r3, [r4, #12]
 8013cf8:	89a3      	ldrh	r3, [r4, #12]
 8013cfa:	431d      	orrs	r5, r3
 8013cfc:	81a5      	strh	r5, [r4, #12]
 8013cfe:	e7cf      	b.n	8013ca0 <__smakebuf_r+0x18>

08013d00 <memmove>:
 8013d00:	4288      	cmp	r0, r1
 8013d02:	b510      	push	{r4, lr}
 8013d04:	eb01 0402 	add.w	r4, r1, r2
 8013d08:	d902      	bls.n	8013d10 <memmove+0x10>
 8013d0a:	4284      	cmp	r4, r0
 8013d0c:	4623      	mov	r3, r4
 8013d0e:	d807      	bhi.n	8013d20 <memmove+0x20>
 8013d10:	1e43      	subs	r3, r0, #1
 8013d12:	42a1      	cmp	r1, r4
 8013d14:	d008      	beq.n	8013d28 <memmove+0x28>
 8013d16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013d1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013d1e:	e7f8      	b.n	8013d12 <memmove+0x12>
 8013d20:	4402      	add	r2, r0
 8013d22:	4601      	mov	r1, r0
 8013d24:	428a      	cmp	r2, r1
 8013d26:	d100      	bne.n	8013d2a <memmove+0x2a>
 8013d28:	bd10      	pop	{r4, pc}
 8013d2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013d2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013d32:	e7f7      	b.n	8013d24 <memmove+0x24>

08013d34 <strncmp>:
 8013d34:	b510      	push	{r4, lr}
 8013d36:	b16a      	cbz	r2, 8013d54 <strncmp+0x20>
 8013d38:	3901      	subs	r1, #1
 8013d3a:	1884      	adds	r4, r0, r2
 8013d3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013d40:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8013d44:	429a      	cmp	r2, r3
 8013d46:	d103      	bne.n	8013d50 <strncmp+0x1c>
 8013d48:	42a0      	cmp	r0, r4
 8013d4a:	d001      	beq.n	8013d50 <strncmp+0x1c>
 8013d4c:	2a00      	cmp	r2, #0
 8013d4e:	d1f5      	bne.n	8013d3c <strncmp+0x8>
 8013d50:	1ad0      	subs	r0, r2, r3
 8013d52:	bd10      	pop	{r4, pc}
 8013d54:	4610      	mov	r0, r2
 8013d56:	e7fc      	b.n	8013d52 <strncmp+0x1e>

08013d58 <_fstat_r>:
 8013d58:	b538      	push	{r3, r4, r5, lr}
 8013d5a:	4d07      	ldr	r5, [pc, #28]	@ (8013d78 <_fstat_r+0x20>)
 8013d5c:	2300      	movs	r3, #0
 8013d5e:	4604      	mov	r4, r0
 8013d60:	4608      	mov	r0, r1
 8013d62:	4611      	mov	r1, r2
 8013d64:	602b      	str	r3, [r5, #0]
 8013d66:	f7ee f98d 	bl	8002084 <_fstat>
 8013d6a:	1c43      	adds	r3, r0, #1
 8013d6c:	d102      	bne.n	8013d74 <_fstat_r+0x1c>
 8013d6e:	682b      	ldr	r3, [r5, #0]
 8013d70:	b103      	cbz	r3, 8013d74 <_fstat_r+0x1c>
 8013d72:	6023      	str	r3, [r4, #0]
 8013d74:	bd38      	pop	{r3, r4, r5, pc}
 8013d76:	bf00      	nop
 8013d78:	24004f78 	.word	0x24004f78

08013d7c <_isatty_r>:
 8013d7c:	b538      	push	{r3, r4, r5, lr}
 8013d7e:	4d06      	ldr	r5, [pc, #24]	@ (8013d98 <_isatty_r+0x1c>)
 8013d80:	2300      	movs	r3, #0
 8013d82:	4604      	mov	r4, r0
 8013d84:	4608      	mov	r0, r1
 8013d86:	602b      	str	r3, [r5, #0]
 8013d88:	f7ee f98c 	bl	80020a4 <_isatty>
 8013d8c:	1c43      	adds	r3, r0, #1
 8013d8e:	d102      	bne.n	8013d96 <_isatty_r+0x1a>
 8013d90:	682b      	ldr	r3, [r5, #0]
 8013d92:	b103      	cbz	r3, 8013d96 <_isatty_r+0x1a>
 8013d94:	6023      	str	r3, [r4, #0]
 8013d96:	bd38      	pop	{r3, r4, r5, pc}
 8013d98:	24004f78 	.word	0x24004f78
 8013d9c:	00000000 	.word	0x00000000

08013da0 <nan>:
 8013da0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8013da8 <nan+0x8>
 8013da4:	4770      	bx	lr
 8013da6:	bf00      	nop
 8013da8:	00000000 	.word	0x00000000
 8013dac:	7ff80000 	.word	0x7ff80000

08013db0 <_calloc_r>:
 8013db0:	b570      	push	{r4, r5, r6, lr}
 8013db2:	fba1 5402 	umull	r5, r4, r1, r2
 8013db6:	b93c      	cbnz	r4, 8013dc8 <_calloc_r+0x18>
 8013db8:	4629      	mov	r1, r5
 8013dba:	f7fc f8a3 	bl	800ff04 <_malloc_r>
 8013dbe:	4606      	mov	r6, r0
 8013dc0:	b928      	cbnz	r0, 8013dce <_calloc_r+0x1e>
 8013dc2:	2600      	movs	r6, #0
 8013dc4:	4630      	mov	r0, r6
 8013dc6:	bd70      	pop	{r4, r5, r6, pc}
 8013dc8:	220c      	movs	r2, #12
 8013dca:	6002      	str	r2, [r0, #0]
 8013dcc:	e7f9      	b.n	8013dc2 <_calloc_r+0x12>
 8013dce:	462a      	mov	r2, r5
 8013dd0:	4621      	mov	r1, r4
 8013dd2:	f7fd f9a1 	bl	8011118 <memset>
 8013dd6:	e7f5      	b.n	8013dc4 <_calloc_r+0x14>

08013dd8 <rshift>:
 8013dd8:	6903      	ldr	r3, [r0, #16]
 8013dda:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8013dde:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013de2:	ea4f 1261 	mov.w	r2, r1, asr #5
 8013de6:	f100 0414 	add.w	r4, r0, #20
 8013dea:	dd45      	ble.n	8013e78 <rshift+0xa0>
 8013dec:	f011 011f 	ands.w	r1, r1, #31
 8013df0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8013df4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8013df8:	d10c      	bne.n	8013e14 <rshift+0x3c>
 8013dfa:	f100 0710 	add.w	r7, r0, #16
 8013dfe:	4629      	mov	r1, r5
 8013e00:	42b1      	cmp	r1, r6
 8013e02:	d334      	bcc.n	8013e6e <rshift+0x96>
 8013e04:	1a9b      	subs	r3, r3, r2
 8013e06:	009b      	lsls	r3, r3, #2
 8013e08:	1eea      	subs	r2, r5, #3
 8013e0a:	4296      	cmp	r6, r2
 8013e0c:	bf38      	it	cc
 8013e0e:	2300      	movcc	r3, #0
 8013e10:	4423      	add	r3, r4
 8013e12:	e015      	b.n	8013e40 <rshift+0x68>
 8013e14:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8013e18:	f1c1 0820 	rsb	r8, r1, #32
 8013e1c:	40cf      	lsrs	r7, r1
 8013e1e:	f105 0e04 	add.w	lr, r5, #4
 8013e22:	46a1      	mov	r9, r4
 8013e24:	4576      	cmp	r6, lr
 8013e26:	46f4      	mov	ip, lr
 8013e28:	d815      	bhi.n	8013e56 <rshift+0x7e>
 8013e2a:	1a9a      	subs	r2, r3, r2
 8013e2c:	0092      	lsls	r2, r2, #2
 8013e2e:	3a04      	subs	r2, #4
 8013e30:	3501      	adds	r5, #1
 8013e32:	42ae      	cmp	r6, r5
 8013e34:	bf38      	it	cc
 8013e36:	2200      	movcc	r2, #0
 8013e38:	18a3      	adds	r3, r4, r2
 8013e3a:	50a7      	str	r7, [r4, r2]
 8013e3c:	b107      	cbz	r7, 8013e40 <rshift+0x68>
 8013e3e:	3304      	adds	r3, #4
 8013e40:	1b1a      	subs	r2, r3, r4
 8013e42:	42a3      	cmp	r3, r4
 8013e44:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8013e48:	bf08      	it	eq
 8013e4a:	2300      	moveq	r3, #0
 8013e4c:	6102      	str	r2, [r0, #16]
 8013e4e:	bf08      	it	eq
 8013e50:	6143      	streq	r3, [r0, #20]
 8013e52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013e56:	f8dc c000 	ldr.w	ip, [ip]
 8013e5a:	fa0c fc08 	lsl.w	ip, ip, r8
 8013e5e:	ea4c 0707 	orr.w	r7, ip, r7
 8013e62:	f849 7b04 	str.w	r7, [r9], #4
 8013e66:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013e6a:	40cf      	lsrs	r7, r1
 8013e6c:	e7da      	b.n	8013e24 <rshift+0x4c>
 8013e6e:	f851 cb04 	ldr.w	ip, [r1], #4
 8013e72:	f847 cf04 	str.w	ip, [r7, #4]!
 8013e76:	e7c3      	b.n	8013e00 <rshift+0x28>
 8013e78:	4623      	mov	r3, r4
 8013e7a:	e7e1      	b.n	8013e40 <rshift+0x68>

08013e7c <__hexdig_fun>:
 8013e7c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8013e80:	2b09      	cmp	r3, #9
 8013e82:	d802      	bhi.n	8013e8a <__hexdig_fun+0xe>
 8013e84:	3820      	subs	r0, #32
 8013e86:	b2c0      	uxtb	r0, r0
 8013e88:	4770      	bx	lr
 8013e8a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8013e8e:	2b05      	cmp	r3, #5
 8013e90:	d801      	bhi.n	8013e96 <__hexdig_fun+0x1a>
 8013e92:	3847      	subs	r0, #71	@ 0x47
 8013e94:	e7f7      	b.n	8013e86 <__hexdig_fun+0xa>
 8013e96:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8013e9a:	2b05      	cmp	r3, #5
 8013e9c:	d801      	bhi.n	8013ea2 <__hexdig_fun+0x26>
 8013e9e:	3827      	subs	r0, #39	@ 0x27
 8013ea0:	e7f1      	b.n	8013e86 <__hexdig_fun+0xa>
 8013ea2:	2000      	movs	r0, #0
 8013ea4:	4770      	bx	lr
	...

08013ea8 <__gethex>:
 8013ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013eac:	b085      	sub	sp, #20
 8013eae:	468a      	mov	sl, r1
 8013eb0:	9302      	str	r3, [sp, #8]
 8013eb2:	680b      	ldr	r3, [r1, #0]
 8013eb4:	9001      	str	r0, [sp, #4]
 8013eb6:	4690      	mov	r8, r2
 8013eb8:	1c9c      	adds	r4, r3, #2
 8013eba:	46a1      	mov	r9, r4
 8013ebc:	f814 0b01 	ldrb.w	r0, [r4], #1
 8013ec0:	2830      	cmp	r0, #48	@ 0x30
 8013ec2:	d0fa      	beq.n	8013eba <__gethex+0x12>
 8013ec4:	eba9 0303 	sub.w	r3, r9, r3
 8013ec8:	f1a3 0b02 	sub.w	fp, r3, #2
 8013ecc:	f7ff ffd6 	bl	8013e7c <__hexdig_fun>
 8013ed0:	4605      	mov	r5, r0
 8013ed2:	2800      	cmp	r0, #0
 8013ed4:	d168      	bne.n	8013fa8 <__gethex+0x100>
 8013ed6:	49a0      	ldr	r1, [pc, #640]	@ (8014158 <__gethex+0x2b0>)
 8013ed8:	2201      	movs	r2, #1
 8013eda:	4648      	mov	r0, r9
 8013edc:	f7ff ff2a 	bl	8013d34 <strncmp>
 8013ee0:	4607      	mov	r7, r0
 8013ee2:	2800      	cmp	r0, #0
 8013ee4:	d167      	bne.n	8013fb6 <__gethex+0x10e>
 8013ee6:	f899 0001 	ldrb.w	r0, [r9, #1]
 8013eea:	4626      	mov	r6, r4
 8013eec:	f7ff ffc6 	bl	8013e7c <__hexdig_fun>
 8013ef0:	2800      	cmp	r0, #0
 8013ef2:	d062      	beq.n	8013fba <__gethex+0x112>
 8013ef4:	4623      	mov	r3, r4
 8013ef6:	7818      	ldrb	r0, [r3, #0]
 8013ef8:	2830      	cmp	r0, #48	@ 0x30
 8013efa:	4699      	mov	r9, r3
 8013efc:	f103 0301 	add.w	r3, r3, #1
 8013f00:	d0f9      	beq.n	8013ef6 <__gethex+0x4e>
 8013f02:	f7ff ffbb 	bl	8013e7c <__hexdig_fun>
 8013f06:	fab0 f580 	clz	r5, r0
 8013f0a:	096d      	lsrs	r5, r5, #5
 8013f0c:	f04f 0b01 	mov.w	fp, #1
 8013f10:	464a      	mov	r2, r9
 8013f12:	4616      	mov	r6, r2
 8013f14:	3201      	adds	r2, #1
 8013f16:	7830      	ldrb	r0, [r6, #0]
 8013f18:	f7ff ffb0 	bl	8013e7c <__hexdig_fun>
 8013f1c:	2800      	cmp	r0, #0
 8013f1e:	d1f8      	bne.n	8013f12 <__gethex+0x6a>
 8013f20:	498d      	ldr	r1, [pc, #564]	@ (8014158 <__gethex+0x2b0>)
 8013f22:	2201      	movs	r2, #1
 8013f24:	4630      	mov	r0, r6
 8013f26:	f7ff ff05 	bl	8013d34 <strncmp>
 8013f2a:	2800      	cmp	r0, #0
 8013f2c:	d13f      	bne.n	8013fae <__gethex+0x106>
 8013f2e:	b944      	cbnz	r4, 8013f42 <__gethex+0x9a>
 8013f30:	1c74      	adds	r4, r6, #1
 8013f32:	4622      	mov	r2, r4
 8013f34:	4616      	mov	r6, r2
 8013f36:	3201      	adds	r2, #1
 8013f38:	7830      	ldrb	r0, [r6, #0]
 8013f3a:	f7ff ff9f 	bl	8013e7c <__hexdig_fun>
 8013f3e:	2800      	cmp	r0, #0
 8013f40:	d1f8      	bne.n	8013f34 <__gethex+0x8c>
 8013f42:	1ba4      	subs	r4, r4, r6
 8013f44:	00a7      	lsls	r7, r4, #2
 8013f46:	7833      	ldrb	r3, [r6, #0]
 8013f48:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8013f4c:	2b50      	cmp	r3, #80	@ 0x50
 8013f4e:	d13e      	bne.n	8013fce <__gethex+0x126>
 8013f50:	7873      	ldrb	r3, [r6, #1]
 8013f52:	2b2b      	cmp	r3, #43	@ 0x2b
 8013f54:	d033      	beq.n	8013fbe <__gethex+0x116>
 8013f56:	2b2d      	cmp	r3, #45	@ 0x2d
 8013f58:	d034      	beq.n	8013fc4 <__gethex+0x11c>
 8013f5a:	1c71      	adds	r1, r6, #1
 8013f5c:	2400      	movs	r4, #0
 8013f5e:	7808      	ldrb	r0, [r1, #0]
 8013f60:	f7ff ff8c 	bl	8013e7c <__hexdig_fun>
 8013f64:	1e43      	subs	r3, r0, #1
 8013f66:	b2db      	uxtb	r3, r3
 8013f68:	2b18      	cmp	r3, #24
 8013f6a:	d830      	bhi.n	8013fce <__gethex+0x126>
 8013f6c:	f1a0 0210 	sub.w	r2, r0, #16
 8013f70:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013f74:	f7ff ff82 	bl	8013e7c <__hexdig_fun>
 8013f78:	f100 3cff 	add.w	ip, r0, #4294967295
 8013f7c:	fa5f fc8c 	uxtb.w	ip, ip
 8013f80:	f1bc 0f18 	cmp.w	ip, #24
 8013f84:	f04f 030a 	mov.w	r3, #10
 8013f88:	d91e      	bls.n	8013fc8 <__gethex+0x120>
 8013f8a:	b104      	cbz	r4, 8013f8e <__gethex+0xe6>
 8013f8c:	4252      	negs	r2, r2
 8013f8e:	4417      	add	r7, r2
 8013f90:	f8ca 1000 	str.w	r1, [sl]
 8013f94:	b1ed      	cbz	r5, 8013fd2 <__gethex+0x12a>
 8013f96:	f1bb 0f00 	cmp.w	fp, #0
 8013f9a:	bf0c      	ite	eq
 8013f9c:	2506      	moveq	r5, #6
 8013f9e:	2500      	movne	r5, #0
 8013fa0:	4628      	mov	r0, r5
 8013fa2:	b005      	add	sp, #20
 8013fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fa8:	2500      	movs	r5, #0
 8013faa:	462c      	mov	r4, r5
 8013fac:	e7b0      	b.n	8013f10 <__gethex+0x68>
 8013fae:	2c00      	cmp	r4, #0
 8013fb0:	d1c7      	bne.n	8013f42 <__gethex+0x9a>
 8013fb2:	4627      	mov	r7, r4
 8013fb4:	e7c7      	b.n	8013f46 <__gethex+0x9e>
 8013fb6:	464e      	mov	r6, r9
 8013fb8:	462f      	mov	r7, r5
 8013fba:	2501      	movs	r5, #1
 8013fbc:	e7c3      	b.n	8013f46 <__gethex+0x9e>
 8013fbe:	2400      	movs	r4, #0
 8013fc0:	1cb1      	adds	r1, r6, #2
 8013fc2:	e7cc      	b.n	8013f5e <__gethex+0xb6>
 8013fc4:	2401      	movs	r4, #1
 8013fc6:	e7fb      	b.n	8013fc0 <__gethex+0x118>
 8013fc8:	fb03 0002 	mla	r0, r3, r2, r0
 8013fcc:	e7ce      	b.n	8013f6c <__gethex+0xc4>
 8013fce:	4631      	mov	r1, r6
 8013fd0:	e7de      	b.n	8013f90 <__gethex+0xe8>
 8013fd2:	eba6 0309 	sub.w	r3, r6, r9
 8013fd6:	3b01      	subs	r3, #1
 8013fd8:	4629      	mov	r1, r5
 8013fda:	2b07      	cmp	r3, #7
 8013fdc:	dc0a      	bgt.n	8013ff4 <__gethex+0x14c>
 8013fde:	9801      	ldr	r0, [sp, #4]
 8013fe0:	f7fe f802 	bl	8011fe8 <_Balloc>
 8013fe4:	4604      	mov	r4, r0
 8013fe6:	b940      	cbnz	r0, 8013ffa <__gethex+0x152>
 8013fe8:	4b5c      	ldr	r3, [pc, #368]	@ (801415c <__gethex+0x2b4>)
 8013fea:	4602      	mov	r2, r0
 8013fec:	21e4      	movs	r1, #228	@ 0xe4
 8013fee:	485c      	ldr	r0, [pc, #368]	@ (8014160 <__gethex+0x2b8>)
 8013ff0:	f7fb ff38 	bl	800fe64 <__assert_func>
 8013ff4:	3101      	adds	r1, #1
 8013ff6:	105b      	asrs	r3, r3, #1
 8013ff8:	e7ef      	b.n	8013fda <__gethex+0x132>
 8013ffa:	f100 0a14 	add.w	sl, r0, #20
 8013ffe:	2300      	movs	r3, #0
 8014000:	4655      	mov	r5, sl
 8014002:	469b      	mov	fp, r3
 8014004:	45b1      	cmp	r9, r6
 8014006:	d337      	bcc.n	8014078 <__gethex+0x1d0>
 8014008:	f845 bb04 	str.w	fp, [r5], #4
 801400c:	eba5 050a 	sub.w	r5, r5, sl
 8014010:	10ad      	asrs	r5, r5, #2
 8014012:	6125      	str	r5, [r4, #16]
 8014014:	4658      	mov	r0, fp
 8014016:	f7fe f8d9 	bl	80121cc <__hi0bits>
 801401a:	016d      	lsls	r5, r5, #5
 801401c:	f8d8 6000 	ldr.w	r6, [r8]
 8014020:	1a2d      	subs	r5, r5, r0
 8014022:	42b5      	cmp	r5, r6
 8014024:	dd54      	ble.n	80140d0 <__gethex+0x228>
 8014026:	1bad      	subs	r5, r5, r6
 8014028:	4629      	mov	r1, r5
 801402a:	4620      	mov	r0, r4
 801402c:	f7fe fc6a 	bl	8012904 <__any_on>
 8014030:	4681      	mov	r9, r0
 8014032:	b178      	cbz	r0, 8014054 <__gethex+0x1ac>
 8014034:	1e6b      	subs	r3, r5, #1
 8014036:	1159      	asrs	r1, r3, #5
 8014038:	f003 021f 	and.w	r2, r3, #31
 801403c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8014040:	f04f 0901 	mov.w	r9, #1
 8014044:	fa09 f202 	lsl.w	r2, r9, r2
 8014048:	420a      	tst	r2, r1
 801404a:	d003      	beq.n	8014054 <__gethex+0x1ac>
 801404c:	454b      	cmp	r3, r9
 801404e:	dc36      	bgt.n	80140be <__gethex+0x216>
 8014050:	f04f 0902 	mov.w	r9, #2
 8014054:	4629      	mov	r1, r5
 8014056:	4620      	mov	r0, r4
 8014058:	f7ff febe 	bl	8013dd8 <rshift>
 801405c:	442f      	add	r7, r5
 801405e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014062:	42bb      	cmp	r3, r7
 8014064:	da42      	bge.n	80140ec <__gethex+0x244>
 8014066:	9801      	ldr	r0, [sp, #4]
 8014068:	4621      	mov	r1, r4
 801406a:	f7fd fffd 	bl	8012068 <_Bfree>
 801406e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014070:	2300      	movs	r3, #0
 8014072:	6013      	str	r3, [r2, #0]
 8014074:	25a3      	movs	r5, #163	@ 0xa3
 8014076:	e793      	b.n	8013fa0 <__gethex+0xf8>
 8014078:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801407c:	2a2e      	cmp	r2, #46	@ 0x2e
 801407e:	d012      	beq.n	80140a6 <__gethex+0x1fe>
 8014080:	2b20      	cmp	r3, #32
 8014082:	d104      	bne.n	801408e <__gethex+0x1e6>
 8014084:	f845 bb04 	str.w	fp, [r5], #4
 8014088:	f04f 0b00 	mov.w	fp, #0
 801408c:	465b      	mov	r3, fp
 801408e:	7830      	ldrb	r0, [r6, #0]
 8014090:	9303      	str	r3, [sp, #12]
 8014092:	f7ff fef3 	bl	8013e7c <__hexdig_fun>
 8014096:	9b03      	ldr	r3, [sp, #12]
 8014098:	f000 000f 	and.w	r0, r0, #15
 801409c:	4098      	lsls	r0, r3
 801409e:	ea4b 0b00 	orr.w	fp, fp, r0
 80140a2:	3304      	adds	r3, #4
 80140a4:	e7ae      	b.n	8014004 <__gethex+0x15c>
 80140a6:	45b1      	cmp	r9, r6
 80140a8:	d8ea      	bhi.n	8014080 <__gethex+0x1d8>
 80140aa:	492b      	ldr	r1, [pc, #172]	@ (8014158 <__gethex+0x2b0>)
 80140ac:	9303      	str	r3, [sp, #12]
 80140ae:	2201      	movs	r2, #1
 80140b0:	4630      	mov	r0, r6
 80140b2:	f7ff fe3f 	bl	8013d34 <strncmp>
 80140b6:	9b03      	ldr	r3, [sp, #12]
 80140b8:	2800      	cmp	r0, #0
 80140ba:	d1e1      	bne.n	8014080 <__gethex+0x1d8>
 80140bc:	e7a2      	b.n	8014004 <__gethex+0x15c>
 80140be:	1ea9      	subs	r1, r5, #2
 80140c0:	4620      	mov	r0, r4
 80140c2:	f7fe fc1f 	bl	8012904 <__any_on>
 80140c6:	2800      	cmp	r0, #0
 80140c8:	d0c2      	beq.n	8014050 <__gethex+0x1a8>
 80140ca:	f04f 0903 	mov.w	r9, #3
 80140ce:	e7c1      	b.n	8014054 <__gethex+0x1ac>
 80140d0:	da09      	bge.n	80140e6 <__gethex+0x23e>
 80140d2:	1b75      	subs	r5, r6, r5
 80140d4:	4621      	mov	r1, r4
 80140d6:	9801      	ldr	r0, [sp, #4]
 80140d8:	462a      	mov	r2, r5
 80140da:	f7fe f9dd 	bl	8012498 <__lshift>
 80140de:	1b7f      	subs	r7, r7, r5
 80140e0:	4604      	mov	r4, r0
 80140e2:	f100 0a14 	add.w	sl, r0, #20
 80140e6:	f04f 0900 	mov.w	r9, #0
 80140ea:	e7b8      	b.n	801405e <__gethex+0x1b6>
 80140ec:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80140f0:	42bd      	cmp	r5, r7
 80140f2:	dd6f      	ble.n	80141d4 <__gethex+0x32c>
 80140f4:	1bed      	subs	r5, r5, r7
 80140f6:	42ae      	cmp	r6, r5
 80140f8:	dc34      	bgt.n	8014164 <__gethex+0x2bc>
 80140fa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80140fe:	2b02      	cmp	r3, #2
 8014100:	d022      	beq.n	8014148 <__gethex+0x2a0>
 8014102:	2b03      	cmp	r3, #3
 8014104:	d024      	beq.n	8014150 <__gethex+0x2a8>
 8014106:	2b01      	cmp	r3, #1
 8014108:	d115      	bne.n	8014136 <__gethex+0x28e>
 801410a:	42ae      	cmp	r6, r5
 801410c:	d113      	bne.n	8014136 <__gethex+0x28e>
 801410e:	2e01      	cmp	r6, #1
 8014110:	d10b      	bne.n	801412a <__gethex+0x282>
 8014112:	9a02      	ldr	r2, [sp, #8]
 8014114:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014118:	6013      	str	r3, [r2, #0]
 801411a:	2301      	movs	r3, #1
 801411c:	6123      	str	r3, [r4, #16]
 801411e:	f8ca 3000 	str.w	r3, [sl]
 8014122:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014124:	2562      	movs	r5, #98	@ 0x62
 8014126:	601c      	str	r4, [r3, #0]
 8014128:	e73a      	b.n	8013fa0 <__gethex+0xf8>
 801412a:	1e71      	subs	r1, r6, #1
 801412c:	4620      	mov	r0, r4
 801412e:	f7fe fbe9 	bl	8012904 <__any_on>
 8014132:	2800      	cmp	r0, #0
 8014134:	d1ed      	bne.n	8014112 <__gethex+0x26a>
 8014136:	9801      	ldr	r0, [sp, #4]
 8014138:	4621      	mov	r1, r4
 801413a:	f7fd ff95 	bl	8012068 <_Bfree>
 801413e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014140:	2300      	movs	r3, #0
 8014142:	6013      	str	r3, [r2, #0]
 8014144:	2550      	movs	r5, #80	@ 0x50
 8014146:	e72b      	b.n	8013fa0 <__gethex+0xf8>
 8014148:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801414a:	2b00      	cmp	r3, #0
 801414c:	d1f3      	bne.n	8014136 <__gethex+0x28e>
 801414e:	e7e0      	b.n	8014112 <__gethex+0x26a>
 8014150:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014152:	2b00      	cmp	r3, #0
 8014154:	d1dd      	bne.n	8014112 <__gethex+0x26a>
 8014156:	e7ee      	b.n	8014136 <__gethex+0x28e>
 8014158:	08014df0 	.word	0x08014df0
 801415c:	08014c85 	.word	0x08014c85
 8014160:	08014f62 	.word	0x08014f62
 8014164:	1e6f      	subs	r7, r5, #1
 8014166:	f1b9 0f00 	cmp.w	r9, #0
 801416a:	d130      	bne.n	80141ce <__gethex+0x326>
 801416c:	b127      	cbz	r7, 8014178 <__gethex+0x2d0>
 801416e:	4639      	mov	r1, r7
 8014170:	4620      	mov	r0, r4
 8014172:	f7fe fbc7 	bl	8012904 <__any_on>
 8014176:	4681      	mov	r9, r0
 8014178:	117a      	asrs	r2, r7, #5
 801417a:	2301      	movs	r3, #1
 801417c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8014180:	f007 071f 	and.w	r7, r7, #31
 8014184:	40bb      	lsls	r3, r7
 8014186:	4213      	tst	r3, r2
 8014188:	4629      	mov	r1, r5
 801418a:	4620      	mov	r0, r4
 801418c:	bf18      	it	ne
 801418e:	f049 0902 	orrne.w	r9, r9, #2
 8014192:	f7ff fe21 	bl	8013dd8 <rshift>
 8014196:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801419a:	1b76      	subs	r6, r6, r5
 801419c:	2502      	movs	r5, #2
 801419e:	f1b9 0f00 	cmp.w	r9, #0
 80141a2:	d047      	beq.n	8014234 <__gethex+0x38c>
 80141a4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80141a8:	2b02      	cmp	r3, #2
 80141aa:	d015      	beq.n	80141d8 <__gethex+0x330>
 80141ac:	2b03      	cmp	r3, #3
 80141ae:	d017      	beq.n	80141e0 <__gethex+0x338>
 80141b0:	2b01      	cmp	r3, #1
 80141b2:	d109      	bne.n	80141c8 <__gethex+0x320>
 80141b4:	f019 0f02 	tst.w	r9, #2
 80141b8:	d006      	beq.n	80141c8 <__gethex+0x320>
 80141ba:	f8da 3000 	ldr.w	r3, [sl]
 80141be:	ea49 0903 	orr.w	r9, r9, r3
 80141c2:	f019 0f01 	tst.w	r9, #1
 80141c6:	d10e      	bne.n	80141e6 <__gethex+0x33e>
 80141c8:	f045 0510 	orr.w	r5, r5, #16
 80141cc:	e032      	b.n	8014234 <__gethex+0x38c>
 80141ce:	f04f 0901 	mov.w	r9, #1
 80141d2:	e7d1      	b.n	8014178 <__gethex+0x2d0>
 80141d4:	2501      	movs	r5, #1
 80141d6:	e7e2      	b.n	801419e <__gethex+0x2f6>
 80141d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80141da:	f1c3 0301 	rsb	r3, r3, #1
 80141de:	930f      	str	r3, [sp, #60]	@ 0x3c
 80141e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d0f0      	beq.n	80141c8 <__gethex+0x320>
 80141e6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80141ea:	f104 0314 	add.w	r3, r4, #20
 80141ee:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80141f2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80141f6:	f04f 0c00 	mov.w	ip, #0
 80141fa:	4618      	mov	r0, r3
 80141fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8014200:	f1b2 3fff 	cmp.w	r2, #4294967295
 8014204:	d01b      	beq.n	801423e <__gethex+0x396>
 8014206:	3201      	adds	r2, #1
 8014208:	6002      	str	r2, [r0, #0]
 801420a:	2d02      	cmp	r5, #2
 801420c:	f104 0314 	add.w	r3, r4, #20
 8014210:	d13c      	bne.n	801428c <__gethex+0x3e4>
 8014212:	f8d8 2000 	ldr.w	r2, [r8]
 8014216:	3a01      	subs	r2, #1
 8014218:	42b2      	cmp	r2, r6
 801421a:	d109      	bne.n	8014230 <__gethex+0x388>
 801421c:	1171      	asrs	r1, r6, #5
 801421e:	2201      	movs	r2, #1
 8014220:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014224:	f006 061f 	and.w	r6, r6, #31
 8014228:	fa02 f606 	lsl.w	r6, r2, r6
 801422c:	421e      	tst	r6, r3
 801422e:	d13a      	bne.n	80142a6 <__gethex+0x3fe>
 8014230:	f045 0520 	orr.w	r5, r5, #32
 8014234:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014236:	601c      	str	r4, [r3, #0]
 8014238:	9b02      	ldr	r3, [sp, #8]
 801423a:	601f      	str	r7, [r3, #0]
 801423c:	e6b0      	b.n	8013fa0 <__gethex+0xf8>
 801423e:	4299      	cmp	r1, r3
 8014240:	f843 cc04 	str.w	ip, [r3, #-4]
 8014244:	d8d9      	bhi.n	80141fa <__gethex+0x352>
 8014246:	68a3      	ldr	r3, [r4, #8]
 8014248:	459b      	cmp	fp, r3
 801424a:	db17      	blt.n	801427c <__gethex+0x3d4>
 801424c:	6861      	ldr	r1, [r4, #4]
 801424e:	9801      	ldr	r0, [sp, #4]
 8014250:	3101      	adds	r1, #1
 8014252:	f7fd fec9 	bl	8011fe8 <_Balloc>
 8014256:	4681      	mov	r9, r0
 8014258:	b918      	cbnz	r0, 8014262 <__gethex+0x3ba>
 801425a:	4b1a      	ldr	r3, [pc, #104]	@ (80142c4 <__gethex+0x41c>)
 801425c:	4602      	mov	r2, r0
 801425e:	2184      	movs	r1, #132	@ 0x84
 8014260:	e6c5      	b.n	8013fee <__gethex+0x146>
 8014262:	6922      	ldr	r2, [r4, #16]
 8014264:	3202      	adds	r2, #2
 8014266:	f104 010c 	add.w	r1, r4, #12
 801426a:	0092      	lsls	r2, r2, #2
 801426c:	300c      	adds	r0, #12
 801426e:	f7fd f87c 	bl	801136a <memcpy>
 8014272:	4621      	mov	r1, r4
 8014274:	9801      	ldr	r0, [sp, #4]
 8014276:	f7fd fef7 	bl	8012068 <_Bfree>
 801427a:	464c      	mov	r4, r9
 801427c:	6923      	ldr	r3, [r4, #16]
 801427e:	1c5a      	adds	r2, r3, #1
 8014280:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014284:	6122      	str	r2, [r4, #16]
 8014286:	2201      	movs	r2, #1
 8014288:	615a      	str	r2, [r3, #20]
 801428a:	e7be      	b.n	801420a <__gethex+0x362>
 801428c:	6922      	ldr	r2, [r4, #16]
 801428e:	455a      	cmp	r2, fp
 8014290:	dd0b      	ble.n	80142aa <__gethex+0x402>
 8014292:	2101      	movs	r1, #1
 8014294:	4620      	mov	r0, r4
 8014296:	f7ff fd9f 	bl	8013dd8 <rshift>
 801429a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801429e:	3701      	adds	r7, #1
 80142a0:	42bb      	cmp	r3, r7
 80142a2:	f6ff aee0 	blt.w	8014066 <__gethex+0x1be>
 80142a6:	2501      	movs	r5, #1
 80142a8:	e7c2      	b.n	8014230 <__gethex+0x388>
 80142aa:	f016 061f 	ands.w	r6, r6, #31
 80142ae:	d0fa      	beq.n	80142a6 <__gethex+0x3fe>
 80142b0:	4453      	add	r3, sl
 80142b2:	f1c6 0620 	rsb	r6, r6, #32
 80142b6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80142ba:	f7fd ff87 	bl	80121cc <__hi0bits>
 80142be:	42b0      	cmp	r0, r6
 80142c0:	dbe7      	blt.n	8014292 <__gethex+0x3ea>
 80142c2:	e7f0      	b.n	80142a6 <__gethex+0x3fe>
 80142c4:	08014c85 	.word	0x08014c85

080142c8 <L_shift>:
 80142c8:	f1c2 0208 	rsb	r2, r2, #8
 80142cc:	0092      	lsls	r2, r2, #2
 80142ce:	b570      	push	{r4, r5, r6, lr}
 80142d0:	f1c2 0620 	rsb	r6, r2, #32
 80142d4:	6843      	ldr	r3, [r0, #4]
 80142d6:	6804      	ldr	r4, [r0, #0]
 80142d8:	fa03 f506 	lsl.w	r5, r3, r6
 80142dc:	432c      	orrs	r4, r5
 80142de:	40d3      	lsrs	r3, r2
 80142e0:	6004      	str	r4, [r0, #0]
 80142e2:	f840 3f04 	str.w	r3, [r0, #4]!
 80142e6:	4288      	cmp	r0, r1
 80142e8:	d3f4      	bcc.n	80142d4 <L_shift+0xc>
 80142ea:	bd70      	pop	{r4, r5, r6, pc}

080142ec <__match>:
 80142ec:	b530      	push	{r4, r5, lr}
 80142ee:	6803      	ldr	r3, [r0, #0]
 80142f0:	3301      	adds	r3, #1
 80142f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80142f6:	b914      	cbnz	r4, 80142fe <__match+0x12>
 80142f8:	6003      	str	r3, [r0, #0]
 80142fa:	2001      	movs	r0, #1
 80142fc:	bd30      	pop	{r4, r5, pc}
 80142fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014302:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8014306:	2d19      	cmp	r5, #25
 8014308:	bf98      	it	ls
 801430a:	3220      	addls	r2, #32
 801430c:	42a2      	cmp	r2, r4
 801430e:	d0f0      	beq.n	80142f2 <__match+0x6>
 8014310:	2000      	movs	r0, #0
 8014312:	e7f3      	b.n	80142fc <__match+0x10>

08014314 <__hexnan>:
 8014314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014318:	680b      	ldr	r3, [r1, #0]
 801431a:	6801      	ldr	r1, [r0, #0]
 801431c:	115e      	asrs	r6, r3, #5
 801431e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8014322:	f013 031f 	ands.w	r3, r3, #31
 8014326:	b087      	sub	sp, #28
 8014328:	bf18      	it	ne
 801432a:	3604      	addne	r6, #4
 801432c:	2500      	movs	r5, #0
 801432e:	1f37      	subs	r7, r6, #4
 8014330:	4682      	mov	sl, r0
 8014332:	4690      	mov	r8, r2
 8014334:	9301      	str	r3, [sp, #4]
 8014336:	f846 5c04 	str.w	r5, [r6, #-4]
 801433a:	46b9      	mov	r9, r7
 801433c:	463c      	mov	r4, r7
 801433e:	9502      	str	r5, [sp, #8]
 8014340:	46ab      	mov	fp, r5
 8014342:	784a      	ldrb	r2, [r1, #1]
 8014344:	1c4b      	adds	r3, r1, #1
 8014346:	9303      	str	r3, [sp, #12]
 8014348:	b342      	cbz	r2, 801439c <__hexnan+0x88>
 801434a:	4610      	mov	r0, r2
 801434c:	9105      	str	r1, [sp, #20]
 801434e:	9204      	str	r2, [sp, #16]
 8014350:	f7ff fd94 	bl	8013e7c <__hexdig_fun>
 8014354:	2800      	cmp	r0, #0
 8014356:	d151      	bne.n	80143fc <__hexnan+0xe8>
 8014358:	9a04      	ldr	r2, [sp, #16]
 801435a:	9905      	ldr	r1, [sp, #20]
 801435c:	2a20      	cmp	r2, #32
 801435e:	d818      	bhi.n	8014392 <__hexnan+0x7e>
 8014360:	9b02      	ldr	r3, [sp, #8]
 8014362:	459b      	cmp	fp, r3
 8014364:	dd13      	ble.n	801438e <__hexnan+0x7a>
 8014366:	454c      	cmp	r4, r9
 8014368:	d206      	bcs.n	8014378 <__hexnan+0x64>
 801436a:	2d07      	cmp	r5, #7
 801436c:	dc04      	bgt.n	8014378 <__hexnan+0x64>
 801436e:	462a      	mov	r2, r5
 8014370:	4649      	mov	r1, r9
 8014372:	4620      	mov	r0, r4
 8014374:	f7ff ffa8 	bl	80142c8 <L_shift>
 8014378:	4544      	cmp	r4, r8
 801437a:	d952      	bls.n	8014422 <__hexnan+0x10e>
 801437c:	2300      	movs	r3, #0
 801437e:	f1a4 0904 	sub.w	r9, r4, #4
 8014382:	f844 3c04 	str.w	r3, [r4, #-4]
 8014386:	f8cd b008 	str.w	fp, [sp, #8]
 801438a:	464c      	mov	r4, r9
 801438c:	461d      	mov	r5, r3
 801438e:	9903      	ldr	r1, [sp, #12]
 8014390:	e7d7      	b.n	8014342 <__hexnan+0x2e>
 8014392:	2a29      	cmp	r2, #41	@ 0x29
 8014394:	d157      	bne.n	8014446 <__hexnan+0x132>
 8014396:	3102      	adds	r1, #2
 8014398:	f8ca 1000 	str.w	r1, [sl]
 801439c:	f1bb 0f00 	cmp.w	fp, #0
 80143a0:	d051      	beq.n	8014446 <__hexnan+0x132>
 80143a2:	454c      	cmp	r4, r9
 80143a4:	d206      	bcs.n	80143b4 <__hexnan+0xa0>
 80143a6:	2d07      	cmp	r5, #7
 80143a8:	dc04      	bgt.n	80143b4 <__hexnan+0xa0>
 80143aa:	462a      	mov	r2, r5
 80143ac:	4649      	mov	r1, r9
 80143ae:	4620      	mov	r0, r4
 80143b0:	f7ff ff8a 	bl	80142c8 <L_shift>
 80143b4:	4544      	cmp	r4, r8
 80143b6:	d936      	bls.n	8014426 <__hexnan+0x112>
 80143b8:	f1a8 0204 	sub.w	r2, r8, #4
 80143bc:	4623      	mov	r3, r4
 80143be:	f853 1b04 	ldr.w	r1, [r3], #4
 80143c2:	f842 1f04 	str.w	r1, [r2, #4]!
 80143c6:	429f      	cmp	r7, r3
 80143c8:	d2f9      	bcs.n	80143be <__hexnan+0xaa>
 80143ca:	1b3b      	subs	r3, r7, r4
 80143cc:	f023 0303 	bic.w	r3, r3, #3
 80143d0:	3304      	adds	r3, #4
 80143d2:	3401      	adds	r4, #1
 80143d4:	3e03      	subs	r6, #3
 80143d6:	42b4      	cmp	r4, r6
 80143d8:	bf88      	it	hi
 80143da:	2304      	movhi	r3, #4
 80143dc:	4443      	add	r3, r8
 80143de:	2200      	movs	r2, #0
 80143e0:	f843 2b04 	str.w	r2, [r3], #4
 80143e4:	429f      	cmp	r7, r3
 80143e6:	d2fb      	bcs.n	80143e0 <__hexnan+0xcc>
 80143e8:	683b      	ldr	r3, [r7, #0]
 80143ea:	b91b      	cbnz	r3, 80143f4 <__hexnan+0xe0>
 80143ec:	4547      	cmp	r7, r8
 80143ee:	d128      	bne.n	8014442 <__hexnan+0x12e>
 80143f0:	2301      	movs	r3, #1
 80143f2:	603b      	str	r3, [r7, #0]
 80143f4:	2005      	movs	r0, #5
 80143f6:	b007      	add	sp, #28
 80143f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143fc:	3501      	adds	r5, #1
 80143fe:	2d08      	cmp	r5, #8
 8014400:	f10b 0b01 	add.w	fp, fp, #1
 8014404:	dd06      	ble.n	8014414 <__hexnan+0x100>
 8014406:	4544      	cmp	r4, r8
 8014408:	d9c1      	bls.n	801438e <__hexnan+0x7a>
 801440a:	2300      	movs	r3, #0
 801440c:	f844 3c04 	str.w	r3, [r4, #-4]
 8014410:	2501      	movs	r5, #1
 8014412:	3c04      	subs	r4, #4
 8014414:	6822      	ldr	r2, [r4, #0]
 8014416:	f000 000f 	and.w	r0, r0, #15
 801441a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801441e:	6020      	str	r0, [r4, #0]
 8014420:	e7b5      	b.n	801438e <__hexnan+0x7a>
 8014422:	2508      	movs	r5, #8
 8014424:	e7b3      	b.n	801438e <__hexnan+0x7a>
 8014426:	9b01      	ldr	r3, [sp, #4]
 8014428:	2b00      	cmp	r3, #0
 801442a:	d0dd      	beq.n	80143e8 <__hexnan+0xd4>
 801442c:	f1c3 0320 	rsb	r3, r3, #32
 8014430:	f04f 32ff 	mov.w	r2, #4294967295
 8014434:	40da      	lsrs	r2, r3
 8014436:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801443a:	4013      	ands	r3, r2
 801443c:	f846 3c04 	str.w	r3, [r6, #-4]
 8014440:	e7d2      	b.n	80143e8 <__hexnan+0xd4>
 8014442:	3f04      	subs	r7, #4
 8014444:	e7d0      	b.n	80143e8 <__hexnan+0xd4>
 8014446:	2004      	movs	r0, #4
 8014448:	e7d5      	b.n	80143f6 <__hexnan+0xe2>

0801444a <__ascii_mbtowc>:
 801444a:	b082      	sub	sp, #8
 801444c:	b901      	cbnz	r1, 8014450 <__ascii_mbtowc+0x6>
 801444e:	a901      	add	r1, sp, #4
 8014450:	b142      	cbz	r2, 8014464 <__ascii_mbtowc+0x1a>
 8014452:	b14b      	cbz	r3, 8014468 <__ascii_mbtowc+0x1e>
 8014454:	7813      	ldrb	r3, [r2, #0]
 8014456:	600b      	str	r3, [r1, #0]
 8014458:	7812      	ldrb	r2, [r2, #0]
 801445a:	1e10      	subs	r0, r2, #0
 801445c:	bf18      	it	ne
 801445e:	2001      	movne	r0, #1
 8014460:	b002      	add	sp, #8
 8014462:	4770      	bx	lr
 8014464:	4610      	mov	r0, r2
 8014466:	e7fb      	b.n	8014460 <__ascii_mbtowc+0x16>
 8014468:	f06f 0001 	mvn.w	r0, #1
 801446c:	e7f8      	b.n	8014460 <__ascii_mbtowc+0x16>

0801446e <_realloc_r>:
 801446e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014472:	4680      	mov	r8, r0
 8014474:	4615      	mov	r5, r2
 8014476:	460c      	mov	r4, r1
 8014478:	b921      	cbnz	r1, 8014484 <_realloc_r+0x16>
 801447a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801447e:	4611      	mov	r1, r2
 8014480:	f7fb bd40 	b.w	800ff04 <_malloc_r>
 8014484:	b92a      	cbnz	r2, 8014492 <_realloc_r+0x24>
 8014486:	f7fd fd65 	bl	8011f54 <_free_r>
 801448a:	2400      	movs	r4, #0
 801448c:	4620      	mov	r0, r4
 801448e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014492:	f000 f827 	bl	80144e4 <_malloc_usable_size_r>
 8014496:	4285      	cmp	r5, r0
 8014498:	4606      	mov	r6, r0
 801449a:	d802      	bhi.n	80144a2 <_realloc_r+0x34>
 801449c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80144a0:	d8f4      	bhi.n	801448c <_realloc_r+0x1e>
 80144a2:	4629      	mov	r1, r5
 80144a4:	4640      	mov	r0, r8
 80144a6:	f7fb fd2d 	bl	800ff04 <_malloc_r>
 80144aa:	4607      	mov	r7, r0
 80144ac:	2800      	cmp	r0, #0
 80144ae:	d0ec      	beq.n	801448a <_realloc_r+0x1c>
 80144b0:	42b5      	cmp	r5, r6
 80144b2:	462a      	mov	r2, r5
 80144b4:	4621      	mov	r1, r4
 80144b6:	bf28      	it	cs
 80144b8:	4632      	movcs	r2, r6
 80144ba:	f7fc ff56 	bl	801136a <memcpy>
 80144be:	4621      	mov	r1, r4
 80144c0:	4640      	mov	r0, r8
 80144c2:	f7fd fd47 	bl	8011f54 <_free_r>
 80144c6:	463c      	mov	r4, r7
 80144c8:	e7e0      	b.n	801448c <_realloc_r+0x1e>

080144ca <__ascii_wctomb>:
 80144ca:	4603      	mov	r3, r0
 80144cc:	4608      	mov	r0, r1
 80144ce:	b141      	cbz	r1, 80144e2 <__ascii_wctomb+0x18>
 80144d0:	2aff      	cmp	r2, #255	@ 0xff
 80144d2:	d904      	bls.n	80144de <__ascii_wctomb+0x14>
 80144d4:	228a      	movs	r2, #138	@ 0x8a
 80144d6:	601a      	str	r2, [r3, #0]
 80144d8:	f04f 30ff 	mov.w	r0, #4294967295
 80144dc:	4770      	bx	lr
 80144de:	700a      	strb	r2, [r1, #0]
 80144e0:	2001      	movs	r0, #1
 80144e2:	4770      	bx	lr

080144e4 <_malloc_usable_size_r>:
 80144e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80144e8:	1f18      	subs	r0, r3, #4
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	bfbc      	itt	lt
 80144ee:	580b      	ldrlt	r3, [r1, r0]
 80144f0:	18c0      	addlt	r0, r0, r3
 80144f2:	4770      	bx	lr

080144f4 <_init>:
 80144f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80144f6:	bf00      	nop
 80144f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80144fa:	bc08      	pop	{r3}
 80144fc:	469e      	mov	lr, r3
 80144fe:	4770      	bx	lr

08014500 <_fini>:
 8014500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014502:	bf00      	nop
 8014504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014506:	bc08      	pop	{r3}
 8014508:	469e      	mov	lr, r3
 801450a:	4770      	bx	lr
