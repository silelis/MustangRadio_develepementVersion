
Radio_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ade4  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d0  0800b098  0800b098  0000c098  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b568  0800b568  0000c568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b570  0800b570  0000c570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800b574  0800b574  0000c574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001dc  24000000  0800b578  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004324  240001dc  0800b754  0000d1dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24004500  0800b754  0000d500  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d1dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   000171ad  00000000  00000000  0000d20a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000327f  00000000  00000000  000243b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001160  00000000  00000000  00027638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000d3d  00000000  00000000  00028798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032482  00000000  00000000  000294d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001725f  00000000  00000000  0005b957  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013e453  00000000  00000000  00072bb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001b1009  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005a60  00000000  00000000  001b104c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008b  00000000  00000000  001b6aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240001dc 	.word	0x240001dc
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800b07c 	.word	0x0800b07c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240001e0 	.word	0x240001e0
 80002ec:	0800b07c 	.word	0x0800b07c

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <strlen>:
 8000390:	4603      	mov	r3, r0
 8000392:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000396:	2a00      	cmp	r2, #0
 8000398:	d1fb      	bne.n	8000392 <strlen+0x2>
 800039a:	1a18      	subs	r0, r3, r0
 800039c:	3801      	subs	r0, #1
 800039e:	4770      	bx	lr

080003a0 <__aeabi_drsub>:
 80003a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003a4:	e002      	b.n	80003ac <__adddf3>
 80003a6:	bf00      	nop

080003a8 <__aeabi_dsub>:
 80003a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003ac <__adddf3>:
 80003ac:	b530      	push	{r4, r5, lr}
 80003ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003b6:	ea94 0f05 	teq	r4, r5
 80003ba:	bf08      	it	eq
 80003bc:	ea90 0f02 	teqeq	r0, r2
 80003c0:	bf1f      	itttt	ne
 80003c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d2:	f000 80e2 	beq.w	800059a <__adddf3+0x1ee>
 80003d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003de:	bfb8      	it	lt
 80003e0:	426d      	neglt	r5, r5
 80003e2:	dd0c      	ble.n	80003fe <__adddf3+0x52>
 80003e4:	442c      	add	r4, r5
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	ea82 0000 	eor.w	r0, r2, r0
 80003f2:	ea83 0101 	eor.w	r1, r3, r1
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	2d36      	cmp	r5, #54	@ 0x36
 8000400:	bf88      	it	hi
 8000402:	bd30      	pophi	{r4, r5, pc}
 8000404:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000408:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800040c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000410:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000414:	d002      	beq.n	800041c <__adddf3+0x70>
 8000416:	4240      	negs	r0, r0
 8000418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800041c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000420:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000424:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x84>
 800042a:	4252      	negs	r2, r2
 800042c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000430:	ea94 0f05 	teq	r4, r5
 8000434:	f000 80a7 	beq.w	8000586 <__adddf3+0x1da>
 8000438:	f1a4 0401 	sub.w	r4, r4, #1
 800043c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000440:	db0d      	blt.n	800045e <__adddf3+0xb2>
 8000442:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000446:	fa22 f205 	lsr.w	r2, r2, r5
 800044a:	1880      	adds	r0, r0, r2
 800044c:	f141 0100 	adc.w	r1, r1, #0
 8000450:	fa03 f20e 	lsl.w	r2, r3, lr
 8000454:	1880      	adds	r0, r0, r2
 8000456:	fa43 f305 	asr.w	r3, r3, r5
 800045a:	4159      	adcs	r1, r3
 800045c:	e00e      	b.n	800047c <__adddf3+0xd0>
 800045e:	f1a5 0520 	sub.w	r5, r5, #32
 8000462:	f10e 0e20 	add.w	lr, lr, #32
 8000466:	2a01      	cmp	r2, #1
 8000468:	fa03 fc0e 	lsl.w	ip, r3, lr
 800046c:	bf28      	it	cs
 800046e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000472:	fa43 f305 	asr.w	r3, r3, r5
 8000476:	18c0      	adds	r0, r0, r3
 8000478:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000480:	d507      	bpl.n	8000492 <__adddf3+0xe6>
 8000482:	f04f 0e00 	mov.w	lr, #0
 8000486:	f1dc 0c00 	rsbs	ip, ip, #0
 800048a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800048e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000492:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000496:	d31b      	bcc.n	80004d0 <__adddf3+0x124>
 8000498:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800049c:	d30c      	bcc.n	80004b8 <__adddf3+0x10c>
 800049e:	0849      	lsrs	r1, r1, #1
 80004a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004a8:	f104 0401 	add.w	r4, r4, #1
 80004ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004b4:	f080 809a 	bcs.w	80005ec <__adddf3+0x240>
 80004b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004bc:	bf08      	it	eq
 80004be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c2:	f150 0000 	adcs.w	r0, r0, #0
 80004c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ca:	ea41 0105 	orr.w	r1, r1, r5
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d4:	4140      	adcs	r0, r0
 80004d6:	eb41 0101 	adc.w	r1, r1, r1
 80004da:	3c01      	subs	r4, #1
 80004dc:	bf28      	it	cs
 80004de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004e2:	d2e9      	bcs.n	80004b8 <__adddf3+0x10c>
 80004e4:	f091 0f00 	teq	r1, #0
 80004e8:	bf04      	itt	eq
 80004ea:	4601      	moveq	r1, r0
 80004ec:	2000      	moveq	r0, #0
 80004ee:	fab1 f381 	clz	r3, r1
 80004f2:	bf08      	it	eq
 80004f4:	3320      	addeq	r3, #32
 80004f6:	f1a3 030b 	sub.w	r3, r3, #11
 80004fa:	f1b3 0220 	subs.w	r2, r3, #32
 80004fe:	da0c      	bge.n	800051a <__adddf3+0x16e>
 8000500:	320c      	adds	r2, #12
 8000502:	dd08      	ble.n	8000516 <__adddf3+0x16a>
 8000504:	f102 0c14 	add.w	ip, r2, #20
 8000508:	f1c2 020c 	rsb	r2, r2, #12
 800050c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000510:	fa21 f102 	lsr.w	r1, r1, r2
 8000514:	e00c      	b.n	8000530 <__adddf3+0x184>
 8000516:	f102 0214 	add.w	r2, r2, #20
 800051a:	bfd8      	it	le
 800051c:	f1c2 0c20 	rsble	ip, r2, #32
 8000520:	fa01 f102 	lsl.w	r1, r1, r2
 8000524:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000528:	bfdc      	itt	le
 800052a:	ea41 010c 	orrle.w	r1, r1, ip
 800052e:	4090      	lslle	r0, r2
 8000530:	1ae4      	subs	r4, r4, r3
 8000532:	bfa2      	ittt	ge
 8000534:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000538:	4329      	orrge	r1, r5
 800053a:	bd30      	popge	{r4, r5, pc}
 800053c:	ea6f 0404 	mvn.w	r4, r4
 8000540:	3c1f      	subs	r4, #31
 8000542:	da1c      	bge.n	800057e <__adddf3+0x1d2>
 8000544:	340c      	adds	r4, #12
 8000546:	dc0e      	bgt.n	8000566 <__adddf3+0x1ba>
 8000548:	f104 0414 	add.w	r4, r4, #20
 800054c:	f1c4 0220 	rsb	r2, r4, #32
 8000550:	fa20 f004 	lsr.w	r0, r0, r4
 8000554:	fa01 f302 	lsl.w	r3, r1, r2
 8000558:	ea40 0003 	orr.w	r0, r0, r3
 800055c:	fa21 f304 	lsr.w	r3, r1, r4
 8000560:	ea45 0103 	orr.w	r1, r5, r3
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f1c4 040c 	rsb	r4, r4, #12
 800056a:	f1c4 0220 	rsb	r2, r4, #32
 800056e:	fa20 f002 	lsr.w	r0, r0, r2
 8000572:	fa01 f304 	lsl.w	r3, r1, r4
 8000576:	ea40 0003 	orr.w	r0, r0, r3
 800057a:	4629      	mov	r1, r5
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	fa21 f004 	lsr.w	r0, r1, r4
 8000582:	4629      	mov	r1, r5
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f094 0f00 	teq	r4, #0
 800058a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800058e:	bf06      	itte	eq
 8000590:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000594:	3401      	addeq	r4, #1
 8000596:	3d01      	subne	r5, #1
 8000598:	e74e      	b.n	8000438 <__adddf3+0x8c>
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf18      	it	ne
 80005a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a4:	d029      	beq.n	80005fa <__adddf3+0x24e>
 80005a6:	ea94 0f05 	teq	r4, r5
 80005aa:	bf08      	it	eq
 80005ac:	ea90 0f02 	teqeq	r0, r2
 80005b0:	d005      	beq.n	80005be <__adddf3+0x212>
 80005b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005b6:	bf04      	itt	eq
 80005b8:	4619      	moveq	r1, r3
 80005ba:	4610      	moveq	r0, r2
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	ea91 0f03 	teq	r1, r3
 80005c2:	bf1e      	ittt	ne
 80005c4:	2100      	movne	r1, #0
 80005c6:	2000      	movne	r0, #0
 80005c8:	bd30      	popne	{r4, r5, pc}
 80005ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ce:	d105      	bne.n	80005dc <__adddf3+0x230>
 80005d0:	0040      	lsls	r0, r0, #1
 80005d2:	4149      	adcs	r1, r1
 80005d4:	bf28      	it	cs
 80005d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd30      	pop	{r4, r5, pc}
 80005dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005e0:	bf3c      	itt	cc
 80005e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005e6:	bd30      	popcc	{r4, r5, pc}
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005fe:	bf1a      	itte	ne
 8000600:	4619      	movne	r1, r3
 8000602:	4610      	movne	r0, r2
 8000604:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000608:	bf1c      	itt	ne
 800060a:	460b      	movne	r3, r1
 800060c:	4602      	movne	r2, r0
 800060e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000612:	bf06      	itte	eq
 8000614:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000618:	ea91 0f03 	teqeq	r1, r3
 800061c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop

08000624 <__aeabi_ui2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f04f 0500 	mov.w	r5, #0
 800063c:	f04f 0100 	mov.w	r1, #0
 8000640:	e750      	b.n	80004e4 <__adddf3+0x138>
 8000642:	bf00      	nop

08000644 <__aeabi_i2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800065c:	bf48      	it	mi
 800065e:	4240      	negmi	r0, r0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e73e      	b.n	80004e4 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_f2d>:
 8000668:	0042      	lsls	r2, r0, #1
 800066a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800066e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000672:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000676:	bf1f      	itttt	ne
 8000678:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800067c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000680:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000684:	4770      	bxne	lr
 8000686:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800068a:	bf08      	it	eq
 800068c:	4770      	bxeq	lr
 800068e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000692:	bf04      	itt	eq
 8000694:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000698:	4770      	bxeq	lr
 800069a:	b530      	push	{r4, r5, lr}
 800069c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	e71c      	b.n	80004e4 <__adddf3+0x138>
 80006aa:	bf00      	nop

080006ac <__aeabi_ul2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	e00a      	b.n	80006d2 <__aeabi_l2d+0x16>

080006bc <__aeabi_l2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ca:	d502      	bpl.n	80006d2 <__aeabi_l2d+0x16>
 80006cc:	4240      	negs	r0, r0
 80006ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006de:	f43f aed8 	beq.w	8000492 <__adddf3+0xe6>
 80006e2:	f04f 0203 	mov.w	r2, #3
 80006e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ea:	bf18      	it	ne
 80006ec:	3203      	addne	r2, #3
 80006ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f2:	bf18      	it	ne
 80006f4:	3203      	addne	r2, #3
 80006f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fa:	f1c2 0320 	rsb	r3, r2, #32
 80006fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 fe03 	lsl.w	lr, r1, r3
 800070a:	ea40 000e 	orr.w	r0, r0, lr
 800070e:	fa21 f102 	lsr.w	r1, r1, r2
 8000712:	4414      	add	r4, r2
 8000714:	e6bd      	b.n	8000492 <__adddf3+0xe6>
 8000716:	bf00      	nop

08000718 <__aeabi_uldivmod>:
 8000718:	b953      	cbnz	r3, 8000730 <__aeabi_uldivmod+0x18>
 800071a:	b94a      	cbnz	r2, 8000730 <__aeabi_uldivmod+0x18>
 800071c:	2900      	cmp	r1, #0
 800071e:	bf08      	it	eq
 8000720:	2800      	cmpeq	r0, #0
 8000722:	bf1c      	itt	ne
 8000724:	f04f 31ff 	movne.w	r1, #4294967295
 8000728:	f04f 30ff 	movne.w	r0, #4294967295
 800072c:	f000 b9a2 	b.w	8000a74 <__aeabi_idiv0>
 8000730:	f1ad 0c08 	sub.w	ip, sp, #8
 8000734:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000738:	f000 f83e 	bl	80007b8 <__udivmoddi4>
 800073c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000740:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000744:	b004      	add	sp, #16
 8000746:	4770      	bx	lr

08000748 <__aeabi_d2lz>:
 8000748:	b508      	push	{r3, lr}
 800074a:	4602      	mov	r2, r0
 800074c:	460b      	mov	r3, r1
 800074e:	ec43 2b17 	vmov	d7, r2, r3
 8000752:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800075a:	d403      	bmi.n	8000764 <__aeabi_d2lz+0x1c>
 800075c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000760:	f000 b80a 	b.w	8000778 <__aeabi_d2ulz>
 8000764:	eeb1 7b47 	vneg.f64	d7, d7
 8000768:	ec51 0b17 	vmov	r0, r1, d7
 800076c:	f000 f804 	bl	8000778 <__aeabi_d2ulz>
 8000770:	4240      	negs	r0, r0
 8000772:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000776:	bd08      	pop	{r3, pc}

08000778 <__aeabi_d2ulz>:
 8000778:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007a8 <__aeabi_d2ulz+0x30>
 800077c:	ec41 0b17 	vmov	d7, r0, r1
 8000780:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007b0 <__aeabi_d2ulz+0x38>
 8000784:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000788:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800078c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000790:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000794:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000798:	ee16 1a10 	vmov	r1, s12
 800079c:	ee17 0a90 	vmov	r0, s15
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	f3af 8000 	nop.w
 80007a8:	00000000 	.word	0x00000000
 80007ac:	3df00000 	.word	0x3df00000
 80007b0:	00000000 	.word	0x00000000
 80007b4:	41f00000 	.word	0x41f00000

080007b8 <__udivmoddi4>:
 80007b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007bc:	9d08      	ldr	r5, [sp, #32]
 80007be:	460c      	mov	r4, r1
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d14e      	bne.n	8000862 <__udivmoddi4+0xaa>
 80007c4:	4694      	mov	ip, r2
 80007c6:	458c      	cmp	ip, r1
 80007c8:	4686      	mov	lr, r0
 80007ca:	fab2 f282 	clz	r2, r2
 80007ce:	d962      	bls.n	8000896 <__udivmoddi4+0xde>
 80007d0:	b14a      	cbz	r2, 80007e6 <__udivmoddi4+0x2e>
 80007d2:	f1c2 0320 	rsb	r3, r2, #32
 80007d6:	4091      	lsls	r1, r2
 80007d8:	fa20 f303 	lsr.w	r3, r0, r3
 80007dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007e0:	4319      	orrs	r1, r3
 80007e2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007e6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007ea:	fa1f f68c 	uxth.w	r6, ip
 80007ee:	fbb1 f4f7 	udiv	r4, r1, r7
 80007f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007f6:	fb07 1114 	mls	r1, r7, r4, r1
 80007fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007fe:	fb04 f106 	mul.w	r1, r4, r6
 8000802:	4299      	cmp	r1, r3
 8000804:	d90a      	bls.n	800081c <__udivmoddi4+0x64>
 8000806:	eb1c 0303 	adds.w	r3, ip, r3
 800080a:	f104 30ff 	add.w	r0, r4, #4294967295
 800080e:	f080 8112 	bcs.w	8000a36 <__udivmoddi4+0x27e>
 8000812:	4299      	cmp	r1, r3
 8000814:	f240 810f 	bls.w	8000a36 <__udivmoddi4+0x27e>
 8000818:	3c02      	subs	r4, #2
 800081a:	4463      	add	r3, ip
 800081c:	1a59      	subs	r1, r3, r1
 800081e:	fa1f f38e 	uxth.w	r3, lr
 8000822:	fbb1 f0f7 	udiv	r0, r1, r7
 8000826:	fb07 1110 	mls	r1, r7, r0, r1
 800082a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800082e:	fb00 f606 	mul.w	r6, r0, r6
 8000832:	429e      	cmp	r6, r3
 8000834:	d90a      	bls.n	800084c <__udivmoddi4+0x94>
 8000836:	eb1c 0303 	adds.w	r3, ip, r3
 800083a:	f100 31ff 	add.w	r1, r0, #4294967295
 800083e:	f080 80fc 	bcs.w	8000a3a <__udivmoddi4+0x282>
 8000842:	429e      	cmp	r6, r3
 8000844:	f240 80f9 	bls.w	8000a3a <__udivmoddi4+0x282>
 8000848:	4463      	add	r3, ip
 800084a:	3802      	subs	r0, #2
 800084c:	1b9b      	subs	r3, r3, r6
 800084e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000852:	2100      	movs	r1, #0
 8000854:	b11d      	cbz	r5, 800085e <__udivmoddi4+0xa6>
 8000856:	40d3      	lsrs	r3, r2
 8000858:	2200      	movs	r2, #0
 800085a:	e9c5 3200 	strd	r3, r2, [r5]
 800085e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000862:	428b      	cmp	r3, r1
 8000864:	d905      	bls.n	8000872 <__udivmoddi4+0xba>
 8000866:	b10d      	cbz	r5, 800086c <__udivmoddi4+0xb4>
 8000868:	e9c5 0100 	strd	r0, r1, [r5]
 800086c:	2100      	movs	r1, #0
 800086e:	4608      	mov	r0, r1
 8000870:	e7f5      	b.n	800085e <__udivmoddi4+0xa6>
 8000872:	fab3 f183 	clz	r1, r3
 8000876:	2900      	cmp	r1, #0
 8000878:	d146      	bne.n	8000908 <__udivmoddi4+0x150>
 800087a:	42a3      	cmp	r3, r4
 800087c:	d302      	bcc.n	8000884 <__udivmoddi4+0xcc>
 800087e:	4290      	cmp	r0, r2
 8000880:	f0c0 80f0 	bcc.w	8000a64 <__udivmoddi4+0x2ac>
 8000884:	1a86      	subs	r6, r0, r2
 8000886:	eb64 0303 	sbc.w	r3, r4, r3
 800088a:	2001      	movs	r0, #1
 800088c:	2d00      	cmp	r5, #0
 800088e:	d0e6      	beq.n	800085e <__udivmoddi4+0xa6>
 8000890:	e9c5 6300 	strd	r6, r3, [r5]
 8000894:	e7e3      	b.n	800085e <__udivmoddi4+0xa6>
 8000896:	2a00      	cmp	r2, #0
 8000898:	f040 8090 	bne.w	80009bc <__udivmoddi4+0x204>
 800089c:	eba1 040c 	sub.w	r4, r1, ip
 80008a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008a4:	fa1f f78c 	uxth.w	r7, ip
 80008a8:	2101      	movs	r1, #1
 80008aa:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008b2:	fb08 4416 	mls	r4, r8, r6, r4
 80008b6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008ba:	fb07 f006 	mul.w	r0, r7, r6
 80008be:	4298      	cmp	r0, r3
 80008c0:	d908      	bls.n	80008d4 <__udivmoddi4+0x11c>
 80008c2:	eb1c 0303 	adds.w	r3, ip, r3
 80008c6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ca:	d202      	bcs.n	80008d2 <__udivmoddi4+0x11a>
 80008cc:	4298      	cmp	r0, r3
 80008ce:	f200 80cd 	bhi.w	8000a6c <__udivmoddi4+0x2b4>
 80008d2:	4626      	mov	r6, r4
 80008d4:	1a1c      	subs	r4, r3, r0
 80008d6:	fa1f f38e 	uxth.w	r3, lr
 80008da:	fbb4 f0f8 	udiv	r0, r4, r8
 80008de:	fb08 4410 	mls	r4, r8, r0, r4
 80008e2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008e6:	fb00 f707 	mul.w	r7, r0, r7
 80008ea:	429f      	cmp	r7, r3
 80008ec:	d908      	bls.n	8000900 <__udivmoddi4+0x148>
 80008ee:	eb1c 0303 	adds.w	r3, ip, r3
 80008f2:	f100 34ff 	add.w	r4, r0, #4294967295
 80008f6:	d202      	bcs.n	80008fe <__udivmoddi4+0x146>
 80008f8:	429f      	cmp	r7, r3
 80008fa:	f200 80b0 	bhi.w	8000a5e <__udivmoddi4+0x2a6>
 80008fe:	4620      	mov	r0, r4
 8000900:	1bdb      	subs	r3, r3, r7
 8000902:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000906:	e7a5      	b.n	8000854 <__udivmoddi4+0x9c>
 8000908:	f1c1 0620 	rsb	r6, r1, #32
 800090c:	408b      	lsls	r3, r1
 800090e:	fa22 f706 	lsr.w	r7, r2, r6
 8000912:	431f      	orrs	r7, r3
 8000914:	fa20 fc06 	lsr.w	ip, r0, r6
 8000918:	fa04 f301 	lsl.w	r3, r4, r1
 800091c:	ea43 030c 	orr.w	r3, r3, ip
 8000920:	40f4      	lsrs	r4, r6
 8000922:	fa00 f801 	lsl.w	r8, r0, r1
 8000926:	0c38      	lsrs	r0, r7, #16
 8000928:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800092c:	fbb4 fef0 	udiv	lr, r4, r0
 8000930:	fa1f fc87 	uxth.w	ip, r7
 8000934:	fb00 441e 	mls	r4, r0, lr, r4
 8000938:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800093c:	fb0e f90c 	mul.w	r9, lr, ip
 8000940:	45a1      	cmp	r9, r4
 8000942:	fa02 f201 	lsl.w	r2, r2, r1
 8000946:	d90a      	bls.n	800095e <__udivmoddi4+0x1a6>
 8000948:	193c      	adds	r4, r7, r4
 800094a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800094e:	f080 8084 	bcs.w	8000a5a <__udivmoddi4+0x2a2>
 8000952:	45a1      	cmp	r9, r4
 8000954:	f240 8081 	bls.w	8000a5a <__udivmoddi4+0x2a2>
 8000958:	f1ae 0e02 	sub.w	lr, lr, #2
 800095c:	443c      	add	r4, r7
 800095e:	eba4 0409 	sub.w	r4, r4, r9
 8000962:	fa1f f983 	uxth.w	r9, r3
 8000966:	fbb4 f3f0 	udiv	r3, r4, r0
 800096a:	fb00 4413 	mls	r4, r0, r3, r4
 800096e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000972:	fb03 fc0c 	mul.w	ip, r3, ip
 8000976:	45a4      	cmp	ip, r4
 8000978:	d907      	bls.n	800098a <__udivmoddi4+0x1d2>
 800097a:	193c      	adds	r4, r7, r4
 800097c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000980:	d267      	bcs.n	8000a52 <__udivmoddi4+0x29a>
 8000982:	45a4      	cmp	ip, r4
 8000984:	d965      	bls.n	8000a52 <__udivmoddi4+0x29a>
 8000986:	3b02      	subs	r3, #2
 8000988:	443c      	add	r4, r7
 800098a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800098e:	fba0 9302 	umull	r9, r3, r0, r2
 8000992:	eba4 040c 	sub.w	r4, r4, ip
 8000996:	429c      	cmp	r4, r3
 8000998:	46ce      	mov	lr, r9
 800099a:	469c      	mov	ip, r3
 800099c:	d351      	bcc.n	8000a42 <__udivmoddi4+0x28a>
 800099e:	d04e      	beq.n	8000a3e <__udivmoddi4+0x286>
 80009a0:	b155      	cbz	r5, 80009b8 <__udivmoddi4+0x200>
 80009a2:	ebb8 030e 	subs.w	r3, r8, lr
 80009a6:	eb64 040c 	sbc.w	r4, r4, ip
 80009aa:	fa04 f606 	lsl.w	r6, r4, r6
 80009ae:	40cb      	lsrs	r3, r1
 80009b0:	431e      	orrs	r6, r3
 80009b2:	40cc      	lsrs	r4, r1
 80009b4:	e9c5 6400 	strd	r6, r4, [r5]
 80009b8:	2100      	movs	r1, #0
 80009ba:	e750      	b.n	800085e <__udivmoddi4+0xa6>
 80009bc:	f1c2 0320 	rsb	r3, r2, #32
 80009c0:	fa20 f103 	lsr.w	r1, r0, r3
 80009c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009c8:	fa24 f303 	lsr.w	r3, r4, r3
 80009cc:	4094      	lsls	r4, r2
 80009ce:	430c      	orrs	r4, r1
 80009d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009d4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009d8:	fa1f f78c 	uxth.w	r7, ip
 80009dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009e0:	fb08 3110 	mls	r1, r8, r0, r3
 80009e4:	0c23      	lsrs	r3, r4, #16
 80009e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009ea:	fb00 f107 	mul.w	r1, r0, r7
 80009ee:	4299      	cmp	r1, r3
 80009f0:	d908      	bls.n	8000a04 <__udivmoddi4+0x24c>
 80009f2:	eb1c 0303 	adds.w	r3, ip, r3
 80009f6:	f100 36ff 	add.w	r6, r0, #4294967295
 80009fa:	d22c      	bcs.n	8000a56 <__udivmoddi4+0x29e>
 80009fc:	4299      	cmp	r1, r3
 80009fe:	d92a      	bls.n	8000a56 <__udivmoddi4+0x29e>
 8000a00:	3802      	subs	r0, #2
 8000a02:	4463      	add	r3, ip
 8000a04:	1a5b      	subs	r3, r3, r1
 8000a06:	b2a4      	uxth	r4, r4
 8000a08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a14:	fb01 f307 	mul.w	r3, r1, r7
 8000a18:	42a3      	cmp	r3, r4
 8000a1a:	d908      	bls.n	8000a2e <__udivmoddi4+0x276>
 8000a1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a24:	d213      	bcs.n	8000a4e <__udivmoddi4+0x296>
 8000a26:	42a3      	cmp	r3, r4
 8000a28:	d911      	bls.n	8000a4e <__udivmoddi4+0x296>
 8000a2a:	3902      	subs	r1, #2
 8000a2c:	4464      	add	r4, ip
 8000a2e:	1ae4      	subs	r4, r4, r3
 8000a30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a34:	e739      	b.n	80008aa <__udivmoddi4+0xf2>
 8000a36:	4604      	mov	r4, r0
 8000a38:	e6f0      	b.n	800081c <__udivmoddi4+0x64>
 8000a3a:	4608      	mov	r0, r1
 8000a3c:	e706      	b.n	800084c <__udivmoddi4+0x94>
 8000a3e:	45c8      	cmp	r8, r9
 8000a40:	d2ae      	bcs.n	80009a0 <__udivmoddi4+0x1e8>
 8000a42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a4a:	3801      	subs	r0, #1
 8000a4c:	e7a8      	b.n	80009a0 <__udivmoddi4+0x1e8>
 8000a4e:	4631      	mov	r1, r6
 8000a50:	e7ed      	b.n	8000a2e <__udivmoddi4+0x276>
 8000a52:	4603      	mov	r3, r0
 8000a54:	e799      	b.n	800098a <__udivmoddi4+0x1d2>
 8000a56:	4630      	mov	r0, r6
 8000a58:	e7d4      	b.n	8000a04 <__udivmoddi4+0x24c>
 8000a5a:	46d6      	mov	lr, sl
 8000a5c:	e77f      	b.n	800095e <__udivmoddi4+0x1a6>
 8000a5e:	4463      	add	r3, ip
 8000a60:	3802      	subs	r0, #2
 8000a62:	e74d      	b.n	8000900 <__udivmoddi4+0x148>
 8000a64:	4606      	mov	r6, r0
 8000a66:	4623      	mov	r3, r4
 8000a68:	4608      	mov	r0, r1
 8000a6a:	e70f      	b.n	800088c <__udivmoddi4+0xd4>
 8000a6c:	3e02      	subs	r6, #2
 8000a6e:	4463      	add	r3, ip
 8000a70:	e730      	b.n	80008d4 <__udivmoddi4+0x11c>
 8000a72:	bf00      	nop

08000a74 <__aeabi_idiv0>:
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000a7c:	4a04      	ldr	r2, [pc, #16]	@ (8000a90 <MX_FREERTOS_Init+0x18>)
 8000a7e:	2100      	movs	r1, #0
 8000a80:	4804      	ldr	r0, [pc, #16]	@ (8000a94 <MX_FREERTOS_Init+0x1c>)
 8000a82:	f004 ff1f 	bl	80058c4 <osThreadNew>
 8000a86:	4603      	mov	r3, r0
 8000a88:	4a03      	ldr	r2, [pc, #12]	@ (8000a98 <MX_FREERTOS_Init+0x20>)
 8000a8a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	0800b0e0 	.word	0x0800b0e0
 8000a94:	08000a9d 	.word	0x08000a9d
 8000a98:	240001f8 	.word	0x240001f8

08000a9c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	f004 ff9f 	bl	80059e8 <osDelay>
 8000aaa:	e7fb      	b.n	8000aa4 <StartDefaultTask+0x8>

08000aac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b088      	sub	sp, #32
 8000ab0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab2:	f107 030c 	add.w	r3, r7, #12
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	60da      	str	r2, [r3, #12]
 8000ac0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac2:	4b17      	ldr	r3, [pc, #92]	@ (8000b20 <MX_GPIO_Init+0x74>)
 8000ac4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ac8:	4a15      	ldr	r2, [pc, #84]	@ (8000b20 <MX_GPIO_Init+0x74>)
 8000aca:	f043 0302 	orr.w	r3, r3, #2
 8000ace:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000ad2:	4b13      	ldr	r3, [pc, #76]	@ (8000b20 <MX_GPIO_Init+0x74>)
 8000ad4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ad8:	f003 0302 	and.w	r3, r3, #2
 8000adc:	60bb      	str	r3, [r7, #8]
 8000ade:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b20 <MX_GPIO_Init+0x74>)
 8000ae2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ae6:	4a0e      	ldr	r2, [pc, #56]	@ (8000b20 <MX_GPIO_Init+0x74>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000af0:	4b0b      	ldr	r3, [pc, #44]	@ (8000b20 <MX_GPIO_Init+0x74>)
 8000af2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = esp32i2cInterruptReqest_Pin;
 8000afe:	2320      	movs	r3, #32
 8000b00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b02:	2300      	movs	r3, #0
 8000b04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(esp32i2cInterruptReqest_GPIO_Port, &GPIO_InitStruct);
 8000b0a:	f107 030c 	add.w	r3, r7, #12
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4804      	ldr	r0, [pc, #16]	@ (8000b24 <MX_GPIO_Init+0x78>)
 8000b12:	f000 fca5 	bl	8001460 <HAL_GPIO_Init>

}
 8000b16:	bf00      	nop
 8000b18:	3720      	adds	r7, #32
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	58024400 	.word	0x58024400
 8000b24:	58020400 	.word	0x58020400

08000b28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b2c:	f000 fb22 	bl	8001174 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b30:	f000 f82e 	bl	8000b90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b34:	f7ff ffba 	bl	8000aac <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000b38:	f000 fa3c 	bl	8000fb4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  printf("Radio main firmware version: %.2f\r\n", FW_VERSION);
 8000b3c:	a312      	add	r3, pc, #72	@ (adr r3, 8000b88 <main+0x60>)
 8000b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b42:	480d      	ldr	r0, [pc, #52]	@ (8000b78 <main+0x50>)
 8000b44:	f006 feae 	bl	80078a4 <iprintf>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000b48:	f004 fe98 	bl	800587c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000b4c:	f7ff ff94 	bl	8000a78 <MX_FREERTOS_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(HAL_GPIO_ReadPin(esp32i2cInterruptReqest_GPIO_Port, esp32i2cInterruptReqest_Pin)==GPIO_PIN_RESET)
 8000b50:	2120      	movs	r1, #32
 8000b52:	480a      	ldr	r0, [pc, #40]	@ (8000b7c <main+0x54>)
 8000b54:	f000 fe34 	bl	80017c0 <HAL_GPIO_ReadPin>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d103      	bne.n	8000b66 <main+0x3e>
	  {
		  printf("low state\r\n");
 8000b5e:	4808      	ldr	r0, [pc, #32]	@ (8000b80 <main+0x58>)
 8000b60:	f006 ff08 	bl	8007974 <puts>
 8000b64:	e002      	b.n	8000b6c <main+0x44>
	  }
	  else{
		  printf("high state\r\n");
 8000b66:	4807      	ldr	r0, [pc, #28]	@ (8000b84 <main+0x5c>)
 8000b68:	f006 ff04 	bl	8007974 <puts>
	  }
		  vTaskDelay(pdMS_TO_TICKS(1000));
 8000b6c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b70:	f005 f9ae 	bl	8005ed0 <vTaskDelay>
	  if(HAL_GPIO_ReadPin(esp32i2cInterruptReqest_GPIO_Port, esp32i2cInterruptReqest_Pin)==GPIO_PIN_RESET)
 8000b74:	e7ec      	b.n	8000b50 <main+0x28>
 8000b76:	bf00      	nop
 8000b78:	0800b0a4 	.word	0x0800b0a4
 8000b7c:	58020400 	.word	0x58020400
 8000b80:	0800b0c8 	.word	0x0800b0c8
 8000b84:	0800b0d4 	.word	0x0800b0d4
 8000b88:	9999999a 	.word	0x9999999a
 8000b8c:	3fb99999 	.word	0x3fb99999

08000b90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b09c      	sub	sp, #112	@ 0x70
 8000b94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b9a:	224c      	movs	r2, #76	@ 0x4c
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f006 ffe8 	bl	8007b74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba4:	1d3b      	adds	r3, r7, #4
 8000ba6:	2220      	movs	r2, #32
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4618      	mov	r0, r3
 8000bac:	f006 ffe2 	bl	8007b74 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000bb0:	4b30      	ldr	r3, [pc, #192]	@ (8000c74 <SystemClock_Config+0xe4>)
 8000bb2:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000bba:	2002      	movs	r0, #2
 8000bbc:	f000 fe18 	bl	80017f0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	603b      	str	r3, [r7, #0]
 8000bc4:	4b2c      	ldr	r3, [pc, #176]	@ (8000c78 <SystemClock_Config+0xe8>)
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	4a2b      	ldr	r2, [pc, #172]	@ (8000c78 <SystemClock_Config+0xe8>)
 8000bca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000bce:	6193      	str	r3, [r2, #24]
 8000bd0:	4b29      	ldr	r3, [pc, #164]	@ (8000c78 <SystemClock_Config+0xe8>)
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bd8:	603b      	str	r3, [r7, #0]
 8000bda:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000bdc:	bf00      	nop
 8000bde:	4b26      	ldr	r3, [pc, #152]	@ (8000c78 <SystemClock_Config+0xe8>)
 8000be0:	699b      	ldr	r3, [r3, #24]
 8000be2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000be6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000bea:	d1f8      	bne.n	8000bde <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bec:	2302      	movs	r3, #2
 8000bee:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000bf4:	2340      	movs	r3, #64	@ 0x40
 8000bf6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c00:	2304      	movs	r3, #4
 8000c02:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8000c04:	2323      	movs	r3, #35	@ 0x23
 8000c06:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c10:	2302      	movs	r3, #2
 8000c12:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c14:	230c      	movs	r3, #12
 8000c16:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c24:	4618      	mov	r0, r3
 8000c26:	f000 fe1d 	bl	8001864 <HAL_RCC_OscConfig>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000c30:	f000 f824 	bl	8000c7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c34:	233f      	movs	r3, #63	@ 0x3f
 8000c36:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c38:	2303      	movs	r3, #3
 8000c3a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000c40:	2300      	movs	r3, #0
 8000c42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c44:	2340      	movs	r3, #64	@ 0x40
 8000c46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c48:	2340      	movs	r3, #64	@ 0x40
 8000c4a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c50:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c52:	2340      	movs	r3, #64	@ 0x40
 8000c54:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	2106      	movs	r1, #6
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f001 fa34 	bl	80020c8 <HAL_RCC_ClockConfig>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000c66:	f000 f809 	bl	8000c7c <Error_Handler>
  }
}
 8000c6a:	bf00      	nop
 8000c6c:	3770      	adds	r7, #112	@ 0x70
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	58024400 	.word	0x58024400
 8000c78:	58024800 	.word	0x58024800

08000c7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c80:	b672      	cpsid	i
}
 8000c82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c84:	bf00      	nop
 8000c86:	e7fd      	b.n	8000c84 <Error_Handler+0x8>

08000c88 <__io_putchar>:

#include <printfRedirect.h>


//printf to uart redirection
void __io_putchar(uint8_t ch) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, &ch, 1, 0xffff);
 8000c92:	1df9      	adds	r1, r7, #7
 8000c94:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c98:	2201      	movs	r2, #1
 8000c9a:	4803      	ldr	r0, [pc, #12]	@ (8000ca8 <__io_putchar+0x20>)
 8000c9c:	f003 fbd0 	bl	8004440 <HAL_UART_Transmit>
}
 8000ca0:	bf00      	nop
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	24000200 	.word	0x24000200

08000cac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce4 <HAL_MspInit+0x38>)
 8000cb4:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000cb8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce4 <HAL_MspInit+0x38>)
 8000cba:	f043 0302 	orr.w	r3, r3, #2
 8000cbe:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000cc2:	4b08      	ldr	r3, [pc, #32]	@ (8000ce4 <HAL_MspInit+0x38>)
 8000cc4:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000cc8:	f003 0302 	and.w	r3, r3, #2
 8000ccc:	607b      	str	r3, [r7, #4]
 8000cce:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	210f      	movs	r1, #15
 8000cd4:	f06f 0001 	mvn.w	r0, #1
 8000cd8:	f000 fb9b 	bl	8001412 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	58024400 	.word	0x58024400

08000ce8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cec:	bf00      	nop
 8000cee:	e7fd      	b.n	8000cec <NMI_Handler+0x4>

08000cf0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf4:	bf00      	nop
 8000cf6:	e7fd      	b.n	8000cf4 <HardFault_Handler+0x4>

08000cf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cfc:	bf00      	nop
 8000cfe:	e7fd      	b.n	8000cfc <MemManage_Handler+0x4>

08000d00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d04:	bf00      	nop
 8000d06:	e7fd      	b.n	8000d04 <BusFault_Handler+0x4>

08000d08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d0c:	bf00      	nop
 8000d0e:	e7fd      	b.n	8000d0c <UsageFault_Handler+0x4>

08000d10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d22:	f000 fa99 	bl	8001258 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000d26:	f005 fb2d 	bl	8006384 <xTaskGetSchedulerState>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d001      	beq.n	8000d34 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000d30:	f005 fca2 	bl	8006678 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  return 1;
 8000d3c:	2301      	movs	r3, #1
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <_kill>:

int _kill(int pid, int sig)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000d52:	f006 ff61 	bl	8007c18 <__errno>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2216      	movs	r2, #22
 8000d5a:	601a      	str	r2, [r3, #0]
  return -1;
 8000d5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <_exit>:

void _exit (int status)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000d70:	f04f 31ff 	mov.w	r1, #4294967295
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f7ff ffe7 	bl	8000d48 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000d7a:	bf00      	nop
 8000d7c:	e7fd      	b.n	8000d7a <_exit+0x12>

08000d7e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b086      	sub	sp, #24
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	60f8      	str	r0, [r7, #12]
 8000d86:	60b9      	str	r1, [r7, #8]
 8000d88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
 8000d8e:	e00a      	b.n	8000da6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d90:	f3af 8000 	nop.w
 8000d94:	4601      	mov	r1, r0
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	1c5a      	adds	r2, r3, #1
 8000d9a:	60ba      	str	r2, [r7, #8]
 8000d9c:	b2ca      	uxtb	r2, r1
 8000d9e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	3301      	adds	r3, #1
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	697a      	ldr	r2, [r7, #20]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	429a      	cmp	r2, r3
 8000dac:	dbf0      	blt.n	8000d90 <_read+0x12>
  }

  return len;
 8000dae:	687b      	ldr	r3, [r7, #4]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3718      	adds	r7, #24
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	60f8      	str	r0, [r7, #12]
 8000dc0:	60b9      	str	r1, [r7, #8]
 8000dc2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]
 8000dc8:	e009      	b.n	8000dde <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	1c5a      	adds	r2, r3, #1
 8000dce:	60ba      	str	r2, [r7, #8]
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff ff58 	bl	8000c88 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	617b      	str	r3, [r7, #20]
 8000dde:	697a      	ldr	r2, [r7, #20]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	dbf1      	blt.n	8000dca <_write+0x12>
  }
  return len;
 8000de6:	687b      	ldr	r3, [r7, #4]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3718      	adds	r7, #24
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <_close>:

int _close(int file)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000df8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e18:	605a      	str	r2, [r3, #4]
  return 0;
 8000e1a:	2300      	movs	r3, #0
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <_isatty>:

int _isatty(int file)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e30:	2301      	movs	r3, #1
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr

08000e3e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	b085      	sub	sp, #20
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	60f8      	str	r0, [r7, #12]
 8000e46:	60b9      	str	r1, [r7, #8]
 8000e48:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e4a:	2300      	movs	r3, #0
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3714      	adds	r7, #20
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e60:	4a14      	ldr	r2, [pc, #80]	@ (8000eb4 <_sbrk+0x5c>)
 8000e62:	4b15      	ldr	r3, [pc, #84]	@ (8000eb8 <_sbrk+0x60>)
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e6c:	4b13      	ldr	r3, [pc, #76]	@ (8000ebc <_sbrk+0x64>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d102      	bne.n	8000e7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e74:	4b11      	ldr	r3, [pc, #68]	@ (8000ebc <_sbrk+0x64>)
 8000e76:	4a12      	ldr	r2, [pc, #72]	@ (8000ec0 <_sbrk+0x68>)
 8000e78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e7a:	4b10      	ldr	r3, [pc, #64]	@ (8000ebc <_sbrk+0x64>)
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4413      	add	r3, r2
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d207      	bcs.n	8000e98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e88:	f006 fec6 	bl	8007c18 <__errno>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	220c      	movs	r2, #12
 8000e90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e92:	f04f 33ff 	mov.w	r3, #4294967295
 8000e96:	e009      	b.n	8000eac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e98:	4b08      	ldr	r3, [pc, #32]	@ (8000ebc <_sbrk+0x64>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e9e:	4b07      	ldr	r3, [pc, #28]	@ (8000ebc <_sbrk+0x64>)
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	4a05      	ldr	r2, [pc, #20]	@ (8000ebc <_sbrk+0x64>)
 8000ea8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3718      	adds	r7, #24
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	24100000 	.word	0x24100000
 8000eb8:	00000400 	.word	0x00000400
 8000ebc:	240001fc 	.word	0x240001fc
 8000ec0:	24004500 	.word	0x24004500

08000ec4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ec8:	4b32      	ldr	r3, [pc, #200]	@ (8000f94 <SystemInit+0xd0>)
 8000eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ece:	4a31      	ldr	r2, [pc, #196]	@ (8000f94 <SystemInit+0xd0>)
 8000ed0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ed4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ed8:	4b2f      	ldr	r3, [pc, #188]	@ (8000f98 <SystemInit+0xd4>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f003 030f 	and.w	r3, r3, #15
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d807      	bhi.n	8000ef4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ee4:	4b2c      	ldr	r3, [pc, #176]	@ (8000f98 <SystemInit+0xd4>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f023 030f 	bic.w	r3, r3, #15
 8000eec:	4a2a      	ldr	r2, [pc, #168]	@ (8000f98 <SystemInit+0xd4>)
 8000eee:	f043 0303 	orr.w	r3, r3, #3
 8000ef2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ef4:	4b29      	ldr	r3, [pc, #164]	@ (8000f9c <SystemInit+0xd8>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a28      	ldr	r2, [pc, #160]	@ (8000f9c <SystemInit+0xd8>)
 8000efa:	f043 0301 	orr.w	r3, r3, #1
 8000efe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f00:	4b26      	ldr	r3, [pc, #152]	@ (8000f9c <SystemInit+0xd8>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f06:	4b25      	ldr	r3, [pc, #148]	@ (8000f9c <SystemInit+0xd8>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	4924      	ldr	r1, [pc, #144]	@ (8000f9c <SystemInit+0xd8>)
 8000f0c:	4b24      	ldr	r3, [pc, #144]	@ (8000fa0 <SystemInit+0xdc>)
 8000f0e:	4013      	ands	r3, r2
 8000f10:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f12:	4b21      	ldr	r3, [pc, #132]	@ (8000f98 <SystemInit+0xd4>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f003 030c 	and.w	r3, r3, #12
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d007      	beq.n	8000f2e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f1e:	4b1e      	ldr	r3, [pc, #120]	@ (8000f98 <SystemInit+0xd4>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f023 030f 	bic.w	r3, r3, #15
 8000f26:	4a1c      	ldr	r2, [pc, #112]	@ (8000f98 <SystemInit+0xd4>)
 8000f28:	f043 0303 	orr.w	r3, r3, #3
 8000f2c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000f2e:	4b1b      	ldr	r3, [pc, #108]	@ (8000f9c <SystemInit+0xd8>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000f34:	4b19      	ldr	r3, [pc, #100]	@ (8000f9c <SystemInit+0xd8>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000f3a:	4b18      	ldr	r3, [pc, #96]	@ (8000f9c <SystemInit+0xd8>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000f40:	4b16      	ldr	r3, [pc, #88]	@ (8000f9c <SystemInit+0xd8>)
 8000f42:	4a18      	ldr	r2, [pc, #96]	@ (8000fa4 <SystemInit+0xe0>)
 8000f44:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000f46:	4b15      	ldr	r3, [pc, #84]	@ (8000f9c <SystemInit+0xd8>)
 8000f48:	4a17      	ldr	r2, [pc, #92]	@ (8000fa8 <SystemInit+0xe4>)
 8000f4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f4c:	4b13      	ldr	r3, [pc, #76]	@ (8000f9c <SystemInit+0xd8>)
 8000f4e:	4a17      	ldr	r2, [pc, #92]	@ (8000fac <SystemInit+0xe8>)
 8000f50:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f52:	4b12      	ldr	r3, [pc, #72]	@ (8000f9c <SystemInit+0xd8>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000f58:	4b10      	ldr	r3, [pc, #64]	@ (8000f9c <SystemInit+0xd8>)
 8000f5a:	4a14      	ldr	r2, [pc, #80]	@ (8000fac <SystemInit+0xe8>)
 8000f5c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000f5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f9c <SystemInit+0xd8>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000f64:	4b0d      	ldr	r3, [pc, #52]	@ (8000f9c <SystemInit+0xd8>)
 8000f66:	4a11      	ldr	r2, [pc, #68]	@ (8000fac <SystemInit+0xe8>)
 8000f68:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f9c <SystemInit+0xd8>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f70:	4b0a      	ldr	r3, [pc, #40]	@ (8000f9c <SystemInit+0xd8>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a09      	ldr	r2, [pc, #36]	@ (8000f9c <SystemInit+0xd8>)
 8000f76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f7a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f7c:	4b07      	ldr	r3, [pc, #28]	@ (8000f9c <SystemInit+0xd8>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f82:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb0 <SystemInit+0xec>)
 8000f84:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000f88:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000f8a:	bf00      	nop
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000ed00 	.word	0xe000ed00
 8000f98:	52002000 	.word	0x52002000
 8000f9c:	58024400 	.word	0x58024400
 8000fa0:	eaf6ed7f 	.word	0xeaf6ed7f
 8000fa4:	02020200 	.word	0x02020200
 8000fa8:	01ff0000 	.word	0x01ff0000
 8000fac:	01010280 	.word	0x01010280
 8000fb0:	52004000 	.word	0x52004000

08000fb4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fb8:	4b22      	ldr	r3, [pc, #136]	@ (8001044 <MX_USART1_UART_Init+0x90>)
 8000fba:	4a23      	ldr	r2, [pc, #140]	@ (8001048 <MX_USART1_UART_Init+0x94>)
 8000fbc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fbe:	4b21      	ldr	r3, [pc, #132]	@ (8001044 <MX_USART1_UART_Init+0x90>)
 8000fc0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fc4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fc6:	4b1f      	ldr	r3, [pc, #124]	@ (8001044 <MX_USART1_UART_Init+0x90>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fcc:	4b1d      	ldr	r3, [pc, #116]	@ (8001044 <MX_USART1_UART_Init+0x90>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fd2:	4b1c      	ldr	r3, [pc, #112]	@ (8001044 <MX_USART1_UART_Init+0x90>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fd8:	4b1a      	ldr	r3, [pc, #104]	@ (8001044 <MX_USART1_UART_Init+0x90>)
 8000fda:	220c      	movs	r2, #12
 8000fdc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fde:	4b19      	ldr	r3, [pc, #100]	@ (8001044 <MX_USART1_UART_Init+0x90>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fe4:	4b17      	ldr	r3, [pc, #92]	@ (8001044 <MX_USART1_UART_Init+0x90>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fea:	4b16      	ldr	r3, [pc, #88]	@ (8001044 <MX_USART1_UART_Init+0x90>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ff0:	4b14      	ldr	r3, [pc, #80]	@ (8001044 <MX_USART1_UART_Init+0x90>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ff6:	4b13      	ldr	r3, [pc, #76]	@ (8001044 <MX_USART1_UART_Init+0x90>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ffc:	4811      	ldr	r0, [pc, #68]	@ (8001044 <MX_USART1_UART_Init+0x90>)
 8000ffe:	f003 f9cf 	bl	80043a0 <HAL_UART_Init>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001008:	f7ff fe38 	bl	8000c7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800100c:	2100      	movs	r1, #0
 800100e:	480d      	ldr	r0, [pc, #52]	@ (8001044 <MX_USART1_UART_Init+0x90>)
 8001010:	f004 fb69 	bl	80056e6 <HAL_UARTEx_SetTxFifoThreshold>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800101a:	f7ff fe2f 	bl	8000c7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800101e:	2100      	movs	r1, #0
 8001020:	4808      	ldr	r0, [pc, #32]	@ (8001044 <MX_USART1_UART_Init+0x90>)
 8001022:	f004 fb9e 	bl	8005762 <HAL_UARTEx_SetRxFifoThreshold>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800102c:	f7ff fe26 	bl	8000c7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001030:	4804      	ldr	r0, [pc, #16]	@ (8001044 <MX_USART1_UART_Init+0x90>)
 8001032:	f004 fb1f 	bl	8005674 <HAL_UARTEx_DisableFifoMode>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800103c:	f7ff fe1e 	bl	8000c7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}
 8001044:	24000200 	.word	0x24000200
 8001048:	40011000 	.word	0x40011000

0800104c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b0ba      	sub	sp, #232	@ 0xe8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001064:	f107 0310 	add.w	r3, r7, #16
 8001068:	22c0      	movs	r2, #192	@ 0xc0
 800106a:	2100      	movs	r1, #0
 800106c:	4618      	mov	r0, r3
 800106e:	f006 fd81 	bl	8007b74 <memset>
  if(uartHandle->Instance==USART1)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a27      	ldr	r2, [pc, #156]	@ (8001114 <HAL_UART_MspInit+0xc8>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d146      	bne.n	800110a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800107c:	f04f 0201 	mov.w	r2, #1
 8001080:	f04f 0300 	mov.w	r3, #0
 8001084:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8001088:	2300      	movs	r3, #0
 800108a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800108e:	f107 0310 	add.w	r3, r7, #16
 8001092:	4618      	mov	r0, r3
 8001094:	f001 fba4 	bl	80027e0 <HAL_RCCEx_PeriphCLKConfig>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800109e:	f7ff fded 	bl	8000c7c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001118 <HAL_UART_MspInit+0xcc>)
 80010a4:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80010a8:	4a1b      	ldr	r2, [pc, #108]	@ (8001118 <HAL_UART_MspInit+0xcc>)
 80010aa:	f043 0310 	orr.w	r3, r3, #16
 80010ae:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80010b2:	4b19      	ldr	r3, [pc, #100]	@ (8001118 <HAL_UART_MspInit+0xcc>)
 80010b4:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80010b8:	f003 0310 	and.w	r3, r3, #16
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c0:	4b15      	ldr	r3, [pc, #84]	@ (8001118 <HAL_UART_MspInit+0xcc>)
 80010c2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80010c6:	4a14      	ldr	r2, [pc, #80]	@ (8001118 <HAL_UART_MspInit+0xcc>)
 80010c8:	f043 0302 	orr.w	r3, r3, #2
 80010cc:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80010d0:	4b11      	ldr	r3, [pc, #68]	@ (8001118 <HAL_UART_MspInit+0xcc>)
 80010d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	60bb      	str	r3, [r7, #8]
 80010dc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = dbg_UART_TX_Pin|dbg_UART_RX_Pin;
 80010de:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80010e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e6:	2302      	movs	r3, #2
 80010e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f2:	2300      	movs	r3, #0
 80010f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80010f8:	2304      	movs	r3, #4
 80010fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fe:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001102:	4619      	mov	r1, r3
 8001104:	4805      	ldr	r0, [pc, #20]	@ (800111c <HAL_UART_MspInit+0xd0>)
 8001106:	f000 f9ab 	bl	8001460 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800110a:	bf00      	nop
 800110c:	37e8      	adds	r7, #232	@ 0xe8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40011000 	.word	0x40011000
 8001118:	58024400 	.word	0x58024400
 800111c:	58020400 	.word	0x58020400

08001120 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001120:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001158 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001124:	f7ff fece 	bl	8000ec4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001128:	480c      	ldr	r0, [pc, #48]	@ (800115c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800112a:	490d      	ldr	r1, [pc, #52]	@ (8001160 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800112c:	4a0d      	ldr	r2, [pc, #52]	@ (8001164 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800112e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001130:	e002      	b.n	8001138 <LoopCopyDataInit>

08001132 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001132:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001134:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001136:	3304      	adds	r3, #4

08001138 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001138:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800113a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800113c:	d3f9      	bcc.n	8001132 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800113e:	4a0a      	ldr	r2, [pc, #40]	@ (8001168 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001140:	4c0a      	ldr	r4, [pc, #40]	@ (800116c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001142:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001144:	e001      	b.n	800114a <LoopFillZerobss>

08001146 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001146:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001148:	3204      	adds	r2, #4

0800114a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800114a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800114c:	d3fb      	bcc.n	8001146 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800114e:	f006 fd69 	bl	8007c24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001152:	f7ff fce9 	bl	8000b28 <main>
  bx  lr
 8001156:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001158:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 800115c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001160:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 8001164:	0800b578 	.word	0x0800b578
  ldr r2, =_sbss
 8001168:	240001dc 	.word	0x240001dc
  ldr r4, =_ebss
 800116c:	24004500 	.word	0x24004500

08001170 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001170:	e7fe      	b.n	8001170 <ADC_IRQHandler>
	...

08001174 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800117a:	2003      	movs	r0, #3
 800117c:	f000 f93e 	bl	80013fc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001180:	f001 f958 	bl	8002434 <HAL_RCC_GetSysClockFreq>
 8001184:	4602      	mov	r2, r0
 8001186:	4b15      	ldr	r3, [pc, #84]	@ (80011dc <HAL_Init+0x68>)
 8001188:	699b      	ldr	r3, [r3, #24]
 800118a:	0a1b      	lsrs	r3, r3, #8
 800118c:	f003 030f 	and.w	r3, r3, #15
 8001190:	4913      	ldr	r1, [pc, #76]	@ (80011e0 <HAL_Init+0x6c>)
 8001192:	5ccb      	ldrb	r3, [r1, r3]
 8001194:	f003 031f 	and.w	r3, r3, #31
 8001198:	fa22 f303 	lsr.w	r3, r2, r3
 800119c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800119e:	4b0f      	ldr	r3, [pc, #60]	@ (80011dc <HAL_Init+0x68>)
 80011a0:	699b      	ldr	r3, [r3, #24]
 80011a2:	f003 030f 	and.w	r3, r3, #15
 80011a6:	4a0e      	ldr	r2, [pc, #56]	@ (80011e0 <HAL_Init+0x6c>)
 80011a8:	5cd3      	ldrb	r3, [r2, r3]
 80011aa:	f003 031f 	and.w	r3, r3, #31
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	fa22 f303 	lsr.w	r3, r2, r3
 80011b4:	4a0b      	ldr	r2, [pc, #44]	@ (80011e4 <HAL_Init+0x70>)
 80011b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011b8:	4a0b      	ldr	r2, [pc, #44]	@ (80011e8 <HAL_Init+0x74>)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011be:	200f      	movs	r0, #15
 80011c0:	f000 f814 	bl	80011ec <HAL_InitTick>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e002      	b.n	80011d4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011ce:	f7ff fd6d 	bl	8000cac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011d2:	2300      	movs	r3, #0
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	58024400 	.word	0x58024400
 80011e0:	0800b104 	.word	0x0800b104
 80011e4:	24000004 	.word	0x24000004
 80011e8:	24000000 	.word	0x24000000

080011ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80011f4:	4b15      	ldr	r3, [pc, #84]	@ (800124c <HAL_InitTick+0x60>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d101      	bne.n	8001200 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e021      	b.n	8001244 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001200:	4b13      	ldr	r3, [pc, #76]	@ (8001250 <HAL_InitTick+0x64>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	4b11      	ldr	r3, [pc, #68]	@ (800124c <HAL_InitTick+0x60>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	4619      	mov	r1, r3
 800120a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800120e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001212:	fbb2 f3f3 	udiv	r3, r2, r3
 8001216:	4618      	mov	r0, r3
 8001218:	f000 f915 	bl	8001446 <HAL_SYSTICK_Config>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e00e      	b.n	8001244 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2b0f      	cmp	r3, #15
 800122a:	d80a      	bhi.n	8001242 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800122c:	2200      	movs	r2, #0
 800122e:	6879      	ldr	r1, [r7, #4]
 8001230:	f04f 30ff 	mov.w	r0, #4294967295
 8001234:	f000 f8ed 	bl	8001412 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001238:	4a06      	ldr	r2, [pc, #24]	@ (8001254 <HAL_InitTick+0x68>)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800123e:	2300      	movs	r3, #0
 8001240:	e000      	b.n	8001244 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
}
 8001244:	4618      	mov	r0, r3
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	2400000c 	.word	0x2400000c
 8001250:	24000000 	.word	0x24000000
 8001254:	24000008 	.word	0x24000008

08001258 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800125c:	4b06      	ldr	r3, [pc, #24]	@ (8001278 <HAL_IncTick+0x20>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	461a      	mov	r2, r3
 8001262:	4b06      	ldr	r3, [pc, #24]	@ (800127c <HAL_IncTick+0x24>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4413      	add	r3, r2
 8001268:	4a04      	ldr	r2, [pc, #16]	@ (800127c <HAL_IncTick+0x24>)
 800126a:	6013      	str	r3, [r2, #0]
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	2400000c 	.word	0x2400000c
 800127c:	24000294 	.word	0x24000294

08001280 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  return uwTick;
 8001284:	4b03      	ldr	r3, [pc, #12]	@ (8001294 <HAL_GetTick+0x14>)
 8001286:	681b      	ldr	r3, [r3, #0]
}
 8001288:	4618      	mov	r0, r3
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	24000294 	.word	0x24000294

08001298 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f003 0307 	and.w	r3, r3, #7
 80012a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012a8:	4b0b      	ldr	r3, [pc, #44]	@ (80012d8 <__NVIC_SetPriorityGrouping+0x40>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ae:	68ba      	ldr	r2, [r7, #8]
 80012b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012b4:	4013      	ands	r3, r2
 80012b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012c0:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <__NVIC_SetPriorityGrouping+0x44>)
 80012c2:	4313      	orrs	r3, r2
 80012c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012c6:	4a04      	ldr	r2, [pc, #16]	@ (80012d8 <__NVIC_SetPriorityGrouping+0x40>)
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	60d3      	str	r3, [r2, #12]
}
 80012cc:	bf00      	nop
 80012ce:	3714      	adds	r7, #20
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	e000ed00 	.word	0xe000ed00
 80012dc:	05fa0000 	.word	0x05fa0000

080012e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012e4:	4b04      	ldr	r3, [pc, #16]	@ (80012f8 <__NVIC_GetPriorityGrouping+0x18>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	0a1b      	lsrs	r3, r3, #8
 80012ea:	f003 0307 	and.w	r3, r3, #7
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	e000ed00 	.word	0xe000ed00

080012fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	6039      	str	r1, [r7, #0]
 8001306:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001308:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800130c:	2b00      	cmp	r3, #0
 800130e:	db0a      	blt.n	8001326 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	b2da      	uxtb	r2, r3
 8001314:	490c      	ldr	r1, [pc, #48]	@ (8001348 <__NVIC_SetPriority+0x4c>)
 8001316:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800131a:	0112      	lsls	r2, r2, #4
 800131c:	b2d2      	uxtb	r2, r2
 800131e:	440b      	add	r3, r1
 8001320:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001324:	e00a      	b.n	800133c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	b2da      	uxtb	r2, r3
 800132a:	4908      	ldr	r1, [pc, #32]	@ (800134c <__NVIC_SetPriority+0x50>)
 800132c:	88fb      	ldrh	r3, [r7, #6]
 800132e:	f003 030f 	and.w	r3, r3, #15
 8001332:	3b04      	subs	r3, #4
 8001334:	0112      	lsls	r2, r2, #4
 8001336:	b2d2      	uxtb	r2, r2
 8001338:	440b      	add	r3, r1
 800133a:	761a      	strb	r2, [r3, #24]
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	e000e100 	.word	0xe000e100
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001350:	b480      	push	{r7}
 8001352:	b089      	sub	sp, #36	@ 0x24
 8001354:	af00      	add	r7, sp, #0
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	60b9      	str	r1, [r7, #8]
 800135a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	f1c3 0307 	rsb	r3, r3, #7
 800136a:	2b04      	cmp	r3, #4
 800136c:	bf28      	it	cs
 800136e:	2304      	movcs	r3, #4
 8001370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	3304      	adds	r3, #4
 8001376:	2b06      	cmp	r3, #6
 8001378:	d902      	bls.n	8001380 <NVIC_EncodePriority+0x30>
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3b03      	subs	r3, #3
 800137e:	e000      	b.n	8001382 <NVIC_EncodePriority+0x32>
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001384:	f04f 32ff 	mov.w	r2, #4294967295
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43da      	mvns	r2, r3
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	401a      	ands	r2, r3
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001398:	f04f 31ff 	mov.w	r1, #4294967295
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	fa01 f303 	lsl.w	r3, r1, r3
 80013a2:	43d9      	mvns	r1, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a8:	4313      	orrs	r3, r2
         );
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3724      	adds	r7, #36	@ 0x24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
	...

080013b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3b01      	subs	r3, #1
 80013c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013c8:	d301      	bcc.n	80013ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ca:	2301      	movs	r3, #1
 80013cc:	e00f      	b.n	80013ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ce:	4a0a      	ldr	r2, [pc, #40]	@ (80013f8 <SysTick_Config+0x40>)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3b01      	subs	r3, #1
 80013d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013d6:	210f      	movs	r1, #15
 80013d8:	f04f 30ff 	mov.w	r0, #4294967295
 80013dc:	f7ff ff8e 	bl	80012fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013e0:	4b05      	ldr	r3, [pc, #20]	@ (80013f8 <SysTick_Config+0x40>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013e6:	4b04      	ldr	r3, [pc, #16]	@ (80013f8 <SysTick_Config+0x40>)
 80013e8:	2207      	movs	r2, #7
 80013ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	e000e010 	.word	0xe000e010

080013fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7ff ff47 	bl	8001298 <__NVIC_SetPriorityGrouping>
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b086      	sub	sp, #24
 8001416:	af00      	add	r7, sp, #0
 8001418:	4603      	mov	r3, r0
 800141a:	60b9      	str	r1, [r7, #8]
 800141c:	607a      	str	r2, [r7, #4]
 800141e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001420:	f7ff ff5e 	bl	80012e0 <__NVIC_GetPriorityGrouping>
 8001424:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	68b9      	ldr	r1, [r7, #8]
 800142a:	6978      	ldr	r0, [r7, #20]
 800142c:	f7ff ff90 	bl	8001350 <NVIC_EncodePriority>
 8001430:	4602      	mov	r2, r0
 8001432:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001436:	4611      	mov	r1, r2
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff ff5f 	bl	80012fc <__NVIC_SetPriority>
}
 800143e:	bf00      	nop
 8001440:	3718      	adds	r7, #24
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b082      	sub	sp, #8
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f7ff ffb2 	bl	80013b8 <SysTick_Config>
 8001454:	4603      	mov	r3, r0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
	...

08001460 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001460:	b480      	push	{r7}
 8001462:	b089      	sub	sp, #36	@ 0x24
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800146a:	2300      	movs	r3, #0
 800146c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800146e:	4b89      	ldr	r3, [pc, #548]	@ (8001694 <HAL_GPIO_Init+0x234>)
 8001470:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001472:	e194      	b.n	800179e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	2101      	movs	r1, #1
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	fa01 f303 	lsl.w	r3, r1, r3
 8001480:	4013      	ands	r3, r2
 8001482:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	2b00      	cmp	r3, #0
 8001488:	f000 8186 	beq.w	8001798 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f003 0303 	and.w	r3, r3, #3
 8001494:	2b01      	cmp	r3, #1
 8001496:	d005      	beq.n	80014a4 <HAL_GPIO_Init+0x44>
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f003 0303 	and.w	r3, r3, #3
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d130      	bne.n	8001506 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	2203      	movs	r2, #3
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	43db      	mvns	r3, r3
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4013      	ands	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	68da      	ldr	r2, [r3, #12]
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014da:	2201      	movs	r2, #1
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43db      	mvns	r3, r3
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	4013      	ands	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	091b      	lsrs	r3, r3, #4
 80014f0:	f003 0201 	and.w	r2, r3, #1
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f003 0303 	and.w	r3, r3, #3
 800150e:	2b03      	cmp	r3, #3
 8001510:	d017      	beq.n	8001542 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	2203      	movs	r2, #3
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43db      	mvns	r3, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4013      	ands	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	689a      	ldr	r2, [r3, #8]
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	4313      	orrs	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f003 0303 	and.w	r3, r3, #3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d123      	bne.n	8001596 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	08da      	lsrs	r2, r3, #3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	3208      	adds	r2, #8
 8001556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800155a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	220f      	movs	r2, #15
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	43db      	mvns	r3, r3
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	4013      	ands	r3, r2
 8001570:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	691a      	ldr	r2, [r3, #16]
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	f003 0307 	and.w	r3, r3, #7
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	4313      	orrs	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	08da      	lsrs	r2, r3, #3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3208      	adds	r2, #8
 8001590:	69b9      	ldr	r1, [r7, #24]
 8001592:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	2203      	movs	r2, #3
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43db      	mvns	r3, r3
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	4013      	ands	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f003 0203 	and.w	r2, r3, #3
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f000 80e0 	beq.w	8001798 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001698 <HAL_GPIO_Init+0x238>)
 80015da:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80015de:	4a2e      	ldr	r2, [pc, #184]	@ (8001698 <HAL_GPIO_Init+0x238>)
 80015e0:	f043 0302 	orr.w	r3, r3, #2
 80015e4:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80015e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001698 <HAL_GPIO_Init+0x238>)
 80015ea:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015f6:	4a29      	ldr	r2, [pc, #164]	@ (800169c <HAL_GPIO_Init+0x23c>)
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	089b      	lsrs	r3, r3, #2
 80015fc:	3302      	adds	r3, #2
 80015fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001602:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	f003 0303 	and.w	r3, r3, #3
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	220f      	movs	r2, #15
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	43db      	mvns	r3, r3
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	4013      	ands	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a20      	ldr	r2, [pc, #128]	@ (80016a0 <HAL_GPIO_Init+0x240>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d052      	beq.n	80016c8 <HAL_GPIO_Init+0x268>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a1f      	ldr	r2, [pc, #124]	@ (80016a4 <HAL_GPIO_Init+0x244>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d031      	beq.n	800168e <HAL_GPIO_Init+0x22e>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a1e      	ldr	r2, [pc, #120]	@ (80016a8 <HAL_GPIO_Init+0x248>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d02b      	beq.n	800168a <HAL_GPIO_Init+0x22a>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a1d      	ldr	r2, [pc, #116]	@ (80016ac <HAL_GPIO_Init+0x24c>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d025      	beq.n	8001686 <HAL_GPIO_Init+0x226>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a1c      	ldr	r2, [pc, #112]	@ (80016b0 <HAL_GPIO_Init+0x250>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d01f      	beq.n	8001682 <HAL_GPIO_Init+0x222>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a1b      	ldr	r2, [pc, #108]	@ (80016b4 <HAL_GPIO_Init+0x254>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d019      	beq.n	800167e <HAL_GPIO_Init+0x21e>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a1a      	ldr	r2, [pc, #104]	@ (80016b8 <HAL_GPIO_Init+0x258>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d013      	beq.n	800167a <HAL_GPIO_Init+0x21a>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a19      	ldr	r2, [pc, #100]	@ (80016bc <HAL_GPIO_Init+0x25c>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d00d      	beq.n	8001676 <HAL_GPIO_Init+0x216>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a18      	ldr	r2, [pc, #96]	@ (80016c0 <HAL_GPIO_Init+0x260>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d007      	beq.n	8001672 <HAL_GPIO_Init+0x212>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a17      	ldr	r2, [pc, #92]	@ (80016c4 <HAL_GPIO_Init+0x264>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d101      	bne.n	800166e <HAL_GPIO_Init+0x20e>
 800166a:	2309      	movs	r3, #9
 800166c:	e02d      	b.n	80016ca <HAL_GPIO_Init+0x26a>
 800166e:	230a      	movs	r3, #10
 8001670:	e02b      	b.n	80016ca <HAL_GPIO_Init+0x26a>
 8001672:	2308      	movs	r3, #8
 8001674:	e029      	b.n	80016ca <HAL_GPIO_Init+0x26a>
 8001676:	2307      	movs	r3, #7
 8001678:	e027      	b.n	80016ca <HAL_GPIO_Init+0x26a>
 800167a:	2306      	movs	r3, #6
 800167c:	e025      	b.n	80016ca <HAL_GPIO_Init+0x26a>
 800167e:	2305      	movs	r3, #5
 8001680:	e023      	b.n	80016ca <HAL_GPIO_Init+0x26a>
 8001682:	2304      	movs	r3, #4
 8001684:	e021      	b.n	80016ca <HAL_GPIO_Init+0x26a>
 8001686:	2303      	movs	r3, #3
 8001688:	e01f      	b.n	80016ca <HAL_GPIO_Init+0x26a>
 800168a:	2302      	movs	r3, #2
 800168c:	e01d      	b.n	80016ca <HAL_GPIO_Init+0x26a>
 800168e:	2301      	movs	r3, #1
 8001690:	e01b      	b.n	80016ca <HAL_GPIO_Init+0x26a>
 8001692:	bf00      	nop
 8001694:	58000080 	.word	0x58000080
 8001698:	58024400 	.word	0x58024400
 800169c:	58000400 	.word	0x58000400
 80016a0:	58020000 	.word	0x58020000
 80016a4:	58020400 	.word	0x58020400
 80016a8:	58020800 	.word	0x58020800
 80016ac:	58020c00 	.word	0x58020c00
 80016b0:	58021000 	.word	0x58021000
 80016b4:	58021400 	.word	0x58021400
 80016b8:	58021800 	.word	0x58021800
 80016bc:	58021c00 	.word	0x58021c00
 80016c0:	58022000 	.word	0x58022000
 80016c4:	58022400 	.word	0x58022400
 80016c8:	2300      	movs	r3, #0
 80016ca:	69fa      	ldr	r2, [r7, #28]
 80016cc:	f002 0203 	and.w	r2, r2, #3
 80016d0:	0092      	lsls	r2, r2, #2
 80016d2:	4093      	lsls	r3, r2
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016da:	4938      	ldr	r1, [pc, #224]	@ (80017bc <HAL_GPIO_Init+0x35c>)
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	089b      	lsrs	r3, r3, #2
 80016e0:	3302      	adds	r3, #2
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	43db      	mvns	r3, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4013      	ands	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	4313      	orrs	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800170e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001716:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	43db      	mvns	r3, r3
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	4013      	ands	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d003      	beq.n	800173c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	4313      	orrs	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800173c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	43db      	mvns	r3, r3
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	4013      	ands	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d003      	beq.n	8001768 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	4313      	orrs	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	43db      	mvns	r3, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4013      	ands	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	4313      	orrs	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	3301      	adds	r3, #1
 800179c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	fa22 f303 	lsr.w	r3, r2, r3
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	f47f ae63 	bne.w	8001474 <HAL_GPIO_Init+0x14>
  }
}
 80017ae:	bf00      	nop
 80017b0:	bf00      	nop
 80017b2:	3724      	adds	r7, #36	@ 0x24
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	58000400 	.word	0x58000400

080017c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	460b      	mov	r3, r1
 80017ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	691a      	ldr	r2, [r3, #16]
 80017d0:	887b      	ldrh	r3, [r7, #2]
 80017d2:	4013      	ands	r3, r2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d002      	beq.n	80017de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017d8:	2301      	movs	r3, #1
 80017da:	73fb      	strb	r3, [r7, #15]
 80017dc:	e001      	b.n	80017e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017de:	2300      	movs	r3, #0
 80017e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80017f8:	4b19      	ldr	r3, [pc, #100]	@ (8001860 <HAL_PWREx_ConfigSupply+0x70>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	f003 0304 	and.w	r3, r3, #4
 8001800:	2b04      	cmp	r3, #4
 8001802:	d00a      	beq.n	800181a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001804:	4b16      	ldr	r3, [pc, #88]	@ (8001860 <HAL_PWREx_ConfigSupply+0x70>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	f003 0307 	and.w	r3, r3, #7
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	429a      	cmp	r2, r3
 8001810:	d001      	beq.n	8001816 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e01f      	b.n	8001856 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001816:	2300      	movs	r3, #0
 8001818:	e01d      	b.n	8001856 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800181a:	4b11      	ldr	r3, [pc, #68]	@ (8001860 <HAL_PWREx_ConfigSupply+0x70>)
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	f023 0207 	bic.w	r2, r3, #7
 8001822:	490f      	ldr	r1, [pc, #60]	@ (8001860 <HAL_PWREx_ConfigSupply+0x70>)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4313      	orrs	r3, r2
 8001828:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800182a:	f7ff fd29 	bl	8001280 <HAL_GetTick>
 800182e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001830:	e009      	b.n	8001846 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001832:	f7ff fd25 	bl	8001280 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001840:	d901      	bls.n	8001846 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e007      	b.n	8001856 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001846:	4b06      	ldr	r3, [pc, #24]	@ (8001860 <HAL_PWREx_ConfigSupply+0x70>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800184e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001852:	d1ee      	bne.n	8001832 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	58024800 	.word	0x58024800

08001864 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08c      	sub	sp, #48	@ 0x30
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d102      	bne.n	8001878 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	f000 bc1f 	b.w	80020b6 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0301 	and.w	r3, r3, #1
 8001880:	2b00      	cmp	r3, #0
 8001882:	f000 80b3 	beq.w	80019ec <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001886:	4b95      	ldr	r3, [pc, #596]	@ (8001adc <HAL_RCC_OscConfig+0x278>)
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800188e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001890:	4b92      	ldr	r3, [pc, #584]	@ (8001adc <HAL_RCC_OscConfig+0x278>)
 8001892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001894:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001898:	2b10      	cmp	r3, #16
 800189a:	d007      	beq.n	80018ac <HAL_RCC_OscConfig+0x48>
 800189c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800189e:	2b18      	cmp	r3, #24
 80018a0:	d112      	bne.n	80018c8 <HAL_RCC_OscConfig+0x64>
 80018a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018a4:	f003 0303 	and.w	r3, r3, #3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d10d      	bne.n	80018c8 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ac:	4b8b      	ldr	r3, [pc, #556]	@ (8001adc <HAL_RCC_OscConfig+0x278>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f000 8098 	beq.w	80019ea <HAL_RCC_OscConfig+0x186>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	f040 8093 	bne.w	80019ea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e3f6      	b.n	80020b6 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018d0:	d106      	bne.n	80018e0 <HAL_RCC_OscConfig+0x7c>
 80018d2:	4b82      	ldr	r3, [pc, #520]	@ (8001adc <HAL_RCC_OscConfig+0x278>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a81      	ldr	r2, [pc, #516]	@ (8001adc <HAL_RCC_OscConfig+0x278>)
 80018d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018dc:	6013      	str	r3, [r2, #0]
 80018de:	e058      	b.n	8001992 <HAL_RCC_OscConfig+0x12e>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d112      	bne.n	800190e <HAL_RCC_OscConfig+0xaa>
 80018e8:	4b7c      	ldr	r3, [pc, #496]	@ (8001adc <HAL_RCC_OscConfig+0x278>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a7b      	ldr	r2, [pc, #492]	@ (8001adc <HAL_RCC_OscConfig+0x278>)
 80018ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018f2:	6013      	str	r3, [r2, #0]
 80018f4:	4b79      	ldr	r3, [pc, #484]	@ (8001adc <HAL_RCC_OscConfig+0x278>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a78      	ldr	r2, [pc, #480]	@ (8001adc <HAL_RCC_OscConfig+0x278>)
 80018fa:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80018fe:	6013      	str	r3, [r2, #0]
 8001900:	4b76      	ldr	r3, [pc, #472]	@ (8001adc <HAL_RCC_OscConfig+0x278>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a75      	ldr	r2, [pc, #468]	@ (8001adc <HAL_RCC_OscConfig+0x278>)
 8001906:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800190a:	6013      	str	r3, [r2, #0]
 800190c:	e041      	b.n	8001992 <HAL_RCC_OscConfig+0x12e>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001916:	d112      	bne.n	800193e <HAL_RCC_OscConfig+0xda>
 8001918:	4b70      	ldr	r3, [pc, #448]	@ (8001adc <HAL_RCC_OscConfig+0x278>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a6f      	ldr	r2, [pc, #444]	@ (8001adc <HAL_RCC_OscConfig+0x278>)
 800191e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001922:	6013      	str	r3, [r2, #0]
 8001924:	4b6d      	ldr	r3, [pc, #436]	@ (8001adc <HAL_RCC_OscConfig+0x278>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a6c      	ldr	r2, [pc, #432]	@ (8001adc <HAL_RCC_OscConfig+0x278>)
 800192a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800192e:	6013      	str	r3, [r2, #0]
 8001930:	4b6a      	ldr	r3, [pc, #424]	@ (8001adc <HAL_RCC_OscConfig+0x278>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a69      	ldr	r2, [pc, #420]	@ (8001adc <HAL_RCC_OscConfig+0x278>)
 8001936:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800193a:	6013      	str	r3, [r2, #0]
 800193c:	e029      	b.n	8001992 <HAL_RCC_OscConfig+0x12e>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8001946:	d112      	bne.n	800196e <HAL_RCC_OscConfig+0x10a>
 8001948:	4b64      	ldr	r3, [pc, #400]	@ (8001adc <HAL_RCC_OscConfig+0x278>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a63      	ldr	r2, [pc, #396]	@ (8001adc <HAL_RCC_OscConfig+0x278>)
 800194e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001952:	6013      	str	r3, [r2, #0]
 8001954:	4b61      	ldr	r3, [pc, #388]	@ (8001adc <HAL_RCC_OscConfig+0x278>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a60      	ldr	r2, [pc, #384]	@ (8001adc <HAL_RCC_OscConfig+0x278>)
 800195a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800195e:	6013      	str	r3, [r2, #0]
 8001960:	4b5e      	ldr	r3, [pc, #376]	@ (8001adc <HAL_RCC_OscConfig+0x278>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a5d      	ldr	r2, [pc, #372]	@ (8001adc <HAL_RCC_OscConfig+0x278>)
 8001966:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800196a:	6013      	str	r3, [r2, #0]
 800196c:	e011      	b.n	8001992 <HAL_RCC_OscConfig+0x12e>
 800196e:	4b5b      	ldr	r3, [pc, #364]	@ (8001adc <HAL_RCC_OscConfig+0x278>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a5a      	ldr	r2, [pc, #360]	@ (8001adc <HAL_RCC_OscConfig+0x278>)
 8001974:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001978:	6013      	str	r3, [r2, #0]
 800197a:	4b58      	ldr	r3, [pc, #352]	@ (8001adc <HAL_RCC_OscConfig+0x278>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a57      	ldr	r2, [pc, #348]	@ (8001adc <HAL_RCC_OscConfig+0x278>)
 8001980:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001984:	6013      	str	r3, [r2, #0]
 8001986:	4b55      	ldr	r3, [pc, #340]	@ (8001adc <HAL_RCC_OscConfig+0x278>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a54      	ldr	r2, [pc, #336]	@ (8001adc <HAL_RCC_OscConfig+0x278>)
 800198c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001990:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d013      	beq.n	80019c2 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199a:	f7ff fc71 	bl	8001280 <HAL_GetTick>
 800199e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019a0:	e008      	b.n	80019b4 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019a2:	f7ff fc6d 	bl	8001280 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b64      	cmp	r3, #100	@ 0x64
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e380      	b.n	80020b6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019b4:	4b49      	ldr	r3, [pc, #292]	@ (8001adc <HAL_RCC_OscConfig+0x278>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d0f0      	beq.n	80019a2 <HAL_RCC_OscConfig+0x13e>
 80019c0:	e014      	b.n	80019ec <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c2:	f7ff fc5d 	bl	8001280 <HAL_GetTick>
 80019c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80019c8:	e008      	b.n	80019dc <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019ca:	f7ff fc59 	bl	8001280 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b64      	cmp	r3, #100	@ 0x64
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e36c      	b.n	80020b6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80019dc:	4b3f      	ldr	r3, [pc, #252]	@ (8001adc <HAL_RCC_OscConfig+0x278>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1f0      	bne.n	80019ca <HAL_RCC_OscConfig+0x166>
 80019e8:	e000      	b.n	80019ec <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ea:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 808c 	beq.w	8001b12 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019fa:	4b38      	ldr	r3, [pc, #224]	@ (8001adc <HAL_RCC_OscConfig+0x278>)
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001a02:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a04:	4b35      	ldr	r3, [pc, #212]	@ (8001adc <HAL_RCC_OscConfig+0x278>)
 8001a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a08:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001a0a:	6a3b      	ldr	r3, [r7, #32]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d007      	beq.n	8001a20 <HAL_RCC_OscConfig+0x1bc>
 8001a10:	6a3b      	ldr	r3, [r7, #32]
 8001a12:	2b18      	cmp	r3, #24
 8001a14:	d137      	bne.n	8001a86 <HAL_RCC_OscConfig+0x222>
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	f003 0303 	and.w	r3, r3, #3
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d132      	bne.n	8001a86 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a20:	4b2e      	ldr	r3, [pc, #184]	@ (8001adc <HAL_RCC_OscConfig+0x278>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0304 	and.w	r3, r3, #4
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d005      	beq.n	8001a38 <HAL_RCC_OscConfig+0x1d4>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d101      	bne.n	8001a38 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e33e      	b.n	80020b6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001a38:	4b28      	ldr	r3, [pc, #160]	@ (8001adc <HAL_RCC_OscConfig+0x278>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f023 0219 	bic.w	r2, r3, #25
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	4925      	ldr	r1, [pc, #148]	@ (8001adc <HAL_RCC_OscConfig+0x278>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4a:	f7ff fc19 	bl	8001280 <HAL_GetTick>
 8001a4e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a50:	e008      	b.n	8001a64 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a52:	f7ff fc15 	bl	8001280 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e328      	b.n	80020b6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a64:	4b1d      	ldr	r3, [pc, #116]	@ (8001adc <HAL_RCC_OscConfig+0x278>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0304 	and.w	r3, r3, #4
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d0f0      	beq.n	8001a52 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a70:	4b1a      	ldr	r3, [pc, #104]	@ (8001adc <HAL_RCC_OscConfig+0x278>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	691b      	ldr	r3, [r3, #16]
 8001a7c:	061b      	lsls	r3, r3, #24
 8001a7e:	4917      	ldr	r1, [pc, #92]	@ (8001adc <HAL_RCC_OscConfig+0x278>)
 8001a80:	4313      	orrs	r3, r2
 8001a82:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a84:	e045      	b.n	8001b12 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d028      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001a8e:	4b13      	ldr	r3, [pc, #76]	@ (8001adc <HAL_RCC_OscConfig+0x278>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f023 0219 	bic.w	r2, r3, #25
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	4910      	ldr	r1, [pc, #64]	@ (8001adc <HAL_RCC_OscConfig+0x278>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa0:	f7ff fbee 	bl	8001280 <HAL_GetTick>
 8001aa4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aa8:	f7ff fbea 	bl	8001280 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e2fd      	b.n	80020b6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001aba:	4b08      	ldr	r3, [pc, #32]	@ (8001adc <HAL_RCC_OscConfig+0x278>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0304 	and.w	r3, r3, #4
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d0f0      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac6:	4b05      	ldr	r3, [pc, #20]	@ (8001adc <HAL_RCC_OscConfig+0x278>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	061b      	lsls	r3, r3, #24
 8001ad4:	4901      	ldr	r1, [pc, #4]	@ (8001adc <HAL_RCC_OscConfig+0x278>)
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	604b      	str	r3, [r1, #4]
 8001ada:	e01a      	b.n	8001b12 <HAL_RCC_OscConfig+0x2ae>
 8001adc:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ae0:	4b97      	ldr	r3, [pc, #604]	@ (8001d40 <HAL_RCC_OscConfig+0x4dc>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a96      	ldr	r2, [pc, #600]	@ (8001d40 <HAL_RCC_OscConfig+0x4dc>)
 8001ae6:	f023 0301 	bic.w	r3, r3, #1
 8001aea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aec:	f7ff fbc8 	bl	8001280 <HAL_GetTick>
 8001af0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001af4:	f7ff fbc4 	bl	8001280 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e2d7      	b.n	80020b6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b06:	4b8e      	ldr	r3, [pc, #568]	@ (8001d40 <HAL_RCC_OscConfig+0x4dc>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0304 	and.w	r3, r3, #4
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1f0      	bne.n	8001af4 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0310 	and.w	r3, r3, #16
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d06a      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b1e:	4b88      	ldr	r3, [pc, #544]	@ (8001d40 <HAL_RCC_OscConfig+0x4dc>)
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001b26:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b28:	4b85      	ldr	r3, [pc, #532]	@ (8001d40 <HAL_RCC_OscConfig+0x4dc>)
 8001b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b2c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	2b08      	cmp	r3, #8
 8001b32:	d007      	beq.n	8001b44 <HAL_RCC_OscConfig+0x2e0>
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	2b18      	cmp	r3, #24
 8001b38:	d11b      	bne.n	8001b72 <HAL_RCC_OscConfig+0x30e>
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	f003 0303 	and.w	r3, r3, #3
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d116      	bne.n	8001b72 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b44:	4b7e      	ldr	r3, [pc, #504]	@ (8001d40 <HAL_RCC_OscConfig+0x4dc>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d005      	beq.n	8001b5c <HAL_RCC_OscConfig+0x2f8>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	69db      	ldr	r3, [r3, #28]
 8001b54:	2b80      	cmp	r3, #128	@ 0x80
 8001b56:	d001      	beq.n	8001b5c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e2ac      	b.n	80020b6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b5c:	4b78      	ldr	r3, [pc, #480]	@ (8001d40 <HAL_RCC_OscConfig+0x4dc>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	061b      	lsls	r3, r3, #24
 8001b6a:	4975      	ldr	r1, [pc, #468]	@ (8001d40 <HAL_RCC_OscConfig+0x4dc>)
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b70:	e040      	b.n	8001bf4 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d023      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001b7a:	4b71      	ldr	r3, [pc, #452]	@ (8001d40 <HAL_RCC_OscConfig+0x4dc>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a70      	ldr	r2, [pc, #448]	@ (8001d40 <HAL_RCC_OscConfig+0x4dc>)
 8001b80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b86:	f7ff fb7b 	bl	8001280 <HAL_GetTick>
 8001b8a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b8c:	e008      	b.n	8001ba0 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001b8e:	f7ff fb77 	bl	8001280 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e28a      	b.n	80020b6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001ba0:	4b67      	ldr	r3, [pc, #412]	@ (8001d40 <HAL_RCC_OscConfig+0x4dc>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d0f0      	beq.n	8001b8e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001bac:	4b64      	ldr	r3, [pc, #400]	@ (8001d40 <HAL_RCC_OscConfig+0x4dc>)
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a1b      	ldr	r3, [r3, #32]
 8001bb8:	061b      	lsls	r3, r3, #24
 8001bba:	4961      	ldr	r1, [pc, #388]	@ (8001d40 <HAL_RCC_OscConfig+0x4dc>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	60cb      	str	r3, [r1, #12]
 8001bc0:	e018      	b.n	8001bf4 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001bc2:	4b5f      	ldr	r3, [pc, #380]	@ (8001d40 <HAL_RCC_OscConfig+0x4dc>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a5e      	ldr	r2, [pc, #376]	@ (8001d40 <HAL_RCC_OscConfig+0x4dc>)
 8001bc8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001bcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bce:	f7ff fb57 	bl	8001280 <HAL_GetTick>
 8001bd2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001bd4:	e008      	b.n	8001be8 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001bd6:	f7ff fb53 	bl	8001280 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e266      	b.n	80020b6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001be8:	4b55      	ldr	r3, [pc, #340]	@ (8001d40 <HAL_RCC_OscConfig+0x4dc>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d1f0      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0308 	and.w	r3, r3, #8
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d036      	beq.n	8001c6e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	695b      	ldr	r3, [r3, #20]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d019      	beq.n	8001c3c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c08:	4b4d      	ldr	r3, [pc, #308]	@ (8001d40 <HAL_RCC_OscConfig+0x4dc>)
 8001c0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c0c:	4a4c      	ldr	r2, [pc, #304]	@ (8001d40 <HAL_RCC_OscConfig+0x4dc>)
 8001c0e:	f043 0301 	orr.w	r3, r3, #1
 8001c12:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c14:	f7ff fb34 	bl	8001280 <HAL_GetTick>
 8001c18:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c1c:	f7ff fb30 	bl	8001280 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e243      	b.n	80020b6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c2e:	4b44      	ldr	r3, [pc, #272]	@ (8001d40 <HAL_RCC_OscConfig+0x4dc>)
 8001c30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0f0      	beq.n	8001c1c <HAL_RCC_OscConfig+0x3b8>
 8001c3a:	e018      	b.n	8001c6e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c3c:	4b40      	ldr	r3, [pc, #256]	@ (8001d40 <HAL_RCC_OscConfig+0x4dc>)
 8001c3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c40:	4a3f      	ldr	r2, [pc, #252]	@ (8001d40 <HAL_RCC_OscConfig+0x4dc>)
 8001c42:	f023 0301 	bic.w	r3, r3, #1
 8001c46:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c48:	f7ff fb1a 	bl	8001280 <HAL_GetTick>
 8001c4c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c50:	f7ff fb16 	bl	8001280 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e229      	b.n	80020b6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c62:	4b37      	ldr	r3, [pc, #220]	@ (8001d40 <HAL_RCC_OscConfig+0x4dc>)
 8001c64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1f0      	bne.n	8001c50 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0320 	and.w	r3, r3, #32
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d036      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d019      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c82:	4b2f      	ldr	r3, [pc, #188]	@ (8001d40 <HAL_RCC_OscConfig+0x4dc>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a2e      	ldr	r2, [pc, #184]	@ (8001d40 <HAL_RCC_OscConfig+0x4dc>)
 8001c88:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c8c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c8e:	f7ff faf7 	bl	8001280 <HAL_GetTick>
 8001c92:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c94:	e008      	b.n	8001ca8 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c96:	f7ff faf3 	bl	8001280 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e206      	b.n	80020b6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ca8:	4b25      	ldr	r3, [pc, #148]	@ (8001d40 <HAL_RCC_OscConfig+0x4dc>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d0f0      	beq.n	8001c96 <HAL_RCC_OscConfig+0x432>
 8001cb4:	e018      	b.n	8001ce8 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001cb6:	4b22      	ldr	r3, [pc, #136]	@ (8001d40 <HAL_RCC_OscConfig+0x4dc>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a21      	ldr	r2, [pc, #132]	@ (8001d40 <HAL_RCC_OscConfig+0x4dc>)
 8001cbc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001cc0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001cc2:	f7ff fadd 	bl	8001280 <HAL_GetTick>
 8001cc6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001cc8:	e008      	b.n	8001cdc <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cca:	f7ff fad9 	bl	8001280 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e1ec      	b.n	80020b6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001cdc:	4b18      	ldr	r3, [pc, #96]	@ (8001d40 <HAL_RCC_OscConfig+0x4dc>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1f0      	bne.n	8001cca <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0304 	and.w	r3, r3, #4
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f000 80af 	beq.w	8001e54 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001cf6:	4b13      	ldr	r3, [pc, #76]	@ (8001d44 <HAL_RCC_OscConfig+0x4e0>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a12      	ldr	r2, [pc, #72]	@ (8001d44 <HAL_RCC_OscConfig+0x4e0>)
 8001cfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d00:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d02:	f7ff fabd 	bl	8001280 <HAL_GetTick>
 8001d06:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d08:	e008      	b.n	8001d1c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d0a:	f7ff fab9 	bl	8001280 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b64      	cmp	r3, #100	@ 0x64
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e1cc      	b.n	80020b6 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d1c:	4b09      	ldr	r3, [pc, #36]	@ (8001d44 <HAL_RCC_OscConfig+0x4e0>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d0f0      	beq.n	8001d0a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d10b      	bne.n	8001d48 <HAL_RCC_OscConfig+0x4e4>
 8001d30:	4b03      	ldr	r3, [pc, #12]	@ (8001d40 <HAL_RCC_OscConfig+0x4dc>)
 8001d32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d34:	4a02      	ldr	r2, [pc, #8]	@ (8001d40 <HAL_RCC_OscConfig+0x4dc>)
 8001d36:	f043 0301 	orr.w	r3, r3, #1
 8001d3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d3c:	e05b      	b.n	8001df6 <HAL_RCC_OscConfig+0x592>
 8001d3e:	bf00      	nop
 8001d40:	58024400 	.word	0x58024400
 8001d44:	58024800 	.word	0x58024800
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d112      	bne.n	8001d76 <HAL_RCC_OscConfig+0x512>
 8001d50:	4b9d      	ldr	r3, [pc, #628]	@ (8001fc8 <HAL_RCC_OscConfig+0x764>)
 8001d52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d54:	4a9c      	ldr	r2, [pc, #624]	@ (8001fc8 <HAL_RCC_OscConfig+0x764>)
 8001d56:	f023 0301 	bic.w	r3, r3, #1
 8001d5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d5c:	4b9a      	ldr	r3, [pc, #616]	@ (8001fc8 <HAL_RCC_OscConfig+0x764>)
 8001d5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d60:	4a99      	ldr	r2, [pc, #612]	@ (8001fc8 <HAL_RCC_OscConfig+0x764>)
 8001d62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001d66:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d68:	4b97      	ldr	r3, [pc, #604]	@ (8001fc8 <HAL_RCC_OscConfig+0x764>)
 8001d6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d6c:	4a96      	ldr	r2, [pc, #600]	@ (8001fc8 <HAL_RCC_OscConfig+0x764>)
 8001d6e:	f023 0304 	bic.w	r3, r3, #4
 8001d72:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d74:	e03f      	b.n	8001df6 <HAL_RCC_OscConfig+0x592>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	2b05      	cmp	r3, #5
 8001d7c:	d112      	bne.n	8001da4 <HAL_RCC_OscConfig+0x540>
 8001d7e:	4b92      	ldr	r3, [pc, #584]	@ (8001fc8 <HAL_RCC_OscConfig+0x764>)
 8001d80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d82:	4a91      	ldr	r2, [pc, #580]	@ (8001fc8 <HAL_RCC_OscConfig+0x764>)
 8001d84:	f043 0304 	orr.w	r3, r3, #4
 8001d88:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d8a:	4b8f      	ldr	r3, [pc, #572]	@ (8001fc8 <HAL_RCC_OscConfig+0x764>)
 8001d8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d8e:	4a8e      	ldr	r2, [pc, #568]	@ (8001fc8 <HAL_RCC_OscConfig+0x764>)
 8001d90:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001d94:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d96:	4b8c      	ldr	r3, [pc, #560]	@ (8001fc8 <HAL_RCC_OscConfig+0x764>)
 8001d98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d9a:	4a8b      	ldr	r2, [pc, #556]	@ (8001fc8 <HAL_RCC_OscConfig+0x764>)
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001da2:	e028      	b.n	8001df6 <HAL_RCC_OscConfig+0x592>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	2b85      	cmp	r3, #133	@ 0x85
 8001daa:	d112      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x56e>
 8001dac:	4b86      	ldr	r3, [pc, #536]	@ (8001fc8 <HAL_RCC_OscConfig+0x764>)
 8001dae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001db0:	4a85      	ldr	r2, [pc, #532]	@ (8001fc8 <HAL_RCC_OscConfig+0x764>)
 8001db2:	f043 0304 	orr.w	r3, r3, #4
 8001db6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001db8:	4b83      	ldr	r3, [pc, #524]	@ (8001fc8 <HAL_RCC_OscConfig+0x764>)
 8001dba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dbc:	4a82      	ldr	r2, [pc, #520]	@ (8001fc8 <HAL_RCC_OscConfig+0x764>)
 8001dbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001dc2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dc4:	4b80      	ldr	r3, [pc, #512]	@ (8001fc8 <HAL_RCC_OscConfig+0x764>)
 8001dc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dc8:	4a7f      	ldr	r2, [pc, #508]	@ (8001fc8 <HAL_RCC_OscConfig+0x764>)
 8001dca:	f043 0301 	orr.w	r3, r3, #1
 8001dce:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dd0:	e011      	b.n	8001df6 <HAL_RCC_OscConfig+0x592>
 8001dd2:	4b7d      	ldr	r3, [pc, #500]	@ (8001fc8 <HAL_RCC_OscConfig+0x764>)
 8001dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dd6:	4a7c      	ldr	r2, [pc, #496]	@ (8001fc8 <HAL_RCC_OscConfig+0x764>)
 8001dd8:	f023 0301 	bic.w	r3, r3, #1
 8001ddc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dde:	4b7a      	ldr	r3, [pc, #488]	@ (8001fc8 <HAL_RCC_OscConfig+0x764>)
 8001de0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001de2:	4a79      	ldr	r2, [pc, #484]	@ (8001fc8 <HAL_RCC_OscConfig+0x764>)
 8001de4:	f023 0304 	bic.w	r3, r3, #4
 8001de8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dea:	4b77      	ldr	r3, [pc, #476]	@ (8001fc8 <HAL_RCC_OscConfig+0x764>)
 8001dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dee:	4a76      	ldr	r2, [pc, #472]	@ (8001fc8 <HAL_RCC_OscConfig+0x764>)
 8001df0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001df4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d015      	beq.n	8001e2a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dfe:	f7ff fa3f 	bl	8001280 <HAL_GetTick>
 8001e02:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e04:	e00a      	b.n	8001e1c <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e06:	f7ff fa3b 	bl	8001280 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e14c      	b.n	80020b6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e1c:	4b6a      	ldr	r3, [pc, #424]	@ (8001fc8 <HAL_RCC_OscConfig+0x764>)
 8001e1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d0ee      	beq.n	8001e06 <HAL_RCC_OscConfig+0x5a2>
 8001e28:	e014      	b.n	8001e54 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e2a:	f7ff fa29 	bl	8001280 <HAL_GetTick>
 8001e2e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e30:	e00a      	b.n	8001e48 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e32:	f7ff fa25 	bl	8001280 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e136      	b.n	80020b6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e48:	4b5f      	ldr	r3, [pc, #380]	@ (8001fc8 <HAL_RCC_OscConfig+0x764>)
 8001e4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1ee      	bne.n	8001e32 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f000 812b 	beq.w	80020b4 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001e5e:	4b5a      	ldr	r3, [pc, #360]	@ (8001fc8 <HAL_RCC_OscConfig+0x764>)
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e66:	2b18      	cmp	r3, #24
 8001e68:	f000 80bb 	beq.w	8001fe2 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	f040 8095 	bne.w	8001fa0 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e76:	4b54      	ldr	r3, [pc, #336]	@ (8001fc8 <HAL_RCC_OscConfig+0x764>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a53      	ldr	r2, [pc, #332]	@ (8001fc8 <HAL_RCC_OscConfig+0x764>)
 8001e7c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e82:	f7ff f9fd 	bl	8001280 <HAL_GetTick>
 8001e86:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e88:	e008      	b.n	8001e9c <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e8a:	f7ff f9f9 	bl	8001280 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e10c      	b.n	80020b6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e9c:	4b4a      	ldr	r3, [pc, #296]	@ (8001fc8 <HAL_RCC_OscConfig+0x764>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1f0      	bne.n	8001e8a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ea8:	4b47      	ldr	r3, [pc, #284]	@ (8001fc8 <HAL_RCC_OscConfig+0x764>)
 8001eaa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001eac:	4b47      	ldr	r3, [pc, #284]	@ (8001fcc <HAL_RCC_OscConfig+0x768>)
 8001eae:	4013      	ands	r3, r2
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001eb8:	0112      	lsls	r2, r2, #4
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	4942      	ldr	r1, [pc, #264]	@ (8001fc8 <HAL_RCC_OscConfig+0x764>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	628b      	str	r3, [r1, #40]	@ 0x28
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	025b      	lsls	r3, r3, #9
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	431a      	orrs	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001edc:	3b01      	subs	r3, #1
 8001ede:	041b      	lsls	r3, r3, #16
 8001ee0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001ee4:	431a      	orrs	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eea:	3b01      	subs	r3, #1
 8001eec:	061b      	lsls	r3, r3, #24
 8001eee:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001ef2:	4935      	ldr	r1, [pc, #212]	@ (8001fc8 <HAL_RCC_OscConfig+0x764>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001ef8:	4b33      	ldr	r3, [pc, #204]	@ (8001fc8 <HAL_RCC_OscConfig+0x764>)
 8001efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001efc:	4a32      	ldr	r2, [pc, #200]	@ (8001fc8 <HAL_RCC_OscConfig+0x764>)
 8001efe:	f023 0301 	bic.w	r3, r3, #1
 8001f02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001f04:	4b30      	ldr	r3, [pc, #192]	@ (8001fc8 <HAL_RCC_OscConfig+0x764>)
 8001f06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f08:	4b31      	ldr	r3, [pc, #196]	@ (8001fd0 <HAL_RCC_OscConfig+0x76c>)
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001f10:	00d2      	lsls	r2, r2, #3
 8001f12:	492d      	ldr	r1, [pc, #180]	@ (8001fc8 <HAL_RCC_OscConfig+0x764>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001f18:	4b2b      	ldr	r3, [pc, #172]	@ (8001fc8 <HAL_RCC_OscConfig+0x764>)
 8001f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f1c:	f023 020c 	bic.w	r2, r3, #12
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f24:	4928      	ldr	r1, [pc, #160]	@ (8001fc8 <HAL_RCC_OscConfig+0x764>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001f2a:	4b27      	ldr	r3, [pc, #156]	@ (8001fc8 <HAL_RCC_OscConfig+0x764>)
 8001f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f2e:	f023 0202 	bic.w	r2, r3, #2
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f36:	4924      	ldr	r1, [pc, #144]	@ (8001fc8 <HAL_RCC_OscConfig+0x764>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001f3c:	4b22      	ldr	r3, [pc, #136]	@ (8001fc8 <HAL_RCC_OscConfig+0x764>)
 8001f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f40:	4a21      	ldr	r2, [pc, #132]	@ (8001fc8 <HAL_RCC_OscConfig+0x764>)
 8001f42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001f48:	4b1f      	ldr	r3, [pc, #124]	@ (8001fc8 <HAL_RCC_OscConfig+0x764>)
 8001f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f4c:	4a1e      	ldr	r2, [pc, #120]	@ (8001fc8 <HAL_RCC_OscConfig+0x764>)
 8001f4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001f54:	4b1c      	ldr	r3, [pc, #112]	@ (8001fc8 <HAL_RCC_OscConfig+0x764>)
 8001f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f58:	4a1b      	ldr	r2, [pc, #108]	@ (8001fc8 <HAL_RCC_OscConfig+0x764>)
 8001f5a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001f60:	4b19      	ldr	r3, [pc, #100]	@ (8001fc8 <HAL_RCC_OscConfig+0x764>)
 8001f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f64:	4a18      	ldr	r2, [pc, #96]	@ (8001fc8 <HAL_RCC_OscConfig+0x764>)
 8001f66:	f043 0301 	orr.w	r3, r3, #1
 8001f6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f6c:	4b16      	ldr	r3, [pc, #88]	@ (8001fc8 <HAL_RCC_OscConfig+0x764>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a15      	ldr	r2, [pc, #84]	@ (8001fc8 <HAL_RCC_OscConfig+0x764>)
 8001f72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f78:	f7ff f982 	bl	8001280 <HAL_GetTick>
 8001f7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f80:	f7ff f97e 	bl	8001280 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e091      	b.n	80020b6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f92:	4b0d      	ldr	r3, [pc, #52]	@ (8001fc8 <HAL_RCC_OscConfig+0x764>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d0f0      	beq.n	8001f80 <HAL_RCC_OscConfig+0x71c>
 8001f9e:	e089      	b.n	80020b4 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa0:	4b09      	ldr	r3, [pc, #36]	@ (8001fc8 <HAL_RCC_OscConfig+0x764>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a08      	ldr	r2, [pc, #32]	@ (8001fc8 <HAL_RCC_OscConfig+0x764>)
 8001fa6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001faa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fac:	f7ff f968 	bl	8001280 <HAL_GetTick>
 8001fb0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fb2:	e00f      	b.n	8001fd4 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb4:	f7ff f964 	bl	8001280 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d908      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e077      	b.n	80020b6 <HAL_RCC_OscConfig+0x852>
 8001fc6:	bf00      	nop
 8001fc8:	58024400 	.word	0x58024400
 8001fcc:	fffffc0c 	.word	0xfffffc0c
 8001fd0:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fd4:	4b3a      	ldr	r3, [pc, #232]	@ (80020c0 <HAL_RCC_OscConfig+0x85c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1e9      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x750>
 8001fe0:	e068      	b.n	80020b4 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001fe2:	4b37      	ldr	r3, [pc, #220]	@ (80020c0 <HAL_RCC_OscConfig+0x85c>)
 8001fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fe6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001fe8:	4b35      	ldr	r3, [pc, #212]	@ (80020c0 <HAL_RCC_OscConfig+0x85c>)
 8001fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fec:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d031      	beq.n	800205a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	f003 0203 	and.w	r2, r3, #3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002000:	429a      	cmp	r2, r3
 8002002:	d12a      	bne.n	800205a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	091b      	lsrs	r3, r3, #4
 8002008:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002010:	429a      	cmp	r2, r3
 8002012:	d122      	bne.n	800205a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002020:	429a      	cmp	r2, r3
 8002022:	d11a      	bne.n	800205a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	0a5b      	lsrs	r3, r3, #9
 8002028:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002030:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002032:	429a      	cmp	r2, r3
 8002034:	d111      	bne.n	800205a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	0c1b      	lsrs	r3, r3, #16
 800203a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002042:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002044:	429a      	cmp	r2, r3
 8002046:	d108      	bne.n	800205a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	0e1b      	lsrs	r3, r3, #24
 800204c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002054:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002056:	429a      	cmp	r2, r3
 8002058:	d001      	beq.n	800205e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e02b      	b.n	80020b6 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800205e:	4b18      	ldr	r3, [pc, #96]	@ (80020c0 <HAL_RCC_OscConfig+0x85c>)
 8002060:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002062:	08db      	lsrs	r3, r3, #3
 8002064:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002068:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	429a      	cmp	r2, r3
 8002072:	d01f      	beq.n	80020b4 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002074:	4b12      	ldr	r3, [pc, #72]	@ (80020c0 <HAL_RCC_OscConfig+0x85c>)
 8002076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002078:	4a11      	ldr	r2, [pc, #68]	@ (80020c0 <HAL_RCC_OscConfig+0x85c>)
 800207a:	f023 0301 	bic.w	r3, r3, #1
 800207e:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002080:	f7ff f8fe 	bl	8001280 <HAL_GetTick>
 8002084:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002086:	bf00      	nop
 8002088:	f7ff f8fa 	bl	8001280 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002090:	4293      	cmp	r3, r2
 8002092:	d0f9      	beq.n	8002088 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002094:	4b0a      	ldr	r3, [pc, #40]	@ (80020c0 <HAL_RCC_OscConfig+0x85c>)
 8002096:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002098:	4b0a      	ldr	r3, [pc, #40]	@ (80020c4 <HAL_RCC_OscConfig+0x860>)
 800209a:	4013      	ands	r3, r2
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80020a0:	00d2      	lsls	r2, r2, #3
 80020a2:	4907      	ldr	r1, [pc, #28]	@ (80020c0 <HAL_RCC_OscConfig+0x85c>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80020a8:	4b05      	ldr	r3, [pc, #20]	@ (80020c0 <HAL_RCC_OscConfig+0x85c>)
 80020aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ac:	4a04      	ldr	r2, [pc, #16]	@ (80020c0 <HAL_RCC_OscConfig+0x85c>)
 80020ae:	f043 0301 	orr.w	r3, r3, #1
 80020b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3730      	adds	r7, #48	@ 0x30
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	58024400 	.word	0x58024400
 80020c4:	ffff0007 	.word	0xffff0007

080020c8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d101      	bne.n	80020dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e19c      	b.n	8002416 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020dc:	4b8a      	ldr	r3, [pc, #552]	@ (8002308 <HAL_RCC_ClockConfig+0x240>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 030f 	and.w	r3, r3, #15
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d910      	bls.n	800210c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ea:	4b87      	ldr	r3, [pc, #540]	@ (8002308 <HAL_RCC_ClockConfig+0x240>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f023 020f 	bic.w	r2, r3, #15
 80020f2:	4985      	ldr	r1, [pc, #532]	@ (8002308 <HAL_RCC_ClockConfig+0x240>)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020fa:	4b83      	ldr	r3, [pc, #524]	@ (8002308 <HAL_RCC_ClockConfig+0x240>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	429a      	cmp	r2, r3
 8002106:	d001      	beq.n	800210c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e184      	b.n	8002416 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0304 	and.w	r3, r3, #4
 8002114:	2b00      	cmp	r3, #0
 8002116:	d010      	beq.n	800213a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	691a      	ldr	r2, [r3, #16]
 800211c:	4b7b      	ldr	r3, [pc, #492]	@ (800230c <HAL_RCC_ClockConfig+0x244>)
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002124:	429a      	cmp	r2, r3
 8002126:	d908      	bls.n	800213a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002128:	4b78      	ldr	r3, [pc, #480]	@ (800230c <HAL_RCC_ClockConfig+0x244>)
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	691b      	ldr	r3, [r3, #16]
 8002134:	4975      	ldr	r1, [pc, #468]	@ (800230c <HAL_RCC_ClockConfig+0x244>)
 8002136:	4313      	orrs	r3, r2
 8002138:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0308 	and.w	r3, r3, #8
 8002142:	2b00      	cmp	r3, #0
 8002144:	d010      	beq.n	8002168 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	695a      	ldr	r2, [r3, #20]
 800214a:	4b70      	ldr	r3, [pc, #448]	@ (800230c <HAL_RCC_ClockConfig+0x244>)
 800214c:	69db      	ldr	r3, [r3, #28]
 800214e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002152:	429a      	cmp	r2, r3
 8002154:	d908      	bls.n	8002168 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002156:	4b6d      	ldr	r3, [pc, #436]	@ (800230c <HAL_RCC_ClockConfig+0x244>)
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	496a      	ldr	r1, [pc, #424]	@ (800230c <HAL_RCC_ClockConfig+0x244>)
 8002164:	4313      	orrs	r3, r2
 8002166:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0310 	and.w	r3, r3, #16
 8002170:	2b00      	cmp	r3, #0
 8002172:	d010      	beq.n	8002196 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	699a      	ldr	r2, [r3, #24]
 8002178:	4b64      	ldr	r3, [pc, #400]	@ (800230c <HAL_RCC_ClockConfig+0x244>)
 800217a:	69db      	ldr	r3, [r3, #28]
 800217c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002180:	429a      	cmp	r2, r3
 8002182:	d908      	bls.n	8002196 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002184:	4b61      	ldr	r3, [pc, #388]	@ (800230c <HAL_RCC_ClockConfig+0x244>)
 8002186:	69db      	ldr	r3, [r3, #28]
 8002188:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	495e      	ldr	r1, [pc, #376]	@ (800230c <HAL_RCC_ClockConfig+0x244>)
 8002192:	4313      	orrs	r3, r2
 8002194:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0320 	and.w	r3, r3, #32
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d010      	beq.n	80021c4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	69da      	ldr	r2, [r3, #28]
 80021a6:	4b59      	ldr	r3, [pc, #356]	@ (800230c <HAL_RCC_ClockConfig+0x244>)
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d908      	bls.n	80021c4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80021b2:	4b56      	ldr	r3, [pc, #344]	@ (800230c <HAL_RCC_ClockConfig+0x244>)
 80021b4:	6a1b      	ldr	r3, [r3, #32]
 80021b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	4953      	ldr	r1, [pc, #332]	@ (800230c <HAL_RCC_ClockConfig+0x244>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d010      	beq.n	80021f2 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	68da      	ldr	r2, [r3, #12]
 80021d4:	4b4d      	ldr	r3, [pc, #308]	@ (800230c <HAL_RCC_ClockConfig+0x244>)
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	f003 030f 	and.w	r3, r3, #15
 80021dc:	429a      	cmp	r2, r3
 80021de:	d908      	bls.n	80021f2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021e0:	4b4a      	ldr	r3, [pc, #296]	@ (800230c <HAL_RCC_ClockConfig+0x244>)
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	f023 020f 	bic.w	r2, r3, #15
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	4947      	ldr	r1, [pc, #284]	@ (800230c <HAL_RCC_ClockConfig+0x244>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d055      	beq.n	80022aa <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80021fe:	4b43      	ldr	r3, [pc, #268]	@ (800230c <HAL_RCC_ClockConfig+0x244>)
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	4940      	ldr	r1, [pc, #256]	@ (800230c <HAL_RCC_ClockConfig+0x244>)
 800220c:	4313      	orrs	r3, r2
 800220e:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2b02      	cmp	r3, #2
 8002216:	d107      	bne.n	8002228 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002218:	4b3c      	ldr	r3, [pc, #240]	@ (800230c <HAL_RCC_ClockConfig+0x244>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d121      	bne.n	8002268 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e0f6      	b.n	8002416 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	2b03      	cmp	r3, #3
 800222e:	d107      	bne.n	8002240 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002230:	4b36      	ldr	r3, [pc, #216]	@ (800230c <HAL_RCC_ClockConfig+0x244>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d115      	bne.n	8002268 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e0ea      	b.n	8002416 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d107      	bne.n	8002258 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002248:	4b30      	ldr	r3, [pc, #192]	@ (800230c <HAL_RCC_ClockConfig+0x244>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002250:	2b00      	cmp	r3, #0
 8002252:	d109      	bne.n	8002268 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e0de      	b.n	8002416 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002258:	4b2c      	ldr	r3, [pc, #176]	@ (800230c <HAL_RCC_ClockConfig+0x244>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b00      	cmp	r3, #0
 8002262:	d101      	bne.n	8002268 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e0d6      	b.n	8002416 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002268:	4b28      	ldr	r3, [pc, #160]	@ (800230c <HAL_RCC_ClockConfig+0x244>)
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	f023 0207 	bic.w	r2, r3, #7
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	4925      	ldr	r1, [pc, #148]	@ (800230c <HAL_RCC_ClockConfig+0x244>)
 8002276:	4313      	orrs	r3, r2
 8002278:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800227a:	f7ff f801 	bl	8001280 <HAL_GetTick>
 800227e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002280:	e00a      	b.n	8002298 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002282:	f7fe fffd 	bl	8001280 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002290:	4293      	cmp	r3, r2
 8002292:	d901      	bls.n	8002298 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e0be      	b.n	8002416 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002298:	4b1c      	ldr	r3, [pc, #112]	@ (800230c <HAL_RCC_ClockConfig+0x244>)
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d1eb      	bne.n	8002282 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d010      	beq.n	80022d8 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	68da      	ldr	r2, [r3, #12]
 80022ba:	4b14      	ldr	r3, [pc, #80]	@ (800230c <HAL_RCC_ClockConfig+0x244>)
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	f003 030f 	and.w	r3, r3, #15
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d208      	bcs.n	80022d8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022c6:	4b11      	ldr	r3, [pc, #68]	@ (800230c <HAL_RCC_ClockConfig+0x244>)
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	f023 020f 	bic.w	r2, r3, #15
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	490e      	ldr	r1, [pc, #56]	@ (800230c <HAL_RCC_ClockConfig+0x244>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002308 <HAL_RCC_ClockConfig+0x240>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 030f 	and.w	r3, r3, #15
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d214      	bcs.n	8002310 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022e6:	4b08      	ldr	r3, [pc, #32]	@ (8002308 <HAL_RCC_ClockConfig+0x240>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f023 020f 	bic.w	r2, r3, #15
 80022ee:	4906      	ldr	r1, [pc, #24]	@ (8002308 <HAL_RCC_ClockConfig+0x240>)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f6:	4b04      	ldr	r3, [pc, #16]	@ (8002308 <HAL_RCC_ClockConfig+0x240>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 030f 	and.w	r3, r3, #15
 80022fe:	683a      	ldr	r2, [r7, #0]
 8002300:	429a      	cmp	r2, r3
 8002302:	d005      	beq.n	8002310 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e086      	b.n	8002416 <HAL_RCC_ClockConfig+0x34e>
 8002308:	52002000 	.word	0x52002000
 800230c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b00      	cmp	r3, #0
 800231a:	d010      	beq.n	800233e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	691a      	ldr	r2, [r3, #16]
 8002320:	4b3f      	ldr	r3, [pc, #252]	@ (8002420 <HAL_RCC_ClockConfig+0x358>)
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002328:	429a      	cmp	r2, r3
 800232a:	d208      	bcs.n	800233e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800232c:	4b3c      	ldr	r3, [pc, #240]	@ (8002420 <HAL_RCC_ClockConfig+0x358>)
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	4939      	ldr	r1, [pc, #228]	@ (8002420 <HAL_RCC_ClockConfig+0x358>)
 800233a:	4313      	orrs	r3, r2
 800233c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0308 	and.w	r3, r3, #8
 8002346:	2b00      	cmp	r3, #0
 8002348:	d010      	beq.n	800236c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	695a      	ldr	r2, [r3, #20]
 800234e:	4b34      	ldr	r3, [pc, #208]	@ (8002420 <HAL_RCC_ClockConfig+0x358>)
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002356:	429a      	cmp	r2, r3
 8002358:	d208      	bcs.n	800236c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800235a:	4b31      	ldr	r3, [pc, #196]	@ (8002420 <HAL_RCC_ClockConfig+0x358>)
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	492e      	ldr	r1, [pc, #184]	@ (8002420 <HAL_RCC_ClockConfig+0x358>)
 8002368:	4313      	orrs	r3, r2
 800236a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0310 	and.w	r3, r3, #16
 8002374:	2b00      	cmp	r3, #0
 8002376:	d010      	beq.n	800239a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	699a      	ldr	r2, [r3, #24]
 800237c:	4b28      	ldr	r3, [pc, #160]	@ (8002420 <HAL_RCC_ClockConfig+0x358>)
 800237e:	69db      	ldr	r3, [r3, #28]
 8002380:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002384:	429a      	cmp	r2, r3
 8002386:	d208      	bcs.n	800239a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002388:	4b25      	ldr	r3, [pc, #148]	@ (8002420 <HAL_RCC_ClockConfig+0x358>)
 800238a:	69db      	ldr	r3, [r3, #28]
 800238c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	4922      	ldr	r1, [pc, #136]	@ (8002420 <HAL_RCC_ClockConfig+0x358>)
 8002396:	4313      	orrs	r3, r2
 8002398:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0320 	and.w	r3, r3, #32
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d010      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69da      	ldr	r2, [r3, #28]
 80023aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002420 <HAL_RCC_ClockConfig+0x358>)
 80023ac:	6a1b      	ldr	r3, [r3, #32]
 80023ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d208      	bcs.n	80023c8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80023b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002420 <HAL_RCC_ClockConfig+0x358>)
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	4917      	ldr	r1, [pc, #92]	@ (8002420 <HAL_RCC_ClockConfig+0x358>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80023c8:	f000 f834 	bl	8002434 <HAL_RCC_GetSysClockFreq>
 80023cc:	4602      	mov	r2, r0
 80023ce:	4b14      	ldr	r3, [pc, #80]	@ (8002420 <HAL_RCC_ClockConfig+0x358>)
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	0a1b      	lsrs	r3, r3, #8
 80023d4:	f003 030f 	and.w	r3, r3, #15
 80023d8:	4912      	ldr	r1, [pc, #72]	@ (8002424 <HAL_RCC_ClockConfig+0x35c>)
 80023da:	5ccb      	ldrb	r3, [r1, r3]
 80023dc:	f003 031f 	and.w	r3, r3, #31
 80023e0:	fa22 f303 	lsr.w	r3, r2, r3
 80023e4:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80023e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002420 <HAL_RCC_ClockConfig+0x358>)
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	f003 030f 	and.w	r3, r3, #15
 80023ee:	4a0d      	ldr	r2, [pc, #52]	@ (8002424 <HAL_RCC_ClockConfig+0x35c>)
 80023f0:	5cd3      	ldrb	r3, [r2, r3]
 80023f2:	f003 031f 	and.w	r3, r3, #31
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	fa22 f303 	lsr.w	r3, r2, r3
 80023fc:	4a0a      	ldr	r2, [pc, #40]	@ (8002428 <HAL_RCC_ClockConfig+0x360>)
 80023fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002400:	4a0a      	ldr	r2, [pc, #40]	@ (800242c <HAL_RCC_ClockConfig+0x364>)
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002406:	4b0a      	ldr	r3, [pc, #40]	@ (8002430 <HAL_RCC_ClockConfig+0x368>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f7fe feee 	bl	80011ec <HAL_InitTick>
 8002410:	4603      	mov	r3, r0
 8002412:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002414:	7bfb      	ldrb	r3, [r7, #15]
}
 8002416:	4618      	mov	r0, r3
 8002418:	3718      	adds	r7, #24
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	58024400 	.word	0x58024400
 8002424:	0800b104 	.word	0x0800b104
 8002428:	24000004 	.word	0x24000004
 800242c:	24000000 	.word	0x24000000
 8002430:	24000008 	.word	0x24000008

08002434 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002434:	b480      	push	{r7}
 8002436:	b089      	sub	sp, #36	@ 0x24
 8002438:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800243a:	4bb3      	ldr	r3, [pc, #716]	@ (8002708 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002442:	2b18      	cmp	r3, #24
 8002444:	f200 8155 	bhi.w	80026f2 <HAL_RCC_GetSysClockFreq+0x2be>
 8002448:	a201      	add	r2, pc, #4	@ (adr r2, 8002450 <HAL_RCC_GetSysClockFreq+0x1c>)
 800244a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800244e:	bf00      	nop
 8002450:	080024b5 	.word	0x080024b5
 8002454:	080026f3 	.word	0x080026f3
 8002458:	080026f3 	.word	0x080026f3
 800245c:	080026f3 	.word	0x080026f3
 8002460:	080026f3 	.word	0x080026f3
 8002464:	080026f3 	.word	0x080026f3
 8002468:	080026f3 	.word	0x080026f3
 800246c:	080026f3 	.word	0x080026f3
 8002470:	080024db 	.word	0x080024db
 8002474:	080026f3 	.word	0x080026f3
 8002478:	080026f3 	.word	0x080026f3
 800247c:	080026f3 	.word	0x080026f3
 8002480:	080026f3 	.word	0x080026f3
 8002484:	080026f3 	.word	0x080026f3
 8002488:	080026f3 	.word	0x080026f3
 800248c:	080026f3 	.word	0x080026f3
 8002490:	080024e1 	.word	0x080024e1
 8002494:	080026f3 	.word	0x080026f3
 8002498:	080026f3 	.word	0x080026f3
 800249c:	080026f3 	.word	0x080026f3
 80024a0:	080026f3 	.word	0x080026f3
 80024a4:	080026f3 	.word	0x080026f3
 80024a8:	080026f3 	.word	0x080026f3
 80024ac:	080026f3 	.word	0x080026f3
 80024b0:	080024e7 	.word	0x080024e7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80024b4:	4b94      	ldr	r3, [pc, #592]	@ (8002708 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0320 	and.w	r3, r3, #32
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d009      	beq.n	80024d4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80024c0:	4b91      	ldr	r3, [pc, #580]	@ (8002708 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	08db      	lsrs	r3, r3, #3
 80024c6:	f003 0303 	and.w	r3, r3, #3
 80024ca:	4a90      	ldr	r2, [pc, #576]	@ (800270c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80024cc:	fa22 f303 	lsr.w	r3, r2, r3
 80024d0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80024d2:	e111      	b.n	80026f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80024d4:	4b8d      	ldr	r3, [pc, #564]	@ (800270c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80024d6:	61bb      	str	r3, [r7, #24]
      break;
 80024d8:	e10e      	b.n	80026f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80024da:	4b8d      	ldr	r3, [pc, #564]	@ (8002710 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80024dc:	61bb      	str	r3, [r7, #24]
      break;
 80024de:	e10b      	b.n	80026f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80024e0:	4b8c      	ldr	r3, [pc, #560]	@ (8002714 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80024e2:	61bb      	str	r3, [r7, #24]
      break;
 80024e4:	e108      	b.n	80026f8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80024e6:	4b88      	ldr	r3, [pc, #544]	@ (8002708 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ea:	f003 0303 	and.w	r3, r3, #3
 80024ee:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80024f0:	4b85      	ldr	r3, [pc, #532]	@ (8002708 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f4:	091b      	lsrs	r3, r3, #4
 80024f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80024fa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80024fc:	4b82      	ldr	r3, [pc, #520]	@ (8002708 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002506:	4b80      	ldr	r3, [pc, #512]	@ (8002708 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002508:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800250a:	08db      	lsrs	r3, r3, #3
 800250c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	fb02 f303 	mul.w	r3, r2, r3
 8002516:	ee07 3a90 	vmov	s15, r3
 800251a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800251e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	2b00      	cmp	r3, #0
 8002526:	f000 80e1 	beq.w	80026ec <HAL_RCC_GetSysClockFreq+0x2b8>
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	2b02      	cmp	r3, #2
 800252e:	f000 8083 	beq.w	8002638 <HAL_RCC_GetSysClockFreq+0x204>
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	2b02      	cmp	r3, #2
 8002536:	f200 80a1 	bhi.w	800267c <HAL_RCC_GetSysClockFreq+0x248>
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d003      	beq.n	8002548 <HAL_RCC_GetSysClockFreq+0x114>
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d056      	beq.n	80025f4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002546:	e099      	b.n	800267c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002548:	4b6f      	ldr	r3, [pc, #444]	@ (8002708 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0320 	and.w	r3, r3, #32
 8002550:	2b00      	cmp	r3, #0
 8002552:	d02d      	beq.n	80025b0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002554:	4b6c      	ldr	r3, [pc, #432]	@ (8002708 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	08db      	lsrs	r3, r3, #3
 800255a:	f003 0303 	and.w	r3, r3, #3
 800255e:	4a6b      	ldr	r2, [pc, #428]	@ (800270c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002560:	fa22 f303 	lsr.w	r3, r2, r3
 8002564:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	ee07 3a90 	vmov	s15, r3
 800256c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	ee07 3a90 	vmov	s15, r3
 8002576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800257a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800257e:	4b62      	ldr	r3, [pc, #392]	@ (8002708 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002586:	ee07 3a90 	vmov	s15, r3
 800258a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800258e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002592:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002718 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002596:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800259a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800259e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80025a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025aa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80025ae:	e087      	b.n	80026c0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	ee07 3a90 	vmov	s15, r3
 80025b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025ba:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800271c <HAL_RCC_GetSysClockFreq+0x2e8>
 80025be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025c2:	4b51      	ldr	r3, [pc, #324]	@ (8002708 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025ca:	ee07 3a90 	vmov	s15, r3
 80025ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80025d6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002718 <HAL_RCC_GetSysClockFreq+0x2e4>
 80025da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80025e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80025f2:	e065      	b.n	80026c0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	ee07 3a90 	vmov	s15, r3
 80025fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025fe:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002720 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002602:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002606:	4b40      	ldr	r3, [pc, #256]	@ (8002708 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800260e:	ee07 3a90 	vmov	s15, r3
 8002612:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002616:	ed97 6a02 	vldr	s12, [r7, #8]
 800261a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002718 <HAL_RCC_GetSysClockFreq+0x2e4>
 800261e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002622:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002626:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800262a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800262e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002632:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002636:	e043      	b.n	80026c0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	ee07 3a90 	vmov	s15, r3
 800263e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002642:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002724 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002646:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800264a:	4b2f      	ldr	r3, [pc, #188]	@ (8002708 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002652:	ee07 3a90 	vmov	s15, r3
 8002656:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800265a:	ed97 6a02 	vldr	s12, [r7, #8]
 800265e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002718 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002662:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002666:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800266a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800266e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002676:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800267a:	e021      	b.n	80026c0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	ee07 3a90 	vmov	s15, r3
 8002682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002686:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002720 <HAL_RCC_GetSysClockFreq+0x2ec>
 800268a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800268e:	4b1e      	ldr	r3, [pc, #120]	@ (8002708 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002692:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002696:	ee07 3a90 	vmov	s15, r3
 800269a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800269e:	ed97 6a02 	vldr	s12, [r7, #8]
 80026a2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002718 <HAL_RCC_GetSysClockFreq+0x2e4>
 80026a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80026b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80026be:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80026c0:	4b11      	ldr	r3, [pc, #68]	@ (8002708 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c4:	0a5b      	lsrs	r3, r3, #9
 80026c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80026ca:	3301      	adds	r3, #1
 80026cc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	ee07 3a90 	vmov	s15, r3
 80026d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80026dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026e4:	ee17 3a90 	vmov	r3, s15
 80026e8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80026ea:	e005      	b.n	80026f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80026ec:	2300      	movs	r3, #0
 80026ee:	61bb      	str	r3, [r7, #24]
      break;
 80026f0:	e002      	b.n	80026f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80026f2:	4b07      	ldr	r3, [pc, #28]	@ (8002710 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80026f4:	61bb      	str	r3, [r7, #24]
      break;
 80026f6:	bf00      	nop
  }

  return sysclockfreq;
 80026f8:	69bb      	ldr	r3, [r7, #24]
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3724      	adds	r7, #36	@ 0x24
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	58024400 	.word	0x58024400
 800270c:	03d09000 	.word	0x03d09000
 8002710:	003d0900 	.word	0x003d0900
 8002714:	016e3600 	.word	0x016e3600
 8002718:	46000000 	.word	0x46000000
 800271c:	4c742400 	.word	0x4c742400
 8002720:	4a742400 	.word	0x4a742400
 8002724:	4bb71b00 	.word	0x4bb71b00

08002728 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800272e:	f7ff fe81 	bl	8002434 <HAL_RCC_GetSysClockFreq>
 8002732:	4602      	mov	r2, r0
 8002734:	4b10      	ldr	r3, [pc, #64]	@ (8002778 <HAL_RCC_GetHCLKFreq+0x50>)
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	0a1b      	lsrs	r3, r3, #8
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	490f      	ldr	r1, [pc, #60]	@ (800277c <HAL_RCC_GetHCLKFreq+0x54>)
 8002740:	5ccb      	ldrb	r3, [r1, r3]
 8002742:	f003 031f 	and.w	r3, r3, #31
 8002746:	fa22 f303 	lsr.w	r3, r2, r3
 800274a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800274c:	4b0a      	ldr	r3, [pc, #40]	@ (8002778 <HAL_RCC_GetHCLKFreq+0x50>)
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	f003 030f 	and.w	r3, r3, #15
 8002754:	4a09      	ldr	r2, [pc, #36]	@ (800277c <HAL_RCC_GetHCLKFreq+0x54>)
 8002756:	5cd3      	ldrb	r3, [r2, r3]
 8002758:	f003 031f 	and.w	r3, r3, #31
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	fa22 f303 	lsr.w	r3, r2, r3
 8002762:	4a07      	ldr	r2, [pc, #28]	@ (8002780 <HAL_RCC_GetHCLKFreq+0x58>)
 8002764:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002766:	4a07      	ldr	r2, [pc, #28]	@ (8002784 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800276c:	4b04      	ldr	r3, [pc, #16]	@ (8002780 <HAL_RCC_GetHCLKFreq+0x58>)
 800276e:	681b      	ldr	r3, [r3, #0]
}
 8002770:	4618      	mov	r0, r3
 8002772:	3708      	adds	r7, #8
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	58024400 	.word	0x58024400
 800277c:	0800b104 	.word	0x0800b104
 8002780:	24000004 	.word	0x24000004
 8002784:	24000000 	.word	0x24000000

08002788 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800278c:	f7ff ffcc 	bl	8002728 <HAL_RCC_GetHCLKFreq>
 8002790:	4602      	mov	r2, r0
 8002792:	4b06      	ldr	r3, [pc, #24]	@ (80027ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	091b      	lsrs	r3, r3, #4
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	4904      	ldr	r1, [pc, #16]	@ (80027b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800279e:	5ccb      	ldrb	r3, [r1, r3]
 80027a0:	f003 031f 	and.w	r3, r3, #31
 80027a4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	58024400 	.word	0x58024400
 80027b0:	0800b104 	.word	0x0800b104

080027b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80027b8:	f7ff ffb6 	bl	8002728 <HAL_RCC_GetHCLKFreq>
 80027bc:	4602      	mov	r2, r0
 80027be:	4b06      	ldr	r3, [pc, #24]	@ (80027d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027c0:	69db      	ldr	r3, [r3, #28]
 80027c2:	0a1b      	lsrs	r3, r3, #8
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	4904      	ldr	r1, [pc, #16]	@ (80027dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80027ca:	5ccb      	ldrb	r3, [r1, r3]
 80027cc:	f003 031f 	and.w	r3, r3, #31
 80027d0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	58024400 	.word	0x58024400
 80027dc:	0800b104 	.word	0x0800b104

080027e0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027e4:	b0c8      	sub	sp, #288	@ 0x120
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027ec:	2300      	movs	r3, #0
 80027ee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027f2:	2300      	movs	r3, #0
 80027f4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80027f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80027fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002800:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002804:	2500      	movs	r5, #0
 8002806:	ea54 0305 	orrs.w	r3, r4, r5
 800280a:	d049      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800280c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002810:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002812:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002816:	d02f      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002818:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800281c:	d828      	bhi.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800281e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002822:	d01a      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002824:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002828:	d822      	bhi.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800282e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002832:	d007      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002834:	e01c      	b.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002836:	4ba7      	ldr	r3, [pc, #668]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800283a:	4aa6      	ldr	r2, [pc, #664]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800283c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002840:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002842:	e01a      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002844:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002848:	3308      	adds	r3, #8
 800284a:	2102      	movs	r1, #2
 800284c:	4618      	mov	r0, r3
 800284e:	f001 fc43 	bl	80040d8 <RCCEx_PLL2_Config>
 8002852:	4603      	mov	r3, r0
 8002854:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002858:	e00f      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800285a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800285e:	3328      	adds	r3, #40	@ 0x28
 8002860:	2102      	movs	r1, #2
 8002862:	4618      	mov	r0, r3
 8002864:	f001 fcea 	bl	800423c <RCCEx_PLL3_Config>
 8002868:	4603      	mov	r3, r0
 800286a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800286e:	e004      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8002876:	e000      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002878:	bf00      	nop
    }

    if (ret == HAL_OK)
 800287a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10a      	bne.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002882:	4b94      	ldr	r3, [pc, #592]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002884:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002886:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800288a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800288e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002890:	4a90      	ldr	r2, [pc, #576]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002892:	430b      	orrs	r3, r1
 8002894:	6513      	str	r3, [r2, #80]	@ 0x50
 8002896:	e003      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002898:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800289c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80028a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80028a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80028ac:	f04f 0900 	mov.w	r9, #0
 80028b0:	ea58 0309 	orrs.w	r3, r8, r9
 80028b4:	d047      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80028b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80028ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028bc:	2b04      	cmp	r3, #4
 80028be:	d82a      	bhi.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80028c0:	a201      	add	r2, pc, #4	@ (adr r2, 80028c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80028c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028c6:	bf00      	nop
 80028c8:	080028dd 	.word	0x080028dd
 80028cc:	080028eb 	.word	0x080028eb
 80028d0:	08002901 	.word	0x08002901
 80028d4:	0800291f 	.word	0x0800291f
 80028d8:	0800291f 	.word	0x0800291f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028dc:	4b7d      	ldr	r3, [pc, #500]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80028de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028e0:	4a7c      	ldr	r2, [pc, #496]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80028e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80028e8:	e01a      	b.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80028ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80028ee:	3308      	adds	r3, #8
 80028f0:	2100      	movs	r1, #0
 80028f2:	4618      	mov	r0, r3
 80028f4:	f001 fbf0 	bl	80040d8 <RCCEx_PLL2_Config>
 80028f8:	4603      	mov	r3, r0
 80028fa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80028fe:	e00f      	b.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002900:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002904:	3328      	adds	r3, #40	@ 0x28
 8002906:	2100      	movs	r1, #0
 8002908:	4618      	mov	r0, r3
 800290a:	f001 fc97 	bl	800423c <RCCEx_PLL3_Config>
 800290e:	4603      	mov	r3, r0
 8002910:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002914:	e004      	b.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800291c:	e000      	b.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800291e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002920:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002924:	2b00      	cmp	r3, #0
 8002926:	d10a      	bne.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002928:	4b6a      	ldr	r3, [pc, #424]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800292a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800292c:	f023 0107 	bic.w	r1, r3, #7
 8002930:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002936:	4a67      	ldr	r2, [pc, #412]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002938:	430b      	orrs	r3, r1
 800293a:	6513      	str	r3, [r2, #80]	@ 0x50
 800293c:	e003      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800293e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002942:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8002946:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800294a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800294e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002952:	f04f 0b00 	mov.w	fp, #0
 8002956:	ea5a 030b 	orrs.w	r3, sl, fp
 800295a:	d054      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800295c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002960:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002962:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002966:	d036      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8002968:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800296c:	d82f      	bhi.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800296e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002972:	d032      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002974:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002978:	d829      	bhi.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800297a:	2bc0      	cmp	r3, #192	@ 0xc0
 800297c:	d02f      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800297e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002980:	d825      	bhi.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002982:	2b80      	cmp	r3, #128	@ 0x80
 8002984:	d018      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8002986:	2b80      	cmp	r3, #128	@ 0x80
 8002988:	d821      	bhi.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800298a:	2b00      	cmp	r3, #0
 800298c:	d002      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800298e:	2b40      	cmp	r3, #64	@ 0x40
 8002990:	d007      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8002992:	e01c      	b.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002994:	4b4f      	ldr	r3, [pc, #316]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002998:	4a4e      	ldr	r2, [pc, #312]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800299a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800299e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80029a0:	e01e      	b.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80029a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80029a6:	3308      	adds	r3, #8
 80029a8:	2100      	movs	r1, #0
 80029aa:	4618      	mov	r0, r3
 80029ac:	f001 fb94 	bl	80040d8 <RCCEx_PLL2_Config>
 80029b0:	4603      	mov	r3, r0
 80029b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80029b6:	e013      	b.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80029b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80029bc:	3328      	adds	r3, #40	@ 0x28
 80029be:	2100      	movs	r1, #0
 80029c0:	4618      	mov	r0, r3
 80029c2:	f001 fc3b 	bl	800423c <RCCEx_PLL3_Config>
 80029c6:	4603      	mov	r3, r0
 80029c8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80029cc:	e008      	b.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80029d4:	e004      	b.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80029d6:	bf00      	nop
 80029d8:	e002      	b.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80029da:	bf00      	nop
 80029dc:	e000      	b.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80029de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d10a      	bne.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80029e8:	4b3a      	ldr	r3, [pc, #232]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029ec:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80029f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80029f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029f6:	4a37      	ldr	r2, [pc, #220]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029f8:	430b      	orrs	r3, r1
 80029fa:	6513      	str	r3, [r2, #80]	@ 0x50
 80029fc:	e003      	b.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029fe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002a02:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8002a06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a0e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002a12:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002a16:	2300      	movs	r3, #0
 8002a18:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002a1c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002a20:	460b      	mov	r3, r1
 8002a22:	4313      	orrs	r3, r2
 8002a24:	d05c      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8002a26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002a2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a2c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8002a30:	d03b      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002a32:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8002a36:	d834      	bhi.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002a38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a3c:	d037      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8002a3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a42:	d82e      	bhi.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002a44:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002a48:	d033      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002a4a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002a4e:	d828      	bhi.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002a50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a54:	d01a      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8002a56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a5a:	d822      	bhi.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d003      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8002a60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a64:	d007      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8002a66:	e01c      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a68:	4b1a      	ldr	r3, [pc, #104]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a6c:	4a19      	ldr	r2, [pc, #100]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002a74:	e01e      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002a76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002a7a:	3308      	adds	r3, #8
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f001 fb2a 	bl	80040d8 <RCCEx_PLL2_Config>
 8002a84:	4603      	mov	r3, r0
 8002a86:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002a8a:	e013      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002a90:	3328      	adds	r3, #40	@ 0x28
 8002a92:	2100      	movs	r1, #0
 8002a94:	4618      	mov	r0, r3
 8002a96:	f001 fbd1 	bl	800423c <RCCEx_PLL3_Config>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002aa0:	e008      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8002aa8:	e004      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002aaa:	bf00      	nop
 8002aac:	e002      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002aae:	bf00      	nop
 8002ab0:	e000      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002ab2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ab4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d10d      	bne.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8002abc:	4b05      	ldr	r3, [pc, #20]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002abe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ac0:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8002ac4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002ac8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aca:	4a02      	ldr	r2, [pc, #8]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002acc:	430b      	orrs	r3, r1
 8002ace:	6513      	str	r3, [r2, #80]	@ 0x50
 8002ad0:	e006      	b.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8002ad2:	bf00      	nop
 8002ad4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ad8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002adc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002ae0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002aec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002af0:	2300      	movs	r3, #0
 8002af2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002af6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002afa:	460b      	mov	r3, r1
 8002afc:	4313      	orrs	r3, r2
 8002afe:	d03a      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8002b00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b06:	2b30      	cmp	r3, #48	@ 0x30
 8002b08:	d01f      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8002b0a:	2b30      	cmp	r3, #48	@ 0x30
 8002b0c:	d819      	bhi.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002b0e:	2b20      	cmp	r3, #32
 8002b10:	d00c      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002b12:	2b20      	cmp	r3, #32
 8002b14:	d815      	bhi.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d019      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8002b1a:	2b10      	cmp	r3, #16
 8002b1c:	d111      	bne.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b1e:	4bae      	ldr	r3, [pc, #696]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b22:	4aad      	ldr	r2, [pc, #692]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002b24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002b2a:	e011      	b.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002b2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002b30:	3308      	adds	r3, #8
 8002b32:	2102      	movs	r1, #2
 8002b34:	4618      	mov	r0, r3
 8002b36:	f001 facf 	bl	80040d8 <RCCEx_PLL2_Config>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002b40:	e006      	b.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8002b48:	e002      	b.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8002b4a:	bf00      	nop
 8002b4c:	e000      	b.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8002b4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b50:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d10a      	bne.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002b58:	4b9f      	ldr	r3, [pc, #636]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002b5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b5c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002b60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b66:	4a9c      	ldr	r2, [pc, #624]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002b68:	430b      	orrs	r3, r1
 8002b6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b6c:	e003      	b.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b6e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002b72:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002b76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b7e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002b82:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002b86:	2300      	movs	r3, #0
 8002b88:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002b8c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002b90:	460b      	mov	r3, r1
 8002b92:	4313      	orrs	r3, r2
 8002b94:	d051      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002b96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002b9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ba0:	d035      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002ba2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ba6:	d82e      	bhi.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002ba8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002bac:	d031      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8002bae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002bb2:	d828      	bhi.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002bb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bb8:	d01a      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8002bba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bbe:	d822      	bhi.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d003      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8002bc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bc8:	d007      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8002bca:	e01c      	b.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bcc:	4b82      	ldr	r3, [pc, #520]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd0:	4a81      	ldr	r2, [pc, #516]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002bd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002bd8:	e01c      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002bda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002bde:	3308      	adds	r3, #8
 8002be0:	2100      	movs	r1, #0
 8002be2:	4618      	mov	r0, r3
 8002be4:	f001 fa78 	bl	80040d8 <RCCEx_PLL2_Config>
 8002be8:	4603      	mov	r3, r0
 8002bea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002bee:	e011      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002bf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002bf4:	3328      	adds	r3, #40	@ 0x28
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f001 fb1f 	bl	800423c <RCCEx_PLL3_Config>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002c04:	e006      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8002c0c:	e002      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8002c0e:	bf00      	nop
 8002c10:	e000      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8002c12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c14:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d10a      	bne.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002c1c:	4b6e      	ldr	r3, [pc, #440]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002c1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c20:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002c24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002c28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c2a:	4a6b      	ldr	r2, [pc, #428]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002c2c:	430b      	orrs	r3, r1
 8002c2e:	6513      	str	r3, [r2, #80]	@ 0x50
 8002c30:	e003      	b.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c32:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002c36:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002c3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c42:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002c46:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002c50:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002c54:	460b      	mov	r3, r1
 8002c56:	4313      	orrs	r3, r2
 8002c58:	d053      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002c5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002c5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c64:	d033      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8002c66:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c6a:	d82c      	bhi.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002c6c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002c70:	d02f      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8002c72:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002c76:	d826      	bhi.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002c78:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002c7c:	d02b      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002c7e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002c82:	d820      	bhi.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002c84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002c88:	d012      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8002c8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002c8e:	d81a      	bhi.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d022      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8002c94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c98:	d115      	bne.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002c9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002c9e:	3308      	adds	r3, #8
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f001 fa18 	bl	80040d8 <RCCEx_PLL2_Config>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002cae:	e015      	b.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002cb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002cb4:	3328      	adds	r3, #40	@ 0x28
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f001 fabf 	bl	800423c <RCCEx_PLL3_Config>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002cc4:	e00a      	b.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8002ccc:	e006      	b.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002cce:	bf00      	nop
 8002cd0:	e004      	b.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002cd2:	bf00      	nop
 8002cd4:	e002      	b.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002cd6:	bf00      	nop
 8002cd8:	e000      	b.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002cda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cdc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d10a      	bne.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002ce4:	4b3c      	ldr	r3, [pc, #240]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002ce6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ce8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002cec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002cf0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002cf2:	4a39      	ldr	r2, [pc, #228]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002cf4:	430b      	orrs	r3, r1
 8002cf6:	6513      	str	r3, [r2, #80]	@ 0x50
 8002cf8:	e003      	b.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cfa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002cfe:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002d02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d0a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002d0e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002d12:	2300      	movs	r3, #0
 8002d14:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002d18:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	d060      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002d22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002d26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002d2a:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8002d2e:	d039      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8002d30:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8002d34:	d832      	bhi.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002d36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d3a:	d035      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8002d3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d40:	d82c      	bhi.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002d42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d46:	d031      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8002d48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d4c:	d826      	bhi.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002d4e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002d52:	d02d      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8002d54:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002d58:	d820      	bhi.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002d5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d5e:	d012      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002d60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d64:	d81a      	bhi.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d024      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002d6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d6e:	d115      	bne.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002d70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002d74:	3308      	adds	r3, #8
 8002d76:	2101      	movs	r1, #1
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f001 f9ad 	bl	80040d8 <RCCEx_PLL2_Config>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002d84:	e017      	b.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002d86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002d8a:	3328      	adds	r3, #40	@ 0x28
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f001 fa54 	bl	800423c <RCCEx_PLL3_Config>
 8002d94:	4603      	mov	r3, r0
 8002d96:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002d9a:	e00c      	b.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8002da2:	e008      	b.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002da4:	bf00      	nop
 8002da6:	e006      	b.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002da8:	bf00      	nop
 8002daa:	e004      	b.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002dac:	bf00      	nop
 8002dae:	e002      	b.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002db0:	bf00      	nop
 8002db2:	e000      	b.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002db4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002db6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10e      	bne.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002dbe:	4b06      	ldr	r3, [pc, #24]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dc2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002dc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002dca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002dce:	4a02      	ldr	r2, [pc, #8]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002dd0:	430b      	orrs	r3, r1
 8002dd2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002dd4:	e006      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8002dd6:	bf00      	nop
 8002dd8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ddc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002de0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002de4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dec:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002df0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002df4:	2300      	movs	r3, #0
 8002df6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002dfa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002dfe:	460b      	mov	r3, r1
 8002e00:	4313      	orrs	r3, r2
 8002e02:	d037      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002e04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002e08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e0e:	d00e      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8002e10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e14:	d816      	bhi.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d018      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8002e1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e1e:	d111      	bne.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e20:	4bc4      	ldr	r3, [pc, #784]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e24:	4ac3      	ldr	r2, [pc, #780]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002e2c:	e00f      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002e32:	3308      	adds	r3, #8
 8002e34:	2101      	movs	r1, #1
 8002e36:	4618      	mov	r0, r3
 8002e38:	f001 f94e 	bl	80040d8 <RCCEx_PLL2_Config>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002e42:	e004      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8002e4a:	e000      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8002e4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e4e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10a      	bne.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002e56:	4bb7      	ldr	r3, [pc, #732]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e5a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002e5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002e62:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e64:	4ab3      	ldr	r2, [pc, #716]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e66:	430b      	orrs	r3, r1
 8002e68:	6513      	str	r3, [r2, #80]	@ 0x50
 8002e6a:	e003      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e6c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002e70:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002e74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e7c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002e80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002e84:	2300      	movs	r3, #0
 8002e86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002e8a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002e8e:	460b      	mov	r3, r1
 8002e90:	4313      	orrs	r3, r2
 8002e92:	d039      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002e94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002e98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e9a:	2b03      	cmp	r3, #3
 8002e9c:	d81c      	bhi.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8002e9e:	a201      	add	r2, pc, #4	@ (adr r2, 8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8002ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea4:	08002ee1 	.word	0x08002ee1
 8002ea8:	08002eb5 	.word	0x08002eb5
 8002eac:	08002ec3 	.word	0x08002ec3
 8002eb0:	08002ee1 	.word	0x08002ee1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002eb4:	4b9f      	ldr	r3, [pc, #636]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb8:	4a9e      	ldr	r2, [pc, #632]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002eba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ebe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002ec0:	e00f      	b.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002ec2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002ec6:	3308      	adds	r3, #8
 8002ec8:	2102      	movs	r1, #2
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f001 f904 	bl	80040d8 <RCCEx_PLL2_Config>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002ed6:	e004      	b.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8002ede:	e000      	b.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8002ee0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ee2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10a      	bne.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002eea:	4b92      	ldr	r3, [pc, #584]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eee:	f023 0103 	bic.w	r1, r3, #3
 8002ef2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002ef6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ef8:	4a8e      	ldr	r2, [pc, #568]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002efa:	430b      	orrs	r3, r1
 8002efc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002efe:	e003      	b.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f00:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002f04:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f10:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002f14:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002f18:	2300      	movs	r3, #0
 8002f1a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002f1e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002f22:	460b      	mov	r3, r1
 8002f24:	4313      	orrs	r3, r2
 8002f26:	f000 8099 	beq.w	800305c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f2a:	4b83      	ldr	r3, [pc, #524]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a82      	ldr	r2, [pc, #520]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002f30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f34:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f36:	f7fe f9a3 	bl	8001280 <HAL_GetTick>
 8002f3a:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f3e:	e00b      	b.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f40:	f7fe f99e 	bl	8001280 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b64      	cmp	r3, #100	@ 0x64
 8002f4e:	d903      	bls.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8002f56:	e005      	b.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f58:	4b77      	ldr	r3, [pc, #476]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d0ed      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8002f64:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d173      	bne.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002f6c:	4b71      	ldr	r3, [pc, #452]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f6e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002f70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002f74:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002f78:	4053      	eors	r3, r2
 8002f7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d015      	beq.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f82:	4b6c      	ldr	r3, [pc, #432]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f8a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f8e:	4b69      	ldr	r3, [pc, #420]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f92:	4a68      	ldr	r2, [pc, #416]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f98:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f9a:	4b66      	ldr	r3, [pc, #408]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f9e:	4a65      	ldr	r2, [pc, #404]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002fa0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fa4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002fa6:	4a63      	ldr	r2, [pc, #396]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fac:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002fae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002fb2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002fb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fba:	d118      	bne.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fbc:	f7fe f960 	bl	8001280 <HAL_GetTick>
 8002fc0:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fc4:	e00d      	b.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fc6:	f7fe f95b 	bl	8001280 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002fd0:	1ad2      	subs	r2, r2, r3
 8002fd2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d903      	bls.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8002fe0:	e005      	b.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fe2:	4b54      	ldr	r3, [pc, #336]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002fe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d0eb      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8002fee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d129      	bne.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ff6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002ffa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002ffe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003002:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003006:	d10e      	bne.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003008:	4b4a      	ldr	r3, [pc, #296]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003010:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003014:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003018:	091a      	lsrs	r2, r3, #4
 800301a:	4b48      	ldr	r3, [pc, #288]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800301c:	4013      	ands	r3, r2
 800301e:	4a45      	ldr	r2, [pc, #276]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003020:	430b      	orrs	r3, r1
 8003022:	6113      	str	r3, [r2, #16]
 8003024:	e005      	b.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003026:	4b43      	ldr	r3, [pc, #268]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	4a42      	ldr	r2, [pc, #264]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800302c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003030:	6113      	str	r3, [r2, #16]
 8003032:	4b40      	ldr	r3, [pc, #256]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003034:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003036:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800303a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800303e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003042:	4a3c      	ldr	r2, [pc, #240]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003044:	430b      	orrs	r3, r1
 8003046:	6713      	str	r3, [r2, #112]	@ 0x70
 8003048:	e008      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800304a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800304e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8003052:	e003      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003054:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003058:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800305c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003064:	f002 0301 	and.w	r3, r2, #1
 8003068:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800306c:	2300      	movs	r3, #0
 800306e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003072:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003076:	460b      	mov	r3, r1
 8003078:	4313      	orrs	r3, r2
 800307a:	f000 8090 	beq.w	800319e <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800307e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003082:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003086:	2b28      	cmp	r3, #40	@ 0x28
 8003088:	d870      	bhi.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800308a:	a201      	add	r2, pc, #4	@ (adr r2, 8003090 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800308c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003090:	08003175 	.word	0x08003175
 8003094:	0800316d 	.word	0x0800316d
 8003098:	0800316d 	.word	0x0800316d
 800309c:	0800316d 	.word	0x0800316d
 80030a0:	0800316d 	.word	0x0800316d
 80030a4:	0800316d 	.word	0x0800316d
 80030a8:	0800316d 	.word	0x0800316d
 80030ac:	0800316d 	.word	0x0800316d
 80030b0:	08003141 	.word	0x08003141
 80030b4:	0800316d 	.word	0x0800316d
 80030b8:	0800316d 	.word	0x0800316d
 80030bc:	0800316d 	.word	0x0800316d
 80030c0:	0800316d 	.word	0x0800316d
 80030c4:	0800316d 	.word	0x0800316d
 80030c8:	0800316d 	.word	0x0800316d
 80030cc:	0800316d 	.word	0x0800316d
 80030d0:	08003157 	.word	0x08003157
 80030d4:	0800316d 	.word	0x0800316d
 80030d8:	0800316d 	.word	0x0800316d
 80030dc:	0800316d 	.word	0x0800316d
 80030e0:	0800316d 	.word	0x0800316d
 80030e4:	0800316d 	.word	0x0800316d
 80030e8:	0800316d 	.word	0x0800316d
 80030ec:	0800316d 	.word	0x0800316d
 80030f0:	08003175 	.word	0x08003175
 80030f4:	0800316d 	.word	0x0800316d
 80030f8:	0800316d 	.word	0x0800316d
 80030fc:	0800316d 	.word	0x0800316d
 8003100:	0800316d 	.word	0x0800316d
 8003104:	0800316d 	.word	0x0800316d
 8003108:	0800316d 	.word	0x0800316d
 800310c:	0800316d 	.word	0x0800316d
 8003110:	08003175 	.word	0x08003175
 8003114:	0800316d 	.word	0x0800316d
 8003118:	0800316d 	.word	0x0800316d
 800311c:	0800316d 	.word	0x0800316d
 8003120:	0800316d 	.word	0x0800316d
 8003124:	0800316d 	.word	0x0800316d
 8003128:	0800316d 	.word	0x0800316d
 800312c:	0800316d 	.word	0x0800316d
 8003130:	08003175 	.word	0x08003175
 8003134:	58024400 	.word	0x58024400
 8003138:	58024800 	.word	0x58024800
 800313c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003140:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003144:	3308      	adds	r3, #8
 8003146:	2101      	movs	r1, #1
 8003148:	4618      	mov	r0, r3
 800314a:	f000 ffc5 	bl	80040d8 <RCCEx_PLL2_Config>
 800314e:	4603      	mov	r3, r0
 8003150:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003154:	e00f      	b.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003156:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800315a:	3328      	adds	r3, #40	@ 0x28
 800315c:	2101      	movs	r1, #1
 800315e:	4618      	mov	r0, r3
 8003160:	f001 f86c 	bl	800423c <RCCEx_PLL3_Config>
 8003164:	4603      	mov	r3, r0
 8003166:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800316a:	e004      	b.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003172:	e000      	b.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003174:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003176:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800317a:	2b00      	cmp	r3, #0
 800317c:	d10b      	bne.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800317e:	4bc0      	ldr	r3, [pc, #768]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003182:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003186:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800318a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800318e:	4abc      	ldr	r2, [pc, #752]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003190:	430b      	orrs	r3, r1
 8003192:	6553      	str	r3, [r2, #84]	@ 0x54
 8003194:	e003      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003196:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800319a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800319e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a6:	f002 0302 	and.w	r3, r2, #2
 80031aa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80031ae:	2300      	movs	r3, #0
 80031b0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80031b4:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80031b8:	460b      	mov	r3, r1
 80031ba:	4313      	orrs	r3, r2
 80031bc:	d043      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80031be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031c6:	2b05      	cmp	r3, #5
 80031c8:	d824      	bhi.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80031ca:	a201      	add	r2, pc, #4	@ (adr r2, 80031d0 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80031cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d0:	0800321d 	.word	0x0800321d
 80031d4:	080031e9 	.word	0x080031e9
 80031d8:	080031ff 	.word	0x080031ff
 80031dc:	0800321d 	.word	0x0800321d
 80031e0:	0800321d 	.word	0x0800321d
 80031e4:	0800321d 	.word	0x0800321d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80031e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031ec:	3308      	adds	r3, #8
 80031ee:	2101      	movs	r1, #1
 80031f0:	4618      	mov	r0, r3
 80031f2:	f000 ff71 	bl	80040d8 <RCCEx_PLL2_Config>
 80031f6:	4603      	mov	r3, r0
 80031f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80031fc:	e00f      	b.n	800321e <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80031fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003202:	3328      	adds	r3, #40	@ 0x28
 8003204:	2101      	movs	r1, #1
 8003206:	4618      	mov	r0, r3
 8003208:	f001 f818 	bl	800423c <RCCEx_PLL3_Config>
 800320c:	4603      	mov	r3, r0
 800320e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003212:	e004      	b.n	800321e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800321a:	e000      	b.n	800321e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800321c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800321e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10b      	bne.n	800323e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003226:	4b96      	ldr	r3, [pc, #600]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003228:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800322a:	f023 0107 	bic.w	r1, r3, #7
 800322e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003232:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003236:	4a92      	ldr	r2, [pc, #584]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003238:	430b      	orrs	r3, r1
 800323a:	6553      	str	r3, [r2, #84]	@ 0x54
 800323c:	e003      	b.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800323e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003242:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003246:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800324a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800324e:	f002 0304 	and.w	r3, r2, #4
 8003252:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003256:	2300      	movs	r3, #0
 8003258:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800325c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003260:	460b      	mov	r3, r1
 8003262:	4313      	orrs	r3, r2
 8003264:	d043      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003266:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800326a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800326e:	2b05      	cmp	r3, #5
 8003270:	d824      	bhi.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8003272:	a201      	add	r2, pc, #4	@ (adr r2, 8003278 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8003274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003278:	080032c5 	.word	0x080032c5
 800327c:	08003291 	.word	0x08003291
 8003280:	080032a7 	.word	0x080032a7
 8003284:	080032c5 	.word	0x080032c5
 8003288:	080032c5 	.word	0x080032c5
 800328c:	080032c5 	.word	0x080032c5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003290:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003294:	3308      	adds	r3, #8
 8003296:	2101      	movs	r1, #1
 8003298:	4618      	mov	r0, r3
 800329a:	f000 ff1d 	bl	80040d8 <RCCEx_PLL2_Config>
 800329e:	4603      	mov	r3, r0
 80032a0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80032a4:	e00f      	b.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80032a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80032aa:	3328      	adds	r3, #40	@ 0x28
 80032ac:	2101      	movs	r1, #1
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 ffc4 	bl	800423c <RCCEx_PLL3_Config>
 80032b4:	4603      	mov	r3, r0
 80032b6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80032ba:	e004      	b.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80032c2:	e000      	b.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80032c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032c6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10b      	bne.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032ce:	4b6c      	ldr	r3, [pc, #432]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80032d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032d2:	f023 0107 	bic.w	r1, r3, #7
 80032d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80032da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80032de:	4a68      	ldr	r2, [pc, #416]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80032e0:	430b      	orrs	r3, r1
 80032e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80032e4:	e003      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032e6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80032ea:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80032ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80032f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f6:	f002 0320 	and.w	r3, r2, #32
 80032fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80032fe:	2300      	movs	r3, #0
 8003300:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003304:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003308:	460b      	mov	r3, r1
 800330a:	4313      	orrs	r3, r2
 800330c:	d055      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800330e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003312:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003316:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800331a:	d033      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800331c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003320:	d82c      	bhi.n	800337c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003322:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003326:	d02f      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003328:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800332c:	d826      	bhi.n	800337c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800332e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003332:	d02b      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003334:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003338:	d820      	bhi.n	800337c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800333a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800333e:	d012      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8003340:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003344:	d81a      	bhi.n	800337c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003346:	2b00      	cmp	r3, #0
 8003348:	d022      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800334a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800334e:	d115      	bne.n	800337c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003350:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003354:	3308      	adds	r3, #8
 8003356:	2100      	movs	r1, #0
 8003358:	4618      	mov	r0, r3
 800335a:	f000 febd 	bl	80040d8 <RCCEx_PLL2_Config>
 800335e:	4603      	mov	r3, r0
 8003360:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003364:	e015      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003366:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800336a:	3328      	adds	r3, #40	@ 0x28
 800336c:	2102      	movs	r1, #2
 800336e:	4618      	mov	r0, r3
 8003370:	f000 ff64 	bl	800423c <RCCEx_PLL3_Config>
 8003374:	4603      	mov	r3, r0
 8003376:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800337a:	e00a      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003382:	e006      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003384:	bf00      	nop
 8003386:	e004      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003388:	bf00      	nop
 800338a:	e002      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800338c:	bf00      	nop
 800338e:	e000      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003390:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003392:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10b      	bne.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800339a:	4b39      	ldr	r3, [pc, #228]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800339c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800339e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80033a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80033a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033aa:	4a35      	ldr	r2, [pc, #212]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80033ac:	430b      	orrs	r3, r1
 80033ae:	6553      	str	r3, [r2, #84]	@ 0x54
 80033b0:	e003      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033b2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80033b6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80033ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80033be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80033c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80033ca:	2300      	movs	r3, #0
 80033cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80033d0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80033d4:	460b      	mov	r3, r1
 80033d6:	4313      	orrs	r3, r2
 80033d8:	d058      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80033da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80033de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80033e2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80033e6:	d033      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80033e8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80033ec:	d82c      	bhi.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80033ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033f2:	d02f      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80033f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033f8:	d826      	bhi.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80033fa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80033fe:	d02b      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003400:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003404:	d820      	bhi.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003406:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800340a:	d012      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800340c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003410:	d81a      	bhi.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003412:	2b00      	cmp	r3, #0
 8003414:	d022      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8003416:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800341a:	d115      	bne.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800341c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003420:	3308      	adds	r3, #8
 8003422:	2100      	movs	r1, #0
 8003424:	4618      	mov	r0, r3
 8003426:	f000 fe57 	bl	80040d8 <RCCEx_PLL2_Config>
 800342a:	4603      	mov	r3, r0
 800342c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003430:	e015      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003432:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003436:	3328      	adds	r3, #40	@ 0x28
 8003438:	2102      	movs	r1, #2
 800343a:	4618      	mov	r0, r3
 800343c:	f000 fefe 	bl	800423c <RCCEx_PLL3_Config>
 8003440:	4603      	mov	r3, r0
 8003442:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003446:	e00a      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800344e:	e006      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003450:	bf00      	nop
 8003452:	e004      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003454:	bf00      	nop
 8003456:	e002      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003458:	bf00      	nop
 800345a:	e000      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800345c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800345e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10e      	bne.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003466:	4b06      	ldr	r3, [pc, #24]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800346a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800346e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003472:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003476:	4a02      	ldr	r2, [pc, #8]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003478:	430b      	orrs	r3, r1
 800347a:	6593      	str	r3, [r2, #88]	@ 0x58
 800347c:	e006      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800347e:	bf00      	nop
 8003480:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003484:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003488:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800348c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003494:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003498:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800349c:	2300      	movs	r3, #0
 800349e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80034a2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80034a6:	460b      	mov	r3, r1
 80034a8:	4313      	orrs	r3, r2
 80034aa:	d055      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80034ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034b0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80034b4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80034b8:	d033      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80034ba:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80034be:	d82c      	bhi.n	800351a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80034c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034c4:	d02f      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80034c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034ca:	d826      	bhi.n	800351a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80034cc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80034d0:	d02b      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80034d2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80034d6:	d820      	bhi.n	800351a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80034d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034dc:	d012      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80034de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034e2:	d81a      	bhi.n	800351a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d022      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80034e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034ec:	d115      	bne.n	800351a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034f2:	3308      	adds	r3, #8
 80034f4:	2100      	movs	r1, #0
 80034f6:	4618      	mov	r0, r3
 80034f8:	f000 fdee 	bl	80040d8 <RCCEx_PLL2_Config>
 80034fc:	4603      	mov	r3, r0
 80034fe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003502:	e015      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003504:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003508:	3328      	adds	r3, #40	@ 0x28
 800350a:	2102      	movs	r1, #2
 800350c:	4618      	mov	r0, r3
 800350e:	f000 fe95 	bl	800423c <RCCEx_PLL3_Config>
 8003512:	4603      	mov	r3, r0
 8003514:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003518:	e00a      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003520:	e006      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003522:	bf00      	nop
 8003524:	e004      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003526:	bf00      	nop
 8003528:	e002      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800352a:	bf00      	nop
 800352c:	e000      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800352e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003530:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003534:	2b00      	cmp	r3, #0
 8003536:	d10b      	bne.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003538:	4ba1      	ldr	r3, [pc, #644]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800353a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800353c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003540:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003544:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003548:	4a9d      	ldr	r2, [pc, #628]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800354a:	430b      	orrs	r3, r1
 800354c:	6593      	str	r3, [r2, #88]	@ 0x58
 800354e:	e003      	b.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003550:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003554:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003558:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800355c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003560:	f002 0308 	and.w	r3, r2, #8
 8003564:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003568:	2300      	movs	r3, #0
 800356a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800356e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003572:	460b      	mov	r3, r1
 8003574:	4313      	orrs	r3, r2
 8003576:	d01e      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003578:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800357c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003580:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003584:	d10c      	bne.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003586:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800358a:	3328      	adds	r3, #40	@ 0x28
 800358c:	2102      	movs	r1, #2
 800358e:	4618      	mov	r0, r3
 8003590:	f000 fe54 	bl	800423c <RCCEx_PLL3_Config>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d002      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80035a0:	4b87      	ldr	r3, [pc, #540]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80035a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035a4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80035a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035b0:	4a83      	ldr	r2, [pc, #524]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80035b2:	430b      	orrs	r3, r1
 80035b4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035be:	f002 0310 	and.w	r3, r2, #16
 80035c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80035c6:	2300      	movs	r3, #0
 80035c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80035cc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80035d0:	460b      	mov	r3, r1
 80035d2:	4313      	orrs	r3, r2
 80035d4:	d01e      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80035d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80035de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035e2:	d10c      	bne.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80035e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035e8:	3328      	adds	r3, #40	@ 0x28
 80035ea:	2102      	movs	r1, #2
 80035ec:	4618      	mov	r0, r3
 80035ee:	f000 fe25 	bl	800423c <RCCEx_PLL3_Config>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d002      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80035fe:	4b70      	ldr	r3, [pc, #448]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003602:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003606:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800360a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800360e:	4a6c      	ldr	r2, [pc, #432]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003610:	430b      	orrs	r3, r1
 8003612:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003614:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800361c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003620:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003624:	2300      	movs	r3, #0
 8003626:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800362a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800362e:	460b      	mov	r3, r1
 8003630:	4313      	orrs	r3, r2
 8003632:	d03e      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003634:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003638:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800363c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003640:	d022      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8003642:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003646:	d81b      	bhi.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003648:	2b00      	cmp	r3, #0
 800364a:	d003      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800364c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003650:	d00b      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8003652:	e015      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003654:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003658:	3308      	adds	r3, #8
 800365a:	2100      	movs	r1, #0
 800365c:	4618      	mov	r0, r3
 800365e:	f000 fd3b 	bl	80040d8 <RCCEx_PLL2_Config>
 8003662:	4603      	mov	r3, r0
 8003664:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003668:	e00f      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800366a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800366e:	3328      	adds	r3, #40	@ 0x28
 8003670:	2102      	movs	r1, #2
 8003672:	4618      	mov	r0, r3
 8003674:	f000 fde2 	bl	800423c <RCCEx_PLL3_Config>
 8003678:	4603      	mov	r3, r0
 800367a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800367e:	e004      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003686:	e000      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8003688:	bf00      	nop
    }

    if (ret == HAL_OK)
 800368a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10b      	bne.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003692:	4b4b      	ldr	r3, [pc, #300]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003696:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800369a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800369e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80036a2:	4a47      	ldr	r2, [pc, #284]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80036a4:	430b      	orrs	r3, r1
 80036a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80036a8:	e003      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036aa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80036ae:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80036b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ba:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80036be:	67bb      	str	r3, [r7, #120]	@ 0x78
 80036c0:	2300      	movs	r3, #0
 80036c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80036c4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80036c8:	460b      	mov	r3, r1
 80036ca:	4313      	orrs	r3, r2
 80036cc:	d03b      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80036ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036d6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80036da:	d01f      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80036dc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80036e0:	d818      	bhi.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80036e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036e6:	d003      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80036e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80036ec:	d007      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80036ee:	e011      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036f0:	4b33      	ldr	r3, [pc, #204]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80036f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036f4:	4a32      	ldr	r2, [pc, #200]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80036f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80036fc:	e00f      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003702:	3328      	adds	r3, #40	@ 0x28
 8003704:	2101      	movs	r1, #1
 8003706:	4618      	mov	r0, r3
 8003708:	f000 fd98 	bl	800423c <RCCEx_PLL3_Config>
 800370c:	4603      	mov	r3, r0
 800370e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8003712:	e004      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800371a:	e000      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800371c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800371e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10b      	bne.n	800373e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003726:	4b26      	ldr	r3, [pc, #152]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800372a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800372e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003732:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003736:	4a22      	ldr	r2, [pc, #136]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003738:	430b      	orrs	r3, r1
 800373a:	6553      	str	r3, [r2, #84]	@ 0x54
 800373c:	e003      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800373e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003742:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003746:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800374a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800374e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003752:	673b      	str	r3, [r7, #112]	@ 0x70
 8003754:	2300      	movs	r3, #0
 8003756:	677b      	str	r3, [r7, #116]	@ 0x74
 8003758:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800375c:	460b      	mov	r3, r1
 800375e:	4313      	orrs	r3, r2
 8003760:	d034      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003762:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003766:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003768:	2b00      	cmp	r3, #0
 800376a:	d003      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800376c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003770:	d007      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8003772:	e011      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003774:	4b12      	ldr	r3, [pc, #72]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003778:	4a11      	ldr	r2, [pc, #68]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800377a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800377e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003780:	e00e      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003782:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003786:	3308      	adds	r3, #8
 8003788:	2102      	movs	r1, #2
 800378a:	4618      	mov	r0, r3
 800378c:	f000 fca4 	bl	80040d8 <RCCEx_PLL2_Config>
 8003790:	4603      	mov	r3, r0
 8003792:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003796:	e003      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800379e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d10d      	bne.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80037a8:	4b05      	ldr	r3, [pc, #20]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80037aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037ac:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80037b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037b6:	4a02      	ldr	r2, [pc, #8]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80037b8:	430b      	orrs	r3, r1
 80037ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037bc:	e006      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80037be:	bf00      	nop
 80037c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80037c8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80037cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80037d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80037da:	2300      	movs	r3, #0
 80037dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80037de:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80037e2:	460b      	mov	r3, r1
 80037e4:	4313      	orrs	r3, r2
 80037e6:	d00c      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80037e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037ec:	3328      	adds	r3, #40	@ 0x28
 80037ee:	2102      	movs	r1, #2
 80037f0:	4618      	mov	r0, r3
 80037f2:	f000 fd23 	bl	800423c <RCCEx_PLL3_Config>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d002      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003802:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800380a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800380e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003810:	2300      	movs	r3, #0
 8003812:	667b      	str	r3, [r7, #100]	@ 0x64
 8003814:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003818:	460b      	mov	r3, r1
 800381a:	4313      	orrs	r3, r2
 800381c:	d038      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800381e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003826:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800382a:	d018      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800382c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003830:	d811      	bhi.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8003832:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003836:	d014      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8003838:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800383c:	d80b      	bhi.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800383e:	2b00      	cmp	r3, #0
 8003840:	d011      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8003842:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003846:	d106      	bne.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003848:	4bc3      	ldr	r3, [pc, #780]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800384a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800384c:	4ac2      	ldr	r2, [pc, #776]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800384e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003852:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003854:	e008      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800385c:	e004      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800385e:	bf00      	nop
 8003860:	e002      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003862:	bf00      	nop
 8003864:	e000      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003866:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003868:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800386c:	2b00      	cmp	r3, #0
 800386e:	d10b      	bne.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003870:	4bb9      	ldr	r3, [pc, #740]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003872:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003874:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003878:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800387c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003880:	4ab5      	ldr	r2, [pc, #724]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003882:	430b      	orrs	r3, r1
 8003884:	6553      	str	r3, [r2, #84]	@ 0x54
 8003886:	e003      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003888:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800388c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003890:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003898:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800389c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800389e:	2300      	movs	r3, #0
 80038a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80038a2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80038a6:	460b      	mov	r3, r1
 80038a8:	4313      	orrs	r3, r2
 80038aa:	d009      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80038ac:	4baa      	ldr	r3, [pc, #680]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80038ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038b0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80038b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038ba:	4aa7      	ldr	r2, [pc, #668]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80038bc:	430b      	orrs	r3, r1
 80038be:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80038c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80038cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80038ce:	2300      	movs	r3, #0
 80038d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80038d2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80038d6:	460b      	mov	r3, r1
 80038d8:	4313      	orrs	r3, r2
 80038da:	d009      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80038dc:	4b9e      	ldr	r3, [pc, #632]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80038de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038e0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80038e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ea:	4a9b      	ldr	r2, [pc, #620]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80038ec:	430b      	orrs	r3, r1
 80038ee:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80038f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80038fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038fe:	2300      	movs	r3, #0
 8003900:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003902:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003906:	460b      	mov	r3, r1
 8003908:	4313      	orrs	r3, r2
 800390a:	d009      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800390c:	4b92      	ldr	r3, [pc, #584]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800390e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003910:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8003914:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003918:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800391a:	4a8f      	ldr	r2, [pc, #572]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800391c:	430b      	orrs	r3, r1
 800391e:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003920:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003928:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800392c:	643b      	str	r3, [r7, #64]	@ 0x40
 800392e:	2300      	movs	r3, #0
 8003930:	647b      	str	r3, [r7, #68]	@ 0x44
 8003932:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003936:	460b      	mov	r3, r1
 8003938:	4313      	orrs	r3, r2
 800393a:	d00e      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800393c:	4b86      	ldr	r3, [pc, #536]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	4a85      	ldr	r2, [pc, #532]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003942:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003946:	6113      	str	r3, [r2, #16]
 8003948:	4b83      	ldr	r3, [pc, #524]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800394a:	6919      	ldr	r1, [r3, #16]
 800394c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003950:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003954:	4a80      	ldr	r2, [pc, #512]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003956:	430b      	orrs	r3, r1
 8003958:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800395a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800395e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003962:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003966:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003968:	2300      	movs	r3, #0
 800396a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800396c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003970:	460b      	mov	r3, r1
 8003972:	4313      	orrs	r3, r2
 8003974:	d009      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003976:	4b78      	ldr	r3, [pc, #480]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800397a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800397e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003982:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003984:	4a74      	ldr	r2, [pc, #464]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003986:	430b      	orrs	r3, r1
 8003988:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800398a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800398e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003992:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003996:	633b      	str	r3, [r7, #48]	@ 0x30
 8003998:	2300      	movs	r3, #0
 800399a:	637b      	str	r3, [r7, #52]	@ 0x34
 800399c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80039a0:	460b      	mov	r3, r1
 80039a2:	4313      	orrs	r3, r2
 80039a4:	d00a      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80039a6:	4b6c      	ldr	r3, [pc, #432]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80039a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039aa:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80039ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039b6:	4a68      	ldr	r2, [pc, #416]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80039b8:	430b      	orrs	r3, r1
 80039ba:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80039bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c4:	2100      	movs	r1, #0
 80039c6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80039c8:	f003 0301 	and.w	r3, r3, #1
 80039cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039ce:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80039d2:	460b      	mov	r3, r1
 80039d4:	4313      	orrs	r3, r2
 80039d6:	d011      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039dc:	3308      	adds	r3, #8
 80039de:	2100      	movs	r1, #0
 80039e0:	4618      	mov	r0, r3
 80039e2:	f000 fb79 	bl	80040d8 <RCCEx_PLL2_Config>
 80039e6:	4603      	mov	r3, r0
 80039e8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80039ec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d003      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039f4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80039f8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80039fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a04:	2100      	movs	r1, #0
 8003a06:	6239      	str	r1, [r7, #32]
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a0e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003a12:	460b      	mov	r3, r1
 8003a14:	4313      	orrs	r3, r2
 8003a16:	d011      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a1c:	3308      	adds	r3, #8
 8003a1e:	2101      	movs	r1, #1
 8003a20:	4618      	mov	r0, r3
 8003a22:	f000 fb59 	bl	80040d8 <RCCEx_PLL2_Config>
 8003a26:	4603      	mov	r3, r0
 8003a28:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8003a2c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d003      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a34:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003a38:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003a3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a44:	2100      	movs	r1, #0
 8003a46:	61b9      	str	r1, [r7, #24]
 8003a48:	f003 0304 	and.w	r3, r3, #4
 8003a4c:	61fb      	str	r3, [r7, #28]
 8003a4e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003a52:	460b      	mov	r3, r1
 8003a54:	4313      	orrs	r3, r2
 8003a56:	d011      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a5c:	3308      	adds	r3, #8
 8003a5e:	2102      	movs	r1, #2
 8003a60:	4618      	mov	r0, r3
 8003a62:	f000 fb39 	bl	80040d8 <RCCEx_PLL2_Config>
 8003a66:	4603      	mov	r3, r0
 8003a68:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8003a6c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d003      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a74:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003a78:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003a7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a84:	2100      	movs	r1, #0
 8003a86:	6139      	str	r1, [r7, #16]
 8003a88:	f003 0308 	and.w	r3, r3, #8
 8003a8c:	617b      	str	r3, [r7, #20]
 8003a8e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003a92:	460b      	mov	r3, r1
 8003a94:	4313      	orrs	r3, r2
 8003a96:	d011      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a9c:	3328      	adds	r3, #40	@ 0x28
 8003a9e:	2100      	movs	r1, #0
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f000 fbcb 	bl	800423c <RCCEx_PLL3_Config>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8003aac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d003      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ab4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003ab8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003abc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	60b9      	str	r1, [r7, #8]
 8003ac8:	f003 0310 	and.w	r3, r3, #16
 8003acc:	60fb      	str	r3, [r7, #12]
 8003ace:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	d011      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ad8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003adc:	3328      	adds	r3, #40	@ 0x28
 8003ade:	2101      	movs	r1, #1
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f000 fbab 	bl	800423c <RCCEx_PLL3_Config>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8003aec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d003      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003af4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003af8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003afc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b04:	2100      	movs	r1, #0
 8003b06:	6039      	str	r1, [r7, #0]
 8003b08:	f003 0320 	and.w	r3, r3, #32
 8003b0c:	607b      	str	r3, [r7, #4]
 8003b0e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003b12:	460b      	mov	r3, r1
 8003b14:	4313      	orrs	r3, r2
 8003b16:	d011      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b1c:	3328      	adds	r3, #40	@ 0x28
 8003b1e:	2102      	movs	r1, #2
 8003b20:	4618      	mov	r0, r3
 8003b22:	f000 fb8b 	bl	800423c <RCCEx_PLL3_Config>
 8003b26:	4603      	mov	r3, r0
 8003b28:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8003b2c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d003      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b34:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003b38:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8003b3c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d101      	bne.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8003b44:	2300      	movs	r3, #0
 8003b46:	e000      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8003b50:	46bd      	mov	sp, r7
 8003b52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b56:	bf00      	nop
 8003b58:	58024400 	.word	0x58024400

08003b5c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8003b60:	f7fe fde2 	bl	8002728 <HAL_RCC_GetHCLKFreq>
 8003b64:	4602      	mov	r2, r0
 8003b66:	4b06      	ldr	r3, [pc, #24]	@ (8003b80 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	091b      	lsrs	r3, r3, #4
 8003b6c:	f003 0307 	and.w	r3, r3, #7
 8003b70:	4904      	ldr	r1, [pc, #16]	@ (8003b84 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003b72:	5ccb      	ldrb	r3, [r1, r3]
 8003b74:	f003 031f 	and.w	r3, r3, #31
 8003b78:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	58024400 	.word	0x58024400
 8003b84:	0800b104 	.word	0x0800b104

08003b88 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b089      	sub	sp, #36	@ 0x24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003b90:	4ba1      	ldr	r3, [pc, #644]	@ (8003e18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b94:	f003 0303 	and.w	r3, r3, #3
 8003b98:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003b9a:	4b9f      	ldr	r3, [pc, #636]	@ (8003e18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b9e:	0b1b      	lsrs	r3, r3, #12
 8003ba0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ba4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003ba6:	4b9c      	ldr	r3, [pc, #624]	@ (8003e18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003baa:	091b      	lsrs	r3, r3, #4
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003bb2:	4b99      	ldr	r3, [pc, #612]	@ (8003e18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bb6:	08db      	lsrs	r3, r3, #3
 8003bb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	fb02 f303 	mul.w	r3, r2, r3
 8003bc2:	ee07 3a90 	vmov	s15, r3
 8003bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f000 8111 	beq.w	8003df8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	f000 8083 	beq.w	8003ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	f200 80a1 	bhi.w	8003d28 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d003      	beq.n	8003bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d056      	beq.n	8003ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003bf2:	e099      	b.n	8003d28 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003bf4:	4b88      	ldr	r3, [pc, #544]	@ (8003e18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0320 	and.w	r3, r3, #32
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d02d      	beq.n	8003c5c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003c00:	4b85      	ldr	r3, [pc, #532]	@ (8003e18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	08db      	lsrs	r3, r3, #3
 8003c06:	f003 0303 	and.w	r3, r3, #3
 8003c0a:	4a84      	ldr	r2, [pc, #528]	@ (8003e1c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c10:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	ee07 3a90 	vmov	s15, r3
 8003c18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	ee07 3a90 	vmov	s15, r3
 8003c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c2a:	4b7b      	ldr	r3, [pc, #492]	@ (8003e18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c32:	ee07 3a90 	vmov	s15, r3
 8003c36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c3e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003e20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003c42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c56:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003c5a:	e087      	b.n	8003d6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	ee07 3a90 	vmov	s15, r3
 8003c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c66:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003e24 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003c6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c6e:	4b6a      	ldr	r3, [pc, #424]	@ (8003e18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c76:	ee07 3a90 	vmov	s15, r3
 8003c7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c82:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003e20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003c86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c9e:	e065      	b.n	8003d6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	ee07 3a90 	vmov	s15, r3
 8003ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003caa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003e28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003cae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cb2:	4b59      	ldr	r3, [pc, #356]	@ (8003e18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cba:	ee07 3a90 	vmov	s15, r3
 8003cbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cc6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003e20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003cca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003cd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ce2:	e043      	b.n	8003d6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	ee07 3a90 	vmov	s15, r3
 8003cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cee:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003e2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003cf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cf6:	4b48      	ldr	r3, [pc, #288]	@ (8003e18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cfe:	ee07 3a90 	vmov	s15, r3
 8003d02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d06:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d0a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003e20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d26:	e021      	b.n	8003d6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	ee07 3a90 	vmov	s15, r3
 8003d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d32:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003e28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003d36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d3a:	4b37      	ldr	r3, [pc, #220]	@ (8003e18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d42:	ee07 3a90 	vmov	s15, r3
 8003d46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d4e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003e20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d6a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003d6c:	4b2a      	ldr	r3, [pc, #168]	@ (8003e18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d70:	0a5b      	lsrs	r3, r3, #9
 8003d72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d76:	ee07 3a90 	vmov	s15, r3
 8003d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d86:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d92:	ee17 2a90 	vmov	r2, s15
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003d9a:	4b1f      	ldr	r3, [pc, #124]	@ (8003e18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d9e:	0c1b      	lsrs	r3, r3, #16
 8003da0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003da4:	ee07 3a90 	vmov	s15, r3
 8003da8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003db0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003db4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003db8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dc0:	ee17 2a90 	vmov	r2, s15
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003dc8:	4b13      	ldr	r3, [pc, #76]	@ (8003e18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dcc:	0e1b      	lsrs	r3, r3, #24
 8003dce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003dd2:	ee07 3a90 	vmov	s15, r3
 8003dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003dde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003de2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003de6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dee:	ee17 2a90 	vmov	r2, s15
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003df6:	e008      	b.n	8003e0a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	609a      	str	r2, [r3, #8]
}
 8003e0a:	bf00      	nop
 8003e0c:	3724      	adds	r7, #36	@ 0x24
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	58024400 	.word	0x58024400
 8003e1c:	03d09000 	.word	0x03d09000
 8003e20:	46000000 	.word	0x46000000
 8003e24:	4c742400 	.word	0x4c742400
 8003e28:	4a742400 	.word	0x4a742400
 8003e2c:	4bb71b00 	.word	0x4bb71b00

08003e30 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b089      	sub	sp, #36	@ 0x24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003e38:	4ba1      	ldr	r3, [pc, #644]	@ (80040c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e3c:	f003 0303 	and.w	r3, r3, #3
 8003e40:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003e42:	4b9f      	ldr	r3, [pc, #636]	@ (80040c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e46:	0d1b      	lsrs	r3, r3, #20
 8003e48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e4c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003e4e:	4b9c      	ldr	r3, [pc, #624]	@ (80040c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e52:	0a1b      	lsrs	r3, r3, #8
 8003e54:	f003 0301 	and.w	r3, r3, #1
 8003e58:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003e5a:	4b99      	ldr	r3, [pc, #612]	@ (80040c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e5e:	08db      	lsrs	r3, r3, #3
 8003e60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	fb02 f303 	mul.w	r3, r2, r3
 8003e6a:	ee07 3a90 	vmov	s15, r3
 8003e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e72:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f000 8111 	beq.w	80040a0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	f000 8083 	beq.w	8003f8c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	f200 80a1 	bhi.w	8003fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d003      	beq.n	8003e9c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d056      	beq.n	8003f48 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003e9a:	e099      	b.n	8003fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e9c:	4b88      	ldr	r3, [pc, #544]	@ (80040c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0320 	and.w	r3, r3, #32
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d02d      	beq.n	8003f04 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003ea8:	4b85      	ldr	r3, [pc, #532]	@ (80040c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	08db      	lsrs	r3, r3, #3
 8003eae:	f003 0303 	and.w	r3, r3, #3
 8003eb2:	4a84      	ldr	r2, [pc, #528]	@ (80040c4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8003eb8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	ee07 3a90 	vmov	s15, r3
 8003ec0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	ee07 3a90 	vmov	s15, r3
 8003eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ed2:	4b7b      	ldr	r3, [pc, #492]	@ (80040c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eda:	ee07 3a90 	vmov	s15, r3
 8003ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ee2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ee6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80040c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003eea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003eee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ef2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003efe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003f02:	e087      	b.n	8004014 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	ee07 3a90 	vmov	s15, r3
 8003f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f0e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80040cc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003f12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f16:	4b6a      	ldr	r3, [pc, #424]	@ (80040c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f1e:	ee07 3a90 	vmov	s15, r3
 8003f22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f26:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f2a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80040c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f46:	e065      	b.n	8004014 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	ee07 3a90 	vmov	s15, r3
 8003f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f52:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80040d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003f56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f5a:	4b59      	ldr	r3, [pc, #356]	@ (80040c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f62:	ee07 3a90 	vmov	s15, r3
 8003f66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f6e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80040c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f8a:	e043      	b.n	8004014 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	ee07 3a90 	vmov	s15, r3
 8003f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f96:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80040d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003f9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f9e:	4b48      	ldr	r3, [pc, #288]	@ (80040c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fa6:	ee07 3a90 	vmov	s15, r3
 8003faa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fae:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fb2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80040c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003fb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003fce:	e021      	b.n	8004014 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	ee07 3a90 	vmov	s15, r3
 8003fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fda:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80040d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fe2:	4b37      	ldr	r3, [pc, #220]	@ (80040c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fea:	ee07 3a90 	vmov	s15, r3
 8003fee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ff2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ff6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80040c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003ffa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ffe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004002:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004006:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800400a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800400e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004012:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004014:	4b2a      	ldr	r3, [pc, #168]	@ (80040c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004018:	0a5b      	lsrs	r3, r3, #9
 800401a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800401e:	ee07 3a90 	vmov	s15, r3
 8004022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004026:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800402a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800402e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004032:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004036:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800403a:	ee17 2a90 	vmov	r2, s15
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004042:	4b1f      	ldr	r3, [pc, #124]	@ (80040c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004046:	0c1b      	lsrs	r3, r3, #16
 8004048:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800404c:	ee07 3a90 	vmov	s15, r3
 8004050:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004054:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004058:	ee37 7a87 	vadd.f32	s14, s15, s14
 800405c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004060:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004064:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004068:	ee17 2a90 	vmov	r2, s15
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004070:	4b13      	ldr	r3, [pc, #76]	@ (80040c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004074:	0e1b      	lsrs	r3, r3, #24
 8004076:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800407a:	ee07 3a90 	vmov	s15, r3
 800407e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004082:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004086:	ee37 7a87 	vadd.f32	s14, s15, s14
 800408a:	edd7 6a07 	vldr	s13, [r7, #28]
 800408e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004092:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004096:	ee17 2a90 	vmov	r2, s15
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800409e:	e008      	b.n	80040b2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	609a      	str	r2, [r3, #8]
}
 80040b2:	bf00      	nop
 80040b4:	3724      	adds	r7, #36	@ 0x24
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	58024400 	.word	0x58024400
 80040c4:	03d09000 	.word	0x03d09000
 80040c8:	46000000 	.word	0x46000000
 80040cc:	4c742400 	.word	0x4c742400
 80040d0:	4a742400 	.word	0x4a742400
 80040d4:	4bb71b00 	.word	0x4bb71b00

080040d8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040e2:	2300      	movs	r3, #0
 80040e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80040e6:	4b53      	ldr	r3, [pc, #332]	@ (8004234 <RCCEx_PLL2_Config+0x15c>)
 80040e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ea:	f003 0303 	and.w	r3, r3, #3
 80040ee:	2b03      	cmp	r3, #3
 80040f0:	d101      	bne.n	80040f6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e099      	b.n	800422a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80040f6:	4b4f      	ldr	r3, [pc, #316]	@ (8004234 <RCCEx_PLL2_Config+0x15c>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a4e      	ldr	r2, [pc, #312]	@ (8004234 <RCCEx_PLL2_Config+0x15c>)
 80040fc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004100:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004102:	f7fd f8bd 	bl	8001280 <HAL_GetTick>
 8004106:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004108:	e008      	b.n	800411c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800410a:	f7fd f8b9 	bl	8001280 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	2b02      	cmp	r3, #2
 8004116:	d901      	bls.n	800411c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e086      	b.n	800422a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800411c:	4b45      	ldr	r3, [pc, #276]	@ (8004234 <RCCEx_PLL2_Config+0x15c>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d1f0      	bne.n	800410a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004128:	4b42      	ldr	r3, [pc, #264]	@ (8004234 <RCCEx_PLL2_Config+0x15c>)
 800412a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800412c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	031b      	lsls	r3, r3, #12
 8004136:	493f      	ldr	r1, [pc, #252]	@ (8004234 <RCCEx_PLL2_Config+0x15c>)
 8004138:	4313      	orrs	r3, r2
 800413a:	628b      	str	r3, [r1, #40]	@ 0x28
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	3b01      	subs	r3, #1
 8004142:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	3b01      	subs	r3, #1
 800414c:	025b      	lsls	r3, r3, #9
 800414e:	b29b      	uxth	r3, r3
 8004150:	431a      	orrs	r2, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	3b01      	subs	r3, #1
 8004158:	041b      	lsls	r3, r3, #16
 800415a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800415e:	431a      	orrs	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	3b01      	subs	r3, #1
 8004166:	061b      	lsls	r3, r3, #24
 8004168:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800416c:	4931      	ldr	r1, [pc, #196]	@ (8004234 <RCCEx_PLL2_Config+0x15c>)
 800416e:	4313      	orrs	r3, r2
 8004170:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004172:	4b30      	ldr	r3, [pc, #192]	@ (8004234 <RCCEx_PLL2_Config+0x15c>)
 8004174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004176:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	492d      	ldr	r1, [pc, #180]	@ (8004234 <RCCEx_PLL2_Config+0x15c>)
 8004180:	4313      	orrs	r3, r2
 8004182:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004184:	4b2b      	ldr	r3, [pc, #172]	@ (8004234 <RCCEx_PLL2_Config+0x15c>)
 8004186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004188:	f023 0220 	bic.w	r2, r3, #32
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	4928      	ldr	r1, [pc, #160]	@ (8004234 <RCCEx_PLL2_Config+0x15c>)
 8004192:	4313      	orrs	r3, r2
 8004194:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004196:	4b27      	ldr	r3, [pc, #156]	@ (8004234 <RCCEx_PLL2_Config+0x15c>)
 8004198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800419a:	4a26      	ldr	r2, [pc, #152]	@ (8004234 <RCCEx_PLL2_Config+0x15c>)
 800419c:	f023 0310 	bic.w	r3, r3, #16
 80041a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80041a2:	4b24      	ldr	r3, [pc, #144]	@ (8004234 <RCCEx_PLL2_Config+0x15c>)
 80041a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80041a6:	4b24      	ldr	r3, [pc, #144]	@ (8004238 <RCCEx_PLL2_Config+0x160>)
 80041a8:	4013      	ands	r3, r2
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	69d2      	ldr	r2, [r2, #28]
 80041ae:	00d2      	lsls	r2, r2, #3
 80041b0:	4920      	ldr	r1, [pc, #128]	@ (8004234 <RCCEx_PLL2_Config+0x15c>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80041b6:	4b1f      	ldr	r3, [pc, #124]	@ (8004234 <RCCEx_PLL2_Config+0x15c>)
 80041b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ba:	4a1e      	ldr	r2, [pc, #120]	@ (8004234 <RCCEx_PLL2_Config+0x15c>)
 80041bc:	f043 0310 	orr.w	r3, r3, #16
 80041c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d106      	bne.n	80041d6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80041c8:	4b1a      	ldr	r3, [pc, #104]	@ (8004234 <RCCEx_PLL2_Config+0x15c>)
 80041ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041cc:	4a19      	ldr	r2, [pc, #100]	@ (8004234 <RCCEx_PLL2_Config+0x15c>)
 80041ce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80041d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80041d4:	e00f      	b.n	80041f6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d106      	bne.n	80041ea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80041dc:	4b15      	ldr	r3, [pc, #84]	@ (8004234 <RCCEx_PLL2_Config+0x15c>)
 80041de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e0:	4a14      	ldr	r2, [pc, #80]	@ (8004234 <RCCEx_PLL2_Config+0x15c>)
 80041e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80041e8:	e005      	b.n	80041f6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80041ea:	4b12      	ldr	r3, [pc, #72]	@ (8004234 <RCCEx_PLL2_Config+0x15c>)
 80041ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ee:	4a11      	ldr	r2, [pc, #68]	@ (8004234 <RCCEx_PLL2_Config+0x15c>)
 80041f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80041f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80041f6:	4b0f      	ldr	r3, [pc, #60]	@ (8004234 <RCCEx_PLL2_Config+0x15c>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a0e      	ldr	r2, [pc, #56]	@ (8004234 <RCCEx_PLL2_Config+0x15c>)
 80041fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004200:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004202:	f7fd f83d 	bl	8001280 <HAL_GetTick>
 8004206:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004208:	e008      	b.n	800421c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800420a:	f7fd f839 	bl	8001280 <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	2b02      	cmp	r3, #2
 8004216:	d901      	bls.n	800421c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e006      	b.n	800422a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800421c:	4b05      	ldr	r3, [pc, #20]	@ (8004234 <RCCEx_PLL2_Config+0x15c>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d0f0      	beq.n	800420a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004228:	7bfb      	ldrb	r3, [r7, #15]
}
 800422a:	4618      	mov	r0, r3
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	58024400 	.word	0x58024400
 8004238:	ffff0007 	.word	0xffff0007

0800423c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004246:	2300      	movs	r3, #0
 8004248:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800424a:	4b53      	ldr	r3, [pc, #332]	@ (8004398 <RCCEx_PLL3_Config+0x15c>)
 800424c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800424e:	f003 0303 	and.w	r3, r3, #3
 8004252:	2b03      	cmp	r3, #3
 8004254:	d101      	bne.n	800425a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e099      	b.n	800438e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800425a:	4b4f      	ldr	r3, [pc, #316]	@ (8004398 <RCCEx_PLL3_Config+0x15c>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a4e      	ldr	r2, [pc, #312]	@ (8004398 <RCCEx_PLL3_Config+0x15c>)
 8004260:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004264:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004266:	f7fd f80b 	bl	8001280 <HAL_GetTick>
 800426a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800426c:	e008      	b.n	8004280 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800426e:	f7fd f807 	bl	8001280 <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	2b02      	cmp	r3, #2
 800427a:	d901      	bls.n	8004280 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e086      	b.n	800438e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004280:	4b45      	ldr	r3, [pc, #276]	@ (8004398 <RCCEx_PLL3_Config+0x15c>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1f0      	bne.n	800426e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800428c:	4b42      	ldr	r3, [pc, #264]	@ (8004398 <RCCEx_PLL3_Config+0x15c>)
 800428e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004290:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	051b      	lsls	r3, r3, #20
 800429a:	493f      	ldr	r1, [pc, #252]	@ (8004398 <RCCEx_PLL3_Config+0x15c>)
 800429c:	4313      	orrs	r3, r2
 800429e:	628b      	str	r3, [r1, #40]	@ 0x28
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	3b01      	subs	r3, #1
 80042a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	3b01      	subs	r3, #1
 80042b0:	025b      	lsls	r3, r3, #9
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	431a      	orrs	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	3b01      	subs	r3, #1
 80042bc:	041b      	lsls	r3, r3, #16
 80042be:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80042c2:	431a      	orrs	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	3b01      	subs	r3, #1
 80042ca:	061b      	lsls	r3, r3, #24
 80042cc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80042d0:	4931      	ldr	r1, [pc, #196]	@ (8004398 <RCCEx_PLL3_Config+0x15c>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80042d6:	4b30      	ldr	r3, [pc, #192]	@ (8004398 <RCCEx_PLL3_Config+0x15c>)
 80042d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042da:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	492d      	ldr	r1, [pc, #180]	@ (8004398 <RCCEx_PLL3_Config+0x15c>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80042e8:	4b2b      	ldr	r3, [pc, #172]	@ (8004398 <RCCEx_PLL3_Config+0x15c>)
 80042ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ec:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	4928      	ldr	r1, [pc, #160]	@ (8004398 <RCCEx_PLL3_Config+0x15c>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80042fa:	4b27      	ldr	r3, [pc, #156]	@ (8004398 <RCCEx_PLL3_Config+0x15c>)
 80042fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042fe:	4a26      	ldr	r2, [pc, #152]	@ (8004398 <RCCEx_PLL3_Config+0x15c>)
 8004300:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004304:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004306:	4b24      	ldr	r3, [pc, #144]	@ (8004398 <RCCEx_PLL3_Config+0x15c>)
 8004308:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800430a:	4b24      	ldr	r3, [pc, #144]	@ (800439c <RCCEx_PLL3_Config+0x160>)
 800430c:	4013      	ands	r3, r2
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	69d2      	ldr	r2, [r2, #28]
 8004312:	00d2      	lsls	r2, r2, #3
 8004314:	4920      	ldr	r1, [pc, #128]	@ (8004398 <RCCEx_PLL3_Config+0x15c>)
 8004316:	4313      	orrs	r3, r2
 8004318:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800431a:	4b1f      	ldr	r3, [pc, #124]	@ (8004398 <RCCEx_PLL3_Config+0x15c>)
 800431c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800431e:	4a1e      	ldr	r2, [pc, #120]	@ (8004398 <RCCEx_PLL3_Config+0x15c>)
 8004320:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004324:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d106      	bne.n	800433a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800432c:	4b1a      	ldr	r3, [pc, #104]	@ (8004398 <RCCEx_PLL3_Config+0x15c>)
 800432e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004330:	4a19      	ldr	r2, [pc, #100]	@ (8004398 <RCCEx_PLL3_Config+0x15c>)
 8004332:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004336:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004338:	e00f      	b.n	800435a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d106      	bne.n	800434e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004340:	4b15      	ldr	r3, [pc, #84]	@ (8004398 <RCCEx_PLL3_Config+0x15c>)
 8004342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004344:	4a14      	ldr	r2, [pc, #80]	@ (8004398 <RCCEx_PLL3_Config+0x15c>)
 8004346:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800434a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800434c:	e005      	b.n	800435a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800434e:	4b12      	ldr	r3, [pc, #72]	@ (8004398 <RCCEx_PLL3_Config+0x15c>)
 8004350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004352:	4a11      	ldr	r2, [pc, #68]	@ (8004398 <RCCEx_PLL3_Config+0x15c>)
 8004354:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004358:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800435a:	4b0f      	ldr	r3, [pc, #60]	@ (8004398 <RCCEx_PLL3_Config+0x15c>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a0e      	ldr	r2, [pc, #56]	@ (8004398 <RCCEx_PLL3_Config+0x15c>)
 8004360:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004364:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004366:	f7fc ff8b 	bl	8001280 <HAL_GetTick>
 800436a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800436c:	e008      	b.n	8004380 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800436e:	f7fc ff87 	bl	8001280 <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	2b02      	cmp	r3, #2
 800437a:	d901      	bls.n	8004380 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e006      	b.n	800438e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004380:	4b05      	ldr	r3, [pc, #20]	@ (8004398 <RCCEx_PLL3_Config+0x15c>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d0f0      	beq.n	800436e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800438c:	7bfb      	ldrb	r3, [r7, #15]
}
 800438e:	4618      	mov	r0, r3
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	58024400 	.word	0x58024400
 800439c:	ffff0007 	.word	0xffff0007

080043a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d101      	bne.n	80043b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e042      	b.n	8004438 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d106      	bne.n	80043ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f7fc fe41 	bl	800104c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2224      	movs	r2, #36	@ 0x24
 80043ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f022 0201 	bic.w	r2, r2, #1
 80043e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d002      	beq.n	80043f0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 ff22 	bl	8005234 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 f8b3 	bl	800455c <UART_SetConfig>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d101      	bne.n	8004400 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e01b      	b.n	8004438 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	685a      	ldr	r2, [r3, #4]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800440e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	689a      	ldr	r2, [r3, #8]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800441e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f042 0201 	orr.w	r2, r2, #1
 800442e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 ffa1 	bl	8005378 <UART_CheckIdleState>
 8004436:	4603      	mov	r3, r0
}
 8004438:	4618      	mov	r0, r3
 800443a:	3708      	adds	r7, #8
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b08a      	sub	sp, #40	@ 0x28
 8004444:	af02      	add	r7, sp, #8
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	603b      	str	r3, [r7, #0]
 800444c:	4613      	mov	r3, r2
 800444e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004456:	2b20      	cmp	r3, #32
 8004458:	d17b      	bne.n	8004552 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d002      	beq.n	8004466 <HAL_UART_Transmit+0x26>
 8004460:	88fb      	ldrh	r3, [r7, #6]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e074      	b.n	8004554 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2200      	movs	r2, #0
 800446e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2221      	movs	r2, #33	@ 0x21
 8004476:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800447a:	f7fc ff01 	bl	8001280 <HAL_GetTick>
 800447e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	88fa      	ldrh	r2, [r7, #6]
 8004484:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	88fa      	ldrh	r2, [r7, #6]
 800448c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004498:	d108      	bne.n	80044ac <HAL_UART_Transmit+0x6c>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d104      	bne.n	80044ac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80044a2:	2300      	movs	r3, #0
 80044a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	61bb      	str	r3, [r7, #24]
 80044aa:	e003      	b.n	80044b4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044b0:	2300      	movs	r3, #0
 80044b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80044b4:	e030      	b.n	8004518 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	9300      	str	r3, [sp, #0]
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	2200      	movs	r2, #0
 80044be:	2180      	movs	r1, #128	@ 0x80
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f001 f803 	bl	80054cc <UART_WaitOnFlagUntilTimeout>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d005      	beq.n	80044d8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2220      	movs	r2, #32
 80044d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e03d      	b.n	8004554 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10b      	bne.n	80044f6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	881b      	ldrh	r3, [r3, #0]
 80044e2:	461a      	mov	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044ec:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	3302      	adds	r3, #2
 80044f2:	61bb      	str	r3, [r7, #24]
 80044f4:	e007      	b.n	8004506 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	781a      	ldrb	r2, [r3, #0]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	3301      	adds	r3, #1
 8004504:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800450c:	b29b      	uxth	r3, r3
 800450e:	3b01      	subs	r3, #1
 8004510:	b29a      	uxth	r2, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800451e:	b29b      	uxth	r3, r3
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1c8      	bne.n	80044b6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	9300      	str	r3, [sp, #0]
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	2200      	movs	r2, #0
 800452c:	2140      	movs	r1, #64	@ 0x40
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f000 ffcc 	bl	80054cc <UART_WaitOnFlagUntilTimeout>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d005      	beq.n	8004546 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2220      	movs	r2, #32
 800453e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e006      	b.n	8004554 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2220      	movs	r2, #32
 800454a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800454e:	2300      	movs	r3, #0
 8004550:	e000      	b.n	8004554 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004552:	2302      	movs	r3, #2
  }
}
 8004554:	4618      	mov	r0, r3
 8004556:	3720      	adds	r7, #32
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800455c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004560:	b092      	sub	sp, #72	@ 0x48
 8004562:	af00      	add	r7, sp, #0
 8004564:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004566:	2300      	movs	r3, #0
 8004568:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	689a      	ldr	r2, [r3, #8]
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	431a      	orrs	r2, r3
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	431a      	orrs	r2, r3
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	69db      	ldr	r3, [r3, #28]
 8004580:	4313      	orrs	r3, r2
 8004582:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	4bbe      	ldr	r3, [pc, #760]	@ (8004884 <UART_SetConfig+0x328>)
 800458c:	4013      	ands	r3, r2
 800458e:	697a      	ldr	r2, [r7, #20]
 8004590:	6812      	ldr	r2, [r2, #0]
 8004592:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004594:	430b      	orrs	r3, r1
 8004596:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	68da      	ldr	r2, [r3, #12]
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	430a      	orrs	r2, r1
 80045ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4ab3      	ldr	r2, [pc, #716]	@ (8004888 <UART_SetConfig+0x32c>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d004      	beq.n	80045c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045c4:	4313      	orrs	r3, r2
 80045c6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	689a      	ldr	r2, [r3, #8]
 80045ce:	4baf      	ldr	r3, [pc, #700]	@ (800488c <UART_SetConfig+0x330>)
 80045d0:	4013      	ands	r3, r2
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	6812      	ldr	r2, [r2, #0]
 80045d6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80045d8:	430b      	orrs	r3, r1
 80045da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e2:	f023 010f 	bic.w	r1, r3, #15
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	430a      	orrs	r2, r1
 80045f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4aa6      	ldr	r2, [pc, #664]	@ (8004890 <UART_SetConfig+0x334>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d177      	bne.n	80046ec <UART_SetConfig+0x190>
 80045fc:	4ba5      	ldr	r3, [pc, #660]	@ (8004894 <UART_SetConfig+0x338>)
 80045fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004600:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004604:	2b28      	cmp	r3, #40	@ 0x28
 8004606:	d86d      	bhi.n	80046e4 <UART_SetConfig+0x188>
 8004608:	a201      	add	r2, pc, #4	@ (adr r2, 8004610 <UART_SetConfig+0xb4>)
 800460a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800460e:	bf00      	nop
 8004610:	080046b5 	.word	0x080046b5
 8004614:	080046e5 	.word	0x080046e5
 8004618:	080046e5 	.word	0x080046e5
 800461c:	080046e5 	.word	0x080046e5
 8004620:	080046e5 	.word	0x080046e5
 8004624:	080046e5 	.word	0x080046e5
 8004628:	080046e5 	.word	0x080046e5
 800462c:	080046e5 	.word	0x080046e5
 8004630:	080046bd 	.word	0x080046bd
 8004634:	080046e5 	.word	0x080046e5
 8004638:	080046e5 	.word	0x080046e5
 800463c:	080046e5 	.word	0x080046e5
 8004640:	080046e5 	.word	0x080046e5
 8004644:	080046e5 	.word	0x080046e5
 8004648:	080046e5 	.word	0x080046e5
 800464c:	080046e5 	.word	0x080046e5
 8004650:	080046c5 	.word	0x080046c5
 8004654:	080046e5 	.word	0x080046e5
 8004658:	080046e5 	.word	0x080046e5
 800465c:	080046e5 	.word	0x080046e5
 8004660:	080046e5 	.word	0x080046e5
 8004664:	080046e5 	.word	0x080046e5
 8004668:	080046e5 	.word	0x080046e5
 800466c:	080046e5 	.word	0x080046e5
 8004670:	080046cd 	.word	0x080046cd
 8004674:	080046e5 	.word	0x080046e5
 8004678:	080046e5 	.word	0x080046e5
 800467c:	080046e5 	.word	0x080046e5
 8004680:	080046e5 	.word	0x080046e5
 8004684:	080046e5 	.word	0x080046e5
 8004688:	080046e5 	.word	0x080046e5
 800468c:	080046e5 	.word	0x080046e5
 8004690:	080046d5 	.word	0x080046d5
 8004694:	080046e5 	.word	0x080046e5
 8004698:	080046e5 	.word	0x080046e5
 800469c:	080046e5 	.word	0x080046e5
 80046a0:	080046e5 	.word	0x080046e5
 80046a4:	080046e5 	.word	0x080046e5
 80046a8:	080046e5 	.word	0x080046e5
 80046ac:	080046e5 	.word	0x080046e5
 80046b0:	080046dd 	.word	0x080046dd
 80046b4:	2301      	movs	r3, #1
 80046b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046ba:	e326      	b.n	8004d0a <UART_SetConfig+0x7ae>
 80046bc:	2304      	movs	r3, #4
 80046be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046c2:	e322      	b.n	8004d0a <UART_SetConfig+0x7ae>
 80046c4:	2308      	movs	r3, #8
 80046c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046ca:	e31e      	b.n	8004d0a <UART_SetConfig+0x7ae>
 80046cc:	2310      	movs	r3, #16
 80046ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046d2:	e31a      	b.n	8004d0a <UART_SetConfig+0x7ae>
 80046d4:	2320      	movs	r3, #32
 80046d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046da:	e316      	b.n	8004d0a <UART_SetConfig+0x7ae>
 80046dc:	2340      	movs	r3, #64	@ 0x40
 80046de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046e2:	e312      	b.n	8004d0a <UART_SetConfig+0x7ae>
 80046e4:	2380      	movs	r3, #128	@ 0x80
 80046e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046ea:	e30e      	b.n	8004d0a <UART_SetConfig+0x7ae>
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a69      	ldr	r2, [pc, #420]	@ (8004898 <UART_SetConfig+0x33c>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d130      	bne.n	8004758 <UART_SetConfig+0x1fc>
 80046f6:	4b67      	ldr	r3, [pc, #412]	@ (8004894 <UART_SetConfig+0x338>)
 80046f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046fa:	f003 0307 	and.w	r3, r3, #7
 80046fe:	2b05      	cmp	r3, #5
 8004700:	d826      	bhi.n	8004750 <UART_SetConfig+0x1f4>
 8004702:	a201      	add	r2, pc, #4	@ (adr r2, 8004708 <UART_SetConfig+0x1ac>)
 8004704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004708:	08004721 	.word	0x08004721
 800470c:	08004729 	.word	0x08004729
 8004710:	08004731 	.word	0x08004731
 8004714:	08004739 	.word	0x08004739
 8004718:	08004741 	.word	0x08004741
 800471c:	08004749 	.word	0x08004749
 8004720:	2300      	movs	r3, #0
 8004722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004726:	e2f0      	b.n	8004d0a <UART_SetConfig+0x7ae>
 8004728:	2304      	movs	r3, #4
 800472a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800472e:	e2ec      	b.n	8004d0a <UART_SetConfig+0x7ae>
 8004730:	2308      	movs	r3, #8
 8004732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004736:	e2e8      	b.n	8004d0a <UART_SetConfig+0x7ae>
 8004738:	2310      	movs	r3, #16
 800473a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800473e:	e2e4      	b.n	8004d0a <UART_SetConfig+0x7ae>
 8004740:	2320      	movs	r3, #32
 8004742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004746:	e2e0      	b.n	8004d0a <UART_SetConfig+0x7ae>
 8004748:	2340      	movs	r3, #64	@ 0x40
 800474a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800474e:	e2dc      	b.n	8004d0a <UART_SetConfig+0x7ae>
 8004750:	2380      	movs	r3, #128	@ 0x80
 8004752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004756:	e2d8      	b.n	8004d0a <UART_SetConfig+0x7ae>
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a4f      	ldr	r2, [pc, #316]	@ (800489c <UART_SetConfig+0x340>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d130      	bne.n	80047c4 <UART_SetConfig+0x268>
 8004762:	4b4c      	ldr	r3, [pc, #304]	@ (8004894 <UART_SetConfig+0x338>)
 8004764:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004766:	f003 0307 	and.w	r3, r3, #7
 800476a:	2b05      	cmp	r3, #5
 800476c:	d826      	bhi.n	80047bc <UART_SetConfig+0x260>
 800476e:	a201      	add	r2, pc, #4	@ (adr r2, 8004774 <UART_SetConfig+0x218>)
 8004770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004774:	0800478d 	.word	0x0800478d
 8004778:	08004795 	.word	0x08004795
 800477c:	0800479d 	.word	0x0800479d
 8004780:	080047a5 	.word	0x080047a5
 8004784:	080047ad 	.word	0x080047ad
 8004788:	080047b5 	.word	0x080047b5
 800478c:	2300      	movs	r3, #0
 800478e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004792:	e2ba      	b.n	8004d0a <UART_SetConfig+0x7ae>
 8004794:	2304      	movs	r3, #4
 8004796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800479a:	e2b6      	b.n	8004d0a <UART_SetConfig+0x7ae>
 800479c:	2308      	movs	r3, #8
 800479e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047a2:	e2b2      	b.n	8004d0a <UART_SetConfig+0x7ae>
 80047a4:	2310      	movs	r3, #16
 80047a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047aa:	e2ae      	b.n	8004d0a <UART_SetConfig+0x7ae>
 80047ac:	2320      	movs	r3, #32
 80047ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047b2:	e2aa      	b.n	8004d0a <UART_SetConfig+0x7ae>
 80047b4:	2340      	movs	r3, #64	@ 0x40
 80047b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047ba:	e2a6      	b.n	8004d0a <UART_SetConfig+0x7ae>
 80047bc:	2380      	movs	r3, #128	@ 0x80
 80047be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047c2:	e2a2      	b.n	8004d0a <UART_SetConfig+0x7ae>
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a35      	ldr	r2, [pc, #212]	@ (80048a0 <UART_SetConfig+0x344>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d130      	bne.n	8004830 <UART_SetConfig+0x2d4>
 80047ce:	4b31      	ldr	r3, [pc, #196]	@ (8004894 <UART_SetConfig+0x338>)
 80047d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047d2:	f003 0307 	and.w	r3, r3, #7
 80047d6:	2b05      	cmp	r3, #5
 80047d8:	d826      	bhi.n	8004828 <UART_SetConfig+0x2cc>
 80047da:	a201      	add	r2, pc, #4	@ (adr r2, 80047e0 <UART_SetConfig+0x284>)
 80047dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e0:	080047f9 	.word	0x080047f9
 80047e4:	08004801 	.word	0x08004801
 80047e8:	08004809 	.word	0x08004809
 80047ec:	08004811 	.word	0x08004811
 80047f0:	08004819 	.word	0x08004819
 80047f4:	08004821 	.word	0x08004821
 80047f8:	2300      	movs	r3, #0
 80047fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047fe:	e284      	b.n	8004d0a <UART_SetConfig+0x7ae>
 8004800:	2304      	movs	r3, #4
 8004802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004806:	e280      	b.n	8004d0a <UART_SetConfig+0x7ae>
 8004808:	2308      	movs	r3, #8
 800480a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800480e:	e27c      	b.n	8004d0a <UART_SetConfig+0x7ae>
 8004810:	2310      	movs	r3, #16
 8004812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004816:	e278      	b.n	8004d0a <UART_SetConfig+0x7ae>
 8004818:	2320      	movs	r3, #32
 800481a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800481e:	e274      	b.n	8004d0a <UART_SetConfig+0x7ae>
 8004820:	2340      	movs	r3, #64	@ 0x40
 8004822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004826:	e270      	b.n	8004d0a <UART_SetConfig+0x7ae>
 8004828:	2380      	movs	r3, #128	@ 0x80
 800482a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800482e:	e26c      	b.n	8004d0a <UART_SetConfig+0x7ae>
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a1b      	ldr	r2, [pc, #108]	@ (80048a4 <UART_SetConfig+0x348>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d142      	bne.n	80048c0 <UART_SetConfig+0x364>
 800483a:	4b16      	ldr	r3, [pc, #88]	@ (8004894 <UART_SetConfig+0x338>)
 800483c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800483e:	f003 0307 	and.w	r3, r3, #7
 8004842:	2b05      	cmp	r3, #5
 8004844:	d838      	bhi.n	80048b8 <UART_SetConfig+0x35c>
 8004846:	a201      	add	r2, pc, #4	@ (adr r2, 800484c <UART_SetConfig+0x2f0>)
 8004848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800484c:	08004865 	.word	0x08004865
 8004850:	0800486d 	.word	0x0800486d
 8004854:	08004875 	.word	0x08004875
 8004858:	0800487d 	.word	0x0800487d
 800485c:	080048a9 	.word	0x080048a9
 8004860:	080048b1 	.word	0x080048b1
 8004864:	2300      	movs	r3, #0
 8004866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800486a:	e24e      	b.n	8004d0a <UART_SetConfig+0x7ae>
 800486c:	2304      	movs	r3, #4
 800486e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004872:	e24a      	b.n	8004d0a <UART_SetConfig+0x7ae>
 8004874:	2308      	movs	r3, #8
 8004876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800487a:	e246      	b.n	8004d0a <UART_SetConfig+0x7ae>
 800487c:	2310      	movs	r3, #16
 800487e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004882:	e242      	b.n	8004d0a <UART_SetConfig+0x7ae>
 8004884:	cfff69f3 	.word	0xcfff69f3
 8004888:	58000c00 	.word	0x58000c00
 800488c:	11fff4ff 	.word	0x11fff4ff
 8004890:	40011000 	.word	0x40011000
 8004894:	58024400 	.word	0x58024400
 8004898:	40004400 	.word	0x40004400
 800489c:	40004800 	.word	0x40004800
 80048a0:	40004c00 	.word	0x40004c00
 80048a4:	40005000 	.word	0x40005000
 80048a8:	2320      	movs	r3, #32
 80048aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048ae:	e22c      	b.n	8004d0a <UART_SetConfig+0x7ae>
 80048b0:	2340      	movs	r3, #64	@ 0x40
 80048b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048b6:	e228      	b.n	8004d0a <UART_SetConfig+0x7ae>
 80048b8:	2380      	movs	r3, #128	@ 0x80
 80048ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048be:	e224      	b.n	8004d0a <UART_SetConfig+0x7ae>
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4ab1      	ldr	r2, [pc, #708]	@ (8004b8c <UART_SetConfig+0x630>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d176      	bne.n	80049b8 <UART_SetConfig+0x45c>
 80048ca:	4bb1      	ldr	r3, [pc, #708]	@ (8004b90 <UART_SetConfig+0x634>)
 80048cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80048d2:	2b28      	cmp	r3, #40	@ 0x28
 80048d4:	d86c      	bhi.n	80049b0 <UART_SetConfig+0x454>
 80048d6:	a201      	add	r2, pc, #4	@ (adr r2, 80048dc <UART_SetConfig+0x380>)
 80048d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048dc:	08004981 	.word	0x08004981
 80048e0:	080049b1 	.word	0x080049b1
 80048e4:	080049b1 	.word	0x080049b1
 80048e8:	080049b1 	.word	0x080049b1
 80048ec:	080049b1 	.word	0x080049b1
 80048f0:	080049b1 	.word	0x080049b1
 80048f4:	080049b1 	.word	0x080049b1
 80048f8:	080049b1 	.word	0x080049b1
 80048fc:	08004989 	.word	0x08004989
 8004900:	080049b1 	.word	0x080049b1
 8004904:	080049b1 	.word	0x080049b1
 8004908:	080049b1 	.word	0x080049b1
 800490c:	080049b1 	.word	0x080049b1
 8004910:	080049b1 	.word	0x080049b1
 8004914:	080049b1 	.word	0x080049b1
 8004918:	080049b1 	.word	0x080049b1
 800491c:	08004991 	.word	0x08004991
 8004920:	080049b1 	.word	0x080049b1
 8004924:	080049b1 	.word	0x080049b1
 8004928:	080049b1 	.word	0x080049b1
 800492c:	080049b1 	.word	0x080049b1
 8004930:	080049b1 	.word	0x080049b1
 8004934:	080049b1 	.word	0x080049b1
 8004938:	080049b1 	.word	0x080049b1
 800493c:	08004999 	.word	0x08004999
 8004940:	080049b1 	.word	0x080049b1
 8004944:	080049b1 	.word	0x080049b1
 8004948:	080049b1 	.word	0x080049b1
 800494c:	080049b1 	.word	0x080049b1
 8004950:	080049b1 	.word	0x080049b1
 8004954:	080049b1 	.word	0x080049b1
 8004958:	080049b1 	.word	0x080049b1
 800495c:	080049a1 	.word	0x080049a1
 8004960:	080049b1 	.word	0x080049b1
 8004964:	080049b1 	.word	0x080049b1
 8004968:	080049b1 	.word	0x080049b1
 800496c:	080049b1 	.word	0x080049b1
 8004970:	080049b1 	.word	0x080049b1
 8004974:	080049b1 	.word	0x080049b1
 8004978:	080049b1 	.word	0x080049b1
 800497c:	080049a9 	.word	0x080049a9
 8004980:	2301      	movs	r3, #1
 8004982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004986:	e1c0      	b.n	8004d0a <UART_SetConfig+0x7ae>
 8004988:	2304      	movs	r3, #4
 800498a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800498e:	e1bc      	b.n	8004d0a <UART_SetConfig+0x7ae>
 8004990:	2308      	movs	r3, #8
 8004992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004996:	e1b8      	b.n	8004d0a <UART_SetConfig+0x7ae>
 8004998:	2310      	movs	r3, #16
 800499a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800499e:	e1b4      	b.n	8004d0a <UART_SetConfig+0x7ae>
 80049a0:	2320      	movs	r3, #32
 80049a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049a6:	e1b0      	b.n	8004d0a <UART_SetConfig+0x7ae>
 80049a8:	2340      	movs	r3, #64	@ 0x40
 80049aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049ae:	e1ac      	b.n	8004d0a <UART_SetConfig+0x7ae>
 80049b0:	2380      	movs	r3, #128	@ 0x80
 80049b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049b6:	e1a8      	b.n	8004d0a <UART_SetConfig+0x7ae>
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a75      	ldr	r2, [pc, #468]	@ (8004b94 <UART_SetConfig+0x638>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d130      	bne.n	8004a24 <UART_SetConfig+0x4c8>
 80049c2:	4b73      	ldr	r3, [pc, #460]	@ (8004b90 <UART_SetConfig+0x634>)
 80049c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049c6:	f003 0307 	and.w	r3, r3, #7
 80049ca:	2b05      	cmp	r3, #5
 80049cc:	d826      	bhi.n	8004a1c <UART_SetConfig+0x4c0>
 80049ce:	a201      	add	r2, pc, #4	@ (adr r2, 80049d4 <UART_SetConfig+0x478>)
 80049d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d4:	080049ed 	.word	0x080049ed
 80049d8:	080049f5 	.word	0x080049f5
 80049dc:	080049fd 	.word	0x080049fd
 80049e0:	08004a05 	.word	0x08004a05
 80049e4:	08004a0d 	.word	0x08004a0d
 80049e8:	08004a15 	.word	0x08004a15
 80049ec:	2300      	movs	r3, #0
 80049ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049f2:	e18a      	b.n	8004d0a <UART_SetConfig+0x7ae>
 80049f4:	2304      	movs	r3, #4
 80049f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049fa:	e186      	b.n	8004d0a <UART_SetConfig+0x7ae>
 80049fc:	2308      	movs	r3, #8
 80049fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a02:	e182      	b.n	8004d0a <UART_SetConfig+0x7ae>
 8004a04:	2310      	movs	r3, #16
 8004a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a0a:	e17e      	b.n	8004d0a <UART_SetConfig+0x7ae>
 8004a0c:	2320      	movs	r3, #32
 8004a0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a12:	e17a      	b.n	8004d0a <UART_SetConfig+0x7ae>
 8004a14:	2340      	movs	r3, #64	@ 0x40
 8004a16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a1a:	e176      	b.n	8004d0a <UART_SetConfig+0x7ae>
 8004a1c:	2380      	movs	r3, #128	@ 0x80
 8004a1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a22:	e172      	b.n	8004d0a <UART_SetConfig+0x7ae>
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a5b      	ldr	r2, [pc, #364]	@ (8004b98 <UART_SetConfig+0x63c>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d130      	bne.n	8004a90 <UART_SetConfig+0x534>
 8004a2e:	4b58      	ldr	r3, [pc, #352]	@ (8004b90 <UART_SetConfig+0x634>)
 8004a30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a32:	f003 0307 	and.w	r3, r3, #7
 8004a36:	2b05      	cmp	r3, #5
 8004a38:	d826      	bhi.n	8004a88 <UART_SetConfig+0x52c>
 8004a3a:	a201      	add	r2, pc, #4	@ (adr r2, 8004a40 <UART_SetConfig+0x4e4>)
 8004a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a40:	08004a59 	.word	0x08004a59
 8004a44:	08004a61 	.word	0x08004a61
 8004a48:	08004a69 	.word	0x08004a69
 8004a4c:	08004a71 	.word	0x08004a71
 8004a50:	08004a79 	.word	0x08004a79
 8004a54:	08004a81 	.word	0x08004a81
 8004a58:	2300      	movs	r3, #0
 8004a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a5e:	e154      	b.n	8004d0a <UART_SetConfig+0x7ae>
 8004a60:	2304      	movs	r3, #4
 8004a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a66:	e150      	b.n	8004d0a <UART_SetConfig+0x7ae>
 8004a68:	2308      	movs	r3, #8
 8004a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a6e:	e14c      	b.n	8004d0a <UART_SetConfig+0x7ae>
 8004a70:	2310      	movs	r3, #16
 8004a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a76:	e148      	b.n	8004d0a <UART_SetConfig+0x7ae>
 8004a78:	2320      	movs	r3, #32
 8004a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a7e:	e144      	b.n	8004d0a <UART_SetConfig+0x7ae>
 8004a80:	2340      	movs	r3, #64	@ 0x40
 8004a82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a86:	e140      	b.n	8004d0a <UART_SetConfig+0x7ae>
 8004a88:	2380      	movs	r3, #128	@ 0x80
 8004a8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a8e:	e13c      	b.n	8004d0a <UART_SetConfig+0x7ae>
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a41      	ldr	r2, [pc, #260]	@ (8004b9c <UART_SetConfig+0x640>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	f040 8082 	bne.w	8004ba0 <UART_SetConfig+0x644>
 8004a9c:	4b3c      	ldr	r3, [pc, #240]	@ (8004b90 <UART_SetConfig+0x634>)
 8004a9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aa0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004aa4:	2b28      	cmp	r3, #40	@ 0x28
 8004aa6:	d86d      	bhi.n	8004b84 <UART_SetConfig+0x628>
 8004aa8:	a201      	add	r2, pc, #4	@ (adr r2, 8004ab0 <UART_SetConfig+0x554>)
 8004aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aae:	bf00      	nop
 8004ab0:	08004b55 	.word	0x08004b55
 8004ab4:	08004b85 	.word	0x08004b85
 8004ab8:	08004b85 	.word	0x08004b85
 8004abc:	08004b85 	.word	0x08004b85
 8004ac0:	08004b85 	.word	0x08004b85
 8004ac4:	08004b85 	.word	0x08004b85
 8004ac8:	08004b85 	.word	0x08004b85
 8004acc:	08004b85 	.word	0x08004b85
 8004ad0:	08004b5d 	.word	0x08004b5d
 8004ad4:	08004b85 	.word	0x08004b85
 8004ad8:	08004b85 	.word	0x08004b85
 8004adc:	08004b85 	.word	0x08004b85
 8004ae0:	08004b85 	.word	0x08004b85
 8004ae4:	08004b85 	.word	0x08004b85
 8004ae8:	08004b85 	.word	0x08004b85
 8004aec:	08004b85 	.word	0x08004b85
 8004af0:	08004b65 	.word	0x08004b65
 8004af4:	08004b85 	.word	0x08004b85
 8004af8:	08004b85 	.word	0x08004b85
 8004afc:	08004b85 	.word	0x08004b85
 8004b00:	08004b85 	.word	0x08004b85
 8004b04:	08004b85 	.word	0x08004b85
 8004b08:	08004b85 	.word	0x08004b85
 8004b0c:	08004b85 	.word	0x08004b85
 8004b10:	08004b6d 	.word	0x08004b6d
 8004b14:	08004b85 	.word	0x08004b85
 8004b18:	08004b85 	.word	0x08004b85
 8004b1c:	08004b85 	.word	0x08004b85
 8004b20:	08004b85 	.word	0x08004b85
 8004b24:	08004b85 	.word	0x08004b85
 8004b28:	08004b85 	.word	0x08004b85
 8004b2c:	08004b85 	.word	0x08004b85
 8004b30:	08004b75 	.word	0x08004b75
 8004b34:	08004b85 	.word	0x08004b85
 8004b38:	08004b85 	.word	0x08004b85
 8004b3c:	08004b85 	.word	0x08004b85
 8004b40:	08004b85 	.word	0x08004b85
 8004b44:	08004b85 	.word	0x08004b85
 8004b48:	08004b85 	.word	0x08004b85
 8004b4c:	08004b85 	.word	0x08004b85
 8004b50:	08004b7d 	.word	0x08004b7d
 8004b54:	2301      	movs	r3, #1
 8004b56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b5a:	e0d6      	b.n	8004d0a <UART_SetConfig+0x7ae>
 8004b5c:	2304      	movs	r3, #4
 8004b5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b62:	e0d2      	b.n	8004d0a <UART_SetConfig+0x7ae>
 8004b64:	2308      	movs	r3, #8
 8004b66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b6a:	e0ce      	b.n	8004d0a <UART_SetConfig+0x7ae>
 8004b6c:	2310      	movs	r3, #16
 8004b6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b72:	e0ca      	b.n	8004d0a <UART_SetConfig+0x7ae>
 8004b74:	2320      	movs	r3, #32
 8004b76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b7a:	e0c6      	b.n	8004d0a <UART_SetConfig+0x7ae>
 8004b7c:	2340      	movs	r3, #64	@ 0x40
 8004b7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b82:	e0c2      	b.n	8004d0a <UART_SetConfig+0x7ae>
 8004b84:	2380      	movs	r3, #128	@ 0x80
 8004b86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b8a:	e0be      	b.n	8004d0a <UART_SetConfig+0x7ae>
 8004b8c:	40011400 	.word	0x40011400
 8004b90:	58024400 	.word	0x58024400
 8004b94:	40007800 	.word	0x40007800
 8004b98:	40007c00 	.word	0x40007c00
 8004b9c:	40011800 	.word	0x40011800
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4aad      	ldr	r2, [pc, #692]	@ (8004e5c <UART_SetConfig+0x900>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d176      	bne.n	8004c98 <UART_SetConfig+0x73c>
 8004baa:	4bad      	ldr	r3, [pc, #692]	@ (8004e60 <UART_SetConfig+0x904>)
 8004bac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004bb2:	2b28      	cmp	r3, #40	@ 0x28
 8004bb4:	d86c      	bhi.n	8004c90 <UART_SetConfig+0x734>
 8004bb6:	a201      	add	r2, pc, #4	@ (adr r2, 8004bbc <UART_SetConfig+0x660>)
 8004bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bbc:	08004c61 	.word	0x08004c61
 8004bc0:	08004c91 	.word	0x08004c91
 8004bc4:	08004c91 	.word	0x08004c91
 8004bc8:	08004c91 	.word	0x08004c91
 8004bcc:	08004c91 	.word	0x08004c91
 8004bd0:	08004c91 	.word	0x08004c91
 8004bd4:	08004c91 	.word	0x08004c91
 8004bd8:	08004c91 	.word	0x08004c91
 8004bdc:	08004c69 	.word	0x08004c69
 8004be0:	08004c91 	.word	0x08004c91
 8004be4:	08004c91 	.word	0x08004c91
 8004be8:	08004c91 	.word	0x08004c91
 8004bec:	08004c91 	.word	0x08004c91
 8004bf0:	08004c91 	.word	0x08004c91
 8004bf4:	08004c91 	.word	0x08004c91
 8004bf8:	08004c91 	.word	0x08004c91
 8004bfc:	08004c71 	.word	0x08004c71
 8004c00:	08004c91 	.word	0x08004c91
 8004c04:	08004c91 	.word	0x08004c91
 8004c08:	08004c91 	.word	0x08004c91
 8004c0c:	08004c91 	.word	0x08004c91
 8004c10:	08004c91 	.word	0x08004c91
 8004c14:	08004c91 	.word	0x08004c91
 8004c18:	08004c91 	.word	0x08004c91
 8004c1c:	08004c79 	.word	0x08004c79
 8004c20:	08004c91 	.word	0x08004c91
 8004c24:	08004c91 	.word	0x08004c91
 8004c28:	08004c91 	.word	0x08004c91
 8004c2c:	08004c91 	.word	0x08004c91
 8004c30:	08004c91 	.word	0x08004c91
 8004c34:	08004c91 	.word	0x08004c91
 8004c38:	08004c91 	.word	0x08004c91
 8004c3c:	08004c81 	.word	0x08004c81
 8004c40:	08004c91 	.word	0x08004c91
 8004c44:	08004c91 	.word	0x08004c91
 8004c48:	08004c91 	.word	0x08004c91
 8004c4c:	08004c91 	.word	0x08004c91
 8004c50:	08004c91 	.word	0x08004c91
 8004c54:	08004c91 	.word	0x08004c91
 8004c58:	08004c91 	.word	0x08004c91
 8004c5c:	08004c89 	.word	0x08004c89
 8004c60:	2301      	movs	r3, #1
 8004c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c66:	e050      	b.n	8004d0a <UART_SetConfig+0x7ae>
 8004c68:	2304      	movs	r3, #4
 8004c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c6e:	e04c      	b.n	8004d0a <UART_SetConfig+0x7ae>
 8004c70:	2308      	movs	r3, #8
 8004c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c76:	e048      	b.n	8004d0a <UART_SetConfig+0x7ae>
 8004c78:	2310      	movs	r3, #16
 8004c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c7e:	e044      	b.n	8004d0a <UART_SetConfig+0x7ae>
 8004c80:	2320      	movs	r3, #32
 8004c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c86:	e040      	b.n	8004d0a <UART_SetConfig+0x7ae>
 8004c88:	2340      	movs	r3, #64	@ 0x40
 8004c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c8e:	e03c      	b.n	8004d0a <UART_SetConfig+0x7ae>
 8004c90:	2380      	movs	r3, #128	@ 0x80
 8004c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c96:	e038      	b.n	8004d0a <UART_SetConfig+0x7ae>
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a71      	ldr	r2, [pc, #452]	@ (8004e64 <UART_SetConfig+0x908>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d130      	bne.n	8004d04 <UART_SetConfig+0x7a8>
 8004ca2:	4b6f      	ldr	r3, [pc, #444]	@ (8004e60 <UART_SetConfig+0x904>)
 8004ca4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ca6:	f003 0307 	and.w	r3, r3, #7
 8004caa:	2b05      	cmp	r3, #5
 8004cac:	d826      	bhi.n	8004cfc <UART_SetConfig+0x7a0>
 8004cae:	a201      	add	r2, pc, #4	@ (adr r2, 8004cb4 <UART_SetConfig+0x758>)
 8004cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb4:	08004ccd 	.word	0x08004ccd
 8004cb8:	08004cd5 	.word	0x08004cd5
 8004cbc:	08004cdd 	.word	0x08004cdd
 8004cc0:	08004ce5 	.word	0x08004ce5
 8004cc4:	08004ced 	.word	0x08004ced
 8004cc8:	08004cf5 	.word	0x08004cf5
 8004ccc:	2302      	movs	r3, #2
 8004cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cd2:	e01a      	b.n	8004d0a <UART_SetConfig+0x7ae>
 8004cd4:	2304      	movs	r3, #4
 8004cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cda:	e016      	b.n	8004d0a <UART_SetConfig+0x7ae>
 8004cdc:	2308      	movs	r3, #8
 8004cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ce2:	e012      	b.n	8004d0a <UART_SetConfig+0x7ae>
 8004ce4:	2310      	movs	r3, #16
 8004ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cea:	e00e      	b.n	8004d0a <UART_SetConfig+0x7ae>
 8004cec:	2320      	movs	r3, #32
 8004cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cf2:	e00a      	b.n	8004d0a <UART_SetConfig+0x7ae>
 8004cf4:	2340      	movs	r3, #64	@ 0x40
 8004cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cfa:	e006      	b.n	8004d0a <UART_SetConfig+0x7ae>
 8004cfc:	2380      	movs	r3, #128	@ 0x80
 8004cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d02:	e002      	b.n	8004d0a <UART_SetConfig+0x7ae>
 8004d04:	2380      	movs	r3, #128	@ 0x80
 8004d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a55      	ldr	r2, [pc, #340]	@ (8004e64 <UART_SetConfig+0x908>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	f040 80f8 	bne.w	8004f06 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d16:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004d1a:	2b20      	cmp	r3, #32
 8004d1c:	dc46      	bgt.n	8004dac <UART_SetConfig+0x850>
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	db75      	blt.n	8004e0e <UART_SetConfig+0x8b2>
 8004d22:	3b02      	subs	r3, #2
 8004d24:	2b1e      	cmp	r3, #30
 8004d26:	d872      	bhi.n	8004e0e <UART_SetConfig+0x8b2>
 8004d28:	a201      	add	r2, pc, #4	@ (adr r2, 8004d30 <UART_SetConfig+0x7d4>)
 8004d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d2e:	bf00      	nop
 8004d30:	08004db3 	.word	0x08004db3
 8004d34:	08004e0f 	.word	0x08004e0f
 8004d38:	08004dbb 	.word	0x08004dbb
 8004d3c:	08004e0f 	.word	0x08004e0f
 8004d40:	08004e0f 	.word	0x08004e0f
 8004d44:	08004e0f 	.word	0x08004e0f
 8004d48:	08004dcb 	.word	0x08004dcb
 8004d4c:	08004e0f 	.word	0x08004e0f
 8004d50:	08004e0f 	.word	0x08004e0f
 8004d54:	08004e0f 	.word	0x08004e0f
 8004d58:	08004e0f 	.word	0x08004e0f
 8004d5c:	08004e0f 	.word	0x08004e0f
 8004d60:	08004e0f 	.word	0x08004e0f
 8004d64:	08004e0f 	.word	0x08004e0f
 8004d68:	08004ddb 	.word	0x08004ddb
 8004d6c:	08004e0f 	.word	0x08004e0f
 8004d70:	08004e0f 	.word	0x08004e0f
 8004d74:	08004e0f 	.word	0x08004e0f
 8004d78:	08004e0f 	.word	0x08004e0f
 8004d7c:	08004e0f 	.word	0x08004e0f
 8004d80:	08004e0f 	.word	0x08004e0f
 8004d84:	08004e0f 	.word	0x08004e0f
 8004d88:	08004e0f 	.word	0x08004e0f
 8004d8c:	08004e0f 	.word	0x08004e0f
 8004d90:	08004e0f 	.word	0x08004e0f
 8004d94:	08004e0f 	.word	0x08004e0f
 8004d98:	08004e0f 	.word	0x08004e0f
 8004d9c:	08004e0f 	.word	0x08004e0f
 8004da0:	08004e0f 	.word	0x08004e0f
 8004da4:	08004e0f 	.word	0x08004e0f
 8004da8:	08004e01 	.word	0x08004e01
 8004dac:	2b40      	cmp	r3, #64	@ 0x40
 8004dae:	d02a      	beq.n	8004e06 <UART_SetConfig+0x8aa>
 8004db0:	e02d      	b.n	8004e0e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004db2:	f7fe fed3 	bl	8003b5c <HAL_RCCEx_GetD3PCLK1Freq>
 8004db6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004db8:	e02f      	b.n	8004e1a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004dba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f7fe fee2 	bl	8003b88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004dc8:	e027      	b.n	8004e1a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004dca:	f107 0318 	add.w	r3, r7, #24
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7ff f82e 	bl	8003e30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004dd8:	e01f      	b.n	8004e1a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004dda:	4b21      	ldr	r3, [pc, #132]	@ (8004e60 <UART_SetConfig+0x904>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0320 	and.w	r3, r3, #32
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d009      	beq.n	8004dfa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004de6:	4b1e      	ldr	r3, [pc, #120]	@ (8004e60 <UART_SetConfig+0x904>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	08db      	lsrs	r3, r3, #3
 8004dec:	f003 0303 	and.w	r3, r3, #3
 8004df0:	4a1d      	ldr	r2, [pc, #116]	@ (8004e68 <UART_SetConfig+0x90c>)
 8004df2:	fa22 f303 	lsr.w	r3, r2, r3
 8004df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004df8:	e00f      	b.n	8004e1a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004dfa:	4b1b      	ldr	r3, [pc, #108]	@ (8004e68 <UART_SetConfig+0x90c>)
 8004dfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004dfe:	e00c      	b.n	8004e1a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004e00:	4b1a      	ldr	r3, [pc, #104]	@ (8004e6c <UART_SetConfig+0x910>)
 8004e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e04:	e009      	b.n	8004e1a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e0c:	e005      	b.n	8004e1a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004e18:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004e1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f000 81ee 	beq.w	80051fe <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e26:	4a12      	ldr	r2, [pc, #72]	@ (8004e70 <UART_SetConfig+0x914>)
 8004e28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e30:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e34:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	685a      	ldr	r2, [r3, #4]
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	005b      	lsls	r3, r3, #1
 8004e3e:	4413      	add	r3, r2
 8004e40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d305      	bcc.n	8004e52 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d910      	bls.n	8004e74 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004e58:	e1d1      	b.n	80051fe <UART_SetConfig+0xca2>
 8004e5a:	bf00      	nop
 8004e5c:	40011c00 	.word	0x40011c00
 8004e60:	58024400 	.word	0x58024400
 8004e64:	58000c00 	.word	0x58000c00
 8004e68:	03d09000 	.word	0x03d09000
 8004e6c:	003d0900 	.word	0x003d0900
 8004e70:	0800b114 	.word	0x0800b114
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e76:	2200      	movs	r2, #0
 8004e78:	60bb      	str	r3, [r7, #8]
 8004e7a:	60fa      	str	r2, [r7, #12]
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e80:	4ac0      	ldr	r2, [pc, #768]	@ (8005184 <UART_SetConfig+0xc28>)
 8004e82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	2200      	movs	r2, #0
 8004e8a:	603b      	str	r3, [r7, #0]
 8004e8c:	607a      	str	r2, [r7, #4]
 8004e8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e96:	f7fb fc3f 	bl	8000718 <__aeabi_uldivmod>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	4610      	mov	r0, r2
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	f04f 0200 	mov.w	r2, #0
 8004ea6:	f04f 0300 	mov.w	r3, #0
 8004eaa:	020b      	lsls	r3, r1, #8
 8004eac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004eb0:	0202      	lsls	r2, r0, #8
 8004eb2:	6979      	ldr	r1, [r7, #20]
 8004eb4:	6849      	ldr	r1, [r1, #4]
 8004eb6:	0849      	lsrs	r1, r1, #1
 8004eb8:	2000      	movs	r0, #0
 8004eba:	460c      	mov	r4, r1
 8004ebc:	4605      	mov	r5, r0
 8004ebe:	eb12 0804 	adds.w	r8, r2, r4
 8004ec2:	eb43 0905 	adc.w	r9, r3, r5
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	469a      	mov	sl, r3
 8004ece:	4693      	mov	fp, r2
 8004ed0:	4652      	mov	r2, sl
 8004ed2:	465b      	mov	r3, fp
 8004ed4:	4640      	mov	r0, r8
 8004ed6:	4649      	mov	r1, r9
 8004ed8:	f7fb fc1e 	bl	8000718 <__aeabi_uldivmod>
 8004edc:	4602      	mov	r2, r0
 8004ede:	460b      	mov	r3, r1
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ee6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004eea:	d308      	bcc.n	8004efe <UART_SetConfig+0x9a2>
 8004eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ef2:	d204      	bcs.n	8004efe <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004efa:	60da      	str	r2, [r3, #12]
 8004efc:	e17f      	b.n	80051fe <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004f04:	e17b      	b.n	80051fe <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	69db      	ldr	r3, [r3, #28]
 8004f0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f0e:	f040 80bd 	bne.w	800508c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8004f12:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004f16:	2b20      	cmp	r3, #32
 8004f18:	dc48      	bgt.n	8004fac <UART_SetConfig+0xa50>
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	db7b      	blt.n	8005016 <UART_SetConfig+0xaba>
 8004f1e:	2b20      	cmp	r3, #32
 8004f20:	d879      	bhi.n	8005016 <UART_SetConfig+0xaba>
 8004f22:	a201      	add	r2, pc, #4	@ (adr r2, 8004f28 <UART_SetConfig+0x9cc>)
 8004f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f28:	08004fb3 	.word	0x08004fb3
 8004f2c:	08004fbb 	.word	0x08004fbb
 8004f30:	08005017 	.word	0x08005017
 8004f34:	08005017 	.word	0x08005017
 8004f38:	08004fc3 	.word	0x08004fc3
 8004f3c:	08005017 	.word	0x08005017
 8004f40:	08005017 	.word	0x08005017
 8004f44:	08005017 	.word	0x08005017
 8004f48:	08004fd3 	.word	0x08004fd3
 8004f4c:	08005017 	.word	0x08005017
 8004f50:	08005017 	.word	0x08005017
 8004f54:	08005017 	.word	0x08005017
 8004f58:	08005017 	.word	0x08005017
 8004f5c:	08005017 	.word	0x08005017
 8004f60:	08005017 	.word	0x08005017
 8004f64:	08005017 	.word	0x08005017
 8004f68:	08004fe3 	.word	0x08004fe3
 8004f6c:	08005017 	.word	0x08005017
 8004f70:	08005017 	.word	0x08005017
 8004f74:	08005017 	.word	0x08005017
 8004f78:	08005017 	.word	0x08005017
 8004f7c:	08005017 	.word	0x08005017
 8004f80:	08005017 	.word	0x08005017
 8004f84:	08005017 	.word	0x08005017
 8004f88:	08005017 	.word	0x08005017
 8004f8c:	08005017 	.word	0x08005017
 8004f90:	08005017 	.word	0x08005017
 8004f94:	08005017 	.word	0x08005017
 8004f98:	08005017 	.word	0x08005017
 8004f9c:	08005017 	.word	0x08005017
 8004fa0:	08005017 	.word	0x08005017
 8004fa4:	08005017 	.word	0x08005017
 8004fa8:	08005009 	.word	0x08005009
 8004fac:	2b40      	cmp	r3, #64	@ 0x40
 8004fae:	d02e      	beq.n	800500e <UART_SetConfig+0xab2>
 8004fb0:	e031      	b.n	8005016 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fb2:	f7fd fbe9 	bl	8002788 <HAL_RCC_GetPCLK1Freq>
 8004fb6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004fb8:	e033      	b.n	8005022 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fba:	f7fd fbfb 	bl	80027b4 <HAL_RCC_GetPCLK2Freq>
 8004fbe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004fc0:	e02f      	b.n	8005022 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004fc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f7fe fdde 	bl	8003b88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004fd0:	e027      	b.n	8005022 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004fd2:	f107 0318 	add.w	r3, r7, #24
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7fe ff2a 	bl	8003e30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004fe0:	e01f      	b.n	8005022 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004fe2:	4b69      	ldr	r3, [pc, #420]	@ (8005188 <UART_SetConfig+0xc2c>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0320 	and.w	r3, r3, #32
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d009      	beq.n	8005002 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004fee:	4b66      	ldr	r3, [pc, #408]	@ (8005188 <UART_SetConfig+0xc2c>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	08db      	lsrs	r3, r3, #3
 8004ff4:	f003 0303 	and.w	r3, r3, #3
 8004ff8:	4a64      	ldr	r2, [pc, #400]	@ (800518c <UART_SetConfig+0xc30>)
 8004ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8004ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005000:	e00f      	b.n	8005022 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8005002:	4b62      	ldr	r3, [pc, #392]	@ (800518c <UART_SetConfig+0xc30>)
 8005004:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005006:	e00c      	b.n	8005022 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005008:	4b61      	ldr	r3, [pc, #388]	@ (8005190 <UART_SetConfig+0xc34>)
 800500a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800500c:	e009      	b.n	8005022 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800500e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005012:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005014:	e005      	b.n	8005022 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8005016:	2300      	movs	r3, #0
 8005018:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005020:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005022:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005024:	2b00      	cmp	r3, #0
 8005026:	f000 80ea 	beq.w	80051fe <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800502e:	4a55      	ldr	r2, [pc, #340]	@ (8005184 <UART_SetConfig+0xc28>)
 8005030:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005034:	461a      	mov	r2, r3
 8005036:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005038:	fbb3 f3f2 	udiv	r3, r3, r2
 800503c:	005a      	lsls	r2, r3, #1
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	085b      	lsrs	r3, r3, #1
 8005044:	441a      	add	r2, r3
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	fbb2 f3f3 	udiv	r3, r2, r3
 800504e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005052:	2b0f      	cmp	r3, #15
 8005054:	d916      	bls.n	8005084 <UART_SetConfig+0xb28>
 8005056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005058:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800505c:	d212      	bcs.n	8005084 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800505e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005060:	b29b      	uxth	r3, r3
 8005062:	f023 030f 	bic.w	r3, r3, #15
 8005066:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800506a:	085b      	lsrs	r3, r3, #1
 800506c:	b29b      	uxth	r3, r3
 800506e:	f003 0307 	and.w	r3, r3, #7
 8005072:	b29a      	uxth	r2, r3
 8005074:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005076:	4313      	orrs	r3, r2
 8005078:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005080:	60da      	str	r2, [r3, #12]
 8005082:	e0bc      	b.n	80051fe <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800508a:	e0b8      	b.n	80051fe <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800508c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005090:	2b20      	cmp	r3, #32
 8005092:	dc4b      	bgt.n	800512c <UART_SetConfig+0xbd0>
 8005094:	2b00      	cmp	r3, #0
 8005096:	f2c0 8087 	blt.w	80051a8 <UART_SetConfig+0xc4c>
 800509a:	2b20      	cmp	r3, #32
 800509c:	f200 8084 	bhi.w	80051a8 <UART_SetConfig+0xc4c>
 80050a0:	a201      	add	r2, pc, #4	@ (adr r2, 80050a8 <UART_SetConfig+0xb4c>)
 80050a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a6:	bf00      	nop
 80050a8:	08005133 	.word	0x08005133
 80050ac:	0800513b 	.word	0x0800513b
 80050b0:	080051a9 	.word	0x080051a9
 80050b4:	080051a9 	.word	0x080051a9
 80050b8:	08005143 	.word	0x08005143
 80050bc:	080051a9 	.word	0x080051a9
 80050c0:	080051a9 	.word	0x080051a9
 80050c4:	080051a9 	.word	0x080051a9
 80050c8:	08005153 	.word	0x08005153
 80050cc:	080051a9 	.word	0x080051a9
 80050d0:	080051a9 	.word	0x080051a9
 80050d4:	080051a9 	.word	0x080051a9
 80050d8:	080051a9 	.word	0x080051a9
 80050dc:	080051a9 	.word	0x080051a9
 80050e0:	080051a9 	.word	0x080051a9
 80050e4:	080051a9 	.word	0x080051a9
 80050e8:	08005163 	.word	0x08005163
 80050ec:	080051a9 	.word	0x080051a9
 80050f0:	080051a9 	.word	0x080051a9
 80050f4:	080051a9 	.word	0x080051a9
 80050f8:	080051a9 	.word	0x080051a9
 80050fc:	080051a9 	.word	0x080051a9
 8005100:	080051a9 	.word	0x080051a9
 8005104:	080051a9 	.word	0x080051a9
 8005108:	080051a9 	.word	0x080051a9
 800510c:	080051a9 	.word	0x080051a9
 8005110:	080051a9 	.word	0x080051a9
 8005114:	080051a9 	.word	0x080051a9
 8005118:	080051a9 	.word	0x080051a9
 800511c:	080051a9 	.word	0x080051a9
 8005120:	080051a9 	.word	0x080051a9
 8005124:	080051a9 	.word	0x080051a9
 8005128:	0800519b 	.word	0x0800519b
 800512c:	2b40      	cmp	r3, #64	@ 0x40
 800512e:	d037      	beq.n	80051a0 <UART_SetConfig+0xc44>
 8005130:	e03a      	b.n	80051a8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005132:	f7fd fb29 	bl	8002788 <HAL_RCC_GetPCLK1Freq>
 8005136:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005138:	e03c      	b.n	80051b4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800513a:	f7fd fb3b 	bl	80027b4 <HAL_RCC_GetPCLK2Freq>
 800513e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005140:	e038      	b.n	80051b4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005142:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005146:	4618      	mov	r0, r3
 8005148:	f7fe fd1e 	bl	8003b88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800514c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800514e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005150:	e030      	b.n	80051b4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005152:	f107 0318 	add.w	r3, r7, #24
 8005156:	4618      	mov	r0, r3
 8005158:	f7fe fe6a 	bl	8003e30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005160:	e028      	b.n	80051b4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005162:	4b09      	ldr	r3, [pc, #36]	@ (8005188 <UART_SetConfig+0xc2c>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0320 	and.w	r3, r3, #32
 800516a:	2b00      	cmp	r3, #0
 800516c:	d012      	beq.n	8005194 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800516e:	4b06      	ldr	r3, [pc, #24]	@ (8005188 <UART_SetConfig+0xc2c>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	08db      	lsrs	r3, r3, #3
 8005174:	f003 0303 	and.w	r3, r3, #3
 8005178:	4a04      	ldr	r2, [pc, #16]	@ (800518c <UART_SetConfig+0xc30>)
 800517a:	fa22 f303 	lsr.w	r3, r2, r3
 800517e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005180:	e018      	b.n	80051b4 <UART_SetConfig+0xc58>
 8005182:	bf00      	nop
 8005184:	0800b114 	.word	0x0800b114
 8005188:	58024400 	.word	0x58024400
 800518c:	03d09000 	.word	0x03d09000
 8005190:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8005194:	4b24      	ldr	r3, [pc, #144]	@ (8005228 <UART_SetConfig+0xccc>)
 8005196:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005198:	e00c      	b.n	80051b4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800519a:	4b24      	ldr	r3, [pc, #144]	@ (800522c <UART_SetConfig+0xcd0>)
 800519c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800519e:	e009      	b.n	80051b4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80051a6:	e005      	b.n	80051b4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80051a8:	2300      	movs	r3, #0
 80051aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80051b2:	bf00      	nop
    }

    if (pclk != 0U)
 80051b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d021      	beq.n	80051fe <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051be:	4a1c      	ldr	r2, [pc, #112]	@ (8005230 <UART_SetConfig+0xcd4>)
 80051c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051c4:	461a      	mov	r2, r3
 80051c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051c8:	fbb3 f2f2 	udiv	r2, r3, r2
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	085b      	lsrs	r3, r3, #1
 80051d2:	441a      	add	r2, r3
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051dc:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051e0:	2b0f      	cmp	r3, #15
 80051e2:	d909      	bls.n	80051f8 <UART_SetConfig+0xc9c>
 80051e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051ea:	d205      	bcs.n	80051f8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80051ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051ee:	b29a      	uxth	r2, r3
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	60da      	str	r2, [r3, #12]
 80051f6:	e002      	b.n	80051fe <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	2201      	movs	r2, #1
 8005202:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	2201      	movs	r2, #1
 800520a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	2200      	movs	r2, #0
 8005212:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	2200      	movs	r2, #0
 8005218:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800521a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800521e:	4618      	mov	r0, r3
 8005220:	3748      	adds	r7, #72	@ 0x48
 8005222:	46bd      	mov	sp, r7
 8005224:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005228:	03d09000 	.word	0x03d09000
 800522c:	003d0900 	.word	0x003d0900
 8005230:	0800b114 	.word	0x0800b114

08005234 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005240:	f003 0308 	and.w	r3, r3, #8
 8005244:	2b00      	cmp	r3, #0
 8005246:	d00a      	beq.n	800525e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	430a      	orrs	r2, r1
 800525c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005262:	f003 0301 	and.w	r3, r3, #1
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00a      	beq.n	8005280 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	430a      	orrs	r2, r1
 800527e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005284:	f003 0302 	and.w	r3, r3, #2
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00a      	beq.n	80052a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	430a      	orrs	r2, r1
 80052a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052a6:	f003 0304 	and.w	r3, r3, #4
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00a      	beq.n	80052c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	430a      	orrs	r2, r1
 80052c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052c8:	f003 0310 	and.w	r3, r3, #16
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00a      	beq.n	80052e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	430a      	orrs	r2, r1
 80052e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ea:	f003 0320 	and.w	r3, r3, #32
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00a      	beq.n	8005308 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	430a      	orrs	r2, r1
 8005306:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800530c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005310:	2b00      	cmp	r3, #0
 8005312:	d01a      	beq.n	800534a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	430a      	orrs	r2, r1
 8005328:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800532e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005332:	d10a      	bne.n	800534a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	430a      	orrs	r2, r1
 8005348:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800534e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00a      	beq.n	800536c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	430a      	orrs	r2, r1
 800536a:	605a      	str	r2, [r3, #4]
  }
}
 800536c:	bf00      	nop
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b098      	sub	sp, #96	@ 0x60
 800537c:	af02      	add	r7, sp, #8
 800537e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005388:	f7fb ff7a 	bl	8001280 <HAL_GetTick>
 800538c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0308 	and.w	r3, r3, #8
 8005398:	2b08      	cmp	r3, #8
 800539a:	d12f      	bne.n	80053fc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800539c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80053a0:	9300      	str	r3, [sp, #0]
 80053a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053a4:	2200      	movs	r2, #0
 80053a6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 f88e 	bl	80054cc <UART_WaitOnFlagUntilTimeout>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d022      	beq.n	80053fc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053be:	e853 3f00 	ldrex	r3, [r3]
 80053c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80053c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	461a      	mov	r2, r3
 80053d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80053d6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80053da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053dc:	e841 2300 	strex	r3, r2, [r1]
 80053e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80053e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d1e6      	bne.n	80053b6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2220      	movs	r2, #32
 80053ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e063      	b.n	80054c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0304 	and.w	r3, r3, #4
 8005406:	2b04      	cmp	r3, #4
 8005408:	d149      	bne.n	800549e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800540a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800540e:	9300      	str	r3, [sp, #0]
 8005410:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005412:	2200      	movs	r2, #0
 8005414:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f000 f857 	bl	80054cc <UART_WaitOnFlagUntilTimeout>
 800541e:	4603      	mov	r3, r0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d03c      	beq.n	800549e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800542a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800542c:	e853 3f00 	ldrex	r3, [r3]
 8005430:	623b      	str	r3, [r7, #32]
   return(result);
 8005432:	6a3b      	ldr	r3, [r7, #32]
 8005434:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005438:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	461a      	mov	r2, r3
 8005440:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005442:	633b      	str	r3, [r7, #48]	@ 0x30
 8005444:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005446:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005448:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800544a:	e841 2300 	strex	r3, r2, [r1]
 800544e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005452:	2b00      	cmp	r3, #0
 8005454:	d1e6      	bne.n	8005424 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	3308      	adds	r3, #8
 800545c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	e853 3f00 	ldrex	r3, [r3]
 8005464:	60fb      	str	r3, [r7, #12]
   return(result);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f023 0301 	bic.w	r3, r3, #1
 800546c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	3308      	adds	r3, #8
 8005474:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005476:	61fa      	str	r2, [r7, #28]
 8005478:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547a:	69b9      	ldr	r1, [r7, #24]
 800547c:	69fa      	ldr	r2, [r7, #28]
 800547e:	e841 2300 	strex	r3, r2, [r1]
 8005482:	617b      	str	r3, [r7, #20]
   return(result);
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1e5      	bne.n	8005456 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2220      	movs	r2, #32
 800548e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e012      	b.n	80054c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2220      	movs	r2, #32
 80054a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2220      	movs	r2, #32
 80054aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3758      	adds	r7, #88	@ 0x58
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	603b      	str	r3, [r7, #0]
 80054d8:	4613      	mov	r3, r2
 80054da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054dc:	e04f      	b.n	800557e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e4:	d04b      	beq.n	800557e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054e6:	f7fb fecb 	bl	8001280 <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	69ba      	ldr	r2, [r7, #24]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d302      	bcc.n	80054fc <UART_WaitOnFlagUntilTimeout+0x30>
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d101      	bne.n	8005500 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e04e      	b.n	800559e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0304 	and.w	r3, r3, #4
 800550a:	2b00      	cmp	r3, #0
 800550c:	d037      	beq.n	800557e <UART_WaitOnFlagUntilTimeout+0xb2>
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	2b80      	cmp	r3, #128	@ 0x80
 8005512:	d034      	beq.n	800557e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	2b40      	cmp	r3, #64	@ 0x40
 8005518:	d031      	beq.n	800557e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	69db      	ldr	r3, [r3, #28]
 8005520:	f003 0308 	and.w	r3, r3, #8
 8005524:	2b08      	cmp	r3, #8
 8005526:	d110      	bne.n	800554a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2208      	movs	r2, #8
 800552e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	f000 f839 	bl	80055a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2208      	movs	r2, #8
 800553a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e029      	b.n	800559e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	69db      	ldr	r3, [r3, #28]
 8005550:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005554:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005558:	d111      	bne.n	800557e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005562:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005564:	68f8      	ldr	r0, [r7, #12]
 8005566:	f000 f81f 	bl	80055a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2220      	movs	r2, #32
 800556e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e00f      	b.n	800559e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	69da      	ldr	r2, [r3, #28]
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	4013      	ands	r3, r2
 8005588:	68ba      	ldr	r2, [r7, #8]
 800558a:	429a      	cmp	r2, r3
 800558c:	bf0c      	ite	eq
 800558e:	2301      	moveq	r3, #1
 8005590:	2300      	movne	r3, #0
 8005592:	b2db      	uxtb	r3, r3
 8005594:	461a      	mov	r2, r3
 8005596:	79fb      	ldrb	r3, [r7, #7]
 8005598:	429a      	cmp	r2, r3
 800559a:	d0a0      	beq.n	80054de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3710      	adds	r7, #16
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
	...

080055a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b095      	sub	sp, #84	@ 0x54
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055b8:	e853 3f00 	ldrex	r3, [r3]
 80055bc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80055be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	461a      	mov	r2, r3
 80055cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80055d0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80055d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80055d6:	e841 2300 	strex	r3, r2, [r1]
 80055da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80055dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1e6      	bne.n	80055b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	3308      	adds	r3, #8
 80055e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ea:	6a3b      	ldr	r3, [r7, #32]
 80055ec:	e853 3f00 	ldrex	r3, [r3]
 80055f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80055f2:	69fa      	ldr	r2, [r7, #28]
 80055f4:	4b1e      	ldr	r3, [pc, #120]	@ (8005670 <UART_EndRxTransfer+0xc8>)
 80055f6:	4013      	ands	r3, r2
 80055f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	3308      	adds	r3, #8
 8005600:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005602:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005604:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005606:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005608:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800560a:	e841 2300 	strex	r3, r2, [r1]
 800560e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1e5      	bne.n	80055e2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800561a:	2b01      	cmp	r3, #1
 800561c:	d118      	bne.n	8005650 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	e853 3f00 	ldrex	r3, [r3]
 800562a:	60bb      	str	r3, [r7, #8]
   return(result);
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	f023 0310 	bic.w	r3, r3, #16
 8005632:	647b      	str	r3, [r7, #68]	@ 0x44
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	461a      	mov	r2, r3
 800563a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800563c:	61bb      	str	r3, [r7, #24]
 800563e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005640:	6979      	ldr	r1, [r7, #20]
 8005642:	69ba      	ldr	r2, [r7, #24]
 8005644:	e841 2300 	strex	r3, r2, [r1]
 8005648:	613b      	str	r3, [r7, #16]
   return(result);
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1e6      	bne.n	800561e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2220      	movs	r2, #32
 8005654:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005664:	bf00      	nop
 8005666:	3754      	adds	r7, #84	@ 0x54
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr
 8005670:	effffffe 	.word	0xeffffffe

08005674 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005674:	b480      	push	{r7}
 8005676:	b085      	sub	sp, #20
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005682:	2b01      	cmp	r3, #1
 8005684:	d101      	bne.n	800568a <HAL_UARTEx_DisableFifoMode+0x16>
 8005686:	2302      	movs	r3, #2
 8005688:	e027      	b.n	80056da <HAL_UARTEx_DisableFifoMode+0x66>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2201      	movs	r2, #1
 800568e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2224      	movs	r2, #36	@ 0x24
 8005696:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f022 0201 	bic.w	r2, r2, #1
 80056b0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80056b8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2220      	movs	r2, #32
 80056cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3714      	adds	r7, #20
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr

080056e6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80056e6:	b580      	push	{r7, lr}
 80056e8:	b084      	sub	sp, #16
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
 80056ee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d101      	bne.n	80056fe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80056fa:	2302      	movs	r3, #2
 80056fc:	e02d      	b.n	800575a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2201      	movs	r2, #1
 8005702:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2224      	movs	r2, #36	@ 0x24
 800570a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f022 0201 	bic.w	r2, r2, #1
 8005724:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	683a      	ldr	r2, [r7, #0]
 8005736:	430a      	orrs	r2, r1
 8005738:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 f850 	bl	80057e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2220      	movs	r2, #32
 800574c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005762:	b580      	push	{r7, lr}
 8005764:	b084      	sub	sp, #16
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
 800576a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005772:	2b01      	cmp	r3, #1
 8005774:	d101      	bne.n	800577a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005776:	2302      	movs	r3, #2
 8005778:	e02d      	b.n	80057d6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2201      	movs	r2, #1
 800577e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2224      	movs	r2, #36	@ 0x24
 8005786:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f022 0201 	bic.w	r2, r2, #1
 80057a0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	683a      	ldr	r2, [r7, #0]
 80057b2:	430a      	orrs	r2, r1
 80057b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 f812 	bl	80057e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68fa      	ldr	r2, [r7, #12]
 80057c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2220      	movs	r2, #32
 80057c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3710      	adds	r7, #16
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
	...

080057e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d108      	bne.n	8005802 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005800:	e031      	b.n	8005866 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005802:	2310      	movs	r3, #16
 8005804:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005806:	2310      	movs	r3, #16
 8005808:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	0e5b      	lsrs	r3, r3, #25
 8005812:	b2db      	uxtb	r3, r3
 8005814:	f003 0307 	and.w	r3, r3, #7
 8005818:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	0f5b      	lsrs	r3, r3, #29
 8005822:	b2db      	uxtb	r3, r3
 8005824:	f003 0307 	and.w	r3, r3, #7
 8005828:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800582a:	7bbb      	ldrb	r3, [r7, #14]
 800582c:	7b3a      	ldrb	r2, [r7, #12]
 800582e:	4911      	ldr	r1, [pc, #68]	@ (8005874 <UARTEx_SetNbDataToProcess+0x94>)
 8005830:	5c8a      	ldrb	r2, [r1, r2]
 8005832:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005836:	7b3a      	ldrb	r2, [r7, #12]
 8005838:	490f      	ldr	r1, [pc, #60]	@ (8005878 <UARTEx_SetNbDataToProcess+0x98>)
 800583a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800583c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005840:	b29a      	uxth	r2, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005848:	7bfb      	ldrb	r3, [r7, #15]
 800584a:	7b7a      	ldrb	r2, [r7, #13]
 800584c:	4909      	ldr	r1, [pc, #36]	@ (8005874 <UARTEx_SetNbDataToProcess+0x94>)
 800584e:	5c8a      	ldrb	r2, [r1, r2]
 8005850:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005854:	7b7a      	ldrb	r2, [r7, #13]
 8005856:	4908      	ldr	r1, [pc, #32]	@ (8005878 <UARTEx_SetNbDataToProcess+0x98>)
 8005858:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800585a:	fb93 f3f2 	sdiv	r3, r3, r2
 800585e:	b29a      	uxth	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005866:	bf00      	nop
 8005868:	3714      	adds	r7, #20
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	0800b12c 	.word	0x0800b12c
 8005878:	0800b134 	.word	0x0800b134

0800587c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005882:	f3ef 8305 	mrs	r3, IPSR
 8005886:	603b      	str	r3, [r7, #0]
  return(result);
 8005888:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800588a:	2b00      	cmp	r3, #0
 800588c:	d003      	beq.n	8005896 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800588e:	f06f 0305 	mvn.w	r3, #5
 8005892:	607b      	str	r3, [r7, #4]
 8005894:	e00c      	b.n	80058b0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005896:	4b0a      	ldr	r3, [pc, #40]	@ (80058c0 <osKernelInitialize+0x44>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d105      	bne.n	80058aa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800589e:	4b08      	ldr	r3, [pc, #32]	@ (80058c0 <osKernelInitialize+0x44>)
 80058a0:	2201      	movs	r2, #1
 80058a2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80058a4:	2300      	movs	r3, #0
 80058a6:	607b      	str	r3, [r7, #4]
 80058a8:	e002      	b.n	80058b0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80058aa:	f04f 33ff 	mov.w	r3, #4294967295
 80058ae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80058b0:	687b      	ldr	r3, [r7, #4]
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	370c      	adds	r7, #12
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr
 80058be:	bf00      	nop
 80058c0:	24000298 	.word	0x24000298

080058c4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b08e      	sub	sp, #56	@ 0x38
 80058c8:	af04      	add	r7, sp, #16
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80058d0:	2300      	movs	r3, #0
 80058d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058d4:	f3ef 8305 	mrs	r3, IPSR
 80058d8:	617b      	str	r3, [r7, #20]
  return(result);
 80058da:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d17e      	bne.n	80059de <osThreadNew+0x11a>
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d07b      	beq.n	80059de <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80058e6:	2380      	movs	r3, #128	@ 0x80
 80058e8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80058ea:	2318      	movs	r3, #24
 80058ec:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80058ee:	2300      	movs	r3, #0
 80058f0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80058f2:	f04f 33ff 	mov.w	r3, #4294967295
 80058f6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d045      	beq.n	800598a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d002      	beq.n	800590c <osThreadNew+0x48>
        name = attr->name;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	699b      	ldr	r3, [r3, #24]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d002      	beq.n	800591a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	699b      	ldr	r3, [r3, #24]
 8005918:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d008      	beq.n	8005932 <osThreadNew+0x6e>
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	2b38      	cmp	r3, #56	@ 0x38
 8005924:	d805      	bhi.n	8005932 <osThreadNew+0x6e>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	f003 0301 	and.w	r3, r3, #1
 800592e:	2b00      	cmp	r3, #0
 8005930:	d001      	beq.n	8005936 <osThreadNew+0x72>
        return (NULL);
 8005932:	2300      	movs	r3, #0
 8005934:	e054      	b.n	80059e0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d003      	beq.n	8005946 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	089b      	lsrs	r3, r3, #2
 8005944:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00e      	beq.n	800596c <osThreadNew+0xa8>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	2b5b      	cmp	r3, #91	@ 0x5b
 8005954:	d90a      	bls.n	800596c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800595a:	2b00      	cmp	r3, #0
 800595c:	d006      	beq.n	800596c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d002      	beq.n	800596c <osThreadNew+0xa8>
        mem = 1;
 8005966:	2301      	movs	r3, #1
 8005968:	61bb      	str	r3, [r7, #24]
 800596a:	e010      	b.n	800598e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d10c      	bne.n	800598e <osThreadNew+0xca>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d108      	bne.n	800598e <osThreadNew+0xca>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d104      	bne.n	800598e <osThreadNew+0xca>
          mem = 0;
 8005984:	2300      	movs	r3, #0
 8005986:	61bb      	str	r3, [r7, #24]
 8005988:	e001      	b.n	800598e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800598a:	2300      	movs	r3, #0
 800598c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	2b01      	cmp	r3, #1
 8005992:	d110      	bne.n	80059b6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800599c:	9202      	str	r2, [sp, #8]
 800599e:	9301      	str	r3, [sp, #4]
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	9300      	str	r3, [sp, #0]
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	6a3a      	ldr	r2, [r7, #32]
 80059a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80059aa:	68f8      	ldr	r0, [r7, #12]
 80059ac:	f000 f8eb 	bl	8005b86 <xTaskCreateStatic>
 80059b0:	4603      	mov	r3, r0
 80059b2:	613b      	str	r3, [r7, #16]
 80059b4:	e013      	b.n	80059de <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d110      	bne.n	80059de <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80059bc:	6a3b      	ldr	r3, [r7, #32]
 80059be:	b29a      	uxth	r2, r3
 80059c0:	f107 0310 	add.w	r3, r7, #16
 80059c4:	9301      	str	r3, [sp, #4]
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	9300      	str	r3, [sp, #0]
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80059ce:	68f8      	ldr	r0, [r7, #12]
 80059d0:	f000 f939 	bl	8005c46 <xTaskCreate>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d001      	beq.n	80059de <osThreadNew+0x11a>
            hTask = NULL;
 80059da:	2300      	movs	r3, #0
 80059dc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80059de:	693b      	ldr	r3, [r7, #16]
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3728      	adds	r7, #40	@ 0x28
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059f0:	f3ef 8305 	mrs	r3, IPSR
 80059f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80059f6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d003      	beq.n	8005a04 <osDelay+0x1c>
    stat = osErrorISR;
 80059fc:	f06f 0305 	mvn.w	r3, #5
 8005a00:	60fb      	str	r3, [r7, #12]
 8005a02:	e007      	b.n	8005a14 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005a04:	2300      	movs	r3, #0
 8005a06:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d002      	beq.n	8005a14 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 fa5e 	bl	8005ed0 <vTaskDelay>
    }
  }

  return (stat);
 8005a14:	68fb      	ldr	r3, [r7, #12]
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005a1e:	b480      	push	{r7}
 8005a20:	b083      	sub	sp, #12
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f103 0208 	add.w	r2, r3, #8
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f04f 32ff 	mov.w	r2, #4294967295
 8005a36:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f103 0208 	add.w	r2, r3, #8
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f103 0208 	add.w	r2, r3, #8
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005a52:	bf00      	nop
 8005a54:	370c      	adds	r7, #12
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr

08005a5e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b083      	sub	sp, #12
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b085      	sub	sp, #20
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	689a      	ldr	r2, [r3, #8]
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	683a      	ldr	r2, [r7, #0]
 8005a9c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	683a      	ldr	r2, [r7, #0]
 8005aa2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	1c5a      	adds	r2, r3, #1
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	601a      	str	r2, [r3, #0]
}
 8005ab4:	bf00      	nop
 8005ab6:	3714      	adds	r7, #20
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b085      	sub	sp, #20
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad6:	d103      	bne.n	8005ae0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	60fb      	str	r3, [r7, #12]
 8005ade:	e00c      	b.n	8005afa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	3308      	adds	r3, #8
 8005ae4:	60fb      	str	r3, [r7, #12]
 8005ae6:	e002      	b.n	8005aee <vListInsert+0x2e>
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	60fb      	str	r3, [r7, #12]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68ba      	ldr	r2, [r7, #8]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d2f6      	bcs.n	8005ae8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	685a      	ldr	r2, [r3, #4]
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	683a      	ldr	r2, [r7, #0]
 8005b08:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	683a      	ldr	r2, [r7, #0]
 8005b14:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	1c5a      	adds	r2, r3, #1
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	601a      	str	r2, [r3, #0]
}
 8005b26:	bf00      	nop
 8005b28:	3714      	adds	r7, #20
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr

08005b32 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005b32:	b480      	push	{r7}
 8005b34:	b085      	sub	sp, #20
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	6892      	ldr	r2, [r2, #8]
 8005b48:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	6852      	ldr	r2, [r2, #4]
 8005b52:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d103      	bne.n	8005b66 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	689a      	ldr	r2, [r3, #8]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	1e5a      	subs	r2, r3, #1
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3714      	adds	r7, #20
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr

08005b86 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005b86:	b580      	push	{r7, lr}
 8005b88:	b08e      	sub	sp, #56	@ 0x38
 8005b8a:	af04      	add	r7, sp, #16
 8005b8c:	60f8      	str	r0, [r7, #12]
 8005b8e:	60b9      	str	r1, [r7, #8]
 8005b90:	607a      	str	r2, [r7, #4]
 8005b92:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005b94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d10b      	bne.n	8005bb2 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b9e:	f383 8811 	msr	BASEPRI, r3
 8005ba2:	f3bf 8f6f 	isb	sy
 8005ba6:	f3bf 8f4f 	dsb	sy
 8005baa:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005bac:	bf00      	nop
 8005bae:	bf00      	nop
 8005bb0:	e7fd      	b.n	8005bae <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d10b      	bne.n	8005bd0 <xTaskCreateStatic+0x4a>
	__asm volatile
 8005bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bbc:	f383 8811 	msr	BASEPRI, r3
 8005bc0:	f3bf 8f6f 	isb	sy
 8005bc4:	f3bf 8f4f 	dsb	sy
 8005bc8:	61fb      	str	r3, [r7, #28]
}
 8005bca:	bf00      	nop
 8005bcc:	bf00      	nop
 8005bce:	e7fd      	b.n	8005bcc <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005bd0:	235c      	movs	r3, #92	@ 0x5c
 8005bd2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	2b5c      	cmp	r3, #92	@ 0x5c
 8005bd8:	d00b      	beq.n	8005bf2 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bde:	f383 8811 	msr	BASEPRI, r3
 8005be2:	f3bf 8f6f 	isb	sy
 8005be6:	f3bf 8f4f 	dsb	sy
 8005bea:	61bb      	str	r3, [r7, #24]
}
 8005bec:	bf00      	nop
 8005bee:	bf00      	nop
 8005bf0:	e7fd      	b.n	8005bee <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005bf2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d01e      	beq.n	8005c38 <xTaskCreateStatic+0xb2>
 8005bfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d01b      	beq.n	8005c38 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c02:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005c08:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c0c:	2202      	movs	r2, #2
 8005c0e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005c12:	2300      	movs	r3, #0
 8005c14:	9303      	str	r3, [sp, #12]
 8005c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c18:	9302      	str	r3, [sp, #8]
 8005c1a:	f107 0314 	add.w	r3, r7, #20
 8005c1e:	9301      	str	r3, [sp, #4]
 8005c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c22:	9300      	str	r3, [sp, #0]
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	68b9      	ldr	r1, [r7, #8]
 8005c2a:	68f8      	ldr	r0, [r7, #12]
 8005c2c:	f000 f850 	bl	8005cd0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c30:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005c32:	f000 f8dd 	bl	8005df0 <prvAddNewTaskToReadyList>
 8005c36:	e001      	b.n	8005c3c <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005c3c:	697b      	ldr	r3, [r7, #20]
	}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3728      	adds	r7, #40	@ 0x28
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}

08005c46 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005c46:	b580      	push	{r7, lr}
 8005c48:	b08c      	sub	sp, #48	@ 0x30
 8005c4a:	af04      	add	r7, sp, #16
 8005c4c:	60f8      	str	r0, [r7, #12]
 8005c4e:	60b9      	str	r1, [r7, #8]
 8005c50:	603b      	str	r3, [r7, #0]
 8005c52:	4613      	mov	r3, r2
 8005c54:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005c56:	88fb      	ldrh	r3, [r7, #6]
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f000 fd2e 	bl	80066bc <pvPortMalloc>
 8005c60:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d00e      	beq.n	8005c86 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005c68:	205c      	movs	r0, #92	@ 0x5c
 8005c6a:	f000 fd27 	bl	80066bc <pvPortMalloc>
 8005c6e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d003      	beq.n	8005c7e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	697a      	ldr	r2, [r7, #20]
 8005c7a:	631a      	str	r2, [r3, #48]	@ 0x30
 8005c7c:	e005      	b.n	8005c8a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005c7e:	6978      	ldr	r0, [r7, #20]
 8005c80:	f000 fdea 	bl	8006858 <vPortFree>
 8005c84:	e001      	b.n	8005c8a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005c86:	2300      	movs	r3, #0
 8005c88:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d017      	beq.n	8005cc0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005c98:	88fa      	ldrh	r2, [r7, #6]
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	9303      	str	r3, [sp, #12]
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	9302      	str	r3, [sp, #8]
 8005ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ca4:	9301      	str	r3, [sp, #4]
 8005ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ca8:	9300      	str	r3, [sp, #0]
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	68b9      	ldr	r1, [r7, #8]
 8005cae:	68f8      	ldr	r0, [r7, #12]
 8005cb0:	f000 f80e 	bl	8005cd0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005cb4:	69f8      	ldr	r0, [r7, #28]
 8005cb6:	f000 f89b 	bl	8005df0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	61bb      	str	r3, [r7, #24]
 8005cbe:	e002      	b.n	8005cc6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8005cc4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005cc6:	69bb      	ldr	r3, [r7, #24]
	}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3720      	adds	r7, #32
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b088      	sub	sp, #32
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	607a      	str	r2, [r7, #4]
 8005cdc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ce0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	21a5      	movs	r1, #165	@ 0xa5
 8005cea:	f001 ff43 	bl	8007b74 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cf0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005cf2:	6879      	ldr	r1, [r7, #4]
 8005cf4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8005cf8:	440b      	add	r3, r1
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	4413      	add	r3, r2
 8005cfe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005d00:	69bb      	ldr	r3, [r7, #24]
 8005d02:	f023 0307 	bic.w	r3, r3, #7
 8005d06:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	f003 0307 	and.w	r3, r3, #7
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00b      	beq.n	8005d2a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d16:	f383 8811 	msr	BASEPRI, r3
 8005d1a:	f3bf 8f6f 	isb	sy
 8005d1e:	f3bf 8f4f 	dsb	sy
 8005d22:	617b      	str	r3, [r7, #20]
}
 8005d24:	bf00      	nop
 8005d26:	bf00      	nop
 8005d28:	e7fd      	b.n	8005d26 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d01f      	beq.n	8005d70 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d30:	2300      	movs	r3, #0
 8005d32:	61fb      	str	r3, [r7, #28]
 8005d34:	e012      	b.n	8005d5c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005d36:	68ba      	ldr	r2, [r7, #8]
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	7819      	ldrb	r1, [r3, #0]
 8005d3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	4413      	add	r3, r2
 8005d44:	3334      	adds	r3, #52	@ 0x34
 8005d46:	460a      	mov	r2, r1
 8005d48:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005d4a:	68ba      	ldr	r2, [r7, #8]
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	4413      	add	r3, r2
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d006      	beq.n	8005d64 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	3301      	adds	r3, #1
 8005d5a:	61fb      	str	r3, [r7, #28]
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	2b0f      	cmp	r3, #15
 8005d60:	d9e9      	bls.n	8005d36 <prvInitialiseNewTask+0x66>
 8005d62:	e000      	b.n	8005d66 <prvInitialiseNewTask+0x96>
			{
				break;
 8005d64:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005d6e:	e003      	b.n	8005d78 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d7a:	2b37      	cmp	r3, #55	@ 0x37
 8005d7c:	d901      	bls.n	8005d82 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005d7e:	2337      	movs	r3, #55	@ 0x37
 8005d80:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d86:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d8c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d90:	2200      	movs	r2, #0
 8005d92:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d96:	3304      	adds	r3, #4
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f7ff fe60 	bl	8005a5e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005da0:	3318      	adds	r3, #24
 8005da2:	4618      	mov	r0, r3
 8005da4:	f7ff fe5b 	bl	8005a5e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005daa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005dac:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005db0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005db6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005dbc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005dcc:	683a      	ldr	r2, [r7, #0]
 8005dce:	68f9      	ldr	r1, [r7, #12]
 8005dd0:	69b8      	ldr	r0, [r7, #24]
 8005dd2:	f000 fb49 	bl	8006468 <pxPortInitialiseStack>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dda:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d002      	beq.n	8005de8 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005de4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005de6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005de8:	bf00      	nop
 8005dea:	3720      	adds	r7, #32
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005df8:	f000 fbae 	bl	8006558 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005dfc:	4b2d      	ldr	r3, [pc, #180]	@ (8005eb4 <prvAddNewTaskToReadyList+0xc4>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	3301      	adds	r3, #1
 8005e02:	4a2c      	ldr	r2, [pc, #176]	@ (8005eb4 <prvAddNewTaskToReadyList+0xc4>)
 8005e04:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005e06:	4b2c      	ldr	r3, [pc, #176]	@ (8005eb8 <prvAddNewTaskToReadyList+0xc8>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d109      	bne.n	8005e22 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005e0e:	4a2a      	ldr	r2, [pc, #168]	@ (8005eb8 <prvAddNewTaskToReadyList+0xc8>)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005e14:	4b27      	ldr	r3, [pc, #156]	@ (8005eb4 <prvAddNewTaskToReadyList+0xc4>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d110      	bne.n	8005e3e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005e1c:	f000 fa52 	bl	80062c4 <prvInitialiseTaskLists>
 8005e20:	e00d      	b.n	8005e3e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005e22:	4b26      	ldr	r3, [pc, #152]	@ (8005ebc <prvAddNewTaskToReadyList+0xcc>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d109      	bne.n	8005e3e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005e2a:	4b23      	ldr	r3, [pc, #140]	@ (8005eb8 <prvAddNewTaskToReadyList+0xc8>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d802      	bhi.n	8005e3e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005e38:	4a1f      	ldr	r2, [pc, #124]	@ (8005eb8 <prvAddNewTaskToReadyList+0xc8>)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005e3e:	4b20      	ldr	r3, [pc, #128]	@ (8005ec0 <prvAddNewTaskToReadyList+0xd0>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	3301      	adds	r3, #1
 8005e44:	4a1e      	ldr	r2, [pc, #120]	@ (8005ec0 <prvAddNewTaskToReadyList+0xd0>)
 8005e46:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005e48:	4b1d      	ldr	r3, [pc, #116]	@ (8005ec0 <prvAddNewTaskToReadyList+0xd0>)
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e54:	4b1b      	ldr	r3, [pc, #108]	@ (8005ec4 <prvAddNewTaskToReadyList+0xd4>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d903      	bls.n	8005e64 <prvAddNewTaskToReadyList+0x74>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e60:	4a18      	ldr	r2, [pc, #96]	@ (8005ec4 <prvAddNewTaskToReadyList+0xd4>)
 8005e62:	6013      	str	r3, [r2, #0]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e68:	4613      	mov	r3, r2
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	4413      	add	r3, r2
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	4a15      	ldr	r2, [pc, #84]	@ (8005ec8 <prvAddNewTaskToReadyList+0xd8>)
 8005e72:	441a      	add	r2, r3
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	3304      	adds	r3, #4
 8005e78:	4619      	mov	r1, r3
 8005e7a:	4610      	mov	r0, r2
 8005e7c:	f7ff fdfc 	bl	8005a78 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005e80:	f000 fb9c 	bl	80065bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005e84:	4b0d      	ldr	r3, [pc, #52]	@ (8005ebc <prvAddNewTaskToReadyList+0xcc>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d00e      	beq.n	8005eaa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8005eb8 <prvAddNewTaskToReadyList+0xc8>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d207      	bcs.n	8005eaa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8005ecc <prvAddNewTaskToReadyList+0xdc>)
 8005e9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ea0:	601a      	str	r2, [r3, #0]
 8005ea2:	f3bf 8f4f 	dsb	sy
 8005ea6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005eaa:	bf00      	nop
 8005eac:	3708      	adds	r7, #8
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	2400076c 	.word	0x2400076c
 8005eb8:	2400029c 	.word	0x2400029c
 8005ebc:	24000778 	.word	0x24000778
 8005ec0:	24000788 	.word	0x24000788
 8005ec4:	24000774 	.word	0x24000774
 8005ec8:	240002a0 	.word	0x240002a0
 8005ecc:	e000ed04 	.word	0xe000ed04

08005ed0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d018      	beq.n	8005f14 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005ee2:	4b14      	ldr	r3, [pc, #80]	@ (8005f34 <vTaskDelay+0x64>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00b      	beq.n	8005f02 <vTaskDelay+0x32>
	__asm volatile
 8005eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eee:	f383 8811 	msr	BASEPRI, r3
 8005ef2:	f3bf 8f6f 	isb	sy
 8005ef6:	f3bf 8f4f 	dsb	sy
 8005efa:	60bb      	str	r3, [r7, #8]
}
 8005efc:	bf00      	nop
 8005efe:	bf00      	nop
 8005f00:	e7fd      	b.n	8005efe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005f02:	f000 f81b 	bl	8005f3c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005f06:	2100      	movs	r1, #0
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 fa59 	bl	80063c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005f0e:	f000 f823 	bl	8005f58 <xTaskResumeAll>
 8005f12:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d107      	bne.n	8005f2a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005f1a:	4b07      	ldr	r3, [pc, #28]	@ (8005f38 <vTaskDelay+0x68>)
 8005f1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f20:	601a      	str	r2, [r3, #0]
 8005f22:	f3bf 8f4f 	dsb	sy
 8005f26:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005f2a:	bf00      	nop
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	24000790 	.word	0x24000790
 8005f38:	e000ed04 	.word	0xe000ed04

08005f3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005f40:	4b04      	ldr	r3, [pc, #16]	@ (8005f54 <vTaskSuspendAll+0x18>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	3301      	adds	r3, #1
 8005f46:	4a03      	ldr	r2, [pc, #12]	@ (8005f54 <vTaskSuspendAll+0x18>)
 8005f48:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005f4a:	bf00      	nop
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr
 8005f54:	24000790 	.word	0x24000790

08005f58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005f62:	2300      	movs	r3, #0
 8005f64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005f66:	4b42      	ldr	r3, [pc, #264]	@ (8006070 <xTaskResumeAll+0x118>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d10b      	bne.n	8005f86 <xTaskResumeAll+0x2e>
	__asm volatile
 8005f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f72:	f383 8811 	msr	BASEPRI, r3
 8005f76:	f3bf 8f6f 	isb	sy
 8005f7a:	f3bf 8f4f 	dsb	sy
 8005f7e:	603b      	str	r3, [r7, #0]
}
 8005f80:	bf00      	nop
 8005f82:	bf00      	nop
 8005f84:	e7fd      	b.n	8005f82 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005f86:	f000 fae7 	bl	8006558 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005f8a:	4b39      	ldr	r3, [pc, #228]	@ (8006070 <xTaskResumeAll+0x118>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	4a37      	ldr	r2, [pc, #220]	@ (8006070 <xTaskResumeAll+0x118>)
 8005f92:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f94:	4b36      	ldr	r3, [pc, #216]	@ (8006070 <xTaskResumeAll+0x118>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d162      	bne.n	8006062 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005f9c:	4b35      	ldr	r3, [pc, #212]	@ (8006074 <xTaskResumeAll+0x11c>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d05e      	beq.n	8006062 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005fa4:	e02f      	b.n	8006006 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fa6:	4b34      	ldr	r3, [pc, #208]	@ (8006078 <xTaskResumeAll+0x120>)
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	3318      	adds	r3, #24
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7ff fdbd 	bl	8005b32 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	3304      	adds	r3, #4
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f7ff fdb8 	bl	8005b32 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fc6:	4b2d      	ldr	r3, [pc, #180]	@ (800607c <xTaskResumeAll+0x124>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d903      	bls.n	8005fd6 <xTaskResumeAll+0x7e>
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fd2:	4a2a      	ldr	r2, [pc, #168]	@ (800607c <xTaskResumeAll+0x124>)
 8005fd4:	6013      	str	r3, [r2, #0]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fda:	4613      	mov	r3, r2
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	4413      	add	r3, r2
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	4a27      	ldr	r2, [pc, #156]	@ (8006080 <xTaskResumeAll+0x128>)
 8005fe4:	441a      	add	r2, r3
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	3304      	adds	r3, #4
 8005fea:	4619      	mov	r1, r3
 8005fec:	4610      	mov	r0, r2
 8005fee:	f7ff fd43 	bl	8005a78 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ff6:	4b23      	ldr	r3, [pc, #140]	@ (8006084 <xTaskResumeAll+0x12c>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d302      	bcc.n	8006006 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006000:	4b21      	ldr	r3, [pc, #132]	@ (8006088 <xTaskResumeAll+0x130>)
 8006002:	2201      	movs	r2, #1
 8006004:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006006:	4b1c      	ldr	r3, [pc, #112]	@ (8006078 <xTaskResumeAll+0x120>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1cb      	bne.n	8005fa6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d001      	beq.n	8006018 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006014:	f000 f996 	bl	8006344 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006018:	4b1c      	ldr	r3, [pc, #112]	@ (800608c <xTaskResumeAll+0x134>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d010      	beq.n	8006046 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006024:	f000 f836 	bl	8006094 <xTaskIncrementTick>
 8006028:	4603      	mov	r3, r0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d002      	beq.n	8006034 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800602e:	4b16      	ldr	r3, [pc, #88]	@ (8006088 <xTaskResumeAll+0x130>)
 8006030:	2201      	movs	r2, #1
 8006032:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	3b01      	subs	r3, #1
 8006038:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d1f1      	bne.n	8006024 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006040:	4b12      	ldr	r3, [pc, #72]	@ (800608c <xTaskResumeAll+0x134>)
 8006042:	2200      	movs	r2, #0
 8006044:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006046:	4b10      	ldr	r3, [pc, #64]	@ (8006088 <xTaskResumeAll+0x130>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d009      	beq.n	8006062 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800604e:	2301      	movs	r3, #1
 8006050:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006052:	4b0f      	ldr	r3, [pc, #60]	@ (8006090 <xTaskResumeAll+0x138>)
 8006054:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006058:	601a      	str	r2, [r3, #0]
 800605a:	f3bf 8f4f 	dsb	sy
 800605e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006062:	f000 faab 	bl	80065bc <vPortExitCritical>

	return xAlreadyYielded;
 8006066:	68bb      	ldr	r3, [r7, #8]
}
 8006068:	4618      	mov	r0, r3
 800606a:	3710      	adds	r7, #16
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}
 8006070:	24000790 	.word	0x24000790
 8006074:	2400076c 	.word	0x2400076c
 8006078:	24000730 	.word	0x24000730
 800607c:	24000774 	.word	0x24000774
 8006080:	240002a0 	.word	0x240002a0
 8006084:	2400029c 	.word	0x2400029c
 8006088:	24000780 	.word	0x24000780
 800608c:	2400077c 	.word	0x2400077c
 8006090:	e000ed04 	.word	0xe000ed04

08006094 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b086      	sub	sp, #24
 8006098:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800609a:	2300      	movs	r3, #0
 800609c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800609e:	4b4f      	ldr	r3, [pc, #316]	@ (80061dc <xTaskIncrementTick+0x148>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	f040 8090 	bne.w	80061c8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80060a8:	4b4d      	ldr	r3, [pc, #308]	@ (80061e0 <xTaskIncrementTick+0x14c>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	3301      	adds	r3, #1
 80060ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80060b0:	4a4b      	ldr	r2, [pc, #300]	@ (80061e0 <xTaskIncrementTick+0x14c>)
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d121      	bne.n	8006100 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80060bc:	4b49      	ldr	r3, [pc, #292]	@ (80061e4 <xTaskIncrementTick+0x150>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d00b      	beq.n	80060de <xTaskIncrementTick+0x4a>
	__asm volatile
 80060c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ca:	f383 8811 	msr	BASEPRI, r3
 80060ce:	f3bf 8f6f 	isb	sy
 80060d2:	f3bf 8f4f 	dsb	sy
 80060d6:	603b      	str	r3, [r7, #0]
}
 80060d8:	bf00      	nop
 80060da:	bf00      	nop
 80060dc:	e7fd      	b.n	80060da <xTaskIncrementTick+0x46>
 80060de:	4b41      	ldr	r3, [pc, #260]	@ (80061e4 <xTaskIncrementTick+0x150>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	60fb      	str	r3, [r7, #12]
 80060e4:	4b40      	ldr	r3, [pc, #256]	@ (80061e8 <xTaskIncrementTick+0x154>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a3e      	ldr	r2, [pc, #248]	@ (80061e4 <xTaskIncrementTick+0x150>)
 80060ea:	6013      	str	r3, [r2, #0]
 80060ec:	4a3e      	ldr	r2, [pc, #248]	@ (80061e8 <xTaskIncrementTick+0x154>)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6013      	str	r3, [r2, #0]
 80060f2:	4b3e      	ldr	r3, [pc, #248]	@ (80061ec <xTaskIncrementTick+0x158>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	3301      	adds	r3, #1
 80060f8:	4a3c      	ldr	r2, [pc, #240]	@ (80061ec <xTaskIncrementTick+0x158>)
 80060fa:	6013      	str	r3, [r2, #0]
 80060fc:	f000 f922 	bl	8006344 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006100:	4b3b      	ldr	r3, [pc, #236]	@ (80061f0 <xTaskIncrementTick+0x15c>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	693a      	ldr	r2, [r7, #16]
 8006106:	429a      	cmp	r2, r3
 8006108:	d349      	bcc.n	800619e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800610a:	4b36      	ldr	r3, [pc, #216]	@ (80061e4 <xTaskIncrementTick+0x150>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d104      	bne.n	800611e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006114:	4b36      	ldr	r3, [pc, #216]	@ (80061f0 <xTaskIncrementTick+0x15c>)
 8006116:	f04f 32ff 	mov.w	r2, #4294967295
 800611a:	601a      	str	r2, [r3, #0]
					break;
 800611c:	e03f      	b.n	800619e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800611e:	4b31      	ldr	r3, [pc, #196]	@ (80061e4 <xTaskIncrementTick+0x150>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800612e:	693a      	ldr	r2, [r7, #16]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	429a      	cmp	r2, r3
 8006134:	d203      	bcs.n	800613e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006136:	4a2e      	ldr	r2, [pc, #184]	@ (80061f0 <xTaskIncrementTick+0x15c>)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800613c:	e02f      	b.n	800619e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	3304      	adds	r3, #4
 8006142:	4618      	mov	r0, r3
 8006144:	f7ff fcf5 	bl	8005b32 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800614c:	2b00      	cmp	r3, #0
 800614e:	d004      	beq.n	800615a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	3318      	adds	r3, #24
 8006154:	4618      	mov	r0, r3
 8006156:	f7ff fcec 	bl	8005b32 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800615e:	4b25      	ldr	r3, [pc, #148]	@ (80061f4 <xTaskIncrementTick+0x160>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	429a      	cmp	r2, r3
 8006164:	d903      	bls.n	800616e <xTaskIncrementTick+0xda>
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800616a:	4a22      	ldr	r2, [pc, #136]	@ (80061f4 <xTaskIncrementTick+0x160>)
 800616c:	6013      	str	r3, [r2, #0]
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006172:	4613      	mov	r3, r2
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	4413      	add	r3, r2
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	4a1f      	ldr	r2, [pc, #124]	@ (80061f8 <xTaskIncrementTick+0x164>)
 800617c:	441a      	add	r2, r3
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	3304      	adds	r3, #4
 8006182:	4619      	mov	r1, r3
 8006184:	4610      	mov	r0, r2
 8006186:	f7ff fc77 	bl	8005a78 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800618e:	4b1b      	ldr	r3, [pc, #108]	@ (80061fc <xTaskIncrementTick+0x168>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006194:	429a      	cmp	r2, r3
 8006196:	d3b8      	bcc.n	800610a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006198:	2301      	movs	r3, #1
 800619a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800619c:	e7b5      	b.n	800610a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800619e:	4b17      	ldr	r3, [pc, #92]	@ (80061fc <xTaskIncrementTick+0x168>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061a4:	4914      	ldr	r1, [pc, #80]	@ (80061f8 <xTaskIncrementTick+0x164>)
 80061a6:	4613      	mov	r3, r2
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	4413      	add	r3, r2
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	440b      	add	r3, r1
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d901      	bls.n	80061ba <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80061b6:	2301      	movs	r3, #1
 80061b8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80061ba:	4b11      	ldr	r3, [pc, #68]	@ (8006200 <xTaskIncrementTick+0x16c>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d007      	beq.n	80061d2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80061c2:	2301      	movs	r3, #1
 80061c4:	617b      	str	r3, [r7, #20]
 80061c6:	e004      	b.n	80061d2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80061c8:	4b0e      	ldr	r3, [pc, #56]	@ (8006204 <xTaskIncrementTick+0x170>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	3301      	adds	r3, #1
 80061ce:	4a0d      	ldr	r2, [pc, #52]	@ (8006204 <xTaskIncrementTick+0x170>)
 80061d0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80061d2:	697b      	ldr	r3, [r7, #20]
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3718      	adds	r7, #24
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	24000790 	.word	0x24000790
 80061e0:	24000770 	.word	0x24000770
 80061e4:	24000728 	.word	0x24000728
 80061e8:	2400072c 	.word	0x2400072c
 80061ec:	24000784 	.word	0x24000784
 80061f0:	2400078c 	.word	0x2400078c
 80061f4:	24000774 	.word	0x24000774
 80061f8:	240002a0 	.word	0x240002a0
 80061fc:	2400029c 	.word	0x2400029c
 8006200:	24000780 	.word	0x24000780
 8006204:	2400077c 	.word	0x2400077c

08006208 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006208:	b480      	push	{r7}
 800620a:	b085      	sub	sp, #20
 800620c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800620e:	4b28      	ldr	r3, [pc, #160]	@ (80062b0 <vTaskSwitchContext+0xa8>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d003      	beq.n	800621e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006216:	4b27      	ldr	r3, [pc, #156]	@ (80062b4 <vTaskSwitchContext+0xac>)
 8006218:	2201      	movs	r2, #1
 800621a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800621c:	e042      	b.n	80062a4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800621e:	4b25      	ldr	r3, [pc, #148]	@ (80062b4 <vTaskSwitchContext+0xac>)
 8006220:	2200      	movs	r2, #0
 8006222:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006224:	4b24      	ldr	r3, [pc, #144]	@ (80062b8 <vTaskSwitchContext+0xb0>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	60fb      	str	r3, [r7, #12]
 800622a:	e011      	b.n	8006250 <vTaskSwitchContext+0x48>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d10b      	bne.n	800624a <vTaskSwitchContext+0x42>
	__asm volatile
 8006232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006236:	f383 8811 	msr	BASEPRI, r3
 800623a:	f3bf 8f6f 	isb	sy
 800623e:	f3bf 8f4f 	dsb	sy
 8006242:	607b      	str	r3, [r7, #4]
}
 8006244:	bf00      	nop
 8006246:	bf00      	nop
 8006248:	e7fd      	b.n	8006246 <vTaskSwitchContext+0x3e>
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	3b01      	subs	r3, #1
 800624e:	60fb      	str	r3, [r7, #12]
 8006250:	491a      	ldr	r1, [pc, #104]	@ (80062bc <vTaskSwitchContext+0xb4>)
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	4613      	mov	r3, r2
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	4413      	add	r3, r2
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	440b      	add	r3, r1
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d0e3      	beq.n	800622c <vTaskSwitchContext+0x24>
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	4613      	mov	r3, r2
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	4413      	add	r3, r2
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	4a13      	ldr	r2, [pc, #76]	@ (80062bc <vTaskSwitchContext+0xb4>)
 8006270:	4413      	add	r3, r2
 8006272:	60bb      	str	r3, [r7, #8]
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	685a      	ldr	r2, [r3, #4]
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	605a      	str	r2, [r3, #4]
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	685a      	ldr	r2, [r3, #4]
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	3308      	adds	r3, #8
 8006286:	429a      	cmp	r2, r3
 8006288:	d104      	bne.n	8006294 <vTaskSwitchContext+0x8c>
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	685a      	ldr	r2, [r3, #4]
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	605a      	str	r2, [r3, #4]
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	4a09      	ldr	r2, [pc, #36]	@ (80062c0 <vTaskSwitchContext+0xb8>)
 800629c:	6013      	str	r3, [r2, #0]
 800629e:	4a06      	ldr	r2, [pc, #24]	@ (80062b8 <vTaskSwitchContext+0xb0>)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6013      	str	r3, [r2, #0]
}
 80062a4:	bf00      	nop
 80062a6:	3714      	adds	r7, #20
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr
 80062b0:	24000790 	.word	0x24000790
 80062b4:	24000780 	.word	0x24000780
 80062b8:	24000774 	.word	0x24000774
 80062bc:	240002a0 	.word	0x240002a0
 80062c0:	2400029c 	.word	0x2400029c

080062c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b082      	sub	sp, #8
 80062c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062ca:	2300      	movs	r3, #0
 80062cc:	607b      	str	r3, [r7, #4]
 80062ce:	e00c      	b.n	80062ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	4613      	mov	r3, r2
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	4413      	add	r3, r2
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	4a12      	ldr	r2, [pc, #72]	@ (8006324 <prvInitialiseTaskLists+0x60>)
 80062dc:	4413      	add	r3, r2
 80062de:	4618      	mov	r0, r3
 80062e0:	f7ff fb9d 	bl	8005a1e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	3301      	adds	r3, #1
 80062e8:	607b      	str	r3, [r7, #4]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2b37      	cmp	r3, #55	@ 0x37
 80062ee:	d9ef      	bls.n	80062d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80062f0:	480d      	ldr	r0, [pc, #52]	@ (8006328 <prvInitialiseTaskLists+0x64>)
 80062f2:	f7ff fb94 	bl	8005a1e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80062f6:	480d      	ldr	r0, [pc, #52]	@ (800632c <prvInitialiseTaskLists+0x68>)
 80062f8:	f7ff fb91 	bl	8005a1e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80062fc:	480c      	ldr	r0, [pc, #48]	@ (8006330 <prvInitialiseTaskLists+0x6c>)
 80062fe:	f7ff fb8e 	bl	8005a1e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006302:	480c      	ldr	r0, [pc, #48]	@ (8006334 <prvInitialiseTaskLists+0x70>)
 8006304:	f7ff fb8b 	bl	8005a1e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006308:	480b      	ldr	r0, [pc, #44]	@ (8006338 <prvInitialiseTaskLists+0x74>)
 800630a:	f7ff fb88 	bl	8005a1e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800630e:	4b0b      	ldr	r3, [pc, #44]	@ (800633c <prvInitialiseTaskLists+0x78>)
 8006310:	4a05      	ldr	r2, [pc, #20]	@ (8006328 <prvInitialiseTaskLists+0x64>)
 8006312:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006314:	4b0a      	ldr	r3, [pc, #40]	@ (8006340 <prvInitialiseTaskLists+0x7c>)
 8006316:	4a05      	ldr	r2, [pc, #20]	@ (800632c <prvInitialiseTaskLists+0x68>)
 8006318:	601a      	str	r2, [r3, #0]
}
 800631a:	bf00      	nop
 800631c:	3708      	adds	r7, #8
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	240002a0 	.word	0x240002a0
 8006328:	24000700 	.word	0x24000700
 800632c:	24000714 	.word	0x24000714
 8006330:	24000730 	.word	0x24000730
 8006334:	24000744 	.word	0x24000744
 8006338:	24000758 	.word	0x24000758
 800633c:	24000728 	.word	0x24000728
 8006340:	2400072c 	.word	0x2400072c

08006344 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800634a:	4b0c      	ldr	r3, [pc, #48]	@ (800637c <prvResetNextTaskUnblockTime+0x38>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d104      	bne.n	800635e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006354:	4b0a      	ldr	r3, [pc, #40]	@ (8006380 <prvResetNextTaskUnblockTime+0x3c>)
 8006356:	f04f 32ff 	mov.w	r2, #4294967295
 800635a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800635c:	e008      	b.n	8006370 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800635e:	4b07      	ldr	r3, [pc, #28]	@ (800637c <prvResetNextTaskUnblockTime+0x38>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	4a04      	ldr	r2, [pc, #16]	@ (8006380 <prvResetNextTaskUnblockTime+0x3c>)
 800636e:	6013      	str	r3, [r2, #0]
}
 8006370:	bf00      	nop
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr
 800637c:	24000728 	.word	0x24000728
 8006380:	2400078c 	.word	0x2400078c

08006384 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800638a:	4b0b      	ldr	r3, [pc, #44]	@ (80063b8 <xTaskGetSchedulerState+0x34>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d102      	bne.n	8006398 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006392:	2301      	movs	r3, #1
 8006394:	607b      	str	r3, [r7, #4]
 8006396:	e008      	b.n	80063aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006398:	4b08      	ldr	r3, [pc, #32]	@ (80063bc <xTaskGetSchedulerState+0x38>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d102      	bne.n	80063a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80063a0:	2302      	movs	r3, #2
 80063a2:	607b      	str	r3, [r7, #4]
 80063a4:	e001      	b.n	80063aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80063a6:	2300      	movs	r3, #0
 80063a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80063aa:	687b      	ldr	r3, [r7, #4]
	}
 80063ac:	4618      	mov	r0, r3
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr
 80063b8:	24000778 	.word	0x24000778
 80063bc:	24000790 	.word	0x24000790

080063c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80063ca:	4b21      	ldr	r3, [pc, #132]	@ (8006450 <prvAddCurrentTaskToDelayedList+0x90>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063d0:	4b20      	ldr	r3, [pc, #128]	@ (8006454 <prvAddCurrentTaskToDelayedList+0x94>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	3304      	adds	r3, #4
 80063d6:	4618      	mov	r0, r3
 80063d8:	f7ff fbab 	bl	8005b32 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063e2:	d10a      	bne.n	80063fa <prvAddCurrentTaskToDelayedList+0x3a>
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d007      	beq.n	80063fa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063ea:	4b1a      	ldr	r3, [pc, #104]	@ (8006454 <prvAddCurrentTaskToDelayedList+0x94>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	3304      	adds	r3, #4
 80063f0:	4619      	mov	r1, r3
 80063f2:	4819      	ldr	r0, [pc, #100]	@ (8006458 <prvAddCurrentTaskToDelayedList+0x98>)
 80063f4:	f7ff fb40 	bl	8005a78 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80063f8:	e026      	b.n	8006448 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4413      	add	r3, r2
 8006400:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006402:	4b14      	ldr	r3, [pc, #80]	@ (8006454 <prvAddCurrentTaskToDelayedList+0x94>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68ba      	ldr	r2, [r7, #8]
 8006408:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800640a:	68ba      	ldr	r2, [r7, #8]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	429a      	cmp	r2, r3
 8006410:	d209      	bcs.n	8006426 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006412:	4b12      	ldr	r3, [pc, #72]	@ (800645c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	4b0f      	ldr	r3, [pc, #60]	@ (8006454 <prvAddCurrentTaskToDelayedList+0x94>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	3304      	adds	r3, #4
 800641c:	4619      	mov	r1, r3
 800641e:	4610      	mov	r0, r2
 8006420:	f7ff fb4e 	bl	8005ac0 <vListInsert>
}
 8006424:	e010      	b.n	8006448 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006426:	4b0e      	ldr	r3, [pc, #56]	@ (8006460 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	4b0a      	ldr	r3, [pc, #40]	@ (8006454 <prvAddCurrentTaskToDelayedList+0x94>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	3304      	adds	r3, #4
 8006430:	4619      	mov	r1, r3
 8006432:	4610      	mov	r0, r2
 8006434:	f7ff fb44 	bl	8005ac0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006438:	4b0a      	ldr	r3, [pc, #40]	@ (8006464 <prvAddCurrentTaskToDelayedList+0xa4>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68ba      	ldr	r2, [r7, #8]
 800643e:	429a      	cmp	r2, r3
 8006440:	d202      	bcs.n	8006448 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006442:	4a08      	ldr	r2, [pc, #32]	@ (8006464 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	6013      	str	r3, [r2, #0]
}
 8006448:	bf00      	nop
 800644a:	3710      	adds	r7, #16
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}
 8006450:	24000770 	.word	0x24000770
 8006454:	2400029c 	.word	0x2400029c
 8006458:	24000758 	.word	0x24000758
 800645c:	2400072c 	.word	0x2400072c
 8006460:	24000728 	.word	0x24000728
 8006464:	2400078c 	.word	0x2400078c

08006468 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006468:	b480      	push	{r7}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	3b04      	subs	r3, #4
 8006478:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006480:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	3b04      	subs	r3, #4
 8006486:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	f023 0201 	bic.w	r2, r3, #1
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	3b04      	subs	r3, #4
 8006496:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006498:	4a0c      	ldr	r2, [pc, #48]	@ (80064cc <pxPortInitialiseStack+0x64>)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	3b14      	subs	r3, #20
 80064a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	3b04      	subs	r3, #4
 80064ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f06f 0202 	mvn.w	r2, #2
 80064b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	3b20      	subs	r3, #32
 80064bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80064be:	68fb      	ldr	r3, [r7, #12]
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3714      	adds	r7, #20
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr
 80064cc:	080064d1 	.word	0x080064d1

080064d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80064d0:	b480      	push	{r7}
 80064d2:	b085      	sub	sp, #20
 80064d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80064d6:	2300      	movs	r3, #0
 80064d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80064da:	4b13      	ldr	r3, [pc, #76]	@ (8006528 <prvTaskExitError+0x58>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064e2:	d00b      	beq.n	80064fc <prvTaskExitError+0x2c>
	__asm volatile
 80064e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064e8:	f383 8811 	msr	BASEPRI, r3
 80064ec:	f3bf 8f6f 	isb	sy
 80064f0:	f3bf 8f4f 	dsb	sy
 80064f4:	60fb      	str	r3, [r7, #12]
}
 80064f6:	bf00      	nop
 80064f8:	bf00      	nop
 80064fa:	e7fd      	b.n	80064f8 <prvTaskExitError+0x28>
	__asm volatile
 80064fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006500:	f383 8811 	msr	BASEPRI, r3
 8006504:	f3bf 8f6f 	isb	sy
 8006508:	f3bf 8f4f 	dsb	sy
 800650c:	60bb      	str	r3, [r7, #8]
}
 800650e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006510:	bf00      	nop
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d0fc      	beq.n	8006512 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006518:	bf00      	nop
 800651a:	bf00      	nop
 800651c:	3714      	adds	r7, #20
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr
 8006526:	bf00      	nop
 8006528:	24000010 	.word	0x24000010
 800652c:	00000000 	.word	0x00000000

08006530 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006530:	4b07      	ldr	r3, [pc, #28]	@ (8006550 <pxCurrentTCBConst2>)
 8006532:	6819      	ldr	r1, [r3, #0]
 8006534:	6808      	ldr	r0, [r1, #0]
 8006536:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800653a:	f380 8809 	msr	PSP, r0
 800653e:	f3bf 8f6f 	isb	sy
 8006542:	f04f 0000 	mov.w	r0, #0
 8006546:	f380 8811 	msr	BASEPRI, r0
 800654a:	4770      	bx	lr
 800654c:	f3af 8000 	nop.w

08006550 <pxCurrentTCBConst2>:
 8006550:	2400029c 	.word	0x2400029c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006554:	bf00      	nop
 8006556:	bf00      	nop

08006558 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
	__asm volatile
 800655e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006562:	f383 8811 	msr	BASEPRI, r3
 8006566:	f3bf 8f6f 	isb	sy
 800656a:	f3bf 8f4f 	dsb	sy
 800656e:	607b      	str	r3, [r7, #4]
}
 8006570:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006572:	4b10      	ldr	r3, [pc, #64]	@ (80065b4 <vPortEnterCritical+0x5c>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	3301      	adds	r3, #1
 8006578:	4a0e      	ldr	r2, [pc, #56]	@ (80065b4 <vPortEnterCritical+0x5c>)
 800657a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800657c:	4b0d      	ldr	r3, [pc, #52]	@ (80065b4 <vPortEnterCritical+0x5c>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2b01      	cmp	r3, #1
 8006582:	d110      	bne.n	80065a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006584:	4b0c      	ldr	r3, [pc, #48]	@ (80065b8 <vPortEnterCritical+0x60>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	b2db      	uxtb	r3, r3
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00b      	beq.n	80065a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800658e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006592:	f383 8811 	msr	BASEPRI, r3
 8006596:	f3bf 8f6f 	isb	sy
 800659a:	f3bf 8f4f 	dsb	sy
 800659e:	603b      	str	r3, [r7, #0]
}
 80065a0:	bf00      	nop
 80065a2:	bf00      	nop
 80065a4:	e7fd      	b.n	80065a2 <vPortEnterCritical+0x4a>
	}
}
 80065a6:	bf00      	nop
 80065a8:	370c      	adds	r7, #12
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop
 80065b4:	24000010 	.word	0x24000010
 80065b8:	e000ed04 	.word	0xe000ed04

080065bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80065c2:	4b12      	ldr	r3, [pc, #72]	@ (800660c <vPortExitCritical+0x50>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d10b      	bne.n	80065e2 <vPortExitCritical+0x26>
	__asm volatile
 80065ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ce:	f383 8811 	msr	BASEPRI, r3
 80065d2:	f3bf 8f6f 	isb	sy
 80065d6:	f3bf 8f4f 	dsb	sy
 80065da:	607b      	str	r3, [r7, #4]
}
 80065dc:	bf00      	nop
 80065de:	bf00      	nop
 80065e0:	e7fd      	b.n	80065de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80065e2:	4b0a      	ldr	r3, [pc, #40]	@ (800660c <vPortExitCritical+0x50>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	3b01      	subs	r3, #1
 80065e8:	4a08      	ldr	r2, [pc, #32]	@ (800660c <vPortExitCritical+0x50>)
 80065ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80065ec:	4b07      	ldr	r3, [pc, #28]	@ (800660c <vPortExitCritical+0x50>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d105      	bne.n	8006600 <vPortExitCritical+0x44>
 80065f4:	2300      	movs	r3, #0
 80065f6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80065fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006600:	bf00      	nop
 8006602:	370c      	adds	r7, #12
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr
 800660c:	24000010 	.word	0x24000010

08006610 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006610:	f3ef 8009 	mrs	r0, PSP
 8006614:	f3bf 8f6f 	isb	sy
 8006618:	4b15      	ldr	r3, [pc, #84]	@ (8006670 <pxCurrentTCBConst>)
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	f01e 0f10 	tst.w	lr, #16
 8006620:	bf08      	it	eq
 8006622:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006626:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800662a:	6010      	str	r0, [r2, #0]
 800662c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006630:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006634:	f380 8811 	msr	BASEPRI, r0
 8006638:	f3bf 8f4f 	dsb	sy
 800663c:	f3bf 8f6f 	isb	sy
 8006640:	f7ff fde2 	bl	8006208 <vTaskSwitchContext>
 8006644:	f04f 0000 	mov.w	r0, #0
 8006648:	f380 8811 	msr	BASEPRI, r0
 800664c:	bc09      	pop	{r0, r3}
 800664e:	6819      	ldr	r1, [r3, #0]
 8006650:	6808      	ldr	r0, [r1, #0]
 8006652:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006656:	f01e 0f10 	tst.w	lr, #16
 800665a:	bf08      	it	eq
 800665c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006660:	f380 8809 	msr	PSP, r0
 8006664:	f3bf 8f6f 	isb	sy
 8006668:	4770      	bx	lr
 800666a:	bf00      	nop
 800666c:	f3af 8000 	nop.w

08006670 <pxCurrentTCBConst>:
 8006670:	2400029c 	.word	0x2400029c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006674:	bf00      	nop
 8006676:	bf00      	nop

08006678 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af00      	add	r7, sp, #0
	__asm volatile
 800667e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006682:	f383 8811 	msr	BASEPRI, r3
 8006686:	f3bf 8f6f 	isb	sy
 800668a:	f3bf 8f4f 	dsb	sy
 800668e:	607b      	str	r3, [r7, #4]
}
 8006690:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006692:	f7ff fcff 	bl	8006094 <xTaskIncrementTick>
 8006696:	4603      	mov	r3, r0
 8006698:	2b00      	cmp	r3, #0
 800669a:	d003      	beq.n	80066a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800669c:	4b06      	ldr	r3, [pc, #24]	@ (80066b8 <xPortSysTickHandler+0x40>)
 800669e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066a2:	601a      	str	r2, [r3, #0]
 80066a4:	2300      	movs	r3, #0
 80066a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	f383 8811 	msr	BASEPRI, r3
}
 80066ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80066b0:	bf00      	nop
 80066b2:	3708      	adds	r7, #8
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}
 80066b8:	e000ed04 	.word	0xe000ed04

080066bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b08a      	sub	sp, #40	@ 0x28
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80066c4:	2300      	movs	r3, #0
 80066c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80066c8:	f7ff fc38 	bl	8005f3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80066cc:	4b5c      	ldr	r3, [pc, #368]	@ (8006840 <pvPortMalloc+0x184>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d101      	bne.n	80066d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80066d4:	f000 f924 	bl	8006920 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80066d8:	4b5a      	ldr	r3, [pc, #360]	@ (8006844 <pvPortMalloc+0x188>)
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4013      	ands	r3, r2
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	f040 8095 	bne.w	8006810 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d01e      	beq.n	800672a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80066ec:	2208      	movs	r2, #8
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4413      	add	r3, r2
 80066f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f003 0307 	and.w	r3, r3, #7
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d015      	beq.n	800672a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f023 0307 	bic.w	r3, r3, #7
 8006704:	3308      	adds	r3, #8
 8006706:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f003 0307 	and.w	r3, r3, #7
 800670e:	2b00      	cmp	r3, #0
 8006710:	d00b      	beq.n	800672a <pvPortMalloc+0x6e>
	__asm volatile
 8006712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006716:	f383 8811 	msr	BASEPRI, r3
 800671a:	f3bf 8f6f 	isb	sy
 800671e:	f3bf 8f4f 	dsb	sy
 8006722:	617b      	str	r3, [r7, #20]
}
 8006724:	bf00      	nop
 8006726:	bf00      	nop
 8006728:	e7fd      	b.n	8006726 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d06f      	beq.n	8006810 <pvPortMalloc+0x154>
 8006730:	4b45      	ldr	r3, [pc, #276]	@ (8006848 <pvPortMalloc+0x18c>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	429a      	cmp	r2, r3
 8006738:	d86a      	bhi.n	8006810 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800673a:	4b44      	ldr	r3, [pc, #272]	@ (800684c <pvPortMalloc+0x190>)
 800673c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800673e:	4b43      	ldr	r3, [pc, #268]	@ (800684c <pvPortMalloc+0x190>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006744:	e004      	b.n	8006750 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006748:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800674a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	429a      	cmp	r2, r3
 8006758:	d903      	bls.n	8006762 <pvPortMalloc+0xa6>
 800675a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1f1      	bne.n	8006746 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006762:	4b37      	ldr	r3, [pc, #220]	@ (8006840 <pvPortMalloc+0x184>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006768:	429a      	cmp	r2, r3
 800676a:	d051      	beq.n	8006810 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800676c:	6a3b      	ldr	r3, [r7, #32]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2208      	movs	r2, #8
 8006772:	4413      	add	r3, r2
 8006774:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	6a3b      	ldr	r3, [r7, #32]
 800677c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800677e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006780:	685a      	ldr	r2, [r3, #4]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	1ad2      	subs	r2, r2, r3
 8006786:	2308      	movs	r3, #8
 8006788:	005b      	lsls	r3, r3, #1
 800678a:	429a      	cmp	r2, r3
 800678c:	d920      	bls.n	80067d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800678e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4413      	add	r3, r2
 8006794:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	f003 0307 	and.w	r3, r3, #7
 800679c:	2b00      	cmp	r3, #0
 800679e:	d00b      	beq.n	80067b8 <pvPortMalloc+0xfc>
	__asm volatile
 80067a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067a4:	f383 8811 	msr	BASEPRI, r3
 80067a8:	f3bf 8f6f 	isb	sy
 80067ac:	f3bf 8f4f 	dsb	sy
 80067b0:	613b      	str	r3, [r7, #16]
}
 80067b2:	bf00      	nop
 80067b4:	bf00      	nop
 80067b6:	e7fd      	b.n	80067b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80067b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ba:	685a      	ldr	r2, [r3, #4]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	1ad2      	subs	r2, r2, r3
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80067c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80067ca:	69b8      	ldr	r0, [r7, #24]
 80067cc:	f000 f90a 	bl	80069e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80067d0:	4b1d      	ldr	r3, [pc, #116]	@ (8006848 <pvPortMalloc+0x18c>)
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	1ad3      	subs	r3, r2, r3
 80067da:	4a1b      	ldr	r2, [pc, #108]	@ (8006848 <pvPortMalloc+0x18c>)
 80067dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80067de:	4b1a      	ldr	r3, [pc, #104]	@ (8006848 <pvPortMalloc+0x18c>)
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	4b1b      	ldr	r3, [pc, #108]	@ (8006850 <pvPortMalloc+0x194>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d203      	bcs.n	80067f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80067ea:	4b17      	ldr	r3, [pc, #92]	@ (8006848 <pvPortMalloc+0x18c>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a18      	ldr	r2, [pc, #96]	@ (8006850 <pvPortMalloc+0x194>)
 80067f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80067f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f4:	685a      	ldr	r2, [r3, #4]
 80067f6:	4b13      	ldr	r3, [pc, #76]	@ (8006844 <pvPortMalloc+0x188>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	431a      	orrs	r2, r3
 80067fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006802:	2200      	movs	r2, #0
 8006804:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006806:	4b13      	ldr	r3, [pc, #76]	@ (8006854 <pvPortMalloc+0x198>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	3301      	adds	r3, #1
 800680c:	4a11      	ldr	r2, [pc, #68]	@ (8006854 <pvPortMalloc+0x198>)
 800680e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006810:	f7ff fba2 	bl	8005f58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	f003 0307 	and.w	r3, r3, #7
 800681a:	2b00      	cmp	r3, #0
 800681c:	d00b      	beq.n	8006836 <pvPortMalloc+0x17a>
	__asm volatile
 800681e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006822:	f383 8811 	msr	BASEPRI, r3
 8006826:	f3bf 8f6f 	isb	sy
 800682a:	f3bf 8f4f 	dsb	sy
 800682e:	60fb      	str	r3, [r7, #12]
}
 8006830:	bf00      	nop
 8006832:	bf00      	nop
 8006834:	e7fd      	b.n	8006832 <pvPortMalloc+0x176>
	return pvReturn;
 8006836:	69fb      	ldr	r3, [r7, #28]
}
 8006838:	4618      	mov	r0, r3
 800683a:	3728      	adds	r7, #40	@ 0x28
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}
 8006840:	2400439c 	.word	0x2400439c
 8006844:	240043b0 	.word	0x240043b0
 8006848:	240043a0 	.word	0x240043a0
 800684c:	24004394 	.word	0x24004394
 8006850:	240043a4 	.word	0x240043a4
 8006854:	240043a8 	.word	0x240043a8

08006858 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b086      	sub	sp, #24
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d04f      	beq.n	800690a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800686a:	2308      	movs	r3, #8
 800686c:	425b      	negs	r3, r3
 800686e:	697a      	ldr	r2, [r7, #20]
 8006870:	4413      	add	r3, r2
 8006872:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	685a      	ldr	r2, [r3, #4]
 800687c:	4b25      	ldr	r3, [pc, #148]	@ (8006914 <vPortFree+0xbc>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4013      	ands	r3, r2
 8006882:	2b00      	cmp	r3, #0
 8006884:	d10b      	bne.n	800689e <vPortFree+0x46>
	__asm volatile
 8006886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800688a:	f383 8811 	msr	BASEPRI, r3
 800688e:	f3bf 8f6f 	isb	sy
 8006892:	f3bf 8f4f 	dsb	sy
 8006896:	60fb      	str	r3, [r7, #12]
}
 8006898:	bf00      	nop
 800689a:	bf00      	nop
 800689c:	e7fd      	b.n	800689a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00b      	beq.n	80068be <vPortFree+0x66>
	__asm volatile
 80068a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068aa:	f383 8811 	msr	BASEPRI, r3
 80068ae:	f3bf 8f6f 	isb	sy
 80068b2:	f3bf 8f4f 	dsb	sy
 80068b6:	60bb      	str	r3, [r7, #8]
}
 80068b8:	bf00      	nop
 80068ba:	bf00      	nop
 80068bc:	e7fd      	b.n	80068ba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	685a      	ldr	r2, [r3, #4]
 80068c2:	4b14      	ldr	r3, [pc, #80]	@ (8006914 <vPortFree+0xbc>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4013      	ands	r3, r2
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d01e      	beq.n	800690a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d11a      	bne.n	800690a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	685a      	ldr	r2, [r3, #4]
 80068d8:	4b0e      	ldr	r3, [pc, #56]	@ (8006914 <vPortFree+0xbc>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	43db      	mvns	r3, r3
 80068de:	401a      	ands	r2, r3
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80068e4:	f7ff fb2a 	bl	8005f3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	685a      	ldr	r2, [r3, #4]
 80068ec:	4b0a      	ldr	r3, [pc, #40]	@ (8006918 <vPortFree+0xc0>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4413      	add	r3, r2
 80068f2:	4a09      	ldr	r2, [pc, #36]	@ (8006918 <vPortFree+0xc0>)
 80068f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80068f6:	6938      	ldr	r0, [r7, #16]
 80068f8:	f000 f874 	bl	80069e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80068fc:	4b07      	ldr	r3, [pc, #28]	@ (800691c <vPortFree+0xc4>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	3301      	adds	r3, #1
 8006902:	4a06      	ldr	r2, [pc, #24]	@ (800691c <vPortFree+0xc4>)
 8006904:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006906:	f7ff fb27 	bl	8005f58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800690a:	bf00      	nop
 800690c:	3718      	adds	r7, #24
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	240043b0 	.word	0x240043b0
 8006918:	240043a0 	.word	0x240043a0
 800691c:	240043ac 	.word	0x240043ac

08006920 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006920:	b480      	push	{r7}
 8006922:	b085      	sub	sp, #20
 8006924:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006926:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800692a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800692c:	4b27      	ldr	r3, [pc, #156]	@ (80069cc <prvHeapInit+0xac>)
 800692e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f003 0307 	and.w	r3, r3, #7
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00c      	beq.n	8006954 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	3307      	adds	r3, #7
 800693e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f023 0307 	bic.w	r3, r3, #7
 8006946:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006948:	68ba      	ldr	r2, [r7, #8]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	1ad3      	subs	r3, r2, r3
 800694e:	4a1f      	ldr	r2, [pc, #124]	@ (80069cc <prvHeapInit+0xac>)
 8006950:	4413      	add	r3, r2
 8006952:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006958:	4a1d      	ldr	r2, [pc, #116]	@ (80069d0 <prvHeapInit+0xb0>)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800695e:	4b1c      	ldr	r3, [pc, #112]	@ (80069d0 <prvHeapInit+0xb0>)
 8006960:	2200      	movs	r2, #0
 8006962:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	68ba      	ldr	r2, [r7, #8]
 8006968:	4413      	add	r3, r2
 800696a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800696c:	2208      	movs	r2, #8
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	1a9b      	subs	r3, r3, r2
 8006972:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f023 0307 	bic.w	r3, r3, #7
 800697a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	4a15      	ldr	r2, [pc, #84]	@ (80069d4 <prvHeapInit+0xb4>)
 8006980:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006982:	4b14      	ldr	r3, [pc, #80]	@ (80069d4 <prvHeapInit+0xb4>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2200      	movs	r2, #0
 8006988:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800698a:	4b12      	ldr	r3, [pc, #72]	@ (80069d4 <prvHeapInit+0xb4>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2200      	movs	r2, #0
 8006990:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	68fa      	ldr	r2, [r7, #12]
 800699a:	1ad2      	subs	r2, r2, r3
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80069a0:	4b0c      	ldr	r3, [pc, #48]	@ (80069d4 <prvHeapInit+0xb4>)
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	4a0a      	ldr	r2, [pc, #40]	@ (80069d8 <prvHeapInit+0xb8>)
 80069ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	4a09      	ldr	r2, [pc, #36]	@ (80069dc <prvHeapInit+0xbc>)
 80069b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80069b8:	4b09      	ldr	r3, [pc, #36]	@ (80069e0 <prvHeapInit+0xc0>)
 80069ba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80069be:	601a      	str	r2, [r3, #0]
}
 80069c0:	bf00      	nop
 80069c2:	3714      	adds	r7, #20
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr
 80069cc:	24000794 	.word	0x24000794
 80069d0:	24004394 	.word	0x24004394
 80069d4:	2400439c 	.word	0x2400439c
 80069d8:	240043a4 	.word	0x240043a4
 80069dc:	240043a0 	.word	0x240043a0
 80069e0:	240043b0 	.word	0x240043b0

080069e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80069e4:	b480      	push	{r7}
 80069e6:	b085      	sub	sp, #20
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80069ec:	4b28      	ldr	r3, [pc, #160]	@ (8006a90 <prvInsertBlockIntoFreeList+0xac>)
 80069ee:	60fb      	str	r3, [r7, #12]
 80069f0:	e002      	b.n	80069f8 <prvInsertBlockIntoFreeList+0x14>
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	60fb      	str	r3, [r7, #12]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d8f7      	bhi.n	80069f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	68ba      	ldr	r2, [r7, #8]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d108      	bne.n	8006a26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	685a      	ldr	r2, [r3, #4]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	441a      	add	r2, r3
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	68ba      	ldr	r2, [r7, #8]
 8006a30:	441a      	add	r2, r3
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d118      	bne.n	8006a6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	4b15      	ldr	r3, [pc, #84]	@ (8006a94 <prvInsertBlockIntoFreeList+0xb0>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d00d      	beq.n	8006a62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	685a      	ldr	r2, [r3, #4]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	441a      	add	r2, r3
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	601a      	str	r2, [r3, #0]
 8006a60:	e008      	b.n	8006a74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006a62:	4b0c      	ldr	r3, [pc, #48]	@ (8006a94 <prvInsertBlockIntoFreeList+0xb0>)
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	601a      	str	r2, [r3, #0]
 8006a6a:	e003      	b.n	8006a74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d002      	beq.n	8006a82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a82:	bf00      	nop
 8006a84:	3714      	adds	r7, #20
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr
 8006a8e:	bf00      	nop
 8006a90:	24004394 	.word	0x24004394
 8006a94:	2400439c 	.word	0x2400439c

08006a98 <__cvt>:
 8006a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a9a:	ed2d 8b02 	vpush	{d8}
 8006a9e:	eeb0 8b40 	vmov.f64	d8, d0
 8006aa2:	b085      	sub	sp, #20
 8006aa4:	4617      	mov	r7, r2
 8006aa6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8006aa8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006aaa:	ee18 2a90 	vmov	r2, s17
 8006aae:	f025 0520 	bic.w	r5, r5, #32
 8006ab2:	2a00      	cmp	r2, #0
 8006ab4:	bfb6      	itet	lt
 8006ab6:	222d      	movlt	r2, #45	@ 0x2d
 8006ab8:	2200      	movge	r2, #0
 8006aba:	eeb1 8b40 	vneglt.f64	d8, d0
 8006abe:	2d46      	cmp	r5, #70	@ 0x46
 8006ac0:	460c      	mov	r4, r1
 8006ac2:	701a      	strb	r2, [r3, #0]
 8006ac4:	d004      	beq.n	8006ad0 <__cvt+0x38>
 8006ac6:	2d45      	cmp	r5, #69	@ 0x45
 8006ac8:	d100      	bne.n	8006acc <__cvt+0x34>
 8006aca:	3401      	adds	r4, #1
 8006acc:	2102      	movs	r1, #2
 8006ace:	e000      	b.n	8006ad2 <__cvt+0x3a>
 8006ad0:	2103      	movs	r1, #3
 8006ad2:	ab03      	add	r3, sp, #12
 8006ad4:	9301      	str	r3, [sp, #4]
 8006ad6:	ab02      	add	r3, sp, #8
 8006ad8:	9300      	str	r3, [sp, #0]
 8006ada:	4622      	mov	r2, r4
 8006adc:	4633      	mov	r3, r6
 8006ade:	eeb0 0b48 	vmov.f64	d0, d8
 8006ae2:	f001 f965 	bl	8007db0 <_dtoa_r>
 8006ae6:	2d47      	cmp	r5, #71	@ 0x47
 8006ae8:	d114      	bne.n	8006b14 <__cvt+0x7c>
 8006aea:	07fb      	lsls	r3, r7, #31
 8006aec:	d50a      	bpl.n	8006b04 <__cvt+0x6c>
 8006aee:	1902      	adds	r2, r0, r4
 8006af0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006af8:	bf08      	it	eq
 8006afa:	9203      	streq	r2, [sp, #12]
 8006afc:	2130      	movs	r1, #48	@ 0x30
 8006afe:	9b03      	ldr	r3, [sp, #12]
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d319      	bcc.n	8006b38 <__cvt+0xa0>
 8006b04:	9b03      	ldr	r3, [sp, #12]
 8006b06:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006b08:	1a1b      	subs	r3, r3, r0
 8006b0a:	6013      	str	r3, [r2, #0]
 8006b0c:	b005      	add	sp, #20
 8006b0e:	ecbd 8b02 	vpop	{d8}
 8006b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b14:	2d46      	cmp	r5, #70	@ 0x46
 8006b16:	eb00 0204 	add.w	r2, r0, r4
 8006b1a:	d1e9      	bne.n	8006af0 <__cvt+0x58>
 8006b1c:	7803      	ldrb	r3, [r0, #0]
 8006b1e:	2b30      	cmp	r3, #48	@ 0x30
 8006b20:	d107      	bne.n	8006b32 <__cvt+0x9a>
 8006b22:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b2a:	bf1c      	itt	ne
 8006b2c:	f1c4 0401 	rsbne	r4, r4, #1
 8006b30:	6034      	strne	r4, [r6, #0]
 8006b32:	6833      	ldr	r3, [r6, #0]
 8006b34:	441a      	add	r2, r3
 8006b36:	e7db      	b.n	8006af0 <__cvt+0x58>
 8006b38:	1c5c      	adds	r4, r3, #1
 8006b3a:	9403      	str	r4, [sp, #12]
 8006b3c:	7019      	strb	r1, [r3, #0]
 8006b3e:	e7de      	b.n	8006afe <__cvt+0x66>

08006b40 <__exponent>:
 8006b40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b42:	2900      	cmp	r1, #0
 8006b44:	bfba      	itte	lt
 8006b46:	4249      	neglt	r1, r1
 8006b48:	232d      	movlt	r3, #45	@ 0x2d
 8006b4a:	232b      	movge	r3, #43	@ 0x2b
 8006b4c:	2909      	cmp	r1, #9
 8006b4e:	7002      	strb	r2, [r0, #0]
 8006b50:	7043      	strb	r3, [r0, #1]
 8006b52:	dd29      	ble.n	8006ba8 <__exponent+0x68>
 8006b54:	f10d 0307 	add.w	r3, sp, #7
 8006b58:	461d      	mov	r5, r3
 8006b5a:	270a      	movs	r7, #10
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	fbb1 f6f7 	udiv	r6, r1, r7
 8006b62:	fb07 1416 	mls	r4, r7, r6, r1
 8006b66:	3430      	adds	r4, #48	@ 0x30
 8006b68:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006b6c:	460c      	mov	r4, r1
 8006b6e:	2c63      	cmp	r4, #99	@ 0x63
 8006b70:	f103 33ff 	add.w	r3, r3, #4294967295
 8006b74:	4631      	mov	r1, r6
 8006b76:	dcf1      	bgt.n	8006b5c <__exponent+0x1c>
 8006b78:	3130      	adds	r1, #48	@ 0x30
 8006b7a:	1e94      	subs	r4, r2, #2
 8006b7c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006b80:	1c41      	adds	r1, r0, #1
 8006b82:	4623      	mov	r3, r4
 8006b84:	42ab      	cmp	r3, r5
 8006b86:	d30a      	bcc.n	8006b9e <__exponent+0x5e>
 8006b88:	f10d 0309 	add.w	r3, sp, #9
 8006b8c:	1a9b      	subs	r3, r3, r2
 8006b8e:	42ac      	cmp	r4, r5
 8006b90:	bf88      	it	hi
 8006b92:	2300      	movhi	r3, #0
 8006b94:	3302      	adds	r3, #2
 8006b96:	4403      	add	r3, r0
 8006b98:	1a18      	subs	r0, r3, r0
 8006b9a:	b003      	add	sp, #12
 8006b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b9e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006ba2:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006ba6:	e7ed      	b.n	8006b84 <__exponent+0x44>
 8006ba8:	2330      	movs	r3, #48	@ 0x30
 8006baa:	3130      	adds	r1, #48	@ 0x30
 8006bac:	7083      	strb	r3, [r0, #2]
 8006bae:	70c1      	strb	r1, [r0, #3]
 8006bb0:	1d03      	adds	r3, r0, #4
 8006bb2:	e7f1      	b.n	8006b98 <__exponent+0x58>
 8006bb4:	0000      	movs	r0, r0
	...

08006bb8 <_printf_float>:
 8006bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bbc:	b08d      	sub	sp, #52	@ 0x34
 8006bbe:	460c      	mov	r4, r1
 8006bc0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006bc4:	4616      	mov	r6, r2
 8006bc6:	461f      	mov	r7, r3
 8006bc8:	4605      	mov	r5, r0
 8006bca:	f000 ffdb 	bl	8007b84 <_localeconv_r>
 8006bce:	f8d0 b000 	ldr.w	fp, [r0]
 8006bd2:	4658      	mov	r0, fp
 8006bd4:	f7f9 fbdc 	bl	8000390 <strlen>
 8006bd8:	2300      	movs	r3, #0
 8006bda:	930a      	str	r3, [sp, #40]	@ 0x28
 8006bdc:	f8d8 3000 	ldr.w	r3, [r8]
 8006be0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006be4:	6822      	ldr	r2, [r4, #0]
 8006be6:	9005      	str	r0, [sp, #20]
 8006be8:	3307      	adds	r3, #7
 8006bea:	f023 0307 	bic.w	r3, r3, #7
 8006bee:	f103 0108 	add.w	r1, r3, #8
 8006bf2:	f8c8 1000 	str.w	r1, [r8]
 8006bf6:	ed93 0b00 	vldr	d0, [r3]
 8006bfa:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8006e58 <_printf_float+0x2a0>
 8006bfe:	eeb0 7bc0 	vabs.f64	d7, d0
 8006c02:	eeb4 7b46 	vcmp.f64	d7, d6
 8006c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c0a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8006c0e:	dd24      	ble.n	8006c5a <_printf_float+0xa2>
 8006c10:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c18:	d502      	bpl.n	8006c20 <_printf_float+0x68>
 8006c1a:	232d      	movs	r3, #45	@ 0x2d
 8006c1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c20:	498f      	ldr	r1, [pc, #572]	@ (8006e60 <_printf_float+0x2a8>)
 8006c22:	4b90      	ldr	r3, [pc, #576]	@ (8006e64 <_printf_float+0x2ac>)
 8006c24:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8006c28:	bf94      	ite	ls
 8006c2a:	4688      	movls	r8, r1
 8006c2c:	4698      	movhi	r8, r3
 8006c2e:	f022 0204 	bic.w	r2, r2, #4
 8006c32:	2303      	movs	r3, #3
 8006c34:	6123      	str	r3, [r4, #16]
 8006c36:	6022      	str	r2, [r4, #0]
 8006c38:	f04f 0a00 	mov.w	sl, #0
 8006c3c:	9700      	str	r7, [sp, #0]
 8006c3e:	4633      	mov	r3, r6
 8006c40:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006c42:	4621      	mov	r1, r4
 8006c44:	4628      	mov	r0, r5
 8006c46:	f000 f9d1 	bl	8006fec <_printf_common>
 8006c4a:	3001      	adds	r0, #1
 8006c4c:	f040 8089 	bne.w	8006d62 <_printf_float+0x1aa>
 8006c50:	f04f 30ff 	mov.w	r0, #4294967295
 8006c54:	b00d      	add	sp, #52	@ 0x34
 8006c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c5a:	eeb4 0b40 	vcmp.f64	d0, d0
 8006c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c62:	d709      	bvc.n	8006c78 <_printf_float+0xc0>
 8006c64:	ee10 3a90 	vmov	r3, s1
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	bfbc      	itt	lt
 8006c6c:	232d      	movlt	r3, #45	@ 0x2d
 8006c6e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006c72:	497d      	ldr	r1, [pc, #500]	@ (8006e68 <_printf_float+0x2b0>)
 8006c74:	4b7d      	ldr	r3, [pc, #500]	@ (8006e6c <_printf_float+0x2b4>)
 8006c76:	e7d5      	b.n	8006c24 <_printf_float+0x6c>
 8006c78:	6863      	ldr	r3, [r4, #4]
 8006c7a:	1c59      	adds	r1, r3, #1
 8006c7c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8006c80:	d139      	bne.n	8006cf6 <_printf_float+0x13e>
 8006c82:	2306      	movs	r3, #6
 8006c84:	6063      	str	r3, [r4, #4]
 8006c86:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	6022      	str	r2, [r4, #0]
 8006c8e:	9303      	str	r3, [sp, #12]
 8006c90:	ab0a      	add	r3, sp, #40	@ 0x28
 8006c92:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8006c96:	ab09      	add	r3, sp, #36	@ 0x24
 8006c98:	9300      	str	r3, [sp, #0]
 8006c9a:	6861      	ldr	r1, [r4, #4]
 8006c9c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006ca0:	4628      	mov	r0, r5
 8006ca2:	f7ff fef9 	bl	8006a98 <__cvt>
 8006ca6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006caa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006cac:	4680      	mov	r8, r0
 8006cae:	d129      	bne.n	8006d04 <_printf_float+0x14c>
 8006cb0:	1cc8      	adds	r0, r1, #3
 8006cb2:	db02      	blt.n	8006cba <_printf_float+0x102>
 8006cb4:	6863      	ldr	r3, [r4, #4]
 8006cb6:	4299      	cmp	r1, r3
 8006cb8:	dd41      	ble.n	8006d3e <_printf_float+0x186>
 8006cba:	f1a9 0902 	sub.w	r9, r9, #2
 8006cbe:	fa5f f989 	uxtb.w	r9, r9
 8006cc2:	3901      	subs	r1, #1
 8006cc4:	464a      	mov	r2, r9
 8006cc6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006cca:	9109      	str	r1, [sp, #36]	@ 0x24
 8006ccc:	f7ff ff38 	bl	8006b40 <__exponent>
 8006cd0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006cd2:	1813      	adds	r3, r2, r0
 8006cd4:	2a01      	cmp	r2, #1
 8006cd6:	4682      	mov	sl, r0
 8006cd8:	6123      	str	r3, [r4, #16]
 8006cda:	dc02      	bgt.n	8006ce2 <_printf_float+0x12a>
 8006cdc:	6822      	ldr	r2, [r4, #0]
 8006cde:	07d2      	lsls	r2, r2, #31
 8006ce0:	d501      	bpl.n	8006ce6 <_printf_float+0x12e>
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	6123      	str	r3, [r4, #16]
 8006ce6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d0a6      	beq.n	8006c3c <_printf_float+0x84>
 8006cee:	232d      	movs	r3, #45	@ 0x2d
 8006cf0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006cf4:	e7a2      	b.n	8006c3c <_printf_float+0x84>
 8006cf6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006cfa:	d1c4      	bne.n	8006c86 <_printf_float+0xce>
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d1c2      	bne.n	8006c86 <_printf_float+0xce>
 8006d00:	2301      	movs	r3, #1
 8006d02:	e7bf      	b.n	8006c84 <_printf_float+0xcc>
 8006d04:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8006d08:	d9db      	bls.n	8006cc2 <_printf_float+0x10a>
 8006d0a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8006d0e:	d118      	bne.n	8006d42 <_printf_float+0x18a>
 8006d10:	2900      	cmp	r1, #0
 8006d12:	6863      	ldr	r3, [r4, #4]
 8006d14:	dd0b      	ble.n	8006d2e <_printf_float+0x176>
 8006d16:	6121      	str	r1, [r4, #16]
 8006d18:	b913      	cbnz	r3, 8006d20 <_printf_float+0x168>
 8006d1a:	6822      	ldr	r2, [r4, #0]
 8006d1c:	07d0      	lsls	r0, r2, #31
 8006d1e:	d502      	bpl.n	8006d26 <_printf_float+0x16e>
 8006d20:	3301      	adds	r3, #1
 8006d22:	440b      	add	r3, r1
 8006d24:	6123      	str	r3, [r4, #16]
 8006d26:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006d28:	f04f 0a00 	mov.w	sl, #0
 8006d2c:	e7db      	b.n	8006ce6 <_printf_float+0x12e>
 8006d2e:	b913      	cbnz	r3, 8006d36 <_printf_float+0x17e>
 8006d30:	6822      	ldr	r2, [r4, #0]
 8006d32:	07d2      	lsls	r2, r2, #31
 8006d34:	d501      	bpl.n	8006d3a <_printf_float+0x182>
 8006d36:	3302      	adds	r3, #2
 8006d38:	e7f4      	b.n	8006d24 <_printf_float+0x16c>
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e7f2      	b.n	8006d24 <_printf_float+0x16c>
 8006d3e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8006d42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d44:	4299      	cmp	r1, r3
 8006d46:	db05      	blt.n	8006d54 <_printf_float+0x19c>
 8006d48:	6823      	ldr	r3, [r4, #0]
 8006d4a:	6121      	str	r1, [r4, #16]
 8006d4c:	07d8      	lsls	r0, r3, #31
 8006d4e:	d5ea      	bpl.n	8006d26 <_printf_float+0x16e>
 8006d50:	1c4b      	adds	r3, r1, #1
 8006d52:	e7e7      	b.n	8006d24 <_printf_float+0x16c>
 8006d54:	2900      	cmp	r1, #0
 8006d56:	bfd4      	ite	le
 8006d58:	f1c1 0202 	rsble	r2, r1, #2
 8006d5c:	2201      	movgt	r2, #1
 8006d5e:	4413      	add	r3, r2
 8006d60:	e7e0      	b.n	8006d24 <_printf_float+0x16c>
 8006d62:	6823      	ldr	r3, [r4, #0]
 8006d64:	055a      	lsls	r2, r3, #21
 8006d66:	d407      	bmi.n	8006d78 <_printf_float+0x1c0>
 8006d68:	6923      	ldr	r3, [r4, #16]
 8006d6a:	4642      	mov	r2, r8
 8006d6c:	4631      	mov	r1, r6
 8006d6e:	4628      	mov	r0, r5
 8006d70:	47b8      	blx	r7
 8006d72:	3001      	adds	r0, #1
 8006d74:	d12a      	bne.n	8006dcc <_printf_float+0x214>
 8006d76:	e76b      	b.n	8006c50 <_printf_float+0x98>
 8006d78:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8006d7c:	f240 80e0 	bls.w	8006f40 <_printf_float+0x388>
 8006d80:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8006d84:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d8c:	d133      	bne.n	8006df6 <_printf_float+0x23e>
 8006d8e:	4a38      	ldr	r2, [pc, #224]	@ (8006e70 <_printf_float+0x2b8>)
 8006d90:	2301      	movs	r3, #1
 8006d92:	4631      	mov	r1, r6
 8006d94:	4628      	mov	r0, r5
 8006d96:	47b8      	blx	r7
 8006d98:	3001      	adds	r0, #1
 8006d9a:	f43f af59 	beq.w	8006c50 <_printf_float+0x98>
 8006d9e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006da2:	4543      	cmp	r3, r8
 8006da4:	db02      	blt.n	8006dac <_printf_float+0x1f4>
 8006da6:	6823      	ldr	r3, [r4, #0]
 8006da8:	07d8      	lsls	r0, r3, #31
 8006daa:	d50f      	bpl.n	8006dcc <_printf_float+0x214>
 8006dac:	9b05      	ldr	r3, [sp, #20]
 8006dae:	465a      	mov	r2, fp
 8006db0:	4631      	mov	r1, r6
 8006db2:	4628      	mov	r0, r5
 8006db4:	47b8      	blx	r7
 8006db6:	3001      	adds	r0, #1
 8006db8:	f43f af4a 	beq.w	8006c50 <_printf_float+0x98>
 8006dbc:	f04f 0900 	mov.w	r9, #0
 8006dc0:	f108 38ff 	add.w	r8, r8, #4294967295
 8006dc4:	f104 0a1a 	add.w	sl, r4, #26
 8006dc8:	45c8      	cmp	r8, r9
 8006dca:	dc09      	bgt.n	8006de0 <_printf_float+0x228>
 8006dcc:	6823      	ldr	r3, [r4, #0]
 8006dce:	079b      	lsls	r3, r3, #30
 8006dd0:	f100 8107 	bmi.w	8006fe2 <_printf_float+0x42a>
 8006dd4:	68e0      	ldr	r0, [r4, #12]
 8006dd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006dd8:	4298      	cmp	r0, r3
 8006dda:	bfb8      	it	lt
 8006ddc:	4618      	movlt	r0, r3
 8006dde:	e739      	b.n	8006c54 <_printf_float+0x9c>
 8006de0:	2301      	movs	r3, #1
 8006de2:	4652      	mov	r2, sl
 8006de4:	4631      	mov	r1, r6
 8006de6:	4628      	mov	r0, r5
 8006de8:	47b8      	blx	r7
 8006dea:	3001      	adds	r0, #1
 8006dec:	f43f af30 	beq.w	8006c50 <_printf_float+0x98>
 8006df0:	f109 0901 	add.w	r9, r9, #1
 8006df4:	e7e8      	b.n	8006dc8 <_printf_float+0x210>
 8006df6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	dc3b      	bgt.n	8006e74 <_printf_float+0x2bc>
 8006dfc:	4a1c      	ldr	r2, [pc, #112]	@ (8006e70 <_printf_float+0x2b8>)
 8006dfe:	2301      	movs	r3, #1
 8006e00:	4631      	mov	r1, r6
 8006e02:	4628      	mov	r0, r5
 8006e04:	47b8      	blx	r7
 8006e06:	3001      	adds	r0, #1
 8006e08:	f43f af22 	beq.w	8006c50 <_printf_float+0x98>
 8006e0c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006e10:	ea59 0303 	orrs.w	r3, r9, r3
 8006e14:	d102      	bne.n	8006e1c <_printf_float+0x264>
 8006e16:	6823      	ldr	r3, [r4, #0]
 8006e18:	07d9      	lsls	r1, r3, #31
 8006e1a:	d5d7      	bpl.n	8006dcc <_printf_float+0x214>
 8006e1c:	9b05      	ldr	r3, [sp, #20]
 8006e1e:	465a      	mov	r2, fp
 8006e20:	4631      	mov	r1, r6
 8006e22:	4628      	mov	r0, r5
 8006e24:	47b8      	blx	r7
 8006e26:	3001      	adds	r0, #1
 8006e28:	f43f af12 	beq.w	8006c50 <_printf_float+0x98>
 8006e2c:	f04f 0a00 	mov.w	sl, #0
 8006e30:	f104 0b1a 	add.w	fp, r4, #26
 8006e34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e36:	425b      	negs	r3, r3
 8006e38:	4553      	cmp	r3, sl
 8006e3a:	dc01      	bgt.n	8006e40 <_printf_float+0x288>
 8006e3c:	464b      	mov	r3, r9
 8006e3e:	e794      	b.n	8006d6a <_printf_float+0x1b2>
 8006e40:	2301      	movs	r3, #1
 8006e42:	465a      	mov	r2, fp
 8006e44:	4631      	mov	r1, r6
 8006e46:	4628      	mov	r0, r5
 8006e48:	47b8      	blx	r7
 8006e4a:	3001      	adds	r0, #1
 8006e4c:	f43f af00 	beq.w	8006c50 <_printf_float+0x98>
 8006e50:	f10a 0a01 	add.w	sl, sl, #1
 8006e54:	e7ee      	b.n	8006e34 <_printf_float+0x27c>
 8006e56:	bf00      	nop
 8006e58:	ffffffff 	.word	0xffffffff
 8006e5c:	7fefffff 	.word	0x7fefffff
 8006e60:	0800b13c 	.word	0x0800b13c
 8006e64:	0800b140 	.word	0x0800b140
 8006e68:	0800b144 	.word	0x0800b144
 8006e6c:	0800b148 	.word	0x0800b148
 8006e70:	0800b14c 	.word	0x0800b14c
 8006e74:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006e76:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006e7a:	4553      	cmp	r3, sl
 8006e7c:	bfa8      	it	ge
 8006e7e:	4653      	movge	r3, sl
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	4699      	mov	r9, r3
 8006e84:	dc37      	bgt.n	8006ef6 <_printf_float+0x33e>
 8006e86:	2300      	movs	r3, #0
 8006e88:	9307      	str	r3, [sp, #28]
 8006e8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e8e:	f104 021a 	add.w	r2, r4, #26
 8006e92:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006e94:	9907      	ldr	r1, [sp, #28]
 8006e96:	9306      	str	r3, [sp, #24]
 8006e98:	eba3 0309 	sub.w	r3, r3, r9
 8006e9c:	428b      	cmp	r3, r1
 8006e9e:	dc31      	bgt.n	8006f04 <_printf_float+0x34c>
 8006ea0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ea2:	459a      	cmp	sl, r3
 8006ea4:	dc3b      	bgt.n	8006f1e <_printf_float+0x366>
 8006ea6:	6823      	ldr	r3, [r4, #0]
 8006ea8:	07da      	lsls	r2, r3, #31
 8006eaa:	d438      	bmi.n	8006f1e <_printf_float+0x366>
 8006eac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006eae:	ebaa 0903 	sub.w	r9, sl, r3
 8006eb2:	9b06      	ldr	r3, [sp, #24]
 8006eb4:	ebaa 0303 	sub.w	r3, sl, r3
 8006eb8:	4599      	cmp	r9, r3
 8006eba:	bfa8      	it	ge
 8006ebc:	4699      	movge	r9, r3
 8006ebe:	f1b9 0f00 	cmp.w	r9, #0
 8006ec2:	dc34      	bgt.n	8006f2e <_printf_float+0x376>
 8006ec4:	f04f 0800 	mov.w	r8, #0
 8006ec8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ecc:	f104 0b1a 	add.w	fp, r4, #26
 8006ed0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ed2:	ebaa 0303 	sub.w	r3, sl, r3
 8006ed6:	eba3 0309 	sub.w	r3, r3, r9
 8006eda:	4543      	cmp	r3, r8
 8006edc:	f77f af76 	ble.w	8006dcc <_printf_float+0x214>
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	465a      	mov	r2, fp
 8006ee4:	4631      	mov	r1, r6
 8006ee6:	4628      	mov	r0, r5
 8006ee8:	47b8      	blx	r7
 8006eea:	3001      	adds	r0, #1
 8006eec:	f43f aeb0 	beq.w	8006c50 <_printf_float+0x98>
 8006ef0:	f108 0801 	add.w	r8, r8, #1
 8006ef4:	e7ec      	b.n	8006ed0 <_printf_float+0x318>
 8006ef6:	4642      	mov	r2, r8
 8006ef8:	4631      	mov	r1, r6
 8006efa:	4628      	mov	r0, r5
 8006efc:	47b8      	blx	r7
 8006efe:	3001      	adds	r0, #1
 8006f00:	d1c1      	bne.n	8006e86 <_printf_float+0x2ce>
 8006f02:	e6a5      	b.n	8006c50 <_printf_float+0x98>
 8006f04:	2301      	movs	r3, #1
 8006f06:	4631      	mov	r1, r6
 8006f08:	4628      	mov	r0, r5
 8006f0a:	9206      	str	r2, [sp, #24]
 8006f0c:	47b8      	blx	r7
 8006f0e:	3001      	adds	r0, #1
 8006f10:	f43f ae9e 	beq.w	8006c50 <_printf_float+0x98>
 8006f14:	9b07      	ldr	r3, [sp, #28]
 8006f16:	9a06      	ldr	r2, [sp, #24]
 8006f18:	3301      	adds	r3, #1
 8006f1a:	9307      	str	r3, [sp, #28]
 8006f1c:	e7b9      	b.n	8006e92 <_printf_float+0x2da>
 8006f1e:	9b05      	ldr	r3, [sp, #20]
 8006f20:	465a      	mov	r2, fp
 8006f22:	4631      	mov	r1, r6
 8006f24:	4628      	mov	r0, r5
 8006f26:	47b8      	blx	r7
 8006f28:	3001      	adds	r0, #1
 8006f2a:	d1bf      	bne.n	8006eac <_printf_float+0x2f4>
 8006f2c:	e690      	b.n	8006c50 <_printf_float+0x98>
 8006f2e:	9a06      	ldr	r2, [sp, #24]
 8006f30:	464b      	mov	r3, r9
 8006f32:	4442      	add	r2, r8
 8006f34:	4631      	mov	r1, r6
 8006f36:	4628      	mov	r0, r5
 8006f38:	47b8      	blx	r7
 8006f3a:	3001      	adds	r0, #1
 8006f3c:	d1c2      	bne.n	8006ec4 <_printf_float+0x30c>
 8006f3e:	e687      	b.n	8006c50 <_printf_float+0x98>
 8006f40:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8006f44:	f1b9 0f01 	cmp.w	r9, #1
 8006f48:	dc01      	bgt.n	8006f4e <_printf_float+0x396>
 8006f4a:	07db      	lsls	r3, r3, #31
 8006f4c:	d536      	bpl.n	8006fbc <_printf_float+0x404>
 8006f4e:	2301      	movs	r3, #1
 8006f50:	4642      	mov	r2, r8
 8006f52:	4631      	mov	r1, r6
 8006f54:	4628      	mov	r0, r5
 8006f56:	47b8      	blx	r7
 8006f58:	3001      	adds	r0, #1
 8006f5a:	f43f ae79 	beq.w	8006c50 <_printf_float+0x98>
 8006f5e:	9b05      	ldr	r3, [sp, #20]
 8006f60:	465a      	mov	r2, fp
 8006f62:	4631      	mov	r1, r6
 8006f64:	4628      	mov	r0, r5
 8006f66:	47b8      	blx	r7
 8006f68:	3001      	adds	r0, #1
 8006f6a:	f43f ae71 	beq.w	8006c50 <_printf_float+0x98>
 8006f6e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8006f72:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f7a:	f109 39ff 	add.w	r9, r9, #4294967295
 8006f7e:	d018      	beq.n	8006fb2 <_printf_float+0x3fa>
 8006f80:	464b      	mov	r3, r9
 8006f82:	f108 0201 	add.w	r2, r8, #1
 8006f86:	4631      	mov	r1, r6
 8006f88:	4628      	mov	r0, r5
 8006f8a:	47b8      	blx	r7
 8006f8c:	3001      	adds	r0, #1
 8006f8e:	d10c      	bne.n	8006faa <_printf_float+0x3f2>
 8006f90:	e65e      	b.n	8006c50 <_printf_float+0x98>
 8006f92:	2301      	movs	r3, #1
 8006f94:	465a      	mov	r2, fp
 8006f96:	4631      	mov	r1, r6
 8006f98:	4628      	mov	r0, r5
 8006f9a:	47b8      	blx	r7
 8006f9c:	3001      	adds	r0, #1
 8006f9e:	f43f ae57 	beq.w	8006c50 <_printf_float+0x98>
 8006fa2:	f108 0801 	add.w	r8, r8, #1
 8006fa6:	45c8      	cmp	r8, r9
 8006fa8:	dbf3      	blt.n	8006f92 <_printf_float+0x3da>
 8006faa:	4653      	mov	r3, sl
 8006fac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006fb0:	e6dc      	b.n	8006d6c <_printf_float+0x1b4>
 8006fb2:	f04f 0800 	mov.w	r8, #0
 8006fb6:	f104 0b1a 	add.w	fp, r4, #26
 8006fba:	e7f4      	b.n	8006fa6 <_printf_float+0x3ee>
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	4642      	mov	r2, r8
 8006fc0:	e7e1      	b.n	8006f86 <_printf_float+0x3ce>
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	464a      	mov	r2, r9
 8006fc6:	4631      	mov	r1, r6
 8006fc8:	4628      	mov	r0, r5
 8006fca:	47b8      	blx	r7
 8006fcc:	3001      	adds	r0, #1
 8006fce:	f43f ae3f 	beq.w	8006c50 <_printf_float+0x98>
 8006fd2:	f108 0801 	add.w	r8, r8, #1
 8006fd6:	68e3      	ldr	r3, [r4, #12]
 8006fd8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006fda:	1a5b      	subs	r3, r3, r1
 8006fdc:	4543      	cmp	r3, r8
 8006fde:	dcf0      	bgt.n	8006fc2 <_printf_float+0x40a>
 8006fe0:	e6f8      	b.n	8006dd4 <_printf_float+0x21c>
 8006fe2:	f04f 0800 	mov.w	r8, #0
 8006fe6:	f104 0919 	add.w	r9, r4, #25
 8006fea:	e7f4      	b.n	8006fd6 <_printf_float+0x41e>

08006fec <_printf_common>:
 8006fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ff0:	4616      	mov	r6, r2
 8006ff2:	4698      	mov	r8, r3
 8006ff4:	688a      	ldr	r2, [r1, #8]
 8006ff6:	690b      	ldr	r3, [r1, #16]
 8006ff8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	bfb8      	it	lt
 8007000:	4613      	movlt	r3, r2
 8007002:	6033      	str	r3, [r6, #0]
 8007004:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007008:	4607      	mov	r7, r0
 800700a:	460c      	mov	r4, r1
 800700c:	b10a      	cbz	r2, 8007012 <_printf_common+0x26>
 800700e:	3301      	adds	r3, #1
 8007010:	6033      	str	r3, [r6, #0]
 8007012:	6823      	ldr	r3, [r4, #0]
 8007014:	0699      	lsls	r1, r3, #26
 8007016:	bf42      	ittt	mi
 8007018:	6833      	ldrmi	r3, [r6, #0]
 800701a:	3302      	addmi	r3, #2
 800701c:	6033      	strmi	r3, [r6, #0]
 800701e:	6825      	ldr	r5, [r4, #0]
 8007020:	f015 0506 	ands.w	r5, r5, #6
 8007024:	d106      	bne.n	8007034 <_printf_common+0x48>
 8007026:	f104 0a19 	add.w	sl, r4, #25
 800702a:	68e3      	ldr	r3, [r4, #12]
 800702c:	6832      	ldr	r2, [r6, #0]
 800702e:	1a9b      	subs	r3, r3, r2
 8007030:	42ab      	cmp	r3, r5
 8007032:	dc26      	bgt.n	8007082 <_printf_common+0x96>
 8007034:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007038:	6822      	ldr	r2, [r4, #0]
 800703a:	3b00      	subs	r3, #0
 800703c:	bf18      	it	ne
 800703e:	2301      	movne	r3, #1
 8007040:	0692      	lsls	r2, r2, #26
 8007042:	d42b      	bmi.n	800709c <_printf_common+0xb0>
 8007044:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007048:	4641      	mov	r1, r8
 800704a:	4638      	mov	r0, r7
 800704c:	47c8      	blx	r9
 800704e:	3001      	adds	r0, #1
 8007050:	d01e      	beq.n	8007090 <_printf_common+0xa4>
 8007052:	6823      	ldr	r3, [r4, #0]
 8007054:	6922      	ldr	r2, [r4, #16]
 8007056:	f003 0306 	and.w	r3, r3, #6
 800705a:	2b04      	cmp	r3, #4
 800705c:	bf02      	ittt	eq
 800705e:	68e5      	ldreq	r5, [r4, #12]
 8007060:	6833      	ldreq	r3, [r6, #0]
 8007062:	1aed      	subeq	r5, r5, r3
 8007064:	68a3      	ldr	r3, [r4, #8]
 8007066:	bf0c      	ite	eq
 8007068:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800706c:	2500      	movne	r5, #0
 800706e:	4293      	cmp	r3, r2
 8007070:	bfc4      	itt	gt
 8007072:	1a9b      	subgt	r3, r3, r2
 8007074:	18ed      	addgt	r5, r5, r3
 8007076:	2600      	movs	r6, #0
 8007078:	341a      	adds	r4, #26
 800707a:	42b5      	cmp	r5, r6
 800707c:	d11a      	bne.n	80070b4 <_printf_common+0xc8>
 800707e:	2000      	movs	r0, #0
 8007080:	e008      	b.n	8007094 <_printf_common+0xa8>
 8007082:	2301      	movs	r3, #1
 8007084:	4652      	mov	r2, sl
 8007086:	4641      	mov	r1, r8
 8007088:	4638      	mov	r0, r7
 800708a:	47c8      	blx	r9
 800708c:	3001      	adds	r0, #1
 800708e:	d103      	bne.n	8007098 <_printf_common+0xac>
 8007090:	f04f 30ff 	mov.w	r0, #4294967295
 8007094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007098:	3501      	adds	r5, #1
 800709a:	e7c6      	b.n	800702a <_printf_common+0x3e>
 800709c:	18e1      	adds	r1, r4, r3
 800709e:	1c5a      	adds	r2, r3, #1
 80070a0:	2030      	movs	r0, #48	@ 0x30
 80070a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80070a6:	4422      	add	r2, r4
 80070a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80070ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80070b0:	3302      	adds	r3, #2
 80070b2:	e7c7      	b.n	8007044 <_printf_common+0x58>
 80070b4:	2301      	movs	r3, #1
 80070b6:	4622      	mov	r2, r4
 80070b8:	4641      	mov	r1, r8
 80070ba:	4638      	mov	r0, r7
 80070bc:	47c8      	blx	r9
 80070be:	3001      	adds	r0, #1
 80070c0:	d0e6      	beq.n	8007090 <_printf_common+0xa4>
 80070c2:	3601      	adds	r6, #1
 80070c4:	e7d9      	b.n	800707a <_printf_common+0x8e>
	...

080070c8 <_printf_i>:
 80070c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070cc:	7e0f      	ldrb	r7, [r1, #24]
 80070ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80070d0:	2f78      	cmp	r7, #120	@ 0x78
 80070d2:	4691      	mov	r9, r2
 80070d4:	4680      	mov	r8, r0
 80070d6:	460c      	mov	r4, r1
 80070d8:	469a      	mov	sl, r3
 80070da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80070de:	d807      	bhi.n	80070f0 <_printf_i+0x28>
 80070e0:	2f62      	cmp	r7, #98	@ 0x62
 80070e2:	d80a      	bhi.n	80070fa <_printf_i+0x32>
 80070e4:	2f00      	cmp	r7, #0
 80070e6:	f000 80d2 	beq.w	800728e <_printf_i+0x1c6>
 80070ea:	2f58      	cmp	r7, #88	@ 0x58
 80070ec:	f000 80b9 	beq.w	8007262 <_printf_i+0x19a>
 80070f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80070f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80070f8:	e03a      	b.n	8007170 <_printf_i+0xa8>
 80070fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80070fe:	2b15      	cmp	r3, #21
 8007100:	d8f6      	bhi.n	80070f0 <_printf_i+0x28>
 8007102:	a101      	add	r1, pc, #4	@ (adr r1, 8007108 <_printf_i+0x40>)
 8007104:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007108:	08007161 	.word	0x08007161
 800710c:	08007175 	.word	0x08007175
 8007110:	080070f1 	.word	0x080070f1
 8007114:	080070f1 	.word	0x080070f1
 8007118:	080070f1 	.word	0x080070f1
 800711c:	080070f1 	.word	0x080070f1
 8007120:	08007175 	.word	0x08007175
 8007124:	080070f1 	.word	0x080070f1
 8007128:	080070f1 	.word	0x080070f1
 800712c:	080070f1 	.word	0x080070f1
 8007130:	080070f1 	.word	0x080070f1
 8007134:	08007275 	.word	0x08007275
 8007138:	0800719f 	.word	0x0800719f
 800713c:	0800722f 	.word	0x0800722f
 8007140:	080070f1 	.word	0x080070f1
 8007144:	080070f1 	.word	0x080070f1
 8007148:	08007297 	.word	0x08007297
 800714c:	080070f1 	.word	0x080070f1
 8007150:	0800719f 	.word	0x0800719f
 8007154:	080070f1 	.word	0x080070f1
 8007158:	080070f1 	.word	0x080070f1
 800715c:	08007237 	.word	0x08007237
 8007160:	6833      	ldr	r3, [r6, #0]
 8007162:	1d1a      	adds	r2, r3, #4
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	6032      	str	r2, [r6, #0]
 8007168:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800716c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007170:	2301      	movs	r3, #1
 8007172:	e09d      	b.n	80072b0 <_printf_i+0x1e8>
 8007174:	6833      	ldr	r3, [r6, #0]
 8007176:	6820      	ldr	r0, [r4, #0]
 8007178:	1d19      	adds	r1, r3, #4
 800717a:	6031      	str	r1, [r6, #0]
 800717c:	0606      	lsls	r6, r0, #24
 800717e:	d501      	bpl.n	8007184 <_printf_i+0xbc>
 8007180:	681d      	ldr	r5, [r3, #0]
 8007182:	e003      	b.n	800718c <_printf_i+0xc4>
 8007184:	0645      	lsls	r5, r0, #25
 8007186:	d5fb      	bpl.n	8007180 <_printf_i+0xb8>
 8007188:	f9b3 5000 	ldrsh.w	r5, [r3]
 800718c:	2d00      	cmp	r5, #0
 800718e:	da03      	bge.n	8007198 <_printf_i+0xd0>
 8007190:	232d      	movs	r3, #45	@ 0x2d
 8007192:	426d      	negs	r5, r5
 8007194:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007198:	4859      	ldr	r0, [pc, #356]	@ (8007300 <_printf_i+0x238>)
 800719a:	230a      	movs	r3, #10
 800719c:	e011      	b.n	80071c2 <_printf_i+0xfa>
 800719e:	6821      	ldr	r1, [r4, #0]
 80071a0:	6833      	ldr	r3, [r6, #0]
 80071a2:	0608      	lsls	r0, r1, #24
 80071a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80071a8:	d402      	bmi.n	80071b0 <_printf_i+0xe8>
 80071aa:	0649      	lsls	r1, r1, #25
 80071ac:	bf48      	it	mi
 80071ae:	b2ad      	uxthmi	r5, r5
 80071b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80071b2:	4853      	ldr	r0, [pc, #332]	@ (8007300 <_printf_i+0x238>)
 80071b4:	6033      	str	r3, [r6, #0]
 80071b6:	bf14      	ite	ne
 80071b8:	230a      	movne	r3, #10
 80071ba:	2308      	moveq	r3, #8
 80071bc:	2100      	movs	r1, #0
 80071be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80071c2:	6866      	ldr	r6, [r4, #4]
 80071c4:	60a6      	str	r6, [r4, #8]
 80071c6:	2e00      	cmp	r6, #0
 80071c8:	bfa2      	ittt	ge
 80071ca:	6821      	ldrge	r1, [r4, #0]
 80071cc:	f021 0104 	bicge.w	r1, r1, #4
 80071d0:	6021      	strge	r1, [r4, #0]
 80071d2:	b90d      	cbnz	r5, 80071d8 <_printf_i+0x110>
 80071d4:	2e00      	cmp	r6, #0
 80071d6:	d04b      	beq.n	8007270 <_printf_i+0x1a8>
 80071d8:	4616      	mov	r6, r2
 80071da:	fbb5 f1f3 	udiv	r1, r5, r3
 80071de:	fb03 5711 	mls	r7, r3, r1, r5
 80071e2:	5dc7      	ldrb	r7, [r0, r7]
 80071e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80071e8:	462f      	mov	r7, r5
 80071ea:	42bb      	cmp	r3, r7
 80071ec:	460d      	mov	r5, r1
 80071ee:	d9f4      	bls.n	80071da <_printf_i+0x112>
 80071f0:	2b08      	cmp	r3, #8
 80071f2:	d10b      	bne.n	800720c <_printf_i+0x144>
 80071f4:	6823      	ldr	r3, [r4, #0]
 80071f6:	07df      	lsls	r7, r3, #31
 80071f8:	d508      	bpl.n	800720c <_printf_i+0x144>
 80071fa:	6923      	ldr	r3, [r4, #16]
 80071fc:	6861      	ldr	r1, [r4, #4]
 80071fe:	4299      	cmp	r1, r3
 8007200:	bfde      	ittt	le
 8007202:	2330      	movle	r3, #48	@ 0x30
 8007204:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007208:	f106 36ff 	addle.w	r6, r6, #4294967295
 800720c:	1b92      	subs	r2, r2, r6
 800720e:	6122      	str	r2, [r4, #16]
 8007210:	f8cd a000 	str.w	sl, [sp]
 8007214:	464b      	mov	r3, r9
 8007216:	aa03      	add	r2, sp, #12
 8007218:	4621      	mov	r1, r4
 800721a:	4640      	mov	r0, r8
 800721c:	f7ff fee6 	bl	8006fec <_printf_common>
 8007220:	3001      	adds	r0, #1
 8007222:	d14a      	bne.n	80072ba <_printf_i+0x1f2>
 8007224:	f04f 30ff 	mov.w	r0, #4294967295
 8007228:	b004      	add	sp, #16
 800722a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800722e:	6823      	ldr	r3, [r4, #0]
 8007230:	f043 0320 	orr.w	r3, r3, #32
 8007234:	6023      	str	r3, [r4, #0]
 8007236:	4833      	ldr	r0, [pc, #204]	@ (8007304 <_printf_i+0x23c>)
 8007238:	2778      	movs	r7, #120	@ 0x78
 800723a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800723e:	6823      	ldr	r3, [r4, #0]
 8007240:	6831      	ldr	r1, [r6, #0]
 8007242:	061f      	lsls	r7, r3, #24
 8007244:	f851 5b04 	ldr.w	r5, [r1], #4
 8007248:	d402      	bmi.n	8007250 <_printf_i+0x188>
 800724a:	065f      	lsls	r7, r3, #25
 800724c:	bf48      	it	mi
 800724e:	b2ad      	uxthmi	r5, r5
 8007250:	6031      	str	r1, [r6, #0]
 8007252:	07d9      	lsls	r1, r3, #31
 8007254:	bf44      	itt	mi
 8007256:	f043 0320 	orrmi.w	r3, r3, #32
 800725a:	6023      	strmi	r3, [r4, #0]
 800725c:	b11d      	cbz	r5, 8007266 <_printf_i+0x19e>
 800725e:	2310      	movs	r3, #16
 8007260:	e7ac      	b.n	80071bc <_printf_i+0xf4>
 8007262:	4827      	ldr	r0, [pc, #156]	@ (8007300 <_printf_i+0x238>)
 8007264:	e7e9      	b.n	800723a <_printf_i+0x172>
 8007266:	6823      	ldr	r3, [r4, #0]
 8007268:	f023 0320 	bic.w	r3, r3, #32
 800726c:	6023      	str	r3, [r4, #0]
 800726e:	e7f6      	b.n	800725e <_printf_i+0x196>
 8007270:	4616      	mov	r6, r2
 8007272:	e7bd      	b.n	80071f0 <_printf_i+0x128>
 8007274:	6833      	ldr	r3, [r6, #0]
 8007276:	6825      	ldr	r5, [r4, #0]
 8007278:	6961      	ldr	r1, [r4, #20]
 800727a:	1d18      	adds	r0, r3, #4
 800727c:	6030      	str	r0, [r6, #0]
 800727e:	062e      	lsls	r6, r5, #24
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	d501      	bpl.n	8007288 <_printf_i+0x1c0>
 8007284:	6019      	str	r1, [r3, #0]
 8007286:	e002      	b.n	800728e <_printf_i+0x1c6>
 8007288:	0668      	lsls	r0, r5, #25
 800728a:	d5fb      	bpl.n	8007284 <_printf_i+0x1bc>
 800728c:	8019      	strh	r1, [r3, #0]
 800728e:	2300      	movs	r3, #0
 8007290:	6123      	str	r3, [r4, #16]
 8007292:	4616      	mov	r6, r2
 8007294:	e7bc      	b.n	8007210 <_printf_i+0x148>
 8007296:	6833      	ldr	r3, [r6, #0]
 8007298:	1d1a      	adds	r2, r3, #4
 800729a:	6032      	str	r2, [r6, #0]
 800729c:	681e      	ldr	r6, [r3, #0]
 800729e:	6862      	ldr	r2, [r4, #4]
 80072a0:	2100      	movs	r1, #0
 80072a2:	4630      	mov	r0, r6
 80072a4:	f7f9 f824 	bl	80002f0 <memchr>
 80072a8:	b108      	cbz	r0, 80072ae <_printf_i+0x1e6>
 80072aa:	1b80      	subs	r0, r0, r6
 80072ac:	6060      	str	r0, [r4, #4]
 80072ae:	6863      	ldr	r3, [r4, #4]
 80072b0:	6123      	str	r3, [r4, #16]
 80072b2:	2300      	movs	r3, #0
 80072b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072b8:	e7aa      	b.n	8007210 <_printf_i+0x148>
 80072ba:	6923      	ldr	r3, [r4, #16]
 80072bc:	4632      	mov	r2, r6
 80072be:	4649      	mov	r1, r9
 80072c0:	4640      	mov	r0, r8
 80072c2:	47d0      	blx	sl
 80072c4:	3001      	adds	r0, #1
 80072c6:	d0ad      	beq.n	8007224 <_printf_i+0x15c>
 80072c8:	6823      	ldr	r3, [r4, #0]
 80072ca:	079b      	lsls	r3, r3, #30
 80072cc:	d413      	bmi.n	80072f6 <_printf_i+0x22e>
 80072ce:	68e0      	ldr	r0, [r4, #12]
 80072d0:	9b03      	ldr	r3, [sp, #12]
 80072d2:	4298      	cmp	r0, r3
 80072d4:	bfb8      	it	lt
 80072d6:	4618      	movlt	r0, r3
 80072d8:	e7a6      	b.n	8007228 <_printf_i+0x160>
 80072da:	2301      	movs	r3, #1
 80072dc:	4632      	mov	r2, r6
 80072de:	4649      	mov	r1, r9
 80072e0:	4640      	mov	r0, r8
 80072e2:	47d0      	blx	sl
 80072e4:	3001      	adds	r0, #1
 80072e6:	d09d      	beq.n	8007224 <_printf_i+0x15c>
 80072e8:	3501      	adds	r5, #1
 80072ea:	68e3      	ldr	r3, [r4, #12]
 80072ec:	9903      	ldr	r1, [sp, #12]
 80072ee:	1a5b      	subs	r3, r3, r1
 80072f0:	42ab      	cmp	r3, r5
 80072f2:	dcf2      	bgt.n	80072da <_printf_i+0x212>
 80072f4:	e7eb      	b.n	80072ce <_printf_i+0x206>
 80072f6:	2500      	movs	r5, #0
 80072f8:	f104 0619 	add.w	r6, r4, #25
 80072fc:	e7f5      	b.n	80072ea <_printf_i+0x222>
 80072fe:	bf00      	nop
 8007300:	0800b14e 	.word	0x0800b14e
 8007304:	0800b15f 	.word	0x0800b15f

08007308 <_scanf_float>:
 8007308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800730c:	b087      	sub	sp, #28
 800730e:	4617      	mov	r7, r2
 8007310:	9303      	str	r3, [sp, #12]
 8007312:	688b      	ldr	r3, [r1, #8]
 8007314:	1e5a      	subs	r2, r3, #1
 8007316:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800731a:	bf81      	itttt	hi
 800731c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007320:	eb03 0b05 	addhi.w	fp, r3, r5
 8007324:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007328:	608b      	strhi	r3, [r1, #8]
 800732a:	680b      	ldr	r3, [r1, #0]
 800732c:	460a      	mov	r2, r1
 800732e:	f04f 0500 	mov.w	r5, #0
 8007332:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007336:	f842 3b1c 	str.w	r3, [r2], #28
 800733a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800733e:	4680      	mov	r8, r0
 8007340:	460c      	mov	r4, r1
 8007342:	bf98      	it	ls
 8007344:	f04f 0b00 	movls.w	fp, #0
 8007348:	9201      	str	r2, [sp, #4]
 800734a:	4616      	mov	r6, r2
 800734c:	46aa      	mov	sl, r5
 800734e:	46a9      	mov	r9, r5
 8007350:	9502      	str	r5, [sp, #8]
 8007352:	68a2      	ldr	r2, [r4, #8]
 8007354:	b152      	cbz	r2, 800736c <_scanf_float+0x64>
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	2b4e      	cmp	r3, #78	@ 0x4e
 800735c:	d864      	bhi.n	8007428 <_scanf_float+0x120>
 800735e:	2b40      	cmp	r3, #64	@ 0x40
 8007360:	d83c      	bhi.n	80073dc <_scanf_float+0xd4>
 8007362:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007366:	b2c8      	uxtb	r0, r1
 8007368:	280e      	cmp	r0, #14
 800736a:	d93a      	bls.n	80073e2 <_scanf_float+0xda>
 800736c:	f1b9 0f00 	cmp.w	r9, #0
 8007370:	d003      	beq.n	800737a <_scanf_float+0x72>
 8007372:	6823      	ldr	r3, [r4, #0]
 8007374:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007378:	6023      	str	r3, [r4, #0]
 800737a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800737e:	f1ba 0f01 	cmp.w	sl, #1
 8007382:	f200 8117 	bhi.w	80075b4 <_scanf_float+0x2ac>
 8007386:	9b01      	ldr	r3, [sp, #4]
 8007388:	429e      	cmp	r6, r3
 800738a:	f200 8108 	bhi.w	800759e <_scanf_float+0x296>
 800738e:	2001      	movs	r0, #1
 8007390:	b007      	add	sp, #28
 8007392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007396:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800739a:	2a0d      	cmp	r2, #13
 800739c:	d8e6      	bhi.n	800736c <_scanf_float+0x64>
 800739e:	a101      	add	r1, pc, #4	@ (adr r1, 80073a4 <_scanf_float+0x9c>)
 80073a0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80073a4:	080074eb 	.word	0x080074eb
 80073a8:	0800736d 	.word	0x0800736d
 80073ac:	0800736d 	.word	0x0800736d
 80073b0:	0800736d 	.word	0x0800736d
 80073b4:	0800754b 	.word	0x0800754b
 80073b8:	08007523 	.word	0x08007523
 80073bc:	0800736d 	.word	0x0800736d
 80073c0:	0800736d 	.word	0x0800736d
 80073c4:	080074f9 	.word	0x080074f9
 80073c8:	0800736d 	.word	0x0800736d
 80073cc:	0800736d 	.word	0x0800736d
 80073d0:	0800736d 	.word	0x0800736d
 80073d4:	0800736d 	.word	0x0800736d
 80073d8:	080074b1 	.word	0x080074b1
 80073dc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80073e0:	e7db      	b.n	800739a <_scanf_float+0x92>
 80073e2:	290e      	cmp	r1, #14
 80073e4:	d8c2      	bhi.n	800736c <_scanf_float+0x64>
 80073e6:	a001      	add	r0, pc, #4	@ (adr r0, 80073ec <_scanf_float+0xe4>)
 80073e8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80073ec:	080074a1 	.word	0x080074a1
 80073f0:	0800736d 	.word	0x0800736d
 80073f4:	080074a1 	.word	0x080074a1
 80073f8:	08007537 	.word	0x08007537
 80073fc:	0800736d 	.word	0x0800736d
 8007400:	08007449 	.word	0x08007449
 8007404:	08007487 	.word	0x08007487
 8007408:	08007487 	.word	0x08007487
 800740c:	08007487 	.word	0x08007487
 8007410:	08007487 	.word	0x08007487
 8007414:	08007487 	.word	0x08007487
 8007418:	08007487 	.word	0x08007487
 800741c:	08007487 	.word	0x08007487
 8007420:	08007487 	.word	0x08007487
 8007424:	08007487 	.word	0x08007487
 8007428:	2b6e      	cmp	r3, #110	@ 0x6e
 800742a:	d809      	bhi.n	8007440 <_scanf_float+0x138>
 800742c:	2b60      	cmp	r3, #96	@ 0x60
 800742e:	d8b2      	bhi.n	8007396 <_scanf_float+0x8e>
 8007430:	2b54      	cmp	r3, #84	@ 0x54
 8007432:	d07b      	beq.n	800752c <_scanf_float+0x224>
 8007434:	2b59      	cmp	r3, #89	@ 0x59
 8007436:	d199      	bne.n	800736c <_scanf_float+0x64>
 8007438:	2d07      	cmp	r5, #7
 800743a:	d197      	bne.n	800736c <_scanf_float+0x64>
 800743c:	2508      	movs	r5, #8
 800743e:	e02c      	b.n	800749a <_scanf_float+0x192>
 8007440:	2b74      	cmp	r3, #116	@ 0x74
 8007442:	d073      	beq.n	800752c <_scanf_float+0x224>
 8007444:	2b79      	cmp	r3, #121	@ 0x79
 8007446:	e7f6      	b.n	8007436 <_scanf_float+0x12e>
 8007448:	6821      	ldr	r1, [r4, #0]
 800744a:	05c8      	lsls	r0, r1, #23
 800744c:	d51b      	bpl.n	8007486 <_scanf_float+0x17e>
 800744e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007452:	6021      	str	r1, [r4, #0]
 8007454:	f109 0901 	add.w	r9, r9, #1
 8007458:	f1bb 0f00 	cmp.w	fp, #0
 800745c:	d003      	beq.n	8007466 <_scanf_float+0x15e>
 800745e:	3201      	adds	r2, #1
 8007460:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007464:	60a2      	str	r2, [r4, #8]
 8007466:	68a3      	ldr	r3, [r4, #8]
 8007468:	3b01      	subs	r3, #1
 800746a:	60a3      	str	r3, [r4, #8]
 800746c:	6923      	ldr	r3, [r4, #16]
 800746e:	3301      	adds	r3, #1
 8007470:	6123      	str	r3, [r4, #16]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	3b01      	subs	r3, #1
 8007476:	2b00      	cmp	r3, #0
 8007478:	607b      	str	r3, [r7, #4]
 800747a:	f340 8087 	ble.w	800758c <_scanf_float+0x284>
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	3301      	adds	r3, #1
 8007482:	603b      	str	r3, [r7, #0]
 8007484:	e765      	b.n	8007352 <_scanf_float+0x4a>
 8007486:	eb1a 0105 	adds.w	r1, sl, r5
 800748a:	f47f af6f 	bne.w	800736c <_scanf_float+0x64>
 800748e:	6822      	ldr	r2, [r4, #0]
 8007490:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007494:	6022      	str	r2, [r4, #0]
 8007496:	460d      	mov	r5, r1
 8007498:	468a      	mov	sl, r1
 800749a:	f806 3b01 	strb.w	r3, [r6], #1
 800749e:	e7e2      	b.n	8007466 <_scanf_float+0x15e>
 80074a0:	6822      	ldr	r2, [r4, #0]
 80074a2:	0610      	lsls	r0, r2, #24
 80074a4:	f57f af62 	bpl.w	800736c <_scanf_float+0x64>
 80074a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80074ac:	6022      	str	r2, [r4, #0]
 80074ae:	e7f4      	b.n	800749a <_scanf_float+0x192>
 80074b0:	f1ba 0f00 	cmp.w	sl, #0
 80074b4:	d10e      	bne.n	80074d4 <_scanf_float+0x1cc>
 80074b6:	f1b9 0f00 	cmp.w	r9, #0
 80074ba:	d10e      	bne.n	80074da <_scanf_float+0x1d2>
 80074bc:	6822      	ldr	r2, [r4, #0]
 80074be:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80074c2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80074c6:	d108      	bne.n	80074da <_scanf_float+0x1d2>
 80074c8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80074cc:	6022      	str	r2, [r4, #0]
 80074ce:	f04f 0a01 	mov.w	sl, #1
 80074d2:	e7e2      	b.n	800749a <_scanf_float+0x192>
 80074d4:	f1ba 0f02 	cmp.w	sl, #2
 80074d8:	d055      	beq.n	8007586 <_scanf_float+0x27e>
 80074da:	2d01      	cmp	r5, #1
 80074dc:	d002      	beq.n	80074e4 <_scanf_float+0x1dc>
 80074de:	2d04      	cmp	r5, #4
 80074e0:	f47f af44 	bne.w	800736c <_scanf_float+0x64>
 80074e4:	3501      	adds	r5, #1
 80074e6:	b2ed      	uxtb	r5, r5
 80074e8:	e7d7      	b.n	800749a <_scanf_float+0x192>
 80074ea:	f1ba 0f01 	cmp.w	sl, #1
 80074ee:	f47f af3d 	bne.w	800736c <_scanf_float+0x64>
 80074f2:	f04f 0a02 	mov.w	sl, #2
 80074f6:	e7d0      	b.n	800749a <_scanf_float+0x192>
 80074f8:	b97d      	cbnz	r5, 800751a <_scanf_float+0x212>
 80074fa:	f1b9 0f00 	cmp.w	r9, #0
 80074fe:	f47f af38 	bne.w	8007372 <_scanf_float+0x6a>
 8007502:	6822      	ldr	r2, [r4, #0]
 8007504:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007508:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800750c:	f040 8101 	bne.w	8007712 <_scanf_float+0x40a>
 8007510:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007514:	6022      	str	r2, [r4, #0]
 8007516:	2501      	movs	r5, #1
 8007518:	e7bf      	b.n	800749a <_scanf_float+0x192>
 800751a:	2d03      	cmp	r5, #3
 800751c:	d0e2      	beq.n	80074e4 <_scanf_float+0x1dc>
 800751e:	2d05      	cmp	r5, #5
 8007520:	e7de      	b.n	80074e0 <_scanf_float+0x1d8>
 8007522:	2d02      	cmp	r5, #2
 8007524:	f47f af22 	bne.w	800736c <_scanf_float+0x64>
 8007528:	2503      	movs	r5, #3
 800752a:	e7b6      	b.n	800749a <_scanf_float+0x192>
 800752c:	2d06      	cmp	r5, #6
 800752e:	f47f af1d 	bne.w	800736c <_scanf_float+0x64>
 8007532:	2507      	movs	r5, #7
 8007534:	e7b1      	b.n	800749a <_scanf_float+0x192>
 8007536:	6822      	ldr	r2, [r4, #0]
 8007538:	0591      	lsls	r1, r2, #22
 800753a:	f57f af17 	bpl.w	800736c <_scanf_float+0x64>
 800753e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007542:	6022      	str	r2, [r4, #0]
 8007544:	f8cd 9008 	str.w	r9, [sp, #8]
 8007548:	e7a7      	b.n	800749a <_scanf_float+0x192>
 800754a:	6822      	ldr	r2, [r4, #0]
 800754c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007550:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007554:	d006      	beq.n	8007564 <_scanf_float+0x25c>
 8007556:	0550      	lsls	r0, r2, #21
 8007558:	f57f af08 	bpl.w	800736c <_scanf_float+0x64>
 800755c:	f1b9 0f00 	cmp.w	r9, #0
 8007560:	f000 80d7 	beq.w	8007712 <_scanf_float+0x40a>
 8007564:	0591      	lsls	r1, r2, #22
 8007566:	bf58      	it	pl
 8007568:	9902      	ldrpl	r1, [sp, #8]
 800756a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800756e:	bf58      	it	pl
 8007570:	eba9 0101 	subpl.w	r1, r9, r1
 8007574:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007578:	bf58      	it	pl
 800757a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800757e:	6022      	str	r2, [r4, #0]
 8007580:	f04f 0900 	mov.w	r9, #0
 8007584:	e789      	b.n	800749a <_scanf_float+0x192>
 8007586:	f04f 0a03 	mov.w	sl, #3
 800758a:	e786      	b.n	800749a <_scanf_float+0x192>
 800758c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007590:	4639      	mov	r1, r7
 8007592:	4640      	mov	r0, r8
 8007594:	4798      	blx	r3
 8007596:	2800      	cmp	r0, #0
 8007598:	f43f aedb 	beq.w	8007352 <_scanf_float+0x4a>
 800759c:	e6e6      	b.n	800736c <_scanf_float+0x64>
 800759e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80075a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80075a6:	463a      	mov	r2, r7
 80075a8:	4640      	mov	r0, r8
 80075aa:	4798      	blx	r3
 80075ac:	6923      	ldr	r3, [r4, #16]
 80075ae:	3b01      	subs	r3, #1
 80075b0:	6123      	str	r3, [r4, #16]
 80075b2:	e6e8      	b.n	8007386 <_scanf_float+0x7e>
 80075b4:	1e6b      	subs	r3, r5, #1
 80075b6:	2b06      	cmp	r3, #6
 80075b8:	d824      	bhi.n	8007604 <_scanf_float+0x2fc>
 80075ba:	2d02      	cmp	r5, #2
 80075bc:	d836      	bhi.n	800762c <_scanf_float+0x324>
 80075be:	9b01      	ldr	r3, [sp, #4]
 80075c0:	429e      	cmp	r6, r3
 80075c2:	f67f aee4 	bls.w	800738e <_scanf_float+0x86>
 80075c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80075ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80075ce:	463a      	mov	r2, r7
 80075d0:	4640      	mov	r0, r8
 80075d2:	4798      	blx	r3
 80075d4:	6923      	ldr	r3, [r4, #16]
 80075d6:	3b01      	subs	r3, #1
 80075d8:	6123      	str	r3, [r4, #16]
 80075da:	e7f0      	b.n	80075be <_scanf_float+0x2b6>
 80075dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80075e0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80075e4:	463a      	mov	r2, r7
 80075e6:	4640      	mov	r0, r8
 80075e8:	4798      	blx	r3
 80075ea:	6923      	ldr	r3, [r4, #16]
 80075ec:	3b01      	subs	r3, #1
 80075ee:	6123      	str	r3, [r4, #16]
 80075f0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80075f4:	fa5f fa8a 	uxtb.w	sl, sl
 80075f8:	f1ba 0f02 	cmp.w	sl, #2
 80075fc:	d1ee      	bne.n	80075dc <_scanf_float+0x2d4>
 80075fe:	3d03      	subs	r5, #3
 8007600:	b2ed      	uxtb	r5, r5
 8007602:	1b76      	subs	r6, r6, r5
 8007604:	6823      	ldr	r3, [r4, #0]
 8007606:	05da      	lsls	r2, r3, #23
 8007608:	d530      	bpl.n	800766c <_scanf_float+0x364>
 800760a:	055b      	lsls	r3, r3, #21
 800760c:	d511      	bpl.n	8007632 <_scanf_float+0x32a>
 800760e:	9b01      	ldr	r3, [sp, #4]
 8007610:	429e      	cmp	r6, r3
 8007612:	f67f aebc 	bls.w	800738e <_scanf_float+0x86>
 8007616:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800761a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800761e:	463a      	mov	r2, r7
 8007620:	4640      	mov	r0, r8
 8007622:	4798      	blx	r3
 8007624:	6923      	ldr	r3, [r4, #16]
 8007626:	3b01      	subs	r3, #1
 8007628:	6123      	str	r3, [r4, #16]
 800762a:	e7f0      	b.n	800760e <_scanf_float+0x306>
 800762c:	46aa      	mov	sl, r5
 800762e:	46b3      	mov	fp, r6
 8007630:	e7de      	b.n	80075f0 <_scanf_float+0x2e8>
 8007632:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007636:	6923      	ldr	r3, [r4, #16]
 8007638:	2965      	cmp	r1, #101	@ 0x65
 800763a:	f103 33ff 	add.w	r3, r3, #4294967295
 800763e:	f106 35ff 	add.w	r5, r6, #4294967295
 8007642:	6123      	str	r3, [r4, #16]
 8007644:	d00c      	beq.n	8007660 <_scanf_float+0x358>
 8007646:	2945      	cmp	r1, #69	@ 0x45
 8007648:	d00a      	beq.n	8007660 <_scanf_float+0x358>
 800764a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800764e:	463a      	mov	r2, r7
 8007650:	4640      	mov	r0, r8
 8007652:	4798      	blx	r3
 8007654:	6923      	ldr	r3, [r4, #16]
 8007656:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800765a:	3b01      	subs	r3, #1
 800765c:	1eb5      	subs	r5, r6, #2
 800765e:	6123      	str	r3, [r4, #16]
 8007660:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007664:	463a      	mov	r2, r7
 8007666:	4640      	mov	r0, r8
 8007668:	4798      	blx	r3
 800766a:	462e      	mov	r6, r5
 800766c:	6822      	ldr	r2, [r4, #0]
 800766e:	f012 0210 	ands.w	r2, r2, #16
 8007672:	d001      	beq.n	8007678 <_scanf_float+0x370>
 8007674:	2000      	movs	r0, #0
 8007676:	e68b      	b.n	8007390 <_scanf_float+0x88>
 8007678:	7032      	strb	r2, [r6, #0]
 800767a:	6823      	ldr	r3, [r4, #0]
 800767c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007680:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007684:	d11a      	bne.n	80076bc <_scanf_float+0x3b4>
 8007686:	9b02      	ldr	r3, [sp, #8]
 8007688:	454b      	cmp	r3, r9
 800768a:	eba3 0209 	sub.w	r2, r3, r9
 800768e:	d121      	bne.n	80076d4 <_scanf_float+0x3cc>
 8007690:	9901      	ldr	r1, [sp, #4]
 8007692:	2200      	movs	r2, #0
 8007694:	4640      	mov	r0, r8
 8007696:	f002 fc41 	bl	8009f1c <_strtod_r>
 800769a:	9b03      	ldr	r3, [sp, #12]
 800769c:	6821      	ldr	r1, [r4, #0]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f011 0f02 	tst.w	r1, #2
 80076a4:	f103 0204 	add.w	r2, r3, #4
 80076a8:	d01f      	beq.n	80076ea <_scanf_float+0x3e2>
 80076aa:	9903      	ldr	r1, [sp, #12]
 80076ac:	600a      	str	r2, [r1, #0]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	ed83 0b00 	vstr	d0, [r3]
 80076b4:	68e3      	ldr	r3, [r4, #12]
 80076b6:	3301      	adds	r3, #1
 80076b8:	60e3      	str	r3, [r4, #12]
 80076ba:	e7db      	b.n	8007674 <_scanf_float+0x36c>
 80076bc:	9b04      	ldr	r3, [sp, #16]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d0e6      	beq.n	8007690 <_scanf_float+0x388>
 80076c2:	9905      	ldr	r1, [sp, #20]
 80076c4:	230a      	movs	r3, #10
 80076c6:	3101      	adds	r1, #1
 80076c8:	4640      	mov	r0, r8
 80076ca:	f002 fca7 	bl	800a01c <_strtol_r>
 80076ce:	9b04      	ldr	r3, [sp, #16]
 80076d0:	9e05      	ldr	r6, [sp, #20]
 80076d2:	1ac2      	subs	r2, r0, r3
 80076d4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80076d8:	429e      	cmp	r6, r3
 80076da:	bf28      	it	cs
 80076dc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80076e0:	490d      	ldr	r1, [pc, #52]	@ (8007718 <_scanf_float+0x410>)
 80076e2:	4630      	mov	r0, r6
 80076e4:	f000 f94e 	bl	8007984 <siprintf>
 80076e8:	e7d2      	b.n	8007690 <_scanf_float+0x388>
 80076ea:	f011 0f04 	tst.w	r1, #4
 80076ee:	9903      	ldr	r1, [sp, #12]
 80076f0:	600a      	str	r2, [r1, #0]
 80076f2:	d1dc      	bne.n	80076ae <_scanf_float+0x3a6>
 80076f4:	eeb4 0b40 	vcmp.f64	d0, d0
 80076f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076fc:	681d      	ldr	r5, [r3, #0]
 80076fe:	d705      	bvc.n	800770c <_scanf_float+0x404>
 8007700:	4806      	ldr	r0, [pc, #24]	@ (800771c <_scanf_float+0x414>)
 8007702:	f000 fac5 	bl	8007c90 <nanf>
 8007706:	ed85 0a00 	vstr	s0, [r5]
 800770a:	e7d3      	b.n	80076b4 <_scanf_float+0x3ac>
 800770c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8007710:	e7f9      	b.n	8007706 <_scanf_float+0x3fe>
 8007712:	f04f 0900 	mov.w	r9, #0
 8007716:	e630      	b.n	800737a <_scanf_float+0x72>
 8007718:	0800b170 	.word	0x0800b170
 800771c:	0800b505 	.word	0x0800b505

08007720 <std>:
 8007720:	2300      	movs	r3, #0
 8007722:	b510      	push	{r4, lr}
 8007724:	4604      	mov	r4, r0
 8007726:	e9c0 3300 	strd	r3, r3, [r0]
 800772a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800772e:	6083      	str	r3, [r0, #8]
 8007730:	8181      	strh	r1, [r0, #12]
 8007732:	6643      	str	r3, [r0, #100]	@ 0x64
 8007734:	81c2      	strh	r2, [r0, #14]
 8007736:	6183      	str	r3, [r0, #24]
 8007738:	4619      	mov	r1, r3
 800773a:	2208      	movs	r2, #8
 800773c:	305c      	adds	r0, #92	@ 0x5c
 800773e:	f000 fa19 	bl	8007b74 <memset>
 8007742:	4b0d      	ldr	r3, [pc, #52]	@ (8007778 <std+0x58>)
 8007744:	6263      	str	r3, [r4, #36]	@ 0x24
 8007746:	4b0d      	ldr	r3, [pc, #52]	@ (800777c <std+0x5c>)
 8007748:	62a3      	str	r3, [r4, #40]	@ 0x28
 800774a:	4b0d      	ldr	r3, [pc, #52]	@ (8007780 <std+0x60>)
 800774c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800774e:	4b0d      	ldr	r3, [pc, #52]	@ (8007784 <std+0x64>)
 8007750:	6323      	str	r3, [r4, #48]	@ 0x30
 8007752:	4b0d      	ldr	r3, [pc, #52]	@ (8007788 <std+0x68>)
 8007754:	6224      	str	r4, [r4, #32]
 8007756:	429c      	cmp	r4, r3
 8007758:	d006      	beq.n	8007768 <std+0x48>
 800775a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800775e:	4294      	cmp	r4, r2
 8007760:	d002      	beq.n	8007768 <std+0x48>
 8007762:	33d0      	adds	r3, #208	@ 0xd0
 8007764:	429c      	cmp	r4, r3
 8007766:	d105      	bne.n	8007774 <std+0x54>
 8007768:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800776c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007770:	f000 ba7c 	b.w	8007c6c <__retarget_lock_init_recursive>
 8007774:	bd10      	pop	{r4, pc}
 8007776:	bf00      	nop
 8007778:	080079c5 	.word	0x080079c5
 800777c:	080079e7 	.word	0x080079e7
 8007780:	08007a1f 	.word	0x08007a1f
 8007784:	08007a43 	.word	0x08007a43
 8007788:	240043b4 	.word	0x240043b4

0800778c <stdio_exit_handler>:
 800778c:	4a02      	ldr	r2, [pc, #8]	@ (8007798 <stdio_exit_handler+0xc>)
 800778e:	4903      	ldr	r1, [pc, #12]	@ (800779c <stdio_exit_handler+0x10>)
 8007790:	4803      	ldr	r0, [pc, #12]	@ (80077a0 <stdio_exit_handler+0x14>)
 8007792:	f000 b869 	b.w	8007868 <_fwalk_sglue>
 8007796:	bf00      	nop
 8007798:	24000014 	.word	0x24000014
 800779c:	0800a65d 	.word	0x0800a65d
 80077a0:	24000024 	.word	0x24000024

080077a4 <cleanup_stdio>:
 80077a4:	6841      	ldr	r1, [r0, #4]
 80077a6:	4b0c      	ldr	r3, [pc, #48]	@ (80077d8 <cleanup_stdio+0x34>)
 80077a8:	4299      	cmp	r1, r3
 80077aa:	b510      	push	{r4, lr}
 80077ac:	4604      	mov	r4, r0
 80077ae:	d001      	beq.n	80077b4 <cleanup_stdio+0x10>
 80077b0:	f002 ff54 	bl	800a65c <_fflush_r>
 80077b4:	68a1      	ldr	r1, [r4, #8]
 80077b6:	4b09      	ldr	r3, [pc, #36]	@ (80077dc <cleanup_stdio+0x38>)
 80077b8:	4299      	cmp	r1, r3
 80077ba:	d002      	beq.n	80077c2 <cleanup_stdio+0x1e>
 80077bc:	4620      	mov	r0, r4
 80077be:	f002 ff4d 	bl	800a65c <_fflush_r>
 80077c2:	68e1      	ldr	r1, [r4, #12]
 80077c4:	4b06      	ldr	r3, [pc, #24]	@ (80077e0 <cleanup_stdio+0x3c>)
 80077c6:	4299      	cmp	r1, r3
 80077c8:	d004      	beq.n	80077d4 <cleanup_stdio+0x30>
 80077ca:	4620      	mov	r0, r4
 80077cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077d0:	f002 bf44 	b.w	800a65c <_fflush_r>
 80077d4:	bd10      	pop	{r4, pc}
 80077d6:	bf00      	nop
 80077d8:	240043b4 	.word	0x240043b4
 80077dc:	2400441c 	.word	0x2400441c
 80077e0:	24004484 	.word	0x24004484

080077e4 <global_stdio_init.part.0>:
 80077e4:	b510      	push	{r4, lr}
 80077e6:	4b0b      	ldr	r3, [pc, #44]	@ (8007814 <global_stdio_init.part.0+0x30>)
 80077e8:	4c0b      	ldr	r4, [pc, #44]	@ (8007818 <global_stdio_init.part.0+0x34>)
 80077ea:	4a0c      	ldr	r2, [pc, #48]	@ (800781c <global_stdio_init.part.0+0x38>)
 80077ec:	601a      	str	r2, [r3, #0]
 80077ee:	4620      	mov	r0, r4
 80077f0:	2200      	movs	r2, #0
 80077f2:	2104      	movs	r1, #4
 80077f4:	f7ff ff94 	bl	8007720 <std>
 80077f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80077fc:	2201      	movs	r2, #1
 80077fe:	2109      	movs	r1, #9
 8007800:	f7ff ff8e 	bl	8007720 <std>
 8007804:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007808:	2202      	movs	r2, #2
 800780a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800780e:	2112      	movs	r1, #18
 8007810:	f7ff bf86 	b.w	8007720 <std>
 8007814:	240044ec 	.word	0x240044ec
 8007818:	240043b4 	.word	0x240043b4
 800781c:	0800778d 	.word	0x0800778d

08007820 <__sfp_lock_acquire>:
 8007820:	4801      	ldr	r0, [pc, #4]	@ (8007828 <__sfp_lock_acquire+0x8>)
 8007822:	f000 ba24 	b.w	8007c6e <__retarget_lock_acquire_recursive>
 8007826:	bf00      	nop
 8007828:	240044f5 	.word	0x240044f5

0800782c <__sfp_lock_release>:
 800782c:	4801      	ldr	r0, [pc, #4]	@ (8007834 <__sfp_lock_release+0x8>)
 800782e:	f000 ba1f 	b.w	8007c70 <__retarget_lock_release_recursive>
 8007832:	bf00      	nop
 8007834:	240044f5 	.word	0x240044f5

08007838 <__sinit>:
 8007838:	b510      	push	{r4, lr}
 800783a:	4604      	mov	r4, r0
 800783c:	f7ff fff0 	bl	8007820 <__sfp_lock_acquire>
 8007840:	6a23      	ldr	r3, [r4, #32]
 8007842:	b11b      	cbz	r3, 800784c <__sinit+0x14>
 8007844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007848:	f7ff bff0 	b.w	800782c <__sfp_lock_release>
 800784c:	4b04      	ldr	r3, [pc, #16]	@ (8007860 <__sinit+0x28>)
 800784e:	6223      	str	r3, [r4, #32]
 8007850:	4b04      	ldr	r3, [pc, #16]	@ (8007864 <__sinit+0x2c>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d1f5      	bne.n	8007844 <__sinit+0xc>
 8007858:	f7ff ffc4 	bl	80077e4 <global_stdio_init.part.0>
 800785c:	e7f2      	b.n	8007844 <__sinit+0xc>
 800785e:	bf00      	nop
 8007860:	080077a5 	.word	0x080077a5
 8007864:	240044ec 	.word	0x240044ec

08007868 <_fwalk_sglue>:
 8007868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800786c:	4607      	mov	r7, r0
 800786e:	4688      	mov	r8, r1
 8007870:	4614      	mov	r4, r2
 8007872:	2600      	movs	r6, #0
 8007874:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007878:	f1b9 0901 	subs.w	r9, r9, #1
 800787c:	d505      	bpl.n	800788a <_fwalk_sglue+0x22>
 800787e:	6824      	ldr	r4, [r4, #0]
 8007880:	2c00      	cmp	r4, #0
 8007882:	d1f7      	bne.n	8007874 <_fwalk_sglue+0xc>
 8007884:	4630      	mov	r0, r6
 8007886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800788a:	89ab      	ldrh	r3, [r5, #12]
 800788c:	2b01      	cmp	r3, #1
 800788e:	d907      	bls.n	80078a0 <_fwalk_sglue+0x38>
 8007890:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007894:	3301      	adds	r3, #1
 8007896:	d003      	beq.n	80078a0 <_fwalk_sglue+0x38>
 8007898:	4629      	mov	r1, r5
 800789a:	4638      	mov	r0, r7
 800789c:	47c0      	blx	r8
 800789e:	4306      	orrs	r6, r0
 80078a0:	3568      	adds	r5, #104	@ 0x68
 80078a2:	e7e9      	b.n	8007878 <_fwalk_sglue+0x10>

080078a4 <iprintf>:
 80078a4:	b40f      	push	{r0, r1, r2, r3}
 80078a6:	b507      	push	{r0, r1, r2, lr}
 80078a8:	4906      	ldr	r1, [pc, #24]	@ (80078c4 <iprintf+0x20>)
 80078aa:	ab04      	add	r3, sp, #16
 80078ac:	6808      	ldr	r0, [r1, #0]
 80078ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80078b2:	6881      	ldr	r1, [r0, #8]
 80078b4:	9301      	str	r3, [sp, #4]
 80078b6:	f002 fd35 	bl	800a324 <_vfiprintf_r>
 80078ba:	b003      	add	sp, #12
 80078bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80078c0:	b004      	add	sp, #16
 80078c2:	4770      	bx	lr
 80078c4:	24000020 	.word	0x24000020

080078c8 <_puts_r>:
 80078c8:	6a03      	ldr	r3, [r0, #32]
 80078ca:	b570      	push	{r4, r5, r6, lr}
 80078cc:	6884      	ldr	r4, [r0, #8]
 80078ce:	4605      	mov	r5, r0
 80078d0:	460e      	mov	r6, r1
 80078d2:	b90b      	cbnz	r3, 80078d8 <_puts_r+0x10>
 80078d4:	f7ff ffb0 	bl	8007838 <__sinit>
 80078d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80078da:	07db      	lsls	r3, r3, #31
 80078dc:	d405      	bmi.n	80078ea <_puts_r+0x22>
 80078de:	89a3      	ldrh	r3, [r4, #12]
 80078e0:	0598      	lsls	r0, r3, #22
 80078e2:	d402      	bmi.n	80078ea <_puts_r+0x22>
 80078e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078e6:	f000 f9c2 	bl	8007c6e <__retarget_lock_acquire_recursive>
 80078ea:	89a3      	ldrh	r3, [r4, #12]
 80078ec:	0719      	lsls	r1, r3, #28
 80078ee:	d502      	bpl.n	80078f6 <_puts_r+0x2e>
 80078f0:	6923      	ldr	r3, [r4, #16]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d135      	bne.n	8007962 <_puts_r+0x9a>
 80078f6:	4621      	mov	r1, r4
 80078f8:	4628      	mov	r0, r5
 80078fa:	f000 f8e5 	bl	8007ac8 <__swsetup_r>
 80078fe:	b380      	cbz	r0, 8007962 <_puts_r+0x9a>
 8007900:	f04f 35ff 	mov.w	r5, #4294967295
 8007904:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007906:	07da      	lsls	r2, r3, #31
 8007908:	d405      	bmi.n	8007916 <_puts_r+0x4e>
 800790a:	89a3      	ldrh	r3, [r4, #12]
 800790c:	059b      	lsls	r3, r3, #22
 800790e:	d402      	bmi.n	8007916 <_puts_r+0x4e>
 8007910:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007912:	f000 f9ad 	bl	8007c70 <__retarget_lock_release_recursive>
 8007916:	4628      	mov	r0, r5
 8007918:	bd70      	pop	{r4, r5, r6, pc}
 800791a:	2b00      	cmp	r3, #0
 800791c:	da04      	bge.n	8007928 <_puts_r+0x60>
 800791e:	69a2      	ldr	r2, [r4, #24]
 8007920:	429a      	cmp	r2, r3
 8007922:	dc17      	bgt.n	8007954 <_puts_r+0x8c>
 8007924:	290a      	cmp	r1, #10
 8007926:	d015      	beq.n	8007954 <_puts_r+0x8c>
 8007928:	6823      	ldr	r3, [r4, #0]
 800792a:	1c5a      	adds	r2, r3, #1
 800792c:	6022      	str	r2, [r4, #0]
 800792e:	7019      	strb	r1, [r3, #0]
 8007930:	68a3      	ldr	r3, [r4, #8]
 8007932:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007936:	3b01      	subs	r3, #1
 8007938:	60a3      	str	r3, [r4, #8]
 800793a:	2900      	cmp	r1, #0
 800793c:	d1ed      	bne.n	800791a <_puts_r+0x52>
 800793e:	2b00      	cmp	r3, #0
 8007940:	da11      	bge.n	8007966 <_puts_r+0x9e>
 8007942:	4622      	mov	r2, r4
 8007944:	210a      	movs	r1, #10
 8007946:	4628      	mov	r0, r5
 8007948:	f000 f87f 	bl	8007a4a <__swbuf_r>
 800794c:	3001      	adds	r0, #1
 800794e:	d0d7      	beq.n	8007900 <_puts_r+0x38>
 8007950:	250a      	movs	r5, #10
 8007952:	e7d7      	b.n	8007904 <_puts_r+0x3c>
 8007954:	4622      	mov	r2, r4
 8007956:	4628      	mov	r0, r5
 8007958:	f000 f877 	bl	8007a4a <__swbuf_r>
 800795c:	3001      	adds	r0, #1
 800795e:	d1e7      	bne.n	8007930 <_puts_r+0x68>
 8007960:	e7ce      	b.n	8007900 <_puts_r+0x38>
 8007962:	3e01      	subs	r6, #1
 8007964:	e7e4      	b.n	8007930 <_puts_r+0x68>
 8007966:	6823      	ldr	r3, [r4, #0]
 8007968:	1c5a      	adds	r2, r3, #1
 800796a:	6022      	str	r2, [r4, #0]
 800796c:	220a      	movs	r2, #10
 800796e:	701a      	strb	r2, [r3, #0]
 8007970:	e7ee      	b.n	8007950 <_puts_r+0x88>
	...

08007974 <puts>:
 8007974:	4b02      	ldr	r3, [pc, #8]	@ (8007980 <puts+0xc>)
 8007976:	4601      	mov	r1, r0
 8007978:	6818      	ldr	r0, [r3, #0]
 800797a:	f7ff bfa5 	b.w	80078c8 <_puts_r>
 800797e:	bf00      	nop
 8007980:	24000020 	.word	0x24000020

08007984 <siprintf>:
 8007984:	b40e      	push	{r1, r2, r3}
 8007986:	b500      	push	{lr}
 8007988:	b09c      	sub	sp, #112	@ 0x70
 800798a:	ab1d      	add	r3, sp, #116	@ 0x74
 800798c:	9002      	str	r0, [sp, #8]
 800798e:	9006      	str	r0, [sp, #24]
 8007990:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007994:	4809      	ldr	r0, [pc, #36]	@ (80079bc <siprintf+0x38>)
 8007996:	9107      	str	r1, [sp, #28]
 8007998:	9104      	str	r1, [sp, #16]
 800799a:	4909      	ldr	r1, [pc, #36]	@ (80079c0 <siprintf+0x3c>)
 800799c:	f853 2b04 	ldr.w	r2, [r3], #4
 80079a0:	9105      	str	r1, [sp, #20]
 80079a2:	6800      	ldr	r0, [r0, #0]
 80079a4:	9301      	str	r3, [sp, #4]
 80079a6:	a902      	add	r1, sp, #8
 80079a8:	f002 fb96 	bl	800a0d8 <_svfiprintf_r>
 80079ac:	9b02      	ldr	r3, [sp, #8]
 80079ae:	2200      	movs	r2, #0
 80079b0:	701a      	strb	r2, [r3, #0]
 80079b2:	b01c      	add	sp, #112	@ 0x70
 80079b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80079b8:	b003      	add	sp, #12
 80079ba:	4770      	bx	lr
 80079bc:	24000020 	.word	0x24000020
 80079c0:	ffff0208 	.word	0xffff0208

080079c4 <__sread>:
 80079c4:	b510      	push	{r4, lr}
 80079c6:	460c      	mov	r4, r1
 80079c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079cc:	f000 f900 	bl	8007bd0 <_read_r>
 80079d0:	2800      	cmp	r0, #0
 80079d2:	bfab      	itete	ge
 80079d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80079d6:	89a3      	ldrhlt	r3, [r4, #12]
 80079d8:	181b      	addge	r3, r3, r0
 80079da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80079de:	bfac      	ite	ge
 80079e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80079e2:	81a3      	strhlt	r3, [r4, #12]
 80079e4:	bd10      	pop	{r4, pc}

080079e6 <__swrite>:
 80079e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079ea:	461f      	mov	r7, r3
 80079ec:	898b      	ldrh	r3, [r1, #12]
 80079ee:	05db      	lsls	r3, r3, #23
 80079f0:	4605      	mov	r5, r0
 80079f2:	460c      	mov	r4, r1
 80079f4:	4616      	mov	r6, r2
 80079f6:	d505      	bpl.n	8007a04 <__swrite+0x1e>
 80079f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079fc:	2302      	movs	r3, #2
 80079fe:	2200      	movs	r2, #0
 8007a00:	f000 f8d4 	bl	8007bac <_lseek_r>
 8007a04:	89a3      	ldrh	r3, [r4, #12]
 8007a06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007a0e:	81a3      	strh	r3, [r4, #12]
 8007a10:	4632      	mov	r2, r6
 8007a12:	463b      	mov	r3, r7
 8007a14:	4628      	mov	r0, r5
 8007a16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a1a:	f000 b8eb 	b.w	8007bf4 <_write_r>

08007a1e <__sseek>:
 8007a1e:	b510      	push	{r4, lr}
 8007a20:	460c      	mov	r4, r1
 8007a22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a26:	f000 f8c1 	bl	8007bac <_lseek_r>
 8007a2a:	1c43      	adds	r3, r0, #1
 8007a2c:	89a3      	ldrh	r3, [r4, #12]
 8007a2e:	bf15      	itete	ne
 8007a30:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007a32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007a36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007a3a:	81a3      	strheq	r3, [r4, #12]
 8007a3c:	bf18      	it	ne
 8007a3e:	81a3      	strhne	r3, [r4, #12]
 8007a40:	bd10      	pop	{r4, pc}

08007a42 <__sclose>:
 8007a42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a46:	f000 b8a1 	b.w	8007b8c <_close_r>

08007a4a <__swbuf_r>:
 8007a4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a4c:	460e      	mov	r6, r1
 8007a4e:	4614      	mov	r4, r2
 8007a50:	4605      	mov	r5, r0
 8007a52:	b118      	cbz	r0, 8007a5c <__swbuf_r+0x12>
 8007a54:	6a03      	ldr	r3, [r0, #32]
 8007a56:	b90b      	cbnz	r3, 8007a5c <__swbuf_r+0x12>
 8007a58:	f7ff feee 	bl	8007838 <__sinit>
 8007a5c:	69a3      	ldr	r3, [r4, #24]
 8007a5e:	60a3      	str	r3, [r4, #8]
 8007a60:	89a3      	ldrh	r3, [r4, #12]
 8007a62:	071a      	lsls	r2, r3, #28
 8007a64:	d501      	bpl.n	8007a6a <__swbuf_r+0x20>
 8007a66:	6923      	ldr	r3, [r4, #16]
 8007a68:	b943      	cbnz	r3, 8007a7c <__swbuf_r+0x32>
 8007a6a:	4621      	mov	r1, r4
 8007a6c:	4628      	mov	r0, r5
 8007a6e:	f000 f82b 	bl	8007ac8 <__swsetup_r>
 8007a72:	b118      	cbz	r0, 8007a7c <__swbuf_r+0x32>
 8007a74:	f04f 37ff 	mov.w	r7, #4294967295
 8007a78:	4638      	mov	r0, r7
 8007a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a7c:	6823      	ldr	r3, [r4, #0]
 8007a7e:	6922      	ldr	r2, [r4, #16]
 8007a80:	1a98      	subs	r0, r3, r2
 8007a82:	6963      	ldr	r3, [r4, #20]
 8007a84:	b2f6      	uxtb	r6, r6
 8007a86:	4283      	cmp	r3, r0
 8007a88:	4637      	mov	r7, r6
 8007a8a:	dc05      	bgt.n	8007a98 <__swbuf_r+0x4e>
 8007a8c:	4621      	mov	r1, r4
 8007a8e:	4628      	mov	r0, r5
 8007a90:	f002 fde4 	bl	800a65c <_fflush_r>
 8007a94:	2800      	cmp	r0, #0
 8007a96:	d1ed      	bne.n	8007a74 <__swbuf_r+0x2a>
 8007a98:	68a3      	ldr	r3, [r4, #8]
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	60a3      	str	r3, [r4, #8]
 8007a9e:	6823      	ldr	r3, [r4, #0]
 8007aa0:	1c5a      	adds	r2, r3, #1
 8007aa2:	6022      	str	r2, [r4, #0]
 8007aa4:	701e      	strb	r6, [r3, #0]
 8007aa6:	6962      	ldr	r2, [r4, #20]
 8007aa8:	1c43      	adds	r3, r0, #1
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d004      	beq.n	8007ab8 <__swbuf_r+0x6e>
 8007aae:	89a3      	ldrh	r3, [r4, #12]
 8007ab0:	07db      	lsls	r3, r3, #31
 8007ab2:	d5e1      	bpl.n	8007a78 <__swbuf_r+0x2e>
 8007ab4:	2e0a      	cmp	r6, #10
 8007ab6:	d1df      	bne.n	8007a78 <__swbuf_r+0x2e>
 8007ab8:	4621      	mov	r1, r4
 8007aba:	4628      	mov	r0, r5
 8007abc:	f002 fdce 	bl	800a65c <_fflush_r>
 8007ac0:	2800      	cmp	r0, #0
 8007ac2:	d0d9      	beq.n	8007a78 <__swbuf_r+0x2e>
 8007ac4:	e7d6      	b.n	8007a74 <__swbuf_r+0x2a>
	...

08007ac8 <__swsetup_r>:
 8007ac8:	b538      	push	{r3, r4, r5, lr}
 8007aca:	4b29      	ldr	r3, [pc, #164]	@ (8007b70 <__swsetup_r+0xa8>)
 8007acc:	4605      	mov	r5, r0
 8007ace:	6818      	ldr	r0, [r3, #0]
 8007ad0:	460c      	mov	r4, r1
 8007ad2:	b118      	cbz	r0, 8007adc <__swsetup_r+0x14>
 8007ad4:	6a03      	ldr	r3, [r0, #32]
 8007ad6:	b90b      	cbnz	r3, 8007adc <__swsetup_r+0x14>
 8007ad8:	f7ff feae 	bl	8007838 <__sinit>
 8007adc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ae0:	0719      	lsls	r1, r3, #28
 8007ae2:	d422      	bmi.n	8007b2a <__swsetup_r+0x62>
 8007ae4:	06da      	lsls	r2, r3, #27
 8007ae6:	d407      	bmi.n	8007af8 <__swsetup_r+0x30>
 8007ae8:	2209      	movs	r2, #9
 8007aea:	602a      	str	r2, [r5, #0]
 8007aec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007af0:	81a3      	strh	r3, [r4, #12]
 8007af2:	f04f 30ff 	mov.w	r0, #4294967295
 8007af6:	e033      	b.n	8007b60 <__swsetup_r+0x98>
 8007af8:	0758      	lsls	r0, r3, #29
 8007afa:	d512      	bpl.n	8007b22 <__swsetup_r+0x5a>
 8007afc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007afe:	b141      	cbz	r1, 8007b12 <__swsetup_r+0x4a>
 8007b00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007b04:	4299      	cmp	r1, r3
 8007b06:	d002      	beq.n	8007b0e <__swsetup_r+0x46>
 8007b08:	4628      	mov	r0, r5
 8007b0a:	f000 fea7 	bl	800885c <_free_r>
 8007b0e:	2300      	movs	r3, #0
 8007b10:	6363      	str	r3, [r4, #52]	@ 0x34
 8007b12:	89a3      	ldrh	r3, [r4, #12]
 8007b14:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007b18:	81a3      	strh	r3, [r4, #12]
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	6063      	str	r3, [r4, #4]
 8007b1e:	6923      	ldr	r3, [r4, #16]
 8007b20:	6023      	str	r3, [r4, #0]
 8007b22:	89a3      	ldrh	r3, [r4, #12]
 8007b24:	f043 0308 	orr.w	r3, r3, #8
 8007b28:	81a3      	strh	r3, [r4, #12]
 8007b2a:	6923      	ldr	r3, [r4, #16]
 8007b2c:	b94b      	cbnz	r3, 8007b42 <__swsetup_r+0x7a>
 8007b2e:	89a3      	ldrh	r3, [r4, #12]
 8007b30:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007b34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b38:	d003      	beq.n	8007b42 <__swsetup_r+0x7a>
 8007b3a:	4621      	mov	r1, r4
 8007b3c:	4628      	mov	r0, r5
 8007b3e:	f002 fddb 	bl	800a6f8 <__smakebuf_r>
 8007b42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b46:	f013 0201 	ands.w	r2, r3, #1
 8007b4a:	d00a      	beq.n	8007b62 <__swsetup_r+0x9a>
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	60a2      	str	r2, [r4, #8]
 8007b50:	6962      	ldr	r2, [r4, #20]
 8007b52:	4252      	negs	r2, r2
 8007b54:	61a2      	str	r2, [r4, #24]
 8007b56:	6922      	ldr	r2, [r4, #16]
 8007b58:	b942      	cbnz	r2, 8007b6c <__swsetup_r+0xa4>
 8007b5a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007b5e:	d1c5      	bne.n	8007aec <__swsetup_r+0x24>
 8007b60:	bd38      	pop	{r3, r4, r5, pc}
 8007b62:	0799      	lsls	r1, r3, #30
 8007b64:	bf58      	it	pl
 8007b66:	6962      	ldrpl	r2, [r4, #20]
 8007b68:	60a2      	str	r2, [r4, #8]
 8007b6a:	e7f4      	b.n	8007b56 <__swsetup_r+0x8e>
 8007b6c:	2000      	movs	r0, #0
 8007b6e:	e7f7      	b.n	8007b60 <__swsetup_r+0x98>
 8007b70:	24000020 	.word	0x24000020

08007b74 <memset>:
 8007b74:	4402      	add	r2, r0
 8007b76:	4603      	mov	r3, r0
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d100      	bne.n	8007b7e <memset+0xa>
 8007b7c:	4770      	bx	lr
 8007b7e:	f803 1b01 	strb.w	r1, [r3], #1
 8007b82:	e7f9      	b.n	8007b78 <memset+0x4>

08007b84 <_localeconv_r>:
 8007b84:	4800      	ldr	r0, [pc, #0]	@ (8007b88 <_localeconv_r+0x4>)
 8007b86:	4770      	bx	lr
 8007b88:	24000160 	.word	0x24000160

08007b8c <_close_r>:
 8007b8c:	b538      	push	{r3, r4, r5, lr}
 8007b8e:	4d06      	ldr	r5, [pc, #24]	@ (8007ba8 <_close_r+0x1c>)
 8007b90:	2300      	movs	r3, #0
 8007b92:	4604      	mov	r4, r0
 8007b94:	4608      	mov	r0, r1
 8007b96:	602b      	str	r3, [r5, #0]
 8007b98:	f7f9 f92a 	bl	8000df0 <_close>
 8007b9c:	1c43      	adds	r3, r0, #1
 8007b9e:	d102      	bne.n	8007ba6 <_close_r+0x1a>
 8007ba0:	682b      	ldr	r3, [r5, #0]
 8007ba2:	b103      	cbz	r3, 8007ba6 <_close_r+0x1a>
 8007ba4:	6023      	str	r3, [r4, #0]
 8007ba6:	bd38      	pop	{r3, r4, r5, pc}
 8007ba8:	240044f0 	.word	0x240044f0

08007bac <_lseek_r>:
 8007bac:	b538      	push	{r3, r4, r5, lr}
 8007bae:	4d07      	ldr	r5, [pc, #28]	@ (8007bcc <_lseek_r+0x20>)
 8007bb0:	4604      	mov	r4, r0
 8007bb2:	4608      	mov	r0, r1
 8007bb4:	4611      	mov	r1, r2
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	602a      	str	r2, [r5, #0]
 8007bba:	461a      	mov	r2, r3
 8007bbc:	f7f9 f93f 	bl	8000e3e <_lseek>
 8007bc0:	1c43      	adds	r3, r0, #1
 8007bc2:	d102      	bne.n	8007bca <_lseek_r+0x1e>
 8007bc4:	682b      	ldr	r3, [r5, #0]
 8007bc6:	b103      	cbz	r3, 8007bca <_lseek_r+0x1e>
 8007bc8:	6023      	str	r3, [r4, #0]
 8007bca:	bd38      	pop	{r3, r4, r5, pc}
 8007bcc:	240044f0 	.word	0x240044f0

08007bd0 <_read_r>:
 8007bd0:	b538      	push	{r3, r4, r5, lr}
 8007bd2:	4d07      	ldr	r5, [pc, #28]	@ (8007bf0 <_read_r+0x20>)
 8007bd4:	4604      	mov	r4, r0
 8007bd6:	4608      	mov	r0, r1
 8007bd8:	4611      	mov	r1, r2
 8007bda:	2200      	movs	r2, #0
 8007bdc:	602a      	str	r2, [r5, #0]
 8007bde:	461a      	mov	r2, r3
 8007be0:	f7f9 f8cd 	bl	8000d7e <_read>
 8007be4:	1c43      	adds	r3, r0, #1
 8007be6:	d102      	bne.n	8007bee <_read_r+0x1e>
 8007be8:	682b      	ldr	r3, [r5, #0]
 8007bea:	b103      	cbz	r3, 8007bee <_read_r+0x1e>
 8007bec:	6023      	str	r3, [r4, #0]
 8007bee:	bd38      	pop	{r3, r4, r5, pc}
 8007bf0:	240044f0 	.word	0x240044f0

08007bf4 <_write_r>:
 8007bf4:	b538      	push	{r3, r4, r5, lr}
 8007bf6:	4d07      	ldr	r5, [pc, #28]	@ (8007c14 <_write_r+0x20>)
 8007bf8:	4604      	mov	r4, r0
 8007bfa:	4608      	mov	r0, r1
 8007bfc:	4611      	mov	r1, r2
 8007bfe:	2200      	movs	r2, #0
 8007c00:	602a      	str	r2, [r5, #0]
 8007c02:	461a      	mov	r2, r3
 8007c04:	f7f9 f8d8 	bl	8000db8 <_write>
 8007c08:	1c43      	adds	r3, r0, #1
 8007c0a:	d102      	bne.n	8007c12 <_write_r+0x1e>
 8007c0c:	682b      	ldr	r3, [r5, #0]
 8007c0e:	b103      	cbz	r3, 8007c12 <_write_r+0x1e>
 8007c10:	6023      	str	r3, [r4, #0]
 8007c12:	bd38      	pop	{r3, r4, r5, pc}
 8007c14:	240044f0 	.word	0x240044f0

08007c18 <__errno>:
 8007c18:	4b01      	ldr	r3, [pc, #4]	@ (8007c20 <__errno+0x8>)
 8007c1a:	6818      	ldr	r0, [r3, #0]
 8007c1c:	4770      	bx	lr
 8007c1e:	bf00      	nop
 8007c20:	24000020 	.word	0x24000020

08007c24 <__libc_init_array>:
 8007c24:	b570      	push	{r4, r5, r6, lr}
 8007c26:	4d0d      	ldr	r5, [pc, #52]	@ (8007c5c <__libc_init_array+0x38>)
 8007c28:	4c0d      	ldr	r4, [pc, #52]	@ (8007c60 <__libc_init_array+0x3c>)
 8007c2a:	1b64      	subs	r4, r4, r5
 8007c2c:	10a4      	asrs	r4, r4, #2
 8007c2e:	2600      	movs	r6, #0
 8007c30:	42a6      	cmp	r6, r4
 8007c32:	d109      	bne.n	8007c48 <__libc_init_array+0x24>
 8007c34:	4d0b      	ldr	r5, [pc, #44]	@ (8007c64 <__libc_init_array+0x40>)
 8007c36:	4c0c      	ldr	r4, [pc, #48]	@ (8007c68 <__libc_init_array+0x44>)
 8007c38:	f003 fa20 	bl	800b07c <_init>
 8007c3c:	1b64      	subs	r4, r4, r5
 8007c3e:	10a4      	asrs	r4, r4, #2
 8007c40:	2600      	movs	r6, #0
 8007c42:	42a6      	cmp	r6, r4
 8007c44:	d105      	bne.n	8007c52 <__libc_init_array+0x2e>
 8007c46:	bd70      	pop	{r4, r5, r6, pc}
 8007c48:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c4c:	4798      	blx	r3
 8007c4e:	3601      	adds	r6, #1
 8007c50:	e7ee      	b.n	8007c30 <__libc_init_array+0xc>
 8007c52:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c56:	4798      	blx	r3
 8007c58:	3601      	adds	r6, #1
 8007c5a:	e7f2      	b.n	8007c42 <__libc_init_array+0x1e>
 8007c5c:	0800b570 	.word	0x0800b570
 8007c60:	0800b570 	.word	0x0800b570
 8007c64:	0800b570 	.word	0x0800b570
 8007c68:	0800b574 	.word	0x0800b574

08007c6c <__retarget_lock_init_recursive>:
 8007c6c:	4770      	bx	lr

08007c6e <__retarget_lock_acquire_recursive>:
 8007c6e:	4770      	bx	lr

08007c70 <__retarget_lock_release_recursive>:
 8007c70:	4770      	bx	lr

08007c72 <memcpy>:
 8007c72:	440a      	add	r2, r1
 8007c74:	4291      	cmp	r1, r2
 8007c76:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c7a:	d100      	bne.n	8007c7e <memcpy+0xc>
 8007c7c:	4770      	bx	lr
 8007c7e:	b510      	push	{r4, lr}
 8007c80:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c88:	4291      	cmp	r1, r2
 8007c8a:	d1f9      	bne.n	8007c80 <memcpy+0xe>
 8007c8c:	bd10      	pop	{r4, pc}
	...

08007c90 <nanf>:
 8007c90:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007c98 <nanf+0x8>
 8007c94:	4770      	bx	lr
 8007c96:	bf00      	nop
 8007c98:	7fc00000 	.word	0x7fc00000

08007c9c <quorem>:
 8007c9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ca0:	6903      	ldr	r3, [r0, #16]
 8007ca2:	690c      	ldr	r4, [r1, #16]
 8007ca4:	42a3      	cmp	r3, r4
 8007ca6:	4607      	mov	r7, r0
 8007ca8:	db7e      	blt.n	8007da8 <quorem+0x10c>
 8007caa:	3c01      	subs	r4, #1
 8007cac:	f101 0814 	add.w	r8, r1, #20
 8007cb0:	00a3      	lsls	r3, r4, #2
 8007cb2:	f100 0514 	add.w	r5, r0, #20
 8007cb6:	9300      	str	r3, [sp, #0]
 8007cb8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007cbc:	9301      	str	r3, [sp, #4]
 8007cbe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007cc2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007cce:	fbb2 f6f3 	udiv	r6, r2, r3
 8007cd2:	d32e      	bcc.n	8007d32 <quorem+0x96>
 8007cd4:	f04f 0a00 	mov.w	sl, #0
 8007cd8:	46c4      	mov	ip, r8
 8007cda:	46ae      	mov	lr, r5
 8007cdc:	46d3      	mov	fp, sl
 8007cde:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007ce2:	b298      	uxth	r0, r3
 8007ce4:	fb06 a000 	mla	r0, r6, r0, sl
 8007ce8:	0c02      	lsrs	r2, r0, #16
 8007cea:	0c1b      	lsrs	r3, r3, #16
 8007cec:	fb06 2303 	mla	r3, r6, r3, r2
 8007cf0:	f8de 2000 	ldr.w	r2, [lr]
 8007cf4:	b280      	uxth	r0, r0
 8007cf6:	b292      	uxth	r2, r2
 8007cf8:	1a12      	subs	r2, r2, r0
 8007cfa:	445a      	add	r2, fp
 8007cfc:	f8de 0000 	ldr.w	r0, [lr]
 8007d00:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007d0a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007d0e:	b292      	uxth	r2, r2
 8007d10:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007d14:	45e1      	cmp	r9, ip
 8007d16:	f84e 2b04 	str.w	r2, [lr], #4
 8007d1a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007d1e:	d2de      	bcs.n	8007cde <quorem+0x42>
 8007d20:	9b00      	ldr	r3, [sp, #0]
 8007d22:	58eb      	ldr	r3, [r5, r3]
 8007d24:	b92b      	cbnz	r3, 8007d32 <quorem+0x96>
 8007d26:	9b01      	ldr	r3, [sp, #4]
 8007d28:	3b04      	subs	r3, #4
 8007d2a:	429d      	cmp	r5, r3
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	d32f      	bcc.n	8007d90 <quorem+0xf4>
 8007d30:	613c      	str	r4, [r7, #16]
 8007d32:	4638      	mov	r0, r7
 8007d34:	f001 f956 	bl	8008fe4 <__mcmp>
 8007d38:	2800      	cmp	r0, #0
 8007d3a:	db25      	blt.n	8007d88 <quorem+0xec>
 8007d3c:	4629      	mov	r1, r5
 8007d3e:	2000      	movs	r0, #0
 8007d40:	f858 2b04 	ldr.w	r2, [r8], #4
 8007d44:	f8d1 c000 	ldr.w	ip, [r1]
 8007d48:	fa1f fe82 	uxth.w	lr, r2
 8007d4c:	fa1f f38c 	uxth.w	r3, ip
 8007d50:	eba3 030e 	sub.w	r3, r3, lr
 8007d54:	4403      	add	r3, r0
 8007d56:	0c12      	lsrs	r2, r2, #16
 8007d58:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007d5c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d66:	45c1      	cmp	r9, r8
 8007d68:	f841 3b04 	str.w	r3, [r1], #4
 8007d6c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007d70:	d2e6      	bcs.n	8007d40 <quorem+0xa4>
 8007d72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d7a:	b922      	cbnz	r2, 8007d86 <quorem+0xea>
 8007d7c:	3b04      	subs	r3, #4
 8007d7e:	429d      	cmp	r5, r3
 8007d80:	461a      	mov	r2, r3
 8007d82:	d30b      	bcc.n	8007d9c <quorem+0x100>
 8007d84:	613c      	str	r4, [r7, #16]
 8007d86:	3601      	adds	r6, #1
 8007d88:	4630      	mov	r0, r6
 8007d8a:	b003      	add	sp, #12
 8007d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d90:	6812      	ldr	r2, [r2, #0]
 8007d92:	3b04      	subs	r3, #4
 8007d94:	2a00      	cmp	r2, #0
 8007d96:	d1cb      	bne.n	8007d30 <quorem+0x94>
 8007d98:	3c01      	subs	r4, #1
 8007d9a:	e7c6      	b.n	8007d2a <quorem+0x8e>
 8007d9c:	6812      	ldr	r2, [r2, #0]
 8007d9e:	3b04      	subs	r3, #4
 8007da0:	2a00      	cmp	r2, #0
 8007da2:	d1ef      	bne.n	8007d84 <quorem+0xe8>
 8007da4:	3c01      	subs	r4, #1
 8007da6:	e7ea      	b.n	8007d7e <quorem+0xe2>
 8007da8:	2000      	movs	r0, #0
 8007daa:	e7ee      	b.n	8007d8a <quorem+0xee>
 8007dac:	0000      	movs	r0, r0
	...

08007db0 <_dtoa_r>:
 8007db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007db4:	ed2d 8b02 	vpush	{d8}
 8007db8:	69c7      	ldr	r7, [r0, #28]
 8007dba:	b091      	sub	sp, #68	@ 0x44
 8007dbc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007dc0:	ec55 4b10 	vmov	r4, r5, d0
 8007dc4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8007dc6:	9107      	str	r1, [sp, #28]
 8007dc8:	4681      	mov	r9, r0
 8007dca:	9209      	str	r2, [sp, #36]	@ 0x24
 8007dcc:	930d      	str	r3, [sp, #52]	@ 0x34
 8007dce:	b97f      	cbnz	r7, 8007df0 <_dtoa_r+0x40>
 8007dd0:	2010      	movs	r0, #16
 8007dd2:	f000 fd8d 	bl	80088f0 <malloc>
 8007dd6:	4602      	mov	r2, r0
 8007dd8:	f8c9 001c 	str.w	r0, [r9, #28]
 8007ddc:	b920      	cbnz	r0, 8007de8 <_dtoa_r+0x38>
 8007dde:	4ba0      	ldr	r3, [pc, #640]	@ (8008060 <_dtoa_r+0x2b0>)
 8007de0:	21ef      	movs	r1, #239	@ 0xef
 8007de2:	48a0      	ldr	r0, [pc, #640]	@ (8008064 <_dtoa_r+0x2b4>)
 8007de4:	f002 fd2c 	bl	800a840 <__assert_func>
 8007de8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007dec:	6007      	str	r7, [r0, #0]
 8007dee:	60c7      	str	r7, [r0, #12]
 8007df0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007df4:	6819      	ldr	r1, [r3, #0]
 8007df6:	b159      	cbz	r1, 8007e10 <_dtoa_r+0x60>
 8007df8:	685a      	ldr	r2, [r3, #4]
 8007dfa:	604a      	str	r2, [r1, #4]
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	4093      	lsls	r3, r2
 8007e00:	608b      	str	r3, [r1, #8]
 8007e02:	4648      	mov	r0, r9
 8007e04:	f000 fe6a 	bl	8008adc <_Bfree>
 8007e08:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	601a      	str	r2, [r3, #0]
 8007e10:	1e2b      	subs	r3, r5, #0
 8007e12:	bfbb      	ittet	lt
 8007e14:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007e18:	9303      	strlt	r3, [sp, #12]
 8007e1a:	2300      	movge	r3, #0
 8007e1c:	2201      	movlt	r2, #1
 8007e1e:	bfac      	ite	ge
 8007e20:	6033      	strge	r3, [r6, #0]
 8007e22:	6032      	strlt	r2, [r6, #0]
 8007e24:	4b90      	ldr	r3, [pc, #576]	@ (8008068 <_dtoa_r+0x2b8>)
 8007e26:	9e03      	ldr	r6, [sp, #12]
 8007e28:	43b3      	bics	r3, r6
 8007e2a:	d110      	bne.n	8007e4e <_dtoa_r+0x9e>
 8007e2c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007e2e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007e32:	6013      	str	r3, [r2, #0]
 8007e34:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8007e38:	4323      	orrs	r3, r4
 8007e3a:	f000 84de 	beq.w	80087fa <_dtoa_r+0xa4a>
 8007e3e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007e40:	4f8a      	ldr	r7, [pc, #552]	@ (800806c <_dtoa_r+0x2bc>)
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	f000 84e0 	beq.w	8008808 <_dtoa_r+0xa58>
 8007e48:	1cfb      	adds	r3, r7, #3
 8007e4a:	f000 bcdb 	b.w	8008804 <_dtoa_r+0xa54>
 8007e4e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8007e52:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e5a:	d10a      	bne.n	8007e72 <_dtoa_r+0xc2>
 8007e5c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007e5e:	2301      	movs	r3, #1
 8007e60:	6013      	str	r3, [r2, #0]
 8007e62:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007e64:	b113      	cbz	r3, 8007e6c <_dtoa_r+0xbc>
 8007e66:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8007e68:	4b81      	ldr	r3, [pc, #516]	@ (8008070 <_dtoa_r+0x2c0>)
 8007e6a:	6013      	str	r3, [r2, #0]
 8007e6c:	4f81      	ldr	r7, [pc, #516]	@ (8008074 <_dtoa_r+0x2c4>)
 8007e6e:	f000 bccb 	b.w	8008808 <_dtoa_r+0xa58>
 8007e72:	aa0e      	add	r2, sp, #56	@ 0x38
 8007e74:	a90f      	add	r1, sp, #60	@ 0x3c
 8007e76:	4648      	mov	r0, r9
 8007e78:	eeb0 0b48 	vmov.f64	d0, d8
 8007e7c:	f001 f9d2 	bl	8009224 <__d2b>
 8007e80:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8007e84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007e86:	9001      	str	r0, [sp, #4]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d045      	beq.n	8007f18 <_dtoa_r+0x168>
 8007e8c:	eeb0 7b48 	vmov.f64	d7, d8
 8007e90:	ee18 1a90 	vmov	r1, s17
 8007e94:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007e98:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8007e9c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8007ea0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8007ea4:	2500      	movs	r5, #0
 8007ea6:	ee07 1a90 	vmov	s15, r1
 8007eaa:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8007eae:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8008048 <_dtoa_r+0x298>
 8007eb2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007eb6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8008050 <_dtoa_r+0x2a0>
 8007eba:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007ebe:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8008058 <_dtoa_r+0x2a8>
 8007ec2:	ee07 3a90 	vmov	s15, r3
 8007ec6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8007eca:	eeb0 7b46 	vmov.f64	d7, d6
 8007ece:	eea4 7b05 	vfma.f64	d7, d4, d5
 8007ed2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007ed6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ede:	ee16 8a90 	vmov	r8, s13
 8007ee2:	d508      	bpl.n	8007ef6 <_dtoa_r+0x146>
 8007ee4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007ee8:	eeb4 6b47 	vcmp.f64	d6, d7
 8007eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ef0:	bf18      	it	ne
 8007ef2:	f108 38ff 	addne.w	r8, r8, #4294967295
 8007ef6:	f1b8 0f16 	cmp.w	r8, #22
 8007efa:	d82b      	bhi.n	8007f54 <_dtoa_r+0x1a4>
 8007efc:	495e      	ldr	r1, [pc, #376]	@ (8008078 <_dtoa_r+0x2c8>)
 8007efe:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8007f02:	ed91 7b00 	vldr	d7, [r1]
 8007f06:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f0e:	d501      	bpl.n	8007f14 <_dtoa_r+0x164>
 8007f10:	f108 38ff 	add.w	r8, r8, #4294967295
 8007f14:	2100      	movs	r1, #0
 8007f16:	e01e      	b.n	8007f56 <_dtoa_r+0x1a6>
 8007f18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f1a:	4413      	add	r3, r2
 8007f1c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8007f20:	2920      	cmp	r1, #32
 8007f22:	bfc1      	itttt	gt
 8007f24:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8007f28:	408e      	lslgt	r6, r1
 8007f2a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8007f2e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8007f32:	bfd6      	itet	le
 8007f34:	f1c1 0120 	rsble	r1, r1, #32
 8007f38:	4331      	orrgt	r1, r6
 8007f3a:	fa04 f101 	lslle.w	r1, r4, r1
 8007f3e:	ee07 1a90 	vmov	s15, r1
 8007f42:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007f46:	3b01      	subs	r3, #1
 8007f48:	ee17 1a90 	vmov	r1, s15
 8007f4c:	2501      	movs	r5, #1
 8007f4e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8007f52:	e7a8      	b.n	8007ea6 <_dtoa_r+0xf6>
 8007f54:	2101      	movs	r1, #1
 8007f56:	1ad2      	subs	r2, r2, r3
 8007f58:	1e53      	subs	r3, r2, #1
 8007f5a:	9306      	str	r3, [sp, #24]
 8007f5c:	bf45      	ittet	mi
 8007f5e:	f1c2 0301 	rsbmi	r3, r2, #1
 8007f62:	9305      	strmi	r3, [sp, #20]
 8007f64:	2300      	movpl	r3, #0
 8007f66:	2300      	movmi	r3, #0
 8007f68:	bf4c      	ite	mi
 8007f6a:	9306      	strmi	r3, [sp, #24]
 8007f6c:	9305      	strpl	r3, [sp, #20]
 8007f6e:	f1b8 0f00 	cmp.w	r8, #0
 8007f72:	910c      	str	r1, [sp, #48]	@ 0x30
 8007f74:	db18      	blt.n	8007fa8 <_dtoa_r+0x1f8>
 8007f76:	9b06      	ldr	r3, [sp, #24]
 8007f78:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8007f7c:	4443      	add	r3, r8
 8007f7e:	9306      	str	r3, [sp, #24]
 8007f80:	2300      	movs	r3, #0
 8007f82:	9a07      	ldr	r2, [sp, #28]
 8007f84:	2a09      	cmp	r2, #9
 8007f86:	d849      	bhi.n	800801c <_dtoa_r+0x26c>
 8007f88:	2a05      	cmp	r2, #5
 8007f8a:	bfc4      	itt	gt
 8007f8c:	3a04      	subgt	r2, #4
 8007f8e:	9207      	strgt	r2, [sp, #28]
 8007f90:	9a07      	ldr	r2, [sp, #28]
 8007f92:	f1a2 0202 	sub.w	r2, r2, #2
 8007f96:	bfcc      	ite	gt
 8007f98:	2400      	movgt	r4, #0
 8007f9a:	2401      	movle	r4, #1
 8007f9c:	2a03      	cmp	r2, #3
 8007f9e:	d848      	bhi.n	8008032 <_dtoa_r+0x282>
 8007fa0:	e8df f002 	tbb	[pc, r2]
 8007fa4:	3a2c2e0b 	.word	0x3a2c2e0b
 8007fa8:	9b05      	ldr	r3, [sp, #20]
 8007faa:	2200      	movs	r2, #0
 8007fac:	eba3 0308 	sub.w	r3, r3, r8
 8007fb0:	9305      	str	r3, [sp, #20]
 8007fb2:	920a      	str	r2, [sp, #40]	@ 0x28
 8007fb4:	f1c8 0300 	rsb	r3, r8, #0
 8007fb8:	e7e3      	b.n	8007f82 <_dtoa_r+0x1d2>
 8007fba:	2200      	movs	r2, #0
 8007fbc:	9208      	str	r2, [sp, #32]
 8007fbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007fc0:	2a00      	cmp	r2, #0
 8007fc2:	dc39      	bgt.n	8008038 <_dtoa_r+0x288>
 8007fc4:	f04f 0b01 	mov.w	fp, #1
 8007fc8:	46da      	mov	sl, fp
 8007fca:	465a      	mov	r2, fp
 8007fcc:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8007fd0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8007fd4:	2100      	movs	r1, #0
 8007fd6:	2004      	movs	r0, #4
 8007fd8:	f100 0614 	add.w	r6, r0, #20
 8007fdc:	4296      	cmp	r6, r2
 8007fde:	d930      	bls.n	8008042 <_dtoa_r+0x292>
 8007fe0:	6079      	str	r1, [r7, #4]
 8007fe2:	4648      	mov	r0, r9
 8007fe4:	9304      	str	r3, [sp, #16]
 8007fe6:	f000 fd39 	bl	8008a5c <_Balloc>
 8007fea:	9b04      	ldr	r3, [sp, #16]
 8007fec:	4607      	mov	r7, r0
 8007fee:	2800      	cmp	r0, #0
 8007ff0:	d146      	bne.n	8008080 <_dtoa_r+0x2d0>
 8007ff2:	4b22      	ldr	r3, [pc, #136]	@ (800807c <_dtoa_r+0x2cc>)
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	f240 11af 	movw	r1, #431	@ 0x1af
 8007ffa:	e6f2      	b.n	8007de2 <_dtoa_r+0x32>
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	e7dd      	b.n	8007fbc <_dtoa_r+0x20c>
 8008000:	2200      	movs	r2, #0
 8008002:	9208      	str	r2, [sp, #32]
 8008004:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008006:	eb08 0b02 	add.w	fp, r8, r2
 800800a:	f10b 0a01 	add.w	sl, fp, #1
 800800e:	4652      	mov	r2, sl
 8008010:	2a01      	cmp	r2, #1
 8008012:	bfb8      	it	lt
 8008014:	2201      	movlt	r2, #1
 8008016:	e7db      	b.n	8007fd0 <_dtoa_r+0x220>
 8008018:	2201      	movs	r2, #1
 800801a:	e7f2      	b.n	8008002 <_dtoa_r+0x252>
 800801c:	2401      	movs	r4, #1
 800801e:	2200      	movs	r2, #0
 8008020:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8008024:	f04f 3bff 	mov.w	fp, #4294967295
 8008028:	2100      	movs	r1, #0
 800802a:	46da      	mov	sl, fp
 800802c:	2212      	movs	r2, #18
 800802e:	9109      	str	r1, [sp, #36]	@ 0x24
 8008030:	e7ce      	b.n	8007fd0 <_dtoa_r+0x220>
 8008032:	2201      	movs	r2, #1
 8008034:	9208      	str	r2, [sp, #32]
 8008036:	e7f5      	b.n	8008024 <_dtoa_r+0x274>
 8008038:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800803c:	46da      	mov	sl, fp
 800803e:	465a      	mov	r2, fp
 8008040:	e7c6      	b.n	8007fd0 <_dtoa_r+0x220>
 8008042:	3101      	adds	r1, #1
 8008044:	0040      	lsls	r0, r0, #1
 8008046:	e7c7      	b.n	8007fd8 <_dtoa_r+0x228>
 8008048:	636f4361 	.word	0x636f4361
 800804c:	3fd287a7 	.word	0x3fd287a7
 8008050:	8b60c8b3 	.word	0x8b60c8b3
 8008054:	3fc68a28 	.word	0x3fc68a28
 8008058:	509f79fb 	.word	0x509f79fb
 800805c:	3fd34413 	.word	0x3fd34413
 8008060:	0800b182 	.word	0x0800b182
 8008064:	0800b199 	.word	0x0800b199
 8008068:	7ff00000 	.word	0x7ff00000
 800806c:	0800b17e 	.word	0x0800b17e
 8008070:	0800b14d 	.word	0x0800b14d
 8008074:	0800b14c 	.word	0x0800b14c
 8008078:	0800b290 	.word	0x0800b290
 800807c:	0800b1f1 	.word	0x0800b1f1
 8008080:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8008084:	f1ba 0f0e 	cmp.w	sl, #14
 8008088:	6010      	str	r0, [r2, #0]
 800808a:	d86f      	bhi.n	800816c <_dtoa_r+0x3bc>
 800808c:	2c00      	cmp	r4, #0
 800808e:	d06d      	beq.n	800816c <_dtoa_r+0x3bc>
 8008090:	f1b8 0f00 	cmp.w	r8, #0
 8008094:	f340 80c2 	ble.w	800821c <_dtoa_r+0x46c>
 8008098:	4aca      	ldr	r2, [pc, #808]	@ (80083c4 <_dtoa_r+0x614>)
 800809a:	f008 010f 	and.w	r1, r8, #15
 800809e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80080a2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80080a6:	ed92 7b00 	vldr	d7, [r2]
 80080aa:	ea4f 1128 	mov.w	r1, r8, asr #4
 80080ae:	f000 80a9 	beq.w	8008204 <_dtoa_r+0x454>
 80080b2:	4ac5      	ldr	r2, [pc, #788]	@ (80083c8 <_dtoa_r+0x618>)
 80080b4:	ed92 6b08 	vldr	d6, [r2, #32]
 80080b8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80080bc:	ed8d 6b02 	vstr	d6, [sp, #8]
 80080c0:	f001 010f 	and.w	r1, r1, #15
 80080c4:	2203      	movs	r2, #3
 80080c6:	48c0      	ldr	r0, [pc, #768]	@ (80083c8 <_dtoa_r+0x618>)
 80080c8:	2900      	cmp	r1, #0
 80080ca:	f040 809d 	bne.w	8008208 <_dtoa_r+0x458>
 80080ce:	ed9d 6b02 	vldr	d6, [sp, #8]
 80080d2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80080d6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80080da:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80080dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80080e0:	2900      	cmp	r1, #0
 80080e2:	f000 80c1 	beq.w	8008268 <_dtoa_r+0x4b8>
 80080e6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80080ea:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80080ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080f2:	f140 80b9 	bpl.w	8008268 <_dtoa_r+0x4b8>
 80080f6:	f1ba 0f00 	cmp.w	sl, #0
 80080fa:	f000 80b5 	beq.w	8008268 <_dtoa_r+0x4b8>
 80080fe:	f1bb 0f00 	cmp.w	fp, #0
 8008102:	dd31      	ble.n	8008168 <_dtoa_r+0x3b8>
 8008104:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8008108:	ee27 7b06 	vmul.f64	d7, d7, d6
 800810c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008110:	f108 31ff 	add.w	r1, r8, #4294967295
 8008114:	9104      	str	r1, [sp, #16]
 8008116:	3201      	adds	r2, #1
 8008118:	465c      	mov	r4, fp
 800811a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800811e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8008122:	ee07 2a90 	vmov	s15, r2
 8008126:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800812a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800812e:	ee15 2a90 	vmov	r2, s11
 8008132:	ec51 0b15 	vmov	r0, r1, d5
 8008136:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800813a:	2c00      	cmp	r4, #0
 800813c:	f040 8098 	bne.w	8008270 <_dtoa_r+0x4c0>
 8008140:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8008144:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008148:	ec41 0b17 	vmov	d7, r0, r1
 800814c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008154:	f300 8261 	bgt.w	800861a <_dtoa_r+0x86a>
 8008158:	eeb1 7b47 	vneg.f64	d7, d7
 800815c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008164:	f100 80f5 	bmi.w	8008352 <_dtoa_r+0x5a2>
 8008168:	ed8d 8b02 	vstr	d8, [sp, #8]
 800816c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800816e:	2a00      	cmp	r2, #0
 8008170:	f2c0 812c 	blt.w	80083cc <_dtoa_r+0x61c>
 8008174:	f1b8 0f0e 	cmp.w	r8, #14
 8008178:	f300 8128 	bgt.w	80083cc <_dtoa_r+0x61c>
 800817c:	4b91      	ldr	r3, [pc, #580]	@ (80083c4 <_dtoa_r+0x614>)
 800817e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008182:	ed93 6b00 	vldr	d6, [r3]
 8008186:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008188:	2b00      	cmp	r3, #0
 800818a:	da03      	bge.n	8008194 <_dtoa_r+0x3e4>
 800818c:	f1ba 0f00 	cmp.w	sl, #0
 8008190:	f340 80d2 	ble.w	8008338 <_dtoa_r+0x588>
 8008194:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8008198:	ed9d 7b02 	vldr	d7, [sp, #8]
 800819c:	463e      	mov	r6, r7
 800819e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80081a2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80081a6:	ee15 3a10 	vmov	r3, s10
 80081aa:	3330      	adds	r3, #48	@ 0x30
 80081ac:	f806 3b01 	strb.w	r3, [r6], #1
 80081b0:	1bf3      	subs	r3, r6, r7
 80081b2:	459a      	cmp	sl, r3
 80081b4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80081b8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80081bc:	f040 80f8 	bne.w	80083b0 <_dtoa_r+0x600>
 80081c0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80081c4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80081c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081cc:	f300 80dd 	bgt.w	800838a <_dtoa_r+0x5da>
 80081d0:	eeb4 7b46 	vcmp.f64	d7, d6
 80081d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081d8:	d104      	bne.n	80081e4 <_dtoa_r+0x434>
 80081da:	ee15 3a10 	vmov	r3, s10
 80081de:	07db      	lsls	r3, r3, #31
 80081e0:	f100 80d3 	bmi.w	800838a <_dtoa_r+0x5da>
 80081e4:	9901      	ldr	r1, [sp, #4]
 80081e6:	4648      	mov	r0, r9
 80081e8:	f000 fc78 	bl	8008adc <_Bfree>
 80081ec:	2300      	movs	r3, #0
 80081ee:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80081f0:	7033      	strb	r3, [r6, #0]
 80081f2:	f108 0301 	add.w	r3, r8, #1
 80081f6:	6013      	str	r3, [r2, #0]
 80081f8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	f000 8304 	beq.w	8008808 <_dtoa_r+0xa58>
 8008200:	601e      	str	r6, [r3, #0]
 8008202:	e301      	b.n	8008808 <_dtoa_r+0xa58>
 8008204:	2202      	movs	r2, #2
 8008206:	e75e      	b.n	80080c6 <_dtoa_r+0x316>
 8008208:	07cc      	lsls	r4, r1, #31
 800820a:	d504      	bpl.n	8008216 <_dtoa_r+0x466>
 800820c:	ed90 6b00 	vldr	d6, [r0]
 8008210:	3201      	adds	r2, #1
 8008212:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008216:	1049      	asrs	r1, r1, #1
 8008218:	3008      	adds	r0, #8
 800821a:	e755      	b.n	80080c8 <_dtoa_r+0x318>
 800821c:	d022      	beq.n	8008264 <_dtoa_r+0x4b4>
 800821e:	f1c8 0100 	rsb	r1, r8, #0
 8008222:	4a68      	ldr	r2, [pc, #416]	@ (80083c4 <_dtoa_r+0x614>)
 8008224:	f001 000f 	and.w	r0, r1, #15
 8008228:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800822c:	ed92 7b00 	vldr	d7, [r2]
 8008230:	ee28 7b07 	vmul.f64	d7, d8, d7
 8008234:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008238:	4863      	ldr	r0, [pc, #396]	@ (80083c8 <_dtoa_r+0x618>)
 800823a:	1109      	asrs	r1, r1, #4
 800823c:	2400      	movs	r4, #0
 800823e:	2202      	movs	r2, #2
 8008240:	b929      	cbnz	r1, 800824e <_dtoa_r+0x49e>
 8008242:	2c00      	cmp	r4, #0
 8008244:	f43f af49 	beq.w	80080da <_dtoa_r+0x32a>
 8008248:	ed8d 7b02 	vstr	d7, [sp, #8]
 800824c:	e745      	b.n	80080da <_dtoa_r+0x32a>
 800824e:	07ce      	lsls	r6, r1, #31
 8008250:	d505      	bpl.n	800825e <_dtoa_r+0x4ae>
 8008252:	ed90 6b00 	vldr	d6, [r0]
 8008256:	3201      	adds	r2, #1
 8008258:	2401      	movs	r4, #1
 800825a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800825e:	1049      	asrs	r1, r1, #1
 8008260:	3008      	adds	r0, #8
 8008262:	e7ed      	b.n	8008240 <_dtoa_r+0x490>
 8008264:	2202      	movs	r2, #2
 8008266:	e738      	b.n	80080da <_dtoa_r+0x32a>
 8008268:	f8cd 8010 	str.w	r8, [sp, #16]
 800826c:	4654      	mov	r4, sl
 800826e:	e754      	b.n	800811a <_dtoa_r+0x36a>
 8008270:	4a54      	ldr	r2, [pc, #336]	@ (80083c4 <_dtoa_r+0x614>)
 8008272:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8008276:	ed12 4b02 	vldr	d4, [r2, #-8]
 800827a:	9a08      	ldr	r2, [sp, #32]
 800827c:	ec41 0b17 	vmov	d7, r0, r1
 8008280:	443c      	add	r4, r7
 8008282:	b34a      	cbz	r2, 80082d8 <_dtoa_r+0x528>
 8008284:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8008288:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800828c:	463e      	mov	r6, r7
 800828e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8008292:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8008296:	ee35 7b47 	vsub.f64	d7, d5, d7
 800829a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800829e:	ee14 2a90 	vmov	r2, s9
 80082a2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80082a6:	3230      	adds	r2, #48	@ 0x30
 80082a8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80082ac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80082b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082b4:	f806 2b01 	strb.w	r2, [r6], #1
 80082b8:	d438      	bmi.n	800832c <_dtoa_r+0x57c>
 80082ba:	ee32 5b46 	vsub.f64	d5, d2, d6
 80082be:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80082c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082c6:	d462      	bmi.n	800838e <_dtoa_r+0x5de>
 80082c8:	42a6      	cmp	r6, r4
 80082ca:	f43f af4d 	beq.w	8008168 <_dtoa_r+0x3b8>
 80082ce:	ee27 7b03 	vmul.f64	d7, d7, d3
 80082d2:	ee26 6b03 	vmul.f64	d6, d6, d3
 80082d6:	e7e0      	b.n	800829a <_dtoa_r+0x4ea>
 80082d8:	4621      	mov	r1, r4
 80082da:	463e      	mov	r6, r7
 80082dc:	ee27 7b04 	vmul.f64	d7, d7, d4
 80082e0:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80082e4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80082e8:	ee14 2a90 	vmov	r2, s9
 80082ec:	3230      	adds	r2, #48	@ 0x30
 80082ee:	f806 2b01 	strb.w	r2, [r6], #1
 80082f2:	42a6      	cmp	r6, r4
 80082f4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80082f8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80082fc:	d119      	bne.n	8008332 <_dtoa_r+0x582>
 80082fe:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8008302:	ee37 4b05 	vadd.f64	d4, d7, d5
 8008306:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800830a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800830e:	dc3e      	bgt.n	800838e <_dtoa_r+0x5de>
 8008310:	ee35 5b47 	vsub.f64	d5, d5, d7
 8008314:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8008318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800831c:	f57f af24 	bpl.w	8008168 <_dtoa_r+0x3b8>
 8008320:	460e      	mov	r6, r1
 8008322:	3901      	subs	r1, #1
 8008324:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008328:	2b30      	cmp	r3, #48	@ 0x30
 800832a:	d0f9      	beq.n	8008320 <_dtoa_r+0x570>
 800832c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008330:	e758      	b.n	80081e4 <_dtoa_r+0x434>
 8008332:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008336:	e7d5      	b.n	80082e4 <_dtoa_r+0x534>
 8008338:	d10b      	bne.n	8008352 <_dtoa_r+0x5a2>
 800833a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800833e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008342:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008346:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800834a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800834e:	f2c0 8161 	blt.w	8008614 <_dtoa_r+0x864>
 8008352:	2400      	movs	r4, #0
 8008354:	4625      	mov	r5, r4
 8008356:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008358:	43db      	mvns	r3, r3
 800835a:	9304      	str	r3, [sp, #16]
 800835c:	463e      	mov	r6, r7
 800835e:	f04f 0800 	mov.w	r8, #0
 8008362:	4621      	mov	r1, r4
 8008364:	4648      	mov	r0, r9
 8008366:	f000 fbb9 	bl	8008adc <_Bfree>
 800836a:	2d00      	cmp	r5, #0
 800836c:	d0de      	beq.n	800832c <_dtoa_r+0x57c>
 800836e:	f1b8 0f00 	cmp.w	r8, #0
 8008372:	d005      	beq.n	8008380 <_dtoa_r+0x5d0>
 8008374:	45a8      	cmp	r8, r5
 8008376:	d003      	beq.n	8008380 <_dtoa_r+0x5d0>
 8008378:	4641      	mov	r1, r8
 800837a:	4648      	mov	r0, r9
 800837c:	f000 fbae 	bl	8008adc <_Bfree>
 8008380:	4629      	mov	r1, r5
 8008382:	4648      	mov	r0, r9
 8008384:	f000 fbaa 	bl	8008adc <_Bfree>
 8008388:	e7d0      	b.n	800832c <_dtoa_r+0x57c>
 800838a:	f8cd 8010 	str.w	r8, [sp, #16]
 800838e:	4633      	mov	r3, r6
 8008390:	461e      	mov	r6, r3
 8008392:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008396:	2a39      	cmp	r2, #57	@ 0x39
 8008398:	d106      	bne.n	80083a8 <_dtoa_r+0x5f8>
 800839a:	429f      	cmp	r7, r3
 800839c:	d1f8      	bne.n	8008390 <_dtoa_r+0x5e0>
 800839e:	9a04      	ldr	r2, [sp, #16]
 80083a0:	3201      	adds	r2, #1
 80083a2:	9204      	str	r2, [sp, #16]
 80083a4:	2230      	movs	r2, #48	@ 0x30
 80083a6:	703a      	strb	r2, [r7, #0]
 80083a8:	781a      	ldrb	r2, [r3, #0]
 80083aa:	3201      	adds	r2, #1
 80083ac:	701a      	strb	r2, [r3, #0]
 80083ae:	e7bd      	b.n	800832c <_dtoa_r+0x57c>
 80083b0:	ee27 7b04 	vmul.f64	d7, d7, d4
 80083b4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80083b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083bc:	f47f aeef 	bne.w	800819e <_dtoa_r+0x3ee>
 80083c0:	e710      	b.n	80081e4 <_dtoa_r+0x434>
 80083c2:	bf00      	nop
 80083c4:	0800b290 	.word	0x0800b290
 80083c8:	0800b268 	.word	0x0800b268
 80083cc:	9908      	ldr	r1, [sp, #32]
 80083ce:	2900      	cmp	r1, #0
 80083d0:	f000 80e3 	beq.w	800859a <_dtoa_r+0x7ea>
 80083d4:	9907      	ldr	r1, [sp, #28]
 80083d6:	2901      	cmp	r1, #1
 80083d8:	f300 80c8 	bgt.w	800856c <_dtoa_r+0x7bc>
 80083dc:	2d00      	cmp	r5, #0
 80083de:	f000 80c1 	beq.w	8008564 <_dtoa_r+0x7b4>
 80083e2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80083e6:	9e05      	ldr	r6, [sp, #20]
 80083e8:	461c      	mov	r4, r3
 80083ea:	9304      	str	r3, [sp, #16]
 80083ec:	9b05      	ldr	r3, [sp, #20]
 80083ee:	4413      	add	r3, r2
 80083f0:	9305      	str	r3, [sp, #20]
 80083f2:	9b06      	ldr	r3, [sp, #24]
 80083f4:	2101      	movs	r1, #1
 80083f6:	4413      	add	r3, r2
 80083f8:	4648      	mov	r0, r9
 80083fa:	9306      	str	r3, [sp, #24]
 80083fc:	f000 fc6c 	bl	8008cd8 <__i2b>
 8008400:	9b04      	ldr	r3, [sp, #16]
 8008402:	4605      	mov	r5, r0
 8008404:	b166      	cbz	r6, 8008420 <_dtoa_r+0x670>
 8008406:	9a06      	ldr	r2, [sp, #24]
 8008408:	2a00      	cmp	r2, #0
 800840a:	dd09      	ble.n	8008420 <_dtoa_r+0x670>
 800840c:	42b2      	cmp	r2, r6
 800840e:	9905      	ldr	r1, [sp, #20]
 8008410:	bfa8      	it	ge
 8008412:	4632      	movge	r2, r6
 8008414:	1a89      	subs	r1, r1, r2
 8008416:	9105      	str	r1, [sp, #20]
 8008418:	9906      	ldr	r1, [sp, #24]
 800841a:	1ab6      	subs	r6, r6, r2
 800841c:	1a8a      	subs	r2, r1, r2
 800841e:	9206      	str	r2, [sp, #24]
 8008420:	b1fb      	cbz	r3, 8008462 <_dtoa_r+0x6b2>
 8008422:	9a08      	ldr	r2, [sp, #32]
 8008424:	2a00      	cmp	r2, #0
 8008426:	f000 80bc 	beq.w	80085a2 <_dtoa_r+0x7f2>
 800842a:	b19c      	cbz	r4, 8008454 <_dtoa_r+0x6a4>
 800842c:	4629      	mov	r1, r5
 800842e:	4622      	mov	r2, r4
 8008430:	4648      	mov	r0, r9
 8008432:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008434:	f000 fd10 	bl	8008e58 <__pow5mult>
 8008438:	9a01      	ldr	r2, [sp, #4]
 800843a:	4601      	mov	r1, r0
 800843c:	4605      	mov	r5, r0
 800843e:	4648      	mov	r0, r9
 8008440:	f000 fc60 	bl	8008d04 <__multiply>
 8008444:	9901      	ldr	r1, [sp, #4]
 8008446:	9004      	str	r0, [sp, #16]
 8008448:	4648      	mov	r0, r9
 800844a:	f000 fb47 	bl	8008adc <_Bfree>
 800844e:	9a04      	ldr	r2, [sp, #16]
 8008450:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008452:	9201      	str	r2, [sp, #4]
 8008454:	1b1a      	subs	r2, r3, r4
 8008456:	d004      	beq.n	8008462 <_dtoa_r+0x6b2>
 8008458:	9901      	ldr	r1, [sp, #4]
 800845a:	4648      	mov	r0, r9
 800845c:	f000 fcfc 	bl	8008e58 <__pow5mult>
 8008460:	9001      	str	r0, [sp, #4]
 8008462:	2101      	movs	r1, #1
 8008464:	4648      	mov	r0, r9
 8008466:	f000 fc37 	bl	8008cd8 <__i2b>
 800846a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800846c:	4604      	mov	r4, r0
 800846e:	2b00      	cmp	r3, #0
 8008470:	f000 81d0 	beq.w	8008814 <_dtoa_r+0xa64>
 8008474:	461a      	mov	r2, r3
 8008476:	4601      	mov	r1, r0
 8008478:	4648      	mov	r0, r9
 800847a:	f000 fced 	bl	8008e58 <__pow5mult>
 800847e:	9b07      	ldr	r3, [sp, #28]
 8008480:	2b01      	cmp	r3, #1
 8008482:	4604      	mov	r4, r0
 8008484:	f300 8095 	bgt.w	80085b2 <_dtoa_r+0x802>
 8008488:	9b02      	ldr	r3, [sp, #8]
 800848a:	2b00      	cmp	r3, #0
 800848c:	f040 808b 	bne.w	80085a6 <_dtoa_r+0x7f6>
 8008490:	9b03      	ldr	r3, [sp, #12]
 8008492:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8008496:	2a00      	cmp	r2, #0
 8008498:	f040 8087 	bne.w	80085aa <_dtoa_r+0x7fa>
 800849c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80084a0:	0d12      	lsrs	r2, r2, #20
 80084a2:	0512      	lsls	r2, r2, #20
 80084a4:	2a00      	cmp	r2, #0
 80084a6:	f000 8082 	beq.w	80085ae <_dtoa_r+0x7fe>
 80084aa:	9b05      	ldr	r3, [sp, #20]
 80084ac:	3301      	adds	r3, #1
 80084ae:	9305      	str	r3, [sp, #20]
 80084b0:	9b06      	ldr	r3, [sp, #24]
 80084b2:	3301      	adds	r3, #1
 80084b4:	9306      	str	r3, [sp, #24]
 80084b6:	2301      	movs	r3, #1
 80084b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80084ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084bc:	2b00      	cmp	r3, #0
 80084be:	f000 81af 	beq.w	8008820 <_dtoa_r+0xa70>
 80084c2:	6922      	ldr	r2, [r4, #16]
 80084c4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80084c8:	6910      	ldr	r0, [r2, #16]
 80084ca:	f000 fbb9 	bl	8008c40 <__hi0bits>
 80084ce:	f1c0 0020 	rsb	r0, r0, #32
 80084d2:	9b06      	ldr	r3, [sp, #24]
 80084d4:	4418      	add	r0, r3
 80084d6:	f010 001f 	ands.w	r0, r0, #31
 80084da:	d076      	beq.n	80085ca <_dtoa_r+0x81a>
 80084dc:	f1c0 0220 	rsb	r2, r0, #32
 80084e0:	2a04      	cmp	r2, #4
 80084e2:	dd69      	ble.n	80085b8 <_dtoa_r+0x808>
 80084e4:	9b05      	ldr	r3, [sp, #20]
 80084e6:	f1c0 001c 	rsb	r0, r0, #28
 80084ea:	4403      	add	r3, r0
 80084ec:	9305      	str	r3, [sp, #20]
 80084ee:	9b06      	ldr	r3, [sp, #24]
 80084f0:	4406      	add	r6, r0
 80084f2:	4403      	add	r3, r0
 80084f4:	9306      	str	r3, [sp, #24]
 80084f6:	9b05      	ldr	r3, [sp, #20]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	dd05      	ble.n	8008508 <_dtoa_r+0x758>
 80084fc:	9901      	ldr	r1, [sp, #4]
 80084fe:	461a      	mov	r2, r3
 8008500:	4648      	mov	r0, r9
 8008502:	f000 fd03 	bl	8008f0c <__lshift>
 8008506:	9001      	str	r0, [sp, #4]
 8008508:	9b06      	ldr	r3, [sp, #24]
 800850a:	2b00      	cmp	r3, #0
 800850c:	dd05      	ble.n	800851a <_dtoa_r+0x76a>
 800850e:	4621      	mov	r1, r4
 8008510:	461a      	mov	r2, r3
 8008512:	4648      	mov	r0, r9
 8008514:	f000 fcfa 	bl	8008f0c <__lshift>
 8008518:	4604      	mov	r4, r0
 800851a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800851c:	2b00      	cmp	r3, #0
 800851e:	d056      	beq.n	80085ce <_dtoa_r+0x81e>
 8008520:	9801      	ldr	r0, [sp, #4]
 8008522:	4621      	mov	r1, r4
 8008524:	f000 fd5e 	bl	8008fe4 <__mcmp>
 8008528:	2800      	cmp	r0, #0
 800852a:	da50      	bge.n	80085ce <_dtoa_r+0x81e>
 800852c:	f108 33ff 	add.w	r3, r8, #4294967295
 8008530:	9304      	str	r3, [sp, #16]
 8008532:	9901      	ldr	r1, [sp, #4]
 8008534:	2300      	movs	r3, #0
 8008536:	220a      	movs	r2, #10
 8008538:	4648      	mov	r0, r9
 800853a:	f000 faf1 	bl	8008b20 <__multadd>
 800853e:	9b08      	ldr	r3, [sp, #32]
 8008540:	9001      	str	r0, [sp, #4]
 8008542:	2b00      	cmp	r3, #0
 8008544:	f000 816e 	beq.w	8008824 <_dtoa_r+0xa74>
 8008548:	4629      	mov	r1, r5
 800854a:	2300      	movs	r3, #0
 800854c:	220a      	movs	r2, #10
 800854e:	4648      	mov	r0, r9
 8008550:	f000 fae6 	bl	8008b20 <__multadd>
 8008554:	f1bb 0f00 	cmp.w	fp, #0
 8008558:	4605      	mov	r5, r0
 800855a:	dc64      	bgt.n	8008626 <_dtoa_r+0x876>
 800855c:	9b07      	ldr	r3, [sp, #28]
 800855e:	2b02      	cmp	r3, #2
 8008560:	dc3e      	bgt.n	80085e0 <_dtoa_r+0x830>
 8008562:	e060      	b.n	8008626 <_dtoa_r+0x876>
 8008564:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008566:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800856a:	e73c      	b.n	80083e6 <_dtoa_r+0x636>
 800856c:	f10a 34ff 	add.w	r4, sl, #4294967295
 8008570:	42a3      	cmp	r3, r4
 8008572:	bfbf      	itttt	lt
 8008574:	1ae2      	sublt	r2, r4, r3
 8008576:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008578:	189b      	addlt	r3, r3, r2
 800857a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800857c:	bfae      	itee	ge
 800857e:	1b1c      	subge	r4, r3, r4
 8008580:	4623      	movlt	r3, r4
 8008582:	2400      	movlt	r4, #0
 8008584:	f1ba 0f00 	cmp.w	sl, #0
 8008588:	bfb5      	itete	lt
 800858a:	9a05      	ldrlt	r2, [sp, #20]
 800858c:	9e05      	ldrge	r6, [sp, #20]
 800858e:	eba2 060a 	sublt.w	r6, r2, sl
 8008592:	4652      	movge	r2, sl
 8008594:	bfb8      	it	lt
 8008596:	2200      	movlt	r2, #0
 8008598:	e727      	b.n	80083ea <_dtoa_r+0x63a>
 800859a:	9e05      	ldr	r6, [sp, #20]
 800859c:	9d08      	ldr	r5, [sp, #32]
 800859e:	461c      	mov	r4, r3
 80085a0:	e730      	b.n	8008404 <_dtoa_r+0x654>
 80085a2:	461a      	mov	r2, r3
 80085a4:	e758      	b.n	8008458 <_dtoa_r+0x6a8>
 80085a6:	2300      	movs	r3, #0
 80085a8:	e786      	b.n	80084b8 <_dtoa_r+0x708>
 80085aa:	9b02      	ldr	r3, [sp, #8]
 80085ac:	e784      	b.n	80084b8 <_dtoa_r+0x708>
 80085ae:	920b      	str	r2, [sp, #44]	@ 0x2c
 80085b0:	e783      	b.n	80084ba <_dtoa_r+0x70a>
 80085b2:	2300      	movs	r3, #0
 80085b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80085b6:	e784      	b.n	80084c2 <_dtoa_r+0x712>
 80085b8:	d09d      	beq.n	80084f6 <_dtoa_r+0x746>
 80085ba:	9b05      	ldr	r3, [sp, #20]
 80085bc:	321c      	adds	r2, #28
 80085be:	4413      	add	r3, r2
 80085c0:	9305      	str	r3, [sp, #20]
 80085c2:	9b06      	ldr	r3, [sp, #24]
 80085c4:	4416      	add	r6, r2
 80085c6:	4413      	add	r3, r2
 80085c8:	e794      	b.n	80084f4 <_dtoa_r+0x744>
 80085ca:	4602      	mov	r2, r0
 80085cc:	e7f5      	b.n	80085ba <_dtoa_r+0x80a>
 80085ce:	f1ba 0f00 	cmp.w	sl, #0
 80085d2:	f8cd 8010 	str.w	r8, [sp, #16]
 80085d6:	46d3      	mov	fp, sl
 80085d8:	dc21      	bgt.n	800861e <_dtoa_r+0x86e>
 80085da:	9b07      	ldr	r3, [sp, #28]
 80085dc:	2b02      	cmp	r3, #2
 80085de:	dd1e      	ble.n	800861e <_dtoa_r+0x86e>
 80085e0:	f1bb 0f00 	cmp.w	fp, #0
 80085e4:	f47f aeb7 	bne.w	8008356 <_dtoa_r+0x5a6>
 80085e8:	4621      	mov	r1, r4
 80085ea:	465b      	mov	r3, fp
 80085ec:	2205      	movs	r2, #5
 80085ee:	4648      	mov	r0, r9
 80085f0:	f000 fa96 	bl	8008b20 <__multadd>
 80085f4:	4601      	mov	r1, r0
 80085f6:	4604      	mov	r4, r0
 80085f8:	9801      	ldr	r0, [sp, #4]
 80085fa:	f000 fcf3 	bl	8008fe4 <__mcmp>
 80085fe:	2800      	cmp	r0, #0
 8008600:	f77f aea9 	ble.w	8008356 <_dtoa_r+0x5a6>
 8008604:	463e      	mov	r6, r7
 8008606:	2331      	movs	r3, #49	@ 0x31
 8008608:	f806 3b01 	strb.w	r3, [r6], #1
 800860c:	9b04      	ldr	r3, [sp, #16]
 800860e:	3301      	adds	r3, #1
 8008610:	9304      	str	r3, [sp, #16]
 8008612:	e6a4      	b.n	800835e <_dtoa_r+0x5ae>
 8008614:	f8cd 8010 	str.w	r8, [sp, #16]
 8008618:	4654      	mov	r4, sl
 800861a:	4625      	mov	r5, r4
 800861c:	e7f2      	b.n	8008604 <_dtoa_r+0x854>
 800861e:	9b08      	ldr	r3, [sp, #32]
 8008620:	2b00      	cmp	r3, #0
 8008622:	f000 8103 	beq.w	800882c <_dtoa_r+0xa7c>
 8008626:	2e00      	cmp	r6, #0
 8008628:	dd05      	ble.n	8008636 <_dtoa_r+0x886>
 800862a:	4629      	mov	r1, r5
 800862c:	4632      	mov	r2, r6
 800862e:	4648      	mov	r0, r9
 8008630:	f000 fc6c 	bl	8008f0c <__lshift>
 8008634:	4605      	mov	r5, r0
 8008636:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008638:	2b00      	cmp	r3, #0
 800863a:	d058      	beq.n	80086ee <_dtoa_r+0x93e>
 800863c:	6869      	ldr	r1, [r5, #4]
 800863e:	4648      	mov	r0, r9
 8008640:	f000 fa0c 	bl	8008a5c <_Balloc>
 8008644:	4606      	mov	r6, r0
 8008646:	b928      	cbnz	r0, 8008654 <_dtoa_r+0x8a4>
 8008648:	4b82      	ldr	r3, [pc, #520]	@ (8008854 <_dtoa_r+0xaa4>)
 800864a:	4602      	mov	r2, r0
 800864c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008650:	f7ff bbc7 	b.w	8007de2 <_dtoa_r+0x32>
 8008654:	692a      	ldr	r2, [r5, #16]
 8008656:	3202      	adds	r2, #2
 8008658:	0092      	lsls	r2, r2, #2
 800865a:	f105 010c 	add.w	r1, r5, #12
 800865e:	300c      	adds	r0, #12
 8008660:	f7ff fb07 	bl	8007c72 <memcpy>
 8008664:	2201      	movs	r2, #1
 8008666:	4631      	mov	r1, r6
 8008668:	4648      	mov	r0, r9
 800866a:	f000 fc4f 	bl	8008f0c <__lshift>
 800866e:	1c7b      	adds	r3, r7, #1
 8008670:	9305      	str	r3, [sp, #20]
 8008672:	eb07 030b 	add.w	r3, r7, fp
 8008676:	9309      	str	r3, [sp, #36]	@ 0x24
 8008678:	9b02      	ldr	r3, [sp, #8]
 800867a:	f003 0301 	and.w	r3, r3, #1
 800867e:	46a8      	mov	r8, r5
 8008680:	9308      	str	r3, [sp, #32]
 8008682:	4605      	mov	r5, r0
 8008684:	9b05      	ldr	r3, [sp, #20]
 8008686:	9801      	ldr	r0, [sp, #4]
 8008688:	4621      	mov	r1, r4
 800868a:	f103 3bff 	add.w	fp, r3, #4294967295
 800868e:	f7ff fb05 	bl	8007c9c <quorem>
 8008692:	4641      	mov	r1, r8
 8008694:	9002      	str	r0, [sp, #8]
 8008696:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800869a:	9801      	ldr	r0, [sp, #4]
 800869c:	f000 fca2 	bl	8008fe4 <__mcmp>
 80086a0:	462a      	mov	r2, r5
 80086a2:	9006      	str	r0, [sp, #24]
 80086a4:	4621      	mov	r1, r4
 80086a6:	4648      	mov	r0, r9
 80086a8:	f000 fcb8 	bl	800901c <__mdiff>
 80086ac:	68c2      	ldr	r2, [r0, #12]
 80086ae:	4606      	mov	r6, r0
 80086b0:	b9fa      	cbnz	r2, 80086f2 <_dtoa_r+0x942>
 80086b2:	4601      	mov	r1, r0
 80086b4:	9801      	ldr	r0, [sp, #4]
 80086b6:	f000 fc95 	bl	8008fe4 <__mcmp>
 80086ba:	4602      	mov	r2, r0
 80086bc:	4631      	mov	r1, r6
 80086be:	4648      	mov	r0, r9
 80086c0:	920a      	str	r2, [sp, #40]	@ 0x28
 80086c2:	f000 fa0b 	bl	8008adc <_Bfree>
 80086c6:	9b07      	ldr	r3, [sp, #28]
 80086c8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80086ca:	9e05      	ldr	r6, [sp, #20]
 80086cc:	ea43 0102 	orr.w	r1, r3, r2
 80086d0:	9b08      	ldr	r3, [sp, #32]
 80086d2:	4319      	orrs	r1, r3
 80086d4:	d10f      	bne.n	80086f6 <_dtoa_r+0x946>
 80086d6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80086da:	d028      	beq.n	800872e <_dtoa_r+0x97e>
 80086dc:	9b06      	ldr	r3, [sp, #24]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	dd02      	ble.n	80086e8 <_dtoa_r+0x938>
 80086e2:	9b02      	ldr	r3, [sp, #8]
 80086e4:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80086e8:	f88b a000 	strb.w	sl, [fp]
 80086ec:	e639      	b.n	8008362 <_dtoa_r+0x5b2>
 80086ee:	4628      	mov	r0, r5
 80086f0:	e7bd      	b.n	800866e <_dtoa_r+0x8be>
 80086f2:	2201      	movs	r2, #1
 80086f4:	e7e2      	b.n	80086bc <_dtoa_r+0x90c>
 80086f6:	9b06      	ldr	r3, [sp, #24]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	db04      	blt.n	8008706 <_dtoa_r+0x956>
 80086fc:	9907      	ldr	r1, [sp, #28]
 80086fe:	430b      	orrs	r3, r1
 8008700:	9908      	ldr	r1, [sp, #32]
 8008702:	430b      	orrs	r3, r1
 8008704:	d120      	bne.n	8008748 <_dtoa_r+0x998>
 8008706:	2a00      	cmp	r2, #0
 8008708:	ddee      	ble.n	80086e8 <_dtoa_r+0x938>
 800870a:	9901      	ldr	r1, [sp, #4]
 800870c:	2201      	movs	r2, #1
 800870e:	4648      	mov	r0, r9
 8008710:	f000 fbfc 	bl	8008f0c <__lshift>
 8008714:	4621      	mov	r1, r4
 8008716:	9001      	str	r0, [sp, #4]
 8008718:	f000 fc64 	bl	8008fe4 <__mcmp>
 800871c:	2800      	cmp	r0, #0
 800871e:	dc03      	bgt.n	8008728 <_dtoa_r+0x978>
 8008720:	d1e2      	bne.n	80086e8 <_dtoa_r+0x938>
 8008722:	f01a 0f01 	tst.w	sl, #1
 8008726:	d0df      	beq.n	80086e8 <_dtoa_r+0x938>
 8008728:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800872c:	d1d9      	bne.n	80086e2 <_dtoa_r+0x932>
 800872e:	2339      	movs	r3, #57	@ 0x39
 8008730:	f88b 3000 	strb.w	r3, [fp]
 8008734:	4633      	mov	r3, r6
 8008736:	461e      	mov	r6, r3
 8008738:	3b01      	subs	r3, #1
 800873a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800873e:	2a39      	cmp	r2, #57	@ 0x39
 8008740:	d053      	beq.n	80087ea <_dtoa_r+0xa3a>
 8008742:	3201      	adds	r2, #1
 8008744:	701a      	strb	r2, [r3, #0]
 8008746:	e60c      	b.n	8008362 <_dtoa_r+0x5b2>
 8008748:	2a00      	cmp	r2, #0
 800874a:	dd07      	ble.n	800875c <_dtoa_r+0x9ac>
 800874c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8008750:	d0ed      	beq.n	800872e <_dtoa_r+0x97e>
 8008752:	f10a 0301 	add.w	r3, sl, #1
 8008756:	f88b 3000 	strb.w	r3, [fp]
 800875a:	e602      	b.n	8008362 <_dtoa_r+0x5b2>
 800875c:	9b05      	ldr	r3, [sp, #20]
 800875e:	9a05      	ldr	r2, [sp, #20]
 8008760:	f803 ac01 	strb.w	sl, [r3, #-1]
 8008764:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008766:	4293      	cmp	r3, r2
 8008768:	d029      	beq.n	80087be <_dtoa_r+0xa0e>
 800876a:	9901      	ldr	r1, [sp, #4]
 800876c:	2300      	movs	r3, #0
 800876e:	220a      	movs	r2, #10
 8008770:	4648      	mov	r0, r9
 8008772:	f000 f9d5 	bl	8008b20 <__multadd>
 8008776:	45a8      	cmp	r8, r5
 8008778:	9001      	str	r0, [sp, #4]
 800877a:	f04f 0300 	mov.w	r3, #0
 800877e:	f04f 020a 	mov.w	r2, #10
 8008782:	4641      	mov	r1, r8
 8008784:	4648      	mov	r0, r9
 8008786:	d107      	bne.n	8008798 <_dtoa_r+0x9e8>
 8008788:	f000 f9ca 	bl	8008b20 <__multadd>
 800878c:	4680      	mov	r8, r0
 800878e:	4605      	mov	r5, r0
 8008790:	9b05      	ldr	r3, [sp, #20]
 8008792:	3301      	adds	r3, #1
 8008794:	9305      	str	r3, [sp, #20]
 8008796:	e775      	b.n	8008684 <_dtoa_r+0x8d4>
 8008798:	f000 f9c2 	bl	8008b20 <__multadd>
 800879c:	4629      	mov	r1, r5
 800879e:	4680      	mov	r8, r0
 80087a0:	2300      	movs	r3, #0
 80087a2:	220a      	movs	r2, #10
 80087a4:	4648      	mov	r0, r9
 80087a6:	f000 f9bb 	bl	8008b20 <__multadd>
 80087aa:	4605      	mov	r5, r0
 80087ac:	e7f0      	b.n	8008790 <_dtoa_r+0x9e0>
 80087ae:	f1bb 0f00 	cmp.w	fp, #0
 80087b2:	bfcc      	ite	gt
 80087b4:	465e      	movgt	r6, fp
 80087b6:	2601      	movle	r6, #1
 80087b8:	443e      	add	r6, r7
 80087ba:	f04f 0800 	mov.w	r8, #0
 80087be:	9901      	ldr	r1, [sp, #4]
 80087c0:	2201      	movs	r2, #1
 80087c2:	4648      	mov	r0, r9
 80087c4:	f000 fba2 	bl	8008f0c <__lshift>
 80087c8:	4621      	mov	r1, r4
 80087ca:	9001      	str	r0, [sp, #4]
 80087cc:	f000 fc0a 	bl	8008fe4 <__mcmp>
 80087d0:	2800      	cmp	r0, #0
 80087d2:	dcaf      	bgt.n	8008734 <_dtoa_r+0x984>
 80087d4:	d102      	bne.n	80087dc <_dtoa_r+0xa2c>
 80087d6:	f01a 0f01 	tst.w	sl, #1
 80087da:	d1ab      	bne.n	8008734 <_dtoa_r+0x984>
 80087dc:	4633      	mov	r3, r6
 80087de:	461e      	mov	r6, r3
 80087e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80087e4:	2a30      	cmp	r2, #48	@ 0x30
 80087e6:	d0fa      	beq.n	80087de <_dtoa_r+0xa2e>
 80087e8:	e5bb      	b.n	8008362 <_dtoa_r+0x5b2>
 80087ea:	429f      	cmp	r7, r3
 80087ec:	d1a3      	bne.n	8008736 <_dtoa_r+0x986>
 80087ee:	9b04      	ldr	r3, [sp, #16]
 80087f0:	3301      	adds	r3, #1
 80087f2:	9304      	str	r3, [sp, #16]
 80087f4:	2331      	movs	r3, #49	@ 0x31
 80087f6:	703b      	strb	r3, [r7, #0]
 80087f8:	e5b3      	b.n	8008362 <_dtoa_r+0x5b2>
 80087fa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80087fc:	4f16      	ldr	r7, [pc, #88]	@ (8008858 <_dtoa_r+0xaa8>)
 80087fe:	b11b      	cbz	r3, 8008808 <_dtoa_r+0xa58>
 8008800:	f107 0308 	add.w	r3, r7, #8
 8008804:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8008806:	6013      	str	r3, [r2, #0]
 8008808:	4638      	mov	r0, r7
 800880a:	b011      	add	sp, #68	@ 0x44
 800880c:	ecbd 8b02 	vpop	{d8}
 8008810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008814:	9b07      	ldr	r3, [sp, #28]
 8008816:	2b01      	cmp	r3, #1
 8008818:	f77f ae36 	ble.w	8008488 <_dtoa_r+0x6d8>
 800881c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800881e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008820:	2001      	movs	r0, #1
 8008822:	e656      	b.n	80084d2 <_dtoa_r+0x722>
 8008824:	f1bb 0f00 	cmp.w	fp, #0
 8008828:	f77f aed7 	ble.w	80085da <_dtoa_r+0x82a>
 800882c:	463e      	mov	r6, r7
 800882e:	9801      	ldr	r0, [sp, #4]
 8008830:	4621      	mov	r1, r4
 8008832:	f7ff fa33 	bl	8007c9c <quorem>
 8008836:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800883a:	f806 ab01 	strb.w	sl, [r6], #1
 800883e:	1bf2      	subs	r2, r6, r7
 8008840:	4593      	cmp	fp, r2
 8008842:	ddb4      	ble.n	80087ae <_dtoa_r+0x9fe>
 8008844:	9901      	ldr	r1, [sp, #4]
 8008846:	2300      	movs	r3, #0
 8008848:	220a      	movs	r2, #10
 800884a:	4648      	mov	r0, r9
 800884c:	f000 f968 	bl	8008b20 <__multadd>
 8008850:	9001      	str	r0, [sp, #4]
 8008852:	e7ec      	b.n	800882e <_dtoa_r+0xa7e>
 8008854:	0800b1f1 	.word	0x0800b1f1
 8008858:	0800b175 	.word	0x0800b175

0800885c <_free_r>:
 800885c:	b538      	push	{r3, r4, r5, lr}
 800885e:	4605      	mov	r5, r0
 8008860:	2900      	cmp	r1, #0
 8008862:	d041      	beq.n	80088e8 <_free_r+0x8c>
 8008864:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008868:	1f0c      	subs	r4, r1, #4
 800886a:	2b00      	cmp	r3, #0
 800886c:	bfb8      	it	lt
 800886e:	18e4      	addlt	r4, r4, r3
 8008870:	f000 f8e8 	bl	8008a44 <__malloc_lock>
 8008874:	4a1d      	ldr	r2, [pc, #116]	@ (80088ec <_free_r+0x90>)
 8008876:	6813      	ldr	r3, [r2, #0]
 8008878:	b933      	cbnz	r3, 8008888 <_free_r+0x2c>
 800887a:	6063      	str	r3, [r4, #4]
 800887c:	6014      	str	r4, [r2, #0]
 800887e:	4628      	mov	r0, r5
 8008880:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008884:	f000 b8e4 	b.w	8008a50 <__malloc_unlock>
 8008888:	42a3      	cmp	r3, r4
 800888a:	d908      	bls.n	800889e <_free_r+0x42>
 800888c:	6820      	ldr	r0, [r4, #0]
 800888e:	1821      	adds	r1, r4, r0
 8008890:	428b      	cmp	r3, r1
 8008892:	bf01      	itttt	eq
 8008894:	6819      	ldreq	r1, [r3, #0]
 8008896:	685b      	ldreq	r3, [r3, #4]
 8008898:	1809      	addeq	r1, r1, r0
 800889a:	6021      	streq	r1, [r4, #0]
 800889c:	e7ed      	b.n	800887a <_free_r+0x1e>
 800889e:	461a      	mov	r2, r3
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	b10b      	cbz	r3, 80088a8 <_free_r+0x4c>
 80088a4:	42a3      	cmp	r3, r4
 80088a6:	d9fa      	bls.n	800889e <_free_r+0x42>
 80088a8:	6811      	ldr	r1, [r2, #0]
 80088aa:	1850      	adds	r0, r2, r1
 80088ac:	42a0      	cmp	r0, r4
 80088ae:	d10b      	bne.n	80088c8 <_free_r+0x6c>
 80088b0:	6820      	ldr	r0, [r4, #0]
 80088b2:	4401      	add	r1, r0
 80088b4:	1850      	adds	r0, r2, r1
 80088b6:	4283      	cmp	r3, r0
 80088b8:	6011      	str	r1, [r2, #0]
 80088ba:	d1e0      	bne.n	800887e <_free_r+0x22>
 80088bc:	6818      	ldr	r0, [r3, #0]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	6053      	str	r3, [r2, #4]
 80088c2:	4408      	add	r0, r1
 80088c4:	6010      	str	r0, [r2, #0]
 80088c6:	e7da      	b.n	800887e <_free_r+0x22>
 80088c8:	d902      	bls.n	80088d0 <_free_r+0x74>
 80088ca:	230c      	movs	r3, #12
 80088cc:	602b      	str	r3, [r5, #0]
 80088ce:	e7d6      	b.n	800887e <_free_r+0x22>
 80088d0:	6820      	ldr	r0, [r4, #0]
 80088d2:	1821      	adds	r1, r4, r0
 80088d4:	428b      	cmp	r3, r1
 80088d6:	bf04      	itt	eq
 80088d8:	6819      	ldreq	r1, [r3, #0]
 80088da:	685b      	ldreq	r3, [r3, #4]
 80088dc:	6063      	str	r3, [r4, #4]
 80088de:	bf04      	itt	eq
 80088e0:	1809      	addeq	r1, r1, r0
 80088e2:	6021      	streq	r1, [r4, #0]
 80088e4:	6054      	str	r4, [r2, #4]
 80088e6:	e7ca      	b.n	800887e <_free_r+0x22>
 80088e8:	bd38      	pop	{r3, r4, r5, pc}
 80088ea:	bf00      	nop
 80088ec:	240044fc 	.word	0x240044fc

080088f0 <malloc>:
 80088f0:	4b02      	ldr	r3, [pc, #8]	@ (80088fc <malloc+0xc>)
 80088f2:	4601      	mov	r1, r0
 80088f4:	6818      	ldr	r0, [r3, #0]
 80088f6:	f000 b825 	b.w	8008944 <_malloc_r>
 80088fa:	bf00      	nop
 80088fc:	24000020 	.word	0x24000020

08008900 <sbrk_aligned>:
 8008900:	b570      	push	{r4, r5, r6, lr}
 8008902:	4e0f      	ldr	r6, [pc, #60]	@ (8008940 <sbrk_aligned+0x40>)
 8008904:	460c      	mov	r4, r1
 8008906:	6831      	ldr	r1, [r6, #0]
 8008908:	4605      	mov	r5, r0
 800890a:	b911      	cbnz	r1, 8008912 <sbrk_aligned+0x12>
 800890c:	f001 ff7e 	bl	800a80c <_sbrk_r>
 8008910:	6030      	str	r0, [r6, #0]
 8008912:	4621      	mov	r1, r4
 8008914:	4628      	mov	r0, r5
 8008916:	f001 ff79 	bl	800a80c <_sbrk_r>
 800891a:	1c43      	adds	r3, r0, #1
 800891c:	d103      	bne.n	8008926 <sbrk_aligned+0x26>
 800891e:	f04f 34ff 	mov.w	r4, #4294967295
 8008922:	4620      	mov	r0, r4
 8008924:	bd70      	pop	{r4, r5, r6, pc}
 8008926:	1cc4      	adds	r4, r0, #3
 8008928:	f024 0403 	bic.w	r4, r4, #3
 800892c:	42a0      	cmp	r0, r4
 800892e:	d0f8      	beq.n	8008922 <sbrk_aligned+0x22>
 8008930:	1a21      	subs	r1, r4, r0
 8008932:	4628      	mov	r0, r5
 8008934:	f001 ff6a 	bl	800a80c <_sbrk_r>
 8008938:	3001      	adds	r0, #1
 800893a:	d1f2      	bne.n	8008922 <sbrk_aligned+0x22>
 800893c:	e7ef      	b.n	800891e <sbrk_aligned+0x1e>
 800893e:	bf00      	nop
 8008940:	240044f8 	.word	0x240044f8

08008944 <_malloc_r>:
 8008944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008948:	1ccd      	adds	r5, r1, #3
 800894a:	f025 0503 	bic.w	r5, r5, #3
 800894e:	3508      	adds	r5, #8
 8008950:	2d0c      	cmp	r5, #12
 8008952:	bf38      	it	cc
 8008954:	250c      	movcc	r5, #12
 8008956:	2d00      	cmp	r5, #0
 8008958:	4606      	mov	r6, r0
 800895a:	db01      	blt.n	8008960 <_malloc_r+0x1c>
 800895c:	42a9      	cmp	r1, r5
 800895e:	d904      	bls.n	800896a <_malloc_r+0x26>
 8008960:	230c      	movs	r3, #12
 8008962:	6033      	str	r3, [r6, #0]
 8008964:	2000      	movs	r0, #0
 8008966:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800896a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008a40 <_malloc_r+0xfc>
 800896e:	f000 f869 	bl	8008a44 <__malloc_lock>
 8008972:	f8d8 3000 	ldr.w	r3, [r8]
 8008976:	461c      	mov	r4, r3
 8008978:	bb44      	cbnz	r4, 80089cc <_malloc_r+0x88>
 800897a:	4629      	mov	r1, r5
 800897c:	4630      	mov	r0, r6
 800897e:	f7ff ffbf 	bl	8008900 <sbrk_aligned>
 8008982:	1c43      	adds	r3, r0, #1
 8008984:	4604      	mov	r4, r0
 8008986:	d158      	bne.n	8008a3a <_malloc_r+0xf6>
 8008988:	f8d8 4000 	ldr.w	r4, [r8]
 800898c:	4627      	mov	r7, r4
 800898e:	2f00      	cmp	r7, #0
 8008990:	d143      	bne.n	8008a1a <_malloc_r+0xd6>
 8008992:	2c00      	cmp	r4, #0
 8008994:	d04b      	beq.n	8008a2e <_malloc_r+0xea>
 8008996:	6823      	ldr	r3, [r4, #0]
 8008998:	4639      	mov	r1, r7
 800899a:	4630      	mov	r0, r6
 800899c:	eb04 0903 	add.w	r9, r4, r3
 80089a0:	f001 ff34 	bl	800a80c <_sbrk_r>
 80089a4:	4581      	cmp	r9, r0
 80089a6:	d142      	bne.n	8008a2e <_malloc_r+0xea>
 80089a8:	6821      	ldr	r1, [r4, #0]
 80089aa:	1a6d      	subs	r5, r5, r1
 80089ac:	4629      	mov	r1, r5
 80089ae:	4630      	mov	r0, r6
 80089b0:	f7ff ffa6 	bl	8008900 <sbrk_aligned>
 80089b4:	3001      	adds	r0, #1
 80089b6:	d03a      	beq.n	8008a2e <_malloc_r+0xea>
 80089b8:	6823      	ldr	r3, [r4, #0]
 80089ba:	442b      	add	r3, r5
 80089bc:	6023      	str	r3, [r4, #0]
 80089be:	f8d8 3000 	ldr.w	r3, [r8]
 80089c2:	685a      	ldr	r2, [r3, #4]
 80089c4:	bb62      	cbnz	r2, 8008a20 <_malloc_r+0xdc>
 80089c6:	f8c8 7000 	str.w	r7, [r8]
 80089ca:	e00f      	b.n	80089ec <_malloc_r+0xa8>
 80089cc:	6822      	ldr	r2, [r4, #0]
 80089ce:	1b52      	subs	r2, r2, r5
 80089d0:	d420      	bmi.n	8008a14 <_malloc_r+0xd0>
 80089d2:	2a0b      	cmp	r2, #11
 80089d4:	d917      	bls.n	8008a06 <_malloc_r+0xc2>
 80089d6:	1961      	adds	r1, r4, r5
 80089d8:	42a3      	cmp	r3, r4
 80089da:	6025      	str	r5, [r4, #0]
 80089dc:	bf18      	it	ne
 80089de:	6059      	strne	r1, [r3, #4]
 80089e0:	6863      	ldr	r3, [r4, #4]
 80089e2:	bf08      	it	eq
 80089e4:	f8c8 1000 	streq.w	r1, [r8]
 80089e8:	5162      	str	r2, [r4, r5]
 80089ea:	604b      	str	r3, [r1, #4]
 80089ec:	4630      	mov	r0, r6
 80089ee:	f000 f82f 	bl	8008a50 <__malloc_unlock>
 80089f2:	f104 000b 	add.w	r0, r4, #11
 80089f6:	1d23      	adds	r3, r4, #4
 80089f8:	f020 0007 	bic.w	r0, r0, #7
 80089fc:	1ac2      	subs	r2, r0, r3
 80089fe:	bf1c      	itt	ne
 8008a00:	1a1b      	subne	r3, r3, r0
 8008a02:	50a3      	strne	r3, [r4, r2]
 8008a04:	e7af      	b.n	8008966 <_malloc_r+0x22>
 8008a06:	6862      	ldr	r2, [r4, #4]
 8008a08:	42a3      	cmp	r3, r4
 8008a0a:	bf0c      	ite	eq
 8008a0c:	f8c8 2000 	streq.w	r2, [r8]
 8008a10:	605a      	strne	r2, [r3, #4]
 8008a12:	e7eb      	b.n	80089ec <_malloc_r+0xa8>
 8008a14:	4623      	mov	r3, r4
 8008a16:	6864      	ldr	r4, [r4, #4]
 8008a18:	e7ae      	b.n	8008978 <_malloc_r+0x34>
 8008a1a:	463c      	mov	r4, r7
 8008a1c:	687f      	ldr	r7, [r7, #4]
 8008a1e:	e7b6      	b.n	800898e <_malloc_r+0x4a>
 8008a20:	461a      	mov	r2, r3
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	42a3      	cmp	r3, r4
 8008a26:	d1fb      	bne.n	8008a20 <_malloc_r+0xdc>
 8008a28:	2300      	movs	r3, #0
 8008a2a:	6053      	str	r3, [r2, #4]
 8008a2c:	e7de      	b.n	80089ec <_malloc_r+0xa8>
 8008a2e:	230c      	movs	r3, #12
 8008a30:	6033      	str	r3, [r6, #0]
 8008a32:	4630      	mov	r0, r6
 8008a34:	f000 f80c 	bl	8008a50 <__malloc_unlock>
 8008a38:	e794      	b.n	8008964 <_malloc_r+0x20>
 8008a3a:	6005      	str	r5, [r0, #0]
 8008a3c:	e7d6      	b.n	80089ec <_malloc_r+0xa8>
 8008a3e:	bf00      	nop
 8008a40:	240044fc 	.word	0x240044fc

08008a44 <__malloc_lock>:
 8008a44:	4801      	ldr	r0, [pc, #4]	@ (8008a4c <__malloc_lock+0x8>)
 8008a46:	f7ff b912 	b.w	8007c6e <__retarget_lock_acquire_recursive>
 8008a4a:	bf00      	nop
 8008a4c:	240044f4 	.word	0x240044f4

08008a50 <__malloc_unlock>:
 8008a50:	4801      	ldr	r0, [pc, #4]	@ (8008a58 <__malloc_unlock+0x8>)
 8008a52:	f7ff b90d 	b.w	8007c70 <__retarget_lock_release_recursive>
 8008a56:	bf00      	nop
 8008a58:	240044f4 	.word	0x240044f4

08008a5c <_Balloc>:
 8008a5c:	b570      	push	{r4, r5, r6, lr}
 8008a5e:	69c6      	ldr	r6, [r0, #28]
 8008a60:	4604      	mov	r4, r0
 8008a62:	460d      	mov	r5, r1
 8008a64:	b976      	cbnz	r6, 8008a84 <_Balloc+0x28>
 8008a66:	2010      	movs	r0, #16
 8008a68:	f7ff ff42 	bl	80088f0 <malloc>
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	61e0      	str	r0, [r4, #28]
 8008a70:	b920      	cbnz	r0, 8008a7c <_Balloc+0x20>
 8008a72:	4b18      	ldr	r3, [pc, #96]	@ (8008ad4 <_Balloc+0x78>)
 8008a74:	4818      	ldr	r0, [pc, #96]	@ (8008ad8 <_Balloc+0x7c>)
 8008a76:	216b      	movs	r1, #107	@ 0x6b
 8008a78:	f001 fee2 	bl	800a840 <__assert_func>
 8008a7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a80:	6006      	str	r6, [r0, #0]
 8008a82:	60c6      	str	r6, [r0, #12]
 8008a84:	69e6      	ldr	r6, [r4, #28]
 8008a86:	68f3      	ldr	r3, [r6, #12]
 8008a88:	b183      	cbz	r3, 8008aac <_Balloc+0x50>
 8008a8a:	69e3      	ldr	r3, [r4, #28]
 8008a8c:	68db      	ldr	r3, [r3, #12]
 8008a8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008a92:	b9b8      	cbnz	r0, 8008ac4 <_Balloc+0x68>
 8008a94:	2101      	movs	r1, #1
 8008a96:	fa01 f605 	lsl.w	r6, r1, r5
 8008a9a:	1d72      	adds	r2, r6, #5
 8008a9c:	0092      	lsls	r2, r2, #2
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	f001 feec 	bl	800a87c <_calloc_r>
 8008aa4:	b160      	cbz	r0, 8008ac0 <_Balloc+0x64>
 8008aa6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008aaa:	e00e      	b.n	8008aca <_Balloc+0x6e>
 8008aac:	2221      	movs	r2, #33	@ 0x21
 8008aae:	2104      	movs	r1, #4
 8008ab0:	4620      	mov	r0, r4
 8008ab2:	f001 fee3 	bl	800a87c <_calloc_r>
 8008ab6:	69e3      	ldr	r3, [r4, #28]
 8008ab8:	60f0      	str	r0, [r6, #12]
 8008aba:	68db      	ldr	r3, [r3, #12]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d1e4      	bne.n	8008a8a <_Balloc+0x2e>
 8008ac0:	2000      	movs	r0, #0
 8008ac2:	bd70      	pop	{r4, r5, r6, pc}
 8008ac4:	6802      	ldr	r2, [r0, #0]
 8008ac6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008aca:	2300      	movs	r3, #0
 8008acc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008ad0:	e7f7      	b.n	8008ac2 <_Balloc+0x66>
 8008ad2:	bf00      	nop
 8008ad4:	0800b182 	.word	0x0800b182
 8008ad8:	0800b202 	.word	0x0800b202

08008adc <_Bfree>:
 8008adc:	b570      	push	{r4, r5, r6, lr}
 8008ade:	69c6      	ldr	r6, [r0, #28]
 8008ae0:	4605      	mov	r5, r0
 8008ae2:	460c      	mov	r4, r1
 8008ae4:	b976      	cbnz	r6, 8008b04 <_Bfree+0x28>
 8008ae6:	2010      	movs	r0, #16
 8008ae8:	f7ff ff02 	bl	80088f0 <malloc>
 8008aec:	4602      	mov	r2, r0
 8008aee:	61e8      	str	r0, [r5, #28]
 8008af0:	b920      	cbnz	r0, 8008afc <_Bfree+0x20>
 8008af2:	4b09      	ldr	r3, [pc, #36]	@ (8008b18 <_Bfree+0x3c>)
 8008af4:	4809      	ldr	r0, [pc, #36]	@ (8008b1c <_Bfree+0x40>)
 8008af6:	218f      	movs	r1, #143	@ 0x8f
 8008af8:	f001 fea2 	bl	800a840 <__assert_func>
 8008afc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b00:	6006      	str	r6, [r0, #0]
 8008b02:	60c6      	str	r6, [r0, #12]
 8008b04:	b13c      	cbz	r4, 8008b16 <_Bfree+0x3a>
 8008b06:	69eb      	ldr	r3, [r5, #28]
 8008b08:	6862      	ldr	r2, [r4, #4]
 8008b0a:	68db      	ldr	r3, [r3, #12]
 8008b0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008b10:	6021      	str	r1, [r4, #0]
 8008b12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008b16:	bd70      	pop	{r4, r5, r6, pc}
 8008b18:	0800b182 	.word	0x0800b182
 8008b1c:	0800b202 	.word	0x0800b202

08008b20 <__multadd>:
 8008b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b24:	690d      	ldr	r5, [r1, #16]
 8008b26:	4607      	mov	r7, r0
 8008b28:	460c      	mov	r4, r1
 8008b2a:	461e      	mov	r6, r3
 8008b2c:	f101 0c14 	add.w	ip, r1, #20
 8008b30:	2000      	movs	r0, #0
 8008b32:	f8dc 3000 	ldr.w	r3, [ip]
 8008b36:	b299      	uxth	r1, r3
 8008b38:	fb02 6101 	mla	r1, r2, r1, r6
 8008b3c:	0c1e      	lsrs	r6, r3, #16
 8008b3e:	0c0b      	lsrs	r3, r1, #16
 8008b40:	fb02 3306 	mla	r3, r2, r6, r3
 8008b44:	b289      	uxth	r1, r1
 8008b46:	3001      	adds	r0, #1
 8008b48:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008b4c:	4285      	cmp	r5, r0
 8008b4e:	f84c 1b04 	str.w	r1, [ip], #4
 8008b52:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008b56:	dcec      	bgt.n	8008b32 <__multadd+0x12>
 8008b58:	b30e      	cbz	r6, 8008b9e <__multadd+0x7e>
 8008b5a:	68a3      	ldr	r3, [r4, #8]
 8008b5c:	42ab      	cmp	r3, r5
 8008b5e:	dc19      	bgt.n	8008b94 <__multadd+0x74>
 8008b60:	6861      	ldr	r1, [r4, #4]
 8008b62:	4638      	mov	r0, r7
 8008b64:	3101      	adds	r1, #1
 8008b66:	f7ff ff79 	bl	8008a5c <_Balloc>
 8008b6a:	4680      	mov	r8, r0
 8008b6c:	b928      	cbnz	r0, 8008b7a <__multadd+0x5a>
 8008b6e:	4602      	mov	r2, r0
 8008b70:	4b0c      	ldr	r3, [pc, #48]	@ (8008ba4 <__multadd+0x84>)
 8008b72:	480d      	ldr	r0, [pc, #52]	@ (8008ba8 <__multadd+0x88>)
 8008b74:	21ba      	movs	r1, #186	@ 0xba
 8008b76:	f001 fe63 	bl	800a840 <__assert_func>
 8008b7a:	6922      	ldr	r2, [r4, #16]
 8008b7c:	3202      	adds	r2, #2
 8008b7e:	f104 010c 	add.w	r1, r4, #12
 8008b82:	0092      	lsls	r2, r2, #2
 8008b84:	300c      	adds	r0, #12
 8008b86:	f7ff f874 	bl	8007c72 <memcpy>
 8008b8a:	4621      	mov	r1, r4
 8008b8c:	4638      	mov	r0, r7
 8008b8e:	f7ff ffa5 	bl	8008adc <_Bfree>
 8008b92:	4644      	mov	r4, r8
 8008b94:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008b98:	3501      	adds	r5, #1
 8008b9a:	615e      	str	r6, [r3, #20]
 8008b9c:	6125      	str	r5, [r4, #16]
 8008b9e:	4620      	mov	r0, r4
 8008ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ba4:	0800b1f1 	.word	0x0800b1f1
 8008ba8:	0800b202 	.word	0x0800b202

08008bac <__s2b>:
 8008bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bb0:	460c      	mov	r4, r1
 8008bb2:	4615      	mov	r5, r2
 8008bb4:	461f      	mov	r7, r3
 8008bb6:	2209      	movs	r2, #9
 8008bb8:	3308      	adds	r3, #8
 8008bba:	4606      	mov	r6, r0
 8008bbc:	fb93 f3f2 	sdiv	r3, r3, r2
 8008bc0:	2100      	movs	r1, #0
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	db09      	blt.n	8008bdc <__s2b+0x30>
 8008bc8:	4630      	mov	r0, r6
 8008bca:	f7ff ff47 	bl	8008a5c <_Balloc>
 8008bce:	b940      	cbnz	r0, 8008be2 <__s2b+0x36>
 8008bd0:	4602      	mov	r2, r0
 8008bd2:	4b19      	ldr	r3, [pc, #100]	@ (8008c38 <__s2b+0x8c>)
 8008bd4:	4819      	ldr	r0, [pc, #100]	@ (8008c3c <__s2b+0x90>)
 8008bd6:	21d3      	movs	r1, #211	@ 0xd3
 8008bd8:	f001 fe32 	bl	800a840 <__assert_func>
 8008bdc:	0052      	lsls	r2, r2, #1
 8008bde:	3101      	adds	r1, #1
 8008be0:	e7f0      	b.n	8008bc4 <__s2b+0x18>
 8008be2:	9b08      	ldr	r3, [sp, #32]
 8008be4:	6143      	str	r3, [r0, #20]
 8008be6:	2d09      	cmp	r5, #9
 8008be8:	f04f 0301 	mov.w	r3, #1
 8008bec:	6103      	str	r3, [r0, #16]
 8008bee:	dd16      	ble.n	8008c1e <__s2b+0x72>
 8008bf0:	f104 0909 	add.w	r9, r4, #9
 8008bf4:	46c8      	mov	r8, r9
 8008bf6:	442c      	add	r4, r5
 8008bf8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008bfc:	4601      	mov	r1, r0
 8008bfe:	3b30      	subs	r3, #48	@ 0x30
 8008c00:	220a      	movs	r2, #10
 8008c02:	4630      	mov	r0, r6
 8008c04:	f7ff ff8c 	bl	8008b20 <__multadd>
 8008c08:	45a0      	cmp	r8, r4
 8008c0a:	d1f5      	bne.n	8008bf8 <__s2b+0x4c>
 8008c0c:	f1a5 0408 	sub.w	r4, r5, #8
 8008c10:	444c      	add	r4, r9
 8008c12:	1b2d      	subs	r5, r5, r4
 8008c14:	1963      	adds	r3, r4, r5
 8008c16:	42bb      	cmp	r3, r7
 8008c18:	db04      	blt.n	8008c24 <__s2b+0x78>
 8008c1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c1e:	340a      	adds	r4, #10
 8008c20:	2509      	movs	r5, #9
 8008c22:	e7f6      	b.n	8008c12 <__s2b+0x66>
 8008c24:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008c28:	4601      	mov	r1, r0
 8008c2a:	3b30      	subs	r3, #48	@ 0x30
 8008c2c:	220a      	movs	r2, #10
 8008c2e:	4630      	mov	r0, r6
 8008c30:	f7ff ff76 	bl	8008b20 <__multadd>
 8008c34:	e7ee      	b.n	8008c14 <__s2b+0x68>
 8008c36:	bf00      	nop
 8008c38:	0800b1f1 	.word	0x0800b1f1
 8008c3c:	0800b202 	.word	0x0800b202

08008c40 <__hi0bits>:
 8008c40:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008c44:	4603      	mov	r3, r0
 8008c46:	bf36      	itet	cc
 8008c48:	0403      	lslcc	r3, r0, #16
 8008c4a:	2000      	movcs	r0, #0
 8008c4c:	2010      	movcc	r0, #16
 8008c4e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008c52:	bf3c      	itt	cc
 8008c54:	021b      	lslcc	r3, r3, #8
 8008c56:	3008      	addcc	r0, #8
 8008c58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c5c:	bf3c      	itt	cc
 8008c5e:	011b      	lslcc	r3, r3, #4
 8008c60:	3004      	addcc	r0, #4
 8008c62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c66:	bf3c      	itt	cc
 8008c68:	009b      	lslcc	r3, r3, #2
 8008c6a:	3002      	addcc	r0, #2
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	db05      	blt.n	8008c7c <__hi0bits+0x3c>
 8008c70:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008c74:	f100 0001 	add.w	r0, r0, #1
 8008c78:	bf08      	it	eq
 8008c7a:	2020      	moveq	r0, #32
 8008c7c:	4770      	bx	lr

08008c7e <__lo0bits>:
 8008c7e:	6803      	ldr	r3, [r0, #0]
 8008c80:	4602      	mov	r2, r0
 8008c82:	f013 0007 	ands.w	r0, r3, #7
 8008c86:	d00b      	beq.n	8008ca0 <__lo0bits+0x22>
 8008c88:	07d9      	lsls	r1, r3, #31
 8008c8a:	d421      	bmi.n	8008cd0 <__lo0bits+0x52>
 8008c8c:	0798      	lsls	r0, r3, #30
 8008c8e:	bf49      	itett	mi
 8008c90:	085b      	lsrmi	r3, r3, #1
 8008c92:	089b      	lsrpl	r3, r3, #2
 8008c94:	2001      	movmi	r0, #1
 8008c96:	6013      	strmi	r3, [r2, #0]
 8008c98:	bf5c      	itt	pl
 8008c9a:	6013      	strpl	r3, [r2, #0]
 8008c9c:	2002      	movpl	r0, #2
 8008c9e:	4770      	bx	lr
 8008ca0:	b299      	uxth	r1, r3
 8008ca2:	b909      	cbnz	r1, 8008ca8 <__lo0bits+0x2a>
 8008ca4:	0c1b      	lsrs	r3, r3, #16
 8008ca6:	2010      	movs	r0, #16
 8008ca8:	b2d9      	uxtb	r1, r3
 8008caa:	b909      	cbnz	r1, 8008cb0 <__lo0bits+0x32>
 8008cac:	3008      	adds	r0, #8
 8008cae:	0a1b      	lsrs	r3, r3, #8
 8008cb0:	0719      	lsls	r1, r3, #28
 8008cb2:	bf04      	itt	eq
 8008cb4:	091b      	lsreq	r3, r3, #4
 8008cb6:	3004      	addeq	r0, #4
 8008cb8:	0799      	lsls	r1, r3, #30
 8008cba:	bf04      	itt	eq
 8008cbc:	089b      	lsreq	r3, r3, #2
 8008cbe:	3002      	addeq	r0, #2
 8008cc0:	07d9      	lsls	r1, r3, #31
 8008cc2:	d403      	bmi.n	8008ccc <__lo0bits+0x4e>
 8008cc4:	085b      	lsrs	r3, r3, #1
 8008cc6:	f100 0001 	add.w	r0, r0, #1
 8008cca:	d003      	beq.n	8008cd4 <__lo0bits+0x56>
 8008ccc:	6013      	str	r3, [r2, #0]
 8008cce:	4770      	bx	lr
 8008cd0:	2000      	movs	r0, #0
 8008cd2:	4770      	bx	lr
 8008cd4:	2020      	movs	r0, #32
 8008cd6:	4770      	bx	lr

08008cd8 <__i2b>:
 8008cd8:	b510      	push	{r4, lr}
 8008cda:	460c      	mov	r4, r1
 8008cdc:	2101      	movs	r1, #1
 8008cde:	f7ff febd 	bl	8008a5c <_Balloc>
 8008ce2:	4602      	mov	r2, r0
 8008ce4:	b928      	cbnz	r0, 8008cf2 <__i2b+0x1a>
 8008ce6:	4b05      	ldr	r3, [pc, #20]	@ (8008cfc <__i2b+0x24>)
 8008ce8:	4805      	ldr	r0, [pc, #20]	@ (8008d00 <__i2b+0x28>)
 8008cea:	f240 1145 	movw	r1, #325	@ 0x145
 8008cee:	f001 fda7 	bl	800a840 <__assert_func>
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	6144      	str	r4, [r0, #20]
 8008cf6:	6103      	str	r3, [r0, #16]
 8008cf8:	bd10      	pop	{r4, pc}
 8008cfa:	bf00      	nop
 8008cfc:	0800b1f1 	.word	0x0800b1f1
 8008d00:	0800b202 	.word	0x0800b202

08008d04 <__multiply>:
 8008d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d08:	4614      	mov	r4, r2
 8008d0a:	690a      	ldr	r2, [r1, #16]
 8008d0c:	6923      	ldr	r3, [r4, #16]
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	bfa8      	it	ge
 8008d12:	4623      	movge	r3, r4
 8008d14:	460f      	mov	r7, r1
 8008d16:	bfa4      	itt	ge
 8008d18:	460c      	movge	r4, r1
 8008d1a:	461f      	movge	r7, r3
 8008d1c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008d20:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008d24:	68a3      	ldr	r3, [r4, #8]
 8008d26:	6861      	ldr	r1, [r4, #4]
 8008d28:	eb0a 0609 	add.w	r6, sl, r9
 8008d2c:	42b3      	cmp	r3, r6
 8008d2e:	b085      	sub	sp, #20
 8008d30:	bfb8      	it	lt
 8008d32:	3101      	addlt	r1, #1
 8008d34:	f7ff fe92 	bl	8008a5c <_Balloc>
 8008d38:	b930      	cbnz	r0, 8008d48 <__multiply+0x44>
 8008d3a:	4602      	mov	r2, r0
 8008d3c:	4b44      	ldr	r3, [pc, #272]	@ (8008e50 <__multiply+0x14c>)
 8008d3e:	4845      	ldr	r0, [pc, #276]	@ (8008e54 <__multiply+0x150>)
 8008d40:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008d44:	f001 fd7c 	bl	800a840 <__assert_func>
 8008d48:	f100 0514 	add.w	r5, r0, #20
 8008d4c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008d50:	462b      	mov	r3, r5
 8008d52:	2200      	movs	r2, #0
 8008d54:	4543      	cmp	r3, r8
 8008d56:	d321      	bcc.n	8008d9c <__multiply+0x98>
 8008d58:	f107 0114 	add.w	r1, r7, #20
 8008d5c:	f104 0214 	add.w	r2, r4, #20
 8008d60:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008d64:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008d68:	9302      	str	r3, [sp, #8]
 8008d6a:	1b13      	subs	r3, r2, r4
 8008d6c:	3b15      	subs	r3, #21
 8008d6e:	f023 0303 	bic.w	r3, r3, #3
 8008d72:	3304      	adds	r3, #4
 8008d74:	f104 0715 	add.w	r7, r4, #21
 8008d78:	42ba      	cmp	r2, r7
 8008d7a:	bf38      	it	cc
 8008d7c:	2304      	movcc	r3, #4
 8008d7e:	9301      	str	r3, [sp, #4]
 8008d80:	9b02      	ldr	r3, [sp, #8]
 8008d82:	9103      	str	r1, [sp, #12]
 8008d84:	428b      	cmp	r3, r1
 8008d86:	d80c      	bhi.n	8008da2 <__multiply+0x9e>
 8008d88:	2e00      	cmp	r6, #0
 8008d8a:	dd03      	ble.n	8008d94 <__multiply+0x90>
 8008d8c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d05b      	beq.n	8008e4c <__multiply+0x148>
 8008d94:	6106      	str	r6, [r0, #16]
 8008d96:	b005      	add	sp, #20
 8008d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d9c:	f843 2b04 	str.w	r2, [r3], #4
 8008da0:	e7d8      	b.n	8008d54 <__multiply+0x50>
 8008da2:	f8b1 a000 	ldrh.w	sl, [r1]
 8008da6:	f1ba 0f00 	cmp.w	sl, #0
 8008daa:	d024      	beq.n	8008df6 <__multiply+0xf2>
 8008dac:	f104 0e14 	add.w	lr, r4, #20
 8008db0:	46a9      	mov	r9, r5
 8008db2:	f04f 0c00 	mov.w	ip, #0
 8008db6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008dba:	f8d9 3000 	ldr.w	r3, [r9]
 8008dbe:	fa1f fb87 	uxth.w	fp, r7
 8008dc2:	b29b      	uxth	r3, r3
 8008dc4:	fb0a 330b 	mla	r3, sl, fp, r3
 8008dc8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008dcc:	f8d9 7000 	ldr.w	r7, [r9]
 8008dd0:	4463      	add	r3, ip
 8008dd2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008dd6:	fb0a c70b 	mla	r7, sl, fp, ip
 8008dda:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008dde:	b29b      	uxth	r3, r3
 8008de0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008de4:	4572      	cmp	r2, lr
 8008de6:	f849 3b04 	str.w	r3, [r9], #4
 8008dea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008dee:	d8e2      	bhi.n	8008db6 <__multiply+0xb2>
 8008df0:	9b01      	ldr	r3, [sp, #4]
 8008df2:	f845 c003 	str.w	ip, [r5, r3]
 8008df6:	9b03      	ldr	r3, [sp, #12]
 8008df8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008dfc:	3104      	adds	r1, #4
 8008dfe:	f1b9 0f00 	cmp.w	r9, #0
 8008e02:	d021      	beq.n	8008e48 <__multiply+0x144>
 8008e04:	682b      	ldr	r3, [r5, #0]
 8008e06:	f104 0c14 	add.w	ip, r4, #20
 8008e0a:	46ae      	mov	lr, r5
 8008e0c:	f04f 0a00 	mov.w	sl, #0
 8008e10:	f8bc b000 	ldrh.w	fp, [ip]
 8008e14:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008e18:	fb09 770b 	mla	r7, r9, fp, r7
 8008e1c:	4457      	add	r7, sl
 8008e1e:	b29b      	uxth	r3, r3
 8008e20:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008e24:	f84e 3b04 	str.w	r3, [lr], #4
 8008e28:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008e2c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008e30:	f8be 3000 	ldrh.w	r3, [lr]
 8008e34:	fb09 330a 	mla	r3, r9, sl, r3
 8008e38:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008e3c:	4562      	cmp	r2, ip
 8008e3e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008e42:	d8e5      	bhi.n	8008e10 <__multiply+0x10c>
 8008e44:	9f01      	ldr	r7, [sp, #4]
 8008e46:	51eb      	str	r3, [r5, r7]
 8008e48:	3504      	adds	r5, #4
 8008e4a:	e799      	b.n	8008d80 <__multiply+0x7c>
 8008e4c:	3e01      	subs	r6, #1
 8008e4e:	e79b      	b.n	8008d88 <__multiply+0x84>
 8008e50:	0800b1f1 	.word	0x0800b1f1
 8008e54:	0800b202 	.word	0x0800b202

08008e58 <__pow5mult>:
 8008e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e5c:	4615      	mov	r5, r2
 8008e5e:	f012 0203 	ands.w	r2, r2, #3
 8008e62:	4607      	mov	r7, r0
 8008e64:	460e      	mov	r6, r1
 8008e66:	d007      	beq.n	8008e78 <__pow5mult+0x20>
 8008e68:	4c25      	ldr	r4, [pc, #148]	@ (8008f00 <__pow5mult+0xa8>)
 8008e6a:	3a01      	subs	r2, #1
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008e72:	f7ff fe55 	bl	8008b20 <__multadd>
 8008e76:	4606      	mov	r6, r0
 8008e78:	10ad      	asrs	r5, r5, #2
 8008e7a:	d03d      	beq.n	8008ef8 <__pow5mult+0xa0>
 8008e7c:	69fc      	ldr	r4, [r7, #28]
 8008e7e:	b97c      	cbnz	r4, 8008ea0 <__pow5mult+0x48>
 8008e80:	2010      	movs	r0, #16
 8008e82:	f7ff fd35 	bl	80088f0 <malloc>
 8008e86:	4602      	mov	r2, r0
 8008e88:	61f8      	str	r0, [r7, #28]
 8008e8a:	b928      	cbnz	r0, 8008e98 <__pow5mult+0x40>
 8008e8c:	4b1d      	ldr	r3, [pc, #116]	@ (8008f04 <__pow5mult+0xac>)
 8008e8e:	481e      	ldr	r0, [pc, #120]	@ (8008f08 <__pow5mult+0xb0>)
 8008e90:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008e94:	f001 fcd4 	bl	800a840 <__assert_func>
 8008e98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e9c:	6004      	str	r4, [r0, #0]
 8008e9e:	60c4      	str	r4, [r0, #12]
 8008ea0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008ea4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008ea8:	b94c      	cbnz	r4, 8008ebe <__pow5mult+0x66>
 8008eaa:	f240 2171 	movw	r1, #625	@ 0x271
 8008eae:	4638      	mov	r0, r7
 8008eb0:	f7ff ff12 	bl	8008cd8 <__i2b>
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	f8c8 0008 	str.w	r0, [r8, #8]
 8008eba:	4604      	mov	r4, r0
 8008ebc:	6003      	str	r3, [r0, #0]
 8008ebe:	f04f 0900 	mov.w	r9, #0
 8008ec2:	07eb      	lsls	r3, r5, #31
 8008ec4:	d50a      	bpl.n	8008edc <__pow5mult+0x84>
 8008ec6:	4631      	mov	r1, r6
 8008ec8:	4622      	mov	r2, r4
 8008eca:	4638      	mov	r0, r7
 8008ecc:	f7ff ff1a 	bl	8008d04 <__multiply>
 8008ed0:	4631      	mov	r1, r6
 8008ed2:	4680      	mov	r8, r0
 8008ed4:	4638      	mov	r0, r7
 8008ed6:	f7ff fe01 	bl	8008adc <_Bfree>
 8008eda:	4646      	mov	r6, r8
 8008edc:	106d      	asrs	r5, r5, #1
 8008ede:	d00b      	beq.n	8008ef8 <__pow5mult+0xa0>
 8008ee0:	6820      	ldr	r0, [r4, #0]
 8008ee2:	b938      	cbnz	r0, 8008ef4 <__pow5mult+0x9c>
 8008ee4:	4622      	mov	r2, r4
 8008ee6:	4621      	mov	r1, r4
 8008ee8:	4638      	mov	r0, r7
 8008eea:	f7ff ff0b 	bl	8008d04 <__multiply>
 8008eee:	6020      	str	r0, [r4, #0]
 8008ef0:	f8c0 9000 	str.w	r9, [r0]
 8008ef4:	4604      	mov	r4, r0
 8008ef6:	e7e4      	b.n	8008ec2 <__pow5mult+0x6a>
 8008ef8:	4630      	mov	r0, r6
 8008efa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008efe:	bf00      	nop
 8008f00:	0800b25c 	.word	0x0800b25c
 8008f04:	0800b182 	.word	0x0800b182
 8008f08:	0800b202 	.word	0x0800b202

08008f0c <__lshift>:
 8008f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f10:	460c      	mov	r4, r1
 8008f12:	6849      	ldr	r1, [r1, #4]
 8008f14:	6923      	ldr	r3, [r4, #16]
 8008f16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008f1a:	68a3      	ldr	r3, [r4, #8]
 8008f1c:	4607      	mov	r7, r0
 8008f1e:	4691      	mov	r9, r2
 8008f20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008f24:	f108 0601 	add.w	r6, r8, #1
 8008f28:	42b3      	cmp	r3, r6
 8008f2a:	db0b      	blt.n	8008f44 <__lshift+0x38>
 8008f2c:	4638      	mov	r0, r7
 8008f2e:	f7ff fd95 	bl	8008a5c <_Balloc>
 8008f32:	4605      	mov	r5, r0
 8008f34:	b948      	cbnz	r0, 8008f4a <__lshift+0x3e>
 8008f36:	4602      	mov	r2, r0
 8008f38:	4b28      	ldr	r3, [pc, #160]	@ (8008fdc <__lshift+0xd0>)
 8008f3a:	4829      	ldr	r0, [pc, #164]	@ (8008fe0 <__lshift+0xd4>)
 8008f3c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008f40:	f001 fc7e 	bl	800a840 <__assert_func>
 8008f44:	3101      	adds	r1, #1
 8008f46:	005b      	lsls	r3, r3, #1
 8008f48:	e7ee      	b.n	8008f28 <__lshift+0x1c>
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	f100 0114 	add.w	r1, r0, #20
 8008f50:	f100 0210 	add.w	r2, r0, #16
 8008f54:	4618      	mov	r0, r3
 8008f56:	4553      	cmp	r3, sl
 8008f58:	db33      	blt.n	8008fc2 <__lshift+0xb6>
 8008f5a:	6920      	ldr	r0, [r4, #16]
 8008f5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008f60:	f104 0314 	add.w	r3, r4, #20
 8008f64:	f019 091f 	ands.w	r9, r9, #31
 8008f68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008f6c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008f70:	d02b      	beq.n	8008fca <__lshift+0xbe>
 8008f72:	f1c9 0e20 	rsb	lr, r9, #32
 8008f76:	468a      	mov	sl, r1
 8008f78:	2200      	movs	r2, #0
 8008f7a:	6818      	ldr	r0, [r3, #0]
 8008f7c:	fa00 f009 	lsl.w	r0, r0, r9
 8008f80:	4310      	orrs	r0, r2
 8008f82:	f84a 0b04 	str.w	r0, [sl], #4
 8008f86:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f8a:	459c      	cmp	ip, r3
 8008f8c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008f90:	d8f3      	bhi.n	8008f7a <__lshift+0x6e>
 8008f92:	ebac 0304 	sub.w	r3, ip, r4
 8008f96:	3b15      	subs	r3, #21
 8008f98:	f023 0303 	bic.w	r3, r3, #3
 8008f9c:	3304      	adds	r3, #4
 8008f9e:	f104 0015 	add.w	r0, r4, #21
 8008fa2:	4584      	cmp	ip, r0
 8008fa4:	bf38      	it	cc
 8008fa6:	2304      	movcc	r3, #4
 8008fa8:	50ca      	str	r2, [r1, r3]
 8008faa:	b10a      	cbz	r2, 8008fb0 <__lshift+0xa4>
 8008fac:	f108 0602 	add.w	r6, r8, #2
 8008fb0:	3e01      	subs	r6, #1
 8008fb2:	4638      	mov	r0, r7
 8008fb4:	612e      	str	r6, [r5, #16]
 8008fb6:	4621      	mov	r1, r4
 8008fb8:	f7ff fd90 	bl	8008adc <_Bfree>
 8008fbc:	4628      	mov	r0, r5
 8008fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fc2:	f842 0f04 	str.w	r0, [r2, #4]!
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	e7c5      	b.n	8008f56 <__lshift+0x4a>
 8008fca:	3904      	subs	r1, #4
 8008fcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fd0:	f841 2f04 	str.w	r2, [r1, #4]!
 8008fd4:	459c      	cmp	ip, r3
 8008fd6:	d8f9      	bhi.n	8008fcc <__lshift+0xc0>
 8008fd8:	e7ea      	b.n	8008fb0 <__lshift+0xa4>
 8008fda:	bf00      	nop
 8008fdc:	0800b1f1 	.word	0x0800b1f1
 8008fe0:	0800b202 	.word	0x0800b202

08008fe4 <__mcmp>:
 8008fe4:	690a      	ldr	r2, [r1, #16]
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	6900      	ldr	r0, [r0, #16]
 8008fea:	1a80      	subs	r0, r0, r2
 8008fec:	b530      	push	{r4, r5, lr}
 8008fee:	d10e      	bne.n	800900e <__mcmp+0x2a>
 8008ff0:	3314      	adds	r3, #20
 8008ff2:	3114      	adds	r1, #20
 8008ff4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008ff8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008ffc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009000:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009004:	4295      	cmp	r5, r2
 8009006:	d003      	beq.n	8009010 <__mcmp+0x2c>
 8009008:	d205      	bcs.n	8009016 <__mcmp+0x32>
 800900a:	f04f 30ff 	mov.w	r0, #4294967295
 800900e:	bd30      	pop	{r4, r5, pc}
 8009010:	42a3      	cmp	r3, r4
 8009012:	d3f3      	bcc.n	8008ffc <__mcmp+0x18>
 8009014:	e7fb      	b.n	800900e <__mcmp+0x2a>
 8009016:	2001      	movs	r0, #1
 8009018:	e7f9      	b.n	800900e <__mcmp+0x2a>
	...

0800901c <__mdiff>:
 800901c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009020:	4689      	mov	r9, r1
 8009022:	4606      	mov	r6, r0
 8009024:	4611      	mov	r1, r2
 8009026:	4648      	mov	r0, r9
 8009028:	4614      	mov	r4, r2
 800902a:	f7ff ffdb 	bl	8008fe4 <__mcmp>
 800902e:	1e05      	subs	r5, r0, #0
 8009030:	d112      	bne.n	8009058 <__mdiff+0x3c>
 8009032:	4629      	mov	r1, r5
 8009034:	4630      	mov	r0, r6
 8009036:	f7ff fd11 	bl	8008a5c <_Balloc>
 800903a:	4602      	mov	r2, r0
 800903c:	b928      	cbnz	r0, 800904a <__mdiff+0x2e>
 800903e:	4b3f      	ldr	r3, [pc, #252]	@ (800913c <__mdiff+0x120>)
 8009040:	f240 2137 	movw	r1, #567	@ 0x237
 8009044:	483e      	ldr	r0, [pc, #248]	@ (8009140 <__mdiff+0x124>)
 8009046:	f001 fbfb 	bl	800a840 <__assert_func>
 800904a:	2301      	movs	r3, #1
 800904c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009050:	4610      	mov	r0, r2
 8009052:	b003      	add	sp, #12
 8009054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009058:	bfbc      	itt	lt
 800905a:	464b      	movlt	r3, r9
 800905c:	46a1      	movlt	r9, r4
 800905e:	4630      	mov	r0, r6
 8009060:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009064:	bfba      	itte	lt
 8009066:	461c      	movlt	r4, r3
 8009068:	2501      	movlt	r5, #1
 800906a:	2500      	movge	r5, #0
 800906c:	f7ff fcf6 	bl	8008a5c <_Balloc>
 8009070:	4602      	mov	r2, r0
 8009072:	b918      	cbnz	r0, 800907c <__mdiff+0x60>
 8009074:	4b31      	ldr	r3, [pc, #196]	@ (800913c <__mdiff+0x120>)
 8009076:	f240 2145 	movw	r1, #581	@ 0x245
 800907a:	e7e3      	b.n	8009044 <__mdiff+0x28>
 800907c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009080:	6926      	ldr	r6, [r4, #16]
 8009082:	60c5      	str	r5, [r0, #12]
 8009084:	f109 0310 	add.w	r3, r9, #16
 8009088:	f109 0514 	add.w	r5, r9, #20
 800908c:	f104 0e14 	add.w	lr, r4, #20
 8009090:	f100 0b14 	add.w	fp, r0, #20
 8009094:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009098:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800909c:	9301      	str	r3, [sp, #4]
 800909e:	46d9      	mov	r9, fp
 80090a0:	f04f 0c00 	mov.w	ip, #0
 80090a4:	9b01      	ldr	r3, [sp, #4]
 80090a6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80090aa:	f853 af04 	ldr.w	sl, [r3, #4]!
 80090ae:	9301      	str	r3, [sp, #4]
 80090b0:	fa1f f38a 	uxth.w	r3, sl
 80090b4:	4619      	mov	r1, r3
 80090b6:	b283      	uxth	r3, r0
 80090b8:	1acb      	subs	r3, r1, r3
 80090ba:	0c00      	lsrs	r0, r0, #16
 80090bc:	4463      	add	r3, ip
 80090be:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80090c2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80090c6:	b29b      	uxth	r3, r3
 80090c8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80090cc:	4576      	cmp	r6, lr
 80090ce:	f849 3b04 	str.w	r3, [r9], #4
 80090d2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80090d6:	d8e5      	bhi.n	80090a4 <__mdiff+0x88>
 80090d8:	1b33      	subs	r3, r6, r4
 80090da:	3b15      	subs	r3, #21
 80090dc:	f023 0303 	bic.w	r3, r3, #3
 80090e0:	3415      	adds	r4, #21
 80090e2:	3304      	adds	r3, #4
 80090e4:	42a6      	cmp	r6, r4
 80090e6:	bf38      	it	cc
 80090e8:	2304      	movcc	r3, #4
 80090ea:	441d      	add	r5, r3
 80090ec:	445b      	add	r3, fp
 80090ee:	461e      	mov	r6, r3
 80090f0:	462c      	mov	r4, r5
 80090f2:	4544      	cmp	r4, r8
 80090f4:	d30e      	bcc.n	8009114 <__mdiff+0xf8>
 80090f6:	f108 0103 	add.w	r1, r8, #3
 80090fa:	1b49      	subs	r1, r1, r5
 80090fc:	f021 0103 	bic.w	r1, r1, #3
 8009100:	3d03      	subs	r5, #3
 8009102:	45a8      	cmp	r8, r5
 8009104:	bf38      	it	cc
 8009106:	2100      	movcc	r1, #0
 8009108:	440b      	add	r3, r1
 800910a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800910e:	b191      	cbz	r1, 8009136 <__mdiff+0x11a>
 8009110:	6117      	str	r7, [r2, #16]
 8009112:	e79d      	b.n	8009050 <__mdiff+0x34>
 8009114:	f854 1b04 	ldr.w	r1, [r4], #4
 8009118:	46e6      	mov	lr, ip
 800911a:	0c08      	lsrs	r0, r1, #16
 800911c:	fa1c fc81 	uxtah	ip, ip, r1
 8009120:	4471      	add	r1, lr
 8009122:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009126:	b289      	uxth	r1, r1
 8009128:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800912c:	f846 1b04 	str.w	r1, [r6], #4
 8009130:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009134:	e7dd      	b.n	80090f2 <__mdiff+0xd6>
 8009136:	3f01      	subs	r7, #1
 8009138:	e7e7      	b.n	800910a <__mdiff+0xee>
 800913a:	bf00      	nop
 800913c:	0800b1f1 	.word	0x0800b1f1
 8009140:	0800b202 	.word	0x0800b202

08009144 <__ulp>:
 8009144:	b082      	sub	sp, #8
 8009146:	ed8d 0b00 	vstr	d0, [sp]
 800914a:	9a01      	ldr	r2, [sp, #4]
 800914c:	4b0f      	ldr	r3, [pc, #60]	@ (800918c <__ulp+0x48>)
 800914e:	4013      	ands	r3, r2
 8009150:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009154:	2b00      	cmp	r3, #0
 8009156:	dc08      	bgt.n	800916a <__ulp+0x26>
 8009158:	425b      	negs	r3, r3
 800915a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800915e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009162:	da04      	bge.n	800916e <__ulp+0x2a>
 8009164:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009168:	4113      	asrs	r3, r2
 800916a:	2200      	movs	r2, #0
 800916c:	e008      	b.n	8009180 <__ulp+0x3c>
 800916e:	f1a2 0314 	sub.w	r3, r2, #20
 8009172:	2b1e      	cmp	r3, #30
 8009174:	bfda      	itte	le
 8009176:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800917a:	40da      	lsrle	r2, r3
 800917c:	2201      	movgt	r2, #1
 800917e:	2300      	movs	r3, #0
 8009180:	4619      	mov	r1, r3
 8009182:	4610      	mov	r0, r2
 8009184:	ec41 0b10 	vmov	d0, r0, r1
 8009188:	b002      	add	sp, #8
 800918a:	4770      	bx	lr
 800918c:	7ff00000 	.word	0x7ff00000

08009190 <__b2d>:
 8009190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009194:	6906      	ldr	r6, [r0, #16]
 8009196:	f100 0814 	add.w	r8, r0, #20
 800919a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800919e:	1f37      	subs	r7, r6, #4
 80091a0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80091a4:	4610      	mov	r0, r2
 80091a6:	f7ff fd4b 	bl	8008c40 <__hi0bits>
 80091aa:	f1c0 0320 	rsb	r3, r0, #32
 80091ae:	280a      	cmp	r0, #10
 80091b0:	600b      	str	r3, [r1, #0]
 80091b2:	491b      	ldr	r1, [pc, #108]	@ (8009220 <__b2d+0x90>)
 80091b4:	dc15      	bgt.n	80091e2 <__b2d+0x52>
 80091b6:	f1c0 0c0b 	rsb	ip, r0, #11
 80091ba:	fa22 f30c 	lsr.w	r3, r2, ip
 80091be:	45b8      	cmp	r8, r7
 80091c0:	ea43 0501 	orr.w	r5, r3, r1
 80091c4:	bf34      	ite	cc
 80091c6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80091ca:	2300      	movcs	r3, #0
 80091cc:	3015      	adds	r0, #21
 80091ce:	fa02 f000 	lsl.w	r0, r2, r0
 80091d2:	fa23 f30c 	lsr.w	r3, r3, ip
 80091d6:	4303      	orrs	r3, r0
 80091d8:	461c      	mov	r4, r3
 80091da:	ec45 4b10 	vmov	d0, r4, r5
 80091de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091e2:	45b8      	cmp	r8, r7
 80091e4:	bf3a      	itte	cc
 80091e6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80091ea:	f1a6 0708 	subcc.w	r7, r6, #8
 80091ee:	2300      	movcs	r3, #0
 80091f0:	380b      	subs	r0, #11
 80091f2:	d012      	beq.n	800921a <__b2d+0x8a>
 80091f4:	f1c0 0120 	rsb	r1, r0, #32
 80091f8:	fa23 f401 	lsr.w	r4, r3, r1
 80091fc:	4082      	lsls	r2, r0
 80091fe:	4322      	orrs	r2, r4
 8009200:	4547      	cmp	r7, r8
 8009202:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009206:	bf8c      	ite	hi
 8009208:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800920c:	2200      	movls	r2, #0
 800920e:	4083      	lsls	r3, r0
 8009210:	40ca      	lsrs	r2, r1
 8009212:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009216:	4313      	orrs	r3, r2
 8009218:	e7de      	b.n	80091d8 <__b2d+0x48>
 800921a:	ea42 0501 	orr.w	r5, r2, r1
 800921e:	e7db      	b.n	80091d8 <__b2d+0x48>
 8009220:	3ff00000 	.word	0x3ff00000

08009224 <__d2b>:
 8009224:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009228:	460f      	mov	r7, r1
 800922a:	2101      	movs	r1, #1
 800922c:	ec59 8b10 	vmov	r8, r9, d0
 8009230:	4616      	mov	r6, r2
 8009232:	f7ff fc13 	bl	8008a5c <_Balloc>
 8009236:	4604      	mov	r4, r0
 8009238:	b930      	cbnz	r0, 8009248 <__d2b+0x24>
 800923a:	4602      	mov	r2, r0
 800923c:	4b23      	ldr	r3, [pc, #140]	@ (80092cc <__d2b+0xa8>)
 800923e:	4824      	ldr	r0, [pc, #144]	@ (80092d0 <__d2b+0xac>)
 8009240:	f240 310f 	movw	r1, #783	@ 0x30f
 8009244:	f001 fafc 	bl	800a840 <__assert_func>
 8009248:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800924c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009250:	b10d      	cbz	r5, 8009256 <__d2b+0x32>
 8009252:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009256:	9301      	str	r3, [sp, #4]
 8009258:	f1b8 0300 	subs.w	r3, r8, #0
 800925c:	d023      	beq.n	80092a6 <__d2b+0x82>
 800925e:	4668      	mov	r0, sp
 8009260:	9300      	str	r3, [sp, #0]
 8009262:	f7ff fd0c 	bl	8008c7e <__lo0bits>
 8009266:	e9dd 1200 	ldrd	r1, r2, [sp]
 800926a:	b1d0      	cbz	r0, 80092a2 <__d2b+0x7e>
 800926c:	f1c0 0320 	rsb	r3, r0, #32
 8009270:	fa02 f303 	lsl.w	r3, r2, r3
 8009274:	430b      	orrs	r3, r1
 8009276:	40c2      	lsrs	r2, r0
 8009278:	6163      	str	r3, [r4, #20]
 800927a:	9201      	str	r2, [sp, #4]
 800927c:	9b01      	ldr	r3, [sp, #4]
 800927e:	61a3      	str	r3, [r4, #24]
 8009280:	2b00      	cmp	r3, #0
 8009282:	bf0c      	ite	eq
 8009284:	2201      	moveq	r2, #1
 8009286:	2202      	movne	r2, #2
 8009288:	6122      	str	r2, [r4, #16]
 800928a:	b1a5      	cbz	r5, 80092b6 <__d2b+0x92>
 800928c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009290:	4405      	add	r5, r0
 8009292:	603d      	str	r5, [r7, #0]
 8009294:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009298:	6030      	str	r0, [r6, #0]
 800929a:	4620      	mov	r0, r4
 800929c:	b003      	add	sp, #12
 800929e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80092a2:	6161      	str	r1, [r4, #20]
 80092a4:	e7ea      	b.n	800927c <__d2b+0x58>
 80092a6:	a801      	add	r0, sp, #4
 80092a8:	f7ff fce9 	bl	8008c7e <__lo0bits>
 80092ac:	9b01      	ldr	r3, [sp, #4]
 80092ae:	6163      	str	r3, [r4, #20]
 80092b0:	3020      	adds	r0, #32
 80092b2:	2201      	movs	r2, #1
 80092b4:	e7e8      	b.n	8009288 <__d2b+0x64>
 80092b6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80092ba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80092be:	6038      	str	r0, [r7, #0]
 80092c0:	6918      	ldr	r0, [r3, #16]
 80092c2:	f7ff fcbd 	bl	8008c40 <__hi0bits>
 80092c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80092ca:	e7e5      	b.n	8009298 <__d2b+0x74>
 80092cc:	0800b1f1 	.word	0x0800b1f1
 80092d0:	0800b202 	.word	0x0800b202

080092d4 <__ratio>:
 80092d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092d8:	4688      	mov	r8, r1
 80092da:	4669      	mov	r1, sp
 80092dc:	4681      	mov	r9, r0
 80092de:	f7ff ff57 	bl	8009190 <__b2d>
 80092e2:	a901      	add	r1, sp, #4
 80092e4:	4640      	mov	r0, r8
 80092e6:	ec55 4b10 	vmov	r4, r5, d0
 80092ea:	f7ff ff51 	bl	8009190 <__b2d>
 80092ee:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80092f2:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80092f6:	1ad2      	subs	r2, r2, r3
 80092f8:	e9dd 3100 	ldrd	r3, r1, [sp]
 80092fc:	1a5b      	subs	r3, r3, r1
 80092fe:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8009302:	ec57 6b10 	vmov	r6, r7, d0
 8009306:	2b00      	cmp	r3, #0
 8009308:	bfd6      	itet	le
 800930a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800930e:	462a      	movgt	r2, r5
 8009310:	463a      	movle	r2, r7
 8009312:	46ab      	mov	fp, r5
 8009314:	46a2      	mov	sl, r4
 8009316:	bfce      	itee	gt
 8009318:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800931c:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8009320:	ee00 3a90 	vmovle	s1, r3
 8009324:	ec4b ab17 	vmov	d7, sl, fp
 8009328:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800932c:	b003      	add	sp, #12
 800932e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009332 <__copybits>:
 8009332:	3901      	subs	r1, #1
 8009334:	b570      	push	{r4, r5, r6, lr}
 8009336:	1149      	asrs	r1, r1, #5
 8009338:	6914      	ldr	r4, [r2, #16]
 800933a:	3101      	adds	r1, #1
 800933c:	f102 0314 	add.w	r3, r2, #20
 8009340:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009344:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009348:	1f05      	subs	r5, r0, #4
 800934a:	42a3      	cmp	r3, r4
 800934c:	d30c      	bcc.n	8009368 <__copybits+0x36>
 800934e:	1aa3      	subs	r3, r4, r2
 8009350:	3b11      	subs	r3, #17
 8009352:	f023 0303 	bic.w	r3, r3, #3
 8009356:	3211      	adds	r2, #17
 8009358:	42a2      	cmp	r2, r4
 800935a:	bf88      	it	hi
 800935c:	2300      	movhi	r3, #0
 800935e:	4418      	add	r0, r3
 8009360:	2300      	movs	r3, #0
 8009362:	4288      	cmp	r0, r1
 8009364:	d305      	bcc.n	8009372 <__copybits+0x40>
 8009366:	bd70      	pop	{r4, r5, r6, pc}
 8009368:	f853 6b04 	ldr.w	r6, [r3], #4
 800936c:	f845 6f04 	str.w	r6, [r5, #4]!
 8009370:	e7eb      	b.n	800934a <__copybits+0x18>
 8009372:	f840 3b04 	str.w	r3, [r0], #4
 8009376:	e7f4      	b.n	8009362 <__copybits+0x30>

08009378 <__any_on>:
 8009378:	f100 0214 	add.w	r2, r0, #20
 800937c:	6900      	ldr	r0, [r0, #16]
 800937e:	114b      	asrs	r3, r1, #5
 8009380:	4298      	cmp	r0, r3
 8009382:	b510      	push	{r4, lr}
 8009384:	db11      	blt.n	80093aa <__any_on+0x32>
 8009386:	dd0a      	ble.n	800939e <__any_on+0x26>
 8009388:	f011 011f 	ands.w	r1, r1, #31
 800938c:	d007      	beq.n	800939e <__any_on+0x26>
 800938e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009392:	fa24 f001 	lsr.w	r0, r4, r1
 8009396:	fa00 f101 	lsl.w	r1, r0, r1
 800939a:	428c      	cmp	r4, r1
 800939c:	d10b      	bne.n	80093b6 <__any_on+0x3e>
 800939e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d803      	bhi.n	80093ae <__any_on+0x36>
 80093a6:	2000      	movs	r0, #0
 80093a8:	bd10      	pop	{r4, pc}
 80093aa:	4603      	mov	r3, r0
 80093ac:	e7f7      	b.n	800939e <__any_on+0x26>
 80093ae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80093b2:	2900      	cmp	r1, #0
 80093b4:	d0f5      	beq.n	80093a2 <__any_on+0x2a>
 80093b6:	2001      	movs	r0, #1
 80093b8:	e7f6      	b.n	80093a8 <__any_on+0x30>

080093ba <sulp>:
 80093ba:	b570      	push	{r4, r5, r6, lr}
 80093bc:	4604      	mov	r4, r0
 80093be:	460d      	mov	r5, r1
 80093c0:	4616      	mov	r6, r2
 80093c2:	ec45 4b10 	vmov	d0, r4, r5
 80093c6:	f7ff febd 	bl	8009144 <__ulp>
 80093ca:	b17e      	cbz	r6, 80093ec <sulp+0x32>
 80093cc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80093d0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	dd09      	ble.n	80093ec <sulp+0x32>
 80093d8:	051b      	lsls	r3, r3, #20
 80093da:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 80093de:	2000      	movs	r0, #0
 80093e0:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 80093e4:	ec41 0b17 	vmov	d7, r0, r1
 80093e8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80093ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080093f0 <_strtod_l>:
 80093f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093f4:	ed2d 8b0a 	vpush	{d8-d12}
 80093f8:	b097      	sub	sp, #92	@ 0x5c
 80093fa:	4688      	mov	r8, r1
 80093fc:	920e      	str	r2, [sp, #56]	@ 0x38
 80093fe:	2200      	movs	r2, #0
 8009400:	9212      	str	r2, [sp, #72]	@ 0x48
 8009402:	9005      	str	r0, [sp, #20]
 8009404:	f04f 0a00 	mov.w	sl, #0
 8009408:	f04f 0b00 	mov.w	fp, #0
 800940c:	460a      	mov	r2, r1
 800940e:	9211      	str	r2, [sp, #68]	@ 0x44
 8009410:	7811      	ldrb	r1, [r2, #0]
 8009412:	292b      	cmp	r1, #43	@ 0x2b
 8009414:	d04c      	beq.n	80094b0 <_strtod_l+0xc0>
 8009416:	d839      	bhi.n	800948c <_strtod_l+0x9c>
 8009418:	290d      	cmp	r1, #13
 800941a:	d833      	bhi.n	8009484 <_strtod_l+0x94>
 800941c:	2908      	cmp	r1, #8
 800941e:	d833      	bhi.n	8009488 <_strtod_l+0x98>
 8009420:	2900      	cmp	r1, #0
 8009422:	d03c      	beq.n	800949e <_strtod_l+0xae>
 8009424:	2200      	movs	r2, #0
 8009426:	9208      	str	r2, [sp, #32]
 8009428:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800942a:	782a      	ldrb	r2, [r5, #0]
 800942c:	2a30      	cmp	r2, #48	@ 0x30
 800942e:	f040 80b5 	bne.w	800959c <_strtod_l+0x1ac>
 8009432:	786a      	ldrb	r2, [r5, #1]
 8009434:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009438:	2a58      	cmp	r2, #88	@ 0x58
 800943a:	d170      	bne.n	800951e <_strtod_l+0x12e>
 800943c:	9302      	str	r3, [sp, #8]
 800943e:	9b08      	ldr	r3, [sp, #32]
 8009440:	9301      	str	r3, [sp, #4]
 8009442:	ab12      	add	r3, sp, #72	@ 0x48
 8009444:	9300      	str	r3, [sp, #0]
 8009446:	4a8b      	ldr	r2, [pc, #556]	@ (8009674 <_strtod_l+0x284>)
 8009448:	9805      	ldr	r0, [sp, #20]
 800944a:	ab13      	add	r3, sp, #76	@ 0x4c
 800944c:	a911      	add	r1, sp, #68	@ 0x44
 800944e:	f001 fa91 	bl	800a974 <__gethex>
 8009452:	f010 060f 	ands.w	r6, r0, #15
 8009456:	4604      	mov	r4, r0
 8009458:	d005      	beq.n	8009466 <_strtod_l+0x76>
 800945a:	2e06      	cmp	r6, #6
 800945c:	d12a      	bne.n	80094b4 <_strtod_l+0xc4>
 800945e:	3501      	adds	r5, #1
 8009460:	2300      	movs	r3, #0
 8009462:	9511      	str	r5, [sp, #68]	@ 0x44
 8009464:	9308      	str	r3, [sp, #32]
 8009466:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009468:	2b00      	cmp	r3, #0
 800946a:	f040 852f 	bne.w	8009ecc <_strtod_l+0xadc>
 800946e:	9b08      	ldr	r3, [sp, #32]
 8009470:	ec4b ab10 	vmov	d0, sl, fp
 8009474:	b1cb      	cbz	r3, 80094aa <_strtod_l+0xba>
 8009476:	eeb1 0b40 	vneg.f64	d0, d0
 800947a:	b017      	add	sp, #92	@ 0x5c
 800947c:	ecbd 8b0a 	vpop	{d8-d12}
 8009480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009484:	2920      	cmp	r1, #32
 8009486:	d1cd      	bne.n	8009424 <_strtod_l+0x34>
 8009488:	3201      	adds	r2, #1
 800948a:	e7c0      	b.n	800940e <_strtod_l+0x1e>
 800948c:	292d      	cmp	r1, #45	@ 0x2d
 800948e:	d1c9      	bne.n	8009424 <_strtod_l+0x34>
 8009490:	2101      	movs	r1, #1
 8009492:	9108      	str	r1, [sp, #32]
 8009494:	1c51      	adds	r1, r2, #1
 8009496:	9111      	str	r1, [sp, #68]	@ 0x44
 8009498:	7852      	ldrb	r2, [r2, #1]
 800949a:	2a00      	cmp	r2, #0
 800949c:	d1c4      	bne.n	8009428 <_strtod_l+0x38>
 800949e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80094a0:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	f040 850f 	bne.w	8009ec8 <_strtod_l+0xad8>
 80094aa:	ec4b ab10 	vmov	d0, sl, fp
 80094ae:	e7e4      	b.n	800947a <_strtod_l+0x8a>
 80094b0:	2100      	movs	r1, #0
 80094b2:	e7ee      	b.n	8009492 <_strtod_l+0xa2>
 80094b4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80094b6:	b13a      	cbz	r2, 80094c8 <_strtod_l+0xd8>
 80094b8:	2135      	movs	r1, #53	@ 0x35
 80094ba:	a814      	add	r0, sp, #80	@ 0x50
 80094bc:	f7ff ff39 	bl	8009332 <__copybits>
 80094c0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80094c2:	9805      	ldr	r0, [sp, #20]
 80094c4:	f7ff fb0a 	bl	8008adc <_Bfree>
 80094c8:	1e73      	subs	r3, r6, #1
 80094ca:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80094cc:	2b04      	cmp	r3, #4
 80094ce:	d806      	bhi.n	80094de <_strtod_l+0xee>
 80094d0:	e8df f003 	tbb	[pc, r3]
 80094d4:	201d0314 	.word	0x201d0314
 80094d8:	14          	.byte	0x14
 80094d9:	00          	.byte	0x00
 80094da:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 80094de:	05e3      	lsls	r3, r4, #23
 80094e0:	bf48      	it	mi
 80094e2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80094e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80094ea:	0d1b      	lsrs	r3, r3, #20
 80094ec:	051b      	lsls	r3, r3, #20
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d1b9      	bne.n	8009466 <_strtod_l+0x76>
 80094f2:	f7fe fb91 	bl	8007c18 <__errno>
 80094f6:	2322      	movs	r3, #34	@ 0x22
 80094f8:	6003      	str	r3, [r0, #0]
 80094fa:	e7b4      	b.n	8009466 <_strtod_l+0x76>
 80094fc:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8009500:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009504:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009508:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800950c:	e7e7      	b.n	80094de <_strtod_l+0xee>
 800950e:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800967c <_strtod_l+0x28c>
 8009512:	e7e4      	b.n	80094de <_strtod_l+0xee>
 8009514:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009518:	f04f 3aff 	mov.w	sl, #4294967295
 800951c:	e7df      	b.n	80094de <_strtod_l+0xee>
 800951e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009520:	1c5a      	adds	r2, r3, #1
 8009522:	9211      	str	r2, [sp, #68]	@ 0x44
 8009524:	785b      	ldrb	r3, [r3, #1]
 8009526:	2b30      	cmp	r3, #48	@ 0x30
 8009528:	d0f9      	beq.n	800951e <_strtod_l+0x12e>
 800952a:	2b00      	cmp	r3, #0
 800952c:	d09b      	beq.n	8009466 <_strtod_l+0x76>
 800952e:	2301      	movs	r3, #1
 8009530:	2600      	movs	r6, #0
 8009532:	9307      	str	r3, [sp, #28]
 8009534:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009536:	930a      	str	r3, [sp, #40]	@ 0x28
 8009538:	46b1      	mov	r9, r6
 800953a:	4635      	mov	r5, r6
 800953c:	220a      	movs	r2, #10
 800953e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8009540:	7804      	ldrb	r4, [r0, #0]
 8009542:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8009546:	b2d9      	uxtb	r1, r3
 8009548:	2909      	cmp	r1, #9
 800954a:	d929      	bls.n	80095a0 <_strtod_l+0x1b0>
 800954c:	494a      	ldr	r1, [pc, #296]	@ (8009678 <_strtod_l+0x288>)
 800954e:	2201      	movs	r2, #1
 8009550:	f001 f928 	bl	800a7a4 <strncmp>
 8009554:	b378      	cbz	r0, 80095b6 <_strtod_l+0x1c6>
 8009556:	2000      	movs	r0, #0
 8009558:	4622      	mov	r2, r4
 800955a:	462b      	mov	r3, r5
 800955c:	4607      	mov	r7, r0
 800955e:	9006      	str	r0, [sp, #24]
 8009560:	2a65      	cmp	r2, #101	@ 0x65
 8009562:	d001      	beq.n	8009568 <_strtod_l+0x178>
 8009564:	2a45      	cmp	r2, #69	@ 0x45
 8009566:	d117      	bne.n	8009598 <_strtod_l+0x1a8>
 8009568:	b91b      	cbnz	r3, 8009572 <_strtod_l+0x182>
 800956a:	9b07      	ldr	r3, [sp, #28]
 800956c:	4303      	orrs	r3, r0
 800956e:	d096      	beq.n	800949e <_strtod_l+0xae>
 8009570:	2300      	movs	r3, #0
 8009572:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8009576:	f108 0201 	add.w	r2, r8, #1
 800957a:	9211      	str	r2, [sp, #68]	@ 0x44
 800957c:	f898 2001 	ldrb.w	r2, [r8, #1]
 8009580:	2a2b      	cmp	r2, #43	@ 0x2b
 8009582:	d06b      	beq.n	800965c <_strtod_l+0x26c>
 8009584:	2a2d      	cmp	r2, #45	@ 0x2d
 8009586:	d071      	beq.n	800966c <_strtod_l+0x27c>
 8009588:	f04f 0e00 	mov.w	lr, #0
 800958c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8009590:	2c09      	cmp	r4, #9
 8009592:	d979      	bls.n	8009688 <_strtod_l+0x298>
 8009594:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8009598:	2400      	movs	r4, #0
 800959a:	e094      	b.n	80096c6 <_strtod_l+0x2d6>
 800959c:	2300      	movs	r3, #0
 800959e:	e7c7      	b.n	8009530 <_strtod_l+0x140>
 80095a0:	2d08      	cmp	r5, #8
 80095a2:	f100 0001 	add.w	r0, r0, #1
 80095a6:	bfd4      	ite	le
 80095a8:	fb02 3909 	mlale	r9, r2, r9, r3
 80095ac:	fb02 3606 	mlagt	r6, r2, r6, r3
 80095b0:	3501      	adds	r5, #1
 80095b2:	9011      	str	r0, [sp, #68]	@ 0x44
 80095b4:	e7c3      	b.n	800953e <_strtod_l+0x14e>
 80095b6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80095b8:	1c5a      	adds	r2, r3, #1
 80095ba:	9211      	str	r2, [sp, #68]	@ 0x44
 80095bc:	785a      	ldrb	r2, [r3, #1]
 80095be:	b375      	cbz	r5, 800961e <_strtod_l+0x22e>
 80095c0:	4607      	mov	r7, r0
 80095c2:	462b      	mov	r3, r5
 80095c4:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80095c8:	2909      	cmp	r1, #9
 80095ca:	d913      	bls.n	80095f4 <_strtod_l+0x204>
 80095cc:	2101      	movs	r1, #1
 80095ce:	9106      	str	r1, [sp, #24]
 80095d0:	e7c6      	b.n	8009560 <_strtod_l+0x170>
 80095d2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80095d4:	1c5a      	adds	r2, r3, #1
 80095d6:	9211      	str	r2, [sp, #68]	@ 0x44
 80095d8:	785a      	ldrb	r2, [r3, #1]
 80095da:	3001      	adds	r0, #1
 80095dc:	2a30      	cmp	r2, #48	@ 0x30
 80095de:	d0f8      	beq.n	80095d2 <_strtod_l+0x1e2>
 80095e0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80095e4:	2b08      	cmp	r3, #8
 80095e6:	f200 8476 	bhi.w	8009ed6 <_strtod_l+0xae6>
 80095ea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80095ec:	930a      	str	r3, [sp, #40]	@ 0x28
 80095ee:	4607      	mov	r7, r0
 80095f0:	2000      	movs	r0, #0
 80095f2:	4603      	mov	r3, r0
 80095f4:	3a30      	subs	r2, #48	@ 0x30
 80095f6:	f100 0101 	add.w	r1, r0, #1
 80095fa:	d023      	beq.n	8009644 <_strtod_l+0x254>
 80095fc:	440f      	add	r7, r1
 80095fe:	eb00 0c03 	add.w	ip, r0, r3
 8009602:	4619      	mov	r1, r3
 8009604:	240a      	movs	r4, #10
 8009606:	4561      	cmp	r1, ip
 8009608:	d10b      	bne.n	8009622 <_strtod_l+0x232>
 800960a:	1c5c      	adds	r4, r3, #1
 800960c:	4403      	add	r3, r0
 800960e:	2b08      	cmp	r3, #8
 8009610:	4404      	add	r4, r0
 8009612:	dc11      	bgt.n	8009638 <_strtod_l+0x248>
 8009614:	230a      	movs	r3, #10
 8009616:	fb03 2909 	mla	r9, r3, r9, r2
 800961a:	2100      	movs	r1, #0
 800961c:	e013      	b.n	8009646 <_strtod_l+0x256>
 800961e:	4628      	mov	r0, r5
 8009620:	e7dc      	b.n	80095dc <_strtod_l+0x1ec>
 8009622:	2908      	cmp	r1, #8
 8009624:	f101 0101 	add.w	r1, r1, #1
 8009628:	dc02      	bgt.n	8009630 <_strtod_l+0x240>
 800962a:	fb04 f909 	mul.w	r9, r4, r9
 800962e:	e7ea      	b.n	8009606 <_strtod_l+0x216>
 8009630:	2910      	cmp	r1, #16
 8009632:	bfd8      	it	le
 8009634:	4366      	mulle	r6, r4
 8009636:	e7e6      	b.n	8009606 <_strtod_l+0x216>
 8009638:	2b0f      	cmp	r3, #15
 800963a:	dcee      	bgt.n	800961a <_strtod_l+0x22a>
 800963c:	230a      	movs	r3, #10
 800963e:	fb03 2606 	mla	r6, r3, r6, r2
 8009642:	e7ea      	b.n	800961a <_strtod_l+0x22a>
 8009644:	461c      	mov	r4, r3
 8009646:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009648:	1c5a      	adds	r2, r3, #1
 800964a:	9211      	str	r2, [sp, #68]	@ 0x44
 800964c:	785a      	ldrb	r2, [r3, #1]
 800964e:	4608      	mov	r0, r1
 8009650:	4623      	mov	r3, r4
 8009652:	e7b7      	b.n	80095c4 <_strtod_l+0x1d4>
 8009654:	2301      	movs	r3, #1
 8009656:	2700      	movs	r7, #0
 8009658:	9306      	str	r3, [sp, #24]
 800965a:	e786      	b.n	800956a <_strtod_l+0x17a>
 800965c:	f04f 0e00 	mov.w	lr, #0
 8009660:	f108 0202 	add.w	r2, r8, #2
 8009664:	9211      	str	r2, [sp, #68]	@ 0x44
 8009666:	f898 2002 	ldrb.w	r2, [r8, #2]
 800966a:	e78f      	b.n	800958c <_strtod_l+0x19c>
 800966c:	f04f 0e01 	mov.w	lr, #1
 8009670:	e7f6      	b.n	8009660 <_strtod_l+0x270>
 8009672:	bf00      	nop
 8009674:	0800b370 	.word	0x0800b370
 8009678:	0800b358 	.word	0x0800b358
 800967c:	7ff00000 	.word	0x7ff00000
 8009680:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009682:	1c54      	adds	r4, r2, #1
 8009684:	9411      	str	r4, [sp, #68]	@ 0x44
 8009686:	7852      	ldrb	r2, [r2, #1]
 8009688:	2a30      	cmp	r2, #48	@ 0x30
 800968a:	d0f9      	beq.n	8009680 <_strtod_l+0x290>
 800968c:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8009690:	2c08      	cmp	r4, #8
 8009692:	d881      	bhi.n	8009598 <_strtod_l+0x1a8>
 8009694:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8009698:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800969a:	9209      	str	r2, [sp, #36]	@ 0x24
 800969c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800969e:	1c51      	adds	r1, r2, #1
 80096a0:	9111      	str	r1, [sp, #68]	@ 0x44
 80096a2:	7852      	ldrb	r2, [r2, #1]
 80096a4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 80096a8:	2c09      	cmp	r4, #9
 80096aa:	d938      	bls.n	800971e <_strtod_l+0x32e>
 80096ac:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80096ae:	1b0c      	subs	r4, r1, r4
 80096b0:	2c08      	cmp	r4, #8
 80096b2:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 80096b6:	dc02      	bgt.n	80096be <_strtod_l+0x2ce>
 80096b8:	4564      	cmp	r4, ip
 80096ba:	bfa8      	it	ge
 80096bc:	4664      	movge	r4, ip
 80096be:	f1be 0f00 	cmp.w	lr, #0
 80096c2:	d000      	beq.n	80096c6 <_strtod_l+0x2d6>
 80096c4:	4264      	negs	r4, r4
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d14e      	bne.n	8009768 <_strtod_l+0x378>
 80096ca:	9b07      	ldr	r3, [sp, #28]
 80096cc:	4318      	orrs	r0, r3
 80096ce:	f47f aeca 	bne.w	8009466 <_strtod_l+0x76>
 80096d2:	9b06      	ldr	r3, [sp, #24]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	f47f aee2 	bne.w	800949e <_strtod_l+0xae>
 80096da:	2a69      	cmp	r2, #105	@ 0x69
 80096dc:	d027      	beq.n	800972e <_strtod_l+0x33e>
 80096de:	dc24      	bgt.n	800972a <_strtod_l+0x33a>
 80096e0:	2a49      	cmp	r2, #73	@ 0x49
 80096e2:	d024      	beq.n	800972e <_strtod_l+0x33e>
 80096e4:	2a4e      	cmp	r2, #78	@ 0x4e
 80096e6:	f47f aeda 	bne.w	800949e <_strtod_l+0xae>
 80096ea:	4997      	ldr	r1, [pc, #604]	@ (8009948 <_strtod_l+0x558>)
 80096ec:	a811      	add	r0, sp, #68	@ 0x44
 80096ee:	f001 fb63 	bl	800adb8 <__match>
 80096f2:	2800      	cmp	r0, #0
 80096f4:	f43f aed3 	beq.w	800949e <_strtod_l+0xae>
 80096f8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80096fa:	781b      	ldrb	r3, [r3, #0]
 80096fc:	2b28      	cmp	r3, #40	@ 0x28
 80096fe:	d12d      	bne.n	800975c <_strtod_l+0x36c>
 8009700:	4992      	ldr	r1, [pc, #584]	@ (800994c <_strtod_l+0x55c>)
 8009702:	aa14      	add	r2, sp, #80	@ 0x50
 8009704:	a811      	add	r0, sp, #68	@ 0x44
 8009706:	f001 fb6b 	bl	800ade0 <__hexnan>
 800970a:	2805      	cmp	r0, #5
 800970c:	d126      	bne.n	800975c <_strtod_l+0x36c>
 800970e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009710:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8009714:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009718:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800971c:	e6a3      	b.n	8009466 <_strtod_l+0x76>
 800971e:	240a      	movs	r4, #10
 8009720:	fb04 2c0c 	mla	ip, r4, ip, r2
 8009724:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8009728:	e7b8      	b.n	800969c <_strtod_l+0x2ac>
 800972a:	2a6e      	cmp	r2, #110	@ 0x6e
 800972c:	e7db      	b.n	80096e6 <_strtod_l+0x2f6>
 800972e:	4988      	ldr	r1, [pc, #544]	@ (8009950 <_strtod_l+0x560>)
 8009730:	a811      	add	r0, sp, #68	@ 0x44
 8009732:	f001 fb41 	bl	800adb8 <__match>
 8009736:	2800      	cmp	r0, #0
 8009738:	f43f aeb1 	beq.w	800949e <_strtod_l+0xae>
 800973c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800973e:	4985      	ldr	r1, [pc, #532]	@ (8009954 <_strtod_l+0x564>)
 8009740:	3b01      	subs	r3, #1
 8009742:	a811      	add	r0, sp, #68	@ 0x44
 8009744:	9311      	str	r3, [sp, #68]	@ 0x44
 8009746:	f001 fb37 	bl	800adb8 <__match>
 800974a:	b910      	cbnz	r0, 8009752 <_strtod_l+0x362>
 800974c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800974e:	3301      	adds	r3, #1
 8009750:	9311      	str	r3, [sp, #68]	@ 0x44
 8009752:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8009968 <_strtod_l+0x578>
 8009756:	f04f 0a00 	mov.w	sl, #0
 800975a:	e684      	b.n	8009466 <_strtod_l+0x76>
 800975c:	487e      	ldr	r0, [pc, #504]	@ (8009958 <_strtod_l+0x568>)
 800975e:	f001 f867 	bl	800a830 <nan>
 8009762:	ec5b ab10 	vmov	sl, fp, d0
 8009766:	e67e      	b.n	8009466 <_strtod_l+0x76>
 8009768:	ee07 9a90 	vmov	s15, r9
 800976c:	1be2      	subs	r2, r4, r7
 800976e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009772:	2d00      	cmp	r5, #0
 8009774:	bf08      	it	eq
 8009776:	461d      	moveq	r5, r3
 8009778:	2b10      	cmp	r3, #16
 800977a:	9209      	str	r2, [sp, #36]	@ 0x24
 800977c:	461a      	mov	r2, r3
 800977e:	bfa8      	it	ge
 8009780:	2210      	movge	r2, #16
 8009782:	2b09      	cmp	r3, #9
 8009784:	ec5b ab17 	vmov	sl, fp, d7
 8009788:	dc15      	bgt.n	80097b6 <_strtod_l+0x3c6>
 800978a:	1be1      	subs	r1, r4, r7
 800978c:	2900      	cmp	r1, #0
 800978e:	f43f ae6a 	beq.w	8009466 <_strtod_l+0x76>
 8009792:	eba4 0107 	sub.w	r1, r4, r7
 8009796:	dd72      	ble.n	800987e <_strtod_l+0x48e>
 8009798:	2916      	cmp	r1, #22
 800979a:	dc59      	bgt.n	8009850 <_strtod_l+0x460>
 800979c:	4b6f      	ldr	r3, [pc, #444]	@ (800995c <_strtod_l+0x56c>)
 800979e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80097a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097a4:	ed93 7b00 	vldr	d7, [r3]
 80097a8:	ec4b ab16 	vmov	d6, sl, fp
 80097ac:	ee27 7b06 	vmul.f64	d7, d7, d6
 80097b0:	ec5b ab17 	vmov	sl, fp, d7
 80097b4:	e657      	b.n	8009466 <_strtod_l+0x76>
 80097b6:	4969      	ldr	r1, [pc, #420]	@ (800995c <_strtod_l+0x56c>)
 80097b8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80097bc:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 80097c0:	ee06 6a90 	vmov	s13, r6
 80097c4:	2b0f      	cmp	r3, #15
 80097c6:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 80097ca:	eea7 6b05 	vfma.f64	d6, d7, d5
 80097ce:	ec5b ab16 	vmov	sl, fp, d6
 80097d2:	ddda      	ble.n	800978a <_strtod_l+0x39a>
 80097d4:	1a9a      	subs	r2, r3, r2
 80097d6:	1be1      	subs	r1, r4, r7
 80097d8:	440a      	add	r2, r1
 80097da:	2a00      	cmp	r2, #0
 80097dc:	f340 8094 	ble.w	8009908 <_strtod_l+0x518>
 80097e0:	f012 000f 	ands.w	r0, r2, #15
 80097e4:	d00a      	beq.n	80097fc <_strtod_l+0x40c>
 80097e6:	495d      	ldr	r1, [pc, #372]	@ (800995c <_strtod_l+0x56c>)
 80097e8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80097ec:	ed91 7b00 	vldr	d7, [r1]
 80097f0:	ec4b ab16 	vmov	d6, sl, fp
 80097f4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80097f8:	ec5b ab17 	vmov	sl, fp, d7
 80097fc:	f032 020f 	bics.w	r2, r2, #15
 8009800:	d073      	beq.n	80098ea <_strtod_l+0x4fa>
 8009802:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8009806:	dd47      	ble.n	8009898 <_strtod_l+0x4a8>
 8009808:	2400      	movs	r4, #0
 800980a:	4625      	mov	r5, r4
 800980c:	9407      	str	r4, [sp, #28]
 800980e:	4626      	mov	r6, r4
 8009810:	9a05      	ldr	r2, [sp, #20]
 8009812:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009968 <_strtod_l+0x578>
 8009816:	2322      	movs	r3, #34	@ 0x22
 8009818:	6013      	str	r3, [r2, #0]
 800981a:	f04f 0a00 	mov.w	sl, #0
 800981e:	9b07      	ldr	r3, [sp, #28]
 8009820:	2b00      	cmp	r3, #0
 8009822:	f43f ae20 	beq.w	8009466 <_strtod_l+0x76>
 8009826:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8009828:	9805      	ldr	r0, [sp, #20]
 800982a:	f7ff f957 	bl	8008adc <_Bfree>
 800982e:	9805      	ldr	r0, [sp, #20]
 8009830:	4631      	mov	r1, r6
 8009832:	f7ff f953 	bl	8008adc <_Bfree>
 8009836:	9805      	ldr	r0, [sp, #20]
 8009838:	4629      	mov	r1, r5
 800983a:	f7ff f94f 	bl	8008adc <_Bfree>
 800983e:	9907      	ldr	r1, [sp, #28]
 8009840:	9805      	ldr	r0, [sp, #20]
 8009842:	f7ff f94b 	bl	8008adc <_Bfree>
 8009846:	9805      	ldr	r0, [sp, #20]
 8009848:	4621      	mov	r1, r4
 800984a:	f7ff f947 	bl	8008adc <_Bfree>
 800984e:	e60a      	b.n	8009466 <_strtod_l+0x76>
 8009850:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8009854:	1be0      	subs	r0, r4, r7
 8009856:	4281      	cmp	r1, r0
 8009858:	dbbc      	blt.n	80097d4 <_strtod_l+0x3e4>
 800985a:	4a40      	ldr	r2, [pc, #256]	@ (800995c <_strtod_l+0x56c>)
 800985c:	f1c3 030f 	rsb	r3, r3, #15
 8009860:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8009864:	ed91 7b00 	vldr	d7, [r1]
 8009868:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800986a:	ec4b ab16 	vmov	d6, sl, fp
 800986e:	1acb      	subs	r3, r1, r3
 8009870:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8009874:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009878:	ed92 6b00 	vldr	d6, [r2]
 800987c:	e796      	b.n	80097ac <_strtod_l+0x3bc>
 800987e:	3116      	adds	r1, #22
 8009880:	dba8      	blt.n	80097d4 <_strtod_l+0x3e4>
 8009882:	4b36      	ldr	r3, [pc, #216]	@ (800995c <_strtod_l+0x56c>)
 8009884:	1b3c      	subs	r4, r7, r4
 8009886:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800988a:	ed94 7b00 	vldr	d7, [r4]
 800988e:	ec4b ab16 	vmov	d6, sl, fp
 8009892:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009896:	e78b      	b.n	80097b0 <_strtod_l+0x3c0>
 8009898:	2000      	movs	r0, #0
 800989a:	ec4b ab17 	vmov	d7, sl, fp
 800989e:	4e30      	ldr	r6, [pc, #192]	@ (8009960 <_strtod_l+0x570>)
 80098a0:	1112      	asrs	r2, r2, #4
 80098a2:	4601      	mov	r1, r0
 80098a4:	2a01      	cmp	r2, #1
 80098a6:	dc23      	bgt.n	80098f0 <_strtod_l+0x500>
 80098a8:	b108      	cbz	r0, 80098ae <_strtod_l+0x4be>
 80098aa:	ec5b ab17 	vmov	sl, fp, d7
 80098ae:	4a2c      	ldr	r2, [pc, #176]	@ (8009960 <_strtod_l+0x570>)
 80098b0:	482c      	ldr	r0, [pc, #176]	@ (8009964 <_strtod_l+0x574>)
 80098b2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80098b6:	ed92 7b00 	vldr	d7, [r2]
 80098ba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80098be:	ec4b ab16 	vmov	d6, sl, fp
 80098c2:	4a29      	ldr	r2, [pc, #164]	@ (8009968 <_strtod_l+0x578>)
 80098c4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80098c8:	ee17 1a90 	vmov	r1, s15
 80098cc:	400a      	ands	r2, r1
 80098ce:	4282      	cmp	r2, r0
 80098d0:	ec5b ab17 	vmov	sl, fp, d7
 80098d4:	d898      	bhi.n	8009808 <_strtod_l+0x418>
 80098d6:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 80098da:	4282      	cmp	r2, r0
 80098dc:	bf86      	itte	hi
 80098de:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800996c <_strtod_l+0x57c>
 80098e2:	f04f 3aff 	movhi.w	sl, #4294967295
 80098e6:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 80098ea:	2200      	movs	r2, #0
 80098ec:	9206      	str	r2, [sp, #24]
 80098ee:	e076      	b.n	80099de <_strtod_l+0x5ee>
 80098f0:	f012 0f01 	tst.w	r2, #1
 80098f4:	d004      	beq.n	8009900 <_strtod_l+0x510>
 80098f6:	ed96 6b00 	vldr	d6, [r6]
 80098fa:	2001      	movs	r0, #1
 80098fc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009900:	3101      	adds	r1, #1
 8009902:	1052      	asrs	r2, r2, #1
 8009904:	3608      	adds	r6, #8
 8009906:	e7cd      	b.n	80098a4 <_strtod_l+0x4b4>
 8009908:	d0ef      	beq.n	80098ea <_strtod_l+0x4fa>
 800990a:	4252      	negs	r2, r2
 800990c:	f012 000f 	ands.w	r0, r2, #15
 8009910:	d00a      	beq.n	8009928 <_strtod_l+0x538>
 8009912:	4912      	ldr	r1, [pc, #72]	@ (800995c <_strtod_l+0x56c>)
 8009914:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8009918:	ed91 7b00 	vldr	d7, [r1]
 800991c:	ec4b ab16 	vmov	d6, sl, fp
 8009920:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009924:	ec5b ab17 	vmov	sl, fp, d7
 8009928:	1112      	asrs	r2, r2, #4
 800992a:	d0de      	beq.n	80098ea <_strtod_l+0x4fa>
 800992c:	2a1f      	cmp	r2, #31
 800992e:	dd1f      	ble.n	8009970 <_strtod_l+0x580>
 8009930:	2400      	movs	r4, #0
 8009932:	4625      	mov	r5, r4
 8009934:	9407      	str	r4, [sp, #28]
 8009936:	4626      	mov	r6, r4
 8009938:	9a05      	ldr	r2, [sp, #20]
 800993a:	2322      	movs	r3, #34	@ 0x22
 800993c:	f04f 0a00 	mov.w	sl, #0
 8009940:	f04f 0b00 	mov.w	fp, #0
 8009944:	6013      	str	r3, [r2, #0]
 8009946:	e76a      	b.n	800981e <_strtod_l+0x42e>
 8009948:	0800b149 	.word	0x0800b149
 800994c:	0800b35c 	.word	0x0800b35c
 8009950:	0800b141 	.word	0x0800b141
 8009954:	0800b178 	.word	0x0800b178
 8009958:	0800b505 	.word	0x0800b505
 800995c:	0800b290 	.word	0x0800b290
 8009960:	0800b268 	.word	0x0800b268
 8009964:	7ca00000 	.word	0x7ca00000
 8009968:	7ff00000 	.word	0x7ff00000
 800996c:	7fefffff 	.word	0x7fefffff
 8009970:	f012 0110 	ands.w	r1, r2, #16
 8009974:	bf18      	it	ne
 8009976:	216a      	movne	r1, #106	@ 0x6a
 8009978:	9106      	str	r1, [sp, #24]
 800997a:	ec4b ab17 	vmov	d7, sl, fp
 800997e:	49b0      	ldr	r1, [pc, #704]	@ (8009c40 <_strtod_l+0x850>)
 8009980:	2000      	movs	r0, #0
 8009982:	07d6      	lsls	r6, r2, #31
 8009984:	d504      	bpl.n	8009990 <_strtod_l+0x5a0>
 8009986:	ed91 6b00 	vldr	d6, [r1]
 800998a:	2001      	movs	r0, #1
 800998c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009990:	1052      	asrs	r2, r2, #1
 8009992:	f101 0108 	add.w	r1, r1, #8
 8009996:	d1f4      	bne.n	8009982 <_strtod_l+0x592>
 8009998:	b108      	cbz	r0, 800999e <_strtod_l+0x5ae>
 800999a:	ec5b ab17 	vmov	sl, fp, d7
 800999e:	9a06      	ldr	r2, [sp, #24]
 80099a0:	b1b2      	cbz	r2, 80099d0 <_strtod_l+0x5e0>
 80099a2:	f3cb 510a 	ubfx	r1, fp, #20, #11
 80099a6:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 80099aa:	2a00      	cmp	r2, #0
 80099ac:	4658      	mov	r0, fp
 80099ae:	dd0f      	ble.n	80099d0 <_strtod_l+0x5e0>
 80099b0:	2a1f      	cmp	r2, #31
 80099b2:	dd55      	ble.n	8009a60 <_strtod_l+0x670>
 80099b4:	2a34      	cmp	r2, #52	@ 0x34
 80099b6:	bfde      	ittt	le
 80099b8:	f04f 32ff 	movle.w	r2, #4294967295
 80099bc:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 80099c0:	408a      	lslle	r2, r1
 80099c2:	f04f 0a00 	mov.w	sl, #0
 80099c6:	bfcc      	ite	gt
 80099c8:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80099cc:	ea02 0b00 	andle.w	fp, r2, r0
 80099d0:	ec4b ab17 	vmov	d7, sl, fp
 80099d4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80099d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099dc:	d0a8      	beq.n	8009930 <_strtod_l+0x540>
 80099de:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80099e0:	9805      	ldr	r0, [sp, #20]
 80099e2:	f8cd 9000 	str.w	r9, [sp]
 80099e6:	462a      	mov	r2, r5
 80099e8:	f7ff f8e0 	bl	8008bac <__s2b>
 80099ec:	9007      	str	r0, [sp, #28]
 80099ee:	2800      	cmp	r0, #0
 80099f0:	f43f af0a 	beq.w	8009808 <_strtod_l+0x418>
 80099f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099f6:	1b3f      	subs	r7, r7, r4
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	bfb4      	ite	lt
 80099fc:	463b      	movlt	r3, r7
 80099fe:	2300      	movge	r3, #0
 8009a00:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a04:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8009c30 <_strtod_l+0x840>
 8009a08:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009a0c:	2400      	movs	r4, #0
 8009a0e:	930d      	str	r3, [sp, #52]	@ 0x34
 8009a10:	4625      	mov	r5, r4
 8009a12:	9b07      	ldr	r3, [sp, #28]
 8009a14:	9805      	ldr	r0, [sp, #20]
 8009a16:	6859      	ldr	r1, [r3, #4]
 8009a18:	f7ff f820 	bl	8008a5c <_Balloc>
 8009a1c:	4606      	mov	r6, r0
 8009a1e:	2800      	cmp	r0, #0
 8009a20:	f43f aef6 	beq.w	8009810 <_strtod_l+0x420>
 8009a24:	9b07      	ldr	r3, [sp, #28]
 8009a26:	691a      	ldr	r2, [r3, #16]
 8009a28:	ec4b ab19 	vmov	d9, sl, fp
 8009a2c:	3202      	adds	r2, #2
 8009a2e:	f103 010c 	add.w	r1, r3, #12
 8009a32:	0092      	lsls	r2, r2, #2
 8009a34:	300c      	adds	r0, #12
 8009a36:	f7fe f91c 	bl	8007c72 <memcpy>
 8009a3a:	eeb0 0b49 	vmov.f64	d0, d9
 8009a3e:	9805      	ldr	r0, [sp, #20]
 8009a40:	aa14      	add	r2, sp, #80	@ 0x50
 8009a42:	a913      	add	r1, sp, #76	@ 0x4c
 8009a44:	f7ff fbee 	bl	8009224 <__d2b>
 8009a48:	9012      	str	r0, [sp, #72]	@ 0x48
 8009a4a:	2800      	cmp	r0, #0
 8009a4c:	f43f aee0 	beq.w	8009810 <_strtod_l+0x420>
 8009a50:	9805      	ldr	r0, [sp, #20]
 8009a52:	2101      	movs	r1, #1
 8009a54:	f7ff f940 	bl	8008cd8 <__i2b>
 8009a58:	4605      	mov	r5, r0
 8009a5a:	b940      	cbnz	r0, 8009a6e <_strtod_l+0x67e>
 8009a5c:	2500      	movs	r5, #0
 8009a5e:	e6d7      	b.n	8009810 <_strtod_l+0x420>
 8009a60:	f04f 31ff 	mov.w	r1, #4294967295
 8009a64:	fa01 f202 	lsl.w	r2, r1, r2
 8009a68:	ea02 0a0a 	and.w	sl, r2, sl
 8009a6c:	e7b0      	b.n	80099d0 <_strtod_l+0x5e0>
 8009a6e:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8009a70:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009a72:	2f00      	cmp	r7, #0
 8009a74:	bfab      	itete	ge
 8009a76:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8009a78:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8009a7a:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8009a7e:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8009a82:	bfac      	ite	ge
 8009a84:	eb07 0903 	addge.w	r9, r7, r3
 8009a88:	eba3 0807 	sublt.w	r8, r3, r7
 8009a8c:	9b06      	ldr	r3, [sp, #24]
 8009a8e:	1aff      	subs	r7, r7, r3
 8009a90:	4417      	add	r7, r2
 8009a92:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8009a96:	4a6b      	ldr	r2, [pc, #428]	@ (8009c44 <_strtod_l+0x854>)
 8009a98:	3f01      	subs	r7, #1
 8009a9a:	4297      	cmp	r7, r2
 8009a9c:	da51      	bge.n	8009b42 <_strtod_l+0x752>
 8009a9e:	1bd1      	subs	r1, r2, r7
 8009aa0:	291f      	cmp	r1, #31
 8009aa2:	eba3 0301 	sub.w	r3, r3, r1
 8009aa6:	f04f 0201 	mov.w	r2, #1
 8009aaa:	dc3e      	bgt.n	8009b2a <_strtod_l+0x73a>
 8009aac:	408a      	lsls	r2, r1
 8009aae:	920c      	str	r2, [sp, #48]	@ 0x30
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009ab4:	eb09 0703 	add.w	r7, r9, r3
 8009ab8:	4498      	add	r8, r3
 8009aba:	9b06      	ldr	r3, [sp, #24]
 8009abc:	45b9      	cmp	r9, r7
 8009abe:	4498      	add	r8, r3
 8009ac0:	464b      	mov	r3, r9
 8009ac2:	bfa8      	it	ge
 8009ac4:	463b      	movge	r3, r7
 8009ac6:	4543      	cmp	r3, r8
 8009ac8:	bfa8      	it	ge
 8009aca:	4643      	movge	r3, r8
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	bfc2      	ittt	gt
 8009ad0:	1aff      	subgt	r7, r7, r3
 8009ad2:	eba8 0803 	subgt.w	r8, r8, r3
 8009ad6:	eba9 0903 	subgt.w	r9, r9, r3
 8009ada:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	dd16      	ble.n	8009b0e <_strtod_l+0x71e>
 8009ae0:	4629      	mov	r1, r5
 8009ae2:	9805      	ldr	r0, [sp, #20]
 8009ae4:	461a      	mov	r2, r3
 8009ae6:	f7ff f9b7 	bl	8008e58 <__pow5mult>
 8009aea:	4605      	mov	r5, r0
 8009aec:	2800      	cmp	r0, #0
 8009aee:	d0b5      	beq.n	8009a5c <_strtod_l+0x66c>
 8009af0:	4601      	mov	r1, r0
 8009af2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009af4:	9805      	ldr	r0, [sp, #20]
 8009af6:	f7ff f905 	bl	8008d04 <__multiply>
 8009afa:	900f      	str	r0, [sp, #60]	@ 0x3c
 8009afc:	2800      	cmp	r0, #0
 8009afe:	f43f ae87 	beq.w	8009810 <_strtod_l+0x420>
 8009b02:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8009b04:	9805      	ldr	r0, [sp, #20]
 8009b06:	f7fe ffe9 	bl	8008adc <_Bfree>
 8009b0a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b0c:	9312      	str	r3, [sp, #72]	@ 0x48
 8009b0e:	2f00      	cmp	r7, #0
 8009b10:	dc1b      	bgt.n	8009b4a <_strtod_l+0x75a>
 8009b12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	dd21      	ble.n	8009b5c <_strtod_l+0x76c>
 8009b18:	4631      	mov	r1, r6
 8009b1a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009b1c:	9805      	ldr	r0, [sp, #20]
 8009b1e:	f7ff f99b 	bl	8008e58 <__pow5mult>
 8009b22:	4606      	mov	r6, r0
 8009b24:	b9d0      	cbnz	r0, 8009b5c <_strtod_l+0x76c>
 8009b26:	2600      	movs	r6, #0
 8009b28:	e672      	b.n	8009810 <_strtod_l+0x420>
 8009b2a:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 8009b2e:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8009b32:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8009b36:	37e2      	adds	r7, #226	@ 0xe2
 8009b38:	fa02 f107 	lsl.w	r1, r2, r7
 8009b3c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009b3e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009b40:	e7b8      	b.n	8009ab4 <_strtod_l+0x6c4>
 8009b42:	2200      	movs	r2, #0
 8009b44:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009b46:	2201      	movs	r2, #1
 8009b48:	e7f9      	b.n	8009b3e <_strtod_l+0x74e>
 8009b4a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8009b4c:	9805      	ldr	r0, [sp, #20]
 8009b4e:	463a      	mov	r2, r7
 8009b50:	f7ff f9dc 	bl	8008f0c <__lshift>
 8009b54:	9012      	str	r0, [sp, #72]	@ 0x48
 8009b56:	2800      	cmp	r0, #0
 8009b58:	d1db      	bne.n	8009b12 <_strtod_l+0x722>
 8009b5a:	e659      	b.n	8009810 <_strtod_l+0x420>
 8009b5c:	f1b8 0f00 	cmp.w	r8, #0
 8009b60:	dd07      	ble.n	8009b72 <_strtod_l+0x782>
 8009b62:	4631      	mov	r1, r6
 8009b64:	9805      	ldr	r0, [sp, #20]
 8009b66:	4642      	mov	r2, r8
 8009b68:	f7ff f9d0 	bl	8008f0c <__lshift>
 8009b6c:	4606      	mov	r6, r0
 8009b6e:	2800      	cmp	r0, #0
 8009b70:	d0d9      	beq.n	8009b26 <_strtod_l+0x736>
 8009b72:	f1b9 0f00 	cmp.w	r9, #0
 8009b76:	dd08      	ble.n	8009b8a <_strtod_l+0x79a>
 8009b78:	4629      	mov	r1, r5
 8009b7a:	9805      	ldr	r0, [sp, #20]
 8009b7c:	464a      	mov	r2, r9
 8009b7e:	f7ff f9c5 	bl	8008f0c <__lshift>
 8009b82:	4605      	mov	r5, r0
 8009b84:	2800      	cmp	r0, #0
 8009b86:	f43f ae43 	beq.w	8009810 <_strtod_l+0x420>
 8009b8a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8009b8c:	9805      	ldr	r0, [sp, #20]
 8009b8e:	4632      	mov	r2, r6
 8009b90:	f7ff fa44 	bl	800901c <__mdiff>
 8009b94:	4604      	mov	r4, r0
 8009b96:	2800      	cmp	r0, #0
 8009b98:	f43f ae3a 	beq.w	8009810 <_strtod_l+0x420>
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8009ba2:	60c3      	str	r3, [r0, #12]
 8009ba4:	4629      	mov	r1, r5
 8009ba6:	f7ff fa1d 	bl	8008fe4 <__mcmp>
 8009baa:	2800      	cmp	r0, #0
 8009bac:	da4e      	bge.n	8009c4c <_strtod_l+0x85c>
 8009bae:	ea58 080a 	orrs.w	r8, r8, sl
 8009bb2:	d174      	bne.n	8009c9e <_strtod_l+0x8ae>
 8009bb4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d170      	bne.n	8009c9e <_strtod_l+0x8ae>
 8009bbc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009bc0:	0d1b      	lsrs	r3, r3, #20
 8009bc2:	051b      	lsls	r3, r3, #20
 8009bc4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009bc8:	d969      	bls.n	8009c9e <_strtod_l+0x8ae>
 8009bca:	6963      	ldr	r3, [r4, #20]
 8009bcc:	b913      	cbnz	r3, 8009bd4 <_strtod_l+0x7e4>
 8009bce:	6923      	ldr	r3, [r4, #16]
 8009bd0:	2b01      	cmp	r3, #1
 8009bd2:	dd64      	ble.n	8009c9e <_strtod_l+0x8ae>
 8009bd4:	4621      	mov	r1, r4
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	9805      	ldr	r0, [sp, #20]
 8009bda:	f7ff f997 	bl	8008f0c <__lshift>
 8009bde:	4629      	mov	r1, r5
 8009be0:	4604      	mov	r4, r0
 8009be2:	f7ff f9ff 	bl	8008fe4 <__mcmp>
 8009be6:	2800      	cmp	r0, #0
 8009be8:	dd59      	ble.n	8009c9e <_strtod_l+0x8ae>
 8009bea:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009bee:	9a06      	ldr	r2, [sp, #24]
 8009bf0:	0d1b      	lsrs	r3, r3, #20
 8009bf2:	051b      	lsls	r3, r3, #20
 8009bf4:	2a00      	cmp	r2, #0
 8009bf6:	d070      	beq.n	8009cda <_strtod_l+0x8ea>
 8009bf8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009bfc:	d86d      	bhi.n	8009cda <_strtod_l+0x8ea>
 8009bfe:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009c02:	f67f ae99 	bls.w	8009938 <_strtod_l+0x548>
 8009c06:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8009c38 <_strtod_l+0x848>
 8009c0a:	ec4b ab16 	vmov	d6, sl, fp
 8009c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8009c48 <_strtod_l+0x858>)
 8009c10:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009c14:	ee17 2a90 	vmov	r2, s15
 8009c18:	4013      	ands	r3, r2
 8009c1a:	ec5b ab17 	vmov	sl, fp, d7
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	f47f ae01 	bne.w	8009826 <_strtod_l+0x436>
 8009c24:	9a05      	ldr	r2, [sp, #20]
 8009c26:	2322      	movs	r3, #34	@ 0x22
 8009c28:	6013      	str	r3, [r2, #0]
 8009c2a:	e5fc      	b.n	8009826 <_strtod_l+0x436>
 8009c2c:	f3af 8000 	nop.w
 8009c30:	ffc00000 	.word	0xffc00000
 8009c34:	41dfffff 	.word	0x41dfffff
 8009c38:	00000000 	.word	0x00000000
 8009c3c:	39500000 	.word	0x39500000
 8009c40:	0800b388 	.word	0x0800b388
 8009c44:	fffffc02 	.word	0xfffffc02
 8009c48:	7ff00000 	.word	0x7ff00000
 8009c4c:	46d9      	mov	r9, fp
 8009c4e:	d15d      	bne.n	8009d0c <_strtod_l+0x91c>
 8009c50:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009c54:	f1b8 0f00 	cmp.w	r8, #0
 8009c58:	d02a      	beq.n	8009cb0 <_strtod_l+0x8c0>
 8009c5a:	4aab      	ldr	r2, [pc, #684]	@ (8009f08 <_strtod_l+0xb18>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d12a      	bne.n	8009cb6 <_strtod_l+0x8c6>
 8009c60:	9b06      	ldr	r3, [sp, #24]
 8009c62:	4652      	mov	r2, sl
 8009c64:	b1fb      	cbz	r3, 8009ca6 <_strtod_l+0x8b6>
 8009c66:	4ba9      	ldr	r3, [pc, #676]	@ (8009f0c <_strtod_l+0xb1c>)
 8009c68:	ea0b 0303 	and.w	r3, fp, r3
 8009c6c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009c70:	f04f 31ff 	mov.w	r1, #4294967295
 8009c74:	d81a      	bhi.n	8009cac <_strtod_l+0x8bc>
 8009c76:	0d1b      	lsrs	r3, r3, #20
 8009c78:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8009c80:	429a      	cmp	r2, r3
 8009c82:	d118      	bne.n	8009cb6 <_strtod_l+0x8c6>
 8009c84:	4ba2      	ldr	r3, [pc, #648]	@ (8009f10 <_strtod_l+0xb20>)
 8009c86:	4599      	cmp	r9, r3
 8009c88:	d102      	bne.n	8009c90 <_strtod_l+0x8a0>
 8009c8a:	3201      	adds	r2, #1
 8009c8c:	f43f adc0 	beq.w	8009810 <_strtod_l+0x420>
 8009c90:	4b9e      	ldr	r3, [pc, #632]	@ (8009f0c <_strtod_l+0xb1c>)
 8009c92:	ea09 0303 	and.w	r3, r9, r3
 8009c96:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8009c9a:	f04f 0a00 	mov.w	sl, #0
 8009c9e:	9b06      	ldr	r3, [sp, #24]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d1b0      	bne.n	8009c06 <_strtod_l+0x816>
 8009ca4:	e5bf      	b.n	8009826 <_strtod_l+0x436>
 8009ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8009caa:	e7e9      	b.n	8009c80 <_strtod_l+0x890>
 8009cac:	460b      	mov	r3, r1
 8009cae:	e7e7      	b.n	8009c80 <_strtod_l+0x890>
 8009cb0:	ea53 030a 	orrs.w	r3, r3, sl
 8009cb4:	d099      	beq.n	8009bea <_strtod_l+0x7fa>
 8009cb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009cb8:	b1c3      	cbz	r3, 8009cec <_strtod_l+0x8fc>
 8009cba:	ea13 0f09 	tst.w	r3, r9
 8009cbe:	d0ee      	beq.n	8009c9e <_strtod_l+0x8ae>
 8009cc0:	9a06      	ldr	r2, [sp, #24]
 8009cc2:	4650      	mov	r0, sl
 8009cc4:	4659      	mov	r1, fp
 8009cc6:	f1b8 0f00 	cmp.w	r8, #0
 8009cca:	d013      	beq.n	8009cf4 <_strtod_l+0x904>
 8009ccc:	f7ff fb75 	bl	80093ba <sulp>
 8009cd0:	ee39 7b00 	vadd.f64	d7, d9, d0
 8009cd4:	ec5b ab17 	vmov	sl, fp, d7
 8009cd8:	e7e1      	b.n	8009c9e <_strtod_l+0x8ae>
 8009cda:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009cde:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009ce2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009ce6:	f04f 3aff 	mov.w	sl, #4294967295
 8009cea:	e7d8      	b.n	8009c9e <_strtod_l+0x8ae>
 8009cec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009cee:	ea13 0f0a 	tst.w	r3, sl
 8009cf2:	e7e4      	b.n	8009cbe <_strtod_l+0x8ce>
 8009cf4:	f7ff fb61 	bl	80093ba <sulp>
 8009cf8:	ee39 0b40 	vsub.f64	d0, d9, d0
 8009cfc:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8009d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d04:	ec5b ab10 	vmov	sl, fp, d0
 8009d08:	d1c9      	bne.n	8009c9e <_strtod_l+0x8ae>
 8009d0a:	e615      	b.n	8009938 <_strtod_l+0x548>
 8009d0c:	4629      	mov	r1, r5
 8009d0e:	4620      	mov	r0, r4
 8009d10:	f7ff fae0 	bl	80092d4 <__ratio>
 8009d14:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8009d18:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d20:	d85d      	bhi.n	8009dde <_strtod_l+0x9ee>
 8009d22:	f1b8 0f00 	cmp.w	r8, #0
 8009d26:	d164      	bne.n	8009df2 <_strtod_l+0xa02>
 8009d28:	f1ba 0f00 	cmp.w	sl, #0
 8009d2c:	d14b      	bne.n	8009dc6 <_strtod_l+0x9d6>
 8009d2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d32:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d160      	bne.n	8009dfc <_strtod_l+0xa0c>
 8009d3a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8009d3e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8009d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d46:	d401      	bmi.n	8009d4c <_strtod_l+0x95c>
 8009d48:	ee20 8b08 	vmul.f64	d8, d0, d8
 8009d4c:	eeb1 ab48 	vneg.f64	d10, d8
 8009d50:	486e      	ldr	r0, [pc, #440]	@ (8009f0c <_strtod_l+0xb1c>)
 8009d52:	4970      	ldr	r1, [pc, #448]	@ (8009f14 <_strtod_l+0xb24>)
 8009d54:	ea09 0700 	and.w	r7, r9, r0
 8009d58:	428f      	cmp	r7, r1
 8009d5a:	ec53 2b1a 	vmov	r2, r3, d10
 8009d5e:	d17d      	bne.n	8009e5c <_strtod_l+0xa6c>
 8009d60:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8009d64:	ec4b ab1c 	vmov	d12, sl, fp
 8009d68:	eeb0 0b4c 	vmov.f64	d0, d12
 8009d6c:	f7ff f9ea 	bl	8009144 <__ulp>
 8009d70:	4866      	ldr	r0, [pc, #408]	@ (8009f0c <_strtod_l+0xb1c>)
 8009d72:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8009d76:	ee1c 3a90 	vmov	r3, s25
 8009d7a:	4a67      	ldr	r2, [pc, #412]	@ (8009f18 <_strtod_l+0xb28>)
 8009d7c:	ea03 0100 	and.w	r1, r3, r0
 8009d80:	4291      	cmp	r1, r2
 8009d82:	ec5b ab1c 	vmov	sl, fp, d12
 8009d86:	d93c      	bls.n	8009e02 <_strtod_l+0xa12>
 8009d88:	ee19 2a90 	vmov	r2, s19
 8009d8c:	4b60      	ldr	r3, [pc, #384]	@ (8009f10 <_strtod_l+0xb20>)
 8009d8e:	429a      	cmp	r2, r3
 8009d90:	d104      	bne.n	8009d9c <_strtod_l+0x9ac>
 8009d92:	ee19 3a10 	vmov	r3, s18
 8009d96:	3301      	adds	r3, #1
 8009d98:	f43f ad3a 	beq.w	8009810 <_strtod_l+0x420>
 8009d9c:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8009f10 <_strtod_l+0xb20>
 8009da0:	f04f 3aff 	mov.w	sl, #4294967295
 8009da4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8009da6:	9805      	ldr	r0, [sp, #20]
 8009da8:	f7fe fe98 	bl	8008adc <_Bfree>
 8009dac:	9805      	ldr	r0, [sp, #20]
 8009dae:	4631      	mov	r1, r6
 8009db0:	f7fe fe94 	bl	8008adc <_Bfree>
 8009db4:	9805      	ldr	r0, [sp, #20]
 8009db6:	4629      	mov	r1, r5
 8009db8:	f7fe fe90 	bl	8008adc <_Bfree>
 8009dbc:	9805      	ldr	r0, [sp, #20]
 8009dbe:	4621      	mov	r1, r4
 8009dc0:	f7fe fe8c 	bl	8008adc <_Bfree>
 8009dc4:	e625      	b.n	8009a12 <_strtod_l+0x622>
 8009dc6:	f1ba 0f01 	cmp.w	sl, #1
 8009dca:	d103      	bne.n	8009dd4 <_strtod_l+0x9e4>
 8009dcc:	f1bb 0f00 	cmp.w	fp, #0
 8009dd0:	f43f adb2 	beq.w	8009938 <_strtod_l+0x548>
 8009dd4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8009dd8:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8009ddc:	e7b8      	b.n	8009d50 <_strtod_l+0x960>
 8009dde:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8009de2:	ee20 8b08 	vmul.f64	d8, d0, d8
 8009de6:	f1b8 0f00 	cmp.w	r8, #0
 8009dea:	d0af      	beq.n	8009d4c <_strtod_l+0x95c>
 8009dec:	eeb0 ab48 	vmov.f64	d10, d8
 8009df0:	e7ae      	b.n	8009d50 <_strtod_l+0x960>
 8009df2:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8009df6:	eeb0 8b4a 	vmov.f64	d8, d10
 8009dfa:	e7a9      	b.n	8009d50 <_strtod_l+0x960>
 8009dfc:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8009e00:	e7a6      	b.n	8009d50 <_strtod_l+0x960>
 8009e02:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009e06:	9b06      	ldr	r3, [sp, #24]
 8009e08:	46d9      	mov	r9, fp
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d1ca      	bne.n	8009da4 <_strtod_l+0x9b4>
 8009e0e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009e12:	0d1b      	lsrs	r3, r3, #20
 8009e14:	051b      	lsls	r3, r3, #20
 8009e16:	429f      	cmp	r7, r3
 8009e18:	d1c4      	bne.n	8009da4 <_strtod_l+0x9b4>
 8009e1a:	ec51 0b18 	vmov	r0, r1, d8
 8009e1e:	f7f6 fc93 	bl	8000748 <__aeabi_d2lz>
 8009e22:	f7f6 fc4b 	bl	80006bc <__aeabi_l2d>
 8009e26:	f3cb 0913 	ubfx	r9, fp, #0, #20
 8009e2a:	ec41 0b17 	vmov	d7, r0, r1
 8009e2e:	ea49 090a 	orr.w	r9, r9, sl
 8009e32:	ea59 0908 	orrs.w	r9, r9, r8
 8009e36:	ee38 8b47 	vsub.f64	d8, d8, d7
 8009e3a:	d03c      	beq.n	8009eb6 <_strtod_l+0xac6>
 8009e3c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8009ef0 <_strtod_l+0xb00>
 8009e40:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e48:	f53f aced 	bmi.w	8009826 <_strtod_l+0x436>
 8009e4c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8009ef8 <_strtod_l+0xb08>
 8009e50:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e58:	dda4      	ble.n	8009da4 <_strtod_l+0x9b4>
 8009e5a:	e4e4      	b.n	8009826 <_strtod_l+0x436>
 8009e5c:	9906      	ldr	r1, [sp, #24]
 8009e5e:	b1e1      	cbz	r1, 8009e9a <_strtod_l+0xaaa>
 8009e60:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8009e64:	d819      	bhi.n	8009e9a <_strtod_l+0xaaa>
 8009e66:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8009e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e6e:	d811      	bhi.n	8009e94 <_strtod_l+0xaa4>
 8009e70:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8009e74:	ee18 3a10 	vmov	r3, s16
 8009e78:	2b01      	cmp	r3, #1
 8009e7a:	bf38      	it	cc
 8009e7c:	2301      	movcc	r3, #1
 8009e7e:	ee08 3a10 	vmov	s16, r3
 8009e82:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8009e86:	f1b8 0f00 	cmp.w	r8, #0
 8009e8a:	d111      	bne.n	8009eb0 <_strtod_l+0xac0>
 8009e8c:	eeb1 7b48 	vneg.f64	d7, d8
 8009e90:	ec53 2b17 	vmov	r2, r3, d7
 8009e94:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8009e98:	1bcb      	subs	r3, r1, r7
 8009e9a:	eeb0 0b49 	vmov.f64	d0, d9
 8009e9e:	ec43 2b1a 	vmov	d10, r2, r3
 8009ea2:	f7ff f94f 	bl	8009144 <__ulp>
 8009ea6:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8009eaa:	ec5b ab19 	vmov	sl, fp, d9
 8009eae:	e7aa      	b.n	8009e06 <_strtod_l+0xa16>
 8009eb0:	eeb0 7b48 	vmov.f64	d7, d8
 8009eb4:	e7ec      	b.n	8009e90 <_strtod_l+0xaa0>
 8009eb6:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8009f00 <_strtod_l+0xb10>
 8009eba:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ec2:	f57f af6f 	bpl.w	8009da4 <_strtod_l+0x9b4>
 8009ec6:	e4ae      	b.n	8009826 <_strtod_l+0x436>
 8009ec8:	2300      	movs	r3, #0
 8009eca:	9308      	str	r3, [sp, #32]
 8009ecc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ece:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009ed0:	6013      	str	r3, [r2, #0]
 8009ed2:	f7ff bacc 	b.w	800946e <_strtod_l+0x7e>
 8009ed6:	2a65      	cmp	r2, #101	@ 0x65
 8009ed8:	f43f abbc 	beq.w	8009654 <_strtod_l+0x264>
 8009edc:	2a45      	cmp	r2, #69	@ 0x45
 8009ede:	f43f abb9 	beq.w	8009654 <_strtod_l+0x264>
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	9306      	str	r3, [sp, #24]
 8009ee6:	f7ff bbf0 	b.w	80096ca <_strtod_l+0x2da>
 8009eea:	bf00      	nop
 8009eec:	f3af 8000 	nop.w
 8009ef0:	94a03595 	.word	0x94a03595
 8009ef4:	3fdfffff 	.word	0x3fdfffff
 8009ef8:	35afe535 	.word	0x35afe535
 8009efc:	3fe00000 	.word	0x3fe00000
 8009f00:	94a03595 	.word	0x94a03595
 8009f04:	3fcfffff 	.word	0x3fcfffff
 8009f08:	000fffff 	.word	0x000fffff
 8009f0c:	7ff00000 	.word	0x7ff00000
 8009f10:	7fefffff 	.word	0x7fefffff
 8009f14:	7fe00000 	.word	0x7fe00000
 8009f18:	7c9fffff 	.word	0x7c9fffff

08009f1c <_strtod_r>:
 8009f1c:	4b01      	ldr	r3, [pc, #4]	@ (8009f24 <_strtod_r+0x8>)
 8009f1e:	f7ff ba67 	b.w	80093f0 <_strtod_l>
 8009f22:	bf00      	nop
 8009f24:	24000070 	.word	0x24000070

08009f28 <_strtol_l.constprop.0>:
 8009f28:	2b24      	cmp	r3, #36	@ 0x24
 8009f2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f2e:	4686      	mov	lr, r0
 8009f30:	4690      	mov	r8, r2
 8009f32:	d801      	bhi.n	8009f38 <_strtol_l.constprop.0+0x10>
 8009f34:	2b01      	cmp	r3, #1
 8009f36:	d106      	bne.n	8009f46 <_strtol_l.constprop.0+0x1e>
 8009f38:	f7fd fe6e 	bl	8007c18 <__errno>
 8009f3c:	2316      	movs	r3, #22
 8009f3e:	6003      	str	r3, [r0, #0]
 8009f40:	2000      	movs	r0, #0
 8009f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f46:	4834      	ldr	r0, [pc, #208]	@ (800a018 <_strtol_l.constprop.0+0xf0>)
 8009f48:	460d      	mov	r5, r1
 8009f4a:	462a      	mov	r2, r5
 8009f4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009f50:	5d06      	ldrb	r6, [r0, r4]
 8009f52:	f016 0608 	ands.w	r6, r6, #8
 8009f56:	d1f8      	bne.n	8009f4a <_strtol_l.constprop.0+0x22>
 8009f58:	2c2d      	cmp	r4, #45	@ 0x2d
 8009f5a:	d12d      	bne.n	8009fb8 <_strtol_l.constprop.0+0x90>
 8009f5c:	782c      	ldrb	r4, [r5, #0]
 8009f5e:	2601      	movs	r6, #1
 8009f60:	1c95      	adds	r5, r2, #2
 8009f62:	f033 0210 	bics.w	r2, r3, #16
 8009f66:	d109      	bne.n	8009f7c <_strtol_l.constprop.0+0x54>
 8009f68:	2c30      	cmp	r4, #48	@ 0x30
 8009f6a:	d12a      	bne.n	8009fc2 <_strtol_l.constprop.0+0x9a>
 8009f6c:	782a      	ldrb	r2, [r5, #0]
 8009f6e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009f72:	2a58      	cmp	r2, #88	@ 0x58
 8009f74:	d125      	bne.n	8009fc2 <_strtol_l.constprop.0+0x9a>
 8009f76:	786c      	ldrb	r4, [r5, #1]
 8009f78:	2310      	movs	r3, #16
 8009f7a:	3502      	adds	r5, #2
 8009f7c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009f80:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009f84:	2200      	movs	r2, #0
 8009f86:	fbbc f9f3 	udiv	r9, ip, r3
 8009f8a:	4610      	mov	r0, r2
 8009f8c:	fb03 ca19 	mls	sl, r3, r9, ip
 8009f90:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009f94:	2f09      	cmp	r7, #9
 8009f96:	d81b      	bhi.n	8009fd0 <_strtol_l.constprop.0+0xa8>
 8009f98:	463c      	mov	r4, r7
 8009f9a:	42a3      	cmp	r3, r4
 8009f9c:	dd27      	ble.n	8009fee <_strtol_l.constprop.0+0xc6>
 8009f9e:	1c57      	adds	r7, r2, #1
 8009fa0:	d007      	beq.n	8009fb2 <_strtol_l.constprop.0+0x8a>
 8009fa2:	4581      	cmp	r9, r0
 8009fa4:	d320      	bcc.n	8009fe8 <_strtol_l.constprop.0+0xc0>
 8009fa6:	d101      	bne.n	8009fac <_strtol_l.constprop.0+0x84>
 8009fa8:	45a2      	cmp	sl, r4
 8009faa:	db1d      	blt.n	8009fe8 <_strtol_l.constprop.0+0xc0>
 8009fac:	fb00 4003 	mla	r0, r0, r3, r4
 8009fb0:	2201      	movs	r2, #1
 8009fb2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009fb6:	e7eb      	b.n	8009f90 <_strtol_l.constprop.0+0x68>
 8009fb8:	2c2b      	cmp	r4, #43	@ 0x2b
 8009fba:	bf04      	itt	eq
 8009fbc:	782c      	ldrbeq	r4, [r5, #0]
 8009fbe:	1c95      	addeq	r5, r2, #2
 8009fc0:	e7cf      	b.n	8009f62 <_strtol_l.constprop.0+0x3a>
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d1da      	bne.n	8009f7c <_strtol_l.constprop.0+0x54>
 8009fc6:	2c30      	cmp	r4, #48	@ 0x30
 8009fc8:	bf0c      	ite	eq
 8009fca:	2308      	moveq	r3, #8
 8009fcc:	230a      	movne	r3, #10
 8009fce:	e7d5      	b.n	8009f7c <_strtol_l.constprop.0+0x54>
 8009fd0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009fd4:	2f19      	cmp	r7, #25
 8009fd6:	d801      	bhi.n	8009fdc <_strtol_l.constprop.0+0xb4>
 8009fd8:	3c37      	subs	r4, #55	@ 0x37
 8009fda:	e7de      	b.n	8009f9a <_strtol_l.constprop.0+0x72>
 8009fdc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009fe0:	2f19      	cmp	r7, #25
 8009fe2:	d804      	bhi.n	8009fee <_strtol_l.constprop.0+0xc6>
 8009fe4:	3c57      	subs	r4, #87	@ 0x57
 8009fe6:	e7d8      	b.n	8009f9a <_strtol_l.constprop.0+0x72>
 8009fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8009fec:	e7e1      	b.n	8009fb2 <_strtol_l.constprop.0+0x8a>
 8009fee:	1c53      	adds	r3, r2, #1
 8009ff0:	d108      	bne.n	800a004 <_strtol_l.constprop.0+0xdc>
 8009ff2:	2322      	movs	r3, #34	@ 0x22
 8009ff4:	f8ce 3000 	str.w	r3, [lr]
 8009ff8:	4660      	mov	r0, ip
 8009ffa:	f1b8 0f00 	cmp.w	r8, #0
 8009ffe:	d0a0      	beq.n	8009f42 <_strtol_l.constprop.0+0x1a>
 800a000:	1e69      	subs	r1, r5, #1
 800a002:	e006      	b.n	800a012 <_strtol_l.constprop.0+0xea>
 800a004:	b106      	cbz	r6, 800a008 <_strtol_l.constprop.0+0xe0>
 800a006:	4240      	negs	r0, r0
 800a008:	f1b8 0f00 	cmp.w	r8, #0
 800a00c:	d099      	beq.n	8009f42 <_strtol_l.constprop.0+0x1a>
 800a00e:	2a00      	cmp	r2, #0
 800a010:	d1f6      	bne.n	800a000 <_strtol_l.constprop.0+0xd8>
 800a012:	f8c8 1000 	str.w	r1, [r8]
 800a016:	e794      	b.n	8009f42 <_strtol_l.constprop.0+0x1a>
 800a018:	0800b3b1 	.word	0x0800b3b1

0800a01c <_strtol_r>:
 800a01c:	f7ff bf84 	b.w	8009f28 <_strtol_l.constprop.0>

0800a020 <__ssputs_r>:
 800a020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a024:	688e      	ldr	r6, [r1, #8]
 800a026:	461f      	mov	r7, r3
 800a028:	42be      	cmp	r6, r7
 800a02a:	680b      	ldr	r3, [r1, #0]
 800a02c:	4682      	mov	sl, r0
 800a02e:	460c      	mov	r4, r1
 800a030:	4690      	mov	r8, r2
 800a032:	d82d      	bhi.n	800a090 <__ssputs_r+0x70>
 800a034:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a038:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a03c:	d026      	beq.n	800a08c <__ssputs_r+0x6c>
 800a03e:	6965      	ldr	r5, [r4, #20]
 800a040:	6909      	ldr	r1, [r1, #16]
 800a042:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a046:	eba3 0901 	sub.w	r9, r3, r1
 800a04a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a04e:	1c7b      	adds	r3, r7, #1
 800a050:	444b      	add	r3, r9
 800a052:	106d      	asrs	r5, r5, #1
 800a054:	429d      	cmp	r5, r3
 800a056:	bf38      	it	cc
 800a058:	461d      	movcc	r5, r3
 800a05a:	0553      	lsls	r3, r2, #21
 800a05c:	d527      	bpl.n	800a0ae <__ssputs_r+0x8e>
 800a05e:	4629      	mov	r1, r5
 800a060:	f7fe fc70 	bl	8008944 <_malloc_r>
 800a064:	4606      	mov	r6, r0
 800a066:	b360      	cbz	r0, 800a0c2 <__ssputs_r+0xa2>
 800a068:	6921      	ldr	r1, [r4, #16]
 800a06a:	464a      	mov	r2, r9
 800a06c:	f7fd fe01 	bl	8007c72 <memcpy>
 800a070:	89a3      	ldrh	r3, [r4, #12]
 800a072:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a076:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a07a:	81a3      	strh	r3, [r4, #12]
 800a07c:	6126      	str	r6, [r4, #16]
 800a07e:	6165      	str	r5, [r4, #20]
 800a080:	444e      	add	r6, r9
 800a082:	eba5 0509 	sub.w	r5, r5, r9
 800a086:	6026      	str	r6, [r4, #0]
 800a088:	60a5      	str	r5, [r4, #8]
 800a08a:	463e      	mov	r6, r7
 800a08c:	42be      	cmp	r6, r7
 800a08e:	d900      	bls.n	800a092 <__ssputs_r+0x72>
 800a090:	463e      	mov	r6, r7
 800a092:	6820      	ldr	r0, [r4, #0]
 800a094:	4632      	mov	r2, r6
 800a096:	4641      	mov	r1, r8
 800a098:	f000 fb6a 	bl	800a770 <memmove>
 800a09c:	68a3      	ldr	r3, [r4, #8]
 800a09e:	1b9b      	subs	r3, r3, r6
 800a0a0:	60a3      	str	r3, [r4, #8]
 800a0a2:	6823      	ldr	r3, [r4, #0]
 800a0a4:	4433      	add	r3, r6
 800a0a6:	6023      	str	r3, [r4, #0]
 800a0a8:	2000      	movs	r0, #0
 800a0aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0ae:	462a      	mov	r2, r5
 800a0b0:	f000 ff43 	bl	800af3a <_realloc_r>
 800a0b4:	4606      	mov	r6, r0
 800a0b6:	2800      	cmp	r0, #0
 800a0b8:	d1e0      	bne.n	800a07c <__ssputs_r+0x5c>
 800a0ba:	6921      	ldr	r1, [r4, #16]
 800a0bc:	4650      	mov	r0, sl
 800a0be:	f7fe fbcd 	bl	800885c <_free_r>
 800a0c2:	230c      	movs	r3, #12
 800a0c4:	f8ca 3000 	str.w	r3, [sl]
 800a0c8:	89a3      	ldrh	r3, [r4, #12]
 800a0ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0ce:	81a3      	strh	r3, [r4, #12]
 800a0d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a0d4:	e7e9      	b.n	800a0aa <__ssputs_r+0x8a>
	...

0800a0d8 <_svfiprintf_r>:
 800a0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0dc:	4698      	mov	r8, r3
 800a0de:	898b      	ldrh	r3, [r1, #12]
 800a0e0:	061b      	lsls	r3, r3, #24
 800a0e2:	b09d      	sub	sp, #116	@ 0x74
 800a0e4:	4607      	mov	r7, r0
 800a0e6:	460d      	mov	r5, r1
 800a0e8:	4614      	mov	r4, r2
 800a0ea:	d510      	bpl.n	800a10e <_svfiprintf_r+0x36>
 800a0ec:	690b      	ldr	r3, [r1, #16]
 800a0ee:	b973      	cbnz	r3, 800a10e <_svfiprintf_r+0x36>
 800a0f0:	2140      	movs	r1, #64	@ 0x40
 800a0f2:	f7fe fc27 	bl	8008944 <_malloc_r>
 800a0f6:	6028      	str	r0, [r5, #0]
 800a0f8:	6128      	str	r0, [r5, #16]
 800a0fa:	b930      	cbnz	r0, 800a10a <_svfiprintf_r+0x32>
 800a0fc:	230c      	movs	r3, #12
 800a0fe:	603b      	str	r3, [r7, #0]
 800a100:	f04f 30ff 	mov.w	r0, #4294967295
 800a104:	b01d      	add	sp, #116	@ 0x74
 800a106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a10a:	2340      	movs	r3, #64	@ 0x40
 800a10c:	616b      	str	r3, [r5, #20]
 800a10e:	2300      	movs	r3, #0
 800a110:	9309      	str	r3, [sp, #36]	@ 0x24
 800a112:	2320      	movs	r3, #32
 800a114:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a118:	f8cd 800c 	str.w	r8, [sp, #12]
 800a11c:	2330      	movs	r3, #48	@ 0x30
 800a11e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a2bc <_svfiprintf_r+0x1e4>
 800a122:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a126:	f04f 0901 	mov.w	r9, #1
 800a12a:	4623      	mov	r3, r4
 800a12c:	469a      	mov	sl, r3
 800a12e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a132:	b10a      	cbz	r2, 800a138 <_svfiprintf_r+0x60>
 800a134:	2a25      	cmp	r2, #37	@ 0x25
 800a136:	d1f9      	bne.n	800a12c <_svfiprintf_r+0x54>
 800a138:	ebba 0b04 	subs.w	fp, sl, r4
 800a13c:	d00b      	beq.n	800a156 <_svfiprintf_r+0x7e>
 800a13e:	465b      	mov	r3, fp
 800a140:	4622      	mov	r2, r4
 800a142:	4629      	mov	r1, r5
 800a144:	4638      	mov	r0, r7
 800a146:	f7ff ff6b 	bl	800a020 <__ssputs_r>
 800a14a:	3001      	adds	r0, #1
 800a14c:	f000 80a7 	beq.w	800a29e <_svfiprintf_r+0x1c6>
 800a150:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a152:	445a      	add	r2, fp
 800a154:	9209      	str	r2, [sp, #36]	@ 0x24
 800a156:	f89a 3000 	ldrb.w	r3, [sl]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	f000 809f 	beq.w	800a29e <_svfiprintf_r+0x1c6>
 800a160:	2300      	movs	r3, #0
 800a162:	f04f 32ff 	mov.w	r2, #4294967295
 800a166:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a16a:	f10a 0a01 	add.w	sl, sl, #1
 800a16e:	9304      	str	r3, [sp, #16]
 800a170:	9307      	str	r3, [sp, #28]
 800a172:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a176:	931a      	str	r3, [sp, #104]	@ 0x68
 800a178:	4654      	mov	r4, sl
 800a17a:	2205      	movs	r2, #5
 800a17c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a180:	484e      	ldr	r0, [pc, #312]	@ (800a2bc <_svfiprintf_r+0x1e4>)
 800a182:	f7f6 f8b5 	bl	80002f0 <memchr>
 800a186:	9a04      	ldr	r2, [sp, #16]
 800a188:	b9d8      	cbnz	r0, 800a1c2 <_svfiprintf_r+0xea>
 800a18a:	06d0      	lsls	r0, r2, #27
 800a18c:	bf44      	itt	mi
 800a18e:	2320      	movmi	r3, #32
 800a190:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a194:	0711      	lsls	r1, r2, #28
 800a196:	bf44      	itt	mi
 800a198:	232b      	movmi	r3, #43	@ 0x2b
 800a19a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a19e:	f89a 3000 	ldrb.w	r3, [sl]
 800a1a2:	2b2a      	cmp	r3, #42	@ 0x2a
 800a1a4:	d015      	beq.n	800a1d2 <_svfiprintf_r+0xfa>
 800a1a6:	9a07      	ldr	r2, [sp, #28]
 800a1a8:	4654      	mov	r4, sl
 800a1aa:	2000      	movs	r0, #0
 800a1ac:	f04f 0c0a 	mov.w	ip, #10
 800a1b0:	4621      	mov	r1, r4
 800a1b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1b6:	3b30      	subs	r3, #48	@ 0x30
 800a1b8:	2b09      	cmp	r3, #9
 800a1ba:	d94b      	bls.n	800a254 <_svfiprintf_r+0x17c>
 800a1bc:	b1b0      	cbz	r0, 800a1ec <_svfiprintf_r+0x114>
 800a1be:	9207      	str	r2, [sp, #28]
 800a1c0:	e014      	b.n	800a1ec <_svfiprintf_r+0x114>
 800a1c2:	eba0 0308 	sub.w	r3, r0, r8
 800a1c6:	fa09 f303 	lsl.w	r3, r9, r3
 800a1ca:	4313      	orrs	r3, r2
 800a1cc:	9304      	str	r3, [sp, #16]
 800a1ce:	46a2      	mov	sl, r4
 800a1d0:	e7d2      	b.n	800a178 <_svfiprintf_r+0xa0>
 800a1d2:	9b03      	ldr	r3, [sp, #12]
 800a1d4:	1d19      	adds	r1, r3, #4
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	9103      	str	r1, [sp, #12]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	bfbb      	ittet	lt
 800a1de:	425b      	neglt	r3, r3
 800a1e0:	f042 0202 	orrlt.w	r2, r2, #2
 800a1e4:	9307      	strge	r3, [sp, #28]
 800a1e6:	9307      	strlt	r3, [sp, #28]
 800a1e8:	bfb8      	it	lt
 800a1ea:	9204      	strlt	r2, [sp, #16]
 800a1ec:	7823      	ldrb	r3, [r4, #0]
 800a1ee:	2b2e      	cmp	r3, #46	@ 0x2e
 800a1f0:	d10a      	bne.n	800a208 <_svfiprintf_r+0x130>
 800a1f2:	7863      	ldrb	r3, [r4, #1]
 800a1f4:	2b2a      	cmp	r3, #42	@ 0x2a
 800a1f6:	d132      	bne.n	800a25e <_svfiprintf_r+0x186>
 800a1f8:	9b03      	ldr	r3, [sp, #12]
 800a1fa:	1d1a      	adds	r2, r3, #4
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	9203      	str	r2, [sp, #12]
 800a200:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a204:	3402      	adds	r4, #2
 800a206:	9305      	str	r3, [sp, #20]
 800a208:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a2cc <_svfiprintf_r+0x1f4>
 800a20c:	7821      	ldrb	r1, [r4, #0]
 800a20e:	2203      	movs	r2, #3
 800a210:	4650      	mov	r0, sl
 800a212:	f7f6 f86d 	bl	80002f0 <memchr>
 800a216:	b138      	cbz	r0, 800a228 <_svfiprintf_r+0x150>
 800a218:	9b04      	ldr	r3, [sp, #16]
 800a21a:	eba0 000a 	sub.w	r0, r0, sl
 800a21e:	2240      	movs	r2, #64	@ 0x40
 800a220:	4082      	lsls	r2, r0
 800a222:	4313      	orrs	r3, r2
 800a224:	3401      	adds	r4, #1
 800a226:	9304      	str	r3, [sp, #16]
 800a228:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a22c:	4824      	ldr	r0, [pc, #144]	@ (800a2c0 <_svfiprintf_r+0x1e8>)
 800a22e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a232:	2206      	movs	r2, #6
 800a234:	f7f6 f85c 	bl	80002f0 <memchr>
 800a238:	2800      	cmp	r0, #0
 800a23a:	d036      	beq.n	800a2aa <_svfiprintf_r+0x1d2>
 800a23c:	4b21      	ldr	r3, [pc, #132]	@ (800a2c4 <_svfiprintf_r+0x1ec>)
 800a23e:	bb1b      	cbnz	r3, 800a288 <_svfiprintf_r+0x1b0>
 800a240:	9b03      	ldr	r3, [sp, #12]
 800a242:	3307      	adds	r3, #7
 800a244:	f023 0307 	bic.w	r3, r3, #7
 800a248:	3308      	adds	r3, #8
 800a24a:	9303      	str	r3, [sp, #12]
 800a24c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a24e:	4433      	add	r3, r6
 800a250:	9309      	str	r3, [sp, #36]	@ 0x24
 800a252:	e76a      	b.n	800a12a <_svfiprintf_r+0x52>
 800a254:	fb0c 3202 	mla	r2, ip, r2, r3
 800a258:	460c      	mov	r4, r1
 800a25a:	2001      	movs	r0, #1
 800a25c:	e7a8      	b.n	800a1b0 <_svfiprintf_r+0xd8>
 800a25e:	2300      	movs	r3, #0
 800a260:	3401      	adds	r4, #1
 800a262:	9305      	str	r3, [sp, #20]
 800a264:	4619      	mov	r1, r3
 800a266:	f04f 0c0a 	mov.w	ip, #10
 800a26a:	4620      	mov	r0, r4
 800a26c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a270:	3a30      	subs	r2, #48	@ 0x30
 800a272:	2a09      	cmp	r2, #9
 800a274:	d903      	bls.n	800a27e <_svfiprintf_r+0x1a6>
 800a276:	2b00      	cmp	r3, #0
 800a278:	d0c6      	beq.n	800a208 <_svfiprintf_r+0x130>
 800a27a:	9105      	str	r1, [sp, #20]
 800a27c:	e7c4      	b.n	800a208 <_svfiprintf_r+0x130>
 800a27e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a282:	4604      	mov	r4, r0
 800a284:	2301      	movs	r3, #1
 800a286:	e7f0      	b.n	800a26a <_svfiprintf_r+0x192>
 800a288:	ab03      	add	r3, sp, #12
 800a28a:	9300      	str	r3, [sp, #0]
 800a28c:	462a      	mov	r2, r5
 800a28e:	4b0e      	ldr	r3, [pc, #56]	@ (800a2c8 <_svfiprintf_r+0x1f0>)
 800a290:	a904      	add	r1, sp, #16
 800a292:	4638      	mov	r0, r7
 800a294:	f7fc fc90 	bl	8006bb8 <_printf_float>
 800a298:	1c42      	adds	r2, r0, #1
 800a29a:	4606      	mov	r6, r0
 800a29c:	d1d6      	bne.n	800a24c <_svfiprintf_r+0x174>
 800a29e:	89ab      	ldrh	r3, [r5, #12]
 800a2a0:	065b      	lsls	r3, r3, #25
 800a2a2:	f53f af2d 	bmi.w	800a100 <_svfiprintf_r+0x28>
 800a2a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a2a8:	e72c      	b.n	800a104 <_svfiprintf_r+0x2c>
 800a2aa:	ab03      	add	r3, sp, #12
 800a2ac:	9300      	str	r3, [sp, #0]
 800a2ae:	462a      	mov	r2, r5
 800a2b0:	4b05      	ldr	r3, [pc, #20]	@ (800a2c8 <_svfiprintf_r+0x1f0>)
 800a2b2:	a904      	add	r1, sp, #16
 800a2b4:	4638      	mov	r0, r7
 800a2b6:	f7fc ff07 	bl	80070c8 <_printf_i>
 800a2ba:	e7ed      	b.n	800a298 <_svfiprintf_r+0x1c0>
 800a2bc:	0800b4b1 	.word	0x0800b4b1
 800a2c0:	0800b4bb 	.word	0x0800b4bb
 800a2c4:	08006bb9 	.word	0x08006bb9
 800a2c8:	0800a021 	.word	0x0800a021
 800a2cc:	0800b4b7 	.word	0x0800b4b7

0800a2d0 <__sfputc_r>:
 800a2d0:	6893      	ldr	r3, [r2, #8]
 800a2d2:	3b01      	subs	r3, #1
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	b410      	push	{r4}
 800a2d8:	6093      	str	r3, [r2, #8]
 800a2da:	da08      	bge.n	800a2ee <__sfputc_r+0x1e>
 800a2dc:	6994      	ldr	r4, [r2, #24]
 800a2de:	42a3      	cmp	r3, r4
 800a2e0:	db01      	blt.n	800a2e6 <__sfputc_r+0x16>
 800a2e2:	290a      	cmp	r1, #10
 800a2e4:	d103      	bne.n	800a2ee <__sfputc_r+0x1e>
 800a2e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2ea:	f7fd bbae 	b.w	8007a4a <__swbuf_r>
 800a2ee:	6813      	ldr	r3, [r2, #0]
 800a2f0:	1c58      	adds	r0, r3, #1
 800a2f2:	6010      	str	r0, [r2, #0]
 800a2f4:	7019      	strb	r1, [r3, #0]
 800a2f6:	4608      	mov	r0, r1
 800a2f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2fc:	4770      	bx	lr

0800a2fe <__sfputs_r>:
 800a2fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a300:	4606      	mov	r6, r0
 800a302:	460f      	mov	r7, r1
 800a304:	4614      	mov	r4, r2
 800a306:	18d5      	adds	r5, r2, r3
 800a308:	42ac      	cmp	r4, r5
 800a30a:	d101      	bne.n	800a310 <__sfputs_r+0x12>
 800a30c:	2000      	movs	r0, #0
 800a30e:	e007      	b.n	800a320 <__sfputs_r+0x22>
 800a310:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a314:	463a      	mov	r2, r7
 800a316:	4630      	mov	r0, r6
 800a318:	f7ff ffda 	bl	800a2d0 <__sfputc_r>
 800a31c:	1c43      	adds	r3, r0, #1
 800a31e:	d1f3      	bne.n	800a308 <__sfputs_r+0xa>
 800a320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a324 <_vfiprintf_r>:
 800a324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a328:	460d      	mov	r5, r1
 800a32a:	b09d      	sub	sp, #116	@ 0x74
 800a32c:	4614      	mov	r4, r2
 800a32e:	4698      	mov	r8, r3
 800a330:	4606      	mov	r6, r0
 800a332:	b118      	cbz	r0, 800a33c <_vfiprintf_r+0x18>
 800a334:	6a03      	ldr	r3, [r0, #32]
 800a336:	b90b      	cbnz	r3, 800a33c <_vfiprintf_r+0x18>
 800a338:	f7fd fa7e 	bl	8007838 <__sinit>
 800a33c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a33e:	07d9      	lsls	r1, r3, #31
 800a340:	d405      	bmi.n	800a34e <_vfiprintf_r+0x2a>
 800a342:	89ab      	ldrh	r3, [r5, #12]
 800a344:	059a      	lsls	r2, r3, #22
 800a346:	d402      	bmi.n	800a34e <_vfiprintf_r+0x2a>
 800a348:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a34a:	f7fd fc90 	bl	8007c6e <__retarget_lock_acquire_recursive>
 800a34e:	89ab      	ldrh	r3, [r5, #12]
 800a350:	071b      	lsls	r3, r3, #28
 800a352:	d501      	bpl.n	800a358 <_vfiprintf_r+0x34>
 800a354:	692b      	ldr	r3, [r5, #16]
 800a356:	b99b      	cbnz	r3, 800a380 <_vfiprintf_r+0x5c>
 800a358:	4629      	mov	r1, r5
 800a35a:	4630      	mov	r0, r6
 800a35c:	f7fd fbb4 	bl	8007ac8 <__swsetup_r>
 800a360:	b170      	cbz	r0, 800a380 <_vfiprintf_r+0x5c>
 800a362:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a364:	07dc      	lsls	r4, r3, #31
 800a366:	d504      	bpl.n	800a372 <_vfiprintf_r+0x4e>
 800a368:	f04f 30ff 	mov.w	r0, #4294967295
 800a36c:	b01d      	add	sp, #116	@ 0x74
 800a36e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a372:	89ab      	ldrh	r3, [r5, #12]
 800a374:	0598      	lsls	r0, r3, #22
 800a376:	d4f7      	bmi.n	800a368 <_vfiprintf_r+0x44>
 800a378:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a37a:	f7fd fc79 	bl	8007c70 <__retarget_lock_release_recursive>
 800a37e:	e7f3      	b.n	800a368 <_vfiprintf_r+0x44>
 800a380:	2300      	movs	r3, #0
 800a382:	9309      	str	r3, [sp, #36]	@ 0x24
 800a384:	2320      	movs	r3, #32
 800a386:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a38a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a38e:	2330      	movs	r3, #48	@ 0x30
 800a390:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a540 <_vfiprintf_r+0x21c>
 800a394:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a398:	f04f 0901 	mov.w	r9, #1
 800a39c:	4623      	mov	r3, r4
 800a39e:	469a      	mov	sl, r3
 800a3a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3a4:	b10a      	cbz	r2, 800a3aa <_vfiprintf_r+0x86>
 800a3a6:	2a25      	cmp	r2, #37	@ 0x25
 800a3a8:	d1f9      	bne.n	800a39e <_vfiprintf_r+0x7a>
 800a3aa:	ebba 0b04 	subs.w	fp, sl, r4
 800a3ae:	d00b      	beq.n	800a3c8 <_vfiprintf_r+0xa4>
 800a3b0:	465b      	mov	r3, fp
 800a3b2:	4622      	mov	r2, r4
 800a3b4:	4629      	mov	r1, r5
 800a3b6:	4630      	mov	r0, r6
 800a3b8:	f7ff ffa1 	bl	800a2fe <__sfputs_r>
 800a3bc:	3001      	adds	r0, #1
 800a3be:	f000 80a7 	beq.w	800a510 <_vfiprintf_r+0x1ec>
 800a3c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a3c4:	445a      	add	r2, fp
 800a3c6:	9209      	str	r2, [sp, #36]	@ 0x24
 800a3c8:	f89a 3000 	ldrb.w	r3, [sl]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	f000 809f 	beq.w	800a510 <_vfiprintf_r+0x1ec>
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	f04f 32ff 	mov.w	r2, #4294967295
 800a3d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3dc:	f10a 0a01 	add.w	sl, sl, #1
 800a3e0:	9304      	str	r3, [sp, #16]
 800a3e2:	9307      	str	r3, [sp, #28]
 800a3e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a3e8:	931a      	str	r3, [sp, #104]	@ 0x68
 800a3ea:	4654      	mov	r4, sl
 800a3ec:	2205      	movs	r2, #5
 800a3ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3f2:	4853      	ldr	r0, [pc, #332]	@ (800a540 <_vfiprintf_r+0x21c>)
 800a3f4:	f7f5 ff7c 	bl	80002f0 <memchr>
 800a3f8:	9a04      	ldr	r2, [sp, #16]
 800a3fa:	b9d8      	cbnz	r0, 800a434 <_vfiprintf_r+0x110>
 800a3fc:	06d1      	lsls	r1, r2, #27
 800a3fe:	bf44      	itt	mi
 800a400:	2320      	movmi	r3, #32
 800a402:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a406:	0713      	lsls	r3, r2, #28
 800a408:	bf44      	itt	mi
 800a40a:	232b      	movmi	r3, #43	@ 0x2b
 800a40c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a410:	f89a 3000 	ldrb.w	r3, [sl]
 800a414:	2b2a      	cmp	r3, #42	@ 0x2a
 800a416:	d015      	beq.n	800a444 <_vfiprintf_r+0x120>
 800a418:	9a07      	ldr	r2, [sp, #28]
 800a41a:	4654      	mov	r4, sl
 800a41c:	2000      	movs	r0, #0
 800a41e:	f04f 0c0a 	mov.w	ip, #10
 800a422:	4621      	mov	r1, r4
 800a424:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a428:	3b30      	subs	r3, #48	@ 0x30
 800a42a:	2b09      	cmp	r3, #9
 800a42c:	d94b      	bls.n	800a4c6 <_vfiprintf_r+0x1a2>
 800a42e:	b1b0      	cbz	r0, 800a45e <_vfiprintf_r+0x13a>
 800a430:	9207      	str	r2, [sp, #28]
 800a432:	e014      	b.n	800a45e <_vfiprintf_r+0x13a>
 800a434:	eba0 0308 	sub.w	r3, r0, r8
 800a438:	fa09 f303 	lsl.w	r3, r9, r3
 800a43c:	4313      	orrs	r3, r2
 800a43e:	9304      	str	r3, [sp, #16]
 800a440:	46a2      	mov	sl, r4
 800a442:	e7d2      	b.n	800a3ea <_vfiprintf_r+0xc6>
 800a444:	9b03      	ldr	r3, [sp, #12]
 800a446:	1d19      	adds	r1, r3, #4
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	9103      	str	r1, [sp, #12]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	bfbb      	ittet	lt
 800a450:	425b      	neglt	r3, r3
 800a452:	f042 0202 	orrlt.w	r2, r2, #2
 800a456:	9307      	strge	r3, [sp, #28]
 800a458:	9307      	strlt	r3, [sp, #28]
 800a45a:	bfb8      	it	lt
 800a45c:	9204      	strlt	r2, [sp, #16]
 800a45e:	7823      	ldrb	r3, [r4, #0]
 800a460:	2b2e      	cmp	r3, #46	@ 0x2e
 800a462:	d10a      	bne.n	800a47a <_vfiprintf_r+0x156>
 800a464:	7863      	ldrb	r3, [r4, #1]
 800a466:	2b2a      	cmp	r3, #42	@ 0x2a
 800a468:	d132      	bne.n	800a4d0 <_vfiprintf_r+0x1ac>
 800a46a:	9b03      	ldr	r3, [sp, #12]
 800a46c:	1d1a      	adds	r2, r3, #4
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	9203      	str	r2, [sp, #12]
 800a472:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a476:	3402      	adds	r4, #2
 800a478:	9305      	str	r3, [sp, #20]
 800a47a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a550 <_vfiprintf_r+0x22c>
 800a47e:	7821      	ldrb	r1, [r4, #0]
 800a480:	2203      	movs	r2, #3
 800a482:	4650      	mov	r0, sl
 800a484:	f7f5 ff34 	bl	80002f0 <memchr>
 800a488:	b138      	cbz	r0, 800a49a <_vfiprintf_r+0x176>
 800a48a:	9b04      	ldr	r3, [sp, #16]
 800a48c:	eba0 000a 	sub.w	r0, r0, sl
 800a490:	2240      	movs	r2, #64	@ 0x40
 800a492:	4082      	lsls	r2, r0
 800a494:	4313      	orrs	r3, r2
 800a496:	3401      	adds	r4, #1
 800a498:	9304      	str	r3, [sp, #16]
 800a49a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a49e:	4829      	ldr	r0, [pc, #164]	@ (800a544 <_vfiprintf_r+0x220>)
 800a4a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a4a4:	2206      	movs	r2, #6
 800a4a6:	f7f5 ff23 	bl	80002f0 <memchr>
 800a4aa:	2800      	cmp	r0, #0
 800a4ac:	d03f      	beq.n	800a52e <_vfiprintf_r+0x20a>
 800a4ae:	4b26      	ldr	r3, [pc, #152]	@ (800a548 <_vfiprintf_r+0x224>)
 800a4b0:	bb1b      	cbnz	r3, 800a4fa <_vfiprintf_r+0x1d6>
 800a4b2:	9b03      	ldr	r3, [sp, #12]
 800a4b4:	3307      	adds	r3, #7
 800a4b6:	f023 0307 	bic.w	r3, r3, #7
 800a4ba:	3308      	adds	r3, #8
 800a4bc:	9303      	str	r3, [sp, #12]
 800a4be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4c0:	443b      	add	r3, r7
 800a4c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4c4:	e76a      	b.n	800a39c <_vfiprintf_r+0x78>
 800a4c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4ca:	460c      	mov	r4, r1
 800a4cc:	2001      	movs	r0, #1
 800a4ce:	e7a8      	b.n	800a422 <_vfiprintf_r+0xfe>
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	3401      	adds	r4, #1
 800a4d4:	9305      	str	r3, [sp, #20]
 800a4d6:	4619      	mov	r1, r3
 800a4d8:	f04f 0c0a 	mov.w	ip, #10
 800a4dc:	4620      	mov	r0, r4
 800a4de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4e2:	3a30      	subs	r2, #48	@ 0x30
 800a4e4:	2a09      	cmp	r2, #9
 800a4e6:	d903      	bls.n	800a4f0 <_vfiprintf_r+0x1cc>
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d0c6      	beq.n	800a47a <_vfiprintf_r+0x156>
 800a4ec:	9105      	str	r1, [sp, #20]
 800a4ee:	e7c4      	b.n	800a47a <_vfiprintf_r+0x156>
 800a4f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4f4:	4604      	mov	r4, r0
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	e7f0      	b.n	800a4dc <_vfiprintf_r+0x1b8>
 800a4fa:	ab03      	add	r3, sp, #12
 800a4fc:	9300      	str	r3, [sp, #0]
 800a4fe:	462a      	mov	r2, r5
 800a500:	4b12      	ldr	r3, [pc, #72]	@ (800a54c <_vfiprintf_r+0x228>)
 800a502:	a904      	add	r1, sp, #16
 800a504:	4630      	mov	r0, r6
 800a506:	f7fc fb57 	bl	8006bb8 <_printf_float>
 800a50a:	4607      	mov	r7, r0
 800a50c:	1c78      	adds	r0, r7, #1
 800a50e:	d1d6      	bne.n	800a4be <_vfiprintf_r+0x19a>
 800a510:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a512:	07d9      	lsls	r1, r3, #31
 800a514:	d405      	bmi.n	800a522 <_vfiprintf_r+0x1fe>
 800a516:	89ab      	ldrh	r3, [r5, #12]
 800a518:	059a      	lsls	r2, r3, #22
 800a51a:	d402      	bmi.n	800a522 <_vfiprintf_r+0x1fe>
 800a51c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a51e:	f7fd fba7 	bl	8007c70 <__retarget_lock_release_recursive>
 800a522:	89ab      	ldrh	r3, [r5, #12]
 800a524:	065b      	lsls	r3, r3, #25
 800a526:	f53f af1f 	bmi.w	800a368 <_vfiprintf_r+0x44>
 800a52a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a52c:	e71e      	b.n	800a36c <_vfiprintf_r+0x48>
 800a52e:	ab03      	add	r3, sp, #12
 800a530:	9300      	str	r3, [sp, #0]
 800a532:	462a      	mov	r2, r5
 800a534:	4b05      	ldr	r3, [pc, #20]	@ (800a54c <_vfiprintf_r+0x228>)
 800a536:	a904      	add	r1, sp, #16
 800a538:	4630      	mov	r0, r6
 800a53a:	f7fc fdc5 	bl	80070c8 <_printf_i>
 800a53e:	e7e4      	b.n	800a50a <_vfiprintf_r+0x1e6>
 800a540:	0800b4b1 	.word	0x0800b4b1
 800a544:	0800b4bb 	.word	0x0800b4bb
 800a548:	08006bb9 	.word	0x08006bb9
 800a54c:	0800a2ff 	.word	0x0800a2ff
 800a550:	0800b4b7 	.word	0x0800b4b7

0800a554 <__sflush_r>:
 800a554:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a55c:	0716      	lsls	r6, r2, #28
 800a55e:	4605      	mov	r5, r0
 800a560:	460c      	mov	r4, r1
 800a562:	d454      	bmi.n	800a60e <__sflush_r+0xba>
 800a564:	684b      	ldr	r3, [r1, #4]
 800a566:	2b00      	cmp	r3, #0
 800a568:	dc02      	bgt.n	800a570 <__sflush_r+0x1c>
 800a56a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	dd48      	ble.n	800a602 <__sflush_r+0xae>
 800a570:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a572:	2e00      	cmp	r6, #0
 800a574:	d045      	beq.n	800a602 <__sflush_r+0xae>
 800a576:	2300      	movs	r3, #0
 800a578:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a57c:	682f      	ldr	r7, [r5, #0]
 800a57e:	6a21      	ldr	r1, [r4, #32]
 800a580:	602b      	str	r3, [r5, #0]
 800a582:	d030      	beq.n	800a5e6 <__sflush_r+0x92>
 800a584:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a586:	89a3      	ldrh	r3, [r4, #12]
 800a588:	0759      	lsls	r1, r3, #29
 800a58a:	d505      	bpl.n	800a598 <__sflush_r+0x44>
 800a58c:	6863      	ldr	r3, [r4, #4]
 800a58e:	1ad2      	subs	r2, r2, r3
 800a590:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a592:	b10b      	cbz	r3, 800a598 <__sflush_r+0x44>
 800a594:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a596:	1ad2      	subs	r2, r2, r3
 800a598:	2300      	movs	r3, #0
 800a59a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a59c:	6a21      	ldr	r1, [r4, #32]
 800a59e:	4628      	mov	r0, r5
 800a5a0:	47b0      	blx	r6
 800a5a2:	1c43      	adds	r3, r0, #1
 800a5a4:	89a3      	ldrh	r3, [r4, #12]
 800a5a6:	d106      	bne.n	800a5b6 <__sflush_r+0x62>
 800a5a8:	6829      	ldr	r1, [r5, #0]
 800a5aa:	291d      	cmp	r1, #29
 800a5ac:	d82b      	bhi.n	800a606 <__sflush_r+0xb2>
 800a5ae:	4a2a      	ldr	r2, [pc, #168]	@ (800a658 <__sflush_r+0x104>)
 800a5b0:	410a      	asrs	r2, r1
 800a5b2:	07d6      	lsls	r6, r2, #31
 800a5b4:	d427      	bmi.n	800a606 <__sflush_r+0xb2>
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	6062      	str	r2, [r4, #4]
 800a5ba:	04d9      	lsls	r1, r3, #19
 800a5bc:	6922      	ldr	r2, [r4, #16]
 800a5be:	6022      	str	r2, [r4, #0]
 800a5c0:	d504      	bpl.n	800a5cc <__sflush_r+0x78>
 800a5c2:	1c42      	adds	r2, r0, #1
 800a5c4:	d101      	bne.n	800a5ca <__sflush_r+0x76>
 800a5c6:	682b      	ldr	r3, [r5, #0]
 800a5c8:	b903      	cbnz	r3, 800a5cc <__sflush_r+0x78>
 800a5ca:	6560      	str	r0, [r4, #84]	@ 0x54
 800a5cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a5ce:	602f      	str	r7, [r5, #0]
 800a5d0:	b1b9      	cbz	r1, 800a602 <__sflush_r+0xae>
 800a5d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a5d6:	4299      	cmp	r1, r3
 800a5d8:	d002      	beq.n	800a5e0 <__sflush_r+0x8c>
 800a5da:	4628      	mov	r0, r5
 800a5dc:	f7fe f93e 	bl	800885c <_free_r>
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	6363      	str	r3, [r4, #52]	@ 0x34
 800a5e4:	e00d      	b.n	800a602 <__sflush_r+0xae>
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	4628      	mov	r0, r5
 800a5ea:	47b0      	blx	r6
 800a5ec:	4602      	mov	r2, r0
 800a5ee:	1c50      	adds	r0, r2, #1
 800a5f0:	d1c9      	bne.n	800a586 <__sflush_r+0x32>
 800a5f2:	682b      	ldr	r3, [r5, #0]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d0c6      	beq.n	800a586 <__sflush_r+0x32>
 800a5f8:	2b1d      	cmp	r3, #29
 800a5fa:	d001      	beq.n	800a600 <__sflush_r+0xac>
 800a5fc:	2b16      	cmp	r3, #22
 800a5fe:	d11e      	bne.n	800a63e <__sflush_r+0xea>
 800a600:	602f      	str	r7, [r5, #0]
 800a602:	2000      	movs	r0, #0
 800a604:	e022      	b.n	800a64c <__sflush_r+0xf8>
 800a606:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a60a:	b21b      	sxth	r3, r3
 800a60c:	e01b      	b.n	800a646 <__sflush_r+0xf2>
 800a60e:	690f      	ldr	r7, [r1, #16]
 800a610:	2f00      	cmp	r7, #0
 800a612:	d0f6      	beq.n	800a602 <__sflush_r+0xae>
 800a614:	0793      	lsls	r3, r2, #30
 800a616:	680e      	ldr	r6, [r1, #0]
 800a618:	bf08      	it	eq
 800a61a:	694b      	ldreq	r3, [r1, #20]
 800a61c:	600f      	str	r7, [r1, #0]
 800a61e:	bf18      	it	ne
 800a620:	2300      	movne	r3, #0
 800a622:	eba6 0807 	sub.w	r8, r6, r7
 800a626:	608b      	str	r3, [r1, #8]
 800a628:	f1b8 0f00 	cmp.w	r8, #0
 800a62c:	dde9      	ble.n	800a602 <__sflush_r+0xae>
 800a62e:	6a21      	ldr	r1, [r4, #32]
 800a630:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a632:	4643      	mov	r3, r8
 800a634:	463a      	mov	r2, r7
 800a636:	4628      	mov	r0, r5
 800a638:	47b0      	blx	r6
 800a63a:	2800      	cmp	r0, #0
 800a63c:	dc08      	bgt.n	800a650 <__sflush_r+0xfc>
 800a63e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a642:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a646:	81a3      	strh	r3, [r4, #12]
 800a648:	f04f 30ff 	mov.w	r0, #4294967295
 800a64c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a650:	4407      	add	r7, r0
 800a652:	eba8 0800 	sub.w	r8, r8, r0
 800a656:	e7e7      	b.n	800a628 <__sflush_r+0xd4>
 800a658:	dfbffffe 	.word	0xdfbffffe

0800a65c <_fflush_r>:
 800a65c:	b538      	push	{r3, r4, r5, lr}
 800a65e:	690b      	ldr	r3, [r1, #16]
 800a660:	4605      	mov	r5, r0
 800a662:	460c      	mov	r4, r1
 800a664:	b913      	cbnz	r3, 800a66c <_fflush_r+0x10>
 800a666:	2500      	movs	r5, #0
 800a668:	4628      	mov	r0, r5
 800a66a:	bd38      	pop	{r3, r4, r5, pc}
 800a66c:	b118      	cbz	r0, 800a676 <_fflush_r+0x1a>
 800a66e:	6a03      	ldr	r3, [r0, #32]
 800a670:	b90b      	cbnz	r3, 800a676 <_fflush_r+0x1a>
 800a672:	f7fd f8e1 	bl	8007838 <__sinit>
 800a676:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d0f3      	beq.n	800a666 <_fflush_r+0xa>
 800a67e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a680:	07d0      	lsls	r0, r2, #31
 800a682:	d404      	bmi.n	800a68e <_fflush_r+0x32>
 800a684:	0599      	lsls	r1, r3, #22
 800a686:	d402      	bmi.n	800a68e <_fflush_r+0x32>
 800a688:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a68a:	f7fd faf0 	bl	8007c6e <__retarget_lock_acquire_recursive>
 800a68e:	4628      	mov	r0, r5
 800a690:	4621      	mov	r1, r4
 800a692:	f7ff ff5f 	bl	800a554 <__sflush_r>
 800a696:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a698:	07da      	lsls	r2, r3, #31
 800a69a:	4605      	mov	r5, r0
 800a69c:	d4e4      	bmi.n	800a668 <_fflush_r+0xc>
 800a69e:	89a3      	ldrh	r3, [r4, #12]
 800a6a0:	059b      	lsls	r3, r3, #22
 800a6a2:	d4e1      	bmi.n	800a668 <_fflush_r+0xc>
 800a6a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a6a6:	f7fd fae3 	bl	8007c70 <__retarget_lock_release_recursive>
 800a6aa:	e7dd      	b.n	800a668 <_fflush_r+0xc>

0800a6ac <__swhatbuf_r>:
 800a6ac:	b570      	push	{r4, r5, r6, lr}
 800a6ae:	460c      	mov	r4, r1
 800a6b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6b4:	2900      	cmp	r1, #0
 800a6b6:	b096      	sub	sp, #88	@ 0x58
 800a6b8:	4615      	mov	r5, r2
 800a6ba:	461e      	mov	r6, r3
 800a6bc:	da0d      	bge.n	800a6da <__swhatbuf_r+0x2e>
 800a6be:	89a3      	ldrh	r3, [r4, #12]
 800a6c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a6c4:	f04f 0100 	mov.w	r1, #0
 800a6c8:	bf14      	ite	ne
 800a6ca:	2340      	movne	r3, #64	@ 0x40
 800a6cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a6d0:	2000      	movs	r0, #0
 800a6d2:	6031      	str	r1, [r6, #0]
 800a6d4:	602b      	str	r3, [r5, #0]
 800a6d6:	b016      	add	sp, #88	@ 0x58
 800a6d8:	bd70      	pop	{r4, r5, r6, pc}
 800a6da:	466a      	mov	r2, sp
 800a6dc:	f000 f874 	bl	800a7c8 <_fstat_r>
 800a6e0:	2800      	cmp	r0, #0
 800a6e2:	dbec      	blt.n	800a6be <__swhatbuf_r+0x12>
 800a6e4:	9901      	ldr	r1, [sp, #4]
 800a6e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a6ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a6ee:	4259      	negs	r1, r3
 800a6f0:	4159      	adcs	r1, r3
 800a6f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a6f6:	e7eb      	b.n	800a6d0 <__swhatbuf_r+0x24>

0800a6f8 <__smakebuf_r>:
 800a6f8:	898b      	ldrh	r3, [r1, #12]
 800a6fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a6fc:	079d      	lsls	r5, r3, #30
 800a6fe:	4606      	mov	r6, r0
 800a700:	460c      	mov	r4, r1
 800a702:	d507      	bpl.n	800a714 <__smakebuf_r+0x1c>
 800a704:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a708:	6023      	str	r3, [r4, #0]
 800a70a:	6123      	str	r3, [r4, #16]
 800a70c:	2301      	movs	r3, #1
 800a70e:	6163      	str	r3, [r4, #20]
 800a710:	b003      	add	sp, #12
 800a712:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a714:	ab01      	add	r3, sp, #4
 800a716:	466a      	mov	r2, sp
 800a718:	f7ff ffc8 	bl	800a6ac <__swhatbuf_r>
 800a71c:	9f00      	ldr	r7, [sp, #0]
 800a71e:	4605      	mov	r5, r0
 800a720:	4639      	mov	r1, r7
 800a722:	4630      	mov	r0, r6
 800a724:	f7fe f90e 	bl	8008944 <_malloc_r>
 800a728:	b948      	cbnz	r0, 800a73e <__smakebuf_r+0x46>
 800a72a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a72e:	059a      	lsls	r2, r3, #22
 800a730:	d4ee      	bmi.n	800a710 <__smakebuf_r+0x18>
 800a732:	f023 0303 	bic.w	r3, r3, #3
 800a736:	f043 0302 	orr.w	r3, r3, #2
 800a73a:	81a3      	strh	r3, [r4, #12]
 800a73c:	e7e2      	b.n	800a704 <__smakebuf_r+0xc>
 800a73e:	89a3      	ldrh	r3, [r4, #12]
 800a740:	6020      	str	r0, [r4, #0]
 800a742:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a746:	81a3      	strh	r3, [r4, #12]
 800a748:	9b01      	ldr	r3, [sp, #4]
 800a74a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a74e:	b15b      	cbz	r3, 800a768 <__smakebuf_r+0x70>
 800a750:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a754:	4630      	mov	r0, r6
 800a756:	f000 f849 	bl	800a7ec <_isatty_r>
 800a75a:	b128      	cbz	r0, 800a768 <__smakebuf_r+0x70>
 800a75c:	89a3      	ldrh	r3, [r4, #12]
 800a75e:	f023 0303 	bic.w	r3, r3, #3
 800a762:	f043 0301 	orr.w	r3, r3, #1
 800a766:	81a3      	strh	r3, [r4, #12]
 800a768:	89a3      	ldrh	r3, [r4, #12]
 800a76a:	431d      	orrs	r5, r3
 800a76c:	81a5      	strh	r5, [r4, #12]
 800a76e:	e7cf      	b.n	800a710 <__smakebuf_r+0x18>

0800a770 <memmove>:
 800a770:	4288      	cmp	r0, r1
 800a772:	b510      	push	{r4, lr}
 800a774:	eb01 0402 	add.w	r4, r1, r2
 800a778:	d902      	bls.n	800a780 <memmove+0x10>
 800a77a:	4284      	cmp	r4, r0
 800a77c:	4623      	mov	r3, r4
 800a77e:	d807      	bhi.n	800a790 <memmove+0x20>
 800a780:	1e43      	subs	r3, r0, #1
 800a782:	42a1      	cmp	r1, r4
 800a784:	d008      	beq.n	800a798 <memmove+0x28>
 800a786:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a78a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a78e:	e7f8      	b.n	800a782 <memmove+0x12>
 800a790:	4402      	add	r2, r0
 800a792:	4601      	mov	r1, r0
 800a794:	428a      	cmp	r2, r1
 800a796:	d100      	bne.n	800a79a <memmove+0x2a>
 800a798:	bd10      	pop	{r4, pc}
 800a79a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a79e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a7a2:	e7f7      	b.n	800a794 <memmove+0x24>

0800a7a4 <strncmp>:
 800a7a4:	b510      	push	{r4, lr}
 800a7a6:	b16a      	cbz	r2, 800a7c4 <strncmp+0x20>
 800a7a8:	3901      	subs	r1, #1
 800a7aa:	1884      	adds	r4, r0, r2
 800a7ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7b0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	d103      	bne.n	800a7c0 <strncmp+0x1c>
 800a7b8:	42a0      	cmp	r0, r4
 800a7ba:	d001      	beq.n	800a7c0 <strncmp+0x1c>
 800a7bc:	2a00      	cmp	r2, #0
 800a7be:	d1f5      	bne.n	800a7ac <strncmp+0x8>
 800a7c0:	1ad0      	subs	r0, r2, r3
 800a7c2:	bd10      	pop	{r4, pc}
 800a7c4:	4610      	mov	r0, r2
 800a7c6:	e7fc      	b.n	800a7c2 <strncmp+0x1e>

0800a7c8 <_fstat_r>:
 800a7c8:	b538      	push	{r3, r4, r5, lr}
 800a7ca:	4d07      	ldr	r5, [pc, #28]	@ (800a7e8 <_fstat_r+0x20>)
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	4604      	mov	r4, r0
 800a7d0:	4608      	mov	r0, r1
 800a7d2:	4611      	mov	r1, r2
 800a7d4:	602b      	str	r3, [r5, #0]
 800a7d6:	f7f6 fb17 	bl	8000e08 <_fstat>
 800a7da:	1c43      	adds	r3, r0, #1
 800a7dc:	d102      	bne.n	800a7e4 <_fstat_r+0x1c>
 800a7de:	682b      	ldr	r3, [r5, #0]
 800a7e0:	b103      	cbz	r3, 800a7e4 <_fstat_r+0x1c>
 800a7e2:	6023      	str	r3, [r4, #0]
 800a7e4:	bd38      	pop	{r3, r4, r5, pc}
 800a7e6:	bf00      	nop
 800a7e8:	240044f0 	.word	0x240044f0

0800a7ec <_isatty_r>:
 800a7ec:	b538      	push	{r3, r4, r5, lr}
 800a7ee:	4d06      	ldr	r5, [pc, #24]	@ (800a808 <_isatty_r+0x1c>)
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	4604      	mov	r4, r0
 800a7f4:	4608      	mov	r0, r1
 800a7f6:	602b      	str	r3, [r5, #0]
 800a7f8:	f7f6 fb16 	bl	8000e28 <_isatty>
 800a7fc:	1c43      	adds	r3, r0, #1
 800a7fe:	d102      	bne.n	800a806 <_isatty_r+0x1a>
 800a800:	682b      	ldr	r3, [r5, #0]
 800a802:	b103      	cbz	r3, 800a806 <_isatty_r+0x1a>
 800a804:	6023      	str	r3, [r4, #0]
 800a806:	bd38      	pop	{r3, r4, r5, pc}
 800a808:	240044f0 	.word	0x240044f0

0800a80c <_sbrk_r>:
 800a80c:	b538      	push	{r3, r4, r5, lr}
 800a80e:	4d06      	ldr	r5, [pc, #24]	@ (800a828 <_sbrk_r+0x1c>)
 800a810:	2300      	movs	r3, #0
 800a812:	4604      	mov	r4, r0
 800a814:	4608      	mov	r0, r1
 800a816:	602b      	str	r3, [r5, #0]
 800a818:	f7f6 fb1e 	bl	8000e58 <_sbrk>
 800a81c:	1c43      	adds	r3, r0, #1
 800a81e:	d102      	bne.n	800a826 <_sbrk_r+0x1a>
 800a820:	682b      	ldr	r3, [r5, #0]
 800a822:	b103      	cbz	r3, 800a826 <_sbrk_r+0x1a>
 800a824:	6023      	str	r3, [r4, #0]
 800a826:	bd38      	pop	{r3, r4, r5, pc}
 800a828:	240044f0 	.word	0x240044f0
 800a82c:	00000000 	.word	0x00000000

0800a830 <nan>:
 800a830:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a838 <nan+0x8>
 800a834:	4770      	bx	lr
 800a836:	bf00      	nop
 800a838:	00000000 	.word	0x00000000
 800a83c:	7ff80000 	.word	0x7ff80000

0800a840 <__assert_func>:
 800a840:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a842:	4614      	mov	r4, r2
 800a844:	461a      	mov	r2, r3
 800a846:	4b09      	ldr	r3, [pc, #36]	@ (800a86c <__assert_func+0x2c>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	4605      	mov	r5, r0
 800a84c:	68d8      	ldr	r0, [r3, #12]
 800a84e:	b954      	cbnz	r4, 800a866 <__assert_func+0x26>
 800a850:	4b07      	ldr	r3, [pc, #28]	@ (800a870 <__assert_func+0x30>)
 800a852:	461c      	mov	r4, r3
 800a854:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a858:	9100      	str	r1, [sp, #0]
 800a85a:	462b      	mov	r3, r5
 800a85c:	4905      	ldr	r1, [pc, #20]	@ (800a874 <__assert_func+0x34>)
 800a85e:	f000 fba7 	bl	800afb0 <fiprintf>
 800a862:	f000 fbb7 	bl	800afd4 <abort>
 800a866:	4b04      	ldr	r3, [pc, #16]	@ (800a878 <__assert_func+0x38>)
 800a868:	e7f4      	b.n	800a854 <__assert_func+0x14>
 800a86a:	bf00      	nop
 800a86c:	24000020 	.word	0x24000020
 800a870:	0800b505 	.word	0x0800b505
 800a874:	0800b4d7 	.word	0x0800b4d7
 800a878:	0800b4ca 	.word	0x0800b4ca

0800a87c <_calloc_r>:
 800a87c:	b570      	push	{r4, r5, r6, lr}
 800a87e:	fba1 5402 	umull	r5, r4, r1, r2
 800a882:	b93c      	cbnz	r4, 800a894 <_calloc_r+0x18>
 800a884:	4629      	mov	r1, r5
 800a886:	f7fe f85d 	bl	8008944 <_malloc_r>
 800a88a:	4606      	mov	r6, r0
 800a88c:	b928      	cbnz	r0, 800a89a <_calloc_r+0x1e>
 800a88e:	2600      	movs	r6, #0
 800a890:	4630      	mov	r0, r6
 800a892:	bd70      	pop	{r4, r5, r6, pc}
 800a894:	220c      	movs	r2, #12
 800a896:	6002      	str	r2, [r0, #0]
 800a898:	e7f9      	b.n	800a88e <_calloc_r+0x12>
 800a89a:	462a      	mov	r2, r5
 800a89c:	4621      	mov	r1, r4
 800a89e:	f7fd f969 	bl	8007b74 <memset>
 800a8a2:	e7f5      	b.n	800a890 <_calloc_r+0x14>

0800a8a4 <rshift>:
 800a8a4:	6903      	ldr	r3, [r0, #16]
 800a8a6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a8aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a8ae:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a8b2:	f100 0414 	add.w	r4, r0, #20
 800a8b6:	dd45      	ble.n	800a944 <rshift+0xa0>
 800a8b8:	f011 011f 	ands.w	r1, r1, #31
 800a8bc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a8c0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a8c4:	d10c      	bne.n	800a8e0 <rshift+0x3c>
 800a8c6:	f100 0710 	add.w	r7, r0, #16
 800a8ca:	4629      	mov	r1, r5
 800a8cc:	42b1      	cmp	r1, r6
 800a8ce:	d334      	bcc.n	800a93a <rshift+0x96>
 800a8d0:	1a9b      	subs	r3, r3, r2
 800a8d2:	009b      	lsls	r3, r3, #2
 800a8d4:	1eea      	subs	r2, r5, #3
 800a8d6:	4296      	cmp	r6, r2
 800a8d8:	bf38      	it	cc
 800a8da:	2300      	movcc	r3, #0
 800a8dc:	4423      	add	r3, r4
 800a8de:	e015      	b.n	800a90c <rshift+0x68>
 800a8e0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a8e4:	f1c1 0820 	rsb	r8, r1, #32
 800a8e8:	40cf      	lsrs	r7, r1
 800a8ea:	f105 0e04 	add.w	lr, r5, #4
 800a8ee:	46a1      	mov	r9, r4
 800a8f0:	4576      	cmp	r6, lr
 800a8f2:	46f4      	mov	ip, lr
 800a8f4:	d815      	bhi.n	800a922 <rshift+0x7e>
 800a8f6:	1a9a      	subs	r2, r3, r2
 800a8f8:	0092      	lsls	r2, r2, #2
 800a8fa:	3a04      	subs	r2, #4
 800a8fc:	3501      	adds	r5, #1
 800a8fe:	42ae      	cmp	r6, r5
 800a900:	bf38      	it	cc
 800a902:	2200      	movcc	r2, #0
 800a904:	18a3      	adds	r3, r4, r2
 800a906:	50a7      	str	r7, [r4, r2]
 800a908:	b107      	cbz	r7, 800a90c <rshift+0x68>
 800a90a:	3304      	adds	r3, #4
 800a90c:	1b1a      	subs	r2, r3, r4
 800a90e:	42a3      	cmp	r3, r4
 800a910:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a914:	bf08      	it	eq
 800a916:	2300      	moveq	r3, #0
 800a918:	6102      	str	r2, [r0, #16]
 800a91a:	bf08      	it	eq
 800a91c:	6143      	streq	r3, [r0, #20]
 800a91e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a922:	f8dc c000 	ldr.w	ip, [ip]
 800a926:	fa0c fc08 	lsl.w	ip, ip, r8
 800a92a:	ea4c 0707 	orr.w	r7, ip, r7
 800a92e:	f849 7b04 	str.w	r7, [r9], #4
 800a932:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a936:	40cf      	lsrs	r7, r1
 800a938:	e7da      	b.n	800a8f0 <rshift+0x4c>
 800a93a:	f851 cb04 	ldr.w	ip, [r1], #4
 800a93e:	f847 cf04 	str.w	ip, [r7, #4]!
 800a942:	e7c3      	b.n	800a8cc <rshift+0x28>
 800a944:	4623      	mov	r3, r4
 800a946:	e7e1      	b.n	800a90c <rshift+0x68>

0800a948 <__hexdig_fun>:
 800a948:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a94c:	2b09      	cmp	r3, #9
 800a94e:	d802      	bhi.n	800a956 <__hexdig_fun+0xe>
 800a950:	3820      	subs	r0, #32
 800a952:	b2c0      	uxtb	r0, r0
 800a954:	4770      	bx	lr
 800a956:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a95a:	2b05      	cmp	r3, #5
 800a95c:	d801      	bhi.n	800a962 <__hexdig_fun+0x1a>
 800a95e:	3847      	subs	r0, #71	@ 0x47
 800a960:	e7f7      	b.n	800a952 <__hexdig_fun+0xa>
 800a962:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a966:	2b05      	cmp	r3, #5
 800a968:	d801      	bhi.n	800a96e <__hexdig_fun+0x26>
 800a96a:	3827      	subs	r0, #39	@ 0x27
 800a96c:	e7f1      	b.n	800a952 <__hexdig_fun+0xa>
 800a96e:	2000      	movs	r0, #0
 800a970:	4770      	bx	lr
	...

0800a974 <__gethex>:
 800a974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a978:	b085      	sub	sp, #20
 800a97a:	468a      	mov	sl, r1
 800a97c:	9302      	str	r3, [sp, #8]
 800a97e:	680b      	ldr	r3, [r1, #0]
 800a980:	9001      	str	r0, [sp, #4]
 800a982:	4690      	mov	r8, r2
 800a984:	1c9c      	adds	r4, r3, #2
 800a986:	46a1      	mov	r9, r4
 800a988:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a98c:	2830      	cmp	r0, #48	@ 0x30
 800a98e:	d0fa      	beq.n	800a986 <__gethex+0x12>
 800a990:	eba9 0303 	sub.w	r3, r9, r3
 800a994:	f1a3 0b02 	sub.w	fp, r3, #2
 800a998:	f7ff ffd6 	bl	800a948 <__hexdig_fun>
 800a99c:	4605      	mov	r5, r0
 800a99e:	2800      	cmp	r0, #0
 800a9a0:	d168      	bne.n	800aa74 <__gethex+0x100>
 800a9a2:	49a0      	ldr	r1, [pc, #640]	@ (800ac24 <__gethex+0x2b0>)
 800a9a4:	2201      	movs	r2, #1
 800a9a6:	4648      	mov	r0, r9
 800a9a8:	f7ff fefc 	bl	800a7a4 <strncmp>
 800a9ac:	4607      	mov	r7, r0
 800a9ae:	2800      	cmp	r0, #0
 800a9b0:	d167      	bne.n	800aa82 <__gethex+0x10e>
 800a9b2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a9b6:	4626      	mov	r6, r4
 800a9b8:	f7ff ffc6 	bl	800a948 <__hexdig_fun>
 800a9bc:	2800      	cmp	r0, #0
 800a9be:	d062      	beq.n	800aa86 <__gethex+0x112>
 800a9c0:	4623      	mov	r3, r4
 800a9c2:	7818      	ldrb	r0, [r3, #0]
 800a9c4:	2830      	cmp	r0, #48	@ 0x30
 800a9c6:	4699      	mov	r9, r3
 800a9c8:	f103 0301 	add.w	r3, r3, #1
 800a9cc:	d0f9      	beq.n	800a9c2 <__gethex+0x4e>
 800a9ce:	f7ff ffbb 	bl	800a948 <__hexdig_fun>
 800a9d2:	fab0 f580 	clz	r5, r0
 800a9d6:	096d      	lsrs	r5, r5, #5
 800a9d8:	f04f 0b01 	mov.w	fp, #1
 800a9dc:	464a      	mov	r2, r9
 800a9de:	4616      	mov	r6, r2
 800a9e0:	3201      	adds	r2, #1
 800a9e2:	7830      	ldrb	r0, [r6, #0]
 800a9e4:	f7ff ffb0 	bl	800a948 <__hexdig_fun>
 800a9e8:	2800      	cmp	r0, #0
 800a9ea:	d1f8      	bne.n	800a9de <__gethex+0x6a>
 800a9ec:	498d      	ldr	r1, [pc, #564]	@ (800ac24 <__gethex+0x2b0>)
 800a9ee:	2201      	movs	r2, #1
 800a9f0:	4630      	mov	r0, r6
 800a9f2:	f7ff fed7 	bl	800a7a4 <strncmp>
 800a9f6:	2800      	cmp	r0, #0
 800a9f8:	d13f      	bne.n	800aa7a <__gethex+0x106>
 800a9fa:	b944      	cbnz	r4, 800aa0e <__gethex+0x9a>
 800a9fc:	1c74      	adds	r4, r6, #1
 800a9fe:	4622      	mov	r2, r4
 800aa00:	4616      	mov	r6, r2
 800aa02:	3201      	adds	r2, #1
 800aa04:	7830      	ldrb	r0, [r6, #0]
 800aa06:	f7ff ff9f 	bl	800a948 <__hexdig_fun>
 800aa0a:	2800      	cmp	r0, #0
 800aa0c:	d1f8      	bne.n	800aa00 <__gethex+0x8c>
 800aa0e:	1ba4      	subs	r4, r4, r6
 800aa10:	00a7      	lsls	r7, r4, #2
 800aa12:	7833      	ldrb	r3, [r6, #0]
 800aa14:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800aa18:	2b50      	cmp	r3, #80	@ 0x50
 800aa1a:	d13e      	bne.n	800aa9a <__gethex+0x126>
 800aa1c:	7873      	ldrb	r3, [r6, #1]
 800aa1e:	2b2b      	cmp	r3, #43	@ 0x2b
 800aa20:	d033      	beq.n	800aa8a <__gethex+0x116>
 800aa22:	2b2d      	cmp	r3, #45	@ 0x2d
 800aa24:	d034      	beq.n	800aa90 <__gethex+0x11c>
 800aa26:	1c71      	adds	r1, r6, #1
 800aa28:	2400      	movs	r4, #0
 800aa2a:	7808      	ldrb	r0, [r1, #0]
 800aa2c:	f7ff ff8c 	bl	800a948 <__hexdig_fun>
 800aa30:	1e43      	subs	r3, r0, #1
 800aa32:	b2db      	uxtb	r3, r3
 800aa34:	2b18      	cmp	r3, #24
 800aa36:	d830      	bhi.n	800aa9a <__gethex+0x126>
 800aa38:	f1a0 0210 	sub.w	r2, r0, #16
 800aa3c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800aa40:	f7ff ff82 	bl	800a948 <__hexdig_fun>
 800aa44:	f100 3cff 	add.w	ip, r0, #4294967295
 800aa48:	fa5f fc8c 	uxtb.w	ip, ip
 800aa4c:	f1bc 0f18 	cmp.w	ip, #24
 800aa50:	f04f 030a 	mov.w	r3, #10
 800aa54:	d91e      	bls.n	800aa94 <__gethex+0x120>
 800aa56:	b104      	cbz	r4, 800aa5a <__gethex+0xe6>
 800aa58:	4252      	negs	r2, r2
 800aa5a:	4417      	add	r7, r2
 800aa5c:	f8ca 1000 	str.w	r1, [sl]
 800aa60:	b1ed      	cbz	r5, 800aa9e <__gethex+0x12a>
 800aa62:	f1bb 0f00 	cmp.w	fp, #0
 800aa66:	bf0c      	ite	eq
 800aa68:	2506      	moveq	r5, #6
 800aa6a:	2500      	movne	r5, #0
 800aa6c:	4628      	mov	r0, r5
 800aa6e:	b005      	add	sp, #20
 800aa70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa74:	2500      	movs	r5, #0
 800aa76:	462c      	mov	r4, r5
 800aa78:	e7b0      	b.n	800a9dc <__gethex+0x68>
 800aa7a:	2c00      	cmp	r4, #0
 800aa7c:	d1c7      	bne.n	800aa0e <__gethex+0x9a>
 800aa7e:	4627      	mov	r7, r4
 800aa80:	e7c7      	b.n	800aa12 <__gethex+0x9e>
 800aa82:	464e      	mov	r6, r9
 800aa84:	462f      	mov	r7, r5
 800aa86:	2501      	movs	r5, #1
 800aa88:	e7c3      	b.n	800aa12 <__gethex+0x9e>
 800aa8a:	2400      	movs	r4, #0
 800aa8c:	1cb1      	adds	r1, r6, #2
 800aa8e:	e7cc      	b.n	800aa2a <__gethex+0xb6>
 800aa90:	2401      	movs	r4, #1
 800aa92:	e7fb      	b.n	800aa8c <__gethex+0x118>
 800aa94:	fb03 0002 	mla	r0, r3, r2, r0
 800aa98:	e7ce      	b.n	800aa38 <__gethex+0xc4>
 800aa9a:	4631      	mov	r1, r6
 800aa9c:	e7de      	b.n	800aa5c <__gethex+0xe8>
 800aa9e:	eba6 0309 	sub.w	r3, r6, r9
 800aaa2:	3b01      	subs	r3, #1
 800aaa4:	4629      	mov	r1, r5
 800aaa6:	2b07      	cmp	r3, #7
 800aaa8:	dc0a      	bgt.n	800aac0 <__gethex+0x14c>
 800aaaa:	9801      	ldr	r0, [sp, #4]
 800aaac:	f7fd ffd6 	bl	8008a5c <_Balloc>
 800aab0:	4604      	mov	r4, r0
 800aab2:	b940      	cbnz	r0, 800aac6 <__gethex+0x152>
 800aab4:	4b5c      	ldr	r3, [pc, #368]	@ (800ac28 <__gethex+0x2b4>)
 800aab6:	4602      	mov	r2, r0
 800aab8:	21e4      	movs	r1, #228	@ 0xe4
 800aaba:	485c      	ldr	r0, [pc, #368]	@ (800ac2c <__gethex+0x2b8>)
 800aabc:	f7ff fec0 	bl	800a840 <__assert_func>
 800aac0:	3101      	adds	r1, #1
 800aac2:	105b      	asrs	r3, r3, #1
 800aac4:	e7ef      	b.n	800aaa6 <__gethex+0x132>
 800aac6:	f100 0a14 	add.w	sl, r0, #20
 800aaca:	2300      	movs	r3, #0
 800aacc:	4655      	mov	r5, sl
 800aace:	469b      	mov	fp, r3
 800aad0:	45b1      	cmp	r9, r6
 800aad2:	d337      	bcc.n	800ab44 <__gethex+0x1d0>
 800aad4:	f845 bb04 	str.w	fp, [r5], #4
 800aad8:	eba5 050a 	sub.w	r5, r5, sl
 800aadc:	10ad      	asrs	r5, r5, #2
 800aade:	6125      	str	r5, [r4, #16]
 800aae0:	4658      	mov	r0, fp
 800aae2:	f7fe f8ad 	bl	8008c40 <__hi0bits>
 800aae6:	016d      	lsls	r5, r5, #5
 800aae8:	f8d8 6000 	ldr.w	r6, [r8]
 800aaec:	1a2d      	subs	r5, r5, r0
 800aaee:	42b5      	cmp	r5, r6
 800aaf0:	dd54      	ble.n	800ab9c <__gethex+0x228>
 800aaf2:	1bad      	subs	r5, r5, r6
 800aaf4:	4629      	mov	r1, r5
 800aaf6:	4620      	mov	r0, r4
 800aaf8:	f7fe fc3e 	bl	8009378 <__any_on>
 800aafc:	4681      	mov	r9, r0
 800aafe:	b178      	cbz	r0, 800ab20 <__gethex+0x1ac>
 800ab00:	1e6b      	subs	r3, r5, #1
 800ab02:	1159      	asrs	r1, r3, #5
 800ab04:	f003 021f 	and.w	r2, r3, #31
 800ab08:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ab0c:	f04f 0901 	mov.w	r9, #1
 800ab10:	fa09 f202 	lsl.w	r2, r9, r2
 800ab14:	420a      	tst	r2, r1
 800ab16:	d003      	beq.n	800ab20 <__gethex+0x1ac>
 800ab18:	454b      	cmp	r3, r9
 800ab1a:	dc36      	bgt.n	800ab8a <__gethex+0x216>
 800ab1c:	f04f 0902 	mov.w	r9, #2
 800ab20:	4629      	mov	r1, r5
 800ab22:	4620      	mov	r0, r4
 800ab24:	f7ff febe 	bl	800a8a4 <rshift>
 800ab28:	442f      	add	r7, r5
 800ab2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ab2e:	42bb      	cmp	r3, r7
 800ab30:	da42      	bge.n	800abb8 <__gethex+0x244>
 800ab32:	9801      	ldr	r0, [sp, #4]
 800ab34:	4621      	mov	r1, r4
 800ab36:	f7fd ffd1 	bl	8008adc <_Bfree>
 800ab3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	6013      	str	r3, [r2, #0]
 800ab40:	25a3      	movs	r5, #163	@ 0xa3
 800ab42:	e793      	b.n	800aa6c <__gethex+0xf8>
 800ab44:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ab48:	2a2e      	cmp	r2, #46	@ 0x2e
 800ab4a:	d012      	beq.n	800ab72 <__gethex+0x1fe>
 800ab4c:	2b20      	cmp	r3, #32
 800ab4e:	d104      	bne.n	800ab5a <__gethex+0x1e6>
 800ab50:	f845 bb04 	str.w	fp, [r5], #4
 800ab54:	f04f 0b00 	mov.w	fp, #0
 800ab58:	465b      	mov	r3, fp
 800ab5a:	7830      	ldrb	r0, [r6, #0]
 800ab5c:	9303      	str	r3, [sp, #12]
 800ab5e:	f7ff fef3 	bl	800a948 <__hexdig_fun>
 800ab62:	9b03      	ldr	r3, [sp, #12]
 800ab64:	f000 000f 	and.w	r0, r0, #15
 800ab68:	4098      	lsls	r0, r3
 800ab6a:	ea4b 0b00 	orr.w	fp, fp, r0
 800ab6e:	3304      	adds	r3, #4
 800ab70:	e7ae      	b.n	800aad0 <__gethex+0x15c>
 800ab72:	45b1      	cmp	r9, r6
 800ab74:	d8ea      	bhi.n	800ab4c <__gethex+0x1d8>
 800ab76:	492b      	ldr	r1, [pc, #172]	@ (800ac24 <__gethex+0x2b0>)
 800ab78:	9303      	str	r3, [sp, #12]
 800ab7a:	2201      	movs	r2, #1
 800ab7c:	4630      	mov	r0, r6
 800ab7e:	f7ff fe11 	bl	800a7a4 <strncmp>
 800ab82:	9b03      	ldr	r3, [sp, #12]
 800ab84:	2800      	cmp	r0, #0
 800ab86:	d1e1      	bne.n	800ab4c <__gethex+0x1d8>
 800ab88:	e7a2      	b.n	800aad0 <__gethex+0x15c>
 800ab8a:	1ea9      	subs	r1, r5, #2
 800ab8c:	4620      	mov	r0, r4
 800ab8e:	f7fe fbf3 	bl	8009378 <__any_on>
 800ab92:	2800      	cmp	r0, #0
 800ab94:	d0c2      	beq.n	800ab1c <__gethex+0x1a8>
 800ab96:	f04f 0903 	mov.w	r9, #3
 800ab9a:	e7c1      	b.n	800ab20 <__gethex+0x1ac>
 800ab9c:	da09      	bge.n	800abb2 <__gethex+0x23e>
 800ab9e:	1b75      	subs	r5, r6, r5
 800aba0:	4621      	mov	r1, r4
 800aba2:	9801      	ldr	r0, [sp, #4]
 800aba4:	462a      	mov	r2, r5
 800aba6:	f7fe f9b1 	bl	8008f0c <__lshift>
 800abaa:	1b7f      	subs	r7, r7, r5
 800abac:	4604      	mov	r4, r0
 800abae:	f100 0a14 	add.w	sl, r0, #20
 800abb2:	f04f 0900 	mov.w	r9, #0
 800abb6:	e7b8      	b.n	800ab2a <__gethex+0x1b6>
 800abb8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800abbc:	42bd      	cmp	r5, r7
 800abbe:	dd6f      	ble.n	800aca0 <__gethex+0x32c>
 800abc0:	1bed      	subs	r5, r5, r7
 800abc2:	42ae      	cmp	r6, r5
 800abc4:	dc34      	bgt.n	800ac30 <__gethex+0x2bc>
 800abc6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800abca:	2b02      	cmp	r3, #2
 800abcc:	d022      	beq.n	800ac14 <__gethex+0x2a0>
 800abce:	2b03      	cmp	r3, #3
 800abd0:	d024      	beq.n	800ac1c <__gethex+0x2a8>
 800abd2:	2b01      	cmp	r3, #1
 800abd4:	d115      	bne.n	800ac02 <__gethex+0x28e>
 800abd6:	42ae      	cmp	r6, r5
 800abd8:	d113      	bne.n	800ac02 <__gethex+0x28e>
 800abda:	2e01      	cmp	r6, #1
 800abdc:	d10b      	bne.n	800abf6 <__gethex+0x282>
 800abde:	9a02      	ldr	r2, [sp, #8]
 800abe0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800abe4:	6013      	str	r3, [r2, #0]
 800abe6:	2301      	movs	r3, #1
 800abe8:	6123      	str	r3, [r4, #16]
 800abea:	f8ca 3000 	str.w	r3, [sl]
 800abee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800abf0:	2562      	movs	r5, #98	@ 0x62
 800abf2:	601c      	str	r4, [r3, #0]
 800abf4:	e73a      	b.n	800aa6c <__gethex+0xf8>
 800abf6:	1e71      	subs	r1, r6, #1
 800abf8:	4620      	mov	r0, r4
 800abfa:	f7fe fbbd 	bl	8009378 <__any_on>
 800abfe:	2800      	cmp	r0, #0
 800ac00:	d1ed      	bne.n	800abde <__gethex+0x26a>
 800ac02:	9801      	ldr	r0, [sp, #4]
 800ac04:	4621      	mov	r1, r4
 800ac06:	f7fd ff69 	bl	8008adc <_Bfree>
 800ac0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	6013      	str	r3, [r2, #0]
 800ac10:	2550      	movs	r5, #80	@ 0x50
 800ac12:	e72b      	b.n	800aa6c <__gethex+0xf8>
 800ac14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d1f3      	bne.n	800ac02 <__gethex+0x28e>
 800ac1a:	e7e0      	b.n	800abde <__gethex+0x26a>
 800ac1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d1dd      	bne.n	800abde <__gethex+0x26a>
 800ac22:	e7ee      	b.n	800ac02 <__gethex+0x28e>
 800ac24:	0800b358 	.word	0x0800b358
 800ac28:	0800b1f1 	.word	0x0800b1f1
 800ac2c:	0800b506 	.word	0x0800b506
 800ac30:	1e6f      	subs	r7, r5, #1
 800ac32:	f1b9 0f00 	cmp.w	r9, #0
 800ac36:	d130      	bne.n	800ac9a <__gethex+0x326>
 800ac38:	b127      	cbz	r7, 800ac44 <__gethex+0x2d0>
 800ac3a:	4639      	mov	r1, r7
 800ac3c:	4620      	mov	r0, r4
 800ac3e:	f7fe fb9b 	bl	8009378 <__any_on>
 800ac42:	4681      	mov	r9, r0
 800ac44:	117a      	asrs	r2, r7, #5
 800ac46:	2301      	movs	r3, #1
 800ac48:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ac4c:	f007 071f 	and.w	r7, r7, #31
 800ac50:	40bb      	lsls	r3, r7
 800ac52:	4213      	tst	r3, r2
 800ac54:	4629      	mov	r1, r5
 800ac56:	4620      	mov	r0, r4
 800ac58:	bf18      	it	ne
 800ac5a:	f049 0902 	orrne.w	r9, r9, #2
 800ac5e:	f7ff fe21 	bl	800a8a4 <rshift>
 800ac62:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ac66:	1b76      	subs	r6, r6, r5
 800ac68:	2502      	movs	r5, #2
 800ac6a:	f1b9 0f00 	cmp.w	r9, #0
 800ac6e:	d047      	beq.n	800ad00 <__gethex+0x38c>
 800ac70:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ac74:	2b02      	cmp	r3, #2
 800ac76:	d015      	beq.n	800aca4 <__gethex+0x330>
 800ac78:	2b03      	cmp	r3, #3
 800ac7a:	d017      	beq.n	800acac <__gethex+0x338>
 800ac7c:	2b01      	cmp	r3, #1
 800ac7e:	d109      	bne.n	800ac94 <__gethex+0x320>
 800ac80:	f019 0f02 	tst.w	r9, #2
 800ac84:	d006      	beq.n	800ac94 <__gethex+0x320>
 800ac86:	f8da 3000 	ldr.w	r3, [sl]
 800ac8a:	ea49 0903 	orr.w	r9, r9, r3
 800ac8e:	f019 0f01 	tst.w	r9, #1
 800ac92:	d10e      	bne.n	800acb2 <__gethex+0x33e>
 800ac94:	f045 0510 	orr.w	r5, r5, #16
 800ac98:	e032      	b.n	800ad00 <__gethex+0x38c>
 800ac9a:	f04f 0901 	mov.w	r9, #1
 800ac9e:	e7d1      	b.n	800ac44 <__gethex+0x2d0>
 800aca0:	2501      	movs	r5, #1
 800aca2:	e7e2      	b.n	800ac6a <__gethex+0x2f6>
 800aca4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aca6:	f1c3 0301 	rsb	r3, r3, #1
 800acaa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800acac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d0f0      	beq.n	800ac94 <__gethex+0x320>
 800acb2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800acb6:	f104 0314 	add.w	r3, r4, #20
 800acba:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800acbe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800acc2:	f04f 0c00 	mov.w	ip, #0
 800acc6:	4618      	mov	r0, r3
 800acc8:	f853 2b04 	ldr.w	r2, [r3], #4
 800accc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800acd0:	d01b      	beq.n	800ad0a <__gethex+0x396>
 800acd2:	3201      	adds	r2, #1
 800acd4:	6002      	str	r2, [r0, #0]
 800acd6:	2d02      	cmp	r5, #2
 800acd8:	f104 0314 	add.w	r3, r4, #20
 800acdc:	d13c      	bne.n	800ad58 <__gethex+0x3e4>
 800acde:	f8d8 2000 	ldr.w	r2, [r8]
 800ace2:	3a01      	subs	r2, #1
 800ace4:	42b2      	cmp	r2, r6
 800ace6:	d109      	bne.n	800acfc <__gethex+0x388>
 800ace8:	1171      	asrs	r1, r6, #5
 800acea:	2201      	movs	r2, #1
 800acec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800acf0:	f006 061f 	and.w	r6, r6, #31
 800acf4:	fa02 f606 	lsl.w	r6, r2, r6
 800acf8:	421e      	tst	r6, r3
 800acfa:	d13a      	bne.n	800ad72 <__gethex+0x3fe>
 800acfc:	f045 0520 	orr.w	r5, r5, #32
 800ad00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad02:	601c      	str	r4, [r3, #0]
 800ad04:	9b02      	ldr	r3, [sp, #8]
 800ad06:	601f      	str	r7, [r3, #0]
 800ad08:	e6b0      	b.n	800aa6c <__gethex+0xf8>
 800ad0a:	4299      	cmp	r1, r3
 800ad0c:	f843 cc04 	str.w	ip, [r3, #-4]
 800ad10:	d8d9      	bhi.n	800acc6 <__gethex+0x352>
 800ad12:	68a3      	ldr	r3, [r4, #8]
 800ad14:	459b      	cmp	fp, r3
 800ad16:	db17      	blt.n	800ad48 <__gethex+0x3d4>
 800ad18:	6861      	ldr	r1, [r4, #4]
 800ad1a:	9801      	ldr	r0, [sp, #4]
 800ad1c:	3101      	adds	r1, #1
 800ad1e:	f7fd fe9d 	bl	8008a5c <_Balloc>
 800ad22:	4681      	mov	r9, r0
 800ad24:	b918      	cbnz	r0, 800ad2e <__gethex+0x3ba>
 800ad26:	4b1a      	ldr	r3, [pc, #104]	@ (800ad90 <__gethex+0x41c>)
 800ad28:	4602      	mov	r2, r0
 800ad2a:	2184      	movs	r1, #132	@ 0x84
 800ad2c:	e6c5      	b.n	800aaba <__gethex+0x146>
 800ad2e:	6922      	ldr	r2, [r4, #16]
 800ad30:	3202      	adds	r2, #2
 800ad32:	f104 010c 	add.w	r1, r4, #12
 800ad36:	0092      	lsls	r2, r2, #2
 800ad38:	300c      	adds	r0, #12
 800ad3a:	f7fc ff9a 	bl	8007c72 <memcpy>
 800ad3e:	4621      	mov	r1, r4
 800ad40:	9801      	ldr	r0, [sp, #4]
 800ad42:	f7fd fecb 	bl	8008adc <_Bfree>
 800ad46:	464c      	mov	r4, r9
 800ad48:	6923      	ldr	r3, [r4, #16]
 800ad4a:	1c5a      	adds	r2, r3, #1
 800ad4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ad50:	6122      	str	r2, [r4, #16]
 800ad52:	2201      	movs	r2, #1
 800ad54:	615a      	str	r2, [r3, #20]
 800ad56:	e7be      	b.n	800acd6 <__gethex+0x362>
 800ad58:	6922      	ldr	r2, [r4, #16]
 800ad5a:	455a      	cmp	r2, fp
 800ad5c:	dd0b      	ble.n	800ad76 <__gethex+0x402>
 800ad5e:	2101      	movs	r1, #1
 800ad60:	4620      	mov	r0, r4
 800ad62:	f7ff fd9f 	bl	800a8a4 <rshift>
 800ad66:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ad6a:	3701      	adds	r7, #1
 800ad6c:	42bb      	cmp	r3, r7
 800ad6e:	f6ff aee0 	blt.w	800ab32 <__gethex+0x1be>
 800ad72:	2501      	movs	r5, #1
 800ad74:	e7c2      	b.n	800acfc <__gethex+0x388>
 800ad76:	f016 061f 	ands.w	r6, r6, #31
 800ad7a:	d0fa      	beq.n	800ad72 <__gethex+0x3fe>
 800ad7c:	4453      	add	r3, sl
 800ad7e:	f1c6 0620 	rsb	r6, r6, #32
 800ad82:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ad86:	f7fd ff5b 	bl	8008c40 <__hi0bits>
 800ad8a:	42b0      	cmp	r0, r6
 800ad8c:	dbe7      	blt.n	800ad5e <__gethex+0x3ea>
 800ad8e:	e7f0      	b.n	800ad72 <__gethex+0x3fe>
 800ad90:	0800b1f1 	.word	0x0800b1f1

0800ad94 <L_shift>:
 800ad94:	f1c2 0208 	rsb	r2, r2, #8
 800ad98:	0092      	lsls	r2, r2, #2
 800ad9a:	b570      	push	{r4, r5, r6, lr}
 800ad9c:	f1c2 0620 	rsb	r6, r2, #32
 800ada0:	6843      	ldr	r3, [r0, #4]
 800ada2:	6804      	ldr	r4, [r0, #0]
 800ada4:	fa03 f506 	lsl.w	r5, r3, r6
 800ada8:	432c      	orrs	r4, r5
 800adaa:	40d3      	lsrs	r3, r2
 800adac:	6004      	str	r4, [r0, #0]
 800adae:	f840 3f04 	str.w	r3, [r0, #4]!
 800adb2:	4288      	cmp	r0, r1
 800adb4:	d3f4      	bcc.n	800ada0 <L_shift+0xc>
 800adb6:	bd70      	pop	{r4, r5, r6, pc}

0800adb8 <__match>:
 800adb8:	b530      	push	{r4, r5, lr}
 800adba:	6803      	ldr	r3, [r0, #0]
 800adbc:	3301      	adds	r3, #1
 800adbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800adc2:	b914      	cbnz	r4, 800adca <__match+0x12>
 800adc4:	6003      	str	r3, [r0, #0]
 800adc6:	2001      	movs	r0, #1
 800adc8:	bd30      	pop	{r4, r5, pc}
 800adca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800adce:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800add2:	2d19      	cmp	r5, #25
 800add4:	bf98      	it	ls
 800add6:	3220      	addls	r2, #32
 800add8:	42a2      	cmp	r2, r4
 800adda:	d0f0      	beq.n	800adbe <__match+0x6>
 800addc:	2000      	movs	r0, #0
 800adde:	e7f3      	b.n	800adc8 <__match+0x10>

0800ade0 <__hexnan>:
 800ade0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ade4:	680b      	ldr	r3, [r1, #0]
 800ade6:	6801      	ldr	r1, [r0, #0]
 800ade8:	115e      	asrs	r6, r3, #5
 800adea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800adee:	f013 031f 	ands.w	r3, r3, #31
 800adf2:	b087      	sub	sp, #28
 800adf4:	bf18      	it	ne
 800adf6:	3604      	addne	r6, #4
 800adf8:	2500      	movs	r5, #0
 800adfa:	1f37      	subs	r7, r6, #4
 800adfc:	4682      	mov	sl, r0
 800adfe:	4690      	mov	r8, r2
 800ae00:	9301      	str	r3, [sp, #4]
 800ae02:	f846 5c04 	str.w	r5, [r6, #-4]
 800ae06:	46b9      	mov	r9, r7
 800ae08:	463c      	mov	r4, r7
 800ae0a:	9502      	str	r5, [sp, #8]
 800ae0c:	46ab      	mov	fp, r5
 800ae0e:	784a      	ldrb	r2, [r1, #1]
 800ae10:	1c4b      	adds	r3, r1, #1
 800ae12:	9303      	str	r3, [sp, #12]
 800ae14:	b342      	cbz	r2, 800ae68 <__hexnan+0x88>
 800ae16:	4610      	mov	r0, r2
 800ae18:	9105      	str	r1, [sp, #20]
 800ae1a:	9204      	str	r2, [sp, #16]
 800ae1c:	f7ff fd94 	bl	800a948 <__hexdig_fun>
 800ae20:	2800      	cmp	r0, #0
 800ae22:	d151      	bne.n	800aec8 <__hexnan+0xe8>
 800ae24:	9a04      	ldr	r2, [sp, #16]
 800ae26:	9905      	ldr	r1, [sp, #20]
 800ae28:	2a20      	cmp	r2, #32
 800ae2a:	d818      	bhi.n	800ae5e <__hexnan+0x7e>
 800ae2c:	9b02      	ldr	r3, [sp, #8]
 800ae2e:	459b      	cmp	fp, r3
 800ae30:	dd13      	ble.n	800ae5a <__hexnan+0x7a>
 800ae32:	454c      	cmp	r4, r9
 800ae34:	d206      	bcs.n	800ae44 <__hexnan+0x64>
 800ae36:	2d07      	cmp	r5, #7
 800ae38:	dc04      	bgt.n	800ae44 <__hexnan+0x64>
 800ae3a:	462a      	mov	r2, r5
 800ae3c:	4649      	mov	r1, r9
 800ae3e:	4620      	mov	r0, r4
 800ae40:	f7ff ffa8 	bl	800ad94 <L_shift>
 800ae44:	4544      	cmp	r4, r8
 800ae46:	d952      	bls.n	800aeee <__hexnan+0x10e>
 800ae48:	2300      	movs	r3, #0
 800ae4a:	f1a4 0904 	sub.w	r9, r4, #4
 800ae4e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ae52:	f8cd b008 	str.w	fp, [sp, #8]
 800ae56:	464c      	mov	r4, r9
 800ae58:	461d      	mov	r5, r3
 800ae5a:	9903      	ldr	r1, [sp, #12]
 800ae5c:	e7d7      	b.n	800ae0e <__hexnan+0x2e>
 800ae5e:	2a29      	cmp	r2, #41	@ 0x29
 800ae60:	d157      	bne.n	800af12 <__hexnan+0x132>
 800ae62:	3102      	adds	r1, #2
 800ae64:	f8ca 1000 	str.w	r1, [sl]
 800ae68:	f1bb 0f00 	cmp.w	fp, #0
 800ae6c:	d051      	beq.n	800af12 <__hexnan+0x132>
 800ae6e:	454c      	cmp	r4, r9
 800ae70:	d206      	bcs.n	800ae80 <__hexnan+0xa0>
 800ae72:	2d07      	cmp	r5, #7
 800ae74:	dc04      	bgt.n	800ae80 <__hexnan+0xa0>
 800ae76:	462a      	mov	r2, r5
 800ae78:	4649      	mov	r1, r9
 800ae7a:	4620      	mov	r0, r4
 800ae7c:	f7ff ff8a 	bl	800ad94 <L_shift>
 800ae80:	4544      	cmp	r4, r8
 800ae82:	d936      	bls.n	800aef2 <__hexnan+0x112>
 800ae84:	f1a8 0204 	sub.w	r2, r8, #4
 800ae88:	4623      	mov	r3, r4
 800ae8a:	f853 1b04 	ldr.w	r1, [r3], #4
 800ae8e:	f842 1f04 	str.w	r1, [r2, #4]!
 800ae92:	429f      	cmp	r7, r3
 800ae94:	d2f9      	bcs.n	800ae8a <__hexnan+0xaa>
 800ae96:	1b3b      	subs	r3, r7, r4
 800ae98:	f023 0303 	bic.w	r3, r3, #3
 800ae9c:	3304      	adds	r3, #4
 800ae9e:	3401      	adds	r4, #1
 800aea0:	3e03      	subs	r6, #3
 800aea2:	42b4      	cmp	r4, r6
 800aea4:	bf88      	it	hi
 800aea6:	2304      	movhi	r3, #4
 800aea8:	4443      	add	r3, r8
 800aeaa:	2200      	movs	r2, #0
 800aeac:	f843 2b04 	str.w	r2, [r3], #4
 800aeb0:	429f      	cmp	r7, r3
 800aeb2:	d2fb      	bcs.n	800aeac <__hexnan+0xcc>
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	b91b      	cbnz	r3, 800aec0 <__hexnan+0xe0>
 800aeb8:	4547      	cmp	r7, r8
 800aeba:	d128      	bne.n	800af0e <__hexnan+0x12e>
 800aebc:	2301      	movs	r3, #1
 800aebe:	603b      	str	r3, [r7, #0]
 800aec0:	2005      	movs	r0, #5
 800aec2:	b007      	add	sp, #28
 800aec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aec8:	3501      	adds	r5, #1
 800aeca:	2d08      	cmp	r5, #8
 800aecc:	f10b 0b01 	add.w	fp, fp, #1
 800aed0:	dd06      	ble.n	800aee0 <__hexnan+0x100>
 800aed2:	4544      	cmp	r4, r8
 800aed4:	d9c1      	bls.n	800ae5a <__hexnan+0x7a>
 800aed6:	2300      	movs	r3, #0
 800aed8:	f844 3c04 	str.w	r3, [r4, #-4]
 800aedc:	2501      	movs	r5, #1
 800aede:	3c04      	subs	r4, #4
 800aee0:	6822      	ldr	r2, [r4, #0]
 800aee2:	f000 000f 	and.w	r0, r0, #15
 800aee6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800aeea:	6020      	str	r0, [r4, #0]
 800aeec:	e7b5      	b.n	800ae5a <__hexnan+0x7a>
 800aeee:	2508      	movs	r5, #8
 800aef0:	e7b3      	b.n	800ae5a <__hexnan+0x7a>
 800aef2:	9b01      	ldr	r3, [sp, #4]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d0dd      	beq.n	800aeb4 <__hexnan+0xd4>
 800aef8:	f1c3 0320 	rsb	r3, r3, #32
 800aefc:	f04f 32ff 	mov.w	r2, #4294967295
 800af00:	40da      	lsrs	r2, r3
 800af02:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800af06:	4013      	ands	r3, r2
 800af08:	f846 3c04 	str.w	r3, [r6, #-4]
 800af0c:	e7d2      	b.n	800aeb4 <__hexnan+0xd4>
 800af0e:	3f04      	subs	r7, #4
 800af10:	e7d0      	b.n	800aeb4 <__hexnan+0xd4>
 800af12:	2004      	movs	r0, #4
 800af14:	e7d5      	b.n	800aec2 <__hexnan+0xe2>

0800af16 <__ascii_mbtowc>:
 800af16:	b082      	sub	sp, #8
 800af18:	b901      	cbnz	r1, 800af1c <__ascii_mbtowc+0x6>
 800af1a:	a901      	add	r1, sp, #4
 800af1c:	b142      	cbz	r2, 800af30 <__ascii_mbtowc+0x1a>
 800af1e:	b14b      	cbz	r3, 800af34 <__ascii_mbtowc+0x1e>
 800af20:	7813      	ldrb	r3, [r2, #0]
 800af22:	600b      	str	r3, [r1, #0]
 800af24:	7812      	ldrb	r2, [r2, #0]
 800af26:	1e10      	subs	r0, r2, #0
 800af28:	bf18      	it	ne
 800af2a:	2001      	movne	r0, #1
 800af2c:	b002      	add	sp, #8
 800af2e:	4770      	bx	lr
 800af30:	4610      	mov	r0, r2
 800af32:	e7fb      	b.n	800af2c <__ascii_mbtowc+0x16>
 800af34:	f06f 0001 	mvn.w	r0, #1
 800af38:	e7f8      	b.n	800af2c <__ascii_mbtowc+0x16>

0800af3a <_realloc_r>:
 800af3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af3e:	4680      	mov	r8, r0
 800af40:	4615      	mov	r5, r2
 800af42:	460c      	mov	r4, r1
 800af44:	b921      	cbnz	r1, 800af50 <_realloc_r+0x16>
 800af46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af4a:	4611      	mov	r1, r2
 800af4c:	f7fd bcfa 	b.w	8008944 <_malloc_r>
 800af50:	b92a      	cbnz	r2, 800af5e <_realloc_r+0x24>
 800af52:	f7fd fc83 	bl	800885c <_free_r>
 800af56:	2400      	movs	r4, #0
 800af58:	4620      	mov	r0, r4
 800af5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af5e:	f000 f840 	bl	800afe2 <_malloc_usable_size_r>
 800af62:	4285      	cmp	r5, r0
 800af64:	4606      	mov	r6, r0
 800af66:	d802      	bhi.n	800af6e <_realloc_r+0x34>
 800af68:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800af6c:	d8f4      	bhi.n	800af58 <_realloc_r+0x1e>
 800af6e:	4629      	mov	r1, r5
 800af70:	4640      	mov	r0, r8
 800af72:	f7fd fce7 	bl	8008944 <_malloc_r>
 800af76:	4607      	mov	r7, r0
 800af78:	2800      	cmp	r0, #0
 800af7a:	d0ec      	beq.n	800af56 <_realloc_r+0x1c>
 800af7c:	42b5      	cmp	r5, r6
 800af7e:	462a      	mov	r2, r5
 800af80:	4621      	mov	r1, r4
 800af82:	bf28      	it	cs
 800af84:	4632      	movcs	r2, r6
 800af86:	f7fc fe74 	bl	8007c72 <memcpy>
 800af8a:	4621      	mov	r1, r4
 800af8c:	4640      	mov	r0, r8
 800af8e:	f7fd fc65 	bl	800885c <_free_r>
 800af92:	463c      	mov	r4, r7
 800af94:	e7e0      	b.n	800af58 <_realloc_r+0x1e>

0800af96 <__ascii_wctomb>:
 800af96:	4603      	mov	r3, r0
 800af98:	4608      	mov	r0, r1
 800af9a:	b141      	cbz	r1, 800afae <__ascii_wctomb+0x18>
 800af9c:	2aff      	cmp	r2, #255	@ 0xff
 800af9e:	d904      	bls.n	800afaa <__ascii_wctomb+0x14>
 800afa0:	228a      	movs	r2, #138	@ 0x8a
 800afa2:	601a      	str	r2, [r3, #0]
 800afa4:	f04f 30ff 	mov.w	r0, #4294967295
 800afa8:	4770      	bx	lr
 800afaa:	700a      	strb	r2, [r1, #0]
 800afac:	2001      	movs	r0, #1
 800afae:	4770      	bx	lr

0800afb0 <fiprintf>:
 800afb0:	b40e      	push	{r1, r2, r3}
 800afb2:	b503      	push	{r0, r1, lr}
 800afb4:	4601      	mov	r1, r0
 800afb6:	ab03      	add	r3, sp, #12
 800afb8:	4805      	ldr	r0, [pc, #20]	@ (800afd0 <fiprintf+0x20>)
 800afba:	f853 2b04 	ldr.w	r2, [r3], #4
 800afbe:	6800      	ldr	r0, [r0, #0]
 800afc0:	9301      	str	r3, [sp, #4]
 800afc2:	f7ff f9af 	bl	800a324 <_vfiprintf_r>
 800afc6:	b002      	add	sp, #8
 800afc8:	f85d eb04 	ldr.w	lr, [sp], #4
 800afcc:	b003      	add	sp, #12
 800afce:	4770      	bx	lr
 800afd0:	24000020 	.word	0x24000020

0800afd4 <abort>:
 800afd4:	b508      	push	{r3, lr}
 800afd6:	2006      	movs	r0, #6
 800afd8:	f000 f834 	bl	800b044 <raise>
 800afdc:	2001      	movs	r0, #1
 800afde:	f7f5 fec3 	bl	8000d68 <_exit>

0800afe2 <_malloc_usable_size_r>:
 800afe2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800afe6:	1f18      	subs	r0, r3, #4
 800afe8:	2b00      	cmp	r3, #0
 800afea:	bfbc      	itt	lt
 800afec:	580b      	ldrlt	r3, [r1, r0]
 800afee:	18c0      	addlt	r0, r0, r3
 800aff0:	4770      	bx	lr

0800aff2 <_raise_r>:
 800aff2:	291f      	cmp	r1, #31
 800aff4:	b538      	push	{r3, r4, r5, lr}
 800aff6:	4605      	mov	r5, r0
 800aff8:	460c      	mov	r4, r1
 800affa:	d904      	bls.n	800b006 <_raise_r+0x14>
 800affc:	2316      	movs	r3, #22
 800affe:	6003      	str	r3, [r0, #0]
 800b000:	f04f 30ff 	mov.w	r0, #4294967295
 800b004:	bd38      	pop	{r3, r4, r5, pc}
 800b006:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b008:	b112      	cbz	r2, 800b010 <_raise_r+0x1e>
 800b00a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b00e:	b94b      	cbnz	r3, 800b024 <_raise_r+0x32>
 800b010:	4628      	mov	r0, r5
 800b012:	f000 f831 	bl	800b078 <_getpid_r>
 800b016:	4622      	mov	r2, r4
 800b018:	4601      	mov	r1, r0
 800b01a:	4628      	mov	r0, r5
 800b01c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b020:	f000 b818 	b.w	800b054 <_kill_r>
 800b024:	2b01      	cmp	r3, #1
 800b026:	d00a      	beq.n	800b03e <_raise_r+0x4c>
 800b028:	1c59      	adds	r1, r3, #1
 800b02a:	d103      	bne.n	800b034 <_raise_r+0x42>
 800b02c:	2316      	movs	r3, #22
 800b02e:	6003      	str	r3, [r0, #0]
 800b030:	2001      	movs	r0, #1
 800b032:	e7e7      	b.n	800b004 <_raise_r+0x12>
 800b034:	2100      	movs	r1, #0
 800b036:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b03a:	4620      	mov	r0, r4
 800b03c:	4798      	blx	r3
 800b03e:	2000      	movs	r0, #0
 800b040:	e7e0      	b.n	800b004 <_raise_r+0x12>
	...

0800b044 <raise>:
 800b044:	4b02      	ldr	r3, [pc, #8]	@ (800b050 <raise+0xc>)
 800b046:	4601      	mov	r1, r0
 800b048:	6818      	ldr	r0, [r3, #0]
 800b04a:	f7ff bfd2 	b.w	800aff2 <_raise_r>
 800b04e:	bf00      	nop
 800b050:	24000020 	.word	0x24000020

0800b054 <_kill_r>:
 800b054:	b538      	push	{r3, r4, r5, lr}
 800b056:	4d07      	ldr	r5, [pc, #28]	@ (800b074 <_kill_r+0x20>)
 800b058:	2300      	movs	r3, #0
 800b05a:	4604      	mov	r4, r0
 800b05c:	4608      	mov	r0, r1
 800b05e:	4611      	mov	r1, r2
 800b060:	602b      	str	r3, [r5, #0]
 800b062:	f7f5 fe71 	bl	8000d48 <_kill>
 800b066:	1c43      	adds	r3, r0, #1
 800b068:	d102      	bne.n	800b070 <_kill_r+0x1c>
 800b06a:	682b      	ldr	r3, [r5, #0]
 800b06c:	b103      	cbz	r3, 800b070 <_kill_r+0x1c>
 800b06e:	6023      	str	r3, [r4, #0]
 800b070:	bd38      	pop	{r3, r4, r5, pc}
 800b072:	bf00      	nop
 800b074:	240044f0 	.word	0x240044f0

0800b078 <_getpid_r>:
 800b078:	f7f5 be5e 	b.w	8000d38 <_getpid>

0800b07c <_init>:
 800b07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b07e:	bf00      	nop
 800b080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b082:	bc08      	pop	{r3}
 800b084:	469e      	mov	lr, r3
 800b086:	4770      	bx	lr

0800b088 <_fini>:
 800b088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b08a:	bf00      	nop
 800b08c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b08e:	bc08      	pop	{r3}
 800b090:	469e      	mov	lr, r3
 800b092:	4770      	bx	lr
