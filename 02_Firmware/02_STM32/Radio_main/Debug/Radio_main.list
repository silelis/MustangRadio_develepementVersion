
Radio_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014564  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bac  08014818  08014818  00015818  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080153c4  080153c4  000163c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080153cc  080153cc  000163cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080153d0  080153d0  000163d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001dc  24000000  080153d4  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004db0  240001dc  080155b0  000171dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24004f8c  080155b0  00017f8c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000171dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00033184  00000000  00000000  0001720a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006873  00000000  00000000  0004a38e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002060  00000000  00000000  00050c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000018f5  00000000  00000000  00052c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a6cb  00000000  00000000  0005455d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002f5a3  00000000  00000000  0008ec28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00152e7e  00000000  00000000  000be1cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00211049  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009b54  00000000  00000000  0021108c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008b  00000000  00000000  0021abe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240001dc 	.word	0x240001dc
 80002cc:	00000000 	.word	0x00000000
 80002d0:	080147fc 	.word	0x080147fc

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240001e0 	.word	0x240001e0
 80002ec:	080147fc 	.word	0x080147fc

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <strlen>:
 8000390:	4603      	mov	r3, r0
 8000392:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000396:	2a00      	cmp	r2, #0
 8000398:	d1fb      	bne.n	8000392 <strlen+0x2>
 800039a:	1a18      	subs	r0, r3, r0
 800039c:	3801      	subs	r0, #1
 800039e:	4770      	bx	lr

080003a0 <__aeabi_drsub>:
 80003a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003a4:	e002      	b.n	80003ac <__adddf3>
 80003a6:	bf00      	nop

080003a8 <__aeabi_dsub>:
 80003a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003ac <__adddf3>:
 80003ac:	b530      	push	{r4, r5, lr}
 80003ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003b6:	ea94 0f05 	teq	r4, r5
 80003ba:	bf08      	it	eq
 80003bc:	ea90 0f02 	teqeq	r0, r2
 80003c0:	bf1f      	itttt	ne
 80003c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d2:	f000 80e2 	beq.w	800059a <__adddf3+0x1ee>
 80003d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003de:	bfb8      	it	lt
 80003e0:	426d      	neglt	r5, r5
 80003e2:	dd0c      	ble.n	80003fe <__adddf3+0x52>
 80003e4:	442c      	add	r4, r5
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	ea82 0000 	eor.w	r0, r2, r0
 80003f2:	ea83 0101 	eor.w	r1, r3, r1
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	2d36      	cmp	r5, #54	@ 0x36
 8000400:	bf88      	it	hi
 8000402:	bd30      	pophi	{r4, r5, pc}
 8000404:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000408:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800040c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000410:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000414:	d002      	beq.n	800041c <__adddf3+0x70>
 8000416:	4240      	negs	r0, r0
 8000418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800041c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000420:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000424:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x84>
 800042a:	4252      	negs	r2, r2
 800042c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000430:	ea94 0f05 	teq	r4, r5
 8000434:	f000 80a7 	beq.w	8000586 <__adddf3+0x1da>
 8000438:	f1a4 0401 	sub.w	r4, r4, #1
 800043c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000440:	db0d      	blt.n	800045e <__adddf3+0xb2>
 8000442:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000446:	fa22 f205 	lsr.w	r2, r2, r5
 800044a:	1880      	adds	r0, r0, r2
 800044c:	f141 0100 	adc.w	r1, r1, #0
 8000450:	fa03 f20e 	lsl.w	r2, r3, lr
 8000454:	1880      	adds	r0, r0, r2
 8000456:	fa43 f305 	asr.w	r3, r3, r5
 800045a:	4159      	adcs	r1, r3
 800045c:	e00e      	b.n	800047c <__adddf3+0xd0>
 800045e:	f1a5 0520 	sub.w	r5, r5, #32
 8000462:	f10e 0e20 	add.w	lr, lr, #32
 8000466:	2a01      	cmp	r2, #1
 8000468:	fa03 fc0e 	lsl.w	ip, r3, lr
 800046c:	bf28      	it	cs
 800046e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000472:	fa43 f305 	asr.w	r3, r3, r5
 8000476:	18c0      	adds	r0, r0, r3
 8000478:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000480:	d507      	bpl.n	8000492 <__adddf3+0xe6>
 8000482:	f04f 0e00 	mov.w	lr, #0
 8000486:	f1dc 0c00 	rsbs	ip, ip, #0
 800048a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800048e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000492:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000496:	d31b      	bcc.n	80004d0 <__adddf3+0x124>
 8000498:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800049c:	d30c      	bcc.n	80004b8 <__adddf3+0x10c>
 800049e:	0849      	lsrs	r1, r1, #1
 80004a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004a8:	f104 0401 	add.w	r4, r4, #1
 80004ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004b4:	f080 809a 	bcs.w	80005ec <__adddf3+0x240>
 80004b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004bc:	bf08      	it	eq
 80004be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c2:	f150 0000 	adcs.w	r0, r0, #0
 80004c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ca:	ea41 0105 	orr.w	r1, r1, r5
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d4:	4140      	adcs	r0, r0
 80004d6:	eb41 0101 	adc.w	r1, r1, r1
 80004da:	3c01      	subs	r4, #1
 80004dc:	bf28      	it	cs
 80004de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004e2:	d2e9      	bcs.n	80004b8 <__adddf3+0x10c>
 80004e4:	f091 0f00 	teq	r1, #0
 80004e8:	bf04      	itt	eq
 80004ea:	4601      	moveq	r1, r0
 80004ec:	2000      	moveq	r0, #0
 80004ee:	fab1 f381 	clz	r3, r1
 80004f2:	bf08      	it	eq
 80004f4:	3320      	addeq	r3, #32
 80004f6:	f1a3 030b 	sub.w	r3, r3, #11
 80004fa:	f1b3 0220 	subs.w	r2, r3, #32
 80004fe:	da0c      	bge.n	800051a <__adddf3+0x16e>
 8000500:	320c      	adds	r2, #12
 8000502:	dd08      	ble.n	8000516 <__adddf3+0x16a>
 8000504:	f102 0c14 	add.w	ip, r2, #20
 8000508:	f1c2 020c 	rsb	r2, r2, #12
 800050c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000510:	fa21 f102 	lsr.w	r1, r1, r2
 8000514:	e00c      	b.n	8000530 <__adddf3+0x184>
 8000516:	f102 0214 	add.w	r2, r2, #20
 800051a:	bfd8      	it	le
 800051c:	f1c2 0c20 	rsble	ip, r2, #32
 8000520:	fa01 f102 	lsl.w	r1, r1, r2
 8000524:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000528:	bfdc      	itt	le
 800052a:	ea41 010c 	orrle.w	r1, r1, ip
 800052e:	4090      	lslle	r0, r2
 8000530:	1ae4      	subs	r4, r4, r3
 8000532:	bfa2      	ittt	ge
 8000534:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000538:	4329      	orrge	r1, r5
 800053a:	bd30      	popge	{r4, r5, pc}
 800053c:	ea6f 0404 	mvn.w	r4, r4
 8000540:	3c1f      	subs	r4, #31
 8000542:	da1c      	bge.n	800057e <__adddf3+0x1d2>
 8000544:	340c      	adds	r4, #12
 8000546:	dc0e      	bgt.n	8000566 <__adddf3+0x1ba>
 8000548:	f104 0414 	add.w	r4, r4, #20
 800054c:	f1c4 0220 	rsb	r2, r4, #32
 8000550:	fa20 f004 	lsr.w	r0, r0, r4
 8000554:	fa01 f302 	lsl.w	r3, r1, r2
 8000558:	ea40 0003 	orr.w	r0, r0, r3
 800055c:	fa21 f304 	lsr.w	r3, r1, r4
 8000560:	ea45 0103 	orr.w	r1, r5, r3
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f1c4 040c 	rsb	r4, r4, #12
 800056a:	f1c4 0220 	rsb	r2, r4, #32
 800056e:	fa20 f002 	lsr.w	r0, r0, r2
 8000572:	fa01 f304 	lsl.w	r3, r1, r4
 8000576:	ea40 0003 	orr.w	r0, r0, r3
 800057a:	4629      	mov	r1, r5
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	fa21 f004 	lsr.w	r0, r1, r4
 8000582:	4629      	mov	r1, r5
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f094 0f00 	teq	r4, #0
 800058a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800058e:	bf06      	itte	eq
 8000590:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000594:	3401      	addeq	r4, #1
 8000596:	3d01      	subne	r5, #1
 8000598:	e74e      	b.n	8000438 <__adddf3+0x8c>
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf18      	it	ne
 80005a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a4:	d029      	beq.n	80005fa <__adddf3+0x24e>
 80005a6:	ea94 0f05 	teq	r4, r5
 80005aa:	bf08      	it	eq
 80005ac:	ea90 0f02 	teqeq	r0, r2
 80005b0:	d005      	beq.n	80005be <__adddf3+0x212>
 80005b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005b6:	bf04      	itt	eq
 80005b8:	4619      	moveq	r1, r3
 80005ba:	4610      	moveq	r0, r2
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	ea91 0f03 	teq	r1, r3
 80005c2:	bf1e      	ittt	ne
 80005c4:	2100      	movne	r1, #0
 80005c6:	2000      	movne	r0, #0
 80005c8:	bd30      	popne	{r4, r5, pc}
 80005ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ce:	d105      	bne.n	80005dc <__adddf3+0x230>
 80005d0:	0040      	lsls	r0, r0, #1
 80005d2:	4149      	adcs	r1, r1
 80005d4:	bf28      	it	cs
 80005d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd30      	pop	{r4, r5, pc}
 80005dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005e0:	bf3c      	itt	cc
 80005e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005e6:	bd30      	popcc	{r4, r5, pc}
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005fe:	bf1a      	itte	ne
 8000600:	4619      	movne	r1, r3
 8000602:	4610      	movne	r0, r2
 8000604:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000608:	bf1c      	itt	ne
 800060a:	460b      	movne	r3, r1
 800060c:	4602      	movne	r2, r0
 800060e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000612:	bf06      	itte	eq
 8000614:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000618:	ea91 0f03 	teqeq	r1, r3
 800061c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop

08000624 <__aeabi_ui2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f04f 0500 	mov.w	r5, #0
 800063c:	f04f 0100 	mov.w	r1, #0
 8000640:	e750      	b.n	80004e4 <__adddf3+0x138>
 8000642:	bf00      	nop

08000644 <__aeabi_i2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800065c:	bf48      	it	mi
 800065e:	4240      	negmi	r0, r0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e73e      	b.n	80004e4 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_f2d>:
 8000668:	0042      	lsls	r2, r0, #1
 800066a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800066e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000672:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000676:	bf1f      	itttt	ne
 8000678:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800067c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000680:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000684:	4770      	bxne	lr
 8000686:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800068a:	bf08      	it	eq
 800068c:	4770      	bxeq	lr
 800068e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000692:	bf04      	itt	eq
 8000694:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000698:	4770      	bxeq	lr
 800069a:	b530      	push	{r4, r5, lr}
 800069c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	e71c      	b.n	80004e4 <__adddf3+0x138>
 80006aa:	bf00      	nop

080006ac <__aeabi_ul2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	e00a      	b.n	80006d2 <__aeabi_l2d+0x16>

080006bc <__aeabi_l2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ca:	d502      	bpl.n	80006d2 <__aeabi_l2d+0x16>
 80006cc:	4240      	negs	r0, r0
 80006ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006de:	f43f aed8 	beq.w	8000492 <__adddf3+0xe6>
 80006e2:	f04f 0203 	mov.w	r2, #3
 80006e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ea:	bf18      	it	ne
 80006ec:	3203      	addne	r2, #3
 80006ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f2:	bf18      	it	ne
 80006f4:	3203      	addne	r2, #3
 80006f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fa:	f1c2 0320 	rsb	r3, r2, #32
 80006fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 fe03 	lsl.w	lr, r1, r3
 800070a:	ea40 000e 	orr.w	r0, r0, lr
 800070e:	fa21 f102 	lsr.w	r1, r1, r2
 8000712:	4414      	add	r4, r2
 8000714:	e6bd      	b.n	8000492 <__adddf3+0xe6>
 8000716:	bf00      	nop

08000718 <__aeabi_uldivmod>:
 8000718:	b953      	cbnz	r3, 8000730 <__aeabi_uldivmod+0x18>
 800071a:	b94a      	cbnz	r2, 8000730 <__aeabi_uldivmod+0x18>
 800071c:	2900      	cmp	r1, #0
 800071e:	bf08      	it	eq
 8000720:	2800      	cmpeq	r0, #0
 8000722:	bf1c      	itt	ne
 8000724:	f04f 31ff 	movne.w	r1, #4294967295
 8000728:	f04f 30ff 	movne.w	r0, #4294967295
 800072c:	f000 b9a2 	b.w	8000a74 <__aeabi_idiv0>
 8000730:	f1ad 0c08 	sub.w	ip, sp, #8
 8000734:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000738:	f000 f83e 	bl	80007b8 <__udivmoddi4>
 800073c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000740:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000744:	b004      	add	sp, #16
 8000746:	4770      	bx	lr

08000748 <__aeabi_d2lz>:
 8000748:	b508      	push	{r3, lr}
 800074a:	4602      	mov	r2, r0
 800074c:	460b      	mov	r3, r1
 800074e:	ec43 2b17 	vmov	d7, r2, r3
 8000752:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800075a:	d403      	bmi.n	8000764 <__aeabi_d2lz+0x1c>
 800075c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000760:	f000 b80a 	b.w	8000778 <__aeabi_d2ulz>
 8000764:	eeb1 7b47 	vneg.f64	d7, d7
 8000768:	ec51 0b17 	vmov	r0, r1, d7
 800076c:	f000 f804 	bl	8000778 <__aeabi_d2ulz>
 8000770:	4240      	negs	r0, r0
 8000772:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000776:	bd08      	pop	{r3, pc}

08000778 <__aeabi_d2ulz>:
 8000778:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007a8 <__aeabi_d2ulz+0x30>
 800077c:	ec41 0b17 	vmov	d7, r0, r1
 8000780:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007b0 <__aeabi_d2ulz+0x38>
 8000784:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000788:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800078c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000790:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000794:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000798:	ee16 1a10 	vmov	r1, s12
 800079c:	ee17 0a90 	vmov	r0, s15
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	f3af 8000 	nop.w
 80007a8:	00000000 	.word	0x00000000
 80007ac:	3df00000 	.word	0x3df00000
 80007b0:	00000000 	.word	0x00000000
 80007b4:	41f00000 	.word	0x41f00000

080007b8 <__udivmoddi4>:
 80007b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007bc:	9d08      	ldr	r5, [sp, #32]
 80007be:	460c      	mov	r4, r1
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d14e      	bne.n	8000862 <__udivmoddi4+0xaa>
 80007c4:	4694      	mov	ip, r2
 80007c6:	458c      	cmp	ip, r1
 80007c8:	4686      	mov	lr, r0
 80007ca:	fab2 f282 	clz	r2, r2
 80007ce:	d962      	bls.n	8000896 <__udivmoddi4+0xde>
 80007d0:	b14a      	cbz	r2, 80007e6 <__udivmoddi4+0x2e>
 80007d2:	f1c2 0320 	rsb	r3, r2, #32
 80007d6:	4091      	lsls	r1, r2
 80007d8:	fa20 f303 	lsr.w	r3, r0, r3
 80007dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007e0:	4319      	orrs	r1, r3
 80007e2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007e6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007ea:	fa1f f68c 	uxth.w	r6, ip
 80007ee:	fbb1 f4f7 	udiv	r4, r1, r7
 80007f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007f6:	fb07 1114 	mls	r1, r7, r4, r1
 80007fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007fe:	fb04 f106 	mul.w	r1, r4, r6
 8000802:	4299      	cmp	r1, r3
 8000804:	d90a      	bls.n	800081c <__udivmoddi4+0x64>
 8000806:	eb1c 0303 	adds.w	r3, ip, r3
 800080a:	f104 30ff 	add.w	r0, r4, #4294967295
 800080e:	f080 8112 	bcs.w	8000a36 <__udivmoddi4+0x27e>
 8000812:	4299      	cmp	r1, r3
 8000814:	f240 810f 	bls.w	8000a36 <__udivmoddi4+0x27e>
 8000818:	3c02      	subs	r4, #2
 800081a:	4463      	add	r3, ip
 800081c:	1a59      	subs	r1, r3, r1
 800081e:	fa1f f38e 	uxth.w	r3, lr
 8000822:	fbb1 f0f7 	udiv	r0, r1, r7
 8000826:	fb07 1110 	mls	r1, r7, r0, r1
 800082a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800082e:	fb00 f606 	mul.w	r6, r0, r6
 8000832:	429e      	cmp	r6, r3
 8000834:	d90a      	bls.n	800084c <__udivmoddi4+0x94>
 8000836:	eb1c 0303 	adds.w	r3, ip, r3
 800083a:	f100 31ff 	add.w	r1, r0, #4294967295
 800083e:	f080 80fc 	bcs.w	8000a3a <__udivmoddi4+0x282>
 8000842:	429e      	cmp	r6, r3
 8000844:	f240 80f9 	bls.w	8000a3a <__udivmoddi4+0x282>
 8000848:	4463      	add	r3, ip
 800084a:	3802      	subs	r0, #2
 800084c:	1b9b      	subs	r3, r3, r6
 800084e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000852:	2100      	movs	r1, #0
 8000854:	b11d      	cbz	r5, 800085e <__udivmoddi4+0xa6>
 8000856:	40d3      	lsrs	r3, r2
 8000858:	2200      	movs	r2, #0
 800085a:	e9c5 3200 	strd	r3, r2, [r5]
 800085e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000862:	428b      	cmp	r3, r1
 8000864:	d905      	bls.n	8000872 <__udivmoddi4+0xba>
 8000866:	b10d      	cbz	r5, 800086c <__udivmoddi4+0xb4>
 8000868:	e9c5 0100 	strd	r0, r1, [r5]
 800086c:	2100      	movs	r1, #0
 800086e:	4608      	mov	r0, r1
 8000870:	e7f5      	b.n	800085e <__udivmoddi4+0xa6>
 8000872:	fab3 f183 	clz	r1, r3
 8000876:	2900      	cmp	r1, #0
 8000878:	d146      	bne.n	8000908 <__udivmoddi4+0x150>
 800087a:	42a3      	cmp	r3, r4
 800087c:	d302      	bcc.n	8000884 <__udivmoddi4+0xcc>
 800087e:	4290      	cmp	r0, r2
 8000880:	f0c0 80f0 	bcc.w	8000a64 <__udivmoddi4+0x2ac>
 8000884:	1a86      	subs	r6, r0, r2
 8000886:	eb64 0303 	sbc.w	r3, r4, r3
 800088a:	2001      	movs	r0, #1
 800088c:	2d00      	cmp	r5, #0
 800088e:	d0e6      	beq.n	800085e <__udivmoddi4+0xa6>
 8000890:	e9c5 6300 	strd	r6, r3, [r5]
 8000894:	e7e3      	b.n	800085e <__udivmoddi4+0xa6>
 8000896:	2a00      	cmp	r2, #0
 8000898:	f040 8090 	bne.w	80009bc <__udivmoddi4+0x204>
 800089c:	eba1 040c 	sub.w	r4, r1, ip
 80008a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008a4:	fa1f f78c 	uxth.w	r7, ip
 80008a8:	2101      	movs	r1, #1
 80008aa:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008b2:	fb08 4416 	mls	r4, r8, r6, r4
 80008b6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008ba:	fb07 f006 	mul.w	r0, r7, r6
 80008be:	4298      	cmp	r0, r3
 80008c0:	d908      	bls.n	80008d4 <__udivmoddi4+0x11c>
 80008c2:	eb1c 0303 	adds.w	r3, ip, r3
 80008c6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ca:	d202      	bcs.n	80008d2 <__udivmoddi4+0x11a>
 80008cc:	4298      	cmp	r0, r3
 80008ce:	f200 80cd 	bhi.w	8000a6c <__udivmoddi4+0x2b4>
 80008d2:	4626      	mov	r6, r4
 80008d4:	1a1c      	subs	r4, r3, r0
 80008d6:	fa1f f38e 	uxth.w	r3, lr
 80008da:	fbb4 f0f8 	udiv	r0, r4, r8
 80008de:	fb08 4410 	mls	r4, r8, r0, r4
 80008e2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008e6:	fb00 f707 	mul.w	r7, r0, r7
 80008ea:	429f      	cmp	r7, r3
 80008ec:	d908      	bls.n	8000900 <__udivmoddi4+0x148>
 80008ee:	eb1c 0303 	adds.w	r3, ip, r3
 80008f2:	f100 34ff 	add.w	r4, r0, #4294967295
 80008f6:	d202      	bcs.n	80008fe <__udivmoddi4+0x146>
 80008f8:	429f      	cmp	r7, r3
 80008fa:	f200 80b0 	bhi.w	8000a5e <__udivmoddi4+0x2a6>
 80008fe:	4620      	mov	r0, r4
 8000900:	1bdb      	subs	r3, r3, r7
 8000902:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000906:	e7a5      	b.n	8000854 <__udivmoddi4+0x9c>
 8000908:	f1c1 0620 	rsb	r6, r1, #32
 800090c:	408b      	lsls	r3, r1
 800090e:	fa22 f706 	lsr.w	r7, r2, r6
 8000912:	431f      	orrs	r7, r3
 8000914:	fa20 fc06 	lsr.w	ip, r0, r6
 8000918:	fa04 f301 	lsl.w	r3, r4, r1
 800091c:	ea43 030c 	orr.w	r3, r3, ip
 8000920:	40f4      	lsrs	r4, r6
 8000922:	fa00 f801 	lsl.w	r8, r0, r1
 8000926:	0c38      	lsrs	r0, r7, #16
 8000928:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800092c:	fbb4 fef0 	udiv	lr, r4, r0
 8000930:	fa1f fc87 	uxth.w	ip, r7
 8000934:	fb00 441e 	mls	r4, r0, lr, r4
 8000938:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800093c:	fb0e f90c 	mul.w	r9, lr, ip
 8000940:	45a1      	cmp	r9, r4
 8000942:	fa02 f201 	lsl.w	r2, r2, r1
 8000946:	d90a      	bls.n	800095e <__udivmoddi4+0x1a6>
 8000948:	193c      	adds	r4, r7, r4
 800094a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800094e:	f080 8084 	bcs.w	8000a5a <__udivmoddi4+0x2a2>
 8000952:	45a1      	cmp	r9, r4
 8000954:	f240 8081 	bls.w	8000a5a <__udivmoddi4+0x2a2>
 8000958:	f1ae 0e02 	sub.w	lr, lr, #2
 800095c:	443c      	add	r4, r7
 800095e:	eba4 0409 	sub.w	r4, r4, r9
 8000962:	fa1f f983 	uxth.w	r9, r3
 8000966:	fbb4 f3f0 	udiv	r3, r4, r0
 800096a:	fb00 4413 	mls	r4, r0, r3, r4
 800096e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000972:	fb03 fc0c 	mul.w	ip, r3, ip
 8000976:	45a4      	cmp	ip, r4
 8000978:	d907      	bls.n	800098a <__udivmoddi4+0x1d2>
 800097a:	193c      	adds	r4, r7, r4
 800097c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000980:	d267      	bcs.n	8000a52 <__udivmoddi4+0x29a>
 8000982:	45a4      	cmp	ip, r4
 8000984:	d965      	bls.n	8000a52 <__udivmoddi4+0x29a>
 8000986:	3b02      	subs	r3, #2
 8000988:	443c      	add	r4, r7
 800098a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800098e:	fba0 9302 	umull	r9, r3, r0, r2
 8000992:	eba4 040c 	sub.w	r4, r4, ip
 8000996:	429c      	cmp	r4, r3
 8000998:	46ce      	mov	lr, r9
 800099a:	469c      	mov	ip, r3
 800099c:	d351      	bcc.n	8000a42 <__udivmoddi4+0x28a>
 800099e:	d04e      	beq.n	8000a3e <__udivmoddi4+0x286>
 80009a0:	b155      	cbz	r5, 80009b8 <__udivmoddi4+0x200>
 80009a2:	ebb8 030e 	subs.w	r3, r8, lr
 80009a6:	eb64 040c 	sbc.w	r4, r4, ip
 80009aa:	fa04 f606 	lsl.w	r6, r4, r6
 80009ae:	40cb      	lsrs	r3, r1
 80009b0:	431e      	orrs	r6, r3
 80009b2:	40cc      	lsrs	r4, r1
 80009b4:	e9c5 6400 	strd	r6, r4, [r5]
 80009b8:	2100      	movs	r1, #0
 80009ba:	e750      	b.n	800085e <__udivmoddi4+0xa6>
 80009bc:	f1c2 0320 	rsb	r3, r2, #32
 80009c0:	fa20 f103 	lsr.w	r1, r0, r3
 80009c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009c8:	fa24 f303 	lsr.w	r3, r4, r3
 80009cc:	4094      	lsls	r4, r2
 80009ce:	430c      	orrs	r4, r1
 80009d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009d4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009d8:	fa1f f78c 	uxth.w	r7, ip
 80009dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009e0:	fb08 3110 	mls	r1, r8, r0, r3
 80009e4:	0c23      	lsrs	r3, r4, #16
 80009e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009ea:	fb00 f107 	mul.w	r1, r0, r7
 80009ee:	4299      	cmp	r1, r3
 80009f0:	d908      	bls.n	8000a04 <__udivmoddi4+0x24c>
 80009f2:	eb1c 0303 	adds.w	r3, ip, r3
 80009f6:	f100 36ff 	add.w	r6, r0, #4294967295
 80009fa:	d22c      	bcs.n	8000a56 <__udivmoddi4+0x29e>
 80009fc:	4299      	cmp	r1, r3
 80009fe:	d92a      	bls.n	8000a56 <__udivmoddi4+0x29e>
 8000a00:	3802      	subs	r0, #2
 8000a02:	4463      	add	r3, ip
 8000a04:	1a5b      	subs	r3, r3, r1
 8000a06:	b2a4      	uxth	r4, r4
 8000a08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a14:	fb01 f307 	mul.w	r3, r1, r7
 8000a18:	42a3      	cmp	r3, r4
 8000a1a:	d908      	bls.n	8000a2e <__udivmoddi4+0x276>
 8000a1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a24:	d213      	bcs.n	8000a4e <__udivmoddi4+0x296>
 8000a26:	42a3      	cmp	r3, r4
 8000a28:	d911      	bls.n	8000a4e <__udivmoddi4+0x296>
 8000a2a:	3902      	subs	r1, #2
 8000a2c:	4464      	add	r4, ip
 8000a2e:	1ae4      	subs	r4, r4, r3
 8000a30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a34:	e739      	b.n	80008aa <__udivmoddi4+0xf2>
 8000a36:	4604      	mov	r4, r0
 8000a38:	e6f0      	b.n	800081c <__udivmoddi4+0x64>
 8000a3a:	4608      	mov	r0, r1
 8000a3c:	e706      	b.n	800084c <__udivmoddi4+0x94>
 8000a3e:	45c8      	cmp	r8, r9
 8000a40:	d2ae      	bcs.n	80009a0 <__udivmoddi4+0x1e8>
 8000a42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a4a:	3801      	subs	r0, #1
 8000a4c:	e7a8      	b.n	80009a0 <__udivmoddi4+0x1e8>
 8000a4e:	4631      	mov	r1, r6
 8000a50:	e7ed      	b.n	8000a2e <__udivmoddi4+0x276>
 8000a52:	4603      	mov	r3, r0
 8000a54:	e799      	b.n	800098a <__udivmoddi4+0x1d2>
 8000a56:	4630      	mov	r0, r6
 8000a58:	e7d4      	b.n	8000a04 <__udivmoddi4+0x24c>
 8000a5a:	46d6      	mov	lr, sl
 8000a5c:	e77f      	b.n	800095e <__udivmoddi4+0x1a6>
 8000a5e:	4463      	add	r3, ip
 8000a60:	3802      	subs	r0, #2
 8000a62:	e74d      	b.n	8000900 <__udivmoddi4+0x148>
 8000a64:	4606      	mov	r6, r0
 8000a66:	4623      	mov	r3, r4
 8000a68:	4608      	mov	r0, r1
 8000a6a:	e70f      	b.n	800088c <__udivmoddi4+0xd4>
 8000a6c:	3e02      	subs	r6, #2
 8000a6e:	4463      	add	r3, ip
 8000a70:	e730      	b.n	80008d4 <__udivmoddi4+0x11c>
 8000a72:	bf00      	nop

08000a74 <__aeabi_idiv0>:
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <_Z18calculate_checksumPKvj>:
 * size_t length - długość bufora (z uwzględnieniem pola na wartość
 *                     CRC) z ktorego należy wyliczyć sume kontrolną.                 
 * Returns:
 * NONE
 *---------------------------------------------------------------*/
uint8_t calculate_checksum(const void *buffer, size_t length) {
 8000a78:	b480      	push	{r7}
 8000a7a:	b087      	sub	sp, #28
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	6039      	str	r1, [r7, #0]
	const size_t bufferOffset = 1;        //In my solution bufferOffset is required because 1st 8 bits of buffer is uint8_t CRC field
 8000a82:	2301      	movs	r3, #1
 8000a84:	60fb      	str	r3, [r7, #12]
	const uint8_t *data = (const uint8_t *)buffer;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	60bb      	str	r3, [r7, #8]
	// Zwraca 0 gdy CRC jest ustawione na NONE
	return 0;

#elif I2C_SLAVE_CRC_METHOD == I2C_SLAVE_CRC_XOR
	// Oblicza sumę kontrolną metodą XOR
	uint8_t checksum = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	75fb      	strb	r3, [r7, #23]
	for (size_t i = 0 + bufferOffset; i < length; i++) {
 8000a8e:	2301      	movs	r3, #1
 8000a90:	613b      	str	r3, [r7, #16]
 8000a92:	e009      	b.n	8000aa8 <_Z18calculate_checksumPKvj+0x30>
		checksum ^= data[i];
 8000a94:	68ba      	ldr	r2, [r7, #8]
 8000a96:	693b      	ldr	r3, [r7, #16]
 8000a98:	4413      	add	r3, r2
 8000a9a:	781a      	ldrb	r2, [r3, #0]
 8000a9c:	7dfb      	ldrb	r3, [r7, #23]
 8000a9e:	4053      	eors	r3, r2
 8000aa0:	75fb      	strb	r3, [r7, #23]
	for (size_t i = 0 + bufferOffset; i < length; i++) {
 8000aa2:	693b      	ldr	r3, [r7, #16]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	613b      	str	r3, [r7, #16]
 8000aa8:	693a      	ldr	r2, [r7, #16]
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	d3f1      	bcc.n	8000a94 <_Z18calculate_checksumPKvj+0x1c>
	}
	return checksum;
 8000ab0:	7dfb      	ldrb	r3, [r7, #23]
	return crc;

#else
#error "Nieprawidłowa metoda CRC ustawiona w I2C_SLAVE_CRC_METHOD"
#endif
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	371c      	adds	r7, #28
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
	...

08000ac0 <_ZN27esp32_i2cComunicationDriverC1EP9i2cMaster>:
 * @return [NONE]
 *
 * @note   NONE
 * @warning NONE
 *******************************************************************/
esp32_i2cComunicationDriver::esp32_i2cComunicationDriver(i2cMaster* pointer_to_i2cMasterObject) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	6039      	str	r1, [r7, #0]
 8000aca:	4a1f      	ldr	r2, [pc, #124]	@ (8000b48 <_ZN27esp32_i2cComunicationDriverC1EP9i2cMaster+0x88>)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	223c      	movs	r2, #60	@ 0x3c
 8000ad4:	711a      	strb	r2, [r3, #4]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4a1c      	ldr	r2, [pc, #112]	@ (8000b4c <_ZN27esp32_i2cComunicationDriverC1EP9i2cMaster+0x8c>)
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2215      	movs	r2, #21
 8000ae0:	731a      	strb	r2, [r3, #12]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2205      	movs	r2, #5
 8000ae6:	81da      	strh	r2, [r3, #14]
	// TODO Auto-generated constructor stub
		this->pi2cMaster = pointer_to_i2cMasterObject;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	683a      	ldr	r2, [r7, #0]
 8000aec:	611a      	str	r2, [r3, #16]
		configASSERT(this->esp32IntrrruptRequest_CountingSemaphore = xSemaphoreCreateCounting(this->esp32InterruptRequestCountingSemaphore_MAX, 0));
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	7b1b      	ldrb	r3, [r3, #12]
 8000af2:	2100      	movs	r1, #0
 8000af4:	4618      	mov	r0, r3
 8000af6:	f00c fada 	bl	800d0ae <xQueueCreateCountingSemaphore>
 8000afa:	4602      	mov	r2, r0
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	615a      	str	r2, [r3, #20]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	695b      	ldr	r3, [r3, #20]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	bf0c      	ite	eq
 8000b08:	2301      	moveq	r3, #1
 8000b0a:	2300      	movne	r3, #0
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d00b      	beq.n	8000b2a <_ZN27esp32_i2cComunicationDriverC1EP9i2cMaster+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b16:	f383 8811 	msr	BASEPRI, r3
 8000b1a:	f3bf 8f6f 	isb	sy
 8000b1e:	f3bf 8f4f 	dsb	sy
 8000b22:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000b24:	bf00      	nop
 8000b26:	bf00      	nop
 8000b28:	e7fd      	b.n	8000b26 <_ZN27esp32_i2cComunicationDriverC1EP9i2cMaster+0x66>
		this->esp32DynamicmMemeoryAlocationError=this->esp32InrerruptRequest_CountingSemaphoreOverflowError=pdFALSE;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	699a      	ldr	r2, [r3, #24]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	61da      	str	r2, [r3, #28]
		this->esp32CrcSumCounterError=0;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	841a      	strh	r2, [r3, #32]
}
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4618      	mov	r0, r3
 8000b42:	3710      	adds	r7, #16
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	08014f0c 	.word	0x08014f0c
 8000b4c:	08014818 	.word	0x08014818

08000b50 <_ZN27esp32_i2cComunicationDriver16isCrcSumCorreectE22i2cFrame_transmitQueueh>:
 * kontrolnej, dlatego metoda liczy sume kontrolną od drugiego byte'u.
 * @warning i2cFrame_transmitQueue nie zawiera otrzymanych danych tylko
 * informacje na temat otrzymanych danych i miejsce (wskaźnik) ich
 * przechowywania w RAM.
 *******************************************************************/
BaseType_t esp32_i2cComunicationDriver::isCrcSumCorreect(i2cFrame_transmitQueue I2CReceivedFrame, uint8_t	crcSum){
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	4638      	mov	r0, r7
 8000b5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if(crcSum==calculate_checksum(I2CReceivedFrame.pData, sizeof(i2cFrame_keyboardFrame)))
 8000b5e:	68bb      	ldr	r3, [r7, #8]
 8000b60:	2105      	movs	r1, #5
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff ff88 	bl	8000a78 <_Z18calculate_checksumPKvj>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	7e3b      	ldrb	r3, [r7, #24]
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	bf0c      	ite	eq
 8000b72:	2301      	moveq	r3, #1
 8000b74:	2300      	movne	r3, #0
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d004      	beq.n	8000b86 <_ZN27esp32_i2cComunicationDriver16isCrcSumCorreectE22i2cFrame_transmitQueueh+0x36>
	{
		this->esp32CrcSumCounterError=0;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	2200      	movs	r2, #0
 8000b80:	841a      	strh	r2, [r3, #32]
		return pdPASS;
 8000b82:	2301      	movs	r3, #1
 8000b84:	e00e      	b.n	8000ba4 <_ZN27esp32_i2cComunicationDriver16isCrcSumCorreectE22i2cFrame_transmitQueueh+0x54>
	}
	else{
		this->esp32CrcSumCounterError++;
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	8c1b      	ldrh	r3, [r3, #32]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	b29a      	uxth	r2, r3
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	841a      	strh	r2, [r3, #32]
		printf("%sCRC sum NOT correct: %d time(s)\r\n", this->TAG, this->esp32CrcSumCounterError);
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	6899      	ldr	r1, [r3, #8]
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	8c1b      	ldrh	r3, [r3, #32]
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	4803      	ldr	r0, [pc, #12]	@ (8000bac <_ZN27esp32_i2cComunicationDriver16isCrcSumCorreectE22i2cFrame_transmitQueueh+0x5c>)
 8000b9e:	f010 fad7 	bl	8011150 <iprintf>
		return pdFAIL;
 8000ba2:	2300      	movs	r3, #0
	}
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	08014838 	.word	0x08014838

08000bb0 <_ZN27esp32_i2cComunicationDriver4pingEv>:
 *
 * @note   W praktyce metoda ta jest odwołaniem do funkcji
 * 			HAL_I2C_GetState
 * @warning NONE
 *******************************************************************/
HAL_StatusTypeDef esp32_i2cComunicationDriver::ping(void){
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef retVal;
	this->i2cMasterSemaphoreTake();
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f000 f8a1 	bl	8000d00 <_ZN27esp32_i2cComunicationDriver22i2cMasterSemaphoreTakeEv>
	this->pi2cMaster->while_I2C_STATE_READY();
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	691b      	ldr	r3, [r3, #16]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f000 fa26 	bl	8001014 <_ZN9i2cMaster21while_I2C_STATE_READYEv>
	retVal = this->pi2cMaster->ping(this->esp32i2cSlaveAdress_7bit);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	691a      	ldr	r2, [r3, #16]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	791b      	ldrb	r3, [r3, #4]
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4610      	mov	r0, r2
 8000bd4:	f000 f9aa 	bl	8000f2c <_ZN9i2cMaster4pingEt>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	73fb      	strb	r3, [r7, #15]
	this->i2cMasterSemaphoreGive();
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f000 f89d 	bl	8000d1c <_ZN27esp32_i2cComunicationDriver22i2cMasterSemaphoreGiveEv>
	return retVal;
 8000be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <_ZN27esp32_i2cComunicationDriver42incrementInterruptRequestCountingSemaphoreEv>:
 * 			danych dekrementuje semafor zliczający. Dodatkowo gdy zemafor
 * 			jest pusty to wymusza to uśpienie tasku obsługującego odczyt
 * 			danych.
 * @warning [NONE
 *******************************************************************/
void esp32_i2cComunicationDriver::incrementInterruptRequestCountingSemaphore(void){
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60fb      	str	r3, [r7, #12]
	xSemaphoreGiveFromISR(this->esp32IntrrruptRequest_CountingSemaphore, &xHigherPriorityTaskWoken);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	695b      	ldr	r3, [r3, #20]
 8000bfc:	f107 020c 	add.w	r2, r7, #12
 8000c00:	4611      	mov	r1, r2
 8000c02:	4618      	mov	r0, r3
 8000c04:	f00c fc28 	bl	800d458 <xQueueGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d007      	beq.n	8000c1e <_ZN27esp32_i2cComunicationDriver42incrementInterruptRequestCountingSemaphoreEv+0x32>
 8000c0e:	4b06      	ldr	r3, [pc, #24]	@ (8000c28 <_ZN27esp32_i2cComunicationDriver42incrementInterruptRequestCountingSemaphoreEv+0x3c>)
 8000c10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	f3bf 8f4f 	dsb	sy
 8000c1a:	f3bf 8f6f 	isb	sy
}
 8000c1e:	bf00      	nop
 8000c20:	3710      	adds	r7, #16
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	e000ed04 	.word	0xe000ed04

08000c2c <_ZN27esp32_i2cComunicationDriverD1Ev>:




esp32_i2cComunicationDriver::~esp32_i2cComunicationDriver() {
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	4a04      	ldr	r2, [pc, #16]	@ (8000c48 <_ZN27esp32_i2cComunicationDriverD1Ev+0x1c>)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
	#warning zrobic porzadny destruktor np. w destruktorze ma wyłączy ć się radio
}
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	08014f0c 	.word	0x08014f0c

08000c4c <_ZN27esp32_i2cComunicationDriverD0Ev>:
esp32_i2cComunicationDriver::~esp32_i2cComunicationDriver() {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
}
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f7ff ffe9 	bl	8000c2c <_ZN27esp32_i2cComunicationDriverD1Ev>
 8000c5a:	2124      	movs	r1, #36	@ 0x24
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f00f fa57 	bl	8010110 <_ZdlPvj>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4618      	mov	r0, r3
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <_ZN27esp32_i2cComunicationDriver29isCountingSemaphoreOverflowedEv>:
 * @return NONE
 *
 * @note   	NONE
 * @warning NONE
 *******************************************************************/
void esp32_i2cComunicationDriver::isCountingSemaphoreOverflowed(void){
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
	if( uxSemaphoreGetCount(this->esp32IntrrruptRequest_CountingSemaphore)== this->esp32InterruptRequestCountingSemaphore_MAX){		//sprawdza czy licznik esp32 interrupt request nie jest przepełniony
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	695b      	ldr	r3, [r3, #20]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f00c fe6f 	bl	800d95c <uxQueueMessagesWaiting>
 8000c7e:	4602      	mov	r2, r0
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	7b1b      	ldrb	r3, [r3, #12]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	bf0c      	ite	eq
 8000c88:	2301      	moveq	r3, #1
 8000c8a:	2300      	movne	r3, #0
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d005      	beq.n	8000c9e <_ZN27esp32_i2cComunicationDriver29isCountingSemaphoreOverflowedEv+0x32>
		this->esp32InrerruptRequest_CountingSemaphoreOverflowError= pdTRUE;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2201      	movs	r2, #1
 8000c96:	619a      	str	r2, [r3, #24]
		printf("!!! ESP32 interrupt request counter overflowed   !!!\r\n");
 8000c98:	4803      	ldr	r0, [pc, #12]	@ (8000ca8 <_ZN27esp32_i2cComunicationDriver29isCountingSemaphoreOverflowedEv+0x3c>)
 8000c9a:	f010 fac1 	bl	8011220 <puts>
	}
}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	0801485c 	.word	0x0801485c

08000cac <_ZN27esp32_i2cComunicationDriver32semaphoreTake__CountingSemaphoreEv>:
 *
 * @param  [NONE
 *
 * @return NONE
 *******************************************************************/
BaseType_t esp32_i2cComunicationDriver::semaphoreTake__CountingSemaphore(void){
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
	return xSemaphoreTake(this->esp32IntrrruptRequest_CountingSemaphore, portMAX_DELAY) == pdTRUE;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	695b      	ldr	r3, [r3, #20]
 8000cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f00c fd3d 	bl	800d73c <xQueueSemaphoreTake>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	bf0c      	ite	eq
 8000cc8:	2301      	moveq	r3, #1
 8000cca:	2300      	movne	r3, #0
 8000ccc:	b2db      	uxtb	r3, r3
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <_ZN27esp32_i2cComunicationDriver26masterReceiveFromESP32_DMAEPht>:
 * 			HAL_I2C_Master_Receive_DMA
 *
 * @note	NONE
 * @warning	NONE
 *******************************************************************/
BaseType_t esp32_i2cComunicationDriver::masterReceiveFromESP32_DMA(uint8_t *pData, uint16_t Size){
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b084      	sub	sp, #16
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	60f8      	str	r0, [r7, #12]
 8000cde:	60b9      	str	r1, [r7, #8]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	80fb      	strh	r3, [r7, #6]
	return this->pi2cMaster->I2C_Master_Receive_DMA(this->esp32i2cSlaveAdress_7bit, pData, Size);
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	6918      	ldr	r0, [r3, #16]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	791b      	ldrb	r3, [r3, #4]
 8000cec:	4619      	mov	r1, r3
 8000cee:	88fb      	ldrh	r3, [r7, #6]
 8000cf0:	68ba      	ldr	r2, [r7, #8]
 8000cf2:	f000 f9a6 	bl	8001042 <_ZN9i2cMaster22I2C_Master_Receive_DMAEtPht>
 8000cf6:	4603      	mov	r3, r0
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3710      	adds	r7, #16
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <_ZN27esp32_i2cComunicationDriver22i2cMasterSemaphoreTakeEv>:
 * @return [BaseType_t] Zwraca wartośc funkcji xSemaphoreTake
 *
 * @note   NONE
 * @warning NONE
 *******************************************************************/
BaseType_t esp32_i2cComunicationDriver::i2cMasterSemaphoreTake(void){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
	return this->pi2cMaster->i2cMasterSemaphoreTake();
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	691b      	ldr	r3, [r3, #16]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f000 f8ed 	bl	8000eec <_ZN9i2cMaster22i2cMasterSemaphoreTakeEv>
 8000d12:	4603      	mov	r3, r0
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <_ZN27esp32_i2cComunicationDriver22i2cMasterSemaphoreGiveEv>:
 * @return [BaseType_t] Zwraca wartośc funkcji xSemaphoreGive
 *
 * @note   NONE
 * @warning NONE
 *******************************************************************/
BaseType_t esp32_i2cComunicationDriver::i2cMasterSemaphoreGive(void){
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
	return this->pi2cMaster->i2cMasterSemaphoreGive();
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	691b      	ldr	r3, [r3, #16]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f000 f8ef 	bl	8000f0c <_ZN9i2cMaster22i2cMasterSemaphoreGiveEv>
 8000d2e:	4603      	mov	r3, r0
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <_ZN27esp32_i2cComunicationDriver21while_I2C_STATE_READYEv>:
 * @return NONE
 *
 * @note   NONE
 * @warning NONE
 *******************************************************************/
void esp32_i2cComunicationDriver::while_I2C_STATE_READY(void){
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
	pi2cMaster->while_I2C_STATE_READY();
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	691b      	ldr	r3, [r3, #16]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f000 f965 	bl	8001014 <_ZN9i2cMaster21while_I2C_STATE_READYEv>
}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
	...

08000d54 <_ZN27esp32_i2cComunicationDriver33seteDynamicmMemeoryAlocationErrorEv>:
 * @return NONE
 *
 * @note   NONE
 * @warning NONE
 *******************************************************************/
void esp32_i2cComunicationDriver::seteDynamicmMemeoryAlocationError(){
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
	this->esp32DynamicmMemeoryAlocationError=pdTRUE;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2201      	movs	r2, #1
 8000d60:	61da      	str	r2, [r3, #28]
	printf("error with memory allocation\r\n");
 8000d62:	4803      	ldr	r0, [pc, #12]	@ (8000d70 <_ZN27esp32_i2cComunicationDriver33seteDynamicmMemeoryAlocationErrorEv+0x1c>)
 8000d64:	f010 fa5c 	bl	8011220 <puts>
}
 8000d68:	bf00      	nop
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	08014894 	.word	0x08014894

08000d74 <_ZN27esp32_i2cComunicationDriver17parseReceivedDataE22i2cFrame_transmitQueue>:
 * @return NONE
 *
 * @note   NONE
 * @warning NONE
 *******************************************************************/
void esp32_i2cComunicationDriver::parseReceivedData(i2cFrame_transmitQueue I2CReceivedFrame){
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b088      	sub	sp, #32
 8000d78:	af02      	add	r7, sp, #8
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	4638      	mov	r0, r7
 8000d7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	i2cFrame_commonHeader tempI2cFrameCommandHeader;														//tymczasowa zmienna, do któej będa kopiowane otrzymane dane (aby zawsze uzyskać sumę crc z prawidłowego miejsca, nawert jeśli zmieni się typredef i2cFrame_commonHeader)
	memcpy(&tempI2cFrameCommandHeader, I2CReceivedFrame.pData, sizeof(i2cFrame_commonHeader));				//kopiowanie danych z otrzymanego bufora do zmiennej tymczasowej
 8000d82:	68ba      	ldr	r2, [r7, #8]
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	8811      	ldrh	r1, [r2, #0]
 8000d8a:	7892      	ldrb	r2, [r2, #2]
 8000d8c:	8019      	strh	r1, [r3, #0]
 8000d8e:	709a      	strb	r2, [r3, #2]
	if(this->isCrcSumCorreect(I2CReceivedFrame, tempI2cFrameCommandHeader.crcSum))
 8000d90:	7d3b      	ldrb	r3, [r7, #20]
 8000d92:	9300      	str	r3, [sp, #0]
 8000d94:	463b      	mov	r3, r7
 8000d96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d98:	68f8      	ldr	r0, [r7, #12]
 8000d9a:	f7ff fed9 	bl	8000b50 <_ZN27esp32_i2cComunicationDriver16isCrcSumCorreectE22i2cFrame_transmitQueueh>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	bf14      	ite	ne
 8000da4:	2301      	movne	r3, #1
 8000da6:	2300      	moveq	r3, #0
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d016      	beq.n	8000ddc <_ZN27esp32_i2cComunicationDriver17parseReceivedDataE22i2cFrame_transmitQueue+0x68>
	{
		switch(tempI2cFrameCommandHeader.commandGroup){
 8000dae:	7d7b      	ldrb	r3, [r7, #21]
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d105      	bne.n	8000dc0 <_ZN27esp32_i2cComunicationDriver17parseReceivedDataE22i2cFrame_transmitQueue+0x4c>

		case I2C_COMMAND_GROUP_KEYBOARD:
			parserFunction::keyboard((i2cFrame_keyboardFrame*)I2CReceivedFrame.pData);
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	4618      	mov	r0, r3
 8000db8:	f000 f81c 	bl	8000df4 <_ZN14parserFunction8keyboardEP22i2cFrame_keyboardFrame>
			break;
 8000dbc:	bf00      	nop
		default:
			printf("%sunknown commandGroup value:0x%x\r\n",this->TAG, tempI2cFrameCommandHeader.commandGroup);
			assert(0);
		}
	}
}
 8000dbe:	e00d      	b.n	8000ddc <_ZN27esp32_i2cComunicationDriver17parseReceivedDataE22i2cFrame_transmitQueue+0x68>
			printf("%sunknown commandGroup value:0x%x\r\n",this->TAG, tempI2cFrameCommandHeader.commandGroup);
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	7d7a      	ldrb	r2, [r7, #21]
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4806      	ldr	r0, [pc, #24]	@ (8000de4 <_ZN27esp32_i2cComunicationDriver17parseReceivedDataE22i2cFrame_transmitQueue+0x70>)
 8000dca:	f010 f9c1 	bl	8011150 <iprintf>
			assert(0);
 8000dce:	4b06      	ldr	r3, [pc, #24]	@ (8000de8 <_ZN27esp32_i2cComunicationDriver17parseReceivedDataE22i2cFrame_transmitQueue+0x74>)
 8000dd0:	4a06      	ldr	r2, [pc, #24]	@ (8000dec <_ZN27esp32_i2cComunicationDriver17parseReceivedDataE22i2cFrame_transmitQueue+0x78>)
 8000dd2:	f240 1119 	movw	r1, #281	@ 0x119
 8000dd6:	4806      	ldr	r0, [pc, #24]	@ (8000df0 <_ZN27esp32_i2cComunicationDriver17parseReceivedDataE22i2cFrame_transmitQueue+0x7c>)
 8000dd8:	f00f f9c6 	bl	8010168 <__assert_func>
}
 8000ddc:	bf00      	nop
 8000dde:	3718      	adds	r7, #24
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	080148b4 	.word	0x080148b4
 8000de8:	080148d8 	.word	0x080148d8
 8000dec:	080148dc 	.word	0x080148dc
 8000df0:	08014928 	.word	0x08014928

08000df4 <_ZN14parserFunction8keyboardEP22i2cFrame_keyboardFrame>:


extern radioMenu* pRadioMenu;
namespace parserFunction{

	void keyboard(i2cFrame_keyboardFrame* kbrdFrame){
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]

		pRadioMenu->queueRadioMenuKbrdSend(kbrdFrame->keyboardData.array);
 8000dfc:	4b05      	ldr	r3, [pc, #20]	@ (8000e14 <_ZN14parserFunction8keyboardEP22i2cFrame_keyboardFrame+0x20>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3303      	adds	r3, #3
 8000e04:	4619      	mov	r1, r3
 8000e06:	4610      	mov	r0, r2
 8000e08:	f000 fb9c 	bl	8001544 <_ZN9radioMenu22queueRadioMenuKbrdSendEPKv>
//		xQueueReceive(pRadioMenu->queueRadioMenuKbrd, received.array, portMAX_DELAY);
//		received;

//		#warning tutaj pchamy do kolejki klasy menu
		//tutaj pchamy do kolejki klasy menu
	}
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	24000214 	.word	0x24000214

08000e18 <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef>:
 */

//#include <i2cEngine.h>
#include "SileliS_code/i2cEngine.h"

i2cMaster::i2cMaster(I2C_HandleTypeDef *hi2c1) {
 8000e18:	b590      	push	{r4, r7, lr}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
 8000e22:	4a2c      	ldr	r2, [pc, #176]	@ (8000ed4 <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef+0xbc>)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4a2b      	ldr	r2, [pc, #172]	@ (8000ed8 <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef+0xc0>)
 8000e2c:	60da      	str	r2, [r3, #12]
	// TODO Auto-generated constructor stub
	this->p_hi2c1 =hi2c1;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	683a      	ldr	r2, [r7, #0]
 8000e32:	609a      	str	r2, [r3, #8]
	this->pReceiveQueueObject = NULL;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2200      	movs	r2, #0
 8000e38:	605a      	str	r2, [r3, #4]
	configASSERT(this->pReceiveQueueObject = new i2cQueue4DynamicData(DEFAULT_RECEIVE_QUEUE_SIZE));
 8000e3a:	2004      	movs	r0, #4
 8000e3c:	f00f f96e 	bl	801011c <_Znwj>
 8000e40:	4603      	mov	r3, r0
 8000e42:	461c      	mov	r4, r3
 8000e44:	2119      	movs	r1, #25
 8000e46:	4620      	mov	r0, r4
 8000e48:	f000 f916 	bl	8001078 <_ZN20i2cQueue4DynamicDataC1Em>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	605c      	str	r4, [r3, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	bf0c      	ite	eq
 8000e58:	2301      	moveq	r3, #1
 8000e5a:	2300      	movne	r3, #0
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d00b      	beq.n	8000e7a <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef+0x62>
	__asm volatile
 8000e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e66:	f383 8811 	msr	BASEPRI, r3
 8000e6a:	f3bf 8f6f 	isb	sy
 8000e6e:	f3bf 8f4f 	dsb	sy
 8000e72:	60fb      	str	r3, [r7, #12]
}
 8000e74:	bf00      	nop
 8000e76:	bf00      	nop
 8000e78:	e7fd      	b.n	8000e76 <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef+0x5e>

//	this->esp32InterruptCounterOverflow =pdFALSE;		//reset interrupt counter overflow indicator
	assert(this->handle_i2cBinarySemaphore = xSemaphoreCreateBinary());
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	2001      	movs	r0, #1
 8000e80:	f00c f8b7 	bl	800cff2 <xQueueGenericCreate>
 8000e84:	4602      	mov	r2, r0
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	611a      	str	r2, [r3, #16]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	691b      	ldr	r3, [r3, #16]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d105      	bne.n	8000e9e <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef+0x86>
 8000e92:	4b12      	ldr	r3, [pc, #72]	@ (8000edc <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef+0xc4>)
 8000e94:	4a12      	ldr	r2, [pc, #72]	@ (8000ee0 <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef+0xc8>)
 8000e96:	2112      	movs	r1, #18
 8000e98:	4812      	ldr	r0, [pc, #72]	@ (8000ee4 <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef+0xcc>)
 8000e9a:	f00f f965 	bl	8010168 <__assert_func>
	this->i2cMasterSemaphoreGive();
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f000 f834 	bl	8000f0c <_ZN9i2cMaster22i2cMasterSemaphoreGiveEv>
	this->i2cMasterSemaphoreTake();
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f000 f821 	bl	8000eec <_ZN9i2cMaster22i2cMasterSemaphoreTakeEv>
	HAL_I2C_DeInit(p_hi2c1);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f004 feea 	bl	8005c88 <HAL_I2C_DeInit>
	MX_I2C1_Init();
 8000eb4:	f000 feaa 	bl	8001c0c <MX_I2C1_Init>
	//vTaskDelay(pdMS_TO_TICKS(1000));
	printf("%s bus had been initialized.\r\n",this->TAG);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	480a      	ldr	r0, [pc, #40]	@ (8000ee8 <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef+0xd0>)
 8000ec0:	f010 f946 	bl	8011150 <iprintf>
	this->i2cMasterSemaphoreGive();
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f000 f821 	bl	8000f0c <_ZN9i2cMaster22i2cMasterSemaphoreGiveEv>
}
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3714      	adds	r7, #20
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd90      	pop	{r4, r7, pc}
 8000ed4:	08014f1c 	.word	0x08014f1c
 8000ed8:	08014960 	.word	0x08014960
 8000edc:	08014970 	.word	0x08014970
 8000ee0:	080149ac 	.word	0x080149ac
 8000ee4:	080149d8 	.word	0x080149d8
 8000ee8:	08014a00 	.word	0x08014a00

08000eec <_ZN9i2cMaster22i2cMasterSemaphoreTakeEv>:

BaseType_t i2cMaster::i2cMasterSemaphoreTake(void){
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	return xSemaphoreTake(this->handle_i2cBinarySemaphore, portMAX_DELAY);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	691b      	ldr	r3, [r3, #16]
 8000ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8000efc:	4618      	mov	r0, r3
 8000efe:	f00c fc1d 	bl	800d73c <xQueueSemaphoreTake>
 8000f02:	4603      	mov	r3, r0
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <_ZN9i2cMaster22i2cMasterSemaphoreGiveEv>:

BaseType_t i2cMaster::i2cMasterSemaphoreGive(void){
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
	return xSemaphoreGive(this->handle_i2cBinarySemaphore);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6918      	ldr	r0, [r3, #16]
 8000f18:	2300      	movs	r3, #0
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	f00c f8fb 	bl	800d118 <xQueueGenericSend>
 8000f22:	4603      	mov	r3, r0
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <_ZN9i2cMaster4pingEt>:

HAL_StatusTypeDef i2cMaster::ping(uint16_t DevAddress_7bit){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	460b      	mov	r3, r1
 8000f36:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef retVal;
	retVal = HAL_I2C_IsDeviceReady(this->p_hi2c1, DevAddress_7bit<<1, 100, 1000);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6898      	ldr	r0, [r3, #8]
 8000f3c:	887b      	ldrh	r3, [r7, #2]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	b299      	uxth	r1, r3
 8000f42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f46:	2264      	movs	r2, #100	@ 0x64
 8000f48:	f004 ffbe 	bl	8005ec8 <HAL_I2C_IsDeviceReady>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	73fb      	strb	r3, [r7, #15]
	if(retVal==HAL_OK){
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d107      	bne.n	8000f66 <_ZN9i2cMaster4pingEt+0x3a>
			printf("%s i2c slave avaliable on address: 0x%x (7bit).\r\n", this->TAG, DevAddress_7bit/*<<1*/);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	887a      	ldrh	r2, [r7, #2]
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	480b      	ldr	r0, [pc, #44]	@ (8000f8c <_ZN9i2cMaster4pingEt+0x60>)
 8000f60:	f010 f8f6 	bl	8011150 <iprintf>
 8000f64:	e00c      	b.n	8000f80 <_ZN9i2cMaster4pingEt+0x54>
	}
	else{
		printf("%s i2c slave NOT avaliable on address: 0x%x (7bit).\r\n", this->TAG, DevAddress_7bit/*<<1*/);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	68db      	ldr	r3, [r3, #12]
 8000f6a:	887a      	ldrh	r2, [r7, #2]
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4808      	ldr	r0, [pc, #32]	@ (8000f90 <_ZN9i2cMaster4pingEt+0x64>)
 8000f70:	f010 f8ee 	bl	8011150 <iprintf>
		assert(0);
 8000f74:	4b07      	ldr	r3, [pc, #28]	@ (8000f94 <_ZN9i2cMaster4pingEt+0x68>)
 8000f76:	4a08      	ldr	r2, [pc, #32]	@ (8000f98 <_ZN9i2cMaster4pingEt+0x6c>)
 8000f78:	212c      	movs	r1, #44	@ 0x2c
 8000f7a:	4808      	ldr	r0, [pc, #32]	@ (8000f9c <_ZN9i2cMaster4pingEt+0x70>)
 8000f7c:	f00f f8f4 	bl	8010168 <__assert_func>
	}
	return retVal;
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	08014a20 	.word	0x08014a20
 8000f90:	08014a54 	.word	0x08014a54
 8000f94:	08014a8c 	.word	0x08014a8c
 8000f98:	08014a90 	.word	0x08014a90
 8000f9c:	080149d8 	.word	0x080149d8

08000fa0 <_ZN9i2cMasterD1Ev>:

i2cMaster::~i2cMaster() {
 8000fa0:	b590      	push	{r4, r7, lr}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	4a11      	ldr	r2, [pc, #68]	@ (8000ff0 <_ZN9i2cMasterD1Ev+0x50>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
	this->i2cMasterSemaphoreTake();
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f7ff ff9c 	bl	8000eec <_ZN9i2cMaster22i2cMasterSemaphoreTakeEv>
	HAL_I2C_DeInit(this->p_hi2c1);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f004 fe65 	bl	8005c88 <HAL_I2C_DeInit>
	this->p_hi2c1 = NULL;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
	delete this->pReceiveQueueObject;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	685c      	ldr	r4, [r3, #4]
 8000fc8:	2c00      	cmp	r4, #0
 8000fca:	d006      	beq.n	8000fda <_ZN9i2cMasterD1Ev+0x3a>
 8000fcc:	4620      	mov	r0, r4
 8000fce:	f000 f87d 	bl	80010cc <_ZN20i2cQueue4DynamicDataD1Ev>
 8000fd2:	2104      	movs	r1, #4
 8000fd4:	4620      	mov	r0, r4
 8000fd6:	f00f f89b 	bl	8010110 <_ZdlPvj>
	vSemaphoreDelete(this->handle_i2cBinarySemaphore);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	691b      	ldr	r3, [r3, #16]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f00c fcdb 	bl	800d99a <vQueueDelete>
}
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd90      	pop	{r4, r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	08014f1c 	.word	0x08014f1c

08000ff4 <_ZN9i2cMasterD0Ev>:
i2cMaster::~i2cMaster() {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
}
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f7ff ffcf 	bl	8000fa0 <_ZN9i2cMasterD1Ev>
 8001002:	2114      	movs	r1, #20
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f00f f883 	bl	8010110 <_ZdlPvj>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4618      	mov	r0, r3
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <_ZN9i2cMaster21while_I2C_STATE_READYEv>:

void i2cMaster::while_I2C_STATE_READY(void){
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
	while(HAL_I2C_GetState(this->p_hi2c1)!= HAL_I2C_STATE_READY){};
 800101c:	bf00      	nop
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	4618      	mov	r0, r3
 8001024:	f005 f919 	bl	800625a <HAL_I2C_GetState>
 8001028:	4603      	mov	r3, r0
 800102a:	2b20      	cmp	r3, #32
 800102c:	bf14      	ite	ne
 800102e:	2301      	movne	r3, #1
 8001030:	2300      	moveq	r3, #0
 8001032:	b2db      	uxtb	r3, r3
 8001034:	2b00      	cmp	r3, #0
 8001036:	d1f2      	bne.n	800101e <_ZN9i2cMaster21while_I2C_STATE_READYEv+0xa>
}
 8001038:	bf00      	nop
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <_ZN9i2cMaster22I2C_Master_Receive_DMAEtPht>:

HAL_StatusTypeDef i2cMaster::I2C_Master_Receive_DMA(uint16_t DevAddress_7bit, uint8_t *pData, uint16_t Size){
 8001042:	b580      	push	{r7, lr}
 8001044:	b084      	sub	sp, #16
 8001046:	af00      	add	r7, sp, #0
 8001048:	60f8      	str	r0, [r7, #12]
 800104a:	607a      	str	r2, [r7, #4]
 800104c:	461a      	mov	r2, r3
 800104e:	460b      	mov	r3, r1
 8001050:	817b      	strh	r3, [r7, #10]
 8001052:	4613      	mov	r3, r2
 8001054:	813b      	strh	r3, [r7, #8]
	this->while_I2C_STATE_READY();
 8001056:	68f8      	ldr	r0, [r7, #12]
 8001058:	f7ff ffdc 	bl	8001014 <_ZN9i2cMaster21while_I2C_STATE_READYEv>
	return HAL_I2C_Master_Receive_DMA(this->p_hi2c1, DevAddress_7bit<<1, pData, Size);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	6898      	ldr	r0, [r3, #8]
 8001060:	897b      	ldrh	r3, [r7, #10]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	b299      	uxth	r1, r3
 8001066:	893b      	ldrh	r3, [r7, #8]
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	f004 fe3d 	bl	8005ce8 <HAL_I2C_Master_Receive_DMA>
 800106e:	4603      	mov	r3, r0
}
 8001070:	4618      	mov	r0, r3
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <_ZN20i2cQueue4DynamicDataC1Em>:
 * @retval NONE
 *
 * @note   NONE
 * @warning NONE
 *******************************************************************/
i2cQueue4DynamicData::i2cQueue4DynamicData(UBaseType_t uxQueueLength)
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
{
	this->handler_Queue = NULL;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
	configASSERT(this->handler_Queue = xQueueCreate(uxQueueLength, sizeof(i2cFrame_transmitQueue)));
 8001088:	2200      	movs	r2, #0
 800108a:	210c      	movs	r1, #12
 800108c:	6838      	ldr	r0, [r7, #0]
 800108e:	f00b ffb0 	bl	800cff2 <xQueueGenericCreate>
 8001092:	4602      	mov	r2, r0
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	bf0c      	ite	eq
 80010a0:	2301      	moveq	r3, #1
 80010a2:	2300      	movne	r3, #0
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d00b      	beq.n	80010c2 <_ZN20i2cQueue4DynamicDataC1Em+0x4a>
	__asm volatile
 80010aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010ae:	f383 8811 	msr	BASEPRI, r3
 80010b2:	f3bf 8f6f 	isb	sy
 80010b6:	f3bf 8f4f 	dsb	sy
 80010ba:	60fb      	str	r3, [r7, #12]
}
 80010bc:	bf00      	nop
 80010be:	bf00      	nop
 80010c0:	e7fd      	b.n	80010be <_ZN20i2cQueue4DynamicDataC1Em+0x46>
}
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4618      	mov	r0, r3
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <_ZN20i2cQueue4DynamicDataD1Ev>:
 * 		   Indormacja o adresach tych danych zawarta jest w poli
 * 		   *pDataposzczególnych elementów trzymanych w
 * 		   i2cFrame_transmitQueue
 * @warning NONE
 *******************************************************************/
i2cQueue4DynamicData::~i2cQueue4DynamicData(void)
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
{
	i2cFrame_transmitQueue tempItemToDestrouQueue;
	BaseType_t tempQueueRetVal;
	do
	{
		tempQueueRetVal = xQueueReceive(this->handler_Queue, &tempItemToDestrouQueue, pdMS_TO_TICKS(1));
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f107 0108 	add.w	r1, r7, #8
 80010dc:	2201      	movs	r2, #1
 80010de:	4618      	mov	r0, r3
 80010e0:	f00c fa4a 	bl	800d578 <xQueueReceive>
 80010e4:	6178      	str	r0, [r7, #20]
		if (tempQueueRetVal == pdPASS)
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d105      	bne.n	80010f8 <_ZN20i2cQueue4DynamicDataD1Ev+0x2c>
		{
			this->QueueDeleteDataFromPointer(tempItemToDestrouQueue);
 80010ec:	f107 0308 	add.w	r3, r7, #8
 80010f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f000 f80d 	bl	8001112 <_ZN20i2cQueue4DynamicData26QueueDeleteDataFromPointerE22i2cFrame_transmitQueue>
		}			
	} while (tempQueueRetVal == pdPASS);
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d0ea      	beq.n	80010d4 <_ZN20i2cQueue4DynamicDataD1Ev+0x8>
	vQueueDelete(this->handler_Queue);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4618      	mov	r0, r3
 8001104:	f00c fc49 	bl	800d99a <vQueueDelete>
}
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4618      	mov	r0, r3
 800110c:	3718      	adds	r7, #24
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <_ZN20i2cQueue4DynamicData26QueueDeleteDataFromPointerE22i2cFrame_transmitQueue>:
 *
 * @note   NONE
 * @warning NONE
 *******************************************************************/
void i2cQueue4DynamicData::QueueDeleteDataFromPointer(i2cFrame_transmitQueue structWithPointer)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b084      	sub	sp, #16
 8001116:	af00      	add	r7, sp, #0
 8001118:	60f8      	str	r0, [r7, #12]
 800111a:	4638      	mov	r0, r7
 800111c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	delete[] static_cast<char*>(structWithPointer.pData);	
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <_ZN20i2cQueue4DynamicData26QueueDeleteDataFromPointerE22i2cFrame_transmitQueue+0x1c>
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	4618      	mov	r0, r3
 800112a:	f00e fff3 	bl	8010114 <_ZdaPv>
}
 800112e:	bf00      	nop
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <_ZN20i2cQueue4DynamicData12QueueReceiveEP22i2cFrame_transmitQueuem>:
 *
 * @note   NONE
 * @warning NONE
 *******************************************************************/
BaseType_t  i2cQueue4DynamicData::QueueReceive(/*void*/i2cFrame_transmitQueue * /*const*/ pvBuffer, TickType_t xTicksToWait)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b084      	sub	sp, #16
 800113a:	af00      	add	r7, sp, #0
 800113c:	60f8      	str	r0, [r7, #12]
 800113e:	60b9      	str	r1, [r7, #8]
 8001140:	607a      	str	r2, [r7, #4]
	
	return xQueueReceive(this->handler_Queue, pvBuffer, xTicksToWait);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	68b9      	ldr	r1, [r7, #8]
 800114a:	4618      	mov	r0, r3
 800114c:	f00c fa14 	bl	800d578 <xQueueReceive>
 8001150:	4603      	mov	r3, r0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <_ZN20i2cQueue4DynamicData9QueueSendEP22i2cFrame_transmitQueue>:
 * @warning W przypadku, gdy nie udąło się zapisać i2cFrame_transmitQueue
 * 			w kolejce następuje automatyczne zniszczenie lokowanych
 * 			dynamicznie danych, kóre są pod adresem *pData. Dane te to dane
 * 			jakie sąw ysyłane przez slave po i2c bus.
 *******************************************************************/
BaseType_t i2cQueue4DynamicData::QueueSend(/*const*/ /*void*/i2cFrame_transmitQueue * pvItemToQueue){
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
 8001162:	6039      	str	r1, [r7, #0]
	if (xQueueSend(this->handler_Queue, pvItemToQueue, pdMS_TO_TICKS(700)) == pdTRUE)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6818      	ldr	r0, [r3, #0]
 8001168:	2300      	movs	r3, #0
 800116a:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 800116e:	6839      	ldr	r1, [r7, #0]
 8001170:	f00b ffd2 	bl	800d118 <xQueueGenericSend>
 8001174:	4603      	mov	r3, r0
 8001176:	2b01      	cmp	r3, #1
 8001178:	bf0c      	ite	eq
 800117a:	2301      	moveq	r3, #1
 800117c:	2300      	movne	r3, #0
 800117e:	b2db      	uxtb	r3, r3
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <_ZN20i2cQueue4DynamicData9QueueSendEP22i2cFrame_transmitQueue+0x2e>
	{
		return pdTRUE;
 8001184:	2301      	movs	r3, #1
 8001186:	e005      	b.n	8001194 <_ZN20i2cQueue4DynamicData9QueueSendEP22i2cFrame_transmitQueue+0x3a>
	}
	else
	{
		this->QueueDeleteDataFromPointer(*pvItemToQueue);
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f7ff ffc0 	bl	8001112 <_ZN20i2cQueue4DynamicData26QueueDeleteDataFromPointerE22i2cFrame_transmitQueue>
		//delete[] static_cast<char*>(pointerToData);
		return pdFALSE;
 8001192:	2300      	movs	r3, #0
	}
}
 8001194:	4618      	mov	r0, r3
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <_ZN8menuItemC1EPKch>:

#include "SileliS_code/menuItem.h"



menuItem::menuItem(const char* tag, uint8_t execFunctionArraySize) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	4613      	mov	r3, r2
 80011a8:	71fb      	strb	r3, [r7, #7]
	if (execFunctionArraySize<= UINT8_MAX){
		this->mI_TAG = tag;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	68ba      	ldr	r2, [r7, #8]
 80011ae:	601a      	str	r2, [r3, #0]

		this->Init=nullptr;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	2200      	movs	r2, #0
 80011b4:	60da      	str	r2, [r3, #12]
		this->deInit = nullptr;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	2200      	movs	r2, #0
 80011ba:	611a      	str	r2, [r3, #16]

		this->pExecutableButtons = nullptr;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	2200      	movs	r2, #0
 80011c0:	605a      	str	r2, [r3, #4]
		this->create_pExecutableButtonsArray(execFunctionArraySize);
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	4619      	mov	r1, r3
 80011c6:	68f8      	ldr	r0, [r7, #12]
 80011c8:	f000 f826 	bl	8001218 <_ZN8menuItem30create_pExecutableButtonsArrayEh>
		printf("%s: menuItem with %d executable buttons had been created. Please append functiond.\r\n", this->mI_TAG, this->execFunctionArrySize);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	6819      	ldr	r1, [r3, #0]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	7a1b      	ldrb	r3, [r3, #8]
 80011d4:	461a      	mov	r2, r3
 80011d6:	4804      	ldr	r0, [pc, #16]	@ (80011e8 <_ZN8menuItemC1EPKch+0x4c>)
 80011d8:	f00f ffba 	bl	8011150 <iprintf>
	}
};
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	4618      	mov	r0, r3
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	08014abc 	.word	0x08014abc

080011ec <_ZN8menuItem30delete_pExecutableButtonsArrayEv>:

void menuItem::delete_pExecutableButtonsArray(void){
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	if (this->pExecutableButtons!=nullptr)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d008      	beq.n	800120e <_ZN8menuItem30delete_pExecutableButtonsArrayEv+0x22>
		delete [] pExecutableButtons;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d004      	beq.n	800120e <_ZN8menuItem30delete_pExecutableButtonsArrayEv+0x22>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	4618      	mov	r0, r3
 800120a:	f00e ff83 	bl	8010114 <_ZdaPv>
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
	...

08001218 <_ZN8menuItem30create_pExecutableButtonsArrayEh>:


bool menuItem::create_pExecutableButtonsArray(uint8_t arraySize){
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	70fb      	strb	r3, [r7, #3]
	this->pExecutableButtons = new execute_t[arraySize];
 8001224:	78fb      	ldrb	r3, [r7, #3]
 8001226:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800122a:	d201      	bcs.n	8001230 <_ZN8menuItem30create_pExecutableButtonsArrayEh+0x18>
 800122c:	00db      	lsls	r3, r3, #3
 800122e:	e001      	b.n	8001234 <_ZN8menuItem30create_pExecutableButtonsArrayEh+0x1c>
 8001230:	f04f 33ff 	mov.w	r3, #4294967295
 8001234:	4618      	mov	r0, r3
 8001236:	f00e ff82 	bl	801013e <_Znaj>
 800123a:	4603      	mov	r3, r0
 800123c:	461a      	mov	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	605a      	str	r2, [r3, #4]
	assert(this->pExecutableButtons);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d105      	bne.n	8001256 <_ZN8menuItem30create_pExecutableButtonsArrayEh+0x3e>
 800124a:	4b0f      	ldr	r3, [pc, #60]	@ (8001288 <_ZN8menuItem30create_pExecutableButtonsArrayEh+0x70>)
 800124c:	4a0f      	ldr	r2, [pc, #60]	@ (800128c <_ZN8menuItem30create_pExecutableButtonsArrayEh+0x74>)
 800124e:	2121      	movs	r1, #33	@ 0x21
 8001250:	480f      	ldr	r0, [pc, #60]	@ (8001290 <_ZN8menuItem30create_pExecutableButtonsArrayEh+0x78>)
 8001252:	f00e ff89 	bl	8010168 <__assert_func>
	if (this->pExecutableButtons){
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d00f      	beq.n	800127e <_ZN8menuItem30create_pExecutableButtonsArrayEh+0x66>
		memset(this->pExecutableButtons, 0, sizeof(execute_t)*arraySize);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6858      	ldr	r0, [r3, #4]
 8001262:	78fb      	ldrb	r3, [r7, #3]
 8001264:	00db      	lsls	r3, r3, #3
 8001266:	461a      	mov	r2, r3
 8001268:	2100      	movs	r1, #0
 800126a:	f010 f8d9 	bl	8011420 <memset>
		this->execFunctionArrySize=arraySize;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	78fa      	ldrb	r2, [r7, #3]
 8001272:	721a      	strb	r2, [r3, #8]
		this->execFunctionArryAppended = 0;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	725a      	strb	r2, [r3, #9]
		return true;
 800127a:	2301      	movs	r3, #1
 800127c:	e000      	b.n	8001280 <_ZN8menuItem30create_pExecutableButtonsArrayEh+0x68>
	}
	return false;
 800127e:	2300      	movs	r3, #0
}
 8001280:	4618      	mov	r0, r3
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	08014b14 	.word	0x08014b14
 800128c:	08014b30 	.word	0x08014b30
 8001290:	08014b68 	.word	0x08014b68

08001294 <_ZN8menuItemD1Ev>:

void menuItem::mI_executeDeInit(void){
	this->executeFunctionPointer(this->deInit);
}

menuItem::~menuItem(){
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
	this->delete_pExecutableButtonsArray();
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f7ff ffa5 	bl	80011ec <_ZN8menuItem30delete_pExecutableButtonsArrayEv>
}
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4618      	mov	r0, r3
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <_ZN6myListC1EPKch>:
myList* myList::head = nullptr;
myList* myList::currentListNode = nullptr;
uint8_t myList::indexCounter = 0;

// Konstruktor
myList::myList(const char* nodeName, uint8_t execFunctionArraySize)
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	4613      	mov	r3, r2
 80012b8:	71fb      	strb	r3, [r7, #7]
    : menuItem(nodeName, execFunctionArraySize) {
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	79fa      	ldrb	r2, [r7, #7]
 80012be:	68b9      	ldr	r1, [r7, #8]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ff6b 	bl	800119c <_ZN8menuItemC1EPKch>
	if (head==nullptr){
 80012c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001300 <_ZN6myListC1EPKch+0x54>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d102      	bne.n	80012d4 <_ZN6myListC1EPKch+0x28>
		head=this;
 80012ce:	4a0c      	ldr	r2, [pc, #48]	@ (8001300 <_ZN6myListC1EPKch+0x54>)
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	6013      	str	r3, [r2, #0]
	}
	nextListNode=nullptr;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	2200      	movs	r2, #0
 80012d8:	615a      	str	r2, [r3, #20]
	currentListNode=this;
 80012da:	4a0a      	ldr	r2, [pc, #40]	@ (8001304 <_ZN6myListC1EPKch+0x58>)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	6013      	str	r3, [r2, #0]
	indexCounter++;
 80012e0:	4b09      	ldr	r3, [pc, #36]	@ (8001308 <_ZN6myListC1EPKch+0x5c>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	3301      	adds	r3, #1
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	4b07      	ldr	r3, [pc, #28]	@ (8001308 <_ZN6myListC1EPKch+0x5c>)
 80012ea:	701a      	strb	r2, [r3, #0]
	this->index = indexCounter;
 80012ec:	4b06      	ldr	r3, [pc, #24]	@ (8001308 <_ZN6myListC1EPKch+0x5c>)
 80012ee:	781a      	ldrb	r2, [r3, #0]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	761a      	strb	r2, [r3, #24]
}
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4618      	mov	r0, r3
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	240001f8 	.word	0x240001f8
 8001304:	240001fc 	.word	0x240001fc
 8001308:	24000200 	.word	0x24000200

0800130c <_ZN6myListD1Ev>:
    //indexCounter = 0;
}*/


// Destruktor
myList::~myList() {
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
//	if(head==nullptr)
//		return;
}
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff ffbc 	bl	8001294 <_ZN8menuItemD1Ev>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4618      	mov	r0, r3
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <_ZN6myList8addAtEndEPKch>:
    currentListNode = newNode; // Ustawienie current na nowo dodany element
    renumberNodes();
}

// Dodanie elementu na końcu listy
void myList::addAtEnd(const char* nodeName, uint8_t execFunctionArraySize) {
 8001328:	b590      	push	{r4, r7, lr}
 800132a:	b087      	sub	sp, #28
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	4613      	mov	r3, r2
 8001334:	71fb      	strb	r3, [r7, #7]
    if (!canAddItem()) return;
 8001336:	68f8      	ldr	r0, [r7, #12]
 8001338:	f000 f858 	bl	80013ec <_ZNK6myList10canAddItemEv>
 800133c:	4603      	mov	r3, r0
 800133e:	f083 0301 	eor.w	r3, r3, #1
 8001342:	b2db      	uxtb	r3, r3
 8001344:	2b00      	cmp	r3, #0
 8001346:	d128      	bne.n	800139a <_ZN6myList8addAtEndEPKch+0x72>

    myList* newNode = new myList(nodeName, execFunctionArraySize);
 8001348:	201c      	movs	r0, #28
 800134a:	f00e fee7 	bl	801011c <_Znwj>
 800134e:	4603      	mov	r3, r0
 8001350:	461c      	mov	r4, r3
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	461a      	mov	r2, r3
 8001356:	68b9      	ldr	r1, [r7, #8]
 8001358:	4620      	mov	r0, r4
 800135a:	f7ff ffa7 	bl	80012ac <_ZN6myListC1EPKch>
 800135e:	613c      	str	r4, [r7, #16]
    if (!head) {
 8001360:	4b10      	ldr	r3, [pc, #64]	@ (80013a4 <_ZN6myList8addAtEndEPKch+0x7c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d103      	bne.n	8001370 <_ZN6myList8addAtEndEPKch+0x48>
        head = newNode;
 8001368:	4a0e      	ldr	r2, [pc, #56]	@ (80013a4 <_ZN6myList8addAtEndEPKch+0x7c>)
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	6013      	str	r3, [r2, #0]
 800136e:	e00d      	b.n	800138c <_ZN6myList8addAtEndEPKch+0x64>
    } else {
        myList* temp = head;
 8001370:	4b0c      	ldr	r3, [pc, #48]	@ (80013a4 <_ZN6myList8addAtEndEPKch+0x7c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	617b      	str	r3, [r7, #20]
        while (temp->nextListNode) {
 8001376:	e002      	b.n	800137e <_ZN6myList8addAtEndEPKch+0x56>
            temp = temp->nextListNode;
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	695b      	ldr	r3, [r3, #20]
 800137c:	617b      	str	r3, [r7, #20]
        while (temp->nextListNode) {
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	695b      	ldr	r3, [r3, #20]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d1f8      	bne.n	8001378 <_ZN6myList8addAtEndEPKch+0x50>
        }
        temp->nextListNode = newNode;
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	615a      	str	r2, [r3, #20]
    }
    currentListNode = newNode; // Ustawienie current na nowo dodany element
 800138c:	4a06      	ldr	r2, [pc, #24]	@ (80013a8 <_ZN6myList8addAtEndEPKch+0x80>)
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	6013      	str	r3, [r2, #0]
    renumberNodes();
 8001392:	68f8      	ldr	r0, [r7, #12]
 8001394:	f000 f80a 	bl	80013ac <_ZN6myList13renumberNodesEv>
 8001398:	e000      	b.n	800139c <_ZN6myList8addAtEndEPKch+0x74>
    if (!canAddItem()) return;
 800139a:	bf00      	nop
}
 800139c:	371c      	adds	r7, #28
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd90      	pop	{r4, r7, pc}
 80013a2:	bf00      	nop
 80013a4:	240001f8 	.word	0x240001f8
 80013a8:	240001fc 	.word	0x240001fc

080013ac <_ZN6myList13renumberNodesEv>:
        //std::cout << "No current node." << std::endl;
    }
}

// Renumeracja węzłów listy
void myList::renumberNodes() {
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
    myList* temp = head;
 80013b4:	4b0c      	ldr	r3, [pc, #48]	@ (80013e8 <_ZN6myList13renumberNodesEv+0x3c>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	60fb      	str	r3, [r7, #12]
    uint8_t tempIndex = 0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	72fb      	strb	r3, [r7, #11]
    while (temp) {
 80013be:	e008      	b.n	80013d2 <_ZN6myList13renumberNodesEv+0x26>
        temp->index = ++tempIndex;
 80013c0:	7afb      	ldrb	r3, [r7, #11]
 80013c2:	3301      	adds	r3, #1
 80013c4:	72fb      	strb	r3, [r7, #11]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	7afa      	ldrb	r2, [r7, #11]
 80013ca:	761a      	strb	r2, [r3, #24]
        temp = temp->nextListNode;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	695b      	ldr	r3, [r3, #20]
 80013d0:	60fb      	str	r3, [r7, #12]
    while (temp) {
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d1f3      	bne.n	80013c0 <_ZN6myList13renumberNodesEv+0x14>
    }
    //indexCounter = index;
}
 80013d8:	bf00      	nop
 80013da:	bf00      	nop
 80013dc:	3714      	adds	r7, #20
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	240001f8 	.word	0x240001f8

080013ec <_ZNK6myList10canAddItemEv>:

// Sprawdzanie, czy można dodać element do listy
bool myList::canAddItem() const {
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
    return indexCounter < UINT8_MAX; // Maksymalna wartość uint8_t to 255, więc sprawdzamy, czy jest mniejsza niż 255
 80013f4:	4b06      	ldr	r3, [pc, #24]	@ (8001410 <_ZNK6myList10canAddItemEv+0x24>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2bff      	cmp	r3, #255	@ 0xff
 80013fa:	bf14      	ite	ne
 80013fc:	2301      	movne	r3, #1
 80013fe:	2300      	moveq	r3, #0
 8001400:	b2db      	uxtb	r3, r3
}
 8001402:	4618      	mov	r0, r3
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	24000200 	.word	0x24000200

08001414 <__io_putchar>:

//#include <printfRedirect.h>
#include <SileliS_code/printfRedirect.h>

//printf to uart redirection
void __io_putchar(uint8_t ch) {
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, &ch, 1, 0xffff);
 800141e:	1df9      	adds	r1, r7, #7
 8001420:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001424:	2201      	movs	r2, #1
 8001426:	4803      	ldr	r0, [pc, #12]	@ (8001434 <__io_putchar+0x20>)
 8001428:	f00a f8ba 	bl	800b5a0 <HAL_UART_Transmit>
}
 800142c:	bf00      	nop
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	240003b0 	.word	0x240003b0

08001438 <_ZN9radioMenu27createMenu_peripheryDevicesEv>:
 */

#include <SileliS_code/radioMenu.h>


void radioMenu::createMenu_peripheryDevices(void){
 8001438:	b590      	push	{r4, r7, lr}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
	//tworzenie manu peripheryDevices
	this->peripheryDevices = new myList("EQ1",3);
 8001440:	201c      	movs	r0, #28
 8001442:	f00e fe6b 	bl	801011c <_Znwj>
 8001446:	4603      	mov	r3, r0
 8001448:	461c      	mov	r4, r3
 800144a:	2203      	movs	r2, #3
 800144c:	490f      	ldr	r1, [pc, #60]	@ (800148c <_ZN9radioMenu27createMenu_peripheryDevicesEv+0x54>)
 800144e:	4620      	mov	r0, r4
 8001450:	f7ff ff2c 	bl	80012ac <_ZN6myListC1EPKch>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	61dc      	str	r4, [r3, #28]
	this->peripheryDevices->addAtEnd("EQ2", 3);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	69db      	ldr	r3, [r3, #28]
 800145c:	2203      	movs	r2, #3
 800145e:	490c      	ldr	r1, [pc, #48]	@ (8001490 <_ZN9radioMenu27createMenu_peripheryDevicesEv+0x58>)
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ff61 	bl	8001328 <_ZN6myList8addAtEndEPKch>
	this->peripheryDevices->addAtEnd("EQ3", 3);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	69db      	ldr	r3, [r3, #28]
 800146a:	2203      	movs	r2, #3
 800146c:	4909      	ldr	r1, [pc, #36]	@ (8001494 <_ZN9radioMenu27createMenu_peripheryDevicesEv+0x5c>)
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff ff5a 	bl	8001328 <_ZN6myList8addAtEndEPKch>
	this->peripheryDevices->addAtEnd("EQ4", 3);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	69db      	ldr	r3, [r3, #28]
 8001478:	2203      	movs	r2, #3
 800147a:	4907      	ldr	r1, [pc, #28]	@ (8001498 <_ZN9radioMenu27createMenu_peripheryDevicesEv+0x60>)
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff ff53 	bl	8001328 <_ZN6myList8addAtEndEPKch>
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	bd90      	pop	{r4, r7, pc}
 800148a:	bf00      	nop
 800148c:	08014cc4 	.word	0x08014cc4
 8001490:	08014cc8 	.word	0x08014cc8
 8001494:	08014ccc 	.word	0x08014ccc
 8001498:	08014cd0 	.word	0x08014cd0

0800149c <_ZN9radioMenuC1Ev>:
	this->audioDevices->addAtEnd("De3", 3);
	this->audioDevices->addAtEnd("De4", 3);
	this->setCurrentDevice_onAudioDevices();
}

radioMenu::radioMenu() {
 800149c:	b590      	push	{r4, r7, lr}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	4a24      	ldr	r2, [pc, #144]	@ (8001538 <_ZN9radioMenuC1Ev+0x9c>)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a23      	ldr	r2, [pc, #140]	@ (800153c <_ZN9radioMenuC1Ev+0xa0>)
 80014ae:	605a      	str	r2, [r3, #4]
	// TODO Auto-generated constructor stub

	queueRadioMenuKbrd = nullptr;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
	configASSERT(queueRadioMenuKbrd = xQueueCreate(20, sizeof(keyboardUnion)));
 80014b6:	2200      	movs	r2, #0
 80014b8:	2102      	movs	r1, #2
 80014ba:	2014      	movs	r0, #20
 80014bc:	f00b fd99 	bl	800cff2 <xQueueGenericCreate>
 80014c0:	4602      	mov	r2, r0
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	bf0c      	ite	eq
 80014ce:	2301      	moveq	r3, #1
 80014d0:	2300      	movne	r3, #0
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d00b      	beq.n	80014f0 <_ZN9radioMenuC1Ev+0x54>
	__asm volatile
 80014d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80014dc:	f383 8811 	msr	BASEPRI, r3
 80014e0:	f3bf 8f6f 	isb	sy
 80014e4:	f3bf 8f4f 	dsb	sy
 80014e8:	60fb      	str	r3, [r7, #12]
}
 80014ea:	bf00      	nop
 80014ec:	bf00      	nop
 80014ee:	e7fd      	b.n	80014ec <_ZN9radioMenuC1Ev+0x50>
	taskHandle_manageTheRadioManue = nullptr;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	60da      	str	r2, [r3, #12]

	this->radioMainMenu		= nullptr;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	611a      	str	r2, [r3, #16]
	this->curretDevice		= nullptr;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2200      	movs	r2, #0
 8001500:	615a      	str	r2, [r3, #20]
	this->audioDevices		= nullptr;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	619a      	str	r2, [r3, #24]
	this->peripheryDevices 	= nullptr;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	61da      	str	r2, [r3, #28]

	//tworzenie manu peripheryDevices
	this->createMenu_peripheryDevices();
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7ff ff92 	bl	8001438 <_ZN9radioMenu27createMenu_peripheryDevicesEv>



	//tworzę menu głowne radio do posługi klawiszy głownych tj. but_ON/OFF, long_but_ON/OFF,VOL_CW,VOL_CCW,but_EQU,long_but_EQU
	//tylko jedno płaskie menu, ktore zarządza pozostałymi
	this->radioMainMenu = new myList("MainMenu",5);
 8001514:	201c      	movs	r0, #28
 8001516:	f00e fe01 	bl	801011c <_Znwj>
 800151a:	4603      	mov	r3, r0
 800151c:	461c      	mov	r4, r3
 800151e:	2205      	movs	r2, #5
 8001520:	4907      	ldr	r1, [pc, #28]	@ (8001540 <_ZN9radioMenuC1Ev+0xa4>)
 8001522:	4620      	mov	r0, r4
 8001524:	f7ff fec2 	bl	80012ac <_ZN6myListC1EPKch>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	611c      	str	r4, [r3, #16]
	//this->radioMainMenu->mI_appendExecFunctionArry(buttonSequence, newFunc)
}
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4618      	mov	r0, r3
 8001530:	3714      	adds	r7, #20
 8001532:	46bd      	mov	sp, r7
 8001534:	bd90      	pop	{r4, r7, pc}
 8001536:	bf00      	nop
 8001538:	08014f2c 	.word	0x08014f2c
 800153c:	08014ce4 	.word	0x08014ce4
 8001540:	08014cf4 	.word	0x08014cf4

08001544 <_ZN9radioMenu22queueRadioMenuKbrdSendEPKv>:
void radioMenu::setCurrentDevice_onPeripheryDevices(void){
	this->curretDevice=this->peripheryDevices;
}


BaseType_t radioMenu::queueRadioMenuKbrdSend(const void * kbrdUnion){
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
	return xQueueSend(this->queueRadioMenuKbrd, kbrdUnion, pdMS_TO_TICKS(700));
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6898      	ldr	r0, [r3, #8]
 8001552:	2300      	movs	r3, #0
 8001554:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8001558:	6839      	ldr	r1, [r7, #0]
 800155a:	f00b fddd 	bl	800d118 <xQueueGenericSend>
 800155e:	4603      	mov	r3, r0
}
 8001560:	4618      	mov	r0, r3
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <_ZN9radioMenu22getTaskHandle_tPointerEv>:

TaskHandle_t* radioMenu::getTaskHandle_tPointer(void){
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
	return &taskHandle_manageTheRadioManue;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	330c      	adds	r3, #12
}
 8001574:	4618      	mov	r0, r3
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <_ZN9radioMenu19manageTheRadioManueEPv>:

void	radioMenu::manageTheRadioManue(void* noThink){
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af02      	add	r7, sp, #8
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
	keyboardUnion kbrdToRadioMenu;
	while(1)
	{
		if(xQueueReceive(this->queueRadioMenuKbrd, &kbrdToRadioMenu, portMAX_DELAY)){
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	f107 010c 	add.w	r1, r7, #12
 8001592:	f04f 32ff 	mov.w	r2, #4294967295
 8001596:	4618      	mov	r0, r3
 8001598:	f00b ffee 	bl	800d578 <xQueueReceive>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	bf14      	ite	ne
 80015a2:	2301      	movne	r3, #1
 80015a4:	2300      	moveq	r3, #0
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d0ee      	beq.n	800158a <_ZN9radioMenu19manageTheRadioManueEPv+0xa>
			printf("%c 0x%02x  in hex: 0x%02x 0x%02x\r\n", kbrdToRadioMenu.array[0],kbrdToRadioMenu.array[1], kbrdToRadioMenu.array[0],kbrdToRadioMenu.array[1] );
 80015ac:	7b3b      	ldrb	r3, [r7, #12]
 80015ae:	4619      	mov	r1, r3
 80015b0:	7b7b      	ldrb	r3, [r7, #13]
 80015b2:	461a      	mov	r2, r3
 80015b4:	7b3b      	ldrb	r3, [r7, #12]
 80015b6:	4618      	mov	r0, r3
 80015b8:	7b7b      	ldrb	r3, [r7, #13]
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	4603      	mov	r3, r0
 80015be:	4802      	ldr	r0, [pc, #8]	@ (80015c8 <_ZN9radioMenu19manageTheRadioManueEPv+0x48>)
 80015c0:	f00f fdc6 	bl	8011150 <iprintf>
		if(xQueueReceive(this->queueRadioMenuKbrd, &kbrdToRadioMenu, portMAX_DELAY)){
 80015c4:	e7e1      	b.n	800158a <_ZN9radioMenu19manageTheRadioManueEPv+0xa>
 80015c6:	bf00      	nop
 80015c8:	08014d00 	.word	0x08014d00

080015cc <_ZN9radioMenuD1Ev>:
		}
	}
}

radioMenu::~radioMenu() {
 80015cc:	b590      	push	{r4, r7, lr}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	4a58      	ldr	r2, [pc, #352]	@ (8001738 <_ZN9radioMenuD1Ev+0x16c>)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
	vTaskDelete(this->taskHandle_manageTheRadioManue);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	4618      	mov	r0, r3
 80015e0:	f00c fd6e 	bl	800e0c0 <vTaskDelete>
	vQueueDelete(queueRadioMenuKbrd);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f00c f9d6 	bl	800d99a <vQueueDelete>

	delete [] this->radioMainMenu;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	691b      	ldr	r3, [r3, #16]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d023      	beq.n	800163e <_ZN9radioMenuD1Ev+0x72>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6919      	ldr	r1, [r3, #16]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	3b04      	subs	r3, #4
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	4613      	mov	r3, r2
 8001604:	00db      	lsls	r3, r3, #3
 8001606:	1a9b      	subs	r3, r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	18cc      	adds	r4, r1, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	691b      	ldr	r3, [r3, #16]
 8001610:	429c      	cmp	r4, r3
 8001612:	d004      	beq.n	800161e <_ZN9radioMenuD1Ev+0x52>
 8001614:	3c1c      	subs	r4, #28
 8001616:	4620      	mov	r0, r4
 8001618:	f7ff fe78 	bl	800130c <_ZN6myListD1Ev>
 800161c:	e7f6      	b.n	800160c <_ZN9radioMenuD1Ev+0x40>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	691b      	ldr	r3, [r3, #16]
 8001622:	f1a3 0008 	sub.w	r0, r3, #8
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	3b04      	subs	r3, #4
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	4613      	mov	r3, r2
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	1a9b      	subs	r3, r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	3308      	adds	r3, #8
 8001638:	4619      	mov	r1, r3
 800163a:	f00e fd6d 	bl	8010118 <_ZdaPvj>
	delete [] this->curretDevice;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d023      	beq.n	800168e <_ZN9radioMenuD1Ev+0xc2>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6959      	ldr	r1, [r3, #20]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	3b04      	subs	r3, #4
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	4613      	mov	r3, r2
 8001654:	00db      	lsls	r3, r3, #3
 8001656:	1a9b      	subs	r3, r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	18cc      	adds	r4, r1, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	695b      	ldr	r3, [r3, #20]
 8001660:	429c      	cmp	r4, r3
 8001662:	d004      	beq.n	800166e <_ZN9radioMenuD1Ev+0xa2>
 8001664:	3c1c      	subs	r4, #28
 8001666:	4620      	mov	r0, r4
 8001668:	f7ff fe50 	bl	800130c <_ZN6myListD1Ev>
 800166c:	e7f6      	b.n	800165c <_ZN9radioMenuD1Ev+0x90>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	f1a3 0008 	sub.w	r0, r3, #8
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	3b04      	subs	r3, #4
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	4613      	mov	r3, r2
 8001680:	00db      	lsls	r3, r3, #3
 8001682:	1a9b      	subs	r3, r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	3308      	adds	r3, #8
 8001688:	4619      	mov	r1, r3
 800168a:	f00e fd45 	bl	8010118 <_ZdaPvj>
	delete [] this->audioDevices;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d023      	beq.n	80016de <_ZN9radioMenuD1Ev+0x112>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6999      	ldr	r1, [r3, #24]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	3b04      	subs	r3, #4
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	4613      	mov	r3, r2
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	1a9b      	subs	r3, r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	18cc      	adds	r4, r1, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	429c      	cmp	r4, r3
 80016b2:	d004      	beq.n	80016be <_ZN9radioMenuD1Ev+0xf2>
 80016b4:	3c1c      	subs	r4, #28
 80016b6:	4620      	mov	r0, r4
 80016b8:	f7ff fe28 	bl	800130c <_ZN6myListD1Ev>
 80016bc:	e7f6      	b.n	80016ac <_ZN9radioMenuD1Ev+0xe0>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	699b      	ldr	r3, [r3, #24]
 80016c2:	f1a3 0008 	sub.w	r0, r3, #8
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	3b04      	subs	r3, #4
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	4613      	mov	r3, r2
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	1a9b      	subs	r3, r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	3308      	adds	r3, #8
 80016d8:	4619      	mov	r1, r3
 80016da:	f00e fd1d 	bl	8010118 <_ZdaPvj>
	delete [] this->peripheryDevices;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	69db      	ldr	r3, [r3, #28]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d023      	beq.n	800172e <_ZN9radioMenuD1Ev+0x162>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	69d9      	ldr	r1, [r3, #28]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	69db      	ldr	r3, [r3, #28]
 80016ee:	3b04      	subs	r3, #4
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	4613      	mov	r3, r2
 80016f4:	00db      	lsls	r3, r3, #3
 80016f6:	1a9b      	subs	r3, r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	18cc      	adds	r4, r1, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	69db      	ldr	r3, [r3, #28]
 8001700:	429c      	cmp	r4, r3
 8001702:	d004      	beq.n	800170e <_ZN9radioMenuD1Ev+0x142>
 8001704:	3c1c      	subs	r4, #28
 8001706:	4620      	mov	r0, r4
 8001708:	f7ff fe00 	bl	800130c <_ZN6myListD1Ev>
 800170c:	e7f6      	b.n	80016fc <_ZN9radioMenuD1Ev+0x130>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	69db      	ldr	r3, [r3, #28]
 8001712:	f1a3 0008 	sub.w	r0, r3, #8
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	69db      	ldr	r3, [r3, #28]
 800171a:	3b04      	subs	r3, #4
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	4613      	mov	r3, r2
 8001720:	00db      	lsls	r3, r3, #3
 8001722:	1a9b      	subs	r3, r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	3308      	adds	r3, #8
 8001728:	4619      	mov	r1, r3
 800172a:	f00e fcf5 	bl	8010118 <_ZdaPvj>
}
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4618      	mov	r0, r3
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	bd90      	pop	{r4, r7, pc}
 8001738:	08014f2c 	.word	0x08014f2c

0800173c <_ZN9radioMenuD0Ev>:
radioMenu::~radioMenu() {
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
}
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f7ff ff41 	bl	80015cc <_ZN9radioMenuD1Ev>
 800174a:	2120      	movs	r1, #32
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f00e fcdf 	bl	8010110 <_ZdlPvj>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4618      	mov	r0, r3
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <_ZL35i2cMaster_pReceiveQueueObjectParserPv>:
static i2cMaster* pi2cMaster=nullptr;  										//wsyaźnik do obiektu służącego do komunikacji stm32 po i2c jako master
static esp32_i2cComunicationDriver* pESP32=nullptr; 							//wsyaźnik do obiektu obsługującego komunikację z ESP32
/*static*/ radioMenu* pRadioMenu=nullptr;


static void i2cMaster_pReceiveQueueObjectParser(void *pNothing){
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
	i2cFrame_transmitQueue tempI2CReceiveFrame;
	while(1){
		if(pi2cMaster->pReceiveQueueObject->QueueReceive(&tempI2CReceiveFrame, portMAX_DELAY)==pdPASS){
 8001764:	4b1b      	ldr	r3, [pc, #108]	@ (80017d4 <_ZL35i2cMaster_pReceiveQueueObjectParserPv+0x78>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f107 010c 	add.w	r1, r7, #12
 800176e:	f04f 32ff 	mov.w	r2, #4294967295
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff fcdf 	bl	8001136 <_ZN20i2cQueue4DynamicData12QueueReceiveEP22i2cFrame_transmitQueuem>
 8001778:	4603      	mov	r3, r0
 800177a:	2b01      	cmp	r3, #1
 800177c:	bf0c      	ite	eq
 800177e:	2301      	moveq	r3, #1
 8001780:	2300      	movne	r3, #0
 8001782:	b2db      	uxtb	r3, r3
 8001784:	2b00      	cmp	r3, #0
 8001786:	d0ed      	beq.n	8001764 <_ZL35i2cMaster_pReceiveQueueObjectParserPv+0x8>
			switch(tempI2CReceiveFrame.slaveDevice7bitAddress)
 8001788:	7b3b      	ldrb	r3, [r7, #12]
 800178a:	2b3c      	cmp	r3, #60	@ 0x3c
 800178c:	d110      	bne.n	80017b0 <_ZL35i2cMaster_pReceiveQueueObjectParserPv+0x54>
			{
			case I2C_SLAVE_ADDRESS_ESP32:
				pESP32->parseReceivedData(tempI2CReceiveFrame);
 800178e:	4b12      	ldr	r3, [pc, #72]	@ (80017d8 <_ZL35i2cMaster_pReceiveQueueObjectParserPv+0x7c>)
 8001790:	6818      	ldr	r0, [r3, #0]
 8001792:	f107 030c 	add.w	r3, r7, #12
 8001796:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001798:	f7ff faec 	bl	8000d74 <_ZN27esp32_i2cComunicationDriver17parseReceivedDataE22i2cFrame_transmitQueue>
				break;
 800179c:	bf00      	nop
			default:
				printf("i2cMaster_pReceiveQueueObjectParser: Unknown i2c slave address: 0x%x (7bit).\r\n", tempI2CReceiveFrame.slaveDevice7bitAddress);
				pi2cMaster->ping(tempI2CReceiveFrame.slaveDevice7bitAddress);
				assert(0);
			}
			pi2cMaster->pReceiveQueueObject->QueueDeleteDataFromPointer(tempI2CReceiveFrame);			//BARDZO WAŻNA FUNKCJA, po parsowaniu otrzymanego z i2c pakiedy danych, który jest przetrzymywany pod zmienną alokowaną dynamicznie niszczy tą zmienną. Ta funkcja, w tym miejscu zapobiega wyciekom pamięci!!!!!
 800179e:	4b0d      	ldr	r3, [pc, #52]	@ (80017d4 <_ZL35i2cMaster_pReceiveQueueObjectParserPv+0x78>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6858      	ldr	r0, [r3, #4]
 80017a4:	f107 030c 	add.w	r3, r7, #12
 80017a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017aa:	f7ff fcb2 	bl	8001112 <_ZN20i2cQueue4DynamicData26QueueDeleteDataFromPointerE22i2cFrame_transmitQueue>
 80017ae:	e7d9      	b.n	8001764 <_ZL35i2cMaster_pReceiveQueueObjectParserPv+0x8>
				printf("i2cMaster_pReceiveQueueObjectParser: Unknown i2c slave address: 0x%x (7bit).\r\n", tempI2CReceiveFrame.slaveDevice7bitAddress);
 80017b0:	7b3b      	ldrb	r3, [r7, #12]
 80017b2:	4619      	mov	r1, r3
 80017b4:	4809      	ldr	r0, [pc, #36]	@ (80017dc <_ZL35i2cMaster_pReceiveQueueObjectParserPv+0x80>)
 80017b6:	f00f fccb 	bl	8011150 <iprintf>
				pi2cMaster->ping(tempI2CReceiveFrame.slaveDevice7bitAddress);
 80017ba:	4b06      	ldr	r3, [pc, #24]	@ (80017d4 <_ZL35i2cMaster_pReceiveQueueObjectParserPv+0x78>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	7b3a      	ldrb	r2, [r7, #12]
 80017c0:	4611      	mov	r1, r2
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff fbb2 	bl	8000f2c <_ZN9i2cMaster4pingEt>
				assert(0);
 80017c8:	4b05      	ldr	r3, [pc, #20]	@ (80017e0 <_ZL35i2cMaster_pReceiveQueueObjectParserPv+0x84>)
 80017ca:	4a06      	ldr	r2, [pc, #24]	@ (80017e4 <_ZL35i2cMaster_pReceiveQueueObjectParserPv+0x88>)
 80017cc:	2123      	movs	r1, #35	@ 0x23
 80017ce:	4806      	ldr	r0, [pc, #24]	@ (80017e8 <_ZL35i2cMaster_pReceiveQueueObjectParserPv+0x8c>)
 80017d0:	f00e fcca 	bl	8010168 <__assert_func>
 80017d4:	2400020c 	.word	0x2400020c
 80017d8:	24000210 	.word	0x24000210
 80017dc:	08014d24 	.word	0x08014d24
 80017e0:	08014d74 	.word	0x08014d74
 80017e4:	08014d78 	.word	0x08014d78
 80017e8:	08014da8 	.word	0x08014da8

080017ec <_ZL29esp32IntrrruptRequestCallbackPv>:
		};
	}
}

static void esp32IntrrruptRequestCallback(void *pNothing){
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
	i2cFrame_transmitQueue tempI2CFrameForESP32;			//
	tempI2CFrameForESP32.slaveDevice7bitAddress = pESP32->esp32i2cSlaveAdress_7bit;		//I2C_SLAVE_ADDRESS_ESP32;
 80017f4:	4b29      	ldr	r3, [pc, #164]	@ (800189c <_ZL29esp32IntrrruptRequestCallbackPv+0xb0>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	791b      	ldrb	r3, [r3, #4]
 80017fa:	733b      	strb	r3, [r7, #12]
	while(1){
		pESP32->isCountingSemaphoreOverflowed();
 80017fc:	4b27      	ldr	r3, [pc, #156]	@ (800189c <_ZL29esp32IntrrruptRequestCallbackPv+0xb0>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff fa33 	bl	8000c6c <_ZN27esp32_i2cComunicationDriver29isCountingSemaphoreOverflowedEv>
		if (pESP32->semaphoreTake__CountingSemaphore()){								//czeka dopuki nie pojawi się esp32 interrupt request
 8001806:	4b25      	ldr	r3, [pc, #148]	@ (800189c <_ZL29esp32IntrrruptRequestCallbackPv+0xb0>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff fa4e 	bl	8000cac <_ZN27esp32_i2cComunicationDriver32semaphoreTake__CountingSemaphoreEv>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	bf14      	ite	ne
 8001816:	2301      	movne	r3, #1
 8001818:	2300      	moveq	r3, #0
 800181a:	b2db      	uxtb	r3, r3
 800181c:	2b00      	cmp	r3, #0
 800181e:	d0ed      	beq.n	80017fc <_ZL29esp32IntrrruptRequestCallbackPv+0x10>
			pESP32->i2cMasterSemaphoreTake();
 8001820:	4b1e      	ldr	r3, [pc, #120]	@ (800189c <_ZL29esp32IntrrruptRequestCallbackPv+0xb0>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff fa6b 	bl	8000d00 <_ZN27esp32_i2cComunicationDriver22i2cMasterSemaphoreTakeEv>
			pESP32->masterReceiveFromESP32_DMA((uint8_t*) &tempI2CFrameForESP32.dataSize, sizeof(size_t));
 800182a:	4b1c      	ldr	r3, [pc, #112]	@ (800189c <_ZL29esp32IntrrruptRequestCallbackPv+0xb0>)
 800182c:	6818      	ldr	r0, [r3, #0]
 800182e:	f107 030c 	add.w	r3, r7, #12
 8001832:	3304      	adds	r3, #4
 8001834:	2204      	movs	r2, #4
 8001836:	4619      	mov	r1, r3
 8001838:	f7ff fa4d 	bl	8000cd6 <_ZN27esp32_i2cComunicationDriver26masterReceiveFromESP32_DMAEPht>
			pESP32->while_I2C_STATE_READY();
 800183c:	4b17      	ldr	r3, [pc, #92]	@ (800189c <_ZL29esp32IntrrruptRequestCallbackPv+0xb0>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff fa79 	bl	8000d38 <_ZN27esp32_i2cComunicationDriver21while_I2C_STATE_READYEv>
			tempI2CFrameForESP32.pData = new char[tempI2CFrameForESP32.dataSize];
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	4618      	mov	r0, r3
 800184a:	f00e fc78 	bl	801013e <_Znaj>
 800184e:	4603      	mov	r3, r0
 8001850:	617b      	str	r3, [r7, #20]
			if (tempI2CFrameForESP32.pData!=nullptr){
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d016      	beq.n	8001886 <_ZL29esp32IntrrruptRequestCallbackPv+0x9a>
				pESP32->masterReceiveFromESP32_DMA((uint8_t*) tempI2CFrameForESP32.pData, tempI2CFrameForESP32.dataSize);
 8001858:	4b10      	ldr	r3, [pc, #64]	@ (800189c <_ZL29esp32IntrrruptRequestCallbackPv+0xb0>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6979      	ldr	r1, [r7, #20]
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	b292      	uxth	r2, r2
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff fa37 	bl	8000cd6 <_ZN27esp32_i2cComunicationDriver26masterReceiveFromESP32_DMAEPht>
				pESP32->while_I2C_STATE_READY();
 8001868:	4b0c      	ldr	r3, [pc, #48]	@ (800189c <_ZL29esp32IntrrruptRequestCallbackPv+0xb0>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff fa63 	bl	8000d38 <_ZN27esp32_i2cComunicationDriver21while_I2C_STATE_READYEv>
				pi2cMaster->pReceiveQueueObject->QueueSend(&tempI2CFrameForESP32);
 8001872:	4b0b      	ldr	r3, [pc, #44]	@ (80018a0 <_ZL29esp32IntrrruptRequestCallbackPv+0xb4>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f107 020c 	add.w	r2, r7, #12
 800187c:	4611      	mov	r1, r2
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff fc6b 	bl	800115a <_ZN20i2cQueue4DynamicData9QueueSendEP22i2cFrame_transmitQueue>
 8001884:	e004      	b.n	8001890 <_ZL29esp32IntrrruptRequestCallbackPv+0xa4>
			}
			else{
				pESP32->seteDynamicmMemeoryAlocationError();
 8001886:	4b05      	ldr	r3, [pc, #20]	@ (800189c <_ZL29esp32IntrrruptRequestCallbackPv+0xb0>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff fa62 	bl	8000d54 <_ZN27esp32_i2cComunicationDriver33seteDynamicmMemeoryAlocationErrorEv>
			}
			pESP32->i2cMasterSemaphoreGive();
 8001890:	4b02      	ldr	r3, [pc, #8]	@ (800189c <_ZL29esp32IntrrruptRequestCallbackPv+0xb0>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff fa41 	bl	8000d1c <_ZN27esp32_i2cComunicationDriver22i2cMasterSemaphoreGiveEv>
		pESP32->isCountingSemaphoreOverflowed();
 800189a:	e7af      	b.n	80017fc <_ZL29esp32IntrrruptRequestCallbackPv+0x10>
 800189c:	24000210 	.word	0x24000210
 80018a0:	2400020c 	.word	0x2400020c

080018a4 <_ZL22manageTheRadioMenuTaskPv>:
		}
	};
}

static void manageTheRadioMenuTask(void* pvParameters){
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
	pRadioMenu->manageTheRadioManue(pvParameters);
 80018ac:	4b04      	ldr	r3, [pc, #16]	@ (80018c0 <_ZL22manageTheRadioMenuTaskPv+0x1c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6879      	ldr	r1, [r7, #4]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff fe64 	bl	8001580 <_ZN9radioMenu19manageTheRadioManueEPv>
}
 80018b8:	bf00      	nop
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	24000214 	.word	0x24000214
 80018c4:	00000000 	.word	0x00000000

080018c8 <_Z17initTaskFunctionsv>:

void initTaskFunctions(void){
 80018c8:	b590      	push	{r4, r7, lr}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af02      	add	r7, sp, #8
	assert(pi2cMaster = new i2cMaster(&hi2c1));
 80018ce:	2014      	movs	r0, #20
 80018d0:	f00e fc24 	bl	801011c <_Znwj>
 80018d4:	4603      	mov	r3, r0
 80018d6:	461c      	mov	r4, r3
 80018d8:	4963      	ldr	r1, [pc, #396]	@ (8001a68 <_Z17initTaskFunctionsv+0x1a0>)
 80018da:	4620      	mov	r0, r4
 80018dc:	f7ff fa9c 	bl	8000e18 <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef>
 80018e0:	4b62      	ldr	r3, [pc, #392]	@ (8001a6c <_Z17initTaskFunctionsv+0x1a4>)
 80018e2:	601c      	str	r4, [r3, #0]
 80018e4:	4b61      	ldr	r3, [pc, #388]	@ (8001a6c <_Z17initTaskFunctionsv+0x1a4>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d105      	bne.n	80018f8 <_Z17initTaskFunctionsv+0x30>
 80018ec:	4b60      	ldr	r3, [pc, #384]	@ (8001a70 <_Z17initTaskFunctionsv+0x1a8>)
 80018ee:	4a61      	ldr	r2, [pc, #388]	@ (8001a74 <_Z17initTaskFunctionsv+0x1ac>)
 80018f0:	2146      	movs	r1, #70	@ 0x46
 80018f2:	4861      	ldr	r0, [pc, #388]	@ (8001a78 <_Z17initTaskFunctionsv+0x1b0>)
 80018f4:	f00e fc38 	bl	8010168 <__assert_func>
	assert(pESP32 = new esp32_i2cComunicationDriver(pi2cMaster));
 80018f8:	2024      	movs	r0, #36	@ 0x24
 80018fa:	f00e fc0f 	bl	801011c <_Znwj>
 80018fe:	4603      	mov	r3, r0
 8001900:	461c      	mov	r4, r3
 8001902:	4b5a      	ldr	r3, [pc, #360]	@ (8001a6c <_Z17initTaskFunctionsv+0x1a4>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4619      	mov	r1, r3
 8001908:	4620      	mov	r0, r4
 800190a:	f7ff f8d9 	bl	8000ac0 <_ZN27esp32_i2cComunicationDriverC1EP9i2cMaster>
 800190e:	4b5b      	ldr	r3, [pc, #364]	@ (8001a7c <_Z17initTaskFunctionsv+0x1b4>)
 8001910:	601c      	str	r4, [r3, #0]
 8001912:	4b5a      	ldr	r3, [pc, #360]	@ (8001a7c <_Z17initTaskFunctionsv+0x1b4>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d105      	bne.n	8001926 <_Z17initTaskFunctionsv+0x5e>
 800191a:	4b59      	ldr	r3, [pc, #356]	@ (8001a80 <_Z17initTaskFunctionsv+0x1b8>)
 800191c:	4a55      	ldr	r2, [pc, #340]	@ (8001a74 <_Z17initTaskFunctionsv+0x1ac>)
 800191e:	2147      	movs	r1, #71	@ 0x47
 8001920:	4855      	ldr	r0, [pc, #340]	@ (8001a78 <_Z17initTaskFunctionsv+0x1b0>)
 8001922:	f00e fc21 	bl	8010168 <__assert_func>

	//pętla opóźniająca oczekująza aż zakończy się proces bootowania ESP32
	pi2cMaster->i2cMasterSemaphoreTake();
 8001926:	4b51      	ldr	r3, [pc, #324]	@ (8001a6c <_Z17initTaskFunctionsv+0x1a4>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff fade 	bl	8000eec <_ZN9i2cMaster22i2cMasterSemaphoreTakeEv>
	while(HAL_I2C_IsDeviceReady(&hi2c1, pESP32->esp32i2cSlaveAdress_7bit<<1, 10000, 10000) != HAL_OK){
 8001930:	e002      	b.n	8001938 <_Z17initTaskFunctionsv+0x70>
		printf("ESP32 i2c bus not responding\r\n");
 8001932:	4854      	ldr	r0, [pc, #336]	@ (8001a84 <_Z17initTaskFunctionsv+0x1bc>)
 8001934:	f00f fc74 	bl	8011220 <puts>
	while(HAL_I2C_IsDeviceReady(&hi2c1, pESP32->esp32i2cSlaveAdress_7bit<<1, 10000, 10000) != HAL_OK){
 8001938:	4b50      	ldr	r3, [pc, #320]	@ (8001a7c <_Z17initTaskFunctionsv+0x1b4>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	791b      	ldrb	r3, [r3, #4]
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	b299      	uxth	r1, r3
 8001942:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001946:	f242 7210 	movw	r2, #10000	@ 0x2710
 800194a:	4847      	ldr	r0, [pc, #284]	@ (8001a68 <_Z17initTaskFunctionsv+0x1a0>)
 800194c:	f004 fabc 	bl	8005ec8 <HAL_I2C_IsDeviceReady>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	bf14      	ite	ne
 8001956:	2301      	movne	r3, #1
 8001958:	2300      	moveq	r3, #0
 800195a:	b2db      	uxtb	r3, r3
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1e8      	bne.n	8001932 <_Z17initTaskFunctionsv+0x6a>
	};
	pi2cMaster->i2cMasterSemaphoreGive();
 8001960:	4b42      	ldr	r3, [pc, #264]	@ (8001a6c <_Z17initTaskFunctionsv+0x1a4>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff fad1 	bl	8000f0c <_ZN9i2cMaster22i2cMasterSemaphoreGiveEv>
	//pętla opóźniająca oczekująza aż zakończy si ę proces bootowania ESP32


	printf("Radio main firmware version: %.2f\r\n", FW_VERSION);
 800196a:	a33d      	add	r3, pc, #244	@ (adr r3, 8001a60 <_Z17initTaskFunctionsv+0x198>)
 800196c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001970:	4845      	ldr	r0, [pc, #276]	@ (8001a88 <_Z17initTaskFunctionsv+0x1c0>)
 8001972:	f00f fbed 	bl	8011150 <iprintf>

	pi2cMaster->while_I2C_STATE_READY();
 8001976:	4b3d      	ldr	r3, [pc, #244]	@ (8001a6c <_Z17initTaskFunctionsv+0x1a4>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff fb4a 	bl	8001014 <_ZN9i2cMaster21while_I2C_STATE_READYEv>
	pESP32->ping();
 8001980:	4b3e      	ldr	r3, [pc, #248]	@ (8001a7c <_Z17initTaskFunctionsv+0x1b4>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff f913 	bl	8000bb0 <_ZN27esp32_i2cComunicationDriver4pingEv>

	//tworzy task callback na przerwanie od ESP32 informującę, że ESP32 ma jakieś dane do wysłania
	configASSERT(xTaskCreate(esp32IntrrruptRequestCallback, "esp32IntReq", 3*128, NULL, 3*128+1, &taskHandle_esp32IntrrruptRequest));
 800198a:	4b40      	ldr	r3, [pc, #256]	@ (8001a8c <_Z17initTaskFunctionsv+0x1c4>)
 800198c:	9301      	str	r3, [sp, #4]
 800198e:	f240 1381 	movw	r3, #385	@ 0x181
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	2300      	movs	r3, #0
 8001996:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800199a:	493d      	ldr	r1, [pc, #244]	@ (8001a90 <_Z17initTaskFunctionsv+0x1c8>)
 800199c:	483d      	ldr	r0, [pc, #244]	@ (8001a94 <_Z17initTaskFunctionsv+0x1cc>)
 800199e:	f00c fa31 	bl	800de04 <xTaskCreate>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	bf0c      	ite	eq
 80019a8:	2301      	moveq	r3, #1
 80019aa:	2300      	movne	r3, #0
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d00b      	beq.n	80019ca <_Z17initTaskFunctionsv+0x102>
	__asm volatile
 80019b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80019b6:	f383 8811 	msr	BASEPRI, r3
 80019ba:	f3bf 8f6f 	isb	sy
 80019be:	f3bf 8f4f 	dsb	sy
 80019c2:	607b      	str	r3, [r7, #4]
}
 80019c4:	bf00      	nop
 80019c6:	bf00      	nop
 80019c8:	e7fd      	b.n	80019c6 <_Z17initTaskFunctionsv+0xfe>
	//tworzy task przetwarzający dane (parsujący) z kolejki odbiorczej i2c Mastera
	configASSERT(xTaskCreate(i2cMaster_pReceiveQueueObjectParser, "i2cMastRecQue, Pars", 3*128, NULL, tskIDLE_PRIORITY, &taskHandle_i2cMaster_pReceiveQueueObjectParser));
 80019ca:	4b33      	ldr	r3, [pc, #204]	@ (8001a98 <_Z17initTaskFunctionsv+0x1d0>)
 80019cc:	9301      	str	r3, [sp, #4]
 80019ce:	2300      	movs	r3, #0
 80019d0:	9300      	str	r3, [sp, #0]
 80019d2:	2300      	movs	r3, #0
 80019d4:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80019d8:	4930      	ldr	r1, [pc, #192]	@ (8001a9c <_Z17initTaskFunctionsv+0x1d4>)
 80019da:	4831      	ldr	r0, [pc, #196]	@ (8001aa0 <_Z17initTaskFunctionsv+0x1d8>)
 80019dc:	f00c fa12 	bl	800de04 <xTaskCreate>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	bf0c      	ite	eq
 80019e6:	2301      	moveq	r3, #1
 80019e8:	2300      	movne	r3, #0
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d00b      	beq.n	8001a08 <_Z17initTaskFunctionsv+0x140>
	__asm volatile
 80019f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80019f4:	f383 8811 	msr	BASEPRI, r3
 80019f8:	f3bf 8f6f 	isb	sy
 80019fc:	f3bf 8f4f 	dsb	sy
 8001a00:	603b      	str	r3, [r7, #0]
}
 8001a02:	bf00      	nop
 8001a04:	bf00      	nop
 8001a06:	e7fd      	b.n	8001a04 <_Z17initTaskFunctionsv+0x13c>


	//tworzenie obiektu obsługującego menu Radio wszystkie
	assert(pRadioMenu = new radioMenu());
 8001a08:	2020      	movs	r0, #32
 8001a0a:	f00e fb87 	bl	801011c <_Znwj>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	461c      	mov	r4, r3
 8001a12:	4620      	mov	r0, r4
 8001a14:	f7ff fd42 	bl	800149c <_ZN9radioMenuC1Ev>
 8001a18:	4b22      	ldr	r3, [pc, #136]	@ (8001aa4 <_Z17initTaskFunctionsv+0x1dc>)
 8001a1a:	601c      	str	r4, [r3, #0]
 8001a1c:	4b21      	ldr	r3, [pc, #132]	@ (8001aa4 <_Z17initTaskFunctionsv+0x1dc>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d105      	bne.n	8001a30 <_Z17initTaskFunctionsv+0x168>
 8001a24:	4b20      	ldr	r3, [pc, #128]	@ (8001aa8 <_Z17initTaskFunctionsv+0x1e0>)
 8001a26:	4a13      	ldr	r2, [pc, #76]	@ (8001a74 <_Z17initTaskFunctionsv+0x1ac>)
 8001a28:	215e      	movs	r1, #94	@ 0x5e
 8001a2a:	4813      	ldr	r0, [pc, #76]	@ (8001a78 <_Z17initTaskFunctionsv+0x1b0>)
 8001a2c:	f00e fb9c 	bl	8010168 <__assert_func>
	//tworzenie taska obsługującego przzyciski w menu radio
	xTaskCreate(manageTheRadioMenuTask, "radioMainMenu", 3*128, NULL, 3*128, /*&(pRadioMenu->taskHandle_manageTheRadioManue)*/pRadioMenu->getTaskHandle_tPointer());
 8001a30:	4b1c      	ldr	r3, [pc, #112]	@ (8001aa4 <_Z17initTaskFunctionsv+0x1dc>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff fd97 	bl	8001568 <_ZN9radioMenu22getTaskHandle_tPointerEv>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	9301      	str	r3, [sp, #4]
 8001a3e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	2300      	movs	r3, #0
 8001a46:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001a4a:	4918      	ldr	r1, [pc, #96]	@ (8001aac <_Z17initTaskFunctionsv+0x1e4>)
 8001a4c:	4818      	ldr	r0, [pc, #96]	@ (8001ab0 <_Z17initTaskFunctionsv+0x1e8>)
 8001a4e:	f00c f9d9 	bl	800de04 <xTaskCreate>

	probne->appendExecFunctionArry(buttonSequence, testowyAppend);

	delete probne;*/

}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd90      	pop	{r4, r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	f3af 8000 	nop.w
 8001a60:	9999999a 	.word	0x9999999a
 8001a64:	3fb99999 	.word	0x3fb99999
 8001a68:	2400021c 	.word	0x2400021c
 8001a6c:	2400020c 	.word	0x2400020c
 8001a70:	08014dd4 	.word	0x08014dd4
 8001a74:	08014df8 	.word	0x08014df8
 8001a78:	08014da8 	.word	0x08014da8
 8001a7c:	24000210 	.word	0x24000210
 8001a80:	08014e14 	.word	0x08014e14
 8001a84:	08014e4c 	.word	0x08014e4c
 8001a88:	08014e6c 	.word	0x08014e6c
 8001a8c:	24000204 	.word	0x24000204
 8001a90:	08014e90 	.word	0x08014e90
 8001a94:	080017ed 	.word	0x080017ed
 8001a98:	24000208 	.word	0x24000208
 8001a9c:	08014e9c 	.word	0x08014e9c
 8001aa0:	0800175d 	.word	0x0800175d
 8001aa4:	24000214 	.word	0x24000214
 8001aa8:	08014eb0 	.word	0x08014eb0
 8001aac:	08014ed0 	.word	0x08014ed0
 8001ab0:	080018a5 	.word	0x080018a5

08001ab4 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	80fb      	strh	r3, [r7, #6]
		pESP32->incrementInterruptRequestCountingSemaphore();		//inkrementacja semafora daje sygnał ,dla metody esp32_i2sComunicationDriver::intrrruptRequestCallback
 8001abe:	4b04      	ldr	r3, [pc, #16]	@ (8001ad0 <HAL_GPIO_EXTI_Callback+0x1c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff f892 	bl	8000bec <_ZN27esp32_i2cComunicationDriver42incrementInterruptRequestCountingSemaphoreEv>
}
 8001ac8:	bf00      	nop
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	24000210 	.word	0x24000210

08001ad4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ada:	4b11      	ldr	r3, [pc, #68]	@ (8001b20 <MX_DMA_Init+0x4c>)
 8001adc:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001ae0:	4a0f      	ldr	r2, [pc, #60]	@ (8001b20 <MX_DMA_Init+0x4c>)
 8001ae2:	f043 0301 	orr.w	r3, r3, #1
 8001ae6:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8001aea:	4b0d      	ldr	r3, [pc, #52]	@ (8001b20 <MX_DMA_Init+0x4c>)
 8001aec:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	607b      	str	r3, [r7, #4]
 8001af6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 6, 0);
 8001af8:	2200      	movs	r2, #0
 8001afa:	2106      	movs	r1, #6
 8001afc:	200b      	movs	r0, #11
 8001afe:	f000 feb7 	bl	8002870 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001b02:	200b      	movs	r0, #11
 8001b04:	f000 fece 	bl	80028a4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 6, 0);
 8001b08:	2200      	movs	r2, #0
 8001b0a:	2106      	movs	r1, #6
 8001b0c:	200c      	movs	r0, #12
 8001b0e:	f000 feaf 	bl	8002870 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001b12:	200c      	movs	r0, #12
 8001b14:	f000 fec6 	bl	80028a4 <HAL_NVIC_EnableIRQ>

}
 8001b18:	bf00      	nop
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	58024400 	.word	0x58024400

08001b24 <PreSleepProcessing>:

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001b50:	4a04      	ldr	r2, [pc, #16]	@ (8001b64 <MX_FREERTOS_Init+0x18>)
 8001b52:	2100      	movs	r1, #0
 8001b54:	4804      	ldr	r0, [pc, #16]	@ (8001b68 <MX_FREERTOS_Init+0x1c>)
 8001b56:	f00a ffcf 	bl	800caf8 <osThreadNew>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	4a03      	ldr	r2, [pc, #12]	@ (8001b6c <MX_FREERTOS_Init+0x20>)
 8001b5e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001b60:	bf00      	nop
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	08014f34 	.word	0x08014f34
 8001b68:	08001b71 	.word	0x08001b71
 8001b6c:	24000218 	.word	0x24000218

08001b70 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001b78:	2001      	movs	r0, #1
 8001b7a:	f00b f84f 	bl	800cc1c <osDelay>
 8001b7e:	e7fb      	b.n	8001b78 <StartDefaultTask+0x8>

08001b80 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b088      	sub	sp, #32
 8001b84:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b86:	f107 030c 	add.w	r3, r7, #12
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	605a      	str	r2, [r3, #4]
 8001b90:	609a      	str	r2, [r3, #8]
 8001b92:	60da      	str	r2, [r3, #12]
 8001b94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b96:	4b1b      	ldr	r3, [pc, #108]	@ (8001c04 <MX_GPIO_Init+0x84>)
 8001b98:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001b9c:	4a19      	ldr	r2, [pc, #100]	@ (8001c04 <MX_GPIO_Init+0x84>)
 8001b9e:	f043 0302 	orr.w	r3, r3, #2
 8001ba2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001ba6:	4b17      	ldr	r3, [pc, #92]	@ (8001c04 <MX_GPIO_Init+0x84>)
 8001ba8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	60bb      	str	r3, [r7, #8]
 8001bb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb4:	4b13      	ldr	r3, [pc, #76]	@ (8001c04 <MX_GPIO_Init+0x84>)
 8001bb6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001bba:	4a12      	ldr	r2, [pc, #72]	@ (8001c04 <MX_GPIO_Init+0x84>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001bc4:	4b0f      	ldr	r3, [pc, #60]	@ (8001c04 <MX_GPIO_Init+0x84>)
 8001bc6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	607b      	str	r3, [r7, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = esp32i2cInterruptReqest_Pin;
 8001bd2:	2320      	movs	r3, #32
 8001bd4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001bd6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001bda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(esp32i2cInterruptReqest_GPIO_Port, &GPIO_InitStruct);
 8001be0:	f107 030c 	add.w	r3, r7, #12
 8001be4:	4619      	mov	r1, r3
 8001be6:	4808      	ldr	r0, [pc, #32]	@ (8001c08 <MX_GPIO_Init+0x88>)
 8001be8:	f003 fcde 	bl	80055a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001bec:	2200      	movs	r2, #0
 8001bee:	2105      	movs	r1, #5
 8001bf0:	2017      	movs	r0, #23
 8001bf2:	f000 fe3d 	bl	8002870 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001bf6:	2017      	movs	r0, #23
 8001bf8:	f000 fe54 	bl	80028a4 <HAL_NVIC_EnableIRQ>

}
 8001bfc:	bf00      	nop
 8001bfe:	3720      	adds	r7, #32
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	58024400 	.word	0x58024400
 8001c08:	58020400 	.word	0x58020400

08001c0c <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c10:	4b1b      	ldr	r3, [pc, #108]	@ (8001c80 <MX_I2C1_Init+0x74>)
 8001c12:	4a1c      	ldr	r2, [pc, #112]	@ (8001c84 <MX_I2C1_Init+0x78>)
 8001c14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B0CCFF;
 8001c16:	4b1a      	ldr	r3, [pc, #104]	@ (8001c80 <MX_I2C1_Init+0x74>)
 8001c18:	4a1b      	ldr	r2, [pc, #108]	@ (8001c88 <MX_I2C1_Init+0x7c>)
 8001c1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001c1c:	4b18      	ldr	r3, [pc, #96]	@ (8001c80 <MX_I2C1_Init+0x74>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c22:	4b17      	ldr	r3, [pc, #92]	@ (8001c80 <MX_I2C1_Init+0x74>)
 8001c24:	2201      	movs	r2, #1
 8001c26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c28:	4b15      	ldr	r3, [pc, #84]	@ (8001c80 <MX_I2C1_Init+0x74>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001c2e:	4b14      	ldr	r3, [pc, #80]	@ (8001c80 <MX_I2C1_Init+0x74>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c34:	4b12      	ldr	r3, [pc, #72]	@ (8001c80 <MX_I2C1_Init+0x74>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c3a:	4b11      	ldr	r3, [pc, #68]	@ (8001c80 <MX_I2C1_Init+0x74>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8001c40:	4b0f      	ldr	r3, [pc, #60]	@ (8001c80 <MX_I2C1_Init+0x74>)
 8001c42:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c48:	480d      	ldr	r0, [pc, #52]	@ (8001c80 <MX_I2C1_Init+0x74>)
 8001c4a:	f003 ff81 	bl	8005b50 <HAL_I2C_Init>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c54:	f000 f9da 	bl	800200c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c58:	2100      	movs	r1, #0
 8001c5a:	4809      	ldr	r0, [pc, #36]	@ (8001c80 <MX_I2C1_Init+0x74>)
 8001c5c:	f006 fad0 	bl	8008200 <HAL_I2CEx_ConfigAnalogFilter>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001c66:	f000 f9d1 	bl	800200c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	4804      	ldr	r0, [pc, #16]	@ (8001c80 <MX_I2C1_Init+0x74>)
 8001c6e:	f006 fb12 	bl	8008296 <HAL_I2CEx_ConfigDigitalFilter>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001c78:	f000 f9c8 	bl	800200c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c7c:	bf00      	nop
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	2400021c 	.word	0x2400021c
 8001c84:	40005400 	.word	0x40005400
 8001c88:	20b0ccff 	.word	0x20b0ccff

08001c8c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b0ba      	sub	sp, #232	@ 0xe8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c94:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
 8001ca2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ca4:	f107 0310 	add.w	r3, r7, #16
 8001ca8:	22c0      	movs	r2, #192	@ 0xc0
 8001caa:	2100      	movs	r1, #0
 8001cac:	4618      	mov	r0, r3
 8001cae:	f00f fbb7 	bl	8011420 <memset>
  if(i2cHandle->Instance==I2C1)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a5c      	ldr	r2, [pc, #368]	@ (8001e28 <HAL_I2C_MspInit+0x19c>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	f040 80b1 	bne.w	8001e20 <HAL_I2C_MspInit+0x194>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001cbe:	f04f 0208 	mov.w	r2, #8
 8001cc2:	f04f 0300 	mov.w	r3, #0
 8001cc6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cd0:	f107 0310 	add.w	r3, r7, #16
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f007 fb65 	bl	80093a4 <HAL_RCCEx_PeriphCLKConfig>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8001ce0:	f000 f994 	bl	800200c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce4:	4b51      	ldr	r3, [pc, #324]	@ (8001e2c <HAL_I2C_MspInit+0x1a0>)
 8001ce6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001cea:	4a50      	ldr	r2, [pc, #320]	@ (8001e2c <HAL_I2C_MspInit+0x1a0>)
 8001cec:	f043 0302 	orr.w	r3, r3, #2
 8001cf0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001cf4:	4b4d      	ldr	r3, [pc, #308]	@ (8001e2c <HAL_I2C_MspInit+0x1a0>)
 8001cf6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d02:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d06:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d0a:	2312      	movs	r3, #18
 8001d0c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d16:	2300      	movs	r3, #0
 8001d18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d1c:	2304      	movs	r3, #4
 8001d1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d22:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001d26:	4619      	mov	r1, r3
 8001d28:	4841      	ldr	r0, [pc, #260]	@ (8001e30 <HAL_I2C_MspInit+0x1a4>)
 8001d2a:	f003 fc3d 	bl	80055a8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d2e:	4b3f      	ldr	r3, [pc, #252]	@ (8001e2c <HAL_I2C_MspInit+0x1a0>)
 8001d30:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001d34:	4a3d      	ldr	r2, [pc, #244]	@ (8001e2c <HAL_I2C_MspInit+0x1a0>)
 8001d36:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d3a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001d3e:	4b3b      	ldr	r3, [pc, #236]	@ (8001e2c <HAL_I2C_MspInit+0x1a0>)
 8001d40:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001d44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d48:	60bb      	str	r3, [r7, #8]
 8001d4a:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001d4c:	4b39      	ldr	r3, [pc, #228]	@ (8001e34 <HAL_I2C_MspInit+0x1a8>)
 8001d4e:	4a3a      	ldr	r2, [pc, #232]	@ (8001e38 <HAL_I2C_MspInit+0x1ac>)
 8001d50:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8001d52:	4b38      	ldr	r3, [pc, #224]	@ (8001e34 <HAL_I2C_MspInit+0x1a8>)
 8001d54:	2221      	movs	r2, #33	@ 0x21
 8001d56:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d58:	4b36      	ldr	r3, [pc, #216]	@ (8001e34 <HAL_I2C_MspInit+0x1a8>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d5e:	4b35      	ldr	r3, [pc, #212]	@ (8001e34 <HAL_I2C_MspInit+0x1a8>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d64:	4b33      	ldr	r3, [pc, #204]	@ (8001e34 <HAL_I2C_MspInit+0x1a8>)
 8001d66:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d6a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d6c:	4b31      	ldr	r3, [pc, #196]	@ (8001e34 <HAL_I2C_MspInit+0x1a8>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d72:	4b30      	ldr	r3, [pc, #192]	@ (8001e34 <HAL_I2C_MspInit+0x1a8>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001d78:	4b2e      	ldr	r3, [pc, #184]	@ (8001e34 <HAL_I2C_MspInit+0x1a8>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d7e:	4b2d      	ldr	r3, [pc, #180]	@ (8001e34 <HAL_I2C_MspInit+0x1a8>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d84:	4b2b      	ldr	r3, [pc, #172]	@ (8001e34 <HAL_I2C_MspInit+0x1a8>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001d8a:	482a      	ldr	r0, [pc, #168]	@ (8001e34 <HAL_I2C_MspInit+0x1a8>)
 8001d8c:	f000 fda6 	bl	80028dc <HAL_DMA_Init>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8001d96:	f000 f939 	bl	800200c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a25      	ldr	r2, [pc, #148]	@ (8001e34 <HAL_I2C_MspInit+0x1a8>)
 8001d9e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001da0:	4a24      	ldr	r2, [pc, #144]	@ (8001e34 <HAL_I2C_MspInit+0x1a8>)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8001da6:	4b25      	ldr	r3, [pc, #148]	@ (8001e3c <HAL_I2C_MspInit+0x1b0>)
 8001da8:	4a25      	ldr	r2, [pc, #148]	@ (8001e40 <HAL_I2C_MspInit+0x1b4>)
 8001daa:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8001dac:	4b23      	ldr	r3, [pc, #140]	@ (8001e3c <HAL_I2C_MspInit+0x1b0>)
 8001dae:	2222      	movs	r2, #34	@ 0x22
 8001db0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001db2:	4b22      	ldr	r3, [pc, #136]	@ (8001e3c <HAL_I2C_MspInit+0x1b0>)
 8001db4:	2240      	movs	r2, #64	@ 0x40
 8001db6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001db8:	4b20      	ldr	r3, [pc, #128]	@ (8001e3c <HAL_I2C_MspInit+0x1b0>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001dbe:	4b1f      	ldr	r3, [pc, #124]	@ (8001e3c <HAL_I2C_MspInit+0x1b0>)
 8001dc0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001dc4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dc6:	4b1d      	ldr	r3, [pc, #116]	@ (8001e3c <HAL_I2C_MspInit+0x1b0>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dcc:	4b1b      	ldr	r3, [pc, #108]	@ (8001e3c <HAL_I2C_MspInit+0x1b0>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001dd2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e3c <HAL_I2C_MspInit+0x1b0>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001dd8:	4b18      	ldr	r3, [pc, #96]	@ (8001e3c <HAL_I2C_MspInit+0x1b0>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dde:	4b17      	ldr	r3, [pc, #92]	@ (8001e3c <HAL_I2C_MspInit+0x1b0>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001de4:	4815      	ldr	r0, [pc, #84]	@ (8001e3c <HAL_I2C_MspInit+0x1b0>)
 8001de6:	f000 fd79 	bl	80028dc <HAL_DMA_Init>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <HAL_I2C_MspInit+0x168>
    {
      Error_Handler();
 8001df0:	f000 f90c 	bl	800200c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4a11      	ldr	r2, [pc, #68]	@ (8001e3c <HAL_I2C_MspInit+0x1b0>)
 8001df8:	639a      	str	r2, [r3, #56]	@ 0x38
 8001dfa:	4a10      	ldr	r2, [pc, #64]	@ (8001e3c <HAL_I2C_MspInit+0x1b0>)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001e00:	2200      	movs	r2, #0
 8001e02:	2105      	movs	r1, #5
 8001e04:	201f      	movs	r0, #31
 8001e06:	f000 fd33 	bl	8002870 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001e0a:	201f      	movs	r0, #31
 8001e0c:	f000 fd4a 	bl	80028a4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001e10:	2200      	movs	r2, #0
 8001e12:	2105      	movs	r1, #5
 8001e14:	2020      	movs	r0, #32
 8001e16:	f000 fd2b 	bl	8002870 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001e1a:	2020      	movs	r0, #32
 8001e1c:	f000 fd42 	bl	80028a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001e20:	bf00      	nop
 8001e22:	37e8      	adds	r7, #232	@ 0xe8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40005400 	.word	0x40005400
 8001e2c:	58024400 	.word	0x58024400
 8001e30:	58020400 	.word	0x58020400
 8001e34:	24000270 	.word	0x24000270
 8001e38:	40020010 	.word	0x40020010
 8001e3c:	240002e8 	.word	0x240002e8
 8001e40:	40020028 	.word	0x40020028

08001e44 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a14      	ldr	r2, [pc, #80]	@ (8001ea4 <HAL_I2C_MspDeInit+0x60>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d121      	bne.n	8001e9a <HAL_I2C_MspDeInit+0x56>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001e56:	4b14      	ldr	r3, [pc, #80]	@ (8001ea8 <HAL_I2C_MspDeInit+0x64>)
 8001e58:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001e5c:	4a12      	ldr	r2, [pc, #72]	@ (8001ea8 <HAL_I2C_MspDeInit+0x64>)
 8001e5e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001e62:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8001e66:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e6a:	4810      	ldr	r0, [pc, #64]	@ (8001eac <HAL_I2C_MspDeInit+0x68>)
 8001e6c:	f003 fd4c 	bl	8005908 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8001e70:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e74:	480d      	ldr	r0, [pc, #52]	@ (8001eac <HAL_I2C_MspDeInit+0x68>)
 8001e76:	f003 fd47 	bl	8005908 <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(i2cHandle->hdmarx);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f001 f8ba 	bl	8002ff8 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(i2cHandle->hdmatx);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f001 f8b5 	bl	8002ff8 <HAL_DMA_DeInit>

    /* I2C1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8001e8e:	201f      	movs	r0, #31
 8001e90:	f000 fd16 	bl	80028c0 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8001e94:	2020      	movs	r0, #32
 8001e96:	f000 fd13 	bl	80028c0 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40005400 	.word	0x40005400
 8001ea8:	58024400 	.word	0x58024400
 8001eac:	58020400 	.word	0x58020400

08001eb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001eb4:	f000 fba4 	bl	8002600 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001eb8:	f000 f812 	bl	8001ee0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ebc:	f7ff fe60 	bl	8001b80 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ec0:	f7ff fe08 	bl	8001ad4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001ec4:	f000 fabc 	bl	8002440 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001ec8:	f7ff fea0 	bl	8001c0c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //delay_ms(1000);
  initTaskFunctions();
 8001ecc:	f7ff fcfc 	bl	80018c8 <_Z17initTaskFunctionsv>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001ed0:	f00a fdc8 	bl	800ca64 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */

  MX_FREERTOS_Init();
 8001ed4:	f7ff fe3a 	bl	8001b4c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001ed8:	f00a fde8 	bl	800caac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001edc:	bf00      	nop
 8001ede:	e7fd      	b.n	8001edc <main+0x2c>

08001ee0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b09c      	sub	sp, #112	@ 0x70
 8001ee4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ee6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001eea:	224c      	movs	r2, #76	@ 0x4c
 8001eec:	2100      	movs	r1, #0
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f00f fa96 	bl	8011420 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ef4:	1d3b      	adds	r3, r7, #4
 8001ef6:	2220      	movs	r2, #32
 8001ef8:	2100      	movs	r1, #0
 8001efa:	4618      	mov	r0, r3
 8001efc:	f00f fa90 	bl	8011420 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8001f00:	4b37      	ldr	r3, [pc, #220]	@ (8001fe0 <SystemClock_Config+0x100>)
 8001f02:	f04f 32ff 	mov.w	r2, #4294967295
 8001f06:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001f0a:	2002      	movs	r0, #2
 8001f0c:	f006 fa10 	bl	8008330 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001f10:	2300      	movs	r3, #0
 8001f12:	603b      	str	r3, [r7, #0]
 8001f14:	4b33      	ldr	r3, [pc, #204]	@ (8001fe4 <SystemClock_Config+0x104>)
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	4a32      	ldr	r2, [pc, #200]	@ (8001fe4 <SystemClock_Config+0x104>)
 8001f1a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f1e:	6193      	str	r3, [r2, #24]
 8001f20:	4b30      	ldr	r3, [pc, #192]	@ (8001fe4 <SystemClock_Config+0x104>)
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001f28:	603b      	str	r3, [r7, #0]
 8001f2a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001f2c:	bf00      	nop
 8001f2e:	4b2d      	ldr	r3, [pc, #180]	@ (8001fe4 <SystemClock_Config+0x104>)
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f3a:	bf14      	ite	ne
 8001f3c:	2301      	movne	r3, #1
 8001f3e:	2300      	moveq	r3, #0
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1f3      	bne.n	8001f2e <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f46:	2302      	movs	r3, #2
 8001f48:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001f4e:	2340      	movs	r3, #64	@ 0x40
 8001f50:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f52:	2302      	movs	r3, #2
 8001f54:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f56:	2300      	movs	r3, #0
 8001f58:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001f5a:	2304      	movs	r3, #4
 8001f5c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8001f5e:	2323      	movs	r3, #35	@ 0x23
 8001f60:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001f62:	2302      	movs	r3, #2
 8001f64:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001f66:	2302      	movs	r3, #2
 8001f68:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001f6e:	230c      	movs	r3, #12
 8001f70:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001f72:	2300      	movs	r3, #0
 8001f74:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001f76:	2300      	movs	r3, #0
 8001f78:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f006 fa10 	bl	80083a4 <HAL_RCC_OscConfig>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	bf14      	ite	ne
 8001f8a:	2301      	movne	r3, #1
 8001f8c:	2300      	moveq	r3, #0
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001f94:	f000 f83a 	bl	800200c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f98:	233f      	movs	r3, #63	@ 0x3f
 8001f9a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001fa8:	2340      	movs	r3, #64	@ 0x40
 8001faa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001fac:	2340      	movs	r3, #64	@ 0x40
 8001fae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001fb0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fb4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001fb6:	2340      	movs	r3, #64	@ 0x40
 8001fb8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001fba:	1d3b      	adds	r3, r7, #4
 8001fbc:	2106      	movs	r1, #6
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f006 fe22 	bl	8008c08 <HAL_RCC_ClockConfig>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	bf14      	ite	ne
 8001fca:	2301      	movne	r3, #1
 8001fcc:	2300      	moveq	r3, #0
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8001fd4:	f000 f81a 	bl	800200c <Error_Handler>
  }
}
 8001fd8:	bf00      	nop
 8001fda:	3770      	adds	r7, #112	@ 0x70
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	58024400 	.word	0x58024400
 8001fe4:	58024800 	.word	0x58024800

08001fe8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a04      	ldr	r2, [pc, #16]	@ (8002008 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d101      	bne.n	8001ffe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001ffa:	f000 fb3d 	bl	8002678 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ffe:	bf00      	nop
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40010000 	.word	0x40010000

0800200c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002010:	b672      	cpsid	i
}
 8002012:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002014:	bf00      	nop
 8002016:	e7fd      	b.n	8002014 <Error_Handler+0x8>

08002018 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800201e:	4b0c      	ldr	r3, [pc, #48]	@ (8002050 <HAL_MspInit+0x38>)
 8002020:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002024:	4a0a      	ldr	r2, [pc, #40]	@ (8002050 <HAL_MspInit+0x38>)
 8002026:	f043 0302 	orr.w	r3, r3, #2
 800202a:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 800202e:	4b08      	ldr	r3, [pc, #32]	@ (8002050 <HAL_MspInit+0x38>)
 8002030:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	607b      	str	r3, [r7, #4]
 800203a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800203c:	2200      	movs	r2, #0
 800203e:	210f      	movs	r1, #15
 8002040:	f06f 0001 	mvn.w	r0, #1
 8002044:	f000 fc14 	bl	8002870 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002048:	bf00      	nop
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	58024400 	.word	0x58024400

08002054 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b08e      	sub	sp, #56	@ 0x38
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b0f      	cmp	r3, #15
 8002060:	d844      	bhi.n	80020ec <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8002062:	2200      	movs	r2, #0
 8002064:	6879      	ldr	r1, [r7, #4]
 8002066:	2019      	movs	r0, #25
 8002068:	f000 fc02 	bl	8002870 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800206c:	2019      	movs	r0, #25
 800206e:	f000 fc19 	bl	80028a4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002072:	4a24      	ldr	r2, [pc, #144]	@ (8002104 <HAL_InitTick+0xb0>)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002078:	4b23      	ldr	r3, [pc, #140]	@ (8002108 <HAL_InitTick+0xb4>)
 800207a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800207e:	4a22      	ldr	r2, [pc, #136]	@ (8002108 <HAL_InitTick+0xb4>)
 8002080:	f043 0301 	orr.w	r3, r3, #1
 8002084:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8002088:	4b1f      	ldr	r3, [pc, #124]	@ (8002108 <HAL_InitTick+0xb4>)
 800208a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	60bb      	str	r3, [r7, #8]
 8002094:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002096:	f107 020c 	add.w	r2, r7, #12
 800209a:	f107 0310 	add.w	r3, r7, #16
 800209e:	4611      	mov	r1, r2
 80020a0:	4618      	mov	r0, r3
 80020a2:	f007 f93d 	bl	8009320 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80020a6:	f007 f925 	bl	80092f4 <HAL_RCC_GetPCLK2Freq>
 80020aa:	4603      	mov	r3, r0
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80020b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020b2:	4a16      	ldr	r2, [pc, #88]	@ (800210c <HAL_InitTick+0xb8>)
 80020b4:	fba2 2303 	umull	r2, r3, r2, r3
 80020b8:	0c9b      	lsrs	r3, r3, #18
 80020ba:	3b01      	subs	r3, #1
 80020bc:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80020be:	4b14      	ldr	r3, [pc, #80]	@ (8002110 <HAL_InitTick+0xbc>)
 80020c0:	4a14      	ldr	r2, [pc, #80]	@ (8002114 <HAL_InitTick+0xc0>)
 80020c2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80020c4:	4b12      	ldr	r3, [pc, #72]	@ (8002110 <HAL_InitTick+0xbc>)
 80020c6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80020ca:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80020cc:	4a10      	ldr	r2, [pc, #64]	@ (8002110 <HAL_InitTick+0xbc>)
 80020ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020d0:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80020d2:	4b0f      	ldr	r3, [pc, #60]	@ (8002110 <HAL_InitTick+0xbc>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020d8:	4b0d      	ldr	r3, [pc, #52]	@ (8002110 <HAL_InitTick+0xbc>)
 80020da:	2200      	movs	r2, #0
 80020dc:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80020de:	480c      	ldr	r0, [pc, #48]	@ (8002110 <HAL_InitTick+0xbc>)
 80020e0:	f008 ff40 	bl	800af64 <HAL_TIM_Base_Init>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d107      	bne.n	80020fa <HAL_InitTick+0xa6>
 80020ea:	e001      	b.n	80020f0 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e005      	b.n	80020fc <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80020f0:	4807      	ldr	r0, [pc, #28]	@ (8002110 <HAL_InitTick+0xbc>)
 80020f2:	f008 ff99 	bl	800b028 <HAL_TIM_Base_Start_IT>
 80020f6:	4603      	mov	r3, r0
 80020f8:	e000      	b.n	80020fc <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3738      	adds	r7, #56	@ 0x38
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	24000008 	.word	0x24000008
 8002108:	58024400 	.word	0x58024400
 800210c:	431bde83 	.word	0x431bde83
 8002110:	24000360 	.word	0x24000360
 8002114:	40010000 	.word	0x40010000

08002118 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800211c:	bf00      	nop
 800211e:	e7fd      	b.n	800211c <NMI_Handler+0x4>

08002120 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002124:	bf00      	nop
 8002126:	e7fd      	b.n	8002124 <HardFault_Handler+0x4>

08002128 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800212c:	bf00      	nop
 800212e:	e7fd      	b.n	800212c <MemManage_Handler+0x4>

08002130 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002134:	bf00      	nop
 8002136:	e7fd      	b.n	8002134 <BusFault_Handler+0x4>

08002138 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800213c:	bf00      	nop
 800213e:	e7fd      	b.n	800213c <UsageFault_Handler+0x4>

08002140 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002144:	bf00      	nop
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
	...

08002150 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002154:	4802      	ldr	r0, [pc, #8]	@ (8002160 <DMA1_Stream0_IRQHandler+0x10>)
 8002156:	f001 fe8b 	bl	8003e70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800215a:	bf00      	nop
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	24000270 	.word	0x24000270

08002164 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002168:	4802      	ldr	r0, [pc, #8]	@ (8002174 <DMA1_Stream1_IRQHandler+0x10>)
 800216a:	f001 fe81 	bl	8003e70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	240002e8 	.word	0x240002e8

08002178 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(esp32i2cInterruptReqest_Pin);
 800217c:	2020      	movs	r0, #32
 800217e:	f003 fccd 	bl	8005b1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002182:	bf00      	nop
 8002184:	bd80      	pop	{r7, pc}
	...

08002188 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800218c:	4802      	ldr	r0, [pc, #8]	@ (8002198 <TIM1_UP_IRQHandler+0x10>)
 800218e:	f008 ffc3 	bl	800b118 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	24000360 	.word	0x24000360

0800219c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80021a0:	4802      	ldr	r0, [pc, #8]	@ (80021ac <I2C1_EV_IRQHandler+0x10>)
 80021a2:	f003 ff7d 	bl	80060a0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80021a6:	bf00      	nop
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	2400021c 	.word	0x2400021c

080021b0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80021b4:	4802      	ldr	r0, [pc, #8]	@ (80021c0 <I2C1_ER_IRQHandler+0x10>)
 80021b6:	f003 ff8d 	bl	80060d4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80021ba:	bf00      	nop
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	2400021c 	.word	0x2400021c

080021c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  return 1;
 80021c8:	2301      	movs	r3, #1
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <_kill>:

int _kill(int pid, int sig)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021de:	f00f fa1b 	bl	8011618 <__errno>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2216      	movs	r2, #22
 80021e6:	601a      	str	r2, [r3, #0]
  return -1;
 80021e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <_exit>:

void _exit (int status)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f7ff ffe7 	bl	80021d4 <_kill>
 while (1) {}    /* Make sure we hang here */
 8002206:	bf00      	nop
 8002208:	e7fd      	b.n	8002206 <_exit+0x12>

0800220a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b086      	sub	sp, #24
 800220e:	af00      	add	r7, sp, #0
 8002210:	60f8      	str	r0, [r7, #12]
 8002212:	60b9      	str	r1, [r7, #8]
 8002214:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002216:	2300      	movs	r3, #0
 8002218:	617b      	str	r3, [r7, #20]
 800221a:	e00a      	b.n	8002232 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800221c:	f3af 8000 	nop.w
 8002220:	4601      	mov	r1, r0
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	1c5a      	adds	r2, r3, #1
 8002226:	60ba      	str	r2, [r7, #8]
 8002228:	b2ca      	uxtb	r2, r1
 800222a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	3301      	adds	r3, #1
 8002230:	617b      	str	r3, [r7, #20]
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	429a      	cmp	r2, r3
 8002238:	dbf0      	blt.n	800221c <_read+0x12>
  }

  return len;
 800223a:	687b      	ldr	r3, [r7, #4]
}
 800223c:	4618      	mov	r0, r3
 800223e:	3718      	adds	r7, #24
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002250:	2300      	movs	r3, #0
 8002252:	617b      	str	r3, [r7, #20]
 8002254:	e009      	b.n	800226a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	1c5a      	adds	r2, r3, #1
 800225a:	60ba      	str	r2, [r7, #8]
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	4618      	mov	r0, r3
 8002260:	f7ff f8d8 	bl	8001414 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	3301      	adds	r3, #1
 8002268:	617b      	str	r3, [r7, #20]
 800226a:	697a      	ldr	r2, [r7, #20]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	429a      	cmp	r2, r3
 8002270:	dbf1      	blt.n	8002256 <_write+0x12>
  }
  return len;
 8002272:	687b      	ldr	r3, [r7, #4]
}
 8002274:	4618      	mov	r0, r3
 8002276:	3718      	adds	r7, #24
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <_close>:

int _close(int file)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002284:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002288:	4618      	mov	r0, r3
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022a4:	605a      	str	r2, [r3, #4]
  return 0;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <_isatty>:

int _isatty(int file)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022bc:	2301      	movs	r3, #1
}
 80022be:	4618      	mov	r0, r3
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022ca:	b480      	push	{r7}
 80022cc:	b085      	sub	sp, #20
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	60f8      	str	r0, [r7, #12]
 80022d2:	60b9      	str	r1, [r7, #8]
 80022d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3714      	adds	r7, #20
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022ec:	4a14      	ldr	r2, [pc, #80]	@ (8002340 <_sbrk+0x5c>)
 80022ee:	4b15      	ldr	r3, [pc, #84]	@ (8002344 <_sbrk+0x60>)
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022f8:	4b13      	ldr	r3, [pc, #76]	@ (8002348 <_sbrk+0x64>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d102      	bne.n	8002306 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002300:	4b11      	ldr	r3, [pc, #68]	@ (8002348 <_sbrk+0x64>)
 8002302:	4a12      	ldr	r2, [pc, #72]	@ (800234c <_sbrk+0x68>)
 8002304:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002306:	4b10      	ldr	r3, [pc, #64]	@ (8002348 <_sbrk+0x64>)
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4413      	add	r3, r2
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	429a      	cmp	r2, r3
 8002312:	d207      	bcs.n	8002324 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002314:	f00f f980 	bl	8011618 <__errno>
 8002318:	4603      	mov	r3, r0
 800231a:	220c      	movs	r2, #12
 800231c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800231e:	f04f 33ff 	mov.w	r3, #4294967295
 8002322:	e009      	b.n	8002338 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002324:	4b08      	ldr	r3, [pc, #32]	@ (8002348 <_sbrk+0x64>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800232a:	4b07      	ldr	r3, [pc, #28]	@ (8002348 <_sbrk+0x64>)
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4413      	add	r3, r2
 8002332:	4a05      	ldr	r2, [pc, #20]	@ (8002348 <_sbrk+0x64>)
 8002334:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002336:	68fb      	ldr	r3, [r7, #12]
}
 8002338:	4618      	mov	r0, r3
 800233a:	3718      	adds	r7, #24
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	24100000 	.word	0x24100000
 8002344:	00000400 	.word	0x00000400
 8002348:	240003ac 	.word	0x240003ac
 800234c:	24004f90 	.word	0x24004f90

08002350 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002354:	4b32      	ldr	r3, [pc, #200]	@ (8002420 <SystemInit+0xd0>)
 8002356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800235a:	4a31      	ldr	r2, [pc, #196]	@ (8002420 <SystemInit+0xd0>)
 800235c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002360:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002364:	4b2f      	ldr	r3, [pc, #188]	@ (8002424 <SystemInit+0xd4>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 030f 	and.w	r3, r3, #15
 800236c:	2b02      	cmp	r3, #2
 800236e:	d807      	bhi.n	8002380 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002370:	4b2c      	ldr	r3, [pc, #176]	@ (8002424 <SystemInit+0xd4>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f023 030f 	bic.w	r3, r3, #15
 8002378:	4a2a      	ldr	r2, [pc, #168]	@ (8002424 <SystemInit+0xd4>)
 800237a:	f043 0303 	orr.w	r3, r3, #3
 800237e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002380:	4b29      	ldr	r3, [pc, #164]	@ (8002428 <SystemInit+0xd8>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a28      	ldr	r2, [pc, #160]	@ (8002428 <SystemInit+0xd8>)
 8002386:	f043 0301 	orr.w	r3, r3, #1
 800238a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800238c:	4b26      	ldr	r3, [pc, #152]	@ (8002428 <SystemInit+0xd8>)
 800238e:	2200      	movs	r2, #0
 8002390:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002392:	4b25      	ldr	r3, [pc, #148]	@ (8002428 <SystemInit+0xd8>)
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	4924      	ldr	r1, [pc, #144]	@ (8002428 <SystemInit+0xd8>)
 8002398:	4b24      	ldr	r3, [pc, #144]	@ (800242c <SystemInit+0xdc>)
 800239a:	4013      	ands	r3, r2
 800239c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800239e:	4b21      	ldr	r3, [pc, #132]	@ (8002424 <SystemInit+0xd4>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 030c 	and.w	r3, r3, #12
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d007      	beq.n	80023ba <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80023aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002424 <SystemInit+0xd4>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f023 030f 	bic.w	r3, r3, #15
 80023b2:	4a1c      	ldr	r2, [pc, #112]	@ (8002424 <SystemInit+0xd4>)
 80023b4:	f043 0303 	orr.w	r3, r3, #3
 80023b8:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80023ba:	4b1b      	ldr	r3, [pc, #108]	@ (8002428 <SystemInit+0xd8>)
 80023bc:	2200      	movs	r2, #0
 80023be:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80023c0:	4b19      	ldr	r3, [pc, #100]	@ (8002428 <SystemInit+0xd8>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80023c6:	4b18      	ldr	r3, [pc, #96]	@ (8002428 <SystemInit+0xd8>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80023cc:	4b16      	ldr	r3, [pc, #88]	@ (8002428 <SystemInit+0xd8>)
 80023ce:	4a18      	ldr	r2, [pc, #96]	@ (8002430 <SystemInit+0xe0>)
 80023d0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80023d2:	4b15      	ldr	r3, [pc, #84]	@ (8002428 <SystemInit+0xd8>)
 80023d4:	4a17      	ldr	r2, [pc, #92]	@ (8002434 <SystemInit+0xe4>)
 80023d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80023d8:	4b13      	ldr	r3, [pc, #76]	@ (8002428 <SystemInit+0xd8>)
 80023da:	4a17      	ldr	r2, [pc, #92]	@ (8002438 <SystemInit+0xe8>)
 80023dc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80023de:	4b12      	ldr	r3, [pc, #72]	@ (8002428 <SystemInit+0xd8>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80023e4:	4b10      	ldr	r3, [pc, #64]	@ (8002428 <SystemInit+0xd8>)
 80023e6:	4a14      	ldr	r2, [pc, #80]	@ (8002438 <SystemInit+0xe8>)
 80023e8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80023ea:	4b0f      	ldr	r3, [pc, #60]	@ (8002428 <SystemInit+0xd8>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80023f0:	4b0d      	ldr	r3, [pc, #52]	@ (8002428 <SystemInit+0xd8>)
 80023f2:	4a11      	ldr	r2, [pc, #68]	@ (8002438 <SystemInit+0xe8>)
 80023f4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80023f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002428 <SystemInit+0xd8>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80023fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002428 <SystemInit+0xd8>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a09      	ldr	r2, [pc, #36]	@ (8002428 <SystemInit+0xd8>)
 8002402:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002406:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002408:	4b07      	ldr	r3, [pc, #28]	@ (8002428 <SystemInit+0xd8>)
 800240a:	2200      	movs	r2, #0
 800240c:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800240e:	4b0b      	ldr	r3, [pc, #44]	@ (800243c <SystemInit+0xec>)
 8002410:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002414:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002416:	bf00      	nop
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	e000ed00 	.word	0xe000ed00
 8002424:	52002000 	.word	0x52002000
 8002428:	58024400 	.word	0x58024400
 800242c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002430:	02020200 	.word	0x02020200
 8002434:	01ff0000 	.word	0x01ff0000
 8002438:	01010280 	.word	0x01010280
 800243c:	52004000 	.word	0x52004000

08002440 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002444:	4b22      	ldr	r3, [pc, #136]	@ (80024d0 <MX_USART1_UART_Init+0x90>)
 8002446:	4a23      	ldr	r2, [pc, #140]	@ (80024d4 <MX_USART1_UART_Init+0x94>)
 8002448:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800244a:	4b21      	ldr	r3, [pc, #132]	@ (80024d0 <MX_USART1_UART_Init+0x90>)
 800244c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002450:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002452:	4b1f      	ldr	r3, [pc, #124]	@ (80024d0 <MX_USART1_UART_Init+0x90>)
 8002454:	2200      	movs	r2, #0
 8002456:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002458:	4b1d      	ldr	r3, [pc, #116]	@ (80024d0 <MX_USART1_UART_Init+0x90>)
 800245a:	2200      	movs	r2, #0
 800245c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800245e:	4b1c      	ldr	r3, [pc, #112]	@ (80024d0 <MX_USART1_UART_Init+0x90>)
 8002460:	2200      	movs	r2, #0
 8002462:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002464:	4b1a      	ldr	r3, [pc, #104]	@ (80024d0 <MX_USART1_UART_Init+0x90>)
 8002466:	220c      	movs	r2, #12
 8002468:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800246a:	4b19      	ldr	r3, [pc, #100]	@ (80024d0 <MX_USART1_UART_Init+0x90>)
 800246c:	2200      	movs	r2, #0
 800246e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002470:	4b17      	ldr	r3, [pc, #92]	@ (80024d0 <MX_USART1_UART_Init+0x90>)
 8002472:	2200      	movs	r2, #0
 8002474:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002476:	4b16      	ldr	r3, [pc, #88]	@ (80024d0 <MX_USART1_UART_Init+0x90>)
 8002478:	2200      	movs	r2, #0
 800247a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800247c:	4b14      	ldr	r3, [pc, #80]	@ (80024d0 <MX_USART1_UART_Init+0x90>)
 800247e:	2200      	movs	r2, #0
 8002480:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002482:	4b13      	ldr	r3, [pc, #76]	@ (80024d0 <MX_USART1_UART_Init+0x90>)
 8002484:	2200      	movs	r2, #0
 8002486:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002488:	4811      	ldr	r0, [pc, #68]	@ (80024d0 <MX_USART1_UART_Init+0x90>)
 800248a:	f009 f839 	bl	800b500 <HAL_UART_Init>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002494:	f7ff fdba 	bl	800200c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002498:	2100      	movs	r1, #0
 800249a:	480d      	ldr	r0, [pc, #52]	@ (80024d0 <MX_USART1_UART_Init+0x90>)
 800249c:	f00a f9d3 	bl	800c846 <HAL_UARTEx_SetTxFifoThreshold>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80024a6:	f7ff fdb1 	bl	800200c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024aa:	2100      	movs	r1, #0
 80024ac:	4808      	ldr	r0, [pc, #32]	@ (80024d0 <MX_USART1_UART_Init+0x90>)
 80024ae:	f00a fa08 	bl	800c8c2 <HAL_UARTEx_SetRxFifoThreshold>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80024b8:	f7ff fda8 	bl	800200c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80024bc:	4804      	ldr	r0, [pc, #16]	@ (80024d0 <MX_USART1_UART_Init+0x90>)
 80024be:	f00a f989 	bl	800c7d4 <HAL_UARTEx_DisableFifoMode>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80024c8:	f7ff fda0 	bl	800200c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80024cc:	bf00      	nop
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	240003b0 	.word	0x240003b0
 80024d4:	40011000 	.word	0x40011000

080024d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b0ba      	sub	sp, #232	@ 0xe8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	605a      	str	r2, [r3, #4]
 80024ea:	609a      	str	r2, [r3, #8]
 80024ec:	60da      	str	r2, [r3, #12]
 80024ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024f0:	f107 0310 	add.w	r3, r7, #16
 80024f4:	22c0      	movs	r2, #192	@ 0xc0
 80024f6:	2100      	movs	r1, #0
 80024f8:	4618      	mov	r0, r3
 80024fa:	f00e ff91 	bl	8011420 <memset>
  if(uartHandle->Instance==USART1)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a27      	ldr	r2, [pc, #156]	@ (80025a0 <HAL_UART_MspInit+0xc8>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d146      	bne.n	8002596 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002508:	f04f 0201 	mov.w	r2, #1
 800250c:	f04f 0300 	mov.w	r3, #0
 8002510:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002514:	2300      	movs	r3, #0
 8002516:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800251a:	f107 0310 	add.w	r3, r7, #16
 800251e:	4618      	mov	r0, r3
 8002520:	f006 ff40 	bl	80093a4 <HAL_RCCEx_PeriphCLKConfig>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800252a:	f7ff fd6f 	bl	800200c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800252e:	4b1d      	ldr	r3, [pc, #116]	@ (80025a4 <HAL_UART_MspInit+0xcc>)
 8002530:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002534:	4a1b      	ldr	r2, [pc, #108]	@ (80025a4 <HAL_UART_MspInit+0xcc>)
 8002536:	f043 0310 	orr.w	r3, r3, #16
 800253a:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 800253e:	4b19      	ldr	r3, [pc, #100]	@ (80025a4 <HAL_UART_MspInit+0xcc>)
 8002540:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002544:	f003 0310 	and.w	r3, r3, #16
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800254c:	4b15      	ldr	r3, [pc, #84]	@ (80025a4 <HAL_UART_MspInit+0xcc>)
 800254e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002552:	4a14      	ldr	r2, [pc, #80]	@ (80025a4 <HAL_UART_MspInit+0xcc>)
 8002554:	f043 0302 	orr.w	r3, r3, #2
 8002558:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800255c:	4b11      	ldr	r3, [pc, #68]	@ (80025a4 <HAL_UART_MspInit+0xcc>)
 800255e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	60bb      	str	r3, [r7, #8]
 8002568:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = dbg_UART_TX_Pin|dbg_UART_RX_Pin;
 800256a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800256e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002572:	2302      	movs	r3, #2
 8002574:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002578:	2300      	movs	r3, #0
 800257a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257e:	2300      	movs	r3, #0
 8002580:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002584:	2304      	movs	r3, #4
 8002586:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800258a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800258e:	4619      	mov	r1, r3
 8002590:	4805      	ldr	r0, [pc, #20]	@ (80025a8 <HAL_UART_MspInit+0xd0>)
 8002592:	f003 f809 	bl	80055a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002596:	bf00      	nop
 8002598:	37e8      	adds	r7, #232	@ 0xe8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	40011000 	.word	0x40011000
 80025a4:	58024400 	.word	0x58024400
 80025a8:	58020400 	.word	0x58020400

080025ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80025ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80025e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80025b0:	f7ff fece 	bl	8002350 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025b4:	480c      	ldr	r0, [pc, #48]	@ (80025e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80025b6:	490d      	ldr	r1, [pc, #52]	@ (80025ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80025b8:	4a0d      	ldr	r2, [pc, #52]	@ (80025f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80025ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025bc:	e002      	b.n	80025c4 <LoopCopyDataInit>

080025be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025c2:	3304      	adds	r3, #4

080025c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025c8:	d3f9      	bcc.n	80025be <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025ca:	4a0a      	ldr	r2, [pc, #40]	@ (80025f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80025cc:	4c0a      	ldr	r4, [pc, #40]	@ (80025f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80025ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025d0:	e001      	b.n	80025d6 <LoopFillZerobss>

080025d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025d4:	3204      	adds	r2, #4

080025d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025d8:	d3fb      	bcc.n	80025d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025da:	f00f f823 	bl	8011624 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025de:	f7ff fc67 	bl	8001eb0 <main>
  bx  lr
 80025e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025e4:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80025e8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80025ec:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 80025f0:	080153d4 	.word	0x080153d4
  ldr r2, =_sbss
 80025f4:	240001dc 	.word	0x240001dc
  ldr r4, =_ebss
 80025f8:	24004f8c 	.word	0x24004f8c

080025fc <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025fc:	e7fe      	b.n	80025fc <ADC_IRQHandler>
	...

08002600 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002606:	2003      	movs	r0, #3
 8002608:	f000 f927 	bl	800285a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800260c:	f006 fcb2 	bl	8008f74 <HAL_RCC_GetSysClockFreq>
 8002610:	4602      	mov	r2, r0
 8002612:	4b15      	ldr	r3, [pc, #84]	@ (8002668 <HAL_Init+0x68>)
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	0a1b      	lsrs	r3, r3, #8
 8002618:	f003 030f 	and.w	r3, r3, #15
 800261c:	4913      	ldr	r1, [pc, #76]	@ (800266c <HAL_Init+0x6c>)
 800261e:	5ccb      	ldrb	r3, [r1, r3]
 8002620:	f003 031f 	and.w	r3, r3, #31
 8002624:	fa22 f303 	lsr.w	r3, r2, r3
 8002628:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800262a:	4b0f      	ldr	r3, [pc, #60]	@ (8002668 <HAL_Init+0x68>)
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	f003 030f 	and.w	r3, r3, #15
 8002632:	4a0e      	ldr	r2, [pc, #56]	@ (800266c <HAL_Init+0x6c>)
 8002634:	5cd3      	ldrb	r3, [r2, r3]
 8002636:	f003 031f 	and.w	r3, r3, #31
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	fa22 f303 	lsr.w	r3, r2, r3
 8002640:	4a0b      	ldr	r2, [pc, #44]	@ (8002670 <HAL_Init+0x70>)
 8002642:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002644:	4a0b      	ldr	r2, [pc, #44]	@ (8002674 <HAL_Init+0x74>)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800264a:	200f      	movs	r0, #15
 800264c:	f7ff fd02 	bl	8002054 <HAL_InitTick>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e002      	b.n	8002660 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800265a:	f7ff fcdd 	bl	8002018 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	58024400 	.word	0x58024400
 800266c:	08014f58 	.word	0x08014f58
 8002670:	24000004 	.word	0x24000004
 8002674:	24000000 	.word	0x24000000

08002678 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800267c:	4b06      	ldr	r3, [pc, #24]	@ (8002698 <HAL_IncTick+0x20>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	461a      	mov	r2, r3
 8002682:	4b06      	ldr	r3, [pc, #24]	@ (800269c <HAL_IncTick+0x24>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4413      	add	r3, r2
 8002688:	4a04      	ldr	r2, [pc, #16]	@ (800269c <HAL_IncTick+0x24>)
 800268a:	6013      	str	r3, [r2, #0]
}
 800268c:	bf00      	nop
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	2400000c 	.word	0x2400000c
 800269c:	24000444 	.word	0x24000444

080026a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  return uwTick;
 80026a4:	4b03      	ldr	r3, [pc, #12]	@ (80026b4 <HAL_GetTick+0x14>)
 80026a6:	681b      	ldr	r3, [r3, #0]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	24000444 	.word	0x24000444

080026b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f003 0307 	and.w	r3, r3, #7
 80026c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026c8:	4b0b      	ldr	r3, [pc, #44]	@ (80026f8 <__NVIC_SetPriorityGrouping+0x40>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026ce:	68ba      	ldr	r2, [r7, #8]
 80026d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80026d4:	4013      	ands	r3, r2
 80026d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80026e0:	4b06      	ldr	r3, [pc, #24]	@ (80026fc <__NVIC_SetPriorityGrouping+0x44>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026e6:	4a04      	ldr	r2, [pc, #16]	@ (80026f8 <__NVIC_SetPriorityGrouping+0x40>)
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	60d3      	str	r3, [r2, #12]
}
 80026ec:	bf00      	nop
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	e000ed00 	.word	0xe000ed00
 80026fc:	05fa0000 	.word	0x05fa0000

08002700 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002704:	4b04      	ldr	r3, [pc, #16]	@ (8002718 <__NVIC_GetPriorityGrouping+0x18>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	0a1b      	lsrs	r3, r3, #8
 800270a:	f003 0307 	and.w	r3, r3, #7
}
 800270e:	4618      	mov	r0, r3
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr
 8002718:	e000ed00 	.word	0xe000ed00

0800271c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	4603      	mov	r3, r0
 8002724:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002726:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800272a:	2b00      	cmp	r3, #0
 800272c:	db0b      	blt.n	8002746 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800272e:	88fb      	ldrh	r3, [r7, #6]
 8002730:	f003 021f 	and.w	r2, r3, #31
 8002734:	4907      	ldr	r1, [pc, #28]	@ (8002754 <__NVIC_EnableIRQ+0x38>)
 8002736:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800273a:	095b      	lsrs	r3, r3, #5
 800273c:	2001      	movs	r0, #1
 800273e:	fa00 f202 	lsl.w	r2, r0, r2
 8002742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	e000e100 	.word	0xe000e100

08002758 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	4603      	mov	r3, r0
 8002760:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002762:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002766:	2b00      	cmp	r3, #0
 8002768:	db12      	blt.n	8002790 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800276a:	88fb      	ldrh	r3, [r7, #6]
 800276c:	f003 021f 	and.w	r2, r3, #31
 8002770:	490a      	ldr	r1, [pc, #40]	@ (800279c <__NVIC_DisableIRQ+0x44>)
 8002772:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002776:	095b      	lsrs	r3, r3, #5
 8002778:	2001      	movs	r0, #1
 800277a:	fa00 f202 	lsl.w	r2, r0, r2
 800277e:	3320      	adds	r3, #32
 8002780:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002784:	f3bf 8f4f 	dsb	sy
}
 8002788:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800278a:	f3bf 8f6f 	isb	sy
}
 800278e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr
 800279c:	e000e100 	.word	0xe000e100

080027a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	4603      	mov	r3, r0
 80027a8:	6039      	str	r1, [r7, #0]
 80027aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80027ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	db0a      	blt.n	80027ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	b2da      	uxtb	r2, r3
 80027b8:	490c      	ldr	r1, [pc, #48]	@ (80027ec <__NVIC_SetPriority+0x4c>)
 80027ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027be:	0112      	lsls	r2, r2, #4
 80027c0:	b2d2      	uxtb	r2, r2
 80027c2:	440b      	add	r3, r1
 80027c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027c8:	e00a      	b.n	80027e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	b2da      	uxtb	r2, r3
 80027ce:	4908      	ldr	r1, [pc, #32]	@ (80027f0 <__NVIC_SetPriority+0x50>)
 80027d0:	88fb      	ldrh	r3, [r7, #6]
 80027d2:	f003 030f 	and.w	r3, r3, #15
 80027d6:	3b04      	subs	r3, #4
 80027d8:	0112      	lsls	r2, r2, #4
 80027da:	b2d2      	uxtb	r2, r2
 80027dc:	440b      	add	r3, r1
 80027de:	761a      	strb	r2, [r3, #24]
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	e000e100 	.word	0xe000e100
 80027f0:	e000ed00 	.word	0xe000ed00

080027f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b089      	sub	sp, #36	@ 0x24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	f1c3 0307 	rsb	r3, r3, #7
 800280e:	2b04      	cmp	r3, #4
 8002810:	bf28      	it	cs
 8002812:	2304      	movcs	r3, #4
 8002814:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	3304      	adds	r3, #4
 800281a:	2b06      	cmp	r3, #6
 800281c:	d902      	bls.n	8002824 <NVIC_EncodePriority+0x30>
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	3b03      	subs	r3, #3
 8002822:	e000      	b.n	8002826 <NVIC_EncodePriority+0x32>
 8002824:	2300      	movs	r3, #0
 8002826:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002828:	f04f 32ff 	mov.w	r2, #4294967295
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	43da      	mvns	r2, r3
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	401a      	ands	r2, r3
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800283c:	f04f 31ff 	mov.w	r1, #4294967295
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	fa01 f303 	lsl.w	r3, r1, r3
 8002846:	43d9      	mvns	r1, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800284c:	4313      	orrs	r3, r2
         );
}
 800284e:	4618      	mov	r0, r3
 8002850:	3724      	adds	r7, #36	@ 0x24
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b082      	sub	sp, #8
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7ff ff28 	bl	80026b8 <__NVIC_SetPriorityGrouping>
}
 8002868:	bf00      	nop
 800286a:	3708      	adds	r7, #8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
 8002876:	4603      	mov	r3, r0
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
 800287c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800287e:	f7ff ff3f 	bl	8002700 <__NVIC_GetPriorityGrouping>
 8002882:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	68b9      	ldr	r1, [r7, #8]
 8002888:	6978      	ldr	r0, [r7, #20]
 800288a:	f7ff ffb3 	bl	80027f4 <NVIC_EncodePriority>
 800288e:	4602      	mov	r2, r0
 8002890:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002894:	4611      	mov	r1, r2
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff ff82 	bl	80027a0 <__NVIC_SetPriority>
}
 800289c:	bf00      	nop
 800289e:	3718      	adds	r7, #24
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	4603      	mov	r3, r0
 80028ac:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff ff32 	bl	800271c <__NVIC_EnableIRQ>
}
 80028b8:	bf00      	nop
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	4603      	mov	r3, r0
 80028c8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80028ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff ff42 	bl	8002758 <__NVIC_DisableIRQ>
}
 80028d4:	bf00      	nop
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80028e4:	f7ff fedc 	bl	80026a0 <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e37d      	b.n	8002ff0 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a66      	ldr	r2, [pc, #408]	@ (8002a94 <HAL_DMA_Init+0x1b8>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d04a      	beq.n	8002994 <HAL_DMA_Init+0xb8>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a65      	ldr	r2, [pc, #404]	@ (8002a98 <HAL_DMA_Init+0x1bc>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d045      	beq.n	8002994 <HAL_DMA_Init+0xb8>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a63      	ldr	r2, [pc, #396]	@ (8002a9c <HAL_DMA_Init+0x1c0>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d040      	beq.n	8002994 <HAL_DMA_Init+0xb8>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a62      	ldr	r2, [pc, #392]	@ (8002aa0 <HAL_DMA_Init+0x1c4>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d03b      	beq.n	8002994 <HAL_DMA_Init+0xb8>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a60      	ldr	r2, [pc, #384]	@ (8002aa4 <HAL_DMA_Init+0x1c8>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d036      	beq.n	8002994 <HAL_DMA_Init+0xb8>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a5f      	ldr	r2, [pc, #380]	@ (8002aa8 <HAL_DMA_Init+0x1cc>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d031      	beq.n	8002994 <HAL_DMA_Init+0xb8>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a5d      	ldr	r2, [pc, #372]	@ (8002aac <HAL_DMA_Init+0x1d0>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d02c      	beq.n	8002994 <HAL_DMA_Init+0xb8>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a5c      	ldr	r2, [pc, #368]	@ (8002ab0 <HAL_DMA_Init+0x1d4>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d027      	beq.n	8002994 <HAL_DMA_Init+0xb8>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a5a      	ldr	r2, [pc, #360]	@ (8002ab4 <HAL_DMA_Init+0x1d8>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d022      	beq.n	8002994 <HAL_DMA_Init+0xb8>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a59      	ldr	r2, [pc, #356]	@ (8002ab8 <HAL_DMA_Init+0x1dc>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d01d      	beq.n	8002994 <HAL_DMA_Init+0xb8>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a57      	ldr	r2, [pc, #348]	@ (8002abc <HAL_DMA_Init+0x1e0>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d018      	beq.n	8002994 <HAL_DMA_Init+0xb8>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a56      	ldr	r2, [pc, #344]	@ (8002ac0 <HAL_DMA_Init+0x1e4>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d013      	beq.n	8002994 <HAL_DMA_Init+0xb8>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a54      	ldr	r2, [pc, #336]	@ (8002ac4 <HAL_DMA_Init+0x1e8>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d00e      	beq.n	8002994 <HAL_DMA_Init+0xb8>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a53      	ldr	r2, [pc, #332]	@ (8002ac8 <HAL_DMA_Init+0x1ec>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d009      	beq.n	8002994 <HAL_DMA_Init+0xb8>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a51      	ldr	r2, [pc, #324]	@ (8002acc <HAL_DMA_Init+0x1f0>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d004      	beq.n	8002994 <HAL_DMA_Init+0xb8>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a50      	ldr	r2, [pc, #320]	@ (8002ad0 <HAL_DMA_Init+0x1f4>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d101      	bne.n	8002998 <HAL_DMA_Init+0xbc>
 8002994:	2301      	movs	r3, #1
 8002996:	e000      	b.n	800299a <HAL_DMA_Init+0xbe>
 8002998:	2300      	movs	r3, #0
 800299a:	2b00      	cmp	r3, #0
 800299c:	f000 813c 	beq.w	8002c18 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2202      	movs	r2, #2
 80029a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a37      	ldr	r2, [pc, #220]	@ (8002a94 <HAL_DMA_Init+0x1b8>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d04a      	beq.n	8002a50 <HAL_DMA_Init+0x174>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a36      	ldr	r2, [pc, #216]	@ (8002a98 <HAL_DMA_Init+0x1bc>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d045      	beq.n	8002a50 <HAL_DMA_Init+0x174>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a34      	ldr	r2, [pc, #208]	@ (8002a9c <HAL_DMA_Init+0x1c0>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d040      	beq.n	8002a50 <HAL_DMA_Init+0x174>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a33      	ldr	r2, [pc, #204]	@ (8002aa0 <HAL_DMA_Init+0x1c4>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d03b      	beq.n	8002a50 <HAL_DMA_Init+0x174>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a31      	ldr	r2, [pc, #196]	@ (8002aa4 <HAL_DMA_Init+0x1c8>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d036      	beq.n	8002a50 <HAL_DMA_Init+0x174>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a30      	ldr	r2, [pc, #192]	@ (8002aa8 <HAL_DMA_Init+0x1cc>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d031      	beq.n	8002a50 <HAL_DMA_Init+0x174>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a2e      	ldr	r2, [pc, #184]	@ (8002aac <HAL_DMA_Init+0x1d0>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d02c      	beq.n	8002a50 <HAL_DMA_Init+0x174>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a2d      	ldr	r2, [pc, #180]	@ (8002ab0 <HAL_DMA_Init+0x1d4>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d027      	beq.n	8002a50 <HAL_DMA_Init+0x174>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a2b      	ldr	r2, [pc, #172]	@ (8002ab4 <HAL_DMA_Init+0x1d8>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d022      	beq.n	8002a50 <HAL_DMA_Init+0x174>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a2a      	ldr	r2, [pc, #168]	@ (8002ab8 <HAL_DMA_Init+0x1dc>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d01d      	beq.n	8002a50 <HAL_DMA_Init+0x174>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a28      	ldr	r2, [pc, #160]	@ (8002abc <HAL_DMA_Init+0x1e0>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d018      	beq.n	8002a50 <HAL_DMA_Init+0x174>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a27      	ldr	r2, [pc, #156]	@ (8002ac0 <HAL_DMA_Init+0x1e4>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d013      	beq.n	8002a50 <HAL_DMA_Init+0x174>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a25      	ldr	r2, [pc, #148]	@ (8002ac4 <HAL_DMA_Init+0x1e8>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d00e      	beq.n	8002a50 <HAL_DMA_Init+0x174>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a24      	ldr	r2, [pc, #144]	@ (8002ac8 <HAL_DMA_Init+0x1ec>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d009      	beq.n	8002a50 <HAL_DMA_Init+0x174>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a22      	ldr	r2, [pc, #136]	@ (8002acc <HAL_DMA_Init+0x1f0>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d004      	beq.n	8002a50 <HAL_DMA_Init+0x174>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a21      	ldr	r2, [pc, #132]	@ (8002ad0 <HAL_DMA_Init+0x1f4>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d108      	bne.n	8002a62 <HAL_DMA_Init+0x186>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 0201 	bic.w	r2, r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]
 8002a60:	e007      	b.n	8002a72 <HAL_DMA_Init+0x196>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f022 0201 	bic.w	r2, r2, #1
 8002a70:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002a72:	e02f      	b.n	8002ad4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a74:	f7ff fe14 	bl	80026a0 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b05      	cmp	r3, #5
 8002a80:	d928      	bls.n	8002ad4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2220      	movs	r2, #32
 8002a86:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2203      	movs	r2, #3
 8002a8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e2ad      	b.n	8002ff0 <HAL_DMA_Init+0x714>
 8002a94:	40020010 	.word	0x40020010
 8002a98:	40020028 	.word	0x40020028
 8002a9c:	40020040 	.word	0x40020040
 8002aa0:	40020058 	.word	0x40020058
 8002aa4:	40020070 	.word	0x40020070
 8002aa8:	40020088 	.word	0x40020088
 8002aac:	400200a0 	.word	0x400200a0
 8002ab0:	400200b8 	.word	0x400200b8
 8002ab4:	40020410 	.word	0x40020410
 8002ab8:	40020428 	.word	0x40020428
 8002abc:	40020440 	.word	0x40020440
 8002ac0:	40020458 	.word	0x40020458
 8002ac4:	40020470 	.word	0x40020470
 8002ac8:	40020488 	.word	0x40020488
 8002acc:	400204a0 	.word	0x400204a0
 8002ad0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1c8      	bne.n	8002a74 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	4b73      	ldr	r3, [pc, #460]	@ (8002cbc <HAL_DMA_Init+0x3e0>)
 8002aee:	4013      	ands	r3, r2
 8002af0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002afa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b06:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b12:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a1b      	ldr	r3, [r3, #32]
 8002b18:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b24:	2b04      	cmp	r3, #4
 8002b26:	d107      	bne.n	8002b38 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b30:	4313      	orrs	r3, r2
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	2b28      	cmp	r3, #40	@ 0x28
 8002b3e:	d903      	bls.n	8002b48 <HAL_DMA_Init+0x26c>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	2b2e      	cmp	r3, #46	@ 0x2e
 8002b46:	d91f      	bls.n	8002b88 <HAL_DMA_Init+0x2ac>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	2b3e      	cmp	r3, #62	@ 0x3e
 8002b4e:	d903      	bls.n	8002b58 <HAL_DMA_Init+0x27c>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	2b42      	cmp	r3, #66	@ 0x42
 8002b56:	d917      	bls.n	8002b88 <HAL_DMA_Init+0x2ac>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	2b46      	cmp	r3, #70	@ 0x46
 8002b5e:	d903      	bls.n	8002b68 <HAL_DMA_Init+0x28c>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	2b48      	cmp	r3, #72	@ 0x48
 8002b66:	d90f      	bls.n	8002b88 <HAL_DMA_Init+0x2ac>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	2b4e      	cmp	r3, #78	@ 0x4e
 8002b6e:	d903      	bls.n	8002b78 <HAL_DMA_Init+0x29c>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	2b52      	cmp	r3, #82	@ 0x52
 8002b76:	d907      	bls.n	8002b88 <HAL_DMA_Init+0x2ac>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	2b73      	cmp	r3, #115	@ 0x73
 8002b7e:	d905      	bls.n	8002b8c <HAL_DMA_Init+0x2b0>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	2b77      	cmp	r3, #119	@ 0x77
 8002b86:	d801      	bhi.n	8002b8c <HAL_DMA_Init+0x2b0>
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e000      	b.n	8002b8e <HAL_DMA_Init+0x2b2>
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b98:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	f023 0307 	bic.w	r3, r3, #7
 8002bb0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc0:	2b04      	cmp	r3, #4
 8002bc2:	d117      	bne.n	8002bf4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bc8:	697a      	ldr	r2, [r7, #20]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00e      	beq.n	8002bf4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f002 fb5c 	bl	8005294 <DMA_CheckFifoParam>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d008      	beq.n	8002bf4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2240      	movs	r2, #64	@ 0x40
 8002be6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e1fd      	b.n	8002ff0 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f002 fa97 	bl	8005130 <DMA_CalcBaseAndBitshift>
 8002c02:	4603      	mov	r3, r0
 8002c04:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c0a:	f003 031f 	and.w	r3, r3, #31
 8002c0e:	223f      	movs	r2, #63	@ 0x3f
 8002c10:	409a      	lsls	r2, r3
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	609a      	str	r2, [r3, #8]
 8002c16:	e0fd      	b.n	8002e14 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a28      	ldr	r2, [pc, #160]	@ (8002cc0 <HAL_DMA_Init+0x3e4>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d04a      	beq.n	8002cb8 <HAL_DMA_Init+0x3dc>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a27      	ldr	r2, [pc, #156]	@ (8002cc4 <HAL_DMA_Init+0x3e8>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d045      	beq.n	8002cb8 <HAL_DMA_Init+0x3dc>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a25      	ldr	r2, [pc, #148]	@ (8002cc8 <HAL_DMA_Init+0x3ec>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d040      	beq.n	8002cb8 <HAL_DMA_Init+0x3dc>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a24      	ldr	r2, [pc, #144]	@ (8002ccc <HAL_DMA_Init+0x3f0>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d03b      	beq.n	8002cb8 <HAL_DMA_Init+0x3dc>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a22      	ldr	r2, [pc, #136]	@ (8002cd0 <HAL_DMA_Init+0x3f4>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d036      	beq.n	8002cb8 <HAL_DMA_Init+0x3dc>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a21      	ldr	r2, [pc, #132]	@ (8002cd4 <HAL_DMA_Init+0x3f8>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d031      	beq.n	8002cb8 <HAL_DMA_Init+0x3dc>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a1f      	ldr	r2, [pc, #124]	@ (8002cd8 <HAL_DMA_Init+0x3fc>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d02c      	beq.n	8002cb8 <HAL_DMA_Init+0x3dc>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a1e      	ldr	r2, [pc, #120]	@ (8002cdc <HAL_DMA_Init+0x400>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d027      	beq.n	8002cb8 <HAL_DMA_Init+0x3dc>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a1c      	ldr	r2, [pc, #112]	@ (8002ce0 <HAL_DMA_Init+0x404>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d022      	beq.n	8002cb8 <HAL_DMA_Init+0x3dc>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a1b      	ldr	r2, [pc, #108]	@ (8002ce4 <HAL_DMA_Init+0x408>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d01d      	beq.n	8002cb8 <HAL_DMA_Init+0x3dc>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a19      	ldr	r2, [pc, #100]	@ (8002ce8 <HAL_DMA_Init+0x40c>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d018      	beq.n	8002cb8 <HAL_DMA_Init+0x3dc>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a18      	ldr	r2, [pc, #96]	@ (8002cec <HAL_DMA_Init+0x410>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d013      	beq.n	8002cb8 <HAL_DMA_Init+0x3dc>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a16      	ldr	r2, [pc, #88]	@ (8002cf0 <HAL_DMA_Init+0x414>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d00e      	beq.n	8002cb8 <HAL_DMA_Init+0x3dc>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a15      	ldr	r2, [pc, #84]	@ (8002cf4 <HAL_DMA_Init+0x418>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d009      	beq.n	8002cb8 <HAL_DMA_Init+0x3dc>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a13      	ldr	r2, [pc, #76]	@ (8002cf8 <HAL_DMA_Init+0x41c>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d004      	beq.n	8002cb8 <HAL_DMA_Init+0x3dc>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a12      	ldr	r2, [pc, #72]	@ (8002cfc <HAL_DMA_Init+0x420>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d123      	bne.n	8002d00 <HAL_DMA_Init+0x424>
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e022      	b.n	8002d02 <HAL_DMA_Init+0x426>
 8002cbc:	fe10803f 	.word	0xfe10803f
 8002cc0:	48022c08 	.word	0x48022c08
 8002cc4:	48022c1c 	.word	0x48022c1c
 8002cc8:	48022c30 	.word	0x48022c30
 8002ccc:	48022c44 	.word	0x48022c44
 8002cd0:	48022c58 	.word	0x48022c58
 8002cd4:	48022c6c 	.word	0x48022c6c
 8002cd8:	48022c80 	.word	0x48022c80
 8002cdc:	48022c94 	.word	0x48022c94
 8002ce0:	58025408 	.word	0x58025408
 8002ce4:	5802541c 	.word	0x5802541c
 8002ce8:	58025430 	.word	0x58025430
 8002cec:	58025444 	.word	0x58025444
 8002cf0:	58025458 	.word	0x58025458
 8002cf4:	5802546c 	.word	0x5802546c
 8002cf8:	58025480 	.word	0x58025480
 8002cfc:	58025494 	.word	0x58025494
 8002d00:	2300      	movs	r3, #0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d07d      	beq.n	8002e02 <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a7f      	ldr	r2, [pc, #508]	@ (8002f08 <HAL_DMA_Init+0x62c>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d021      	beq.n	8002d54 <HAL_DMA_Init+0x478>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a7d      	ldr	r2, [pc, #500]	@ (8002f0c <HAL_DMA_Init+0x630>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d01c      	beq.n	8002d54 <HAL_DMA_Init+0x478>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a7c      	ldr	r2, [pc, #496]	@ (8002f10 <HAL_DMA_Init+0x634>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d017      	beq.n	8002d54 <HAL_DMA_Init+0x478>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a7a      	ldr	r2, [pc, #488]	@ (8002f14 <HAL_DMA_Init+0x638>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d012      	beq.n	8002d54 <HAL_DMA_Init+0x478>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a79      	ldr	r2, [pc, #484]	@ (8002f18 <HAL_DMA_Init+0x63c>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d00d      	beq.n	8002d54 <HAL_DMA_Init+0x478>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a77      	ldr	r2, [pc, #476]	@ (8002f1c <HAL_DMA_Init+0x640>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d008      	beq.n	8002d54 <HAL_DMA_Init+0x478>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a76      	ldr	r2, [pc, #472]	@ (8002f20 <HAL_DMA_Init+0x644>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d003      	beq.n	8002d54 <HAL_DMA_Init+0x478>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a74      	ldr	r2, [pc, #464]	@ (8002f24 <HAL_DMA_Init+0x648>)
 8002d52:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2202      	movs	r2, #2
 8002d58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	4b6e      	ldr	r3, [pc, #440]	@ (8002f28 <HAL_DMA_Init+0x64c>)
 8002d70:	4013      	ands	r3, r2
 8002d72:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	2b40      	cmp	r3, #64	@ 0x40
 8002d7a:	d008      	beq.n	8002d8e <HAL_DMA_Init+0x4b2>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	2b80      	cmp	r3, #128	@ 0x80
 8002d82:	d102      	bne.n	8002d8a <HAL_DMA_Init+0x4ae>
 8002d84:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002d88:	e002      	b.n	8002d90 <HAL_DMA_Init+0x4b4>
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	e000      	b.n	8002d90 <HAL_DMA_Init+0x4b4>
 8002d8e:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	68d2      	ldr	r2, [r2, #12]
 8002d94:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002d96:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002d9e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002da6:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002dae:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002db6:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002dbe:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	4b55      	ldr	r3, [pc, #340]	@ (8002f2c <HAL_DMA_Init+0x650>)
 8002dd6:	4413      	add	r3, r2
 8002dd8:	4a55      	ldr	r2, [pc, #340]	@ (8002f30 <HAL_DMA_Init+0x654>)
 8002dda:	fba2 2303 	umull	r2, r3, r2, r3
 8002dde:	091b      	lsrs	r3, r3, #4
 8002de0:	009a      	lsls	r2, r3, #2
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f002 f9a2 	bl	8005130 <DMA_CalcBaseAndBitshift>
 8002dec:	4603      	mov	r3, r0
 8002dee:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002df4:	f003 031f 	and.w	r3, r3, #31
 8002df8:	2201      	movs	r2, #1
 8002dfa:	409a      	lsls	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	605a      	str	r2, [r3, #4]
 8002e00:	e008      	b.n	8002e14 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2240      	movs	r2, #64	@ 0x40
 8002e06:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2203      	movs	r2, #3
 8002e0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e0ed      	b.n	8002ff0 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a46      	ldr	r2, [pc, #280]	@ (8002f34 <HAL_DMA_Init+0x658>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d072      	beq.n	8002f04 <HAL_DMA_Init+0x628>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a45      	ldr	r2, [pc, #276]	@ (8002f38 <HAL_DMA_Init+0x65c>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d06d      	beq.n	8002f04 <HAL_DMA_Init+0x628>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a43      	ldr	r2, [pc, #268]	@ (8002f3c <HAL_DMA_Init+0x660>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d068      	beq.n	8002f04 <HAL_DMA_Init+0x628>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a42      	ldr	r2, [pc, #264]	@ (8002f40 <HAL_DMA_Init+0x664>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d063      	beq.n	8002f04 <HAL_DMA_Init+0x628>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a40      	ldr	r2, [pc, #256]	@ (8002f44 <HAL_DMA_Init+0x668>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d05e      	beq.n	8002f04 <HAL_DMA_Init+0x628>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a3f      	ldr	r2, [pc, #252]	@ (8002f48 <HAL_DMA_Init+0x66c>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d059      	beq.n	8002f04 <HAL_DMA_Init+0x628>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a3d      	ldr	r2, [pc, #244]	@ (8002f4c <HAL_DMA_Init+0x670>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d054      	beq.n	8002f04 <HAL_DMA_Init+0x628>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a3c      	ldr	r2, [pc, #240]	@ (8002f50 <HAL_DMA_Init+0x674>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d04f      	beq.n	8002f04 <HAL_DMA_Init+0x628>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a3a      	ldr	r2, [pc, #232]	@ (8002f54 <HAL_DMA_Init+0x678>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d04a      	beq.n	8002f04 <HAL_DMA_Init+0x628>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a39      	ldr	r2, [pc, #228]	@ (8002f58 <HAL_DMA_Init+0x67c>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d045      	beq.n	8002f04 <HAL_DMA_Init+0x628>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a37      	ldr	r2, [pc, #220]	@ (8002f5c <HAL_DMA_Init+0x680>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d040      	beq.n	8002f04 <HAL_DMA_Init+0x628>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a36      	ldr	r2, [pc, #216]	@ (8002f60 <HAL_DMA_Init+0x684>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d03b      	beq.n	8002f04 <HAL_DMA_Init+0x628>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a34      	ldr	r2, [pc, #208]	@ (8002f64 <HAL_DMA_Init+0x688>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d036      	beq.n	8002f04 <HAL_DMA_Init+0x628>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a33      	ldr	r2, [pc, #204]	@ (8002f68 <HAL_DMA_Init+0x68c>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d031      	beq.n	8002f04 <HAL_DMA_Init+0x628>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a31      	ldr	r2, [pc, #196]	@ (8002f6c <HAL_DMA_Init+0x690>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d02c      	beq.n	8002f04 <HAL_DMA_Init+0x628>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a30      	ldr	r2, [pc, #192]	@ (8002f70 <HAL_DMA_Init+0x694>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d027      	beq.n	8002f04 <HAL_DMA_Init+0x628>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a13      	ldr	r2, [pc, #76]	@ (8002f08 <HAL_DMA_Init+0x62c>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d022      	beq.n	8002f04 <HAL_DMA_Init+0x628>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a12      	ldr	r2, [pc, #72]	@ (8002f0c <HAL_DMA_Init+0x630>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d01d      	beq.n	8002f04 <HAL_DMA_Init+0x628>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a10      	ldr	r2, [pc, #64]	@ (8002f10 <HAL_DMA_Init+0x634>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d018      	beq.n	8002f04 <HAL_DMA_Init+0x628>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a0f      	ldr	r2, [pc, #60]	@ (8002f14 <HAL_DMA_Init+0x638>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d013      	beq.n	8002f04 <HAL_DMA_Init+0x628>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a0d      	ldr	r2, [pc, #52]	@ (8002f18 <HAL_DMA_Init+0x63c>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d00e      	beq.n	8002f04 <HAL_DMA_Init+0x628>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a0c      	ldr	r2, [pc, #48]	@ (8002f1c <HAL_DMA_Init+0x640>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d009      	beq.n	8002f04 <HAL_DMA_Init+0x628>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a0a      	ldr	r2, [pc, #40]	@ (8002f20 <HAL_DMA_Init+0x644>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d004      	beq.n	8002f04 <HAL_DMA_Init+0x628>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a09      	ldr	r2, [pc, #36]	@ (8002f24 <HAL_DMA_Init+0x648>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d137      	bne.n	8002f74 <HAL_DMA_Init+0x698>
 8002f04:	2301      	movs	r3, #1
 8002f06:	e036      	b.n	8002f76 <HAL_DMA_Init+0x69a>
 8002f08:	58025408 	.word	0x58025408
 8002f0c:	5802541c 	.word	0x5802541c
 8002f10:	58025430 	.word	0x58025430
 8002f14:	58025444 	.word	0x58025444
 8002f18:	58025458 	.word	0x58025458
 8002f1c:	5802546c 	.word	0x5802546c
 8002f20:	58025480 	.word	0x58025480
 8002f24:	58025494 	.word	0x58025494
 8002f28:	fffe000f 	.word	0xfffe000f
 8002f2c:	a7fdabf8 	.word	0xa7fdabf8
 8002f30:	cccccccd 	.word	0xcccccccd
 8002f34:	40020010 	.word	0x40020010
 8002f38:	40020028 	.word	0x40020028
 8002f3c:	40020040 	.word	0x40020040
 8002f40:	40020058 	.word	0x40020058
 8002f44:	40020070 	.word	0x40020070
 8002f48:	40020088 	.word	0x40020088
 8002f4c:	400200a0 	.word	0x400200a0
 8002f50:	400200b8 	.word	0x400200b8
 8002f54:	40020410 	.word	0x40020410
 8002f58:	40020428 	.word	0x40020428
 8002f5c:	40020440 	.word	0x40020440
 8002f60:	40020458 	.word	0x40020458
 8002f64:	40020470 	.word	0x40020470
 8002f68:	40020488 	.word	0x40020488
 8002f6c:	400204a0 	.word	0x400204a0
 8002f70:	400204b8 	.word	0x400204b8
 8002f74:	2300      	movs	r3, #0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d032      	beq.n	8002fe0 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f002 fa06 	bl	800538c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	2b80      	cmp	r3, #128	@ 0x80
 8002f86:	d102      	bne.n	8002f8e <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685a      	ldr	r2, [r3, #4]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f96:	b2d2      	uxtb	r2, r2
 8002f98:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002fa2:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d010      	beq.n	8002fce <HAL_DMA_Init+0x6f2>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	2b08      	cmp	r3, #8
 8002fb2:	d80c      	bhi.n	8002fce <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f002 fa83 	bl	80054c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002fca:	605a      	str	r2, [r3, #4]
 8002fcc:	e008      	b.n	8002fe0 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3718      	adds	r7, #24
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e27e      	b.n	8003508 <HAL_DMA_DeInit+0x510>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a6d      	ldr	r2, [pc, #436]	@ (80031c4 <HAL_DMA_DeInit+0x1cc>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d04a      	beq.n	80030aa <HAL_DMA_DeInit+0xb2>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a6b      	ldr	r2, [pc, #428]	@ (80031c8 <HAL_DMA_DeInit+0x1d0>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d045      	beq.n	80030aa <HAL_DMA_DeInit+0xb2>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a6a      	ldr	r2, [pc, #424]	@ (80031cc <HAL_DMA_DeInit+0x1d4>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d040      	beq.n	80030aa <HAL_DMA_DeInit+0xb2>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a68      	ldr	r2, [pc, #416]	@ (80031d0 <HAL_DMA_DeInit+0x1d8>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d03b      	beq.n	80030aa <HAL_DMA_DeInit+0xb2>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a67      	ldr	r2, [pc, #412]	@ (80031d4 <HAL_DMA_DeInit+0x1dc>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d036      	beq.n	80030aa <HAL_DMA_DeInit+0xb2>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a65      	ldr	r2, [pc, #404]	@ (80031d8 <HAL_DMA_DeInit+0x1e0>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d031      	beq.n	80030aa <HAL_DMA_DeInit+0xb2>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a64      	ldr	r2, [pc, #400]	@ (80031dc <HAL_DMA_DeInit+0x1e4>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d02c      	beq.n	80030aa <HAL_DMA_DeInit+0xb2>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a62      	ldr	r2, [pc, #392]	@ (80031e0 <HAL_DMA_DeInit+0x1e8>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d027      	beq.n	80030aa <HAL_DMA_DeInit+0xb2>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a61      	ldr	r2, [pc, #388]	@ (80031e4 <HAL_DMA_DeInit+0x1ec>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d022      	beq.n	80030aa <HAL_DMA_DeInit+0xb2>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a5f      	ldr	r2, [pc, #380]	@ (80031e8 <HAL_DMA_DeInit+0x1f0>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d01d      	beq.n	80030aa <HAL_DMA_DeInit+0xb2>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a5e      	ldr	r2, [pc, #376]	@ (80031ec <HAL_DMA_DeInit+0x1f4>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d018      	beq.n	80030aa <HAL_DMA_DeInit+0xb2>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a5c      	ldr	r2, [pc, #368]	@ (80031f0 <HAL_DMA_DeInit+0x1f8>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d013      	beq.n	80030aa <HAL_DMA_DeInit+0xb2>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a5b      	ldr	r2, [pc, #364]	@ (80031f4 <HAL_DMA_DeInit+0x1fc>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d00e      	beq.n	80030aa <HAL_DMA_DeInit+0xb2>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a59      	ldr	r2, [pc, #356]	@ (80031f8 <HAL_DMA_DeInit+0x200>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d009      	beq.n	80030aa <HAL_DMA_DeInit+0xb2>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a58      	ldr	r2, [pc, #352]	@ (80031fc <HAL_DMA_DeInit+0x204>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d004      	beq.n	80030aa <HAL_DMA_DeInit+0xb2>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a56      	ldr	r2, [pc, #344]	@ (8003200 <HAL_DMA_DeInit+0x208>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d108      	bne.n	80030bc <HAL_DMA_DeInit+0xc4>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f022 0201 	bic.w	r2, r2, #1
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	e007      	b.n	80030cc <HAL_DMA_DeInit+0xd4>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f022 0201 	bic.w	r2, r2, #1
 80030ca:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a3c      	ldr	r2, [pc, #240]	@ (80031c4 <HAL_DMA_DeInit+0x1cc>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d04a      	beq.n	800316c <HAL_DMA_DeInit+0x174>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a3b      	ldr	r2, [pc, #236]	@ (80031c8 <HAL_DMA_DeInit+0x1d0>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d045      	beq.n	800316c <HAL_DMA_DeInit+0x174>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a39      	ldr	r2, [pc, #228]	@ (80031cc <HAL_DMA_DeInit+0x1d4>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d040      	beq.n	800316c <HAL_DMA_DeInit+0x174>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a38      	ldr	r2, [pc, #224]	@ (80031d0 <HAL_DMA_DeInit+0x1d8>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d03b      	beq.n	800316c <HAL_DMA_DeInit+0x174>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a36      	ldr	r2, [pc, #216]	@ (80031d4 <HAL_DMA_DeInit+0x1dc>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d036      	beq.n	800316c <HAL_DMA_DeInit+0x174>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a35      	ldr	r2, [pc, #212]	@ (80031d8 <HAL_DMA_DeInit+0x1e0>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d031      	beq.n	800316c <HAL_DMA_DeInit+0x174>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a33      	ldr	r2, [pc, #204]	@ (80031dc <HAL_DMA_DeInit+0x1e4>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d02c      	beq.n	800316c <HAL_DMA_DeInit+0x174>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a32      	ldr	r2, [pc, #200]	@ (80031e0 <HAL_DMA_DeInit+0x1e8>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d027      	beq.n	800316c <HAL_DMA_DeInit+0x174>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a30      	ldr	r2, [pc, #192]	@ (80031e4 <HAL_DMA_DeInit+0x1ec>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d022      	beq.n	800316c <HAL_DMA_DeInit+0x174>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a2f      	ldr	r2, [pc, #188]	@ (80031e8 <HAL_DMA_DeInit+0x1f0>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d01d      	beq.n	800316c <HAL_DMA_DeInit+0x174>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a2d      	ldr	r2, [pc, #180]	@ (80031ec <HAL_DMA_DeInit+0x1f4>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d018      	beq.n	800316c <HAL_DMA_DeInit+0x174>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a2c      	ldr	r2, [pc, #176]	@ (80031f0 <HAL_DMA_DeInit+0x1f8>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d013      	beq.n	800316c <HAL_DMA_DeInit+0x174>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a2a      	ldr	r2, [pc, #168]	@ (80031f4 <HAL_DMA_DeInit+0x1fc>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d00e      	beq.n	800316c <HAL_DMA_DeInit+0x174>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a29      	ldr	r2, [pc, #164]	@ (80031f8 <HAL_DMA_DeInit+0x200>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d009      	beq.n	800316c <HAL_DMA_DeInit+0x174>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a27      	ldr	r2, [pc, #156]	@ (80031fc <HAL_DMA_DeInit+0x204>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d004      	beq.n	800316c <HAL_DMA_DeInit+0x174>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a26      	ldr	r2, [pc, #152]	@ (8003200 <HAL_DMA_DeInit+0x208>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d101      	bne.n	8003170 <HAL_DMA_DeInit+0x178>
 800316c:	2301      	movs	r3, #1
 800316e:	e000      	b.n	8003172 <HAL_DMA_DeInit+0x17a>
 8003170:	2300      	movs	r3, #0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d046      	beq.n	8003204 <HAL_DMA_DeInit+0x20c>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2200      	movs	r2, #0
 800317c:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2200      	movs	r2, #0
 8003184:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2200      	movs	r2, #0
 800318c:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2200      	movs	r2, #0
 8003194:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2200      	movs	r2, #0
 800319c:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2221      	movs	r2, #33	@ 0x21
 80031a4:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f001 ffc2 	bl	8005130 <DMA_CalcBaseAndBitshift>
 80031ac:	4603      	mov	r3, r0
 80031ae:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031b4:	f003 031f 	and.w	r3, r3, #31
 80031b8:	223f      	movs	r2, #63	@ 0x3f
 80031ba:	409a      	lsls	r2, r3
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	609a      	str	r2, [r3, #8]
 80031c0:	e099      	b.n	80032f6 <HAL_DMA_DeInit+0x2fe>
 80031c2:	bf00      	nop
 80031c4:	40020010 	.word	0x40020010
 80031c8:	40020028 	.word	0x40020028
 80031cc:	40020040 	.word	0x40020040
 80031d0:	40020058 	.word	0x40020058
 80031d4:	40020070 	.word	0x40020070
 80031d8:	40020088 	.word	0x40020088
 80031dc:	400200a0 	.word	0x400200a0
 80031e0:	400200b8 	.word	0x400200b8
 80031e4:	40020410 	.word	0x40020410
 80031e8:	40020428 	.word	0x40020428
 80031ec:	40020440 	.word	0x40020440
 80031f0:	40020458 	.word	0x40020458
 80031f4:	40020470 	.word	0x40020470
 80031f8:	40020488 	.word	0x40020488
 80031fc:	400204a0 	.word	0x400204a0
 8003200:	400204b8 	.word	0x400204b8
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a78      	ldr	r2, [pc, #480]	@ (80033ec <HAL_DMA_DeInit+0x3f4>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d04a      	beq.n	80032a4 <HAL_DMA_DeInit+0x2ac>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a77      	ldr	r2, [pc, #476]	@ (80033f0 <HAL_DMA_DeInit+0x3f8>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d045      	beq.n	80032a4 <HAL_DMA_DeInit+0x2ac>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a75      	ldr	r2, [pc, #468]	@ (80033f4 <HAL_DMA_DeInit+0x3fc>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d040      	beq.n	80032a4 <HAL_DMA_DeInit+0x2ac>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a74      	ldr	r2, [pc, #464]	@ (80033f8 <HAL_DMA_DeInit+0x400>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d03b      	beq.n	80032a4 <HAL_DMA_DeInit+0x2ac>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a72      	ldr	r2, [pc, #456]	@ (80033fc <HAL_DMA_DeInit+0x404>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d036      	beq.n	80032a4 <HAL_DMA_DeInit+0x2ac>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a71      	ldr	r2, [pc, #452]	@ (8003400 <HAL_DMA_DeInit+0x408>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d031      	beq.n	80032a4 <HAL_DMA_DeInit+0x2ac>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a6f      	ldr	r2, [pc, #444]	@ (8003404 <HAL_DMA_DeInit+0x40c>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d02c      	beq.n	80032a4 <HAL_DMA_DeInit+0x2ac>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a6e      	ldr	r2, [pc, #440]	@ (8003408 <HAL_DMA_DeInit+0x410>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d027      	beq.n	80032a4 <HAL_DMA_DeInit+0x2ac>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a6c      	ldr	r2, [pc, #432]	@ (800340c <HAL_DMA_DeInit+0x414>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d022      	beq.n	80032a4 <HAL_DMA_DeInit+0x2ac>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a6b      	ldr	r2, [pc, #428]	@ (8003410 <HAL_DMA_DeInit+0x418>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d01d      	beq.n	80032a4 <HAL_DMA_DeInit+0x2ac>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a69      	ldr	r2, [pc, #420]	@ (8003414 <HAL_DMA_DeInit+0x41c>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d018      	beq.n	80032a4 <HAL_DMA_DeInit+0x2ac>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a68      	ldr	r2, [pc, #416]	@ (8003418 <HAL_DMA_DeInit+0x420>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d013      	beq.n	80032a4 <HAL_DMA_DeInit+0x2ac>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a66      	ldr	r2, [pc, #408]	@ (800341c <HAL_DMA_DeInit+0x424>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d00e      	beq.n	80032a4 <HAL_DMA_DeInit+0x2ac>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a65      	ldr	r2, [pc, #404]	@ (8003420 <HAL_DMA_DeInit+0x428>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d009      	beq.n	80032a4 <HAL_DMA_DeInit+0x2ac>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a63      	ldr	r2, [pc, #396]	@ (8003424 <HAL_DMA_DeInit+0x42c>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d004      	beq.n	80032a4 <HAL_DMA_DeInit+0x2ac>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a62      	ldr	r2, [pc, #392]	@ (8003428 <HAL_DMA_DeInit+0x430>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d101      	bne.n	80032a8 <HAL_DMA_DeInit+0x2b0>
 80032a4:	2301      	movs	r3, #1
 80032a6:	e000      	b.n	80032aa <HAL_DMA_DeInit+0x2b2>
 80032a8:	2300      	movs	r3, #0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d021      	beq.n	80032f2 <HAL_DMA_DeInit+0x2fa>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2200      	movs	r2, #0
 80032b4:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2200      	movs	r2, #0
 80032bc:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2200      	movs	r2, #0
 80032c4:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2200      	movs	r2, #0
 80032cc:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2200      	movs	r2, #0
 80032d4:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f001 ff2a 	bl	8005130 <DMA_CalcBaseAndBitshift>
 80032dc:	4603      	mov	r3, r0
 80032de:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032e4:	f003 031f 	and.w	r3, r3, #31
 80032e8:	2201      	movs	r2, #1
 80032ea:	409a      	lsls	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	605a      	str	r2, [r3, #4]
 80032f0:	e001      	b.n	80032f6 <HAL_DMA_DeInit+0x2fe>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e108      	b.n	8003508 <HAL_DMA_DeInit+0x510>
  }

#if defined (BDMA1) /* No DMAMUX available for BDMA1 available on  STM32H7Ax/Bx devices only */
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a4c      	ldr	r2, [pc, #304]	@ (800342c <HAL_DMA_DeInit+0x434>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d072      	beq.n	80033e6 <HAL_DMA_DeInit+0x3ee>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a4a      	ldr	r2, [pc, #296]	@ (8003430 <HAL_DMA_DeInit+0x438>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d06d      	beq.n	80033e6 <HAL_DMA_DeInit+0x3ee>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a49      	ldr	r2, [pc, #292]	@ (8003434 <HAL_DMA_DeInit+0x43c>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d068      	beq.n	80033e6 <HAL_DMA_DeInit+0x3ee>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a47      	ldr	r2, [pc, #284]	@ (8003438 <HAL_DMA_DeInit+0x440>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d063      	beq.n	80033e6 <HAL_DMA_DeInit+0x3ee>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a46      	ldr	r2, [pc, #280]	@ (800343c <HAL_DMA_DeInit+0x444>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d05e      	beq.n	80033e6 <HAL_DMA_DeInit+0x3ee>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a44      	ldr	r2, [pc, #272]	@ (8003440 <HAL_DMA_DeInit+0x448>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d059      	beq.n	80033e6 <HAL_DMA_DeInit+0x3ee>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a43      	ldr	r2, [pc, #268]	@ (8003444 <HAL_DMA_DeInit+0x44c>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d054      	beq.n	80033e6 <HAL_DMA_DeInit+0x3ee>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a41      	ldr	r2, [pc, #260]	@ (8003448 <HAL_DMA_DeInit+0x450>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d04f      	beq.n	80033e6 <HAL_DMA_DeInit+0x3ee>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a40      	ldr	r2, [pc, #256]	@ (800344c <HAL_DMA_DeInit+0x454>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d04a      	beq.n	80033e6 <HAL_DMA_DeInit+0x3ee>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a3e      	ldr	r2, [pc, #248]	@ (8003450 <HAL_DMA_DeInit+0x458>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d045      	beq.n	80033e6 <HAL_DMA_DeInit+0x3ee>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a3d      	ldr	r2, [pc, #244]	@ (8003454 <HAL_DMA_DeInit+0x45c>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d040      	beq.n	80033e6 <HAL_DMA_DeInit+0x3ee>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a3b      	ldr	r2, [pc, #236]	@ (8003458 <HAL_DMA_DeInit+0x460>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d03b      	beq.n	80033e6 <HAL_DMA_DeInit+0x3ee>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a3a      	ldr	r2, [pc, #232]	@ (800345c <HAL_DMA_DeInit+0x464>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d036      	beq.n	80033e6 <HAL_DMA_DeInit+0x3ee>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a38      	ldr	r2, [pc, #224]	@ (8003460 <HAL_DMA_DeInit+0x468>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d031      	beq.n	80033e6 <HAL_DMA_DeInit+0x3ee>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a37      	ldr	r2, [pc, #220]	@ (8003464 <HAL_DMA_DeInit+0x46c>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d02c      	beq.n	80033e6 <HAL_DMA_DeInit+0x3ee>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a35      	ldr	r2, [pc, #212]	@ (8003468 <HAL_DMA_DeInit+0x470>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d027      	beq.n	80033e6 <HAL_DMA_DeInit+0x3ee>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a1c      	ldr	r2, [pc, #112]	@ (800340c <HAL_DMA_DeInit+0x414>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d022      	beq.n	80033e6 <HAL_DMA_DeInit+0x3ee>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a1a      	ldr	r2, [pc, #104]	@ (8003410 <HAL_DMA_DeInit+0x418>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d01d      	beq.n	80033e6 <HAL_DMA_DeInit+0x3ee>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a19      	ldr	r2, [pc, #100]	@ (8003414 <HAL_DMA_DeInit+0x41c>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d018      	beq.n	80033e6 <HAL_DMA_DeInit+0x3ee>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a17      	ldr	r2, [pc, #92]	@ (8003418 <HAL_DMA_DeInit+0x420>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d013      	beq.n	80033e6 <HAL_DMA_DeInit+0x3ee>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a16      	ldr	r2, [pc, #88]	@ (800341c <HAL_DMA_DeInit+0x424>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d00e      	beq.n	80033e6 <HAL_DMA_DeInit+0x3ee>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a14      	ldr	r2, [pc, #80]	@ (8003420 <HAL_DMA_DeInit+0x428>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d009      	beq.n	80033e6 <HAL_DMA_DeInit+0x3ee>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a13      	ldr	r2, [pc, #76]	@ (8003424 <HAL_DMA_DeInit+0x42c>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d004      	beq.n	80033e6 <HAL_DMA_DeInit+0x3ee>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a11      	ldr	r2, [pc, #68]	@ (8003428 <HAL_DMA_DeInit+0x430>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d142      	bne.n	800346c <HAL_DMA_DeInit+0x474>
 80033e6:	2301      	movs	r3, #1
 80033e8:	e041      	b.n	800346e <HAL_DMA_DeInit+0x476>
 80033ea:	bf00      	nop
 80033ec:	48022c08 	.word	0x48022c08
 80033f0:	48022c1c 	.word	0x48022c1c
 80033f4:	48022c30 	.word	0x48022c30
 80033f8:	48022c44 	.word	0x48022c44
 80033fc:	48022c58 	.word	0x48022c58
 8003400:	48022c6c 	.word	0x48022c6c
 8003404:	48022c80 	.word	0x48022c80
 8003408:	48022c94 	.word	0x48022c94
 800340c:	58025408 	.word	0x58025408
 8003410:	5802541c 	.word	0x5802541c
 8003414:	58025430 	.word	0x58025430
 8003418:	58025444 	.word	0x58025444
 800341c:	58025458 	.word	0x58025458
 8003420:	5802546c 	.word	0x5802546c
 8003424:	58025480 	.word	0x58025480
 8003428:	58025494 	.word	0x58025494
 800342c:	40020010 	.word	0x40020010
 8003430:	40020028 	.word	0x40020028
 8003434:	40020040 	.word	0x40020040
 8003438:	40020058 	.word	0x40020058
 800343c:	40020070 	.word	0x40020070
 8003440:	40020088 	.word	0x40020088
 8003444:	400200a0 	.word	0x400200a0
 8003448:	400200b8 	.word	0x400200b8
 800344c:	40020410 	.word	0x40020410
 8003450:	40020428 	.word	0x40020428
 8003454:	40020440 	.word	0x40020440
 8003458:	40020458 	.word	0x40020458
 800345c:	40020470 	.word	0x40020470
 8003460:	40020488 	.word	0x40020488
 8003464:	400204a0 	.word	0x400204a0
 8003468:	400204b8 	.word	0x400204b8
 800346c:	2300      	movs	r3, #0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d02c      	beq.n	80034cc <HAL_DMA_DeInit+0x4d4>
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f001 ff8a 	bl	800538c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800347c:	2b00      	cmp	r3, #0
 800347e:	d008      	beq.n	8003492 <HAL_DMA_DeInit+0x49a>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003484:	2200      	movs	r2, #0
 8003486:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003490:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00f      	beq.n	80034ba <HAL_DMA_DeInit+0x4c2>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	2b08      	cmp	r3, #8
 80034a0:	d80b      	bhi.n	80034ba <HAL_DMA_DeInit+0x4c2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f002 f80c 	bl	80054c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034ac:	2200      	movs	r2, #0
 80034ae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80034b8:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	671a      	str	r2, [r3, #112]	@ 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	675a      	str	r2, [r3, #116]	@ 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback     = NULL;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback      = NULL;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback      = NULL;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3710      	adds	r7, #16
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
 800351c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800351e:	2300      	movs	r3, #0
 8003520:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d101      	bne.n	800352c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e226      	b.n	800397a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003532:	2b01      	cmp	r3, #1
 8003534:	d101      	bne.n	800353a <HAL_DMA_Start_IT+0x2a>
 8003536:	2302      	movs	r3, #2
 8003538:	e21f      	b.n	800397a <HAL_DMA_Start_IT+0x46a>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2201      	movs	r2, #1
 800353e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b01      	cmp	r3, #1
 800354c:	f040 820a 	bne.w	8003964 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2202      	movs	r2, #2
 8003554:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a68      	ldr	r2, [pc, #416]	@ (8003704 <HAL_DMA_Start_IT+0x1f4>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d04a      	beq.n	80035fe <HAL_DMA_Start_IT+0xee>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a66      	ldr	r2, [pc, #408]	@ (8003708 <HAL_DMA_Start_IT+0x1f8>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d045      	beq.n	80035fe <HAL_DMA_Start_IT+0xee>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a65      	ldr	r2, [pc, #404]	@ (800370c <HAL_DMA_Start_IT+0x1fc>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d040      	beq.n	80035fe <HAL_DMA_Start_IT+0xee>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a63      	ldr	r2, [pc, #396]	@ (8003710 <HAL_DMA_Start_IT+0x200>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d03b      	beq.n	80035fe <HAL_DMA_Start_IT+0xee>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a62      	ldr	r2, [pc, #392]	@ (8003714 <HAL_DMA_Start_IT+0x204>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d036      	beq.n	80035fe <HAL_DMA_Start_IT+0xee>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a60      	ldr	r2, [pc, #384]	@ (8003718 <HAL_DMA_Start_IT+0x208>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d031      	beq.n	80035fe <HAL_DMA_Start_IT+0xee>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a5f      	ldr	r2, [pc, #380]	@ (800371c <HAL_DMA_Start_IT+0x20c>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d02c      	beq.n	80035fe <HAL_DMA_Start_IT+0xee>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a5d      	ldr	r2, [pc, #372]	@ (8003720 <HAL_DMA_Start_IT+0x210>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d027      	beq.n	80035fe <HAL_DMA_Start_IT+0xee>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a5c      	ldr	r2, [pc, #368]	@ (8003724 <HAL_DMA_Start_IT+0x214>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d022      	beq.n	80035fe <HAL_DMA_Start_IT+0xee>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a5a      	ldr	r2, [pc, #360]	@ (8003728 <HAL_DMA_Start_IT+0x218>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d01d      	beq.n	80035fe <HAL_DMA_Start_IT+0xee>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a59      	ldr	r2, [pc, #356]	@ (800372c <HAL_DMA_Start_IT+0x21c>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d018      	beq.n	80035fe <HAL_DMA_Start_IT+0xee>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a57      	ldr	r2, [pc, #348]	@ (8003730 <HAL_DMA_Start_IT+0x220>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d013      	beq.n	80035fe <HAL_DMA_Start_IT+0xee>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a56      	ldr	r2, [pc, #344]	@ (8003734 <HAL_DMA_Start_IT+0x224>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d00e      	beq.n	80035fe <HAL_DMA_Start_IT+0xee>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a54      	ldr	r2, [pc, #336]	@ (8003738 <HAL_DMA_Start_IT+0x228>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d009      	beq.n	80035fe <HAL_DMA_Start_IT+0xee>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a53      	ldr	r2, [pc, #332]	@ (800373c <HAL_DMA_Start_IT+0x22c>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d004      	beq.n	80035fe <HAL_DMA_Start_IT+0xee>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a51      	ldr	r2, [pc, #324]	@ (8003740 <HAL_DMA_Start_IT+0x230>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d108      	bne.n	8003610 <HAL_DMA_Start_IT+0x100>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f022 0201 	bic.w	r2, r2, #1
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	e007      	b.n	8003620 <HAL_DMA_Start_IT+0x110>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f022 0201 	bic.w	r2, r2, #1
 800361e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	68b9      	ldr	r1, [r7, #8]
 8003626:	68f8      	ldr	r0, [r7, #12]
 8003628:	f001 fb9e 	bl	8004d68 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a34      	ldr	r2, [pc, #208]	@ (8003704 <HAL_DMA_Start_IT+0x1f4>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d04a      	beq.n	80036cc <HAL_DMA_Start_IT+0x1bc>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a33      	ldr	r2, [pc, #204]	@ (8003708 <HAL_DMA_Start_IT+0x1f8>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d045      	beq.n	80036cc <HAL_DMA_Start_IT+0x1bc>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a31      	ldr	r2, [pc, #196]	@ (800370c <HAL_DMA_Start_IT+0x1fc>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d040      	beq.n	80036cc <HAL_DMA_Start_IT+0x1bc>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a30      	ldr	r2, [pc, #192]	@ (8003710 <HAL_DMA_Start_IT+0x200>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d03b      	beq.n	80036cc <HAL_DMA_Start_IT+0x1bc>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a2e      	ldr	r2, [pc, #184]	@ (8003714 <HAL_DMA_Start_IT+0x204>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d036      	beq.n	80036cc <HAL_DMA_Start_IT+0x1bc>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a2d      	ldr	r2, [pc, #180]	@ (8003718 <HAL_DMA_Start_IT+0x208>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d031      	beq.n	80036cc <HAL_DMA_Start_IT+0x1bc>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a2b      	ldr	r2, [pc, #172]	@ (800371c <HAL_DMA_Start_IT+0x20c>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d02c      	beq.n	80036cc <HAL_DMA_Start_IT+0x1bc>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a2a      	ldr	r2, [pc, #168]	@ (8003720 <HAL_DMA_Start_IT+0x210>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d027      	beq.n	80036cc <HAL_DMA_Start_IT+0x1bc>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a28      	ldr	r2, [pc, #160]	@ (8003724 <HAL_DMA_Start_IT+0x214>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d022      	beq.n	80036cc <HAL_DMA_Start_IT+0x1bc>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a27      	ldr	r2, [pc, #156]	@ (8003728 <HAL_DMA_Start_IT+0x218>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d01d      	beq.n	80036cc <HAL_DMA_Start_IT+0x1bc>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a25      	ldr	r2, [pc, #148]	@ (800372c <HAL_DMA_Start_IT+0x21c>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d018      	beq.n	80036cc <HAL_DMA_Start_IT+0x1bc>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a24      	ldr	r2, [pc, #144]	@ (8003730 <HAL_DMA_Start_IT+0x220>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d013      	beq.n	80036cc <HAL_DMA_Start_IT+0x1bc>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a22      	ldr	r2, [pc, #136]	@ (8003734 <HAL_DMA_Start_IT+0x224>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d00e      	beq.n	80036cc <HAL_DMA_Start_IT+0x1bc>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a21      	ldr	r2, [pc, #132]	@ (8003738 <HAL_DMA_Start_IT+0x228>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d009      	beq.n	80036cc <HAL_DMA_Start_IT+0x1bc>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a1f      	ldr	r2, [pc, #124]	@ (800373c <HAL_DMA_Start_IT+0x22c>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d004      	beq.n	80036cc <HAL_DMA_Start_IT+0x1bc>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a1e      	ldr	r2, [pc, #120]	@ (8003740 <HAL_DMA_Start_IT+0x230>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d101      	bne.n	80036d0 <HAL_DMA_Start_IT+0x1c0>
 80036cc:	2301      	movs	r3, #1
 80036ce:	e000      	b.n	80036d2 <HAL_DMA_Start_IT+0x1c2>
 80036d0:	2300      	movs	r3, #0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d036      	beq.n	8003744 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f023 021e 	bic.w	r2, r3, #30
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f042 0216 	orr.w	r2, r2, #22
 80036e8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d03e      	beq.n	8003770 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f042 0208 	orr.w	r2, r2, #8
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	e035      	b.n	8003770 <HAL_DMA_Start_IT+0x260>
 8003704:	40020010 	.word	0x40020010
 8003708:	40020028 	.word	0x40020028
 800370c:	40020040 	.word	0x40020040
 8003710:	40020058 	.word	0x40020058
 8003714:	40020070 	.word	0x40020070
 8003718:	40020088 	.word	0x40020088
 800371c:	400200a0 	.word	0x400200a0
 8003720:	400200b8 	.word	0x400200b8
 8003724:	40020410 	.word	0x40020410
 8003728:	40020428 	.word	0x40020428
 800372c:	40020440 	.word	0x40020440
 8003730:	40020458 	.word	0x40020458
 8003734:	40020470 	.word	0x40020470
 8003738:	40020488 	.word	0x40020488
 800373c:	400204a0 	.word	0x400204a0
 8003740:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f023 020e 	bic.w	r2, r3, #14
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f042 020a 	orr.w	r2, r2, #10
 8003756:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375c:	2b00      	cmp	r3, #0
 800375e:	d007      	beq.n	8003770 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f042 0204 	orr.w	r2, r2, #4
 800376e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a83      	ldr	r2, [pc, #524]	@ (8003984 <HAL_DMA_Start_IT+0x474>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d072      	beq.n	8003860 <HAL_DMA_Start_IT+0x350>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a82      	ldr	r2, [pc, #520]	@ (8003988 <HAL_DMA_Start_IT+0x478>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d06d      	beq.n	8003860 <HAL_DMA_Start_IT+0x350>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a80      	ldr	r2, [pc, #512]	@ (800398c <HAL_DMA_Start_IT+0x47c>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d068      	beq.n	8003860 <HAL_DMA_Start_IT+0x350>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a7f      	ldr	r2, [pc, #508]	@ (8003990 <HAL_DMA_Start_IT+0x480>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d063      	beq.n	8003860 <HAL_DMA_Start_IT+0x350>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a7d      	ldr	r2, [pc, #500]	@ (8003994 <HAL_DMA_Start_IT+0x484>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d05e      	beq.n	8003860 <HAL_DMA_Start_IT+0x350>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a7c      	ldr	r2, [pc, #496]	@ (8003998 <HAL_DMA_Start_IT+0x488>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d059      	beq.n	8003860 <HAL_DMA_Start_IT+0x350>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a7a      	ldr	r2, [pc, #488]	@ (800399c <HAL_DMA_Start_IT+0x48c>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d054      	beq.n	8003860 <HAL_DMA_Start_IT+0x350>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a79      	ldr	r2, [pc, #484]	@ (80039a0 <HAL_DMA_Start_IT+0x490>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d04f      	beq.n	8003860 <HAL_DMA_Start_IT+0x350>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a77      	ldr	r2, [pc, #476]	@ (80039a4 <HAL_DMA_Start_IT+0x494>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d04a      	beq.n	8003860 <HAL_DMA_Start_IT+0x350>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a76      	ldr	r2, [pc, #472]	@ (80039a8 <HAL_DMA_Start_IT+0x498>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d045      	beq.n	8003860 <HAL_DMA_Start_IT+0x350>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a74      	ldr	r2, [pc, #464]	@ (80039ac <HAL_DMA_Start_IT+0x49c>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d040      	beq.n	8003860 <HAL_DMA_Start_IT+0x350>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a73      	ldr	r2, [pc, #460]	@ (80039b0 <HAL_DMA_Start_IT+0x4a0>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d03b      	beq.n	8003860 <HAL_DMA_Start_IT+0x350>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a71      	ldr	r2, [pc, #452]	@ (80039b4 <HAL_DMA_Start_IT+0x4a4>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d036      	beq.n	8003860 <HAL_DMA_Start_IT+0x350>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a70      	ldr	r2, [pc, #448]	@ (80039b8 <HAL_DMA_Start_IT+0x4a8>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d031      	beq.n	8003860 <HAL_DMA_Start_IT+0x350>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a6e      	ldr	r2, [pc, #440]	@ (80039bc <HAL_DMA_Start_IT+0x4ac>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d02c      	beq.n	8003860 <HAL_DMA_Start_IT+0x350>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a6d      	ldr	r2, [pc, #436]	@ (80039c0 <HAL_DMA_Start_IT+0x4b0>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d027      	beq.n	8003860 <HAL_DMA_Start_IT+0x350>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a6b      	ldr	r2, [pc, #428]	@ (80039c4 <HAL_DMA_Start_IT+0x4b4>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d022      	beq.n	8003860 <HAL_DMA_Start_IT+0x350>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a6a      	ldr	r2, [pc, #424]	@ (80039c8 <HAL_DMA_Start_IT+0x4b8>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d01d      	beq.n	8003860 <HAL_DMA_Start_IT+0x350>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a68      	ldr	r2, [pc, #416]	@ (80039cc <HAL_DMA_Start_IT+0x4bc>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d018      	beq.n	8003860 <HAL_DMA_Start_IT+0x350>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a67      	ldr	r2, [pc, #412]	@ (80039d0 <HAL_DMA_Start_IT+0x4c0>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d013      	beq.n	8003860 <HAL_DMA_Start_IT+0x350>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a65      	ldr	r2, [pc, #404]	@ (80039d4 <HAL_DMA_Start_IT+0x4c4>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d00e      	beq.n	8003860 <HAL_DMA_Start_IT+0x350>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a64      	ldr	r2, [pc, #400]	@ (80039d8 <HAL_DMA_Start_IT+0x4c8>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d009      	beq.n	8003860 <HAL_DMA_Start_IT+0x350>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a62      	ldr	r2, [pc, #392]	@ (80039dc <HAL_DMA_Start_IT+0x4cc>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d004      	beq.n	8003860 <HAL_DMA_Start_IT+0x350>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a61      	ldr	r2, [pc, #388]	@ (80039e0 <HAL_DMA_Start_IT+0x4d0>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d101      	bne.n	8003864 <HAL_DMA_Start_IT+0x354>
 8003860:	2301      	movs	r3, #1
 8003862:	e000      	b.n	8003866 <HAL_DMA_Start_IT+0x356>
 8003864:	2300      	movs	r3, #0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d01a      	beq.n	80038a0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d007      	beq.n	8003888 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003882:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003886:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800388c:	2b00      	cmp	r3, #0
 800388e:	d007      	beq.n	80038a0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800389a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800389e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a37      	ldr	r2, [pc, #220]	@ (8003984 <HAL_DMA_Start_IT+0x474>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d04a      	beq.n	8003940 <HAL_DMA_Start_IT+0x430>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a36      	ldr	r2, [pc, #216]	@ (8003988 <HAL_DMA_Start_IT+0x478>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d045      	beq.n	8003940 <HAL_DMA_Start_IT+0x430>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a34      	ldr	r2, [pc, #208]	@ (800398c <HAL_DMA_Start_IT+0x47c>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d040      	beq.n	8003940 <HAL_DMA_Start_IT+0x430>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a33      	ldr	r2, [pc, #204]	@ (8003990 <HAL_DMA_Start_IT+0x480>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d03b      	beq.n	8003940 <HAL_DMA_Start_IT+0x430>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a31      	ldr	r2, [pc, #196]	@ (8003994 <HAL_DMA_Start_IT+0x484>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d036      	beq.n	8003940 <HAL_DMA_Start_IT+0x430>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a30      	ldr	r2, [pc, #192]	@ (8003998 <HAL_DMA_Start_IT+0x488>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d031      	beq.n	8003940 <HAL_DMA_Start_IT+0x430>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a2e      	ldr	r2, [pc, #184]	@ (800399c <HAL_DMA_Start_IT+0x48c>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d02c      	beq.n	8003940 <HAL_DMA_Start_IT+0x430>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a2d      	ldr	r2, [pc, #180]	@ (80039a0 <HAL_DMA_Start_IT+0x490>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d027      	beq.n	8003940 <HAL_DMA_Start_IT+0x430>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a2b      	ldr	r2, [pc, #172]	@ (80039a4 <HAL_DMA_Start_IT+0x494>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d022      	beq.n	8003940 <HAL_DMA_Start_IT+0x430>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a2a      	ldr	r2, [pc, #168]	@ (80039a8 <HAL_DMA_Start_IT+0x498>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d01d      	beq.n	8003940 <HAL_DMA_Start_IT+0x430>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a28      	ldr	r2, [pc, #160]	@ (80039ac <HAL_DMA_Start_IT+0x49c>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d018      	beq.n	8003940 <HAL_DMA_Start_IT+0x430>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a27      	ldr	r2, [pc, #156]	@ (80039b0 <HAL_DMA_Start_IT+0x4a0>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d013      	beq.n	8003940 <HAL_DMA_Start_IT+0x430>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a25      	ldr	r2, [pc, #148]	@ (80039b4 <HAL_DMA_Start_IT+0x4a4>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d00e      	beq.n	8003940 <HAL_DMA_Start_IT+0x430>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a24      	ldr	r2, [pc, #144]	@ (80039b8 <HAL_DMA_Start_IT+0x4a8>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d009      	beq.n	8003940 <HAL_DMA_Start_IT+0x430>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a22      	ldr	r2, [pc, #136]	@ (80039bc <HAL_DMA_Start_IT+0x4ac>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d004      	beq.n	8003940 <HAL_DMA_Start_IT+0x430>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a21      	ldr	r2, [pc, #132]	@ (80039c0 <HAL_DMA_Start_IT+0x4b0>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d108      	bne.n	8003952 <HAL_DMA_Start_IT+0x442>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f042 0201 	orr.w	r2, r2, #1
 800394e:	601a      	str	r2, [r3, #0]
 8003950:	e012      	b.n	8003978 <HAL_DMA_Start_IT+0x468>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f042 0201 	orr.w	r2, r2, #1
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	e009      	b.n	8003978 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800396a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003978:	7dfb      	ldrb	r3, [r7, #23]
}
 800397a:	4618      	mov	r0, r3
 800397c:	3718      	adds	r7, #24
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	40020010 	.word	0x40020010
 8003988:	40020028 	.word	0x40020028
 800398c:	40020040 	.word	0x40020040
 8003990:	40020058 	.word	0x40020058
 8003994:	40020070 	.word	0x40020070
 8003998:	40020088 	.word	0x40020088
 800399c:	400200a0 	.word	0x400200a0
 80039a0:	400200b8 	.word	0x400200b8
 80039a4:	40020410 	.word	0x40020410
 80039a8:	40020428 	.word	0x40020428
 80039ac:	40020440 	.word	0x40020440
 80039b0:	40020458 	.word	0x40020458
 80039b4:	40020470 	.word	0x40020470
 80039b8:	40020488 	.word	0x40020488
 80039bc:	400204a0 	.word	0x400204a0
 80039c0:	400204b8 	.word	0x400204b8
 80039c4:	58025408 	.word	0x58025408
 80039c8:	5802541c 	.word	0x5802541c
 80039cc:	58025430 	.word	0x58025430
 80039d0:	58025444 	.word	0x58025444
 80039d4:	58025458 	.word	0x58025458
 80039d8:	5802546c 	.word	0x5802546c
 80039dc:	58025480 	.word	0x58025480
 80039e0:	58025494 	.word	0x58025494

080039e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e237      	b.n	8003e66 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d004      	beq.n	8003a0c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2280      	movs	r2, #128	@ 0x80
 8003a06:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e22c      	b.n	8003e66 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a5c      	ldr	r2, [pc, #368]	@ (8003b84 <HAL_DMA_Abort_IT+0x1a0>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d04a      	beq.n	8003aac <HAL_DMA_Abort_IT+0xc8>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a5b      	ldr	r2, [pc, #364]	@ (8003b88 <HAL_DMA_Abort_IT+0x1a4>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d045      	beq.n	8003aac <HAL_DMA_Abort_IT+0xc8>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a59      	ldr	r2, [pc, #356]	@ (8003b8c <HAL_DMA_Abort_IT+0x1a8>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d040      	beq.n	8003aac <HAL_DMA_Abort_IT+0xc8>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a58      	ldr	r2, [pc, #352]	@ (8003b90 <HAL_DMA_Abort_IT+0x1ac>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d03b      	beq.n	8003aac <HAL_DMA_Abort_IT+0xc8>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a56      	ldr	r2, [pc, #344]	@ (8003b94 <HAL_DMA_Abort_IT+0x1b0>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d036      	beq.n	8003aac <HAL_DMA_Abort_IT+0xc8>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a55      	ldr	r2, [pc, #340]	@ (8003b98 <HAL_DMA_Abort_IT+0x1b4>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d031      	beq.n	8003aac <HAL_DMA_Abort_IT+0xc8>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a53      	ldr	r2, [pc, #332]	@ (8003b9c <HAL_DMA_Abort_IT+0x1b8>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d02c      	beq.n	8003aac <HAL_DMA_Abort_IT+0xc8>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a52      	ldr	r2, [pc, #328]	@ (8003ba0 <HAL_DMA_Abort_IT+0x1bc>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d027      	beq.n	8003aac <HAL_DMA_Abort_IT+0xc8>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a50      	ldr	r2, [pc, #320]	@ (8003ba4 <HAL_DMA_Abort_IT+0x1c0>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d022      	beq.n	8003aac <HAL_DMA_Abort_IT+0xc8>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a4f      	ldr	r2, [pc, #316]	@ (8003ba8 <HAL_DMA_Abort_IT+0x1c4>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d01d      	beq.n	8003aac <HAL_DMA_Abort_IT+0xc8>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a4d      	ldr	r2, [pc, #308]	@ (8003bac <HAL_DMA_Abort_IT+0x1c8>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d018      	beq.n	8003aac <HAL_DMA_Abort_IT+0xc8>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a4c      	ldr	r2, [pc, #304]	@ (8003bb0 <HAL_DMA_Abort_IT+0x1cc>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d013      	beq.n	8003aac <HAL_DMA_Abort_IT+0xc8>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a4a      	ldr	r2, [pc, #296]	@ (8003bb4 <HAL_DMA_Abort_IT+0x1d0>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d00e      	beq.n	8003aac <HAL_DMA_Abort_IT+0xc8>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a49      	ldr	r2, [pc, #292]	@ (8003bb8 <HAL_DMA_Abort_IT+0x1d4>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d009      	beq.n	8003aac <HAL_DMA_Abort_IT+0xc8>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a47      	ldr	r2, [pc, #284]	@ (8003bbc <HAL_DMA_Abort_IT+0x1d8>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d004      	beq.n	8003aac <HAL_DMA_Abort_IT+0xc8>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a46      	ldr	r2, [pc, #280]	@ (8003bc0 <HAL_DMA_Abort_IT+0x1dc>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d101      	bne.n	8003ab0 <HAL_DMA_Abort_IT+0xcc>
 8003aac:	2301      	movs	r3, #1
 8003aae:	e000      	b.n	8003ab2 <HAL_DMA_Abort_IT+0xce>
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f000 8086 	beq.w	8003bc4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2204      	movs	r2, #4
 8003abc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a2f      	ldr	r2, [pc, #188]	@ (8003b84 <HAL_DMA_Abort_IT+0x1a0>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d04a      	beq.n	8003b60 <HAL_DMA_Abort_IT+0x17c>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a2e      	ldr	r2, [pc, #184]	@ (8003b88 <HAL_DMA_Abort_IT+0x1a4>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d045      	beq.n	8003b60 <HAL_DMA_Abort_IT+0x17c>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a2c      	ldr	r2, [pc, #176]	@ (8003b8c <HAL_DMA_Abort_IT+0x1a8>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d040      	beq.n	8003b60 <HAL_DMA_Abort_IT+0x17c>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a2b      	ldr	r2, [pc, #172]	@ (8003b90 <HAL_DMA_Abort_IT+0x1ac>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d03b      	beq.n	8003b60 <HAL_DMA_Abort_IT+0x17c>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a29      	ldr	r2, [pc, #164]	@ (8003b94 <HAL_DMA_Abort_IT+0x1b0>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d036      	beq.n	8003b60 <HAL_DMA_Abort_IT+0x17c>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a28      	ldr	r2, [pc, #160]	@ (8003b98 <HAL_DMA_Abort_IT+0x1b4>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d031      	beq.n	8003b60 <HAL_DMA_Abort_IT+0x17c>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a26      	ldr	r2, [pc, #152]	@ (8003b9c <HAL_DMA_Abort_IT+0x1b8>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d02c      	beq.n	8003b60 <HAL_DMA_Abort_IT+0x17c>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a25      	ldr	r2, [pc, #148]	@ (8003ba0 <HAL_DMA_Abort_IT+0x1bc>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d027      	beq.n	8003b60 <HAL_DMA_Abort_IT+0x17c>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a23      	ldr	r2, [pc, #140]	@ (8003ba4 <HAL_DMA_Abort_IT+0x1c0>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d022      	beq.n	8003b60 <HAL_DMA_Abort_IT+0x17c>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a22      	ldr	r2, [pc, #136]	@ (8003ba8 <HAL_DMA_Abort_IT+0x1c4>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d01d      	beq.n	8003b60 <HAL_DMA_Abort_IT+0x17c>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a20      	ldr	r2, [pc, #128]	@ (8003bac <HAL_DMA_Abort_IT+0x1c8>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d018      	beq.n	8003b60 <HAL_DMA_Abort_IT+0x17c>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a1f      	ldr	r2, [pc, #124]	@ (8003bb0 <HAL_DMA_Abort_IT+0x1cc>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d013      	beq.n	8003b60 <HAL_DMA_Abort_IT+0x17c>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a1d      	ldr	r2, [pc, #116]	@ (8003bb4 <HAL_DMA_Abort_IT+0x1d0>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d00e      	beq.n	8003b60 <HAL_DMA_Abort_IT+0x17c>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a1c      	ldr	r2, [pc, #112]	@ (8003bb8 <HAL_DMA_Abort_IT+0x1d4>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d009      	beq.n	8003b60 <HAL_DMA_Abort_IT+0x17c>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a1a      	ldr	r2, [pc, #104]	@ (8003bbc <HAL_DMA_Abort_IT+0x1d8>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d004      	beq.n	8003b60 <HAL_DMA_Abort_IT+0x17c>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a19      	ldr	r2, [pc, #100]	@ (8003bc0 <HAL_DMA_Abort_IT+0x1dc>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d108      	bne.n	8003b72 <HAL_DMA_Abort_IT+0x18e>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 0201 	bic.w	r2, r2, #1
 8003b6e:	601a      	str	r2, [r3, #0]
 8003b70:	e178      	b.n	8003e64 <HAL_DMA_Abort_IT+0x480>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 0201 	bic.w	r2, r2, #1
 8003b80:	601a      	str	r2, [r3, #0]
 8003b82:	e16f      	b.n	8003e64 <HAL_DMA_Abort_IT+0x480>
 8003b84:	40020010 	.word	0x40020010
 8003b88:	40020028 	.word	0x40020028
 8003b8c:	40020040 	.word	0x40020040
 8003b90:	40020058 	.word	0x40020058
 8003b94:	40020070 	.word	0x40020070
 8003b98:	40020088 	.word	0x40020088
 8003b9c:	400200a0 	.word	0x400200a0
 8003ba0:	400200b8 	.word	0x400200b8
 8003ba4:	40020410 	.word	0x40020410
 8003ba8:	40020428 	.word	0x40020428
 8003bac:	40020440 	.word	0x40020440
 8003bb0:	40020458 	.word	0x40020458
 8003bb4:	40020470 	.word	0x40020470
 8003bb8:	40020488 	.word	0x40020488
 8003bbc:	400204a0 	.word	0x400204a0
 8003bc0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f022 020e 	bic.w	r2, r2, #14
 8003bd2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a6c      	ldr	r2, [pc, #432]	@ (8003d8c <HAL_DMA_Abort_IT+0x3a8>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d04a      	beq.n	8003c74 <HAL_DMA_Abort_IT+0x290>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a6b      	ldr	r2, [pc, #428]	@ (8003d90 <HAL_DMA_Abort_IT+0x3ac>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d045      	beq.n	8003c74 <HAL_DMA_Abort_IT+0x290>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a69      	ldr	r2, [pc, #420]	@ (8003d94 <HAL_DMA_Abort_IT+0x3b0>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d040      	beq.n	8003c74 <HAL_DMA_Abort_IT+0x290>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a68      	ldr	r2, [pc, #416]	@ (8003d98 <HAL_DMA_Abort_IT+0x3b4>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d03b      	beq.n	8003c74 <HAL_DMA_Abort_IT+0x290>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a66      	ldr	r2, [pc, #408]	@ (8003d9c <HAL_DMA_Abort_IT+0x3b8>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d036      	beq.n	8003c74 <HAL_DMA_Abort_IT+0x290>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a65      	ldr	r2, [pc, #404]	@ (8003da0 <HAL_DMA_Abort_IT+0x3bc>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d031      	beq.n	8003c74 <HAL_DMA_Abort_IT+0x290>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a63      	ldr	r2, [pc, #396]	@ (8003da4 <HAL_DMA_Abort_IT+0x3c0>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d02c      	beq.n	8003c74 <HAL_DMA_Abort_IT+0x290>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a62      	ldr	r2, [pc, #392]	@ (8003da8 <HAL_DMA_Abort_IT+0x3c4>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d027      	beq.n	8003c74 <HAL_DMA_Abort_IT+0x290>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a60      	ldr	r2, [pc, #384]	@ (8003dac <HAL_DMA_Abort_IT+0x3c8>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d022      	beq.n	8003c74 <HAL_DMA_Abort_IT+0x290>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a5f      	ldr	r2, [pc, #380]	@ (8003db0 <HAL_DMA_Abort_IT+0x3cc>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d01d      	beq.n	8003c74 <HAL_DMA_Abort_IT+0x290>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a5d      	ldr	r2, [pc, #372]	@ (8003db4 <HAL_DMA_Abort_IT+0x3d0>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d018      	beq.n	8003c74 <HAL_DMA_Abort_IT+0x290>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a5c      	ldr	r2, [pc, #368]	@ (8003db8 <HAL_DMA_Abort_IT+0x3d4>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d013      	beq.n	8003c74 <HAL_DMA_Abort_IT+0x290>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a5a      	ldr	r2, [pc, #360]	@ (8003dbc <HAL_DMA_Abort_IT+0x3d8>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d00e      	beq.n	8003c74 <HAL_DMA_Abort_IT+0x290>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a59      	ldr	r2, [pc, #356]	@ (8003dc0 <HAL_DMA_Abort_IT+0x3dc>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d009      	beq.n	8003c74 <HAL_DMA_Abort_IT+0x290>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a57      	ldr	r2, [pc, #348]	@ (8003dc4 <HAL_DMA_Abort_IT+0x3e0>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d004      	beq.n	8003c74 <HAL_DMA_Abort_IT+0x290>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a56      	ldr	r2, [pc, #344]	@ (8003dc8 <HAL_DMA_Abort_IT+0x3e4>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d108      	bne.n	8003c86 <HAL_DMA_Abort_IT+0x2a2>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f022 0201 	bic.w	r2, r2, #1
 8003c82:	601a      	str	r2, [r3, #0]
 8003c84:	e007      	b.n	8003c96 <HAL_DMA_Abort_IT+0x2b2>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f022 0201 	bic.w	r2, r2, #1
 8003c94:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a3c      	ldr	r2, [pc, #240]	@ (8003d8c <HAL_DMA_Abort_IT+0x3a8>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d072      	beq.n	8003d86 <HAL_DMA_Abort_IT+0x3a2>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a3a      	ldr	r2, [pc, #232]	@ (8003d90 <HAL_DMA_Abort_IT+0x3ac>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d06d      	beq.n	8003d86 <HAL_DMA_Abort_IT+0x3a2>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a39      	ldr	r2, [pc, #228]	@ (8003d94 <HAL_DMA_Abort_IT+0x3b0>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d068      	beq.n	8003d86 <HAL_DMA_Abort_IT+0x3a2>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a37      	ldr	r2, [pc, #220]	@ (8003d98 <HAL_DMA_Abort_IT+0x3b4>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d063      	beq.n	8003d86 <HAL_DMA_Abort_IT+0x3a2>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a36      	ldr	r2, [pc, #216]	@ (8003d9c <HAL_DMA_Abort_IT+0x3b8>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d05e      	beq.n	8003d86 <HAL_DMA_Abort_IT+0x3a2>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a34      	ldr	r2, [pc, #208]	@ (8003da0 <HAL_DMA_Abort_IT+0x3bc>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d059      	beq.n	8003d86 <HAL_DMA_Abort_IT+0x3a2>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a33      	ldr	r2, [pc, #204]	@ (8003da4 <HAL_DMA_Abort_IT+0x3c0>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d054      	beq.n	8003d86 <HAL_DMA_Abort_IT+0x3a2>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a31      	ldr	r2, [pc, #196]	@ (8003da8 <HAL_DMA_Abort_IT+0x3c4>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d04f      	beq.n	8003d86 <HAL_DMA_Abort_IT+0x3a2>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a30      	ldr	r2, [pc, #192]	@ (8003dac <HAL_DMA_Abort_IT+0x3c8>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d04a      	beq.n	8003d86 <HAL_DMA_Abort_IT+0x3a2>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a2e      	ldr	r2, [pc, #184]	@ (8003db0 <HAL_DMA_Abort_IT+0x3cc>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d045      	beq.n	8003d86 <HAL_DMA_Abort_IT+0x3a2>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a2d      	ldr	r2, [pc, #180]	@ (8003db4 <HAL_DMA_Abort_IT+0x3d0>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d040      	beq.n	8003d86 <HAL_DMA_Abort_IT+0x3a2>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a2b      	ldr	r2, [pc, #172]	@ (8003db8 <HAL_DMA_Abort_IT+0x3d4>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d03b      	beq.n	8003d86 <HAL_DMA_Abort_IT+0x3a2>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a2a      	ldr	r2, [pc, #168]	@ (8003dbc <HAL_DMA_Abort_IT+0x3d8>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d036      	beq.n	8003d86 <HAL_DMA_Abort_IT+0x3a2>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a28      	ldr	r2, [pc, #160]	@ (8003dc0 <HAL_DMA_Abort_IT+0x3dc>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d031      	beq.n	8003d86 <HAL_DMA_Abort_IT+0x3a2>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a27      	ldr	r2, [pc, #156]	@ (8003dc4 <HAL_DMA_Abort_IT+0x3e0>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d02c      	beq.n	8003d86 <HAL_DMA_Abort_IT+0x3a2>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a25      	ldr	r2, [pc, #148]	@ (8003dc8 <HAL_DMA_Abort_IT+0x3e4>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d027      	beq.n	8003d86 <HAL_DMA_Abort_IT+0x3a2>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a24      	ldr	r2, [pc, #144]	@ (8003dcc <HAL_DMA_Abort_IT+0x3e8>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d022      	beq.n	8003d86 <HAL_DMA_Abort_IT+0x3a2>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a22      	ldr	r2, [pc, #136]	@ (8003dd0 <HAL_DMA_Abort_IT+0x3ec>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d01d      	beq.n	8003d86 <HAL_DMA_Abort_IT+0x3a2>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a21      	ldr	r2, [pc, #132]	@ (8003dd4 <HAL_DMA_Abort_IT+0x3f0>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d018      	beq.n	8003d86 <HAL_DMA_Abort_IT+0x3a2>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a1f      	ldr	r2, [pc, #124]	@ (8003dd8 <HAL_DMA_Abort_IT+0x3f4>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d013      	beq.n	8003d86 <HAL_DMA_Abort_IT+0x3a2>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a1e      	ldr	r2, [pc, #120]	@ (8003ddc <HAL_DMA_Abort_IT+0x3f8>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d00e      	beq.n	8003d86 <HAL_DMA_Abort_IT+0x3a2>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a1c      	ldr	r2, [pc, #112]	@ (8003de0 <HAL_DMA_Abort_IT+0x3fc>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d009      	beq.n	8003d86 <HAL_DMA_Abort_IT+0x3a2>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a1b      	ldr	r2, [pc, #108]	@ (8003de4 <HAL_DMA_Abort_IT+0x400>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d004      	beq.n	8003d86 <HAL_DMA_Abort_IT+0x3a2>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a19      	ldr	r2, [pc, #100]	@ (8003de8 <HAL_DMA_Abort_IT+0x404>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d132      	bne.n	8003dec <HAL_DMA_Abort_IT+0x408>
 8003d86:	2301      	movs	r3, #1
 8003d88:	e031      	b.n	8003dee <HAL_DMA_Abort_IT+0x40a>
 8003d8a:	bf00      	nop
 8003d8c:	40020010 	.word	0x40020010
 8003d90:	40020028 	.word	0x40020028
 8003d94:	40020040 	.word	0x40020040
 8003d98:	40020058 	.word	0x40020058
 8003d9c:	40020070 	.word	0x40020070
 8003da0:	40020088 	.word	0x40020088
 8003da4:	400200a0 	.word	0x400200a0
 8003da8:	400200b8 	.word	0x400200b8
 8003dac:	40020410 	.word	0x40020410
 8003db0:	40020428 	.word	0x40020428
 8003db4:	40020440 	.word	0x40020440
 8003db8:	40020458 	.word	0x40020458
 8003dbc:	40020470 	.word	0x40020470
 8003dc0:	40020488 	.word	0x40020488
 8003dc4:	400204a0 	.word	0x400204a0
 8003dc8:	400204b8 	.word	0x400204b8
 8003dcc:	58025408 	.word	0x58025408
 8003dd0:	5802541c 	.word	0x5802541c
 8003dd4:	58025430 	.word	0x58025430
 8003dd8:	58025444 	.word	0x58025444
 8003ddc:	58025458 	.word	0x58025458
 8003de0:	5802546c 	.word	0x5802546c
 8003de4:	58025480 	.word	0x58025480
 8003de8:	58025494 	.word	0x58025494
 8003dec:	2300      	movs	r3, #0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d028      	beq.n	8003e44 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dfc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e00:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e06:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e0c:	f003 031f 	and.w	r3, r3, #31
 8003e10:	2201      	movs	r2, #1
 8003e12:	409a      	lsls	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003e20:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00c      	beq.n	8003e44 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e34:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e38:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003e42:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d003      	beq.n	8003e64 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3710      	adds	r7, #16
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop

08003e70 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b08a      	sub	sp, #40	@ 0x28
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e7c:	4b67      	ldr	r3, [pc, #412]	@ (800401c <HAL_DMA_IRQHandler+0x1ac>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a67      	ldr	r2, [pc, #412]	@ (8004020 <HAL_DMA_IRQHandler+0x1b0>)
 8003e82:	fba2 2303 	umull	r2, r3, r2, r3
 8003e86:	0a9b      	lsrs	r3, r3, #10
 8003e88:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e8e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e94:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003e96:	6a3b      	ldr	r3, [r7, #32]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a5f      	ldr	r2, [pc, #380]	@ (8004024 <HAL_DMA_IRQHandler+0x1b4>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d04a      	beq.n	8003f42 <HAL_DMA_IRQHandler+0xd2>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a5d      	ldr	r2, [pc, #372]	@ (8004028 <HAL_DMA_IRQHandler+0x1b8>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d045      	beq.n	8003f42 <HAL_DMA_IRQHandler+0xd2>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a5c      	ldr	r2, [pc, #368]	@ (800402c <HAL_DMA_IRQHandler+0x1bc>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d040      	beq.n	8003f42 <HAL_DMA_IRQHandler+0xd2>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a5a      	ldr	r2, [pc, #360]	@ (8004030 <HAL_DMA_IRQHandler+0x1c0>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d03b      	beq.n	8003f42 <HAL_DMA_IRQHandler+0xd2>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a59      	ldr	r2, [pc, #356]	@ (8004034 <HAL_DMA_IRQHandler+0x1c4>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d036      	beq.n	8003f42 <HAL_DMA_IRQHandler+0xd2>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a57      	ldr	r2, [pc, #348]	@ (8004038 <HAL_DMA_IRQHandler+0x1c8>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d031      	beq.n	8003f42 <HAL_DMA_IRQHandler+0xd2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a56      	ldr	r2, [pc, #344]	@ (800403c <HAL_DMA_IRQHandler+0x1cc>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d02c      	beq.n	8003f42 <HAL_DMA_IRQHandler+0xd2>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a54      	ldr	r2, [pc, #336]	@ (8004040 <HAL_DMA_IRQHandler+0x1d0>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d027      	beq.n	8003f42 <HAL_DMA_IRQHandler+0xd2>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a53      	ldr	r2, [pc, #332]	@ (8004044 <HAL_DMA_IRQHandler+0x1d4>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d022      	beq.n	8003f42 <HAL_DMA_IRQHandler+0xd2>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a51      	ldr	r2, [pc, #324]	@ (8004048 <HAL_DMA_IRQHandler+0x1d8>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d01d      	beq.n	8003f42 <HAL_DMA_IRQHandler+0xd2>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a50      	ldr	r2, [pc, #320]	@ (800404c <HAL_DMA_IRQHandler+0x1dc>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d018      	beq.n	8003f42 <HAL_DMA_IRQHandler+0xd2>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a4e      	ldr	r2, [pc, #312]	@ (8004050 <HAL_DMA_IRQHandler+0x1e0>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d013      	beq.n	8003f42 <HAL_DMA_IRQHandler+0xd2>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a4d      	ldr	r2, [pc, #308]	@ (8004054 <HAL_DMA_IRQHandler+0x1e4>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d00e      	beq.n	8003f42 <HAL_DMA_IRQHandler+0xd2>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a4b      	ldr	r2, [pc, #300]	@ (8004058 <HAL_DMA_IRQHandler+0x1e8>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d009      	beq.n	8003f42 <HAL_DMA_IRQHandler+0xd2>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a4a      	ldr	r2, [pc, #296]	@ (800405c <HAL_DMA_IRQHandler+0x1ec>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d004      	beq.n	8003f42 <HAL_DMA_IRQHandler+0xd2>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a48      	ldr	r2, [pc, #288]	@ (8004060 <HAL_DMA_IRQHandler+0x1f0>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d101      	bne.n	8003f46 <HAL_DMA_IRQHandler+0xd6>
 8003f42:	2301      	movs	r3, #1
 8003f44:	e000      	b.n	8003f48 <HAL_DMA_IRQHandler+0xd8>
 8003f46:	2300      	movs	r3, #0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f000 842b 	beq.w	80047a4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f52:	f003 031f 	and.w	r3, r3, #31
 8003f56:	2208      	movs	r2, #8
 8003f58:	409a      	lsls	r2, r3
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f000 80a2 	beq.w	80040a8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a2e      	ldr	r2, [pc, #184]	@ (8004024 <HAL_DMA_IRQHandler+0x1b4>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d04a      	beq.n	8004004 <HAL_DMA_IRQHandler+0x194>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a2d      	ldr	r2, [pc, #180]	@ (8004028 <HAL_DMA_IRQHandler+0x1b8>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d045      	beq.n	8004004 <HAL_DMA_IRQHandler+0x194>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a2b      	ldr	r2, [pc, #172]	@ (800402c <HAL_DMA_IRQHandler+0x1bc>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d040      	beq.n	8004004 <HAL_DMA_IRQHandler+0x194>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a2a      	ldr	r2, [pc, #168]	@ (8004030 <HAL_DMA_IRQHandler+0x1c0>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d03b      	beq.n	8004004 <HAL_DMA_IRQHandler+0x194>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a28      	ldr	r2, [pc, #160]	@ (8004034 <HAL_DMA_IRQHandler+0x1c4>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d036      	beq.n	8004004 <HAL_DMA_IRQHandler+0x194>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a27      	ldr	r2, [pc, #156]	@ (8004038 <HAL_DMA_IRQHandler+0x1c8>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d031      	beq.n	8004004 <HAL_DMA_IRQHandler+0x194>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a25      	ldr	r2, [pc, #148]	@ (800403c <HAL_DMA_IRQHandler+0x1cc>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d02c      	beq.n	8004004 <HAL_DMA_IRQHandler+0x194>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a24      	ldr	r2, [pc, #144]	@ (8004040 <HAL_DMA_IRQHandler+0x1d0>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d027      	beq.n	8004004 <HAL_DMA_IRQHandler+0x194>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a22      	ldr	r2, [pc, #136]	@ (8004044 <HAL_DMA_IRQHandler+0x1d4>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d022      	beq.n	8004004 <HAL_DMA_IRQHandler+0x194>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a21      	ldr	r2, [pc, #132]	@ (8004048 <HAL_DMA_IRQHandler+0x1d8>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d01d      	beq.n	8004004 <HAL_DMA_IRQHandler+0x194>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a1f      	ldr	r2, [pc, #124]	@ (800404c <HAL_DMA_IRQHandler+0x1dc>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d018      	beq.n	8004004 <HAL_DMA_IRQHandler+0x194>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a1e      	ldr	r2, [pc, #120]	@ (8004050 <HAL_DMA_IRQHandler+0x1e0>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d013      	beq.n	8004004 <HAL_DMA_IRQHandler+0x194>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a1c      	ldr	r2, [pc, #112]	@ (8004054 <HAL_DMA_IRQHandler+0x1e4>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d00e      	beq.n	8004004 <HAL_DMA_IRQHandler+0x194>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a1b      	ldr	r2, [pc, #108]	@ (8004058 <HAL_DMA_IRQHandler+0x1e8>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d009      	beq.n	8004004 <HAL_DMA_IRQHandler+0x194>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a19      	ldr	r2, [pc, #100]	@ (800405c <HAL_DMA_IRQHandler+0x1ec>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d004      	beq.n	8004004 <HAL_DMA_IRQHandler+0x194>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a18      	ldr	r2, [pc, #96]	@ (8004060 <HAL_DMA_IRQHandler+0x1f0>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d12f      	bne.n	8004064 <HAL_DMA_IRQHandler+0x1f4>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0304 	and.w	r3, r3, #4
 800400e:	2b00      	cmp	r3, #0
 8004010:	bf14      	ite	ne
 8004012:	2301      	movne	r3, #1
 8004014:	2300      	moveq	r3, #0
 8004016:	b2db      	uxtb	r3, r3
 8004018:	e02e      	b.n	8004078 <HAL_DMA_IRQHandler+0x208>
 800401a:	bf00      	nop
 800401c:	24000000 	.word	0x24000000
 8004020:	1b4e81b5 	.word	0x1b4e81b5
 8004024:	40020010 	.word	0x40020010
 8004028:	40020028 	.word	0x40020028
 800402c:	40020040 	.word	0x40020040
 8004030:	40020058 	.word	0x40020058
 8004034:	40020070 	.word	0x40020070
 8004038:	40020088 	.word	0x40020088
 800403c:	400200a0 	.word	0x400200a0
 8004040:	400200b8 	.word	0x400200b8
 8004044:	40020410 	.word	0x40020410
 8004048:	40020428 	.word	0x40020428
 800404c:	40020440 	.word	0x40020440
 8004050:	40020458 	.word	0x40020458
 8004054:	40020470 	.word	0x40020470
 8004058:	40020488 	.word	0x40020488
 800405c:	400204a0 	.word	0x400204a0
 8004060:	400204b8 	.word	0x400204b8
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0308 	and.w	r3, r3, #8
 800406e:	2b00      	cmp	r3, #0
 8004070:	bf14      	ite	ne
 8004072:	2301      	movne	r3, #1
 8004074:	2300      	moveq	r3, #0
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2b00      	cmp	r3, #0
 800407a:	d015      	beq.n	80040a8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f022 0204 	bic.w	r2, r2, #4
 800408a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004090:	f003 031f 	and.w	r3, r3, #31
 8004094:	2208      	movs	r2, #8
 8004096:	409a      	lsls	r2, r3
 8004098:	6a3b      	ldr	r3, [r7, #32]
 800409a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040a0:	f043 0201 	orr.w	r2, r3, #1
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ac:	f003 031f 	and.w	r3, r3, #31
 80040b0:	69ba      	ldr	r2, [r7, #24]
 80040b2:	fa22 f303 	lsr.w	r3, r2, r3
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d06e      	beq.n	800419c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a69      	ldr	r2, [pc, #420]	@ (8004268 <HAL_DMA_IRQHandler+0x3f8>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d04a      	beq.n	800415e <HAL_DMA_IRQHandler+0x2ee>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a67      	ldr	r2, [pc, #412]	@ (800426c <HAL_DMA_IRQHandler+0x3fc>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d045      	beq.n	800415e <HAL_DMA_IRQHandler+0x2ee>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a66      	ldr	r2, [pc, #408]	@ (8004270 <HAL_DMA_IRQHandler+0x400>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d040      	beq.n	800415e <HAL_DMA_IRQHandler+0x2ee>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a64      	ldr	r2, [pc, #400]	@ (8004274 <HAL_DMA_IRQHandler+0x404>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d03b      	beq.n	800415e <HAL_DMA_IRQHandler+0x2ee>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a63      	ldr	r2, [pc, #396]	@ (8004278 <HAL_DMA_IRQHandler+0x408>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d036      	beq.n	800415e <HAL_DMA_IRQHandler+0x2ee>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a61      	ldr	r2, [pc, #388]	@ (800427c <HAL_DMA_IRQHandler+0x40c>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d031      	beq.n	800415e <HAL_DMA_IRQHandler+0x2ee>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a60      	ldr	r2, [pc, #384]	@ (8004280 <HAL_DMA_IRQHandler+0x410>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d02c      	beq.n	800415e <HAL_DMA_IRQHandler+0x2ee>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a5e      	ldr	r2, [pc, #376]	@ (8004284 <HAL_DMA_IRQHandler+0x414>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d027      	beq.n	800415e <HAL_DMA_IRQHandler+0x2ee>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a5d      	ldr	r2, [pc, #372]	@ (8004288 <HAL_DMA_IRQHandler+0x418>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d022      	beq.n	800415e <HAL_DMA_IRQHandler+0x2ee>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a5b      	ldr	r2, [pc, #364]	@ (800428c <HAL_DMA_IRQHandler+0x41c>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d01d      	beq.n	800415e <HAL_DMA_IRQHandler+0x2ee>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a5a      	ldr	r2, [pc, #360]	@ (8004290 <HAL_DMA_IRQHandler+0x420>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d018      	beq.n	800415e <HAL_DMA_IRQHandler+0x2ee>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a58      	ldr	r2, [pc, #352]	@ (8004294 <HAL_DMA_IRQHandler+0x424>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d013      	beq.n	800415e <HAL_DMA_IRQHandler+0x2ee>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a57      	ldr	r2, [pc, #348]	@ (8004298 <HAL_DMA_IRQHandler+0x428>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d00e      	beq.n	800415e <HAL_DMA_IRQHandler+0x2ee>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a55      	ldr	r2, [pc, #340]	@ (800429c <HAL_DMA_IRQHandler+0x42c>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d009      	beq.n	800415e <HAL_DMA_IRQHandler+0x2ee>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a54      	ldr	r2, [pc, #336]	@ (80042a0 <HAL_DMA_IRQHandler+0x430>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d004      	beq.n	800415e <HAL_DMA_IRQHandler+0x2ee>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a52      	ldr	r2, [pc, #328]	@ (80042a4 <HAL_DMA_IRQHandler+0x434>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d10a      	bne.n	8004174 <HAL_DMA_IRQHandler+0x304>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	695b      	ldr	r3, [r3, #20]
 8004164:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004168:	2b00      	cmp	r3, #0
 800416a:	bf14      	ite	ne
 800416c:	2301      	movne	r3, #1
 800416e:	2300      	moveq	r3, #0
 8004170:	b2db      	uxtb	r3, r3
 8004172:	e003      	b.n	800417c <HAL_DMA_IRQHandler+0x30c>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2300      	movs	r3, #0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d00d      	beq.n	800419c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004184:	f003 031f 	and.w	r3, r3, #31
 8004188:	2201      	movs	r2, #1
 800418a:	409a      	lsls	r2, r3
 800418c:	6a3b      	ldr	r3, [r7, #32]
 800418e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004194:	f043 0202 	orr.w	r2, r3, #2
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041a0:	f003 031f 	and.w	r3, r3, #31
 80041a4:	2204      	movs	r2, #4
 80041a6:	409a      	lsls	r2, r3
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	4013      	ands	r3, r2
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f000 808f 	beq.w	80042d0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a2c      	ldr	r2, [pc, #176]	@ (8004268 <HAL_DMA_IRQHandler+0x3f8>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d04a      	beq.n	8004252 <HAL_DMA_IRQHandler+0x3e2>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a2a      	ldr	r2, [pc, #168]	@ (800426c <HAL_DMA_IRQHandler+0x3fc>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d045      	beq.n	8004252 <HAL_DMA_IRQHandler+0x3e2>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a29      	ldr	r2, [pc, #164]	@ (8004270 <HAL_DMA_IRQHandler+0x400>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d040      	beq.n	8004252 <HAL_DMA_IRQHandler+0x3e2>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a27      	ldr	r2, [pc, #156]	@ (8004274 <HAL_DMA_IRQHandler+0x404>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d03b      	beq.n	8004252 <HAL_DMA_IRQHandler+0x3e2>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a26      	ldr	r2, [pc, #152]	@ (8004278 <HAL_DMA_IRQHandler+0x408>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d036      	beq.n	8004252 <HAL_DMA_IRQHandler+0x3e2>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a24      	ldr	r2, [pc, #144]	@ (800427c <HAL_DMA_IRQHandler+0x40c>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d031      	beq.n	8004252 <HAL_DMA_IRQHandler+0x3e2>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a23      	ldr	r2, [pc, #140]	@ (8004280 <HAL_DMA_IRQHandler+0x410>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d02c      	beq.n	8004252 <HAL_DMA_IRQHandler+0x3e2>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a21      	ldr	r2, [pc, #132]	@ (8004284 <HAL_DMA_IRQHandler+0x414>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d027      	beq.n	8004252 <HAL_DMA_IRQHandler+0x3e2>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a20      	ldr	r2, [pc, #128]	@ (8004288 <HAL_DMA_IRQHandler+0x418>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d022      	beq.n	8004252 <HAL_DMA_IRQHandler+0x3e2>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a1e      	ldr	r2, [pc, #120]	@ (800428c <HAL_DMA_IRQHandler+0x41c>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d01d      	beq.n	8004252 <HAL_DMA_IRQHandler+0x3e2>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a1d      	ldr	r2, [pc, #116]	@ (8004290 <HAL_DMA_IRQHandler+0x420>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d018      	beq.n	8004252 <HAL_DMA_IRQHandler+0x3e2>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a1b      	ldr	r2, [pc, #108]	@ (8004294 <HAL_DMA_IRQHandler+0x424>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d013      	beq.n	8004252 <HAL_DMA_IRQHandler+0x3e2>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a1a      	ldr	r2, [pc, #104]	@ (8004298 <HAL_DMA_IRQHandler+0x428>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d00e      	beq.n	8004252 <HAL_DMA_IRQHandler+0x3e2>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a18      	ldr	r2, [pc, #96]	@ (800429c <HAL_DMA_IRQHandler+0x42c>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d009      	beq.n	8004252 <HAL_DMA_IRQHandler+0x3e2>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a17      	ldr	r2, [pc, #92]	@ (80042a0 <HAL_DMA_IRQHandler+0x430>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d004      	beq.n	8004252 <HAL_DMA_IRQHandler+0x3e2>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a15      	ldr	r2, [pc, #84]	@ (80042a4 <HAL_DMA_IRQHandler+0x434>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d12a      	bne.n	80042a8 <HAL_DMA_IRQHandler+0x438>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	2b00      	cmp	r3, #0
 800425e:	bf14      	ite	ne
 8004260:	2301      	movne	r3, #1
 8004262:	2300      	moveq	r3, #0
 8004264:	b2db      	uxtb	r3, r3
 8004266:	e023      	b.n	80042b0 <HAL_DMA_IRQHandler+0x440>
 8004268:	40020010 	.word	0x40020010
 800426c:	40020028 	.word	0x40020028
 8004270:	40020040 	.word	0x40020040
 8004274:	40020058 	.word	0x40020058
 8004278:	40020070 	.word	0x40020070
 800427c:	40020088 	.word	0x40020088
 8004280:	400200a0 	.word	0x400200a0
 8004284:	400200b8 	.word	0x400200b8
 8004288:	40020410 	.word	0x40020410
 800428c:	40020428 	.word	0x40020428
 8004290:	40020440 	.word	0x40020440
 8004294:	40020458 	.word	0x40020458
 8004298:	40020470 	.word	0x40020470
 800429c:	40020488 	.word	0x40020488
 80042a0:	400204a0 	.word	0x400204a0
 80042a4:	400204b8 	.word	0x400204b8
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2300      	movs	r3, #0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00d      	beq.n	80042d0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042b8:	f003 031f 	and.w	r3, r3, #31
 80042bc:	2204      	movs	r2, #4
 80042be:	409a      	lsls	r2, r3
 80042c0:	6a3b      	ldr	r3, [r7, #32]
 80042c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042c8:	f043 0204 	orr.w	r2, r3, #4
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042d4:	f003 031f 	and.w	r3, r3, #31
 80042d8:	2210      	movs	r2, #16
 80042da:	409a      	lsls	r2, r3
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	4013      	ands	r3, r2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f000 80a6 	beq.w	8004432 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a85      	ldr	r2, [pc, #532]	@ (8004500 <HAL_DMA_IRQHandler+0x690>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d04a      	beq.n	8004386 <HAL_DMA_IRQHandler+0x516>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a83      	ldr	r2, [pc, #524]	@ (8004504 <HAL_DMA_IRQHandler+0x694>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d045      	beq.n	8004386 <HAL_DMA_IRQHandler+0x516>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a82      	ldr	r2, [pc, #520]	@ (8004508 <HAL_DMA_IRQHandler+0x698>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d040      	beq.n	8004386 <HAL_DMA_IRQHandler+0x516>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a80      	ldr	r2, [pc, #512]	@ (800450c <HAL_DMA_IRQHandler+0x69c>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d03b      	beq.n	8004386 <HAL_DMA_IRQHandler+0x516>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a7f      	ldr	r2, [pc, #508]	@ (8004510 <HAL_DMA_IRQHandler+0x6a0>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d036      	beq.n	8004386 <HAL_DMA_IRQHandler+0x516>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a7d      	ldr	r2, [pc, #500]	@ (8004514 <HAL_DMA_IRQHandler+0x6a4>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d031      	beq.n	8004386 <HAL_DMA_IRQHandler+0x516>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a7c      	ldr	r2, [pc, #496]	@ (8004518 <HAL_DMA_IRQHandler+0x6a8>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d02c      	beq.n	8004386 <HAL_DMA_IRQHandler+0x516>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a7a      	ldr	r2, [pc, #488]	@ (800451c <HAL_DMA_IRQHandler+0x6ac>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d027      	beq.n	8004386 <HAL_DMA_IRQHandler+0x516>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a79      	ldr	r2, [pc, #484]	@ (8004520 <HAL_DMA_IRQHandler+0x6b0>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d022      	beq.n	8004386 <HAL_DMA_IRQHandler+0x516>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a77      	ldr	r2, [pc, #476]	@ (8004524 <HAL_DMA_IRQHandler+0x6b4>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d01d      	beq.n	8004386 <HAL_DMA_IRQHandler+0x516>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a76      	ldr	r2, [pc, #472]	@ (8004528 <HAL_DMA_IRQHandler+0x6b8>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d018      	beq.n	8004386 <HAL_DMA_IRQHandler+0x516>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a74      	ldr	r2, [pc, #464]	@ (800452c <HAL_DMA_IRQHandler+0x6bc>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d013      	beq.n	8004386 <HAL_DMA_IRQHandler+0x516>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a73      	ldr	r2, [pc, #460]	@ (8004530 <HAL_DMA_IRQHandler+0x6c0>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d00e      	beq.n	8004386 <HAL_DMA_IRQHandler+0x516>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a71      	ldr	r2, [pc, #452]	@ (8004534 <HAL_DMA_IRQHandler+0x6c4>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d009      	beq.n	8004386 <HAL_DMA_IRQHandler+0x516>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a70      	ldr	r2, [pc, #448]	@ (8004538 <HAL_DMA_IRQHandler+0x6c8>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d004      	beq.n	8004386 <HAL_DMA_IRQHandler+0x516>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a6e      	ldr	r2, [pc, #440]	@ (800453c <HAL_DMA_IRQHandler+0x6cc>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d10a      	bne.n	800439c <HAL_DMA_IRQHandler+0x52c>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0308 	and.w	r3, r3, #8
 8004390:	2b00      	cmp	r3, #0
 8004392:	bf14      	ite	ne
 8004394:	2301      	movne	r3, #1
 8004396:	2300      	moveq	r3, #0
 8004398:	b2db      	uxtb	r3, r3
 800439a:	e009      	b.n	80043b0 <HAL_DMA_IRQHandler+0x540>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0304 	and.w	r3, r3, #4
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	bf14      	ite	ne
 80043aa:	2301      	movne	r3, #1
 80043ac:	2300      	moveq	r3, #0
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d03e      	beq.n	8004432 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043b8:	f003 031f 	and.w	r3, r3, #31
 80043bc:	2210      	movs	r2, #16
 80043be:	409a      	lsls	r2, r3
 80043c0:	6a3b      	ldr	r3, [r7, #32]
 80043c2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d018      	beq.n	8004404 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d108      	bne.n	80043f2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d024      	beq.n	8004432 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	4798      	blx	r3
 80043f0:	e01f      	b.n	8004432 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d01b      	beq.n	8004432 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	4798      	blx	r3
 8004402:	e016      	b.n	8004432 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800440e:	2b00      	cmp	r3, #0
 8004410:	d107      	bne.n	8004422 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 0208 	bic.w	r2, r2, #8
 8004420:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004426:	2b00      	cmp	r3, #0
 8004428:	d003      	beq.n	8004432 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004436:	f003 031f 	and.w	r3, r3, #31
 800443a:	2220      	movs	r2, #32
 800443c:	409a      	lsls	r2, r3
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	4013      	ands	r3, r2
 8004442:	2b00      	cmp	r3, #0
 8004444:	f000 8110 	beq.w	8004668 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a2c      	ldr	r2, [pc, #176]	@ (8004500 <HAL_DMA_IRQHandler+0x690>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d04a      	beq.n	80044e8 <HAL_DMA_IRQHandler+0x678>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a2b      	ldr	r2, [pc, #172]	@ (8004504 <HAL_DMA_IRQHandler+0x694>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d045      	beq.n	80044e8 <HAL_DMA_IRQHandler+0x678>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a29      	ldr	r2, [pc, #164]	@ (8004508 <HAL_DMA_IRQHandler+0x698>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d040      	beq.n	80044e8 <HAL_DMA_IRQHandler+0x678>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a28      	ldr	r2, [pc, #160]	@ (800450c <HAL_DMA_IRQHandler+0x69c>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d03b      	beq.n	80044e8 <HAL_DMA_IRQHandler+0x678>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a26      	ldr	r2, [pc, #152]	@ (8004510 <HAL_DMA_IRQHandler+0x6a0>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d036      	beq.n	80044e8 <HAL_DMA_IRQHandler+0x678>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a25      	ldr	r2, [pc, #148]	@ (8004514 <HAL_DMA_IRQHandler+0x6a4>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d031      	beq.n	80044e8 <HAL_DMA_IRQHandler+0x678>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a23      	ldr	r2, [pc, #140]	@ (8004518 <HAL_DMA_IRQHandler+0x6a8>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d02c      	beq.n	80044e8 <HAL_DMA_IRQHandler+0x678>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a22      	ldr	r2, [pc, #136]	@ (800451c <HAL_DMA_IRQHandler+0x6ac>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d027      	beq.n	80044e8 <HAL_DMA_IRQHandler+0x678>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a20      	ldr	r2, [pc, #128]	@ (8004520 <HAL_DMA_IRQHandler+0x6b0>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d022      	beq.n	80044e8 <HAL_DMA_IRQHandler+0x678>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a1f      	ldr	r2, [pc, #124]	@ (8004524 <HAL_DMA_IRQHandler+0x6b4>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d01d      	beq.n	80044e8 <HAL_DMA_IRQHandler+0x678>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a1d      	ldr	r2, [pc, #116]	@ (8004528 <HAL_DMA_IRQHandler+0x6b8>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d018      	beq.n	80044e8 <HAL_DMA_IRQHandler+0x678>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a1c      	ldr	r2, [pc, #112]	@ (800452c <HAL_DMA_IRQHandler+0x6bc>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d013      	beq.n	80044e8 <HAL_DMA_IRQHandler+0x678>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a1a      	ldr	r2, [pc, #104]	@ (8004530 <HAL_DMA_IRQHandler+0x6c0>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d00e      	beq.n	80044e8 <HAL_DMA_IRQHandler+0x678>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a19      	ldr	r2, [pc, #100]	@ (8004534 <HAL_DMA_IRQHandler+0x6c4>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d009      	beq.n	80044e8 <HAL_DMA_IRQHandler+0x678>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a17      	ldr	r2, [pc, #92]	@ (8004538 <HAL_DMA_IRQHandler+0x6c8>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d004      	beq.n	80044e8 <HAL_DMA_IRQHandler+0x678>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a16      	ldr	r2, [pc, #88]	@ (800453c <HAL_DMA_IRQHandler+0x6cc>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d12b      	bne.n	8004540 <HAL_DMA_IRQHandler+0x6d0>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0310 	and.w	r3, r3, #16
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	bf14      	ite	ne
 80044f6:	2301      	movne	r3, #1
 80044f8:	2300      	moveq	r3, #0
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	e02a      	b.n	8004554 <HAL_DMA_IRQHandler+0x6e4>
 80044fe:	bf00      	nop
 8004500:	40020010 	.word	0x40020010
 8004504:	40020028 	.word	0x40020028
 8004508:	40020040 	.word	0x40020040
 800450c:	40020058 	.word	0x40020058
 8004510:	40020070 	.word	0x40020070
 8004514:	40020088 	.word	0x40020088
 8004518:	400200a0 	.word	0x400200a0
 800451c:	400200b8 	.word	0x400200b8
 8004520:	40020410 	.word	0x40020410
 8004524:	40020428 	.word	0x40020428
 8004528:	40020440 	.word	0x40020440
 800452c:	40020458 	.word	0x40020458
 8004530:	40020470 	.word	0x40020470
 8004534:	40020488 	.word	0x40020488
 8004538:	400204a0 	.word	0x400204a0
 800453c:	400204b8 	.word	0x400204b8
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b00      	cmp	r3, #0
 800454c:	bf14      	ite	ne
 800454e:	2301      	movne	r3, #1
 8004550:	2300      	moveq	r3, #0
 8004552:	b2db      	uxtb	r3, r3
 8004554:	2b00      	cmp	r3, #0
 8004556:	f000 8087 	beq.w	8004668 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800455e:	f003 031f 	and.w	r3, r3, #31
 8004562:	2220      	movs	r2, #32
 8004564:	409a      	lsls	r2, r3
 8004566:	6a3b      	ldr	r3, [r7, #32]
 8004568:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b04      	cmp	r3, #4
 8004574:	d139      	bne.n	80045ea <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f022 0216 	bic.w	r2, r2, #22
 8004584:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	695a      	ldr	r2, [r3, #20]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004594:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459a:	2b00      	cmp	r3, #0
 800459c:	d103      	bne.n	80045a6 <HAL_DMA_IRQHandler+0x736>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d007      	beq.n	80045b6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f022 0208 	bic.w	r2, r2, #8
 80045b4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045ba:	f003 031f 	and.w	r3, r3, #31
 80045be:	223f      	movs	r2, #63	@ 0x3f
 80045c0:	409a      	lsls	r2, r3
 80045c2:	6a3b      	ldr	r3, [r7, #32]
 80045c4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2201      	movs	r2, #1
 80045ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045da:	2b00      	cmp	r3, #0
 80045dc:	f000 8382 	beq.w	8004ce4 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	4798      	blx	r3
          }
          return;
 80045e8:	e37c      	b.n	8004ce4 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d018      	beq.n	800462a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d108      	bne.n	8004618 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800460a:	2b00      	cmp	r3, #0
 800460c:	d02c      	beq.n	8004668 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	4798      	blx	r3
 8004616:	e027      	b.n	8004668 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800461c:	2b00      	cmp	r3, #0
 800461e:	d023      	beq.n	8004668 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	4798      	blx	r3
 8004628:	e01e      	b.n	8004668 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004634:	2b00      	cmp	r3, #0
 8004636:	d10f      	bne.n	8004658 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 0210 	bic.w	r2, r2, #16
 8004646:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800465c:	2b00      	cmp	r3, #0
 800465e:	d003      	beq.n	8004668 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800466c:	2b00      	cmp	r3, #0
 800466e:	f000 833e 	beq.w	8004cee <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004676:	f003 0301 	and.w	r3, r3, #1
 800467a:	2b00      	cmp	r3, #0
 800467c:	f000 8088 	beq.w	8004790 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2204      	movs	r2, #4
 8004684:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a89      	ldr	r2, [pc, #548]	@ (80048b4 <HAL_DMA_IRQHandler+0xa44>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d04a      	beq.n	8004728 <HAL_DMA_IRQHandler+0x8b8>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a88      	ldr	r2, [pc, #544]	@ (80048b8 <HAL_DMA_IRQHandler+0xa48>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d045      	beq.n	8004728 <HAL_DMA_IRQHandler+0x8b8>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a86      	ldr	r2, [pc, #536]	@ (80048bc <HAL_DMA_IRQHandler+0xa4c>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d040      	beq.n	8004728 <HAL_DMA_IRQHandler+0x8b8>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a85      	ldr	r2, [pc, #532]	@ (80048c0 <HAL_DMA_IRQHandler+0xa50>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d03b      	beq.n	8004728 <HAL_DMA_IRQHandler+0x8b8>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a83      	ldr	r2, [pc, #524]	@ (80048c4 <HAL_DMA_IRQHandler+0xa54>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d036      	beq.n	8004728 <HAL_DMA_IRQHandler+0x8b8>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a82      	ldr	r2, [pc, #520]	@ (80048c8 <HAL_DMA_IRQHandler+0xa58>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d031      	beq.n	8004728 <HAL_DMA_IRQHandler+0x8b8>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a80      	ldr	r2, [pc, #512]	@ (80048cc <HAL_DMA_IRQHandler+0xa5c>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d02c      	beq.n	8004728 <HAL_DMA_IRQHandler+0x8b8>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a7f      	ldr	r2, [pc, #508]	@ (80048d0 <HAL_DMA_IRQHandler+0xa60>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d027      	beq.n	8004728 <HAL_DMA_IRQHandler+0x8b8>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a7d      	ldr	r2, [pc, #500]	@ (80048d4 <HAL_DMA_IRQHandler+0xa64>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d022      	beq.n	8004728 <HAL_DMA_IRQHandler+0x8b8>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a7c      	ldr	r2, [pc, #496]	@ (80048d8 <HAL_DMA_IRQHandler+0xa68>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d01d      	beq.n	8004728 <HAL_DMA_IRQHandler+0x8b8>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a7a      	ldr	r2, [pc, #488]	@ (80048dc <HAL_DMA_IRQHandler+0xa6c>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d018      	beq.n	8004728 <HAL_DMA_IRQHandler+0x8b8>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a79      	ldr	r2, [pc, #484]	@ (80048e0 <HAL_DMA_IRQHandler+0xa70>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d013      	beq.n	8004728 <HAL_DMA_IRQHandler+0x8b8>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a77      	ldr	r2, [pc, #476]	@ (80048e4 <HAL_DMA_IRQHandler+0xa74>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d00e      	beq.n	8004728 <HAL_DMA_IRQHandler+0x8b8>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a76      	ldr	r2, [pc, #472]	@ (80048e8 <HAL_DMA_IRQHandler+0xa78>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d009      	beq.n	8004728 <HAL_DMA_IRQHandler+0x8b8>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a74      	ldr	r2, [pc, #464]	@ (80048ec <HAL_DMA_IRQHandler+0xa7c>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d004      	beq.n	8004728 <HAL_DMA_IRQHandler+0x8b8>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a73      	ldr	r2, [pc, #460]	@ (80048f0 <HAL_DMA_IRQHandler+0xa80>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d108      	bne.n	800473a <HAL_DMA_IRQHandler+0x8ca>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f022 0201 	bic.w	r2, r2, #1
 8004736:	601a      	str	r2, [r3, #0]
 8004738:	e007      	b.n	800474a <HAL_DMA_IRQHandler+0x8da>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f022 0201 	bic.w	r2, r2, #1
 8004748:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	3301      	adds	r3, #1
 800474e:	60fb      	str	r3, [r7, #12]
 8004750:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004752:	429a      	cmp	r2, r3
 8004754:	d307      	bcc.n	8004766 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0301 	and.w	r3, r3, #1
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1f2      	bne.n	800474a <HAL_DMA_IRQHandler+0x8da>
 8004764:	e000      	b.n	8004768 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004766:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	2b00      	cmp	r3, #0
 8004774:	d004      	beq.n	8004780 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2203      	movs	r2, #3
 800477a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800477e:	e003      	b.n	8004788 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004794:	2b00      	cmp	r3, #0
 8004796:	f000 82aa 	beq.w	8004cee <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	4798      	blx	r3
 80047a2:	e2a4      	b.n	8004cee <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a52      	ldr	r2, [pc, #328]	@ (80048f4 <HAL_DMA_IRQHandler+0xa84>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d04a      	beq.n	8004844 <HAL_DMA_IRQHandler+0x9d4>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a51      	ldr	r2, [pc, #324]	@ (80048f8 <HAL_DMA_IRQHandler+0xa88>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d045      	beq.n	8004844 <HAL_DMA_IRQHandler+0x9d4>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a4f      	ldr	r2, [pc, #316]	@ (80048fc <HAL_DMA_IRQHandler+0xa8c>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d040      	beq.n	8004844 <HAL_DMA_IRQHandler+0x9d4>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a4e      	ldr	r2, [pc, #312]	@ (8004900 <HAL_DMA_IRQHandler+0xa90>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d03b      	beq.n	8004844 <HAL_DMA_IRQHandler+0x9d4>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a4c      	ldr	r2, [pc, #304]	@ (8004904 <HAL_DMA_IRQHandler+0xa94>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d036      	beq.n	8004844 <HAL_DMA_IRQHandler+0x9d4>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a4b      	ldr	r2, [pc, #300]	@ (8004908 <HAL_DMA_IRQHandler+0xa98>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d031      	beq.n	8004844 <HAL_DMA_IRQHandler+0x9d4>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a49      	ldr	r2, [pc, #292]	@ (800490c <HAL_DMA_IRQHandler+0xa9c>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d02c      	beq.n	8004844 <HAL_DMA_IRQHandler+0x9d4>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a48      	ldr	r2, [pc, #288]	@ (8004910 <HAL_DMA_IRQHandler+0xaa0>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d027      	beq.n	8004844 <HAL_DMA_IRQHandler+0x9d4>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a46      	ldr	r2, [pc, #280]	@ (8004914 <HAL_DMA_IRQHandler+0xaa4>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d022      	beq.n	8004844 <HAL_DMA_IRQHandler+0x9d4>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a45      	ldr	r2, [pc, #276]	@ (8004918 <HAL_DMA_IRQHandler+0xaa8>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d01d      	beq.n	8004844 <HAL_DMA_IRQHandler+0x9d4>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a43      	ldr	r2, [pc, #268]	@ (800491c <HAL_DMA_IRQHandler+0xaac>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d018      	beq.n	8004844 <HAL_DMA_IRQHandler+0x9d4>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a42      	ldr	r2, [pc, #264]	@ (8004920 <HAL_DMA_IRQHandler+0xab0>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d013      	beq.n	8004844 <HAL_DMA_IRQHandler+0x9d4>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a40      	ldr	r2, [pc, #256]	@ (8004924 <HAL_DMA_IRQHandler+0xab4>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d00e      	beq.n	8004844 <HAL_DMA_IRQHandler+0x9d4>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a3f      	ldr	r2, [pc, #252]	@ (8004928 <HAL_DMA_IRQHandler+0xab8>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d009      	beq.n	8004844 <HAL_DMA_IRQHandler+0x9d4>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a3d      	ldr	r2, [pc, #244]	@ (800492c <HAL_DMA_IRQHandler+0xabc>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d004      	beq.n	8004844 <HAL_DMA_IRQHandler+0x9d4>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a3c      	ldr	r2, [pc, #240]	@ (8004930 <HAL_DMA_IRQHandler+0xac0>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d101      	bne.n	8004848 <HAL_DMA_IRQHandler+0x9d8>
 8004844:	2301      	movs	r3, #1
 8004846:	e000      	b.n	800484a <HAL_DMA_IRQHandler+0x9da>
 8004848:	2300      	movs	r3, #0
 800484a:	2b00      	cmp	r3, #0
 800484c:	f000 824f 	beq.w	8004cee <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800485c:	f003 031f 	and.w	r3, r3, #31
 8004860:	2204      	movs	r2, #4
 8004862:	409a      	lsls	r2, r3
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	4013      	ands	r3, r2
 8004868:	2b00      	cmp	r3, #0
 800486a:	f000 80dd 	beq.w	8004a28 <HAL_DMA_IRQHandler+0xbb8>
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	f003 0304 	and.w	r3, r3, #4
 8004874:	2b00      	cmp	r3, #0
 8004876:	f000 80d7 	beq.w	8004a28 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800487e:	f003 031f 	and.w	r3, r3, #31
 8004882:	2204      	movs	r2, #4
 8004884:	409a      	lsls	r2, r3
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d059      	beq.n	8004948 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d14a      	bne.n	8004934 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	f000 8220 	beq.w	8004ce8 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048b0:	e21a      	b.n	8004ce8 <HAL_DMA_IRQHandler+0xe78>
 80048b2:	bf00      	nop
 80048b4:	40020010 	.word	0x40020010
 80048b8:	40020028 	.word	0x40020028
 80048bc:	40020040 	.word	0x40020040
 80048c0:	40020058 	.word	0x40020058
 80048c4:	40020070 	.word	0x40020070
 80048c8:	40020088 	.word	0x40020088
 80048cc:	400200a0 	.word	0x400200a0
 80048d0:	400200b8 	.word	0x400200b8
 80048d4:	40020410 	.word	0x40020410
 80048d8:	40020428 	.word	0x40020428
 80048dc:	40020440 	.word	0x40020440
 80048e0:	40020458 	.word	0x40020458
 80048e4:	40020470 	.word	0x40020470
 80048e8:	40020488 	.word	0x40020488
 80048ec:	400204a0 	.word	0x400204a0
 80048f0:	400204b8 	.word	0x400204b8
 80048f4:	48022c08 	.word	0x48022c08
 80048f8:	48022c1c 	.word	0x48022c1c
 80048fc:	48022c30 	.word	0x48022c30
 8004900:	48022c44 	.word	0x48022c44
 8004904:	48022c58 	.word	0x48022c58
 8004908:	48022c6c 	.word	0x48022c6c
 800490c:	48022c80 	.word	0x48022c80
 8004910:	48022c94 	.word	0x48022c94
 8004914:	58025408 	.word	0x58025408
 8004918:	5802541c 	.word	0x5802541c
 800491c:	58025430 	.word	0x58025430
 8004920:	58025444 	.word	0x58025444
 8004924:	58025458 	.word	0x58025458
 8004928:	5802546c 	.word	0x5802546c
 800492c:	58025480 	.word	0x58025480
 8004930:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004938:	2b00      	cmp	r3, #0
 800493a:	f000 81d5 	beq.w	8004ce8 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004946:	e1cf      	b.n	8004ce8 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	f003 0320 	and.w	r3, r3, #32
 800494e:	2b00      	cmp	r3, #0
 8004950:	d160      	bne.n	8004a14 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a7f      	ldr	r2, [pc, #508]	@ (8004b54 <HAL_DMA_IRQHandler+0xce4>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d04a      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xb82>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a7d      	ldr	r2, [pc, #500]	@ (8004b58 <HAL_DMA_IRQHandler+0xce8>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d045      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xb82>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a7c      	ldr	r2, [pc, #496]	@ (8004b5c <HAL_DMA_IRQHandler+0xcec>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d040      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xb82>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a7a      	ldr	r2, [pc, #488]	@ (8004b60 <HAL_DMA_IRQHandler+0xcf0>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d03b      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xb82>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a79      	ldr	r2, [pc, #484]	@ (8004b64 <HAL_DMA_IRQHandler+0xcf4>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d036      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xb82>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a77      	ldr	r2, [pc, #476]	@ (8004b68 <HAL_DMA_IRQHandler+0xcf8>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d031      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xb82>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a76      	ldr	r2, [pc, #472]	@ (8004b6c <HAL_DMA_IRQHandler+0xcfc>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d02c      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xb82>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a74      	ldr	r2, [pc, #464]	@ (8004b70 <HAL_DMA_IRQHandler+0xd00>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d027      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xb82>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a73      	ldr	r2, [pc, #460]	@ (8004b74 <HAL_DMA_IRQHandler+0xd04>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d022      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xb82>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a71      	ldr	r2, [pc, #452]	@ (8004b78 <HAL_DMA_IRQHandler+0xd08>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d01d      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xb82>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a70      	ldr	r2, [pc, #448]	@ (8004b7c <HAL_DMA_IRQHandler+0xd0c>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d018      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xb82>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a6e      	ldr	r2, [pc, #440]	@ (8004b80 <HAL_DMA_IRQHandler+0xd10>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d013      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xb82>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a6d      	ldr	r2, [pc, #436]	@ (8004b84 <HAL_DMA_IRQHandler+0xd14>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d00e      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xb82>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a6b      	ldr	r2, [pc, #428]	@ (8004b88 <HAL_DMA_IRQHandler+0xd18>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d009      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xb82>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a6a      	ldr	r2, [pc, #424]	@ (8004b8c <HAL_DMA_IRQHandler+0xd1c>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d004      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xb82>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a68      	ldr	r2, [pc, #416]	@ (8004b90 <HAL_DMA_IRQHandler+0xd20>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d108      	bne.n	8004a04 <HAL_DMA_IRQHandler+0xb94>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f022 0208 	bic.w	r2, r2, #8
 8004a00:	601a      	str	r2, [r3, #0]
 8004a02:	e007      	b.n	8004a14 <HAL_DMA_IRQHandler+0xba4>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f022 0204 	bic.w	r2, r2, #4
 8004a12:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f000 8165 	beq.w	8004ce8 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a26:	e15f      	b.n	8004ce8 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a2c:	f003 031f 	and.w	r3, r3, #31
 8004a30:	2202      	movs	r2, #2
 8004a32:	409a      	lsls	r2, r3
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	4013      	ands	r3, r2
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f000 80c5 	beq.w	8004bc8 <HAL_DMA_IRQHandler+0xd58>
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f000 80bf 	beq.w	8004bc8 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a4e:	f003 031f 	and.w	r3, r3, #31
 8004a52:	2202      	movs	r2, #2
 8004a54:	409a      	lsls	r2, r3
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d018      	beq.n	8004a96 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d109      	bne.n	8004a82 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f000 813a 	beq.w	8004cec <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a80:	e134      	b.n	8004cec <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f000 8130 	beq.w	8004cec <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a94:	e12a      	b.n	8004cec <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	f003 0320 	and.w	r3, r3, #32
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f040 8089 	bne.w	8004bb4 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a2b      	ldr	r2, [pc, #172]	@ (8004b54 <HAL_DMA_IRQHandler+0xce4>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d04a      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xcd2>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a29      	ldr	r2, [pc, #164]	@ (8004b58 <HAL_DMA_IRQHandler+0xce8>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d045      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xcd2>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a28      	ldr	r2, [pc, #160]	@ (8004b5c <HAL_DMA_IRQHandler+0xcec>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d040      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xcd2>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a26      	ldr	r2, [pc, #152]	@ (8004b60 <HAL_DMA_IRQHandler+0xcf0>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d03b      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xcd2>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a25      	ldr	r2, [pc, #148]	@ (8004b64 <HAL_DMA_IRQHandler+0xcf4>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d036      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xcd2>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a23      	ldr	r2, [pc, #140]	@ (8004b68 <HAL_DMA_IRQHandler+0xcf8>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d031      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xcd2>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a22      	ldr	r2, [pc, #136]	@ (8004b6c <HAL_DMA_IRQHandler+0xcfc>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d02c      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xcd2>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a20      	ldr	r2, [pc, #128]	@ (8004b70 <HAL_DMA_IRQHandler+0xd00>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d027      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xcd2>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a1f      	ldr	r2, [pc, #124]	@ (8004b74 <HAL_DMA_IRQHandler+0xd04>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d022      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xcd2>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a1d      	ldr	r2, [pc, #116]	@ (8004b78 <HAL_DMA_IRQHandler+0xd08>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d01d      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xcd2>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a1c      	ldr	r2, [pc, #112]	@ (8004b7c <HAL_DMA_IRQHandler+0xd0c>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d018      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xcd2>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a1a      	ldr	r2, [pc, #104]	@ (8004b80 <HAL_DMA_IRQHandler+0xd10>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d013      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xcd2>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a19      	ldr	r2, [pc, #100]	@ (8004b84 <HAL_DMA_IRQHandler+0xd14>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d00e      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xcd2>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a17      	ldr	r2, [pc, #92]	@ (8004b88 <HAL_DMA_IRQHandler+0xd18>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d009      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xcd2>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a16      	ldr	r2, [pc, #88]	@ (8004b8c <HAL_DMA_IRQHandler+0xd1c>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d004      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xcd2>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a14      	ldr	r2, [pc, #80]	@ (8004b90 <HAL_DMA_IRQHandler+0xd20>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d128      	bne.n	8004b94 <HAL_DMA_IRQHandler+0xd24>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f022 0214 	bic.w	r2, r2, #20
 8004b50:	601a      	str	r2, [r3, #0]
 8004b52:	e027      	b.n	8004ba4 <HAL_DMA_IRQHandler+0xd34>
 8004b54:	40020010 	.word	0x40020010
 8004b58:	40020028 	.word	0x40020028
 8004b5c:	40020040 	.word	0x40020040
 8004b60:	40020058 	.word	0x40020058
 8004b64:	40020070 	.word	0x40020070
 8004b68:	40020088 	.word	0x40020088
 8004b6c:	400200a0 	.word	0x400200a0
 8004b70:	400200b8 	.word	0x400200b8
 8004b74:	40020410 	.word	0x40020410
 8004b78:	40020428 	.word	0x40020428
 8004b7c:	40020440 	.word	0x40020440
 8004b80:	40020458 	.word	0x40020458
 8004b84:	40020470 	.word	0x40020470
 8004b88:	40020488 	.word	0x40020488
 8004b8c:	400204a0 	.word	0x400204a0
 8004b90:	400204b8 	.word	0x400204b8
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f022 020a 	bic.w	r2, r2, #10
 8004ba2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	f000 8097 	beq.w	8004cec <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004bc6:	e091      	b.n	8004cec <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bcc:	f003 031f 	and.w	r3, r3, #31
 8004bd0:	2208      	movs	r2, #8
 8004bd2:	409a      	lsls	r2, r3
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f000 8088 	beq.w	8004cee <HAL_DMA_IRQHandler+0xe7e>
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	f003 0308 	and.w	r3, r3, #8
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f000 8082 	beq.w	8004cee <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a41      	ldr	r2, [pc, #260]	@ (8004cf4 <HAL_DMA_IRQHandler+0xe84>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d04a      	beq.n	8004c8a <HAL_DMA_IRQHandler+0xe1a>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a3f      	ldr	r2, [pc, #252]	@ (8004cf8 <HAL_DMA_IRQHandler+0xe88>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d045      	beq.n	8004c8a <HAL_DMA_IRQHandler+0xe1a>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a3e      	ldr	r2, [pc, #248]	@ (8004cfc <HAL_DMA_IRQHandler+0xe8c>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d040      	beq.n	8004c8a <HAL_DMA_IRQHandler+0xe1a>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a3c      	ldr	r2, [pc, #240]	@ (8004d00 <HAL_DMA_IRQHandler+0xe90>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d03b      	beq.n	8004c8a <HAL_DMA_IRQHandler+0xe1a>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a3b      	ldr	r2, [pc, #236]	@ (8004d04 <HAL_DMA_IRQHandler+0xe94>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d036      	beq.n	8004c8a <HAL_DMA_IRQHandler+0xe1a>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a39      	ldr	r2, [pc, #228]	@ (8004d08 <HAL_DMA_IRQHandler+0xe98>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d031      	beq.n	8004c8a <HAL_DMA_IRQHandler+0xe1a>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a38      	ldr	r2, [pc, #224]	@ (8004d0c <HAL_DMA_IRQHandler+0xe9c>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d02c      	beq.n	8004c8a <HAL_DMA_IRQHandler+0xe1a>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a36      	ldr	r2, [pc, #216]	@ (8004d10 <HAL_DMA_IRQHandler+0xea0>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d027      	beq.n	8004c8a <HAL_DMA_IRQHandler+0xe1a>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a35      	ldr	r2, [pc, #212]	@ (8004d14 <HAL_DMA_IRQHandler+0xea4>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d022      	beq.n	8004c8a <HAL_DMA_IRQHandler+0xe1a>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a33      	ldr	r2, [pc, #204]	@ (8004d18 <HAL_DMA_IRQHandler+0xea8>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d01d      	beq.n	8004c8a <HAL_DMA_IRQHandler+0xe1a>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a32      	ldr	r2, [pc, #200]	@ (8004d1c <HAL_DMA_IRQHandler+0xeac>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d018      	beq.n	8004c8a <HAL_DMA_IRQHandler+0xe1a>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a30      	ldr	r2, [pc, #192]	@ (8004d20 <HAL_DMA_IRQHandler+0xeb0>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d013      	beq.n	8004c8a <HAL_DMA_IRQHandler+0xe1a>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a2f      	ldr	r2, [pc, #188]	@ (8004d24 <HAL_DMA_IRQHandler+0xeb4>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d00e      	beq.n	8004c8a <HAL_DMA_IRQHandler+0xe1a>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a2d      	ldr	r2, [pc, #180]	@ (8004d28 <HAL_DMA_IRQHandler+0xeb8>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d009      	beq.n	8004c8a <HAL_DMA_IRQHandler+0xe1a>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a2c      	ldr	r2, [pc, #176]	@ (8004d2c <HAL_DMA_IRQHandler+0xebc>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d004      	beq.n	8004c8a <HAL_DMA_IRQHandler+0xe1a>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a2a      	ldr	r2, [pc, #168]	@ (8004d30 <HAL_DMA_IRQHandler+0xec0>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d108      	bne.n	8004c9c <HAL_DMA_IRQHandler+0xe2c>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f022 021c 	bic.w	r2, r2, #28
 8004c98:	601a      	str	r2, [r3, #0]
 8004c9a:	e007      	b.n	8004cac <HAL_DMA_IRQHandler+0xe3c>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f022 020e 	bic.w	r2, r2, #14
 8004caa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cb0:	f003 031f 	and.w	r3, r3, #31
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	409a      	lsls	r2, r3
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d009      	beq.n	8004cee <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	4798      	blx	r3
 8004ce2:	e004      	b.n	8004cee <HAL_DMA_IRQHandler+0xe7e>
          return;
 8004ce4:	bf00      	nop
 8004ce6:	e002      	b.n	8004cee <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ce8:	bf00      	nop
 8004cea:	e000      	b.n	8004cee <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004cec:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004cee:	3728      	adds	r7, #40	@ 0x28
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	40020010 	.word	0x40020010
 8004cf8:	40020028 	.word	0x40020028
 8004cfc:	40020040 	.word	0x40020040
 8004d00:	40020058 	.word	0x40020058
 8004d04:	40020070 	.word	0x40020070
 8004d08:	40020088 	.word	0x40020088
 8004d0c:	400200a0 	.word	0x400200a0
 8004d10:	400200b8 	.word	0x400200b8
 8004d14:	40020410 	.word	0x40020410
 8004d18:	40020428 	.word	0x40020428
 8004d1c:	40020440 	.word	0x40020440
 8004d20:	40020458 	.word	0x40020458
 8004d24:	40020470 	.word	0x40020470
 8004d28:	40020488 	.word	0x40020488
 8004d2c:	400204a0 	.word	0x400204a0
 8004d30:	400204b8 	.word	0x400204b8

08004d34 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d42:	b2db      	uxtb	r3, r3
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b087      	sub	sp, #28
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
 8004d74:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d7a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d80:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a7f      	ldr	r2, [pc, #508]	@ (8004f84 <DMA_SetConfig+0x21c>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d072      	beq.n	8004e72 <DMA_SetConfig+0x10a>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a7d      	ldr	r2, [pc, #500]	@ (8004f88 <DMA_SetConfig+0x220>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d06d      	beq.n	8004e72 <DMA_SetConfig+0x10a>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a7c      	ldr	r2, [pc, #496]	@ (8004f8c <DMA_SetConfig+0x224>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d068      	beq.n	8004e72 <DMA_SetConfig+0x10a>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a7a      	ldr	r2, [pc, #488]	@ (8004f90 <DMA_SetConfig+0x228>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d063      	beq.n	8004e72 <DMA_SetConfig+0x10a>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a79      	ldr	r2, [pc, #484]	@ (8004f94 <DMA_SetConfig+0x22c>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d05e      	beq.n	8004e72 <DMA_SetConfig+0x10a>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a77      	ldr	r2, [pc, #476]	@ (8004f98 <DMA_SetConfig+0x230>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d059      	beq.n	8004e72 <DMA_SetConfig+0x10a>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a76      	ldr	r2, [pc, #472]	@ (8004f9c <DMA_SetConfig+0x234>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d054      	beq.n	8004e72 <DMA_SetConfig+0x10a>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a74      	ldr	r2, [pc, #464]	@ (8004fa0 <DMA_SetConfig+0x238>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d04f      	beq.n	8004e72 <DMA_SetConfig+0x10a>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a73      	ldr	r2, [pc, #460]	@ (8004fa4 <DMA_SetConfig+0x23c>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d04a      	beq.n	8004e72 <DMA_SetConfig+0x10a>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a71      	ldr	r2, [pc, #452]	@ (8004fa8 <DMA_SetConfig+0x240>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d045      	beq.n	8004e72 <DMA_SetConfig+0x10a>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a70      	ldr	r2, [pc, #448]	@ (8004fac <DMA_SetConfig+0x244>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d040      	beq.n	8004e72 <DMA_SetConfig+0x10a>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a6e      	ldr	r2, [pc, #440]	@ (8004fb0 <DMA_SetConfig+0x248>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d03b      	beq.n	8004e72 <DMA_SetConfig+0x10a>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a6d      	ldr	r2, [pc, #436]	@ (8004fb4 <DMA_SetConfig+0x24c>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d036      	beq.n	8004e72 <DMA_SetConfig+0x10a>
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a6b      	ldr	r2, [pc, #428]	@ (8004fb8 <DMA_SetConfig+0x250>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d031      	beq.n	8004e72 <DMA_SetConfig+0x10a>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a6a      	ldr	r2, [pc, #424]	@ (8004fbc <DMA_SetConfig+0x254>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d02c      	beq.n	8004e72 <DMA_SetConfig+0x10a>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a68      	ldr	r2, [pc, #416]	@ (8004fc0 <DMA_SetConfig+0x258>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d027      	beq.n	8004e72 <DMA_SetConfig+0x10a>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a67      	ldr	r2, [pc, #412]	@ (8004fc4 <DMA_SetConfig+0x25c>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d022      	beq.n	8004e72 <DMA_SetConfig+0x10a>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a65      	ldr	r2, [pc, #404]	@ (8004fc8 <DMA_SetConfig+0x260>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d01d      	beq.n	8004e72 <DMA_SetConfig+0x10a>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a64      	ldr	r2, [pc, #400]	@ (8004fcc <DMA_SetConfig+0x264>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d018      	beq.n	8004e72 <DMA_SetConfig+0x10a>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a62      	ldr	r2, [pc, #392]	@ (8004fd0 <DMA_SetConfig+0x268>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d013      	beq.n	8004e72 <DMA_SetConfig+0x10a>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a61      	ldr	r2, [pc, #388]	@ (8004fd4 <DMA_SetConfig+0x26c>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d00e      	beq.n	8004e72 <DMA_SetConfig+0x10a>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a5f      	ldr	r2, [pc, #380]	@ (8004fd8 <DMA_SetConfig+0x270>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d009      	beq.n	8004e72 <DMA_SetConfig+0x10a>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a5e      	ldr	r2, [pc, #376]	@ (8004fdc <DMA_SetConfig+0x274>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d004      	beq.n	8004e72 <DMA_SetConfig+0x10a>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a5c      	ldr	r2, [pc, #368]	@ (8004fe0 <DMA_SetConfig+0x278>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d101      	bne.n	8004e76 <DMA_SetConfig+0x10e>
 8004e72:	2301      	movs	r3, #1
 8004e74:	e000      	b.n	8004e78 <DMA_SetConfig+0x110>
 8004e76:	2300      	movs	r3, #0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00d      	beq.n	8004e98 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004e84:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d004      	beq.n	8004e98 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004e96:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a39      	ldr	r2, [pc, #228]	@ (8004f84 <DMA_SetConfig+0x21c>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d04a      	beq.n	8004f38 <DMA_SetConfig+0x1d0>
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a38      	ldr	r2, [pc, #224]	@ (8004f88 <DMA_SetConfig+0x220>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d045      	beq.n	8004f38 <DMA_SetConfig+0x1d0>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a36      	ldr	r2, [pc, #216]	@ (8004f8c <DMA_SetConfig+0x224>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d040      	beq.n	8004f38 <DMA_SetConfig+0x1d0>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a35      	ldr	r2, [pc, #212]	@ (8004f90 <DMA_SetConfig+0x228>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d03b      	beq.n	8004f38 <DMA_SetConfig+0x1d0>
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a33      	ldr	r2, [pc, #204]	@ (8004f94 <DMA_SetConfig+0x22c>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d036      	beq.n	8004f38 <DMA_SetConfig+0x1d0>
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a32      	ldr	r2, [pc, #200]	@ (8004f98 <DMA_SetConfig+0x230>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d031      	beq.n	8004f38 <DMA_SetConfig+0x1d0>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a30      	ldr	r2, [pc, #192]	@ (8004f9c <DMA_SetConfig+0x234>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d02c      	beq.n	8004f38 <DMA_SetConfig+0x1d0>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a2f      	ldr	r2, [pc, #188]	@ (8004fa0 <DMA_SetConfig+0x238>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d027      	beq.n	8004f38 <DMA_SetConfig+0x1d0>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a2d      	ldr	r2, [pc, #180]	@ (8004fa4 <DMA_SetConfig+0x23c>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d022      	beq.n	8004f38 <DMA_SetConfig+0x1d0>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a2c      	ldr	r2, [pc, #176]	@ (8004fa8 <DMA_SetConfig+0x240>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d01d      	beq.n	8004f38 <DMA_SetConfig+0x1d0>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a2a      	ldr	r2, [pc, #168]	@ (8004fac <DMA_SetConfig+0x244>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d018      	beq.n	8004f38 <DMA_SetConfig+0x1d0>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a29      	ldr	r2, [pc, #164]	@ (8004fb0 <DMA_SetConfig+0x248>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d013      	beq.n	8004f38 <DMA_SetConfig+0x1d0>
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a27      	ldr	r2, [pc, #156]	@ (8004fb4 <DMA_SetConfig+0x24c>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d00e      	beq.n	8004f38 <DMA_SetConfig+0x1d0>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a26      	ldr	r2, [pc, #152]	@ (8004fb8 <DMA_SetConfig+0x250>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d009      	beq.n	8004f38 <DMA_SetConfig+0x1d0>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a24      	ldr	r2, [pc, #144]	@ (8004fbc <DMA_SetConfig+0x254>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d004      	beq.n	8004f38 <DMA_SetConfig+0x1d0>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a23      	ldr	r2, [pc, #140]	@ (8004fc0 <DMA_SetConfig+0x258>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d101      	bne.n	8004f3c <DMA_SetConfig+0x1d4>
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e000      	b.n	8004f3e <DMA_SetConfig+0x1d6>
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d059      	beq.n	8004ff6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f46:	f003 031f 	and.w	r3, r3, #31
 8004f4a:	223f      	movs	r2, #63	@ 0x3f
 8004f4c:	409a      	lsls	r2, r3
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004f60:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	683a      	ldr	r2, [r7, #0]
 8004f68:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	2b40      	cmp	r3, #64	@ 0x40
 8004f70:	d138      	bne.n	8004fe4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68ba      	ldr	r2, [r7, #8]
 8004f80:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004f82:	e0ae      	b.n	80050e2 <DMA_SetConfig+0x37a>
 8004f84:	40020010 	.word	0x40020010
 8004f88:	40020028 	.word	0x40020028
 8004f8c:	40020040 	.word	0x40020040
 8004f90:	40020058 	.word	0x40020058
 8004f94:	40020070 	.word	0x40020070
 8004f98:	40020088 	.word	0x40020088
 8004f9c:	400200a0 	.word	0x400200a0
 8004fa0:	400200b8 	.word	0x400200b8
 8004fa4:	40020410 	.word	0x40020410
 8004fa8:	40020428 	.word	0x40020428
 8004fac:	40020440 	.word	0x40020440
 8004fb0:	40020458 	.word	0x40020458
 8004fb4:	40020470 	.word	0x40020470
 8004fb8:	40020488 	.word	0x40020488
 8004fbc:	400204a0 	.word	0x400204a0
 8004fc0:	400204b8 	.word	0x400204b8
 8004fc4:	58025408 	.word	0x58025408
 8004fc8:	5802541c 	.word	0x5802541c
 8004fcc:	58025430 	.word	0x58025430
 8004fd0:	58025444 	.word	0x58025444
 8004fd4:	58025458 	.word	0x58025458
 8004fd8:	5802546c 	.word	0x5802546c
 8004fdc:	58025480 	.word	0x58025480
 8004fe0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68ba      	ldr	r2, [r7, #8]
 8004fea:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	60da      	str	r2, [r3, #12]
}
 8004ff4:	e075      	b.n	80050e2 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a3d      	ldr	r2, [pc, #244]	@ (80050f0 <DMA_SetConfig+0x388>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d04a      	beq.n	8005096 <DMA_SetConfig+0x32e>
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a3b      	ldr	r2, [pc, #236]	@ (80050f4 <DMA_SetConfig+0x38c>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d045      	beq.n	8005096 <DMA_SetConfig+0x32e>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a3a      	ldr	r2, [pc, #232]	@ (80050f8 <DMA_SetConfig+0x390>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d040      	beq.n	8005096 <DMA_SetConfig+0x32e>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a38      	ldr	r2, [pc, #224]	@ (80050fc <DMA_SetConfig+0x394>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d03b      	beq.n	8005096 <DMA_SetConfig+0x32e>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a37      	ldr	r2, [pc, #220]	@ (8005100 <DMA_SetConfig+0x398>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d036      	beq.n	8005096 <DMA_SetConfig+0x32e>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a35      	ldr	r2, [pc, #212]	@ (8005104 <DMA_SetConfig+0x39c>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d031      	beq.n	8005096 <DMA_SetConfig+0x32e>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a34      	ldr	r2, [pc, #208]	@ (8005108 <DMA_SetConfig+0x3a0>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d02c      	beq.n	8005096 <DMA_SetConfig+0x32e>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a32      	ldr	r2, [pc, #200]	@ (800510c <DMA_SetConfig+0x3a4>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d027      	beq.n	8005096 <DMA_SetConfig+0x32e>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a31      	ldr	r2, [pc, #196]	@ (8005110 <DMA_SetConfig+0x3a8>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d022      	beq.n	8005096 <DMA_SetConfig+0x32e>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a2f      	ldr	r2, [pc, #188]	@ (8005114 <DMA_SetConfig+0x3ac>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d01d      	beq.n	8005096 <DMA_SetConfig+0x32e>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a2e      	ldr	r2, [pc, #184]	@ (8005118 <DMA_SetConfig+0x3b0>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d018      	beq.n	8005096 <DMA_SetConfig+0x32e>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a2c      	ldr	r2, [pc, #176]	@ (800511c <DMA_SetConfig+0x3b4>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d013      	beq.n	8005096 <DMA_SetConfig+0x32e>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a2b      	ldr	r2, [pc, #172]	@ (8005120 <DMA_SetConfig+0x3b8>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d00e      	beq.n	8005096 <DMA_SetConfig+0x32e>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a29      	ldr	r2, [pc, #164]	@ (8005124 <DMA_SetConfig+0x3bc>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d009      	beq.n	8005096 <DMA_SetConfig+0x32e>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a28      	ldr	r2, [pc, #160]	@ (8005128 <DMA_SetConfig+0x3c0>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d004      	beq.n	8005096 <DMA_SetConfig+0x32e>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a26      	ldr	r2, [pc, #152]	@ (800512c <DMA_SetConfig+0x3c4>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d101      	bne.n	800509a <DMA_SetConfig+0x332>
 8005096:	2301      	movs	r3, #1
 8005098:	e000      	b.n	800509c <DMA_SetConfig+0x334>
 800509a:	2300      	movs	r3, #0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d020      	beq.n	80050e2 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050a4:	f003 031f 	and.w	r3, r3, #31
 80050a8:	2201      	movs	r2, #1
 80050aa:	409a      	lsls	r2, r3
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	683a      	ldr	r2, [r7, #0]
 80050b6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	2b40      	cmp	r3, #64	@ 0x40
 80050be:	d108      	bne.n	80050d2 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68ba      	ldr	r2, [r7, #8]
 80050ce:	60da      	str	r2, [r3, #12]
}
 80050d0:	e007      	b.n	80050e2 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68ba      	ldr	r2, [r7, #8]
 80050d8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	60da      	str	r2, [r3, #12]
}
 80050e2:	bf00      	nop
 80050e4:	371c      	adds	r7, #28
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	48022c08 	.word	0x48022c08
 80050f4:	48022c1c 	.word	0x48022c1c
 80050f8:	48022c30 	.word	0x48022c30
 80050fc:	48022c44 	.word	0x48022c44
 8005100:	48022c58 	.word	0x48022c58
 8005104:	48022c6c 	.word	0x48022c6c
 8005108:	48022c80 	.word	0x48022c80
 800510c:	48022c94 	.word	0x48022c94
 8005110:	58025408 	.word	0x58025408
 8005114:	5802541c 	.word	0x5802541c
 8005118:	58025430 	.word	0x58025430
 800511c:	58025444 	.word	0x58025444
 8005120:	58025458 	.word	0x58025458
 8005124:	5802546c 	.word	0x5802546c
 8005128:	58025480 	.word	0x58025480
 800512c:	58025494 	.word	0x58025494

08005130 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a42      	ldr	r2, [pc, #264]	@ (8005248 <DMA_CalcBaseAndBitshift+0x118>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d04a      	beq.n	80051d8 <DMA_CalcBaseAndBitshift+0xa8>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a41      	ldr	r2, [pc, #260]	@ (800524c <DMA_CalcBaseAndBitshift+0x11c>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d045      	beq.n	80051d8 <DMA_CalcBaseAndBitshift+0xa8>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a3f      	ldr	r2, [pc, #252]	@ (8005250 <DMA_CalcBaseAndBitshift+0x120>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d040      	beq.n	80051d8 <DMA_CalcBaseAndBitshift+0xa8>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a3e      	ldr	r2, [pc, #248]	@ (8005254 <DMA_CalcBaseAndBitshift+0x124>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d03b      	beq.n	80051d8 <DMA_CalcBaseAndBitshift+0xa8>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a3c      	ldr	r2, [pc, #240]	@ (8005258 <DMA_CalcBaseAndBitshift+0x128>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d036      	beq.n	80051d8 <DMA_CalcBaseAndBitshift+0xa8>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a3b      	ldr	r2, [pc, #236]	@ (800525c <DMA_CalcBaseAndBitshift+0x12c>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d031      	beq.n	80051d8 <DMA_CalcBaseAndBitshift+0xa8>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a39      	ldr	r2, [pc, #228]	@ (8005260 <DMA_CalcBaseAndBitshift+0x130>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d02c      	beq.n	80051d8 <DMA_CalcBaseAndBitshift+0xa8>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a38      	ldr	r2, [pc, #224]	@ (8005264 <DMA_CalcBaseAndBitshift+0x134>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d027      	beq.n	80051d8 <DMA_CalcBaseAndBitshift+0xa8>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a36      	ldr	r2, [pc, #216]	@ (8005268 <DMA_CalcBaseAndBitshift+0x138>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d022      	beq.n	80051d8 <DMA_CalcBaseAndBitshift+0xa8>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a35      	ldr	r2, [pc, #212]	@ (800526c <DMA_CalcBaseAndBitshift+0x13c>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d01d      	beq.n	80051d8 <DMA_CalcBaseAndBitshift+0xa8>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a33      	ldr	r2, [pc, #204]	@ (8005270 <DMA_CalcBaseAndBitshift+0x140>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d018      	beq.n	80051d8 <DMA_CalcBaseAndBitshift+0xa8>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a32      	ldr	r2, [pc, #200]	@ (8005274 <DMA_CalcBaseAndBitshift+0x144>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d013      	beq.n	80051d8 <DMA_CalcBaseAndBitshift+0xa8>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a30      	ldr	r2, [pc, #192]	@ (8005278 <DMA_CalcBaseAndBitshift+0x148>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d00e      	beq.n	80051d8 <DMA_CalcBaseAndBitshift+0xa8>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a2f      	ldr	r2, [pc, #188]	@ (800527c <DMA_CalcBaseAndBitshift+0x14c>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d009      	beq.n	80051d8 <DMA_CalcBaseAndBitshift+0xa8>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a2d      	ldr	r2, [pc, #180]	@ (8005280 <DMA_CalcBaseAndBitshift+0x150>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d004      	beq.n	80051d8 <DMA_CalcBaseAndBitshift+0xa8>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a2c      	ldr	r2, [pc, #176]	@ (8005284 <DMA_CalcBaseAndBitshift+0x154>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d101      	bne.n	80051dc <DMA_CalcBaseAndBitshift+0xac>
 80051d8:	2301      	movs	r3, #1
 80051da:	e000      	b.n	80051de <DMA_CalcBaseAndBitshift+0xae>
 80051dc:	2300      	movs	r3, #0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d024      	beq.n	800522c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	3b10      	subs	r3, #16
 80051ea:	4a27      	ldr	r2, [pc, #156]	@ (8005288 <DMA_CalcBaseAndBitshift+0x158>)
 80051ec:	fba2 2303 	umull	r2, r3, r2, r3
 80051f0:	091b      	lsrs	r3, r3, #4
 80051f2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f003 0307 	and.w	r3, r3, #7
 80051fa:	4a24      	ldr	r2, [pc, #144]	@ (800528c <DMA_CalcBaseAndBitshift+0x15c>)
 80051fc:	5cd3      	ldrb	r3, [r2, r3]
 80051fe:	461a      	mov	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2b03      	cmp	r3, #3
 8005208:	d908      	bls.n	800521c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	461a      	mov	r2, r3
 8005210:	4b1f      	ldr	r3, [pc, #124]	@ (8005290 <DMA_CalcBaseAndBitshift+0x160>)
 8005212:	4013      	ands	r3, r2
 8005214:	1d1a      	adds	r2, r3, #4
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	659a      	str	r2, [r3, #88]	@ 0x58
 800521a:	e00d      	b.n	8005238 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	461a      	mov	r2, r3
 8005222:	4b1b      	ldr	r3, [pc, #108]	@ (8005290 <DMA_CalcBaseAndBitshift+0x160>)
 8005224:	4013      	ands	r3, r2
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	6593      	str	r3, [r2, #88]	@ 0x58
 800522a:	e005      	b.n	8005238 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800523c:	4618      	mov	r0, r3
 800523e:	3714      	adds	r7, #20
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr
 8005248:	40020010 	.word	0x40020010
 800524c:	40020028 	.word	0x40020028
 8005250:	40020040 	.word	0x40020040
 8005254:	40020058 	.word	0x40020058
 8005258:	40020070 	.word	0x40020070
 800525c:	40020088 	.word	0x40020088
 8005260:	400200a0 	.word	0x400200a0
 8005264:	400200b8 	.word	0x400200b8
 8005268:	40020410 	.word	0x40020410
 800526c:	40020428 	.word	0x40020428
 8005270:	40020440 	.word	0x40020440
 8005274:	40020458 	.word	0x40020458
 8005278:	40020470 	.word	0x40020470
 800527c:	40020488 	.word	0x40020488
 8005280:	400204a0 	.word	0x400204a0
 8005284:	400204b8 	.word	0x400204b8
 8005288:	aaaaaaab 	.word	0xaaaaaaab
 800528c:	08014f68 	.word	0x08014f68
 8005290:	fffffc00 	.word	0xfffffc00

08005294 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800529c:	2300      	movs	r3, #0
 800529e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d120      	bne.n	80052ea <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ac:	2b03      	cmp	r3, #3
 80052ae:	d858      	bhi.n	8005362 <DMA_CheckFifoParam+0xce>
 80052b0:	a201      	add	r2, pc, #4	@ (adr r2, 80052b8 <DMA_CheckFifoParam+0x24>)
 80052b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b6:	bf00      	nop
 80052b8:	080052c9 	.word	0x080052c9
 80052bc:	080052db 	.word	0x080052db
 80052c0:	080052c9 	.word	0x080052c9
 80052c4:	08005363 	.word	0x08005363
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d048      	beq.n	8005366 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80052d8:	e045      	b.n	8005366 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052de:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80052e2:	d142      	bne.n	800536a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80052e8:	e03f      	b.n	800536a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052f2:	d123      	bne.n	800533c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052f8:	2b03      	cmp	r3, #3
 80052fa:	d838      	bhi.n	800536e <DMA_CheckFifoParam+0xda>
 80052fc:	a201      	add	r2, pc, #4	@ (adr r2, 8005304 <DMA_CheckFifoParam+0x70>)
 80052fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005302:	bf00      	nop
 8005304:	08005315 	.word	0x08005315
 8005308:	0800531b 	.word	0x0800531b
 800530c:	08005315 	.word	0x08005315
 8005310:	0800532d 	.word	0x0800532d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	73fb      	strb	r3, [r7, #15]
        break;
 8005318:	e030      	b.n	800537c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800531e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d025      	beq.n	8005372 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800532a:	e022      	b.n	8005372 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005330:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005334:	d11f      	bne.n	8005376 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800533a:	e01c      	b.n	8005376 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005340:	2b02      	cmp	r3, #2
 8005342:	d902      	bls.n	800534a <DMA_CheckFifoParam+0xb6>
 8005344:	2b03      	cmp	r3, #3
 8005346:	d003      	beq.n	8005350 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005348:	e018      	b.n	800537c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	73fb      	strb	r3, [r7, #15]
        break;
 800534e:	e015      	b.n	800537c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005354:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d00e      	beq.n	800537a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	73fb      	strb	r3, [r7, #15]
    break;
 8005360:	e00b      	b.n	800537a <DMA_CheckFifoParam+0xe6>
        break;
 8005362:	bf00      	nop
 8005364:	e00a      	b.n	800537c <DMA_CheckFifoParam+0xe8>
        break;
 8005366:	bf00      	nop
 8005368:	e008      	b.n	800537c <DMA_CheckFifoParam+0xe8>
        break;
 800536a:	bf00      	nop
 800536c:	e006      	b.n	800537c <DMA_CheckFifoParam+0xe8>
        break;
 800536e:	bf00      	nop
 8005370:	e004      	b.n	800537c <DMA_CheckFifoParam+0xe8>
        break;
 8005372:	bf00      	nop
 8005374:	e002      	b.n	800537c <DMA_CheckFifoParam+0xe8>
        break;
 8005376:	bf00      	nop
 8005378:	e000      	b.n	800537c <DMA_CheckFifoParam+0xe8>
    break;
 800537a:	bf00      	nop
    }
  }

  return status;
 800537c:	7bfb      	ldrb	r3, [r7, #15]
}
 800537e:	4618      	mov	r0, r3
 8005380:	3714      	adds	r7, #20
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop

0800538c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a38      	ldr	r2, [pc, #224]	@ (8005480 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d022      	beq.n	80053ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a36      	ldr	r2, [pc, #216]	@ (8005484 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d01d      	beq.n	80053ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a35      	ldr	r2, [pc, #212]	@ (8005488 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d018      	beq.n	80053ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a33      	ldr	r2, [pc, #204]	@ (800548c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d013      	beq.n	80053ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a32      	ldr	r2, [pc, #200]	@ (8005490 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d00e      	beq.n	80053ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a30      	ldr	r2, [pc, #192]	@ (8005494 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d009      	beq.n	80053ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a2f      	ldr	r2, [pc, #188]	@ (8005498 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d004      	beq.n	80053ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a2d      	ldr	r2, [pc, #180]	@ (800549c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d101      	bne.n	80053ee <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80053ea:	2301      	movs	r3, #1
 80053ec:	e000      	b.n	80053f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80053ee:	2300      	movs	r3, #0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d01a      	beq.n	800542a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	3b08      	subs	r3, #8
 80053fc:	4a28      	ldr	r2, [pc, #160]	@ (80054a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80053fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005402:	091b      	lsrs	r3, r3, #4
 8005404:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	4b26      	ldr	r3, [pc, #152]	@ (80054a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800540a:	4413      	add	r3, r2
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	461a      	mov	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a24      	ldr	r2, [pc, #144]	@ (80054a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005418:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f003 031f 	and.w	r3, r3, #31
 8005420:	2201      	movs	r2, #1
 8005422:	409a      	lsls	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005428:	e024      	b.n	8005474 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	b2db      	uxtb	r3, r3
 8005430:	3b10      	subs	r3, #16
 8005432:	4a1e      	ldr	r2, [pc, #120]	@ (80054ac <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005434:	fba2 2303 	umull	r2, r3, r2, r3
 8005438:	091b      	lsrs	r3, r3, #4
 800543a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	4a1c      	ldr	r2, [pc, #112]	@ (80054b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d806      	bhi.n	8005452 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	4a1b      	ldr	r2, [pc, #108]	@ (80054b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d902      	bls.n	8005452 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	3308      	adds	r3, #8
 8005450:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	4b18      	ldr	r3, [pc, #96]	@ (80054b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005456:	4413      	add	r3, r2
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	461a      	mov	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a16      	ldr	r2, [pc, #88]	@ (80054bc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005464:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f003 031f 	and.w	r3, r3, #31
 800546c:	2201      	movs	r2, #1
 800546e:	409a      	lsls	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005474:	bf00      	nop
 8005476:	3714      	adds	r7, #20
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr
 8005480:	58025408 	.word	0x58025408
 8005484:	5802541c 	.word	0x5802541c
 8005488:	58025430 	.word	0x58025430
 800548c:	58025444 	.word	0x58025444
 8005490:	58025458 	.word	0x58025458
 8005494:	5802546c 	.word	0x5802546c
 8005498:	58025480 	.word	0x58025480
 800549c:	58025494 	.word	0x58025494
 80054a0:	cccccccd 	.word	0xcccccccd
 80054a4:	16009600 	.word	0x16009600
 80054a8:	58025880 	.word	0x58025880
 80054ac:	aaaaaaab 	.word	0xaaaaaaab
 80054b0:	400204b8 	.word	0x400204b8
 80054b4:	4002040f 	.word	0x4002040f
 80054b8:	10008200 	.word	0x10008200
 80054bc:	40020880 	.word	0x40020880

080054c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b085      	sub	sp, #20
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d04a      	beq.n	800556c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2b08      	cmp	r3, #8
 80054da:	d847      	bhi.n	800556c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a25      	ldr	r2, [pc, #148]	@ (8005578 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d022      	beq.n	800552c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a24      	ldr	r2, [pc, #144]	@ (800557c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d01d      	beq.n	800552c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a22      	ldr	r2, [pc, #136]	@ (8005580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d018      	beq.n	800552c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a21      	ldr	r2, [pc, #132]	@ (8005584 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d013      	beq.n	800552c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a1f      	ldr	r2, [pc, #124]	@ (8005588 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d00e      	beq.n	800552c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a1e      	ldr	r2, [pc, #120]	@ (800558c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d009      	beq.n	800552c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a1c      	ldr	r2, [pc, #112]	@ (8005590 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d004      	beq.n	800552c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a1b      	ldr	r2, [pc, #108]	@ (8005594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d101      	bne.n	8005530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800552c:	2301      	movs	r3, #1
 800552e:	e000      	b.n	8005532 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005530:	2300      	movs	r3, #0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00a      	beq.n	800554c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	4b17      	ldr	r3, [pc, #92]	@ (8005598 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800553a:	4413      	add	r3, r2
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	461a      	mov	r2, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a15      	ldr	r2, [pc, #84]	@ (800559c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005548:	671a      	str	r2, [r3, #112]	@ 0x70
 800554a:	e009      	b.n	8005560 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	4b14      	ldr	r3, [pc, #80]	@ (80055a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005550:	4413      	add	r3, r2
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	461a      	mov	r2, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a11      	ldr	r2, [pc, #68]	@ (80055a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800555e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	3b01      	subs	r3, #1
 8005564:	2201      	movs	r2, #1
 8005566:	409a      	lsls	r2, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800556c:	bf00      	nop
 800556e:	3714      	adds	r7, #20
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr
 8005578:	58025408 	.word	0x58025408
 800557c:	5802541c 	.word	0x5802541c
 8005580:	58025430 	.word	0x58025430
 8005584:	58025444 	.word	0x58025444
 8005588:	58025458 	.word	0x58025458
 800558c:	5802546c 	.word	0x5802546c
 8005590:	58025480 	.word	0x58025480
 8005594:	58025494 	.word	0x58025494
 8005598:	1600963f 	.word	0x1600963f
 800559c:	58025940 	.word	0x58025940
 80055a0:	1000823f 	.word	0x1000823f
 80055a4:	40020940 	.word	0x40020940

080055a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b089      	sub	sp, #36	@ 0x24
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80055b2:	2300      	movs	r3, #0
 80055b4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80055b6:	4b89      	ldr	r3, [pc, #548]	@ (80057dc <HAL_GPIO_Init+0x234>)
 80055b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80055ba:	e194      	b.n	80058e6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	2101      	movs	r1, #1
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	fa01 f303 	lsl.w	r3, r1, r3
 80055c8:	4013      	ands	r3, r2
 80055ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	f000 8186 	beq.w	80058e0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	f003 0303 	and.w	r3, r3, #3
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d005      	beq.n	80055ec <HAL_GPIO_Init+0x44>
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	f003 0303 	and.w	r3, r3, #3
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	d130      	bne.n	800564e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	005b      	lsls	r3, r3, #1
 80055f6:	2203      	movs	r2, #3
 80055f8:	fa02 f303 	lsl.w	r3, r2, r3
 80055fc:	43db      	mvns	r3, r3
 80055fe:	69ba      	ldr	r2, [r7, #24]
 8005600:	4013      	ands	r3, r2
 8005602:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	68da      	ldr	r2, [r3, #12]
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	005b      	lsls	r3, r3, #1
 800560c:	fa02 f303 	lsl.w	r3, r2, r3
 8005610:	69ba      	ldr	r2, [r7, #24]
 8005612:	4313      	orrs	r3, r2
 8005614:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	69ba      	ldr	r2, [r7, #24]
 800561a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005622:	2201      	movs	r2, #1
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	fa02 f303 	lsl.w	r3, r2, r3
 800562a:	43db      	mvns	r3, r3
 800562c:	69ba      	ldr	r2, [r7, #24]
 800562e:	4013      	ands	r3, r2
 8005630:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	091b      	lsrs	r3, r3, #4
 8005638:	f003 0201 	and.w	r2, r3, #1
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	fa02 f303 	lsl.w	r3, r2, r3
 8005642:	69ba      	ldr	r2, [r7, #24]
 8005644:	4313      	orrs	r3, r2
 8005646:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	69ba      	ldr	r2, [r7, #24]
 800564c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	f003 0303 	and.w	r3, r3, #3
 8005656:	2b03      	cmp	r3, #3
 8005658:	d017      	beq.n	800568a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	005b      	lsls	r3, r3, #1
 8005664:	2203      	movs	r2, #3
 8005666:	fa02 f303 	lsl.w	r3, r2, r3
 800566a:	43db      	mvns	r3, r3
 800566c:	69ba      	ldr	r2, [r7, #24]
 800566e:	4013      	ands	r3, r2
 8005670:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	689a      	ldr	r2, [r3, #8]
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	005b      	lsls	r3, r3, #1
 800567a:	fa02 f303 	lsl.w	r3, r2, r3
 800567e:	69ba      	ldr	r2, [r7, #24]
 8005680:	4313      	orrs	r3, r2
 8005682:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	69ba      	ldr	r2, [r7, #24]
 8005688:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	f003 0303 	and.w	r3, r3, #3
 8005692:	2b02      	cmp	r3, #2
 8005694:	d123      	bne.n	80056de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	08da      	lsrs	r2, r3, #3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	3208      	adds	r2, #8
 800569e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	f003 0307 	and.w	r3, r3, #7
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	220f      	movs	r2, #15
 80056ae:	fa02 f303 	lsl.w	r3, r2, r3
 80056b2:	43db      	mvns	r3, r3
 80056b4:	69ba      	ldr	r2, [r7, #24]
 80056b6:	4013      	ands	r3, r2
 80056b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	691a      	ldr	r2, [r3, #16]
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	f003 0307 	and.w	r3, r3, #7
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ca:	69ba      	ldr	r2, [r7, #24]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	08da      	lsrs	r2, r3, #3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	3208      	adds	r2, #8
 80056d8:	69b9      	ldr	r1, [r7, #24]
 80056da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	005b      	lsls	r3, r3, #1
 80056e8:	2203      	movs	r2, #3
 80056ea:	fa02 f303 	lsl.w	r3, r2, r3
 80056ee:	43db      	mvns	r3, r3
 80056f0:	69ba      	ldr	r2, [r7, #24]
 80056f2:	4013      	ands	r3, r2
 80056f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f003 0203 	and.w	r2, r3, #3
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	005b      	lsls	r3, r3, #1
 8005702:	fa02 f303 	lsl.w	r3, r2, r3
 8005706:	69ba      	ldr	r2, [r7, #24]
 8005708:	4313      	orrs	r3, r2
 800570a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	69ba      	ldr	r2, [r7, #24]
 8005710:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800571a:	2b00      	cmp	r3, #0
 800571c:	f000 80e0 	beq.w	80058e0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005720:	4b2f      	ldr	r3, [pc, #188]	@ (80057e0 <HAL_GPIO_Init+0x238>)
 8005722:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8005726:	4a2e      	ldr	r2, [pc, #184]	@ (80057e0 <HAL_GPIO_Init+0x238>)
 8005728:	f043 0302 	orr.w	r3, r3, #2
 800572c:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8005730:	4b2b      	ldr	r3, [pc, #172]	@ (80057e0 <HAL_GPIO_Init+0x238>)
 8005732:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8005736:	f003 0302 	and.w	r3, r3, #2
 800573a:	60fb      	str	r3, [r7, #12]
 800573c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800573e:	4a29      	ldr	r2, [pc, #164]	@ (80057e4 <HAL_GPIO_Init+0x23c>)
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	089b      	lsrs	r3, r3, #2
 8005744:	3302      	adds	r3, #2
 8005746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800574a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	f003 0303 	and.w	r3, r3, #3
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	220f      	movs	r2, #15
 8005756:	fa02 f303 	lsl.w	r3, r2, r3
 800575a:	43db      	mvns	r3, r3
 800575c:	69ba      	ldr	r2, [r7, #24]
 800575e:	4013      	ands	r3, r2
 8005760:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a20      	ldr	r2, [pc, #128]	@ (80057e8 <HAL_GPIO_Init+0x240>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d052      	beq.n	8005810 <HAL_GPIO_Init+0x268>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a1f      	ldr	r2, [pc, #124]	@ (80057ec <HAL_GPIO_Init+0x244>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d031      	beq.n	80057d6 <HAL_GPIO_Init+0x22e>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a1e      	ldr	r2, [pc, #120]	@ (80057f0 <HAL_GPIO_Init+0x248>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d02b      	beq.n	80057d2 <HAL_GPIO_Init+0x22a>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a1d      	ldr	r2, [pc, #116]	@ (80057f4 <HAL_GPIO_Init+0x24c>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d025      	beq.n	80057ce <HAL_GPIO_Init+0x226>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a1c      	ldr	r2, [pc, #112]	@ (80057f8 <HAL_GPIO_Init+0x250>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d01f      	beq.n	80057ca <HAL_GPIO_Init+0x222>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a1b      	ldr	r2, [pc, #108]	@ (80057fc <HAL_GPIO_Init+0x254>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d019      	beq.n	80057c6 <HAL_GPIO_Init+0x21e>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a1a      	ldr	r2, [pc, #104]	@ (8005800 <HAL_GPIO_Init+0x258>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d013      	beq.n	80057c2 <HAL_GPIO_Init+0x21a>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a19      	ldr	r2, [pc, #100]	@ (8005804 <HAL_GPIO_Init+0x25c>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d00d      	beq.n	80057be <HAL_GPIO_Init+0x216>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a18      	ldr	r2, [pc, #96]	@ (8005808 <HAL_GPIO_Init+0x260>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d007      	beq.n	80057ba <HAL_GPIO_Init+0x212>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a17      	ldr	r2, [pc, #92]	@ (800580c <HAL_GPIO_Init+0x264>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d101      	bne.n	80057b6 <HAL_GPIO_Init+0x20e>
 80057b2:	2309      	movs	r3, #9
 80057b4:	e02d      	b.n	8005812 <HAL_GPIO_Init+0x26a>
 80057b6:	230a      	movs	r3, #10
 80057b8:	e02b      	b.n	8005812 <HAL_GPIO_Init+0x26a>
 80057ba:	2308      	movs	r3, #8
 80057bc:	e029      	b.n	8005812 <HAL_GPIO_Init+0x26a>
 80057be:	2307      	movs	r3, #7
 80057c0:	e027      	b.n	8005812 <HAL_GPIO_Init+0x26a>
 80057c2:	2306      	movs	r3, #6
 80057c4:	e025      	b.n	8005812 <HAL_GPIO_Init+0x26a>
 80057c6:	2305      	movs	r3, #5
 80057c8:	e023      	b.n	8005812 <HAL_GPIO_Init+0x26a>
 80057ca:	2304      	movs	r3, #4
 80057cc:	e021      	b.n	8005812 <HAL_GPIO_Init+0x26a>
 80057ce:	2303      	movs	r3, #3
 80057d0:	e01f      	b.n	8005812 <HAL_GPIO_Init+0x26a>
 80057d2:	2302      	movs	r3, #2
 80057d4:	e01d      	b.n	8005812 <HAL_GPIO_Init+0x26a>
 80057d6:	2301      	movs	r3, #1
 80057d8:	e01b      	b.n	8005812 <HAL_GPIO_Init+0x26a>
 80057da:	bf00      	nop
 80057dc:	58000080 	.word	0x58000080
 80057e0:	58024400 	.word	0x58024400
 80057e4:	58000400 	.word	0x58000400
 80057e8:	58020000 	.word	0x58020000
 80057ec:	58020400 	.word	0x58020400
 80057f0:	58020800 	.word	0x58020800
 80057f4:	58020c00 	.word	0x58020c00
 80057f8:	58021000 	.word	0x58021000
 80057fc:	58021400 	.word	0x58021400
 8005800:	58021800 	.word	0x58021800
 8005804:	58021c00 	.word	0x58021c00
 8005808:	58022000 	.word	0x58022000
 800580c:	58022400 	.word	0x58022400
 8005810:	2300      	movs	r3, #0
 8005812:	69fa      	ldr	r2, [r7, #28]
 8005814:	f002 0203 	and.w	r2, r2, #3
 8005818:	0092      	lsls	r2, r2, #2
 800581a:	4093      	lsls	r3, r2
 800581c:	69ba      	ldr	r2, [r7, #24]
 800581e:	4313      	orrs	r3, r2
 8005820:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005822:	4938      	ldr	r1, [pc, #224]	@ (8005904 <HAL_GPIO_Init+0x35c>)
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	089b      	lsrs	r3, r3, #2
 8005828:	3302      	adds	r3, #2
 800582a:	69ba      	ldr	r2, [r7, #24]
 800582c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005830:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	43db      	mvns	r3, r3
 800583c:	69ba      	ldr	r2, [r7, #24]
 800583e:	4013      	ands	r3, r2
 8005840:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800584a:	2b00      	cmp	r3, #0
 800584c:	d003      	beq.n	8005856 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800584e:	69ba      	ldr	r2, [r7, #24]
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	4313      	orrs	r3, r2
 8005854:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005856:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800585e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	43db      	mvns	r3, r3
 800586a:	69ba      	ldr	r2, [r7, #24]
 800586c:	4013      	ands	r3, r2
 800586e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005878:	2b00      	cmp	r3, #0
 800587a:	d003      	beq.n	8005884 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800587c:	69ba      	ldr	r2, [r7, #24]
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	4313      	orrs	r3, r2
 8005882:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005884:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	43db      	mvns	r3, r3
 8005896:	69ba      	ldr	r2, [r7, #24]
 8005898:	4013      	ands	r3, r2
 800589a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d003      	beq.n	80058b0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80058a8:	69ba      	ldr	r2, [r7, #24]
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	69ba      	ldr	r2, [r7, #24]
 80058b4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	43db      	mvns	r3, r3
 80058c0:	69ba      	ldr	r2, [r7, #24]
 80058c2:	4013      	ands	r3, r2
 80058c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d003      	beq.n	80058da <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80058d2:	69ba      	ldr	r2, [r7, #24]
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	69ba      	ldr	r2, [r7, #24]
 80058de:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	3301      	adds	r3, #1
 80058e4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	fa22 f303 	lsr.w	r3, r2, r3
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	f47f ae63 	bne.w	80055bc <HAL_GPIO_Init+0x14>
  }
}
 80058f6:	bf00      	nop
 80058f8:	bf00      	nop
 80058fa:	3724      	adds	r7, #36	@ 0x24
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr
 8005904:	58000400 	.word	0x58000400

08005908 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005908:	b480      	push	{r7}
 800590a:	b087      	sub	sp, #28
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005912:	2300      	movs	r3, #0
 8005914:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005916:	4b75      	ldr	r3, [pc, #468]	@ (8005aec <HAL_GPIO_DeInit+0x1e4>)
 8005918:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800591a:	e0d9      	b.n	8005ad0 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 800591c:	2201      	movs	r2, #1
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	fa02 f303 	lsl.w	r3, r2, r3
 8005924:	683a      	ldr	r2, [r7, #0]
 8005926:	4013      	ands	r3, r2
 8005928:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2b00      	cmp	r3, #0
 800592e:	f000 80cc 	beq.w	8005aca <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005932:	4a6f      	ldr	r2, [pc, #444]	@ (8005af0 <HAL_GPIO_DeInit+0x1e8>)
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	089b      	lsrs	r3, r3, #2
 8005938:	3302      	adds	r3, #2
 800593a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800593e:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	f003 0303 	and.w	r3, r3, #3
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	220f      	movs	r2, #15
 800594a:	fa02 f303 	lsl.w	r3, r2, r3
 800594e:	68ba      	ldr	r2, [r7, #8]
 8005950:	4013      	ands	r3, r2
 8005952:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a67      	ldr	r2, [pc, #412]	@ (8005af4 <HAL_GPIO_DeInit+0x1ec>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d037      	beq.n	80059cc <HAL_GPIO_DeInit+0xc4>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a66      	ldr	r2, [pc, #408]	@ (8005af8 <HAL_GPIO_DeInit+0x1f0>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d031      	beq.n	80059c8 <HAL_GPIO_DeInit+0xc0>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a65      	ldr	r2, [pc, #404]	@ (8005afc <HAL_GPIO_DeInit+0x1f4>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d02b      	beq.n	80059c4 <HAL_GPIO_DeInit+0xbc>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a64      	ldr	r2, [pc, #400]	@ (8005b00 <HAL_GPIO_DeInit+0x1f8>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d025      	beq.n	80059c0 <HAL_GPIO_DeInit+0xb8>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a63      	ldr	r2, [pc, #396]	@ (8005b04 <HAL_GPIO_DeInit+0x1fc>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d01f      	beq.n	80059bc <HAL_GPIO_DeInit+0xb4>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a62      	ldr	r2, [pc, #392]	@ (8005b08 <HAL_GPIO_DeInit+0x200>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d019      	beq.n	80059b8 <HAL_GPIO_DeInit+0xb0>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a61      	ldr	r2, [pc, #388]	@ (8005b0c <HAL_GPIO_DeInit+0x204>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d013      	beq.n	80059b4 <HAL_GPIO_DeInit+0xac>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a60      	ldr	r2, [pc, #384]	@ (8005b10 <HAL_GPIO_DeInit+0x208>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d00d      	beq.n	80059b0 <HAL_GPIO_DeInit+0xa8>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a5f      	ldr	r2, [pc, #380]	@ (8005b14 <HAL_GPIO_DeInit+0x20c>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d007      	beq.n	80059ac <HAL_GPIO_DeInit+0xa4>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a5e      	ldr	r2, [pc, #376]	@ (8005b18 <HAL_GPIO_DeInit+0x210>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d101      	bne.n	80059a8 <HAL_GPIO_DeInit+0xa0>
 80059a4:	2309      	movs	r3, #9
 80059a6:	e012      	b.n	80059ce <HAL_GPIO_DeInit+0xc6>
 80059a8:	230a      	movs	r3, #10
 80059aa:	e010      	b.n	80059ce <HAL_GPIO_DeInit+0xc6>
 80059ac:	2308      	movs	r3, #8
 80059ae:	e00e      	b.n	80059ce <HAL_GPIO_DeInit+0xc6>
 80059b0:	2307      	movs	r3, #7
 80059b2:	e00c      	b.n	80059ce <HAL_GPIO_DeInit+0xc6>
 80059b4:	2306      	movs	r3, #6
 80059b6:	e00a      	b.n	80059ce <HAL_GPIO_DeInit+0xc6>
 80059b8:	2305      	movs	r3, #5
 80059ba:	e008      	b.n	80059ce <HAL_GPIO_DeInit+0xc6>
 80059bc:	2304      	movs	r3, #4
 80059be:	e006      	b.n	80059ce <HAL_GPIO_DeInit+0xc6>
 80059c0:	2303      	movs	r3, #3
 80059c2:	e004      	b.n	80059ce <HAL_GPIO_DeInit+0xc6>
 80059c4:	2302      	movs	r3, #2
 80059c6:	e002      	b.n	80059ce <HAL_GPIO_DeInit+0xc6>
 80059c8:	2301      	movs	r3, #1
 80059ca:	e000      	b.n	80059ce <HAL_GPIO_DeInit+0xc6>
 80059cc:	2300      	movs	r3, #0
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	f002 0203 	and.w	r2, r2, #3
 80059d4:	0092      	lsls	r2, r2, #2
 80059d6:	4093      	lsls	r3, r2
 80059d8:	68ba      	ldr	r2, [r7, #8]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d136      	bne.n	8005a4c <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	43db      	mvns	r3, r3
 80059e6:	401a      	ands	r2, r3
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	685a      	ldr	r2, [r3, #4]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	43db      	mvns	r3, r3
 80059f4:	401a      	ands	r2, r3
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80059fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059fe:	685a      	ldr	r2, [r3, #4]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	43db      	mvns	r3, r3
 8005a04:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a08:	4013      	ands	r3, r2
 8005a0a:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8005a0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	43db      	mvns	r3, r3
 8005a16:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	f003 0303 	and.w	r3, r3, #3
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	220f      	movs	r2, #15
 8005a28:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2c:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005a2e:	4a30      	ldr	r2, [pc, #192]	@ (8005af0 <HAL_GPIO_DeInit+0x1e8>)
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	089b      	lsrs	r3, r3, #2
 8005a34:	3302      	adds	r3, #2
 8005a36:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	43da      	mvns	r2, r3
 8005a3e:	482c      	ldr	r0, [pc, #176]	@ (8005af0 <HAL_GPIO_DeInit+0x1e8>)
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	089b      	lsrs	r3, r3, #2
 8005a44:	400a      	ands	r2, r1
 8005a46:	3302      	adds	r3, #2
 8005a48:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	005b      	lsls	r3, r3, #1
 8005a54:	2103      	movs	r1, #3
 8005a56:	fa01 f303 	lsl.w	r3, r1, r3
 8005a5a:	431a      	orrs	r2, r3
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	08da      	lsrs	r2, r3, #3
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	3208      	adds	r2, #8
 8005a68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	f003 0307 	and.w	r3, r3, #7
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	220f      	movs	r2, #15
 8005a76:	fa02 f303 	lsl.w	r3, r2, r3
 8005a7a:	43db      	mvns	r3, r3
 8005a7c:	697a      	ldr	r2, [r7, #20]
 8005a7e:	08d2      	lsrs	r2, r2, #3
 8005a80:	4019      	ands	r1, r3
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	3208      	adds	r2, #8
 8005a86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	68da      	ldr	r2, [r3, #12]
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	005b      	lsls	r3, r3, #1
 8005a92:	2103      	movs	r1, #3
 8005a94:	fa01 f303 	lsl.w	r3, r1, r3
 8005a98:	43db      	mvns	r3, r3
 8005a9a:	401a      	ands	r2, r3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685a      	ldr	r2, [r3, #4]
 8005aa4:	2101      	movs	r1, #1
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8005aac:	43db      	mvns	r3, r3
 8005aae:	401a      	ands	r2, r3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	689a      	ldr	r2, [r3, #8]
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	005b      	lsls	r3, r3, #1
 8005abc:	2103      	movs	r1, #3
 8005abe:	fa01 f303 	lsl.w	r3, r1, r3
 8005ac2:	43db      	mvns	r3, r3
 8005ac4:	401a      	ands	r2, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	609a      	str	r2, [r3, #8]
    }

    position++;
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	3301      	adds	r3, #1
 8005ace:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8005ad0:	683a      	ldr	r2, [r7, #0]
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	f47f af1f 	bne.w	800591c <HAL_GPIO_DeInit+0x14>
  }
}
 8005ade:	bf00      	nop
 8005ae0:	bf00      	nop
 8005ae2:	371c      	adds	r7, #28
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr
 8005aec:	58000080 	.word	0x58000080
 8005af0:	58000400 	.word	0x58000400
 8005af4:	58020000 	.word	0x58020000
 8005af8:	58020400 	.word	0x58020400
 8005afc:	58020800 	.word	0x58020800
 8005b00:	58020c00 	.word	0x58020c00
 8005b04:	58021000 	.word	0x58021000
 8005b08:	58021400 	.word	0x58021400
 8005b0c:	58021800 	.word	0x58021800
 8005b10:	58021c00 	.word	0x58021c00
 8005b14:	58022000 	.word	0x58022000
 8005b18:	58022400 	.word	0x58022400

08005b1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	4603      	mov	r3, r0
 8005b24:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005b26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b2a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005b2e:	88fb      	ldrh	r3, [r7, #6]
 8005b30:	4013      	ands	r3, r2
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d008      	beq.n	8005b48 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005b36:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005b3a:	88fb      	ldrh	r3, [r7, #6]
 8005b3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005b40:	88fb      	ldrh	r3, [r7, #6]
 8005b42:	4618      	mov	r0, r3
 8005b44:	f7fb ffb6 	bl	8001ab4 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005b48:	bf00      	nop
 8005b4a:	3708      	adds	r7, #8
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d101      	bne.n	8005b62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e08b      	b.n	8005c7a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d106      	bne.n	8005b7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f7fc f888 	bl	8001c8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2224      	movs	r2, #36	@ 0x24
 8005b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f022 0201 	bic.w	r2, r2, #1
 8005b92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	685a      	ldr	r2, [r3, #4]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005ba0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	689a      	ldr	r2, [r3, #8]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005bb0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d107      	bne.n	8005bca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	689a      	ldr	r2, [r3, #8]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005bc6:	609a      	str	r2, [r3, #8]
 8005bc8:	e006      	b.n	8005bd8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	689a      	ldr	r2, [r3, #8]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005bd6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	d108      	bne.n	8005bf2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	685a      	ldr	r2, [r3, #4]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005bee:	605a      	str	r2, [r3, #4]
 8005bf0:	e007      	b.n	8005c02 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	685a      	ldr	r2, [r3, #4]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c00:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	6859      	ldr	r1, [r3, #4]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	4b1d      	ldr	r3, [pc, #116]	@ (8005c84 <HAL_I2C_Init+0x134>)
 8005c0e:	430b      	orrs	r3, r1
 8005c10:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68da      	ldr	r2, [r3, #12]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005c20:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	691a      	ldr	r2, [r3, #16]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	699b      	ldr	r3, [r3, #24]
 8005c32:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	430a      	orrs	r2, r1
 8005c3a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	69d9      	ldr	r1, [r3, #28]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a1a      	ldr	r2, [r3, #32]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	430a      	orrs	r2, r1
 8005c4a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f042 0201 	orr.w	r2, r2, #1
 8005c5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2220      	movs	r2, #32
 8005c66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3708      	adds	r7, #8
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	02008000 	.word	0x02008000

08005c88 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d101      	bne.n	8005c9a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e021      	b.n	8005cde <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2224      	movs	r2, #36	@ 0x24
 8005c9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f022 0201 	bic.w	r2, r2, #1
 8005cb0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f7fc f8c6 	bl	8001e44 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3708      	adds	r7, #8
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
	...

08005ce8 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b088      	sub	sp, #32
 8005cec:	af02      	add	r7, sp, #8
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	607a      	str	r2, [r7, #4]
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	817b      	strh	r3, [r7, #10]
 8005cf8:	4613      	mov	r3, r2
 8005cfa:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	2b20      	cmp	r3, #32
 8005d06:	f040 80cd 	bne.w	8005ea4 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	699b      	ldr	r3, [r3, #24]
 8005d10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d18:	d101      	bne.n	8005d1e <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 8005d1a:	2302      	movs	r3, #2
 8005d1c:	e0c3      	b.n	8005ea6 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d101      	bne.n	8005d2c <HAL_I2C_Master_Receive_DMA+0x44>
 8005d28:	2302      	movs	r3, #2
 8005d2a:	e0bc      	b.n	8005ea6 <HAL_I2C_Master_Receive_DMA+0x1be>
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2222      	movs	r2, #34	@ 0x22
 8005d38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2210      	movs	r2, #16
 8005d40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2200      	movs	r2, #0
 8005d48:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	893a      	ldrh	r2, [r7, #8]
 8005d54:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	4a55      	ldr	r2, [pc, #340]	@ (8005eb0 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 8005d5a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	4a55      	ldr	r2, [pc, #340]	@ (8005eb4 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 8005d60:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	2bff      	cmp	r3, #255	@ 0xff
 8005d6a:	d906      	bls.n	8005d7a <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	22ff      	movs	r2, #255	@ 0xff
 8005d70:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005d72:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005d76:	617b      	str	r3, [r7, #20]
 8005d78:	e007      	b.n	8005d8a <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005d84:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005d88:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d070      	beq.n	8005e74 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d020      	beq.n	8005ddc <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d9e:	4a46      	ldr	r2, [pc, #280]	@ (8005eb8 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 8005da0:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005da6:	4a45      	ldr	r2, [pc, #276]	@ (8005ebc <HAL_I2C_Master_Receive_DMA+0x1d4>)
 8005da8:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dae:	2200      	movs	r2, #0
 8005db0:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005db6:	2200      	movs	r2, #0
 8005db8:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	3324      	adds	r3, #36	@ 0x24
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005dcc:	f7fd fba0 	bl	8003510 <HAL_DMA_Start_IT>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005dd4:	7cfb      	ldrb	r3, [r7, #19]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d138      	bne.n	8005e4c <HAL_I2C_Master_Receive_DMA+0x164>
 8005dda:	e013      	b.n	8005e04 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2220      	movs	r2, #32
 8005de0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005df0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e050      	b.n	8005ea6 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e08:	b2da      	uxtb	r2, r3
 8005e0a:	8979      	ldrh	r1, [r7, #10]
 8005e0c:	4b2c      	ldr	r3, [pc, #176]	@ (8005ec0 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8005e0e:	9300      	str	r3, [sp, #0]
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	68f8      	ldr	r0, [r7, #12]
 8005e14:	f002 f8e0 	bl	8007fd8 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e1c:	b29a      	uxth	r2, r3
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e22:	1ad3      	subs	r3, r2, r3
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005e32:	2110      	movs	r1, #16
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f002 f901 	bl	800803c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005e48:	601a      	str	r2, [r3, #0]
 8005e4a:	e029      	b.n	8005ea0 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2220      	movs	r2, #32
 8005e50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e60:	f043 0210 	orr.w	r2, r3, #16
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e018      	b.n	8005ea6 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	4a13      	ldr	r2, [pc, #76]	@ (8005ec4 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 8005e78:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e7e:	b2da      	uxtb	r2, r3
 8005e80:	8979      	ldrh	r1, [r7, #10]
 8005e82:	4b0f      	ldr	r3, [pc, #60]	@ (8005ec0 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8005e84:	9300      	str	r3, [sp, #0]
 8005e86:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005e8a:	68f8      	ldr	r0, [r7, #12]
 8005e8c:	f002 f8a4 	bl	8007fd8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2200      	movs	r2, #0
 8005e94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005e98:	2102      	movs	r1, #2
 8005e9a:	68f8      	ldr	r0, [r7, #12]
 8005e9c:	f002 f8ce 	bl	800803c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	e000      	b.n	8005ea6 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8005ea4:	2302      	movs	r3, #2
  }
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3718      	adds	r7, #24
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	ffff0000 	.word	0xffff0000
 8005eb4:	080066b7 	.word	0x080066b7
 8005eb8:	08007a1f 	.word	0x08007a1f
 8005ebc:	08007ab5 	.word	0x08007ab5
 8005ec0:	80002400 	.word	0x80002400
 8005ec4:	08006277 	.word	0x08006277

08005ec8 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b08a      	sub	sp, #40	@ 0x28
 8005ecc:	af02      	add	r7, sp, #8
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	607a      	str	r2, [r7, #4]
 8005ed2:	603b      	str	r3, [r7, #0]
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	2b20      	cmp	r3, #32
 8005ee6:	f040 80d2 	bne.w	800608e <HAL_I2C_IsDeviceReady+0x1c6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	699b      	ldr	r3, [r3, #24]
 8005ef0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ef4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ef8:	d101      	bne.n	8005efe <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8005efa:	2302      	movs	r3, #2
 8005efc:	e0c8      	b.n	8006090 <HAL_I2C_IsDeviceReady+0x1c8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d101      	bne.n	8005f0c <HAL_I2C_IsDeviceReady+0x44>
 8005f08:	2302      	movs	r3, #2
 8005f0a:	e0c1      	b.n	8006090 <HAL_I2C_IsDeviceReady+0x1c8>
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2224      	movs	r2, #36	@ 0x24
 8005f18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d105      	bne.n	8005f36 <HAL_I2C_IsDeviceReady+0x6e>
 8005f2a:	897b      	ldrh	r3, [r7, #10]
 8005f2c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005f30:	4b59      	ldr	r3, [pc, #356]	@ (8006098 <HAL_I2C_IsDeviceReady+0x1d0>)
 8005f32:	4313      	orrs	r3, r2
 8005f34:	e004      	b.n	8005f40 <HAL_I2C_IsDeviceReady+0x78>
 8005f36:	897b      	ldrh	r3, [r7, #10]
 8005f38:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005f3c:	4b57      	ldr	r3, [pc, #348]	@ (800609c <HAL_I2C_IsDeviceReady+0x1d4>)
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	6812      	ldr	r2, [r2, #0]
 8005f44:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8005f46:	f7fc fbab 	bl	80026a0 <HAL_GetTick>
 8005f4a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	699b      	ldr	r3, [r3, #24]
 8005f52:	f003 0320 	and.w	r3, r3, #32
 8005f56:	2b20      	cmp	r3, #32
 8005f58:	bf0c      	ite	eq
 8005f5a:	2301      	moveq	r3, #1
 8005f5c:	2300      	movne	r3, #0
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	699b      	ldr	r3, [r3, #24]
 8005f68:	f003 0310 	and.w	r3, r3, #16
 8005f6c:	2b10      	cmp	r3, #16
 8005f6e:	bf0c      	ite	eq
 8005f70:	2301      	moveq	r3, #1
 8005f72:	2300      	movne	r3, #0
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005f78:	e034      	b.n	8005fe4 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f80:	d01a      	beq.n	8005fb8 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005f82:	f7fc fb8d 	bl	80026a0 <HAL_GetTick>
 8005f86:	4602      	mov	r2, r0
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	1ad3      	subs	r3, r2, r3
 8005f8c:	683a      	ldr	r2, [r7, #0]
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d302      	bcc.n	8005f98 <HAL_I2C_IsDeviceReady+0xd0>
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d10f      	bne.n	8005fb8 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2220      	movs	r2, #32
 8005f9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fa4:	f043 0220 	orr.w	r2, r3, #32
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e06b      	b.n	8006090 <HAL_I2C_IsDeviceReady+0x1c8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	699b      	ldr	r3, [r3, #24]
 8005fbe:	f003 0320 	and.w	r3, r3, #32
 8005fc2:	2b20      	cmp	r3, #32
 8005fc4:	bf0c      	ite	eq
 8005fc6:	2301      	moveq	r3, #1
 8005fc8:	2300      	movne	r3, #0
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	699b      	ldr	r3, [r3, #24]
 8005fd4:	f003 0310 	and.w	r3, r3, #16
 8005fd8:	2b10      	cmp	r3, #16
 8005fda:	bf0c      	ite	eq
 8005fdc:	2301      	moveq	r3, #1
 8005fde:	2300      	movne	r3, #0
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005fe4:	7ffb      	ldrb	r3, [r7, #31]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d102      	bne.n	8005ff0 <HAL_I2C_IsDeviceReady+0x128>
 8005fea:	7fbb      	ldrb	r3, [r7, #30]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d0c4      	beq.n	8005f7a <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	699b      	ldr	r3, [r3, #24]
 8005ff6:	f003 0310 	and.w	r3, r3, #16
 8005ffa:	2b10      	cmp	r3, #16
 8005ffc:	d01a      	beq.n	8006034 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	9300      	str	r3, [sp, #0]
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	2200      	movs	r2, #0
 8006006:	2120      	movs	r1, #32
 8006008:	68f8      	ldr	r0, [r7, #12]
 800600a:	f001 feab 	bl	8007d64 <I2C_WaitOnFlagUntilTimeout>
 800600e:	4603      	mov	r3, r0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d001      	beq.n	8006018 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	e03b      	b.n	8006090 <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2220      	movs	r2, #32
 800601e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2220      	movs	r2, #32
 8006024:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2200      	movs	r2, #0
 800602c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8006030:	2300      	movs	r3, #0
 8006032:	e02d      	b.n	8006090 <HAL_I2C_IsDeviceReady+0x1c8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	9300      	str	r3, [sp, #0]
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	2200      	movs	r2, #0
 800603c:	2120      	movs	r1, #32
 800603e:	68f8      	ldr	r0, [r7, #12]
 8006040:	f001 fe90 	bl	8007d64 <I2C_WaitOnFlagUntilTimeout>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d001      	beq.n	800604e <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e020      	b.n	8006090 <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2210      	movs	r2, #16
 8006054:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	2220      	movs	r2, #32
 800605c:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	3301      	adds	r3, #1
 8006062:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	429a      	cmp	r2, r3
 800606a:	f63f af5a 	bhi.w	8005f22 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2220      	movs	r2, #32
 8006072:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800607a:	f043 0220 	orr.w	r2, r3, #32
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2200      	movs	r2, #0
 8006086:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e000      	b.n	8006090 <HAL_I2C_IsDeviceReady+0x1c8>
  }
  else
  {
    return HAL_BUSY;
 800608e:	2302      	movs	r3, #2
  }
}
 8006090:	4618      	mov	r0, r3
 8006092:	3720      	adds	r7, #32
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}
 8006098:	02002000 	.word	0x02002000
 800609c:	02002800 	.word	0x02002800

080060a0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	699b      	ldr	r3, [r3, #24]
 80060ae:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d005      	beq.n	80060cc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060c4:	68ba      	ldr	r2, [r7, #8]
 80060c6:	68f9      	ldr	r1, [r7, #12]
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	4798      	blx	r3
  }
}
 80060cc:	bf00      	nop
 80060ce:	3710      	adds	r7, #16
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b086      	sub	sp, #24
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d00f      	beq.n	8006116 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d00a      	beq.n	8006116 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006104:	f043 0201 	orr.w	r2, r3, #1
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006114:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800611c:	2b00      	cmp	r3, #0
 800611e:	d00f      	beq.n	8006140 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00a      	beq.n	8006140 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800612e:	f043 0208 	orr.w	r2, r3, #8
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800613e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00f      	beq.n	800616a <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006150:	2b00      	cmp	r3, #0
 8006152:	d00a      	beq.n	800616a <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006158:	f043 0202 	orr.w	r2, r3, #2
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006168:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800616e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f003 030b 	and.w	r3, r3, #11
 8006176:	2b00      	cmp	r3, #0
 8006178:	d003      	beq.n	8006182 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800617a:	68f9      	ldr	r1, [r7, #12]
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f001 fb13 	bl	80077a8 <I2C_ITError>
  }
}
 8006182:	bf00      	nop
 8006184:	3718      	adds	r7, #24
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800618a:	b480      	push	{r7}
 800618c:	b083      	sub	sp, #12
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006192:	bf00      	nop
 8006194:	370c      	adds	r7, #12
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr

0800619e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800619e:	b480      	push	{r7}
 80061a0:	b083      	sub	sp, #12
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80061a6:	bf00      	nop
 80061a8:	370c      	adds	r7, #12
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr

080061b2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80061b2:	b480      	push	{r7}
 80061b4:	b083      	sub	sp, #12
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80061ba:	bf00      	nop
 80061bc:	370c      	adds	r7, #12
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr

080061c6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80061c6:	b480      	push	{r7}
 80061c8:	b083      	sub	sp, #12
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80061ce:	bf00      	nop
 80061d0:	370c      	adds	r7, #12
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr

080061da <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80061da:	b480      	push	{r7}
 80061dc:	b083      	sub	sp, #12
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
 80061e2:	460b      	mov	r3, r1
 80061e4:	70fb      	strb	r3, [r7, #3]
 80061e6:	4613      	mov	r3, r2
 80061e8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80061ea:	bf00      	nop
 80061ec:	370c      	adds	r7, #12
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr

080061f6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80061f6:	b480      	push	{r7}
 80061f8:	b083      	sub	sp, #12
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80061fe:	bf00      	nop
 8006200:	370c      	adds	r7, #12
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr

0800620a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800620a:	b480      	push	{r7}
 800620c:	b083      	sub	sp, #12
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006212:	bf00      	nop
 8006214:	370c      	adds	r7, #12
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr

0800621e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800621e:	b480      	push	{r7}
 8006220:	b083      	sub	sp, #12
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006226:	bf00      	nop
 8006228:	370c      	adds	r7, #12
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr

08006232 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006232:	b480      	push	{r7}
 8006234:	b083      	sub	sp, #12
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800623a:	bf00      	nop
 800623c:	370c      	adds	r7, #12
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr

08006246 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006246:	b480      	push	{r7}
 8006248:	b083      	sub	sp, #12
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800624e:	bf00      	nop
 8006250:	370c      	adds	r7, #12
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr

0800625a <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800625a:	b480      	push	{r7}
 800625c:	b083      	sub	sp, #12
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006268:	b2db      	uxtb	r3, r3
}
 800626a:	4618      	mov	r0, r3
 800626c:	370c      	adds	r7, #12
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr

08006276 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b088      	sub	sp, #32
 800627a:	af02      	add	r7, sp, #8
 800627c:	60f8      	str	r0, [r7, #12]
 800627e:	60b9      	str	r1, [r7, #8]
 8006280:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800628c:	2b01      	cmp	r3, #1
 800628e:	d101      	bne.n	8006294 <I2C_Master_ISR_IT+0x1e>
 8006290:	2302      	movs	r3, #2
 8006292:	e113      	b.n	80064bc <I2C_Master_ISR_IT+0x246>
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	f003 0310 	and.w	r3, r3, #16
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d012      	beq.n	80062cc <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d00d      	beq.n	80062cc <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	2210      	movs	r2, #16
 80062b6:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062bc:	f043 0204 	orr.w	r2, r3, #4
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80062c4:	68f8      	ldr	r0, [r7, #12]
 80062c6:	f001 fb86 	bl	80079d6 <I2C_Flush_TXDR>
 80062ca:	e0e4      	b.n	8006496 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	f003 0304 	and.w	r3, r3, #4
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d022      	beq.n	800631c <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d01d      	beq.n	800631c <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	f023 0304 	bic.w	r3, r3, #4
 80062e6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f2:	b2d2      	uxtb	r2, r2
 80062f4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062fa:	1c5a      	adds	r2, r3, #1
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006304:	3b01      	subs	r3, #1
 8006306:	b29a      	uxth	r2, r3
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006310:	b29b      	uxth	r3, r3
 8006312:	3b01      	subs	r3, #1
 8006314:	b29a      	uxth	r2, r3
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800631a:	e0bc      	b.n	8006496 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006322:	2b00      	cmp	r3, #0
 8006324:	d128      	bne.n	8006378 <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800632c:	2b00      	cmp	r3, #0
 800632e:	d023      	beq.n	8006378 <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006336:	2b00      	cmp	r3, #0
 8006338:	d01e      	beq.n	8006378 <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800633e:	b29b      	uxth	r3, r3
 8006340:	2b00      	cmp	r3, #0
 8006342:	f000 80a8 	beq.w	8006496 <I2C_Master_ISR_IT+0x220>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800634a:	781a      	ldrb	r2, [r3, #0]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006356:	1c5a      	adds	r2, r3, #1
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006360:	3b01      	subs	r3, #1
 8006362:	b29a      	uxth	r2, r3
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800636c:	b29b      	uxth	r3, r3
 800636e:	3b01      	subs	r3, #1
 8006370:	b29a      	uxth	r2, r3
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8006376:	e08e      	b.n	8006496 <I2C_Master_ISR_IT+0x220>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800637e:	2b00      	cmp	r3, #0
 8006380:	d05c      	beq.n	800643c <I2C_Master_ISR_IT+0x1c6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8006388:	2b00      	cmp	r3, #0
 800638a:	d057      	beq.n	800643c <I2C_Master_ISR_IT+0x1c6>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006390:	b29b      	uxth	r3, r3
 8006392:	2b00      	cmp	r3, #0
 8006394:	d040      	beq.n	8006418 <I2C_Master_ISR_IT+0x1a2>
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800639a:	2b00      	cmp	r3, #0
 800639c:	d13c      	bne.n	8006418 <I2C_Master_ISR_IT+0x1a2>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063aa:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	2bff      	cmp	r3, #255	@ 0xff
 80063b4:	d90e      	bls.n	80063d4 <I2C_Master_ISR_IT+0x15e>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	22ff      	movs	r2, #255	@ 0xff
 80063ba:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063c0:	b2da      	uxtb	r2, r3
 80063c2:	8a79      	ldrh	r1, [r7, #18]
 80063c4:	2300      	movs	r3, #0
 80063c6:	9300      	str	r3, [sp, #0]
 80063c8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80063cc:	68f8      	ldr	r0, [r7, #12]
 80063ce:	f001 fe03 	bl	8007fd8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80063d2:	e032      	b.n	800643a <I2C_Master_ISR_IT+0x1c4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063d8:	b29a      	uxth	r2, r3
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063e2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80063e6:	d00b      	beq.n	8006400 <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063ec:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80063f2:	8a79      	ldrh	r1, [r7, #18]
 80063f4:	2000      	movs	r0, #0
 80063f6:	9000      	str	r0, [sp, #0]
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f001 fded 	bl	8007fd8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80063fe:	e01c      	b.n	800643a <I2C_Master_ISR_IT+0x1c4>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006404:	b2da      	uxtb	r2, r3
 8006406:	8a79      	ldrh	r1, [r7, #18]
 8006408:	2300      	movs	r3, #0
 800640a:	9300      	str	r3, [sp, #0]
 800640c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006410:	68f8      	ldr	r0, [r7, #12]
 8006412:	f001 fde1 	bl	8007fd8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006416:	e010      	b.n	800643a <I2C_Master_ISR_IT+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006422:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006426:	d003      	beq.n	8006430 <I2C_Master_ISR_IT+0x1ba>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006428:	68f8      	ldr	r0, [r7, #12]
 800642a:	f000 fdb3 	bl	8006f94 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800642e:	e032      	b.n	8006496 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006430:	2140      	movs	r1, #64	@ 0x40
 8006432:	68f8      	ldr	r0, [r7, #12]
 8006434:	f001 f9b8 	bl	80077a8 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006438:	e02d      	b.n	8006496 <I2C_Master_ISR_IT+0x220>
 800643a:	e02c      	b.n	8006496 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006442:	2b00      	cmp	r3, #0
 8006444:	d027      	beq.n	8006496 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800644c:	2b00      	cmp	r3, #0
 800644e:	d022      	beq.n	8006496 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006454:	b29b      	uxth	r3, r3
 8006456:	2b00      	cmp	r3, #0
 8006458:	d119      	bne.n	800648e <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006464:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006468:	d015      	beq.n	8006496 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800646e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006472:	d108      	bne.n	8006486 <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	685a      	ldr	r2, [r3, #4]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006482:	605a      	str	r2, [r3, #4]
 8006484:	e007      	b.n	8006496 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006486:	68f8      	ldr	r0, [r7, #12]
 8006488:	f000 fd84 	bl	8006f94 <I2C_ITMasterSeqCplt>
 800648c:	e003      	b.n	8006496 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800648e:	2140      	movs	r1, #64	@ 0x40
 8006490:	68f8      	ldr	r0, [r7, #12]
 8006492:	f001 f989 	bl	80077a8 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	f003 0320 	and.w	r3, r3, #32
 800649c:	2b00      	cmp	r3, #0
 800649e:	d008      	beq.n	80064b2 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d003      	beq.n	80064b2 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80064aa:	6979      	ldr	r1, [r7, #20]
 80064ac:	68f8      	ldr	r0, [r7, #12]
 80064ae:	f000 fe0b 	bl	80070c8 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80064ba:	2300      	movs	r3, #0
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3718      	adds	r7, #24
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b086      	sub	sp, #24
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064d4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d101      	bne.n	80064e8 <I2C_Slave_ISR_IT+0x24>
 80064e4:	2302      	movs	r3, #2
 80064e6:	e0e2      	b.n	80066ae <I2C_Slave_ISR_IT+0x1ea>
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	f003 0320 	and.w	r3, r3, #32
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d009      	beq.n	800650e <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006500:	2b00      	cmp	r3, #0
 8006502:	d004      	beq.n	800650e <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006504:	6939      	ldr	r1, [r7, #16]
 8006506:	68f8      	ldr	r0, [r7, #12]
 8006508:	f000 fea6 	bl	8007258 <I2C_ITSlaveCplt>
 800650c:	e0ca      	b.n	80066a4 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	f003 0310 	and.w	r3, r3, #16
 8006514:	2b00      	cmp	r3, #0
 8006516:	d04b      	beq.n	80065b0 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800651e:	2b00      	cmp	r3, #0
 8006520:	d046      	beq.n	80065b0 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006526:	b29b      	uxth	r3, r3
 8006528:	2b00      	cmp	r3, #0
 800652a:	d128      	bne.n	800657e <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006532:	b2db      	uxtb	r3, r3
 8006534:	2b28      	cmp	r3, #40	@ 0x28
 8006536:	d108      	bne.n	800654a <I2C_Slave_ISR_IT+0x86>
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800653e:	d104      	bne.n	800654a <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006540:	6939      	ldr	r1, [r7, #16]
 8006542:	68f8      	ldr	r0, [r7, #12]
 8006544:	f001 f8dc 	bl	8007700 <I2C_ITListenCplt>
 8006548:	e031      	b.n	80065ae <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006550:	b2db      	uxtb	r3, r3
 8006552:	2b29      	cmp	r3, #41	@ 0x29
 8006554:	d10e      	bne.n	8006574 <I2C_Slave_ISR_IT+0xb0>
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800655c:	d00a      	beq.n	8006574 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	2210      	movs	r2, #16
 8006564:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006566:	68f8      	ldr	r0, [r7, #12]
 8006568:	f001 fa35 	bl	80079d6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800656c:	68f8      	ldr	r0, [r7, #12]
 800656e:	f000 fd4e 	bl	800700e <I2C_ITSlaveSeqCplt>
 8006572:	e01c      	b.n	80065ae <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2210      	movs	r2, #16
 800657a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800657c:	e08f      	b.n	800669e <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2210      	movs	r2, #16
 8006584:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800658a:	f043 0204 	orr.w	r2, r3, #4
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d003      	beq.n	80065a0 <I2C_Slave_ISR_IT+0xdc>
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800659e:	d17e      	bne.n	800669e <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065a4:	4619      	mov	r1, r3
 80065a6:	68f8      	ldr	r0, [r7, #12]
 80065a8:	f001 f8fe 	bl	80077a8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80065ac:	e077      	b.n	800669e <I2C_Slave_ISR_IT+0x1da>
 80065ae:	e076      	b.n	800669e <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	f003 0304 	and.w	r3, r3, #4
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d02f      	beq.n	800661a <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d02a      	beq.n	800661a <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d018      	beq.n	8006600 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065d8:	b2d2      	uxtb	r2, r2
 80065da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065e0:	1c5a      	adds	r2, r3, #1
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065ea:	3b01      	subs	r3, #1
 80065ec:	b29a      	uxth	r2, r3
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	3b01      	subs	r3, #1
 80065fa:	b29a      	uxth	r2, r3
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006604:	b29b      	uxth	r3, r3
 8006606:	2b00      	cmp	r3, #0
 8006608:	d14b      	bne.n	80066a2 <I2C_Slave_ISR_IT+0x1de>
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006610:	d047      	beq.n	80066a2 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006612:	68f8      	ldr	r0, [r7, #12]
 8006614:	f000 fcfb 	bl	800700e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006618:	e043      	b.n	80066a2 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	f003 0308 	and.w	r3, r3, #8
 8006620:	2b00      	cmp	r3, #0
 8006622:	d009      	beq.n	8006638 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800662a:	2b00      	cmp	r3, #0
 800662c:	d004      	beq.n	8006638 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800662e:	6939      	ldr	r1, [r7, #16]
 8006630:	68f8      	ldr	r0, [r7, #12]
 8006632:	f000 fc2b 	bl	8006e8c <I2C_ITAddrCplt>
 8006636:	e035      	b.n	80066a4 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	f003 0302 	and.w	r3, r3, #2
 800663e:	2b00      	cmp	r3, #0
 8006640:	d030      	beq.n	80066a4 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006648:	2b00      	cmp	r3, #0
 800664a:	d02b      	beq.n	80066a4 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006650:	b29b      	uxth	r3, r3
 8006652:	2b00      	cmp	r3, #0
 8006654:	d018      	beq.n	8006688 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800665a:	781a      	ldrb	r2, [r3, #0]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006666:	1c5a      	adds	r2, r3, #1
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006670:	b29b      	uxth	r3, r3
 8006672:	3b01      	subs	r3, #1
 8006674:	b29a      	uxth	r2, r3
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800667e:	3b01      	subs	r3, #1
 8006680:	b29a      	uxth	r2, r3
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006686:	e00d      	b.n	80066a4 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800668e:	d002      	beq.n	8006696 <I2C_Slave_ISR_IT+0x1d2>
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d106      	bne.n	80066a4 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006696:	68f8      	ldr	r0, [r7, #12]
 8006698:	f000 fcb9 	bl	800700e <I2C_ITSlaveSeqCplt>
 800669c:	e002      	b.n	80066a4 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800669e:	bf00      	nop
 80066a0:	e000      	b.n	80066a4 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80066a2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3718      	adds	r7, #24
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}

080066b6 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80066b6:	b580      	push	{r7, lr}
 80066b8:	b088      	sub	sp, #32
 80066ba:	af02      	add	r7, sp, #8
 80066bc:	60f8      	str	r0, [r7, #12]
 80066be:	60b9      	str	r1, [r7, #8]
 80066c0:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d101      	bne.n	80066d0 <I2C_Master_ISR_DMA+0x1a>
 80066cc:	2302      	movs	r3, #2
 80066ce:	e0d9      	b.n	8006884 <I2C_Master_ISR_DMA+0x1ce>
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	f003 0310 	and.w	r3, r3, #16
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d016      	beq.n	8006710 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d011      	beq.n	8006710 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2210      	movs	r2, #16
 80066f2:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066f8:	f043 0204 	orr.w	r2, r3, #4
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006700:	2120      	movs	r1, #32
 8006702:	68f8      	ldr	r0, [r7, #12]
 8006704:	f001 fc9a 	bl	800803c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006708:	68f8      	ldr	r0, [r7, #12]
 800670a:	f001 f964 	bl	80079d6 <I2C_Flush_TXDR>
 800670e:	e0b4      	b.n	800687a <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006716:	2b00      	cmp	r3, #0
 8006718:	d071      	beq.n	80067fe <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006720:	2b00      	cmp	r3, #0
 8006722:	d06c      	beq.n	80067fe <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006732:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006738:	b29b      	uxth	r3, r3
 800673a:	2b00      	cmp	r3, #0
 800673c:	d04e      	beq.n	80067dc <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	b29b      	uxth	r3, r3
 8006746:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800674a:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006750:	b29b      	uxth	r3, r3
 8006752:	2bff      	cmp	r3, #255	@ 0xff
 8006754:	d906      	bls.n	8006764 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	22ff      	movs	r2, #255	@ 0xff
 800675a:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800675c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006760:	617b      	str	r3, [r7, #20]
 8006762:	e010      	b.n	8006786 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006768:	b29a      	uxth	r2, r3
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006772:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006776:	d003      	beq.n	8006780 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800677c:	617b      	str	r3, [r7, #20]
 800677e:	e002      	b.n	8006786 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8006780:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006784:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800678a:	b2da      	uxtb	r2, r3
 800678c:	8a79      	ldrh	r1, [r7, #18]
 800678e:	2300      	movs	r3, #0
 8006790:	9300      	str	r3, [sp, #0]
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	68f8      	ldr	r0, [r7, #12]
 8006796:	f001 fc1f 	bl	8007fd8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800679e:	b29a      	uxth	r2, r3
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067a4:	1ad3      	subs	r3, r2, r3
 80067a6:	b29a      	uxth	r2, r3
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	2b22      	cmp	r3, #34	@ 0x22
 80067b6:	d108      	bne.n	80067ca <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80067c6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80067c8:	e057      	b.n	800687a <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80067d8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80067da:	e04e      	b.n	800687a <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80067ea:	d003      	beq.n	80067f4 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80067ec:	68f8      	ldr	r0, [r7, #12]
 80067ee:	f000 fbd1 	bl	8006f94 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80067f2:	e042      	b.n	800687a <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80067f4:	2140      	movs	r1, #64	@ 0x40
 80067f6:	68f8      	ldr	r0, [r7, #12]
 80067f8:	f000 ffd6 	bl	80077a8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80067fc:	e03d      	b.n	800687a <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006804:	2b00      	cmp	r3, #0
 8006806:	d028      	beq.n	800685a <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800680e:	2b00      	cmp	r3, #0
 8006810:	d023      	beq.n	800685a <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006816:	b29b      	uxth	r3, r3
 8006818:	2b00      	cmp	r3, #0
 800681a:	d119      	bne.n	8006850 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006826:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800682a:	d025      	beq.n	8006878 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006830:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006834:	d108      	bne.n	8006848 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	685a      	ldr	r2, [r3, #4]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006844:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8006846:	e017      	b.n	8006878 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f000 fba3 	bl	8006f94 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800684e:	e013      	b.n	8006878 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006850:	2140      	movs	r1, #64	@ 0x40
 8006852:	68f8      	ldr	r0, [r7, #12]
 8006854:	f000 ffa8 	bl	80077a8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006858:	e00e      	b.n	8006878 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	f003 0320 	and.w	r3, r3, #32
 8006860:	2b00      	cmp	r3, #0
 8006862:	d00a      	beq.n	800687a <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800686a:	2b00      	cmp	r3, #0
 800686c:	d005      	beq.n	800687a <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800686e:	68b9      	ldr	r1, [r7, #8]
 8006870:	68f8      	ldr	r0, [r7, #12]
 8006872:	f000 fc29 	bl	80070c8 <I2C_ITMasterCplt>
 8006876:	e000      	b.n	800687a <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8006878:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2200      	movs	r2, #0
 800687e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006882:	2300      	movs	r3, #0
}
 8006884:	4618      	mov	r0, r3
 8006886:	3718      	adds	r7, #24
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b088      	sub	sp, #32
 8006890:	af02      	add	r7, sp, #8
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8006898:	4b8d      	ldr	r3, [pc, #564]	@ (8006ad0 <I2C_Mem_ISR_DMA+0x244>)
 800689a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d101      	bne.n	80068aa <I2C_Mem_ISR_DMA+0x1e>
 80068a6:	2302      	movs	r3, #2
 80068a8:	e10e      	b.n	8006ac8 <I2C_Mem_ISR_DMA+0x23c>
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2201      	movs	r2, #1
 80068ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	f003 0310 	and.w	r3, r3, #16
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d016      	beq.n	80068ea <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d011      	beq.n	80068ea <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2210      	movs	r2, #16
 80068cc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068d2:	f043 0204 	orr.w	r2, r3, #4
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80068da:	2120      	movs	r1, #32
 80068dc:	68f8      	ldr	r0, [r7, #12]
 80068de:	f001 fbad 	bl	800803c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80068e2:	68f8      	ldr	r0, [r7, #12]
 80068e4:	f001 f877 	bl	80079d6 <I2C_Flush_TXDR>
 80068e8:	e0e9      	b.n	8006abe <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	f003 0302 	and.w	r3, r3, #2
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00e      	beq.n	8006912 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d009      	beq.n	8006912 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006906:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f04f 32ff 	mov.w	r2, #4294967295
 800690e:	651a      	str	r2, [r3, #80]	@ 0x50
 8006910:	e0d5      	b.n	8006abe <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006918:	2b00      	cmp	r3, #0
 800691a:	d05f      	beq.n	80069dc <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006922:	2b00      	cmp	r3, #0
 8006924:	d05a      	beq.n	80069dc <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006926:	2101      	movs	r1, #1
 8006928:	68f8      	ldr	r0, [r7, #12]
 800692a:	f001 fc0b 	bl	8008144 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800692e:	2110      	movs	r1, #16
 8006930:	68f8      	ldr	r0, [r7, #12]
 8006932:	f001 fb83 	bl	800803c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800693a:	b29b      	uxth	r3, r3
 800693c:	2b00      	cmp	r3, #0
 800693e:	d048      	beq.n	80069d2 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006944:	b29b      	uxth	r3, r3
 8006946:	2bff      	cmp	r3, #255	@ 0xff
 8006948:	d910      	bls.n	800696c <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	22ff      	movs	r2, #255	@ 0xff
 800694e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006954:	b299      	uxth	r1, r3
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800695a:	b2da      	uxtb	r2, r3
 800695c:	2300      	movs	r3, #0
 800695e:	9300      	str	r3, [sp, #0]
 8006960:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006964:	68f8      	ldr	r0, [r7, #12]
 8006966:	f001 fb37 	bl	8007fd8 <I2C_TransferConfig>
 800696a:	e011      	b.n	8006990 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006970:	b29a      	uxth	r2, r3
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800697a:	b299      	uxth	r1, r3
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006980:	b2da      	uxtb	r2, r3
 8006982:	2300      	movs	r3, #0
 8006984:	9300      	str	r3, [sp, #0]
 8006986:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800698a:	68f8      	ldr	r0, [r7, #12]
 800698c:	f001 fb24 	bl	8007fd8 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006994:	b29a      	uxth	r2, r3
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800699a:	1ad3      	subs	r3, r2, r3
 800699c:	b29a      	uxth	r2, r3
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	2b22      	cmp	r3, #34	@ 0x22
 80069ac:	d108      	bne.n	80069c0 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80069bc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80069be:	e07e      	b.n	8006abe <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80069ce:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80069d0:	e075      	b.n	8006abe <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80069d2:	2140      	movs	r1, #64	@ 0x40
 80069d4:	68f8      	ldr	r0, [r7, #12]
 80069d6:	f000 fee7 	bl	80077a8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80069da:	e070      	b.n	8006abe <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d05d      	beq.n	8006aa2 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d058      	beq.n	8006aa2 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80069f0:	2101      	movs	r1, #1
 80069f2:	68f8      	ldr	r0, [r7, #12]
 80069f4:	f001 fba6 	bl	8008144 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80069f8:	2110      	movs	r1, #16
 80069fa:	68f8      	ldr	r0, [r7, #12]
 80069fc:	f001 fb1e 	bl	800803c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	2b22      	cmp	r3, #34	@ 0x22
 8006a0a:	d101      	bne.n	8006a10 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8006a0c:	4b31      	ldr	r3, [pc, #196]	@ (8006ad4 <I2C_Mem_ISR_DMA+0x248>)
 8006a0e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	2bff      	cmp	r3, #255	@ 0xff
 8006a18:	d910      	bls.n	8006a3c <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	22ff      	movs	r2, #255	@ 0xff
 8006a1e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a24:	b299      	uxth	r1, r3
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a2a:	b2da      	uxtb	r2, r3
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	9300      	str	r3, [sp, #0]
 8006a30:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	f001 facf 	bl	8007fd8 <I2C_TransferConfig>
 8006a3a:	e011      	b.n	8006a60 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a40:	b29a      	uxth	r2, r3
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a4a:	b299      	uxth	r1, r3
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a50:	b2da      	uxtb	r2, r3
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	9300      	str	r3, [sp, #0]
 8006a56:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006a5a:	68f8      	ldr	r0, [r7, #12]
 8006a5c:	f001 fabc 	bl	8007fd8 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a64:	b29a      	uxth	r2, r3
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a6a:	1ad3      	subs	r3, r2, r3
 8006a6c:	b29a      	uxth	r2, r3
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	2b22      	cmp	r3, #34	@ 0x22
 8006a7c:	d108      	bne.n	8006a90 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006a8c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006a8e:	e016      	b.n	8006abe <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006a9e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006aa0:	e00d      	b.n	8006abe <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	f003 0320 	and.w	r3, r3, #32
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d008      	beq.n	8006abe <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d003      	beq.n	8006abe <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006ab6:	68b9      	ldr	r1, [r7, #8]
 8006ab8:	68f8      	ldr	r0, [r7, #12]
 8006aba:	f000 fb05 	bl	80070c8 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006ac6:	2300      	movs	r3, #0
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3718      	adds	r7, #24
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	80002000 	.word	0x80002000
 8006ad4:	80002400 	.word	0x80002400

08006ad8 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b088      	sub	sp, #32
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ae8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8006aea:	2300      	movs	r3, #0
 8006aec:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d101      	bne.n	8006afc <I2C_Slave_ISR_DMA+0x24>
 8006af8:	2302      	movs	r3, #2
 8006afa:	e1c2      	b.n	8006e82 <I2C_Slave_ISR_DMA+0x3aa>
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	f003 0320 	and.w	r3, r3, #32
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d009      	beq.n	8006b22 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d004      	beq.n	8006b22 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006b18:	68b9      	ldr	r1, [r7, #8]
 8006b1a:	68f8      	ldr	r0, [r7, #12]
 8006b1c:	f000 fb9c 	bl	8007258 <I2C_ITSlaveCplt>
 8006b20:	e1aa      	b.n	8006e78 <I2C_Slave_ISR_DMA+0x3a0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	f003 0310 	and.w	r3, r3, #16
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	f000 8197 	beq.w	8006e5c <I2C_Slave_ISR_DMA+0x384>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	f000 8191 	beq.w	8006e5c <I2C_Slave_ISR_DMA+0x384>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d105      	bne.n	8006b50 <I2C_Slave_ISR_DMA+0x78>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	f000 817f 	beq.w	8006e4e <I2C_Slave_ISR_DMA+0x376>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d07b      	beq.n	8006c50 <I2C_Slave_ISR_DMA+0x178>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d076      	beq.n	8006c50 <I2C_Slave_ISR_DMA+0x178>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a74      	ldr	r2, [pc, #464]	@ (8006d3c <I2C_Slave_ISR_DMA+0x264>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d059      	beq.n	8006c22 <I2C_Slave_ISR_DMA+0x14a>
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a72      	ldr	r2, [pc, #456]	@ (8006d40 <I2C_Slave_ISR_DMA+0x268>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d053      	beq.n	8006c22 <I2C_Slave_ISR_DMA+0x14a>
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a70      	ldr	r2, [pc, #448]	@ (8006d44 <I2C_Slave_ISR_DMA+0x26c>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d04d      	beq.n	8006c22 <I2C_Slave_ISR_DMA+0x14a>
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a6e      	ldr	r2, [pc, #440]	@ (8006d48 <I2C_Slave_ISR_DMA+0x270>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d047      	beq.n	8006c22 <I2C_Slave_ISR_DMA+0x14a>
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a6c      	ldr	r2, [pc, #432]	@ (8006d4c <I2C_Slave_ISR_DMA+0x274>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d041      	beq.n	8006c22 <I2C_Slave_ISR_DMA+0x14a>
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a6a      	ldr	r2, [pc, #424]	@ (8006d50 <I2C_Slave_ISR_DMA+0x278>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d03b      	beq.n	8006c22 <I2C_Slave_ISR_DMA+0x14a>
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a68      	ldr	r2, [pc, #416]	@ (8006d54 <I2C_Slave_ISR_DMA+0x27c>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d035      	beq.n	8006c22 <I2C_Slave_ISR_DMA+0x14a>
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a66      	ldr	r2, [pc, #408]	@ (8006d58 <I2C_Slave_ISR_DMA+0x280>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d02f      	beq.n	8006c22 <I2C_Slave_ISR_DMA+0x14a>
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a64      	ldr	r2, [pc, #400]	@ (8006d5c <I2C_Slave_ISR_DMA+0x284>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d029      	beq.n	8006c22 <I2C_Slave_ISR_DMA+0x14a>
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a62      	ldr	r2, [pc, #392]	@ (8006d60 <I2C_Slave_ISR_DMA+0x288>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d023      	beq.n	8006c22 <I2C_Slave_ISR_DMA+0x14a>
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a60      	ldr	r2, [pc, #384]	@ (8006d64 <I2C_Slave_ISR_DMA+0x28c>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d01d      	beq.n	8006c22 <I2C_Slave_ISR_DMA+0x14a>
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a5e      	ldr	r2, [pc, #376]	@ (8006d68 <I2C_Slave_ISR_DMA+0x290>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d017      	beq.n	8006c22 <I2C_Slave_ISR_DMA+0x14a>
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a5c      	ldr	r2, [pc, #368]	@ (8006d6c <I2C_Slave_ISR_DMA+0x294>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d011      	beq.n	8006c22 <I2C_Slave_ISR_DMA+0x14a>
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a5a      	ldr	r2, [pc, #360]	@ (8006d70 <I2C_Slave_ISR_DMA+0x298>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d00b      	beq.n	8006c22 <I2C_Slave_ISR_DMA+0x14a>
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a58      	ldr	r2, [pc, #352]	@ (8006d74 <I2C_Slave_ISR_DMA+0x29c>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d005      	beq.n	8006c22 <I2C_Slave_ISR_DMA+0x14a>
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a56      	ldr	r2, [pc, #344]	@ (8006d78 <I2C_Slave_ISR_DMA+0x2a0>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d109      	bne.n	8006c36 <I2C_Slave_ISR_DMA+0x15e>
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	bf0c      	ite	eq
 8006c2e:	2301      	moveq	r3, #1
 8006c30:	2300      	movne	r3, #0
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	e008      	b.n	8006c48 <I2C_Slave_ISR_DMA+0x170>
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	bf0c      	ite	eq
 8006c42:	2301      	moveq	r3, #1
 8006c44:	2300      	movne	r3, #0
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d001      	beq.n	8006c50 <I2C_Slave_ISR_DMA+0x178>
          {
            treatdmanack = 1U;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	f000 809e 	beq.w	8006d96 <I2C_Slave_ISR_DMA+0x2be>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	f000 8098 	beq.w	8006d96 <I2C_Slave_ISR_DMA+0x2be>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a33      	ldr	r2, [pc, #204]	@ (8006d3c <I2C_Slave_ISR_DMA+0x264>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d059      	beq.n	8006d26 <I2C_Slave_ISR_DMA+0x24e>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a31      	ldr	r2, [pc, #196]	@ (8006d40 <I2C_Slave_ISR_DMA+0x268>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d053      	beq.n	8006d26 <I2C_Slave_ISR_DMA+0x24e>
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a2f      	ldr	r2, [pc, #188]	@ (8006d44 <I2C_Slave_ISR_DMA+0x26c>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d04d      	beq.n	8006d26 <I2C_Slave_ISR_DMA+0x24e>
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a2d      	ldr	r2, [pc, #180]	@ (8006d48 <I2C_Slave_ISR_DMA+0x270>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d047      	beq.n	8006d26 <I2C_Slave_ISR_DMA+0x24e>
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a2b      	ldr	r2, [pc, #172]	@ (8006d4c <I2C_Slave_ISR_DMA+0x274>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d041      	beq.n	8006d26 <I2C_Slave_ISR_DMA+0x24e>
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a29      	ldr	r2, [pc, #164]	@ (8006d50 <I2C_Slave_ISR_DMA+0x278>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d03b      	beq.n	8006d26 <I2C_Slave_ISR_DMA+0x24e>
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a27      	ldr	r2, [pc, #156]	@ (8006d54 <I2C_Slave_ISR_DMA+0x27c>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d035      	beq.n	8006d26 <I2C_Slave_ISR_DMA+0x24e>
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a25      	ldr	r2, [pc, #148]	@ (8006d58 <I2C_Slave_ISR_DMA+0x280>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d02f      	beq.n	8006d26 <I2C_Slave_ISR_DMA+0x24e>
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a23      	ldr	r2, [pc, #140]	@ (8006d5c <I2C_Slave_ISR_DMA+0x284>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d029      	beq.n	8006d26 <I2C_Slave_ISR_DMA+0x24e>
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a21      	ldr	r2, [pc, #132]	@ (8006d60 <I2C_Slave_ISR_DMA+0x288>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d023      	beq.n	8006d26 <I2C_Slave_ISR_DMA+0x24e>
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a1f      	ldr	r2, [pc, #124]	@ (8006d64 <I2C_Slave_ISR_DMA+0x28c>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d01d      	beq.n	8006d26 <I2C_Slave_ISR_DMA+0x24e>
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a1d      	ldr	r2, [pc, #116]	@ (8006d68 <I2C_Slave_ISR_DMA+0x290>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d017      	beq.n	8006d26 <I2C_Slave_ISR_DMA+0x24e>
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a1b      	ldr	r2, [pc, #108]	@ (8006d6c <I2C_Slave_ISR_DMA+0x294>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d011      	beq.n	8006d26 <I2C_Slave_ISR_DMA+0x24e>
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a19      	ldr	r2, [pc, #100]	@ (8006d70 <I2C_Slave_ISR_DMA+0x298>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d00b      	beq.n	8006d26 <I2C_Slave_ISR_DMA+0x24e>
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a17      	ldr	r2, [pc, #92]	@ (8006d74 <I2C_Slave_ISR_DMA+0x29c>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d005      	beq.n	8006d26 <I2C_Slave_ISR_DMA+0x24e>
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a15      	ldr	r2, [pc, #84]	@ (8006d78 <I2C_Slave_ISR_DMA+0x2a0>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d12a      	bne.n	8006d7c <I2C_Slave_ISR_DMA+0x2a4>
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	bf0c      	ite	eq
 8006d32:	2301      	moveq	r3, #1
 8006d34:	2300      	movne	r3, #0
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	e029      	b.n	8006d8e <I2C_Slave_ISR_DMA+0x2b6>
 8006d3a:	bf00      	nop
 8006d3c:	40020010 	.word	0x40020010
 8006d40:	40020028 	.word	0x40020028
 8006d44:	40020040 	.word	0x40020040
 8006d48:	40020058 	.word	0x40020058
 8006d4c:	40020070 	.word	0x40020070
 8006d50:	40020088 	.word	0x40020088
 8006d54:	400200a0 	.word	0x400200a0
 8006d58:	400200b8 	.word	0x400200b8
 8006d5c:	40020410 	.word	0x40020410
 8006d60:	40020428 	.word	0x40020428
 8006d64:	40020440 	.word	0x40020440
 8006d68:	40020458 	.word	0x40020458
 8006d6c:	40020470 	.word	0x40020470
 8006d70:	40020488 	.word	0x40020488
 8006d74:	400204a0 	.word	0x400204a0
 8006d78:	400204b8 	.word	0x400204b8
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	bf0c      	ite	eq
 8006d88:	2301      	moveq	r3, #1
 8006d8a:	2300      	movne	r3, #0
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d001      	beq.n	8006d96 <I2C_Slave_ISR_DMA+0x2be>
          {
            treatdmanack = 1U;
 8006d92:	2301      	movs	r3, #1
 8006d94:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d128      	bne.n	8006dee <I2C_Slave_ISR_DMA+0x316>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	2b28      	cmp	r3, #40	@ 0x28
 8006da6:	d108      	bne.n	8006dba <I2C_Slave_ISR_DMA+0x2e2>
 8006da8:	69bb      	ldr	r3, [r7, #24]
 8006daa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006dae:	d104      	bne.n	8006dba <I2C_Slave_ISR_DMA+0x2e2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8006db0:	68b9      	ldr	r1, [r7, #8]
 8006db2:	68f8      	ldr	r0, [r7, #12]
 8006db4:	f000 fca4 	bl	8007700 <I2C_ITListenCplt>
 8006db8:	e048      	b.n	8006e4c <I2C_Slave_ISR_DMA+0x374>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	2b29      	cmp	r3, #41	@ 0x29
 8006dc4:	d10e      	bne.n	8006de4 <I2C_Slave_ISR_DMA+0x30c>
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006dcc:	d00a      	beq.n	8006de4 <I2C_Slave_ISR_DMA+0x30c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	2210      	movs	r2, #16
 8006dd4:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8006dd6:	68f8      	ldr	r0, [r7, #12]
 8006dd8:	f000 fdfd 	bl	80079d6 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8006ddc:	68f8      	ldr	r0, [r7, #12]
 8006dde:	f000 f916 	bl	800700e <I2C_ITSlaveSeqCplt>
 8006de2:	e033      	b.n	8006e4c <I2C_Slave_ISR_DMA+0x374>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	2210      	movs	r2, #16
 8006dea:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8006dec:	e034      	b.n	8006e58 <I2C_Slave_ISR_DMA+0x380>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	2210      	movs	r2, #16
 8006df4:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dfa:	f043 0204 	orr.w	r2, r3, #4
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e08:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006e0a:	69bb      	ldr	r3, [r7, #24]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d003      	beq.n	8006e18 <I2C_Slave_ISR_DMA+0x340>
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e16:	d11f      	bne.n	8006e58 <I2C_Slave_ISR_DMA+0x380>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006e18:	7dfb      	ldrb	r3, [r7, #23]
 8006e1a:	2b21      	cmp	r3, #33	@ 0x21
 8006e1c:	d002      	beq.n	8006e24 <I2C_Slave_ISR_DMA+0x34c>
 8006e1e:	7dfb      	ldrb	r3, [r7, #23]
 8006e20:	2b29      	cmp	r3, #41	@ 0x29
 8006e22:	d103      	bne.n	8006e2c <I2C_Slave_ISR_DMA+0x354>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2221      	movs	r2, #33	@ 0x21
 8006e28:	631a      	str	r2, [r3, #48]	@ 0x30
 8006e2a:	e008      	b.n	8006e3e <I2C_Slave_ISR_DMA+0x366>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006e2c:	7dfb      	ldrb	r3, [r7, #23]
 8006e2e:	2b22      	cmp	r3, #34	@ 0x22
 8006e30:	d002      	beq.n	8006e38 <I2C_Slave_ISR_DMA+0x360>
 8006e32:	7dfb      	ldrb	r3, [r7, #23]
 8006e34:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e36:	d102      	bne.n	8006e3e <I2C_Slave_ISR_DMA+0x366>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2222      	movs	r2, #34	@ 0x22
 8006e3c:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e42:	4619      	mov	r1, r3
 8006e44:	68f8      	ldr	r0, [r7, #12]
 8006e46:	f000 fcaf 	bl	80077a8 <I2C_ITError>
      if (treatdmanack == 1U)
 8006e4a:	e005      	b.n	8006e58 <I2C_Slave_ISR_DMA+0x380>
 8006e4c:	e004      	b.n	8006e58 <I2C_Slave_ISR_DMA+0x380>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	2210      	movs	r2, #16
 8006e54:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006e56:	e00f      	b.n	8006e78 <I2C_Slave_ISR_DMA+0x3a0>
      if (treatdmanack == 1U)
 8006e58:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006e5a:	e00d      	b.n	8006e78 <I2C_Slave_ISR_DMA+0x3a0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	f003 0308 	and.w	r3, r3, #8
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d008      	beq.n	8006e78 <I2C_Slave_ISR_DMA+0x3a0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d003      	beq.n	8006e78 <I2C_Slave_ISR_DMA+0x3a0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8006e70:	68b9      	ldr	r1, [r7, #8]
 8006e72:	68f8      	ldr	r0, [r7, #12]
 8006e74:	f000 f80a 	bl	8006e8c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006e80:	2300      	movs	r3, #0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3720      	adds	r7, #32
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
 8006e8a:	bf00      	nop

08006e8c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006ea2:	2b28      	cmp	r3, #40	@ 0x28
 8006ea4:	d16a      	bne.n	8006f7c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	699b      	ldr	r3, [r3, #24]
 8006eac:	0c1b      	lsrs	r3, r3, #16
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	f003 0301 	and.w	r3, r3, #1
 8006eb4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	699b      	ldr	r3, [r3, #24]
 8006ebc:	0c1b      	lsrs	r3, r3, #16
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006ec4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ed2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006ee0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	d138      	bne.n	8006f5c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006eea:	897b      	ldrh	r3, [r7, #10]
 8006eec:	09db      	lsrs	r3, r3, #7
 8006eee:	b29a      	uxth	r2, r3
 8006ef0:	89bb      	ldrh	r3, [r7, #12]
 8006ef2:	4053      	eors	r3, r2
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	f003 0306 	and.w	r3, r3, #6
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d11c      	bne.n	8006f38 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006efe:	897b      	ldrh	r3, [r7, #10]
 8006f00:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f06:	1c5a      	adds	r2, r3, #1
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f10:	2b02      	cmp	r3, #2
 8006f12:	d13b      	bne.n	8006f8c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	2208      	movs	r2, #8
 8006f20:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006f2a:	89ba      	ldrh	r2, [r7, #12]
 8006f2c:	7bfb      	ldrb	r3, [r7, #15]
 8006f2e:	4619      	mov	r1, r3
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f7ff f952 	bl	80061da <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006f36:	e029      	b.n	8006f8c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006f38:	893b      	ldrh	r3, [r7, #8]
 8006f3a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006f3c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f001 f8ff 	bl	8008144 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006f4e:	89ba      	ldrh	r2, [r7, #12]
 8006f50:	7bfb      	ldrb	r3, [r7, #15]
 8006f52:	4619      	mov	r1, r3
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f7ff f940 	bl	80061da <HAL_I2C_AddrCallback>
}
 8006f5a:	e017      	b.n	8006f8c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006f5c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f001 f8ef 	bl	8008144 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006f6e:	89ba      	ldrh	r2, [r7, #12]
 8006f70:	7bfb      	ldrb	r3, [r7, #15]
 8006f72:	4619      	mov	r1, r3
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f7ff f930 	bl	80061da <HAL_I2C_AddrCallback>
}
 8006f7a:	e007      	b.n	8006f8c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2208      	movs	r2, #8
 8006f82:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8006f8c:	bf00      	nop
 8006f8e:	3710      	adds	r7, #16
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	2b21      	cmp	r3, #33	@ 0x21
 8006fae:	d115      	bne.n	8006fdc <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2220      	movs	r2, #32
 8006fb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2211      	movs	r2, #17
 8006fbc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006fc4:	2101      	movs	r1, #1
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f001 f8bc 	bl	8008144 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f7ff f8d8 	bl	800618a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006fda:	e014      	b.n	8007006 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2220      	movs	r2, #32
 8006fe0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2212      	movs	r2, #18
 8006fe8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006ff0:	2102      	movs	r1, #2
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f001 f8a6 	bl	8008144 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f7ff f8cc 	bl	800619e <HAL_I2C_MasterRxCpltCallback>
}
 8007006:	bf00      	nop
 8007008:	3708      	adds	r7, #8
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}

0800700e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800700e:	b580      	push	{r7, lr}
 8007010:	b084      	sub	sp, #16
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800702c:	2b00      	cmp	r3, #0
 800702e:	d008      	beq.n	8007042 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800703e:	601a      	str	r2, [r3, #0]
 8007040:	e00c      	b.n	800705c <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007048:	2b00      	cmp	r3, #0
 800704a:	d007      	beq.n	800705c <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800705a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007062:	b2db      	uxtb	r3, r3
 8007064:	2b29      	cmp	r3, #41	@ 0x29
 8007066:	d112      	bne.n	800708e <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2228      	movs	r2, #40	@ 0x28
 800706c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2221      	movs	r2, #33	@ 0x21
 8007074:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007076:	2101      	movs	r1, #1
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f001 f863 	bl	8008144 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f7ff f893 	bl	80061b2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800708c:	e017      	b.n	80070be <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007094:	b2db      	uxtb	r3, r3
 8007096:	2b2a      	cmp	r3, #42	@ 0x2a
 8007098:	d111      	bne.n	80070be <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2228      	movs	r2, #40	@ 0x28
 800709e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2222      	movs	r2, #34	@ 0x22
 80070a6:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80070a8:	2102      	movs	r1, #2
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f001 f84a 	bl	8008144 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f7ff f884 	bl	80061c6 <HAL_I2C_SlaveRxCpltCallback>
}
 80070be:	bf00      	nop
 80070c0:	3710      	adds	r7, #16
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
	...

080070c8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b086      	sub	sp, #24
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2220      	movs	r2, #32
 80070dc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	2b21      	cmp	r3, #33	@ 0x21
 80070e8:	d107      	bne.n	80070fa <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80070ea:	2101      	movs	r1, #1
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f001 f829 	bl	8008144 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2211      	movs	r2, #17
 80070f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80070f8:	e00c      	b.n	8007114 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007100:	b2db      	uxtb	r3, r3
 8007102:	2b22      	cmp	r3, #34	@ 0x22
 8007104:	d106      	bne.n	8007114 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007106:	2102      	movs	r1, #2
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f001 f81b 	bl	8008144 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2212      	movs	r2, #18
 8007112:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	6859      	ldr	r1, [r3, #4]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	4b4c      	ldr	r3, [pc, #304]	@ (8007250 <I2C_ITMasterCplt+0x188>)
 8007120:	400b      	ands	r3, r1
 8007122:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4a49      	ldr	r2, [pc, #292]	@ (8007254 <I2C_ITMasterCplt+0x18c>)
 800712e:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	f003 0310 	and.w	r3, r3, #16
 8007136:	2b00      	cmp	r3, #0
 8007138:	d009      	beq.n	800714e <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	2210      	movs	r2, #16
 8007140:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007146:	f043 0204 	orr.w	r2, r3, #4
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007154:	b2db      	uxtb	r3, r3
 8007156:	2b60      	cmp	r3, #96	@ 0x60
 8007158:	d10a      	bne.n	8007170 <I2C_ITMasterCplt+0xa8>
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	f003 0304 	and.w	r3, r3, #4
 8007160:	2b00      	cmp	r3, #0
 8007162:	d005      	beq.n	8007170 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800716a:	b2db      	uxtb	r3, r3
 800716c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800716e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 fc30 	bl	80079d6 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800717a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007182:	b2db      	uxtb	r3, r3
 8007184:	2b60      	cmp	r3, #96	@ 0x60
 8007186:	d002      	beq.n	800718e <I2C_ITMasterCplt+0xc6>
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d006      	beq.n	800719c <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007192:	4619      	mov	r1, r3
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 fb07 	bl	80077a8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800719a:	e054      	b.n	8007246 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	2b21      	cmp	r3, #33	@ 0x21
 80071a6:	d124      	bne.n	80071f2 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2220      	movs	r2, #32
 80071ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	2b40      	cmp	r3, #64	@ 0x40
 80071c0:	d10b      	bne.n	80071da <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f7ff f819 	bl	800620a <HAL_I2C_MemTxCpltCallback>
}
 80071d8:	e035      	b.n	8007246 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f7fe ffcd 	bl	800618a <HAL_I2C_MasterTxCpltCallback>
}
 80071f0:	e029      	b.n	8007246 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	2b22      	cmp	r3, #34	@ 0x22
 80071fc:	d123      	bne.n	8007246 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2220      	movs	r2, #32
 8007202:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007212:	b2db      	uxtb	r3, r3
 8007214:	2b40      	cmp	r3, #64	@ 0x40
 8007216:	d10b      	bne.n	8007230 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f7fe fff8 	bl	800621e <HAL_I2C_MemRxCpltCallback>
}
 800722e:	e00a      	b.n	8007246 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f7fe ffac 	bl	800619e <HAL_I2C_MasterRxCpltCallback>
}
 8007246:	bf00      	nop
 8007248:	3718      	adds	r7, #24
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	fe00e800 	.word	0xfe00e800
 8007254:	ffff0000 	.word	0xffff0000

08007258 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b086      	sub	sp, #24
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007272:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800727a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2220      	movs	r2, #32
 8007282:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007284:	7afb      	ldrb	r3, [r7, #11]
 8007286:	2b21      	cmp	r3, #33	@ 0x21
 8007288:	d002      	beq.n	8007290 <I2C_ITSlaveCplt+0x38>
 800728a:	7afb      	ldrb	r3, [r7, #11]
 800728c:	2b29      	cmp	r3, #41	@ 0x29
 800728e:	d108      	bne.n	80072a2 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8007290:	f248 0101 	movw	r1, #32769	@ 0x8001
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f000 ff55 	bl	8008144 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2221      	movs	r2, #33	@ 0x21
 800729e:	631a      	str	r2, [r3, #48]	@ 0x30
 80072a0:	e019      	b.n	80072d6 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80072a2:	7afb      	ldrb	r3, [r7, #11]
 80072a4:	2b22      	cmp	r3, #34	@ 0x22
 80072a6:	d002      	beq.n	80072ae <I2C_ITSlaveCplt+0x56>
 80072a8:	7afb      	ldrb	r3, [r7, #11]
 80072aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80072ac:	d108      	bne.n	80072c0 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80072ae:	f248 0102 	movw	r1, #32770	@ 0x8002
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 ff46 	bl	8008144 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2222      	movs	r2, #34	@ 0x22
 80072bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80072be:	e00a      	b.n	80072d6 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80072c0:	7afb      	ldrb	r3, [r7, #11]
 80072c2:	2b28      	cmp	r3, #40	@ 0x28
 80072c4:	d107      	bne.n	80072d6 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80072c6:	f248 0103 	movw	r1, #32771	@ 0x8003
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 ff3a 	bl	8008144 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	685a      	ldr	r2, [r3, #4]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80072e4:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	6859      	ldr	r1, [r3, #4]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	4b7f      	ldr	r3, [pc, #508]	@ (80074f0 <I2C_ITSlaveCplt+0x298>)
 80072f2:	400b      	ands	r3, r1
 80072f4:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 fb6d 	bl	80079d6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007302:	2b00      	cmp	r3, #0
 8007304:	d07a      	beq.n	80073fc <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007314:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800731a:	2b00      	cmp	r3, #0
 800731c:	f000 8111 	beq.w	8007542 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a73      	ldr	r2, [pc, #460]	@ (80074f4 <I2C_ITSlaveCplt+0x29c>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d059      	beq.n	80073e0 <I2C_ITSlaveCplt+0x188>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a71      	ldr	r2, [pc, #452]	@ (80074f8 <I2C_ITSlaveCplt+0x2a0>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d053      	beq.n	80073e0 <I2C_ITSlaveCplt+0x188>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a6f      	ldr	r2, [pc, #444]	@ (80074fc <I2C_ITSlaveCplt+0x2a4>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d04d      	beq.n	80073e0 <I2C_ITSlaveCplt+0x188>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a6d      	ldr	r2, [pc, #436]	@ (8007500 <I2C_ITSlaveCplt+0x2a8>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d047      	beq.n	80073e0 <I2C_ITSlaveCplt+0x188>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a6b      	ldr	r2, [pc, #428]	@ (8007504 <I2C_ITSlaveCplt+0x2ac>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d041      	beq.n	80073e0 <I2C_ITSlaveCplt+0x188>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a69      	ldr	r2, [pc, #420]	@ (8007508 <I2C_ITSlaveCplt+0x2b0>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d03b      	beq.n	80073e0 <I2C_ITSlaveCplt+0x188>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a67      	ldr	r2, [pc, #412]	@ (800750c <I2C_ITSlaveCplt+0x2b4>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d035      	beq.n	80073e0 <I2C_ITSlaveCplt+0x188>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a65      	ldr	r2, [pc, #404]	@ (8007510 <I2C_ITSlaveCplt+0x2b8>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d02f      	beq.n	80073e0 <I2C_ITSlaveCplt+0x188>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a63      	ldr	r2, [pc, #396]	@ (8007514 <I2C_ITSlaveCplt+0x2bc>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d029      	beq.n	80073e0 <I2C_ITSlaveCplt+0x188>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a61      	ldr	r2, [pc, #388]	@ (8007518 <I2C_ITSlaveCplt+0x2c0>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d023      	beq.n	80073e0 <I2C_ITSlaveCplt+0x188>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a5f      	ldr	r2, [pc, #380]	@ (800751c <I2C_ITSlaveCplt+0x2c4>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d01d      	beq.n	80073e0 <I2C_ITSlaveCplt+0x188>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a5d      	ldr	r2, [pc, #372]	@ (8007520 <I2C_ITSlaveCplt+0x2c8>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d017      	beq.n	80073e0 <I2C_ITSlaveCplt+0x188>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a5b      	ldr	r2, [pc, #364]	@ (8007524 <I2C_ITSlaveCplt+0x2cc>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d011      	beq.n	80073e0 <I2C_ITSlaveCplt+0x188>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a59      	ldr	r2, [pc, #356]	@ (8007528 <I2C_ITSlaveCplt+0x2d0>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d00b      	beq.n	80073e0 <I2C_ITSlaveCplt+0x188>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a57      	ldr	r2, [pc, #348]	@ (800752c <I2C_ITSlaveCplt+0x2d4>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d005      	beq.n	80073e0 <I2C_ITSlaveCplt+0x188>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a55      	ldr	r2, [pc, #340]	@ (8007530 <I2C_ITSlaveCplt+0x2d8>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d105      	bne.n	80073ec <I2C_ITSlaveCplt+0x194>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	e004      	b.n	80073f6 <I2C_ITSlaveCplt+0x19e>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	687a      	ldr	r2, [r7, #4]
 80073f8:	8553      	strh	r3, [r2, #42]	@ 0x2a
 80073fa:	e0a2      	b.n	8007542 <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007402:	2b00      	cmp	r3, #0
 8007404:	f000 809d 	beq.w	8007542 <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007416:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800741c:	2b00      	cmp	r3, #0
 800741e:	f000 8090 	beq.w	8007542 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a32      	ldr	r2, [pc, #200]	@ (80074f4 <I2C_ITSlaveCplt+0x29c>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d059      	beq.n	80074e2 <I2C_ITSlaveCplt+0x28a>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a30      	ldr	r2, [pc, #192]	@ (80074f8 <I2C_ITSlaveCplt+0x2a0>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d053      	beq.n	80074e2 <I2C_ITSlaveCplt+0x28a>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a2e      	ldr	r2, [pc, #184]	@ (80074fc <I2C_ITSlaveCplt+0x2a4>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d04d      	beq.n	80074e2 <I2C_ITSlaveCplt+0x28a>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a2c      	ldr	r2, [pc, #176]	@ (8007500 <I2C_ITSlaveCplt+0x2a8>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d047      	beq.n	80074e2 <I2C_ITSlaveCplt+0x28a>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a2a      	ldr	r2, [pc, #168]	@ (8007504 <I2C_ITSlaveCplt+0x2ac>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d041      	beq.n	80074e2 <I2C_ITSlaveCplt+0x28a>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a28      	ldr	r2, [pc, #160]	@ (8007508 <I2C_ITSlaveCplt+0x2b0>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d03b      	beq.n	80074e2 <I2C_ITSlaveCplt+0x28a>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a26      	ldr	r2, [pc, #152]	@ (800750c <I2C_ITSlaveCplt+0x2b4>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d035      	beq.n	80074e2 <I2C_ITSlaveCplt+0x28a>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a24      	ldr	r2, [pc, #144]	@ (8007510 <I2C_ITSlaveCplt+0x2b8>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d02f      	beq.n	80074e2 <I2C_ITSlaveCplt+0x28a>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a22      	ldr	r2, [pc, #136]	@ (8007514 <I2C_ITSlaveCplt+0x2bc>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d029      	beq.n	80074e2 <I2C_ITSlaveCplt+0x28a>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a20      	ldr	r2, [pc, #128]	@ (8007518 <I2C_ITSlaveCplt+0x2c0>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d023      	beq.n	80074e2 <I2C_ITSlaveCplt+0x28a>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a1e      	ldr	r2, [pc, #120]	@ (800751c <I2C_ITSlaveCplt+0x2c4>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d01d      	beq.n	80074e2 <I2C_ITSlaveCplt+0x28a>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a1c      	ldr	r2, [pc, #112]	@ (8007520 <I2C_ITSlaveCplt+0x2c8>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d017      	beq.n	80074e2 <I2C_ITSlaveCplt+0x28a>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a1a      	ldr	r2, [pc, #104]	@ (8007524 <I2C_ITSlaveCplt+0x2cc>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d011      	beq.n	80074e2 <I2C_ITSlaveCplt+0x28a>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a18      	ldr	r2, [pc, #96]	@ (8007528 <I2C_ITSlaveCplt+0x2d0>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d00b      	beq.n	80074e2 <I2C_ITSlaveCplt+0x28a>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a16      	ldr	r2, [pc, #88]	@ (800752c <I2C_ITSlaveCplt+0x2d4>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d005      	beq.n	80074e2 <I2C_ITSlaveCplt+0x28a>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a14      	ldr	r2, [pc, #80]	@ (8007530 <I2C_ITSlaveCplt+0x2d8>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d128      	bne.n	8007534 <I2C_ITSlaveCplt+0x2dc>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	e027      	b.n	800753e <I2C_ITSlaveCplt+0x2e6>
 80074ee:	bf00      	nop
 80074f0:	fe00e800 	.word	0xfe00e800
 80074f4:	40020010 	.word	0x40020010
 80074f8:	40020028 	.word	0x40020028
 80074fc:	40020040 	.word	0x40020040
 8007500:	40020058 	.word	0x40020058
 8007504:	40020070 	.word	0x40020070
 8007508:	40020088 	.word	0x40020088
 800750c:	400200a0 	.word	0x400200a0
 8007510:	400200b8 	.word	0x400200b8
 8007514:	40020410 	.word	0x40020410
 8007518:	40020428 	.word	0x40020428
 800751c:	40020440 	.word	0x40020440
 8007520:	40020458 	.word	0x40020458
 8007524:	40020470 	.word	0x40020470
 8007528:	40020488 	.word	0x40020488
 800752c:	400204a0 	.word	0x400204a0
 8007530:	400204b8 	.word	0x400204b8
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	b29b      	uxth	r3, r3
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	f003 0304 	and.w	r3, r3, #4
 8007548:	2b00      	cmp	r3, #0
 800754a:	d020      	beq.n	800758e <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	f023 0304 	bic.w	r3, r3, #4
 8007552:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800755e:	b2d2      	uxtb	r2, r2
 8007560:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007566:	1c5a      	adds	r2, r3, #1
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007570:	2b00      	cmp	r3, #0
 8007572:	d00c      	beq.n	800758e <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007578:	3b01      	subs	r3, #1
 800757a:	b29a      	uxth	r2, r3
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007584:	b29b      	uxth	r3, r3
 8007586:	3b01      	subs	r3, #1
 8007588:	b29a      	uxth	r2, r3
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007592:	b29b      	uxth	r3, r3
 8007594:	2b00      	cmp	r3, #0
 8007596:	d005      	beq.n	80075a4 <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800759c:	f043 0204 	orr.w	r2, r3, #4
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	f003 0310 	and.w	r3, r3, #16
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d049      	beq.n	8007642 <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d044      	beq.n	8007642 <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075bc:	b29b      	uxth	r3, r3
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d128      	bne.n	8007614 <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	2b28      	cmp	r3, #40	@ 0x28
 80075cc:	d108      	bne.n	80075e0 <I2C_ITSlaveCplt+0x388>
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80075d4:	d104      	bne.n	80075e0 <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80075d6:	6979      	ldr	r1, [r7, #20]
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 f891 	bl	8007700 <I2C_ITListenCplt>
 80075de:	e030      	b.n	8007642 <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	2b29      	cmp	r3, #41	@ 0x29
 80075ea:	d10e      	bne.n	800760a <I2C_ITSlaveCplt+0x3b2>
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80075f2:	d00a      	beq.n	800760a <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	2210      	movs	r2, #16
 80075fa:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 f9ea 	bl	80079d6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f7ff fd03 	bl	800700e <I2C_ITSlaveSeqCplt>
 8007608:	e01b      	b.n	8007642 <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	2210      	movs	r2, #16
 8007610:	61da      	str	r2, [r3, #28]
 8007612:	e016      	b.n	8007642 <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	2210      	movs	r2, #16
 800761a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007620:	f043 0204 	orr.w	r2, r3, #4
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d003      	beq.n	8007636 <I2C_ITSlaveCplt+0x3de>
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007634:	d105      	bne.n	8007642 <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800763a:	4619      	mov	r1, r3
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 f8b3 	bl	80077a8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007654:	2b00      	cmp	r3, #0
 8007656:	d010      	beq.n	800767a <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800765c:	4619      	mov	r1, r3
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 f8a2 	bl	80077a8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800766a:	b2db      	uxtb	r3, r3
 800766c:	2b28      	cmp	r3, #40	@ 0x28
 800766e:	d141      	bne.n	80076f4 <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8007670:	6979      	ldr	r1, [r7, #20]
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 f844 	bl	8007700 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007678:	e03c      	b.n	80076f4 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800767e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007682:	d014      	beq.n	80076ae <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f7ff fcc2 	bl	800700e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	4a1b      	ldr	r2, [pc, #108]	@ (80076fc <I2C_ITSlaveCplt+0x4a4>)
 800768e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2220      	movs	r2, #32
 8007694:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f7fe fda5 	bl	80061f6 <HAL_I2C_ListenCpltCallback>
}
 80076ac:	e022      	b.n	80076f4 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	2b22      	cmp	r3, #34	@ 0x22
 80076b8:	d10e      	bne.n	80076d8 <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2220      	movs	r2, #32
 80076be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f7fe fd78 	bl	80061c6 <HAL_I2C_SlaveRxCpltCallback>
}
 80076d6:	e00d      	b.n	80076f4 <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2220      	movs	r2, #32
 80076dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2200      	movs	r2, #0
 80076e4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f7fe fd5f 	bl	80061b2 <HAL_I2C_SlaveTxCpltCallback>
}
 80076f4:	bf00      	nop
 80076f6:	3718      	adds	r7, #24
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	ffff0000 	.word	0xffff0000

08007700 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b082      	sub	sp, #8
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	4a25      	ldr	r2, [pc, #148]	@ (80077a4 <I2C_ITListenCplt+0xa4>)
 800770e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2220      	movs	r2, #32
 800771a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	f003 0304 	and.w	r3, r3, #4
 8007732:	2b00      	cmp	r3, #0
 8007734:	d022      	beq.n	800777c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007740:	b2d2      	uxtb	r2, r2
 8007742:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007748:	1c5a      	adds	r2, r3, #1
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007752:	2b00      	cmp	r3, #0
 8007754:	d012      	beq.n	800777c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800775a:	3b01      	subs	r3, #1
 800775c:	b29a      	uxth	r2, r3
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007766:	b29b      	uxth	r3, r3
 8007768:	3b01      	subs	r3, #1
 800776a:	b29a      	uxth	r2, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007774:	f043 0204 	orr.w	r2, r3, #4
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800777c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 fcdf 	bl	8008144 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	2210      	movs	r2, #16
 800778c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f7fe fd2d 	bl	80061f6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800779c:	bf00      	nop
 800779e:	3708      	adds	r7, #8
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}
 80077a4:	ffff0000 	.word	0xffff0000

080077a8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077b8:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2200      	movs	r2, #0
 80077be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	4a6d      	ldr	r2, [pc, #436]	@ (800797c <I2C_ITError+0x1d4>)
 80077c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	431a      	orrs	r2, r3
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80077da:	7bfb      	ldrb	r3, [r7, #15]
 80077dc:	2b28      	cmp	r3, #40	@ 0x28
 80077de:	d005      	beq.n	80077ec <I2C_ITError+0x44>
 80077e0:	7bfb      	ldrb	r3, [r7, #15]
 80077e2:	2b29      	cmp	r3, #41	@ 0x29
 80077e4:	d002      	beq.n	80077ec <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80077e6:	7bfb      	ldrb	r3, [r7, #15]
 80077e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80077ea:	d10b      	bne.n	8007804 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80077ec:	2103      	movs	r1, #3
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 fca8 	bl	8008144 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2228      	movs	r2, #40	@ 0x28
 80077f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	4a60      	ldr	r2, [pc, #384]	@ (8007980 <I2C_ITError+0x1d8>)
 8007800:	635a      	str	r2, [r3, #52]	@ 0x34
 8007802:	e030      	b.n	8007866 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007804:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 fc9b 	bl	8008144 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 f8e1 	bl	80079d6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800781a:	b2db      	uxtb	r3, r3
 800781c:	2b60      	cmp	r3, #96	@ 0x60
 800781e:	d01f      	beq.n	8007860 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2220      	movs	r2, #32
 8007824:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	699b      	ldr	r3, [r3, #24]
 800782e:	f003 0320 	and.w	r3, r3, #32
 8007832:	2b20      	cmp	r3, #32
 8007834:	d114      	bne.n	8007860 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	699b      	ldr	r3, [r3, #24]
 800783c:	f003 0310 	and.w	r3, r3, #16
 8007840:	2b10      	cmp	r3, #16
 8007842:	d109      	bne.n	8007858 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	2210      	movs	r2, #16
 800784a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007850:	f043 0204 	orr.w	r2, r3, #4
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	2220      	movs	r2, #32
 800785e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2200      	movs	r2, #0
 8007864:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800786a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007870:	2b00      	cmp	r3, #0
 8007872:	d039      	beq.n	80078e8 <I2C_ITError+0x140>
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	2b11      	cmp	r3, #17
 8007878:	d002      	beq.n	8007880 <I2C_ITError+0xd8>
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	2b21      	cmp	r3, #33	@ 0x21
 800787e:	d133      	bne.n	80078e8 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800788a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800788e:	d107      	bne.n	80078a0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800789e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078a4:	4618      	mov	r0, r3
 80078a6:	f7fd fa45 	bl	8004d34 <HAL_DMA_GetState>
 80078aa:	4603      	mov	r3, r0
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d017      	beq.n	80078e0 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078b4:	4a33      	ldr	r2, [pc, #204]	@ (8007984 <I2C_ITError+0x1dc>)
 80078b6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078c4:	4618      	mov	r0, r3
 80078c6:	f7fc f88d 	bl	80039e4 <HAL_DMA_Abort_IT>
 80078ca:	4603      	mov	r3, r0
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d04d      	beq.n	800796c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80078da:	4610      	mov	r0, r2
 80078dc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80078de:	e045      	b.n	800796c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 f851 	bl	8007988 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80078e6:	e041      	b.n	800796c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d039      	beq.n	8007964 <I2C_ITError+0x1bc>
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	2b12      	cmp	r3, #18
 80078f4:	d002      	beq.n	80078fc <I2C_ITError+0x154>
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	2b22      	cmp	r3, #34	@ 0x22
 80078fa:	d133      	bne.n	8007964 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007906:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800790a:	d107      	bne.n	800791c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800791a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007920:	4618      	mov	r0, r3
 8007922:	f7fd fa07 	bl	8004d34 <HAL_DMA_GetState>
 8007926:	4603      	mov	r3, r0
 8007928:	2b01      	cmp	r3, #1
 800792a:	d017      	beq.n	800795c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007930:	4a14      	ldr	r2, [pc, #80]	@ (8007984 <I2C_ITError+0x1dc>)
 8007932:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007940:	4618      	mov	r0, r3
 8007942:	f7fc f84f 	bl	80039e4 <HAL_DMA_Abort_IT>
 8007946:	4603      	mov	r3, r0
 8007948:	2b00      	cmp	r3, #0
 800794a:	d011      	beq.n	8007970 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007950:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007956:	4610      	mov	r0, r2
 8007958:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800795a:	e009      	b.n	8007970 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 f813 	bl	8007988 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007962:	e005      	b.n	8007970 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 f80f 	bl	8007988 <I2C_TreatErrorCallback>
  }
}
 800796a:	e002      	b.n	8007972 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800796c:	bf00      	nop
 800796e:	e000      	b.n	8007972 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007970:	bf00      	nop
}
 8007972:	bf00      	nop
 8007974:	3710      	adds	r7, #16
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	ffff0000 	.word	0xffff0000
 8007980:	080064c5 	.word	0x080064c5
 8007984:	08007d29 	.word	0x08007d29

08007988 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b082      	sub	sp, #8
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007996:	b2db      	uxtb	r3, r3
 8007998:	2b60      	cmp	r3, #96	@ 0x60
 800799a:	d10e      	bne.n	80079ba <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2220      	movs	r2, #32
 80079a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f7fe fc47 	bl	8006246 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80079b8:	e009      	b.n	80079ce <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2200      	movs	r2, #0
 80079c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f7fe fc32 	bl	8006232 <HAL_I2C_ErrorCallback>
}
 80079ce:	bf00      	nop
 80079d0:	3708      	adds	r7, #8
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}

080079d6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80079d6:	b480      	push	{r7}
 80079d8:	b083      	sub	sp, #12
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	699b      	ldr	r3, [r3, #24]
 80079e4:	f003 0302 	and.w	r3, r3, #2
 80079e8:	2b02      	cmp	r3, #2
 80079ea:	d103      	bne.n	80079f4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	2200      	movs	r2, #0
 80079f2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	699b      	ldr	r3, [r3, #24]
 80079fa:	f003 0301 	and.w	r3, r3, #1
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d007      	beq.n	8007a12 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	699a      	ldr	r2, [r3, #24]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f042 0201 	orr.w	r2, r2, #1
 8007a10:	619a      	str	r2, [r3, #24]
  }
}
 8007a12:	bf00      	nop
 8007a14:	370c      	adds	r7, #12
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr

08007a1e <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007a1e:	b580      	push	{r7, lr}
 8007a20:	b084      	sub	sp, #16
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a2a:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007a3a:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d104      	bne.n	8007a50 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007a46:	2120      	movs	r1, #32
 8007a48:	68f8      	ldr	r0, [r7, #12]
 8007a4a:	f000 faf7 	bl	800803c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8007a4e:	e02d      	b.n	8007aac <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a54:	68fa      	ldr	r2, [r7, #12]
 8007a56:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8007a58:	441a      	add	r2, r3
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	2bff      	cmp	r3, #255	@ 0xff
 8007a66:	d903      	bls.n	8007a70 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	22ff      	movs	r2, #255	@ 0xff
 8007a6c:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007a6e:	e004      	b.n	8007a7a <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a74:	b29a      	uxth	r2, r3
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	3324      	adds	r3, #36	@ 0x24
 8007a84:	4619      	mov	r1, r3
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a8a:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8007a90:	f7fb fd3e 	bl	8003510 <HAL_DMA_Start_IT>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d004      	beq.n	8007aa4 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007a9a:	2110      	movs	r1, #16
 8007a9c:	68f8      	ldr	r0, [r7, #12]
 8007a9e:	f7ff fe83 	bl	80077a8 <I2C_ITError>
}
 8007aa2:	e003      	b.n	8007aac <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8007aa4:	2140      	movs	r1, #64	@ 0x40
 8007aa6:	68f8      	ldr	r0, [r7, #12]
 8007aa8:	f000 fac8 	bl	800803c <I2C_Enable_IRQ>
}
 8007aac:	bf00      	nop
 8007aae:	3710      	adds	r7, #16
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8007abc:	2300      	movs	r3, #0
 8007abe:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ac4:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d076      	beq.n	8007bbc <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a71      	ldr	r2, [pc, #452]	@ (8007c9c <I2C_DMAError+0x1e8>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d059      	beq.n	8007b8e <I2C_DMAError+0xda>
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a6f      	ldr	r2, [pc, #444]	@ (8007ca0 <I2C_DMAError+0x1ec>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d053      	beq.n	8007b8e <I2C_DMAError+0xda>
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a6d      	ldr	r2, [pc, #436]	@ (8007ca4 <I2C_DMAError+0x1f0>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d04d      	beq.n	8007b8e <I2C_DMAError+0xda>
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a6b      	ldr	r2, [pc, #428]	@ (8007ca8 <I2C_DMAError+0x1f4>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d047      	beq.n	8007b8e <I2C_DMAError+0xda>
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a69      	ldr	r2, [pc, #420]	@ (8007cac <I2C_DMAError+0x1f8>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d041      	beq.n	8007b8e <I2C_DMAError+0xda>
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a67      	ldr	r2, [pc, #412]	@ (8007cb0 <I2C_DMAError+0x1fc>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d03b      	beq.n	8007b8e <I2C_DMAError+0xda>
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a65      	ldr	r2, [pc, #404]	@ (8007cb4 <I2C_DMAError+0x200>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d035      	beq.n	8007b8e <I2C_DMAError+0xda>
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a63      	ldr	r2, [pc, #396]	@ (8007cb8 <I2C_DMAError+0x204>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d02f      	beq.n	8007b8e <I2C_DMAError+0xda>
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a61      	ldr	r2, [pc, #388]	@ (8007cbc <I2C_DMAError+0x208>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d029      	beq.n	8007b8e <I2C_DMAError+0xda>
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a5f      	ldr	r2, [pc, #380]	@ (8007cc0 <I2C_DMAError+0x20c>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d023      	beq.n	8007b8e <I2C_DMAError+0xda>
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a5d      	ldr	r2, [pc, #372]	@ (8007cc4 <I2C_DMAError+0x210>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d01d      	beq.n	8007b8e <I2C_DMAError+0xda>
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a5b      	ldr	r2, [pc, #364]	@ (8007cc8 <I2C_DMAError+0x214>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d017      	beq.n	8007b8e <I2C_DMAError+0xda>
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a59      	ldr	r2, [pc, #356]	@ (8007ccc <I2C_DMAError+0x218>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d011      	beq.n	8007b8e <I2C_DMAError+0xda>
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a57      	ldr	r2, [pc, #348]	@ (8007cd0 <I2C_DMAError+0x21c>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d00b      	beq.n	8007b8e <I2C_DMAError+0xda>
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a55      	ldr	r2, [pc, #340]	@ (8007cd4 <I2C_DMAError+0x220>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d005      	beq.n	8007b8e <I2C_DMAError+0xda>
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a53      	ldr	r2, [pc, #332]	@ (8007cd8 <I2C_DMAError+0x224>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d109      	bne.n	8007ba2 <I2C_DMAError+0xee>
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	bf0c      	ite	eq
 8007b9a:	2301      	moveq	r3, #1
 8007b9c:	2300      	movne	r3, #0
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	e008      	b.n	8007bb4 <I2C_DMAError+0x100>
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	bf0c      	ite	eq
 8007bae:	2301      	moveq	r3, #1
 8007bb0:	2300      	movne	r3, #0
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d001      	beq.n	8007bbc <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	f000 8098 	beq.w	8007cf6 <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a33      	ldr	r2, [pc, #204]	@ (8007c9c <I2C_DMAError+0x1e8>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d059      	beq.n	8007c86 <I2C_DMAError+0x1d2>
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a31      	ldr	r2, [pc, #196]	@ (8007ca0 <I2C_DMAError+0x1ec>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d053      	beq.n	8007c86 <I2C_DMAError+0x1d2>
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a2f      	ldr	r2, [pc, #188]	@ (8007ca4 <I2C_DMAError+0x1f0>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d04d      	beq.n	8007c86 <I2C_DMAError+0x1d2>
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a2d      	ldr	r2, [pc, #180]	@ (8007ca8 <I2C_DMAError+0x1f4>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d047      	beq.n	8007c86 <I2C_DMAError+0x1d2>
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a2b      	ldr	r2, [pc, #172]	@ (8007cac <I2C_DMAError+0x1f8>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d041      	beq.n	8007c86 <I2C_DMAError+0x1d2>
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a29      	ldr	r2, [pc, #164]	@ (8007cb0 <I2C_DMAError+0x1fc>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d03b      	beq.n	8007c86 <I2C_DMAError+0x1d2>
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a27      	ldr	r2, [pc, #156]	@ (8007cb4 <I2C_DMAError+0x200>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d035      	beq.n	8007c86 <I2C_DMAError+0x1d2>
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a25      	ldr	r2, [pc, #148]	@ (8007cb8 <I2C_DMAError+0x204>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d02f      	beq.n	8007c86 <I2C_DMAError+0x1d2>
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a23      	ldr	r2, [pc, #140]	@ (8007cbc <I2C_DMAError+0x208>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d029      	beq.n	8007c86 <I2C_DMAError+0x1d2>
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a21      	ldr	r2, [pc, #132]	@ (8007cc0 <I2C_DMAError+0x20c>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d023      	beq.n	8007c86 <I2C_DMAError+0x1d2>
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a1f      	ldr	r2, [pc, #124]	@ (8007cc4 <I2C_DMAError+0x210>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d01d      	beq.n	8007c86 <I2C_DMAError+0x1d2>
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a1d      	ldr	r2, [pc, #116]	@ (8007cc8 <I2C_DMAError+0x214>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d017      	beq.n	8007c86 <I2C_DMAError+0x1d2>
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a1b      	ldr	r2, [pc, #108]	@ (8007ccc <I2C_DMAError+0x218>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d011      	beq.n	8007c86 <I2C_DMAError+0x1d2>
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a19      	ldr	r2, [pc, #100]	@ (8007cd0 <I2C_DMAError+0x21c>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d00b      	beq.n	8007c86 <I2C_DMAError+0x1d2>
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a17      	ldr	r2, [pc, #92]	@ (8007cd4 <I2C_DMAError+0x220>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d005      	beq.n	8007c86 <I2C_DMAError+0x1d2>
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a15      	ldr	r2, [pc, #84]	@ (8007cd8 <I2C_DMAError+0x224>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d12a      	bne.n	8007cdc <I2C_DMAError+0x228>
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	bf0c      	ite	eq
 8007c92:	2301      	moveq	r3, #1
 8007c94:	2300      	movne	r3, #0
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	e029      	b.n	8007cee <I2C_DMAError+0x23a>
 8007c9a:	bf00      	nop
 8007c9c:	40020010 	.word	0x40020010
 8007ca0:	40020028 	.word	0x40020028
 8007ca4:	40020040 	.word	0x40020040
 8007ca8:	40020058 	.word	0x40020058
 8007cac:	40020070 	.word	0x40020070
 8007cb0:	40020088 	.word	0x40020088
 8007cb4:	400200a0 	.word	0x400200a0
 8007cb8:	400200b8 	.word	0x400200b8
 8007cbc:	40020410 	.word	0x40020410
 8007cc0:	40020428 	.word	0x40020428
 8007cc4:	40020440 	.word	0x40020440
 8007cc8:	40020458 	.word	0x40020458
 8007ccc:	40020470 	.word	0x40020470
 8007cd0:	40020488 	.word	0x40020488
 8007cd4:	400204a0 	.word	0x400204a0
 8007cd8:	400204b8 	.word	0x400204b8
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	bf0c      	ite	eq
 8007ce8:	2301      	moveq	r3, #1
 8007cea:	2300      	movne	r3, #0
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d001      	beq.n	8007cf6 <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f7fd f82a 	bl	8004d50 <HAL_DMA_GetError>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	2b02      	cmp	r3, #2
 8007d00:	d00e      	beq.n	8007d20 <I2C_DMAError+0x26c>
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d00b      	beq.n	8007d20 <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	685a      	ldr	r2, [r3, #4]
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007d16:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007d18:	2110      	movs	r1, #16
 8007d1a:	68b8      	ldr	r0, [r7, #8]
 8007d1c:	f7ff fd44 	bl	80077a8 <I2C_ITError>
  }
}
 8007d20:	bf00      	nop
 8007d22:	3710      	adds	r7, #16
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d34:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d003      	beq.n	8007d46 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d42:	2200      	movs	r2, #0
 8007d44:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d003      	beq.n	8007d56 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d52:	2200      	movs	r2, #0
 8007d54:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8007d56:	68f8      	ldr	r0, [r7, #12]
 8007d58:	f7ff fe16 	bl	8007988 <I2C_TreatErrorCallback>
}
 8007d5c:	bf00      	nop
 8007d5e:	3710      	adds	r7, #16
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b084      	sub	sp, #16
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	60b9      	str	r1, [r7, #8]
 8007d6e:	603b      	str	r3, [r7, #0]
 8007d70:	4613      	mov	r3, r2
 8007d72:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007d74:	e03b      	b.n	8007dee <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d76:	69ba      	ldr	r2, [r7, #24]
 8007d78:	6839      	ldr	r1, [r7, #0]
 8007d7a:	68f8      	ldr	r0, [r7, #12]
 8007d7c:	f000 f84c 	bl	8007e18 <I2C_IsErrorOccurred>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d001      	beq.n	8007d8a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8007d86:	2301      	movs	r3, #1
 8007d88:	e041      	b.n	8007e0e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d90:	d02d      	beq.n	8007dee <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d92:	f7fa fc85 	bl	80026a0 <HAL_GetTick>
 8007d96:	4602      	mov	r2, r0
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	1ad3      	subs	r3, r2, r3
 8007d9c:	683a      	ldr	r2, [r7, #0]
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d302      	bcc.n	8007da8 <I2C_WaitOnFlagUntilTimeout+0x44>
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d122      	bne.n	8007dee <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	699a      	ldr	r2, [r3, #24]
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	4013      	ands	r3, r2
 8007db2:	68ba      	ldr	r2, [r7, #8]
 8007db4:	429a      	cmp	r2, r3
 8007db6:	bf0c      	ite	eq
 8007db8:	2301      	moveq	r3, #1
 8007dba:	2300      	movne	r3, #0
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	79fb      	ldrb	r3, [r7, #7]
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d113      	bne.n	8007dee <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dca:	f043 0220 	orr.w	r2, r3, #32
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2220      	movs	r2, #32
 8007dd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2200      	movs	r2, #0
 8007de6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8007dea:	2301      	movs	r3, #1
 8007dec:	e00f      	b.n	8007e0e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	699a      	ldr	r2, [r3, #24]
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	4013      	ands	r3, r2
 8007df8:	68ba      	ldr	r2, [r7, #8]
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	bf0c      	ite	eq
 8007dfe:	2301      	moveq	r3, #1
 8007e00:	2300      	movne	r3, #0
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	461a      	mov	r2, r3
 8007e06:	79fb      	ldrb	r3, [r7, #7]
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d0b4      	beq.n	8007d76 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e0c:	2300      	movs	r3, #0
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3710      	adds	r7, #16
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
	...

08007e18 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b08a      	sub	sp, #40	@ 0x28
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	60b9      	str	r1, [r7, #8]
 8007e22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e24:	2300      	movs	r3, #0
 8007e26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	699b      	ldr	r3, [r3, #24]
 8007e30:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007e32:	2300      	movs	r3, #0
 8007e34:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007e3a:	69bb      	ldr	r3, [r7, #24]
 8007e3c:	f003 0310 	and.w	r3, r3, #16
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d068      	beq.n	8007f16 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	2210      	movs	r2, #16
 8007e4a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007e4c:	e049      	b.n	8007ee2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e54:	d045      	beq.n	8007ee2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007e56:	f7fa fc23 	bl	80026a0 <HAL_GetTick>
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	69fb      	ldr	r3, [r7, #28]
 8007e5e:	1ad3      	subs	r3, r2, r3
 8007e60:	68ba      	ldr	r2, [r7, #8]
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d302      	bcc.n	8007e6c <I2C_IsErrorOccurred+0x54>
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d13a      	bne.n	8007ee2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007e76:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007e7e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	699b      	ldr	r3, [r3, #24]
 8007e86:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e8e:	d121      	bne.n	8007ed4 <I2C_IsErrorOccurred+0xbc>
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007e96:	d01d      	beq.n	8007ed4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007e98:	7cfb      	ldrb	r3, [r7, #19]
 8007e9a:	2b20      	cmp	r3, #32
 8007e9c:	d01a      	beq.n	8007ed4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	685a      	ldr	r2, [r3, #4]
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007eac:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007eae:	f7fa fbf7 	bl	80026a0 <HAL_GetTick>
 8007eb2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007eb4:	e00e      	b.n	8007ed4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007eb6:	f7fa fbf3 	bl	80026a0 <HAL_GetTick>
 8007eba:	4602      	mov	r2, r0
 8007ebc:	69fb      	ldr	r3, [r7, #28]
 8007ebe:	1ad3      	subs	r3, r2, r3
 8007ec0:	2b19      	cmp	r3, #25
 8007ec2:	d907      	bls.n	8007ed4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007ec4:	6a3b      	ldr	r3, [r7, #32]
 8007ec6:	f043 0320 	orr.w	r3, r3, #32
 8007eca:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8007ed2:	e006      	b.n	8007ee2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	699b      	ldr	r3, [r3, #24]
 8007eda:	f003 0320 	and.w	r3, r3, #32
 8007ede:	2b20      	cmp	r3, #32
 8007ee0:	d1e9      	bne.n	8007eb6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	699b      	ldr	r3, [r3, #24]
 8007ee8:	f003 0320 	and.w	r3, r3, #32
 8007eec:	2b20      	cmp	r3, #32
 8007eee:	d003      	beq.n	8007ef8 <I2C_IsErrorOccurred+0xe0>
 8007ef0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d0aa      	beq.n	8007e4e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007ef8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d103      	bne.n	8007f08 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2220      	movs	r2, #32
 8007f06:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007f08:	6a3b      	ldr	r3, [r7, #32]
 8007f0a:	f043 0304 	orr.w	r3, r3, #4
 8007f0e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007f10:	2301      	movs	r3, #1
 8007f12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	699b      	ldr	r3, [r3, #24]
 8007f1c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007f1e:	69bb      	ldr	r3, [r7, #24]
 8007f20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d00b      	beq.n	8007f40 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007f28:	6a3b      	ldr	r3, [r7, #32]
 8007f2a:	f043 0301 	orr.w	r3, r3, #1
 8007f2e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007f38:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007f40:	69bb      	ldr	r3, [r7, #24]
 8007f42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d00b      	beq.n	8007f62 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007f4a:	6a3b      	ldr	r3, [r7, #32]
 8007f4c:	f043 0308 	orr.w	r3, r3, #8
 8007f50:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007f5a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007f62:	69bb      	ldr	r3, [r7, #24]
 8007f64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d00b      	beq.n	8007f84 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007f6c:	6a3b      	ldr	r3, [r7, #32]
 8007f6e:	f043 0302 	orr.w	r3, r3, #2
 8007f72:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007f7c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8007f84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d01c      	beq.n	8007fc6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007f8c:	68f8      	ldr	r0, [r7, #12]
 8007f8e:	f7ff fd22 	bl	80079d6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	6859      	ldr	r1, [r3, #4]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	4b0d      	ldr	r3, [pc, #52]	@ (8007fd4 <I2C_IsErrorOccurred+0x1bc>)
 8007f9e:	400b      	ands	r3, r1
 8007fa0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007fa6:	6a3b      	ldr	r3, [r7, #32]
 8007fa8:	431a      	orrs	r2, r3
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2220      	movs	r2, #32
 8007fb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8007fc6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3728      	adds	r7, #40	@ 0x28
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
 8007fd2:	bf00      	nop
 8007fd4:	fe00e800 	.word	0xfe00e800

08007fd8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b087      	sub	sp, #28
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	60f8      	str	r0, [r7, #12]
 8007fe0:	607b      	str	r3, [r7, #4]
 8007fe2:	460b      	mov	r3, r1
 8007fe4:	817b      	strh	r3, [r7, #10]
 8007fe6:	4613      	mov	r3, r2
 8007fe8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007fea:	897b      	ldrh	r3, [r7, #10]
 8007fec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007ff0:	7a7b      	ldrb	r3, [r7, #9]
 8007ff2:	041b      	lsls	r3, r3, #16
 8007ff4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007ff8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007ffe:	6a3b      	ldr	r3, [r7, #32]
 8008000:	4313      	orrs	r3, r2
 8008002:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008006:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	685a      	ldr	r2, [r3, #4]
 800800e:	6a3b      	ldr	r3, [r7, #32]
 8008010:	0d5b      	lsrs	r3, r3, #21
 8008012:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8008016:	4b08      	ldr	r3, [pc, #32]	@ (8008038 <I2C_TransferConfig+0x60>)
 8008018:	430b      	orrs	r3, r1
 800801a:	43db      	mvns	r3, r3
 800801c:	ea02 0103 	and.w	r1, r2, r3
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	697a      	ldr	r2, [r7, #20]
 8008026:	430a      	orrs	r2, r1
 8008028:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800802a:	bf00      	nop
 800802c:	371c      	adds	r7, #28
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr
 8008036:	bf00      	nop
 8008038:	03ff63ff 	.word	0x03ff63ff

0800803c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800803c:	b480      	push	{r7}
 800803e:	b085      	sub	sp, #20
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	460b      	mov	r3, r1
 8008046:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008048:	2300      	movs	r3, #0
 800804a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008050:	4a39      	ldr	r2, [pc, #228]	@ (8008138 <I2C_Enable_IRQ+0xfc>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d032      	beq.n	80080bc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800805a:	4a38      	ldr	r2, [pc, #224]	@ (800813c <I2C_Enable_IRQ+0x100>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d02d      	beq.n	80080bc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8008064:	4a36      	ldr	r2, [pc, #216]	@ (8008140 <I2C_Enable_IRQ+0x104>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d028      	beq.n	80080bc <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800806a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800806e:	2b00      	cmp	r3, #0
 8008070:	da03      	bge.n	800807a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8008078:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800807a:	887b      	ldrh	r3, [r7, #2]
 800807c:	f003 0301 	and.w	r3, r3, #1
 8008080:	2b00      	cmp	r3, #0
 8008082:	d003      	beq.n	800808c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800808a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800808c:	887b      	ldrh	r3, [r7, #2]
 800808e:	f003 0302 	and.w	r3, r3, #2
 8008092:	2b00      	cmp	r3, #0
 8008094:	d003      	beq.n	800809e <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800809c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800809e:	887b      	ldrh	r3, [r7, #2]
 80080a0:	2b10      	cmp	r3, #16
 80080a2:	d103      	bne.n	80080ac <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80080aa:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80080ac:	887b      	ldrh	r3, [r7, #2]
 80080ae:	2b20      	cmp	r3, #32
 80080b0:	d133      	bne.n	800811a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	f043 0320 	orr.w	r3, r3, #32
 80080b8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80080ba:	e02e      	b.n	800811a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80080bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	da03      	bge.n	80080cc <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80080ca:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80080cc:	887b      	ldrh	r3, [r7, #2]
 80080ce:	f003 0301 	and.w	r3, r3, #1
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d003      	beq.n	80080de <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80080dc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80080de:	887b      	ldrh	r3, [r7, #2]
 80080e0:	f003 0302 	and.w	r3, r3, #2
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d003      	beq.n	80080f0 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80080ee:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80080f0:	887b      	ldrh	r3, [r7, #2]
 80080f2:	2b10      	cmp	r3, #16
 80080f4:	d103      	bne.n	80080fe <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80080fc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80080fe:	887b      	ldrh	r3, [r7, #2]
 8008100:	2b20      	cmp	r3, #32
 8008102:	d103      	bne.n	800810c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800810a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800810c:	887b      	ldrh	r3, [r7, #2]
 800810e:	2b40      	cmp	r3, #64	@ 0x40
 8008110:	d103      	bne.n	800811a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008118:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	6819      	ldr	r1, [r3, #0]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	68fa      	ldr	r2, [r7, #12]
 8008126:	430a      	orrs	r2, r1
 8008128:	601a      	str	r2, [r3, #0]
}
 800812a:	bf00      	nop
 800812c:	3714      	adds	r7, #20
 800812e:	46bd      	mov	sp, r7
 8008130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008134:	4770      	bx	lr
 8008136:	bf00      	nop
 8008138:	080066b7 	.word	0x080066b7
 800813c:	08006ad9 	.word	0x08006ad9
 8008140:	0800688d 	.word	0x0800688d

08008144 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008144:	b480      	push	{r7}
 8008146:	b085      	sub	sp, #20
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	460b      	mov	r3, r1
 800814e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008150:	2300      	movs	r3, #0
 8008152:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008154:	887b      	ldrh	r3, [r7, #2]
 8008156:	f003 0301 	and.w	r3, r3, #1
 800815a:	2b00      	cmp	r3, #0
 800815c:	d00f      	beq.n	800817e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8008164:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800816c:	b2db      	uxtb	r3, r3
 800816e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008172:	2b28      	cmp	r3, #40	@ 0x28
 8008174:	d003      	beq.n	800817e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800817c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800817e:	887b      	ldrh	r3, [r7, #2]
 8008180:	f003 0302 	and.w	r3, r3, #2
 8008184:	2b00      	cmp	r3, #0
 8008186:	d00f      	beq.n	80081a8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800818e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008196:	b2db      	uxtb	r3, r3
 8008198:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800819c:	2b28      	cmp	r3, #40	@ 0x28
 800819e:	d003      	beq.n	80081a8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80081a6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80081a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	da03      	bge.n	80081b8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80081b6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80081b8:	887b      	ldrh	r3, [r7, #2]
 80081ba:	2b10      	cmp	r3, #16
 80081bc:	d103      	bne.n	80081c6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80081c4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80081c6:	887b      	ldrh	r3, [r7, #2]
 80081c8:	2b20      	cmp	r3, #32
 80081ca:	d103      	bne.n	80081d4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f043 0320 	orr.w	r3, r3, #32
 80081d2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80081d4:	887b      	ldrh	r3, [r7, #2]
 80081d6:	2b40      	cmp	r3, #64	@ 0x40
 80081d8:	d103      	bne.n	80081e2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081e0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	6819      	ldr	r1, [r3, #0]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	43da      	mvns	r2, r3
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	400a      	ands	r2, r1
 80081f2:	601a      	str	r2, [r3, #0]
}
 80081f4:	bf00      	nop
 80081f6:	3714      	adds	r7, #20
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr

08008200 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008200:	b480      	push	{r7}
 8008202:	b083      	sub	sp, #12
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008210:	b2db      	uxtb	r3, r3
 8008212:	2b20      	cmp	r3, #32
 8008214:	d138      	bne.n	8008288 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800821c:	2b01      	cmp	r3, #1
 800821e:	d101      	bne.n	8008224 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008220:	2302      	movs	r3, #2
 8008222:	e032      	b.n	800828a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2201      	movs	r2, #1
 8008228:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2224      	movs	r2, #36	@ 0x24
 8008230:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	681a      	ldr	r2, [r3, #0]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f022 0201 	bic.w	r2, r2, #1
 8008242:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008252:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	6819      	ldr	r1, [r3, #0]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	683a      	ldr	r2, [r7, #0]
 8008260:	430a      	orrs	r2, r1
 8008262:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f042 0201 	orr.w	r2, r2, #1
 8008272:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2220      	movs	r2, #32
 8008278:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008284:	2300      	movs	r3, #0
 8008286:	e000      	b.n	800828a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008288:	2302      	movs	r3, #2
  }
}
 800828a:	4618      	mov	r0, r3
 800828c:	370c      	adds	r7, #12
 800828e:	46bd      	mov	sp, r7
 8008290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008294:	4770      	bx	lr

08008296 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008296:	b480      	push	{r7}
 8008298:	b085      	sub	sp, #20
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
 800829e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80082a6:	b2db      	uxtb	r3, r3
 80082a8:	2b20      	cmp	r3, #32
 80082aa:	d139      	bne.n	8008320 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d101      	bne.n	80082ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80082b6:	2302      	movs	r3, #2
 80082b8:	e033      	b.n	8008322 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2201      	movs	r2, #1
 80082be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2224      	movs	r2, #36	@ 0x24
 80082c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f022 0201 	bic.w	r2, r2, #1
 80082d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80082e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	021b      	lsls	r3, r3, #8
 80082ee:	68fa      	ldr	r2, [r7, #12]
 80082f0:	4313      	orrs	r3, r2
 80082f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	68fa      	ldr	r2, [r7, #12]
 80082fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f042 0201 	orr.w	r2, r2, #1
 800830a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2220      	movs	r2, #32
 8008310:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2200      	movs	r2, #0
 8008318:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800831c:	2300      	movs	r3, #0
 800831e:	e000      	b.n	8008322 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008320:	2302      	movs	r3, #2
  }
}
 8008322:	4618      	mov	r0, r3
 8008324:	3714      	adds	r7, #20
 8008326:	46bd      	mov	sp, r7
 8008328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832c:	4770      	bx	lr
	...

08008330 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b084      	sub	sp, #16
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008338:	4b19      	ldr	r3, [pc, #100]	@ (80083a0 <HAL_PWREx_ConfigSupply+0x70>)
 800833a:	68db      	ldr	r3, [r3, #12]
 800833c:	f003 0304 	and.w	r3, r3, #4
 8008340:	2b04      	cmp	r3, #4
 8008342:	d00a      	beq.n	800835a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008344:	4b16      	ldr	r3, [pc, #88]	@ (80083a0 <HAL_PWREx_ConfigSupply+0x70>)
 8008346:	68db      	ldr	r3, [r3, #12]
 8008348:	f003 0307 	and.w	r3, r3, #7
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	429a      	cmp	r2, r3
 8008350:	d001      	beq.n	8008356 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	e01f      	b.n	8008396 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008356:	2300      	movs	r3, #0
 8008358:	e01d      	b.n	8008396 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800835a:	4b11      	ldr	r3, [pc, #68]	@ (80083a0 <HAL_PWREx_ConfigSupply+0x70>)
 800835c:	68db      	ldr	r3, [r3, #12]
 800835e:	f023 0207 	bic.w	r2, r3, #7
 8008362:	490f      	ldr	r1, [pc, #60]	@ (80083a0 <HAL_PWREx_ConfigSupply+0x70>)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	4313      	orrs	r3, r2
 8008368:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800836a:	f7fa f999 	bl	80026a0 <HAL_GetTick>
 800836e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008370:	e009      	b.n	8008386 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008372:	f7fa f995 	bl	80026a0 <HAL_GetTick>
 8008376:	4602      	mov	r2, r0
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	1ad3      	subs	r3, r2, r3
 800837c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008380:	d901      	bls.n	8008386 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008382:	2301      	movs	r3, #1
 8008384:	e007      	b.n	8008396 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008386:	4b06      	ldr	r3, [pc, #24]	@ (80083a0 <HAL_PWREx_ConfigSupply+0x70>)
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800838e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008392:	d1ee      	bne.n	8008372 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008394:	2300      	movs	r3, #0
}
 8008396:	4618      	mov	r0, r3
 8008398:	3710      	adds	r7, #16
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
 800839e:	bf00      	nop
 80083a0:	58024800 	.word	0x58024800

080083a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b08c      	sub	sp, #48	@ 0x30
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d102      	bne.n	80083b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80083b2:	2301      	movs	r3, #1
 80083b4:	f000 bc1f 	b.w	8008bf6 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f003 0301 	and.w	r3, r3, #1
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	f000 80b3 	beq.w	800852c <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80083c6:	4b95      	ldr	r3, [pc, #596]	@ (800861c <HAL_RCC_OscConfig+0x278>)
 80083c8:	691b      	ldr	r3, [r3, #16]
 80083ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80083ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80083d0:	4b92      	ldr	r3, [pc, #584]	@ (800861c <HAL_RCC_OscConfig+0x278>)
 80083d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80083d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083d8:	2b10      	cmp	r3, #16
 80083da:	d007      	beq.n	80083ec <HAL_RCC_OscConfig+0x48>
 80083dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083de:	2b18      	cmp	r3, #24
 80083e0:	d112      	bne.n	8008408 <HAL_RCC_OscConfig+0x64>
 80083e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083e4:	f003 0303 	and.w	r3, r3, #3
 80083e8:	2b02      	cmp	r3, #2
 80083ea:	d10d      	bne.n	8008408 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083ec:	4b8b      	ldr	r3, [pc, #556]	@ (800861c <HAL_RCC_OscConfig+0x278>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	f000 8098 	beq.w	800852a <HAL_RCC_OscConfig+0x186>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	f040 8093 	bne.w	800852a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8008404:	2301      	movs	r3, #1
 8008406:	e3f6      	b.n	8008bf6 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008410:	d106      	bne.n	8008420 <HAL_RCC_OscConfig+0x7c>
 8008412:	4b82      	ldr	r3, [pc, #520]	@ (800861c <HAL_RCC_OscConfig+0x278>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a81      	ldr	r2, [pc, #516]	@ (800861c <HAL_RCC_OscConfig+0x278>)
 8008418:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800841c:	6013      	str	r3, [r2, #0]
 800841e:	e058      	b.n	80084d2 <HAL_RCC_OscConfig+0x12e>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d112      	bne.n	800844e <HAL_RCC_OscConfig+0xaa>
 8008428:	4b7c      	ldr	r3, [pc, #496]	@ (800861c <HAL_RCC_OscConfig+0x278>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a7b      	ldr	r2, [pc, #492]	@ (800861c <HAL_RCC_OscConfig+0x278>)
 800842e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008432:	6013      	str	r3, [r2, #0]
 8008434:	4b79      	ldr	r3, [pc, #484]	@ (800861c <HAL_RCC_OscConfig+0x278>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a78      	ldr	r2, [pc, #480]	@ (800861c <HAL_RCC_OscConfig+0x278>)
 800843a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800843e:	6013      	str	r3, [r2, #0]
 8008440:	4b76      	ldr	r3, [pc, #472]	@ (800861c <HAL_RCC_OscConfig+0x278>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a75      	ldr	r2, [pc, #468]	@ (800861c <HAL_RCC_OscConfig+0x278>)
 8008446:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800844a:	6013      	str	r3, [r2, #0]
 800844c:	e041      	b.n	80084d2 <HAL_RCC_OscConfig+0x12e>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008456:	d112      	bne.n	800847e <HAL_RCC_OscConfig+0xda>
 8008458:	4b70      	ldr	r3, [pc, #448]	@ (800861c <HAL_RCC_OscConfig+0x278>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a6f      	ldr	r2, [pc, #444]	@ (800861c <HAL_RCC_OscConfig+0x278>)
 800845e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008462:	6013      	str	r3, [r2, #0]
 8008464:	4b6d      	ldr	r3, [pc, #436]	@ (800861c <HAL_RCC_OscConfig+0x278>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a6c      	ldr	r2, [pc, #432]	@ (800861c <HAL_RCC_OscConfig+0x278>)
 800846a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800846e:	6013      	str	r3, [r2, #0]
 8008470:	4b6a      	ldr	r3, [pc, #424]	@ (800861c <HAL_RCC_OscConfig+0x278>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a69      	ldr	r2, [pc, #420]	@ (800861c <HAL_RCC_OscConfig+0x278>)
 8008476:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800847a:	6013      	str	r3, [r2, #0]
 800847c:	e029      	b.n	80084d2 <HAL_RCC_OscConfig+0x12e>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8008486:	d112      	bne.n	80084ae <HAL_RCC_OscConfig+0x10a>
 8008488:	4b64      	ldr	r3, [pc, #400]	@ (800861c <HAL_RCC_OscConfig+0x278>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a63      	ldr	r2, [pc, #396]	@ (800861c <HAL_RCC_OscConfig+0x278>)
 800848e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008492:	6013      	str	r3, [r2, #0]
 8008494:	4b61      	ldr	r3, [pc, #388]	@ (800861c <HAL_RCC_OscConfig+0x278>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a60      	ldr	r2, [pc, #384]	@ (800861c <HAL_RCC_OscConfig+0x278>)
 800849a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800849e:	6013      	str	r3, [r2, #0]
 80084a0:	4b5e      	ldr	r3, [pc, #376]	@ (800861c <HAL_RCC_OscConfig+0x278>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a5d      	ldr	r2, [pc, #372]	@ (800861c <HAL_RCC_OscConfig+0x278>)
 80084a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80084aa:	6013      	str	r3, [r2, #0]
 80084ac:	e011      	b.n	80084d2 <HAL_RCC_OscConfig+0x12e>
 80084ae:	4b5b      	ldr	r3, [pc, #364]	@ (800861c <HAL_RCC_OscConfig+0x278>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a5a      	ldr	r2, [pc, #360]	@ (800861c <HAL_RCC_OscConfig+0x278>)
 80084b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80084b8:	6013      	str	r3, [r2, #0]
 80084ba:	4b58      	ldr	r3, [pc, #352]	@ (800861c <HAL_RCC_OscConfig+0x278>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4a57      	ldr	r2, [pc, #348]	@ (800861c <HAL_RCC_OscConfig+0x278>)
 80084c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80084c4:	6013      	str	r3, [r2, #0]
 80084c6:	4b55      	ldr	r3, [pc, #340]	@ (800861c <HAL_RCC_OscConfig+0x278>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a54      	ldr	r2, [pc, #336]	@ (800861c <HAL_RCC_OscConfig+0x278>)
 80084cc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80084d0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d013      	beq.n	8008502 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084da:	f7fa f8e1 	bl	80026a0 <HAL_GetTick>
 80084de:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80084e0:	e008      	b.n	80084f4 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80084e2:	f7fa f8dd 	bl	80026a0 <HAL_GetTick>
 80084e6:	4602      	mov	r2, r0
 80084e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ea:	1ad3      	subs	r3, r2, r3
 80084ec:	2b64      	cmp	r3, #100	@ 0x64
 80084ee:	d901      	bls.n	80084f4 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80084f0:	2303      	movs	r3, #3
 80084f2:	e380      	b.n	8008bf6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80084f4:	4b49      	ldr	r3, [pc, #292]	@ (800861c <HAL_RCC_OscConfig+0x278>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d0f0      	beq.n	80084e2 <HAL_RCC_OscConfig+0x13e>
 8008500:	e014      	b.n	800852c <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008502:	f7fa f8cd 	bl	80026a0 <HAL_GetTick>
 8008506:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008508:	e008      	b.n	800851c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800850a:	f7fa f8c9 	bl	80026a0 <HAL_GetTick>
 800850e:	4602      	mov	r2, r0
 8008510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008512:	1ad3      	subs	r3, r2, r3
 8008514:	2b64      	cmp	r3, #100	@ 0x64
 8008516:	d901      	bls.n	800851c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8008518:	2303      	movs	r3, #3
 800851a:	e36c      	b.n	8008bf6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800851c:	4b3f      	ldr	r3, [pc, #252]	@ (800861c <HAL_RCC_OscConfig+0x278>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008524:	2b00      	cmp	r3, #0
 8008526:	d1f0      	bne.n	800850a <HAL_RCC_OscConfig+0x166>
 8008528:	e000      	b.n	800852c <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800852a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f003 0302 	and.w	r3, r3, #2
 8008534:	2b00      	cmp	r3, #0
 8008536:	f000 808c 	beq.w	8008652 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800853a:	4b38      	ldr	r3, [pc, #224]	@ (800861c <HAL_RCC_OscConfig+0x278>)
 800853c:	691b      	ldr	r3, [r3, #16]
 800853e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008542:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008544:	4b35      	ldr	r3, [pc, #212]	@ (800861c <HAL_RCC_OscConfig+0x278>)
 8008546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008548:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800854a:	6a3b      	ldr	r3, [r7, #32]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d007      	beq.n	8008560 <HAL_RCC_OscConfig+0x1bc>
 8008550:	6a3b      	ldr	r3, [r7, #32]
 8008552:	2b18      	cmp	r3, #24
 8008554:	d137      	bne.n	80085c6 <HAL_RCC_OscConfig+0x222>
 8008556:	69fb      	ldr	r3, [r7, #28]
 8008558:	f003 0303 	and.w	r3, r3, #3
 800855c:	2b00      	cmp	r3, #0
 800855e:	d132      	bne.n	80085c6 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008560:	4b2e      	ldr	r3, [pc, #184]	@ (800861c <HAL_RCC_OscConfig+0x278>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f003 0304 	and.w	r3, r3, #4
 8008568:	2b00      	cmp	r3, #0
 800856a:	d005      	beq.n	8008578 <HAL_RCC_OscConfig+0x1d4>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	68db      	ldr	r3, [r3, #12]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d101      	bne.n	8008578 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8008574:	2301      	movs	r3, #1
 8008576:	e33e      	b.n	8008bf6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008578:	4b28      	ldr	r3, [pc, #160]	@ (800861c <HAL_RCC_OscConfig+0x278>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f023 0219 	bic.w	r2, r3, #25
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	68db      	ldr	r3, [r3, #12]
 8008584:	4925      	ldr	r1, [pc, #148]	@ (800861c <HAL_RCC_OscConfig+0x278>)
 8008586:	4313      	orrs	r3, r2
 8008588:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800858a:	f7fa f889 	bl	80026a0 <HAL_GetTick>
 800858e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008590:	e008      	b.n	80085a4 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008592:	f7fa f885 	bl	80026a0 <HAL_GetTick>
 8008596:	4602      	mov	r2, r0
 8008598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800859a:	1ad3      	subs	r3, r2, r3
 800859c:	2b02      	cmp	r3, #2
 800859e:	d901      	bls.n	80085a4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80085a0:	2303      	movs	r3, #3
 80085a2:	e328      	b.n	8008bf6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80085a4:	4b1d      	ldr	r3, [pc, #116]	@ (800861c <HAL_RCC_OscConfig+0x278>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f003 0304 	and.w	r3, r3, #4
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d0f0      	beq.n	8008592 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085b0:	4b1a      	ldr	r3, [pc, #104]	@ (800861c <HAL_RCC_OscConfig+0x278>)
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	691b      	ldr	r3, [r3, #16]
 80085bc:	061b      	lsls	r3, r3, #24
 80085be:	4917      	ldr	r1, [pc, #92]	@ (800861c <HAL_RCC_OscConfig+0x278>)
 80085c0:	4313      	orrs	r3, r2
 80085c2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80085c4:	e045      	b.n	8008652 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	68db      	ldr	r3, [r3, #12]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d028      	beq.n	8008620 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80085ce:	4b13      	ldr	r3, [pc, #76]	@ (800861c <HAL_RCC_OscConfig+0x278>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f023 0219 	bic.w	r2, r3, #25
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	68db      	ldr	r3, [r3, #12]
 80085da:	4910      	ldr	r1, [pc, #64]	@ (800861c <HAL_RCC_OscConfig+0x278>)
 80085dc:	4313      	orrs	r3, r2
 80085de:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085e0:	f7fa f85e 	bl	80026a0 <HAL_GetTick>
 80085e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80085e6:	e008      	b.n	80085fa <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80085e8:	f7fa f85a 	bl	80026a0 <HAL_GetTick>
 80085ec:	4602      	mov	r2, r0
 80085ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085f0:	1ad3      	subs	r3, r2, r3
 80085f2:	2b02      	cmp	r3, #2
 80085f4:	d901      	bls.n	80085fa <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80085f6:	2303      	movs	r3, #3
 80085f8:	e2fd      	b.n	8008bf6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80085fa:	4b08      	ldr	r3, [pc, #32]	@ (800861c <HAL_RCC_OscConfig+0x278>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f003 0304 	and.w	r3, r3, #4
 8008602:	2b00      	cmp	r3, #0
 8008604:	d0f0      	beq.n	80085e8 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008606:	4b05      	ldr	r3, [pc, #20]	@ (800861c <HAL_RCC_OscConfig+0x278>)
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	691b      	ldr	r3, [r3, #16]
 8008612:	061b      	lsls	r3, r3, #24
 8008614:	4901      	ldr	r1, [pc, #4]	@ (800861c <HAL_RCC_OscConfig+0x278>)
 8008616:	4313      	orrs	r3, r2
 8008618:	604b      	str	r3, [r1, #4]
 800861a:	e01a      	b.n	8008652 <HAL_RCC_OscConfig+0x2ae>
 800861c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008620:	4b97      	ldr	r3, [pc, #604]	@ (8008880 <HAL_RCC_OscConfig+0x4dc>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a96      	ldr	r2, [pc, #600]	@ (8008880 <HAL_RCC_OscConfig+0x4dc>)
 8008626:	f023 0301 	bic.w	r3, r3, #1
 800862a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800862c:	f7fa f838 	bl	80026a0 <HAL_GetTick>
 8008630:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008632:	e008      	b.n	8008646 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008634:	f7fa f834 	bl	80026a0 <HAL_GetTick>
 8008638:	4602      	mov	r2, r0
 800863a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800863c:	1ad3      	subs	r3, r2, r3
 800863e:	2b02      	cmp	r3, #2
 8008640:	d901      	bls.n	8008646 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8008642:	2303      	movs	r3, #3
 8008644:	e2d7      	b.n	8008bf6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008646:	4b8e      	ldr	r3, [pc, #568]	@ (8008880 <HAL_RCC_OscConfig+0x4dc>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f003 0304 	and.w	r3, r3, #4
 800864e:	2b00      	cmp	r3, #0
 8008650:	d1f0      	bne.n	8008634 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f003 0310 	and.w	r3, r3, #16
 800865a:	2b00      	cmp	r3, #0
 800865c:	d06a      	beq.n	8008734 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800865e:	4b88      	ldr	r3, [pc, #544]	@ (8008880 <HAL_RCC_OscConfig+0x4dc>)
 8008660:	691b      	ldr	r3, [r3, #16]
 8008662:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008666:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008668:	4b85      	ldr	r3, [pc, #532]	@ (8008880 <HAL_RCC_OscConfig+0x4dc>)
 800866a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800866c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800866e:	69bb      	ldr	r3, [r7, #24]
 8008670:	2b08      	cmp	r3, #8
 8008672:	d007      	beq.n	8008684 <HAL_RCC_OscConfig+0x2e0>
 8008674:	69bb      	ldr	r3, [r7, #24]
 8008676:	2b18      	cmp	r3, #24
 8008678:	d11b      	bne.n	80086b2 <HAL_RCC_OscConfig+0x30e>
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	f003 0303 	and.w	r3, r3, #3
 8008680:	2b01      	cmp	r3, #1
 8008682:	d116      	bne.n	80086b2 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008684:	4b7e      	ldr	r3, [pc, #504]	@ (8008880 <HAL_RCC_OscConfig+0x4dc>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800868c:	2b00      	cmp	r3, #0
 800868e:	d005      	beq.n	800869c <HAL_RCC_OscConfig+0x2f8>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	69db      	ldr	r3, [r3, #28]
 8008694:	2b80      	cmp	r3, #128	@ 0x80
 8008696:	d001      	beq.n	800869c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8008698:	2301      	movs	r3, #1
 800869a:	e2ac      	b.n	8008bf6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800869c:	4b78      	ldr	r3, [pc, #480]	@ (8008880 <HAL_RCC_OscConfig+0x4dc>)
 800869e:	68db      	ldr	r3, [r3, #12]
 80086a0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6a1b      	ldr	r3, [r3, #32]
 80086a8:	061b      	lsls	r3, r3, #24
 80086aa:	4975      	ldr	r1, [pc, #468]	@ (8008880 <HAL_RCC_OscConfig+0x4dc>)
 80086ac:	4313      	orrs	r3, r2
 80086ae:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80086b0:	e040      	b.n	8008734 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	69db      	ldr	r3, [r3, #28]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d023      	beq.n	8008702 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80086ba:	4b71      	ldr	r3, [pc, #452]	@ (8008880 <HAL_RCC_OscConfig+0x4dc>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4a70      	ldr	r2, [pc, #448]	@ (8008880 <HAL_RCC_OscConfig+0x4dc>)
 80086c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086c6:	f7f9 ffeb 	bl	80026a0 <HAL_GetTick>
 80086ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80086cc:	e008      	b.n	80086e0 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80086ce:	f7f9 ffe7 	bl	80026a0 <HAL_GetTick>
 80086d2:	4602      	mov	r2, r0
 80086d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086d6:	1ad3      	subs	r3, r2, r3
 80086d8:	2b02      	cmp	r3, #2
 80086da:	d901      	bls.n	80086e0 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80086dc:	2303      	movs	r3, #3
 80086de:	e28a      	b.n	8008bf6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80086e0:	4b67      	ldr	r3, [pc, #412]	@ (8008880 <HAL_RCC_OscConfig+0x4dc>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d0f0      	beq.n	80086ce <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80086ec:	4b64      	ldr	r3, [pc, #400]	@ (8008880 <HAL_RCC_OscConfig+0x4dc>)
 80086ee:	68db      	ldr	r3, [r3, #12]
 80086f0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6a1b      	ldr	r3, [r3, #32]
 80086f8:	061b      	lsls	r3, r3, #24
 80086fa:	4961      	ldr	r1, [pc, #388]	@ (8008880 <HAL_RCC_OscConfig+0x4dc>)
 80086fc:	4313      	orrs	r3, r2
 80086fe:	60cb      	str	r3, [r1, #12]
 8008700:	e018      	b.n	8008734 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008702:	4b5f      	ldr	r3, [pc, #380]	@ (8008880 <HAL_RCC_OscConfig+0x4dc>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4a5e      	ldr	r2, [pc, #376]	@ (8008880 <HAL_RCC_OscConfig+0x4dc>)
 8008708:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800870c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800870e:	f7f9 ffc7 	bl	80026a0 <HAL_GetTick>
 8008712:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008714:	e008      	b.n	8008728 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008716:	f7f9 ffc3 	bl	80026a0 <HAL_GetTick>
 800871a:	4602      	mov	r2, r0
 800871c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800871e:	1ad3      	subs	r3, r2, r3
 8008720:	2b02      	cmp	r3, #2
 8008722:	d901      	bls.n	8008728 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8008724:	2303      	movs	r3, #3
 8008726:	e266      	b.n	8008bf6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008728:	4b55      	ldr	r3, [pc, #340]	@ (8008880 <HAL_RCC_OscConfig+0x4dc>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008730:	2b00      	cmp	r3, #0
 8008732:	d1f0      	bne.n	8008716 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f003 0308 	and.w	r3, r3, #8
 800873c:	2b00      	cmp	r3, #0
 800873e:	d036      	beq.n	80087ae <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	695b      	ldr	r3, [r3, #20]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d019      	beq.n	800877c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008748:	4b4d      	ldr	r3, [pc, #308]	@ (8008880 <HAL_RCC_OscConfig+0x4dc>)
 800874a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800874c:	4a4c      	ldr	r2, [pc, #304]	@ (8008880 <HAL_RCC_OscConfig+0x4dc>)
 800874e:	f043 0301 	orr.w	r3, r3, #1
 8008752:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008754:	f7f9 ffa4 	bl	80026a0 <HAL_GetTick>
 8008758:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800875a:	e008      	b.n	800876e <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800875c:	f7f9 ffa0 	bl	80026a0 <HAL_GetTick>
 8008760:	4602      	mov	r2, r0
 8008762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008764:	1ad3      	subs	r3, r2, r3
 8008766:	2b02      	cmp	r3, #2
 8008768:	d901      	bls.n	800876e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800876a:	2303      	movs	r3, #3
 800876c:	e243      	b.n	8008bf6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800876e:	4b44      	ldr	r3, [pc, #272]	@ (8008880 <HAL_RCC_OscConfig+0x4dc>)
 8008770:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008772:	f003 0302 	and.w	r3, r3, #2
 8008776:	2b00      	cmp	r3, #0
 8008778:	d0f0      	beq.n	800875c <HAL_RCC_OscConfig+0x3b8>
 800877a:	e018      	b.n	80087ae <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800877c:	4b40      	ldr	r3, [pc, #256]	@ (8008880 <HAL_RCC_OscConfig+0x4dc>)
 800877e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008780:	4a3f      	ldr	r2, [pc, #252]	@ (8008880 <HAL_RCC_OscConfig+0x4dc>)
 8008782:	f023 0301 	bic.w	r3, r3, #1
 8008786:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008788:	f7f9 ff8a 	bl	80026a0 <HAL_GetTick>
 800878c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800878e:	e008      	b.n	80087a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008790:	f7f9 ff86 	bl	80026a0 <HAL_GetTick>
 8008794:	4602      	mov	r2, r0
 8008796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008798:	1ad3      	subs	r3, r2, r3
 800879a:	2b02      	cmp	r3, #2
 800879c:	d901      	bls.n	80087a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800879e:	2303      	movs	r3, #3
 80087a0:	e229      	b.n	8008bf6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80087a2:	4b37      	ldr	r3, [pc, #220]	@ (8008880 <HAL_RCC_OscConfig+0x4dc>)
 80087a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087a6:	f003 0302 	and.w	r3, r3, #2
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d1f0      	bne.n	8008790 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f003 0320 	and.w	r3, r3, #32
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d036      	beq.n	8008828 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	699b      	ldr	r3, [r3, #24]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d019      	beq.n	80087f6 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80087c2:	4b2f      	ldr	r3, [pc, #188]	@ (8008880 <HAL_RCC_OscConfig+0x4dc>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a2e      	ldr	r2, [pc, #184]	@ (8008880 <HAL_RCC_OscConfig+0x4dc>)
 80087c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80087cc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80087ce:	f7f9 ff67 	bl	80026a0 <HAL_GetTick>
 80087d2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80087d4:	e008      	b.n	80087e8 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80087d6:	f7f9 ff63 	bl	80026a0 <HAL_GetTick>
 80087da:	4602      	mov	r2, r0
 80087dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087de:	1ad3      	subs	r3, r2, r3
 80087e0:	2b02      	cmp	r3, #2
 80087e2:	d901      	bls.n	80087e8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80087e4:	2303      	movs	r3, #3
 80087e6:	e206      	b.n	8008bf6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80087e8:	4b25      	ldr	r3, [pc, #148]	@ (8008880 <HAL_RCC_OscConfig+0x4dc>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d0f0      	beq.n	80087d6 <HAL_RCC_OscConfig+0x432>
 80087f4:	e018      	b.n	8008828 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80087f6:	4b22      	ldr	r3, [pc, #136]	@ (8008880 <HAL_RCC_OscConfig+0x4dc>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a21      	ldr	r2, [pc, #132]	@ (8008880 <HAL_RCC_OscConfig+0x4dc>)
 80087fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008800:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008802:	f7f9 ff4d 	bl	80026a0 <HAL_GetTick>
 8008806:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008808:	e008      	b.n	800881c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800880a:	f7f9 ff49 	bl	80026a0 <HAL_GetTick>
 800880e:	4602      	mov	r2, r0
 8008810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008812:	1ad3      	subs	r3, r2, r3
 8008814:	2b02      	cmp	r3, #2
 8008816:	d901      	bls.n	800881c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8008818:	2303      	movs	r3, #3
 800881a:	e1ec      	b.n	8008bf6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800881c:	4b18      	ldr	r3, [pc, #96]	@ (8008880 <HAL_RCC_OscConfig+0x4dc>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008824:	2b00      	cmp	r3, #0
 8008826:	d1f0      	bne.n	800880a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f003 0304 	and.w	r3, r3, #4
 8008830:	2b00      	cmp	r3, #0
 8008832:	f000 80af 	beq.w	8008994 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008836:	4b13      	ldr	r3, [pc, #76]	@ (8008884 <HAL_RCC_OscConfig+0x4e0>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a12      	ldr	r2, [pc, #72]	@ (8008884 <HAL_RCC_OscConfig+0x4e0>)
 800883c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008840:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008842:	f7f9 ff2d 	bl	80026a0 <HAL_GetTick>
 8008846:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008848:	e008      	b.n	800885c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800884a:	f7f9 ff29 	bl	80026a0 <HAL_GetTick>
 800884e:	4602      	mov	r2, r0
 8008850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008852:	1ad3      	subs	r3, r2, r3
 8008854:	2b64      	cmp	r3, #100	@ 0x64
 8008856:	d901      	bls.n	800885c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8008858:	2303      	movs	r3, #3
 800885a:	e1cc      	b.n	8008bf6 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800885c:	4b09      	ldr	r3, [pc, #36]	@ (8008884 <HAL_RCC_OscConfig+0x4e0>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008864:	2b00      	cmp	r3, #0
 8008866:	d0f0      	beq.n	800884a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	689b      	ldr	r3, [r3, #8]
 800886c:	2b01      	cmp	r3, #1
 800886e:	d10b      	bne.n	8008888 <HAL_RCC_OscConfig+0x4e4>
 8008870:	4b03      	ldr	r3, [pc, #12]	@ (8008880 <HAL_RCC_OscConfig+0x4dc>)
 8008872:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008874:	4a02      	ldr	r2, [pc, #8]	@ (8008880 <HAL_RCC_OscConfig+0x4dc>)
 8008876:	f043 0301 	orr.w	r3, r3, #1
 800887a:	6713      	str	r3, [r2, #112]	@ 0x70
 800887c:	e05b      	b.n	8008936 <HAL_RCC_OscConfig+0x592>
 800887e:	bf00      	nop
 8008880:	58024400 	.word	0x58024400
 8008884:	58024800 	.word	0x58024800
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	689b      	ldr	r3, [r3, #8]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d112      	bne.n	80088b6 <HAL_RCC_OscConfig+0x512>
 8008890:	4b9d      	ldr	r3, [pc, #628]	@ (8008b08 <HAL_RCC_OscConfig+0x764>)
 8008892:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008894:	4a9c      	ldr	r2, [pc, #624]	@ (8008b08 <HAL_RCC_OscConfig+0x764>)
 8008896:	f023 0301 	bic.w	r3, r3, #1
 800889a:	6713      	str	r3, [r2, #112]	@ 0x70
 800889c:	4b9a      	ldr	r3, [pc, #616]	@ (8008b08 <HAL_RCC_OscConfig+0x764>)
 800889e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088a0:	4a99      	ldr	r2, [pc, #612]	@ (8008b08 <HAL_RCC_OscConfig+0x764>)
 80088a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80088a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80088a8:	4b97      	ldr	r3, [pc, #604]	@ (8008b08 <HAL_RCC_OscConfig+0x764>)
 80088aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088ac:	4a96      	ldr	r2, [pc, #600]	@ (8008b08 <HAL_RCC_OscConfig+0x764>)
 80088ae:	f023 0304 	bic.w	r3, r3, #4
 80088b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80088b4:	e03f      	b.n	8008936 <HAL_RCC_OscConfig+0x592>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	689b      	ldr	r3, [r3, #8]
 80088ba:	2b05      	cmp	r3, #5
 80088bc:	d112      	bne.n	80088e4 <HAL_RCC_OscConfig+0x540>
 80088be:	4b92      	ldr	r3, [pc, #584]	@ (8008b08 <HAL_RCC_OscConfig+0x764>)
 80088c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088c2:	4a91      	ldr	r2, [pc, #580]	@ (8008b08 <HAL_RCC_OscConfig+0x764>)
 80088c4:	f043 0304 	orr.w	r3, r3, #4
 80088c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80088ca:	4b8f      	ldr	r3, [pc, #572]	@ (8008b08 <HAL_RCC_OscConfig+0x764>)
 80088cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088ce:	4a8e      	ldr	r2, [pc, #568]	@ (8008b08 <HAL_RCC_OscConfig+0x764>)
 80088d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80088d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80088d6:	4b8c      	ldr	r3, [pc, #560]	@ (8008b08 <HAL_RCC_OscConfig+0x764>)
 80088d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088da:	4a8b      	ldr	r2, [pc, #556]	@ (8008b08 <HAL_RCC_OscConfig+0x764>)
 80088dc:	f043 0301 	orr.w	r3, r3, #1
 80088e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80088e2:	e028      	b.n	8008936 <HAL_RCC_OscConfig+0x592>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	2b85      	cmp	r3, #133	@ 0x85
 80088ea:	d112      	bne.n	8008912 <HAL_RCC_OscConfig+0x56e>
 80088ec:	4b86      	ldr	r3, [pc, #536]	@ (8008b08 <HAL_RCC_OscConfig+0x764>)
 80088ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088f0:	4a85      	ldr	r2, [pc, #532]	@ (8008b08 <HAL_RCC_OscConfig+0x764>)
 80088f2:	f043 0304 	orr.w	r3, r3, #4
 80088f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80088f8:	4b83      	ldr	r3, [pc, #524]	@ (8008b08 <HAL_RCC_OscConfig+0x764>)
 80088fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088fc:	4a82      	ldr	r2, [pc, #520]	@ (8008b08 <HAL_RCC_OscConfig+0x764>)
 80088fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008902:	6713      	str	r3, [r2, #112]	@ 0x70
 8008904:	4b80      	ldr	r3, [pc, #512]	@ (8008b08 <HAL_RCC_OscConfig+0x764>)
 8008906:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008908:	4a7f      	ldr	r2, [pc, #508]	@ (8008b08 <HAL_RCC_OscConfig+0x764>)
 800890a:	f043 0301 	orr.w	r3, r3, #1
 800890e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008910:	e011      	b.n	8008936 <HAL_RCC_OscConfig+0x592>
 8008912:	4b7d      	ldr	r3, [pc, #500]	@ (8008b08 <HAL_RCC_OscConfig+0x764>)
 8008914:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008916:	4a7c      	ldr	r2, [pc, #496]	@ (8008b08 <HAL_RCC_OscConfig+0x764>)
 8008918:	f023 0301 	bic.w	r3, r3, #1
 800891c:	6713      	str	r3, [r2, #112]	@ 0x70
 800891e:	4b7a      	ldr	r3, [pc, #488]	@ (8008b08 <HAL_RCC_OscConfig+0x764>)
 8008920:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008922:	4a79      	ldr	r2, [pc, #484]	@ (8008b08 <HAL_RCC_OscConfig+0x764>)
 8008924:	f023 0304 	bic.w	r3, r3, #4
 8008928:	6713      	str	r3, [r2, #112]	@ 0x70
 800892a:	4b77      	ldr	r3, [pc, #476]	@ (8008b08 <HAL_RCC_OscConfig+0x764>)
 800892c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800892e:	4a76      	ldr	r2, [pc, #472]	@ (8008b08 <HAL_RCC_OscConfig+0x764>)
 8008930:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008934:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	689b      	ldr	r3, [r3, #8]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d015      	beq.n	800896a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800893e:	f7f9 feaf 	bl	80026a0 <HAL_GetTick>
 8008942:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008944:	e00a      	b.n	800895c <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008946:	f7f9 feab 	bl	80026a0 <HAL_GetTick>
 800894a:	4602      	mov	r2, r0
 800894c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800894e:	1ad3      	subs	r3, r2, r3
 8008950:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008954:	4293      	cmp	r3, r2
 8008956:	d901      	bls.n	800895c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8008958:	2303      	movs	r3, #3
 800895a:	e14c      	b.n	8008bf6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800895c:	4b6a      	ldr	r3, [pc, #424]	@ (8008b08 <HAL_RCC_OscConfig+0x764>)
 800895e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008960:	f003 0302 	and.w	r3, r3, #2
 8008964:	2b00      	cmp	r3, #0
 8008966:	d0ee      	beq.n	8008946 <HAL_RCC_OscConfig+0x5a2>
 8008968:	e014      	b.n	8008994 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800896a:	f7f9 fe99 	bl	80026a0 <HAL_GetTick>
 800896e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008970:	e00a      	b.n	8008988 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008972:	f7f9 fe95 	bl	80026a0 <HAL_GetTick>
 8008976:	4602      	mov	r2, r0
 8008978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800897a:	1ad3      	subs	r3, r2, r3
 800897c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008980:	4293      	cmp	r3, r2
 8008982:	d901      	bls.n	8008988 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8008984:	2303      	movs	r3, #3
 8008986:	e136      	b.n	8008bf6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008988:	4b5f      	ldr	r3, [pc, #380]	@ (8008b08 <HAL_RCC_OscConfig+0x764>)
 800898a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800898c:	f003 0302 	and.w	r3, r3, #2
 8008990:	2b00      	cmp	r3, #0
 8008992:	d1ee      	bne.n	8008972 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008998:	2b00      	cmp	r3, #0
 800899a:	f000 812b 	beq.w	8008bf4 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800899e:	4b5a      	ldr	r3, [pc, #360]	@ (8008b08 <HAL_RCC_OscConfig+0x764>)
 80089a0:	691b      	ldr	r3, [r3, #16]
 80089a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80089a6:	2b18      	cmp	r3, #24
 80089a8:	f000 80bb 	beq.w	8008b22 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089b0:	2b02      	cmp	r3, #2
 80089b2:	f040 8095 	bne.w	8008ae0 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089b6:	4b54      	ldr	r3, [pc, #336]	@ (8008b08 <HAL_RCC_OscConfig+0x764>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a53      	ldr	r2, [pc, #332]	@ (8008b08 <HAL_RCC_OscConfig+0x764>)
 80089bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80089c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089c2:	f7f9 fe6d 	bl	80026a0 <HAL_GetTick>
 80089c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80089c8:	e008      	b.n	80089dc <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80089ca:	f7f9 fe69 	bl	80026a0 <HAL_GetTick>
 80089ce:	4602      	mov	r2, r0
 80089d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089d2:	1ad3      	subs	r3, r2, r3
 80089d4:	2b02      	cmp	r3, #2
 80089d6:	d901      	bls.n	80089dc <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80089d8:	2303      	movs	r3, #3
 80089da:	e10c      	b.n	8008bf6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80089dc:	4b4a      	ldr	r3, [pc, #296]	@ (8008b08 <HAL_RCC_OscConfig+0x764>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d1f0      	bne.n	80089ca <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80089e8:	4b47      	ldr	r3, [pc, #284]	@ (8008b08 <HAL_RCC_OscConfig+0x764>)
 80089ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80089ec:	4b47      	ldr	r3, [pc, #284]	@ (8008b0c <HAL_RCC_OscConfig+0x768>)
 80089ee:	4013      	ands	r3, r2
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80089f4:	687a      	ldr	r2, [r7, #4]
 80089f6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80089f8:	0112      	lsls	r2, r2, #4
 80089fa:	430a      	orrs	r2, r1
 80089fc:	4942      	ldr	r1, [pc, #264]	@ (8008b08 <HAL_RCC_OscConfig+0x764>)
 80089fe:	4313      	orrs	r3, r2
 8008a00:	628b      	str	r3, [r1, #40]	@ 0x28
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a06:	3b01      	subs	r3, #1
 8008a08:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a10:	3b01      	subs	r3, #1
 8008a12:	025b      	lsls	r3, r3, #9
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	431a      	orrs	r2, r3
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a1c:	3b01      	subs	r3, #1
 8008a1e:	041b      	lsls	r3, r3, #16
 8008a20:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008a24:	431a      	orrs	r2, r3
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a2a:	3b01      	subs	r3, #1
 8008a2c:	061b      	lsls	r3, r3, #24
 8008a2e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008a32:	4935      	ldr	r1, [pc, #212]	@ (8008b08 <HAL_RCC_OscConfig+0x764>)
 8008a34:	4313      	orrs	r3, r2
 8008a36:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008a38:	4b33      	ldr	r3, [pc, #204]	@ (8008b08 <HAL_RCC_OscConfig+0x764>)
 8008a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a3c:	4a32      	ldr	r2, [pc, #200]	@ (8008b08 <HAL_RCC_OscConfig+0x764>)
 8008a3e:	f023 0301 	bic.w	r3, r3, #1
 8008a42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008a44:	4b30      	ldr	r3, [pc, #192]	@ (8008b08 <HAL_RCC_OscConfig+0x764>)
 8008a46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a48:	4b31      	ldr	r3, [pc, #196]	@ (8008b10 <HAL_RCC_OscConfig+0x76c>)
 8008a4a:	4013      	ands	r3, r2
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008a50:	00d2      	lsls	r2, r2, #3
 8008a52:	492d      	ldr	r1, [pc, #180]	@ (8008b08 <HAL_RCC_OscConfig+0x764>)
 8008a54:	4313      	orrs	r3, r2
 8008a56:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008a58:	4b2b      	ldr	r3, [pc, #172]	@ (8008b08 <HAL_RCC_OscConfig+0x764>)
 8008a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a5c:	f023 020c 	bic.w	r2, r3, #12
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a64:	4928      	ldr	r1, [pc, #160]	@ (8008b08 <HAL_RCC_OscConfig+0x764>)
 8008a66:	4313      	orrs	r3, r2
 8008a68:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008a6a:	4b27      	ldr	r3, [pc, #156]	@ (8008b08 <HAL_RCC_OscConfig+0x764>)
 8008a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a6e:	f023 0202 	bic.w	r2, r3, #2
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a76:	4924      	ldr	r1, [pc, #144]	@ (8008b08 <HAL_RCC_OscConfig+0x764>)
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008a7c:	4b22      	ldr	r3, [pc, #136]	@ (8008b08 <HAL_RCC_OscConfig+0x764>)
 8008a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a80:	4a21      	ldr	r2, [pc, #132]	@ (8008b08 <HAL_RCC_OscConfig+0x764>)
 8008a82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a88:	4b1f      	ldr	r3, [pc, #124]	@ (8008b08 <HAL_RCC_OscConfig+0x764>)
 8008a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a8c:	4a1e      	ldr	r2, [pc, #120]	@ (8008b08 <HAL_RCC_OscConfig+0x764>)
 8008a8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008a92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008a94:	4b1c      	ldr	r3, [pc, #112]	@ (8008b08 <HAL_RCC_OscConfig+0x764>)
 8008a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a98:	4a1b      	ldr	r2, [pc, #108]	@ (8008b08 <HAL_RCC_OscConfig+0x764>)
 8008a9a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008a9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008aa0:	4b19      	ldr	r3, [pc, #100]	@ (8008b08 <HAL_RCC_OscConfig+0x764>)
 8008aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aa4:	4a18      	ldr	r2, [pc, #96]	@ (8008b08 <HAL_RCC_OscConfig+0x764>)
 8008aa6:	f043 0301 	orr.w	r3, r3, #1
 8008aaa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008aac:	4b16      	ldr	r3, [pc, #88]	@ (8008b08 <HAL_RCC_OscConfig+0x764>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a15      	ldr	r2, [pc, #84]	@ (8008b08 <HAL_RCC_OscConfig+0x764>)
 8008ab2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008ab6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ab8:	f7f9 fdf2 	bl	80026a0 <HAL_GetTick>
 8008abc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008abe:	e008      	b.n	8008ad2 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ac0:	f7f9 fdee 	bl	80026a0 <HAL_GetTick>
 8008ac4:	4602      	mov	r2, r0
 8008ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ac8:	1ad3      	subs	r3, r2, r3
 8008aca:	2b02      	cmp	r3, #2
 8008acc:	d901      	bls.n	8008ad2 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8008ace:	2303      	movs	r3, #3
 8008ad0:	e091      	b.n	8008bf6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8008b08 <HAL_RCC_OscConfig+0x764>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d0f0      	beq.n	8008ac0 <HAL_RCC_OscConfig+0x71c>
 8008ade:	e089      	b.n	8008bf4 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ae0:	4b09      	ldr	r3, [pc, #36]	@ (8008b08 <HAL_RCC_OscConfig+0x764>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a08      	ldr	r2, [pc, #32]	@ (8008b08 <HAL_RCC_OscConfig+0x764>)
 8008ae6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008aea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aec:	f7f9 fdd8 	bl	80026a0 <HAL_GetTick>
 8008af0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008af2:	e00f      	b.n	8008b14 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008af4:	f7f9 fdd4 	bl	80026a0 <HAL_GetTick>
 8008af8:	4602      	mov	r2, r0
 8008afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008afc:	1ad3      	subs	r3, r2, r3
 8008afe:	2b02      	cmp	r3, #2
 8008b00:	d908      	bls.n	8008b14 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8008b02:	2303      	movs	r3, #3
 8008b04:	e077      	b.n	8008bf6 <HAL_RCC_OscConfig+0x852>
 8008b06:	bf00      	nop
 8008b08:	58024400 	.word	0x58024400
 8008b0c:	fffffc0c 	.word	0xfffffc0c
 8008b10:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008b14:	4b3a      	ldr	r3, [pc, #232]	@ (8008c00 <HAL_RCC_OscConfig+0x85c>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d1e9      	bne.n	8008af4 <HAL_RCC_OscConfig+0x750>
 8008b20:	e068      	b.n	8008bf4 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008b22:	4b37      	ldr	r3, [pc, #220]	@ (8008c00 <HAL_RCC_OscConfig+0x85c>)
 8008b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b26:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008b28:	4b35      	ldr	r3, [pc, #212]	@ (8008c00 <HAL_RCC_OscConfig+0x85c>)
 8008b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b2c:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	d031      	beq.n	8008b9a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	f003 0203 	and.w	r2, r3, #3
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d12a      	bne.n	8008b9a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	091b      	lsrs	r3, r3, #4
 8008b48:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d122      	bne.n	8008b9a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b5e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d11a      	bne.n	8008b9a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	0a5b      	lsrs	r3, r3, #9
 8008b68:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b70:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d111      	bne.n	8008b9a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	0c1b      	lsrs	r3, r3, #16
 8008b7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b82:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008b84:	429a      	cmp	r2, r3
 8008b86:	d108      	bne.n	8008b9a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	0e1b      	lsrs	r3, r3, #24
 8008b8c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b94:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d001      	beq.n	8008b9e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	e02b      	b.n	8008bf6 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008b9e:	4b18      	ldr	r3, [pc, #96]	@ (8008c00 <HAL_RCC_OscConfig+0x85c>)
 8008ba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ba2:	08db      	lsrs	r3, r3, #3
 8008ba4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008ba8:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008bae:	693a      	ldr	r2, [r7, #16]
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	d01f      	beq.n	8008bf4 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008bb4:	4b12      	ldr	r3, [pc, #72]	@ (8008c00 <HAL_RCC_OscConfig+0x85c>)
 8008bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bb8:	4a11      	ldr	r2, [pc, #68]	@ (8008c00 <HAL_RCC_OscConfig+0x85c>)
 8008bba:	f023 0301 	bic.w	r3, r3, #1
 8008bbe:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008bc0:	f7f9 fd6e 	bl	80026a0 <HAL_GetTick>
 8008bc4:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008bc6:	bf00      	nop
 8008bc8:	f7f9 fd6a 	bl	80026a0 <HAL_GetTick>
 8008bcc:	4602      	mov	r2, r0
 8008bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d0f9      	beq.n	8008bc8 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008bd4:	4b0a      	ldr	r3, [pc, #40]	@ (8008c00 <HAL_RCC_OscConfig+0x85c>)
 8008bd6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8008c04 <HAL_RCC_OscConfig+0x860>)
 8008bda:	4013      	ands	r3, r2
 8008bdc:	687a      	ldr	r2, [r7, #4]
 8008bde:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008be0:	00d2      	lsls	r2, r2, #3
 8008be2:	4907      	ldr	r1, [pc, #28]	@ (8008c00 <HAL_RCC_OscConfig+0x85c>)
 8008be4:	4313      	orrs	r3, r2
 8008be6:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008be8:	4b05      	ldr	r3, [pc, #20]	@ (8008c00 <HAL_RCC_OscConfig+0x85c>)
 8008bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bec:	4a04      	ldr	r2, [pc, #16]	@ (8008c00 <HAL_RCC_OscConfig+0x85c>)
 8008bee:	f043 0301 	orr.w	r3, r3, #1
 8008bf2:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008bf4:	2300      	movs	r3, #0
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3730      	adds	r7, #48	@ 0x30
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}
 8008bfe:	bf00      	nop
 8008c00:	58024400 	.word	0x58024400
 8008c04:	ffff0007 	.word	0xffff0007

08008c08 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b086      	sub	sp, #24
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
 8008c10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d101      	bne.n	8008c1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008c18:	2301      	movs	r3, #1
 8008c1a:	e19c      	b.n	8008f56 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008c1c:	4b8a      	ldr	r3, [pc, #552]	@ (8008e48 <HAL_RCC_ClockConfig+0x240>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f003 030f 	and.w	r3, r3, #15
 8008c24:	683a      	ldr	r2, [r7, #0]
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d910      	bls.n	8008c4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c2a:	4b87      	ldr	r3, [pc, #540]	@ (8008e48 <HAL_RCC_ClockConfig+0x240>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f023 020f 	bic.w	r2, r3, #15
 8008c32:	4985      	ldr	r1, [pc, #532]	@ (8008e48 <HAL_RCC_ClockConfig+0x240>)
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	4313      	orrs	r3, r2
 8008c38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c3a:	4b83      	ldr	r3, [pc, #524]	@ (8008e48 <HAL_RCC_ClockConfig+0x240>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f003 030f 	and.w	r3, r3, #15
 8008c42:	683a      	ldr	r2, [r7, #0]
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d001      	beq.n	8008c4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008c48:	2301      	movs	r3, #1
 8008c4a:	e184      	b.n	8008f56 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f003 0304 	and.w	r3, r3, #4
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d010      	beq.n	8008c7a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	691a      	ldr	r2, [r3, #16]
 8008c5c:	4b7b      	ldr	r3, [pc, #492]	@ (8008e4c <HAL_RCC_ClockConfig+0x244>)
 8008c5e:	699b      	ldr	r3, [r3, #24]
 8008c60:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008c64:	429a      	cmp	r2, r3
 8008c66:	d908      	bls.n	8008c7a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008c68:	4b78      	ldr	r3, [pc, #480]	@ (8008e4c <HAL_RCC_ClockConfig+0x244>)
 8008c6a:	699b      	ldr	r3, [r3, #24]
 8008c6c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	691b      	ldr	r3, [r3, #16]
 8008c74:	4975      	ldr	r1, [pc, #468]	@ (8008e4c <HAL_RCC_ClockConfig+0x244>)
 8008c76:	4313      	orrs	r3, r2
 8008c78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f003 0308 	and.w	r3, r3, #8
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d010      	beq.n	8008ca8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	695a      	ldr	r2, [r3, #20]
 8008c8a:	4b70      	ldr	r3, [pc, #448]	@ (8008e4c <HAL_RCC_ClockConfig+0x244>)
 8008c8c:	69db      	ldr	r3, [r3, #28]
 8008c8e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d908      	bls.n	8008ca8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008c96:	4b6d      	ldr	r3, [pc, #436]	@ (8008e4c <HAL_RCC_ClockConfig+0x244>)
 8008c98:	69db      	ldr	r3, [r3, #28]
 8008c9a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	695b      	ldr	r3, [r3, #20]
 8008ca2:	496a      	ldr	r1, [pc, #424]	@ (8008e4c <HAL_RCC_ClockConfig+0x244>)
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f003 0310 	and.w	r3, r3, #16
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d010      	beq.n	8008cd6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	699a      	ldr	r2, [r3, #24]
 8008cb8:	4b64      	ldr	r3, [pc, #400]	@ (8008e4c <HAL_RCC_ClockConfig+0x244>)
 8008cba:	69db      	ldr	r3, [r3, #28]
 8008cbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d908      	bls.n	8008cd6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008cc4:	4b61      	ldr	r3, [pc, #388]	@ (8008e4c <HAL_RCC_ClockConfig+0x244>)
 8008cc6:	69db      	ldr	r3, [r3, #28]
 8008cc8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	699b      	ldr	r3, [r3, #24]
 8008cd0:	495e      	ldr	r1, [pc, #376]	@ (8008e4c <HAL_RCC_ClockConfig+0x244>)
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f003 0320 	and.w	r3, r3, #32
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d010      	beq.n	8008d04 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	69da      	ldr	r2, [r3, #28]
 8008ce6:	4b59      	ldr	r3, [pc, #356]	@ (8008e4c <HAL_RCC_ClockConfig+0x244>)
 8008ce8:	6a1b      	ldr	r3, [r3, #32]
 8008cea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d908      	bls.n	8008d04 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008cf2:	4b56      	ldr	r3, [pc, #344]	@ (8008e4c <HAL_RCC_ClockConfig+0x244>)
 8008cf4:	6a1b      	ldr	r3, [r3, #32]
 8008cf6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	69db      	ldr	r3, [r3, #28]
 8008cfe:	4953      	ldr	r1, [pc, #332]	@ (8008e4c <HAL_RCC_ClockConfig+0x244>)
 8008d00:	4313      	orrs	r3, r2
 8008d02:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f003 0302 	and.w	r3, r3, #2
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d010      	beq.n	8008d32 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	68da      	ldr	r2, [r3, #12]
 8008d14:	4b4d      	ldr	r3, [pc, #308]	@ (8008e4c <HAL_RCC_ClockConfig+0x244>)
 8008d16:	699b      	ldr	r3, [r3, #24]
 8008d18:	f003 030f 	and.w	r3, r3, #15
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d908      	bls.n	8008d32 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d20:	4b4a      	ldr	r3, [pc, #296]	@ (8008e4c <HAL_RCC_ClockConfig+0x244>)
 8008d22:	699b      	ldr	r3, [r3, #24]
 8008d24:	f023 020f 	bic.w	r2, r3, #15
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	68db      	ldr	r3, [r3, #12]
 8008d2c:	4947      	ldr	r1, [pc, #284]	@ (8008e4c <HAL_RCC_ClockConfig+0x244>)
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f003 0301 	and.w	r3, r3, #1
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d055      	beq.n	8008dea <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008d3e:	4b43      	ldr	r3, [pc, #268]	@ (8008e4c <HAL_RCC_ClockConfig+0x244>)
 8008d40:	699b      	ldr	r3, [r3, #24]
 8008d42:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	689b      	ldr	r3, [r3, #8]
 8008d4a:	4940      	ldr	r1, [pc, #256]	@ (8008e4c <HAL_RCC_ClockConfig+0x244>)
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	2b02      	cmp	r3, #2
 8008d56:	d107      	bne.n	8008d68 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008d58:	4b3c      	ldr	r3, [pc, #240]	@ (8008e4c <HAL_RCC_ClockConfig+0x244>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d121      	bne.n	8008da8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008d64:	2301      	movs	r3, #1
 8008d66:	e0f6      	b.n	8008f56 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	2b03      	cmp	r3, #3
 8008d6e:	d107      	bne.n	8008d80 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008d70:	4b36      	ldr	r3, [pc, #216]	@ (8008e4c <HAL_RCC_ClockConfig+0x244>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d115      	bne.n	8008da8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	e0ea      	b.n	8008f56 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d107      	bne.n	8008d98 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008d88:	4b30      	ldr	r3, [pc, #192]	@ (8008e4c <HAL_RCC_ClockConfig+0x244>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d109      	bne.n	8008da8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008d94:	2301      	movs	r3, #1
 8008d96:	e0de      	b.n	8008f56 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d98:	4b2c      	ldr	r3, [pc, #176]	@ (8008e4c <HAL_RCC_ClockConfig+0x244>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f003 0304 	and.w	r3, r3, #4
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d101      	bne.n	8008da8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008da4:	2301      	movs	r3, #1
 8008da6:	e0d6      	b.n	8008f56 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008da8:	4b28      	ldr	r3, [pc, #160]	@ (8008e4c <HAL_RCC_ClockConfig+0x244>)
 8008daa:	691b      	ldr	r3, [r3, #16]
 8008dac:	f023 0207 	bic.w	r2, r3, #7
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	4925      	ldr	r1, [pc, #148]	@ (8008e4c <HAL_RCC_ClockConfig+0x244>)
 8008db6:	4313      	orrs	r3, r2
 8008db8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008dba:	f7f9 fc71 	bl	80026a0 <HAL_GetTick>
 8008dbe:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008dc0:	e00a      	b.n	8008dd8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008dc2:	f7f9 fc6d 	bl	80026a0 <HAL_GetTick>
 8008dc6:	4602      	mov	r2, r0
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	1ad3      	subs	r3, r2, r3
 8008dcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d901      	bls.n	8008dd8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008dd4:	2303      	movs	r3, #3
 8008dd6:	e0be      	b.n	8008f56 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008dd8:	4b1c      	ldr	r3, [pc, #112]	@ (8008e4c <HAL_RCC_ClockConfig+0x244>)
 8008dda:	691b      	ldr	r3, [r3, #16]
 8008ddc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	00db      	lsls	r3, r3, #3
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d1eb      	bne.n	8008dc2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f003 0302 	and.w	r3, r3, #2
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d010      	beq.n	8008e18 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	68da      	ldr	r2, [r3, #12]
 8008dfa:	4b14      	ldr	r3, [pc, #80]	@ (8008e4c <HAL_RCC_ClockConfig+0x244>)
 8008dfc:	699b      	ldr	r3, [r3, #24]
 8008dfe:	f003 030f 	and.w	r3, r3, #15
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d208      	bcs.n	8008e18 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e06:	4b11      	ldr	r3, [pc, #68]	@ (8008e4c <HAL_RCC_ClockConfig+0x244>)
 8008e08:	699b      	ldr	r3, [r3, #24]
 8008e0a:	f023 020f 	bic.w	r2, r3, #15
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	68db      	ldr	r3, [r3, #12]
 8008e12:	490e      	ldr	r1, [pc, #56]	@ (8008e4c <HAL_RCC_ClockConfig+0x244>)
 8008e14:	4313      	orrs	r3, r2
 8008e16:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008e18:	4b0b      	ldr	r3, [pc, #44]	@ (8008e48 <HAL_RCC_ClockConfig+0x240>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f003 030f 	and.w	r3, r3, #15
 8008e20:	683a      	ldr	r2, [r7, #0]
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d214      	bcs.n	8008e50 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e26:	4b08      	ldr	r3, [pc, #32]	@ (8008e48 <HAL_RCC_ClockConfig+0x240>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f023 020f 	bic.w	r2, r3, #15
 8008e2e:	4906      	ldr	r1, [pc, #24]	@ (8008e48 <HAL_RCC_ClockConfig+0x240>)
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	4313      	orrs	r3, r2
 8008e34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e36:	4b04      	ldr	r3, [pc, #16]	@ (8008e48 <HAL_RCC_ClockConfig+0x240>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f003 030f 	and.w	r3, r3, #15
 8008e3e:	683a      	ldr	r2, [r7, #0]
 8008e40:	429a      	cmp	r2, r3
 8008e42:	d005      	beq.n	8008e50 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008e44:	2301      	movs	r3, #1
 8008e46:	e086      	b.n	8008f56 <HAL_RCC_ClockConfig+0x34e>
 8008e48:	52002000 	.word	0x52002000
 8008e4c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f003 0304 	and.w	r3, r3, #4
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d010      	beq.n	8008e7e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	691a      	ldr	r2, [r3, #16]
 8008e60:	4b3f      	ldr	r3, [pc, #252]	@ (8008f60 <HAL_RCC_ClockConfig+0x358>)
 8008e62:	699b      	ldr	r3, [r3, #24]
 8008e64:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d208      	bcs.n	8008e7e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008e6c:	4b3c      	ldr	r3, [pc, #240]	@ (8008f60 <HAL_RCC_ClockConfig+0x358>)
 8008e6e:	699b      	ldr	r3, [r3, #24]
 8008e70:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	691b      	ldr	r3, [r3, #16]
 8008e78:	4939      	ldr	r1, [pc, #228]	@ (8008f60 <HAL_RCC_ClockConfig+0x358>)
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f003 0308 	and.w	r3, r3, #8
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d010      	beq.n	8008eac <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	695a      	ldr	r2, [r3, #20]
 8008e8e:	4b34      	ldr	r3, [pc, #208]	@ (8008f60 <HAL_RCC_ClockConfig+0x358>)
 8008e90:	69db      	ldr	r3, [r3, #28]
 8008e92:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008e96:	429a      	cmp	r2, r3
 8008e98:	d208      	bcs.n	8008eac <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008e9a:	4b31      	ldr	r3, [pc, #196]	@ (8008f60 <HAL_RCC_ClockConfig+0x358>)
 8008e9c:	69db      	ldr	r3, [r3, #28]
 8008e9e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	695b      	ldr	r3, [r3, #20]
 8008ea6:	492e      	ldr	r1, [pc, #184]	@ (8008f60 <HAL_RCC_ClockConfig+0x358>)
 8008ea8:	4313      	orrs	r3, r2
 8008eaa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f003 0310 	and.w	r3, r3, #16
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d010      	beq.n	8008eda <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	699a      	ldr	r2, [r3, #24]
 8008ebc:	4b28      	ldr	r3, [pc, #160]	@ (8008f60 <HAL_RCC_ClockConfig+0x358>)
 8008ebe:	69db      	ldr	r3, [r3, #28]
 8008ec0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	d208      	bcs.n	8008eda <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008ec8:	4b25      	ldr	r3, [pc, #148]	@ (8008f60 <HAL_RCC_ClockConfig+0x358>)
 8008eca:	69db      	ldr	r3, [r3, #28]
 8008ecc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	699b      	ldr	r3, [r3, #24]
 8008ed4:	4922      	ldr	r1, [pc, #136]	@ (8008f60 <HAL_RCC_ClockConfig+0x358>)
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f003 0320 	and.w	r3, r3, #32
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d010      	beq.n	8008f08 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	69da      	ldr	r2, [r3, #28]
 8008eea:	4b1d      	ldr	r3, [pc, #116]	@ (8008f60 <HAL_RCC_ClockConfig+0x358>)
 8008eec:	6a1b      	ldr	r3, [r3, #32]
 8008eee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008ef2:	429a      	cmp	r2, r3
 8008ef4:	d208      	bcs.n	8008f08 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008ef6:	4b1a      	ldr	r3, [pc, #104]	@ (8008f60 <HAL_RCC_ClockConfig+0x358>)
 8008ef8:	6a1b      	ldr	r3, [r3, #32]
 8008efa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	69db      	ldr	r3, [r3, #28]
 8008f02:	4917      	ldr	r1, [pc, #92]	@ (8008f60 <HAL_RCC_ClockConfig+0x358>)
 8008f04:	4313      	orrs	r3, r2
 8008f06:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8008f08:	f000 f834 	bl	8008f74 <HAL_RCC_GetSysClockFreq>
 8008f0c:	4602      	mov	r2, r0
 8008f0e:	4b14      	ldr	r3, [pc, #80]	@ (8008f60 <HAL_RCC_ClockConfig+0x358>)
 8008f10:	699b      	ldr	r3, [r3, #24]
 8008f12:	0a1b      	lsrs	r3, r3, #8
 8008f14:	f003 030f 	and.w	r3, r3, #15
 8008f18:	4912      	ldr	r1, [pc, #72]	@ (8008f64 <HAL_RCC_ClockConfig+0x35c>)
 8008f1a:	5ccb      	ldrb	r3, [r1, r3]
 8008f1c:	f003 031f 	and.w	r3, r3, #31
 8008f20:	fa22 f303 	lsr.w	r3, r2, r3
 8008f24:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8008f26:	4b0e      	ldr	r3, [pc, #56]	@ (8008f60 <HAL_RCC_ClockConfig+0x358>)
 8008f28:	699b      	ldr	r3, [r3, #24]
 8008f2a:	f003 030f 	and.w	r3, r3, #15
 8008f2e:	4a0d      	ldr	r2, [pc, #52]	@ (8008f64 <HAL_RCC_ClockConfig+0x35c>)
 8008f30:	5cd3      	ldrb	r3, [r2, r3]
 8008f32:	f003 031f 	and.w	r3, r3, #31
 8008f36:	693a      	ldr	r2, [r7, #16]
 8008f38:	fa22 f303 	lsr.w	r3, r2, r3
 8008f3c:	4a0a      	ldr	r2, [pc, #40]	@ (8008f68 <HAL_RCC_ClockConfig+0x360>)
 8008f3e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008f40:	4a0a      	ldr	r2, [pc, #40]	@ (8008f6c <HAL_RCC_ClockConfig+0x364>)
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008f46:	4b0a      	ldr	r3, [pc, #40]	@ (8008f70 <HAL_RCC_ClockConfig+0x368>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f7f9 f882 	bl	8002054 <HAL_InitTick>
 8008f50:	4603      	mov	r3, r0
 8008f52:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3718      	adds	r7, #24
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}
 8008f5e:	bf00      	nop
 8008f60:	58024400 	.word	0x58024400
 8008f64:	08014f58 	.word	0x08014f58
 8008f68:	24000004 	.word	0x24000004
 8008f6c:	24000000 	.word	0x24000000
 8008f70:	24000008 	.word	0x24000008

08008f74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008f74:	b480      	push	{r7}
 8008f76:	b089      	sub	sp, #36	@ 0x24
 8008f78:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008f7a:	4bb3      	ldr	r3, [pc, #716]	@ (8009248 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f7c:	691b      	ldr	r3, [r3, #16]
 8008f7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008f82:	2b18      	cmp	r3, #24
 8008f84:	f200 8155 	bhi.w	8009232 <HAL_RCC_GetSysClockFreq+0x2be>
 8008f88:	a201      	add	r2, pc, #4	@ (adr r2, 8008f90 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f8e:	bf00      	nop
 8008f90:	08008ff5 	.word	0x08008ff5
 8008f94:	08009233 	.word	0x08009233
 8008f98:	08009233 	.word	0x08009233
 8008f9c:	08009233 	.word	0x08009233
 8008fa0:	08009233 	.word	0x08009233
 8008fa4:	08009233 	.word	0x08009233
 8008fa8:	08009233 	.word	0x08009233
 8008fac:	08009233 	.word	0x08009233
 8008fb0:	0800901b 	.word	0x0800901b
 8008fb4:	08009233 	.word	0x08009233
 8008fb8:	08009233 	.word	0x08009233
 8008fbc:	08009233 	.word	0x08009233
 8008fc0:	08009233 	.word	0x08009233
 8008fc4:	08009233 	.word	0x08009233
 8008fc8:	08009233 	.word	0x08009233
 8008fcc:	08009233 	.word	0x08009233
 8008fd0:	08009021 	.word	0x08009021
 8008fd4:	08009233 	.word	0x08009233
 8008fd8:	08009233 	.word	0x08009233
 8008fdc:	08009233 	.word	0x08009233
 8008fe0:	08009233 	.word	0x08009233
 8008fe4:	08009233 	.word	0x08009233
 8008fe8:	08009233 	.word	0x08009233
 8008fec:	08009233 	.word	0x08009233
 8008ff0:	08009027 	.word	0x08009027
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ff4:	4b94      	ldr	r3, [pc, #592]	@ (8009248 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f003 0320 	and.w	r3, r3, #32
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d009      	beq.n	8009014 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009000:	4b91      	ldr	r3, [pc, #580]	@ (8009248 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	08db      	lsrs	r3, r3, #3
 8009006:	f003 0303 	and.w	r3, r3, #3
 800900a:	4a90      	ldr	r2, [pc, #576]	@ (800924c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800900c:	fa22 f303 	lsr.w	r3, r2, r3
 8009010:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009012:	e111      	b.n	8009238 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009014:	4b8d      	ldr	r3, [pc, #564]	@ (800924c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009016:	61bb      	str	r3, [r7, #24]
      break;
 8009018:	e10e      	b.n	8009238 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800901a:	4b8d      	ldr	r3, [pc, #564]	@ (8009250 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800901c:	61bb      	str	r3, [r7, #24]
      break;
 800901e:	e10b      	b.n	8009238 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009020:	4b8c      	ldr	r3, [pc, #560]	@ (8009254 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009022:	61bb      	str	r3, [r7, #24]
      break;
 8009024:	e108      	b.n	8009238 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009026:	4b88      	ldr	r3, [pc, #544]	@ (8009248 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800902a:	f003 0303 	and.w	r3, r3, #3
 800902e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009030:	4b85      	ldr	r3, [pc, #532]	@ (8009248 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009034:	091b      	lsrs	r3, r3, #4
 8009036:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800903a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800903c:	4b82      	ldr	r3, [pc, #520]	@ (8009248 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800903e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009040:	f003 0301 	and.w	r3, r3, #1
 8009044:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009046:	4b80      	ldr	r3, [pc, #512]	@ (8009248 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009048:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800904a:	08db      	lsrs	r3, r3, #3
 800904c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009050:	68fa      	ldr	r2, [r7, #12]
 8009052:	fb02 f303 	mul.w	r3, r2, r3
 8009056:	ee07 3a90 	vmov	s15, r3
 800905a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800905e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	2b00      	cmp	r3, #0
 8009066:	f000 80e1 	beq.w	800922c <HAL_RCC_GetSysClockFreq+0x2b8>
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	2b02      	cmp	r3, #2
 800906e:	f000 8083 	beq.w	8009178 <HAL_RCC_GetSysClockFreq+0x204>
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	2b02      	cmp	r3, #2
 8009076:	f200 80a1 	bhi.w	80091bc <HAL_RCC_GetSysClockFreq+0x248>
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d003      	beq.n	8009088 <HAL_RCC_GetSysClockFreq+0x114>
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	2b01      	cmp	r3, #1
 8009084:	d056      	beq.n	8009134 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009086:	e099      	b.n	80091bc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009088:	4b6f      	ldr	r3, [pc, #444]	@ (8009248 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f003 0320 	and.w	r3, r3, #32
 8009090:	2b00      	cmp	r3, #0
 8009092:	d02d      	beq.n	80090f0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009094:	4b6c      	ldr	r3, [pc, #432]	@ (8009248 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	08db      	lsrs	r3, r3, #3
 800909a:	f003 0303 	and.w	r3, r3, #3
 800909e:	4a6b      	ldr	r2, [pc, #428]	@ (800924c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80090a0:	fa22 f303 	lsr.w	r3, r2, r3
 80090a4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	ee07 3a90 	vmov	s15, r3
 80090ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	ee07 3a90 	vmov	s15, r3
 80090b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090be:	4b62      	ldr	r3, [pc, #392]	@ (8009248 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090c6:	ee07 3a90 	vmov	s15, r3
 80090ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80090d2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8009258 <HAL_RCC_GetSysClockFreq+0x2e4>
 80090d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090ea:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80090ee:	e087      	b.n	8009200 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	ee07 3a90 	vmov	s15, r3
 80090f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090fa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800925c <HAL_RCC_GetSysClockFreq+0x2e8>
 80090fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009102:	4b51      	ldr	r3, [pc, #324]	@ (8009248 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800910a:	ee07 3a90 	vmov	s15, r3
 800910e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009112:	ed97 6a02 	vldr	s12, [r7, #8]
 8009116:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8009258 <HAL_RCC_GetSysClockFreq+0x2e4>
 800911a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800911e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009122:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800912a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800912e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009132:	e065      	b.n	8009200 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	ee07 3a90 	vmov	s15, r3
 800913a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800913e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8009260 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009146:	4b40      	ldr	r3, [pc, #256]	@ (8009248 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800914a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800914e:	ee07 3a90 	vmov	s15, r3
 8009152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009156:	ed97 6a02 	vldr	s12, [r7, #8]
 800915a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009258 <HAL_RCC_GetSysClockFreq+0x2e4>
 800915e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009166:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800916a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800916e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009172:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009176:	e043      	b.n	8009200 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	ee07 3a90 	vmov	s15, r3
 800917e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009182:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8009264 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800918a:	4b2f      	ldr	r3, [pc, #188]	@ (8009248 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800918c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800918e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009192:	ee07 3a90 	vmov	s15, r3
 8009196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800919a:	ed97 6a02 	vldr	s12, [r7, #8]
 800919e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8009258 <HAL_RCC_GetSysClockFreq+0x2e4>
 80091a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80091ba:	e021      	b.n	8009200 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	ee07 3a90 	vmov	s15, r3
 80091c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091c6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8009260 <HAL_RCC_GetSysClockFreq+0x2ec>
 80091ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091ce:	4b1e      	ldr	r3, [pc, #120]	@ (8009248 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091d6:	ee07 3a90 	vmov	s15, r3
 80091da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091de:	ed97 6a02 	vldr	s12, [r7, #8]
 80091e2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8009258 <HAL_RCC_GetSysClockFreq+0x2e4>
 80091e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80091fe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009200:	4b11      	ldr	r3, [pc, #68]	@ (8009248 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009204:	0a5b      	lsrs	r3, r3, #9
 8009206:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800920a:	3301      	adds	r3, #1
 800920c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	ee07 3a90 	vmov	s15, r3
 8009214:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009218:	edd7 6a07 	vldr	s13, [r7, #28]
 800921c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009220:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009224:	ee17 3a90 	vmov	r3, s15
 8009228:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800922a:	e005      	b.n	8009238 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800922c:	2300      	movs	r3, #0
 800922e:	61bb      	str	r3, [r7, #24]
      break;
 8009230:	e002      	b.n	8009238 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009232:	4b07      	ldr	r3, [pc, #28]	@ (8009250 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009234:	61bb      	str	r3, [r7, #24]
      break;
 8009236:	bf00      	nop
  }

  return sysclockfreq;
 8009238:	69bb      	ldr	r3, [r7, #24]
}
 800923a:	4618      	mov	r0, r3
 800923c:	3724      	adds	r7, #36	@ 0x24
 800923e:	46bd      	mov	sp, r7
 8009240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009244:	4770      	bx	lr
 8009246:	bf00      	nop
 8009248:	58024400 	.word	0x58024400
 800924c:	03d09000 	.word	0x03d09000
 8009250:	003d0900 	.word	0x003d0900
 8009254:	016e3600 	.word	0x016e3600
 8009258:	46000000 	.word	0x46000000
 800925c:	4c742400 	.word	0x4c742400
 8009260:	4a742400 	.word	0x4a742400
 8009264:	4bb71b00 	.word	0x4bb71b00

08009268 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b082      	sub	sp, #8
 800926c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800926e:	f7ff fe81 	bl	8008f74 <HAL_RCC_GetSysClockFreq>
 8009272:	4602      	mov	r2, r0
 8009274:	4b10      	ldr	r3, [pc, #64]	@ (80092b8 <HAL_RCC_GetHCLKFreq+0x50>)
 8009276:	699b      	ldr	r3, [r3, #24]
 8009278:	0a1b      	lsrs	r3, r3, #8
 800927a:	f003 030f 	and.w	r3, r3, #15
 800927e:	490f      	ldr	r1, [pc, #60]	@ (80092bc <HAL_RCC_GetHCLKFreq+0x54>)
 8009280:	5ccb      	ldrb	r3, [r1, r3]
 8009282:	f003 031f 	and.w	r3, r3, #31
 8009286:	fa22 f303 	lsr.w	r3, r2, r3
 800928a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800928c:	4b0a      	ldr	r3, [pc, #40]	@ (80092b8 <HAL_RCC_GetHCLKFreq+0x50>)
 800928e:	699b      	ldr	r3, [r3, #24]
 8009290:	f003 030f 	and.w	r3, r3, #15
 8009294:	4a09      	ldr	r2, [pc, #36]	@ (80092bc <HAL_RCC_GetHCLKFreq+0x54>)
 8009296:	5cd3      	ldrb	r3, [r2, r3]
 8009298:	f003 031f 	and.w	r3, r3, #31
 800929c:	687a      	ldr	r2, [r7, #4]
 800929e:	fa22 f303 	lsr.w	r3, r2, r3
 80092a2:	4a07      	ldr	r2, [pc, #28]	@ (80092c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80092a4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80092a6:	4a07      	ldr	r2, [pc, #28]	@ (80092c4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80092ac:	4b04      	ldr	r3, [pc, #16]	@ (80092c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80092ae:	681b      	ldr	r3, [r3, #0]
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3708      	adds	r7, #8
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}
 80092b8:	58024400 	.word	0x58024400
 80092bc:	08014f58 	.word	0x08014f58
 80092c0:	24000004 	.word	0x24000004
 80092c4:	24000000 	.word	0x24000000

080092c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80092cc:	f7ff ffcc 	bl	8009268 <HAL_RCC_GetHCLKFreq>
 80092d0:	4602      	mov	r2, r0
 80092d2:	4b06      	ldr	r3, [pc, #24]	@ (80092ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80092d4:	69db      	ldr	r3, [r3, #28]
 80092d6:	091b      	lsrs	r3, r3, #4
 80092d8:	f003 0307 	and.w	r3, r3, #7
 80092dc:	4904      	ldr	r1, [pc, #16]	@ (80092f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80092de:	5ccb      	ldrb	r3, [r1, r3]
 80092e0:	f003 031f 	and.w	r3, r3, #31
 80092e4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	bd80      	pop	{r7, pc}
 80092ec:	58024400 	.word	0x58024400
 80092f0:	08014f58 	.word	0x08014f58

080092f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80092f8:	f7ff ffb6 	bl	8009268 <HAL_RCC_GetHCLKFreq>
 80092fc:	4602      	mov	r2, r0
 80092fe:	4b06      	ldr	r3, [pc, #24]	@ (8009318 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009300:	69db      	ldr	r3, [r3, #28]
 8009302:	0a1b      	lsrs	r3, r3, #8
 8009304:	f003 0307 	and.w	r3, r3, #7
 8009308:	4904      	ldr	r1, [pc, #16]	@ (800931c <HAL_RCC_GetPCLK2Freq+0x28>)
 800930a:	5ccb      	ldrb	r3, [r1, r3]
 800930c:	f003 031f 	and.w	r3, r3, #31
 8009310:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8009314:	4618      	mov	r0, r3
 8009316:	bd80      	pop	{r7, pc}
 8009318:	58024400 	.word	0x58024400
 800931c:	08014f58 	.word	0x08014f58

08009320 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009320:	b480      	push	{r7}
 8009322:	b083      	sub	sp, #12
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
 8009328:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	223f      	movs	r2, #63	@ 0x3f
 800932e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009330:	4b1a      	ldr	r3, [pc, #104]	@ (800939c <HAL_RCC_GetClockConfig+0x7c>)
 8009332:	691b      	ldr	r3, [r3, #16]
 8009334:	f003 0207 	and.w	r2, r3, #7
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 800933c:	4b17      	ldr	r3, [pc, #92]	@ (800939c <HAL_RCC_GetClockConfig+0x7c>)
 800933e:	699b      	ldr	r3, [r3, #24]
 8009340:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 8009348:	4b14      	ldr	r3, [pc, #80]	@ (800939c <HAL_RCC_GetClockConfig+0x7c>)
 800934a:	699b      	ldr	r3, [r3, #24]
 800934c:	f003 020f 	and.w	r2, r3, #15
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 8009354:	4b11      	ldr	r3, [pc, #68]	@ (800939c <HAL_RCC_GetClockConfig+0x7c>)
 8009356:	699b      	ldr	r3, [r3, #24]
 8009358:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 8009360:	4b0e      	ldr	r3, [pc, #56]	@ (800939c <HAL_RCC_GetClockConfig+0x7c>)
 8009362:	69db      	ldr	r3, [r3, #28]
 8009364:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 800936c:	4b0b      	ldr	r3, [pc, #44]	@ (800939c <HAL_RCC_GetClockConfig+0x7c>)
 800936e:	69db      	ldr	r3, [r3, #28]
 8009370:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 8009378:	4b08      	ldr	r3, [pc, #32]	@ (800939c <HAL_RCC_GetClockConfig+0x7c>)
 800937a:	6a1b      	ldr	r3, [r3, #32]
 800937c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009384:	4b06      	ldr	r3, [pc, #24]	@ (80093a0 <HAL_RCC_GetClockConfig+0x80>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f003 020f 	and.w	r2, r3, #15
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	601a      	str	r2, [r3, #0]
}
 8009390:	bf00      	nop
 8009392:	370c      	adds	r7, #12
 8009394:	46bd      	mov	sp, r7
 8009396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939a:	4770      	bx	lr
 800939c:	58024400 	.word	0x58024400
 80093a0:	52002000 	.word	0x52002000

080093a4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80093a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80093a8:	b0c8      	sub	sp, #288	@ 0x120
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80093b0:	2300      	movs	r3, #0
 80093b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80093b6:	2300      	movs	r3, #0
 80093b8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80093bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80093c8:	2500      	movs	r5, #0
 80093ca:	ea54 0305 	orrs.w	r3, r4, r5
 80093ce:	d049      	beq.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80093d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80093d6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80093da:	d02f      	beq.n	800943c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80093dc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80093e0:	d828      	bhi.n	8009434 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80093e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80093e6:	d01a      	beq.n	800941e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80093e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80093ec:	d822      	bhi.n	8009434 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d003      	beq.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0x56>
 80093f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80093f6:	d007      	beq.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80093f8:	e01c      	b.n	8009434 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093fa:	4ba7      	ldr	r3, [pc, #668]	@ (8009698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80093fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093fe:	4aa6      	ldr	r2, [pc, #664]	@ (8009698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009400:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009404:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009406:	e01a      	b.n	800943e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009408:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800940c:	3308      	adds	r3, #8
 800940e:	2102      	movs	r1, #2
 8009410:	4618      	mov	r0, r3
 8009412:	f001 fc43 	bl	800ac9c <RCCEx_PLL2_Config>
 8009416:	4603      	mov	r3, r0
 8009418:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800941c:	e00f      	b.n	800943e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800941e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009422:	3328      	adds	r3, #40	@ 0x28
 8009424:	2102      	movs	r1, #2
 8009426:	4618      	mov	r0, r3
 8009428:	f001 fcea 	bl	800ae00 <RCCEx_PLL3_Config>
 800942c:	4603      	mov	r3, r0
 800942e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009432:	e004      	b.n	800943e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009434:	2301      	movs	r3, #1
 8009436:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800943a:	e000      	b.n	800943e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800943c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800943e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009442:	2b00      	cmp	r3, #0
 8009444:	d10a      	bne.n	800945c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009446:	4b94      	ldr	r3, [pc, #592]	@ (8009698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009448:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800944a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800944e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009452:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009454:	4a90      	ldr	r2, [pc, #576]	@ (8009698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009456:	430b      	orrs	r3, r1
 8009458:	6513      	str	r3, [r2, #80]	@ 0x50
 800945a:	e003      	b.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800945c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009460:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009464:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800946c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8009470:	f04f 0900 	mov.w	r9, #0
 8009474:	ea58 0309 	orrs.w	r3, r8, r9
 8009478:	d047      	beq.n	800950a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800947a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800947e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009480:	2b04      	cmp	r3, #4
 8009482:	d82a      	bhi.n	80094da <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009484:	a201      	add	r2, pc, #4	@ (adr r2, 800948c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800948a:	bf00      	nop
 800948c:	080094a1 	.word	0x080094a1
 8009490:	080094af 	.word	0x080094af
 8009494:	080094c5 	.word	0x080094c5
 8009498:	080094e3 	.word	0x080094e3
 800949c:	080094e3 	.word	0x080094e3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094a0:	4b7d      	ldr	r3, [pc, #500]	@ (8009698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80094a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094a4:	4a7c      	ldr	r2, [pc, #496]	@ (8009698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80094a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80094aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80094ac:	e01a      	b.n	80094e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80094ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094b2:	3308      	adds	r3, #8
 80094b4:	2100      	movs	r1, #0
 80094b6:	4618      	mov	r0, r3
 80094b8:	f001 fbf0 	bl	800ac9c <RCCEx_PLL2_Config>
 80094bc:	4603      	mov	r3, r0
 80094be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80094c2:	e00f      	b.n	80094e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80094c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094c8:	3328      	adds	r3, #40	@ 0x28
 80094ca:	2100      	movs	r1, #0
 80094cc:	4618      	mov	r0, r3
 80094ce:	f001 fc97 	bl	800ae00 <RCCEx_PLL3_Config>
 80094d2:	4603      	mov	r3, r0
 80094d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80094d8:	e004      	b.n	80094e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80094da:	2301      	movs	r3, #1
 80094dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80094e0:	e000      	b.n	80094e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80094e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d10a      	bne.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80094ec:	4b6a      	ldr	r3, [pc, #424]	@ (8009698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80094ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094f0:	f023 0107 	bic.w	r1, r3, #7
 80094f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094fa:	4a67      	ldr	r2, [pc, #412]	@ (8009698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80094fc:	430b      	orrs	r3, r1
 80094fe:	6513      	str	r3, [r2, #80]	@ 0x50
 8009500:	e003      	b.n	800950a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009502:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009506:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800950a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800950e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009512:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8009516:	f04f 0b00 	mov.w	fp, #0
 800951a:	ea5a 030b 	orrs.w	r3, sl, fp
 800951e:	d054      	beq.n	80095ca <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8009520:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009524:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009526:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800952a:	d036      	beq.n	800959a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800952c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8009530:	d82f      	bhi.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009532:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009536:	d032      	beq.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009538:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800953c:	d829      	bhi.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800953e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009540:	d02f      	beq.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8009542:	2bc0      	cmp	r3, #192	@ 0xc0
 8009544:	d825      	bhi.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009546:	2b80      	cmp	r3, #128	@ 0x80
 8009548:	d018      	beq.n	800957c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800954a:	2b80      	cmp	r3, #128	@ 0x80
 800954c:	d821      	bhi.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800954e:	2b00      	cmp	r3, #0
 8009550:	d002      	beq.n	8009558 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8009552:	2b40      	cmp	r3, #64	@ 0x40
 8009554:	d007      	beq.n	8009566 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8009556:	e01c      	b.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009558:	4b4f      	ldr	r3, [pc, #316]	@ (8009698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800955a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800955c:	4a4e      	ldr	r2, [pc, #312]	@ (8009698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800955e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009562:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8009564:	e01e      	b.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009566:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800956a:	3308      	adds	r3, #8
 800956c:	2100      	movs	r1, #0
 800956e:	4618      	mov	r0, r3
 8009570:	f001 fb94 	bl	800ac9c <RCCEx_PLL2_Config>
 8009574:	4603      	mov	r3, r0
 8009576:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800957a:	e013      	b.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800957c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009580:	3328      	adds	r3, #40	@ 0x28
 8009582:	2100      	movs	r1, #0
 8009584:	4618      	mov	r0, r3
 8009586:	f001 fc3b 	bl	800ae00 <RCCEx_PLL3_Config>
 800958a:	4603      	mov	r3, r0
 800958c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8009590:	e008      	b.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009592:	2301      	movs	r3, #1
 8009594:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009598:	e004      	b.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800959a:	bf00      	nop
 800959c:	e002      	b.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800959e:	bf00      	nop
 80095a0:	e000      	b.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80095a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d10a      	bne.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80095ac:	4b3a      	ldr	r3, [pc, #232]	@ (8009698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80095ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095b0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80095b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80095ba:	4a37      	ldr	r2, [pc, #220]	@ (8009698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80095bc:	430b      	orrs	r3, r1
 80095be:	6513      	str	r3, [r2, #80]	@ 0x50
 80095c0:	e003      	b.n	80095ca <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095c2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80095c6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80095ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80095d6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80095da:	2300      	movs	r3, #0
 80095dc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80095e0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80095e4:	460b      	mov	r3, r1
 80095e6:	4313      	orrs	r3, r2
 80095e8:	d05c      	beq.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80095ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095f0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80095f4:	d03b      	beq.n	800966e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80095f6:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80095fa:	d834      	bhi.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80095fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009600:	d037      	beq.n	8009672 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8009602:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009606:	d82e      	bhi.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8009608:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800960c:	d033      	beq.n	8009676 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800960e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009612:	d828      	bhi.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8009614:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009618:	d01a      	beq.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800961a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800961e:	d822      	bhi.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8009620:	2b00      	cmp	r3, #0
 8009622:	d003      	beq.n	800962c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8009624:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009628:	d007      	beq.n	800963a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800962a:	e01c      	b.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800962c:	4b1a      	ldr	r3, [pc, #104]	@ (8009698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800962e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009630:	4a19      	ldr	r2, [pc, #100]	@ (8009698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009632:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009636:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8009638:	e01e      	b.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800963a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800963e:	3308      	adds	r3, #8
 8009640:	2100      	movs	r1, #0
 8009642:	4618      	mov	r0, r3
 8009644:	f001 fb2a 	bl	800ac9c <RCCEx_PLL2_Config>
 8009648:	4603      	mov	r3, r0
 800964a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800964e:	e013      	b.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009650:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009654:	3328      	adds	r3, #40	@ 0x28
 8009656:	2100      	movs	r1, #0
 8009658:	4618      	mov	r0, r3
 800965a:	f001 fbd1 	bl	800ae00 <RCCEx_PLL3_Config>
 800965e:	4603      	mov	r3, r0
 8009660:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8009664:	e008      	b.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009666:	2301      	movs	r3, #1
 8009668:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800966c:	e004      	b.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800966e:	bf00      	nop
 8009670:	e002      	b.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8009672:	bf00      	nop
 8009674:	e000      	b.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8009676:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009678:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800967c:	2b00      	cmp	r3, #0
 800967e:	d10d      	bne.n	800969c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8009680:	4b05      	ldr	r3, [pc, #20]	@ (8009698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009682:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009684:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8009688:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800968c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800968e:	4a02      	ldr	r2, [pc, #8]	@ (8009698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009690:	430b      	orrs	r3, r1
 8009692:	6513      	str	r3, [r2, #80]	@ 0x50
 8009694:	e006      	b.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8009696:	bf00      	nop
 8009698:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800969c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80096a0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80096a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ac:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80096b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80096b4:	2300      	movs	r3, #0
 80096b6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80096ba:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80096be:	460b      	mov	r3, r1
 80096c0:	4313      	orrs	r3, r2
 80096c2:	d03a      	beq.n	800973a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80096c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096ca:	2b30      	cmp	r3, #48	@ 0x30
 80096cc:	d01f      	beq.n	800970e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80096ce:	2b30      	cmp	r3, #48	@ 0x30
 80096d0:	d819      	bhi.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80096d2:	2b20      	cmp	r3, #32
 80096d4:	d00c      	beq.n	80096f0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80096d6:	2b20      	cmp	r3, #32
 80096d8:	d815      	bhi.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d019      	beq.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80096de:	2b10      	cmp	r3, #16
 80096e0:	d111      	bne.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096e2:	4bae      	ldr	r3, [pc, #696]	@ (800999c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80096e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096e6:	4aad      	ldr	r2, [pc, #692]	@ (800999c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80096e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80096ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80096ee:	e011      	b.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80096f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096f4:	3308      	adds	r3, #8
 80096f6:	2102      	movs	r1, #2
 80096f8:	4618      	mov	r0, r3
 80096fa:	f001 facf 	bl	800ac9c <RCCEx_PLL2_Config>
 80096fe:	4603      	mov	r3, r0
 8009700:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009704:	e006      	b.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009706:	2301      	movs	r3, #1
 8009708:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800970c:	e002      	b.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800970e:	bf00      	nop
 8009710:	e000      	b.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8009712:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009714:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009718:	2b00      	cmp	r3, #0
 800971a:	d10a      	bne.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800971c:	4b9f      	ldr	r3, [pc, #636]	@ (800999c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800971e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009720:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009724:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800972a:	4a9c      	ldr	r2, [pc, #624]	@ (800999c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800972c:	430b      	orrs	r3, r1
 800972e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009730:	e003      	b.n	800973a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009732:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009736:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800973a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800973e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009742:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8009746:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800974a:	2300      	movs	r3, #0
 800974c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009750:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009754:	460b      	mov	r3, r1
 8009756:	4313      	orrs	r3, r2
 8009758:	d051      	beq.n	80097fe <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800975a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800975e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009760:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009764:	d035      	beq.n	80097d2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8009766:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800976a:	d82e      	bhi.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0x426>
 800976c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009770:	d031      	beq.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8009772:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009776:	d828      	bhi.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0x426>
 8009778:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800977c:	d01a      	beq.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800977e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009782:	d822      	bhi.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0x426>
 8009784:	2b00      	cmp	r3, #0
 8009786:	d003      	beq.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8009788:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800978c:	d007      	beq.n	800979e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800978e:	e01c      	b.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009790:	4b82      	ldr	r3, [pc, #520]	@ (800999c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009794:	4a81      	ldr	r2, [pc, #516]	@ (800999c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009796:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800979a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800979c:	e01c      	b.n	80097d8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800979e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097a2:	3308      	adds	r3, #8
 80097a4:	2100      	movs	r1, #0
 80097a6:	4618      	mov	r0, r3
 80097a8:	f001 fa78 	bl	800ac9c <RCCEx_PLL2_Config>
 80097ac:	4603      	mov	r3, r0
 80097ae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80097b2:	e011      	b.n	80097d8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80097b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097b8:	3328      	adds	r3, #40	@ 0x28
 80097ba:	2100      	movs	r1, #0
 80097bc:	4618      	mov	r0, r3
 80097be:	f001 fb1f 	bl	800ae00 <RCCEx_PLL3_Config>
 80097c2:	4603      	mov	r3, r0
 80097c4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80097c8:	e006      	b.n	80097d8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097ca:	2301      	movs	r3, #1
 80097cc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80097d0:	e002      	b.n	80097d8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80097d2:	bf00      	nop
 80097d4:	e000      	b.n	80097d8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80097d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d10a      	bne.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80097e0:	4b6e      	ldr	r3, [pc, #440]	@ (800999c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80097e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097e4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80097e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80097ee:	4a6b      	ldr	r2, [pc, #428]	@ (800999c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80097f0:	430b      	orrs	r3, r1
 80097f2:	6513      	str	r3, [r2, #80]	@ 0x50
 80097f4:	e003      	b.n	80097fe <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097f6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80097fa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80097fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009806:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800980a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800980e:	2300      	movs	r3, #0
 8009810:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009814:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8009818:	460b      	mov	r3, r1
 800981a:	4313      	orrs	r3, r2
 800981c:	d053      	beq.n	80098c6 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800981e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009822:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009824:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009828:	d033      	beq.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800982a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800982e:	d82c      	bhi.n	800988a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8009830:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009834:	d02f      	beq.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8009836:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800983a:	d826      	bhi.n	800988a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800983c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009840:	d02b      	beq.n	800989a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009842:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009846:	d820      	bhi.n	800988a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8009848:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800984c:	d012      	beq.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800984e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009852:	d81a      	bhi.n	800988a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8009854:	2b00      	cmp	r3, #0
 8009856:	d022      	beq.n	800989e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8009858:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800985c:	d115      	bne.n	800988a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800985e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009862:	3308      	adds	r3, #8
 8009864:	2101      	movs	r1, #1
 8009866:	4618      	mov	r0, r3
 8009868:	f001 fa18 	bl	800ac9c <RCCEx_PLL2_Config>
 800986c:	4603      	mov	r3, r0
 800986e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009872:	e015      	b.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009874:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009878:	3328      	adds	r3, #40	@ 0x28
 800987a:	2101      	movs	r1, #1
 800987c:	4618      	mov	r0, r3
 800987e:	f001 fabf 	bl	800ae00 <RCCEx_PLL3_Config>
 8009882:	4603      	mov	r3, r0
 8009884:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009888:	e00a      	b.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800988a:	2301      	movs	r3, #1
 800988c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009890:	e006      	b.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8009892:	bf00      	nop
 8009894:	e004      	b.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8009896:	bf00      	nop
 8009898:	e002      	b.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800989a:	bf00      	nop
 800989c:	e000      	b.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800989e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d10a      	bne.n	80098be <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80098a8:	4b3c      	ldr	r3, [pc, #240]	@ (800999c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80098aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098ac:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80098b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80098b6:	4a39      	ldr	r2, [pc, #228]	@ (800999c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80098b8:	430b      	orrs	r3, r1
 80098ba:	6513      	str	r3, [r2, #80]	@ 0x50
 80098bc:	e003      	b.n	80098c6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098be:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80098c2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80098c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ce:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80098d2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80098d6:	2300      	movs	r3, #0
 80098d8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80098dc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80098e0:	460b      	mov	r3, r1
 80098e2:	4313      	orrs	r3, r2
 80098e4:	d060      	beq.n	80099a8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80098e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80098ee:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80098f2:	d039      	beq.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80098f4:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80098f8:	d832      	bhi.n	8009960 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80098fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80098fe:	d035      	beq.n	800996c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8009900:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009904:	d82c      	bhi.n	8009960 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8009906:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800990a:	d031      	beq.n	8009970 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800990c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009910:	d826      	bhi.n	8009960 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8009912:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009916:	d02d      	beq.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8009918:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800991c:	d820      	bhi.n	8009960 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800991e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009922:	d012      	beq.n	800994a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009924:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009928:	d81a      	bhi.n	8009960 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800992a:	2b00      	cmp	r3, #0
 800992c:	d024      	beq.n	8009978 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800992e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009932:	d115      	bne.n	8009960 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009934:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009938:	3308      	adds	r3, #8
 800993a:	2101      	movs	r1, #1
 800993c:	4618      	mov	r0, r3
 800993e:	f001 f9ad 	bl	800ac9c <RCCEx_PLL2_Config>
 8009942:	4603      	mov	r3, r0
 8009944:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009948:	e017      	b.n	800997a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800994a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800994e:	3328      	adds	r3, #40	@ 0x28
 8009950:	2101      	movs	r1, #1
 8009952:	4618      	mov	r0, r3
 8009954:	f001 fa54 	bl	800ae00 <RCCEx_PLL3_Config>
 8009958:	4603      	mov	r3, r0
 800995a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800995e:	e00c      	b.n	800997a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009960:	2301      	movs	r3, #1
 8009962:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009966:	e008      	b.n	800997a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009968:	bf00      	nop
 800996a:	e006      	b.n	800997a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800996c:	bf00      	nop
 800996e:	e004      	b.n	800997a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009970:	bf00      	nop
 8009972:	e002      	b.n	800997a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009974:	bf00      	nop
 8009976:	e000      	b.n	800997a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009978:	bf00      	nop
    }

    if (ret == HAL_OK)
 800997a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800997e:	2b00      	cmp	r3, #0
 8009980:	d10e      	bne.n	80099a0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009982:	4b06      	ldr	r3, [pc, #24]	@ (800999c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009986:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800998a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800998e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009992:	4a02      	ldr	r2, [pc, #8]	@ (800999c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009994:	430b      	orrs	r3, r1
 8009996:	6593      	str	r3, [r2, #88]	@ 0x58
 8009998:	e006      	b.n	80099a8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800999a:	bf00      	nop
 800999c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80099a4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80099a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80099b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80099b8:	2300      	movs	r3, #0
 80099ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80099be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80099c2:	460b      	mov	r3, r1
 80099c4:	4313      	orrs	r3, r2
 80099c6:	d037      	beq.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80099c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80099ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099d2:	d00e      	beq.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80099d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099d8:	d816      	bhi.n	8009a08 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d018      	beq.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80099de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80099e2:	d111      	bne.n	8009a08 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099e4:	4bc4      	ldr	r3, [pc, #784]	@ (8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80099e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099e8:	4ac3      	ldr	r2, [pc, #780]	@ (8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80099ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80099ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80099f0:	e00f      	b.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80099f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099f6:	3308      	adds	r3, #8
 80099f8:	2101      	movs	r1, #1
 80099fa:	4618      	mov	r0, r3
 80099fc:	f001 f94e 	bl	800ac9c <RCCEx_PLL2_Config>
 8009a00:	4603      	mov	r3, r0
 8009a02:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009a06:	e004      	b.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a08:	2301      	movs	r3, #1
 8009a0a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009a0e:	e000      	b.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8009a10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a12:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d10a      	bne.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009a1a:	4bb7      	ldr	r3, [pc, #732]	@ (8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009a1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a1e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009a22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a26:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009a28:	4ab3      	ldr	r2, [pc, #716]	@ (8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009a2a:	430b      	orrs	r3, r1
 8009a2c:	6513      	str	r3, [r2, #80]	@ 0x50
 8009a2e:	e003      	b.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a30:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009a34:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009a38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a40:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009a44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009a48:	2300      	movs	r3, #0
 8009a4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009a4e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8009a52:	460b      	mov	r3, r1
 8009a54:	4313      	orrs	r3, r2
 8009a56:	d039      	beq.n	8009acc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009a58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009a5e:	2b03      	cmp	r3, #3
 8009a60:	d81c      	bhi.n	8009a9c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8009a62:	a201      	add	r2, pc, #4	@ (adr r2, 8009a68 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8009a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a68:	08009aa5 	.word	0x08009aa5
 8009a6c:	08009a79 	.word	0x08009a79
 8009a70:	08009a87 	.word	0x08009a87
 8009a74:	08009aa5 	.word	0x08009aa5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a78:	4b9f      	ldr	r3, [pc, #636]	@ (8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a7c:	4a9e      	ldr	r2, [pc, #632]	@ (8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009a7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009a82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009a84:	e00f      	b.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009a86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a8a:	3308      	adds	r3, #8
 8009a8c:	2102      	movs	r1, #2
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f001 f904 	bl	800ac9c <RCCEx_PLL2_Config>
 8009a94:	4603      	mov	r3, r0
 8009a96:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009a9a:	e004      	b.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009aa2:	e000      	b.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8009aa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009aa6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d10a      	bne.n	8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009aae:	4b92      	ldr	r3, [pc, #584]	@ (8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ab2:	f023 0103 	bic.w	r1, r3, #3
 8009ab6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009aba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009abc:	4a8e      	ldr	r2, [pc, #568]	@ (8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009abe:	430b      	orrs	r3, r1
 8009ac0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009ac2:	e003      	b.n	8009acc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ac4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009ac8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009acc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009ad8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009adc:	2300      	movs	r3, #0
 8009ade:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009ae2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009ae6:	460b      	mov	r3, r1
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	f000 8099 	beq.w	8009c20 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009aee:	4b83      	ldr	r3, [pc, #524]	@ (8009cfc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	4a82      	ldr	r2, [pc, #520]	@ (8009cfc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009af4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009af8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009afa:	f7f8 fdd1 	bl	80026a0 <HAL_GetTick>
 8009afe:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009b02:	e00b      	b.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009b04:	f7f8 fdcc 	bl	80026a0 <HAL_GetTick>
 8009b08:	4602      	mov	r2, r0
 8009b0a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009b0e:	1ad3      	subs	r3, r2, r3
 8009b10:	2b64      	cmp	r3, #100	@ 0x64
 8009b12:	d903      	bls.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8009b14:	2303      	movs	r3, #3
 8009b16:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009b1a:	e005      	b.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009b1c:	4b77      	ldr	r3, [pc, #476]	@ (8009cfc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d0ed      	beq.n	8009b04 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8009b28:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d173      	bne.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009b30:	4b71      	ldr	r3, [pc, #452]	@ (8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b32:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009b34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b38:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009b3c:	4053      	eors	r3, r2
 8009b3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d015      	beq.n	8009b72 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009b46:	4b6c      	ldr	r3, [pc, #432]	@ (8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009b4e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009b52:	4b69      	ldr	r3, [pc, #420]	@ (8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b56:	4a68      	ldr	r2, [pc, #416]	@ (8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009b5c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009b5e:	4b66      	ldr	r3, [pc, #408]	@ (8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b62:	4a65      	ldr	r2, [pc, #404]	@ (8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009b68:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009b6a:	4a63      	ldr	r2, [pc, #396]	@ (8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b70:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009b72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b76:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009b7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b7e:	d118      	bne.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b80:	f7f8 fd8e 	bl	80026a0 <HAL_GetTick>
 8009b84:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009b88:	e00d      	b.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b8a:	f7f8 fd89 	bl	80026a0 <HAL_GetTick>
 8009b8e:	4602      	mov	r2, r0
 8009b90:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009b94:	1ad2      	subs	r2, r2, r3
 8009b96:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	d903      	bls.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8009b9e:	2303      	movs	r3, #3
 8009ba0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8009ba4:	e005      	b.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009ba6:	4b54      	ldr	r3, [pc, #336]	@ (8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009baa:	f003 0302 	and.w	r3, r3, #2
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d0eb      	beq.n	8009b8a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8009bb2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d129      	bne.n	8009c0e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009bba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bbe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009bc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009bc6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009bca:	d10e      	bne.n	8009bea <HAL_RCCEx_PeriphCLKConfig+0x846>
 8009bcc:	4b4a      	ldr	r3, [pc, #296]	@ (8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009bce:	691b      	ldr	r3, [r3, #16]
 8009bd0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009bd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bd8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009bdc:	091a      	lsrs	r2, r3, #4
 8009bde:	4b48      	ldr	r3, [pc, #288]	@ (8009d00 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009be0:	4013      	ands	r3, r2
 8009be2:	4a45      	ldr	r2, [pc, #276]	@ (8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009be4:	430b      	orrs	r3, r1
 8009be6:	6113      	str	r3, [r2, #16]
 8009be8:	e005      	b.n	8009bf6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8009bea:	4b43      	ldr	r3, [pc, #268]	@ (8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009bec:	691b      	ldr	r3, [r3, #16]
 8009bee:	4a42      	ldr	r2, [pc, #264]	@ (8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009bf0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009bf4:	6113      	str	r3, [r2, #16]
 8009bf6:	4b40      	ldr	r3, [pc, #256]	@ (8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009bf8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009bfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bfe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009c02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009c06:	4a3c      	ldr	r2, [pc, #240]	@ (8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c08:	430b      	orrs	r3, r1
 8009c0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8009c0c:	e008      	b.n	8009c20 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009c0e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009c12:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8009c16:	e003      	b.n	8009c20 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c18:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009c1c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009c20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c28:	f002 0301 	and.w	r3, r2, #1
 8009c2c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009c30:	2300      	movs	r3, #0
 8009c32:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009c36:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009c3a:	460b      	mov	r3, r1
 8009c3c:	4313      	orrs	r3, r2
 8009c3e:	f000 8090 	beq.w	8009d62 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009c42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c4a:	2b28      	cmp	r3, #40	@ 0x28
 8009c4c:	d870      	bhi.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8009c4e:	a201      	add	r2, pc, #4	@ (adr r2, 8009c54 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8009c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c54:	08009d39 	.word	0x08009d39
 8009c58:	08009d31 	.word	0x08009d31
 8009c5c:	08009d31 	.word	0x08009d31
 8009c60:	08009d31 	.word	0x08009d31
 8009c64:	08009d31 	.word	0x08009d31
 8009c68:	08009d31 	.word	0x08009d31
 8009c6c:	08009d31 	.word	0x08009d31
 8009c70:	08009d31 	.word	0x08009d31
 8009c74:	08009d05 	.word	0x08009d05
 8009c78:	08009d31 	.word	0x08009d31
 8009c7c:	08009d31 	.word	0x08009d31
 8009c80:	08009d31 	.word	0x08009d31
 8009c84:	08009d31 	.word	0x08009d31
 8009c88:	08009d31 	.word	0x08009d31
 8009c8c:	08009d31 	.word	0x08009d31
 8009c90:	08009d31 	.word	0x08009d31
 8009c94:	08009d1b 	.word	0x08009d1b
 8009c98:	08009d31 	.word	0x08009d31
 8009c9c:	08009d31 	.word	0x08009d31
 8009ca0:	08009d31 	.word	0x08009d31
 8009ca4:	08009d31 	.word	0x08009d31
 8009ca8:	08009d31 	.word	0x08009d31
 8009cac:	08009d31 	.word	0x08009d31
 8009cb0:	08009d31 	.word	0x08009d31
 8009cb4:	08009d39 	.word	0x08009d39
 8009cb8:	08009d31 	.word	0x08009d31
 8009cbc:	08009d31 	.word	0x08009d31
 8009cc0:	08009d31 	.word	0x08009d31
 8009cc4:	08009d31 	.word	0x08009d31
 8009cc8:	08009d31 	.word	0x08009d31
 8009ccc:	08009d31 	.word	0x08009d31
 8009cd0:	08009d31 	.word	0x08009d31
 8009cd4:	08009d39 	.word	0x08009d39
 8009cd8:	08009d31 	.word	0x08009d31
 8009cdc:	08009d31 	.word	0x08009d31
 8009ce0:	08009d31 	.word	0x08009d31
 8009ce4:	08009d31 	.word	0x08009d31
 8009ce8:	08009d31 	.word	0x08009d31
 8009cec:	08009d31 	.word	0x08009d31
 8009cf0:	08009d31 	.word	0x08009d31
 8009cf4:	08009d39 	.word	0x08009d39
 8009cf8:	58024400 	.word	0x58024400
 8009cfc:	58024800 	.word	0x58024800
 8009d00:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009d04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d08:	3308      	adds	r3, #8
 8009d0a:	2101      	movs	r1, #1
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f000 ffc5 	bl	800ac9c <RCCEx_PLL2_Config>
 8009d12:	4603      	mov	r3, r0
 8009d14:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009d18:	e00f      	b.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009d1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d1e:	3328      	adds	r3, #40	@ 0x28
 8009d20:	2101      	movs	r1, #1
 8009d22:	4618      	mov	r0, r3
 8009d24:	f001 f86c 	bl	800ae00 <RCCEx_PLL3_Config>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009d2e:	e004      	b.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d30:	2301      	movs	r3, #1
 8009d32:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009d36:	e000      	b.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8009d38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d3a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d10b      	bne.n	8009d5a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009d42:	4bc0      	ldr	r3, [pc, #768]	@ (800a044 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d46:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009d4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d52:	4abc      	ldr	r2, [pc, #752]	@ (800a044 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009d54:	430b      	orrs	r3, r1
 8009d56:	6553      	str	r3, [r2, #84]	@ 0x54
 8009d58:	e003      	b.n	8009d62 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d5a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009d5e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009d62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d6a:	f002 0302 	and.w	r3, r2, #2
 8009d6e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009d72:	2300      	movs	r3, #0
 8009d74:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009d78:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009d7c:	460b      	mov	r3, r1
 8009d7e:	4313      	orrs	r3, r2
 8009d80:	d043      	beq.n	8009e0a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009d82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d8a:	2b05      	cmp	r3, #5
 8009d8c:	d824      	bhi.n	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8009d8e:	a201      	add	r2, pc, #4	@ (adr r2, 8009d94 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8009d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d94:	08009de1 	.word	0x08009de1
 8009d98:	08009dad 	.word	0x08009dad
 8009d9c:	08009dc3 	.word	0x08009dc3
 8009da0:	08009de1 	.word	0x08009de1
 8009da4:	08009de1 	.word	0x08009de1
 8009da8:	08009de1 	.word	0x08009de1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009dac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009db0:	3308      	adds	r3, #8
 8009db2:	2101      	movs	r1, #1
 8009db4:	4618      	mov	r0, r3
 8009db6:	f000 ff71 	bl	800ac9c <RCCEx_PLL2_Config>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009dc0:	e00f      	b.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009dc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009dc6:	3328      	adds	r3, #40	@ 0x28
 8009dc8:	2101      	movs	r1, #1
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f001 f818 	bl	800ae00 <RCCEx_PLL3_Config>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009dd6:	e004      	b.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009dd8:	2301      	movs	r3, #1
 8009dda:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009dde:	e000      	b.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8009de0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009de2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d10b      	bne.n	8009e02 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009dea:	4b96      	ldr	r3, [pc, #600]	@ (800a044 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009dec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009dee:	f023 0107 	bic.w	r1, r3, #7
 8009df2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009df6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009dfa:	4a92      	ldr	r2, [pc, #584]	@ (800a044 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009dfc:	430b      	orrs	r3, r1
 8009dfe:	6553      	str	r3, [r2, #84]	@ 0x54
 8009e00:	e003      	b.n	8009e0a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e02:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009e06:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009e0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e12:	f002 0304 	and.w	r3, r2, #4
 8009e16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009e20:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009e24:	460b      	mov	r3, r1
 8009e26:	4313      	orrs	r3, r2
 8009e28:	d043      	beq.n	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009e2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009e32:	2b05      	cmp	r3, #5
 8009e34:	d824      	bhi.n	8009e80 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8009e36:	a201      	add	r2, pc, #4	@ (adr r2, 8009e3c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8009e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e3c:	08009e89 	.word	0x08009e89
 8009e40:	08009e55 	.word	0x08009e55
 8009e44:	08009e6b 	.word	0x08009e6b
 8009e48:	08009e89 	.word	0x08009e89
 8009e4c:	08009e89 	.word	0x08009e89
 8009e50:	08009e89 	.word	0x08009e89
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009e54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e58:	3308      	adds	r3, #8
 8009e5a:	2101      	movs	r1, #1
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	f000 ff1d 	bl	800ac9c <RCCEx_PLL2_Config>
 8009e62:	4603      	mov	r3, r0
 8009e64:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009e68:	e00f      	b.n	8009e8a <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009e6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e6e:	3328      	adds	r3, #40	@ 0x28
 8009e70:	2101      	movs	r1, #1
 8009e72:	4618      	mov	r0, r3
 8009e74:	f000 ffc4 	bl	800ae00 <RCCEx_PLL3_Config>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009e7e:	e004      	b.n	8009e8a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e80:	2301      	movs	r3, #1
 8009e82:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009e86:	e000      	b.n	8009e8a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8009e88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e8a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d10b      	bne.n	8009eaa <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009e92:	4b6c      	ldr	r3, [pc, #432]	@ (800a044 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009e94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e96:	f023 0107 	bic.w	r1, r3, #7
 8009e9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009ea2:	4a68      	ldr	r2, [pc, #416]	@ (800a044 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009ea4:	430b      	orrs	r3, r1
 8009ea6:	6593      	str	r3, [r2, #88]	@ 0x58
 8009ea8:	e003      	b.n	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009eaa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009eae:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009eb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eba:	f002 0320 	and.w	r3, r2, #32
 8009ebe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009ec8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009ecc:	460b      	mov	r3, r1
 8009ece:	4313      	orrs	r3, r2
 8009ed0:	d055      	beq.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009ed2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ed6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009eda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009ede:	d033      	beq.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8009ee0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009ee4:	d82c      	bhi.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8009ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009eea:	d02f      	beq.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8009eec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ef0:	d826      	bhi.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8009ef2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009ef6:	d02b      	beq.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8009ef8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009efc:	d820      	bhi.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8009efe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f02:	d012      	beq.n	8009f2a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8009f04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f08:	d81a      	bhi.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d022      	beq.n	8009f54 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8009f0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009f12:	d115      	bne.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f18:	3308      	adds	r3, #8
 8009f1a:	2100      	movs	r1, #0
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f000 febd 	bl	800ac9c <RCCEx_PLL2_Config>
 8009f22:	4603      	mov	r3, r0
 8009f24:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009f28:	e015      	b.n	8009f56 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009f2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f2e:	3328      	adds	r3, #40	@ 0x28
 8009f30:	2102      	movs	r1, #2
 8009f32:	4618      	mov	r0, r3
 8009f34:	f000 ff64 	bl	800ae00 <RCCEx_PLL3_Config>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009f3e:	e00a      	b.n	8009f56 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f40:	2301      	movs	r3, #1
 8009f42:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009f46:	e006      	b.n	8009f56 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8009f48:	bf00      	nop
 8009f4a:	e004      	b.n	8009f56 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8009f4c:	bf00      	nop
 8009f4e:	e002      	b.n	8009f56 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8009f50:	bf00      	nop
 8009f52:	e000      	b.n	8009f56 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8009f54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f56:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d10b      	bne.n	8009f76 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009f5e:	4b39      	ldr	r3, [pc, #228]	@ (800a044 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009f60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f62:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009f66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009f6e:	4a35      	ldr	r2, [pc, #212]	@ (800a044 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009f70:	430b      	orrs	r3, r1
 8009f72:	6553      	str	r3, [r2, #84]	@ 0x54
 8009f74:	e003      	b.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f76:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009f7a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009f7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f86:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009f8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009f8e:	2300      	movs	r3, #0
 8009f90:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009f94:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009f98:	460b      	mov	r3, r1
 8009f9a:	4313      	orrs	r3, r2
 8009f9c:	d058      	beq.n	800a050 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009f9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fa2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009fa6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009faa:	d033      	beq.n	800a014 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8009fac:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009fb0:	d82c      	bhi.n	800a00c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8009fb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009fb6:	d02f      	beq.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8009fb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009fbc:	d826      	bhi.n	800a00c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8009fbe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009fc2:	d02b      	beq.n	800a01c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8009fc4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009fc8:	d820      	bhi.n	800a00c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8009fca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009fce:	d012      	beq.n	8009ff6 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8009fd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009fd4:	d81a      	bhi.n	800a00c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d022      	beq.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8009fda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009fde:	d115      	bne.n	800a00c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009fe0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fe4:	3308      	adds	r3, #8
 8009fe6:	2100      	movs	r1, #0
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f000 fe57 	bl	800ac9c <RCCEx_PLL2_Config>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009ff4:	e015      	b.n	800a022 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009ff6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ffa:	3328      	adds	r3, #40	@ 0x28
 8009ffc:	2102      	movs	r1, #2
 8009ffe:	4618      	mov	r0, r3
 800a000:	f000 fefe 	bl	800ae00 <RCCEx_PLL3_Config>
 800a004:	4603      	mov	r3, r0
 800a006:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a00a:	e00a      	b.n	800a022 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a00c:	2301      	movs	r3, #1
 800a00e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a012:	e006      	b.n	800a022 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800a014:	bf00      	nop
 800a016:	e004      	b.n	800a022 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800a018:	bf00      	nop
 800a01a:	e002      	b.n	800a022 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800a01c:	bf00      	nop
 800a01e:	e000      	b.n	800a022 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800a020:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a022:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a026:	2b00      	cmp	r3, #0
 800a028:	d10e      	bne.n	800a048 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a02a:	4b06      	ldr	r3, [pc, #24]	@ (800a044 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a02c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a02e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800a032:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a036:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a03a:	4a02      	ldr	r2, [pc, #8]	@ (800a044 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a03c:	430b      	orrs	r3, r1
 800a03e:	6593      	str	r3, [r2, #88]	@ 0x58
 800a040:	e006      	b.n	800a050 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800a042:	bf00      	nop
 800a044:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a048:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a04c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a050:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a054:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a058:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800a05c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a060:	2300      	movs	r3, #0
 800a062:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a066:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800a06a:	460b      	mov	r3, r1
 800a06c:	4313      	orrs	r3, r2
 800a06e:	d055      	beq.n	800a11c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a070:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a074:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a078:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a07c:	d033      	beq.n	800a0e6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800a07e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a082:	d82c      	bhi.n	800a0de <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800a084:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a088:	d02f      	beq.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800a08a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a08e:	d826      	bhi.n	800a0de <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800a090:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a094:	d02b      	beq.n	800a0ee <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800a096:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a09a:	d820      	bhi.n	800a0de <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800a09c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a0a0:	d012      	beq.n	800a0c8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800a0a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a0a6:	d81a      	bhi.n	800a0de <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d022      	beq.n	800a0f2 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800a0ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a0b0:	d115      	bne.n	800a0de <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a0b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a0b6:	3308      	adds	r3, #8
 800a0b8:	2100      	movs	r1, #0
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f000 fdee 	bl	800ac9c <RCCEx_PLL2_Config>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a0c6:	e015      	b.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a0c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a0cc:	3328      	adds	r3, #40	@ 0x28
 800a0ce:	2102      	movs	r1, #2
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f000 fe95 	bl	800ae00 <RCCEx_PLL3_Config>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a0dc:	e00a      	b.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a0de:	2301      	movs	r3, #1
 800a0e0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a0e4:	e006      	b.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800a0e6:	bf00      	nop
 800a0e8:	e004      	b.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800a0ea:	bf00      	nop
 800a0ec:	e002      	b.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800a0ee:	bf00      	nop
 800a0f0:	e000      	b.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800a0f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0f4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d10b      	bne.n	800a114 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a0fc:	4ba1      	ldr	r3, [pc, #644]	@ (800a384 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a0fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a100:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800a104:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a108:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a10c:	4a9d      	ldr	r2, [pc, #628]	@ (800a384 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a10e:	430b      	orrs	r3, r1
 800a110:	6593      	str	r3, [r2, #88]	@ 0x58
 800a112:	e003      	b.n	800a11c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a114:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a118:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a11c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a120:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a124:	f002 0308 	and.w	r3, r2, #8
 800a128:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a12c:	2300      	movs	r3, #0
 800a12e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a132:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800a136:	460b      	mov	r3, r1
 800a138:	4313      	orrs	r3, r2
 800a13a:	d01e      	beq.n	800a17a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a13c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a140:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a144:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a148:	d10c      	bne.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a14a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a14e:	3328      	adds	r3, #40	@ 0x28
 800a150:	2102      	movs	r1, #2
 800a152:	4618      	mov	r0, r3
 800a154:	f000 fe54 	bl	800ae00 <RCCEx_PLL3_Config>
 800a158:	4603      	mov	r3, r0
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d002      	beq.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800a15e:	2301      	movs	r3, #1
 800a160:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a164:	4b87      	ldr	r3, [pc, #540]	@ (800a384 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a166:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a168:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a16c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a170:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a174:	4a83      	ldr	r2, [pc, #524]	@ (800a384 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a176:	430b      	orrs	r3, r1
 800a178:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a17a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a182:	f002 0310 	and.w	r3, r2, #16
 800a186:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a18a:	2300      	movs	r3, #0
 800a18c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a190:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800a194:	460b      	mov	r3, r1
 800a196:	4313      	orrs	r3, r2
 800a198:	d01e      	beq.n	800a1d8 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a19a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a19e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a1a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1a6:	d10c      	bne.n	800a1c2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a1a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a1ac:	3328      	adds	r3, #40	@ 0x28
 800a1ae:	2102      	movs	r1, #2
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f000 fe25 	bl	800ae00 <RCCEx_PLL3_Config>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d002      	beq.n	800a1c2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800a1bc:	2301      	movs	r3, #1
 800a1be:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a1c2:	4b70      	ldr	r3, [pc, #448]	@ (800a384 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a1c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1c6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a1ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a1ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a1d2:	4a6c      	ldr	r2, [pc, #432]	@ (800a384 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a1d4:	430b      	orrs	r3, r1
 800a1d6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a1d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800a1e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a1ee:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800a1f2:	460b      	mov	r3, r1
 800a1f4:	4313      	orrs	r3, r2
 800a1f6:	d03e      	beq.n	800a276 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a1f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a1fc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a200:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a204:	d022      	beq.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800a206:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a20a:	d81b      	bhi.n	800a244 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d003      	beq.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800a210:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a214:	d00b      	beq.n	800a22e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800a216:	e015      	b.n	800a244 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a218:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a21c:	3308      	adds	r3, #8
 800a21e:	2100      	movs	r1, #0
 800a220:	4618      	mov	r0, r3
 800a222:	f000 fd3b 	bl	800ac9c <RCCEx_PLL2_Config>
 800a226:	4603      	mov	r3, r0
 800a228:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a22c:	e00f      	b.n	800a24e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a22e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a232:	3328      	adds	r3, #40	@ 0x28
 800a234:	2102      	movs	r1, #2
 800a236:	4618      	mov	r0, r3
 800a238:	f000 fde2 	bl	800ae00 <RCCEx_PLL3_Config>
 800a23c:	4603      	mov	r3, r0
 800a23e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a242:	e004      	b.n	800a24e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a244:	2301      	movs	r3, #1
 800a246:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a24a:	e000      	b.n	800a24e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800a24c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a24e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a252:	2b00      	cmp	r3, #0
 800a254:	d10b      	bne.n	800a26e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a256:	4b4b      	ldr	r3, [pc, #300]	@ (800a384 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a25a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800a25e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a262:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a266:	4a47      	ldr	r2, [pc, #284]	@ (800a384 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a268:	430b      	orrs	r3, r1
 800a26a:	6593      	str	r3, [r2, #88]	@ 0x58
 800a26c:	e003      	b.n	800a276 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a26e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a272:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a276:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a27e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800a282:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a284:	2300      	movs	r3, #0
 800a286:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a288:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800a28c:	460b      	mov	r3, r1
 800a28e:	4313      	orrs	r3, r2
 800a290:	d03b      	beq.n	800a30a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a292:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a296:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a29a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a29e:	d01f      	beq.n	800a2e0 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800a2a0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a2a4:	d818      	bhi.n	800a2d8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800a2a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a2aa:	d003      	beq.n	800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800a2ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a2b0:	d007      	beq.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800a2b2:	e011      	b.n	800a2d8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2b4:	4b33      	ldr	r3, [pc, #204]	@ (800a384 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a2b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2b8:	4a32      	ldr	r2, [pc, #200]	@ (800a384 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a2ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a2be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a2c0:	e00f      	b.n	800a2e2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a2c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2c6:	3328      	adds	r3, #40	@ 0x28
 800a2c8:	2101      	movs	r1, #1
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f000 fd98 	bl	800ae00 <RCCEx_PLL3_Config>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800a2d6:	e004      	b.n	800a2e2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a2d8:	2301      	movs	r3, #1
 800a2da:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a2de:	e000      	b.n	800a2e2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800a2e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2e2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d10b      	bne.n	800a302 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a2ea:	4b26      	ldr	r3, [pc, #152]	@ (800a384 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a2ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2ee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a2f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2fa:	4a22      	ldr	r2, [pc, #136]	@ (800a384 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a2fc:	430b      	orrs	r3, r1
 800a2fe:	6553      	str	r3, [r2, #84]	@ 0x54
 800a300:	e003      	b.n	800a30a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a302:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a306:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a30a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a312:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800a316:	673b      	str	r3, [r7, #112]	@ 0x70
 800a318:	2300      	movs	r3, #0
 800a31a:	677b      	str	r3, [r7, #116]	@ 0x74
 800a31c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800a320:	460b      	mov	r3, r1
 800a322:	4313      	orrs	r3, r2
 800a324:	d034      	beq.n	800a390 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a326:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a32a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d003      	beq.n	800a338 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800a330:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a334:	d007      	beq.n	800a346 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800a336:	e011      	b.n	800a35c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a338:	4b12      	ldr	r3, [pc, #72]	@ (800a384 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a33a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a33c:	4a11      	ldr	r2, [pc, #68]	@ (800a384 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a33e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a342:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a344:	e00e      	b.n	800a364 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a346:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a34a:	3308      	adds	r3, #8
 800a34c:	2102      	movs	r1, #2
 800a34e:	4618      	mov	r0, r3
 800a350:	f000 fca4 	bl	800ac9c <RCCEx_PLL2_Config>
 800a354:	4603      	mov	r3, r0
 800a356:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a35a:	e003      	b.n	800a364 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800a35c:	2301      	movs	r3, #1
 800a35e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a362:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a364:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d10d      	bne.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a36c:	4b05      	ldr	r3, [pc, #20]	@ (800a384 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a36e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a370:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a374:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a378:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a37a:	4a02      	ldr	r2, [pc, #8]	@ (800a384 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a37c:	430b      	orrs	r3, r1
 800a37e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a380:	e006      	b.n	800a390 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800a382:	bf00      	nop
 800a384:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a388:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a38c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a390:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a398:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800a39c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a39e:	2300      	movs	r3, #0
 800a3a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a3a2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800a3a6:	460b      	mov	r3, r1
 800a3a8:	4313      	orrs	r3, r2
 800a3aa:	d00c      	beq.n	800a3c6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a3ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3b0:	3328      	adds	r3, #40	@ 0x28
 800a3b2:	2102      	movs	r1, #2
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f000 fd23 	bl	800ae00 <RCCEx_PLL3_Config>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d002      	beq.n	800a3c6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a3c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ce:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800a3d2:	663b      	str	r3, [r7, #96]	@ 0x60
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	667b      	str	r3, [r7, #100]	@ 0x64
 800a3d8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800a3dc:	460b      	mov	r3, r1
 800a3de:	4313      	orrs	r3, r2
 800a3e0:	d038      	beq.n	800a454 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a3e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a3ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a3ee:	d018      	beq.n	800a422 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800a3f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a3f4:	d811      	bhi.n	800a41a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800a3f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a3fa:	d014      	beq.n	800a426 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800a3fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a400:	d80b      	bhi.n	800a41a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800a402:	2b00      	cmp	r3, #0
 800a404:	d011      	beq.n	800a42a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800a406:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a40a:	d106      	bne.n	800a41a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a40c:	4bc3      	ldr	r3, [pc, #780]	@ (800a71c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a40e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a410:	4ac2      	ldr	r2, [pc, #776]	@ (800a71c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a412:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a416:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a418:	e008      	b.n	800a42c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a41a:	2301      	movs	r3, #1
 800a41c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a420:	e004      	b.n	800a42c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800a422:	bf00      	nop
 800a424:	e002      	b.n	800a42c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800a426:	bf00      	nop
 800a428:	e000      	b.n	800a42c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800a42a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a42c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a430:	2b00      	cmp	r3, #0
 800a432:	d10b      	bne.n	800a44c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a434:	4bb9      	ldr	r3, [pc, #740]	@ (800a71c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a436:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a438:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a43c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a440:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a444:	4ab5      	ldr	r2, [pc, #724]	@ (800a71c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a446:	430b      	orrs	r3, r1
 800a448:	6553      	str	r3, [r2, #84]	@ 0x54
 800a44a:	e003      	b.n	800a454 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a44c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a450:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a454:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a45c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800a460:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a462:	2300      	movs	r3, #0
 800a464:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a466:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a46a:	460b      	mov	r3, r1
 800a46c:	4313      	orrs	r3, r2
 800a46e:	d009      	beq.n	800a484 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a470:	4baa      	ldr	r3, [pc, #680]	@ (800a71c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a472:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a474:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a478:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a47c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a47e:	4aa7      	ldr	r2, [pc, #668]	@ (800a71c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a480:	430b      	orrs	r3, r1
 800a482:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a484:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a48c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a490:	653b      	str	r3, [r7, #80]	@ 0x50
 800a492:	2300      	movs	r3, #0
 800a494:	657b      	str	r3, [r7, #84]	@ 0x54
 800a496:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a49a:	460b      	mov	r3, r1
 800a49c:	4313      	orrs	r3, r2
 800a49e:	d009      	beq.n	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a4a0:	4b9e      	ldr	r3, [pc, #632]	@ (800a71c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a4a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4a4:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800a4a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a4ae:	4a9b      	ldr	r2, [pc, #620]	@ (800a71c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a4b0:	430b      	orrs	r3, r1
 800a4b2:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800a4b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4bc:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800a4c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a4c6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a4ca:	460b      	mov	r3, r1
 800a4cc:	4313      	orrs	r3, r2
 800a4ce:	d009      	beq.n	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800a4d0:	4b92      	ldr	r3, [pc, #584]	@ (800a71c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a4d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a4d4:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 800a4d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a4de:	4a8f      	ldr	r2, [pc, #572]	@ (800a71c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a4e0:	430b      	orrs	r3, r1
 800a4e2:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a4e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ec:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a4f0:	643b      	str	r3, [r7, #64]	@ 0x40
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	647b      	str	r3, [r7, #68]	@ 0x44
 800a4f6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a4fa:	460b      	mov	r3, r1
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	d00e      	beq.n	800a51e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a500:	4b86      	ldr	r3, [pc, #536]	@ (800a71c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a502:	691b      	ldr	r3, [r3, #16]
 800a504:	4a85      	ldr	r2, [pc, #532]	@ (800a71c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a506:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a50a:	6113      	str	r3, [r2, #16]
 800a50c:	4b83      	ldr	r3, [pc, #524]	@ (800a71c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a50e:	6919      	ldr	r1, [r3, #16]
 800a510:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a514:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a518:	4a80      	ldr	r2, [pc, #512]	@ (800a71c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a51a:	430b      	orrs	r3, r1
 800a51c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a51e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a526:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a52a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a52c:	2300      	movs	r3, #0
 800a52e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a530:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a534:	460b      	mov	r3, r1
 800a536:	4313      	orrs	r3, r2
 800a538:	d009      	beq.n	800a54e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a53a:	4b78      	ldr	r3, [pc, #480]	@ (800a71c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a53c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a53e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a542:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a546:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a548:	4a74      	ldr	r2, [pc, #464]	@ (800a71c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a54a:	430b      	orrs	r3, r1
 800a54c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a54e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a556:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a55a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a55c:	2300      	movs	r3, #0
 800a55e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a560:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a564:	460b      	mov	r3, r1
 800a566:	4313      	orrs	r3, r2
 800a568:	d00a      	beq.n	800a580 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a56a:	4b6c      	ldr	r3, [pc, #432]	@ (800a71c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a56c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a56e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a572:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a576:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a57a:	4a68      	ldr	r2, [pc, #416]	@ (800a71c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a57c:	430b      	orrs	r3, r1
 800a57e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a580:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a588:	2100      	movs	r1, #0
 800a58a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a58c:	f003 0301 	and.w	r3, r3, #1
 800a590:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a592:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a596:	460b      	mov	r3, r1
 800a598:	4313      	orrs	r3, r2
 800a59a:	d011      	beq.n	800a5c0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a59c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5a0:	3308      	adds	r3, #8
 800a5a2:	2100      	movs	r1, #0
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f000 fb79 	bl	800ac9c <RCCEx_PLL2_Config>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800a5b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d003      	beq.n	800a5c0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5b8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a5bc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a5c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c8:	2100      	movs	r1, #0
 800a5ca:	6239      	str	r1, [r7, #32]
 800a5cc:	f003 0302 	and.w	r3, r3, #2
 800a5d0:	627b      	str	r3, [r7, #36]	@ 0x24
 800a5d2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a5d6:	460b      	mov	r3, r1
 800a5d8:	4313      	orrs	r3, r2
 800a5da:	d011      	beq.n	800a600 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a5dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5e0:	3308      	adds	r3, #8
 800a5e2:	2101      	movs	r1, #1
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	f000 fb59 	bl	800ac9c <RCCEx_PLL2_Config>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800a5f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d003      	beq.n	800a600 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5f8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a5fc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a600:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a608:	2100      	movs	r1, #0
 800a60a:	61b9      	str	r1, [r7, #24]
 800a60c:	f003 0304 	and.w	r3, r3, #4
 800a610:	61fb      	str	r3, [r7, #28]
 800a612:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a616:	460b      	mov	r3, r1
 800a618:	4313      	orrs	r3, r2
 800a61a:	d011      	beq.n	800a640 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a61c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a620:	3308      	adds	r3, #8
 800a622:	2102      	movs	r1, #2
 800a624:	4618      	mov	r0, r3
 800a626:	f000 fb39 	bl	800ac9c <RCCEx_PLL2_Config>
 800a62a:	4603      	mov	r3, r0
 800a62c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800a630:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a634:	2b00      	cmp	r3, #0
 800a636:	d003      	beq.n	800a640 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a638:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a63c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a640:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a644:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a648:	2100      	movs	r1, #0
 800a64a:	6139      	str	r1, [r7, #16]
 800a64c:	f003 0308 	and.w	r3, r3, #8
 800a650:	617b      	str	r3, [r7, #20]
 800a652:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a656:	460b      	mov	r3, r1
 800a658:	4313      	orrs	r3, r2
 800a65a:	d011      	beq.n	800a680 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a65c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a660:	3328      	adds	r3, #40	@ 0x28
 800a662:	2100      	movs	r1, #0
 800a664:	4618      	mov	r0, r3
 800a666:	f000 fbcb 	bl	800ae00 <RCCEx_PLL3_Config>
 800a66a:	4603      	mov	r3, r0
 800a66c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 800a670:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a674:	2b00      	cmp	r3, #0
 800a676:	d003      	beq.n	800a680 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a678:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a67c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a680:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a688:	2100      	movs	r1, #0
 800a68a:	60b9      	str	r1, [r7, #8]
 800a68c:	f003 0310 	and.w	r3, r3, #16
 800a690:	60fb      	str	r3, [r7, #12]
 800a692:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a696:	460b      	mov	r3, r1
 800a698:	4313      	orrs	r3, r2
 800a69a:	d011      	beq.n	800a6c0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a69c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a6a0:	3328      	adds	r3, #40	@ 0x28
 800a6a2:	2101      	movs	r1, #1
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f000 fbab 	bl	800ae00 <RCCEx_PLL3_Config>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800a6b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d003      	beq.n	800a6c0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6b8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a6bc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a6c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c8:	2100      	movs	r1, #0
 800a6ca:	6039      	str	r1, [r7, #0]
 800a6cc:	f003 0320 	and.w	r3, r3, #32
 800a6d0:	607b      	str	r3, [r7, #4]
 800a6d2:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a6d6:	460b      	mov	r3, r1
 800a6d8:	4313      	orrs	r3, r2
 800a6da:	d011      	beq.n	800a700 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a6dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a6e0:	3328      	adds	r3, #40	@ 0x28
 800a6e2:	2102      	movs	r1, #2
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f000 fb8b 	bl	800ae00 <RCCEx_PLL3_Config>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800a6f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d003      	beq.n	800a700 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6f8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a6fc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 800a700:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800a704:	2b00      	cmp	r3, #0
 800a706:	d101      	bne.n	800a70c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800a708:	2300      	movs	r3, #0
 800a70a:	e000      	b.n	800a70e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800a70c:	2301      	movs	r3, #1
}
 800a70e:	4618      	mov	r0, r3
 800a710:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800a714:	46bd      	mov	sp, r7
 800a716:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a71a:	bf00      	nop
 800a71c:	58024400 	.word	0x58024400

0800a720 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800a724:	f7fe fda0 	bl	8009268 <HAL_RCC_GetHCLKFreq>
 800a728:	4602      	mov	r2, r0
 800a72a:	4b06      	ldr	r3, [pc, #24]	@ (800a744 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a72c:	6a1b      	ldr	r3, [r3, #32]
 800a72e:	091b      	lsrs	r3, r3, #4
 800a730:	f003 0307 	and.w	r3, r3, #7
 800a734:	4904      	ldr	r1, [pc, #16]	@ (800a748 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a736:	5ccb      	ldrb	r3, [r1, r3]
 800a738:	f003 031f 	and.w	r3, r3, #31
 800a73c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800a740:	4618      	mov	r0, r3
 800a742:	bd80      	pop	{r7, pc}
 800a744:	58024400 	.word	0x58024400
 800a748:	08014f58 	.word	0x08014f58

0800a74c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b089      	sub	sp, #36	@ 0x24
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a754:	4ba1      	ldr	r3, [pc, #644]	@ (800a9dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a758:	f003 0303 	and.w	r3, r3, #3
 800a75c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a75e:	4b9f      	ldr	r3, [pc, #636]	@ (800a9dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a762:	0b1b      	lsrs	r3, r3, #12
 800a764:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a768:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a76a:	4b9c      	ldr	r3, [pc, #624]	@ (800a9dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a76c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a76e:	091b      	lsrs	r3, r3, #4
 800a770:	f003 0301 	and.w	r3, r3, #1
 800a774:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a776:	4b99      	ldr	r3, [pc, #612]	@ (800a9dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a778:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a77a:	08db      	lsrs	r3, r3, #3
 800a77c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a780:	693a      	ldr	r2, [r7, #16]
 800a782:	fb02 f303 	mul.w	r3, r2, r3
 800a786:	ee07 3a90 	vmov	s15, r3
 800a78a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a78e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a792:	697b      	ldr	r3, [r7, #20]
 800a794:	2b00      	cmp	r3, #0
 800a796:	f000 8111 	beq.w	800a9bc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a79a:	69bb      	ldr	r3, [r7, #24]
 800a79c:	2b02      	cmp	r3, #2
 800a79e:	f000 8083 	beq.w	800a8a8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a7a2:	69bb      	ldr	r3, [r7, #24]
 800a7a4:	2b02      	cmp	r3, #2
 800a7a6:	f200 80a1 	bhi.w	800a8ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a7aa:	69bb      	ldr	r3, [r7, #24]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d003      	beq.n	800a7b8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a7b0:	69bb      	ldr	r3, [r7, #24]
 800a7b2:	2b01      	cmp	r3, #1
 800a7b4:	d056      	beq.n	800a864 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a7b6:	e099      	b.n	800a8ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a7b8:	4b88      	ldr	r3, [pc, #544]	@ (800a9dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f003 0320 	and.w	r3, r3, #32
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d02d      	beq.n	800a820 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a7c4:	4b85      	ldr	r3, [pc, #532]	@ (800a9dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	08db      	lsrs	r3, r3, #3
 800a7ca:	f003 0303 	and.w	r3, r3, #3
 800a7ce:	4a84      	ldr	r2, [pc, #528]	@ (800a9e0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a7d0:	fa22 f303 	lsr.w	r3, r2, r3
 800a7d4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	ee07 3a90 	vmov	s15, r3
 800a7dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7e0:	697b      	ldr	r3, [r7, #20]
 800a7e2:	ee07 3a90 	vmov	s15, r3
 800a7e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7ee:	4b7b      	ldr	r3, [pc, #492]	@ (800a9dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a7f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7f6:	ee07 3a90 	vmov	s15, r3
 800a7fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800a802:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a9e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a806:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a80a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a80e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a812:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a81a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a81e:	e087      	b.n	800a930 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	ee07 3a90 	vmov	s15, r3
 800a826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a82a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a9e8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a82e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a832:	4b6a      	ldr	r3, [pc, #424]	@ (800a9dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a83a:	ee07 3a90 	vmov	s15, r3
 800a83e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a842:	ed97 6a03 	vldr	s12, [r7, #12]
 800a846:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a9e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a84a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a84e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a852:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a856:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a85a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a85e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a862:	e065      	b.n	800a930 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	ee07 3a90 	vmov	s15, r3
 800a86a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a86e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a9ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a876:	4b59      	ldr	r3, [pc, #356]	@ (800a9dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a87a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a87e:	ee07 3a90 	vmov	s15, r3
 800a882:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a886:	ed97 6a03 	vldr	s12, [r7, #12]
 800a88a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a9e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a88e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a892:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a896:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a89a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a89e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a8a6:	e043      	b.n	800a930 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a8a8:	697b      	ldr	r3, [r7, #20]
 800a8aa:	ee07 3a90 	vmov	s15, r3
 800a8ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8b2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a9f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a8b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8ba:	4b48      	ldr	r3, [pc, #288]	@ (800a9dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8c2:	ee07 3a90 	vmov	s15, r3
 800a8c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800a8ce:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a9e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a8d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a8de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a8ea:	e021      	b.n	800a930 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	ee07 3a90 	vmov	s15, r3
 800a8f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8f6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a9ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a8fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8fe:	4b37      	ldr	r3, [pc, #220]	@ (800a9dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a906:	ee07 3a90 	vmov	s15, r3
 800a90a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a90e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a912:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a9e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a91a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a91e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a92a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a92e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a930:	4b2a      	ldr	r3, [pc, #168]	@ (800a9dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a934:	0a5b      	lsrs	r3, r3, #9
 800a936:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a93a:	ee07 3a90 	vmov	s15, r3
 800a93e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a942:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a946:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a94a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a94e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a952:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a956:	ee17 2a90 	vmov	r2, s15
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a95e:	4b1f      	ldr	r3, [pc, #124]	@ (800a9dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a962:	0c1b      	lsrs	r3, r3, #16
 800a964:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a968:	ee07 3a90 	vmov	s15, r3
 800a96c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a970:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a974:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a978:	edd7 6a07 	vldr	s13, [r7, #28]
 800a97c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a980:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a984:	ee17 2a90 	vmov	r2, s15
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a98c:	4b13      	ldr	r3, [pc, #76]	@ (800a9dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a98e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a990:	0e1b      	lsrs	r3, r3, #24
 800a992:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a996:	ee07 3a90 	vmov	s15, r3
 800a99a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a99e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a9a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a9a6:	edd7 6a07 	vldr	s13, [r7, #28]
 800a9aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a9ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9b2:	ee17 2a90 	vmov	r2, s15
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a9ba:	e008      	b.n	800a9ce <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	609a      	str	r2, [r3, #8]
}
 800a9ce:	bf00      	nop
 800a9d0:	3724      	adds	r7, #36	@ 0x24
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d8:	4770      	bx	lr
 800a9da:	bf00      	nop
 800a9dc:	58024400 	.word	0x58024400
 800a9e0:	03d09000 	.word	0x03d09000
 800a9e4:	46000000 	.word	0x46000000
 800a9e8:	4c742400 	.word	0x4c742400
 800a9ec:	4a742400 	.word	0x4a742400
 800a9f0:	4bb71b00 	.word	0x4bb71b00

0800a9f4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b089      	sub	sp, #36	@ 0x24
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a9fc:	4ba1      	ldr	r3, [pc, #644]	@ (800ac84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a9fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa00:	f003 0303 	and.w	r3, r3, #3
 800aa04:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800aa06:	4b9f      	ldr	r3, [pc, #636]	@ (800ac84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa0a:	0d1b      	lsrs	r3, r3, #20
 800aa0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aa10:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800aa12:	4b9c      	ldr	r3, [pc, #624]	@ (800ac84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa16:	0a1b      	lsrs	r3, r3, #8
 800aa18:	f003 0301 	and.w	r3, r3, #1
 800aa1c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800aa1e:	4b99      	ldr	r3, [pc, #612]	@ (800ac84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa22:	08db      	lsrs	r3, r3, #3
 800aa24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aa28:	693a      	ldr	r2, [r7, #16]
 800aa2a:	fb02 f303 	mul.w	r3, r2, r3
 800aa2e:	ee07 3a90 	vmov	s15, r3
 800aa32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa36:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	f000 8111 	beq.w	800ac64 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800aa42:	69bb      	ldr	r3, [r7, #24]
 800aa44:	2b02      	cmp	r3, #2
 800aa46:	f000 8083 	beq.w	800ab50 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800aa4a:	69bb      	ldr	r3, [r7, #24]
 800aa4c:	2b02      	cmp	r3, #2
 800aa4e:	f200 80a1 	bhi.w	800ab94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800aa52:	69bb      	ldr	r3, [r7, #24]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d003      	beq.n	800aa60 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800aa58:	69bb      	ldr	r3, [r7, #24]
 800aa5a:	2b01      	cmp	r3, #1
 800aa5c:	d056      	beq.n	800ab0c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800aa5e:	e099      	b.n	800ab94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa60:	4b88      	ldr	r3, [pc, #544]	@ (800ac84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f003 0320 	and.w	r3, r3, #32
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d02d      	beq.n	800aac8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa6c:	4b85      	ldr	r3, [pc, #532]	@ (800ac84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	08db      	lsrs	r3, r3, #3
 800aa72:	f003 0303 	and.w	r3, r3, #3
 800aa76:	4a84      	ldr	r2, [pc, #528]	@ (800ac88 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800aa78:	fa22 f303 	lsr.w	r3, r2, r3
 800aa7c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aa7e:	68bb      	ldr	r3, [r7, #8]
 800aa80:	ee07 3a90 	vmov	s15, r3
 800aa84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	ee07 3a90 	vmov	s15, r3
 800aa8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa96:	4b7b      	ldr	r3, [pc, #492]	@ (800ac84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa9e:	ee07 3a90 	vmov	s15, r3
 800aaa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaa6:	ed97 6a03 	vldr	s12, [r7, #12]
 800aaaa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ac8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aaae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aab6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aaba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aabe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aac2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800aac6:	e087      	b.n	800abd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	ee07 3a90 	vmov	s15, r3
 800aace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aad2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800ac90 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800aad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aada:	4b6a      	ldr	r3, [pc, #424]	@ (800ac84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aadc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aae2:	ee07 3a90 	vmov	s15, r3
 800aae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaea:	ed97 6a03 	vldr	s12, [r7, #12]
 800aaee:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ac8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aaf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aaf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aafa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aafe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab0a:	e065      	b.n	800abd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ab0c:	697b      	ldr	r3, [r7, #20]
 800ab0e:	ee07 3a90 	vmov	s15, r3
 800ab12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab16:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ac94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ab1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab1e:	4b59      	ldr	r3, [pc, #356]	@ (800ac84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab26:	ee07 3a90 	vmov	s15, r3
 800ab2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab2e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab32:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ac8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ab36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab4e:	e043      	b.n	800abd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ab50:	697b      	ldr	r3, [r7, #20]
 800ab52:	ee07 3a90 	vmov	s15, r3
 800ab56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab5a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800ac98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ab5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab62:	4b48      	ldr	r3, [pc, #288]	@ (800ac84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab6a:	ee07 3a90 	vmov	s15, r3
 800ab6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab72:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab76:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ac8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ab7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab92:	e021      	b.n	800abd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	ee07 3a90 	vmov	s15, r3
 800ab9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab9e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ac94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800aba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aba6:	4b37      	ldr	r3, [pc, #220]	@ (800ac84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abae:	ee07 3a90 	vmov	s15, r3
 800abb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abb6:	ed97 6a03 	vldr	s12, [r7, #12]
 800abba:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ac8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800abbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800abca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800abd6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800abd8:	4b2a      	ldr	r3, [pc, #168]	@ (800ac84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abdc:	0a5b      	lsrs	r3, r3, #9
 800abde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800abe2:	ee07 3a90 	vmov	s15, r3
 800abe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800abee:	ee37 7a87 	vadd.f32	s14, s15, s14
 800abf2:	edd7 6a07 	vldr	s13, [r7, #28]
 800abf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abfe:	ee17 2a90 	vmov	r2, s15
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ac06:	4b1f      	ldr	r3, [pc, #124]	@ (800ac84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac0a:	0c1b      	lsrs	r3, r3, #16
 800ac0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac10:	ee07 3a90 	vmov	s15, r3
 800ac14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac18:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ac1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac20:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac2c:	ee17 2a90 	vmov	r2, s15
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ac34:	4b13      	ldr	r3, [pc, #76]	@ (800ac84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac38:	0e1b      	lsrs	r3, r3, #24
 800ac3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac3e:	ee07 3a90 	vmov	s15, r3
 800ac42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ac4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac4e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac5a:	ee17 2a90 	vmov	r2, s15
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ac62:	e008      	b.n	800ac76 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2200      	movs	r2, #0
 800ac68:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2200      	movs	r2, #0
 800ac74:	609a      	str	r2, [r3, #8]
}
 800ac76:	bf00      	nop
 800ac78:	3724      	adds	r7, #36	@ 0x24
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac80:	4770      	bx	lr
 800ac82:	bf00      	nop
 800ac84:	58024400 	.word	0x58024400
 800ac88:	03d09000 	.word	0x03d09000
 800ac8c:	46000000 	.word	0x46000000
 800ac90:	4c742400 	.word	0x4c742400
 800ac94:	4a742400 	.word	0x4a742400
 800ac98:	4bb71b00 	.word	0x4bb71b00

0800ac9c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b084      	sub	sp, #16
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
 800aca4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800aca6:	2300      	movs	r3, #0
 800aca8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800acaa:	4b53      	ldr	r3, [pc, #332]	@ (800adf8 <RCCEx_PLL2_Config+0x15c>)
 800acac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acae:	f003 0303 	and.w	r3, r3, #3
 800acb2:	2b03      	cmp	r3, #3
 800acb4:	d101      	bne.n	800acba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800acb6:	2301      	movs	r3, #1
 800acb8:	e099      	b.n	800adee <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800acba:	4b4f      	ldr	r3, [pc, #316]	@ (800adf8 <RCCEx_PLL2_Config+0x15c>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	4a4e      	ldr	r2, [pc, #312]	@ (800adf8 <RCCEx_PLL2_Config+0x15c>)
 800acc0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800acc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800acc6:	f7f7 fceb 	bl	80026a0 <HAL_GetTick>
 800acca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800accc:	e008      	b.n	800ace0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800acce:	f7f7 fce7 	bl	80026a0 <HAL_GetTick>
 800acd2:	4602      	mov	r2, r0
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	1ad3      	subs	r3, r2, r3
 800acd8:	2b02      	cmp	r3, #2
 800acda:	d901      	bls.n	800ace0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800acdc:	2303      	movs	r3, #3
 800acde:	e086      	b.n	800adee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ace0:	4b45      	ldr	r3, [pc, #276]	@ (800adf8 <RCCEx_PLL2_Config+0x15c>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d1f0      	bne.n	800acce <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800acec:	4b42      	ldr	r3, [pc, #264]	@ (800adf8 <RCCEx_PLL2_Config+0x15c>)
 800acee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acf0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	031b      	lsls	r3, r3, #12
 800acfa:	493f      	ldr	r1, [pc, #252]	@ (800adf8 <RCCEx_PLL2_Config+0x15c>)
 800acfc:	4313      	orrs	r3, r2
 800acfe:	628b      	str	r3, [r1, #40]	@ 0x28
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	685b      	ldr	r3, [r3, #4]
 800ad04:	3b01      	subs	r3, #1
 800ad06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	689b      	ldr	r3, [r3, #8]
 800ad0e:	3b01      	subs	r3, #1
 800ad10:	025b      	lsls	r3, r3, #9
 800ad12:	b29b      	uxth	r3, r3
 800ad14:	431a      	orrs	r2, r3
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	68db      	ldr	r3, [r3, #12]
 800ad1a:	3b01      	subs	r3, #1
 800ad1c:	041b      	lsls	r3, r3, #16
 800ad1e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ad22:	431a      	orrs	r2, r3
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	691b      	ldr	r3, [r3, #16]
 800ad28:	3b01      	subs	r3, #1
 800ad2a:	061b      	lsls	r3, r3, #24
 800ad2c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ad30:	4931      	ldr	r1, [pc, #196]	@ (800adf8 <RCCEx_PLL2_Config+0x15c>)
 800ad32:	4313      	orrs	r3, r2
 800ad34:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ad36:	4b30      	ldr	r3, [pc, #192]	@ (800adf8 <RCCEx_PLL2_Config+0x15c>)
 800ad38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad3a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	695b      	ldr	r3, [r3, #20]
 800ad42:	492d      	ldr	r1, [pc, #180]	@ (800adf8 <RCCEx_PLL2_Config+0x15c>)
 800ad44:	4313      	orrs	r3, r2
 800ad46:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ad48:	4b2b      	ldr	r3, [pc, #172]	@ (800adf8 <RCCEx_PLL2_Config+0x15c>)
 800ad4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad4c:	f023 0220 	bic.w	r2, r3, #32
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	699b      	ldr	r3, [r3, #24]
 800ad54:	4928      	ldr	r1, [pc, #160]	@ (800adf8 <RCCEx_PLL2_Config+0x15c>)
 800ad56:	4313      	orrs	r3, r2
 800ad58:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ad5a:	4b27      	ldr	r3, [pc, #156]	@ (800adf8 <RCCEx_PLL2_Config+0x15c>)
 800ad5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad5e:	4a26      	ldr	r2, [pc, #152]	@ (800adf8 <RCCEx_PLL2_Config+0x15c>)
 800ad60:	f023 0310 	bic.w	r3, r3, #16
 800ad64:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ad66:	4b24      	ldr	r3, [pc, #144]	@ (800adf8 <RCCEx_PLL2_Config+0x15c>)
 800ad68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ad6a:	4b24      	ldr	r3, [pc, #144]	@ (800adfc <RCCEx_PLL2_Config+0x160>)
 800ad6c:	4013      	ands	r3, r2
 800ad6e:	687a      	ldr	r2, [r7, #4]
 800ad70:	69d2      	ldr	r2, [r2, #28]
 800ad72:	00d2      	lsls	r2, r2, #3
 800ad74:	4920      	ldr	r1, [pc, #128]	@ (800adf8 <RCCEx_PLL2_Config+0x15c>)
 800ad76:	4313      	orrs	r3, r2
 800ad78:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ad7a:	4b1f      	ldr	r3, [pc, #124]	@ (800adf8 <RCCEx_PLL2_Config+0x15c>)
 800ad7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad7e:	4a1e      	ldr	r2, [pc, #120]	@ (800adf8 <RCCEx_PLL2_Config+0x15c>)
 800ad80:	f043 0310 	orr.w	r3, r3, #16
 800ad84:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d106      	bne.n	800ad9a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ad8c:	4b1a      	ldr	r3, [pc, #104]	@ (800adf8 <RCCEx_PLL2_Config+0x15c>)
 800ad8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad90:	4a19      	ldr	r2, [pc, #100]	@ (800adf8 <RCCEx_PLL2_Config+0x15c>)
 800ad92:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ad96:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ad98:	e00f      	b.n	800adba <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	2b01      	cmp	r3, #1
 800ad9e:	d106      	bne.n	800adae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ada0:	4b15      	ldr	r3, [pc, #84]	@ (800adf8 <RCCEx_PLL2_Config+0x15c>)
 800ada2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ada4:	4a14      	ldr	r2, [pc, #80]	@ (800adf8 <RCCEx_PLL2_Config+0x15c>)
 800ada6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800adaa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800adac:	e005      	b.n	800adba <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800adae:	4b12      	ldr	r3, [pc, #72]	@ (800adf8 <RCCEx_PLL2_Config+0x15c>)
 800adb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adb2:	4a11      	ldr	r2, [pc, #68]	@ (800adf8 <RCCEx_PLL2_Config+0x15c>)
 800adb4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800adb8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800adba:	4b0f      	ldr	r3, [pc, #60]	@ (800adf8 <RCCEx_PLL2_Config+0x15c>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	4a0e      	ldr	r2, [pc, #56]	@ (800adf8 <RCCEx_PLL2_Config+0x15c>)
 800adc0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800adc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800adc6:	f7f7 fc6b 	bl	80026a0 <HAL_GetTick>
 800adca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800adcc:	e008      	b.n	800ade0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800adce:	f7f7 fc67 	bl	80026a0 <HAL_GetTick>
 800add2:	4602      	mov	r2, r0
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	1ad3      	subs	r3, r2, r3
 800add8:	2b02      	cmp	r3, #2
 800adda:	d901      	bls.n	800ade0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800addc:	2303      	movs	r3, #3
 800adde:	e006      	b.n	800adee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ade0:	4b05      	ldr	r3, [pc, #20]	@ (800adf8 <RCCEx_PLL2_Config+0x15c>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d0f0      	beq.n	800adce <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800adec:	7bfb      	ldrb	r3, [r7, #15]
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3710      	adds	r7, #16
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}
 800adf6:	bf00      	nop
 800adf8:	58024400 	.word	0x58024400
 800adfc:	ffff0007 	.word	0xffff0007

0800ae00 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b084      	sub	sp, #16
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
 800ae08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ae0e:	4b53      	ldr	r3, [pc, #332]	@ (800af5c <RCCEx_PLL3_Config+0x15c>)
 800ae10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae12:	f003 0303 	and.w	r3, r3, #3
 800ae16:	2b03      	cmp	r3, #3
 800ae18:	d101      	bne.n	800ae1e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	e099      	b.n	800af52 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ae1e:	4b4f      	ldr	r3, [pc, #316]	@ (800af5c <RCCEx_PLL3_Config+0x15c>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	4a4e      	ldr	r2, [pc, #312]	@ (800af5c <RCCEx_PLL3_Config+0x15c>)
 800ae24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ae28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae2a:	f7f7 fc39 	bl	80026a0 <HAL_GetTick>
 800ae2e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ae30:	e008      	b.n	800ae44 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ae32:	f7f7 fc35 	bl	80026a0 <HAL_GetTick>
 800ae36:	4602      	mov	r2, r0
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	1ad3      	subs	r3, r2, r3
 800ae3c:	2b02      	cmp	r3, #2
 800ae3e:	d901      	bls.n	800ae44 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ae40:	2303      	movs	r3, #3
 800ae42:	e086      	b.n	800af52 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ae44:	4b45      	ldr	r3, [pc, #276]	@ (800af5c <RCCEx_PLL3_Config+0x15c>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d1f0      	bne.n	800ae32 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ae50:	4b42      	ldr	r3, [pc, #264]	@ (800af5c <RCCEx_PLL3_Config+0x15c>)
 800ae52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae54:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	051b      	lsls	r3, r3, #20
 800ae5e:	493f      	ldr	r1, [pc, #252]	@ (800af5c <RCCEx_PLL3_Config+0x15c>)
 800ae60:	4313      	orrs	r3, r2
 800ae62:	628b      	str	r3, [r1, #40]	@ 0x28
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	685b      	ldr	r3, [r3, #4]
 800ae68:	3b01      	subs	r3, #1
 800ae6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	689b      	ldr	r3, [r3, #8]
 800ae72:	3b01      	subs	r3, #1
 800ae74:	025b      	lsls	r3, r3, #9
 800ae76:	b29b      	uxth	r3, r3
 800ae78:	431a      	orrs	r2, r3
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	68db      	ldr	r3, [r3, #12]
 800ae7e:	3b01      	subs	r3, #1
 800ae80:	041b      	lsls	r3, r3, #16
 800ae82:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ae86:	431a      	orrs	r2, r3
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	691b      	ldr	r3, [r3, #16]
 800ae8c:	3b01      	subs	r3, #1
 800ae8e:	061b      	lsls	r3, r3, #24
 800ae90:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ae94:	4931      	ldr	r1, [pc, #196]	@ (800af5c <RCCEx_PLL3_Config+0x15c>)
 800ae96:	4313      	orrs	r3, r2
 800ae98:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ae9a:	4b30      	ldr	r3, [pc, #192]	@ (800af5c <RCCEx_PLL3_Config+0x15c>)
 800ae9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae9e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	695b      	ldr	r3, [r3, #20]
 800aea6:	492d      	ldr	r1, [pc, #180]	@ (800af5c <RCCEx_PLL3_Config+0x15c>)
 800aea8:	4313      	orrs	r3, r2
 800aeaa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800aeac:	4b2b      	ldr	r3, [pc, #172]	@ (800af5c <RCCEx_PLL3_Config+0x15c>)
 800aeae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aeb0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	699b      	ldr	r3, [r3, #24]
 800aeb8:	4928      	ldr	r1, [pc, #160]	@ (800af5c <RCCEx_PLL3_Config+0x15c>)
 800aeba:	4313      	orrs	r3, r2
 800aebc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800aebe:	4b27      	ldr	r3, [pc, #156]	@ (800af5c <RCCEx_PLL3_Config+0x15c>)
 800aec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aec2:	4a26      	ldr	r2, [pc, #152]	@ (800af5c <RCCEx_PLL3_Config+0x15c>)
 800aec4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aec8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800aeca:	4b24      	ldr	r3, [pc, #144]	@ (800af5c <RCCEx_PLL3_Config+0x15c>)
 800aecc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aece:	4b24      	ldr	r3, [pc, #144]	@ (800af60 <RCCEx_PLL3_Config+0x160>)
 800aed0:	4013      	ands	r3, r2
 800aed2:	687a      	ldr	r2, [r7, #4]
 800aed4:	69d2      	ldr	r2, [r2, #28]
 800aed6:	00d2      	lsls	r2, r2, #3
 800aed8:	4920      	ldr	r1, [pc, #128]	@ (800af5c <RCCEx_PLL3_Config+0x15c>)
 800aeda:	4313      	orrs	r3, r2
 800aedc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800aede:	4b1f      	ldr	r3, [pc, #124]	@ (800af5c <RCCEx_PLL3_Config+0x15c>)
 800aee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aee2:	4a1e      	ldr	r2, [pc, #120]	@ (800af5c <RCCEx_PLL3_Config+0x15c>)
 800aee4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aee8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d106      	bne.n	800aefe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800aef0:	4b1a      	ldr	r3, [pc, #104]	@ (800af5c <RCCEx_PLL3_Config+0x15c>)
 800aef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aef4:	4a19      	ldr	r2, [pc, #100]	@ (800af5c <RCCEx_PLL3_Config+0x15c>)
 800aef6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800aefa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800aefc:	e00f      	b.n	800af1e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	2b01      	cmp	r3, #1
 800af02:	d106      	bne.n	800af12 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800af04:	4b15      	ldr	r3, [pc, #84]	@ (800af5c <RCCEx_PLL3_Config+0x15c>)
 800af06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af08:	4a14      	ldr	r2, [pc, #80]	@ (800af5c <RCCEx_PLL3_Config+0x15c>)
 800af0a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800af0e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800af10:	e005      	b.n	800af1e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800af12:	4b12      	ldr	r3, [pc, #72]	@ (800af5c <RCCEx_PLL3_Config+0x15c>)
 800af14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af16:	4a11      	ldr	r2, [pc, #68]	@ (800af5c <RCCEx_PLL3_Config+0x15c>)
 800af18:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800af1c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800af1e:	4b0f      	ldr	r3, [pc, #60]	@ (800af5c <RCCEx_PLL3_Config+0x15c>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	4a0e      	ldr	r2, [pc, #56]	@ (800af5c <RCCEx_PLL3_Config+0x15c>)
 800af24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800af28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af2a:	f7f7 fbb9 	bl	80026a0 <HAL_GetTick>
 800af2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800af30:	e008      	b.n	800af44 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800af32:	f7f7 fbb5 	bl	80026a0 <HAL_GetTick>
 800af36:	4602      	mov	r2, r0
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	1ad3      	subs	r3, r2, r3
 800af3c:	2b02      	cmp	r3, #2
 800af3e:	d901      	bls.n	800af44 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800af40:	2303      	movs	r3, #3
 800af42:	e006      	b.n	800af52 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800af44:	4b05      	ldr	r3, [pc, #20]	@ (800af5c <RCCEx_PLL3_Config+0x15c>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d0f0      	beq.n	800af32 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800af50:	7bfb      	ldrb	r3, [r7, #15]
}
 800af52:	4618      	mov	r0, r3
 800af54:	3710      	adds	r7, #16
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}
 800af5a:	bf00      	nop
 800af5c:	58024400 	.word	0x58024400
 800af60:	ffff0007 	.word	0xffff0007

0800af64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b082      	sub	sp, #8
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d101      	bne.n	800af76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800af72:	2301      	movs	r3, #1
 800af74:	e049      	b.n	800b00a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800af7c:	b2db      	uxtb	r3, r3
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d106      	bne.n	800af90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2200      	movs	r2, #0
 800af86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f000 f841 	bl	800b012 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2202      	movs	r2, #2
 800af94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681a      	ldr	r2, [r3, #0]
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	3304      	adds	r3, #4
 800afa0:	4619      	mov	r1, r3
 800afa2:	4610      	mov	r0, r2
 800afa4:	f000 f9e8 	bl	800b378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2201      	movs	r2, #1
 800afac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2201      	movs	r2, #1
 800afb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2201      	movs	r2, #1
 800afbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2201      	movs	r2, #1
 800afc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2201      	movs	r2, #1
 800afcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2201      	movs	r2, #1
 800afd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2201      	movs	r2, #1
 800afdc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2201      	movs	r2, #1
 800afe4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2201      	movs	r2, #1
 800afec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2201      	movs	r2, #1
 800aff4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2201      	movs	r2, #1
 800affc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2201      	movs	r2, #1
 800b004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b008:	2300      	movs	r3, #0
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	3708      	adds	r7, #8
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}

0800b012 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800b012:	b480      	push	{r7}
 800b014:	b083      	sub	sp, #12
 800b016:	af00      	add	r7, sp, #0
 800b018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800b01a:	bf00      	nop
 800b01c:	370c      	adds	r7, #12
 800b01e:	46bd      	mov	sp, r7
 800b020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b024:	4770      	bx	lr
	...

0800b028 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b028:	b480      	push	{r7}
 800b02a:	b085      	sub	sp, #20
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b036:	b2db      	uxtb	r3, r3
 800b038:	2b01      	cmp	r3, #1
 800b03a:	d001      	beq.n	800b040 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b03c:	2301      	movs	r3, #1
 800b03e:	e054      	b.n	800b0ea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2202      	movs	r2, #2
 800b044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	68da      	ldr	r2, [r3, #12]
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	f042 0201 	orr.w	r2, r2, #1
 800b056:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	4a26      	ldr	r2, [pc, #152]	@ (800b0f8 <HAL_TIM_Base_Start_IT+0xd0>)
 800b05e:	4293      	cmp	r3, r2
 800b060:	d022      	beq.n	800b0a8 <HAL_TIM_Base_Start_IT+0x80>
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b06a:	d01d      	beq.n	800b0a8 <HAL_TIM_Base_Start_IT+0x80>
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	4a22      	ldr	r2, [pc, #136]	@ (800b0fc <HAL_TIM_Base_Start_IT+0xd4>)
 800b072:	4293      	cmp	r3, r2
 800b074:	d018      	beq.n	800b0a8 <HAL_TIM_Base_Start_IT+0x80>
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	4a21      	ldr	r2, [pc, #132]	@ (800b100 <HAL_TIM_Base_Start_IT+0xd8>)
 800b07c:	4293      	cmp	r3, r2
 800b07e:	d013      	beq.n	800b0a8 <HAL_TIM_Base_Start_IT+0x80>
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	4a1f      	ldr	r2, [pc, #124]	@ (800b104 <HAL_TIM_Base_Start_IT+0xdc>)
 800b086:	4293      	cmp	r3, r2
 800b088:	d00e      	beq.n	800b0a8 <HAL_TIM_Base_Start_IT+0x80>
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	4a1e      	ldr	r2, [pc, #120]	@ (800b108 <HAL_TIM_Base_Start_IT+0xe0>)
 800b090:	4293      	cmp	r3, r2
 800b092:	d009      	beq.n	800b0a8 <HAL_TIM_Base_Start_IT+0x80>
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	4a1c      	ldr	r2, [pc, #112]	@ (800b10c <HAL_TIM_Base_Start_IT+0xe4>)
 800b09a:	4293      	cmp	r3, r2
 800b09c:	d004      	beq.n	800b0a8 <HAL_TIM_Base_Start_IT+0x80>
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	4a1b      	ldr	r2, [pc, #108]	@ (800b110 <HAL_TIM_Base_Start_IT+0xe8>)
 800b0a4:	4293      	cmp	r3, r2
 800b0a6:	d115      	bne.n	800b0d4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	689a      	ldr	r2, [r3, #8]
 800b0ae:	4b19      	ldr	r3, [pc, #100]	@ (800b114 <HAL_TIM_Base_Start_IT+0xec>)
 800b0b0:	4013      	ands	r3, r2
 800b0b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	2b06      	cmp	r3, #6
 800b0b8:	d015      	beq.n	800b0e6 <HAL_TIM_Base_Start_IT+0xbe>
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b0c0:	d011      	beq.n	800b0e6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	681a      	ldr	r2, [r3, #0]
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	f042 0201 	orr.w	r2, r2, #1
 800b0d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0d2:	e008      	b.n	800b0e6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	681a      	ldr	r2, [r3, #0]
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	f042 0201 	orr.w	r2, r2, #1
 800b0e2:	601a      	str	r2, [r3, #0]
 800b0e4:	e000      	b.n	800b0e8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b0e8:	2300      	movs	r3, #0
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	3714      	adds	r7, #20
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f4:	4770      	bx	lr
 800b0f6:	bf00      	nop
 800b0f8:	40010000 	.word	0x40010000
 800b0fc:	40000400 	.word	0x40000400
 800b100:	40000800 	.word	0x40000800
 800b104:	40000c00 	.word	0x40000c00
 800b108:	40010400 	.word	0x40010400
 800b10c:	40001800 	.word	0x40001800
 800b110:	40014000 	.word	0x40014000
 800b114:	00010007 	.word	0x00010007

0800b118 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b084      	sub	sp, #16
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	68db      	ldr	r3, [r3, #12]
 800b126:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	691b      	ldr	r3, [r3, #16]
 800b12e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	f003 0302 	and.w	r3, r3, #2
 800b136:	2b00      	cmp	r3, #0
 800b138:	d020      	beq.n	800b17c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	f003 0302 	and.w	r3, r3, #2
 800b140:	2b00      	cmp	r3, #0
 800b142:	d01b      	beq.n	800b17c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	f06f 0202 	mvn.w	r2, #2
 800b14c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2201      	movs	r2, #1
 800b152:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	699b      	ldr	r3, [r3, #24]
 800b15a:	f003 0303 	and.w	r3, r3, #3
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d003      	beq.n	800b16a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b162:	6878      	ldr	r0, [r7, #4]
 800b164:	f000 f8e9 	bl	800b33a <HAL_TIM_IC_CaptureCallback>
 800b168:	e005      	b.n	800b176 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f000 f8db 	bl	800b326 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f000 f8ec 	bl	800b34e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2200      	movs	r2, #0
 800b17a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	f003 0304 	and.w	r3, r3, #4
 800b182:	2b00      	cmp	r3, #0
 800b184:	d020      	beq.n	800b1c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	f003 0304 	and.w	r3, r3, #4
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d01b      	beq.n	800b1c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f06f 0204 	mvn.w	r2, #4
 800b198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2202      	movs	r2, #2
 800b19e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	699b      	ldr	r3, [r3, #24]
 800b1a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d003      	beq.n	800b1b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f000 f8c3 	bl	800b33a <HAL_TIM_IC_CaptureCallback>
 800b1b4:	e005      	b.n	800b1c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f000 f8b5 	bl	800b326 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1bc:	6878      	ldr	r0, [r7, #4]
 800b1be:	f000 f8c6 	bl	800b34e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	f003 0308 	and.w	r3, r3, #8
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d020      	beq.n	800b214 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	f003 0308 	and.w	r3, r3, #8
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d01b      	beq.n	800b214 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	f06f 0208 	mvn.w	r2, #8
 800b1e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	2204      	movs	r2, #4
 800b1ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	69db      	ldr	r3, [r3, #28]
 800b1f2:	f003 0303 	and.w	r3, r3, #3
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d003      	beq.n	800b202 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f000 f89d 	bl	800b33a <HAL_TIM_IC_CaptureCallback>
 800b200:	e005      	b.n	800b20e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	f000 f88f 	bl	800b326 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f000 f8a0 	bl	800b34e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2200      	movs	r2, #0
 800b212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	f003 0310 	and.w	r3, r3, #16
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d020      	beq.n	800b260 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	f003 0310 	and.w	r3, r3, #16
 800b224:	2b00      	cmp	r3, #0
 800b226:	d01b      	beq.n	800b260 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	f06f 0210 	mvn.w	r2, #16
 800b230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2208      	movs	r2, #8
 800b236:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	69db      	ldr	r3, [r3, #28]
 800b23e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b242:	2b00      	cmp	r3, #0
 800b244:	d003      	beq.n	800b24e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f000 f877 	bl	800b33a <HAL_TIM_IC_CaptureCallback>
 800b24c:	e005      	b.n	800b25a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f000 f869 	bl	800b326 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f000 f87a 	bl	800b34e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2200      	movs	r2, #0
 800b25e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	f003 0301 	and.w	r3, r3, #1
 800b266:	2b00      	cmp	r3, #0
 800b268:	d00c      	beq.n	800b284 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	f003 0301 	and.w	r3, r3, #1
 800b270:	2b00      	cmp	r3, #0
 800b272:	d007      	beq.n	800b284 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f06f 0201 	mvn.w	r2, #1
 800b27c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f7f6 feb2 	bl	8001fe8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d104      	bne.n	800b298 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b294:	2b00      	cmp	r3, #0
 800b296:	d00c      	beq.n	800b2b2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d007      	beq.n	800b2b2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b2aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f000 f913 	bl	800b4d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d00c      	beq.n	800b2d6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d007      	beq.n	800b2d6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b2ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f000 f90b 	bl	800b4ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d00c      	beq.n	800b2fa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d007      	beq.n	800b2fa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b2f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f000 f834 	bl	800b362 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	f003 0320 	and.w	r3, r3, #32
 800b300:	2b00      	cmp	r3, #0
 800b302:	d00c      	beq.n	800b31e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	f003 0320 	and.w	r3, r3, #32
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d007      	beq.n	800b31e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	f06f 0220 	mvn.w	r2, #32
 800b316:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	f000 f8d3 	bl	800b4c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b31e:	bf00      	nop
 800b320:	3710      	adds	r7, #16
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}

0800b326 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b326:	b480      	push	{r7}
 800b328:	b083      	sub	sp, #12
 800b32a:	af00      	add	r7, sp, #0
 800b32c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b32e:	bf00      	nop
 800b330:	370c      	adds	r7, #12
 800b332:	46bd      	mov	sp, r7
 800b334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b338:	4770      	bx	lr

0800b33a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b33a:	b480      	push	{r7}
 800b33c:	b083      	sub	sp, #12
 800b33e:	af00      	add	r7, sp, #0
 800b340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b342:	bf00      	nop
 800b344:	370c      	adds	r7, #12
 800b346:	46bd      	mov	sp, r7
 800b348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34c:	4770      	bx	lr

0800b34e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b34e:	b480      	push	{r7}
 800b350:	b083      	sub	sp, #12
 800b352:	af00      	add	r7, sp, #0
 800b354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b356:	bf00      	nop
 800b358:	370c      	adds	r7, #12
 800b35a:	46bd      	mov	sp, r7
 800b35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b360:	4770      	bx	lr

0800b362 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b362:	b480      	push	{r7}
 800b364:	b083      	sub	sp, #12
 800b366:	af00      	add	r7, sp, #0
 800b368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b36a:	bf00      	nop
 800b36c:	370c      	adds	r7, #12
 800b36e:	46bd      	mov	sp, r7
 800b370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b374:	4770      	bx	lr
	...

0800b378 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b378:	b480      	push	{r7}
 800b37a:	b085      	sub	sp, #20
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
 800b380:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	4a46      	ldr	r2, [pc, #280]	@ (800b4a4 <TIM_Base_SetConfig+0x12c>)
 800b38c:	4293      	cmp	r3, r2
 800b38e:	d013      	beq.n	800b3b8 <TIM_Base_SetConfig+0x40>
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b396:	d00f      	beq.n	800b3b8 <TIM_Base_SetConfig+0x40>
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	4a43      	ldr	r2, [pc, #268]	@ (800b4a8 <TIM_Base_SetConfig+0x130>)
 800b39c:	4293      	cmp	r3, r2
 800b39e:	d00b      	beq.n	800b3b8 <TIM_Base_SetConfig+0x40>
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	4a42      	ldr	r2, [pc, #264]	@ (800b4ac <TIM_Base_SetConfig+0x134>)
 800b3a4:	4293      	cmp	r3, r2
 800b3a6:	d007      	beq.n	800b3b8 <TIM_Base_SetConfig+0x40>
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	4a41      	ldr	r2, [pc, #260]	@ (800b4b0 <TIM_Base_SetConfig+0x138>)
 800b3ac:	4293      	cmp	r3, r2
 800b3ae:	d003      	beq.n	800b3b8 <TIM_Base_SetConfig+0x40>
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	4a40      	ldr	r2, [pc, #256]	@ (800b4b4 <TIM_Base_SetConfig+0x13c>)
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d108      	bne.n	800b3ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b3be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	685b      	ldr	r3, [r3, #4]
 800b3c4:	68fa      	ldr	r2, [r7, #12]
 800b3c6:	4313      	orrs	r3, r2
 800b3c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	4a35      	ldr	r2, [pc, #212]	@ (800b4a4 <TIM_Base_SetConfig+0x12c>)
 800b3ce:	4293      	cmp	r3, r2
 800b3d0:	d01f      	beq.n	800b412 <TIM_Base_SetConfig+0x9a>
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b3d8:	d01b      	beq.n	800b412 <TIM_Base_SetConfig+0x9a>
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	4a32      	ldr	r2, [pc, #200]	@ (800b4a8 <TIM_Base_SetConfig+0x130>)
 800b3de:	4293      	cmp	r3, r2
 800b3e0:	d017      	beq.n	800b412 <TIM_Base_SetConfig+0x9a>
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	4a31      	ldr	r2, [pc, #196]	@ (800b4ac <TIM_Base_SetConfig+0x134>)
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	d013      	beq.n	800b412 <TIM_Base_SetConfig+0x9a>
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	4a30      	ldr	r2, [pc, #192]	@ (800b4b0 <TIM_Base_SetConfig+0x138>)
 800b3ee:	4293      	cmp	r3, r2
 800b3f0:	d00f      	beq.n	800b412 <TIM_Base_SetConfig+0x9a>
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	4a2f      	ldr	r2, [pc, #188]	@ (800b4b4 <TIM_Base_SetConfig+0x13c>)
 800b3f6:	4293      	cmp	r3, r2
 800b3f8:	d00b      	beq.n	800b412 <TIM_Base_SetConfig+0x9a>
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	4a2e      	ldr	r2, [pc, #184]	@ (800b4b8 <TIM_Base_SetConfig+0x140>)
 800b3fe:	4293      	cmp	r3, r2
 800b400:	d007      	beq.n	800b412 <TIM_Base_SetConfig+0x9a>
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	4a2d      	ldr	r2, [pc, #180]	@ (800b4bc <TIM_Base_SetConfig+0x144>)
 800b406:	4293      	cmp	r3, r2
 800b408:	d003      	beq.n	800b412 <TIM_Base_SetConfig+0x9a>
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	4a2c      	ldr	r2, [pc, #176]	@ (800b4c0 <TIM_Base_SetConfig+0x148>)
 800b40e:	4293      	cmp	r3, r2
 800b410:	d108      	bne.n	800b424 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b418:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	68db      	ldr	r3, [r3, #12]
 800b41e:	68fa      	ldr	r2, [r7, #12]
 800b420:	4313      	orrs	r3, r2
 800b422:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	695b      	ldr	r3, [r3, #20]
 800b42e:	4313      	orrs	r3, r2
 800b430:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	68fa      	ldr	r2, [r7, #12]
 800b436:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	689a      	ldr	r2, [r3, #8]
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b440:	683b      	ldr	r3, [r7, #0]
 800b442:	681a      	ldr	r2, [r3, #0]
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	4a16      	ldr	r2, [pc, #88]	@ (800b4a4 <TIM_Base_SetConfig+0x12c>)
 800b44c:	4293      	cmp	r3, r2
 800b44e:	d00f      	beq.n	800b470 <TIM_Base_SetConfig+0xf8>
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	4a18      	ldr	r2, [pc, #96]	@ (800b4b4 <TIM_Base_SetConfig+0x13c>)
 800b454:	4293      	cmp	r3, r2
 800b456:	d00b      	beq.n	800b470 <TIM_Base_SetConfig+0xf8>
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	4a17      	ldr	r2, [pc, #92]	@ (800b4b8 <TIM_Base_SetConfig+0x140>)
 800b45c:	4293      	cmp	r3, r2
 800b45e:	d007      	beq.n	800b470 <TIM_Base_SetConfig+0xf8>
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	4a16      	ldr	r2, [pc, #88]	@ (800b4bc <TIM_Base_SetConfig+0x144>)
 800b464:	4293      	cmp	r3, r2
 800b466:	d003      	beq.n	800b470 <TIM_Base_SetConfig+0xf8>
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	4a15      	ldr	r2, [pc, #84]	@ (800b4c0 <TIM_Base_SetConfig+0x148>)
 800b46c:	4293      	cmp	r3, r2
 800b46e:	d103      	bne.n	800b478 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	691a      	ldr	r2, [r3, #16]
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2201      	movs	r2, #1
 800b47c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	691b      	ldr	r3, [r3, #16]
 800b482:	f003 0301 	and.w	r3, r3, #1
 800b486:	2b01      	cmp	r3, #1
 800b488:	d105      	bne.n	800b496 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	691b      	ldr	r3, [r3, #16]
 800b48e:	f023 0201 	bic.w	r2, r3, #1
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	611a      	str	r2, [r3, #16]
  }
}
 800b496:	bf00      	nop
 800b498:	3714      	adds	r7, #20
 800b49a:	46bd      	mov	sp, r7
 800b49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a0:	4770      	bx	lr
 800b4a2:	bf00      	nop
 800b4a4:	40010000 	.word	0x40010000
 800b4a8:	40000400 	.word	0x40000400
 800b4ac:	40000800 	.word	0x40000800
 800b4b0:	40000c00 	.word	0x40000c00
 800b4b4:	40010400 	.word	0x40010400
 800b4b8:	40014000 	.word	0x40014000
 800b4bc:	40014400 	.word	0x40014400
 800b4c0:	40014800 	.word	0x40014800

0800b4c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b083      	sub	sp, #12
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b4cc:	bf00      	nop
 800b4ce:	370c      	adds	r7, #12
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d6:	4770      	bx	lr

0800b4d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b4d8:	b480      	push	{r7}
 800b4da:	b083      	sub	sp, #12
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b4e0:	bf00      	nop
 800b4e2:	370c      	adds	r7, #12
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ea:	4770      	bx	lr

0800b4ec <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b083      	sub	sp, #12
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b4f4:	bf00      	nop
 800b4f6:	370c      	adds	r7, #12
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fe:	4770      	bx	lr

0800b500 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b082      	sub	sp, #8
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d101      	bne.n	800b512 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b50e:	2301      	movs	r3, #1
 800b510:	e042      	b.n	800b598 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d106      	bne.n	800b52a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2200      	movs	r2, #0
 800b520:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b524:	6878      	ldr	r0, [r7, #4]
 800b526:	f7f6 ffd7 	bl	80024d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2224      	movs	r2, #36	@ 0x24
 800b52e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	681a      	ldr	r2, [r3, #0]
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f022 0201 	bic.w	r2, r2, #1
 800b540:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b546:	2b00      	cmp	r3, #0
 800b548:	d002      	beq.n	800b550 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f000 ff22 	bl	800c394 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b550:	6878      	ldr	r0, [r7, #4]
 800b552:	f000 f8b3 	bl	800b6bc <UART_SetConfig>
 800b556:	4603      	mov	r3, r0
 800b558:	2b01      	cmp	r3, #1
 800b55a:	d101      	bne.n	800b560 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b55c:	2301      	movs	r3, #1
 800b55e:	e01b      	b.n	800b598 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	685a      	ldr	r2, [r3, #4]
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b56e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	689a      	ldr	r2, [r3, #8]
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b57e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	681a      	ldr	r2, [r3, #0]
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	f042 0201 	orr.w	r2, r2, #1
 800b58e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	f000 ffa1 	bl	800c4d8 <UART_CheckIdleState>
 800b596:	4603      	mov	r3, r0
}
 800b598:	4618      	mov	r0, r3
 800b59a:	3708      	adds	r7, #8
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}

0800b5a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b08a      	sub	sp, #40	@ 0x28
 800b5a4:	af02      	add	r7, sp, #8
 800b5a6:	60f8      	str	r0, [r7, #12]
 800b5a8:	60b9      	str	r1, [r7, #8]
 800b5aa:	603b      	str	r3, [r7, #0]
 800b5ac:	4613      	mov	r3, r2
 800b5ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b5b6:	2b20      	cmp	r3, #32
 800b5b8:	d17b      	bne.n	800b6b2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d002      	beq.n	800b5c6 <HAL_UART_Transmit+0x26>
 800b5c0:	88fb      	ldrh	r3, [r7, #6]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d101      	bne.n	800b5ca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	e074      	b.n	800b6b4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	2221      	movs	r2, #33	@ 0x21
 800b5d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b5da:	f7f7 f861 	bl	80026a0 <HAL_GetTick>
 800b5de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	88fa      	ldrh	r2, [r7, #6]
 800b5e4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	88fa      	ldrh	r2, [r7, #6]
 800b5ec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	689b      	ldr	r3, [r3, #8]
 800b5f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b5f8:	d108      	bne.n	800b60c <HAL_UART_Transmit+0x6c>
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	691b      	ldr	r3, [r3, #16]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d104      	bne.n	800b60c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b602:	2300      	movs	r3, #0
 800b604:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b606:	68bb      	ldr	r3, [r7, #8]
 800b608:	61bb      	str	r3, [r7, #24]
 800b60a:	e003      	b.n	800b614 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b610:	2300      	movs	r3, #0
 800b612:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b614:	e030      	b.n	800b678 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b616:	683b      	ldr	r3, [r7, #0]
 800b618:	9300      	str	r3, [sp, #0]
 800b61a:	697b      	ldr	r3, [r7, #20]
 800b61c:	2200      	movs	r2, #0
 800b61e:	2180      	movs	r1, #128	@ 0x80
 800b620:	68f8      	ldr	r0, [r7, #12]
 800b622:	f001 f803 	bl	800c62c <UART_WaitOnFlagUntilTimeout>
 800b626:	4603      	mov	r3, r0
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d005      	beq.n	800b638 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	2220      	movs	r2, #32
 800b630:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800b634:	2303      	movs	r3, #3
 800b636:	e03d      	b.n	800b6b4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b638:	69fb      	ldr	r3, [r7, #28]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d10b      	bne.n	800b656 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b63e:	69bb      	ldr	r3, [r7, #24]
 800b640:	881b      	ldrh	r3, [r3, #0]
 800b642:	461a      	mov	r2, r3
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b64c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b64e:	69bb      	ldr	r3, [r7, #24]
 800b650:	3302      	adds	r3, #2
 800b652:	61bb      	str	r3, [r7, #24]
 800b654:	e007      	b.n	800b666 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b656:	69fb      	ldr	r3, [r7, #28]
 800b658:	781a      	ldrb	r2, [r3, #0]
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b660:	69fb      	ldr	r3, [r7, #28]
 800b662:	3301      	adds	r3, #1
 800b664:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b66c:	b29b      	uxth	r3, r3
 800b66e:	3b01      	subs	r3, #1
 800b670:	b29a      	uxth	r2, r3
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b67e:	b29b      	uxth	r3, r3
 800b680:	2b00      	cmp	r3, #0
 800b682:	d1c8      	bne.n	800b616 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	9300      	str	r3, [sp, #0]
 800b688:	697b      	ldr	r3, [r7, #20]
 800b68a:	2200      	movs	r2, #0
 800b68c:	2140      	movs	r1, #64	@ 0x40
 800b68e:	68f8      	ldr	r0, [r7, #12]
 800b690:	f000 ffcc 	bl	800c62c <UART_WaitOnFlagUntilTimeout>
 800b694:	4603      	mov	r3, r0
 800b696:	2b00      	cmp	r3, #0
 800b698:	d005      	beq.n	800b6a6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	2220      	movs	r2, #32
 800b69e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b6a2:	2303      	movs	r3, #3
 800b6a4:	e006      	b.n	800b6b4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	2220      	movs	r2, #32
 800b6aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	e000      	b.n	800b6b4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b6b2:	2302      	movs	r3, #2
  }
}
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	3720      	adds	r7, #32
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}

0800b6bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b6bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b6c0:	b092      	sub	sp, #72	@ 0x48
 800b6c2:	af00      	add	r7, sp, #0
 800b6c4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b6cc:	697b      	ldr	r3, [r7, #20]
 800b6ce:	689a      	ldr	r2, [r3, #8]
 800b6d0:	697b      	ldr	r3, [r7, #20]
 800b6d2:	691b      	ldr	r3, [r3, #16]
 800b6d4:	431a      	orrs	r2, r3
 800b6d6:	697b      	ldr	r3, [r7, #20]
 800b6d8:	695b      	ldr	r3, [r3, #20]
 800b6da:	431a      	orrs	r2, r3
 800b6dc:	697b      	ldr	r3, [r7, #20]
 800b6de:	69db      	ldr	r3, [r3, #28]
 800b6e0:	4313      	orrs	r3, r2
 800b6e2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b6e4:	697b      	ldr	r3, [r7, #20]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	681a      	ldr	r2, [r3, #0]
 800b6ea:	4bbe      	ldr	r3, [pc, #760]	@ (800b9e4 <UART_SetConfig+0x328>)
 800b6ec:	4013      	ands	r3, r2
 800b6ee:	697a      	ldr	r2, [r7, #20]
 800b6f0:	6812      	ldr	r2, [r2, #0]
 800b6f2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b6f4:	430b      	orrs	r3, r1
 800b6f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b6f8:	697b      	ldr	r3, [r7, #20]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	685b      	ldr	r3, [r3, #4]
 800b6fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b702:	697b      	ldr	r3, [r7, #20]
 800b704:	68da      	ldr	r2, [r3, #12]
 800b706:	697b      	ldr	r3, [r7, #20]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	430a      	orrs	r2, r1
 800b70c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	699b      	ldr	r3, [r3, #24]
 800b712:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b714:	697b      	ldr	r3, [r7, #20]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	4ab3      	ldr	r2, [pc, #716]	@ (800b9e8 <UART_SetConfig+0x32c>)
 800b71a:	4293      	cmp	r3, r2
 800b71c:	d004      	beq.n	800b728 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b71e:	697b      	ldr	r3, [r7, #20]
 800b720:	6a1b      	ldr	r3, [r3, #32]
 800b722:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b724:	4313      	orrs	r3, r2
 800b726:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b728:	697b      	ldr	r3, [r7, #20]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	689a      	ldr	r2, [r3, #8]
 800b72e:	4baf      	ldr	r3, [pc, #700]	@ (800b9ec <UART_SetConfig+0x330>)
 800b730:	4013      	ands	r3, r2
 800b732:	697a      	ldr	r2, [r7, #20]
 800b734:	6812      	ldr	r2, [r2, #0]
 800b736:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b738:	430b      	orrs	r3, r1
 800b73a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b73c:	697b      	ldr	r3, [r7, #20]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b742:	f023 010f 	bic.w	r1, r3, #15
 800b746:	697b      	ldr	r3, [r7, #20]
 800b748:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b74a:	697b      	ldr	r3, [r7, #20]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	430a      	orrs	r2, r1
 800b750:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b752:	697b      	ldr	r3, [r7, #20]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	4aa6      	ldr	r2, [pc, #664]	@ (800b9f0 <UART_SetConfig+0x334>)
 800b758:	4293      	cmp	r3, r2
 800b75a:	d177      	bne.n	800b84c <UART_SetConfig+0x190>
 800b75c:	4ba5      	ldr	r3, [pc, #660]	@ (800b9f4 <UART_SetConfig+0x338>)
 800b75e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b760:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b764:	2b28      	cmp	r3, #40	@ 0x28
 800b766:	d86d      	bhi.n	800b844 <UART_SetConfig+0x188>
 800b768:	a201      	add	r2, pc, #4	@ (adr r2, 800b770 <UART_SetConfig+0xb4>)
 800b76a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b76e:	bf00      	nop
 800b770:	0800b815 	.word	0x0800b815
 800b774:	0800b845 	.word	0x0800b845
 800b778:	0800b845 	.word	0x0800b845
 800b77c:	0800b845 	.word	0x0800b845
 800b780:	0800b845 	.word	0x0800b845
 800b784:	0800b845 	.word	0x0800b845
 800b788:	0800b845 	.word	0x0800b845
 800b78c:	0800b845 	.word	0x0800b845
 800b790:	0800b81d 	.word	0x0800b81d
 800b794:	0800b845 	.word	0x0800b845
 800b798:	0800b845 	.word	0x0800b845
 800b79c:	0800b845 	.word	0x0800b845
 800b7a0:	0800b845 	.word	0x0800b845
 800b7a4:	0800b845 	.word	0x0800b845
 800b7a8:	0800b845 	.word	0x0800b845
 800b7ac:	0800b845 	.word	0x0800b845
 800b7b0:	0800b825 	.word	0x0800b825
 800b7b4:	0800b845 	.word	0x0800b845
 800b7b8:	0800b845 	.word	0x0800b845
 800b7bc:	0800b845 	.word	0x0800b845
 800b7c0:	0800b845 	.word	0x0800b845
 800b7c4:	0800b845 	.word	0x0800b845
 800b7c8:	0800b845 	.word	0x0800b845
 800b7cc:	0800b845 	.word	0x0800b845
 800b7d0:	0800b82d 	.word	0x0800b82d
 800b7d4:	0800b845 	.word	0x0800b845
 800b7d8:	0800b845 	.word	0x0800b845
 800b7dc:	0800b845 	.word	0x0800b845
 800b7e0:	0800b845 	.word	0x0800b845
 800b7e4:	0800b845 	.word	0x0800b845
 800b7e8:	0800b845 	.word	0x0800b845
 800b7ec:	0800b845 	.word	0x0800b845
 800b7f0:	0800b835 	.word	0x0800b835
 800b7f4:	0800b845 	.word	0x0800b845
 800b7f8:	0800b845 	.word	0x0800b845
 800b7fc:	0800b845 	.word	0x0800b845
 800b800:	0800b845 	.word	0x0800b845
 800b804:	0800b845 	.word	0x0800b845
 800b808:	0800b845 	.word	0x0800b845
 800b80c:	0800b845 	.word	0x0800b845
 800b810:	0800b83d 	.word	0x0800b83d
 800b814:	2301      	movs	r3, #1
 800b816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b81a:	e326      	b.n	800be6a <UART_SetConfig+0x7ae>
 800b81c:	2304      	movs	r3, #4
 800b81e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b822:	e322      	b.n	800be6a <UART_SetConfig+0x7ae>
 800b824:	2308      	movs	r3, #8
 800b826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b82a:	e31e      	b.n	800be6a <UART_SetConfig+0x7ae>
 800b82c:	2310      	movs	r3, #16
 800b82e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b832:	e31a      	b.n	800be6a <UART_SetConfig+0x7ae>
 800b834:	2320      	movs	r3, #32
 800b836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b83a:	e316      	b.n	800be6a <UART_SetConfig+0x7ae>
 800b83c:	2340      	movs	r3, #64	@ 0x40
 800b83e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b842:	e312      	b.n	800be6a <UART_SetConfig+0x7ae>
 800b844:	2380      	movs	r3, #128	@ 0x80
 800b846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b84a:	e30e      	b.n	800be6a <UART_SetConfig+0x7ae>
 800b84c:	697b      	ldr	r3, [r7, #20]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	4a69      	ldr	r2, [pc, #420]	@ (800b9f8 <UART_SetConfig+0x33c>)
 800b852:	4293      	cmp	r3, r2
 800b854:	d130      	bne.n	800b8b8 <UART_SetConfig+0x1fc>
 800b856:	4b67      	ldr	r3, [pc, #412]	@ (800b9f4 <UART_SetConfig+0x338>)
 800b858:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b85a:	f003 0307 	and.w	r3, r3, #7
 800b85e:	2b05      	cmp	r3, #5
 800b860:	d826      	bhi.n	800b8b0 <UART_SetConfig+0x1f4>
 800b862:	a201      	add	r2, pc, #4	@ (adr r2, 800b868 <UART_SetConfig+0x1ac>)
 800b864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b868:	0800b881 	.word	0x0800b881
 800b86c:	0800b889 	.word	0x0800b889
 800b870:	0800b891 	.word	0x0800b891
 800b874:	0800b899 	.word	0x0800b899
 800b878:	0800b8a1 	.word	0x0800b8a1
 800b87c:	0800b8a9 	.word	0x0800b8a9
 800b880:	2300      	movs	r3, #0
 800b882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b886:	e2f0      	b.n	800be6a <UART_SetConfig+0x7ae>
 800b888:	2304      	movs	r3, #4
 800b88a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b88e:	e2ec      	b.n	800be6a <UART_SetConfig+0x7ae>
 800b890:	2308      	movs	r3, #8
 800b892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b896:	e2e8      	b.n	800be6a <UART_SetConfig+0x7ae>
 800b898:	2310      	movs	r3, #16
 800b89a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b89e:	e2e4      	b.n	800be6a <UART_SetConfig+0x7ae>
 800b8a0:	2320      	movs	r3, #32
 800b8a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8a6:	e2e0      	b.n	800be6a <UART_SetConfig+0x7ae>
 800b8a8:	2340      	movs	r3, #64	@ 0x40
 800b8aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8ae:	e2dc      	b.n	800be6a <UART_SetConfig+0x7ae>
 800b8b0:	2380      	movs	r3, #128	@ 0x80
 800b8b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8b6:	e2d8      	b.n	800be6a <UART_SetConfig+0x7ae>
 800b8b8:	697b      	ldr	r3, [r7, #20]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	4a4f      	ldr	r2, [pc, #316]	@ (800b9fc <UART_SetConfig+0x340>)
 800b8be:	4293      	cmp	r3, r2
 800b8c0:	d130      	bne.n	800b924 <UART_SetConfig+0x268>
 800b8c2:	4b4c      	ldr	r3, [pc, #304]	@ (800b9f4 <UART_SetConfig+0x338>)
 800b8c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b8c6:	f003 0307 	and.w	r3, r3, #7
 800b8ca:	2b05      	cmp	r3, #5
 800b8cc:	d826      	bhi.n	800b91c <UART_SetConfig+0x260>
 800b8ce:	a201      	add	r2, pc, #4	@ (adr r2, 800b8d4 <UART_SetConfig+0x218>)
 800b8d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8d4:	0800b8ed 	.word	0x0800b8ed
 800b8d8:	0800b8f5 	.word	0x0800b8f5
 800b8dc:	0800b8fd 	.word	0x0800b8fd
 800b8e0:	0800b905 	.word	0x0800b905
 800b8e4:	0800b90d 	.word	0x0800b90d
 800b8e8:	0800b915 	.word	0x0800b915
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8f2:	e2ba      	b.n	800be6a <UART_SetConfig+0x7ae>
 800b8f4:	2304      	movs	r3, #4
 800b8f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8fa:	e2b6      	b.n	800be6a <UART_SetConfig+0x7ae>
 800b8fc:	2308      	movs	r3, #8
 800b8fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b902:	e2b2      	b.n	800be6a <UART_SetConfig+0x7ae>
 800b904:	2310      	movs	r3, #16
 800b906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b90a:	e2ae      	b.n	800be6a <UART_SetConfig+0x7ae>
 800b90c:	2320      	movs	r3, #32
 800b90e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b912:	e2aa      	b.n	800be6a <UART_SetConfig+0x7ae>
 800b914:	2340      	movs	r3, #64	@ 0x40
 800b916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b91a:	e2a6      	b.n	800be6a <UART_SetConfig+0x7ae>
 800b91c:	2380      	movs	r3, #128	@ 0x80
 800b91e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b922:	e2a2      	b.n	800be6a <UART_SetConfig+0x7ae>
 800b924:	697b      	ldr	r3, [r7, #20]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	4a35      	ldr	r2, [pc, #212]	@ (800ba00 <UART_SetConfig+0x344>)
 800b92a:	4293      	cmp	r3, r2
 800b92c:	d130      	bne.n	800b990 <UART_SetConfig+0x2d4>
 800b92e:	4b31      	ldr	r3, [pc, #196]	@ (800b9f4 <UART_SetConfig+0x338>)
 800b930:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b932:	f003 0307 	and.w	r3, r3, #7
 800b936:	2b05      	cmp	r3, #5
 800b938:	d826      	bhi.n	800b988 <UART_SetConfig+0x2cc>
 800b93a:	a201      	add	r2, pc, #4	@ (adr r2, 800b940 <UART_SetConfig+0x284>)
 800b93c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b940:	0800b959 	.word	0x0800b959
 800b944:	0800b961 	.word	0x0800b961
 800b948:	0800b969 	.word	0x0800b969
 800b94c:	0800b971 	.word	0x0800b971
 800b950:	0800b979 	.word	0x0800b979
 800b954:	0800b981 	.word	0x0800b981
 800b958:	2300      	movs	r3, #0
 800b95a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b95e:	e284      	b.n	800be6a <UART_SetConfig+0x7ae>
 800b960:	2304      	movs	r3, #4
 800b962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b966:	e280      	b.n	800be6a <UART_SetConfig+0x7ae>
 800b968:	2308      	movs	r3, #8
 800b96a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b96e:	e27c      	b.n	800be6a <UART_SetConfig+0x7ae>
 800b970:	2310      	movs	r3, #16
 800b972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b976:	e278      	b.n	800be6a <UART_SetConfig+0x7ae>
 800b978:	2320      	movs	r3, #32
 800b97a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b97e:	e274      	b.n	800be6a <UART_SetConfig+0x7ae>
 800b980:	2340      	movs	r3, #64	@ 0x40
 800b982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b986:	e270      	b.n	800be6a <UART_SetConfig+0x7ae>
 800b988:	2380      	movs	r3, #128	@ 0x80
 800b98a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b98e:	e26c      	b.n	800be6a <UART_SetConfig+0x7ae>
 800b990:	697b      	ldr	r3, [r7, #20]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	4a1b      	ldr	r2, [pc, #108]	@ (800ba04 <UART_SetConfig+0x348>)
 800b996:	4293      	cmp	r3, r2
 800b998:	d142      	bne.n	800ba20 <UART_SetConfig+0x364>
 800b99a:	4b16      	ldr	r3, [pc, #88]	@ (800b9f4 <UART_SetConfig+0x338>)
 800b99c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b99e:	f003 0307 	and.w	r3, r3, #7
 800b9a2:	2b05      	cmp	r3, #5
 800b9a4:	d838      	bhi.n	800ba18 <UART_SetConfig+0x35c>
 800b9a6:	a201      	add	r2, pc, #4	@ (adr r2, 800b9ac <UART_SetConfig+0x2f0>)
 800b9a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9ac:	0800b9c5 	.word	0x0800b9c5
 800b9b0:	0800b9cd 	.word	0x0800b9cd
 800b9b4:	0800b9d5 	.word	0x0800b9d5
 800b9b8:	0800b9dd 	.word	0x0800b9dd
 800b9bc:	0800ba09 	.word	0x0800ba09
 800b9c0:	0800ba11 	.word	0x0800ba11
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9ca:	e24e      	b.n	800be6a <UART_SetConfig+0x7ae>
 800b9cc:	2304      	movs	r3, #4
 800b9ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9d2:	e24a      	b.n	800be6a <UART_SetConfig+0x7ae>
 800b9d4:	2308      	movs	r3, #8
 800b9d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9da:	e246      	b.n	800be6a <UART_SetConfig+0x7ae>
 800b9dc:	2310      	movs	r3, #16
 800b9de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9e2:	e242      	b.n	800be6a <UART_SetConfig+0x7ae>
 800b9e4:	cfff69f3 	.word	0xcfff69f3
 800b9e8:	58000c00 	.word	0x58000c00
 800b9ec:	11fff4ff 	.word	0x11fff4ff
 800b9f0:	40011000 	.word	0x40011000
 800b9f4:	58024400 	.word	0x58024400
 800b9f8:	40004400 	.word	0x40004400
 800b9fc:	40004800 	.word	0x40004800
 800ba00:	40004c00 	.word	0x40004c00
 800ba04:	40005000 	.word	0x40005000
 800ba08:	2320      	movs	r3, #32
 800ba0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba0e:	e22c      	b.n	800be6a <UART_SetConfig+0x7ae>
 800ba10:	2340      	movs	r3, #64	@ 0x40
 800ba12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba16:	e228      	b.n	800be6a <UART_SetConfig+0x7ae>
 800ba18:	2380      	movs	r3, #128	@ 0x80
 800ba1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba1e:	e224      	b.n	800be6a <UART_SetConfig+0x7ae>
 800ba20:	697b      	ldr	r3, [r7, #20]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	4ab1      	ldr	r2, [pc, #708]	@ (800bcec <UART_SetConfig+0x630>)
 800ba26:	4293      	cmp	r3, r2
 800ba28:	d176      	bne.n	800bb18 <UART_SetConfig+0x45c>
 800ba2a:	4bb1      	ldr	r3, [pc, #708]	@ (800bcf0 <UART_SetConfig+0x634>)
 800ba2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ba32:	2b28      	cmp	r3, #40	@ 0x28
 800ba34:	d86c      	bhi.n	800bb10 <UART_SetConfig+0x454>
 800ba36:	a201      	add	r2, pc, #4	@ (adr r2, 800ba3c <UART_SetConfig+0x380>)
 800ba38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba3c:	0800bae1 	.word	0x0800bae1
 800ba40:	0800bb11 	.word	0x0800bb11
 800ba44:	0800bb11 	.word	0x0800bb11
 800ba48:	0800bb11 	.word	0x0800bb11
 800ba4c:	0800bb11 	.word	0x0800bb11
 800ba50:	0800bb11 	.word	0x0800bb11
 800ba54:	0800bb11 	.word	0x0800bb11
 800ba58:	0800bb11 	.word	0x0800bb11
 800ba5c:	0800bae9 	.word	0x0800bae9
 800ba60:	0800bb11 	.word	0x0800bb11
 800ba64:	0800bb11 	.word	0x0800bb11
 800ba68:	0800bb11 	.word	0x0800bb11
 800ba6c:	0800bb11 	.word	0x0800bb11
 800ba70:	0800bb11 	.word	0x0800bb11
 800ba74:	0800bb11 	.word	0x0800bb11
 800ba78:	0800bb11 	.word	0x0800bb11
 800ba7c:	0800baf1 	.word	0x0800baf1
 800ba80:	0800bb11 	.word	0x0800bb11
 800ba84:	0800bb11 	.word	0x0800bb11
 800ba88:	0800bb11 	.word	0x0800bb11
 800ba8c:	0800bb11 	.word	0x0800bb11
 800ba90:	0800bb11 	.word	0x0800bb11
 800ba94:	0800bb11 	.word	0x0800bb11
 800ba98:	0800bb11 	.word	0x0800bb11
 800ba9c:	0800baf9 	.word	0x0800baf9
 800baa0:	0800bb11 	.word	0x0800bb11
 800baa4:	0800bb11 	.word	0x0800bb11
 800baa8:	0800bb11 	.word	0x0800bb11
 800baac:	0800bb11 	.word	0x0800bb11
 800bab0:	0800bb11 	.word	0x0800bb11
 800bab4:	0800bb11 	.word	0x0800bb11
 800bab8:	0800bb11 	.word	0x0800bb11
 800babc:	0800bb01 	.word	0x0800bb01
 800bac0:	0800bb11 	.word	0x0800bb11
 800bac4:	0800bb11 	.word	0x0800bb11
 800bac8:	0800bb11 	.word	0x0800bb11
 800bacc:	0800bb11 	.word	0x0800bb11
 800bad0:	0800bb11 	.word	0x0800bb11
 800bad4:	0800bb11 	.word	0x0800bb11
 800bad8:	0800bb11 	.word	0x0800bb11
 800badc:	0800bb09 	.word	0x0800bb09
 800bae0:	2301      	movs	r3, #1
 800bae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bae6:	e1c0      	b.n	800be6a <UART_SetConfig+0x7ae>
 800bae8:	2304      	movs	r3, #4
 800baea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800baee:	e1bc      	b.n	800be6a <UART_SetConfig+0x7ae>
 800baf0:	2308      	movs	r3, #8
 800baf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800baf6:	e1b8      	b.n	800be6a <UART_SetConfig+0x7ae>
 800baf8:	2310      	movs	r3, #16
 800bafa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bafe:	e1b4      	b.n	800be6a <UART_SetConfig+0x7ae>
 800bb00:	2320      	movs	r3, #32
 800bb02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb06:	e1b0      	b.n	800be6a <UART_SetConfig+0x7ae>
 800bb08:	2340      	movs	r3, #64	@ 0x40
 800bb0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb0e:	e1ac      	b.n	800be6a <UART_SetConfig+0x7ae>
 800bb10:	2380      	movs	r3, #128	@ 0x80
 800bb12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb16:	e1a8      	b.n	800be6a <UART_SetConfig+0x7ae>
 800bb18:	697b      	ldr	r3, [r7, #20]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	4a75      	ldr	r2, [pc, #468]	@ (800bcf4 <UART_SetConfig+0x638>)
 800bb1e:	4293      	cmp	r3, r2
 800bb20:	d130      	bne.n	800bb84 <UART_SetConfig+0x4c8>
 800bb22:	4b73      	ldr	r3, [pc, #460]	@ (800bcf0 <UART_SetConfig+0x634>)
 800bb24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb26:	f003 0307 	and.w	r3, r3, #7
 800bb2a:	2b05      	cmp	r3, #5
 800bb2c:	d826      	bhi.n	800bb7c <UART_SetConfig+0x4c0>
 800bb2e:	a201      	add	r2, pc, #4	@ (adr r2, 800bb34 <UART_SetConfig+0x478>)
 800bb30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb34:	0800bb4d 	.word	0x0800bb4d
 800bb38:	0800bb55 	.word	0x0800bb55
 800bb3c:	0800bb5d 	.word	0x0800bb5d
 800bb40:	0800bb65 	.word	0x0800bb65
 800bb44:	0800bb6d 	.word	0x0800bb6d
 800bb48:	0800bb75 	.word	0x0800bb75
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb52:	e18a      	b.n	800be6a <UART_SetConfig+0x7ae>
 800bb54:	2304      	movs	r3, #4
 800bb56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb5a:	e186      	b.n	800be6a <UART_SetConfig+0x7ae>
 800bb5c:	2308      	movs	r3, #8
 800bb5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb62:	e182      	b.n	800be6a <UART_SetConfig+0x7ae>
 800bb64:	2310      	movs	r3, #16
 800bb66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb6a:	e17e      	b.n	800be6a <UART_SetConfig+0x7ae>
 800bb6c:	2320      	movs	r3, #32
 800bb6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb72:	e17a      	b.n	800be6a <UART_SetConfig+0x7ae>
 800bb74:	2340      	movs	r3, #64	@ 0x40
 800bb76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb7a:	e176      	b.n	800be6a <UART_SetConfig+0x7ae>
 800bb7c:	2380      	movs	r3, #128	@ 0x80
 800bb7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb82:	e172      	b.n	800be6a <UART_SetConfig+0x7ae>
 800bb84:	697b      	ldr	r3, [r7, #20]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	4a5b      	ldr	r2, [pc, #364]	@ (800bcf8 <UART_SetConfig+0x63c>)
 800bb8a:	4293      	cmp	r3, r2
 800bb8c:	d130      	bne.n	800bbf0 <UART_SetConfig+0x534>
 800bb8e:	4b58      	ldr	r3, [pc, #352]	@ (800bcf0 <UART_SetConfig+0x634>)
 800bb90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb92:	f003 0307 	and.w	r3, r3, #7
 800bb96:	2b05      	cmp	r3, #5
 800bb98:	d826      	bhi.n	800bbe8 <UART_SetConfig+0x52c>
 800bb9a:	a201      	add	r2, pc, #4	@ (adr r2, 800bba0 <UART_SetConfig+0x4e4>)
 800bb9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bba0:	0800bbb9 	.word	0x0800bbb9
 800bba4:	0800bbc1 	.word	0x0800bbc1
 800bba8:	0800bbc9 	.word	0x0800bbc9
 800bbac:	0800bbd1 	.word	0x0800bbd1
 800bbb0:	0800bbd9 	.word	0x0800bbd9
 800bbb4:	0800bbe1 	.word	0x0800bbe1
 800bbb8:	2300      	movs	r3, #0
 800bbba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbbe:	e154      	b.n	800be6a <UART_SetConfig+0x7ae>
 800bbc0:	2304      	movs	r3, #4
 800bbc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbc6:	e150      	b.n	800be6a <UART_SetConfig+0x7ae>
 800bbc8:	2308      	movs	r3, #8
 800bbca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbce:	e14c      	b.n	800be6a <UART_SetConfig+0x7ae>
 800bbd0:	2310      	movs	r3, #16
 800bbd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbd6:	e148      	b.n	800be6a <UART_SetConfig+0x7ae>
 800bbd8:	2320      	movs	r3, #32
 800bbda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbde:	e144      	b.n	800be6a <UART_SetConfig+0x7ae>
 800bbe0:	2340      	movs	r3, #64	@ 0x40
 800bbe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbe6:	e140      	b.n	800be6a <UART_SetConfig+0x7ae>
 800bbe8:	2380      	movs	r3, #128	@ 0x80
 800bbea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbee:	e13c      	b.n	800be6a <UART_SetConfig+0x7ae>
 800bbf0:	697b      	ldr	r3, [r7, #20]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	4a41      	ldr	r2, [pc, #260]	@ (800bcfc <UART_SetConfig+0x640>)
 800bbf6:	4293      	cmp	r3, r2
 800bbf8:	f040 8082 	bne.w	800bd00 <UART_SetConfig+0x644>
 800bbfc:	4b3c      	ldr	r3, [pc, #240]	@ (800bcf0 <UART_SetConfig+0x634>)
 800bbfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc00:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bc04:	2b28      	cmp	r3, #40	@ 0x28
 800bc06:	d86d      	bhi.n	800bce4 <UART_SetConfig+0x628>
 800bc08:	a201      	add	r2, pc, #4	@ (adr r2, 800bc10 <UART_SetConfig+0x554>)
 800bc0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc0e:	bf00      	nop
 800bc10:	0800bcb5 	.word	0x0800bcb5
 800bc14:	0800bce5 	.word	0x0800bce5
 800bc18:	0800bce5 	.word	0x0800bce5
 800bc1c:	0800bce5 	.word	0x0800bce5
 800bc20:	0800bce5 	.word	0x0800bce5
 800bc24:	0800bce5 	.word	0x0800bce5
 800bc28:	0800bce5 	.word	0x0800bce5
 800bc2c:	0800bce5 	.word	0x0800bce5
 800bc30:	0800bcbd 	.word	0x0800bcbd
 800bc34:	0800bce5 	.word	0x0800bce5
 800bc38:	0800bce5 	.word	0x0800bce5
 800bc3c:	0800bce5 	.word	0x0800bce5
 800bc40:	0800bce5 	.word	0x0800bce5
 800bc44:	0800bce5 	.word	0x0800bce5
 800bc48:	0800bce5 	.word	0x0800bce5
 800bc4c:	0800bce5 	.word	0x0800bce5
 800bc50:	0800bcc5 	.word	0x0800bcc5
 800bc54:	0800bce5 	.word	0x0800bce5
 800bc58:	0800bce5 	.word	0x0800bce5
 800bc5c:	0800bce5 	.word	0x0800bce5
 800bc60:	0800bce5 	.word	0x0800bce5
 800bc64:	0800bce5 	.word	0x0800bce5
 800bc68:	0800bce5 	.word	0x0800bce5
 800bc6c:	0800bce5 	.word	0x0800bce5
 800bc70:	0800bccd 	.word	0x0800bccd
 800bc74:	0800bce5 	.word	0x0800bce5
 800bc78:	0800bce5 	.word	0x0800bce5
 800bc7c:	0800bce5 	.word	0x0800bce5
 800bc80:	0800bce5 	.word	0x0800bce5
 800bc84:	0800bce5 	.word	0x0800bce5
 800bc88:	0800bce5 	.word	0x0800bce5
 800bc8c:	0800bce5 	.word	0x0800bce5
 800bc90:	0800bcd5 	.word	0x0800bcd5
 800bc94:	0800bce5 	.word	0x0800bce5
 800bc98:	0800bce5 	.word	0x0800bce5
 800bc9c:	0800bce5 	.word	0x0800bce5
 800bca0:	0800bce5 	.word	0x0800bce5
 800bca4:	0800bce5 	.word	0x0800bce5
 800bca8:	0800bce5 	.word	0x0800bce5
 800bcac:	0800bce5 	.word	0x0800bce5
 800bcb0:	0800bcdd 	.word	0x0800bcdd
 800bcb4:	2301      	movs	r3, #1
 800bcb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcba:	e0d6      	b.n	800be6a <UART_SetConfig+0x7ae>
 800bcbc:	2304      	movs	r3, #4
 800bcbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcc2:	e0d2      	b.n	800be6a <UART_SetConfig+0x7ae>
 800bcc4:	2308      	movs	r3, #8
 800bcc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcca:	e0ce      	b.n	800be6a <UART_SetConfig+0x7ae>
 800bccc:	2310      	movs	r3, #16
 800bcce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcd2:	e0ca      	b.n	800be6a <UART_SetConfig+0x7ae>
 800bcd4:	2320      	movs	r3, #32
 800bcd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcda:	e0c6      	b.n	800be6a <UART_SetConfig+0x7ae>
 800bcdc:	2340      	movs	r3, #64	@ 0x40
 800bcde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bce2:	e0c2      	b.n	800be6a <UART_SetConfig+0x7ae>
 800bce4:	2380      	movs	r3, #128	@ 0x80
 800bce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcea:	e0be      	b.n	800be6a <UART_SetConfig+0x7ae>
 800bcec:	40011400 	.word	0x40011400
 800bcf0:	58024400 	.word	0x58024400
 800bcf4:	40007800 	.word	0x40007800
 800bcf8:	40007c00 	.word	0x40007c00
 800bcfc:	40011800 	.word	0x40011800
 800bd00:	697b      	ldr	r3, [r7, #20]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	4aad      	ldr	r2, [pc, #692]	@ (800bfbc <UART_SetConfig+0x900>)
 800bd06:	4293      	cmp	r3, r2
 800bd08:	d176      	bne.n	800bdf8 <UART_SetConfig+0x73c>
 800bd0a:	4bad      	ldr	r3, [pc, #692]	@ (800bfc0 <UART_SetConfig+0x904>)
 800bd0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bd12:	2b28      	cmp	r3, #40	@ 0x28
 800bd14:	d86c      	bhi.n	800bdf0 <UART_SetConfig+0x734>
 800bd16:	a201      	add	r2, pc, #4	@ (adr r2, 800bd1c <UART_SetConfig+0x660>)
 800bd18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd1c:	0800bdc1 	.word	0x0800bdc1
 800bd20:	0800bdf1 	.word	0x0800bdf1
 800bd24:	0800bdf1 	.word	0x0800bdf1
 800bd28:	0800bdf1 	.word	0x0800bdf1
 800bd2c:	0800bdf1 	.word	0x0800bdf1
 800bd30:	0800bdf1 	.word	0x0800bdf1
 800bd34:	0800bdf1 	.word	0x0800bdf1
 800bd38:	0800bdf1 	.word	0x0800bdf1
 800bd3c:	0800bdc9 	.word	0x0800bdc9
 800bd40:	0800bdf1 	.word	0x0800bdf1
 800bd44:	0800bdf1 	.word	0x0800bdf1
 800bd48:	0800bdf1 	.word	0x0800bdf1
 800bd4c:	0800bdf1 	.word	0x0800bdf1
 800bd50:	0800bdf1 	.word	0x0800bdf1
 800bd54:	0800bdf1 	.word	0x0800bdf1
 800bd58:	0800bdf1 	.word	0x0800bdf1
 800bd5c:	0800bdd1 	.word	0x0800bdd1
 800bd60:	0800bdf1 	.word	0x0800bdf1
 800bd64:	0800bdf1 	.word	0x0800bdf1
 800bd68:	0800bdf1 	.word	0x0800bdf1
 800bd6c:	0800bdf1 	.word	0x0800bdf1
 800bd70:	0800bdf1 	.word	0x0800bdf1
 800bd74:	0800bdf1 	.word	0x0800bdf1
 800bd78:	0800bdf1 	.word	0x0800bdf1
 800bd7c:	0800bdd9 	.word	0x0800bdd9
 800bd80:	0800bdf1 	.word	0x0800bdf1
 800bd84:	0800bdf1 	.word	0x0800bdf1
 800bd88:	0800bdf1 	.word	0x0800bdf1
 800bd8c:	0800bdf1 	.word	0x0800bdf1
 800bd90:	0800bdf1 	.word	0x0800bdf1
 800bd94:	0800bdf1 	.word	0x0800bdf1
 800bd98:	0800bdf1 	.word	0x0800bdf1
 800bd9c:	0800bde1 	.word	0x0800bde1
 800bda0:	0800bdf1 	.word	0x0800bdf1
 800bda4:	0800bdf1 	.word	0x0800bdf1
 800bda8:	0800bdf1 	.word	0x0800bdf1
 800bdac:	0800bdf1 	.word	0x0800bdf1
 800bdb0:	0800bdf1 	.word	0x0800bdf1
 800bdb4:	0800bdf1 	.word	0x0800bdf1
 800bdb8:	0800bdf1 	.word	0x0800bdf1
 800bdbc:	0800bde9 	.word	0x0800bde9
 800bdc0:	2301      	movs	r3, #1
 800bdc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdc6:	e050      	b.n	800be6a <UART_SetConfig+0x7ae>
 800bdc8:	2304      	movs	r3, #4
 800bdca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdce:	e04c      	b.n	800be6a <UART_SetConfig+0x7ae>
 800bdd0:	2308      	movs	r3, #8
 800bdd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdd6:	e048      	b.n	800be6a <UART_SetConfig+0x7ae>
 800bdd8:	2310      	movs	r3, #16
 800bdda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdde:	e044      	b.n	800be6a <UART_SetConfig+0x7ae>
 800bde0:	2320      	movs	r3, #32
 800bde2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bde6:	e040      	b.n	800be6a <UART_SetConfig+0x7ae>
 800bde8:	2340      	movs	r3, #64	@ 0x40
 800bdea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdee:	e03c      	b.n	800be6a <UART_SetConfig+0x7ae>
 800bdf0:	2380      	movs	r3, #128	@ 0x80
 800bdf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdf6:	e038      	b.n	800be6a <UART_SetConfig+0x7ae>
 800bdf8:	697b      	ldr	r3, [r7, #20]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	4a71      	ldr	r2, [pc, #452]	@ (800bfc4 <UART_SetConfig+0x908>)
 800bdfe:	4293      	cmp	r3, r2
 800be00:	d130      	bne.n	800be64 <UART_SetConfig+0x7a8>
 800be02:	4b6f      	ldr	r3, [pc, #444]	@ (800bfc0 <UART_SetConfig+0x904>)
 800be04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800be06:	f003 0307 	and.w	r3, r3, #7
 800be0a:	2b05      	cmp	r3, #5
 800be0c:	d826      	bhi.n	800be5c <UART_SetConfig+0x7a0>
 800be0e:	a201      	add	r2, pc, #4	@ (adr r2, 800be14 <UART_SetConfig+0x758>)
 800be10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be14:	0800be2d 	.word	0x0800be2d
 800be18:	0800be35 	.word	0x0800be35
 800be1c:	0800be3d 	.word	0x0800be3d
 800be20:	0800be45 	.word	0x0800be45
 800be24:	0800be4d 	.word	0x0800be4d
 800be28:	0800be55 	.word	0x0800be55
 800be2c:	2302      	movs	r3, #2
 800be2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be32:	e01a      	b.n	800be6a <UART_SetConfig+0x7ae>
 800be34:	2304      	movs	r3, #4
 800be36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be3a:	e016      	b.n	800be6a <UART_SetConfig+0x7ae>
 800be3c:	2308      	movs	r3, #8
 800be3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be42:	e012      	b.n	800be6a <UART_SetConfig+0x7ae>
 800be44:	2310      	movs	r3, #16
 800be46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be4a:	e00e      	b.n	800be6a <UART_SetConfig+0x7ae>
 800be4c:	2320      	movs	r3, #32
 800be4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be52:	e00a      	b.n	800be6a <UART_SetConfig+0x7ae>
 800be54:	2340      	movs	r3, #64	@ 0x40
 800be56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be5a:	e006      	b.n	800be6a <UART_SetConfig+0x7ae>
 800be5c:	2380      	movs	r3, #128	@ 0x80
 800be5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be62:	e002      	b.n	800be6a <UART_SetConfig+0x7ae>
 800be64:	2380      	movs	r3, #128	@ 0x80
 800be66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800be6a:	697b      	ldr	r3, [r7, #20]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	4a55      	ldr	r2, [pc, #340]	@ (800bfc4 <UART_SetConfig+0x908>)
 800be70:	4293      	cmp	r3, r2
 800be72:	f040 80f8 	bne.w	800c066 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800be76:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800be7a:	2b20      	cmp	r3, #32
 800be7c:	dc46      	bgt.n	800bf0c <UART_SetConfig+0x850>
 800be7e:	2b02      	cmp	r3, #2
 800be80:	db75      	blt.n	800bf6e <UART_SetConfig+0x8b2>
 800be82:	3b02      	subs	r3, #2
 800be84:	2b1e      	cmp	r3, #30
 800be86:	d872      	bhi.n	800bf6e <UART_SetConfig+0x8b2>
 800be88:	a201      	add	r2, pc, #4	@ (adr r2, 800be90 <UART_SetConfig+0x7d4>)
 800be8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be8e:	bf00      	nop
 800be90:	0800bf13 	.word	0x0800bf13
 800be94:	0800bf6f 	.word	0x0800bf6f
 800be98:	0800bf1b 	.word	0x0800bf1b
 800be9c:	0800bf6f 	.word	0x0800bf6f
 800bea0:	0800bf6f 	.word	0x0800bf6f
 800bea4:	0800bf6f 	.word	0x0800bf6f
 800bea8:	0800bf2b 	.word	0x0800bf2b
 800beac:	0800bf6f 	.word	0x0800bf6f
 800beb0:	0800bf6f 	.word	0x0800bf6f
 800beb4:	0800bf6f 	.word	0x0800bf6f
 800beb8:	0800bf6f 	.word	0x0800bf6f
 800bebc:	0800bf6f 	.word	0x0800bf6f
 800bec0:	0800bf6f 	.word	0x0800bf6f
 800bec4:	0800bf6f 	.word	0x0800bf6f
 800bec8:	0800bf3b 	.word	0x0800bf3b
 800becc:	0800bf6f 	.word	0x0800bf6f
 800bed0:	0800bf6f 	.word	0x0800bf6f
 800bed4:	0800bf6f 	.word	0x0800bf6f
 800bed8:	0800bf6f 	.word	0x0800bf6f
 800bedc:	0800bf6f 	.word	0x0800bf6f
 800bee0:	0800bf6f 	.word	0x0800bf6f
 800bee4:	0800bf6f 	.word	0x0800bf6f
 800bee8:	0800bf6f 	.word	0x0800bf6f
 800beec:	0800bf6f 	.word	0x0800bf6f
 800bef0:	0800bf6f 	.word	0x0800bf6f
 800bef4:	0800bf6f 	.word	0x0800bf6f
 800bef8:	0800bf6f 	.word	0x0800bf6f
 800befc:	0800bf6f 	.word	0x0800bf6f
 800bf00:	0800bf6f 	.word	0x0800bf6f
 800bf04:	0800bf6f 	.word	0x0800bf6f
 800bf08:	0800bf61 	.word	0x0800bf61
 800bf0c:	2b40      	cmp	r3, #64	@ 0x40
 800bf0e:	d02a      	beq.n	800bf66 <UART_SetConfig+0x8aa>
 800bf10:	e02d      	b.n	800bf6e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800bf12:	f7fe fc05 	bl	800a720 <HAL_RCCEx_GetD3PCLK1Freq>
 800bf16:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bf18:	e02f      	b.n	800bf7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bf1e:	4618      	mov	r0, r3
 800bf20:	f7fe fc14 	bl	800a74c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bf24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf28:	e027      	b.n	800bf7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf2a:	f107 0318 	add.w	r3, r7, #24
 800bf2e:	4618      	mov	r0, r3
 800bf30:	f7fe fd60 	bl	800a9f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bf34:	69fb      	ldr	r3, [r7, #28]
 800bf36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf38:	e01f      	b.n	800bf7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bf3a:	4b21      	ldr	r3, [pc, #132]	@ (800bfc0 <UART_SetConfig+0x904>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	f003 0320 	and.w	r3, r3, #32
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d009      	beq.n	800bf5a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bf46:	4b1e      	ldr	r3, [pc, #120]	@ (800bfc0 <UART_SetConfig+0x904>)
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	08db      	lsrs	r3, r3, #3
 800bf4c:	f003 0303 	and.w	r3, r3, #3
 800bf50:	4a1d      	ldr	r2, [pc, #116]	@ (800bfc8 <UART_SetConfig+0x90c>)
 800bf52:	fa22 f303 	lsr.w	r3, r2, r3
 800bf56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bf58:	e00f      	b.n	800bf7a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800bf5a:	4b1b      	ldr	r3, [pc, #108]	@ (800bfc8 <UART_SetConfig+0x90c>)
 800bf5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf5e:	e00c      	b.n	800bf7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bf60:	4b1a      	ldr	r3, [pc, #104]	@ (800bfcc <UART_SetConfig+0x910>)
 800bf62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf64:	e009      	b.n	800bf7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bf66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bf6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf6c:	e005      	b.n	800bf7a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bf72:	2301      	movs	r3, #1
 800bf74:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bf78:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bf7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	f000 81ee 	beq.w	800c35e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bf82:	697b      	ldr	r3, [r7, #20]
 800bf84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf86:	4a12      	ldr	r2, [pc, #72]	@ (800bfd0 <UART_SetConfig+0x914>)
 800bf88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf8c:	461a      	mov	r2, r3
 800bf8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf90:	fbb3 f3f2 	udiv	r3, r3, r2
 800bf94:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bf96:	697b      	ldr	r3, [r7, #20]
 800bf98:	685a      	ldr	r2, [r3, #4]
 800bf9a:	4613      	mov	r3, r2
 800bf9c:	005b      	lsls	r3, r3, #1
 800bf9e:	4413      	add	r3, r2
 800bfa0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bfa2:	429a      	cmp	r2, r3
 800bfa4:	d305      	bcc.n	800bfb2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bfa6:	697b      	ldr	r3, [r7, #20]
 800bfa8:	685b      	ldr	r3, [r3, #4]
 800bfaa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bfac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bfae:	429a      	cmp	r2, r3
 800bfb0:	d910      	bls.n	800bfd4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800bfb2:	2301      	movs	r3, #1
 800bfb4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bfb8:	e1d1      	b.n	800c35e <UART_SetConfig+0xca2>
 800bfba:	bf00      	nop
 800bfbc:	40011c00 	.word	0x40011c00
 800bfc0:	58024400 	.word	0x58024400
 800bfc4:	58000c00 	.word	0x58000c00
 800bfc8:	03d09000 	.word	0x03d09000
 800bfcc:	003d0900 	.word	0x003d0900
 800bfd0:	08014f70 	.word	0x08014f70
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bfd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	60bb      	str	r3, [r7, #8]
 800bfda:	60fa      	str	r2, [r7, #12]
 800bfdc:	697b      	ldr	r3, [r7, #20]
 800bfde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfe0:	4ac0      	ldr	r2, [pc, #768]	@ (800c2e4 <UART_SetConfig+0xc28>)
 800bfe2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bfe6:	b29b      	uxth	r3, r3
 800bfe8:	2200      	movs	r2, #0
 800bfea:	603b      	str	r3, [r7, #0]
 800bfec:	607a      	str	r2, [r7, #4]
 800bfee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bff2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bff6:	f7f4 fb8f 	bl	8000718 <__aeabi_uldivmod>
 800bffa:	4602      	mov	r2, r0
 800bffc:	460b      	mov	r3, r1
 800bffe:	4610      	mov	r0, r2
 800c000:	4619      	mov	r1, r3
 800c002:	f04f 0200 	mov.w	r2, #0
 800c006:	f04f 0300 	mov.w	r3, #0
 800c00a:	020b      	lsls	r3, r1, #8
 800c00c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c010:	0202      	lsls	r2, r0, #8
 800c012:	6979      	ldr	r1, [r7, #20]
 800c014:	6849      	ldr	r1, [r1, #4]
 800c016:	0849      	lsrs	r1, r1, #1
 800c018:	2000      	movs	r0, #0
 800c01a:	460c      	mov	r4, r1
 800c01c:	4605      	mov	r5, r0
 800c01e:	eb12 0804 	adds.w	r8, r2, r4
 800c022:	eb43 0905 	adc.w	r9, r3, r5
 800c026:	697b      	ldr	r3, [r7, #20]
 800c028:	685b      	ldr	r3, [r3, #4]
 800c02a:	2200      	movs	r2, #0
 800c02c:	469a      	mov	sl, r3
 800c02e:	4693      	mov	fp, r2
 800c030:	4652      	mov	r2, sl
 800c032:	465b      	mov	r3, fp
 800c034:	4640      	mov	r0, r8
 800c036:	4649      	mov	r1, r9
 800c038:	f7f4 fb6e 	bl	8000718 <__aeabi_uldivmod>
 800c03c:	4602      	mov	r2, r0
 800c03e:	460b      	mov	r3, r1
 800c040:	4613      	mov	r3, r2
 800c042:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c046:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c04a:	d308      	bcc.n	800c05e <UART_SetConfig+0x9a2>
 800c04c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c04e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c052:	d204      	bcs.n	800c05e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800c054:	697b      	ldr	r3, [r7, #20]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c05a:	60da      	str	r2, [r3, #12]
 800c05c:	e17f      	b.n	800c35e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800c05e:	2301      	movs	r3, #1
 800c060:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c064:	e17b      	b.n	800c35e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c066:	697b      	ldr	r3, [r7, #20]
 800c068:	69db      	ldr	r3, [r3, #28]
 800c06a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c06e:	f040 80bd 	bne.w	800c1ec <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800c072:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c076:	2b20      	cmp	r3, #32
 800c078:	dc48      	bgt.n	800c10c <UART_SetConfig+0xa50>
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	db7b      	blt.n	800c176 <UART_SetConfig+0xaba>
 800c07e:	2b20      	cmp	r3, #32
 800c080:	d879      	bhi.n	800c176 <UART_SetConfig+0xaba>
 800c082:	a201      	add	r2, pc, #4	@ (adr r2, 800c088 <UART_SetConfig+0x9cc>)
 800c084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c088:	0800c113 	.word	0x0800c113
 800c08c:	0800c11b 	.word	0x0800c11b
 800c090:	0800c177 	.word	0x0800c177
 800c094:	0800c177 	.word	0x0800c177
 800c098:	0800c123 	.word	0x0800c123
 800c09c:	0800c177 	.word	0x0800c177
 800c0a0:	0800c177 	.word	0x0800c177
 800c0a4:	0800c177 	.word	0x0800c177
 800c0a8:	0800c133 	.word	0x0800c133
 800c0ac:	0800c177 	.word	0x0800c177
 800c0b0:	0800c177 	.word	0x0800c177
 800c0b4:	0800c177 	.word	0x0800c177
 800c0b8:	0800c177 	.word	0x0800c177
 800c0bc:	0800c177 	.word	0x0800c177
 800c0c0:	0800c177 	.word	0x0800c177
 800c0c4:	0800c177 	.word	0x0800c177
 800c0c8:	0800c143 	.word	0x0800c143
 800c0cc:	0800c177 	.word	0x0800c177
 800c0d0:	0800c177 	.word	0x0800c177
 800c0d4:	0800c177 	.word	0x0800c177
 800c0d8:	0800c177 	.word	0x0800c177
 800c0dc:	0800c177 	.word	0x0800c177
 800c0e0:	0800c177 	.word	0x0800c177
 800c0e4:	0800c177 	.word	0x0800c177
 800c0e8:	0800c177 	.word	0x0800c177
 800c0ec:	0800c177 	.word	0x0800c177
 800c0f0:	0800c177 	.word	0x0800c177
 800c0f4:	0800c177 	.word	0x0800c177
 800c0f8:	0800c177 	.word	0x0800c177
 800c0fc:	0800c177 	.word	0x0800c177
 800c100:	0800c177 	.word	0x0800c177
 800c104:	0800c177 	.word	0x0800c177
 800c108:	0800c169 	.word	0x0800c169
 800c10c:	2b40      	cmp	r3, #64	@ 0x40
 800c10e:	d02e      	beq.n	800c16e <UART_SetConfig+0xab2>
 800c110:	e031      	b.n	800c176 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c112:	f7fd f8d9 	bl	80092c8 <HAL_RCC_GetPCLK1Freq>
 800c116:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c118:	e033      	b.n	800c182 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c11a:	f7fd f8eb 	bl	80092f4 <HAL_RCC_GetPCLK2Freq>
 800c11e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c120:	e02f      	b.n	800c182 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c122:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c126:	4618      	mov	r0, r3
 800c128:	f7fe fb10 	bl	800a74c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c12c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c12e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c130:	e027      	b.n	800c182 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c132:	f107 0318 	add.w	r3, r7, #24
 800c136:	4618      	mov	r0, r3
 800c138:	f7fe fc5c 	bl	800a9f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c13c:	69fb      	ldr	r3, [r7, #28]
 800c13e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c140:	e01f      	b.n	800c182 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c142:	4b69      	ldr	r3, [pc, #420]	@ (800c2e8 <UART_SetConfig+0xc2c>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	f003 0320 	and.w	r3, r3, #32
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d009      	beq.n	800c162 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c14e:	4b66      	ldr	r3, [pc, #408]	@ (800c2e8 <UART_SetConfig+0xc2c>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	08db      	lsrs	r3, r3, #3
 800c154:	f003 0303 	and.w	r3, r3, #3
 800c158:	4a64      	ldr	r2, [pc, #400]	@ (800c2ec <UART_SetConfig+0xc30>)
 800c15a:	fa22 f303 	lsr.w	r3, r2, r3
 800c15e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c160:	e00f      	b.n	800c182 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800c162:	4b62      	ldr	r3, [pc, #392]	@ (800c2ec <UART_SetConfig+0xc30>)
 800c164:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c166:	e00c      	b.n	800c182 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c168:	4b61      	ldr	r3, [pc, #388]	@ (800c2f0 <UART_SetConfig+0xc34>)
 800c16a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c16c:	e009      	b.n	800c182 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c16e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c172:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c174:	e005      	b.n	800c182 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800c176:	2300      	movs	r3, #0
 800c178:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c17a:	2301      	movs	r3, #1
 800c17c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c180:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c182:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c184:	2b00      	cmp	r3, #0
 800c186:	f000 80ea 	beq.w	800c35e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c18e:	4a55      	ldr	r2, [pc, #340]	@ (800c2e4 <UART_SetConfig+0xc28>)
 800c190:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c194:	461a      	mov	r2, r3
 800c196:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c198:	fbb3 f3f2 	udiv	r3, r3, r2
 800c19c:	005a      	lsls	r2, r3, #1
 800c19e:	697b      	ldr	r3, [r7, #20]
 800c1a0:	685b      	ldr	r3, [r3, #4]
 800c1a2:	085b      	lsrs	r3, r3, #1
 800c1a4:	441a      	add	r2, r3
 800c1a6:	697b      	ldr	r3, [r7, #20]
 800c1a8:	685b      	ldr	r3, [r3, #4]
 800c1aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c1b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1b2:	2b0f      	cmp	r3, #15
 800c1b4:	d916      	bls.n	800c1e4 <UART_SetConfig+0xb28>
 800c1b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c1bc:	d212      	bcs.n	800c1e4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c1be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1c0:	b29b      	uxth	r3, r3
 800c1c2:	f023 030f 	bic.w	r3, r3, #15
 800c1c6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c1c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1ca:	085b      	lsrs	r3, r3, #1
 800c1cc:	b29b      	uxth	r3, r3
 800c1ce:	f003 0307 	and.w	r3, r3, #7
 800c1d2:	b29a      	uxth	r2, r3
 800c1d4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c1d6:	4313      	orrs	r3, r2
 800c1d8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800c1da:	697b      	ldr	r3, [r7, #20]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800c1e0:	60da      	str	r2, [r3, #12]
 800c1e2:	e0bc      	b.n	800c35e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800c1e4:	2301      	movs	r3, #1
 800c1e6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c1ea:	e0b8      	b.n	800c35e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c1ec:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c1f0:	2b20      	cmp	r3, #32
 800c1f2:	dc4b      	bgt.n	800c28c <UART_SetConfig+0xbd0>
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	f2c0 8087 	blt.w	800c308 <UART_SetConfig+0xc4c>
 800c1fa:	2b20      	cmp	r3, #32
 800c1fc:	f200 8084 	bhi.w	800c308 <UART_SetConfig+0xc4c>
 800c200:	a201      	add	r2, pc, #4	@ (adr r2, 800c208 <UART_SetConfig+0xb4c>)
 800c202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c206:	bf00      	nop
 800c208:	0800c293 	.word	0x0800c293
 800c20c:	0800c29b 	.word	0x0800c29b
 800c210:	0800c309 	.word	0x0800c309
 800c214:	0800c309 	.word	0x0800c309
 800c218:	0800c2a3 	.word	0x0800c2a3
 800c21c:	0800c309 	.word	0x0800c309
 800c220:	0800c309 	.word	0x0800c309
 800c224:	0800c309 	.word	0x0800c309
 800c228:	0800c2b3 	.word	0x0800c2b3
 800c22c:	0800c309 	.word	0x0800c309
 800c230:	0800c309 	.word	0x0800c309
 800c234:	0800c309 	.word	0x0800c309
 800c238:	0800c309 	.word	0x0800c309
 800c23c:	0800c309 	.word	0x0800c309
 800c240:	0800c309 	.word	0x0800c309
 800c244:	0800c309 	.word	0x0800c309
 800c248:	0800c2c3 	.word	0x0800c2c3
 800c24c:	0800c309 	.word	0x0800c309
 800c250:	0800c309 	.word	0x0800c309
 800c254:	0800c309 	.word	0x0800c309
 800c258:	0800c309 	.word	0x0800c309
 800c25c:	0800c309 	.word	0x0800c309
 800c260:	0800c309 	.word	0x0800c309
 800c264:	0800c309 	.word	0x0800c309
 800c268:	0800c309 	.word	0x0800c309
 800c26c:	0800c309 	.word	0x0800c309
 800c270:	0800c309 	.word	0x0800c309
 800c274:	0800c309 	.word	0x0800c309
 800c278:	0800c309 	.word	0x0800c309
 800c27c:	0800c309 	.word	0x0800c309
 800c280:	0800c309 	.word	0x0800c309
 800c284:	0800c309 	.word	0x0800c309
 800c288:	0800c2fb 	.word	0x0800c2fb
 800c28c:	2b40      	cmp	r3, #64	@ 0x40
 800c28e:	d037      	beq.n	800c300 <UART_SetConfig+0xc44>
 800c290:	e03a      	b.n	800c308 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c292:	f7fd f819 	bl	80092c8 <HAL_RCC_GetPCLK1Freq>
 800c296:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c298:	e03c      	b.n	800c314 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c29a:	f7fd f82b 	bl	80092f4 <HAL_RCC_GetPCLK2Freq>
 800c29e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c2a0:	e038      	b.n	800c314 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c2a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f7fe fa50 	bl	800a74c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c2ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c2b0:	e030      	b.n	800c314 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c2b2:	f107 0318 	add.w	r3, r7, #24
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	f7fe fb9c 	bl	800a9f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c2bc:	69fb      	ldr	r3, [r7, #28]
 800c2be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c2c0:	e028      	b.n	800c314 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c2c2:	4b09      	ldr	r3, [pc, #36]	@ (800c2e8 <UART_SetConfig+0xc2c>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	f003 0320 	and.w	r3, r3, #32
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d012      	beq.n	800c2f4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c2ce:	4b06      	ldr	r3, [pc, #24]	@ (800c2e8 <UART_SetConfig+0xc2c>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	08db      	lsrs	r3, r3, #3
 800c2d4:	f003 0303 	and.w	r3, r3, #3
 800c2d8:	4a04      	ldr	r2, [pc, #16]	@ (800c2ec <UART_SetConfig+0xc30>)
 800c2da:	fa22 f303 	lsr.w	r3, r2, r3
 800c2de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c2e0:	e018      	b.n	800c314 <UART_SetConfig+0xc58>
 800c2e2:	bf00      	nop
 800c2e4:	08014f70 	.word	0x08014f70
 800c2e8:	58024400 	.word	0x58024400
 800c2ec:	03d09000 	.word	0x03d09000
 800c2f0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800c2f4:	4b24      	ldr	r3, [pc, #144]	@ (800c388 <UART_SetConfig+0xccc>)
 800c2f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c2f8:	e00c      	b.n	800c314 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c2fa:	4b24      	ldr	r3, [pc, #144]	@ (800c38c <UART_SetConfig+0xcd0>)
 800c2fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c2fe:	e009      	b.n	800c314 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c300:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c304:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c306:	e005      	b.n	800c314 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800c308:	2300      	movs	r3, #0
 800c30a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c30c:	2301      	movs	r3, #1
 800c30e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c312:	bf00      	nop
    }

    if (pclk != 0U)
 800c314:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c316:	2b00      	cmp	r3, #0
 800c318:	d021      	beq.n	800c35e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c31a:	697b      	ldr	r3, [r7, #20]
 800c31c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c31e:	4a1c      	ldr	r2, [pc, #112]	@ (800c390 <UART_SetConfig+0xcd4>)
 800c320:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c324:	461a      	mov	r2, r3
 800c326:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c328:	fbb3 f2f2 	udiv	r2, r3, r2
 800c32c:	697b      	ldr	r3, [r7, #20]
 800c32e:	685b      	ldr	r3, [r3, #4]
 800c330:	085b      	lsrs	r3, r3, #1
 800c332:	441a      	add	r2, r3
 800c334:	697b      	ldr	r3, [r7, #20]
 800c336:	685b      	ldr	r3, [r3, #4]
 800c338:	fbb2 f3f3 	udiv	r3, r2, r3
 800c33c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c33e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c340:	2b0f      	cmp	r3, #15
 800c342:	d909      	bls.n	800c358 <UART_SetConfig+0xc9c>
 800c344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c346:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c34a:	d205      	bcs.n	800c358 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c34c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c34e:	b29a      	uxth	r2, r3
 800c350:	697b      	ldr	r3, [r7, #20]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	60da      	str	r2, [r3, #12]
 800c356:	e002      	b.n	800c35e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800c358:	2301      	movs	r3, #1
 800c35a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c35e:	697b      	ldr	r3, [r7, #20]
 800c360:	2201      	movs	r2, #1
 800c362:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c366:	697b      	ldr	r3, [r7, #20]
 800c368:	2201      	movs	r2, #1
 800c36a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c36e:	697b      	ldr	r3, [r7, #20]
 800c370:	2200      	movs	r2, #0
 800c372:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c374:	697b      	ldr	r3, [r7, #20]
 800c376:	2200      	movs	r2, #0
 800c378:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c37a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800c37e:	4618      	mov	r0, r3
 800c380:	3748      	adds	r7, #72	@ 0x48
 800c382:	46bd      	mov	sp, r7
 800c384:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c388:	03d09000 	.word	0x03d09000
 800c38c:	003d0900 	.word	0x003d0900
 800c390:	08014f70 	.word	0x08014f70

0800c394 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c394:	b480      	push	{r7}
 800c396:	b083      	sub	sp, #12
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3a0:	f003 0308 	and.w	r3, r3, #8
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d00a      	beq.n	800c3be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	685b      	ldr	r3, [r3, #4]
 800c3ae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	430a      	orrs	r2, r1
 800c3bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3c2:	f003 0301 	and.w	r3, r3, #1
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d00a      	beq.n	800c3e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	685b      	ldr	r3, [r3, #4]
 800c3d0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	430a      	orrs	r2, r1
 800c3de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3e4:	f003 0302 	and.w	r3, r3, #2
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d00a      	beq.n	800c402 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	685b      	ldr	r3, [r3, #4]
 800c3f2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	430a      	orrs	r2, r1
 800c400:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c406:	f003 0304 	and.w	r3, r3, #4
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d00a      	beq.n	800c424 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	685b      	ldr	r3, [r3, #4]
 800c414:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	430a      	orrs	r2, r1
 800c422:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c428:	f003 0310 	and.w	r3, r3, #16
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d00a      	beq.n	800c446 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	689b      	ldr	r3, [r3, #8]
 800c436:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	430a      	orrs	r2, r1
 800c444:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c44a:	f003 0320 	and.w	r3, r3, #32
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d00a      	beq.n	800c468 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	689b      	ldr	r3, [r3, #8]
 800c458:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	430a      	orrs	r2, r1
 800c466:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c46c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c470:	2b00      	cmp	r3, #0
 800c472:	d01a      	beq.n	800c4aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	685b      	ldr	r3, [r3, #4]
 800c47a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	430a      	orrs	r2, r1
 800c488:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c48e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c492:	d10a      	bne.n	800c4aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	685b      	ldr	r3, [r3, #4]
 800c49a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	430a      	orrs	r2, r1
 800c4a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d00a      	beq.n	800c4cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	685b      	ldr	r3, [r3, #4]
 800c4bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	430a      	orrs	r2, r1
 800c4ca:	605a      	str	r2, [r3, #4]
  }
}
 800c4cc:	bf00      	nop
 800c4ce:	370c      	adds	r7, #12
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d6:	4770      	bx	lr

0800c4d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b098      	sub	sp, #96	@ 0x60
 800c4dc:	af02      	add	r7, sp, #8
 800c4de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c4e8:	f7f6 f8da 	bl	80026a0 <HAL_GetTick>
 800c4ec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	f003 0308 	and.w	r3, r3, #8
 800c4f8:	2b08      	cmp	r3, #8
 800c4fa:	d12f      	bne.n	800c55c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c4fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c500:	9300      	str	r3, [sp, #0]
 800c502:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c504:	2200      	movs	r2, #0
 800c506:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	f000 f88e 	bl	800c62c <UART_WaitOnFlagUntilTimeout>
 800c510:	4603      	mov	r3, r0
 800c512:	2b00      	cmp	r3, #0
 800c514:	d022      	beq.n	800c55c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c51c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c51e:	e853 3f00 	ldrex	r3, [r3]
 800c522:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c524:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c526:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c52a:	653b      	str	r3, [r7, #80]	@ 0x50
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	461a      	mov	r2, r3
 800c532:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c534:	647b      	str	r3, [r7, #68]	@ 0x44
 800c536:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c538:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c53a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c53c:	e841 2300 	strex	r3, r2, [r1]
 800c540:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c542:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c544:	2b00      	cmp	r3, #0
 800c546:	d1e6      	bne.n	800c516 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	2220      	movs	r2, #32
 800c54c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2200      	movs	r2, #0
 800c554:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c558:	2303      	movs	r3, #3
 800c55a:	e063      	b.n	800c624 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	f003 0304 	and.w	r3, r3, #4
 800c566:	2b04      	cmp	r3, #4
 800c568:	d149      	bne.n	800c5fe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c56a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c56e:	9300      	str	r3, [sp, #0]
 800c570:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c572:	2200      	movs	r2, #0
 800c574:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c578:	6878      	ldr	r0, [r7, #4]
 800c57a:	f000 f857 	bl	800c62c <UART_WaitOnFlagUntilTimeout>
 800c57e:	4603      	mov	r3, r0
 800c580:	2b00      	cmp	r3, #0
 800c582:	d03c      	beq.n	800c5fe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c58a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c58c:	e853 3f00 	ldrex	r3, [r3]
 800c590:	623b      	str	r3, [r7, #32]
   return(result);
 800c592:	6a3b      	ldr	r3, [r7, #32]
 800c594:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c598:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	461a      	mov	r2, r3
 800c5a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c5a2:	633b      	str	r3, [r7, #48]	@ 0x30
 800c5a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c5a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c5aa:	e841 2300 	strex	r3, r2, [r1]
 800c5ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c5b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d1e6      	bne.n	800c584 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	3308      	adds	r3, #8
 800c5bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5be:	693b      	ldr	r3, [r7, #16]
 800c5c0:	e853 3f00 	ldrex	r3, [r3]
 800c5c4:	60fb      	str	r3, [r7, #12]
   return(result);
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	f023 0301 	bic.w	r3, r3, #1
 800c5cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	3308      	adds	r3, #8
 800c5d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c5d6:	61fa      	str	r2, [r7, #28]
 800c5d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5da:	69b9      	ldr	r1, [r7, #24]
 800c5dc:	69fa      	ldr	r2, [r7, #28]
 800c5de:	e841 2300 	strex	r3, r2, [r1]
 800c5e2:	617b      	str	r3, [r7, #20]
   return(result);
 800c5e4:	697b      	ldr	r3, [r7, #20]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d1e5      	bne.n	800c5b6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	2220      	movs	r2, #32
 800c5ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c5fa:	2303      	movs	r3, #3
 800c5fc:	e012      	b.n	800c624 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	2220      	movs	r2, #32
 800c602:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	2220      	movs	r2, #32
 800c60a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	2200      	movs	r2, #0
 800c612:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	2200      	movs	r2, #0
 800c618:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2200      	movs	r2, #0
 800c61e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c622:	2300      	movs	r3, #0
}
 800c624:	4618      	mov	r0, r3
 800c626:	3758      	adds	r7, #88	@ 0x58
 800c628:	46bd      	mov	sp, r7
 800c62a:	bd80      	pop	{r7, pc}

0800c62c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b084      	sub	sp, #16
 800c630:	af00      	add	r7, sp, #0
 800c632:	60f8      	str	r0, [r7, #12]
 800c634:	60b9      	str	r1, [r7, #8]
 800c636:	603b      	str	r3, [r7, #0]
 800c638:	4613      	mov	r3, r2
 800c63a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c63c:	e04f      	b.n	800c6de <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c63e:	69bb      	ldr	r3, [r7, #24]
 800c640:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c644:	d04b      	beq.n	800c6de <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c646:	f7f6 f82b 	bl	80026a0 <HAL_GetTick>
 800c64a:	4602      	mov	r2, r0
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	1ad3      	subs	r3, r2, r3
 800c650:	69ba      	ldr	r2, [r7, #24]
 800c652:	429a      	cmp	r2, r3
 800c654:	d302      	bcc.n	800c65c <UART_WaitOnFlagUntilTimeout+0x30>
 800c656:	69bb      	ldr	r3, [r7, #24]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d101      	bne.n	800c660 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c65c:	2303      	movs	r3, #3
 800c65e:	e04e      	b.n	800c6fe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	f003 0304 	and.w	r3, r3, #4
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d037      	beq.n	800c6de <UART_WaitOnFlagUntilTimeout+0xb2>
 800c66e:	68bb      	ldr	r3, [r7, #8]
 800c670:	2b80      	cmp	r3, #128	@ 0x80
 800c672:	d034      	beq.n	800c6de <UART_WaitOnFlagUntilTimeout+0xb2>
 800c674:	68bb      	ldr	r3, [r7, #8]
 800c676:	2b40      	cmp	r3, #64	@ 0x40
 800c678:	d031      	beq.n	800c6de <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	69db      	ldr	r3, [r3, #28]
 800c680:	f003 0308 	and.w	r3, r3, #8
 800c684:	2b08      	cmp	r3, #8
 800c686:	d110      	bne.n	800c6aa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	2208      	movs	r2, #8
 800c68e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c690:	68f8      	ldr	r0, [r7, #12]
 800c692:	f000 f839 	bl	800c708 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	2208      	movs	r2, #8
 800c69a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c6a6:	2301      	movs	r3, #1
 800c6a8:	e029      	b.n	800c6fe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	69db      	ldr	r3, [r3, #28]
 800c6b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c6b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c6b8:	d111      	bne.n	800c6de <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c6c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c6c4:	68f8      	ldr	r0, [r7, #12]
 800c6c6:	f000 f81f 	bl	800c708 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	2220      	movs	r2, #32
 800c6ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c6da:	2303      	movs	r3, #3
 800c6dc:	e00f      	b.n	800c6fe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	69da      	ldr	r2, [r3, #28]
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	4013      	ands	r3, r2
 800c6e8:	68ba      	ldr	r2, [r7, #8]
 800c6ea:	429a      	cmp	r2, r3
 800c6ec:	bf0c      	ite	eq
 800c6ee:	2301      	moveq	r3, #1
 800c6f0:	2300      	movne	r3, #0
 800c6f2:	b2db      	uxtb	r3, r3
 800c6f4:	461a      	mov	r2, r3
 800c6f6:	79fb      	ldrb	r3, [r7, #7]
 800c6f8:	429a      	cmp	r2, r3
 800c6fa:	d0a0      	beq.n	800c63e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c6fc:	2300      	movs	r3, #0
}
 800c6fe:	4618      	mov	r0, r3
 800c700:	3710      	adds	r7, #16
 800c702:	46bd      	mov	sp, r7
 800c704:	bd80      	pop	{r7, pc}
	...

0800c708 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c708:	b480      	push	{r7}
 800c70a:	b095      	sub	sp, #84	@ 0x54
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c716:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c718:	e853 3f00 	ldrex	r3, [r3]
 800c71c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c71e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c720:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c724:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	461a      	mov	r2, r3
 800c72c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c72e:	643b      	str	r3, [r7, #64]	@ 0x40
 800c730:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c732:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c734:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c736:	e841 2300 	strex	r3, r2, [r1]
 800c73a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c73c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d1e6      	bne.n	800c710 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	3308      	adds	r3, #8
 800c748:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c74a:	6a3b      	ldr	r3, [r7, #32]
 800c74c:	e853 3f00 	ldrex	r3, [r3]
 800c750:	61fb      	str	r3, [r7, #28]
   return(result);
 800c752:	69fa      	ldr	r2, [r7, #28]
 800c754:	4b1e      	ldr	r3, [pc, #120]	@ (800c7d0 <UART_EndRxTransfer+0xc8>)
 800c756:	4013      	ands	r3, r2
 800c758:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	3308      	adds	r3, #8
 800c760:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c762:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c764:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c766:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c768:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c76a:	e841 2300 	strex	r3, r2, [r1]
 800c76e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c772:	2b00      	cmp	r3, #0
 800c774:	d1e5      	bne.n	800c742 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c77a:	2b01      	cmp	r3, #1
 800c77c:	d118      	bne.n	800c7b0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	e853 3f00 	ldrex	r3, [r3]
 800c78a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c78c:	68bb      	ldr	r3, [r7, #8]
 800c78e:	f023 0310 	bic.w	r3, r3, #16
 800c792:	647b      	str	r3, [r7, #68]	@ 0x44
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	461a      	mov	r2, r3
 800c79a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c79c:	61bb      	str	r3, [r7, #24]
 800c79e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7a0:	6979      	ldr	r1, [r7, #20]
 800c7a2:	69ba      	ldr	r2, [r7, #24]
 800c7a4:	e841 2300 	strex	r3, r2, [r1]
 800c7a8:	613b      	str	r3, [r7, #16]
   return(result);
 800c7aa:	693b      	ldr	r3, [r7, #16]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d1e6      	bne.n	800c77e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2220      	movs	r2, #32
 800c7b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c7c4:	bf00      	nop
 800c7c6:	3754      	adds	r7, #84	@ 0x54
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ce:	4770      	bx	lr
 800c7d0:	effffffe 	.word	0xeffffffe

0800c7d4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c7d4:	b480      	push	{r7}
 800c7d6:	b085      	sub	sp, #20
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c7e2:	2b01      	cmp	r3, #1
 800c7e4:	d101      	bne.n	800c7ea <HAL_UARTEx_DisableFifoMode+0x16>
 800c7e6:	2302      	movs	r3, #2
 800c7e8:	e027      	b.n	800c83a <HAL_UARTEx_DisableFifoMode+0x66>
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	2201      	movs	r2, #1
 800c7ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	2224      	movs	r2, #36	@ 0x24
 800c7f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	681a      	ldr	r2, [r3, #0]
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	f022 0201 	bic.w	r2, r2, #1
 800c810:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c818:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	2200      	movs	r2, #0
 800c81e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	68fa      	ldr	r2, [r7, #12]
 800c826:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2220      	movs	r2, #32
 800c82c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	2200      	movs	r2, #0
 800c834:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c838:	2300      	movs	r3, #0
}
 800c83a:	4618      	mov	r0, r3
 800c83c:	3714      	adds	r7, #20
 800c83e:	46bd      	mov	sp, r7
 800c840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c844:	4770      	bx	lr

0800c846 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c846:	b580      	push	{r7, lr}
 800c848:	b084      	sub	sp, #16
 800c84a:	af00      	add	r7, sp, #0
 800c84c:	6078      	str	r0, [r7, #4]
 800c84e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c856:	2b01      	cmp	r3, #1
 800c858:	d101      	bne.n	800c85e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c85a:	2302      	movs	r3, #2
 800c85c:	e02d      	b.n	800c8ba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	2201      	movs	r2, #1
 800c862:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2224      	movs	r2, #36	@ 0x24
 800c86a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	681a      	ldr	r2, [r3, #0]
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	f022 0201 	bic.w	r2, r2, #1
 800c884:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	689b      	ldr	r3, [r3, #8]
 800c88c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	683a      	ldr	r2, [r7, #0]
 800c896:	430a      	orrs	r2, r1
 800c898:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c89a:	6878      	ldr	r0, [r7, #4]
 800c89c:	f000 f850 	bl	800c940 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	68fa      	ldr	r2, [r7, #12]
 800c8a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2220      	movs	r2, #32
 800c8ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c8b8:	2300      	movs	r3, #0
}
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	3710      	adds	r7, #16
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	bd80      	pop	{r7, pc}

0800c8c2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c8c2:	b580      	push	{r7, lr}
 800c8c4:	b084      	sub	sp, #16
 800c8c6:	af00      	add	r7, sp, #0
 800c8c8:	6078      	str	r0, [r7, #4]
 800c8ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c8d2:	2b01      	cmp	r3, #1
 800c8d4:	d101      	bne.n	800c8da <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c8d6:	2302      	movs	r3, #2
 800c8d8:	e02d      	b.n	800c936 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2201      	movs	r2, #1
 800c8de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	2224      	movs	r2, #36	@ 0x24
 800c8e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	681a      	ldr	r2, [r3, #0]
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	f022 0201 	bic.w	r2, r2, #1
 800c900:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	689b      	ldr	r3, [r3, #8]
 800c908:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	683a      	ldr	r2, [r7, #0]
 800c912:	430a      	orrs	r2, r1
 800c914:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	f000 f812 	bl	800c940 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	68fa      	ldr	r2, [r7, #12]
 800c922:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2220      	movs	r2, #32
 800c928:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2200      	movs	r2, #0
 800c930:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c934:	2300      	movs	r3, #0
}
 800c936:	4618      	mov	r0, r3
 800c938:	3710      	adds	r7, #16
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bd80      	pop	{r7, pc}
	...

0800c940 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c940:	b480      	push	{r7}
 800c942:	b085      	sub	sp, #20
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d108      	bne.n	800c962 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2201      	movs	r2, #1
 800c954:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2201      	movs	r2, #1
 800c95c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c960:	e031      	b.n	800c9c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c962:	2310      	movs	r3, #16
 800c964:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c966:	2310      	movs	r3, #16
 800c968:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	689b      	ldr	r3, [r3, #8]
 800c970:	0e5b      	lsrs	r3, r3, #25
 800c972:	b2db      	uxtb	r3, r3
 800c974:	f003 0307 	and.w	r3, r3, #7
 800c978:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	689b      	ldr	r3, [r3, #8]
 800c980:	0f5b      	lsrs	r3, r3, #29
 800c982:	b2db      	uxtb	r3, r3
 800c984:	f003 0307 	and.w	r3, r3, #7
 800c988:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c98a:	7bbb      	ldrb	r3, [r7, #14]
 800c98c:	7b3a      	ldrb	r2, [r7, #12]
 800c98e:	4911      	ldr	r1, [pc, #68]	@ (800c9d4 <UARTEx_SetNbDataToProcess+0x94>)
 800c990:	5c8a      	ldrb	r2, [r1, r2]
 800c992:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c996:	7b3a      	ldrb	r2, [r7, #12]
 800c998:	490f      	ldr	r1, [pc, #60]	@ (800c9d8 <UARTEx_SetNbDataToProcess+0x98>)
 800c99a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c99c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c9a0:	b29a      	uxth	r2, r3
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c9a8:	7bfb      	ldrb	r3, [r7, #15]
 800c9aa:	7b7a      	ldrb	r2, [r7, #13]
 800c9ac:	4909      	ldr	r1, [pc, #36]	@ (800c9d4 <UARTEx_SetNbDataToProcess+0x94>)
 800c9ae:	5c8a      	ldrb	r2, [r1, r2]
 800c9b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c9b4:	7b7a      	ldrb	r2, [r7, #13]
 800c9b6:	4908      	ldr	r1, [pc, #32]	@ (800c9d8 <UARTEx_SetNbDataToProcess+0x98>)
 800c9b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c9ba:	fb93 f3f2 	sdiv	r3, r3, r2
 800c9be:	b29a      	uxth	r2, r3
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c9c6:	bf00      	nop
 800c9c8:	3714      	adds	r7, #20
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d0:	4770      	bx	lr
 800c9d2:	bf00      	nop
 800c9d4:	08014f88 	.word	0x08014f88
 800c9d8:	08014f90 	.word	0x08014f90

0800c9dc <__NVIC_SetPriority>:
{
 800c9dc:	b480      	push	{r7}
 800c9de:	b083      	sub	sp, #12
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	4603      	mov	r3, r0
 800c9e4:	6039      	str	r1, [r7, #0]
 800c9e6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800c9e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	db0a      	blt.n	800ca06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	b2da      	uxtb	r2, r3
 800c9f4:	490c      	ldr	r1, [pc, #48]	@ (800ca28 <__NVIC_SetPriority+0x4c>)
 800c9f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c9fa:	0112      	lsls	r2, r2, #4
 800c9fc:	b2d2      	uxtb	r2, r2
 800c9fe:	440b      	add	r3, r1
 800ca00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800ca04:	e00a      	b.n	800ca1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	b2da      	uxtb	r2, r3
 800ca0a:	4908      	ldr	r1, [pc, #32]	@ (800ca2c <__NVIC_SetPriority+0x50>)
 800ca0c:	88fb      	ldrh	r3, [r7, #6]
 800ca0e:	f003 030f 	and.w	r3, r3, #15
 800ca12:	3b04      	subs	r3, #4
 800ca14:	0112      	lsls	r2, r2, #4
 800ca16:	b2d2      	uxtb	r2, r2
 800ca18:	440b      	add	r3, r1
 800ca1a:	761a      	strb	r2, [r3, #24]
}
 800ca1c:	bf00      	nop
 800ca1e:	370c      	adds	r7, #12
 800ca20:	46bd      	mov	sp, r7
 800ca22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca26:	4770      	bx	lr
 800ca28:	e000e100 	.word	0xe000e100
 800ca2c:	e000ed00 	.word	0xe000ed00

0800ca30 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ca30:	b580      	push	{r7, lr}
 800ca32:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ca34:	4b05      	ldr	r3, [pc, #20]	@ (800ca4c <SysTick_Handler+0x1c>)
 800ca36:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ca38:	f002 f908 	bl	800ec4c <xTaskGetSchedulerState>
 800ca3c:	4603      	mov	r3, r0
 800ca3e:	2b01      	cmp	r3, #1
 800ca40:	d001      	beq.n	800ca46 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ca42:	f003 f801 	bl	800fa48 <xPortSysTickHandler>
  }
}
 800ca46:	bf00      	nop
 800ca48:	bd80      	pop	{r7, pc}
 800ca4a:	bf00      	nop
 800ca4c:	e000e010 	.word	0xe000e010

0800ca50 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ca50:	b580      	push	{r7, lr}
 800ca52:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ca54:	2100      	movs	r1, #0
 800ca56:	f06f 0004 	mvn.w	r0, #4
 800ca5a:	f7ff ffbf 	bl	800c9dc <__NVIC_SetPriority>
#endif
}
 800ca5e:	bf00      	nop
 800ca60:	bd80      	pop	{r7, pc}
	...

0800ca64 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ca64:	b480      	push	{r7}
 800ca66:	b083      	sub	sp, #12
 800ca68:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ca6a:	f3ef 8305 	mrs	r3, IPSR
 800ca6e:	603b      	str	r3, [r7, #0]
  return(result);
 800ca70:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d003      	beq.n	800ca7e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ca76:	f06f 0305 	mvn.w	r3, #5
 800ca7a:	607b      	str	r3, [r7, #4]
 800ca7c:	e00c      	b.n	800ca98 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ca7e:	4b0a      	ldr	r3, [pc, #40]	@ (800caa8 <osKernelInitialize+0x44>)
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d105      	bne.n	800ca92 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ca86:	4b08      	ldr	r3, [pc, #32]	@ (800caa8 <osKernelInitialize+0x44>)
 800ca88:	2201      	movs	r2, #1
 800ca8a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	607b      	str	r3, [r7, #4]
 800ca90:	e002      	b.n	800ca98 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ca92:	f04f 33ff 	mov.w	r3, #4294967295
 800ca96:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ca98:	687b      	ldr	r3, [r7, #4]
}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	370c      	adds	r7, #12
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa4:	4770      	bx	lr
 800caa6:	bf00      	nop
 800caa8:	24000448 	.word	0x24000448

0800caac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800caac:	b580      	push	{r7, lr}
 800caae:	b082      	sub	sp, #8
 800cab0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cab2:	f3ef 8305 	mrs	r3, IPSR
 800cab6:	603b      	str	r3, [r7, #0]
  return(result);
 800cab8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d003      	beq.n	800cac6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800cabe:	f06f 0305 	mvn.w	r3, #5
 800cac2:	607b      	str	r3, [r7, #4]
 800cac4:	e010      	b.n	800cae8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800cac6:	4b0b      	ldr	r3, [pc, #44]	@ (800caf4 <osKernelStart+0x48>)
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	2b01      	cmp	r3, #1
 800cacc:	d109      	bne.n	800cae2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800cace:	f7ff ffbf 	bl	800ca50 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cad2:	4b08      	ldr	r3, [pc, #32]	@ (800caf4 <osKernelStart+0x48>)
 800cad4:	2202      	movs	r2, #2
 800cad6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cad8:	f001 fb9c 	bl	800e214 <vTaskStartScheduler>
      stat = osOK;
 800cadc:	2300      	movs	r3, #0
 800cade:	607b      	str	r3, [r7, #4]
 800cae0:	e002      	b.n	800cae8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800cae2:	f04f 33ff 	mov.w	r3, #4294967295
 800cae6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cae8:	687b      	ldr	r3, [r7, #4]
}
 800caea:	4618      	mov	r0, r3
 800caec:	3708      	adds	r7, #8
 800caee:	46bd      	mov	sp, r7
 800caf0:	bd80      	pop	{r7, pc}
 800caf2:	bf00      	nop
 800caf4:	24000448 	.word	0x24000448

0800caf8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b08e      	sub	sp, #56	@ 0x38
 800cafc:	af04      	add	r7, sp, #16
 800cafe:	60f8      	str	r0, [r7, #12]
 800cb00:	60b9      	str	r1, [r7, #8]
 800cb02:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cb04:	2300      	movs	r3, #0
 800cb06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb08:	f3ef 8305 	mrs	r3, IPSR
 800cb0c:	617b      	str	r3, [r7, #20]
  return(result);
 800cb0e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d17e      	bne.n	800cc12 <osThreadNew+0x11a>
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d07b      	beq.n	800cc12 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800cb1a:	2380      	movs	r3, #128	@ 0x80
 800cb1c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800cb1e:	2318      	movs	r3, #24
 800cb20:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800cb22:	2300      	movs	r3, #0
 800cb24:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800cb26:	f04f 33ff 	mov.w	r3, #4294967295
 800cb2a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d045      	beq.n	800cbbe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d002      	beq.n	800cb40 <osThreadNew+0x48>
        name = attr->name;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	699b      	ldr	r3, [r3, #24]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d002      	beq.n	800cb4e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	699b      	ldr	r3, [r3, #24]
 800cb4c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cb4e:	69fb      	ldr	r3, [r7, #28]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d008      	beq.n	800cb66 <osThreadNew+0x6e>
 800cb54:	69fb      	ldr	r3, [r7, #28]
 800cb56:	2b38      	cmp	r3, #56	@ 0x38
 800cb58:	d805      	bhi.n	800cb66 <osThreadNew+0x6e>
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	685b      	ldr	r3, [r3, #4]
 800cb5e:	f003 0301 	and.w	r3, r3, #1
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d001      	beq.n	800cb6a <osThreadNew+0x72>
        return (NULL);
 800cb66:	2300      	movs	r3, #0
 800cb68:	e054      	b.n	800cc14 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	695b      	ldr	r3, [r3, #20]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d003      	beq.n	800cb7a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	695b      	ldr	r3, [r3, #20]
 800cb76:	089b      	lsrs	r3, r3, #2
 800cb78:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	689b      	ldr	r3, [r3, #8]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d00e      	beq.n	800cba0 <osThreadNew+0xa8>
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	68db      	ldr	r3, [r3, #12]
 800cb86:	2ba7      	cmp	r3, #167	@ 0xa7
 800cb88:	d90a      	bls.n	800cba0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d006      	beq.n	800cba0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	695b      	ldr	r3, [r3, #20]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d002      	beq.n	800cba0 <osThreadNew+0xa8>
        mem = 1;
 800cb9a:	2301      	movs	r3, #1
 800cb9c:	61bb      	str	r3, [r7, #24]
 800cb9e:	e010      	b.n	800cbc2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	689b      	ldr	r3, [r3, #8]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d10c      	bne.n	800cbc2 <osThreadNew+0xca>
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	68db      	ldr	r3, [r3, #12]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d108      	bne.n	800cbc2 <osThreadNew+0xca>
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	691b      	ldr	r3, [r3, #16]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d104      	bne.n	800cbc2 <osThreadNew+0xca>
          mem = 0;
 800cbb8:	2300      	movs	r3, #0
 800cbba:	61bb      	str	r3, [r7, #24]
 800cbbc:	e001      	b.n	800cbc2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800cbc2:	69bb      	ldr	r3, [r7, #24]
 800cbc4:	2b01      	cmp	r3, #1
 800cbc6:	d110      	bne.n	800cbea <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800cbcc:	687a      	ldr	r2, [r7, #4]
 800cbce:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cbd0:	9202      	str	r2, [sp, #8]
 800cbd2:	9301      	str	r3, [sp, #4]
 800cbd4:	69fb      	ldr	r3, [r7, #28]
 800cbd6:	9300      	str	r3, [sp, #0]
 800cbd8:	68bb      	ldr	r3, [r7, #8]
 800cbda:	6a3a      	ldr	r2, [r7, #32]
 800cbdc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cbde:	68f8      	ldr	r0, [r7, #12]
 800cbe0:	f001 f8b0 	bl	800dd44 <xTaskCreateStatic>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	613b      	str	r3, [r7, #16]
 800cbe8:	e013      	b.n	800cc12 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800cbea:	69bb      	ldr	r3, [r7, #24]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d110      	bne.n	800cc12 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800cbf0:	6a3b      	ldr	r3, [r7, #32]
 800cbf2:	b29a      	uxth	r2, r3
 800cbf4:	f107 0310 	add.w	r3, r7, #16
 800cbf8:	9301      	str	r3, [sp, #4]
 800cbfa:	69fb      	ldr	r3, [r7, #28]
 800cbfc:	9300      	str	r3, [sp, #0]
 800cbfe:	68bb      	ldr	r3, [r7, #8]
 800cc00:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cc02:	68f8      	ldr	r0, [r7, #12]
 800cc04:	f001 f8fe 	bl	800de04 <xTaskCreate>
 800cc08:	4603      	mov	r3, r0
 800cc0a:	2b01      	cmp	r3, #1
 800cc0c:	d001      	beq.n	800cc12 <osThreadNew+0x11a>
            hTask = NULL;
 800cc0e:	2300      	movs	r3, #0
 800cc10:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800cc12:	693b      	ldr	r3, [r7, #16]
}
 800cc14:	4618      	mov	r0, r3
 800cc16:	3728      	adds	r7, #40	@ 0x28
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	bd80      	pop	{r7, pc}

0800cc1c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b084      	sub	sp, #16
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc24:	f3ef 8305 	mrs	r3, IPSR
 800cc28:	60bb      	str	r3, [r7, #8]
  return(result);
 800cc2a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d003      	beq.n	800cc38 <osDelay+0x1c>
    stat = osErrorISR;
 800cc30:	f06f 0305 	mvn.w	r3, #5
 800cc34:	60fb      	str	r3, [r7, #12]
 800cc36:	e007      	b.n	800cc48 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800cc38:	2300      	movs	r3, #0
 800cc3a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d002      	beq.n	800cc48 <osDelay+0x2c>
      vTaskDelay(ticks);
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	f001 fab0 	bl	800e1a8 <vTaskDelay>
    }
  }

  return (stat);
 800cc48:	68fb      	ldr	r3, [r7, #12]
}
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	3710      	adds	r7, #16
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd80      	pop	{r7, pc}
	...

0800cc54 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800cc54:	b480      	push	{r7}
 800cc56:	b085      	sub	sp, #20
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	60f8      	str	r0, [r7, #12]
 800cc5c:	60b9      	str	r1, [r7, #8]
 800cc5e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	4a07      	ldr	r2, [pc, #28]	@ (800cc80 <vApplicationGetIdleTaskMemory+0x2c>)
 800cc64:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800cc66:	68bb      	ldr	r3, [r7, #8]
 800cc68:	4a06      	ldr	r2, [pc, #24]	@ (800cc84 <vApplicationGetIdleTaskMemory+0x30>)
 800cc6a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	2280      	movs	r2, #128	@ 0x80
 800cc70:	601a      	str	r2, [r3, #0]
}
 800cc72:	bf00      	nop
 800cc74:	3714      	adds	r7, #20
 800cc76:	46bd      	mov	sp, r7
 800cc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7c:	4770      	bx	lr
 800cc7e:	bf00      	nop
 800cc80:	2400044c 	.word	0x2400044c
 800cc84:	240004f4 	.word	0x240004f4

0800cc88 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800cc88:	b480      	push	{r7}
 800cc8a:	b085      	sub	sp, #20
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	60f8      	str	r0, [r7, #12]
 800cc90:	60b9      	str	r1, [r7, #8]
 800cc92:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	4a07      	ldr	r2, [pc, #28]	@ (800ccb4 <vApplicationGetTimerTaskMemory+0x2c>)
 800cc98:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800cc9a:	68bb      	ldr	r3, [r7, #8]
 800cc9c:	4a06      	ldr	r2, [pc, #24]	@ (800ccb8 <vApplicationGetTimerTaskMemory+0x30>)
 800cc9e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cca6:	601a      	str	r2, [r3, #0]
}
 800cca8:	bf00      	nop
 800ccaa:	3714      	adds	r7, #20
 800ccac:	46bd      	mov	sp, r7
 800ccae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb2:	4770      	bx	lr
 800ccb4:	240006f4 	.word	0x240006f4
 800ccb8:	2400079c 	.word	0x2400079c

0800ccbc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ccbc:	b480      	push	{r7}
 800ccbe:	b083      	sub	sp, #12
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	f103 0208 	add.w	r2, r3, #8
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	f04f 32ff 	mov.w	r2, #4294967295
 800ccd4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	f103 0208 	add.w	r2, r3, #8
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	f103 0208 	add.w	r2, r3, #8
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	2200      	movs	r2, #0
 800ccee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ccf0:	bf00      	nop
 800ccf2:	370c      	adds	r7, #12
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfa:	4770      	bx	lr

0800ccfc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ccfc:	b480      	push	{r7}
 800ccfe:	b083      	sub	sp, #12
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	2200      	movs	r2, #0
 800cd08:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cd0a:	bf00      	nop
 800cd0c:	370c      	adds	r7, #12
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd14:	4770      	bx	lr

0800cd16 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cd16:	b480      	push	{r7}
 800cd18:	b085      	sub	sp, #20
 800cd1a:	af00      	add	r7, sp, #0
 800cd1c:	6078      	str	r0, [r7, #4]
 800cd1e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	685b      	ldr	r3, [r3, #4]
 800cd24:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	68fa      	ldr	r2, [r7, #12]
 800cd2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	689a      	ldr	r2, [r3, #8]
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	689b      	ldr	r3, [r3, #8]
 800cd38:	683a      	ldr	r2, [r7, #0]
 800cd3a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	683a      	ldr	r2, [r7, #0]
 800cd40:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	687a      	ldr	r2, [r7, #4]
 800cd46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	1c5a      	adds	r2, r3, #1
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	601a      	str	r2, [r3, #0]
}
 800cd52:	bf00      	nop
 800cd54:	3714      	adds	r7, #20
 800cd56:	46bd      	mov	sp, r7
 800cd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5c:	4770      	bx	lr

0800cd5e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cd5e:	b480      	push	{r7}
 800cd60:	b085      	sub	sp, #20
 800cd62:	af00      	add	r7, sp, #0
 800cd64:	6078      	str	r0, [r7, #4]
 800cd66:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cd6e:	68bb      	ldr	r3, [r7, #8]
 800cd70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd74:	d103      	bne.n	800cd7e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	691b      	ldr	r3, [r3, #16]
 800cd7a:	60fb      	str	r3, [r7, #12]
 800cd7c:	e00c      	b.n	800cd98 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	3308      	adds	r3, #8
 800cd82:	60fb      	str	r3, [r7, #12]
 800cd84:	e002      	b.n	800cd8c <vListInsert+0x2e>
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	685b      	ldr	r3, [r3, #4]
 800cd8a:	60fb      	str	r3, [r7, #12]
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	685b      	ldr	r3, [r3, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	68ba      	ldr	r2, [r7, #8]
 800cd94:	429a      	cmp	r2, r3
 800cd96:	d2f6      	bcs.n	800cd86 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	685a      	ldr	r2, [r3, #4]
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	685b      	ldr	r3, [r3, #4]
 800cda4:	683a      	ldr	r2, [r7, #0]
 800cda6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	68fa      	ldr	r2, [r7, #12]
 800cdac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	683a      	ldr	r2, [r7, #0]
 800cdb2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	687a      	ldr	r2, [r7, #4]
 800cdb8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	1c5a      	adds	r2, r3, #1
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	601a      	str	r2, [r3, #0]
}
 800cdc4:	bf00      	nop
 800cdc6:	3714      	adds	r7, #20
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdce:	4770      	bx	lr

0800cdd0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cdd0:	b480      	push	{r7}
 800cdd2:	b085      	sub	sp, #20
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	691b      	ldr	r3, [r3, #16]
 800cddc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	685b      	ldr	r3, [r3, #4]
 800cde2:	687a      	ldr	r2, [r7, #4]
 800cde4:	6892      	ldr	r2, [r2, #8]
 800cde6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	689b      	ldr	r3, [r3, #8]
 800cdec:	687a      	ldr	r2, [r7, #4]
 800cdee:	6852      	ldr	r2, [r2, #4]
 800cdf0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	685b      	ldr	r3, [r3, #4]
 800cdf6:	687a      	ldr	r2, [r7, #4]
 800cdf8:	429a      	cmp	r2, r3
 800cdfa:	d103      	bne.n	800ce04 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	689a      	ldr	r2, [r3, #8]
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2200      	movs	r2, #0
 800ce08:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	1e5a      	subs	r2, r3, #1
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	681b      	ldr	r3, [r3, #0]
}
 800ce18:	4618      	mov	r0, r3
 800ce1a:	3714      	adds	r7, #20
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce22:	4770      	bx	lr

0800ce24 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b084      	sub	sp, #16
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
 800ce2c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d10b      	bne.n	800ce50 <xQueueGenericReset+0x2c>
	__asm volatile
 800ce38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce3c:	f383 8811 	msr	BASEPRI, r3
 800ce40:	f3bf 8f6f 	isb	sy
 800ce44:	f3bf 8f4f 	dsb	sy
 800ce48:	60bb      	str	r3, [r7, #8]
}
 800ce4a:	bf00      	nop
 800ce4c:	bf00      	nop
 800ce4e:	e7fd      	b.n	800ce4c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ce50:	f002 fd6a 	bl	800f928 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	681a      	ldr	r2, [r3, #0]
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce5c:	68f9      	ldr	r1, [r7, #12]
 800ce5e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ce60:	fb01 f303 	mul.w	r3, r1, r3
 800ce64:	441a      	add	r2, r3
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	681a      	ldr	r2, [r3, #0]
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	681a      	ldr	r2, [r3, #0]
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce80:	3b01      	subs	r3, #1
 800ce82:	68f9      	ldr	r1, [r7, #12]
 800ce84:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ce86:	fb01 f303 	mul.w	r3, r1, r3
 800ce8a:	441a      	add	r2, r3
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	22ff      	movs	r2, #255	@ 0xff
 800ce94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	22ff      	movs	r2, #255	@ 0xff
 800ce9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d114      	bne.n	800ced0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	691b      	ldr	r3, [r3, #16]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d01a      	beq.n	800cee4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	3310      	adds	r3, #16
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	f001 fcac 	bl	800e810 <xTaskRemoveFromEventList>
 800ceb8:	4603      	mov	r3, r0
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d012      	beq.n	800cee4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cebe:	4b0d      	ldr	r3, [pc, #52]	@ (800cef4 <xQueueGenericReset+0xd0>)
 800cec0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cec4:	601a      	str	r2, [r3, #0]
 800cec6:	f3bf 8f4f 	dsb	sy
 800ceca:	f3bf 8f6f 	isb	sy
 800cece:	e009      	b.n	800cee4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	3310      	adds	r3, #16
 800ced4:	4618      	mov	r0, r3
 800ced6:	f7ff fef1 	bl	800ccbc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	3324      	adds	r3, #36	@ 0x24
 800cede:	4618      	mov	r0, r3
 800cee0:	f7ff feec 	bl	800ccbc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cee4:	f002 fd52 	bl	800f98c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cee8:	2301      	movs	r3, #1
}
 800ceea:	4618      	mov	r0, r3
 800ceec:	3710      	adds	r7, #16
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bd80      	pop	{r7, pc}
 800cef2:	bf00      	nop
 800cef4:	e000ed04 	.word	0xe000ed04

0800cef8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b08e      	sub	sp, #56	@ 0x38
 800cefc:	af02      	add	r7, sp, #8
 800cefe:	60f8      	str	r0, [r7, #12]
 800cf00:	60b9      	str	r1, [r7, #8]
 800cf02:	607a      	str	r2, [r7, #4]
 800cf04:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d10b      	bne.n	800cf24 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800cf0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf10:	f383 8811 	msr	BASEPRI, r3
 800cf14:	f3bf 8f6f 	isb	sy
 800cf18:	f3bf 8f4f 	dsb	sy
 800cf1c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cf1e:	bf00      	nop
 800cf20:	bf00      	nop
 800cf22:	e7fd      	b.n	800cf20 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cf24:	683b      	ldr	r3, [r7, #0]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d10b      	bne.n	800cf42 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800cf2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf2e:	f383 8811 	msr	BASEPRI, r3
 800cf32:	f3bf 8f6f 	isb	sy
 800cf36:	f3bf 8f4f 	dsb	sy
 800cf3a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cf3c:	bf00      	nop
 800cf3e:	bf00      	nop
 800cf40:	e7fd      	b.n	800cf3e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d002      	beq.n	800cf4e <xQueueGenericCreateStatic+0x56>
 800cf48:	68bb      	ldr	r3, [r7, #8]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d001      	beq.n	800cf52 <xQueueGenericCreateStatic+0x5a>
 800cf4e:	2301      	movs	r3, #1
 800cf50:	e000      	b.n	800cf54 <xQueueGenericCreateStatic+0x5c>
 800cf52:	2300      	movs	r3, #0
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d10b      	bne.n	800cf70 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800cf58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf5c:	f383 8811 	msr	BASEPRI, r3
 800cf60:	f3bf 8f6f 	isb	sy
 800cf64:	f3bf 8f4f 	dsb	sy
 800cf68:	623b      	str	r3, [r7, #32]
}
 800cf6a:	bf00      	nop
 800cf6c:	bf00      	nop
 800cf6e:	e7fd      	b.n	800cf6c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d102      	bne.n	800cf7c <xQueueGenericCreateStatic+0x84>
 800cf76:	68bb      	ldr	r3, [r7, #8]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d101      	bne.n	800cf80 <xQueueGenericCreateStatic+0x88>
 800cf7c:	2301      	movs	r3, #1
 800cf7e:	e000      	b.n	800cf82 <xQueueGenericCreateStatic+0x8a>
 800cf80:	2300      	movs	r3, #0
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d10b      	bne.n	800cf9e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800cf86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf8a:	f383 8811 	msr	BASEPRI, r3
 800cf8e:	f3bf 8f6f 	isb	sy
 800cf92:	f3bf 8f4f 	dsb	sy
 800cf96:	61fb      	str	r3, [r7, #28]
}
 800cf98:	bf00      	nop
 800cf9a:	bf00      	nop
 800cf9c:	e7fd      	b.n	800cf9a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cf9e:	2350      	movs	r3, #80	@ 0x50
 800cfa0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cfa2:	697b      	ldr	r3, [r7, #20]
 800cfa4:	2b50      	cmp	r3, #80	@ 0x50
 800cfa6:	d00b      	beq.n	800cfc0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800cfa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfac:	f383 8811 	msr	BASEPRI, r3
 800cfb0:	f3bf 8f6f 	isb	sy
 800cfb4:	f3bf 8f4f 	dsb	sy
 800cfb8:	61bb      	str	r3, [r7, #24]
}
 800cfba:	bf00      	nop
 800cfbc:	bf00      	nop
 800cfbe:	e7fd      	b.n	800cfbc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cfc0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800cfc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d00d      	beq.n	800cfe8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cfcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfce:	2201      	movs	r2, #1
 800cfd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cfd4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800cfd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfda:	9300      	str	r3, [sp, #0]
 800cfdc:	4613      	mov	r3, r2
 800cfde:	687a      	ldr	r2, [r7, #4]
 800cfe0:	68b9      	ldr	r1, [r7, #8]
 800cfe2:	68f8      	ldr	r0, [r7, #12]
 800cfe4:	f000 f840 	bl	800d068 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cfe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800cfea:	4618      	mov	r0, r3
 800cfec:	3730      	adds	r7, #48	@ 0x30
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}

0800cff2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cff2:	b580      	push	{r7, lr}
 800cff4:	b08a      	sub	sp, #40	@ 0x28
 800cff6:	af02      	add	r7, sp, #8
 800cff8:	60f8      	str	r0, [r7, #12]
 800cffa:	60b9      	str	r1, [r7, #8]
 800cffc:	4613      	mov	r3, r2
 800cffe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d10b      	bne.n	800d01e <xQueueGenericCreate+0x2c>
	__asm volatile
 800d006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d00a:	f383 8811 	msr	BASEPRI, r3
 800d00e:	f3bf 8f6f 	isb	sy
 800d012:	f3bf 8f4f 	dsb	sy
 800d016:	613b      	str	r3, [r7, #16]
}
 800d018:	bf00      	nop
 800d01a:	bf00      	nop
 800d01c:	e7fd      	b.n	800d01a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	68ba      	ldr	r2, [r7, #8]
 800d022:	fb02 f303 	mul.w	r3, r2, r3
 800d026:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d028:	69fb      	ldr	r3, [r7, #28]
 800d02a:	3350      	adds	r3, #80	@ 0x50
 800d02c:	4618      	mov	r0, r3
 800d02e:	f002 fe81 	bl	800fd34 <pvPortMalloc>
 800d032:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d034:	69bb      	ldr	r3, [r7, #24]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d011      	beq.n	800d05e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d03a:	69bb      	ldr	r3, [r7, #24]
 800d03c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d03e:	697b      	ldr	r3, [r7, #20]
 800d040:	3350      	adds	r3, #80	@ 0x50
 800d042:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d044:	69bb      	ldr	r3, [r7, #24]
 800d046:	2200      	movs	r2, #0
 800d048:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d04c:	79fa      	ldrb	r2, [r7, #7]
 800d04e:	69bb      	ldr	r3, [r7, #24]
 800d050:	9300      	str	r3, [sp, #0]
 800d052:	4613      	mov	r3, r2
 800d054:	697a      	ldr	r2, [r7, #20]
 800d056:	68b9      	ldr	r1, [r7, #8]
 800d058:	68f8      	ldr	r0, [r7, #12]
 800d05a:	f000 f805 	bl	800d068 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d05e:	69bb      	ldr	r3, [r7, #24]
	}
 800d060:	4618      	mov	r0, r3
 800d062:	3720      	adds	r7, #32
 800d064:	46bd      	mov	sp, r7
 800d066:	bd80      	pop	{r7, pc}

0800d068 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b084      	sub	sp, #16
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	60f8      	str	r0, [r7, #12]
 800d070:	60b9      	str	r1, [r7, #8]
 800d072:	607a      	str	r2, [r7, #4]
 800d074:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d076:	68bb      	ldr	r3, [r7, #8]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d103      	bne.n	800d084 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d07c:	69bb      	ldr	r3, [r7, #24]
 800d07e:	69ba      	ldr	r2, [r7, #24]
 800d080:	601a      	str	r2, [r3, #0]
 800d082:	e002      	b.n	800d08a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d084:	69bb      	ldr	r3, [r7, #24]
 800d086:	687a      	ldr	r2, [r7, #4]
 800d088:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d08a:	69bb      	ldr	r3, [r7, #24]
 800d08c:	68fa      	ldr	r2, [r7, #12]
 800d08e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d090:	69bb      	ldr	r3, [r7, #24]
 800d092:	68ba      	ldr	r2, [r7, #8]
 800d094:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d096:	2101      	movs	r1, #1
 800d098:	69b8      	ldr	r0, [r7, #24]
 800d09a:	f7ff fec3 	bl	800ce24 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d09e:	69bb      	ldr	r3, [r7, #24]
 800d0a0:	78fa      	ldrb	r2, [r7, #3]
 800d0a2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d0a6:	bf00      	nop
 800d0a8:	3710      	adds	r7, #16
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	bd80      	pop	{r7, pc}

0800d0ae <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800d0ae:	b580      	push	{r7, lr}
 800d0b0:	b086      	sub	sp, #24
 800d0b2:	af00      	add	r7, sp, #0
 800d0b4:	6078      	str	r0, [r7, #4]
 800d0b6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d10b      	bne.n	800d0d6 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800d0be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0c2:	f383 8811 	msr	BASEPRI, r3
 800d0c6:	f3bf 8f6f 	isb	sy
 800d0ca:	f3bf 8f4f 	dsb	sy
 800d0ce:	613b      	str	r3, [r7, #16]
}
 800d0d0:	bf00      	nop
 800d0d2:	bf00      	nop
 800d0d4:	e7fd      	b.n	800d0d2 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d0d6:	683a      	ldr	r2, [r7, #0]
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	429a      	cmp	r2, r3
 800d0dc:	d90b      	bls.n	800d0f6 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800d0de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0e2:	f383 8811 	msr	BASEPRI, r3
 800d0e6:	f3bf 8f6f 	isb	sy
 800d0ea:	f3bf 8f4f 	dsb	sy
 800d0ee:	60fb      	str	r3, [r7, #12]
}
 800d0f0:	bf00      	nop
 800d0f2:	bf00      	nop
 800d0f4:	e7fd      	b.n	800d0f2 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d0f6:	2202      	movs	r2, #2
 800d0f8:	2100      	movs	r1, #0
 800d0fa:	6878      	ldr	r0, [r7, #4]
 800d0fc:	f7ff ff79 	bl	800cff2 <xQueueGenericCreate>
 800d100:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800d102:	697b      	ldr	r3, [r7, #20]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d002      	beq.n	800d10e <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d108:	697b      	ldr	r3, [r7, #20]
 800d10a:	683a      	ldr	r2, [r7, #0]
 800d10c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d10e:	697b      	ldr	r3, [r7, #20]
	}
 800d110:	4618      	mov	r0, r3
 800d112:	3718      	adds	r7, #24
 800d114:	46bd      	mov	sp, r7
 800d116:	bd80      	pop	{r7, pc}

0800d118 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b08e      	sub	sp, #56	@ 0x38
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	60f8      	str	r0, [r7, #12]
 800d120:	60b9      	str	r1, [r7, #8]
 800d122:	607a      	str	r2, [r7, #4]
 800d124:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d126:	2300      	movs	r3, #0
 800d128:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d12e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d130:	2b00      	cmp	r3, #0
 800d132:	d10b      	bne.n	800d14c <xQueueGenericSend+0x34>
	__asm volatile
 800d134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d138:	f383 8811 	msr	BASEPRI, r3
 800d13c:	f3bf 8f6f 	isb	sy
 800d140:	f3bf 8f4f 	dsb	sy
 800d144:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d146:	bf00      	nop
 800d148:	bf00      	nop
 800d14a:	e7fd      	b.n	800d148 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d14c:	68bb      	ldr	r3, [r7, #8]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d103      	bne.n	800d15a <xQueueGenericSend+0x42>
 800d152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d156:	2b00      	cmp	r3, #0
 800d158:	d101      	bne.n	800d15e <xQueueGenericSend+0x46>
 800d15a:	2301      	movs	r3, #1
 800d15c:	e000      	b.n	800d160 <xQueueGenericSend+0x48>
 800d15e:	2300      	movs	r3, #0
 800d160:	2b00      	cmp	r3, #0
 800d162:	d10b      	bne.n	800d17c <xQueueGenericSend+0x64>
	__asm volatile
 800d164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d168:	f383 8811 	msr	BASEPRI, r3
 800d16c:	f3bf 8f6f 	isb	sy
 800d170:	f3bf 8f4f 	dsb	sy
 800d174:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d176:	bf00      	nop
 800d178:	bf00      	nop
 800d17a:	e7fd      	b.n	800d178 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d17c:	683b      	ldr	r3, [r7, #0]
 800d17e:	2b02      	cmp	r3, #2
 800d180:	d103      	bne.n	800d18a <xQueueGenericSend+0x72>
 800d182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d184:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d186:	2b01      	cmp	r3, #1
 800d188:	d101      	bne.n	800d18e <xQueueGenericSend+0x76>
 800d18a:	2301      	movs	r3, #1
 800d18c:	e000      	b.n	800d190 <xQueueGenericSend+0x78>
 800d18e:	2300      	movs	r3, #0
 800d190:	2b00      	cmp	r3, #0
 800d192:	d10b      	bne.n	800d1ac <xQueueGenericSend+0x94>
	__asm volatile
 800d194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d198:	f383 8811 	msr	BASEPRI, r3
 800d19c:	f3bf 8f6f 	isb	sy
 800d1a0:	f3bf 8f4f 	dsb	sy
 800d1a4:	623b      	str	r3, [r7, #32]
}
 800d1a6:	bf00      	nop
 800d1a8:	bf00      	nop
 800d1aa:	e7fd      	b.n	800d1a8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d1ac:	f001 fd4e 	bl	800ec4c <xTaskGetSchedulerState>
 800d1b0:	4603      	mov	r3, r0
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d102      	bne.n	800d1bc <xQueueGenericSend+0xa4>
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d101      	bne.n	800d1c0 <xQueueGenericSend+0xa8>
 800d1bc:	2301      	movs	r3, #1
 800d1be:	e000      	b.n	800d1c2 <xQueueGenericSend+0xaa>
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d10b      	bne.n	800d1de <xQueueGenericSend+0xc6>
	__asm volatile
 800d1c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1ca:	f383 8811 	msr	BASEPRI, r3
 800d1ce:	f3bf 8f6f 	isb	sy
 800d1d2:	f3bf 8f4f 	dsb	sy
 800d1d6:	61fb      	str	r3, [r7, #28]
}
 800d1d8:	bf00      	nop
 800d1da:	bf00      	nop
 800d1dc:	e7fd      	b.n	800d1da <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d1de:	f002 fba3 	bl	800f928 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d1e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d1e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d1ea:	429a      	cmp	r2, r3
 800d1ec:	d302      	bcc.n	800d1f4 <xQueueGenericSend+0xdc>
 800d1ee:	683b      	ldr	r3, [r7, #0]
 800d1f0:	2b02      	cmp	r3, #2
 800d1f2:	d129      	bne.n	800d248 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d1f4:	683a      	ldr	r2, [r7, #0]
 800d1f6:	68b9      	ldr	r1, [r7, #8]
 800d1f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d1fa:	f000 fc0a 	bl	800da12 <prvCopyDataToQueue>
 800d1fe:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d204:	2b00      	cmp	r3, #0
 800d206:	d010      	beq.n	800d22a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d20a:	3324      	adds	r3, #36	@ 0x24
 800d20c:	4618      	mov	r0, r3
 800d20e:	f001 faff 	bl	800e810 <xTaskRemoveFromEventList>
 800d212:	4603      	mov	r3, r0
 800d214:	2b00      	cmp	r3, #0
 800d216:	d013      	beq.n	800d240 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d218:	4b3f      	ldr	r3, [pc, #252]	@ (800d318 <xQueueGenericSend+0x200>)
 800d21a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d21e:	601a      	str	r2, [r3, #0]
 800d220:	f3bf 8f4f 	dsb	sy
 800d224:	f3bf 8f6f 	isb	sy
 800d228:	e00a      	b.n	800d240 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d22a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d007      	beq.n	800d240 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d230:	4b39      	ldr	r3, [pc, #228]	@ (800d318 <xQueueGenericSend+0x200>)
 800d232:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d236:	601a      	str	r2, [r3, #0]
 800d238:	f3bf 8f4f 	dsb	sy
 800d23c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d240:	f002 fba4 	bl	800f98c <vPortExitCritical>
				return pdPASS;
 800d244:	2301      	movs	r3, #1
 800d246:	e063      	b.n	800d310 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d103      	bne.n	800d256 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d24e:	f002 fb9d 	bl	800f98c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d252:	2300      	movs	r3, #0
 800d254:	e05c      	b.n	800d310 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d256:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d106      	bne.n	800d26a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d25c:	f107 0314 	add.w	r3, r7, #20
 800d260:	4618      	mov	r0, r3
 800d262:	f001 fb3b 	bl	800e8dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d266:	2301      	movs	r3, #1
 800d268:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d26a:	f002 fb8f 	bl	800f98c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d26e:	f001 f841 	bl	800e2f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d272:	f002 fb59 	bl	800f928 <vPortEnterCritical>
 800d276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d278:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d27c:	b25b      	sxtb	r3, r3
 800d27e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d282:	d103      	bne.n	800d28c <xQueueGenericSend+0x174>
 800d284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d286:	2200      	movs	r2, #0
 800d288:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d28c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d28e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d292:	b25b      	sxtb	r3, r3
 800d294:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d298:	d103      	bne.n	800d2a2 <xQueueGenericSend+0x18a>
 800d29a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d29c:	2200      	movs	r2, #0
 800d29e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d2a2:	f002 fb73 	bl	800f98c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d2a6:	1d3a      	adds	r2, r7, #4
 800d2a8:	f107 0314 	add.w	r3, r7, #20
 800d2ac:	4611      	mov	r1, r2
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	f001 fb2a 	bl	800e908 <xTaskCheckForTimeOut>
 800d2b4:	4603      	mov	r3, r0
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d124      	bne.n	800d304 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d2ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d2bc:	f000 fca1 	bl	800dc02 <prvIsQueueFull>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d018      	beq.n	800d2f8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d2c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2c8:	3310      	adds	r3, #16
 800d2ca:	687a      	ldr	r2, [r7, #4]
 800d2cc:	4611      	mov	r1, r2
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	f001 fa4c 	bl	800e76c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d2d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d2d6:	f000 fc2c 	bl	800db32 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d2da:	f001 f851 	bl	800e380 <xTaskResumeAll>
 800d2de:	4603      	mov	r3, r0
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	f47f af7c 	bne.w	800d1de <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d2e6:	4b0c      	ldr	r3, [pc, #48]	@ (800d318 <xQueueGenericSend+0x200>)
 800d2e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d2ec:	601a      	str	r2, [r3, #0]
 800d2ee:	f3bf 8f4f 	dsb	sy
 800d2f2:	f3bf 8f6f 	isb	sy
 800d2f6:	e772      	b.n	800d1de <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d2f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d2fa:	f000 fc1a 	bl	800db32 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d2fe:	f001 f83f 	bl	800e380 <xTaskResumeAll>
 800d302:	e76c      	b.n	800d1de <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d304:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d306:	f000 fc14 	bl	800db32 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d30a:	f001 f839 	bl	800e380 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d30e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d310:	4618      	mov	r0, r3
 800d312:	3738      	adds	r7, #56	@ 0x38
 800d314:	46bd      	mov	sp, r7
 800d316:	bd80      	pop	{r7, pc}
 800d318:	e000ed04 	.word	0xe000ed04

0800d31c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b090      	sub	sp, #64	@ 0x40
 800d320:	af00      	add	r7, sp, #0
 800d322:	60f8      	str	r0, [r7, #12]
 800d324:	60b9      	str	r1, [r7, #8]
 800d326:	607a      	str	r2, [r7, #4]
 800d328:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800d32e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d330:	2b00      	cmp	r3, #0
 800d332:	d10b      	bne.n	800d34c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800d334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d338:	f383 8811 	msr	BASEPRI, r3
 800d33c:	f3bf 8f6f 	isb	sy
 800d340:	f3bf 8f4f 	dsb	sy
 800d344:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d346:	bf00      	nop
 800d348:	bf00      	nop
 800d34a:	e7fd      	b.n	800d348 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d34c:	68bb      	ldr	r3, [r7, #8]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d103      	bne.n	800d35a <xQueueGenericSendFromISR+0x3e>
 800d352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d356:	2b00      	cmp	r3, #0
 800d358:	d101      	bne.n	800d35e <xQueueGenericSendFromISR+0x42>
 800d35a:	2301      	movs	r3, #1
 800d35c:	e000      	b.n	800d360 <xQueueGenericSendFromISR+0x44>
 800d35e:	2300      	movs	r3, #0
 800d360:	2b00      	cmp	r3, #0
 800d362:	d10b      	bne.n	800d37c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800d364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d368:	f383 8811 	msr	BASEPRI, r3
 800d36c:	f3bf 8f6f 	isb	sy
 800d370:	f3bf 8f4f 	dsb	sy
 800d374:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d376:	bf00      	nop
 800d378:	bf00      	nop
 800d37a:	e7fd      	b.n	800d378 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d37c:	683b      	ldr	r3, [r7, #0]
 800d37e:	2b02      	cmp	r3, #2
 800d380:	d103      	bne.n	800d38a <xQueueGenericSendFromISR+0x6e>
 800d382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d384:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d386:	2b01      	cmp	r3, #1
 800d388:	d101      	bne.n	800d38e <xQueueGenericSendFromISR+0x72>
 800d38a:	2301      	movs	r3, #1
 800d38c:	e000      	b.n	800d390 <xQueueGenericSendFromISR+0x74>
 800d38e:	2300      	movs	r3, #0
 800d390:	2b00      	cmp	r3, #0
 800d392:	d10b      	bne.n	800d3ac <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800d394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d398:	f383 8811 	msr	BASEPRI, r3
 800d39c:	f3bf 8f6f 	isb	sy
 800d3a0:	f3bf 8f4f 	dsb	sy
 800d3a4:	623b      	str	r3, [r7, #32]
}
 800d3a6:	bf00      	nop
 800d3a8:	bf00      	nop
 800d3aa:	e7fd      	b.n	800d3a8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d3ac:	f002 fc80 	bl	800fcb0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d3b0:	f3ef 8211 	mrs	r2, BASEPRI
 800d3b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3b8:	f383 8811 	msr	BASEPRI, r3
 800d3bc:	f3bf 8f6f 	isb	sy
 800d3c0:	f3bf 8f4f 	dsb	sy
 800d3c4:	61fa      	str	r2, [r7, #28]
 800d3c6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d3c8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d3ca:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d3cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d3d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d3d4:	429a      	cmp	r2, r3
 800d3d6:	d302      	bcc.n	800d3de <xQueueGenericSendFromISR+0xc2>
 800d3d8:	683b      	ldr	r3, [r7, #0]
 800d3da:	2b02      	cmp	r3, #2
 800d3dc:	d12f      	bne.n	800d43e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d3de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d3e4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d3e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d3ee:	683a      	ldr	r2, [r7, #0]
 800d3f0:	68b9      	ldr	r1, [r7, #8]
 800d3f2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d3f4:	f000 fb0d 	bl	800da12 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d3f8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800d3fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d400:	d112      	bne.n	800d428 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d406:	2b00      	cmp	r3, #0
 800d408:	d016      	beq.n	800d438 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d40a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d40c:	3324      	adds	r3, #36	@ 0x24
 800d40e:	4618      	mov	r0, r3
 800d410:	f001 f9fe 	bl	800e810 <xTaskRemoveFromEventList>
 800d414:	4603      	mov	r3, r0
 800d416:	2b00      	cmp	r3, #0
 800d418:	d00e      	beq.n	800d438 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d00b      	beq.n	800d438 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	2201      	movs	r2, #1
 800d424:	601a      	str	r2, [r3, #0]
 800d426:	e007      	b.n	800d438 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d428:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d42c:	3301      	adds	r3, #1
 800d42e:	b2db      	uxtb	r3, r3
 800d430:	b25a      	sxtb	r2, r3
 800d432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d434:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d438:	2301      	movs	r3, #1
 800d43a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800d43c:	e001      	b.n	800d442 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d43e:	2300      	movs	r3, #0
 800d440:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d444:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d446:	697b      	ldr	r3, [r7, #20]
 800d448:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d44c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d44e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d450:	4618      	mov	r0, r3
 800d452:	3740      	adds	r7, #64	@ 0x40
 800d454:	46bd      	mov	sp, r7
 800d456:	bd80      	pop	{r7, pc}

0800d458 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b08e      	sub	sp, #56	@ 0x38
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
 800d460:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d10b      	bne.n	800d484 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800d46c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d470:	f383 8811 	msr	BASEPRI, r3
 800d474:	f3bf 8f6f 	isb	sy
 800d478:	f3bf 8f4f 	dsb	sy
 800d47c:	623b      	str	r3, [r7, #32]
}
 800d47e:	bf00      	nop
 800d480:	bf00      	nop
 800d482:	e7fd      	b.n	800d480 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d00b      	beq.n	800d4a4 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800d48c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d490:	f383 8811 	msr	BASEPRI, r3
 800d494:	f3bf 8f6f 	isb	sy
 800d498:	f3bf 8f4f 	dsb	sy
 800d49c:	61fb      	str	r3, [r7, #28]
}
 800d49e:	bf00      	nop
 800d4a0:	bf00      	nop
 800d4a2:	e7fd      	b.n	800d4a0 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d4a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d103      	bne.n	800d4b4 <xQueueGiveFromISR+0x5c>
 800d4ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4ae:	689b      	ldr	r3, [r3, #8]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d101      	bne.n	800d4b8 <xQueueGiveFromISR+0x60>
 800d4b4:	2301      	movs	r3, #1
 800d4b6:	e000      	b.n	800d4ba <xQueueGiveFromISR+0x62>
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d10b      	bne.n	800d4d6 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800d4be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4c2:	f383 8811 	msr	BASEPRI, r3
 800d4c6:	f3bf 8f6f 	isb	sy
 800d4ca:	f3bf 8f4f 	dsb	sy
 800d4ce:	61bb      	str	r3, [r7, #24]
}
 800d4d0:	bf00      	nop
 800d4d2:	bf00      	nop
 800d4d4:	e7fd      	b.n	800d4d2 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d4d6:	f002 fbeb 	bl	800fcb0 <vPortValidateInterruptPriority>
	__asm volatile
 800d4da:	f3ef 8211 	mrs	r2, BASEPRI
 800d4de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4e2:	f383 8811 	msr	BASEPRI, r3
 800d4e6:	f3bf 8f6f 	isb	sy
 800d4ea:	f3bf 8f4f 	dsb	sy
 800d4ee:	617a      	str	r2, [r7, #20]
 800d4f0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d4f2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d4f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d4f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4fa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d4fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d500:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d502:	429a      	cmp	r2, r3
 800d504:	d22b      	bcs.n	800d55e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d508:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d50c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d512:	1c5a      	adds	r2, r3, #1
 800d514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d516:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d518:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d51c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d520:	d112      	bne.n	800d548 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d526:	2b00      	cmp	r3, #0
 800d528:	d016      	beq.n	800d558 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d52a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d52c:	3324      	adds	r3, #36	@ 0x24
 800d52e:	4618      	mov	r0, r3
 800d530:	f001 f96e 	bl	800e810 <xTaskRemoveFromEventList>
 800d534:	4603      	mov	r3, r0
 800d536:	2b00      	cmp	r3, #0
 800d538:	d00e      	beq.n	800d558 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d53a:	683b      	ldr	r3, [r7, #0]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d00b      	beq.n	800d558 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d540:	683b      	ldr	r3, [r7, #0]
 800d542:	2201      	movs	r2, #1
 800d544:	601a      	str	r2, [r3, #0]
 800d546:	e007      	b.n	800d558 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d548:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d54c:	3301      	adds	r3, #1
 800d54e:	b2db      	uxtb	r3, r3
 800d550:	b25a      	sxtb	r2, r3
 800d552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d554:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d558:	2301      	movs	r3, #1
 800d55a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d55c:	e001      	b.n	800d562 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d55e:	2300      	movs	r3, #0
 800d560:	637b      	str	r3, [r7, #52]	@ 0x34
 800d562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d564:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	f383 8811 	msr	BASEPRI, r3
}
 800d56c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d56e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d570:	4618      	mov	r0, r3
 800d572:	3738      	adds	r7, #56	@ 0x38
 800d574:	46bd      	mov	sp, r7
 800d576:	bd80      	pop	{r7, pc}

0800d578 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b08c      	sub	sp, #48	@ 0x30
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	60f8      	str	r0, [r7, #12]
 800d580:	60b9      	str	r1, [r7, #8]
 800d582:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d584:	2300      	movs	r3, #0
 800d586:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d58c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d10b      	bne.n	800d5aa <xQueueReceive+0x32>
	__asm volatile
 800d592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d596:	f383 8811 	msr	BASEPRI, r3
 800d59a:	f3bf 8f6f 	isb	sy
 800d59e:	f3bf 8f4f 	dsb	sy
 800d5a2:	623b      	str	r3, [r7, #32]
}
 800d5a4:	bf00      	nop
 800d5a6:	bf00      	nop
 800d5a8:	e7fd      	b.n	800d5a6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d5aa:	68bb      	ldr	r3, [r7, #8]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d103      	bne.n	800d5b8 <xQueueReceive+0x40>
 800d5b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d101      	bne.n	800d5bc <xQueueReceive+0x44>
 800d5b8:	2301      	movs	r3, #1
 800d5ba:	e000      	b.n	800d5be <xQueueReceive+0x46>
 800d5bc:	2300      	movs	r3, #0
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d10b      	bne.n	800d5da <xQueueReceive+0x62>
	__asm volatile
 800d5c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5c6:	f383 8811 	msr	BASEPRI, r3
 800d5ca:	f3bf 8f6f 	isb	sy
 800d5ce:	f3bf 8f4f 	dsb	sy
 800d5d2:	61fb      	str	r3, [r7, #28]
}
 800d5d4:	bf00      	nop
 800d5d6:	bf00      	nop
 800d5d8:	e7fd      	b.n	800d5d6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d5da:	f001 fb37 	bl	800ec4c <xTaskGetSchedulerState>
 800d5de:	4603      	mov	r3, r0
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d102      	bne.n	800d5ea <xQueueReceive+0x72>
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d101      	bne.n	800d5ee <xQueueReceive+0x76>
 800d5ea:	2301      	movs	r3, #1
 800d5ec:	e000      	b.n	800d5f0 <xQueueReceive+0x78>
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d10b      	bne.n	800d60c <xQueueReceive+0x94>
	__asm volatile
 800d5f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5f8:	f383 8811 	msr	BASEPRI, r3
 800d5fc:	f3bf 8f6f 	isb	sy
 800d600:	f3bf 8f4f 	dsb	sy
 800d604:	61bb      	str	r3, [r7, #24]
}
 800d606:	bf00      	nop
 800d608:	bf00      	nop
 800d60a:	e7fd      	b.n	800d608 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d60c:	f002 f98c 	bl	800f928 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d614:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d01f      	beq.n	800d65c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d61c:	68b9      	ldr	r1, [r7, #8]
 800d61e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d620:	f000 fa61 	bl	800dae6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d626:	1e5a      	subs	r2, r3, #1
 800d628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d62a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d62c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d62e:	691b      	ldr	r3, [r3, #16]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d00f      	beq.n	800d654 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d636:	3310      	adds	r3, #16
 800d638:	4618      	mov	r0, r3
 800d63a:	f001 f8e9 	bl	800e810 <xTaskRemoveFromEventList>
 800d63e:	4603      	mov	r3, r0
 800d640:	2b00      	cmp	r3, #0
 800d642:	d007      	beq.n	800d654 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d644:	4b3c      	ldr	r3, [pc, #240]	@ (800d738 <xQueueReceive+0x1c0>)
 800d646:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d64a:	601a      	str	r2, [r3, #0]
 800d64c:	f3bf 8f4f 	dsb	sy
 800d650:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d654:	f002 f99a 	bl	800f98c <vPortExitCritical>
				return pdPASS;
 800d658:	2301      	movs	r3, #1
 800d65a:	e069      	b.n	800d730 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d103      	bne.n	800d66a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d662:	f002 f993 	bl	800f98c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d666:	2300      	movs	r3, #0
 800d668:	e062      	b.n	800d730 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d66a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d106      	bne.n	800d67e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d670:	f107 0310 	add.w	r3, r7, #16
 800d674:	4618      	mov	r0, r3
 800d676:	f001 f931 	bl	800e8dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d67a:	2301      	movs	r3, #1
 800d67c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d67e:	f002 f985 	bl	800f98c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d682:	f000 fe37 	bl	800e2f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d686:	f002 f94f 	bl	800f928 <vPortEnterCritical>
 800d68a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d68c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d690:	b25b      	sxtb	r3, r3
 800d692:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d696:	d103      	bne.n	800d6a0 <xQueueReceive+0x128>
 800d698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d69a:	2200      	movs	r2, #0
 800d69c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d6a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d6a6:	b25b      	sxtb	r3, r3
 800d6a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6ac:	d103      	bne.n	800d6b6 <xQueueReceive+0x13e>
 800d6ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d6b6:	f002 f969 	bl	800f98c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d6ba:	1d3a      	adds	r2, r7, #4
 800d6bc:	f107 0310 	add.w	r3, r7, #16
 800d6c0:	4611      	mov	r1, r2
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	f001 f920 	bl	800e908 <xTaskCheckForTimeOut>
 800d6c8:	4603      	mov	r3, r0
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d123      	bne.n	800d716 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d6ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d6d0:	f000 fa81 	bl	800dbd6 <prvIsQueueEmpty>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d017      	beq.n	800d70a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d6da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6dc:	3324      	adds	r3, #36	@ 0x24
 800d6de:	687a      	ldr	r2, [r7, #4]
 800d6e0:	4611      	mov	r1, r2
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	f001 f842 	bl	800e76c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d6e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d6ea:	f000 fa22 	bl	800db32 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d6ee:	f000 fe47 	bl	800e380 <xTaskResumeAll>
 800d6f2:	4603      	mov	r3, r0
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d189      	bne.n	800d60c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d6f8:	4b0f      	ldr	r3, [pc, #60]	@ (800d738 <xQueueReceive+0x1c0>)
 800d6fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d6fe:	601a      	str	r2, [r3, #0]
 800d700:	f3bf 8f4f 	dsb	sy
 800d704:	f3bf 8f6f 	isb	sy
 800d708:	e780      	b.n	800d60c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d70a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d70c:	f000 fa11 	bl	800db32 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d710:	f000 fe36 	bl	800e380 <xTaskResumeAll>
 800d714:	e77a      	b.n	800d60c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d716:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d718:	f000 fa0b 	bl	800db32 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d71c:	f000 fe30 	bl	800e380 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d720:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d722:	f000 fa58 	bl	800dbd6 <prvIsQueueEmpty>
 800d726:	4603      	mov	r3, r0
 800d728:	2b00      	cmp	r3, #0
 800d72a:	f43f af6f 	beq.w	800d60c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d72e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d730:	4618      	mov	r0, r3
 800d732:	3730      	adds	r7, #48	@ 0x30
 800d734:	46bd      	mov	sp, r7
 800d736:	bd80      	pop	{r7, pc}
 800d738:	e000ed04 	.word	0xe000ed04

0800d73c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d73c:	b580      	push	{r7, lr}
 800d73e:	b08e      	sub	sp, #56	@ 0x38
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
 800d744:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d746:	2300      	movs	r3, #0
 800d748:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d74e:	2300      	movs	r3, #0
 800d750:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d754:	2b00      	cmp	r3, #0
 800d756:	d10b      	bne.n	800d770 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800d758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d75c:	f383 8811 	msr	BASEPRI, r3
 800d760:	f3bf 8f6f 	isb	sy
 800d764:	f3bf 8f4f 	dsb	sy
 800d768:	623b      	str	r3, [r7, #32]
}
 800d76a:	bf00      	nop
 800d76c:	bf00      	nop
 800d76e:	e7fd      	b.n	800d76c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d774:	2b00      	cmp	r3, #0
 800d776:	d00b      	beq.n	800d790 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800d778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d77c:	f383 8811 	msr	BASEPRI, r3
 800d780:	f3bf 8f6f 	isb	sy
 800d784:	f3bf 8f4f 	dsb	sy
 800d788:	61fb      	str	r3, [r7, #28]
}
 800d78a:	bf00      	nop
 800d78c:	bf00      	nop
 800d78e:	e7fd      	b.n	800d78c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d790:	f001 fa5c 	bl	800ec4c <xTaskGetSchedulerState>
 800d794:	4603      	mov	r3, r0
 800d796:	2b00      	cmp	r3, #0
 800d798:	d102      	bne.n	800d7a0 <xQueueSemaphoreTake+0x64>
 800d79a:	683b      	ldr	r3, [r7, #0]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d101      	bne.n	800d7a4 <xQueueSemaphoreTake+0x68>
 800d7a0:	2301      	movs	r3, #1
 800d7a2:	e000      	b.n	800d7a6 <xQueueSemaphoreTake+0x6a>
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d10b      	bne.n	800d7c2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800d7aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7ae:	f383 8811 	msr	BASEPRI, r3
 800d7b2:	f3bf 8f6f 	isb	sy
 800d7b6:	f3bf 8f4f 	dsb	sy
 800d7ba:	61bb      	str	r3, [r7, #24]
}
 800d7bc:	bf00      	nop
 800d7be:	bf00      	nop
 800d7c0:	e7fd      	b.n	800d7be <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d7c2:	f002 f8b1 	bl	800f928 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d7c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7ca:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d7cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d024      	beq.n	800d81c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d7d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7d4:	1e5a      	subs	r2, r3, #1
 800d7d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7d8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d7da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d104      	bne.n	800d7ec <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d7e2:	f001 fbad 	bl	800ef40 <pvTaskIncrementMutexHeldCount>
 800d7e6:	4602      	mov	r2, r0
 800d7e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7ea:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d7ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7ee:	691b      	ldr	r3, [r3, #16]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d00f      	beq.n	800d814 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d7f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7f6:	3310      	adds	r3, #16
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	f001 f809 	bl	800e810 <xTaskRemoveFromEventList>
 800d7fe:	4603      	mov	r3, r0
 800d800:	2b00      	cmp	r3, #0
 800d802:	d007      	beq.n	800d814 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d804:	4b54      	ldr	r3, [pc, #336]	@ (800d958 <xQueueSemaphoreTake+0x21c>)
 800d806:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d80a:	601a      	str	r2, [r3, #0]
 800d80c:	f3bf 8f4f 	dsb	sy
 800d810:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d814:	f002 f8ba 	bl	800f98c <vPortExitCritical>
				return pdPASS;
 800d818:	2301      	movs	r3, #1
 800d81a:	e098      	b.n	800d94e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d81c:	683b      	ldr	r3, [r7, #0]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d112      	bne.n	800d848 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d824:	2b00      	cmp	r3, #0
 800d826:	d00b      	beq.n	800d840 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800d828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d82c:	f383 8811 	msr	BASEPRI, r3
 800d830:	f3bf 8f6f 	isb	sy
 800d834:	f3bf 8f4f 	dsb	sy
 800d838:	617b      	str	r3, [r7, #20]
}
 800d83a:	bf00      	nop
 800d83c:	bf00      	nop
 800d83e:	e7fd      	b.n	800d83c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d840:	f002 f8a4 	bl	800f98c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d844:	2300      	movs	r3, #0
 800d846:	e082      	b.n	800d94e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d848:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d106      	bne.n	800d85c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d84e:	f107 030c 	add.w	r3, r7, #12
 800d852:	4618      	mov	r0, r3
 800d854:	f001 f842 	bl	800e8dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d858:	2301      	movs	r3, #1
 800d85a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d85c:	f002 f896 	bl	800f98c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d860:	f000 fd48 	bl	800e2f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d864:	f002 f860 	bl	800f928 <vPortEnterCritical>
 800d868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d86a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d86e:	b25b      	sxtb	r3, r3
 800d870:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d874:	d103      	bne.n	800d87e <xQueueSemaphoreTake+0x142>
 800d876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d878:	2200      	movs	r2, #0
 800d87a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d87e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d880:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d884:	b25b      	sxtb	r3, r3
 800d886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d88a:	d103      	bne.n	800d894 <xQueueSemaphoreTake+0x158>
 800d88c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d88e:	2200      	movs	r2, #0
 800d890:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d894:	f002 f87a 	bl	800f98c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d898:	463a      	mov	r2, r7
 800d89a:	f107 030c 	add.w	r3, r7, #12
 800d89e:	4611      	mov	r1, r2
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	f001 f831 	bl	800e908 <xTaskCheckForTimeOut>
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d132      	bne.n	800d912 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d8ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d8ae:	f000 f992 	bl	800dbd6 <prvIsQueueEmpty>
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d026      	beq.n	800d906 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d8b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d109      	bne.n	800d8d4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800d8c0:	f002 f832 	bl	800f928 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d8c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8c6:	689b      	ldr	r3, [r3, #8]
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	f001 f9dd 	bl	800ec88 <xTaskPriorityInherit>
 800d8ce:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800d8d0:	f002 f85c 	bl	800f98c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d8d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8d6:	3324      	adds	r3, #36	@ 0x24
 800d8d8:	683a      	ldr	r2, [r7, #0]
 800d8da:	4611      	mov	r1, r2
 800d8dc:	4618      	mov	r0, r3
 800d8de:	f000 ff45 	bl	800e76c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d8e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d8e4:	f000 f925 	bl	800db32 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d8e8:	f000 fd4a 	bl	800e380 <xTaskResumeAll>
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	f47f af67 	bne.w	800d7c2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800d8f4:	4b18      	ldr	r3, [pc, #96]	@ (800d958 <xQueueSemaphoreTake+0x21c>)
 800d8f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d8fa:	601a      	str	r2, [r3, #0]
 800d8fc:	f3bf 8f4f 	dsb	sy
 800d900:	f3bf 8f6f 	isb	sy
 800d904:	e75d      	b.n	800d7c2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d906:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d908:	f000 f913 	bl	800db32 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d90c:	f000 fd38 	bl	800e380 <xTaskResumeAll>
 800d910:	e757      	b.n	800d7c2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d912:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d914:	f000 f90d 	bl	800db32 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d918:	f000 fd32 	bl	800e380 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d91c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d91e:	f000 f95a 	bl	800dbd6 <prvIsQueueEmpty>
 800d922:	4603      	mov	r3, r0
 800d924:	2b00      	cmp	r3, #0
 800d926:	f43f af4c 	beq.w	800d7c2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d92a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d00d      	beq.n	800d94c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800d930:	f001 fffa 	bl	800f928 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d934:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d936:	f000 f854 	bl	800d9e2 <prvGetDisinheritPriorityAfterTimeout>
 800d93a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d93c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d93e:	689b      	ldr	r3, [r3, #8]
 800d940:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d942:	4618      	mov	r0, r3
 800d944:	f001 fa78 	bl	800ee38 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d948:	f002 f820 	bl	800f98c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d94c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d94e:	4618      	mov	r0, r3
 800d950:	3738      	adds	r7, #56	@ 0x38
 800d952:	46bd      	mov	sp, r7
 800d954:	bd80      	pop	{r7, pc}
 800d956:	bf00      	nop
 800d958:	e000ed04 	.word	0xe000ed04

0800d95c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b084      	sub	sp, #16
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d10b      	bne.n	800d982 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 800d96a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d96e:	f383 8811 	msr	BASEPRI, r3
 800d972:	f3bf 8f6f 	isb	sy
 800d976:	f3bf 8f4f 	dsb	sy
 800d97a:	60bb      	str	r3, [r7, #8]
}
 800d97c:	bf00      	nop
 800d97e:	bf00      	nop
 800d980:	e7fd      	b.n	800d97e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800d982:	f001 ffd1 	bl	800f928 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d98a:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800d98c:	f001 fffe 	bl	800f98c <vPortExitCritical>

	return uxReturn;
 800d990:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800d992:	4618      	mov	r0, r3
 800d994:	3710      	adds	r7, #16
 800d996:	46bd      	mov	sp, r7
 800d998:	bd80      	pop	{r7, pc}

0800d99a <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d99a:	b580      	push	{r7, lr}
 800d99c:	b084      	sub	sp, #16
 800d99e:	af00      	add	r7, sp, #0
 800d9a0:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d10b      	bne.n	800d9c4 <vQueueDelete+0x2a>
	__asm volatile
 800d9ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9b0:	f383 8811 	msr	BASEPRI, r3
 800d9b4:	f3bf 8f6f 	isb	sy
 800d9b8:	f3bf 8f4f 	dsb	sy
 800d9bc:	60bb      	str	r3, [r7, #8]
}
 800d9be:	bf00      	nop
 800d9c0:	bf00      	nop
 800d9c2:	e7fd      	b.n	800d9c0 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d9c4:	68f8      	ldr	r0, [r7, #12]
 800d9c6:	f000 f95f 	bl	800dc88 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d102      	bne.n	800d9da <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800d9d4:	68f8      	ldr	r0, [r7, #12]
 800d9d6:	f002 fa7b 	bl	800fed0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d9da:	bf00      	nop
 800d9dc:	3710      	adds	r7, #16
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	bd80      	pop	{r7, pc}

0800d9e2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d9e2:	b480      	push	{r7}
 800d9e4:	b085      	sub	sp, #20
 800d9e6:	af00      	add	r7, sp, #0
 800d9e8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d006      	beq.n	800da00 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800d9fc:	60fb      	str	r3, [r7, #12]
 800d9fe:	e001      	b.n	800da04 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800da00:	2300      	movs	r3, #0
 800da02:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800da04:	68fb      	ldr	r3, [r7, #12]
	}
 800da06:	4618      	mov	r0, r3
 800da08:	3714      	adds	r7, #20
 800da0a:	46bd      	mov	sp, r7
 800da0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da10:	4770      	bx	lr

0800da12 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800da12:	b580      	push	{r7, lr}
 800da14:	b086      	sub	sp, #24
 800da16:	af00      	add	r7, sp, #0
 800da18:	60f8      	str	r0, [r7, #12]
 800da1a:	60b9      	str	r1, [r7, #8]
 800da1c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800da1e:	2300      	movs	r3, #0
 800da20:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da26:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d10d      	bne.n	800da4c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d14d      	bne.n	800dad4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	689b      	ldr	r3, [r3, #8]
 800da3c:	4618      	mov	r0, r3
 800da3e:	f001 f98b 	bl	800ed58 <xTaskPriorityDisinherit>
 800da42:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	2200      	movs	r2, #0
 800da48:	609a      	str	r2, [r3, #8]
 800da4a:	e043      	b.n	800dad4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d119      	bne.n	800da86 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	6858      	ldr	r0, [r3, #4]
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da5a:	461a      	mov	r2, r3
 800da5c:	68b9      	ldr	r1, [r7, #8]
 800da5e:	f003 fe08 	bl	8011672 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	685a      	ldr	r2, [r3, #4]
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da6a:	441a      	add	r2, r3
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	685a      	ldr	r2, [r3, #4]
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	689b      	ldr	r3, [r3, #8]
 800da78:	429a      	cmp	r2, r3
 800da7a:	d32b      	bcc.n	800dad4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	681a      	ldr	r2, [r3, #0]
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	605a      	str	r2, [r3, #4]
 800da84:	e026      	b.n	800dad4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	68d8      	ldr	r0, [r3, #12]
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da8e:	461a      	mov	r2, r3
 800da90:	68b9      	ldr	r1, [r7, #8]
 800da92:	f003 fdee 	bl	8011672 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	68da      	ldr	r2, [r3, #12]
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da9e:	425b      	negs	r3, r3
 800daa0:	441a      	add	r2, r3
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	68da      	ldr	r2, [r3, #12]
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	429a      	cmp	r2, r3
 800dab0:	d207      	bcs.n	800dac2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	689a      	ldr	r2, [r3, #8]
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800daba:	425b      	negs	r3, r3
 800dabc:	441a      	add	r2, r3
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	2b02      	cmp	r3, #2
 800dac6:	d105      	bne.n	800dad4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dac8:	693b      	ldr	r3, [r7, #16]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d002      	beq.n	800dad4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800dace:	693b      	ldr	r3, [r7, #16]
 800dad0:	3b01      	subs	r3, #1
 800dad2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dad4:	693b      	ldr	r3, [r7, #16]
 800dad6:	1c5a      	adds	r2, r3, #1
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800dadc:	697b      	ldr	r3, [r7, #20]
}
 800dade:	4618      	mov	r0, r3
 800dae0:	3718      	adds	r7, #24
 800dae2:	46bd      	mov	sp, r7
 800dae4:	bd80      	pop	{r7, pc}

0800dae6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800dae6:	b580      	push	{r7, lr}
 800dae8:	b082      	sub	sp, #8
 800daea:	af00      	add	r7, sp, #0
 800daec:	6078      	str	r0, [r7, #4]
 800daee:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d018      	beq.n	800db2a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	68da      	ldr	r2, [r3, #12]
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db00:	441a      	add	r2, r3
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	68da      	ldr	r2, [r3, #12]
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	689b      	ldr	r3, [r3, #8]
 800db0e:	429a      	cmp	r2, r3
 800db10:	d303      	bcc.n	800db1a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681a      	ldr	r2, [r3, #0]
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	68d9      	ldr	r1, [r3, #12]
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db22:	461a      	mov	r2, r3
 800db24:	6838      	ldr	r0, [r7, #0]
 800db26:	f003 fda4 	bl	8011672 <memcpy>
	}
}
 800db2a:	bf00      	nop
 800db2c:	3708      	adds	r7, #8
 800db2e:	46bd      	mov	sp, r7
 800db30:	bd80      	pop	{r7, pc}

0800db32 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800db32:	b580      	push	{r7, lr}
 800db34:	b084      	sub	sp, #16
 800db36:	af00      	add	r7, sp, #0
 800db38:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800db3a:	f001 fef5 	bl	800f928 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800db44:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800db46:	e011      	b.n	800db6c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d012      	beq.n	800db76 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	3324      	adds	r3, #36	@ 0x24
 800db54:	4618      	mov	r0, r3
 800db56:	f000 fe5b 	bl	800e810 <xTaskRemoveFromEventList>
 800db5a:	4603      	mov	r3, r0
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d001      	beq.n	800db64 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800db60:	f000 ff36 	bl	800e9d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800db64:	7bfb      	ldrb	r3, [r7, #15]
 800db66:	3b01      	subs	r3, #1
 800db68:	b2db      	uxtb	r3, r3
 800db6a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800db6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db70:	2b00      	cmp	r3, #0
 800db72:	dce9      	bgt.n	800db48 <prvUnlockQueue+0x16>
 800db74:	e000      	b.n	800db78 <prvUnlockQueue+0x46>
					break;
 800db76:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	22ff      	movs	r2, #255	@ 0xff
 800db7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800db80:	f001 ff04 	bl	800f98c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800db84:	f001 fed0 	bl	800f928 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800db8e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800db90:	e011      	b.n	800dbb6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	691b      	ldr	r3, [r3, #16]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d012      	beq.n	800dbc0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	3310      	adds	r3, #16
 800db9e:	4618      	mov	r0, r3
 800dba0:	f000 fe36 	bl	800e810 <xTaskRemoveFromEventList>
 800dba4:	4603      	mov	r3, r0
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d001      	beq.n	800dbae <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800dbaa:	f000 ff11 	bl	800e9d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800dbae:	7bbb      	ldrb	r3, [r7, #14]
 800dbb0:	3b01      	subs	r3, #1
 800dbb2:	b2db      	uxtb	r3, r3
 800dbb4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dbb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	dce9      	bgt.n	800db92 <prvUnlockQueue+0x60>
 800dbbe:	e000      	b.n	800dbc2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800dbc0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	22ff      	movs	r2, #255	@ 0xff
 800dbc6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800dbca:	f001 fedf 	bl	800f98c <vPortExitCritical>
}
 800dbce:	bf00      	nop
 800dbd0:	3710      	adds	r7, #16
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	bd80      	pop	{r7, pc}

0800dbd6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800dbd6:	b580      	push	{r7, lr}
 800dbd8:	b084      	sub	sp, #16
 800dbda:	af00      	add	r7, sp, #0
 800dbdc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dbde:	f001 fea3 	bl	800f928 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d102      	bne.n	800dbf0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800dbea:	2301      	movs	r3, #1
 800dbec:	60fb      	str	r3, [r7, #12]
 800dbee:	e001      	b.n	800dbf4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dbf4:	f001 feca 	bl	800f98c <vPortExitCritical>

	return xReturn;
 800dbf8:	68fb      	ldr	r3, [r7, #12]
}
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	3710      	adds	r7, #16
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	bd80      	pop	{r7, pc}

0800dc02 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800dc02:	b580      	push	{r7, lr}
 800dc04:	b084      	sub	sp, #16
 800dc06:	af00      	add	r7, sp, #0
 800dc08:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dc0a:	f001 fe8d 	bl	800f928 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dc16:	429a      	cmp	r2, r3
 800dc18:	d102      	bne.n	800dc20 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800dc1a:	2301      	movs	r3, #1
 800dc1c:	60fb      	str	r3, [r7, #12]
 800dc1e:	e001      	b.n	800dc24 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800dc20:	2300      	movs	r3, #0
 800dc22:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dc24:	f001 feb2 	bl	800f98c <vPortExitCritical>

	return xReturn;
 800dc28:	68fb      	ldr	r3, [r7, #12]
}
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	3710      	adds	r7, #16
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	bd80      	pop	{r7, pc}
	...

0800dc34 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800dc34:	b480      	push	{r7}
 800dc36:	b085      	sub	sp, #20
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
 800dc3c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dc3e:	2300      	movs	r3, #0
 800dc40:	60fb      	str	r3, [r7, #12]
 800dc42:	e014      	b.n	800dc6e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800dc44:	4a0f      	ldr	r2, [pc, #60]	@ (800dc84 <vQueueAddToRegistry+0x50>)
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d10b      	bne.n	800dc68 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800dc50:	490c      	ldr	r1, [pc, #48]	@ (800dc84 <vQueueAddToRegistry+0x50>)
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	683a      	ldr	r2, [r7, #0]
 800dc56:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800dc5a:	4a0a      	ldr	r2, [pc, #40]	@ (800dc84 <vQueueAddToRegistry+0x50>)
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	00db      	lsls	r3, r3, #3
 800dc60:	4413      	add	r3, r2
 800dc62:	687a      	ldr	r2, [r7, #4]
 800dc64:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800dc66:	e006      	b.n	800dc76 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	3301      	adds	r3, #1
 800dc6c:	60fb      	str	r3, [r7, #12]
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	2b07      	cmp	r3, #7
 800dc72:	d9e7      	bls.n	800dc44 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800dc74:	bf00      	nop
 800dc76:	bf00      	nop
 800dc78:	3714      	adds	r7, #20
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc80:	4770      	bx	lr
 800dc82:	bf00      	nop
 800dc84:	24000b9c 	.word	0x24000b9c

0800dc88 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800dc88:	b480      	push	{r7}
 800dc8a:	b085      	sub	sp, #20
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dc90:	2300      	movs	r3, #0
 800dc92:	60fb      	str	r3, [r7, #12]
 800dc94:	e016      	b.n	800dcc4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800dc96:	4a10      	ldr	r2, [pc, #64]	@ (800dcd8 <vQueueUnregisterQueue+0x50>)
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	00db      	lsls	r3, r3, #3
 800dc9c:	4413      	add	r3, r2
 800dc9e:	685b      	ldr	r3, [r3, #4]
 800dca0:	687a      	ldr	r2, [r7, #4]
 800dca2:	429a      	cmp	r2, r3
 800dca4:	d10b      	bne.n	800dcbe <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800dca6:	4a0c      	ldr	r2, [pc, #48]	@ (800dcd8 <vQueueUnregisterQueue+0x50>)
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	2100      	movs	r1, #0
 800dcac:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800dcb0:	4a09      	ldr	r2, [pc, #36]	@ (800dcd8 <vQueueUnregisterQueue+0x50>)
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	00db      	lsls	r3, r3, #3
 800dcb6:	4413      	add	r3, r2
 800dcb8:	2200      	movs	r2, #0
 800dcba:	605a      	str	r2, [r3, #4]
				break;
 800dcbc:	e006      	b.n	800dccc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	3301      	adds	r3, #1
 800dcc2:	60fb      	str	r3, [r7, #12]
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	2b07      	cmp	r3, #7
 800dcc8:	d9e5      	bls.n	800dc96 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800dcca:	bf00      	nop
 800dccc:	bf00      	nop
 800dcce:	3714      	adds	r7, #20
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd6:	4770      	bx	lr
 800dcd8:	24000b9c 	.word	0x24000b9c

0800dcdc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b086      	sub	sp, #24
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	60f8      	str	r0, [r7, #12]
 800dce4:	60b9      	str	r1, [r7, #8]
 800dce6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800dcec:	f001 fe1c 	bl	800f928 <vPortEnterCritical>
 800dcf0:	697b      	ldr	r3, [r7, #20]
 800dcf2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dcf6:	b25b      	sxtb	r3, r3
 800dcf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcfc:	d103      	bne.n	800dd06 <vQueueWaitForMessageRestricted+0x2a>
 800dcfe:	697b      	ldr	r3, [r7, #20]
 800dd00:	2200      	movs	r2, #0
 800dd02:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dd06:	697b      	ldr	r3, [r7, #20]
 800dd08:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dd0c:	b25b      	sxtb	r3, r3
 800dd0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd12:	d103      	bne.n	800dd1c <vQueueWaitForMessageRestricted+0x40>
 800dd14:	697b      	ldr	r3, [r7, #20]
 800dd16:	2200      	movs	r2, #0
 800dd18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dd1c:	f001 fe36 	bl	800f98c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800dd20:	697b      	ldr	r3, [r7, #20]
 800dd22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d106      	bne.n	800dd36 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800dd28:	697b      	ldr	r3, [r7, #20]
 800dd2a:	3324      	adds	r3, #36	@ 0x24
 800dd2c:	687a      	ldr	r2, [r7, #4]
 800dd2e:	68b9      	ldr	r1, [r7, #8]
 800dd30:	4618      	mov	r0, r3
 800dd32:	f000 fd41 	bl	800e7b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800dd36:	6978      	ldr	r0, [r7, #20]
 800dd38:	f7ff fefb 	bl	800db32 <prvUnlockQueue>
	}
 800dd3c:	bf00      	nop
 800dd3e:	3718      	adds	r7, #24
 800dd40:	46bd      	mov	sp, r7
 800dd42:	bd80      	pop	{r7, pc}

0800dd44 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b08e      	sub	sp, #56	@ 0x38
 800dd48:	af04      	add	r7, sp, #16
 800dd4a:	60f8      	str	r0, [r7, #12]
 800dd4c:	60b9      	str	r1, [r7, #8]
 800dd4e:	607a      	str	r2, [r7, #4]
 800dd50:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800dd52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d10b      	bne.n	800dd70 <xTaskCreateStatic+0x2c>
	__asm volatile
 800dd58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd5c:	f383 8811 	msr	BASEPRI, r3
 800dd60:	f3bf 8f6f 	isb	sy
 800dd64:	f3bf 8f4f 	dsb	sy
 800dd68:	623b      	str	r3, [r7, #32]
}
 800dd6a:	bf00      	nop
 800dd6c:	bf00      	nop
 800dd6e:	e7fd      	b.n	800dd6c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800dd70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d10b      	bne.n	800dd8e <xTaskCreateStatic+0x4a>
	__asm volatile
 800dd76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd7a:	f383 8811 	msr	BASEPRI, r3
 800dd7e:	f3bf 8f6f 	isb	sy
 800dd82:	f3bf 8f4f 	dsb	sy
 800dd86:	61fb      	str	r3, [r7, #28]
}
 800dd88:	bf00      	nop
 800dd8a:	bf00      	nop
 800dd8c:	e7fd      	b.n	800dd8a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800dd8e:	23a8      	movs	r3, #168	@ 0xa8
 800dd90:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800dd92:	693b      	ldr	r3, [r7, #16]
 800dd94:	2ba8      	cmp	r3, #168	@ 0xa8
 800dd96:	d00b      	beq.n	800ddb0 <xTaskCreateStatic+0x6c>
	__asm volatile
 800dd98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd9c:	f383 8811 	msr	BASEPRI, r3
 800dda0:	f3bf 8f6f 	isb	sy
 800dda4:	f3bf 8f4f 	dsb	sy
 800dda8:	61bb      	str	r3, [r7, #24]
}
 800ddaa:	bf00      	nop
 800ddac:	bf00      	nop
 800ddae:	e7fd      	b.n	800ddac <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ddb0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ddb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d01e      	beq.n	800ddf6 <xTaskCreateStatic+0xb2>
 800ddb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d01b      	beq.n	800ddf6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ddbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddc0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ddc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddc4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ddc6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ddc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddca:	2202      	movs	r2, #2
 800ddcc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	9303      	str	r3, [sp, #12]
 800ddd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddd6:	9302      	str	r3, [sp, #8]
 800ddd8:	f107 0314 	add.w	r3, r7, #20
 800dddc:	9301      	str	r3, [sp, #4]
 800ddde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dde0:	9300      	str	r3, [sp, #0]
 800dde2:	683b      	ldr	r3, [r7, #0]
 800dde4:	687a      	ldr	r2, [r7, #4]
 800dde6:	68b9      	ldr	r1, [r7, #8]
 800dde8:	68f8      	ldr	r0, [r7, #12]
 800ddea:	f000 f851 	bl	800de90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ddee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ddf0:	f000 f8f6 	bl	800dfe0 <prvAddNewTaskToReadyList>
 800ddf4:	e001      	b.n	800ddfa <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ddfa:	697b      	ldr	r3, [r7, #20]
	}
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	3728      	adds	r7, #40	@ 0x28
 800de00:	46bd      	mov	sp, r7
 800de02:	bd80      	pop	{r7, pc}

0800de04 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800de04:	b580      	push	{r7, lr}
 800de06:	b08c      	sub	sp, #48	@ 0x30
 800de08:	af04      	add	r7, sp, #16
 800de0a:	60f8      	str	r0, [r7, #12]
 800de0c:	60b9      	str	r1, [r7, #8]
 800de0e:	603b      	str	r3, [r7, #0]
 800de10:	4613      	mov	r3, r2
 800de12:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800de14:	88fb      	ldrh	r3, [r7, #6]
 800de16:	009b      	lsls	r3, r3, #2
 800de18:	4618      	mov	r0, r3
 800de1a:	f001 ff8b 	bl	800fd34 <pvPortMalloc>
 800de1e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800de20:	697b      	ldr	r3, [r7, #20]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d00e      	beq.n	800de44 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800de26:	20a8      	movs	r0, #168	@ 0xa8
 800de28:	f001 ff84 	bl	800fd34 <pvPortMalloc>
 800de2c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800de2e:	69fb      	ldr	r3, [r7, #28]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d003      	beq.n	800de3c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800de34:	69fb      	ldr	r3, [r7, #28]
 800de36:	697a      	ldr	r2, [r7, #20]
 800de38:	631a      	str	r2, [r3, #48]	@ 0x30
 800de3a:	e005      	b.n	800de48 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800de3c:	6978      	ldr	r0, [r7, #20]
 800de3e:	f002 f847 	bl	800fed0 <vPortFree>
 800de42:	e001      	b.n	800de48 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800de44:	2300      	movs	r3, #0
 800de46:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800de48:	69fb      	ldr	r3, [r7, #28]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d017      	beq.n	800de7e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800de4e:	69fb      	ldr	r3, [r7, #28]
 800de50:	2200      	movs	r2, #0
 800de52:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800de56:	88fa      	ldrh	r2, [r7, #6]
 800de58:	2300      	movs	r3, #0
 800de5a:	9303      	str	r3, [sp, #12]
 800de5c:	69fb      	ldr	r3, [r7, #28]
 800de5e:	9302      	str	r3, [sp, #8]
 800de60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de62:	9301      	str	r3, [sp, #4]
 800de64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de66:	9300      	str	r3, [sp, #0]
 800de68:	683b      	ldr	r3, [r7, #0]
 800de6a:	68b9      	ldr	r1, [r7, #8]
 800de6c:	68f8      	ldr	r0, [r7, #12]
 800de6e:	f000 f80f 	bl	800de90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800de72:	69f8      	ldr	r0, [r7, #28]
 800de74:	f000 f8b4 	bl	800dfe0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800de78:	2301      	movs	r3, #1
 800de7a:	61bb      	str	r3, [r7, #24]
 800de7c:	e002      	b.n	800de84 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800de7e:	f04f 33ff 	mov.w	r3, #4294967295
 800de82:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800de84:	69bb      	ldr	r3, [r7, #24]
	}
 800de86:	4618      	mov	r0, r3
 800de88:	3720      	adds	r7, #32
 800de8a:	46bd      	mov	sp, r7
 800de8c:	bd80      	pop	{r7, pc}
	...

0800de90 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800de90:	b580      	push	{r7, lr}
 800de92:	b088      	sub	sp, #32
 800de94:	af00      	add	r7, sp, #0
 800de96:	60f8      	str	r0, [r7, #12]
 800de98:	60b9      	str	r1, [r7, #8]
 800de9a:	607a      	str	r2, [r7, #4]
 800de9c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800de9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dea0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	009b      	lsls	r3, r3, #2
 800dea6:	461a      	mov	r2, r3
 800dea8:	21a5      	movs	r1, #165	@ 0xa5
 800deaa:	f003 fab9 	bl	8011420 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800deae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800deb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800deb2:	6879      	ldr	r1, [r7, #4]
 800deb4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800deb8:	440b      	add	r3, r1
 800deba:	009b      	lsls	r3, r3, #2
 800debc:	4413      	add	r3, r2
 800debe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dec0:	69bb      	ldr	r3, [r7, #24]
 800dec2:	f023 0307 	bic.w	r3, r3, #7
 800dec6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800dec8:	69bb      	ldr	r3, [r7, #24]
 800deca:	f003 0307 	and.w	r3, r3, #7
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d00b      	beq.n	800deea <prvInitialiseNewTask+0x5a>
	__asm volatile
 800ded2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ded6:	f383 8811 	msr	BASEPRI, r3
 800deda:	f3bf 8f6f 	isb	sy
 800dede:	f3bf 8f4f 	dsb	sy
 800dee2:	617b      	str	r3, [r7, #20]
}
 800dee4:	bf00      	nop
 800dee6:	bf00      	nop
 800dee8:	e7fd      	b.n	800dee6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800deea:	68bb      	ldr	r3, [r7, #8]
 800deec:	2b00      	cmp	r3, #0
 800deee:	d01f      	beq.n	800df30 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800def0:	2300      	movs	r3, #0
 800def2:	61fb      	str	r3, [r7, #28]
 800def4:	e012      	b.n	800df1c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800def6:	68ba      	ldr	r2, [r7, #8]
 800def8:	69fb      	ldr	r3, [r7, #28]
 800defa:	4413      	add	r3, r2
 800defc:	7819      	ldrb	r1, [r3, #0]
 800defe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800df00:	69fb      	ldr	r3, [r7, #28]
 800df02:	4413      	add	r3, r2
 800df04:	3334      	adds	r3, #52	@ 0x34
 800df06:	460a      	mov	r2, r1
 800df08:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800df0a:	68ba      	ldr	r2, [r7, #8]
 800df0c:	69fb      	ldr	r3, [r7, #28]
 800df0e:	4413      	add	r3, r2
 800df10:	781b      	ldrb	r3, [r3, #0]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d006      	beq.n	800df24 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800df16:	69fb      	ldr	r3, [r7, #28]
 800df18:	3301      	adds	r3, #1
 800df1a:	61fb      	str	r3, [r7, #28]
 800df1c:	69fb      	ldr	r3, [r7, #28]
 800df1e:	2b0f      	cmp	r3, #15
 800df20:	d9e9      	bls.n	800def6 <prvInitialiseNewTask+0x66>
 800df22:	e000      	b.n	800df26 <prvInitialiseNewTask+0x96>
			{
				break;
 800df24:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800df26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df28:	2200      	movs	r2, #0
 800df2a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800df2e:	e003      	b.n	800df38 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800df30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df32:	2200      	movs	r2, #0
 800df34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800df38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df3a:	2b37      	cmp	r3, #55	@ 0x37
 800df3c:	d901      	bls.n	800df42 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800df3e:	2337      	movs	r3, #55	@ 0x37
 800df40:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800df42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800df46:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800df48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800df4c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800df4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df50:	2200      	movs	r2, #0
 800df52:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800df54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df56:	3304      	adds	r3, #4
 800df58:	4618      	mov	r0, r3
 800df5a:	f7fe fecf 	bl	800ccfc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800df5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df60:	3318      	adds	r3, #24
 800df62:	4618      	mov	r0, r3
 800df64:	f7fe feca 	bl	800ccfc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800df68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800df6c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df70:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800df74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df76:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800df78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800df7c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800df7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df80:	2200      	movs	r2, #0
 800df82:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800df86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df88:	2200      	movs	r2, #0
 800df8a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800df8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df90:	3354      	adds	r3, #84	@ 0x54
 800df92:	224c      	movs	r2, #76	@ 0x4c
 800df94:	2100      	movs	r1, #0
 800df96:	4618      	mov	r0, r3
 800df98:	f003 fa42 	bl	8011420 <memset>
 800df9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df9e:	4a0d      	ldr	r2, [pc, #52]	@ (800dfd4 <prvInitialiseNewTask+0x144>)
 800dfa0:	659a      	str	r2, [r3, #88]	@ 0x58
 800dfa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfa4:	4a0c      	ldr	r2, [pc, #48]	@ (800dfd8 <prvInitialiseNewTask+0x148>)
 800dfa6:	65da      	str	r2, [r3, #92]	@ 0x5c
 800dfa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfaa:	4a0c      	ldr	r2, [pc, #48]	@ (800dfdc <prvInitialiseNewTask+0x14c>)
 800dfac:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dfae:	683a      	ldr	r2, [r7, #0]
 800dfb0:	68f9      	ldr	r1, [r7, #12]
 800dfb2:	69b8      	ldr	r0, [r7, #24]
 800dfb4:	f001 fb86 	bl	800f6c4 <pxPortInitialiseStack>
 800dfb8:	4602      	mov	r2, r0
 800dfba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfbc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800dfbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d002      	beq.n	800dfca <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dfc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dfc8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dfca:	bf00      	nop
 800dfcc:	3720      	adds	r7, #32
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	bd80      	pop	{r7, pc}
 800dfd2:	bf00      	nop
 800dfd4:	24004e48 	.word	0x24004e48
 800dfd8:	24004eb0 	.word	0x24004eb0
 800dfdc:	24004f18 	.word	0x24004f18

0800dfe0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b082      	sub	sp, #8
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800dfe8:	f001 fc9e 	bl	800f928 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dfec:	4b2d      	ldr	r3, [pc, #180]	@ (800e0a4 <prvAddNewTaskToReadyList+0xc4>)
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	3301      	adds	r3, #1
 800dff2:	4a2c      	ldr	r2, [pc, #176]	@ (800e0a4 <prvAddNewTaskToReadyList+0xc4>)
 800dff4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dff6:	4b2c      	ldr	r3, [pc, #176]	@ (800e0a8 <prvAddNewTaskToReadyList+0xc8>)
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d109      	bne.n	800e012 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800dffe:	4a2a      	ldr	r2, [pc, #168]	@ (800e0a8 <prvAddNewTaskToReadyList+0xc8>)
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e004:	4b27      	ldr	r3, [pc, #156]	@ (800e0a4 <prvAddNewTaskToReadyList+0xc4>)
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	2b01      	cmp	r3, #1
 800e00a:	d110      	bne.n	800e02e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e00c:	f000 fd5a 	bl	800eac4 <prvInitialiseTaskLists>
 800e010:	e00d      	b.n	800e02e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e012:	4b26      	ldr	r3, [pc, #152]	@ (800e0ac <prvAddNewTaskToReadyList+0xcc>)
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d109      	bne.n	800e02e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e01a:	4b23      	ldr	r3, [pc, #140]	@ (800e0a8 <prvAddNewTaskToReadyList+0xc8>)
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e024:	429a      	cmp	r2, r3
 800e026:	d802      	bhi.n	800e02e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e028:	4a1f      	ldr	r2, [pc, #124]	@ (800e0a8 <prvAddNewTaskToReadyList+0xc8>)
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e02e:	4b20      	ldr	r3, [pc, #128]	@ (800e0b0 <prvAddNewTaskToReadyList+0xd0>)
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	3301      	adds	r3, #1
 800e034:	4a1e      	ldr	r2, [pc, #120]	@ (800e0b0 <prvAddNewTaskToReadyList+0xd0>)
 800e036:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e038:	4b1d      	ldr	r3, [pc, #116]	@ (800e0b0 <prvAddNewTaskToReadyList+0xd0>)
 800e03a:	681a      	ldr	r2, [r3, #0]
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e044:	4b1b      	ldr	r3, [pc, #108]	@ (800e0b4 <prvAddNewTaskToReadyList+0xd4>)
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	429a      	cmp	r2, r3
 800e04a:	d903      	bls.n	800e054 <prvAddNewTaskToReadyList+0x74>
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e050:	4a18      	ldr	r2, [pc, #96]	@ (800e0b4 <prvAddNewTaskToReadyList+0xd4>)
 800e052:	6013      	str	r3, [r2, #0]
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e058:	4613      	mov	r3, r2
 800e05a:	009b      	lsls	r3, r3, #2
 800e05c:	4413      	add	r3, r2
 800e05e:	009b      	lsls	r3, r3, #2
 800e060:	4a15      	ldr	r2, [pc, #84]	@ (800e0b8 <prvAddNewTaskToReadyList+0xd8>)
 800e062:	441a      	add	r2, r3
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	3304      	adds	r3, #4
 800e068:	4619      	mov	r1, r3
 800e06a:	4610      	mov	r0, r2
 800e06c:	f7fe fe53 	bl	800cd16 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e070:	f001 fc8c 	bl	800f98c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e074:	4b0d      	ldr	r3, [pc, #52]	@ (800e0ac <prvAddNewTaskToReadyList+0xcc>)
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d00e      	beq.n	800e09a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e07c:	4b0a      	ldr	r3, [pc, #40]	@ (800e0a8 <prvAddNewTaskToReadyList+0xc8>)
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e086:	429a      	cmp	r2, r3
 800e088:	d207      	bcs.n	800e09a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e08a:	4b0c      	ldr	r3, [pc, #48]	@ (800e0bc <prvAddNewTaskToReadyList+0xdc>)
 800e08c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e090:	601a      	str	r2, [r3, #0]
 800e092:	f3bf 8f4f 	dsb	sy
 800e096:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e09a:	bf00      	nop
 800e09c:	3708      	adds	r7, #8
 800e09e:	46bd      	mov	sp, r7
 800e0a0:	bd80      	pop	{r7, pc}
 800e0a2:	bf00      	nop
 800e0a4:	240010b0 	.word	0x240010b0
 800e0a8:	24000bdc 	.word	0x24000bdc
 800e0ac:	240010bc 	.word	0x240010bc
 800e0b0:	240010cc 	.word	0x240010cc
 800e0b4:	240010b8 	.word	0x240010b8
 800e0b8:	24000be0 	.word	0x24000be0
 800e0bc:	e000ed04 	.word	0xe000ed04

0800e0c0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b084      	sub	sp, #16
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800e0c8:	f001 fc2e 	bl	800f928 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d102      	bne.n	800e0d8 <vTaskDelete+0x18>
 800e0d2:	4b2d      	ldr	r3, [pc, #180]	@ (800e188 <vTaskDelete+0xc8>)
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	e000      	b.n	800e0da <vTaskDelete+0x1a>
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	3304      	adds	r3, #4
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	f7fe fe75 	bl	800cdd0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d004      	beq.n	800e0f8 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	3318      	adds	r3, #24
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	f7fe fe6c 	bl	800cdd0 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800e0f8:	4b24      	ldr	r3, [pc, #144]	@ (800e18c <vTaskDelete+0xcc>)
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	3301      	adds	r3, #1
 800e0fe:	4a23      	ldr	r2, [pc, #140]	@ (800e18c <vTaskDelete+0xcc>)
 800e100:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800e102:	4b21      	ldr	r3, [pc, #132]	@ (800e188 <vTaskDelete+0xc8>)
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	68fa      	ldr	r2, [r7, #12]
 800e108:	429a      	cmp	r2, r3
 800e10a:	d10b      	bne.n	800e124 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	3304      	adds	r3, #4
 800e110:	4619      	mov	r1, r3
 800e112:	481f      	ldr	r0, [pc, #124]	@ (800e190 <vTaskDelete+0xd0>)
 800e114:	f7fe fdff 	bl	800cd16 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800e118:	4b1e      	ldr	r3, [pc, #120]	@ (800e194 <vTaskDelete+0xd4>)
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	3301      	adds	r3, #1
 800e11e:	4a1d      	ldr	r2, [pc, #116]	@ (800e194 <vTaskDelete+0xd4>)
 800e120:	6013      	str	r3, [r2, #0]
 800e122:	e009      	b.n	800e138 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800e124:	4b1c      	ldr	r3, [pc, #112]	@ (800e198 <vTaskDelete+0xd8>)
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	3b01      	subs	r3, #1
 800e12a:	4a1b      	ldr	r2, [pc, #108]	@ (800e198 <vTaskDelete+0xd8>)
 800e12c:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800e12e:	68f8      	ldr	r0, [r7, #12]
 800e130:	f000 fd36 	bl	800eba0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800e134:	f000 fd6a 	bl	800ec0c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800e138:	f001 fc28 	bl	800f98c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800e13c:	4b17      	ldr	r3, [pc, #92]	@ (800e19c <vTaskDelete+0xdc>)
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d01c      	beq.n	800e17e <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 800e144:	4b10      	ldr	r3, [pc, #64]	@ (800e188 <vTaskDelete+0xc8>)
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	68fa      	ldr	r2, [r7, #12]
 800e14a:	429a      	cmp	r2, r3
 800e14c:	d117      	bne.n	800e17e <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800e14e:	4b14      	ldr	r3, [pc, #80]	@ (800e1a0 <vTaskDelete+0xe0>)
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d00b      	beq.n	800e16e <vTaskDelete+0xae>
	__asm volatile
 800e156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e15a:	f383 8811 	msr	BASEPRI, r3
 800e15e:	f3bf 8f6f 	isb	sy
 800e162:	f3bf 8f4f 	dsb	sy
 800e166:	60bb      	str	r3, [r7, #8]
}
 800e168:	bf00      	nop
 800e16a:	bf00      	nop
 800e16c:	e7fd      	b.n	800e16a <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800e16e:	4b0d      	ldr	r3, [pc, #52]	@ (800e1a4 <vTaskDelete+0xe4>)
 800e170:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e174:	601a      	str	r2, [r3, #0]
 800e176:	f3bf 8f4f 	dsb	sy
 800e17a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e17e:	bf00      	nop
 800e180:	3710      	adds	r7, #16
 800e182:	46bd      	mov	sp, r7
 800e184:	bd80      	pop	{r7, pc}
 800e186:	bf00      	nop
 800e188:	24000bdc 	.word	0x24000bdc
 800e18c:	240010cc 	.word	0x240010cc
 800e190:	24001084 	.word	0x24001084
 800e194:	24001098 	.word	0x24001098
 800e198:	240010b0 	.word	0x240010b0
 800e19c:	240010bc 	.word	0x240010bc
 800e1a0:	240010d8 	.word	0x240010d8
 800e1a4:	e000ed04 	.word	0xe000ed04

0800e1a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b084      	sub	sp, #16
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d018      	beq.n	800e1ec <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e1ba:	4b14      	ldr	r3, [pc, #80]	@ (800e20c <vTaskDelay+0x64>)
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d00b      	beq.n	800e1da <vTaskDelay+0x32>
	__asm volatile
 800e1c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1c6:	f383 8811 	msr	BASEPRI, r3
 800e1ca:	f3bf 8f6f 	isb	sy
 800e1ce:	f3bf 8f4f 	dsb	sy
 800e1d2:	60bb      	str	r3, [r7, #8]
}
 800e1d4:	bf00      	nop
 800e1d6:	bf00      	nop
 800e1d8:	e7fd      	b.n	800e1d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e1da:	f000 f88b 	bl	800e2f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e1de:	2100      	movs	r1, #0
 800e1e0:	6878      	ldr	r0, [r7, #4]
 800e1e2:	f000 fec1 	bl	800ef68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e1e6:	f000 f8cb 	bl	800e380 <xTaskResumeAll>
 800e1ea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d107      	bne.n	800e202 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800e1f2:	4b07      	ldr	r3, [pc, #28]	@ (800e210 <vTaskDelay+0x68>)
 800e1f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e1f8:	601a      	str	r2, [r3, #0]
 800e1fa:	f3bf 8f4f 	dsb	sy
 800e1fe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e202:	bf00      	nop
 800e204:	3710      	adds	r7, #16
 800e206:	46bd      	mov	sp, r7
 800e208:	bd80      	pop	{r7, pc}
 800e20a:	bf00      	nop
 800e20c:	240010d8 	.word	0x240010d8
 800e210:	e000ed04 	.word	0xe000ed04

0800e214 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e214:	b580      	push	{r7, lr}
 800e216:	b08a      	sub	sp, #40	@ 0x28
 800e218:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e21a:	2300      	movs	r3, #0
 800e21c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e21e:	2300      	movs	r3, #0
 800e220:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e222:	463a      	mov	r2, r7
 800e224:	1d39      	adds	r1, r7, #4
 800e226:	f107 0308 	add.w	r3, r7, #8
 800e22a:	4618      	mov	r0, r3
 800e22c:	f7fe fd12 	bl	800cc54 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e230:	6839      	ldr	r1, [r7, #0]
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	68ba      	ldr	r2, [r7, #8]
 800e236:	9202      	str	r2, [sp, #8]
 800e238:	9301      	str	r3, [sp, #4]
 800e23a:	2300      	movs	r3, #0
 800e23c:	9300      	str	r3, [sp, #0]
 800e23e:	2300      	movs	r3, #0
 800e240:	460a      	mov	r2, r1
 800e242:	4924      	ldr	r1, [pc, #144]	@ (800e2d4 <vTaskStartScheduler+0xc0>)
 800e244:	4824      	ldr	r0, [pc, #144]	@ (800e2d8 <vTaskStartScheduler+0xc4>)
 800e246:	f7ff fd7d 	bl	800dd44 <xTaskCreateStatic>
 800e24a:	4603      	mov	r3, r0
 800e24c:	4a23      	ldr	r2, [pc, #140]	@ (800e2dc <vTaskStartScheduler+0xc8>)
 800e24e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e250:	4b22      	ldr	r3, [pc, #136]	@ (800e2dc <vTaskStartScheduler+0xc8>)
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d002      	beq.n	800e25e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e258:	2301      	movs	r3, #1
 800e25a:	617b      	str	r3, [r7, #20]
 800e25c:	e001      	b.n	800e262 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e25e:	2300      	movs	r3, #0
 800e260:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e262:	697b      	ldr	r3, [r7, #20]
 800e264:	2b01      	cmp	r3, #1
 800e266:	d102      	bne.n	800e26e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e268:	f000 fed2 	bl	800f010 <xTimerCreateTimerTask>
 800e26c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e26e:	697b      	ldr	r3, [r7, #20]
 800e270:	2b01      	cmp	r3, #1
 800e272:	d11b      	bne.n	800e2ac <vTaskStartScheduler+0x98>
	__asm volatile
 800e274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e278:	f383 8811 	msr	BASEPRI, r3
 800e27c:	f3bf 8f6f 	isb	sy
 800e280:	f3bf 8f4f 	dsb	sy
 800e284:	613b      	str	r3, [r7, #16]
}
 800e286:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e288:	4b15      	ldr	r3, [pc, #84]	@ (800e2e0 <vTaskStartScheduler+0xcc>)
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	3354      	adds	r3, #84	@ 0x54
 800e28e:	4a15      	ldr	r2, [pc, #84]	@ (800e2e4 <vTaskStartScheduler+0xd0>)
 800e290:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e292:	4b15      	ldr	r3, [pc, #84]	@ (800e2e8 <vTaskStartScheduler+0xd4>)
 800e294:	f04f 32ff 	mov.w	r2, #4294967295
 800e298:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e29a:	4b14      	ldr	r3, [pc, #80]	@ (800e2ec <vTaskStartScheduler+0xd8>)
 800e29c:	2201      	movs	r2, #1
 800e29e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e2a0:	4b13      	ldr	r3, [pc, #76]	@ (800e2f0 <vTaskStartScheduler+0xdc>)
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e2a6:	f001 fa9b 	bl	800f7e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e2aa:	e00f      	b.n	800e2cc <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e2ac:	697b      	ldr	r3, [r7, #20]
 800e2ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2b2:	d10b      	bne.n	800e2cc <vTaskStartScheduler+0xb8>
	__asm volatile
 800e2b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2b8:	f383 8811 	msr	BASEPRI, r3
 800e2bc:	f3bf 8f6f 	isb	sy
 800e2c0:	f3bf 8f4f 	dsb	sy
 800e2c4:	60fb      	str	r3, [r7, #12]
}
 800e2c6:	bf00      	nop
 800e2c8:	bf00      	nop
 800e2ca:	e7fd      	b.n	800e2c8 <vTaskStartScheduler+0xb4>
}
 800e2cc:	bf00      	nop
 800e2ce:	3718      	adds	r7, #24
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	bd80      	pop	{r7, pc}
 800e2d4:	08014eec 	.word	0x08014eec
 800e2d8:	0800e9e9 	.word	0x0800e9e9
 800e2dc:	240010d4 	.word	0x240010d4
 800e2e0:	24000bdc 	.word	0x24000bdc
 800e2e4:	24000020 	.word	0x24000020
 800e2e8:	240010d0 	.word	0x240010d0
 800e2ec:	240010bc 	.word	0x240010bc
 800e2f0:	240010b4 	.word	0x240010b4

0800e2f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e2f4:	b480      	push	{r7}
 800e2f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e2f8:	4b04      	ldr	r3, [pc, #16]	@ (800e30c <vTaskSuspendAll+0x18>)
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	3301      	adds	r3, #1
 800e2fe:	4a03      	ldr	r2, [pc, #12]	@ (800e30c <vTaskSuspendAll+0x18>)
 800e300:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e302:	bf00      	nop
 800e304:	46bd      	mov	sp, r7
 800e306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30a:	4770      	bx	lr
 800e30c:	240010d8 	.word	0x240010d8

0800e310 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 800e310:	b480      	push	{r7}
 800e312:	b083      	sub	sp, #12
 800e314:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800e316:	2300      	movs	r3, #0
 800e318:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800e31a:	4b14      	ldr	r3, [pc, #80]	@ (800e36c <prvGetExpectedIdleTime+0x5c>)
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d001      	beq.n	800e326 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800e322:	2301      	movs	r3, #1
 800e324:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800e326:	4b12      	ldr	r3, [pc, #72]	@ (800e370 <prvGetExpectedIdleTime+0x60>)
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d002      	beq.n	800e336 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 800e330:	2300      	movs	r3, #0
 800e332:	607b      	str	r3, [r7, #4]
 800e334:	e012      	b.n	800e35c <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800e336:	4b0f      	ldr	r3, [pc, #60]	@ (800e374 <prvGetExpectedIdleTime+0x64>)
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	2b01      	cmp	r3, #1
 800e33c:	d902      	bls.n	800e344 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800e33e:	2300      	movs	r3, #0
 800e340:	607b      	str	r3, [r7, #4]
 800e342:	e00b      	b.n	800e35c <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800e344:	683b      	ldr	r3, [r7, #0]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d002      	beq.n	800e350 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800e34a:	2300      	movs	r3, #0
 800e34c:	607b      	str	r3, [r7, #4]
 800e34e:	e005      	b.n	800e35c <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800e350:	4b09      	ldr	r3, [pc, #36]	@ (800e378 <prvGetExpectedIdleTime+0x68>)
 800e352:	681a      	ldr	r2, [r3, #0]
 800e354:	4b09      	ldr	r3, [pc, #36]	@ (800e37c <prvGetExpectedIdleTime+0x6c>)
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	1ad3      	subs	r3, r2, r3
 800e35a:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 800e35c:	687b      	ldr	r3, [r7, #4]
	}
 800e35e:	4618      	mov	r0, r3
 800e360:	370c      	adds	r7, #12
 800e362:	46bd      	mov	sp, r7
 800e364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e368:	4770      	bx	lr
 800e36a:	bf00      	nop
 800e36c:	240010b8 	.word	0x240010b8
 800e370:	24000bdc 	.word	0x24000bdc
 800e374:	24000be0 	.word	0x24000be0
 800e378:	240010d0 	.word	0x240010d0
 800e37c:	240010b4 	.word	0x240010b4

0800e380 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e380:	b580      	push	{r7, lr}
 800e382:	b084      	sub	sp, #16
 800e384:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e386:	2300      	movs	r3, #0
 800e388:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e38a:	2300      	movs	r3, #0
 800e38c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e38e:	4b42      	ldr	r3, [pc, #264]	@ (800e498 <xTaskResumeAll+0x118>)
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	2b00      	cmp	r3, #0
 800e394:	d10b      	bne.n	800e3ae <xTaskResumeAll+0x2e>
	__asm volatile
 800e396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e39a:	f383 8811 	msr	BASEPRI, r3
 800e39e:	f3bf 8f6f 	isb	sy
 800e3a2:	f3bf 8f4f 	dsb	sy
 800e3a6:	603b      	str	r3, [r7, #0]
}
 800e3a8:	bf00      	nop
 800e3aa:	bf00      	nop
 800e3ac:	e7fd      	b.n	800e3aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e3ae:	f001 fabb 	bl	800f928 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e3b2:	4b39      	ldr	r3, [pc, #228]	@ (800e498 <xTaskResumeAll+0x118>)
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	3b01      	subs	r3, #1
 800e3b8:	4a37      	ldr	r2, [pc, #220]	@ (800e498 <xTaskResumeAll+0x118>)
 800e3ba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e3bc:	4b36      	ldr	r3, [pc, #216]	@ (800e498 <xTaskResumeAll+0x118>)
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d162      	bne.n	800e48a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e3c4:	4b35      	ldr	r3, [pc, #212]	@ (800e49c <xTaskResumeAll+0x11c>)
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d05e      	beq.n	800e48a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e3cc:	e02f      	b.n	800e42e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3ce:	4b34      	ldr	r3, [pc, #208]	@ (800e4a0 <xTaskResumeAll+0x120>)
 800e3d0:	68db      	ldr	r3, [r3, #12]
 800e3d2:	68db      	ldr	r3, [r3, #12]
 800e3d4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	3318      	adds	r3, #24
 800e3da:	4618      	mov	r0, r3
 800e3dc:	f7fe fcf8 	bl	800cdd0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	3304      	adds	r3, #4
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	f7fe fcf3 	bl	800cdd0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e3ee:	4b2d      	ldr	r3, [pc, #180]	@ (800e4a4 <xTaskResumeAll+0x124>)
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	429a      	cmp	r2, r3
 800e3f4:	d903      	bls.n	800e3fe <xTaskResumeAll+0x7e>
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3fa:	4a2a      	ldr	r2, [pc, #168]	@ (800e4a4 <xTaskResumeAll+0x124>)
 800e3fc:	6013      	str	r3, [r2, #0]
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e402:	4613      	mov	r3, r2
 800e404:	009b      	lsls	r3, r3, #2
 800e406:	4413      	add	r3, r2
 800e408:	009b      	lsls	r3, r3, #2
 800e40a:	4a27      	ldr	r2, [pc, #156]	@ (800e4a8 <xTaskResumeAll+0x128>)
 800e40c:	441a      	add	r2, r3
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	3304      	adds	r3, #4
 800e412:	4619      	mov	r1, r3
 800e414:	4610      	mov	r0, r2
 800e416:	f7fe fc7e 	bl	800cd16 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e41e:	4b23      	ldr	r3, [pc, #140]	@ (800e4ac <xTaskResumeAll+0x12c>)
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e424:	429a      	cmp	r2, r3
 800e426:	d302      	bcc.n	800e42e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e428:	4b21      	ldr	r3, [pc, #132]	@ (800e4b0 <xTaskResumeAll+0x130>)
 800e42a:	2201      	movs	r2, #1
 800e42c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e42e:	4b1c      	ldr	r3, [pc, #112]	@ (800e4a0 <xTaskResumeAll+0x120>)
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d1cb      	bne.n	800e3ce <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d001      	beq.n	800e440 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e43c:	f000 fbe6 	bl	800ec0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e440:	4b1c      	ldr	r3, [pc, #112]	@ (800e4b4 <xTaskResumeAll+0x134>)
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d010      	beq.n	800e46e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e44c:	f000 f86e 	bl	800e52c <xTaskIncrementTick>
 800e450:	4603      	mov	r3, r0
 800e452:	2b00      	cmp	r3, #0
 800e454:	d002      	beq.n	800e45c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e456:	4b16      	ldr	r3, [pc, #88]	@ (800e4b0 <xTaskResumeAll+0x130>)
 800e458:	2201      	movs	r2, #1
 800e45a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	3b01      	subs	r3, #1
 800e460:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d1f1      	bne.n	800e44c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800e468:	4b12      	ldr	r3, [pc, #72]	@ (800e4b4 <xTaskResumeAll+0x134>)
 800e46a:	2200      	movs	r2, #0
 800e46c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e46e:	4b10      	ldr	r3, [pc, #64]	@ (800e4b0 <xTaskResumeAll+0x130>)
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	2b00      	cmp	r3, #0
 800e474:	d009      	beq.n	800e48a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e476:	2301      	movs	r3, #1
 800e478:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e47a:	4b0f      	ldr	r3, [pc, #60]	@ (800e4b8 <xTaskResumeAll+0x138>)
 800e47c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e480:	601a      	str	r2, [r3, #0]
 800e482:	f3bf 8f4f 	dsb	sy
 800e486:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e48a:	f001 fa7f 	bl	800f98c <vPortExitCritical>

	return xAlreadyYielded;
 800e48e:	68bb      	ldr	r3, [r7, #8]
}
 800e490:	4618      	mov	r0, r3
 800e492:	3710      	adds	r7, #16
 800e494:	46bd      	mov	sp, r7
 800e496:	bd80      	pop	{r7, pc}
 800e498:	240010d8 	.word	0x240010d8
 800e49c:	240010b0 	.word	0x240010b0
 800e4a0:	24001070 	.word	0x24001070
 800e4a4:	240010b8 	.word	0x240010b8
 800e4a8:	24000be0 	.word	0x24000be0
 800e4ac:	24000bdc 	.word	0x24000bdc
 800e4b0:	240010c4 	.word	0x240010c4
 800e4b4:	240010c0 	.word	0x240010c0
 800e4b8:	e000ed04 	.word	0xe000ed04

0800e4bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e4bc:	b480      	push	{r7}
 800e4be:	b083      	sub	sp, #12
 800e4c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e4c2:	4b05      	ldr	r3, [pc, #20]	@ (800e4d8 <xTaskGetTickCount+0x1c>)
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e4c8:	687b      	ldr	r3, [r7, #4]
}
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	370c      	adds	r7, #12
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d4:	4770      	bx	lr
 800e4d6:	bf00      	nop
 800e4d8:	240010b4 	.word	0x240010b4

0800e4dc <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 800e4dc:	b480      	push	{r7}
 800e4de:	b085      	sub	sp, #20
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 800e4e4:	4b0f      	ldr	r3, [pc, #60]	@ (800e524 <vTaskStepTick+0x48>)
 800e4e6:	681a      	ldr	r2, [r3, #0]
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	441a      	add	r2, r3
 800e4ec:	4b0e      	ldr	r3, [pc, #56]	@ (800e528 <vTaskStepTick+0x4c>)
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	429a      	cmp	r2, r3
 800e4f2:	d90b      	bls.n	800e50c <vTaskStepTick+0x30>
	__asm volatile
 800e4f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4f8:	f383 8811 	msr	BASEPRI, r3
 800e4fc:	f3bf 8f6f 	isb	sy
 800e500:	f3bf 8f4f 	dsb	sy
 800e504:	60fb      	str	r3, [r7, #12]
}
 800e506:	bf00      	nop
 800e508:	bf00      	nop
 800e50a:	e7fd      	b.n	800e508 <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 800e50c:	4b05      	ldr	r3, [pc, #20]	@ (800e524 <vTaskStepTick+0x48>)
 800e50e:	681a      	ldr	r2, [r3, #0]
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	4413      	add	r3, r2
 800e514:	4a03      	ldr	r2, [pc, #12]	@ (800e524 <vTaskStepTick+0x48>)
 800e516:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 800e518:	bf00      	nop
 800e51a:	3714      	adds	r7, #20
 800e51c:	46bd      	mov	sp, r7
 800e51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e522:	4770      	bx	lr
 800e524:	240010b4 	.word	0x240010b4
 800e528:	240010d0 	.word	0x240010d0

0800e52c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b086      	sub	sp, #24
 800e530:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e532:	2300      	movs	r3, #0
 800e534:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e536:	4b4f      	ldr	r3, [pc, #316]	@ (800e674 <xTaskIncrementTick+0x148>)
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	f040 8090 	bne.w	800e660 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e540:	4b4d      	ldr	r3, [pc, #308]	@ (800e678 <xTaskIncrementTick+0x14c>)
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	3301      	adds	r3, #1
 800e546:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e548:	4a4b      	ldr	r2, [pc, #300]	@ (800e678 <xTaskIncrementTick+0x14c>)
 800e54a:	693b      	ldr	r3, [r7, #16]
 800e54c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e54e:	693b      	ldr	r3, [r7, #16]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d121      	bne.n	800e598 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e554:	4b49      	ldr	r3, [pc, #292]	@ (800e67c <xTaskIncrementTick+0x150>)
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d00b      	beq.n	800e576 <xTaskIncrementTick+0x4a>
	__asm volatile
 800e55e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e562:	f383 8811 	msr	BASEPRI, r3
 800e566:	f3bf 8f6f 	isb	sy
 800e56a:	f3bf 8f4f 	dsb	sy
 800e56e:	603b      	str	r3, [r7, #0]
}
 800e570:	bf00      	nop
 800e572:	bf00      	nop
 800e574:	e7fd      	b.n	800e572 <xTaskIncrementTick+0x46>
 800e576:	4b41      	ldr	r3, [pc, #260]	@ (800e67c <xTaskIncrementTick+0x150>)
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	60fb      	str	r3, [r7, #12]
 800e57c:	4b40      	ldr	r3, [pc, #256]	@ (800e680 <xTaskIncrementTick+0x154>)
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	4a3e      	ldr	r2, [pc, #248]	@ (800e67c <xTaskIncrementTick+0x150>)
 800e582:	6013      	str	r3, [r2, #0]
 800e584:	4a3e      	ldr	r2, [pc, #248]	@ (800e680 <xTaskIncrementTick+0x154>)
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	6013      	str	r3, [r2, #0]
 800e58a:	4b3e      	ldr	r3, [pc, #248]	@ (800e684 <xTaskIncrementTick+0x158>)
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	3301      	adds	r3, #1
 800e590:	4a3c      	ldr	r2, [pc, #240]	@ (800e684 <xTaskIncrementTick+0x158>)
 800e592:	6013      	str	r3, [r2, #0]
 800e594:	f000 fb3a 	bl	800ec0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e598:	4b3b      	ldr	r3, [pc, #236]	@ (800e688 <xTaskIncrementTick+0x15c>)
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	693a      	ldr	r2, [r7, #16]
 800e59e:	429a      	cmp	r2, r3
 800e5a0:	d349      	bcc.n	800e636 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e5a2:	4b36      	ldr	r3, [pc, #216]	@ (800e67c <xTaskIncrementTick+0x150>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d104      	bne.n	800e5b6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e5ac:	4b36      	ldr	r3, [pc, #216]	@ (800e688 <xTaskIncrementTick+0x15c>)
 800e5ae:	f04f 32ff 	mov.w	r2, #4294967295
 800e5b2:	601a      	str	r2, [r3, #0]
					break;
 800e5b4:	e03f      	b.n	800e636 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e5b6:	4b31      	ldr	r3, [pc, #196]	@ (800e67c <xTaskIncrementTick+0x150>)
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	68db      	ldr	r3, [r3, #12]
 800e5bc:	68db      	ldr	r3, [r3, #12]
 800e5be:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e5c0:	68bb      	ldr	r3, [r7, #8]
 800e5c2:	685b      	ldr	r3, [r3, #4]
 800e5c4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e5c6:	693a      	ldr	r2, [r7, #16]
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	429a      	cmp	r2, r3
 800e5cc:	d203      	bcs.n	800e5d6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e5ce:	4a2e      	ldr	r2, [pc, #184]	@ (800e688 <xTaskIncrementTick+0x15c>)
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e5d4:	e02f      	b.n	800e636 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e5d6:	68bb      	ldr	r3, [r7, #8]
 800e5d8:	3304      	adds	r3, #4
 800e5da:	4618      	mov	r0, r3
 800e5dc:	f7fe fbf8 	bl	800cdd0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e5e0:	68bb      	ldr	r3, [r7, #8]
 800e5e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d004      	beq.n	800e5f2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e5e8:	68bb      	ldr	r3, [r7, #8]
 800e5ea:	3318      	adds	r3, #24
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	f7fe fbef 	bl	800cdd0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e5f2:	68bb      	ldr	r3, [r7, #8]
 800e5f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e5f6:	4b25      	ldr	r3, [pc, #148]	@ (800e68c <xTaskIncrementTick+0x160>)
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	429a      	cmp	r2, r3
 800e5fc:	d903      	bls.n	800e606 <xTaskIncrementTick+0xda>
 800e5fe:	68bb      	ldr	r3, [r7, #8]
 800e600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e602:	4a22      	ldr	r2, [pc, #136]	@ (800e68c <xTaskIncrementTick+0x160>)
 800e604:	6013      	str	r3, [r2, #0]
 800e606:	68bb      	ldr	r3, [r7, #8]
 800e608:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e60a:	4613      	mov	r3, r2
 800e60c:	009b      	lsls	r3, r3, #2
 800e60e:	4413      	add	r3, r2
 800e610:	009b      	lsls	r3, r3, #2
 800e612:	4a1f      	ldr	r2, [pc, #124]	@ (800e690 <xTaskIncrementTick+0x164>)
 800e614:	441a      	add	r2, r3
 800e616:	68bb      	ldr	r3, [r7, #8]
 800e618:	3304      	adds	r3, #4
 800e61a:	4619      	mov	r1, r3
 800e61c:	4610      	mov	r0, r2
 800e61e:	f7fe fb7a 	bl	800cd16 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e622:	68bb      	ldr	r3, [r7, #8]
 800e624:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e626:	4b1b      	ldr	r3, [pc, #108]	@ (800e694 <xTaskIncrementTick+0x168>)
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e62c:	429a      	cmp	r2, r3
 800e62e:	d3b8      	bcc.n	800e5a2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e630:	2301      	movs	r3, #1
 800e632:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e634:	e7b5      	b.n	800e5a2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e636:	4b17      	ldr	r3, [pc, #92]	@ (800e694 <xTaskIncrementTick+0x168>)
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e63c:	4914      	ldr	r1, [pc, #80]	@ (800e690 <xTaskIncrementTick+0x164>)
 800e63e:	4613      	mov	r3, r2
 800e640:	009b      	lsls	r3, r3, #2
 800e642:	4413      	add	r3, r2
 800e644:	009b      	lsls	r3, r3, #2
 800e646:	440b      	add	r3, r1
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	2b01      	cmp	r3, #1
 800e64c:	d901      	bls.n	800e652 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800e64e:	2301      	movs	r3, #1
 800e650:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e652:	4b11      	ldr	r3, [pc, #68]	@ (800e698 <xTaskIncrementTick+0x16c>)
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d007      	beq.n	800e66a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800e65a:	2301      	movs	r3, #1
 800e65c:	617b      	str	r3, [r7, #20]
 800e65e:	e004      	b.n	800e66a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e660:	4b0e      	ldr	r3, [pc, #56]	@ (800e69c <xTaskIncrementTick+0x170>)
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	3301      	adds	r3, #1
 800e666:	4a0d      	ldr	r2, [pc, #52]	@ (800e69c <xTaskIncrementTick+0x170>)
 800e668:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e66a:	697b      	ldr	r3, [r7, #20]
}
 800e66c:	4618      	mov	r0, r3
 800e66e:	3718      	adds	r7, #24
 800e670:	46bd      	mov	sp, r7
 800e672:	bd80      	pop	{r7, pc}
 800e674:	240010d8 	.word	0x240010d8
 800e678:	240010b4 	.word	0x240010b4
 800e67c:	24001068 	.word	0x24001068
 800e680:	2400106c 	.word	0x2400106c
 800e684:	240010c8 	.word	0x240010c8
 800e688:	240010d0 	.word	0x240010d0
 800e68c:	240010b8 	.word	0x240010b8
 800e690:	24000be0 	.word	0x24000be0
 800e694:	24000bdc 	.word	0x24000bdc
 800e698:	240010c4 	.word	0x240010c4
 800e69c:	240010c0 	.word	0x240010c0

0800e6a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e6a0:	b480      	push	{r7}
 800e6a2:	b085      	sub	sp, #20
 800e6a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e6a6:	4b2b      	ldr	r3, [pc, #172]	@ (800e754 <vTaskSwitchContext+0xb4>)
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d003      	beq.n	800e6b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e6ae:	4b2a      	ldr	r3, [pc, #168]	@ (800e758 <vTaskSwitchContext+0xb8>)
 800e6b0:	2201      	movs	r2, #1
 800e6b2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e6b4:	e047      	b.n	800e746 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800e6b6:	4b28      	ldr	r3, [pc, #160]	@ (800e758 <vTaskSwitchContext+0xb8>)
 800e6b8:	2200      	movs	r2, #0
 800e6ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6bc:	4b27      	ldr	r3, [pc, #156]	@ (800e75c <vTaskSwitchContext+0xbc>)
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	60fb      	str	r3, [r7, #12]
 800e6c2:	e011      	b.n	800e6e8 <vTaskSwitchContext+0x48>
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d10b      	bne.n	800e6e2 <vTaskSwitchContext+0x42>
	__asm volatile
 800e6ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6ce:	f383 8811 	msr	BASEPRI, r3
 800e6d2:	f3bf 8f6f 	isb	sy
 800e6d6:	f3bf 8f4f 	dsb	sy
 800e6da:	607b      	str	r3, [r7, #4]
}
 800e6dc:	bf00      	nop
 800e6de:	bf00      	nop
 800e6e0:	e7fd      	b.n	800e6de <vTaskSwitchContext+0x3e>
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	3b01      	subs	r3, #1
 800e6e6:	60fb      	str	r3, [r7, #12]
 800e6e8:	491d      	ldr	r1, [pc, #116]	@ (800e760 <vTaskSwitchContext+0xc0>)
 800e6ea:	68fa      	ldr	r2, [r7, #12]
 800e6ec:	4613      	mov	r3, r2
 800e6ee:	009b      	lsls	r3, r3, #2
 800e6f0:	4413      	add	r3, r2
 800e6f2:	009b      	lsls	r3, r3, #2
 800e6f4:	440b      	add	r3, r1
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d0e3      	beq.n	800e6c4 <vTaskSwitchContext+0x24>
 800e6fc:	68fa      	ldr	r2, [r7, #12]
 800e6fe:	4613      	mov	r3, r2
 800e700:	009b      	lsls	r3, r3, #2
 800e702:	4413      	add	r3, r2
 800e704:	009b      	lsls	r3, r3, #2
 800e706:	4a16      	ldr	r2, [pc, #88]	@ (800e760 <vTaskSwitchContext+0xc0>)
 800e708:	4413      	add	r3, r2
 800e70a:	60bb      	str	r3, [r7, #8]
 800e70c:	68bb      	ldr	r3, [r7, #8]
 800e70e:	685b      	ldr	r3, [r3, #4]
 800e710:	685a      	ldr	r2, [r3, #4]
 800e712:	68bb      	ldr	r3, [r7, #8]
 800e714:	605a      	str	r2, [r3, #4]
 800e716:	68bb      	ldr	r3, [r7, #8]
 800e718:	685a      	ldr	r2, [r3, #4]
 800e71a:	68bb      	ldr	r3, [r7, #8]
 800e71c:	3308      	adds	r3, #8
 800e71e:	429a      	cmp	r2, r3
 800e720:	d104      	bne.n	800e72c <vTaskSwitchContext+0x8c>
 800e722:	68bb      	ldr	r3, [r7, #8]
 800e724:	685b      	ldr	r3, [r3, #4]
 800e726:	685a      	ldr	r2, [r3, #4]
 800e728:	68bb      	ldr	r3, [r7, #8]
 800e72a:	605a      	str	r2, [r3, #4]
 800e72c:	68bb      	ldr	r3, [r7, #8]
 800e72e:	685b      	ldr	r3, [r3, #4]
 800e730:	68db      	ldr	r3, [r3, #12]
 800e732:	4a0c      	ldr	r2, [pc, #48]	@ (800e764 <vTaskSwitchContext+0xc4>)
 800e734:	6013      	str	r3, [r2, #0]
 800e736:	4a09      	ldr	r2, [pc, #36]	@ (800e75c <vTaskSwitchContext+0xbc>)
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e73c:	4b09      	ldr	r3, [pc, #36]	@ (800e764 <vTaskSwitchContext+0xc4>)
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	3354      	adds	r3, #84	@ 0x54
 800e742:	4a09      	ldr	r2, [pc, #36]	@ (800e768 <vTaskSwitchContext+0xc8>)
 800e744:	6013      	str	r3, [r2, #0]
}
 800e746:	bf00      	nop
 800e748:	3714      	adds	r7, #20
 800e74a:	46bd      	mov	sp, r7
 800e74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e750:	4770      	bx	lr
 800e752:	bf00      	nop
 800e754:	240010d8 	.word	0x240010d8
 800e758:	240010c4 	.word	0x240010c4
 800e75c:	240010b8 	.word	0x240010b8
 800e760:	24000be0 	.word	0x24000be0
 800e764:	24000bdc 	.word	0x24000bdc
 800e768:	24000020 	.word	0x24000020

0800e76c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b084      	sub	sp, #16
 800e770:	af00      	add	r7, sp, #0
 800e772:	6078      	str	r0, [r7, #4]
 800e774:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d10b      	bne.n	800e794 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800e77c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e780:	f383 8811 	msr	BASEPRI, r3
 800e784:	f3bf 8f6f 	isb	sy
 800e788:	f3bf 8f4f 	dsb	sy
 800e78c:	60fb      	str	r3, [r7, #12]
}
 800e78e:	bf00      	nop
 800e790:	bf00      	nop
 800e792:	e7fd      	b.n	800e790 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e794:	4b07      	ldr	r3, [pc, #28]	@ (800e7b4 <vTaskPlaceOnEventList+0x48>)
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	3318      	adds	r3, #24
 800e79a:	4619      	mov	r1, r3
 800e79c:	6878      	ldr	r0, [r7, #4]
 800e79e:	f7fe fade 	bl	800cd5e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e7a2:	2101      	movs	r1, #1
 800e7a4:	6838      	ldr	r0, [r7, #0]
 800e7a6:	f000 fbdf 	bl	800ef68 <prvAddCurrentTaskToDelayedList>
}
 800e7aa:	bf00      	nop
 800e7ac:	3710      	adds	r7, #16
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	bd80      	pop	{r7, pc}
 800e7b2:	bf00      	nop
 800e7b4:	24000bdc 	.word	0x24000bdc

0800e7b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	b086      	sub	sp, #24
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	60f8      	str	r0, [r7, #12]
 800e7c0:	60b9      	str	r1, [r7, #8]
 800e7c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d10b      	bne.n	800e7e2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800e7ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7ce:	f383 8811 	msr	BASEPRI, r3
 800e7d2:	f3bf 8f6f 	isb	sy
 800e7d6:	f3bf 8f4f 	dsb	sy
 800e7da:	617b      	str	r3, [r7, #20]
}
 800e7dc:	bf00      	nop
 800e7de:	bf00      	nop
 800e7e0:	e7fd      	b.n	800e7de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e7e2:	4b0a      	ldr	r3, [pc, #40]	@ (800e80c <vTaskPlaceOnEventListRestricted+0x54>)
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	3318      	adds	r3, #24
 800e7e8:	4619      	mov	r1, r3
 800e7ea:	68f8      	ldr	r0, [r7, #12]
 800e7ec:	f7fe fa93 	bl	800cd16 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d002      	beq.n	800e7fc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e7f6:	f04f 33ff 	mov.w	r3, #4294967295
 800e7fa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e7fc:	6879      	ldr	r1, [r7, #4]
 800e7fe:	68b8      	ldr	r0, [r7, #8]
 800e800:	f000 fbb2 	bl	800ef68 <prvAddCurrentTaskToDelayedList>
	}
 800e804:	bf00      	nop
 800e806:	3718      	adds	r7, #24
 800e808:	46bd      	mov	sp, r7
 800e80a:	bd80      	pop	{r7, pc}
 800e80c:	24000bdc 	.word	0x24000bdc

0800e810 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e810:	b580      	push	{r7, lr}
 800e812:	b086      	sub	sp, #24
 800e814:	af00      	add	r7, sp, #0
 800e816:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	68db      	ldr	r3, [r3, #12]
 800e81c:	68db      	ldr	r3, [r3, #12]
 800e81e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e820:	693b      	ldr	r3, [r7, #16]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d10b      	bne.n	800e83e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e82a:	f383 8811 	msr	BASEPRI, r3
 800e82e:	f3bf 8f6f 	isb	sy
 800e832:	f3bf 8f4f 	dsb	sy
 800e836:	60fb      	str	r3, [r7, #12]
}
 800e838:	bf00      	nop
 800e83a:	bf00      	nop
 800e83c:	e7fd      	b.n	800e83a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e83e:	693b      	ldr	r3, [r7, #16]
 800e840:	3318      	adds	r3, #24
 800e842:	4618      	mov	r0, r3
 800e844:	f7fe fac4 	bl	800cdd0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e848:	4b1e      	ldr	r3, [pc, #120]	@ (800e8c4 <xTaskRemoveFromEventList+0xb4>)
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d11f      	bne.n	800e890 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e850:	693b      	ldr	r3, [r7, #16]
 800e852:	3304      	adds	r3, #4
 800e854:	4618      	mov	r0, r3
 800e856:	f7fe fabb 	bl	800cdd0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e85a:	693b      	ldr	r3, [r7, #16]
 800e85c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e85e:	4b1a      	ldr	r3, [pc, #104]	@ (800e8c8 <xTaskRemoveFromEventList+0xb8>)
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	429a      	cmp	r2, r3
 800e864:	d903      	bls.n	800e86e <xTaskRemoveFromEventList+0x5e>
 800e866:	693b      	ldr	r3, [r7, #16]
 800e868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e86a:	4a17      	ldr	r2, [pc, #92]	@ (800e8c8 <xTaskRemoveFromEventList+0xb8>)
 800e86c:	6013      	str	r3, [r2, #0]
 800e86e:	693b      	ldr	r3, [r7, #16]
 800e870:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e872:	4613      	mov	r3, r2
 800e874:	009b      	lsls	r3, r3, #2
 800e876:	4413      	add	r3, r2
 800e878:	009b      	lsls	r3, r3, #2
 800e87a:	4a14      	ldr	r2, [pc, #80]	@ (800e8cc <xTaskRemoveFromEventList+0xbc>)
 800e87c:	441a      	add	r2, r3
 800e87e:	693b      	ldr	r3, [r7, #16]
 800e880:	3304      	adds	r3, #4
 800e882:	4619      	mov	r1, r3
 800e884:	4610      	mov	r0, r2
 800e886:	f7fe fa46 	bl	800cd16 <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 800e88a:	f000 f9bf 	bl	800ec0c <prvResetNextTaskUnblockTime>
 800e88e:	e005      	b.n	800e89c <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e890:	693b      	ldr	r3, [r7, #16]
 800e892:	3318      	adds	r3, #24
 800e894:	4619      	mov	r1, r3
 800e896:	480e      	ldr	r0, [pc, #56]	@ (800e8d0 <xTaskRemoveFromEventList+0xc0>)
 800e898:	f7fe fa3d 	bl	800cd16 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e89c:	693b      	ldr	r3, [r7, #16]
 800e89e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e8a0:	4b0c      	ldr	r3, [pc, #48]	@ (800e8d4 <xTaskRemoveFromEventList+0xc4>)
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8a6:	429a      	cmp	r2, r3
 800e8a8:	d905      	bls.n	800e8b6 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e8aa:	2301      	movs	r3, #1
 800e8ac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e8ae:	4b0a      	ldr	r3, [pc, #40]	@ (800e8d8 <xTaskRemoveFromEventList+0xc8>)
 800e8b0:	2201      	movs	r2, #1
 800e8b2:	601a      	str	r2, [r3, #0]
 800e8b4:	e001      	b.n	800e8ba <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e8ba:	697b      	ldr	r3, [r7, #20]
}
 800e8bc:	4618      	mov	r0, r3
 800e8be:	3718      	adds	r7, #24
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	bd80      	pop	{r7, pc}
 800e8c4:	240010d8 	.word	0x240010d8
 800e8c8:	240010b8 	.word	0x240010b8
 800e8cc:	24000be0 	.word	0x24000be0
 800e8d0:	24001070 	.word	0x24001070
 800e8d4:	24000bdc 	.word	0x24000bdc
 800e8d8:	240010c4 	.word	0x240010c4

0800e8dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e8dc:	b480      	push	{r7}
 800e8de:	b083      	sub	sp, #12
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e8e4:	4b06      	ldr	r3, [pc, #24]	@ (800e900 <vTaskInternalSetTimeOutState+0x24>)
 800e8e6:	681a      	ldr	r2, [r3, #0]
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e8ec:	4b05      	ldr	r3, [pc, #20]	@ (800e904 <vTaskInternalSetTimeOutState+0x28>)
 800e8ee:	681a      	ldr	r2, [r3, #0]
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	605a      	str	r2, [r3, #4]
}
 800e8f4:	bf00      	nop
 800e8f6:	370c      	adds	r7, #12
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fe:	4770      	bx	lr
 800e900:	240010c8 	.word	0x240010c8
 800e904:	240010b4 	.word	0x240010b4

0800e908 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b088      	sub	sp, #32
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]
 800e910:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d10b      	bne.n	800e930 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800e918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e91c:	f383 8811 	msr	BASEPRI, r3
 800e920:	f3bf 8f6f 	isb	sy
 800e924:	f3bf 8f4f 	dsb	sy
 800e928:	613b      	str	r3, [r7, #16]
}
 800e92a:	bf00      	nop
 800e92c:	bf00      	nop
 800e92e:	e7fd      	b.n	800e92c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e930:	683b      	ldr	r3, [r7, #0]
 800e932:	2b00      	cmp	r3, #0
 800e934:	d10b      	bne.n	800e94e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800e936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e93a:	f383 8811 	msr	BASEPRI, r3
 800e93e:	f3bf 8f6f 	isb	sy
 800e942:	f3bf 8f4f 	dsb	sy
 800e946:	60fb      	str	r3, [r7, #12]
}
 800e948:	bf00      	nop
 800e94a:	bf00      	nop
 800e94c:	e7fd      	b.n	800e94a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800e94e:	f000 ffeb 	bl	800f928 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e952:	4b1d      	ldr	r3, [pc, #116]	@ (800e9c8 <xTaskCheckForTimeOut+0xc0>)
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	685b      	ldr	r3, [r3, #4]
 800e95c:	69ba      	ldr	r2, [r7, #24]
 800e95e:	1ad3      	subs	r3, r2, r3
 800e960:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e962:	683b      	ldr	r3, [r7, #0]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e96a:	d102      	bne.n	800e972 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e96c:	2300      	movs	r3, #0
 800e96e:	61fb      	str	r3, [r7, #28]
 800e970:	e023      	b.n	800e9ba <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	681a      	ldr	r2, [r3, #0]
 800e976:	4b15      	ldr	r3, [pc, #84]	@ (800e9cc <xTaskCheckForTimeOut+0xc4>)
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	429a      	cmp	r2, r3
 800e97c:	d007      	beq.n	800e98e <xTaskCheckForTimeOut+0x86>
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	685b      	ldr	r3, [r3, #4]
 800e982:	69ba      	ldr	r2, [r7, #24]
 800e984:	429a      	cmp	r2, r3
 800e986:	d302      	bcc.n	800e98e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e988:	2301      	movs	r3, #1
 800e98a:	61fb      	str	r3, [r7, #28]
 800e98c:	e015      	b.n	800e9ba <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e98e:	683b      	ldr	r3, [r7, #0]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	697a      	ldr	r2, [r7, #20]
 800e994:	429a      	cmp	r2, r3
 800e996:	d20b      	bcs.n	800e9b0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e998:	683b      	ldr	r3, [r7, #0]
 800e99a:	681a      	ldr	r2, [r3, #0]
 800e99c:	697b      	ldr	r3, [r7, #20]
 800e99e:	1ad2      	subs	r2, r2, r3
 800e9a0:	683b      	ldr	r3, [r7, #0]
 800e9a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e9a4:	6878      	ldr	r0, [r7, #4]
 800e9a6:	f7ff ff99 	bl	800e8dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	61fb      	str	r3, [r7, #28]
 800e9ae:	e004      	b.n	800e9ba <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e9b0:	683b      	ldr	r3, [r7, #0]
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e9b6:	2301      	movs	r3, #1
 800e9b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e9ba:	f000 ffe7 	bl	800f98c <vPortExitCritical>

	return xReturn;
 800e9be:	69fb      	ldr	r3, [r7, #28]
}
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	3720      	adds	r7, #32
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	bd80      	pop	{r7, pc}
 800e9c8:	240010b4 	.word	0x240010b4
 800e9cc:	240010c8 	.word	0x240010c8

0800e9d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e9d0:	b480      	push	{r7}
 800e9d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e9d4:	4b03      	ldr	r3, [pc, #12]	@ (800e9e4 <vTaskMissedYield+0x14>)
 800e9d6:	2201      	movs	r2, #1
 800e9d8:	601a      	str	r2, [r3, #0]
}
 800e9da:	bf00      	nop
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e2:	4770      	bx	lr
 800e9e4:	240010c4 	.word	0x240010c4

0800e9e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b084      	sub	sp, #16
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e9f0:	f000 f8a8 	bl	800eb44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e9f4:	4b18      	ldr	r3, [pc, #96]	@ (800ea58 <prvIdleTask+0x70>)
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	2b01      	cmp	r3, #1
 800e9fa:	d907      	bls.n	800ea0c <prvIdleTask+0x24>
			{
				taskYIELD();
 800e9fc:	4b17      	ldr	r3, [pc, #92]	@ (800ea5c <prvIdleTask+0x74>)
 800e9fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ea02:	601a      	str	r2, [r3, #0]
 800ea04:	f3bf 8f4f 	dsb	sy
 800ea08:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800ea0c:	f7ff fc80 	bl	800e310 <prvGetExpectedIdleTime>
 800ea10:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	2b01      	cmp	r3, #1
 800ea16:	d9eb      	bls.n	800e9f0 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 800ea18:	f7ff fc6c 	bl	800e2f4 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800ea1c:	4b10      	ldr	r3, [pc, #64]	@ (800ea60 <prvIdleTask+0x78>)
 800ea1e:	681a      	ldr	r2, [r3, #0]
 800ea20:	4b10      	ldr	r3, [pc, #64]	@ (800ea64 <prvIdleTask+0x7c>)
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	429a      	cmp	r2, r3
 800ea26:	d20b      	bcs.n	800ea40 <prvIdleTask+0x58>
	__asm volatile
 800ea28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea2c:	f383 8811 	msr	BASEPRI, r3
 800ea30:	f3bf 8f6f 	isb	sy
 800ea34:	f3bf 8f4f 	dsb	sy
 800ea38:	60bb      	str	r3, [r7, #8]
}
 800ea3a:	bf00      	nop
 800ea3c:	bf00      	nop
 800ea3e:	e7fd      	b.n	800ea3c <prvIdleTask+0x54>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800ea40:	f7ff fc66 	bl	800e310 <prvGetExpectedIdleTime>
 800ea44:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	2b01      	cmp	r3, #1
 800ea4a:	d902      	bls.n	800ea52 <prvIdleTask+0x6a>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800ea4c:	68f8      	ldr	r0, [r7, #12]
 800ea4e:	f001 f81d 	bl	800fa8c <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 800ea52:	f7ff fc95 	bl	800e380 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800ea56:	e7cb      	b.n	800e9f0 <prvIdleTask+0x8>
 800ea58:	24000be0 	.word	0x24000be0
 800ea5c:	e000ed04 	.word	0xe000ed04
 800ea60:	240010d0 	.word	0x240010d0
 800ea64:	240010b4 	.word	0x240010b4

0800ea68 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 800ea68:	b480      	push	{r7}
 800ea6a:	b083      	sub	sp, #12
 800ea6c:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 800ea6e:	2301      	movs	r3, #1
 800ea70:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 800ea72:	2301      	movs	r3, #1
 800ea74:	71fb      	strb	r3, [r7, #7]

		/* This function must be called from a critical section. */

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 800ea76:	4b0f      	ldr	r3, [pc, #60]	@ (800eab4 <eTaskConfirmSleepModeStatus+0x4c>)
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d002      	beq.n	800ea84 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800ea7e:	2300      	movs	r3, #0
 800ea80:	71fb      	strb	r3, [r7, #7]
 800ea82:	e010      	b.n	800eaa6 <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 800ea84:	4b0c      	ldr	r3, [pc, #48]	@ (800eab8 <eTaskConfirmSleepModeStatus+0x50>)
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d002      	beq.n	800ea92 <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	71fb      	strb	r3, [r7, #7]
 800ea90:	e009      	b.n	800eaa6 <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 800ea92:	4b0a      	ldr	r3, [pc, #40]	@ (800eabc <eTaskConfirmSleepModeStatus+0x54>)
 800ea94:	681a      	ldr	r2, [r3, #0]
 800ea96:	4b0a      	ldr	r3, [pc, #40]	@ (800eac0 <eTaskConfirmSleepModeStatus+0x58>)
 800ea98:	6819      	ldr	r1, [r3, #0]
 800ea9a:	683b      	ldr	r3, [r7, #0]
 800ea9c:	1acb      	subs	r3, r1, r3
 800ea9e:	429a      	cmp	r2, r3
 800eaa0:	d101      	bne.n	800eaa6 <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 800eaa2:	2302      	movs	r3, #2
 800eaa4:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 800eaa6:	79fb      	ldrb	r3, [r7, #7]
	}
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	370c      	adds	r7, #12
 800eaac:	46bd      	mov	sp, r7
 800eaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab2:	4770      	bx	lr
 800eab4:	24001070 	.word	0x24001070
 800eab8:	240010c4 	.word	0x240010c4
 800eabc:	2400109c 	.word	0x2400109c
 800eac0:	240010b0 	.word	0x240010b0

0800eac4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b082      	sub	sp, #8
 800eac8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eaca:	2300      	movs	r3, #0
 800eacc:	607b      	str	r3, [r7, #4]
 800eace:	e00c      	b.n	800eaea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ead0:	687a      	ldr	r2, [r7, #4]
 800ead2:	4613      	mov	r3, r2
 800ead4:	009b      	lsls	r3, r3, #2
 800ead6:	4413      	add	r3, r2
 800ead8:	009b      	lsls	r3, r3, #2
 800eada:	4a12      	ldr	r2, [pc, #72]	@ (800eb24 <prvInitialiseTaskLists+0x60>)
 800eadc:	4413      	add	r3, r2
 800eade:	4618      	mov	r0, r3
 800eae0:	f7fe f8ec 	bl	800ccbc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	3301      	adds	r3, #1
 800eae8:	607b      	str	r3, [r7, #4]
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	2b37      	cmp	r3, #55	@ 0x37
 800eaee:	d9ef      	bls.n	800ead0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800eaf0:	480d      	ldr	r0, [pc, #52]	@ (800eb28 <prvInitialiseTaskLists+0x64>)
 800eaf2:	f7fe f8e3 	bl	800ccbc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800eaf6:	480d      	ldr	r0, [pc, #52]	@ (800eb2c <prvInitialiseTaskLists+0x68>)
 800eaf8:	f7fe f8e0 	bl	800ccbc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800eafc:	480c      	ldr	r0, [pc, #48]	@ (800eb30 <prvInitialiseTaskLists+0x6c>)
 800eafe:	f7fe f8dd 	bl	800ccbc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800eb02:	480c      	ldr	r0, [pc, #48]	@ (800eb34 <prvInitialiseTaskLists+0x70>)
 800eb04:	f7fe f8da 	bl	800ccbc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800eb08:	480b      	ldr	r0, [pc, #44]	@ (800eb38 <prvInitialiseTaskLists+0x74>)
 800eb0a:	f7fe f8d7 	bl	800ccbc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800eb0e:	4b0b      	ldr	r3, [pc, #44]	@ (800eb3c <prvInitialiseTaskLists+0x78>)
 800eb10:	4a05      	ldr	r2, [pc, #20]	@ (800eb28 <prvInitialiseTaskLists+0x64>)
 800eb12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800eb14:	4b0a      	ldr	r3, [pc, #40]	@ (800eb40 <prvInitialiseTaskLists+0x7c>)
 800eb16:	4a05      	ldr	r2, [pc, #20]	@ (800eb2c <prvInitialiseTaskLists+0x68>)
 800eb18:	601a      	str	r2, [r3, #0]
}
 800eb1a:	bf00      	nop
 800eb1c:	3708      	adds	r7, #8
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	bd80      	pop	{r7, pc}
 800eb22:	bf00      	nop
 800eb24:	24000be0 	.word	0x24000be0
 800eb28:	24001040 	.word	0x24001040
 800eb2c:	24001054 	.word	0x24001054
 800eb30:	24001070 	.word	0x24001070
 800eb34:	24001084 	.word	0x24001084
 800eb38:	2400109c 	.word	0x2400109c
 800eb3c:	24001068 	.word	0x24001068
 800eb40:	2400106c 	.word	0x2400106c

0800eb44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800eb44:	b580      	push	{r7, lr}
 800eb46:	b082      	sub	sp, #8
 800eb48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800eb4a:	e019      	b.n	800eb80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800eb4c:	f000 feec 	bl	800f928 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb50:	4b10      	ldr	r3, [pc, #64]	@ (800eb94 <prvCheckTasksWaitingTermination+0x50>)
 800eb52:	68db      	ldr	r3, [r3, #12]
 800eb54:	68db      	ldr	r3, [r3, #12]
 800eb56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	3304      	adds	r3, #4
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	f7fe f937 	bl	800cdd0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800eb62:	4b0d      	ldr	r3, [pc, #52]	@ (800eb98 <prvCheckTasksWaitingTermination+0x54>)
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	3b01      	subs	r3, #1
 800eb68:	4a0b      	ldr	r2, [pc, #44]	@ (800eb98 <prvCheckTasksWaitingTermination+0x54>)
 800eb6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800eb6c:	4b0b      	ldr	r3, [pc, #44]	@ (800eb9c <prvCheckTasksWaitingTermination+0x58>)
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	3b01      	subs	r3, #1
 800eb72:	4a0a      	ldr	r2, [pc, #40]	@ (800eb9c <prvCheckTasksWaitingTermination+0x58>)
 800eb74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800eb76:	f000 ff09 	bl	800f98c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800eb7a:	6878      	ldr	r0, [r7, #4]
 800eb7c:	f000 f810 	bl	800eba0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800eb80:	4b06      	ldr	r3, [pc, #24]	@ (800eb9c <prvCheckTasksWaitingTermination+0x58>)
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d1e1      	bne.n	800eb4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800eb88:	bf00      	nop
 800eb8a:	bf00      	nop
 800eb8c:	3708      	adds	r7, #8
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	bd80      	pop	{r7, pc}
 800eb92:	bf00      	nop
 800eb94:	24001084 	.word	0x24001084
 800eb98:	240010b0 	.word	0x240010b0
 800eb9c:	24001098 	.word	0x24001098

0800eba0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b084      	sub	sp, #16
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	3354      	adds	r3, #84	@ 0x54
 800ebac:	4618      	mov	r0, r3
 800ebae:	f002 fc83 	bl	80114b8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d108      	bne.n	800ebce <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	f001 f985 	bl	800fed0 <vPortFree>
				vPortFree( pxTCB );
 800ebc6:	6878      	ldr	r0, [r7, #4]
 800ebc8:	f001 f982 	bl	800fed0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ebcc:	e019      	b.n	800ec02 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ebd4:	2b01      	cmp	r3, #1
 800ebd6:	d103      	bne.n	800ebe0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ebd8:	6878      	ldr	r0, [r7, #4]
 800ebda:	f001 f979 	bl	800fed0 <vPortFree>
	}
 800ebde:	e010      	b.n	800ec02 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ebe6:	2b02      	cmp	r3, #2
 800ebe8:	d00b      	beq.n	800ec02 <prvDeleteTCB+0x62>
	__asm volatile
 800ebea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebee:	f383 8811 	msr	BASEPRI, r3
 800ebf2:	f3bf 8f6f 	isb	sy
 800ebf6:	f3bf 8f4f 	dsb	sy
 800ebfa:	60fb      	str	r3, [r7, #12]
}
 800ebfc:	bf00      	nop
 800ebfe:	bf00      	nop
 800ec00:	e7fd      	b.n	800ebfe <prvDeleteTCB+0x5e>
	}
 800ec02:	bf00      	nop
 800ec04:	3710      	adds	r7, #16
 800ec06:	46bd      	mov	sp, r7
 800ec08:	bd80      	pop	{r7, pc}
	...

0800ec0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ec0c:	b480      	push	{r7}
 800ec0e:	b083      	sub	sp, #12
 800ec10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ec12:	4b0c      	ldr	r3, [pc, #48]	@ (800ec44 <prvResetNextTaskUnblockTime+0x38>)
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d104      	bne.n	800ec26 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ec1c:	4b0a      	ldr	r3, [pc, #40]	@ (800ec48 <prvResetNextTaskUnblockTime+0x3c>)
 800ec1e:	f04f 32ff 	mov.w	r2, #4294967295
 800ec22:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ec24:	e008      	b.n	800ec38 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec26:	4b07      	ldr	r3, [pc, #28]	@ (800ec44 <prvResetNextTaskUnblockTime+0x38>)
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	68db      	ldr	r3, [r3, #12]
 800ec2c:	68db      	ldr	r3, [r3, #12]
 800ec2e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	685b      	ldr	r3, [r3, #4]
 800ec34:	4a04      	ldr	r2, [pc, #16]	@ (800ec48 <prvResetNextTaskUnblockTime+0x3c>)
 800ec36:	6013      	str	r3, [r2, #0]
}
 800ec38:	bf00      	nop
 800ec3a:	370c      	adds	r7, #12
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec42:	4770      	bx	lr
 800ec44:	24001068 	.word	0x24001068
 800ec48:	240010d0 	.word	0x240010d0

0800ec4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ec4c:	b480      	push	{r7}
 800ec4e:	b083      	sub	sp, #12
 800ec50:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ec52:	4b0b      	ldr	r3, [pc, #44]	@ (800ec80 <xTaskGetSchedulerState+0x34>)
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d102      	bne.n	800ec60 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ec5a:	2301      	movs	r3, #1
 800ec5c:	607b      	str	r3, [r7, #4]
 800ec5e:	e008      	b.n	800ec72 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ec60:	4b08      	ldr	r3, [pc, #32]	@ (800ec84 <xTaskGetSchedulerState+0x38>)
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d102      	bne.n	800ec6e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ec68:	2302      	movs	r3, #2
 800ec6a:	607b      	str	r3, [r7, #4]
 800ec6c:	e001      	b.n	800ec72 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ec6e:	2300      	movs	r3, #0
 800ec70:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ec72:	687b      	ldr	r3, [r7, #4]
	}
 800ec74:	4618      	mov	r0, r3
 800ec76:	370c      	adds	r7, #12
 800ec78:	46bd      	mov	sp, r7
 800ec7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec7e:	4770      	bx	lr
 800ec80:	240010bc 	.word	0x240010bc
 800ec84:	240010d8 	.word	0x240010d8

0800ec88 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ec88:	b580      	push	{r7, lr}
 800ec8a:	b084      	sub	sp, #16
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ec94:	2300      	movs	r3, #0
 800ec96:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d051      	beq.n	800ed42 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ec9e:	68bb      	ldr	r3, [r7, #8]
 800eca0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eca2:	4b2a      	ldr	r3, [pc, #168]	@ (800ed4c <xTaskPriorityInherit+0xc4>)
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eca8:	429a      	cmp	r2, r3
 800ecaa:	d241      	bcs.n	800ed30 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ecac:	68bb      	ldr	r3, [r7, #8]
 800ecae:	699b      	ldr	r3, [r3, #24]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	db06      	blt.n	800ecc2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ecb4:	4b25      	ldr	r3, [pc, #148]	@ (800ed4c <xTaskPriorityInherit+0xc4>)
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecba:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ecbe:	68bb      	ldr	r3, [r7, #8]
 800ecc0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ecc2:	68bb      	ldr	r3, [r7, #8]
 800ecc4:	6959      	ldr	r1, [r3, #20]
 800ecc6:	68bb      	ldr	r3, [r7, #8]
 800ecc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ecca:	4613      	mov	r3, r2
 800eccc:	009b      	lsls	r3, r3, #2
 800ecce:	4413      	add	r3, r2
 800ecd0:	009b      	lsls	r3, r3, #2
 800ecd2:	4a1f      	ldr	r2, [pc, #124]	@ (800ed50 <xTaskPriorityInherit+0xc8>)
 800ecd4:	4413      	add	r3, r2
 800ecd6:	4299      	cmp	r1, r3
 800ecd8:	d122      	bne.n	800ed20 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ecda:	68bb      	ldr	r3, [r7, #8]
 800ecdc:	3304      	adds	r3, #4
 800ecde:	4618      	mov	r0, r3
 800ece0:	f7fe f876 	bl	800cdd0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ece4:	4b19      	ldr	r3, [pc, #100]	@ (800ed4c <xTaskPriorityInherit+0xc4>)
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ecea:	68bb      	ldr	r3, [r7, #8]
 800ecec:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ecee:	68bb      	ldr	r3, [r7, #8]
 800ecf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ecf2:	4b18      	ldr	r3, [pc, #96]	@ (800ed54 <xTaskPriorityInherit+0xcc>)
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	429a      	cmp	r2, r3
 800ecf8:	d903      	bls.n	800ed02 <xTaskPriorityInherit+0x7a>
 800ecfa:	68bb      	ldr	r3, [r7, #8]
 800ecfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecfe:	4a15      	ldr	r2, [pc, #84]	@ (800ed54 <xTaskPriorityInherit+0xcc>)
 800ed00:	6013      	str	r3, [r2, #0]
 800ed02:	68bb      	ldr	r3, [r7, #8]
 800ed04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed06:	4613      	mov	r3, r2
 800ed08:	009b      	lsls	r3, r3, #2
 800ed0a:	4413      	add	r3, r2
 800ed0c:	009b      	lsls	r3, r3, #2
 800ed0e:	4a10      	ldr	r2, [pc, #64]	@ (800ed50 <xTaskPriorityInherit+0xc8>)
 800ed10:	441a      	add	r2, r3
 800ed12:	68bb      	ldr	r3, [r7, #8]
 800ed14:	3304      	adds	r3, #4
 800ed16:	4619      	mov	r1, r3
 800ed18:	4610      	mov	r0, r2
 800ed1a:	f7fd fffc 	bl	800cd16 <vListInsertEnd>
 800ed1e:	e004      	b.n	800ed2a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ed20:	4b0a      	ldr	r3, [pc, #40]	@ (800ed4c <xTaskPriorityInherit+0xc4>)
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed26:	68bb      	ldr	r3, [r7, #8]
 800ed28:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ed2a:	2301      	movs	r3, #1
 800ed2c:	60fb      	str	r3, [r7, #12]
 800ed2e:	e008      	b.n	800ed42 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ed30:	68bb      	ldr	r3, [r7, #8]
 800ed32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ed34:	4b05      	ldr	r3, [pc, #20]	@ (800ed4c <xTaskPriorityInherit+0xc4>)
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed3a:	429a      	cmp	r2, r3
 800ed3c:	d201      	bcs.n	800ed42 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ed3e:	2301      	movs	r3, #1
 800ed40:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ed42:	68fb      	ldr	r3, [r7, #12]
	}
 800ed44:	4618      	mov	r0, r3
 800ed46:	3710      	adds	r7, #16
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	bd80      	pop	{r7, pc}
 800ed4c:	24000bdc 	.word	0x24000bdc
 800ed50:	24000be0 	.word	0x24000be0
 800ed54:	240010b8 	.word	0x240010b8

0800ed58 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b086      	sub	sp, #24
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ed64:	2300      	movs	r3, #0
 800ed66:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d058      	beq.n	800ee20 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ed6e:	4b2f      	ldr	r3, [pc, #188]	@ (800ee2c <xTaskPriorityDisinherit+0xd4>)
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	693a      	ldr	r2, [r7, #16]
 800ed74:	429a      	cmp	r2, r3
 800ed76:	d00b      	beq.n	800ed90 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ed78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed7c:	f383 8811 	msr	BASEPRI, r3
 800ed80:	f3bf 8f6f 	isb	sy
 800ed84:	f3bf 8f4f 	dsb	sy
 800ed88:	60fb      	str	r3, [r7, #12]
}
 800ed8a:	bf00      	nop
 800ed8c:	bf00      	nop
 800ed8e:	e7fd      	b.n	800ed8c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ed90:	693b      	ldr	r3, [r7, #16]
 800ed92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d10b      	bne.n	800edb0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ed98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed9c:	f383 8811 	msr	BASEPRI, r3
 800eda0:	f3bf 8f6f 	isb	sy
 800eda4:	f3bf 8f4f 	dsb	sy
 800eda8:	60bb      	str	r3, [r7, #8]
}
 800edaa:	bf00      	nop
 800edac:	bf00      	nop
 800edae:	e7fd      	b.n	800edac <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800edb0:	693b      	ldr	r3, [r7, #16]
 800edb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800edb4:	1e5a      	subs	r2, r3, #1
 800edb6:	693b      	ldr	r3, [r7, #16]
 800edb8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800edba:	693b      	ldr	r3, [r7, #16]
 800edbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800edbe:	693b      	ldr	r3, [r7, #16]
 800edc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800edc2:	429a      	cmp	r2, r3
 800edc4:	d02c      	beq.n	800ee20 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800edc6:	693b      	ldr	r3, [r7, #16]
 800edc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d128      	bne.n	800ee20 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800edce:	693b      	ldr	r3, [r7, #16]
 800edd0:	3304      	adds	r3, #4
 800edd2:	4618      	mov	r0, r3
 800edd4:	f7fd fffc 	bl	800cdd0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800edd8:	693b      	ldr	r3, [r7, #16]
 800edda:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800eddc:	693b      	ldr	r3, [r7, #16]
 800edde:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ede0:	693b      	ldr	r3, [r7, #16]
 800ede2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ede4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ede8:	693b      	ldr	r3, [r7, #16]
 800edea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800edec:	693b      	ldr	r3, [r7, #16]
 800edee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800edf0:	4b0f      	ldr	r3, [pc, #60]	@ (800ee30 <xTaskPriorityDisinherit+0xd8>)
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	429a      	cmp	r2, r3
 800edf6:	d903      	bls.n	800ee00 <xTaskPriorityDisinherit+0xa8>
 800edf8:	693b      	ldr	r3, [r7, #16]
 800edfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edfc:	4a0c      	ldr	r2, [pc, #48]	@ (800ee30 <xTaskPriorityDisinherit+0xd8>)
 800edfe:	6013      	str	r3, [r2, #0]
 800ee00:	693b      	ldr	r3, [r7, #16]
 800ee02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee04:	4613      	mov	r3, r2
 800ee06:	009b      	lsls	r3, r3, #2
 800ee08:	4413      	add	r3, r2
 800ee0a:	009b      	lsls	r3, r3, #2
 800ee0c:	4a09      	ldr	r2, [pc, #36]	@ (800ee34 <xTaskPriorityDisinherit+0xdc>)
 800ee0e:	441a      	add	r2, r3
 800ee10:	693b      	ldr	r3, [r7, #16]
 800ee12:	3304      	adds	r3, #4
 800ee14:	4619      	mov	r1, r3
 800ee16:	4610      	mov	r0, r2
 800ee18:	f7fd ff7d 	bl	800cd16 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ee1c:	2301      	movs	r3, #1
 800ee1e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ee20:	697b      	ldr	r3, [r7, #20]
	}
 800ee22:	4618      	mov	r0, r3
 800ee24:	3718      	adds	r7, #24
 800ee26:	46bd      	mov	sp, r7
 800ee28:	bd80      	pop	{r7, pc}
 800ee2a:	bf00      	nop
 800ee2c:	24000bdc 	.word	0x24000bdc
 800ee30:	240010b8 	.word	0x240010b8
 800ee34:	24000be0 	.word	0x24000be0

0800ee38 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	b088      	sub	sp, #32
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	6078      	str	r0, [r7, #4]
 800ee40:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ee46:	2301      	movs	r3, #1
 800ee48:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d06c      	beq.n	800ef2a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ee50:	69bb      	ldr	r3, [r7, #24]
 800ee52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d10b      	bne.n	800ee70 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800ee58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee5c:	f383 8811 	msr	BASEPRI, r3
 800ee60:	f3bf 8f6f 	isb	sy
 800ee64:	f3bf 8f4f 	dsb	sy
 800ee68:	60fb      	str	r3, [r7, #12]
}
 800ee6a:	bf00      	nop
 800ee6c:	bf00      	nop
 800ee6e:	e7fd      	b.n	800ee6c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ee70:	69bb      	ldr	r3, [r7, #24]
 800ee72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ee74:	683a      	ldr	r2, [r7, #0]
 800ee76:	429a      	cmp	r2, r3
 800ee78:	d902      	bls.n	800ee80 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ee7a:	683b      	ldr	r3, [r7, #0]
 800ee7c:	61fb      	str	r3, [r7, #28]
 800ee7e:	e002      	b.n	800ee86 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ee80:	69bb      	ldr	r3, [r7, #24]
 800ee82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ee84:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ee86:	69bb      	ldr	r3, [r7, #24]
 800ee88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee8a:	69fa      	ldr	r2, [r7, #28]
 800ee8c:	429a      	cmp	r2, r3
 800ee8e:	d04c      	beq.n	800ef2a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ee90:	69bb      	ldr	r3, [r7, #24]
 800ee92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ee94:	697a      	ldr	r2, [r7, #20]
 800ee96:	429a      	cmp	r2, r3
 800ee98:	d147      	bne.n	800ef2a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ee9a:	4b26      	ldr	r3, [pc, #152]	@ (800ef34 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	69ba      	ldr	r2, [r7, #24]
 800eea0:	429a      	cmp	r2, r3
 800eea2:	d10b      	bne.n	800eebc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800eea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eea8:	f383 8811 	msr	BASEPRI, r3
 800eeac:	f3bf 8f6f 	isb	sy
 800eeb0:	f3bf 8f4f 	dsb	sy
 800eeb4:	60bb      	str	r3, [r7, #8]
}
 800eeb6:	bf00      	nop
 800eeb8:	bf00      	nop
 800eeba:	e7fd      	b.n	800eeb8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800eebc:	69bb      	ldr	r3, [r7, #24]
 800eebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eec0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800eec2:	69bb      	ldr	r3, [r7, #24]
 800eec4:	69fa      	ldr	r2, [r7, #28]
 800eec6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800eec8:	69bb      	ldr	r3, [r7, #24]
 800eeca:	699b      	ldr	r3, [r3, #24]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	db04      	blt.n	800eeda <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eed0:	69fb      	ldr	r3, [r7, #28]
 800eed2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800eed6:	69bb      	ldr	r3, [r7, #24]
 800eed8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800eeda:	69bb      	ldr	r3, [r7, #24]
 800eedc:	6959      	ldr	r1, [r3, #20]
 800eede:	693a      	ldr	r2, [r7, #16]
 800eee0:	4613      	mov	r3, r2
 800eee2:	009b      	lsls	r3, r3, #2
 800eee4:	4413      	add	r3, r2
 800eee6:	009b      	lsls	r3, r3, #2
 800eee8:	4a13      	ldr	r2, [pc, #76]	@ (800ef38 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800eeea:	4413      	add	r3, r2
 800eeec:	4299      	cmp	r1, r3
 800eeee:	d11c      	bne.n	800ef2a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eef0:	69bb      	ldr	r3, [r7, #24]
 800eef2:	3304      	adds	r3, #4
 800eef4:	4618      	mov	r0, r3
 800eef6:	f7fd ff6b 	bl	800cdd0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800eefa:	69bb      	ldr	r3, [r7, #24]
 800eefc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eefe:	4b0f      	ldr	r3, [pc, #60]	@ (800ef3c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	429a      	cmp	r2, r3
 800ef04:	d903      	bls.n	800ef0e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800ef06:	69bb      	ldr	r3, [r7, #24]
 800ef08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef0a:	4a0c      	ldr	r2, [pc, #48]	@ (800ef3c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ef0c:	6013      	str	r3, [r2, #0]
 800ef0e:	69bb      	ldr	r3, [r7, #24]
 800ef10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef12:	4613      	mov	r3, r2
 800ef14:	009b      	lsls	r3, r3, #2
 800ef16:	4413      	add	r3, r2
 800ef18:	009b      	lsls	r3, r3, #2
 800ef1a:	4a07      	ldr	r2, [pc, #28]	@ (800ef38 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ef1c:	441a      	add	r2, r3
 800ef1e:	69bb      	ldr	r3, [r7, #24]
 800ef20:	3304      	adds	r3, #4
 800ef22:	4619      	mov	r1, r3
 800ef24:	4610      	mov	r0, r2
 800ef26:	f7fd fef6 	bl	800cd16 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ef2a:	bf00      	nop
 800ef2c:	3720      	adds	r7, #32
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	bd80      	pop	{r7, pc}
 800ef32:	bf00      	nop
 800ef34:	24000bdc 	.word	0x24000bdc
 800ef38:	24000be0 	.word	0x24000be0
 800ef3c:	240010b8 	.word	0x240010b8

0800ef40 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ef40:	b480      	push	{r7}
 800ef42:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ef44:	4b07      	ldr	r3, [pc, #28]	@ (800ef64 <pvTaskIncrementMutexHeldCount+0x24>)
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d004      	beq.n	800ef56 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ef4c:	4b05      	ldr	r3, [pc, #20]	@ (800ef64 <pvTaskIncrementMutexHeldCount+0x24>)
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ef52:	3201      	adds	r2, #1
 800ef54:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800ef56:	4b03      	ldr	r3, [pc, #12]	@ (800ef64 <pvTaskIncrementMutexHeldCount+0x24>)
 800ef58:	681b      	ldr	r3, [r3, #0]
	}
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef62:	4770      	bx	lr
 800ef64:	24000bdc 	.word	0x24000bdc

0800ef68 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b084      	sub	sp, #16
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	6078      	str	r0, [r7, #4]
 800ef70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ef72:	4b21      	ldr	r3, [pc, #132]	@ (800eff8 <prvAddCurrentTaskToDelayedList+0x90>)
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ef78:	4b20      	ldr	r3, [pc, #128]	@ (800effc <prvAddCurrentTaskToDelayedList+0x94>)
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	3304      	adds	r3, #4
 800ef7e:	4618      	mov	r0, r3
 800ef80:	f7fd ff26 	bl	800cdd0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef8a:	d10a      	bne.n	800efa2 <prvAddCurrentTaskToDelayedList+0x3a>
 800ef8c:	683b      	ldr	r3, [r7, #0]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d007      	beq.n	800efa2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ef92:	4b1a      	ldr	r3, [pc, #104]	@ (800effc <prvAddCurrentTaskToDelayedList+0x94>)
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	3304      	adds	r3, #4
 800ef98:	4619      	mov	r1, r3
 800ef9a:	4819      	ldr	r0, [pc, #100]	@ (800f000 <prvAddCurrentTaskToDelayedList+0x98>)
 800ef9c:	f7fd febb 	bl	800cd16 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800efa0:	e026      	b.n	800eff0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800efa2:	68fa      	ldr	r2, [r7, #12]
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	4413      	add	r3, r2
 800efa8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800efaa:	4b14      	ldr	r3, [pc, #80]	@ (800effc <prvAddCurrentTaskToDelayedList+0x94>)
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	68ba      	ldr	r2, [r7, #8]
 800efb0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800efb2:	68ba      	ldr	r2, [r7, #8]
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	429a      	cmp	r2, r3
 800efb8:	d209      	bcs.n	800efce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800efba:	4b12      	ldr	r3, [pc, #72]	@ (800f004 <prvAddCurrentTaskToDelayedList+0x9c>)
 800efbc:	681a      	ldr	r2, [r3, #0]
 800efbe:	4b0f      	ldr	r3, [pc, #60]	@ (800effc <prvAddCurrentTaskToDelayedList+0x94>)
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	3304      	adds	r3, #4
 800efc4:	4619      	mov	r1, r3
 800efc6:	4610      	mov	r0, r2
 800efc8:	f7fd fec9 	bl	800cd5e <vListInsert>
}
 800efcc:	e010      	b.n	800eff0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800efce:	4b0e      	ldr	r3, [pc, #56]	@ (800f008 <prvAddCurrentTaskToDelayedList+0xa0>)
 800efd0:	681a      	ldr	r2, [r3, #0]
 800efd2:	4b0a      	ldr	r3, [pc, #40]	@ (800effc <prvAddCurrentTaskToDelayedList+0x94>)
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	3304      	adds	r3, #4
 800efd8:	4619      	mov	r1, r3
 800efda:	4610      	mov	r0, r2
 800efdc:	f7fd febf 	bl	800cd5e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800efe0:	4b0a      	ldr	r3, [pc, #40]	@ (800f00c <prvAddCurrentTaskToDelayedList+0xa4>)
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	68ba      	ldr	r2, [r7, #8]
 800efe6:	429a      	cmp	r2, r3
 800efe8:	d202      	bcs.n	800eff0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800efea:	4a08      	ldr	r2, [pc, #32]	@ (800f00c <prvAddCurrentTaskToDelayedList+0xa4>)
 800efec:	68bb      	ldr	r3, [r7, #8]
 800efee:	6013      	str	r3, [r2, #0]
}
 800eff0:	bf00      	nop
 800eff2:	3710      	adds	r7, #16
 800eff4:	46bd      	mov	sp, r7
 800eff6:	bd80      	pop	{r7, pc}
 800eff8:	240010b4 	.word	0x240010b4
 800effc:	24000bdc 	.word	0x24000bdc
 800f000:	2400109c 	.word	0x2400109c
 800f004:	2400106c 	.word	0x2400106c
 800f008:	24001068 	.word	0x24001068
 800f00c:	240010d0 	.word	0x240010d0

0800f010 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f010:	b580      	push	{r7, lr}
 800f012:	b08a      	sub	sp, #40	@ 0x28
 800f014:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f016:	2300      	movs	r3, #0
 800f018:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f01a:	f000 fb13 	bl	800f644 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f01e:	4b1d      	ldr	r3, [pc, #116]	@ (800f094 <xTimerCreateTimerTask+0x84>)
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d021      	beq.n	800f06a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f026:	2300      	movs	r3, #0
 800f028:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f02a:	2300      	movs	r3, #0
 800f02c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f02e:	1d3a      	adds	r2, r7, #4
 800f030:	f107 0108 	add.w	r1, r7, #8
 800f034:	f107 030c 	add.w	r3, r7, #12
 800f038:	4618      	mov	r0, r3
 800f03a:	f7fd fe25 	bl	800cc88 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f03e:	6879      	ldr	r1, [r7, #4]
 800f040:	68bb      	ldr	r3, [r7, #8]
 800f042:	68fa      	ldr	r2, [r7, #12]
 800f044:	9202      	str	r2, [sp, #8]
 800f046:	9301      	str	r3, [sp, #4]
 800f048:	2302      	movs	r3, #2
 800f04a:	9300      	str	r3, [sp, #0]
 800f04c:	2300      	movs	r3, #0
 800f04e:	460a      	mov	r2, r1
 800f050:	4911      	ldr	r1, [pc, #68]	@ (800f098 <xTimerCreateTimerTask+0x88>)
 800f052:	4812      	ldr	r0, [pc, #72]	@ (800f09c <xTimerCreateTimerTask+0x8c>)
 800f054:	f7fe fe76 	bl	800dd44 <xTaskCreateStatic>
 800f058:	4603      	mov	r3, r0
 800f05a:	4a11      	ldr	r2, [pc, #68]	@ (800f0a0 <xTimerCreateTimerTask+0x90>)
 800f05c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f05e:	4b10      	ldr	r3, [pc, #64]	@ (800f0a0 <xTimerCreateTimerTask+0x90>)
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d001      	beq.n	800f06a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f066:	2301      	movs	r3, #1
 800f068:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f06a:	697b      	ldr	r3, [r7, #20]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d10b      	bne.n	800f088 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800f070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f074:	f383 8811 	msr	BASEPRI, r3
 800f078:	f3bf 8f6f 	isb	sy
 800f07c:	f3bf 8f4f 	dsb	sy
 800f080:	613b      	str	r3, [r7, #16]
}
 800f082:	bf00      	nop
 800f084:	bf00      	nop
 800f086:	e7fd      	b.n	800f084 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f088:	697b      	ldr	r3, [r7, #20]
}
 800f08a:	4618      	mov	r0, r3
 800f08c:	3718      	adds	r7, #24
 800f08e:	46bd      	mov	sp, r7
 800f090:	bd80      	pop	{r7, pc}
 800f092:	bf00      	nop
 800f094:	2400110c 	.word	0x2400110c
 800f098:	08014ef4 	.word	0x08014ef4
 800f09c:	0800f1dd 	.word	0x0800f1dd
 800f0a0:	24001110 	.word	0x24001110

0800f0a4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f0a4:	b580      	push	{r7, lr}
 800f0a6:	b08a      	sub	sp, #40	@ 0x28
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	60f8      	str	r0, [r7, #12]
 800f0ac:	60b9      	str	r1, [r7, #8]
 800f0ae:	607a      	str	r2, [r7, #4]
 800f0b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d10b      	bne.n	800f0d4 <xTimerGenericCommand+0x30>
	__asm volatile
 800f0bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0c0:	f383 8811 	msr	BASEPRI, r3
 800f0c4:	f3bf 8f6f 	isb	sy
 800f0c8:	f3bf 8f4f 	dsb	sy
 800f0cc:	623b      	str	r3, [r7, #32]
}
 800f0ce:	bf00      	nop
 800f0d0:	bf00      	nop
 800f0d2:	e7fd      	b.n	800f0d0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f0d4:	4b19      	ldr	r3, [pc, #100]	@ (800f13c <xTimerGenericCommand+0x98>)
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d02a      	beq.n	800f132 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f0dc:	68bb      	ldr	r3, [r7, #8]
 800f0de:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f0e8:	68bb      	ldr	r3, [r7, #8]
 800f0ea:	2b05      	cmp	r3, #5
 800f0ec:	dc18      	bgt.n	800f120 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f0ee:	f7ff fdad 	bl	800ec4c <xTaskGetSchedulerState>
 800f0f2:	4603      	mov	r3, r0
 800f0f4:	2b02      	cmp	r3, #2
 800f0f6:	d109      	bne.n	800f10c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f0f8:	4b10      	ldr	r3, [pc, #64]	@ (800f13c <xTimerGenericCommand+0x98>)
 800f0fa:	6818      	ldr	r0, [r3, #0]
 800f0fc:	f107 0110 	add.w	r1, r7, #16
 800f100:	2300      	movs	r3, #0
 800f102:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f104:	f7fe f808 	bl	800d118 <xQueueGenericSend>
 800f108:	6278      	str	r0, [r7, #36]	@ 0x24
 800f10a:	e012      	b.n	800f132 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f10c:	4b0b      	ldr	r3, [pc, #44]	@ (800f13c <xTimerGenericCommand+0x98>)
 800f10e:	6818      	ldr	r0, [r3, #0]
 800f110:	f107 0110 	add.w	r1, r7, #16
 800f114:	2300      	movs	r3, #0
 800f116:	2200      	movs	r2, #0
 800f118:	f7fd fffe 	bl	800d118 <xQueueGenericSend>
 800f11c:	6278      	str	r0, [r7, #36]	@ 0x24
 800f11e:	e008      	b.n	800f132 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f120:	4b06      	ldr	r3, [pc, #24]	@ (800f13c <xTimerGenericCommand+0x98>)
 800f122:	6818      	ldr	r0, [r3, #0]
 800f124:	f107 0110 	add.w	r1, r7, #16
 800f128:	2300      	movs	r3, #0
 800f12a:	683a      	ldr	r2, [r7, #0]
 800f12c:	f7fe f8f6 	bl	800d31c <xQueueGenericSendFromISR>
 800f130:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f134:	4618      	mov	r0, r3
 800f136:	3728      	adds	r7, #40	@ 0x28
 800f138:	46bd      	mov	sp, r7
 800f13a:	bd80      	pop	{r7, pc}
 800f13c:	2400110c 	.word	0x2400110c

0800f140 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f140:	b580      	push	{r7, lr}
 800f142:	b088      	sub	sp, #32
 800f144:	af02      	add	r7, sp, #8
 800f146:	6078      	str	r0, [r7, #4]
 800f148:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f14a:	4b23      	ldr	r3, [pc, #140]	@ (800f1d8 <prvProcessExpiredTimer+0x98>)
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	68db      	ldr	r3, [r3, #12]
 800f150:	68db      	ldr	r3, [r3, #12]
 800f152:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f154:	697b      	ldr	r3, [r7, #20]
 800f156:	3304      	adds	r3, #4
 800f158:	4618      	mov	r0, r3
 800f15a:	f7fd fe39 	bl	800cdd0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f15e:	697b      	ldr	r3, [r7, #20]
 800f160:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f164:	f003 0304 	and.w	r3, r3, #4
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d023      	beq.n	800f1b4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f16c:	697b      	ldr	r3, [r7, #20]
 800f16e:	699a      	ldr	r2, [r3, #24]
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	18d1      	adds	r1, r2, r3
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	683a      	ldr	r2, [r7, #0]
 800f178:	6978      	ldr	r0, [r7, #20]
 800f17a:	f000 f8d5 	bl	800f328 <prvInsertTimerInActiveList>
 800f17e:	4603      	mov	r3, r0
 800f180:	2b00      	cmp	r3, #0
 800f182:	d020      	beq.n	800f1c6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f184:	2300      	movs	r3, #0
 800f186:	9300      	str	r3, [sp, #0]
 800f188:	2300      	movs	r3, #0
 800f18a:	687a      	ldr	r2, [r7, #4]
 800f18c:	2100      	movs	r1, #0
 800f18e:	6978      	ldr	r0, [r7, #20]
 800f190:	f7ff ff88 	bl	800f0a4 <xTimerGenericCommand>
 800f194:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f196:	693b      	ldr	r3, [r7, #16]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d114      	bne.n	800f1c6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800f19c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1a0:	f383 8811 	msr	BASEPRI, r3
 800f1a4:	f3bf 8f6f 	isb	sy
 800f1a8:	f3bf 8f4f 	dsb	sy
 800f1ac:	60fb      	str	r3, [r7, #12]
}
 800f1ae:	bf00      	nop
 800f1b0:	bf00      	nop
 800f1b2:	e7fd      	b.n	800f1b0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f1b4:	697b      	ldr	r3, [r7, #20]
 800f1b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f1ba:	f023 0301 	bic.w	r3, r3, #1
 800f1be:	b2da      	uxtb	r2, r3
 800f1c0:	697b      	ldr	r3, [r7, #20]
 800f1c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f1c6:	697b      	ldr	r3, [r7, #20]
 800f1c8:	6a1b      	ldr	r3, [r3, #32]
 800f1ca:	6978      	ldr	r0, [r7, #20]
 800f1cc:	4798      	blx	r3
}
 800f1ce:	bf00      	nop
 800f1d0:	3718      	adds	r7, #24
 800f1d2:	46bd      	mov	sp, r7
 800f1d4:	bd80      	pop	{r7, pc}
 800f1d6:	bf00      	nop
 800f1d8:	24001104 	.word	0x24001104

0800f1dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	b084      	sub	sp, #16
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f1e4:	f107 0308 	add.w	r3, r7, #8
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	f000 f859 	bl	800f2a0 <prvGetNextExpireTime>
 800f1ee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f1f0:	68bb      	ldr	r3, [r7, #8]
 800f1f2:	4619      	mov	r1, r3
 800f1f4:	68f8      	ldr	r0, [r7, #12]
 800f1f6:	f000 f805 	bl	800f204 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f1fa:	f000 f8d7 	bl	800f3ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f1fe:	bf00      	nop
 800f200:	e7f0      	b.n	800f1e4 <prvTimerTask+0x8>
	...

0800f204 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f204:	b580      	push	{r7, lr}
 800f206:	b084      	sub	sp, #16
 800f208:	af00      	add	r7, sp, #0
 800f20a:	6078      	str	r0, [r7, #4]
 800f20c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f20e:	f7ff f871 	bl	800e2f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f212:	f107 0308 	add.w	r3, r7, #8
 800f216:	4618      	mov	r0, r3
 800f218:	f000 f866 	bl	800f2e8 <prvSampleTimeNow>
 800f21c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f21e:	68bb      	ldr	r3, [r7, #8]
 800f220:	2b00      	cmp	r3, #0
 800f222:	d130      	bne.n	800f286 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f224:	683b      	ldr	r3, [r7, #0]
 800f226:	2b00      	cmp	r3, #0
 800f228:	d10a      	bne.n	800f240 <prvProcessTimerOrBlockTask+0x3c>
 800f22a:	687a      	ldr	r2, [r7, #4]
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	429a      	cmp	r2, r3
 800f230:	d806      	bhi.n	800f240 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f232:	f7ff f8a5 	bl	800e380 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f236:	68f9      	ldr	r1, [r7, #12]
 800f238:	6878      	ldr	r0, [r7, #4]
 800f23a:	f7ff ff81 	bl	800f140 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f23e:	e024      	b.n	800f28a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f240:	683b      	ldr	r3, [r7, #0]
 800f242:	2b00      	cmp	r3, #0
 800f244:	d008      	beq.n	800f258 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f246:	4b13      	ldr	r3, [pc, #76]	@ (800f294 <prvProcessTimerOrBlockTask+0x90>)
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d101      	bne.n	800f254 <prvProcessTimerOrBlockTask+0x50>
 800f250:	2301      	movs	r3, #1
 800f252:	e000      	b.n	800f256 <prvProcessTimerOrBlockTask+0x52>
 800f254:	2300      	movs	r3, #0
 800f256:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f258:	4b0f      	ldr	r3, [pc, #60]	@ (800f298 <prvProcessTimerOrBlockTask+0x94>)
 800f25a:	6818      	ldr	r0, [r3, #0]
 800f25c:	687a      	ldr	r2, [r7, #4]
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	1ad3      	subs	r3, r2, r3
 800f262:	683a      	ldr	r2, [r7, #0]
 800f264:	4619      	mov	r1, r3
 800f266:	f7fe fd39 	bl	800dcdc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f26a:	f7ff f889 	bl	800e380 <xTaskResumeAll>
 800f26e:	4603      	mov	r3, r0
 800f270:	2b00      	cmp	r3, #0
 800f272:	d10a      	bne.n	800f28a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f274:	4b09      	ldr	r3, [pc, #36]	@ (800f29c <prvProcessTimerOrBlockTask+0x98>)
 800f276:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f27a:	601a      	str	r2, [r3, #0]
 800f27c:	f3bf 8f4f 	dsb	sy
 800f280:	f3bf 8f6f 	isb	sy
}
 800f284:	e001      	b.n	800f28a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f286:	f7ff f87b 	bl	800e380 <xTaskResumeAll>
}
 800f28a:	bf00      	nop
 800f28c:	3710      	adds	r7, #16
 800f28e:	46bd      	mov	sp, r7
 800f290:	bd80      	pop	{r7, pc}
 800f292:	bf00      	nop
 800f294:	24001108 	.word	0x24001108
 800f298:	2400110c 	.word	0x2400110c
 800f29c:	e000ed04 	.word	0xe000ed04

0800f2a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f2a0:	b480      	push	{r7}
 800f2a2:	b085      	sub	sp, #20
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f2a8:	4b0e      	ldr	r3, [pc, #56]	@ (800f2e4 <prvGetNextExpireTime+0x44>)
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d101      	bne.n	800f2b6 <prvGetNextExpireTime+0x16>
 800f2b2:	2201      	movs	r2, #1
 800f2b4:	e000      	b.n	800f2b8 <prvGetNextExpireTime+0x18>
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d105      	bne.n	800f2d0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f2c4:	4b07      	ldr	r3, [pc, #28]	@ (800f2e4 <prvGetNextExpireTime+0x44>)
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	68db      	ldr	r3, [r3, #12]
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	60fb      	str	r3, [r7, #12]
 800f2ce:	e001      	b.n	800f2d4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f2d0:	2300      	movs	r3, #0
 800f2d2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f2d4:	68fb      	ldr	r3, [r7, #12]
}
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	3714      	adds	r7, #20
 800f2da:	46bd      	mov	sp, r7
 800f2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e0:	4770      	bx	lr
 800f2e2:	bf00      	nop
 800f2e4:	24001104 	.word	0x24001104

0800f2e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f2e8:	b580      	push	{r7, lr}
 800f2ea:	b084      	sub	sp, #16
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f2f0:	f7ff f8e4 	bl	800e4bc <xTaskGetTickCount>
 800f2f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f2f6:	4b0b      	ldr	r3, [pc, #44]	@ (800f324 <prvSampleTimeNow+0x3c>)
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	68fa      	ldr	r2, [r7, #12]
 800f2fc:	429a      	cmp	r2, r3
 800f2fe:	d205      	bcs.n	800f30c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f300:	f000 f93a 	bl	800f578 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	2201      	movs	r2, #1
 800f308:	601a      	str	r2, [r3, #0]
 800f30a:	e002      	b.n	800f312 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	2200      	movs	r2, #0
 800f310:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f312:	4a04      	ldr	r2, [pc, #16]	@ (800f324 <prvSampleTimeNow+0x3c>)
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f318:	68fb      	ldr	r3, [r7, #12]
}
 800f31a:	4618      	mov	r0, r3
 800f31c:	3710      	adds	r7, #16
 800f31e:	46bd      	mov	sp, r7
 800f320:	bd80      	pop	{r7, pc}
 800f322:	bf00      	nop
 800f324:	24001114 	.word	0x24001114

0800f328 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f328:	b580      	push	{r7, lr}
 800f32a:	b086      	sub	sp, #24
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	60f8      	str	r0, [r7, #12]
 800f330:	60b9      	str	r1, [r7, #8]
 800f332:	607a      	str	r2, [r7, #4]
 800f334:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f336:	2300      	movs	r3, #0
 800f338:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	68ba      	ldr	r2, [r7, #8]
 800f33e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	68fa      	ldr	r2, [r7, #12]
 800f344:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f346:	68ba      	ldr	r2, [r7, #8]
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	429a      	cmp	r2, r3
 800f34c:	d812      	bhi.n	800f374 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f34e:	687a      	ldr	r2, [r7, #4]
 800f350:	683b      	ldr	r3, [r7, #0]
 800f352:	1ad2      	subs	r2, r2, r3
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	699b      	ldr	r3, [r3, #24]
 800f358:	429a      	cmp	r2, r3
 800f35a:	d302      	bcc.n	800f362 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f35c:	2301      	movs	r3, #1
 800f35e:	617b      	str	r3, [r7, #20]
 800f360:	e01b      	b.n	800f39a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f362:	4b10      	ldr	r3, [pc, #64]	@ (800f3a4 <prvInsertTimerInActiveList+0x7c>)
 800f364:	681a      	ldr	r2, [r3, #0]
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	3304      	adds	r3, #4
 800f36a:	4619      	mov	r1, r3
 800f36c:	4610      	mov	r0, r2
 800f36e:	f7fd fcf6 	bl	800cd5e <vListInsert>
 800f372:	e012      	b.n	800f39a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f374:	687a      	ldr	r2, [r7, #4]
 800f376:	683b      	ldr	r3, [r7, #0]
 800f378:	429a      	cmp	r2, r3
 800f37a:	d206      	bcs.n	800f38a <prvInsertTimerInActiveList+0x62>
 800f37c:	68ba      	ldr	r2, [r7, #8]
 800f37e:	683b      	ldr	r3, [r7, #0]
 800f380:	429a      	cmp	r2, r3
 800f382:	d302      	bcc.n	800f38a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f384:	2301      	movs	r3, #1
 800f386:	617b      	str	r3, [r7, #20]
 800f388:	e007      	b.n	800f39a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f38a:	4b07      	ldr	r3, [pc, #28]	@ (800f3a8 <prvInsertTimerInActiveList+0x80>)
 800f38c:	681a      	ldr	r2, [r3, #0]
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	3304      	adds	r3, #4
 800f392:	4619      	mov	r1, r3
 800f394:	4610      	mov	r0, r2
 800f396:	f7fd fce2 	bl	800cd5e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f39a:	697b      	ldr	r3, [r7, #20]
}
 800f39c:	4618      	mov	r0, r3
 800f39e:	3718      	adds	r7, #24
 800f3a0:	46bd      	mov	sp, r7
 800f3a2:	bd80      	pop	{r7, pc}
 800f3a4:	24001108 	.word	0x24001108
 800f3a8:	24001104 	.word	0x24001104

0800f3ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	b08e      	sub	sp, #56	@ 0x38
 800f3b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f3b2:	e0ce      	b.n	800f552 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	da19      	bge.n	800f3ee <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f3ba:	1d3b      	adds	r3, r7, #4
 800f3bc:	3304      	adds	r3, #4
 800f3be:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f3c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d10b      	bne.n	800f3de <prvProcessReceivedCommands+0x32>
	__asm volatile
 800f3c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3ca:	f383 8811 	msr	BASEPRI, r3
 800f3ce:	f3bf 8f6f 	isb	sy
 800f3d2:	f3bf 8f4f 	dsb	sy
 800f3d6:	61fb      	str	r3, [r7, #28]
}
 800f3d8:	bf00      	nop
 800f3da:	bf00      	nop
 800f3dc:	e7fd      	b.n	800f3da <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f3de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f3e4:	6850      	ldr	r0, [r2, #4]
 800f3e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f3e8:	6892      	ldr	r2, [r2, #8]
 800f3ea:	4611      	mov	r1, r2
 800f3ec:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	f2c0 80ae 	blt.w	800f552 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f3fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3fc:	695b      	ldr	r3, [r3, #20]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d004      	beq.n	800f40c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f404:	3304      	adds	r3, #4
 800f406:	4618      	mov	r0, r3
 800f408:	f7fd fce2 	bl	800cdd0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f40c:	463b      	mov	r3, r7
 800f40e:	4618      	mov	r0, r3
 800f410:	f7ff ff6a 	bl	800f2e8 <prvSampleTimeNow>
 800f414:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	2b09      	cmp	r3, #9
 800f41a:	f200 8097 	bhi.w	800f54c <prvProcessReceivedCommands+0x1a0>
 800f41e:	a201      	add	r2, pc, #4	@ (adr r2, 800f424 <prvProcessReceivedCommands+0x78>)
 800f420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f424:	0800f44d 	.word	0x0800f44d
 800f428:	0800f44d 	.word	0x0800f44d
 800f42c:	0800f44d 	.word	0x0800f44d
 800f430:	0800f4c3 	.word	0x0800f4c3
 800f434:	0800f4d7 	.word	0x0800f4d7
 800f438:	0800f523 	.word	0x0800f523
 800f43c:	0800f44d 	.word	0x0800f44d
 800f440:	0800f44d 	.word	0x0800f44d
 800f444:	0800f4c3 	.word	0x0800f4c3
 800f448:	0800f4d7 	.word	0x0800f4d7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f44c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f44e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f452:	f043 0301 	orr.w	r3, r3, #1
 800f456:	b2da      	uxtb	r2, r3
 800f458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f45a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f45e:	68ba      	ldr	r2, [r7, #8]
 800f460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f462:	699b      	ldr	r3, [r3, #24]
 800f464:	18d1      	adds	r1, r2, r3
 800f466:	68bb      	ldr	r3, [r7, #8]
 800f468:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f46a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f46c:	f7ff ff5c 	bl	800f328 <prvInsertTimerInActiveList>
 800f470:	4603      	mov	r3, r0
 800f472:	2b00      	cmp	r3, #0
 800f474:	d06c      	beq.n	800f550 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f478:	6a1b      	ldr	r3, [r3, #32]
 800f47a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f47c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f47e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f480:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f484:	f003 0304 	and.w	r3, r3, #4
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d061      	beq.n	800f550 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f48c:	68ba      	ldr	r2, [r7, #8]
 800f48e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f490:	699b      	ldr	r3, [r3, #24]
 800f492:	441a      	add	r2, r3
 800f494:	2300      	movs	r3, #0
 800f496:	9300      	str	r3, [sp, #0]
 800f498:	2300      	movs	r3, #0
 800f49a:	2100      	movs	r1, #0
 800f49c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f49e:	f7ff fe01 	bl	800f0a4 <xTimerGenericCommand>
 800f4a2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f4a4:	6a3b      	ldr	r3, [r7, #32]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d152      	bne.n	800f550 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800f4aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4ae:	f383 8811 	msr	BASEPRI, r3
 800f4b2:	f3bf 8f6f 	isb	sy
 800f4b6:	f3bf 8f4f 	dsb	sy
 800f4ba:	61bb      	str	r3, [r7, #24]
}
 800f4bc:	bf00      	nop
 800f4be:	bf00      	nop
 800f4c0:	e7fd      	b.n	800f4be <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f4c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f4c8:	f023 0301 	bic.w	r3, r3, #1
 800f4cc:	b2da      	uxtb	r2, r3
 800f4ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4d0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f4d4:	e03d      	b.n	800f552 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f4d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f4dc:	f043 0301 	orr.w	r3, r3, #1
 800f4e0:	b2da      	uxtb	r2, r3
 800f4e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4e4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f4e8:	68ba      	ldr	r2, [r7, #8]
 800f4ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4ec:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f4ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4f0:	699b      	ldr	r3, [r3, #24]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d10b      	bne.n	800f50e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800f4f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4fa:	f383 8811 	msr	BASEPRI, r3
 800f4fe:	f3bf 8f6f 	isb	sy
 800f502:	f3bf 8f4f 	dsb	sy
 800f506:	617b      	str	r3, [r7, #20]
}
 800f508:	bf00      	nop
 800f50a:	bf00      	nop
 800f50c:	e7fd      	b.n	800f50a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f50e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f510:	699a      	ldr	r2, [r3, #24]
 800f512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f514:	18d1      	adds	r1, r2, r3
 800f516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f518:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f51a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f51c:	f7ff ff04 	bl	800f328 <prvInsertTimerInActiveList>
					break;
 800f520:	e017      	b.n	800f552 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f524:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f528:	f003 0302 	and.w	r3, r3, #2
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d103      	bne.n	800f538 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800f530:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f532:	f000 fccd 	bl	800fed0 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f536:	e00c      	b.n	800f552 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f53a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f53e:	f023 0301 	bic.w	r3, r3, #1
 800f542:	b2da      	uxtb	r2, r3
 800f544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f546:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f54a:	e002      	b.n	800f552 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800f54c:	bf00      	nop
 800f54e:	e000      	b.n	800f552 <prvProcessReceivedCommands+0x1a6>
					break;
 800f550:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f552:	4b08      	ldr	r3, [pc, #32]	@ (800f574 <prvProcessReceivedCommands+0x1c8>)
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	1d39      	adds	r1, r7, #4
 800f558:	2200      	movs	r2, #0
 800f55a:	4618      	mov	r0, r3
 800f55c:	f7fe f80c 	bl	800d578 <xQueueReceive>
 800f560:	4603      	mov	r3, r0
 800f562:	2b00      	cmp	r3, #0
 800f564:	f47f af26 	bne.w	800f3b4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800f568:	bf00      	nop
 800f56a:	bf00      	nop
 800f56c:	3730      	adds	r7, #48	@ 0x30
 800f56e:	46bd      	mov	sp, r7
 800f570:	bd80      	pop	{r7, pc}
 800f572:	bf00      	nop
 800f574:	2400110c 	.word	0x2400110c

0800f578 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f578:	b580      	push	{r7, lr}
 800f57a:	b088      	sub	sp, #32
 800f57c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f57e:	e049      	b.n	800f614 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f580:	4b2e      	ldr	r3, [pc, #184]	@ (800f63c <prvSwitchTimerLists+0xc4>)
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	68db      	ldr	r3, [r3, #12]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f58a:	4b2c      	ldr	r3, [pc, #176]	@ (800f63c <prvSwitchTimerLists+0xc4>)
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	68db      	ldr	r3, [r3, #12]
 800f590:	68db      	ldr	r3, [r3, #12]
 800f592:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	3304      	adds	r3, #4
 800f598:	4618      	mov	r0, r3
 800f59a:	f7fd fc19 	bl	800cdd0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	6a1b      	ldr	r3, [r3, #32]
 800f5a2:	68f8      	ldr	r0, [r7, #12]
 800f5a4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f5ac:	f003 0304 	and.w	r3, r3, #4
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d02f      	beq.n	800f614 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	699b      	ldr	r3, [r3, #24]
 800f5b8:	693a      	ldr	r2, [r7, #16]
 800f5ba:	4413      	add	r3, r2
 800f5bc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f5be:	68ba      	ldr	r2, [r7, #8]
 800f5c0:	693b      	ldr	r3, [r7, #16]
 800f5c2:	429a      	cmp	r2, r3
 800f5c4:	d90e      	bls.n	800f5e4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	68ba      	ldr	r2, [r7, #8]
 800f5ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	68fa      	ldr	r2, [r7, #12]
 800f5d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f5d2:	4b1a      	ldr	r3, [pc, #104]	@ (800f63c <prvSwitchTimerLists+0xc4>)
 800f5d4:	681a      	ldr	r2, [r3, #0]
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	3304      	adds	r3, #4
 800f5da:	4619      	mov	r1, r3
 800f5dc:	4610      	mov	r0, r2
 800f5de:	f7fd fbbe 	bl	800cd5e <vListInsert>
 800f5e2:	e017      	b.n	800f614 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	9300      	str	r3, [sp, #0]
 800f5e8:	2300      	movs	r3, #0
 800f5ea:	693a      	ldr	r2, [r7, #16]
 800f5ec:	2100      	movs	r1, #0
 800f5ee:	68f8      	ldr	r0, [r7, #12]
 800f5f0:	f7ff fd58 	bl	800f0a4 <xTimerGenericCommand>
 800f5f4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d10b      	bne.n	800f614 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800f5fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f600:	f383 8811 	msr	BASEPRI, r3
 800f604:	f3bf 8f6f 	isb	sy
 800f608:	f3bf 8f4f 	dsb	sy
 800f60c:	603b      	str	r3, [r7, #0]
}
 800f60e:	bf00      	nop
 800f610:	bf00      	nop
 800f612:	e7fd      	b.n	800f610 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f614:	4b09      	ldr	r3, [pc, #36]	@ (800f63c <prvSwitchTimerLists+0xc4>)
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d1b0      	bne.n	800f580 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f61e:	4b07      	ldr	r3, [pc, #28]	@ (800f63c <prvSwitchTimerLists+0xc4>)
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f624:	4b06      	ldr	r3, [pc, #24]	@ (800f640 <prvSwitchTimerLists+0xc8>)
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	4a04      	ldr	r2, [pc, #16]	@ (800f63c <prvSwitchTimerLists+0xc4>)
 800f62a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f62c:	4a04      	ldr	r2, [pc, #16]	@ (800f640 <prvSwitchTimerLists+0xc8>)
 800f62e:	697b      	ldr	r3, [r7, #20]
 800f630:	6013      	str	r3, [r2, #0]
}
 800f632:	bf00      	nop
 800f634:	3718      	adds	r7, #24
 800f636:	46bd      	mov	sp, r7
 800f638:	bd80      	pop	{r7, pc}
 800f63a:	bf00      	nop
 800f63c:	24001104 	.word	0x24001104
 800f640:	24001108 	.word	0x24001108

0800f644 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f644:	b580      	push	{r7, lr}
 800f646:	b082      	sub	sp, #8
 800f648:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f64a:	f000 f96d 	bl	800f928 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f64e:	4b15      	ldr	r3, [pc, #84]	@ (800f6a4 <prvCheckForValidListAndQueue+0x60>)
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d120      	bne.n	800f698 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f656:	4814      	ldr	r0, [pc, #80]	@ (800f6a8 <prvCheckForValidListAndQueue+0x64>)
 800f658:	f7fd fb30 	bl	800ccbc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f65c:	4813      	ldr	r0, [pc, #76]	@ (800f6ac <prvCheckForValidListAndQueue+0x68>)
 800f65e:	f7fd fb2d 	bl	800ccbc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f662:	4b13      	ldr	r3, [pc, #76]	@ (800f6b0 <prvCheckForValidListAndQueue+0x6c>)
 800f664:	4a10      	ldr	r2, [pc, #64]	@ (800f6a8 <prvCheckForValidListAndQueue+0x64>)
 800f666:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f668:	4b12      	ldr	r3, [pc, #72]	@ (800f6b4 <prvCheckForValidListAndQueue+0x70>)
 800f66a:	4a10      	ldr	r2, [pc, #64]	@ (800f6ac <prvCheckForValidListAndQueue+0x68>)
 800f66c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f66e:	2300      	movs	r3, #0
 800f670:	9300      	str	r3, [sp, #0]
 800f672:	4b11      	ldr	r3, [pc, #68]	@ (800f6b8 <prvCheckForValidListAndQueue+0x74>)
 800f674:	4a11      	ldr	r2, [pc, #68]	@ (800f6bc <prvCheckForValidListAndQueue+0x78>)
 800f676:	2110      	movs	r1, #16
 800f678:	200a      	movs	r0, #10
 800f67a:	f7fd fc3d 	bl	800cef8 <xQueueGenericCreateStatic>
 800f67e:	4603      	mov	r3, r0
 800f680:	4a08      	ldr	r2, [pc, #32]	@ (800f6a4 <prvCheckForValidListAndQueue+0x60>)
 800f682:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f684:	4b07      	ldr	r3, [pc, #28]	@ (800f6a4 <prvCheckForValidListAndQueue+0x60>)
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d005      	beq.n	800f698 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f68c:	4b05      	ldr	r3, [pc, #20]	@ (800f6a4 <prvCheckForValidListAndQueue+0x60>)
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	490b      	ldr	r1, [pc, #44]	@ (800f6c0 <prvCheckForValidListAndQueue+0x7c>)
 800f692:	4618      	mov	r0, r3
 800f694:	f7fe face 	bl	800dc34 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f698:	f000 f978 	bl	800f98c <vPortExitCritical>
}
 800f69c:	bf00      	nop
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	bd80      	pop	{r7, pc}
 800f6a2:	bf00      	nop
 800f6a4:	2400110c 	.word	0x2400110c
 800f6a8:	240010dc 	.word	0x240010dc
 800f6ac:	240010f0 	.word	0x240010f0
 800f6b0:	24001104 	.word	0x24001104
 800f6b4:	24001108 	.word	0x24001108
 800f6b8:	240011b8 	.word	0x240011b8
 800f6bc:	24001118 	.word	0x24001118
 800f6c0:	08014efc 	.word	0x08014efc

0800f6c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f6c4:	b480      	push	{r7}
 800f6c6:	b085      	sub	sp, #20
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	60f8      	str	r0, [r7, #12]
 800f6cc:	60b9      	str	r1, [r7, #8]
 800f6ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	3b04      	subs	r3, #4
 800f6d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800f6dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	3b04      	subs	r3, #4
 800f6e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f6e4:	68bb      	ldr	r3, [r7, #8]
 800f6e6:	f023 0201 	bic.w	r2, r3, #1
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	3b04      	subs	r3, #4
 800f6f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f6f4:	4a0c      	ldr	r2, [pc, #48]	@ (800f728 <pxPortInitialiseStack+0x64>)
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	3b14      	subs	r3, #20
 800f6fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f700:	687a      	ldr	r2, [r7, #4]
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	3b04      	subs	r3, #4
 800f70a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	f06f 0202 	mvn.w	r2, #2
 800f712:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	3b20      	subs	r3, #32
 800f718:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f71a:	68fb      	ldr	r3, [r7, #12]
}
 800f71c:	4618      	mov	r0, r3
 800f71e:	3714      	adds	r7, #20
 800f720:	46bd      	mov	sp, r7
 800f722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f726:	4770      	bx	lr
 800f728:	0800f72d 	.word	0x0800f72d

0800f72c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f72c:	b480      	push	{r7}
 800f72e:	b085      	sub	sp, #20
 800f730:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f732:	2300      	movs	r3, #0
 800f734:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f736:	4b13      	ldr	r3, [pc, #76]	@ (800f784 <prvTaskExitError+0x58>)
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f73e:	d00b      	beq.n	800f758 <prvTaskExitError+0x2c>
	__asm volatile
 800f740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f744:	f383 8811 	msr	BASEPRI, r3
 800f748:	f3bf 8f6f 	isb	sy
 800f74c:	f3bf 8f4f 	dsb	sy
 800f750:	60fb      	str	r3, [r7, #12]
}
 800f752:	bf00      	nop
 800f754:	bf00      	nop
 800f756:	e7fd      	b.n	800f754 <prvTaskExitError+0x28>
	__asm volatile
 800f758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f75c:	f383 8811 	msr	BASEPRI, r3
 800f760:	f3bf 8f6f 	isb	sy
 800f764:	f3bf 8f4f 	dsb	sy
 800f768:	60bb      	str	r3, [r7, #8]
}
 800f76a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f76c:	bf00      	nop
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d0fc      	beq.n	800f76e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f774:	bf00      	nop
 800f776:	bf00      	nop
 800f778:	3714      	adds	r7, #20
 800f77a:	46bd      	mov	sp, r7
 800f77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f780:	4770      	bx	lr
 800f782:	bf00      	nop
 800f784:	24000010 	.word	0x24000010
	...

0800f790 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f790:	4b07      	ldr	r3, [pc, #28]	@ (800f7b0 <pxCurrentTCBConst2>)
 800f792:	6819      	ldr	r1, [r3, #0]
 800f794:	6808      	ldr	r0, [r1, #0]
 800f796:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f79a:	f380 8809 	msr	PSP, r0
 800f79e:	f3bf 8f6f 	isb	sy
 800f7a2:	f04f 0000 	mov.w	r0, #0
 800f7a6:	f380 8811 	msr	BASEPRI, r0
 800f7aa:	4770      	bx	lr
 800f7ac:	f3af 8000 	nop.w

0800f7b0 <pxCurrentTCBConst2>:
 800f7b0:	24000bdc 	.word	0x24000bdc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f7b4:	bf00      	nop
 800f7b6:	bf00      	nop

0800f7b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f7b8:	4808      	ldr	r0, [pc, #32]	@ (800f7dc <prvPortStartFirstTask+0x24>)
 800f7ba:	6800      	ldr	r0, [r0, #0]
 800f7bc:	6800      	ldr	r0, [r0, #0]
 800f7be:	f380 8808 	msr	MSP, r0
 800f7c2:	f04f 0000 	mov.w	r0, #0
 800f7c6:	f380 8814 	msr	CONTROL, r0
 800f7ca:	b662      	cpsie	i
 800f7cc:	b661      	cpsie	f
 800f7ce:	f3bf 8f4f 	dsb	sy
 800f7d2:	f3bf 8f6f 	isb	sy
 800f7d6:	df00      	svc	0
 800f7d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f7da:	bf00      	nop
 800f7dc:	e000ed08 	.word	0xe000ed08

0800f7e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f7e0:	b580      	push	{r7, lr}
 800f7e2:	b086      	sub	sp, #24
 800f7e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f7e6:	4b47      	ldr	r3, [pc, #284]	@ (800f904 <xPortStartScheduler+0x124>)
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	4a47      	ldr	r2, [pc, #284]	@ (800f908 <xPortStartScheduler+0x128>)
 800f7ec:	4293      	cmp	r3, r2
 800f7ee:	d10b      	bne.n	800f808 <xPortStartScheduler+0x28>
	__asm volatile
 800f7f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7f4:	f383 8811 	msr	BASEPRI, r3
 800f7f8:	f3bf 8f6f 	isb	sy
 800f7fc:	f3bf 8f4f 	dsb	sy
 800f800:	613b      	str	r3, [r7, #16]
}
 800f802:	bf00      	nop
 800f804:	bf00      	nop
 800f806:	e7fd      	b.n	800f804 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f808:	4b3e      	ldr	r3, [pc, #248]	@ (800f904 <xPortStartScheduler+0x124>)
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	4a3f      	ldr	r2, [pc, #252]	@ (800f90c <xPortStartScheduler+0x12c>)
 800f80e:	4293      	cmp	r3, r2
 800f810:	d10b      	bne.n	800f82a <xPortStartScheduler+0x4a>
	__asm volatile
 800f812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f816:	f383 8811 	msr	BASEPRI, r3
 800f81a:	f3bf 8f6f 	isb	sy
 800f81e:	f3bf 8f4f 	dsb	sy
 800f822:	60fb      	str	r3, [r7, #12]
}
 800f824:	bf00      	nop
 800f826:	bf00      	nop
 800f828:	e7fd      	b.n	800f826 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f82a:	4b39      	ldr	r3, [pc, #228]	@ (800f910 <xPortStartScheduler+0x130>)
 800f82c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f82e:	697b      	ldr	r3, [r7, #20]
 800f830:	781b      	ldrb	r3, [r3, #0]
 800f832:	b2db      	uxtb	r3, r3
 800f834:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f836:	697b      	ldr	r3, [r7, #20]
 800f838:	22ff      	movs	r2, #255	@ 0xff
 800f83a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f83c:	697b      	ldr	r3, [r7, #20]
 800f83e:	781b      	ldrb	r3, [r3, #0]
 800f840:	b2db      	uxtb	r3, r3
 800f842:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f844:	78fb      	ldrb	r3, [r7, #3]
 800f846:	b2db      	uxtb	r3, r3
 800f848:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800f84c:	b2da      	uxtb	r2, r3
 800f84e:	4b31      	ldr	r3, [pc, #196]	@ (800f914 <xPortStartScheduler+0x134>)
 800f850:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f852:	4b31      	ldr	r3, [pc, #196]	@ (800f918 <xPortStartScheduler+0x138>)
 800f854:	2207      	movs	r2, #7
 800f856:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f858:	e009      	b.n	800f86e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800f85a:	4b2f      	ldr	r3, [pc, #188]	@ (800f918 <xPortStartScheduler+0x138>)
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	3b01      	subs	r3, #1
 800f860:	4a2d      	ldr	r2, [pc, #180]	@ (800f918 <xPortStartScheduler+0x138>)
 800f862:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f864:	78fb      	ldrb	r3, [r7, #3]
 800f866:	b2db      	uxtb	r3, r3
 800f868:	005b      	lsls	r3, r3, #1
 800f86a:	b2db      	uxtb	r3, r3
 800f86c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f86e:	78fb      	ldrb	r3, [r7, #3]
 800f870:	b2db      	uxtb	r3, r3
 800f872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f876:	2b80      	cmp	r3, #128	@ 0x80
 800f878:	d0ef      	beq.n	800f85a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f87a:	4b27      	ldr	r3, [pc, #156]	@ (800f918 <xPortStartScheduler+0x138>)
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	f1c3 0307 	rsb	r3, r3, #7
 800f882:	2b04      	cmp	r3, #4
 800f884:	d00b      	beq.n	800f89e <xPortStartScheduler+0xbe>
	__asm volatile
 800f886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f88a:	f383 8811 	msr	BASEPRI, r3
 800f88e:	f3bf 8f6f 	isb	sy
 800f892:	f3bf 8f4f 	dsb	sy
 800f896:	60bb      	str	r3, [r7, #8]
}
 800f898:	bf00      	nop
 800f89a:	bf00      	nop
 800f89c:	e7fd      	b.n	800f89a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f89e:	4b1e      	ldr	r3, [pc, #120]	@ (800f918 <xPortStartScheduler+0x138>)
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	021b      	lsls	r3, r3, #8
 800f8a4:	4a1c      	ldr	r2, [pc, #112]	@ (800f918 <xPortStartScheduler+0x138>)
 800f8a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f8a8:	4b1b      	ldr	r3, [pc, #108]	@ (800f918 <xPortStartScheduler+0x138>)
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f8b0:	4a19      	ldr	r2, [pc, #100]	@ (800f918 <xPortStartScheduler+0x138>)
 800f8b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	b2da      	uxtb	r2, r3
 800f8b8:	697b      	ldr	r3, [r7, #20]
 800f8ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f8bc:	4b17      	ldr	r3, [pc, #92]	@ (800f91c <xPortStartScheduler+0x13c>)
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	4a16      	ldr	r2, [pc, #88]	@ (800f91c <xPortStartScheduler+0x13c>)
 800f8c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f8c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f8c8:	4b14      	ldr	r3, [pc, #80]	@ (800f91c <xPortStartScheduler+0x13c>)
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	4a13      	ldr	r2, [pc, #76]	@ (800f91c <xPortStartScheduler+0x13c>)
 800f8ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800f8d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f8d4:	f000 f9a6 	bl	800fc24 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f8d8:	4b11      	ldr	r3, [pc, #68]	@ (800f920 <xPortStartScheduler+0x140>)
 800f8da:	2200      	movs	r2, #0
 800f8dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f8de:	f000 f9dd 	bl	800fc9c <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f8e2:	4b10      	ldr	r3, [pc, #64]	@ (800f924 <xPortStartScheduler+0x144>)
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	4a0f      	ldr	r2, [pc, #60]	@ (800f924 <xPortStartScheduler+0x144>)
 800f8e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800f8ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f8ee:	f7ff ff63 	bl	800f7b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f8f2:	f7fe fed5 	bl	800e6a0 <vTaskSwitchContext>
	prvTaskExitError();
 800f8f6:	f7ff ff19 	bl	800f72c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f8fa:	2300      	movs	r3, #0
}
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	3718      	adds	r7, #24
 800f900:	46bd      	mov	sp, r7
 800f902:	bd80      	pop	{r7, pc}
 800f904:	e000ed00 	.word	0xe000ed00
 800f908:	410fc271 	.word	0x410fc271
 800f90c:	410fc270 	.word	0x410fc270
 800f910:	e000e400 	.word	0xe000e400
 800f914:	24001214 	.word	0x24001214
 800f918:	24001218 	.word	0x24001218
 800f91c:	e000ed20 	.word	0xe000ed20
 800f920:	24000010 	.word	0x24000010
 800f924:	e000ef34 	.word	0xe000ef34

0800f928 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f928:	b480      	push	{r7}
 800f92a:	b083      	sub	sp, #12
 800f92c:	af00      	add	r7, sp, #0
	__asm volatile
 800f92e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f932:	f383 8811 	msr	BASEPRI, r3
 800f936:	f3bf 8f6f 	isb	sy
 800f93a:	f3bf 8f4f 	dsb	sy
 800f93e:	607b      	str	r3, [r7, #4]
}
 800f940:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f942:	4b10      	ldr	r3, [pc, #64]	@ (800f984 <vPortEnterCritical+0x5c>)
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	3301      	adds	r3, #1
 800f948:	4a0e      	ldr	r2, [pc, #56]	@ (800f984 <vPortEnterCritical+0x5c>)
 800f94a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f94c:	4b0d      	ldr	r3, [pc, #52]	@ (800f984 <vPortEnterCritical+0x5c>)
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	2b01      	cmp	r3, #1
 800f952:	d110      	bne.n	800f976 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f954:	4b0c      	ldr	r3, [pc, #48]	@ (800f988 <vPortEnterCritical+0x60>)
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	b2db      	uxtb	r3, r3
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d00b      	beq.n	800f976 <vPortEnterCritical+0x4e>
	__asm volatile
 800f95e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f962:	f383 8811 	msr	BASEPRI, r3
 800f966:	f3bf 8f6f 	isb	sy
 800f96a:	f3bf 8f4f 	dsb	sy
 800f96e:	603b      	str	r3, [r7, #0]
}
 800f970:	bf00      	nop
 800f972:	bf00      	nop
 800f974:	e7fd      	b.n	800f972 <vPortEnterCritical+0x4a>
	}
}
 800f976:	bf00      	nop
 800f978:	370c      	adds	r7, #12
 800f97a:	46bd      	mov	sp, r7
 800f97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f980:	4770      	bx	lr
 800f982:	bf00      	nop
 800f984:	24000010 	.word	0x24000010
 800f988:	e000ed04 	.word	0xe000ed04

0800f98c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f98c:	b480      	push	{r7}
 800f98e:	b083      	sub	sp, #12
 800f990:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f992:	4b12      	ldr	r3, [pc, #72]	@ (800f9dc <vPortExitCritical+0x50>)
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d10b      	bne.n	800f9b2 <vPortExitCritical+0x26>
	__asm volatile
 800f99a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f99e:	f383 8811 	msr	BASEPRI, r3
 800f9a2:	f3bf 8f6f 	isb	sy
 800f9a6:	f3bf 8f4f 	dsb	sy
 800f9aa:	607b      	str	r3, [r7, #4]
}
 800f9ac:	bf00      	nop
 800f9ae:	bf00      	nop
 800f9b0:	e7fd      	b.n	800f9ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f9b2:	4b0a      	ldr	r3, [pc, #40]	@ (800f9dc <vPortExitCritical+0x50>)
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	3b01      	subs	r3, #1
 800f9b8:	4a08      	ldr	r2, [pc, #32]	@ (800f9dc <vPortExitCritical+0x50>)
 800f9ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f9bc:	4b07      	ldr	r3, [pc, #28]	@ (800f9dc <vPortExitCritical+0x50>)
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d105      	bne.n	800f9d0 <vPortExitCritical+0x44>
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f9c8:	683b      	ldr	r3, [r7, #0]
 800f9ca:	f383 8811 	msr	BASEPRI, r3
}
 800f9ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f9d0:	bf00      	nop
 800f9d2:	370c      	adds	r7, #12
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9da:	4770      	bx	lr
 800f9dc:	24000010 	.word	0x24000010

0800f9e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f9e0:	f3ef 8009 	mrs	r0, PSP
 800f9e4:	f3bf 8f6f 	isb	sy
 800f9e8:	4b15      	ldr	r3, [pc, #84]	@ (800fa40 <pxCurrentTCBConst>)
 800f9ea:	681a      	ldr	r2, [r3, #0]
 800f9ec:	f01e 0f10 	tst.w	lr, #16
 800f9f0:	bf08      	it	eq
 800f9f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f9f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9fa:	6010      	str	r0, [r2, #0]
 800f9fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fa00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800fa04:	f380 8811 	msr	BASEPRI, r0
 800fa08:	f3bf 8f4f 	dsb	sy
 800fa0c:	f3bf 8f6f 	isb	sy
 800fa10:	f7fe fe46 	bl	800e6a0 <vTaskSwitchContext>
 800fa14:	f04f 0000 	mov.w	r0, #0
 800fa18:	f380 8811 	msr	BASEPRI, r0
 800fa1c:	bc09      	pop	{r0, r3}
 800fa1e:	6819      	ldr	r1, [r3, #0]
 800fa20:	6808      	ldr	r0, [r1, #0]
 800fa22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa26:	f01e 0f10 	tst.w	lr, #16
 800fa2a:	bf08      	it	eq
 800fa2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fa30:	f380 8809 	msr	PSP, r0
 800fa34:	f3bf 8f6f 	isb	sy
 800fa38:	4770      	bx	lr
 800fa3a:	bf00      	nop
 800fa3c:	f3af 8000 	nop.w

0800fa40 <pxCurrentTCBConst>:
 800fa40:	24000bdc 	.word	0x24000bdc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fa44:	bf00      	nop
 800fa46:	bf00      	nop

0800fa48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fa48:	b580      	push	{r7, lr}
 800fa4a:	b082      	sub	sp, #8
 800fa4c:	af00      	add	r7, sp, #0
	__asm volatile
 800fa4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa52:	f383 8811 	msr	BASEPRI, r3
 800fa56:	f3bf 8f6f 	isb	sy
 800fa5a:	f3bf 8f4f 	dsb	sy
 800fa5e:	607b      	str	r3, [r7, #4]
}
 800fa60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fa62:	f7fe fd63 	bl	800e52c <xTaskIncrementTick>
 800fa66:	4603      	mov	r3, r0
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d003      	beq.n	800fa74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fa6c:	4b06      	ldr	r3, [pc, #24]	@ (800fa88 <xPortSysTickHandler+0x40>)
 800fa6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fa72:	601a      	str	r2, [r3, #0]
 800fa74:	2300      	movs	r3, #0
 800fa76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fa78:	683b      	ldr	r3, [r7, #0]
 800fa7a:	f383 8811 	msr	BASEPRI, r3
}
 800fa7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fa80:	bf00      	nop
 800fa82:	3708      	adds	r7, #8
 800fa84:	46bd      	mov	sp, r7
 800fa86:	bd80      	pop	{r7, pc}
 800fa88:	e000ed04 	.word	0xe000ed04

0800fa8c <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 800fa8c:	b580      	push	{r7, lr}
 800fa8e:	b088      	sub	sp, #32
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 800fa94:	4b5d      	ldr	r3, [pc, #372]	@ (800fc0c <vPortSuppressTicksAndSleep+0x180>)
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	687a      	ldr	r2, [r7, #4]
 800fa9a:	429a      	cmp	r2, r3
 800fa9c:	d902      	bls.n	800faa4 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 800fa9e:	4b5b      	ldr	r3, [pc, #364]	@ (800fc0c <vPortSuppressTicksAndSleep+0x180>)
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 800faa4:	4b5a      	ldr	r3, [pc, #360]	@ (800fc10 <vPortSuppressTicksAndSleep+0x184>)
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	4a59      	ldr	r2, [pc, #356]	@ (800fc10 <vPortSuppressTicksAndSleep+0x184>)
 800faaa:	f023 0301 	bic.w	r3, r3, #1
 800faae:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 800fab0:	4b58      	ldr	r3, [pc, #352]	@ (800fc14 <vPortSuppressTicksAndSleep+0x188>)
 800fab2:	681a      	ldr	r2, [r3, #0]
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	3b01      	subs	r3, #1
 800fab8:	4957      	ldr	r1, [pc, #348]	@ (800fc18 <vPortSuppressTicksAndSleep+0x18c>)
 800faba:	6809      	ldr	r1, [r1, #0]
 800fabc:	fb01 f303 	mul.w	r3, r1, r3
 800fac0:	4413      	add	r3, r2
 800fac2:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 800fac4:	4b55      	ldr	r3, [pc, #340]	@ (800fc1c <vPortSuppressTicksAndSleep+0x190>)
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	69fa      	ldr	r2, [r7, #28]
 800faca:	429a      	cmp	r2, r3
 800facc:	d904      	bls.n	800fad8 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 800face:	4b53      	ldr	r3, [pc, #332]	@ (800fc1c <vPortSuppressTicksAndSleep+0x190>)
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	69fa      	ldr	r2, [r7, #28]
 800fad4:	1ad3      	subs	r3, r2, r3
 800fad6:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 800fad8:	b672      	cpsid	i
		__asm volatile( "dsb" );
 800fada:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 800fade:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 800fae2:	f7fe ffc1 	bl	800ea68 <eTaskConfirmSleepModeStatus>
 800fae6:	4603      	mov	r3, r0
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d110      	bne.n	800fb0e <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800faec:	4b49      	ldr	r3, [pc, #292]	@ (800fc14 <vPortSuppressTicksAndSleep+0x188>)
 800faee:	4a4c      	ldr	r2, [pc, #304]	@ (800fc20 <vPortSuppressTicksAndSleep+0x194>)
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800faf4:	4b46      	ldr	r3, [pc, #280]	@ (800fc10 <vPortSuppressTicksAndSleep+0x184>)
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	4a45      	ldr	r2, [pc, #276]	@ (800fc10 <vPortSuppressTicksAndSleep+0x184>)
 800fafa:	f043 0301 	orr.w	r3, r3, #1
 800fafe:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800fb00:	4b45      	ldr	r3, [pc, #276]	@ (800fc18 <vPortSuppressTicksAndSleep+0x18c>)
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	4a46      	ldr	r2, [pc, #280]	@ (800fc20 <vPortSuppressTicksAndSleep+0x194>)
 800fb06:	3b01      	subs	r3, #1
 800fb08:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 800fb0a:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrupts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 800fb0c:	e079      	b.n	800fc02 <vPortSuppressTicksAndSleep+0x176>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 800fb0e:	4a44      	ldr	r2, [pc, #272]	@ (800fc20 <vPortSuppressTicksAndSleep+0x194>)
 800fb10:	69fb      	ldr	r3, [r7, #28]
 800fb12:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fb14:	4b3f      	ldr	r3, [pc, #252]	@ (800fc14 <vPortSuppressTicksAndSleep+0x188>)
 800fb16:	2200      	movs	r2, #0
 800fb18:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800fb1a:	4b3d      	ldr	r3, [pc, #244]	@ (800fc10 <vPortSuppressTicksAndSleep+0x184>)
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	4a3c      	ldr	r2, [pc, #240]	@ (800fc10 <vPortSuppressTicksAndSleep+0x184>)
 800fb20:	f043 0301 	orr.w	r3, r3, #1
 800fb24:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	613b      	str	r3, [r7, #16]
			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 800fb2a:	2300      	movs	r3, #0
 800fb2c:	613b      	str	r3, [r7, #16]
 800fb2e:	6938      	ldr	r0, [r7, #16]
 800fb30:	f7f1 fff8 	bl	8001b24 <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 800fb34:	693b      	ldr	r3, [r7, #16]
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d004      	beq.n	800fb44 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 800fb3a:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 800fb3e:	bf30      	wfi
				__asm volatile( "isb" );
 800fb40:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 800fb44:	6878      	ldr	r0, [r7, #4]
 800fb46:	f7f1 fff7 	bl	8001b38 <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 800fb4a:	b662      	cpsie	i
			__asm volatile( "dsb" );
 800fb4c:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800fb50:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 800fb54:	b672      	cpsid	i
			__asm volatile( "dsb" );
 800fb56:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800fb5a:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 800fb5e:	4b2c      	ldr	r3, [pc, #176]	@ (800fc10 <vPortSuppressTicksAndSleep+0x184>)
 800fb60:	2206      	movs	r2, #6
 800fb62:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 800fb64:	4b2a      	ldr	r3, [pc, #168]	@ (800fc10 <vPortSuppressTicksAndSleep+0x184>)
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d01d      	beq.n	800fbac <vPortSuppressTicksAndSleep+0x120>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 800fb70:	4b29      	ldr	r3, [pc, #164]	@ (800fc18 <vPortSuppressTicksAndSleep+0x18c>)
 800fb72:	681a      	ldr	r2, [r3, #0]
 800fb74:	4b27      	ldr	r3, [pc, #156]	@ (800fc14 <vPortSuppressTicksAndSleep+0x188>)
 800fb76:	6819      	ldr	r1, [r3, #0]
 800fb78:	69fb      	ldr	r3, [r7, #28]
 800fb7a:	1acb      	subs	r3, r1, r3
 800fb7c:	4413      	add	r3, r2
 800fb7e:	3b01      	subs	r3, #1
 800fb80:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 800fb82:	4b26      	ldr	r3, [pc, #152]	@ (800fc1c <vPortSuppressTicksAndSleep+0x190>)
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	697a      	ldr	r2, [r7, #20]
 800fb88:	429a      	cmp	r2, r3
 800fb8a:	d304      	bcc.n	800fb96 <vPortSuppressTicksAndSleep+0x10a>
 800fb8c:	4b22      	ldr	r3, [pc, #136]	@ (800fc18 <vPortSuppressTicksAndSleep+0x18c>)
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	697a      	ldr	r2, [r7, #20]
 800fb92:	429a      	cmp	r2, r3
 800fb94:	d903      	bls.n	800fb9e <vPortSuppressTicksAndSleep+0x112>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 800fb96:	4b20      	ldr	r3, [pc, #128]	@ (800fc18 <vPortSuppressTicksAndSleep+0x18c>)
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	3b01      	subs	r3, #1
 800fb9c:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 800fb9e:	4a20      	ldr	r2, [pc, #128]	@ (800fc20 <vPortSuppressTicksAndSleep+0x194>)
 800fba0:	697b      	ldr	r3, [r7, #20]
 800fba2:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	3b01      	subs	r3, #1
 800fba8:	61bb      	str	r3, [r7, #24]
 800fbaa:	e018      	b.n	800fbde <vPortSuppressTicksAndSleep+0x152>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800fbac:	4b1a      	ldr	r3, [pc, #104]	@ (800fc18 <vPortSuppressTicksAndSleep+0x18c>)
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	687a      	ldr	r2, [r7, #4]
 800fbb2:	fb03 f202 	mul.w	r2, r3, r2
 800fbb6:	4b17      	ldr	r3, [pc, #92]	@ (800fc14 <vPortSuppressTicksAndSleep+0x188>)
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	1ad3      	subs	r3, r2, r3
 800fbbc:	60fb      	str	r3, [r7, #12]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 800fbbe:	4b16      	ldr	r3, [pc, #88]	@ (800fc18 <vPortSuppressTicksAndSleep+0x18c>)
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	68fa      	ldr	r2, [r7, #12]
 800fbc4:	fbb2 f3f3 	udiv	r3, r2, r3
 800fbc8:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 800fbca:	69bb      	ldr	r3, [r7, #24]
 800fbcc:	3301      	adds	r3, #1
 800fbce:	4a12      	ldr	r2, [pc, #72]	@ (800fc18 <vPortSuppressTicksAndSleep+0x18c>)
 800fbd0:	6812      	ldr	r2, [r2, #0]
 800fbd2:	fb03 f202 	mul.w	r2, r3, r2
 800fbd6:	4912      	ldr	r1, [pc, #72]	@ (800fc20 <vPortSuppressTicksAndSleep+0x194>)
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	1ad3      	subs	r3, r2, r3
 800fbdc:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fbde:	4b0d      	ldr	r3, [pc, #52]	@ (800fc14 <vPortSuppressTicksAndSleep+0x188>)
 800fbe0:	2200      	movs	r2, #0
 800fbe2:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800fbe4:	4b0a      	ldr	r3, [pc, #40]	@ (800fc10 <vPortSuppressTicksAndSleep+0x184>)
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	4a09      	ldr	r2, [pc, #36]	@ (800fc10 <vPortSuppressTicksAndSleep+0x184>)
 800fbea:	f043 0301 	orr.w	r3, r3, #1
 800fbee:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 800fbf0:	69b8      	ldr	r0, [r7, #24]
 800fbf2:	f7fe fc73 	bl	800e4dc <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800fbf6:	4b08      	ldr	r3, [pc, #32]	@ (800fc18 <vPortSuppressTicksAndSleep+0x18c>)
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	4a09      	ldr	r2, [pc, #36]	@ (800fc20 <vPortSuppressTicksAndSleep+0x194>)
 800fbfc:	3b01      	subs	r3, #1
 800fbfe:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 800fc00:	b662      	cpsie	i
	}
 800fc02:	bf00      	nop
 800fc04:	3720      	adds	r7, #32
 800fc06:	46bd      	mov	sp, r7
 800fc08:	bd80      	pop	{r7, pc}
 800fc0a:	bf00      	nop
 800fc0c:	2400120c 	.word	0x2400120c
 800fc10:	e000e010 	.word	0xe000e010
 800fc14:	e000e018 	.word	0xe000e018
 800fc18:	24001208 	.word	0x24001208
 800fc1c:	24001210 	.word	0x24001210
 800fc20:	e000e014 	.word	0xe000e014

0800fc24 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fc24:	b480      	push	{r7}
 800fc26:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 800fc28:	4b14      	ldr	r3, [pc, #80]	@ (800fc7c <vPortSetupTimerInterrupt+0x58>)
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	4a14      	ldr	r2, [pc, #80]	@ (800fc80 <vPortSetupTimerInterrupt+0x5c>)
 800fc2e:	fba2 2303 	umull	r2, r3, r2, r3
 800fc32:	099b      	lsrs	r3, r3, #6
 800fc34:	4a13      	ldr	r2, [pc, #76]	@ (800fc84 <vPortSetupTimerInterrupt+0x60>)
 800fc36:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 800fc38:	4b12      	ldr	r3, [pc, #72]	@ (800fc84 <vPortSetupTimerInterrupt+0x60>)
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800fc40:	fbb2 f3f3 	udiv	r3, r2, r3
 800fc44:	4a10      	ldr	r2, [pc, #64]	@ (800fc88 <vPortSetupTimerInterrupt+0x64>)
 800fc46:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 800fc48:	4b10      	ldr	r3, [pc, #64]	@ (800fc8c <vPortSetupTimerInterrupt+0x68>)
 800fc4a:	222d      	movs	r2, #45	@ 0x2d
 800fc4c:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fc4e:	4b10      	ldr	r3, [pc, #64]	@ (800fc90 <vPortSetupTimerInterrupt+0x6c>)
 800fc50:	2200      	movs	r2, #0
 800fc52:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fc54:	4b0f      	ldr	r3, [pc, #60]	@ (800fc94 <vPortSetupTimerInterrupt+0x70>)
 800fc56:	2200      	movs	r2, #0
 800fc58:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fc5a:	4b08      	ldr	r3, [pc, #32]	@ (800fc7c <vPortSetupTimerInterrupt+0x58>)
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	4a08      	ldr	r2, [pc, #32]	@ (800fc80 <vPortSetupTimerInterrupt+0x5c>)
 800fc60:	fba2 2303 	umull	r2, r3, r2, r3
 800fc64:	099b      	lsrs	r3, r3, #6
 800fc66:	4a0c      	ldr	r2, [pc, #48]	@ (800fc98 <vPortSetupTimerInterrupt+0x74>)
 800fc68:	3b01      	subs	r3, #1
 800fc6a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fc6c:	4b08      	ldr	r3, [pc, #32]	@ (800fc90 <vPortSetupTimerInterrupt+0x6c>)
 800fc6e:	2207      	movs	r2, #7
 800fc70:	601a      	str	r2, [r3, #0]
}
 800fc72:	bf00      	nop
 800fc74:	46bd      	mov	sp, r7
 800fc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7a:	4770      	bx	lr
 800fc7c:	24000000 	.word	0x24000000
 800fc80:	10624dd3 	.word	0x10624dd3
 800fc84:	24001208 	.word	0x24001208
 800fc88:	2400120c 	.word	0x2400120c
 800fc8c:	24001210 	.word	0x24001210
 800fc90:	e000e010 	.word	0xe000e010
 800fc94:	e000e018 	.word	0xe000e018
 800fc98:	e000e014 	.word	0xe000e014

0800fc9c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fc9c:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800fcac <vPortEnableVFP+0x10>
 800fca0:	6801      	ldr	r1, [r0, #0]
 800fca2:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800fca6:	6001      	str	r1, [r0, #0]
 800fca8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fcaa:	bf00      	nop
 800fcac:	e000ed88 	.word	0xe000ed88

0800fcb0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fcb0:	b480      	push	{r7}
 800fcb2:	b085      	sub	sp, #20
 800fcb4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fcb6:	f3ef 8305 	mrs	r3, IPSR
 800fcba:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	2b0f      	cmp	r3, #15
 800fcc0:	d915      	bls.n	800fcee <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fcc2:	4a18      	ldr	r2, [pc, #96]	@ (800fd24 <vPortValidateInterruptPriority+0x74>)
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	4413      	add	r3, r2
 800fcc8:	781b      	ldrb	r3, [r3, #0]
 800fcca:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fccc:	4b16      	ldr	r3, [pc, #88]	@ (800fd28 <vPortValidateInterruptPriority+0x78>)
 800fcce:	781b      	ldrb	r3, [r3, #0]
 800fcd0:	7afa      	ldrb	r2, [r7, #11]
 800fcd2:	429a      	cmp	r2, r3
 800fcd4:	d20b      	bcs.n	800fcee <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800fcd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcda:	f383 8811 	msr	BASEPRI, r3
 800fcde:	f3bf 8f6f 	isb	sy
 800fce2:	f3bf 8f4f 	dsb	sy
 800fce6:	607b      	str	r3, [r7, #4]
}
 800fce8:	bf00      	nop
 800fcea:	bf00      	nop
 800fcec:	e7fd      	b.n	800fcea <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fcee:	4b0f      	ldr	r3, [pc, #60]	@ (800fd2c <vPortValidateInterruptPriority+0x7c>)
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800fcf6:	4b0e      	ldr	r3, [pc, #56]	@ (800fd30 <vPortValidateInterruptPriority+0x80>)
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	429a      	cmp	r2, r3
 800fcfc:	d90b      	bls.n	800fd16 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800fcfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd02:	f383 8811 	msr	BASEPRI, r3
 800fd06:	f3bf 8f6f 	isb	sy
 800fd0a:	f3bf 8f4f 	dsb	sy
 800fd0e:	603b      	str	r3, [r7, #0]
}
 800fd10:	bf00      	nop
 800fd12:	bf00      	nop
 800fd14:	e7fd      	b.n	800fd12 <vPortValidateInterruptPriority+0x62>
	}
 800fd16:	bf00      	nop
 800fd18:	3714      	adds	r7, #20
 800fd1a:	46bd      	mov	sp, r7
 800fd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd20:	4770      	bx	lr
 800fd22:	bf00      	nop
 800fd24:	e000e3f0 	.word	0xe000e3f0
 800fd28:	24001214 	.word	0x24001214
 800fd2c:	e000ed0c 	.word	0xe000ed0c
 800fd30:	24001218 	.word	0x24001218

0800fd34 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fd34:	b580      	push	{r7, lr}
 800fd36:	b08a      	sub	sp, #40	@ 0x28
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fd3c:	2300      	movs	r3, #0
 800fd3e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fd40:	f7fe fad8 	bl	800e2f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fd44:	4b5c      	ldr	r3, [pc, #368]	@ (800feb8 <pvPortMalloc+0x184>)
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d101      	bne.n	800fd50 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fd4c:	f000 f924 	bl	800ff98 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fd50:	4b5a      	ldr	r3, [pc, #360]	@ (800febc <pvPortMalloc+0x188>)
 800fd52:	681a      	ldr	r2, [r3, #0]
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	4013      	ands	r3, r2
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	f040 8095 	bne.w	800fe88 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d01e      	beq.n	800fda2 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800fd64:	2208      	movs	r2, #8
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	4413      	add	r3, r2
 800fd6a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	f003 0307 	and.w	r3, r3, #7
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d015      	beq.n	800fda2 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	f023 0307 	bic.w	r3, r3, #7
 800fd7c:	3308      	adds	r3, #8
 800fd7e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	f003 0307 	and.w	r3, r3, #7
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d00b      	beq.n	800fda2 <pvPortMalloc+0x6e>
	__asm volatile
 800fd8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd8e:	f383 8811 	msr	BASEPRI, r3
 800fd92:	f3bf 8f6f 	isb	sy
 800fd96:	f3bf 8f4f 	dsb	sy
 800fd9a:	617b      	str	r3, [r7, #20]
}
 800fd9c:	bf00      	nop
 800fd9e:	bf00      	nop
 800fda0:	e7fd      	b.n	800fd9e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d06f      	beq.n	800fe88 <pvPortMalloc+0x154>
 800fda8:	4b45      	ldr	r3, [pc, #276]	@ (800fec0 <pvPortMalloc+0x18c>)
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	687a      	ldr	r2, [r7, #4]
 800fdae:	429a      	cmp	r2, r3
 800fdb0:	d86a      	bhi.n	800fe88 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fdb2:	4b44      	ldr	r3, [pc, #272]	@ (800fec4 <pvPortMalloc+0x190>)
 800fdb4:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fdb6:	4b43      	ldr	r3, [pc, #268]	@ (800fec4 <pvPortMalloc+0x190>)
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fdbc:	e004      	b.n	800fdc8 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800fdbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdc0:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fdc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fdc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdca:	685b      	ldr	r3, [r3, #4]
 800fdcc:	687a      	ldr	r2, [r7, #4]
 800fdce:	429a      	cmp	r2, r3
 800fdd0:	d903      	bls.n	800fdda <pvPortMalloc+0xa6>
 800fdd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d1f1      	bne.n	800fdbe <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fdda:	4b37      	ldr	r3, [pc, #220]	@ (800feb8 <pvPortMalloc+0x184>)
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fde0:	429a      	cmp	r2, r3
 800fde2:	d051      	beq.n	800fe88 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fde4:	6a3b      	ldr	r3, [r7, #32]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	2208      	movs	r2, #8
 800fdea:	4413      	add	r3, r2
 800fdec:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fdee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdf0:	681a      	ldr	r2, [r3, #0]
 800fdf2:	6a3b      	ldr	r3, [r7, #32]
 800fdf4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fdf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdf8:	685a      	ldr	r2, [r3, #4]
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	1ad2      	subs	r2, r2, r3
 800fdfe:	2308      	movs	r3, #8
 800fe00:	005b      	lsls	r3, r3, #1
 800fe02:	429a      	cmp	r2, r3
 800fe04:	d920      	bls.n	800fe48 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fe06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	4413      	add	r3, r2
 800fe0c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fe0e:	69bb      	ldr	r3, [r7, #24]
 800fe10:	f003 0307 	and.w	r3, r3, #7
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d00b      	beq.n	800fe30 <pvPortMalloc+0xfc>
	__asm volatile
 800fe18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe1c:	f383 8811 	msr	BASEPRI, r3
 800fe20:	f3bf 8f6f 	isb	sy
 800fe24:	f3bf 8f4f 	dsb	sy
 800fe28:	613b      	str	r3, [r7, #16]
}
 800fe2a:	bf00      	nop
 800fe2c:	bf00      	nop
 800fe2e:	e7fd      	b.n	800fe2c <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fe30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe32:	685a      	ldr	r2, [r3, #4]
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	1ad2      	subs	r2, r2, r3
 800fe38:	69bb      	ldr	r3, [r7, #24]
 800fe3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fe3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe3e:	687a      	ldr	r2, [r7, #4]
 800fe40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fe42:	69b8      	ldr	r0, [r7, #24]
 800fe44:	f000 f90a 	bl	801005c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fe48:	4b1d      	ldr	r3, [pc, #116]	@ (800fec0 <pvPortMalloc+0x18c>)
 800fe4a:	681a      	ldr	r2, [r3, #0]
 800fe4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe4e:	685b      	ldr	r3, [r3, #4]
 800fe50:	1ad3      	subs	r3, r2, r3
 800fe52:	4a1b      	ldr	r2, [pc, #108]	@ (800fec0 <pvPortMalloc+0x18c>)
 800fe54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fe56:	4b1a      	ldr	r3, [pc, #104]	@ (800fec0 <pvPortMalloc+0x18c>)
 800fe58:	681a      	ldr	r2, [r3, #0]
 800fe5a:	4b1b      	ldr	r3, [pc, #108]	@ (800fec8 <pvPortMalloc+0x194>)
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	429a      	cmp	r2, r3
 800fe60:	d203      	bcs.n	800fe6a <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fe62:	4b17      	ldr	r3, [pc, #92]	@ (800fec0 <pvPortMalloc+0x18c>)
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	4a18      	ldr	r2, [pc, #96]	@ (800fec8 <pvPortMalloc+0x194>)
 800fe68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fe6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe6c:	685a      	ldr	r2, [r3, #4]
 800fe6e:	4b13      	ldr	r3, [pc, #76]	@ (800febc <pvPortMalloc+0x188>)
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	431a      	orrs	r2, r3
 800fe74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fe78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe7a:	2200      	movs	r2, #0
 800fe7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800fe7e:	4b13      	ldr	r3, [pc, #76]	@ (800fecc <pvPortMalloc+0x198>)
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	3301      	adds	r3, #1
 800fe84:	4a11      	ldr	r2, [pc, #68]	@ (800fecc <pvPortMalloc+0x198>)
 800fe86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fe88:	f7fe fa7a 	bl	800e380 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fe8c:	69fb      	ldr	r3, [r7, #28]
 800fe8e:	f003 0307 	and.w	r3, r3, #7
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d00b      	beq.n	800feae <pvPortMalloc+0x17a>
	__asm volatile
 800fe96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe9a:	f383 8811 	msr	BASEPRI, r3
 800fe9e:	f3bf 8f6f 	isb	sy
 800fea2:	f3bf 8f4f 	dsb	sy
 800fea6:	60fb      	str	r3, [r7, #12]
}
 800fea8:	bf00      	nop
 800feaa:	bf00      	nop
 800feac:	e7fd      	b.n	800feaa <pvPortMalloc+0x176>
	return pvReturn;
 800feae:	69fb      	ldr	r3, [r7, #28]
}
 800feb0:	4618      	mov	r0, r3
 800feb2:	3728      	adds	r7, #40	@ 0x28
 800feb4:	46bd      	mov	sp, r7
 800feb6:	bd80      	pop	{r7, pc}
 800feb8:	24004e24 	.word	0x24004e24
 800febc:	24004e38 	.word	0x24004e38
 800fec0:	24004e28 	.word	0x24004e28
 800fec4:	24004e1c 	.word	0x24004e1c
 800fec8:	24004e2c 	.word	0x24004e2c
 800fecc:	24004e30 	.word	0x24004e30

0800fed0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fed0:	b580      	push	{r7, lr}
 800fed2:	b086      	sub	sp, #24
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d04f      	beq.n	800ff82 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fee2:	2308      	movs	r3, #8
 800fee4:	425b      	negs	r3, r3
 800fee6:	697a      	ldr	r2, [r7, #20]
 800fee8:	4413      	add	r3, r2
 800feea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800feec:	697b      	ldr	r3, [r7, #20]
 800feee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fef0:	693b      	ldr	r3, [r7, #16]
 800fef2:	685a      	ldr	r2, [r3, #4]
 800fef4:	4b25      	ldr	r3, [pc, #148]	@ (800ff8c <vPortFree+0xbc>)
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	4013      	ands	r3, r2
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d10b      	bne.n	800ff16 <vPortFree+0x46>
	__asm volatile
 800fefe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff02:	f383 8811 	msr	BASEPRI, r3
 800ff06:	f3bf 8f6f 	isb	sy
 800ff0a:	f3bf 8f4f 	dsb	sy
 800ff0e:	60fb      	str	r3, [r7, #12]
}
 800ff10:	bf00      	nop
 800ff12:	bf00      	nop
 800ff14:	e7fd      	b.n	800ff12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ff16:	693b      	ldr	r3, [r7, #16]
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d00b      	beq.n	800ff36 <vPortFree+0x66>
	__asm volatile
 800ff1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff22:	f383 8811 	msr	BASEPRI, r3
 800ff26:	f3bf 8f6f 	isb	sy
 800ff2a:	f3bf 8f4f 	dsb	sy
 800ff2e:	60bb      	str	r3, [r7, #8]
}
 800ff30:	bf00      	nop
 800ff32:	bf00      	nop
 800ff34:	e7fd      	b.n	800ff32 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ff36:	693b      	ldr	r3, [r7, #16]
 800ff38:	685a      	ldr	r2, [r3, #4]
 800ff3a:	4b14      	ldr	r3, [pc, #80]	@ (800ff8c <vPortFree+0xbc>)
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	4013      	ands	r3, r2
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d01e      	beq.n	800ff82 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ff44:	693b      	ldr	r3, [r7, #16]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d11a      	bne.n	800ff82 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ff4c:	693b      	ldr	r3, [r7, #16]
 800ff4e:	685a      	ldr	r2, [r3, #4]
 800ff50:	4b0e      	ldr	r3, [pc, #56]	@ (800ff8c <vPortFree+0xbc>)
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	43db      	mvns	r3, r3
 800ff56:	401a      	ands	r2, r3
 800ff58:	693b      	ldr	r3, [r7, #16]
 800ff5a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ff5c:	f7fe f9ca 	bl	800e2f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ff60:	693b      	ldr	r3, [r7, #16]
 800ff62:	685a      	ldr	r2, [r3, #4]
 800ff64:	4b0a      	ldr	r3, [pc, #40]	@ (800ff90 <vPortFree+0xc0>)
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	4413      	add	r3, r2
 800ff6a:	4a09      	ldr	r2, [pc, #36]	@ (800ff90 <vPortFree+0xc0>)
 800ff6c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ff6e:	6938      	ldr	r0, [r7, #16]
 800ff70:	f000 f874 	bl	801005c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ff74:	4b07      	ldr	r3, [pc, #28]	@ (800ff94 <vPortFree+0xc4>)
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	3301      	adds	r3, #1
 800ff7a:	4a06      	ldr	r2, [pc, #24]	@ (800ff94 <vPortFree+0xc4>)
 800ff7c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ff7e:	f7fe f9ff 	bl	800e380 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ff82:	bf00      	nop
 800ff84:	3718      	adds	r7, #24
 800ff86:	46bd      	mov	sp, r7
 800ff88:	bd80      	pop	{r7, pc}
 800ff8a:	bf00      	nop
 800ff8c:	24004e38 	.word	0x24004e38
 800ff90:	24004e28 	.word	0x24004e28
 800ff94:	24004e34 	.word	0x24004e34

0800ff98 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ff98:	b480      	push	{r7}
 800ff9a:	b085      	sub	sp, #20
 800ff9c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ff9e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800ffa2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ffa4:	4b27      	ldr	r3, [pc, #156]	@ (8010044 <prvHeapInit+0xac>)
 800ffa6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	f003 0307 	and.w	r3, r3, #7
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d00c      	beq.n	800ffcc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	3307      	adds	r3, #7
 800ffb6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	f023 0307 	bic.w	r3, r3, #7
 800ffbe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ffc0:	68ba      	ldr	r2, [r7, #8]
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	1ad3      	subs	r3, r2, r3
 800ffc6:	4a1f      	ldr	r2, [pc, #124]	@ (8010044 <prvHeapInit+0xac>)
 800ffc8:	4413      	add	r3, r2
 800ffca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ffd0:	4a1d      	ldr	r2, [pc, #116]	@ (8010048 <prvHeapInit+0xb0>)
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ffd6:	4b1c      	ldr	r3, [pc, #112]	@ (8010048 <prvHeapInit+0xb0>)
 800ffd8:	2200      	movs	r2, #0
 800ffda:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	68ba      	ldr	r2, [r7, #8]
 800ffe0:	4413      	add	r3, r2
 800ffe2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ffe4:	2208      	movs	r2, #8
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	1a9b      	subs	r3, r3, r2
 800ffea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	f023 0307 	bic.w	r3, r3, #7
 800fff2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	4a15      	ldr	r2, [pc, #84]	@ (801004c <prvHeapInit+0xb4>)
 800fff8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fffa:	4b14      	ldr	r3, [pc, #80]	@ (801004c <prvHeapInit+0xb4>)
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	2200      	movs	r2, #0
 8010000:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010002:	4b12      	ldr	r3, [pc, #72]	@ (801004c <prvHeapInit+0xb4>)
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	2200      	movs	r2, #0
 8010008:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801000e:	683b      	ldr	r3, [r7, #0]
 8010010:	68fa      	ldr	r2, [r7, #12]
 8010012:	1ad2      	subs	r2, r2, r3
 8010014:	683b      	ldr	r3, [r7, #0]
 8010016:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010018:	4b0c      	ldr	r3, [pc, #48]	@ (801004c <prvHeapInit+0xb4>)
 801001a:	681a      	ldr	r2, [r3, #0]
 801001c:	683b      	ldr	r3, [r7, #0]
 801001e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010020:	683b      	ldr	r3, [r7, #0]
 8010022:	685b      	ldr	r3, [r3, #4]
 8010024:	4a0a      	ldr	r2, [pc, #40]	@ (8010050 <prvHeapInit+0xb8>)
 8010026:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010028:	683b      	ldr	r3, [r7, #0]
 801002a:	685b      	ldr	r3, [r3, #4]
 801002c:	4a09      	ldr	r2, [pc, #36]	@ (8010054 <prvHeapInit+0xbc>)
 801002e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010030:	4b09      	ldr	r3, [pc, #36]	@ (8010058 <prvHeapInit+0xc0>)
 8010032:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8010036:	601a      	str	r2, [r3, #0]
}
 8010038:	bf00      	nop
 801003a:	3714      	adds	r7, #20
 801003c:	46bd      	mov	sp, r7
 801003e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010042:	4770      	bx	lr
 8010044:	2400121c 	.word	0x2400121c
 8010048:	24004e1c 	.word	0x24004e1c
 801004c:	24004e24 	.word	0x24004e24
 8010050:	24004e2c 	.word	0x24004e2c
 8010054:	24004e28 	.word	0x24004e28
 8010058:	24004e38 	.word	0x24004e38

0801005c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801005c:	b480      	push	{r7}
 801005e:	b085      	sub	sp, #20
 8010060:	af00      	add	r7, sp, #0
 8010062:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010064:	4b28      	ldr	r3, [pc, #160]	@ (8010108 <prvInsertBlockIntoFreeList+0xac>)
 8010066:	60fb      	str	r3, [r7, #12]
 8010068:	e002      	b.n	8010070 <prvInsertBlockIntoFreeList+0x14>
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	60fb      	str	r3, [r7, #12]
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	687a      	ldr	r2, [r7, #4]
 8010076:	429a      	cmp	r2, r3
 8010078:	d8f7      	bhi.n	801006a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	685b      	ldr	r3, [r3, #4]
 8010082:	68ba      	ldr	r2, [r7, #8]
 8010084:	4413      	add	r3, r2
 8010086:	687a      	ldr	r2, [r7, #4]
 8010088:	429a      	cmp	r2, r3
 801008a:	d108      	bne.n	801009e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	685a      	ldr	r2, [r3, #4]
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	685b      	ldr	r3, [r3, #4]
 8010094:	441a      	add	r2, r3
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	685b      	ldr	r3, [r3, #4]
 80100a6:	68ba      	ldr	r2, [r7, #8]
 80100a8:	441a      	add	r2, r3
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	429a      	cmp	r2, r3
 80100b0:	d118      	bne.n	80100e4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	681a      	ldr	r2, [r3, #0]
 80100b6:	4b15      	ldr	r3, [pc, #84]	@ (801010c <prvInsertBlockIntoFreeList+0xb0>)
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	429a      	cmp	r2, r3
 80100bc:	d00d      	beq.n	80100da <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	685a      	ldr	r2, [r3, #4]
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	685b      	ldr	r3, [r3, #4]
 80100c8:	441a      	add	r2, r3
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	681a      	ldr	r2, [r3, #0]
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	601a      	str	r2, [r3, #0]
 80100d8:	e008      	b.n	80100ec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80100da:	4b0c      	ldr	r3, [pc, #48]	@ (801010c <prvInsertBlockIntoFreeList+0xb0>)
 80100dc:	681a      	ldr	r2, [r3, #0]
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	601a      	str	r2, [r3, #0]
 80100e2:	e003      	b.n	80100ec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	681a      	ldr	r2, [r3, #0]
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80100ec:	68fa      	ldr	r2, [r7, #12]
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	429a      	cmp	r2, r3
 80100f2:	d002      	beq.n	80100fa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	687a      	ldr	r2, [r7, #4]
 80100f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80100fa:	bf00      	nop
 80100fc:	3714      	adds	r7, #20
 80100fe:	46bd      	mov	sp, r7
 8010100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010104:	4770      	bx	lr
 8010106:	bf00      	nop
 8010108:	24004e1c 	.word	0x24004e1c
 801010c:	24004e24 	.word	0x24004e24

08010110 <_ZdlPvj>:
 8010110:	f000 b817 	b.w	8010142 <_ZdlPv>

08010114 <_ZdaPv>:
 8010114:	f000 b815 	b.w	8010142 <_ZdlPv>

08010118 <_ZdaPvj>:
 8010118:	f7ff bffc 	b.w	8010114 <_ZdaPv>

0801011c <_Znwj>:
 801011c:	2801      	cmp	r0, #1
 801011e:	bf38      	it	cc
 8010120:	2001      	movcc	r0, #1
 8010122:	b510      	push	{r4, lr}
 8010124:	4604      	mov	r4, r0
 8010126:	4620      	mov	r0, r4
 8010128:	f000 f83c 	bl	80101a4 <malloc>
 801012c:	b100      	cbz	r0, 8010130 <_Znwj+0x14>
 801012e:	bd10      	pop	{r4, pc}
 8010130:	f000 f80a 	bl	8010148 <_ZSt15get_new_handlerv>
 8010134:	b908      	cbnz	r0, 801013a <_Znwj+0x1e>
 8010136:	f000 f80f 	bl	8010158 <abort>
 801013a:	4780      	blx	r0
 801013c:	e7f3      	b.n	8010126 <_Znwj+0xa>

0801013e <_Znaj>:
 801013e:	f7ff bfed 	b.w	801011c <_Znwj>

08010142 <_ZdlPv>:
 8010142:	f000 b837 	b.w	80101b4 <free>
	...

08010148 <_ZSt15get_new_handlerv>:
 8010148:	4b02      	ldr	r3, [pc, #8]	@ (8010154 <_ZSt15get_new_handlerv+0xc>)
 801014a:	6818      	ldr	r0, [r3, #0]
 801014c:	f3bf 8f5b 	dmb	ish
 8010150:	4770      	bx	lr
 8010152:	bf00      	nop
 8010154:	24004e3c 	.word	0x24004e3c

08010158 <abort>:
 8010158:	b508      	push	{r3, lr}
 801015a:	2006      	movs	r0, #6
 801015c:	f001 f990 	bl	8011480 <raise>
 8010160:	2001      	movs	r0, #1
 8010162:	f7f2 f847 	bl	80021f4 <_exit>
	...

08010168 <__assert_func>:
 8010168:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801016a:	4614      	mov	r4, r2
 801016c:	461a      	mov	r2, r3
 801016e:	4b09      	ldr	r3, [pc, #36]	@ (8010194 <__assert_func+0x2c>)
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	4605      	mov	r5, r0
 8010174:	68d8      	ldr	r0, [r3, #12]
 8010176:	b954      	cbnz	r4, 801018e <__assert_func+0x26>
 8010178:	4b07      	ldr	r3, [pc, #28]	@ (8010198 <__assert_func+0x30>)
 801017a:	461c      	mov	r4, r3
 801017c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010180:	9100      	str	r1, [sp, #0]
 8010182:	462b      	mov	r3, r5
 8010184:	4905      	ldr	r1, [pc, #20]	@ (801019c <__assert_func+0x34>)
 8010186:	f000 ffb3 	bl	80110f0 <fiprintf>
 801018a:	f7ff ffe5 	bl	8010158 <abort>
 801018e:	4b04      	ldr	r3, [pc, #16]	@ (80101a0 <__assert_func+0x38>)
 8010190:	e7f4      	b.n	801017c <__assert_func+0x14>
 8010192:	bf00      	nop
 8010194:	24000020 	.word	0x24000020
 8010198:	08014fd3 	.word	0x08014fd3
 801019c:	08014fa5 	.word	0x08014fa5
 80101a0:	08014f98 	.word	0x08014f98

080101a4 <malloc>:
 80101a4:	4b02      	ldr	r3, [pc, #8]	@ (80101b0 <malloc+0xc>)
 80101a6:	4601      	mov	r1, r0
 80101a8:	6818      	ldr	r0, [r3, #0]
 80101aa:	f000 b82d 	b.w	8010208 <_malloc_r>
 80101ae:	bf00      	nop
 80101b0:	24000020 	.word	0x24000020

080101b4 <free>:
 80101b4:	4b02      	ldr	r3, [pc, #8]	@ (80101c0 <free+0xc>)
 80101b6:	4601      	mov	r1, r0
 80101b8:	6818      	ldr	r0, [r3, #0]
 80101ba:	f002 b84f 	b.w	801225c <_free_r>
 80101be:	bf00      	nop
 80101c0:	24000020 	.word	0x24000020

080101c4 <sbrk_aligned>:
 80101c4:	b570      	push	{r4, r5, r6, lr}
 80101c6:	4e0f      	ldr	r6, [pc, #60]	@ (8010204 <sbrk_aligned+0x40>)
 80101c8:	460c      	mov	r4, r1
 80101ca:	6831      	ldr	r1, [r6, #0]
 80101cc:	4605      	mov	r5, r0
 80101ce:	b911      	cbnz	r1, 80101d6 <sbrk_aligned+0x12>
 80101d0:	f001 fa00 	bl	80115d4 <_sbrk_r>
 80101d4:	6030      	str	r0, [r6, #0]
 80101d6:	4621      	mov	r1, r4
 80101d8:	4628      	mov	r0, r5
 80101da:	f001 f9fb 	bl	80115d4 <_sbrk_r>
 80101de:	1c43      	adds	r3, r0, #1
 80101e0:	d103      	bne.n	80101ea <sbrk_aligned+0x26>
 80101e2:	f04f 34ff 	mov.w	r4, #4294967295
 80101e6:	4620      	mov	r0, r4
 80101e8:	bd70      	pop	{r4, r5, r6, pc}
 80101ea:	1cc4      	adds	r4, r0, #3
 80101ec:	f024 0403 	bic.w	r4, r4, #3
 80101f0:	42a0      	cmp	r0, r4
 80101f2:	d0f8      	beq.n	80101e6 <sbrk_aligned+0x22>
 80101f4:	1a21      	subs	r1, r4, r0
 80101f6:	4628      	mov	r0, r5
 80101f8:	f001 f9ec 	bl	80115d4 <_sbrk_r>
 80101fc:	3001      	adds	r0, #1
 80101fe:	d1f2      	bne.n	80101e6 <sbrk_aligned+0x22>
 8010200:	e7ef      	b.n	80101e2 <sbrk_aligned+0x1e>
 8010202:	bf00      	nop
 8010204:	24004e40 	.word	0x24004e40

08010208 <_malloc_r>:
 8010208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801020c:	1ccd      	adds	r5, r1, #3
 801020e:	f025 0503 	bic.w	r5, r5, #3
 8010212:	3508      	adds	r5, #8
 8010214:	2d0c      	cmp	r5, #12
 8010216:	bf38      	it	cc
 8010218:	250c      	movcc	r5, #12
 801021a:	2d00      	cmp	r5, #0
 801021c:	4606      	mov	r6, r0
 801021e:	db01      	blt.n	8010224 <_malloc_r+0x1c>
 8010220:	42a9      	cmp	r1, r5
 8010222:	d904      	bls.n	801022e <_malloc_r+0x26>
 8010224:	230c      	movs	r3, #12
 8010226:	6033      	str	r3, [r6, #0]
 8010228:	2000      	movs	r0, #0
 801022a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801022e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010304 <_malloc_r+0xfc>
 8010232:	f000 f869 	bl	8010308 <__malloc_lock>
 8010236:	f8d8 3000 	ldr.w	r3, [r8]
 801023a:	461c      	mov	r4, r3
 801023c:	bb44      	cbnz	r4, 8010290 <_malloc_r+0x88>
 801023e:	4629      	mov	r1, r5
 8010240:	4630      	mov	r0, r6
 8010242:	f7ff ffbf 	bl	80101c4 <sbrk_aligned>
 8010246:	1c43      	adds	r3, r0, #1
 8010248:	4604      	mov	r4, r0
 801024a:	d158      	bne.n	80102fe <_malloc_r+0xf6>
 801024c:	f8d8 4000 	ldr.w	r4, [r8]
 8010250:	4627      	mov	r7, r4
 8010252:	2f00      	cmp	r7, #0
 8010254:	d143      	bne.n	80102de <_malloc_r+0xd6>
 8010256:	2c00      	cmp	r4, #0
 8010258:	d04b      	beq.n	80102f2 <_malloc_r+0xea>
 801025a:	6823      	ldr	r3, [r4, #0]
 801025c:	4639      	mov	r1, r7
 801025e:	4630      	mov	r0, r6
 8010260:	eb04 0903 	add.w	r9, r4, r3
 8010264:	f001 f9b6 	bl	80115d4 <_sbrk_r>
 8010268:	4581      	cmp	r9, r0
 801026a:	d142      	bne.n	80102f2 <_malloc_r+0xea>
 801026c:	6821      	ldr	r1, [r4, #0]
 801026e:	1a6d      	subs	r5, r5, r1
 8010270:	4629      	mov	r1, r5
 8010272:	4630      	mov	r0, r6
 8010274:	f7ff ffa6 	bl	80101c4 <sbrk_aligned>
 8010278:	3001      	adds	r0, #1
 801027a:	d03a      	beq.n	80102f2 <_malloc_r+0xea>
 801027c:	6823      	ldr	r3, [r4, #0]
 801027e:	442b      	add	r3, r5
 8010280:	6023      	str	r3, [r4, #0]
 8010282:	f8d8 3000 	ldr.w	r3, [r8]
 8010286:	685a      	ldr	r2, [r3, #4]
 8010288:	bb62      	cbnz	r2, 80102e4 <_malloc_r+0xdc>
 801028a:	f8c8 7000 	str.w	r7, [r8]
 801028e:	e00f      	b.n	80102b0 <_malloc_r+0xa8>
 8010290:	6822      	ldr	r2, [r4, #0]
 8010292:	1b52      	subs	r2, r2, r5
 8010294:	d420      	bmi.n	80102d8 <_malloc_r+0xd0>
 8010296:	2a0b      	cmp	r2, #11
 8010298:	d917      	bls.n	80102ca <_malloc_r+0xc2>
 801029a:	1961      	adds	r1, r4, r5
 801029c:	42a3      	cmp	r3, r4
 801029e:	6025      	str	r5, [r4, #0]
 80102a0:	bf18      	it	ne
 80102a2:	6059      	strne	r1, [r3, #4]
 80102a4:	6863      	ldr	r3, [r4, #4]
 80102a6:	bf08      	it	eq
 80102a8:	f8c8 1000 	streq.w	r1, [r8]
 80102ac:	5162      	str	r2, [r4, r5]
 80102ae:	604b      	str	r3, [r1, #4]
 80102b0:	4630      	mov	r0, r6
 80102b2:	f000 f82f 	bl	8010314 <__malloc_unlock>
 80102b6:	f104 000b 	add.w	r0, r4, #11
 80102ba:	1d23      	adds	r3, r4, #4
 80102bc:	f020 0007 	bic.w	r0, r0, #7
 80102c0:	1ac2      	subs	r2, r0, r3
 80102c2:	bf1c      	itt	ne
 80102c4:	1a1b      	subne	r3, r3, r0
 80102c6:	50a3      	strne	r3, [r4, r2]
 80102c8:	e7af      	b.n	801022a <_malloc_r+0x22>
 80102ca:	6862      	ldr	r2, [r4, #4]
 80102cc:	42a3      	cmp	r3, r4
 80102ce:	bf0c      	ite	eq
 80102d0:	f8c8 2000 	streq.w	r2, [r8]
 80102d4:	605a      	strne	r2, [r3, #4]
 80102d6:	e7eb      	b.n	80102b0 <_malloc_r+0xa8>
 80102d8:	4623      	mov	r3, r4
 80102da:	6864      	ldr	r4, [r4, #4]
 80102dc:	e7ae      	b.n	801023c <_malloc_r+0x34>
 80102de:	463c      	mov	r4, r7
 80102e0:	687f      	ldr	r7, [r7, #4]
 80102e2:	e7b6      	b.n	8010252 <_malloc_r+0x4a>
 80102e4:	461a      	mov	r2, r3
 80102e6:	685b      	ldr	r3, [r3, #4]
 80102e8:	42a3      	cmp	r3, r4
 80102ea:	d1fb      	bne.n	80102e4 <_malloc_r+0xdc>
 80102ec:	2300      	movs	r3, #0
 80102ee:	6053      	str	r3, [r2, #4]
 80102f0:	e7de      	b.n	80102b0 <_malloc_r+0xa8>
 80102f2:	230c      	movs	r3, #12
 80102f4:	6033      	str	r3, [r6, #0]
 80102f6:	4630      	mov	r0, r6
 80102f8:	f000 f80c 	bl	8010314 <__malloc_unlock>
 80102fc:	e794      	b.n	8010228 <_malloc_r+0x20>
 80102fe:	6005      	str	r5, [r0, #0]
 8010300:	e7d6      	b.n	80102b0 <_malloc_r+0xa8>
 8010302:	bf00      	nop
 8010304:	24004e44 	.word	0x24004e44

08010308 <__malloc_lock>:
 8010308:	4801      	ldr	r0, [pc, #4]	@ (8010310 <__malloc_lock+0x8>)
 801030a:	f001 b9b0 	b.w	801166e <__retarget_lock_acquire_recursive>
 801030e:	bf00      	nop
 8010310:	24004f88 	.word	0x24004f88

08010314 <__malloc_unlock>:
 8010314:	4801      	ldr	r0, [pc, #4]	@ (801031c <__malloc_unlock+0x8>)
 8010316:	f001 b9ab 	b.w	8011670 <__retarget_lock_release_recursive>
 801031a:	bf00      	nop
 801031c:	24004f88 	.word	0x24004f88

08010320 <__cvt>:
 8010320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010322:	ed2d 8b02 	vpush	{d8}
 8010326:	eeb0 8b40 	vmov.f64	d8, d0
 801032a:	b085      	sub	sp, #20
 801032c:	4617      	mov	r7, r2
 801032e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8010330:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010332:	ee18 2a90 	vmov	r2, s17
 8010336:	f025 0520 	bic.w	r5, r5, #32
 801033a:	2a00      	cmp	r2, #0
 801033c:	bfb6      	itet	lt
 801033e:	222d      	movlt	r2, #45	@ 0x2d
 8010340:	2200      	movge	r2, #0
 8010342:	eeb1 8b40 	vneglt.f64	d8, d0
 8010346:	2d46      	cmp	r5, #70	@ 0x46
 8010348:	460c      	mov	r4, r1
 801034a:	701a      	strb	r2, [r3, #0]
 801034c:	d004      	beq.n	8010358 <__cvt+0x38>
 801034e:	2d45      	cmp	r5, #69	@ 0x45
 8010350:	d100      	bne.n	8010354 <__cvt+0x34>
 8010352:	3401      	adds	r4, #1
 8010354:	2102      	movs	r1, #2
 8010356:	e000      	b.n	801035a <__cvt+0x3a>
 8010358:	2103      	movs	r1, #3
 801035a:	ab03      	add	r3, sp, #12
 801035c:	9301      	str	r3, [sp, #4]
 801035e:	ab02      	add	r3, sp, #8
 8010360:	9300      	str	r3, [sp, #0]
 8010362:	4622      	mov	r2, r4
 8010364:	4633      	mov	r3, r6
 8010366:	eeb0 0b48 	vmov.f64	d0, d8
 801036a:	f001 fa21 	bl	80117b0 <_dtoa_r>
 801036e:	2d47      	cmp	r5, #71	@ 0x47
 8010370:	d114      	bne.n	801039c <__cvt+0x7c>
 8010372:	07fb      	lsls	r3, r7, #31
 8010374:	d50a      	bpl.n	801038c <__cvt+0x6c>
 8010376:	1902      	adds	r2, r0, r4
 8010378:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801037c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010380:	bf08      	it	eq
 8010382:	9203      	streq	r2, [sp, #12]
 8010384:	2130      	movs	r1, #48	@ 0x30
 8010386:	9b03      	ldr	r3, [sp, #12]
 8010388:	4293      	cmp	r3, r2
 801038a:	d319      	bcc.n	80103c0 <__cvt+0xa0>
 801038c:	9b03      	ldr	r3, [sp, #12]
 801038e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010390:	1a1b      	subs	r3, r3, r0
 8010392:	6013      	str	r3, [r2, #0]
 8010394:	b005      	add	sp, #20
 8010396:	ecbd 8b02 	vpop	{d8}
 801039a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801039c:	2d46      	cmp	r5, #70	@ 0x46
 801039e:	eb00 0204 	add.w	r2, r0, r4
 80103a2:	d1e9      	bne.n	8010378 <__cvt+0x58>
 80103a4:	7803      	ldrb	r3, [r0, #0]
 80103a6:	2b30      	cmp	r3, #48	@ 0x30
 80103a8:	d107      	bne.n	80103ba <__cvt+0x9a>
 80103aa:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80103ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103b2:	bf1c      	itt	ne
 80103b4:	f1c4 0401 	rsbne	r4, r4, #1
 80103b8:	6034      	strne	r4, [r6, #0]
 80103ba:	6833      	ldr	r3, [r6, #0]
 80103bc:	441a      	add	r2, r3
 80103be:	e7db      	b.n	8010378 <__cvt+0x58>
 80103c0:	1c5c      	adds	r4, r3, #1
 80103c2:	9403      	str	r4, [sp, #12]
 80103c4:	7019      	strb	r1, [r3, #0]
 80103c6:	e7de      	b.n	8010386 <__cvt+0x66>

080103c8 <__exponent>:
 80103c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80103ca:	2900      	cmp	r1, #0
 80103cc:	bfba      	itte	lt
 80103ce:	4249      	neglt	r1, r1
 80103d0:	232d      	movlt	r3, #45	@ 0x2d
 80103d2:	232b      	movge	r3, #43	@ 0x2b
 80103d4:	2909      	cmp	r1, #9
 80103d6:	7002      	strb	r2, [r0, #0]
 80103d8:	7043      	strb	r3, [r0, #1]
 80103da:	dd29      	ble.n	8010430 <__exponent+0x68>
 80103dc:	f10d 0307 	add.w	r3, sp, #7
 80103e0:	461d      	mov	r5, r3
 80103e2:	270a      	movs	r7, #10
 80103e4:	461a      	mov	r2, r3
 80103e6:	fbb1 f6f7 	udiv	r6, r1, r7
 80103ea:	fb07 1416 	mls	r4, r7, r6, r1
 80103ee:	3430      	adds	r4, #48	@ 0x30
 80103f0:	f802 4c01 	strb.w	r4, [r2, #-1]
 80103f4:	460c      	mov	r4, r1
 80103f6:	2c63      	cmp	r4, #99	@ 0x63
 80103f8:	f103 33ff 	add.w	r3, r3, #4294967295
 80103fc:	4631      	mov	r1, r6
 80103fe:	dcf1      	bgt.n	80103e4 <__exponent+0x1c>
 8010400:	3130      	adds	r1, #48	@ 0x30
 8010402:	1e94      	subs	r4, r2, #2
 8010404:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010408:	1c41      	adds	r1, r0, #1
 801040a:	4623      	mov	r3, r4
 801040c:	42ab      	cmp	r3, r5
 801040e:	d30a      	bcc.n	8010426 <__exponent+0x5e>
 8010410:	f10d 0309 	add.w	r3, sp, #9
 8010414:	1a9b      	subs	r3, r3, r2
 8010416:	42ac      	cmp	r4, r5
 8010418:	bf88      	it	hi
 801041a:	2300      	movhi	r3, #0
 801041c:	3302      	adds	r3, #2
 801041e:	4403      	add	r3, r0
 8010420:	1a18      	subs	r0, r3, r0
 8010422:	b003      	add	sp, #12
 8010424:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010426:	f813 6b01 	ldrb.w	r6, [r3], #1
 801042a:	f801 6f01 	strb.w	r6, [r1, #1]!
 801042e:	e7ed      	b.n	801040c <__exponent+0x44>
 8010430:	2330      	movs	r3, #48	@ 0x30
 8010432:	3130      	adds	r1, #48	@ 0x30
 8010434:	7083      	strb	r3, [r0, #2]
 8010436:	70c1      	strb	r1, [r0, #3]
 8010438:	1d03      	adds	r3, r0, #4
 801043a:	e7f1      	b.n	8010420 <__exponent+0x58>
 801043c:	0000      	movs	r0, r0
	...

08010440 <_printf_float>:
 8010440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010444:	b08d      	sub	sp, #52	@ 0x34
 8010446:	460c      	mov	r4, r1
 8010448:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801044c:	4616      	mov	r6, r2
 801044e:	461f      	mov	r7, r3
 8010450:	4605      	mov	r5, r0
 8010452:	f001 f81d 	bl	8011490 <_localeconv_r>
 8010456:	f8d0 b000 	ldr.w	fp, [r0]
 801045a:	4658      	mov	r0, fp
 801045c:	f7ef ff98 	bl	8000390 <strlen>
 8010460:	2300      	movs	r3, #0
 8010462:	930a      	str	r3, [sp, #40]	@ 0x28
 8010464:	f8d8 3000 	ldr.w	r3, [r8]
 8010468:	f894 9018 	ldrb.w	r9, [r4, #24]
 801046c:	6822      	ldr	r2, [r4, #0]
 801046e:	9005      	str	r0, [sp, #20]
 8010470:	3307      	adds	r3, #7
 8010472:	f023 0307 	bic.w	r3, r3, #7
 8010476:	f103 0108 	add.w	r1, r3, #8
 801047a:	f8c8 1000 	str.w	r1, [r8]
 801047e:	ed93 0b00 	vldr	d0, [r3]
 8010482:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80106e0 <_printf_float+0x2a0>
 8010486:	eeb0 7bc0 	vabs.f64	d7, d0
 801048a:	eeb4 7b46 	vcmp.f64	d7, d6
 801048e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010492:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8010496:	dd24      	ble.n	80104e2 <_printf_float+0xa2>
 8010498:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801049c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104a0:	d502      	bpl.n	80104a8 <_printf_float+0x68>
 80104a2:	232d      	movs	r3, #45	@ 0x2d
 80104a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80104a8:	498f      	ldr	r1, [pc, #572]	@ (80106e8 <_printf_float+0x2a8>)
 80104aa:	4b90      	ldr	r3, [pc, #576]	@ (80106ec <_printf_float+0x2ac>)
 80104ac:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80104b0:	bf94      	ite	ls
 80104b2:	4688      	movls	r8, r1
 80104b4:	4698      	movhi	r8, r3
 80104b6:	f022 0204 	bic.w	r2, r2, #4
 80104ba:	2303      	movs	r3, #3
 80104bc:	6123      	str	r3, [r4, #16]
 80104be:	6022      	str	r2, [r4, #0]
 80104c0:	f04f 0a00 	mov.w	sl, #0
 80104c4:	9700      	str	r7, [sp, #0]
 80104c6:	4633      	mov	r3, r6
 80104c8:	aa0b      	add	r2, sp, #44	@ 0x2c
 80104ca:	4621      	mov	r1, r4
 80104cc:	4628      	mov	r0, r5
 80104ce:	f000 f9d1 	bl	8010874 <_printf_common>
 80104d2:	3001      	adds	r0, #1
 80104d4:	f040 8089 	bne.w	80105ea <_printf_float+0x1aa>
 80104d8:	f04f 30ff 	mov.w	r0, #4294967295
 80104dc:	b00d      	add	sp, #52	@ 0x34
 80104de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104e2:	eeb4 0b40 	vcmp.f64	d0, d0
 80104e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104ea:	d709      	bvc.n	8010500 <_printf_float+0xc0>
 80104ec:	ee10 3a90 	vmov	r3, s1
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	bfbc      	itt	lt
 80104f4:	232d      	movlt	r3, #45	@ 0x2d
 80104f6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80104fa:	497d      	ldr	r1, [pc, #500]	@ (80106f0 <_printf_float+0x2b0>)
 80104fc:	4b7d      	ldr	r3, [pc, #500]	@ (80106f4 <_printf_float+0x2b4>)
 80104fe:	e7d5      	b.n	80104ac <_printf_float+0x6c>
 8010500:	6863      	ldr	r3, [r4, #4]
 8010502:	1c59      	adds	r1, r3, #1
 8010504:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8010508:	d139      	bne.n	801057e <_printf_float+0x13e>
 801050a:	2306      	movs	r3, #6
 801050c:	6063      	str	r3, [r4, #4]
 801050e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8010512:	2300      	movs	r3, #0
 8010514:	6022      	str	r2, [r4, #0]
 8010516:	9303      	str	r3, [sp, #12]
 8010518:	ab0a      	add	r3, sp, #40	@ 0x28
 801051a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801051e:	ab09      	add	r3, sp, #36	@ 0x24
 8010520:	9300      	str	r3, [sp, #0]
 8010522:	6861      	ldr	r1, [r4, #4]
 8010524:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8010528:	4628      	mov	r0, r5
 801052a:	f7ff fef9 	bl	8010320 <__cvt>
 801052e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8010532:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010534:	4680      	mov	r8, r0
 8010536:	d129      	bne.n	801058c <_printf_float+0x14c>
 8010538:	1cc8      	adds	r0, r1, #3
 801053a:	db02      	blt.n	8010542 <_printf_float+0x102>
 801053c:	6863      	ldr	r3, [r4, #4]
 801053e:	4299      	cmp	r1, r3
 8010540:	dd41      	ble.n	80105c6 <_printf_float+0x186>
 8010542:	f1a9 0902 	sub.w	r9, r9, #2
 8010546:	fa5f f989 	uxtb.w	r9, r9
 801054a:	3901      	subs	r1, #1
 801054c:	464a      	mov	r2, r9
 801054e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8010552:	9109      	str	r1, [sp, #36]	@ 0x24
 8010554:	f7ff ff38 	bl	80103c8 <__exponent>
 8010558:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801055a:	1813      	adds	r3, r2, r0
 801055c:	2a01      	cmp	r2, #1
 801055e:	4682      	mov	sl, r0
 8010560:	6123      	str	r3, [r4, #16]
 8010562:	dc02      	bgt.n	801056a <_printf_float+0x12a>
 8010564:	6822      	ldr	r2, [r4, #0]
 8010566:	07d2      	lsls	r2, r2, #31
 8010568:	d501      	bpl.n	801056e <_printf_float+0x12e>
 801056a:	3301      	adds	r3, #1
 801056c:	6123      	str	r3, [r4, #16]
 801056e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8010572:	2b00      	cmp	r3, #0
 8010574:	d0a6      	beq.n	80104c4 <_printf_float+0x84>
 8010576:	232d      	movs	r3, #45	@ 0x2d
 8010578:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801057c:	e7a2      	b.n	80104c4 <_printf_float+0x84>
 801057e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8010582:	d1c4      	bne.n	801050e <_printf_float+0xce>
 8010584:	2b00      	cmp	r3, #0
 8010586:	d1c2      	bne.n	801050e <_printf_float+0xce>
 8010588:	2301      	movs	r3, #1
 801058a:	e7bf      	b.n	801050c <_printf_float+0xcc>
 801058c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8010590:	d9db      	bls.n	801054a <_printf_float+0x10a>
 8010592:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8010596:	d118      	bne.n	80105ca <_printf_float+0x18a>
 8010598:	2900      	cmp	r1, #0
 801059a:	6863      	ldr	r3, [r4, #4]
 801059c:	dd0b      	ble.n	80105b6 <_printf_float+0x176>
 801059e:	6121      	str	r1, [r4, #16]
 80105a0:	b913      	cbnz	r3, 80105a8 <_printf_float+0x168>
 80105a2:	6822      	ldr	r2, [r4, #0]
 80105a4:	07d0      	lsls	r0, r2, #31
 80105a6:	d502      	bpl.n	80105ae <_printf_float+0x16e>
 80105a8:	3301      	adds	r3, #1
 80105aa:	440b      	add	r3, r1
 80105ac:	6123      	str	r3, [r4, #16]
 80105ae:	65a1      	str	r1, [r4, #88]	@ 0x58
 80105b0:	f04f 0a00 	mov.w	sl, #0
 80105b4:	e7db      	b.n	801056e <_printf_float+0x12e>
 80105b6:	b913      	cbnz	r3, 80105be <_printf_float+0x17e>
 80105b8:	6822      	ldr	r2, [r4, #0]
 80105ba:	07d2      	lsls	r2, r2, #31
 80105bc:	d501      	bpl.n	80105c2 <_printf_float+0x182>
 80105be:	3302      	adds	r3, #2
 80105c0:	e7f4      	b.n	80105ac <_printf_float+0x16c>
 80105c2:	2301      	movs	r3, #1
 80105c4:	e7f2      	b.n	80105ac <_printf_float+0x16c>
 80105c6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80105ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80105cc:	4299      	cmp	r1, r3
 80105ce:	db05      	blt.n	80105dc <_printf_float+0x19c>
 80105d0:	6823      	ldr	r3, [r4, #0]
 80105d2:	6121      	str	r1, [r4, #16]
 80105d4:	07d8      	lsls	r0, r3, #31
 80105d6:	d5ea      	bpl.n	80105ae <_printf_float+0x16e>
 80105d8:	1c4b      	adds	r3, r1, #1
 80105da:	e7e7      	b.n	80105ac <_printf_float+0x16c>
 80105dc:	2900      	cmp	r1, #0
 80105de:	bfd4      	ite	le
 80105e0:	f1c1 0202 	rsble	r2, r1, #2
 80105e4:	2201      	movgt	r2, #1
 80105e6:	4413      	add	r3, r2
 80105e8:	e7e0      	b.n	80105ac <_printf_float+0x16c>
 80105ea:	6823      	ldr	r3, [r4, #0]
 80105ec:	055a      	lsls	r2, r3, #21
 80105ee:	d407      	bmi.n	8010600 <_printf_float+0x1c0>
 80105f0:	6923      	ldr	r3, [r4, #16]
 80105f2:	4642      	mov	r2, r8
 80105f4:	4631      	mov	r1, r6
 80105f6:	4628      	mov	r0, r5
 80105f8:	47b8      	blx	r7
 80105fa:	3001      	adds	r0, #1
 80105fc:	d12a      	bne.n	8010654 <_printf_float+0x214>
 80105fe:	e76b      	b.n	80104d8 <_printf_float+0x98>
 8010600:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8010604:	f240 80e0 	bls.w	80107c8 <_printf_float+0x388>
 8010608:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801060c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010614:	d133      	bne.n	801067e <_printf_float+0x23e>
 8010616:	4a38      	ldr	r2, [pc, #224]	@ (80106f8 <_printf_float+0x2b8>)
 8010618:	2301      	movs	r3, #1
 801061a:	4631      	mov	r1, r6
 801061c:	4628      	mov	r0, r5
 801061e:	47b8      	blx	r7
 8010620:	3001      	adds	r0, #1
 8010622:	f43f af59 	beq.w	80104d8 <_printf_float+0x98>
 8010626:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801062a:	4543      	cmp	r3, r8
 801062c:	db02      	blt.n	8010634 <_printf_float+0x1f4>
 801062e:	6823      	ldr	r3, [r4, #0]
 8010630:	07d8      	lsls	r0, r3, #31
 8010632:	d50f      	bpl.n	8010654 <_printf_float+0x214>
 8010634:	9b05      	ldr	r3, [sp, #20]
 8010636:	465a      	mov	r2, fp
 8010638:	4631      	mov	r1, r6
 801063a:	4628      	mov	r0, r5
 801063c:	47b8      	blx	r7
 801063e:	3001      	adds	r0, #1
 8010640:	f43f af4a 	beq.w	80104d8 <_printf_float+0x98>
 8010644:	f04f 0900 	mov.w	r9, #0
 8010648:	f108 38ff 	add.w	r8, r8, #4294967295
 801064c:	f104 0a1a 	add.w	sl, r4, #26
 8010650:	45c8      	cmp	r8, r9
 8010652:	dc09      	bgt.n	8010668 <_printf_float+0x228>
 8010654:	6823      	ldr	r3, [r4, #0]
 8010656:	079b      	lsls	r3, r3, #30
 8010658:	f100 8107 	bmi.w	801086a <_printf_float+0x42a>
 801065c:	68e0      	ldr	r0, [r4, #12]
 801065e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010660:	4298      	cmp	r0, r3
 8010662:	bfb8      	it	lt
 8010664:	4618      	movlt	r0, r3
 8010666:	e739      	b.n	80104dc <_printf_float+0x9c>
 8010668:	2301      	movs	r3, #1
 801066a:	4652      	mov	r2, sl
 801066c:	4631      	mov	r1, r6
 801066e:	4628      	mov	r0, r5
 8010670:	47b8      	blx	r7
 8010672:	3001      	adds	r0, #1
 8010674:	f43f af30 	beq.w	80104d8 <_printf_float+0x98>
 8010678:	f109 0901 	add.w	r9, r9, #1
 801067c:	e7e8      	b.n	8010650 <_printf_float+0x210>
 801067e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010680:	2b00      	cmp	r3, #0
 8010682:	dc3b      	bgt.n	80106fc <_printf_float+0x2bc>
 8010684:	4a1c      	ldr	r2, [pc, #112]	@ (80106f8 <_printf_float+0x2b8>)
 8010686:	2301      	movs	r3, #1
 8010688:	4631      	mov	r1, r6
 801068a:	4628      	mov	r0, r5
 801068c:	47b8      	blx	r7
 801068e:	3001      	adds	r0, #1
 8010690:	f43f af22 	beq.w	80104d8 <_printf_float+0x98>
 8010694:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8010698:	ea59 0303 	orrs.w	r3, r9, r3
 801069c:	d102      	bne.n	80106a4 <_printf_float+0x264>
 801069e:	6823      	ldr	r3, [r4, #0]
 80106a0:	07d9      	lsls	r1, r3, #31
 80106a2:	d5d7      	bpl.n	8010654 <_printf_float+0x214>
 80106a4:	9b05      	ldr	r3, [sp, #20]
 80106a6:	465a      	mov	r2, fp
 80106a8:	4631      	mov	r1, r6
 80106aa:	4628      	mov	r0, r5
 80106ac:	47b8      	blx	r7
 80106ae:	3001      	adds	r0, #1
 80106b0:	f43f af12 	beq.w	80104d8 <_printf_float+0x98>
 80106b4:	f04f 0a00 	mov.w	sl, #0
 80106b8:	f104 0b1a 	add.w	fp, r4, #26
 80106bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80106be:	425b      	negs	r3, r3
 80106c0:	4553      	cmp	r3, sl
 80106c2:	dc01      	bgt.n	80106c8 <_printf_float+0x288>
 80106c4:	464b      	mov	r3, r9
 80106c6:	e794      	b.n	80105f2 <_printf_float+0x1b2>
 80106c8:	2301      	movs	r3, #1
 80106ca:	465a      	mov	r2, fp
 80106cc:	4631      	mov	r1, r6
 80106ce:	4628      	mov	r0, r5
 80106d0:	47b8      	blx	r7
 80106d2:	3001      	adds	r0, #1
 80106d4:	f43f af00 	beq.w	80104d8 <_printf_float+0x98>
 80106d8:	f10a 0a01 	add.w	sl, sl, #1
 80106dc:	e7ee      	b.n	80106bc <_printf_float+0x27c>
 80106de:	bf00      	nop
 80106e0:	ffffffff 	.word	0xffffffff
 80106e4:	7fefffff 	.word	0x7fefffff
 80106e8:	08014fd4 	.word	0x08014fd4
 80106ec:	08014fd8 	.word	0x08014fd8
 80106f0:	08014fdc 	.word	0x08014fdc
 80106f4:	08014fe0 	.word	0x08014fe0
 80106f8:	08014fe4 	.word	0x08014fe4
 80106fc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80106fe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010702:	4553      	cmp	r3, sl
 8010704:	bfa8      	it	ge
 8010706:	4653      	movge	r3, sl
 8010708:	2b00      	cmp	r3, #0
 801070a:	4699      	mov	r9, r3
 801070c:	dc37      	bgt.n	801077e <_printf_float+0x33e>
 801070e:	2300      	movs	r3, #0
 8010710:	9307      	str	r3, [sp, #28]
 8010712:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010716:	f104 021a 	add.w	r2, r4, #26
 801071a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801071c:	9907      	ldr	r1, [sp, #28]
 801071e:	9306      	str	r3, [sp, #24]
 8010720:	eba3 0309 	sub.w	r3, r3, r9
 8010724:	428b      	cmp	r3, r1
 8010726:	dc31      	bgt.n	801078c <_printf_float+0x34c>
 8010728:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801072a:	459a      	cmp	sl, r3
 801072c:	dc3b      	bgt.n	80107a6 <_printf_float+0x366>
 801072e:	6823      	ldr	r3, [r4, #0]
 8010730:	07da      	lsls	r2, r3, #31
 8010732:	d438      	bmi.n	80107a6 <_printf_float+0x366>
 8010734:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010736:	ebaa 0903 	sub.w	r9, sl, r3
 801073a:	9b06      	ldr	r3, [sp, #24]
 801073c:	ebaa 0303 	sub.w	r3, sl, r3
 8010740:	4599      	cmp	r9, r3
 8010742:	bfa8      	it	ge
 8010744:	4699      	movge	r9, r3
 8010746:	f1b9 0f00 	cmp.w	r9, #0
 801074a:	dc34      	bgt.n	80107b6 <_printf_float+0x376>
 801074c:	f04f 0800 	mov.w	r8, #0
 8010750:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010754:	f104 0b1a 	add.w	fp, r4, #26
 8010758:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801075a:	ebaa 0303 	sub.w	r3, sl, r3
 801075e:	eba3 0309 	sub.w	r3, r3, r9
 8010762:	4543      	cmp	r3, r8
 8010764:	f77f af76 	ble.w	8010654 <_printf_float+0x214>
 8010768:	2301      	movs	r3, #1
 801076a:	465a      	mov	r2, fp
 801076c:	4631      	mov	r1, r6
 801076e:	4628      	mov	r0, r5
 8010770:	47b8      	blx	r7
 8010772:	3001      	adds	r0, #1
 8010774:	f43f aeb0 	beq.w	80104d8 <_printf_float+0x98>
 8010778:	f108 0801 	add.w	r8, r8, #1
 801077c:	e7ec      	b.n	8010758 <_printf_float+0x318>
 801077e:	4642      	mov	r2, r8
 8010780:	4631      	mov	r1, r6
 8010782:	4628      	mov	r0, r5
 8010784:	47b8      	blx	r7
 8010786:	3001      	adds	r0, #1
 8010788:	d1c1      	bne.n	801070e <_printf_float+0x2ce>
 801078a:	e6a5      	b.n	80104d8 <_printf_float+0x98>
 801078c:	2301      	movs	r3, #1
 801078e:	4631      	mov	r1, r6
 8010790:	4628      	mov	r0, r5
 8010792:	9206      	str	r2, [sp, #24]
 8010794:	47b8      	blx	r7
 8010796:	3001      	adds	r0, #1
 8010798:	f43f ae9e 	beq.w	80104d8 <_printf_float+0x98>
 801079c:	9b07      	ldr	r3, [sp, #28]
 801079e:	9a06      	ldr	r2, [sp, #24]
 80107a0:	3301      	adds	r3, #1
 80107a2:	9307      	str	r3, [sp, #28]
 80107a4:	e7b9      	b.n	801071a <_printf_float+0x2da>
 80107a6:	9b05      	ldr	r3, [sp, #20]
 80107a8:	465a      	mov	r2, fp
 80107aa:	4631      	mov	r1, r6
 80107ac:	4628      	mov	r0, r5
 80107ae:	47b8      	blx	r7
 80107b0:	3001      	adds	r0, #1
 80107b2:	d1bf      	bne.n	8010734 <_printf_float+0x2f4>
 80107b4:	e690      	b.n	80104d8 <_printf_float+0x98>
 80107b6:	9a06      	ldr	r2, [sp, #24]
 80107b8:	464b      	mov	r3, r9
 80107ba:	4442      	add	r2, r8
 80107bc:	4631      	mov	r1, r6
 80107be:	4628      	mov	r0, r5
 80107c0:	47b8      	blx	r7
 80107c2:	3001      	adds	r0, #1
 80107c4:	d1c2      	bne.n	801074c <_printf_float+0x30c>
 80107c6:	e687      	b.n	80104d8 <_printf_float+0x98>
 80107c8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80107cc:	f1b9 0f01 	cmp.w	r9, #1
 80107d0:	dc01      	bgt.n	80107d6 <_printf_float+0x396>
 80107d2:	07db      	lsls	r3, r3, #31
 80107d4:	d536      	bpl.n	8010844 <_printf_float+0x404>
 80107d6:	2301      	movs	r3, #1
 80107d8:	4642      	mov	r2, r8
 80107da:	4631      	mov	r1, r6
 80107dc:	4628      	mov	r0, r5
 80107de:	47b8      	blx	r7
 80107e0:	3001      	adds	r0, #1
 80107e2:	f43f ae79 	beq.w	80104d8 <_printf_float+0x98>
 80107e6:	9b05      	ldr	r3, [sp, #20]
 80107e8:	465a      	mov	r2, fp
 80107ea:	4631      	mov	r1, r6
 80107ec:	4628      	mov	r0, r5
 80107ee:	47b8      	blx	r7
 80107f0:	3001      	adds	r0, #1
 80107f2:	f43f ae71 	beq.w	80104d8 <_printf_float+0x98>
 80107f6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80107fa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80107fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010802:	f109 39ff 	add.w	r9, r9, #4294967295
 8010806:	d018      	beq.n	801083a <_printf_float+0x3fa>
 8010808:	464b      	mov	r3, r9
 801080a:	f108 0201 	add.w	r2, r8, #1
 801080e:	4631      	mov	r1, r6
 8010810:	4628      	mov	r0, r5
 8010812:	47b8      	blx	r7
 8010814:	3001      	adds	r0, #1
 8010816:	d10c      	bne.n	8010832 <_printf_float+0x3f2>
 8010818:	e65e      	b.n	80104d8 <_printf_float+0x98>
 801081a:	2301      	movs	r3, #1
 801081c:	465a      	mov	r2, fp
 801081e:	4631      	mov	r1, r6
 8010820:	4628      	mov	r0, r5
 8010822:	47b8      	blx	r7
 8010824:	3001      	adds	r0, #1
 8010826:	f43f ae57 	beq.w	80104d8 <_printf_float+0x98>
 801082a:	f108 0801 	add.w	r8, r8, #1
 801082e:	45c8      	cmp	r8, r9
 8010830:	dbf3      	blt.n	801081a <_printf_float+0x3da>
 8010832:	4653      	mov	r3, sl
 8010834:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8010838:	e6dc      	b.n	80105f4 <_printf_float+0x1b4>
 801083a:	f04f 0800 	mov.w	r8, #0
 801083e:	f104 0b1a 	add.w	fp, r4, #26
 8010842:	e7f4      	b.n	801082e <_printf_float+0x3ee>
 8010844:	2301      	movs	r3, #1
 8010846:	4642      	mov	r2, r8
 8010848:	e7e1      	b.n	801080e <_printf_float+0x3ce>
 801084a:	2301      	movs	r3, #1
 801084c:	464a      	mov	r2, r9
 801084e:	4631      	mov	r1, r6
 8010850:	4628      	mov	r0, r5
 8010852:	47b8      	blx	r7
 8010854:	3001      	adds	r0, #1
 8010856:	f43f ae3f 	beq.w	80104d8 <_printf_float+0x98>
 801085a:	f108 0801 	add.w	r8, r8, #1
 801085e:	68e3      	ldr	r3, [r4, #12]
 8010860:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010862:	1a5b      	subs	r3, r3, r1
 8010864:	4543      	cmp	r3, r8
 8010866:	dcf0      	bgt.n	801084a <_printf_float+0x40a>
 8010868:	e6f8      	b.n	801065c <_printf_float+0x21c>
 801086a:	f04f 0800 	mov.w	r8, #0
 801086e:	f104 0919 	add.w	r9, r4, #25
 8010872:	e7f4      	b.n	801085e <_printf_float+0x41e>

08010874 <_printf_common>:
 8010874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010878:	4616      	mov	r6, r2
 801087a:	4698      	mov	r8, r3
 801087c:	688a      	ldr	r2, [r1, #8]
 801087e:	690b      	ldr	r3, [r1, #16]
 8010880:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010884:	4293      	cmp	r3, r2
 8010886:	bfb8      	it	lt
 8010888:	4613      	movlt	r3, r2
 801088a:	6033      	str	r3, [r6, #0]
 801088c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010890:	4607      	mov	r7, r0
 8010892:	460c      	mov	r4, r1
 8010894:	b10a      	cbz	r2, 801089a <_printf_common+0x26>
 8010896:	3301      	adds	r3, #1
 8010898:	6033      	str	r3, [r6, #0]
 801089a:	6823      	ldr	r3, [r4, #0]
 801089c:	0699      	lsls	r1, r3, #26
 801089e:	bf42      	ittt	mi
 80108a0:	6833      	ldrmi	r3, [r6, #0]
 80108a2:	3302      	addmi	r3, #2
 80108a4:	6033      	strmi	r3, [r6, #0]
 80108a6:	6825      	ldr	r5, [r4, #0]
 80108a8:	f015 0506 	ands.w	r5, r5, #6
 80108ac:	d106      	bne.n	80108bc <_printf_common+0x48>
 80108ae:	f104 0a19 	add.w	sl, r4, #25
 80108b2:	68e3      	ldr	r3, [r4, #12]
 80108b4:	6832      	ldr	r2, [r6, #0]
 80108b6:	1a9b      	subs	r3, r3, r2
 80108b8:	42ab      	cmp	r3, r5
 80108ba:	dc26      	bgt.n	801090a <_printf_common+0x96>
 80108bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80108c0:	6822      	ldr	r2, [r4, #0]
 80108c2:	3b00      	subs	r3, #0
 80108c4:	bf18      	it	ne
 80108c6:	2301      	movne	r3, #1
 80108c8:	0692      	lsls	r2, r2, #26
 80108ca:	d42b      	bmi.n	8010924 <_printf_common+0xb0>
 80108cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80108d0:	4641      	mov	r1, r8
 80108d2:	4638      	mov	r0, r7
 80108d4:	47c8      	blx	r9
 80108d6:	3001      	adds	r0, #1
 80108d8:	d01e      	beq.n	8010918 <_printf_common+0xa4>
 80108da:	6823      	ldr	r3, [r4, #0]
 80108dc:	6922      	ldr	r2, [r4, #16]
 80108de:	f003 0306 	and.w	r3, r3, #6
 80108e2:	2b04      	cmp	r3, #4
 80108e4:	bf02      	ittt	eq
 80108e6:	68e5      	ldreq	r5, [r4, #12]
 80108e8:	6833      	ldreq	r3, [r6, #0]
 80108ea:	1aed      	subeq	r5, r5, r3
 80108ec:	68a3      	ldr	r3, [r4, #8]
 80108ee:	bf0c      	ite	eq
 80108f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80108f4:	2500      	movne	r5, #0
 80108f6:	4293      	cmp	r3, r2
 80108f8:	bfc4      	itt	gt
 80108fa:	1a9b      	subgt	r3, r3, r2
 80108fc:	18ed      	addgt	r5, r5, r3
 80108fe:	2600      	movs	r6, #0
 8010900:	341a      	adds	r4, #26
 8010902:	42b5      	cmp	r5, r6
 8010904:	d11a      	bne.n	801093c <_printf_common+0xc8>
 8010906:	2000      	movs	r0, #0
 8010908:	e008      	b.n	801091c <_printf_common+0xa8>
 801090a:	2301      	movs	r3, #1
 801090c:	4652      	mov	r2, sl
 801090e:	4641      	mov	r1, r8
 8010910:	4638      	mov	r0, r7
 8010912:	47c8      	blx	r9
 8010914:	3001      	adds	r0, #1
 8010916:	d103      	bne.n	8010920 <_printf_common+0xac>
 8010918:	f04f 30ff 	mov.w	r0, #4294967295
 801091c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010920:	3501      	adds	r5, #1
 8010922:	e7c6      	b.n	80108b2 <_printf_common+0x3e>
 8010924:	18e1      	adds	r1, r4, r3
 8010926:	1c5a      	adds	r2, r3, #1
 8010928:	2030      	movs	r0, #48	@ 0x30
 801092a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801092e:	4422      	add	r2, r4
 8010930:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010934:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010938:	3302      	adds	r3, #2
 801093a:	e7c7      	b.n	80108cc <_printf_common+0x58>
 801093c:	2301      	movs	r3, #1
 801093e:	4622      	mov	r2, r4
 8010940:	4641      	mov	r1, r8
 8010942:	4638      	mov	r0, r7
 8010944:	47c8      	blx	r9
 8010946:	3001      	adds	r0, #1
 8010948:	d0e6      	beq.n	8010918 <_printf_common+0xa4>
 801094a:	3601      	adds	r6, #1
 801094c:	e7d9      	b.n	8010902 <_printf_common+0x8e>
	...

08010950 <_printf_i>:
 8010950:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010954:	7e0f      	ldrb	r7, [r1, #24]
 8010956:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010958:	2f78      	cmp	r7, #120	@ 0x78
 801095a:	4691      	mov	r9, r2
 801095c:	4680      	mov	r8, r0
 801095e:	460c      	mov	r4, r1
 8010960:	469a      	mov	sl, r3
 8010962:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010966:	d807      	bhi.n	8010978 <_printf_i+0x28>
 8010968:	2f62      	cmp	r7, #98	@ 0x62
 801096a:	d80a      	bhi.n	8010982 <_printf_i+0x32>
 801096c:	2f00      	cmp	r7, #0
 801096e:	f000 80d2 	beq.w	8010b16 <_printf_i+0x1c6>
 8010972:	2f58      	cmp	r7, #88	@ 0x58
 8010974:	f000 80b9 	beq.w	8010aea <_printf_i+0x19a>
 8010978:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801097c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010980:	e03a      	b.n	80109f8 <_printf_i+0xa8>
 8010982:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010986:	2b15      	cmp	r3, #21
 8010988:	d8f6      	bhi.n	8010978 <_printf_i+0x28>
 801098a:	a101      	add	r1, pc, #4	@ (adr r1, 8010990 <_printf_i+0x40>)
 801098c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010990:	080109e9 	.word	0x080109e9
 8010994:	080109fd 	.word	0x080109fd
 8010998:	08010979 	.word	0x08010979
 801099c:	08010979 	.word	0x08010979
 80109a0:	08010979 	.word	0x08010979
 80109a4:	08010979 	.word	0x08010979
 80109a8:	080109fd 	.word	0x080109fd
 80109ac:	08010979 	.word	0x08010979
 80109b0:	08010979 	.word	0x08010979
 80109b4:	08010979 	.word	0x08010979
 80109b8:	08010979 	.word	0x08010979
 80109bc:	08010afd 	.word	0x08010afd
 80109c0:	08010a27 	.word	0x08010a27
 80109c4:	08010ab7 	.word	0x08010ab7
 80109c8:	08010979 	.word	0x08010979
 80109cc:	08010979 	.word	0x08010979
 80109d0:	08010b1f 	.word	0x08010b1f
 80109d4:	08010979 	.word	0x08010979
 80109d8:	08010a27 	.word	0x08010a27
 80109dc:	08010979 	.word	0x08010979
 80109e0:	08010979 	.word	0x08010979
 80109e4:	08010abf 	.word	0x08010abf
 80109e8:	6833      	ldr	r3, [r6, #0]
 80109ea:	1d1a      	adds	r2, r3, #4
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	6032      	str	r2, [r6, #0]
 80109f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80109f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80109f8:	2301      	movs	r3, #1
 80109fa:	e09d      	b.n	8010b38 <_printf_i+0x1e8>
 80109fc:	6833      	ldr	r3, [r6, #0]
 80109fe:	6820      	ldr	r0, [r4, #0]
 8010a00:	1d19      	adds	r1, r3, #4
 8010a02:	6031      	str	r1, [r6, #0]
 8010a04:	0606      	lsls	r6, r0, #24
 8010a06:	d501      	bpl.n	8010a0c <_printf_i+0xbc>
 8010a08:	681d      	ldr	r5, [r3, #0]
 8010a0a:	e003      	b.n	8010a14 <_printf_i+0xc4>
 8010a0c:	0645      	lsls	r5, r0, #25
 8010a0e:	d5fb      	bpl.n	8010a08 <_printf_i+0xb8>
 8010a10:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010a14:	2d00      	cmp	r5, #0
 8010a16:	da03      	bge.n	8010a20 <_printf_i+0xd0>
 8010a18:	232d      	movs	r3, #45	@ 0x2d
 8010a1a:	426d      	negs	r5, r5
 8010a1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010a20:	4859      	ldr	r0, [pc, #356]	@ (8010b88 <_printf_i+0x238>)
 8010a22:	230a      	movs	r3, #10
 8010a24:	e011      	b.n	8010a4a <_printf_i+0xfa>
 8010a26:	6821      	ldr	r1, [r4, #0]
 8010a28:	6833      	ldr	r3, [r6, #0]
 8010a2a:	0608      	lsls	r0, r1, #24
 8010a2c:	f853 5b04 	ldr.w	r5, [r3], #4
 8010a30:	d402      	bmi.n	8010a38 <_printf_i+0xe8>
 8010a32:	0649      	lsls	r1, r1, #25
 8010a34:	bf48      	it	mi
 8010a36:	b2ad      	uxthmi	r5, r5
 8010a38:	2f6f      	cmp	r7, #111	@ 0x6f
 8010a3a:	4853      	ldr	r0, [pc, #332]	@ (8010b88 <_printf_i+0x238>)
 8010a3c:	6033      	str	r3, [r6, #0]
 8010a3e:	bf14      	ite	ne
 8010a40:	230a      	movne	r3, #10
 8010a42:	2308      	moveq	r3, #8
 8010a44:	2100      	movs	r1, #0
 8010a46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010a4a:	6866      	ldr	r6, [r4, #4]
 8010a4c:	60a6      	str	r6, [r4, #8]
 8010a4e:	2e00      	cmp	r6, #0
 8010a50:	bfa2      	ittt	ge
 8010a52:	6821      	ldrge	r1, [r4, #0]
 8010a54:	f021 0104 	bicge.w	r1, r1, #4
 8010a58:	6021      	strge	r1, [r4, #0]
 8010a5a:	b90d      	cbnz	r5, 8010a60 <_printf_i+0x110>
 8010a5c:	2e00      	cmp	r6, #0
 8010a5e:	d04b      	beq.n	8010af8 <_printf_i+0x1a8>
 8010a60:	4616      	mov	r6, r2
 8010a62:	fbb5 f1f3 	udiv	r1, r5, r3
 8010a66:	fb03 5711 	mls	r7, r3, r1, r5
 8010a6a:	5dc7      	ldrb	r7, [r0, r7]
 8010a6c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010a70:	462f      	mov	r7, r5
 8010a72:	42bb      	cmp	r3, r7
 8010a74:	460d      	mov	r5, r1
 8010a76:	d9f4      	bls.n	8010a62 <_printf_i+0x112>
 8010a78:	2b08      	cmp	r3, #8
 8010a7a:	d10b      	bne.n	8010a94 <_printf_i+0x144>
 8010a7c:	6823      	ldr	r3, [r4, #0]
 8010a7e:	07df      	lsls	r7, r3, #31
 8010a80:	d508      	bpl.n	8010a94 <_printf_i+0x144>
 8010a82:	6923      	ldr	r3, [r4, #16]
 8010a84:	6861      	ldr	r1, [r4, #4]
 8010a86:	4299      	cmp	r1, r3
 8010a88:	bfde      	ittt	le
 8010a8a:	2330      	movle	r3, #48	@ 0x30
 8010a8c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010a90:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010a94:	1b92      	subs	r2, r2, r6
 8010a96:	6122      	str	r2, [r4, #16]
 8010a98:	f8cd a000 	str.w	sl, [sp]
 8010a9c:	464b      	mov	r3, r9
 8010a9e:	aa03      	add	r2, sp, #12
 8010aa0:	4621      	mov	r1, r4
 8010aa2:	4640      	mov	r0, r8
 8010aa4:	f7ff fee6 	bl	8010874 <_printf_common>
 8010aa8:	3001      	adds	r0, #1
 8010aaa:	d14a      	bne.n	8010b42 <_printf_i+0x1f2>
 8010aac:	f04f 30ff 	mov.w	r0, #4294967295
 8010ab0:	b004      	add	sp, #16
 8010ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ab6:	6823      	ldr	r3, [r4, #0]
 8010ab8:	f043 0320 	orr.w	r3, r3, #32
 8010abc:	6023      	str	r3, [r4, #0]
 8010abe:	4833      	ldr	r0, [pc, #204]	@ (8010b8c <_printf_i+0x23c>)
 8010ac0:	2778      	movs	r7, #120	@ 0x78
 8010ac2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010ac6:	6823      	ldr	r3, [r4, #0]
 8010ac8:	6831      	ldr	r1, [r6, #0]
 8010aca:	061f      	lsls	r7, r3, #24
 8010acc:	f851 5b04 	ldr.w	r5, [r1], #4
 8010ad0:	d402      	bmi.n	8010ad8 <_printf_i+0x188>
 8010ad2:	065f      	lsls	r7, r3, #25
 8010ad4:	bf48      	it	mi
 8010ad6:	b2ad      	uxthmi	r5, r5
 8010ad8:	6031      	str	r1, [r6, #0]
 8010ada:	07d9      	lsls	r1, r3, #31
 8010adc:	bf44      	itt	mi
 8010ade:	f043 0320 	orrmi.w	r3, r3, #32
 8010ae2:	6023      	strmi	r3, [r4, #0]
 8010ae4:	b11d      	cbz	r5, 8010aee <_printf_i+0x19e>
 8010ae6:	2310      	movs	r3, #16
 8010ae8:	e7ac      	b.n	8010a44 <_printf_i+0xf4>
 8010aea:	4827      	ldr	r0, [pc, #156]	@ (8010b88 <_printf_i+0x238>)
 8010aec:	e7e9      	b.n	8010ac2 <_printf_i+0x172>
 8010aee:	6823      	ldr	r3, [r4, #0]
 8010af0:	f023 0320 	bic.w	r3, r3, #32
 8010af4:	6023      	str	r3, [r4, #0]
 8010af6:	e7f6      	b.n	8010ae6 <_printf_i+0x196>
 8010af8:	4616      	mov	r6, r2
 8010afa:	e7bd      	b.n	8010a78 <_printf_i+0x128>
 8010afc:	6833      	ldr	r3, [r6, #0]
 8010afe:	6825      	ldr	r5, [r4, #0]
 8010b00:	6961      	ldr	r1, [r4, #20]
 8010b02:	1d18      	adds	r0, r3, #4
 8010b04:	6030      	str	r0, [r6, #0]
 8010b06:	062e      	lsls	r6, r5, #24
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	d501      	bpl.n	8010b10 <_printf_i+0x1c0>
 8010b0c:	6019      	str	r1, [r3, #0]
 8010b0e:	e002      	b.n	8010b16 <_printf_i+0x1c6>
 8010b10:	0668      	lsls	r0, r5, #25
 8010b12:	d5fb      	bpl.n	8010b0c <_printf_i+0x1bc>
 8010b14:	8019      	strh	r1, [r3, #0]
 8010b16:	2300      	movs	r3, #0
 8010b18:	6123      	str	r3, [r4, #16]
 8010b1a:	4616      	mov	r6, r2
 8010b1c:	e7bc      	b.n	8010a98 <_printf_i+0x148>
 8010b1e:	6833      	ldr	r3, [r6, #0]
 8010b20:	1d1a      	adds	r2, r3, #4
 8010b22:	6032      	str	r2, [r6, #0]
 8010b24:	681e      	ldr	r6, [r3, #0]
 8010b26:	6862      	ldr	r2, [r4, #4]
 8010b28:	2100      	movs	r1, #0
 8010b2a:	4630      	mov	r0, r6
 8010b2c:	f7ef fbe0 	bl	80002f0 <memchr>
 8010b30:	b108      	cbz	r0, 8010b36 <_printf_i+0x1e6>
 8010b32:	1b80      	subs	r0, r0, r6
 8010b34:	6060      	str	r0, [r4, #4]
 8010b36:	6863      	ldr	r3, [r4, #4]
 8010b38:	6123      	str	r3, [r4, #16]
 8010b3a:	2300      	movs	r3, #0
 8010b3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010b40:	e7aa      	b.n	8010a98 <_printf_i+0x148>
 8010b42:	6923      	ldr	r3, [r4, #16]
 8010b44:	4632      	mov	r2, r6
 8010b46:	4649      	mov	r1, r9
 8010b48:	4640      	mov	r0, r8
 8010b4a:	47d0      	blx	sl
 8010b4c:	3001      	adds	r0, #1
 8010b4e:	d0ad      	beq.n	8010aac <_printf_i+0x15c>
 8010b50:	6823      	ldr	r3, [r4, #0]
 8010b52:	079b      	lsls	r3, r3, #30
 8010b54:	d413      	bmi.n	8010b7e <_printf_i+0x22e>
 8010b56:	68e0      	ldr	r0, [r4, #12]
 8010b58:	9b03      	ldr	r3, [sp, #12]
 8010b5a:	4298      	cmp	r0, r3
 8010b5c:	bfb8      	it	lt
 8010b5e:	4618      	movlt	r0, r3
 8010b60:	e7a6      	b.n	8010ab0 <_printf_i+0x160>
 8010b62:	2301      	movs	r3, #1
 8010b64:	4632      	mov	r2, r6
 8010b66:	4649      	mov	r1, r9
 8010b68:	4640      	mov	r0, r8
 8010b6a:	47d0      	blx	sl
 8010b6c:	3001      	adds	r0, #1
 8010b6e:	d09d      	beq.n	8010aac <_printf_i+0x15c>
 8010b70:	3501      	adds	r5, #1
 8010b72:	68e3      	ldr	r3, [r4, #12]
 8010b74:	9903      	ldr	r1, [sp, #12]
 8010b76:	1a5b      	subs	r3, r3, r1
 8010b78:	42ab      	cmp	r3, r5
 8010b7a:	dcf2      	bgt.n	8010b62 <_printf_i+0x212>
 8010b7c:	e7eb      	b.n	8010b56 <_printf_i+0x206>
 8010b7e:	2500      	movs	r5, #0
 8010b80:	f104 0619 	add.w	r6, r4, #25
 8010b84:	e7f5      	b.n	8010b72 <_printf_i+0x222>
 8010b86:	bf00      	nop
 8010b88:	08014fe6 	.word	0x08014fe6
 8010b8c:	08014ff7 	.word	0x08014ff7

08010b90 <_scanf_float>:
 8010b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b94:	b087      	sub	sp, #28
 8010b96:	4617      	mov	r7, r2
 8010b98:	9303      	str	r3, [sp, #12]
 8010b9a:	688b      	ldr	r3, [r1, #8]
 8010b9c:	1e5a      	subs	r2, r3, #1
 8010b9e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8010ba2:	bf81      	itttt	hi
 8010ba4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8010ba8:	eb03 0b05 	addhi.w	fp, r3, r5
 8010bac:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8010bb0:	608b      	strhi	r3, [r1, #8]
 8010bb2:	680b      	ldr	r3, [r1, #0]
 8010bb4:	460a      	mov	r2, r1
 8010bb6:	f04f 0500 	mov.w	r5, #0
 8010bba:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8010bbe:	f842 3b1c 	str.w	r3, [r2], #28
 8010bc2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8010bc6:	4680      	mov	r8, r0
 8010bc8:	460c      	mov	r4, r1
 8010bca:	bf98      	it	ls
 8010bcc:	f04f 0b00 	movls.w	fp, #0
 8010bd0:	9201      	str	r2, [sp, #4]
 8010bd2:	4616      	mov	r6, r2
 8010bd4:	46aa      	mov	sl, r5
 8010bd6:	46a9      	mov	r9, r5
 8010bd8:	9502      	str	r5, [sp, #8]
 8010bda:	68a2      	ldr	r2, [r4, #8]
 8010bdc:	b152      	cbz	r2, 8010bf4 <_scanf_float+0x64>
 8010bde:	683b      	ldr	r3, [r7, #0]
 8010be0:	781b      	ldrb	r3, [r3, #0]
 8010be2:	2b4e      	cmp	r3, #78	@ 0x4e
 8010be4:	d864      	bhi.n	8010cb0 <_scanf_float+0x120>
 8010be6:	2b40      	cmp	r3, #64	@ 0x40
 8010be8:	d83c      	bhi.n	8010c64 <_scanf_float+0xd4>
 8010bea:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8010bee:	b2c8      	uxtb	r0, r1
 8010bf0:	280e      	cmp	r0, #14
 8010bf2:	d93a      	bls.n	8010c6a <_scanf_float+0xda>
 8010bf4:	f1b9 0f00 	cmp.w	r9, #0
 8010bf8:	d003      	beq.n	8010c02 <_scanf_float+0x72>
 8010bfa:	6823      	ldr	r3, [r4, #0]
 8010bfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010c00:	6023      	str	r3, [r4, #0]
 8010c02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010c06:	f1ba 0f01 	cmp.w	sl, #1
 8010c0a:	f200 8117 	bhi.w	8010e3c <_scanf_float+0x2ac>
 8010c0e:	9b01      	ldr	r3, [sp, #4]
 8010c10:	429e      	cmp	r6, r3
 8010c12:	f200 8108 	bhi.w	8010e26 <_scanf_float+0x296>
 8010c16:	2001      	movs	r0, #1
 8010c18:	b007      	add	sp, #28
 8010c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c1e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8010c22:	2a0d      	cmp	r2, #13
 8010c24:	d8e6      	bhi.n	8010bf4 <_scanf_float+0x64>
 8010c26:	a101      	add	r1, pc, #4	@ (adr r1, 8010c2c <_scanf_float+0x9c>)
 8010c28:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010c2c:	08010d73 	.word	0x08010d73
 8010c30:	08010bf5 	.word	0x08010bf5
 8010c34:	08010bf5 	.word	0x08010bf5
 8010c38:	08010bf5 	.word	0x08010bf5
 8010c3c:	08010dd3 	.word	0x08010dd3
 8010c40:	08010dab 	.word	0x08010dab
 8010c44:	08010bf5 	.word	0x08010bf5
 8010c48:	08010bf5 	.word	0x08010bf5
 8010c4c:	08010d81 	.word	0x08010d81
 8010c50:	08010bf5 	.word	0x08010bf5
 8010c54:	08010bf5 	.word	0x08010bf5
 8010c58:	08010bf5 	.word	0x08010bf5
 8010c5c:	08010bf5 	.word	0x08010bf5
 8010c60:	08010d39 	.word	0x08010d39
 8010c64:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8010c68:	e7db      	b.n	8010c22 <_scanf_float+0x92>
 8010c6a:	290e      	cmp	r1, #14
 8010c6c:	d8c2      	bhi.n	8010bf4 <_scanf_float+0x64>
 8010c6e:	a001      	add	r0, pc, #4	@ (adr r0, 8010c74 <_scanf_float+0xe4>)
 8010c70:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8010c74:	08010d29 	.word	0x08010d29
 8010c78:	08010bf5 	.word	0x08010bf5
 8010c7c:	08010d29 	.word	0x08010d29
 8010c80:	08010dbf 	.word	0x08010dbf
 8010c84:	08010bf5 	.word	0x08010bf5
 8010c88:	08010cd1 	.word	0x08010cd1
 8010c8c:	08010d0f 	.word	0x08010d0f
 8010c90:	08010d0f 	.word	0x08010d0f
 8010c94:	08010d0f 	.word	0x08010d0f
 8010c98:	08010d0f 	.word	0x08010d0f
 8010c9c:	08010d0f 	.word	0x08010d0f
 8010ca0:	08010d0f 	.word	0x08010d0f
 8010ca4:	08010d0f 	.word	0x08010d0f
 8010ca8:	08010d0f 	.word	0x08010d0f
 8010cac:	08010d0f 	.word	0x08010d0f
 8010cb0:	2b6e      	cmp	r3, #110	@ 0x6e
 8010cb2:	d809      	bhi.n	8010cc8 <_scanf_float+0x138>
 8010cb4:	2b60      	cmp	r3, #96	@ 0x60
 8010cb6:	d8b2      	bhi.n	8010c1e <_scanf_float+0x8e>
 8010cb8:	2b54      	cmp	r3, #84	@ 0x54
 8010cba:	d07b      	beq.n	8010db4 <_scanf_float+0x224>
 8010cbc:	2b59      	cmp	r3, #89	@ 0x59
 8010cbe:	d199      	bne.n	8010bf4 <_scanf_float+0x64>
 8010cc0:	2d07      	cmp	r5, #7
 8010cc2:	d197      	bne.n	8010bf4 <_scanf_float+0x64>
 8010cc4:	2508      	movs	r5, #8
 8010cc6:	e02c      	b.n	8010d22 <_scanf_float+0x192>
 8010cc8:	2b74      	cmp	r3, #116	@ 0x74
 8010cca:	d073      	beq.n	8010db4 <_scanf_float+0x224>
 8010ccc:	2b79      	cmp	r3, #121	@ 0x79
 8010cce:	e7f6      	b.n	8010cbe <_scanf_float+0x12e>
 8010cd0:	6821      	ldr	r1, [r4, #0]
 8010cd2:	05c8      	lsls	r0, r1, #23
 8010cd4:	d51b      	bpl.n	8010d0e <_scanf_float+0x17e>
 8010cd6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8010cda:	6021      	str	r1, [r4, #0]
 8010cdc:	f109 0901 	add.w	r9, r9, #1
 8010ce0:	f1bb 0f00 	cmp.w	fp, #0
 8010ce4:	d003      	beq.n	8010cee <_scanf_float+0x15e>
 8010ce6:	3201      	adds	r2, #1
 8010ce8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010cec:	60a2      	str	r2, [r4, #8]
 8010cee:	68a3      	ldr	r3, [r4, #8]
 8010cf0:	3b01      	subs	r3, #1
 8010cf2:	60a3      	str	r3, [r4, #8]
 8010cf4:	6923      	ldr	r3, [r4, #16]
 8010cf6:	3301      	adds	r3, #1
 8010cf8:	6123      	str	r3, [r4, #16]
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	3b01      	subs	r3, #1
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	607b      	str	r3, [r7, #4]
 8010d02:	f340 8087 	ble.w	8010e14 <_scanf_float+0x284>
 8010d06:	683b      	ldr	r3, [r7, #0]
 8010d08:	3301      	adds	r3, #1
 8010d0a:	603b      	str	r3, [r7, #0]
 8010d0c:	e765      	b.n	8010bda <_scanf_float+0x4a>
 8010d0e:	eb1a 0105 	adds.w	r1, sl, r5
 8010d12:	f47f af6f 	bne.w	8010bf4 <_scanf_float+0x64>
 8010d16:	6822      	ldr	r2, [r4, #0]
 8010d18:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8010d1c:	6022      	str	r2, [r4, #0]
 8010d1e:	460d      	mov	r5, r1
 8010d20:	468a      	mov	sl, r1
 8010d22:	f806 3b01 	strb.w	r3, [r6], #1
 8010d26:	e7e2      	b.n	8010cee <_scanf_float+0x15e>
 8010d28:	6822      	ldr	r2, [r4, #0]
 8010d2a:	0610      	lsls	r0, r2, #24
 8010d2c:	f57f af62 	bpl.w	8010bf4 <_scanf_float+0x64>
 8010d30:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8010d34:	6022      	str	r2, [r4, #0]
 8010d36:	e7f4      	b.n	8010d22 <_scanf_float+0x192>
 8010d38:	f1ba 0f00 	cmp.w	sl, #0
 8010d3c:	d10e      	bne.n	8010d5c <_scanf_float+0x1cc>
 8010d3e:	f1b9 0f00 	cmp.w	r9, #0
 8010d42:	d10e      	bne.n	8010d62 <_scanf_float+0x1d2>
 8010d44:	6822      	ldr	r2, [r4, #0]
 8010d46:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8010d4a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8010d4e:	d108      	bne.n	8010d62 <_scanf_float+0x1d2>
 8010d50:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8010d54:	6022      	str	r2, [r4, #0]
 8010d56:	f04f 0a01 	mov.w	sl, #1
 8010d5a:	e7e2      	b.n	8010d22 <_scanf_float+0x192>
 8010d5c:	f1ba 0f02 	cmp.w	sl, #2
 8010d60:	d055      	beq.n	8010e0e <_scanf_float+0x27e>
 8010d62:	2d01      	cmp	r5, #1
 8010d64:	d002      	beq.n	8010d6c <_scanf_float+0x1dc>
 8010d66:	2d04      	cmp	r5, #4
 8010d68:	f47f af44 	bne.w	8010bf4 <_scanf_float+0x64>
 8010d6c:	3501      	adds	r5, #1
 8010d6e:	b2ed      	uxtb	r5, r5
 8010d70:	e7d7      	b.n	8010d22 <_scanf_float+0x192>
 8010d72:	f1ba 0f01 	cmp.w	sl, #1
 8010d76:	f47f af3d 	bne.w	8010bf4 <_scanf_float+0x64>
 8010d7a:	f04f 0a02 	mov.w	sl, #2
 8010d7e:	e7d0      	b.n	8010d22 <_scanf_float+0x192>
 8010d80:	b97d      	cbnz	r5, 8010da2 <_scanf_float+0x212>
 8010d82:	f1b9 0f00 	cmp.w	r9, #0
 8010d86:	f47f af38 	bne.w	8010bfa <_scanf_float+0x6a>
 8010d8a:	6822      	ldr	r2, [r4, #0]
 8010d8c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8010d90:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8010d94:	f040 8101 	bne.w	8010f9a <_scanf_float+0x40a>
 8010d98:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8010d9c:	6022      	str	r2, [r4, #0]
 8010d9e:	2501      	movs	r5, #1
 8010da0:	e7bf      	b.n	8010d22 <_scanf_float+0x192>
 8010da2:	2d03      	cmp	r5, #3
 8010da4:	d0e2      	beq.n	8010d6c <_scanf_float+0x1dc>
 8010da6:	2d05      	cmp	r5, #5
 8010da8:	e7de      	b.n	8010d68 <_scanf_float+0x1d8>
 8010daa:	2d02      	cmp	r5, #2
 8010dac:	f47f af22 	bne.w	8010bf4 <_scanf_float+0x64>
 8010db0:	2503      	movs	r5, #3
 8010db2:	e7b6      	b.n	8010d22 <_scanf_float+0x192>
 8010db4:	2d06      	cmp	r5, #6
 8010db6:	f47f af1d 	bne.w	8010bf4 <_scanf_float+0x64>
 8010dba:	2507      	movs	r5, #7
 8010dbc:	e7b1      	b.n	8010d22 <_scanf_float+0x192>
 8010dbe:	6822      	ldr	r2, [r4, #0]
 8010dc0:	0591      	lsls	r1, r2, #22
 8010dc2:	f57f af17 	bpl.w	8010bf4 <_scanf_float+0x64>
 8010dc6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8010dca:	6022      	str	r2, [r4, #0]
 8010dcc:	f8cd 9008 	str.w	r9, [sp, #8]
 8010dd0:	e7a7      	b.n	8010d22 <_scanf_float+0x192>
 8010dd2:	6822      	ldr	r2, [r4, #0]
 8010dd4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8010dd8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8010ddc:	d006      	beq.n	8010dec <_scanf_float+0x25c>
 8010dde:	0550      	lsls	r0, r2, #21
 8010de0:	f57f af08 	bpl.w	8010bf4 <_scanf_float+0x64>
 8010de4:	f1b9 0f00 	cmp.w	r9, #0
 8010de8:	f000 80d7 	beq.w	8010f9a <_scanf_float+0x40a>
 8010dec:	0591      	lsls	r1, r2, #22
 8010dee:	bf58      	it	pl
 8010df0:	9902      	ldrpl	r1, [sp, #8]
 8010df2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8010df6:	bf58      	it	pl
 8010df8:	eba9 0101 	subpl.w	r1, r9, r1
 8010dfc:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8010e00:	bf58      	it	pl
 8010e02:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8010e06:	6022      	str	r2, [r4, #0]
 8010e08:	f04f 0900 	mov.w	r9, #0
 8010e0c:	e789      	b.n	8010d22 <_scanf_float+0x192>
 8010e0e:	f04f 0a03 	mov.w	sl, #3
 8010e12:	e786      	b.n	8010d22 <_scanf_float+0x192>
 8010e14:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8010e18:	4639      	mov	r1, r7
 8010e1a:	4640      	mov	r0, r8
 8010e1c:	4798      	blx	r3
 8010e1e:	2800      	cmp	r0, #0
 8010e20:	f43f aedb 	beq.w	8010bda <_scanf_float+0x4a>
 8010e24:	e6e6      	b.n	8010bf4 <_scanf_float+0x64>
 8010e26:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010e2a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010e2e:	463a      	mov	r2, r7
 8010e30:	4640      	mov	r0, r8
 8010e32:	4798      	blx	r3
 8010e34:	6923      	ldr	r3, [r4, #16]
 8010e36:	3b01      	subs	r3, #1
 8010e38:	6123      	str	r3, [r4, #16]
 8010e3a:	e6e8      	b.n	8010c0e <_scanf_float+0x7e>
 8010e3c:	1e6b      	subs	r3, r5, #1
 8010e3e:	2b06      	cmp	r3, #6
 8010e40:	d824      	bhi.n	8010e8c <_scanf_float+0x2fc>
 8010e42:	2d02      	cmp	r5, #2
 8010e44:	d836      	bhi.n	8010eb4 <_scanf_float+0x324>
 8010e46:	9b01      	ldr	r3, [sp, #4]
 8010e48:	429e      	cmp	r6, r3
 8010e4a:	f67f aee4 	bls.w	8010c16 <_scanf_float+0x86>
 8010e4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010e52:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010e56:	463a      	mov	r2, r7
 8010e58:	4640      	mov	r0, r8
 8010e5a:	4798      	blx	r3
 8010e5c:	6923      	ldr	r3, [r4, #16]
 8010e5e:	3b01      	subs	r3, #1
 8010e60:	6123      	str	r3, [r4, #16]
 8010e62:	e7f0      	b.n	8010e46 <_scanf_float+0x2b6>
 8010e64:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010e68:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8010e6c:	463a      	mov	r2, r7
 8010e6e:	4640      	mov	r0, r8
 8010e70:	4798      	blx	r3
 8010e72:	6923      	ldr	r3, [r4, #16]
 8010e74:	3b01      	subs	r3, #1
 8010e76:	6123      	str	r3, [r4, #16]
 8010e78:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010e7c:	fa5f fa8a 	uxtb.w	sl, sl
 8010e80:	f1ba 0f02 	cmp.w	sl, #2
 8010e84:	d1ee      	bne.n	8010e64 <_scanf_float+0x2d4>
 8010e86:	3d03      	subs	r5, #3
 8010e88:	b2ed      	uxtb	r5, r5
 8010e8a:	1b76      	subs	r6, r6, r5
 8010e8c:	6823      	ldr	r3, [r4, #0]
 8010e8e:	05da      	lsls	r2, r3, #23
 8010e90:	d530      	bpl.n	8010ef4 <_scanf_float+0x364>
 8010e92:	055b      	lsls	r3, r3, #21
 8010e94:	d511      	bpl.n	8010eba <_scanf_float+0x32a>
 8010e96:	9b01      	ldr	r3, [sp, #4]
 8010e98:	429e      	cmp	r6, r3
 8010e9a:	f67f aebc 	bls.w	8010c16 <_scanf_float+0x86>
 8010e9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010ea2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010ea6:	463a      	mov	r2, r7
 8010ea8:	4640      	mov	r0, r8
 8010eaa:	4798      	blx	r3
 8010eac:	6923      	ldr	r3, [r4, #16]
 8010eae:	3b01      	subs	r3, #1
 8010eb0:	6123      	str	r3, [r4, #16]
 8010eb2:	e7f0      	b.n	8010e96 <_scanf_float+0x306>
 8010eb4:	46aa      	mov	sl, r5
 8010eb6:	46b3      	mov	fp, r6
 8010eb8:	e7de      	b.n	8010e78 <_scanf_float+0x2e8>
 8010eba:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8010ebe:	6923      	ldr	r3, [r4, #16]
 8010ec0:	2965      	cmp	r1, #101	@ 0x65
 8010ec2:	f103 33ff 	add.w	r3, r3, #4294967295
 8010ec6:	f106 35ff 	add.w	r5, r6, #4294967295
 8010eca:	6123      	str	r3, [r4, #16]
 8010ecc:	d00c      	beq.n	8010ee8 <_scanf_float+0x358>
 8010ece:	2945      	cmp	r1, #69	@ 0x45
 8010ed0:	d00a      	beq.n	8010ee8 <_scanf_float+0x358>
 8010ed2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010ed6:	463a      	mov	r2, r7
 8010ed8:	4640      	mov	r0, r8
 8010eda:	4798      	blx	r3
 8010edc:	6923      	ldr	r3, [r4, #16]
 8010ede:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8010ee2:	3b01      	subs	r3, #1
 8010ee4:	1eb5      	subs	r5, r6, #2
 8010ee6:	6123      	str	r3, [r4, #16]
 8010ee8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010eec:	463a      	mov	r2, r7
 8010eee:	4640      	mov	r0, r8
 8010ef0:	4798      	blx	r3
 8010ef2:	462e      	mov	r6, r5
 8010ef4:	6822      	ldr	r2, [r4, #0]
 8010ef6:	f012 0210 	ands.w	r2, r2, #16
 8010efa:	d001      	beq.n	8010f00 <_scanf_float+0x370>
 8010efc:	2000      	movs	r0, #0
 8010efe:	e68b      	b.n	8010c18 <_scanf_float+0x88>
 8010f00:	7032      	strb	r2, [r6, #0]
 8010f02:	6823      	ldr	r3, [r4, #0]
 8010f04:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8010f08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010f0c:	d11a      	bne.n	8010f44 <_scanf_float+0x3b4>
 8010f0e:	9b02      	ldr	r3, [sp, #8]
 8010f10:	454b      	cmp	r3, r9
 8010f12:	eba3 0209 	sub.w	r2, r3, r9
 8010f16:	d121      	bne.n	8010f5c <_scanf_float+0x3cc>
 8010f18:	9901      	ldr	r1, [sp, #4]
 8010f1a:	2200      	movs	r2, #0
 8010f1c:	4640      	mov	r0, r8
 8010f1e:	f002 fc49 	bl	80137b4 <_strtod_r>
 8010f22:	9b03      	ldr	r3, [sp, #12]
 8010f24:	6821      	ldr	r1, [r4, #0]
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	f011 0f02 	tst.w	r1, #2
 8010f2c:	f103 0204 	add.w	r2, r3, #4
 8010f30:	d01f      	beq.n	8010f72 <_scanf_float+0x3e2>
 8010f32:	9903      	ldr	r1, [sp, #12]
 8010f34:	600a      	str	r2, [r1, #0]
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	ed83 0b00 	vstr	d0, [r3]
 8010f3c:	68e3      	ldr	r3, [r4, #12]
 8010f3e:	3301      	adds	r3, #1
 8010f40:	60e3      	str	r3, [r4, #12]
 8010f42:	e7db      	b.n	8010efc <_scanf_float+0x36c>
 8010f44:	9b04      	ldr	r3, [sp, #16]
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d0e6      	beq.n	8010f18 <_scanf_float+0x388>
 8010f4a:	9905      	ldr	r1, [sp, #20]
 8010f4c:	230a      	movs	r3, #10
 8010f4e:	3101      	adds	r1, #1
 8010f50:	4640      	mov	r0, r8
 8010f52:	f002 fcaf 	bl	80138b4 <_strtol_r>
 8010f56:	9b04      	ldr	r3, [sp, #16]
 8010f58:	9e05      	ldr	r6, [sp, #20]
 8010f5a:	1ac2      	subs	r2, r0, r3
 8010f5c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8010f60:	429e      	cmp	r6, r3
 8010f62:	bf28      	it	cs
 8010f64:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8010f68:	490d      	ldr	r1, [pc, #52]	@ (8010fa0 <_scanf_float+0x410>)
 8010f6a:	4630      	mov	r0, r6
 8010f6c:	f000 f960 	bl	8011230 <siprintf>
 8010f70:	e7d2      	b.n	8010f18 <_scanf_float+0x388>
 8010f72:	f011 0f04 	tst.w	r1, #4
 8010f76:	9903      	ldr	r1, [sp, #12]
 8010f78:	600a      	str	r2, [r1, #0]
 8010f7a:	d1dc      	bne.n	8010f36 <_scanf_float+0x3a6>
 8010f7c:	eeb4 0b40 	vcmp.f64	d0, d0
 8010f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f84:	681d      	ldr	r5, [r3, #0]
 8010f86:	d705      	bvc.n	8010f94 <_scanf_float+0x404>
 8010f88:	4806      	ldr	r0, [pc, #24]	@ (8010fa4 <_scanf_float+0x414>)
 8010f8a:	f000 fb81 	bl	8011690 <nanf>
 8010f8e:	ed85 0a00 	vstr	s0, [r5]
 8010f92:	e7d3      	b.n	8010f3c <_scanf_float+0x3ac>
 8010f94:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8010f98:	e7f9      	b.n	8010f8e <_scanf_float+0x3fe>
 8010f9a:	f04f 0900 	mov.w	r9, #0
 8010f9e:	e630      	b.n	8010c02 <_scanf_float+0x72>
 8010fa0:	08015008 	.word	0x08015008
 8010fa4:	08014fd3 	.word	0x08014fd3

08010fa8 <std>:
 8010fa8:	2300      	movs	r3, #0
 8010faa:	b510      	push	{r4, lr}
 8010fac:	4604      	mov	r4, r0
 8010fae:	e9c0 3300 	strd	r3, r3, [r0]
 8010fb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010fb6:	6083      	str	r3, [r0, #8]
 8010fb8:	8181      	strh	r1, [r0, #12]
 8010fba:	6643      	str	r3, [r0, #100]	@ 0x64
 8010fbc:	81c2      	strh	r2, [r0, #14]
 8010fbe:	6183      	str	r3, [r0, #24]
 8010fc0:	4619      	mov	r1, r3
 8010fc2:	2208      	movs	r2, #8
 8010fc4:	305c      	adds	r0, #92	@ 0x5c
 8010fc6:	f000 fa2b 	bl	8011420 <memset>
 8010fca:	4b0d      	ldr	r3, [pc, #52]	@ (8011000 <std+0x58>)
 8010fcc:	6263      	str	r3, [r4, #36]	@ 0x24
 8010fce:	4b0d      	ldr	r3, [pc, #52]	@ (8011004 <std+0x5c>)
 8010fd0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8011008 <std+0x60>)
 8010fd4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010fd6:	4b0d      	ldr	r3, [pc, #52]	@ (801100c <std+0x64>)
 8010fd8:	6323      	str	r3, [r4, #48]	@ 0x30
 8010fda:	4b0d      	ldr	r3, [pc, #52]	@ (8011010 <std+0x68>)
 8010fdc:	6224      	str	r4, [r4, #32]
 8010fde:	429c      	cmp	r4, r3
 8010fe0:	d006      	beq.n	8010ff0 <std+0x48>
 8010fe2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010fe6:	4294      	cmp	r4, r2
 8010fe8:	d002      	beq.n	8010ff0 <std+0x48>
 8010fea:	33d0      	adds	r3, #208	@ 0xd0
 8010fec:	429c      	cmp	r4, r3
 8010fee:	d105      	bne.n	8010ffc <std+0x54>
 8010ff0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ff8:	f000 bb38 	b.w	801166c <__retarget_lock_init_recursive>
 8010ffc:	bd10      	pop	{r4, pc}
 8010ffe:	bf00      	nop
 8011000:	08011271 	.word	0x08011271
 8011004:	08011293 	.word	0x08011293
 8011008:	080112cb 	.word	0x080112cb
 801100c:	080112ef 	.word	0x080112ef
 8011010:	24004e48 	.word	0x24004e48

08011014 <stdio_exit_handler>:
 8011014:	4a02      	ldr	r2, [pc, #8]	@ (8011020 <stdio_exit_handler+0xc>)
 8011016:	4903      	ldr	r1, [pc, #12]	@ (8011024 <stdio_exit_handler+0x10>)
 8011018:	4803      	ldr	r0, [pc, #12]	@ (8011028 <stdio_exit_handler+0x14>)
 801101a:	f000 b87b 	b.w	8011114 <_fwalk_sglue>
 801101e:	bf00      	nop
 8011020:	24000014 	.word	0x24000014
 8011024:	08013ef5 	.word	0x08013ef5
 8011028:	24000024 	.word	0x24000024

0801102c <cleanup_stdio>:
 801102c:	6841      	ldr	r1, [r0, #4]
 801102e:	4b0c      	ldr	r3, [pc, #48]	@ (8011060 <cleanup_stdio+0x34>)
 8011030:	4299      	cmp	r1, r3
 8011032:	b510      	push	{r4, lr}
 8011034:	4604      	mov	r4, r0
 8011036:	d001      	beq.n	801103c <cleanup_stdio+0x10>
 8011038:	f002 ff5c 	bl	8013ef4 <_fflush_r>
 801103c:	68a1      	ldr	r1, [r4, #8]
 801103e:	4b09      	ldr	r3, [pc, #36]	@ (8011064 <cleanup_stdio+0x38>)
 8011040:	4299      	cmp	r1, r3
 8011042:	d002      	beq.n	801104a <cleanup_stdio+0x1e>
 8011044:	4620      	mov	r0, r4
 8011046:	f002 ff55 	bl	8013ef4 <_fflush_r>
 801104a:	68e1      	ldr	r1, [r4, #12]
 801104c:	4b06      	ldr	r3, [pc, #24]	@ (8011068 <cleanup_stdio+0x3c>)
 801104e:	4299      	cmp	r1, r3
 8011050:	d004      	beq.n	801105c <cleanup_stdio+0x30>
 8011052:	4620      	mov	r0, r4
 8011054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011058:	f002 bf4c 	b.w	8013ef4 <_fflush_r>
 801105c:	bd10      	pop	{r4, pc}
 801105e:	bf00      	nop
 8011060:	24004e48 	.word	0x24004e48
 8011064:	24004eb0 	.word	0x24004eb0
 8011068:	24004f18 	.word	0x24004f18

0801106c <global_stdio_init.part.0>:
 801106c:	b510      	push	{r4, lr}
 801106e:	4b0b      	ldr	r3, [pc, #44]	@ (801109c <global_stdio_init.part.0+0x30>)
 8011070:	4c0b      	ldr	r4, [pc, #44]	@ (80110a0 <global_stdio_init.part.0+0x34>)
 8011072:	4a0c      	ldr	r2, [pc, #48]	@ (80110a4 <global_stdio_init.part.0+0x38>)
 8011074:	601a      	str	r2, [r3, #0]
 8011076:	4620      	mov	r0, r4
 8011078:	2200      	movs	r2, #0
 801107a:	2104      	movs	r1, #4
 801107c:	f7ff ff94 	bl	8010fa8 <std>
 8011080:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011084:	2201      	movs	r2, #1
 8011086:	2109      	movs	r1, #9
 8011088:	f7ff ff8e 	bl	8010fa8 <std>
 801108c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011090:	2202      	movs	r2, #2
 8011092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011096:	2112      	movs	r1, #18
 8011098:	f7ff bf86 	b.w	8010fa8 <std>
 801109c:	24004f80 	.word	0x24004f80
 80110a0:	24004e48 	.word	0x24004e48
 80110a4:	08011015 	.word	0x08011015

080110a8 <__sfp_lock_acquire>:
 80110a8:	4801      	ldr	r0, [pc, #4]	@ (80110b0 <__sfp_lock_acquire+0x8>)
 80110aa:	f000 bae0 	b.w	801166e <__retarget_lock_acquire_recursive>
 80110ae:	bf00      	nop
 80110b0:	24004f89 	.word	0x24004f89

080110b4 <__sfp_lock_release>:
 80110b4:	4801      	ldr	r0, [pc, #4]	@ (80110bc <__sfp_lock_release+0x8>)
 80110b6:	f000 badb 	b.w	8011670 <__retarget_lock_release_recursive>
 80110ba:	bf00      	nop
 80110bc:	24004f89 	.word	0x24004f89

080110c0 <__sinit>:
 80110c0:	b510      	push	{r4, lr}
 80110c2:	4604      	mov	r4, r0
 80110c4:	f7ff fff0 	bl	80110a8 <__sfp_lock_acquire>
 80110c8:	6a23      	ldr	r3, [r4, #32]
 80110ca:	b11b      	cbz	r3, 80110d4 <__sinit+0x14>
 80110cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80110d0:	f7ff bff0 	b.w	80110b4 <__sfp_lock_release>
 80110d4:	4b04      	ldr	r3, [pc, #16]	@ (80110e8 <__sinit+0x28>)
 80110d6:	6223      	str	r3, [r4, #32]
 80110d8:	4b04      	ldr	r3, [pc, #16]	@ (80110ec <__sinit+0x2c>)
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d1f5      	bne.n	80110cc <__sinit+0xc>
 80110e0:	f7ff ffc4 	bl	801106c <global_stdio_init.part.0>
 80110e4:	e7f2      	b.n	80110cc <__sinit+0xc>
 80110e6:	bf00      	nop
 80110e8:	0801102d 	.word	0x0801102d
 80110ec:	24004f80 	.word	0x24004f80

080110f0 <fiprintf>:
 80110f0:	b40e      	push	{r1, r2, r3}
 80110f2:	b503      	push	{r0, r1, lr}
 80110f4:	4601      	mov	r1, r0
 80110f6:	ab03      	add	r3, sp, #12
 80110f8:	4805      	ldr	r0, [pc, #20]	@ (8011110 <fiprintf+0x20>)
 80110fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80110fe:	6800      	ldr	r0, [r0, #0]
 8011100:	9301      	str	r3, [sp, #4]
 8011102:	f002 fd5b 	bl	8013bbc <_vfiprintf_r>
 8011106:	b002      	add	sp, #8
 8011108:	f85d eb04 	ldr.w	lr, [sp], #4
 801110c:	b003      	add	sp, #12
 801110e:	4770      	bx	lr
 8011110:	24000020 	.word	0x24000020

08011114 <_fwalk_sglue>:
 8011114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011118:	4607      	mov	r7, r0
 801111a:	4688      	mov	r8, r1
 801111c:	4614      	mov	r4, r2
 801111e:	2600      	movs	r6, #0
 8011120:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011124:	f1b9 0901 	subs.w	r9, r9, #1
 8011128:	d505      	bpl.n	8011136 <_fwalk_sglue+0x22>
 801112a:	6824      	ldr	r4, [r4, #0]
 801112c:	2c00      	cmp	r4, #0
 801112e:	d1f7      	bne.n	8011120 <_fwalk_sglue+0xc>
 8011130:	4630      	mov	r0, r6
 8011132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011136:	89ab      	ldrh	r3, [r5, #12]
 8011138:	2b01      	cmp	r3, #1
 801113a:	d907      	bls.n	801114c <_fwalk_sglue+0x38>
 801113c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011140:	3301      	adds	r3, #1
 8011142:	d003      	beq.n	801114c <_fwalk_sglue+0x38>
 8011144:	4629      	mov	r1, r5
 8011146:	4638      	mov	r0, r7
 8011148:	47c0      	blx	r8
 801114a:	4306      	orrs	r6, r0
 801114c:	3568      	adds	r5, #104	@ 0x68
 801114e:	e7e9      	b.n	8011124 <_fwalk_sglue+0x10>

08011150 <iprintf>:
 8011150:	b40f      	push	{r0, r1, r2, r3}
 8011152:	b507      	push	{r0, r1, r2, lr}
 8011154:	4906      	ldr	r1, [pc, #24]	@ (8011170 <iprintf+0x20>)
 8011156:	ab04      	add	r3, sp, #16
 8011158:	6808      	ldr	r0, [r1, #0]
 801115a:	f853 2b04 	ldr.w	r2, [r3], #4
 801115e:	6881      	ldr	r1, [r0, #8]
 8011160:	9301      	str	r3, [sp, #4]
 8011162:	f002 fd2b 	bl	8013bbc <_vfiprintf_r>
 8011166:	b003      	add	sp, #12
 8011168:	f85d eb04 	ldr.w	lr, [sp], #4
 801116c:	b004      	add	sp, #16
 801116e:	4770      	bx	lr
 8011170:	24000020 	.word	0x24000020

08011174 <_puts_r>:
 8011174:	6a03      	ldr	r3, [r0, #32]
 8011176:	b570      	push	{r4, r5, r6, lr}
 8011178:	6884      	ldr	r4, [r0, #8]
 801117a:	4605      	mov	r5, r0
 801117c:	460e      	mov	r6, r1
 801117e:	b90b      	cbnz	r3, 8011184 <_puts_r+0x10>
 8011180:	f7ff ff9e 	bl	80110c0 <__sinit>
 8011184:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011186:	07db      	lsls	r3, r3, #31
 8011188:	d405      	bmi.n	8011196 <_puts_r+0x22>
 801118a:	89a3      	ldrh	r3, [r4, #12]
 801118c:	0598      	lsls	r0, r3, #22
 801118e:	d402      	bmi.n	8011196 <_puts_r+0x22>
 8011190:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011192:	f000 fa6c 	bl	801166e <__retarget_lock_acquire_recursive>
 8011196:	89a3      	ldrh	r3, [r4, #12]
 8011198:	0719      	lsls	r1, r3, #28
 801119a:	d502      	bpl.n	80111a2 <_puts_r+0x2e>
 801119c:	6923      	ldr	r3, [r4, #16]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d135      	bne.n	801120e <_puts_r+0x9a>
 80111a2:	4621      	mov	r1, r4
 80111a4:	4628      	mov	r0, r5
 80111a6:	f000 f8e5 	bl	8011374 <__swsetup_r>
 80111aa:	b380      	cbz	r0, 801120e <_puts_r+0x9a>
 80111ac:	f04f 35ff 	mov.w	r5, #4294967295
 80111b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80111b2:	07da      	lsls	r2, r3, #31
 80111b4:	d405      	bmi.n	80111c2 <_puts_r+0x4e>
 80111b6:	89a3      	ldrh	r3, [r4, #12]
 80111b8:	059b      	lsls	r3, r3, #22
 80111ba:	d402      	bmi.n	80111c2 <_puts_r+0x4e>
 80111bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80111be:	f000 fa57 	bl	8011670 <__retarget_lock_release_recursive>
 80111c2:	4628      	mov	r0, r5
 80111c4:	bd70      	pop	{r4, r5, r6, pc}
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	da04      	bge.n	80111d4 <_puts_r+0x60>
 80111ca:	69a2      	ldr	r2, [r4, #24]
 80111cc:	429a      	cmp	r2, r3
 80111ce:	dc17      	bgt.n	8011200 <_puts_r+0x8c>
 80111d0:	290a      	cmp	r1, #10
 80111d2:	d015      	beq.n	8011200 <_puts_r+0x8c>
 80111d4:	6823      	ldr	r3, [r4, #0]
 80111d6:	1c5a      	adds	r2, r3, #1
 80111d8:	6022      	str	r2, [r4, #0]
 80111da:	7019      	strb	r1, [r3, #0]
 80111dc:	68a3      	ldr	r3, [r4, #8]
 80111de:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80111e2:	3b01      	subs	r3, #1
 80111e4:	60a3      	str	r3, [r4, #8]
 80111e6:	2900      	cmp	r1, #0
 80111e8:	d1ed      	bne.n	80111c6 <_puts_r+0x52>
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	da11      	bge.n	8011212 <_puts_r+0x9e>
 80111ee:	4622      	mov	r2, r4
 80111f0:	210a      	movs	r1, #10
 80111f2:	4628      	mov	r0, r5
 80111f4:	f000 f87f 	bl	80112f6 <__swbuf_r>
 80111f8:	3001      	adds	r0, #1
 80111fa:	d0d7      	beq.n	80111ac <_puts_r+0x38>
 80111fc:	250a      	movs	r5, #10
 80111fe:	e7d7      	b.n	80111b0 <_puts_r+0x3c>
 8011200:	4622      	mov	r2, r4
 8011202:	4628      	mov	r0, r5
 8011204:	f000 f877 	bl	80112f6 <__swbuf_r>
 8011208:	3001      	adds	r0, #1
 801120a:	d1e7      	bne.n	80111dc <_puts_r+0x68>
 801120c:	e7ce      	b.n	80111ac <_puts_r+0x38>
 801120e:	3e01      	subs	r6, #1
 8011210:	e7e4      	b.n	80111dc <_puts_r+0x68>
 8011212:	6823      	ldr	r3, [r4, #0]
 8011214:	1c5a      	adds	r2, r3, #1
 8011216:	6022      	str	r2, [r4, #0]
 8011218:	220a      	movs	r2, #10
 801121a:	701a      	strb	r2, [r3, #0]
 801121c:	e7ee      	b.n	80111fc <_puts_r+0x88>
	...

08011220 <puts>:
 8011220:	4b02      	ldr	r3, [pc, #8]	@ (801122c <puts+0xc>)
 8011222:	4601      	mov	r1, r0
 8011224:	6818      	ldr	r0, [r3, #0]
 8011226:	f7ff bfa5 	b.w	8011174 <_puts_r>
 801122a:	bf00      	nop
 801122c:	24000020 	.word	0x24000020

08011230 <siprintf>:
 8011230:	b40e      	push	{r1, r2, r3}
 8011232:	b500      	push	{lr}
 8011234:	b09c      	sub	sp, #112	@ 0x70
 8011236:	ab1d      	add	r3, sp, #116	@ 0x74
 8011238:	9002      	str	r0, [sp, #8]
 801123a:	9006      	str	r0, [sp, #24]
 801123c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011240:	4809      	ldr	r0, [pc, #36]	@ (8011268 <siprintf+0x38>)
 8011242:	9107      	str	r1, [sp, #28]
 8011244:	9104      	str	r1, [sp, #16]
 8011246:	4909      	ldr	r1, [pc, #36]	@ (801126c <siprintf+0x3c>)
 8011248:	f853 2b04 	ldr.w	r2, [r3], #4
 801124c:	9105      	str	r1, [sp, #20]
 801124e:	6800      	ldr	r0, [r0, #0]
 8011250:	9301      	str	r3, [sp, #4]
 8011252:	a902      	add	r1, sp, #8
 8011254:	f002 fb8c 	bl	8013970 <_svfiprintf_r>
 8011258:	9b02      	ldr	r3, [sp, #8]
 801125a:	2200      	movs	r2, #0
 801125c:	701a      	strb	r2, [r3, #0]
 801125e:	b01c      	add	sp, #112	@ 0x70
 8011260:	f85d eb04 	ldr.w	lr, [sp], #4
 8011264:	b003      	add	sp, #12
 8011266:	4770      	bx	lr
 8011268:	24000020 	.word	0x24000020
 801126c:	ffff0208 	.word	0xffff0208

08011270 <__sread>:
 8011270:	b510      	push	{r4, lr}
 8011272:	460c      	mov	r4, r1
 8011274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011278:	f000 f986 	bl	8011588 <_read_r>
 801127c:	2800      	cmp	r0, #0
 801127e:	bfab      	itete	ge
 8011280:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011282:	89a3      	ldrhlt	r3, [r4, #12]
 8011284:	181b      	addge	r3, r3, r0
 8011286:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801128a:	bfac      	ite	ge
 801128c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801128e:	81a3      	strhlt	r3, [r4, #12]
 8011290:	bd10      	pop	{r4, pc}

08011292 <__swrite>:
 8011292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011296:	461f      	mov	r7, r3
 8011298:	898b      	ldrh	r3, [r1, #12]
 801129a:	05db      	lsls	r3, r3, #23
 801129c:	4605      	mov	r5, r0
 801129e:	460c      	mov	r4, r1
 80112a0:	4616      	mov	r6, r2
 80112a2:	d505      	bpl.n	80112b0 <__swrite+0x1e>
 80112a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80112a8:	2302      	movs	r3, #2
 80112aa:	2200      	movs	r2, #0
 80112ac:	f000 f95a 	bl	8011564 <_lseek_r>
 80112b0:	89a3      	ldrh	r3, [r4, #12]
 80112b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80112b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80112ba:	81a3      	strh	r3, [r4, #12]
 80112bc:	4632      	mov	r2, r6
 80112be:	463b      	mov	r3, r7
 80112c0:	4628      	mov	r0, r5
 80112c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80112c6:	f000 b995 	b.w	80115f4 <_write_r>

080112ca <__sseek>:
 80112ca:	b510      	push	{r4, lr}
 80112cc:	460c      	mov	r4, r1
 80112ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80112d2:	f000 f947 	bl	8011564 <_lseek_r>
 80112d6:	1c43      	adds	r3, r0, #1
 80112d8:	89a3      	ldrh	r3, [r4, #12]
 80112da:	bf15      	itete	ne
 80112dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80112de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80112e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80112e6:	81a3      	strheq	r3, [r4, #12]
 80112e8:	bf18      	it	ne
 80112ea:	81a3      	strhne	r3, [r4, #12]
 80112ec:	bd10      	pop	{r4, pc}

080112ee <__sclose>:
 80112ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80112f2:	f000 b8d1 	b.w	8011498 <_close_r>

080112f6 <__swbuf_r>:
 80112f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112f8:	460e      	mov	r6, r1
 80112fa:	4614      	mov	r4, r2
 80112fc:	4605      	mov	r5, r0
 80112fe:	b118      	cbz	r0, 8011308 <__swbuf_r+0x12>
 8011300:	6a03      	ldr	r3, [r0, #32]
 8011302:	b90b      	cbnz	r3, 8011308 <__swbuf_r+0x12>
 8011304:	f7ff fedc 	bl	80110c0 <__sinit>
 8011308:	69a3      	ldr	r3, [r4, #24]
 801130a:	60a3      	str	r3, [r4, #8]
 801130c:	89a3      	ldrh	r3, [r4, #12]
 801130e:	071a      	lsls	r2, r3, #28
 8011310:	d501      	bpl.n	8011316 <__swbuf_r+0x20>
 8011312:	6923      	ldr	r3, [r4, #16]
 8011314:	b943      	cbnz	r3, 8011328 <__swbuf_r+0x32>
 8011316:	4621      	mov	r1, r4
 8011318:	4628      	mov	r0, r5
 801131a:	f000 f82b 	bl	8011374 <__swsetup_r>
 801131e:	b118      	cbz	r0, 8011328 <__swbuf_r+0x32>
 8011320:	f04f 37ff 	mov.w	r7, #4294967295
 8011324:	4638      	mov	r0, r7
 8011326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011328:	6823      	ldr	r3, [r4, #0]
 801132a:	6922      	ldr	r2, [r4, #16]
 801132c:	1a98      	subs	r0, r3, r2
 801132e:	6963      	ldr	r3, [r4, #20]
 8011330:	b2f6      	uxtb	r6, r6
 8011332:	4283      	cmp	r3, r0
 8011334:	4637      	mov	r7, r6
 8011336:	dc05      	bgt.n	8011344 <__swbuf_r+0x4e>
 8011338:	4621      	mov	r1, r4
 801133a:	4628      	mov	r0, r5
 801133c:	f002 fdda 	bl	8013ef4 <_fflush_r>
 8011340:	2800      	cmp	r0, #0
 8011342:	d1ed      	bne.n	8011320 <__swbuf_r+0x2a>
 8011344:	68a3      	ldr	r3, [r4, #8]
 8011346:	3b01      	subs	r3, #1
 8011348:	60a3      	str	r3, [r4, #8]
 801134a:	6823      	ldr	r3, [r4, #0]
 801134c:	1c5a      	adds	r2, r3, #1
 801134e:	6022      	str	r2, [r4, #0]
 8011350:	701e      	strb	r6, [r3, #0]
 8011352:	6962      	ldr	r2, [r4, #20]
 8011354:	1c43      	adds	r3, r0, #1
 8011356:	429a      	cmp	r2, r3
 8011358:	d004      	beq.n	8011364 <__swbuf_r+0x6e>
 801135a:	89a3      	ldrh	r3, [r4, #12]
 801135c:	07db      	lsls	r3, r3, #31
 801135e:	d5e1      	bpl.n	8011324 <__swbuf_r+0x2e>
 8011360:	2e0a      	cmp	r6, #10
 8011362:	d1df      	bne.n	8011324 <__swbuf_r+0x2e>
 8011364:	4621      	mov	r1, r4
 8011366:	4628      	mov	r0, r5
 8011368:	f002 fdc4 	bl	8013ef4 <_fflush_r>
 801136c:	2800      	cmp	r0, #0
 801136e:	d0d9      	beq.n	8011324 <__swbuf_r+0x2e>
 8011370:	e7d6      	b.n	8011320 <__swbuf_r+0x2a>
	...

08011374 <__swsetup_r>:
 8011374:	b538      	push	{r3, r4, r5, lr}
 8011376:	4b29      	ldr	r3, [pc, #164]	@ (801141c <__swsetup_r+0xa8>)
 8011378:	4605      	mov	r5, r0
 801137a:	6818      	ldr	r0, [r3, #0]
 801137c:	460c      	mov	r4, r1
 801137e:	b118      	cbz	r0, 8011388 <__swsetup_r+0x14>
 8011380:	6a03      	ldr	r3, [r0, #32]
 8011382:	b90b      	cbnz	r3, 8011388 <__swsetup_r+0x14>
 8011384:	f7ff fe9c 	bl	80110c0 <__sinit>
 8011388:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801138c:	0719      	lsls	r1, r3, #28
 801138e:	d422      	bmi.n	80113d6 <__swsetup_r+0x62>
 8011390:	06da      	lsls	r2, r3, #27
 8011392:	d407      	bmi.n	80113a4 <__swsetup_r+0x30>
 8011394:	2209      	movs	r2, #9
 8011396:	602a      	str	r2, [r5, #0]
 8011398:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801139c:	81a3      	strh	r3, [r4, #12]
 801139e:	f04f 30ff 	mov.w	r0, #4294967295
 80113a2:	e033      	b.n	801140c <__swsetup_r+0x98>
 80113a4:	0758      	lsls	r0, r3, #29
 80113a6:	d512      	bpl.n	80113ce <__swsetup_r+0x5a>
 80113a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80113aa:	b141      	cbz	r1, 80113be <__swsetup_r+0x4a>
 80113ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80113b0:	4299      	cmp	r1, r3
 80113b2:	d002      	beq.n	80113ba <__swsetup_r+0x46>
 80113b4:	4628      	mov	r0, r5
 80113b6:	f000 ff51 	bl	801225c <_free_r>
 80113ba:	2300      	movs	r3, #0
 80113bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80113be:	89a3      	ldrh	r3, [r4, #12]
 80113c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80113c4:	81a3      	strh	r3, [r4, #12]
 80113c6:	2300      	movs	r3, #0
 80113c8:	6063      	str	r3, [r4, #4]
 80113ca:	6923      	ldr	r3, [r4, #16]
 80113cc:	6023      	str	r3, [r4, #0]
 80113ce:	89a3      	ldrh	r3, [r4, #12]
 80113d0:	f043 0308 	orr.w	r3, r3, #8
 80113d4:	81a3      	strh	r3, [r4, #12]
 80113d6:	6923      	ldr	r3, [r4, #16]
 80113d8:	b94b      	cbnz	r3, 80113ee <__swsetup_r+0x7a>
 80113da:	89a3      	ldrh	r3, [r4, #12]
 80113dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80113e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80113e4:	d003      	beq.n	80113ee <__swsetup_r+0x7a>
 80113e6:	4621      	mov	r1, r4
 80113e8:	4628      	mov	r0, r5
 80113ea:	f002 fdd1 	bl	8013f90 <__smakebuf_r>
 80113ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80113f2:	f013 0201 	ands.w	r2, r3, #1
 80113f6:	d00a      	beq.n	801140e <__swsetup_r+0x9a>
 80113f8:	2200      	movs	r2, #0
 80113fa:	60a2      	str	r2, [r4, #8]
 80113fc:	6962      	ldr	r2, [r4, #20]
 80113fe:	4252      	negs	r2, r2
 8011400:	61a2      	str	r2, [r4, #24]
 8011402:	6922      	ldr	r2, [r4, #16]
 8011404:	b942      	cbnz	r2, 8011418 <__swsetup_r+0xa4>
 8011406:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801140a:	d1c5      	bne.n	8011398 <__swsetup_r+0x24>
 801140c:	bd38      	pop	{r3, r4, r5, pc}
 801140e:	0799      	lsls	r1, r3, #30
 8011410:	bf58      	it	pl
 8011412:	6962      	ldrpl	r2, [r4, #20]
 8011414:	60a2      	str	r2, [r4, #8]
 8011416:	e7f4      	b.n	8011402 <__swsetup_r+0x8e>
 8011418:	2000      	movs	r0, #0
 801141a:	e7f7      	b.n	801140c <__swsetup_r+0x98>
 801141c:	24000020 	.word	0x24000020

08011420 <memset>:
 8011420:	4402      	add	r2, r0
 8011422:	4603      	mov	r3, r0
 8011424:	4293      	cmp	r3, r2
 8011426:	d100      	bne.n	801142a <memset+0xa>
 8011428:	4770      	bx	lr
 801142a:	f803 1b01 	strb.w	r1, [r3], #1
 801142e:	e7f9      	b.n	8011424 <memset+0x4>

08011430 <_raise_r>:
 8011430:	291f      	cmp	r1, #31
 8011432:	b538      	push	{r3, r4, r5, lr}
 8011434:	4605      	mov	r5, r0
 8011436:	460c      	mov	r4, r1
 8011438:	d904      	bls.n	8011444 <_raise_r+0x14>
 801143a:	2316      	movs	r3, #22
 801143c:	6003      	str	r3, [r0, #0]
 801143e:	f04f 30ff 	mov.w	r0, #4294967295
 8011442:	bd38      	pop	{r3, r4, r5, pc}
 8011444:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011446:	b112      	cbz	r2, 801144e <_raise_r+0x1e>
 8011448:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801144c:	b94b      	cbnz	r3, 8011462 <_raise_r+0x32>
 801144e:	4628      	mov	r0, r5
 8011450:	f000 f8be 	bl	80115d0 <_getpid_r>
 8011454:	4622      	mov	r2, r4
 8011456:	4601      	mov	r1, r0
 8011458:	4628      	mov	r0, r5
 801145a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801145e:	f000 b8a5 	b.w	80115ac <_kill_r>
 8011462:	2b01      	cmp	r3, #1
 8011464:	d00a      	beq.n	801147c <_raise_r+0x4c>
 8011466:	1c59      	adds	r1, r3, #1
 8011468:	d103      	bne.n	8011472 <_raise_r+0x42>
 801146a:	2316      	movs	r3, #22
 801146c:	6003      	str	r3, [r0, #0]
 801146e:	2001      	movs	r0, #1
 8011470:	e7e7      	b.n	8011442 <_raise_r+0x12>
 8011472:	2100      	movs	r1, #0
 8011474:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011478:	4620      	mov	r0, r4
 801147a:	4798      	blx	r3
 801147c:	2000      	movs	r0, #0
 801147e:	e7e0      	b.n	8011442 <_raise_r+0x12>

08011480 <raise>:
 8011480:	4b02      	ldr	r3, [pc, #8]	@ (801148c <raise+0xc>)
 8011482:	4601      	mov	r1, r0
 8011484:	6818      	ldr	r0, [r3, #0]
 8011486:	f7ff bfd3 	b.w	8011430 <_raise_r>
 801148a:	bf00      	nop
 801148c:	24000020 	.word	0x24000020

08011490 <_localeconv_r>:
 8011490:	4800      	ldr	r0, [pc, #0]	@ (8011494 <_localeconv_r+0x4>)
 8011492:	4770      	bx	lr
 8011494:	24000160 	.word	0x24000160

08011498 <_close_r>:
 8011498:	b538      	push	{r3, r4, r5, lr}
 801149a:	4d06      	ldr	r5, [pc, #24]	@ (80114b4 <_close_r+0x1c>)
 801149c:	2300      	movs	r3, #0
 801149e:	4604      	mov	r4, r0
 80114a0:	4608      	mov	r0, r1
 80114a2:	602b      	str	r3, [r5, #0]
 80114a4:	f7f0 feea 	bl	800227c <_close>
 80114a8:	1c43      	adds	r3, r0, #1
 80114aa:	d102      	bne.n	80114b2 <_close_r+0x1a>
 80114ac:	682b      	ldr	r3, [r5, #0]
 80114ae:	b103      	cbz	r3, 80114b2 <_close_r+0x1a>
 80114b0:	6023      	str	r3, [r4, #0]
 80114b2:	bd38      	pop	{r3, r4, r5, pc}
 80114b4:	24004f84 	.word	0x24004f84

080114b8 <_reclaim_reent>:
 80114b8:	4b29      	ldr	r3, [pc, #164]	@ (8011560 <_reclaim_reent+0xa8>)
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	4283      	cmp	r3, r0
 80114be:	b570      	push	{r4, r5, r6, lr}
 80114c0:	4604      	mov	r4, r0
 80114c2:	d04b      	beq.n	801155c <_reclaim_reent+0xa4>
 80114c4:	69c3      	ldr	r3, [r0, #28]
 80114c6:	b1ab      	cbz	r3, 80114f4 <_reclaim_reent+0x3c>
 80114c8:	68db      	ldr	r3, [r3, #12]
 80114ca:	b16b      	cbz	r3, 80114e8 <_reclaim_reent+0x30>
 80114cc:	2500      	movs	r5, #0
 80114ce:	69e3      	ldr	r3, [r4, #28]
 80114d0:	68db      	ldr	r3, [r3, #12]
 80114d2:	5959      	ldr	r1, [r3, r5]
 80114d4:	2900      	cmp	r1, #0
 80114d6:	d13b      	bne.n	8011550 <_reclaim_reent+0x98>
 80114d8:	3504      	adds	r5, #4
 80114da:	2d80      	cmp	r5, #128	@ 0x80
 80114dc:	d1f7      	bne.n	80114ce <_reclaim_reent+0x16>
 80114de:	69e3      	ldr	r3, [r4, #28]
 80114e0:	4620      	mov	r0, r4
 80114e2:	68d9      	ldr	r1, [r3, #12]
 80114e4:	f000 feba 	bl	801225c <_free_r>
 80114e8:	69e3      	ldr	r3, [r4, #28]
 80114ea:	6819      	ldr	r1, [r3, #0]
 80114ec:	b111      	cbz	r1, 80114f4 <_reclaim_reent+0x3c>
 80114ee:	4620      	mov	r0, r4
 80114f0:	f000 feb4 	bl	801225c <_free_r>
 80114f4:	6961      	ldr	r1, [r4, #20]
 80114f6:	b111      	cbz	r1, 80114fe <_reclaim_reent+0x46>
 80114f8:	4620      	mov	r0, r4
 80114fa:	f000 feaf 	bl	801225c <_free_r>
 80114fe:	69e1      	ldr	r1, [r4, #28]
 8011500:	b111      	cbz	r1, 8011508 <_reclaim_reent+0x50>
 8011502:	4620      	mov	r0, r4
 8011504:	f000 feaa 	bl	801225c <_free_r>
 8011508:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801150a:	b111      	cbz	r1, 8011512 <_reclaim_reent+0x5a>
 801150c:	4620      	mov	r0, r4
 801150e:	f000 fea5 	bl	801225c <_free_r>
 8011512:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011514:	b111      	cbz	r1, 801151c <_reclaim_reent+0x64>
 8011516:	4620      	mov	r0, r4
 8011518:	f000 fea0 	bl	801225c <_free_r>
 801151c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801151e:	b111      	cbz	r1, 8011526 <_reclaim_reent+0x6e>
 8011520:	4620      	mov	r0, r4
 8011522:	f000 fe9b 	bl	801225c <_free_r>
 8011526:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8011528:	b111      	cbz	r1, 8011530 <_reclaim_reent+0x78>
 801152a:	4620      	mov	r0, r4
 801152c:	f000 fe96 	bl	801225c <_free_r>
 8011530:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8011532:	b111      	cbz	r1, 801153a <_reclaim_reent+0x82>
 8011534:	4620      	mov	r0, r4
 8011536:	f000 fe91 	bl	801225c <_free_r>
 801153a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801153c:	b111      	cbz	r1, 8011544 <_reclaim_reent+0x8c>
 801153e:	4620      	mov	r0, r4
 8011540:	f000 fe8c 	bl	801225c <_free_r>
 8011544:	6a23      	ldr	r3, [r4, #32]
 8011546:	b14b      	cbz	r3, 801155c <_reclaim_reent+0xa4>
 8011548:	4620      	mov	r0, r4
 801154a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801154e:	4718      	bx	r3
 8011550:	680e      	ldr	r6, [r1, #0]
 8011552:	4620      	mov	r0, r4
 8011554:	f000 fe82 	bl	801225c <_free_r>
 8011558:	4631      	mov	r1, r6
 801155a:	e7bb      	b.n	80114d4 <_reclaim_reent+0x1c>
 801155c:	bd70      	pop	{r4, r5, r6, pc}
 801155e:	bf00      	nop
 8011560:	24000020 	.word	0x24000020

08011564 <_lseek_r>:
 8011564:	b538      	push	{r3, r4, r5, lr}
 8011566:	4d07      	ldr	r5, [pc, #28]	@ (8011584 <_lseek_r+0x20>)
 8011568:	4604      	mov	r4, r0
 801156a:	4608      	mov	r0, r1
 801156c:	4611      	mov	r1, r2
 801156e:	2200      	movs	r2, #0
 8011570:	602a      	str	r2, [r5, #0]
 8011572:	461a      	mov	r2, r3
 8011574:	f7f0 fea9 	bl	80022ca <_lseek>
 8011578:	1c43      	adds	r3, r0, #1
 801157a:	d102      	bne.n	8011582 <_lseek_r+0x1e>
 801157c:	682b      	ldr	r3, [r5, #0]
 801157e:	b103      	cbz	r3, 8011582 <_lseek_r+0x1e>
 8011580:	6023      	str	r3, [r4, #0]
 8011582:	bd38      	pop	{r3, r4, r5, pc}
 8011584:	24004f84 	.word	0x24004f84

08011588 <_read_r>:
 8011588:	b538      	push	{r3, r4, r5, lr}
 801158a:	4d07      	ldr	r5, [pc, #28]	@ (80115a8 <_read_r+0x20>)
 801158c:	4604      	mov	r4, r0
 801158e:	4608      	mov	r0, r1
 8011590:	4611      	mov	r1, r2
 8011592:	2200      	movs	r2, #0
 8011594:	602a      	str	r2, [r5, #0]
 8011596:	461a      	mov	r2, r3
 8011598:	f7f0 fe37 	bl	800220a <_read>
 801159c:	1c43      	adds	r3, r0, #1
 801159e:	d102      	bne.n	80115a6 <_read_r+0x1e>
 80115a0:	682b      	ldr	r3, [r5, #0]
 80115a2:	b103      	cbz	r3, 80115a6 <_read_r+0x1e>
 80115a4:	6023      	str	r3, [r4, #0]
 80115a6:	bd38      	pop	{r3, r4, r5, pc}
 80115a8:	24004f84 	.word	0x24004f84

080115ac <_kill_r>:
 80115ac:	b538      	push	{r3, r4, r5, lr}
 80115ae:	4d07      	ldr	r5, [pc, #28]	@ (80115cc <_kill_r+0x20>)
 80115b0:	2300      	movs	r3, #0
 80115b2:	4604      	mov	r4, r0
 80115b4:	4608      	mov	r0, r1
 80115b6:	4611      	mov	r1, r2
 80115b8:	602b      	str	r3, [r5, #0]
 80115ba:	f7f0 fe0b 	bl	80021d4 <_kill>
 80115be:	1c43      	adds	r3, r0, #1
 80115c0:	d102      	bne.n	80115c8 <_kill_r+0x1c>
 80115c2:	682b      	ldr	r3, [r5, #0]
 80115c4:	b103      	cbz	r3, 80115c8 <_kill_r+0x1c>
 80115c6:	6023      	str	r3, [r4, #0]
 80115c8:	bd38      	pop	{r3, r4, r5, pc}
 80115ca:	bf00      	nop
 80115cc:	24004f84 	.word	0x24004f84

080115d0 <_getpid_r>:
 80115d0:	f7f0 bdf8 	b.w	80021c4 <_getpid>

080115d4 <_sbrk_r>:
 80115d4:	b538      	push	{r3, r4, r5, lr}
 80115d6:	4d06      	ldr	r5, [pc, #24]	@ (80115f0 <_sbrk_r+0x1c>)
 80115d8:	2300      	movs	r3, #0
 80115da:	4604      	mov	r4, r0
 80115dc:	4608      	mov	r0, r1
 80115de:	602b      	str	r3, [r5, #0]
 80115e0:	f7f0 fe80 	bl	80022e4 <_sbrk>
 80115e4:	1c43      	adds	r3, r0, #1
 80115e6:	d102      	bne.n	80115ee <_sbrk_r+0x1a>
 80115e8:	682b      	ldr	r3, [r5, #0]
 80115ea:	b103      	cbz	r3, 80115ee <_sbrk_r+0x1a>
 80115ec:	6023      	str	r3, [r4, #0]
 80115ee:	bd38      	pop	{r3, r4, r5, pc}
 80115f0:	24004f84 	.word	0x24004f84

080115f4 <_write_r>:
 80115f4:	b538      	push	{r3, r4, r5, lr}
 80115f6:	4d07      	ldr	r5, [pc, #28]	@ (8011614 <_write_r+0x20>)
 80115f8:	4604      	mov	r4, r0
 80115fa:	4608      	mov	r0, r1
 80115fc:	4611      	mov	r1, r2
 80115fe:	2200      	movs	r2, #0
 8011600:	602a      	str	r2, [r5, #0]
 8011602:	461a      	mov	r2, r3
 8011604:	f7f0 fe1e 	bl	8002244 <_write>
 8011608:	1c43      	adds	r3, r0, #1
 801160a:	d102      	bne.n	8011612 <_write_r+0x1e>
 801160c:	682b      	ldr	r3, [r5, #0]
 801160e:	b103      	cbz	r3, 8011612 <_write_r+0x1e>
 8011610:	6023      	str	r3, [r4, #0]
 8011612:	bd38      	pop	{r3, r4, r5, pc}
 8011614:	24004f84 	.word	0x24004f84

08011618 <__errno>:
 8011618:	4b01      	ldr	r3, [pc, #4]	@ (8011620 <__errno+0x8>)
 801161a:	6818      	ldr	r0, [r3, #0]
 801161c:	4770      	bx	lr
 801161e:	bf00      	nop
 8011620:	24000020 	.word	0x24000020

08011624 <__libc_init_array>:
 8011624:	b570      	push	{r4, r5, r6, lr}
 8011626:	4d0d      	ldr	r5, [pc, #52]	@ (801165c <__libc_init_array+0x38>)
 8011628:	4c0d      	ldr	r4, [pc, #52]	@ (8011660 <__libc_init_array+0x3c>)
 801162a:	1b64      	subs	r4, r4, r5
 801162c:	10a4      	asrs	r4, r4, #2
 801162e:	2600      	movs	r6, #0
 8011630:	42a6      	cmp	r6, r4
 8011632:	d109      	bne.n	8011648 <__libc_init_array+0x24>
 8011634:	4d0b      	ldr	r5, [pc, #44]	@ (8011664 <__libc_init_array+0x40>)
 8011636:	4c0c      	ldr	r4, [pc, #48]	@ (8011668 <__libc_init_array+0x44>)
 8011638:	f003 f8e0 	bl	80147fc <_init>
 801163c:	1b64      	subs	r4, r4, r5
 801163e:	10a4      	asrs	r4, r4, #2
 8011640:	2600      	movs	r6, #0
 8011642:	42a6      	cmp	r6, r4
 8011644:	d105      	bne.n	8011652 <__libc_init_array+0x2e>
 8011646:	bd70      	pop	{r4, r5, r6, pc}
 8011648:	f855 3b04 	ldr.w	r3, [r5], #4
 801164c:	4798      	blx	r3
 801164e:	3601      	adds	r6, #1
 8011650:	e7ee      	b.n	8011630 <__libc_init_array+0xc>
 8011652:	f855 3b04 	ldr.w	r3, [r5], #4
 8011656:	4798      	blx	r3
 8011658:	3601      	adds	r6, #1
 801165a:	e7f2      	b.n	8011642 <__libc_init_array+0x1e>
 801165c:	080153cc 	.word	0x080153cc
 8011660:	080153cc 	.word	0x080153cc
 8011664:	080153cc 	.word	0x080153cc
 8011668:	080153d0 	.word	0x080153d0

0801166c <__retarget_lock_init_recursive>:
 801166c:	4770      	bx	lr

0801166e <__retarget_lock_acquire_recursive>:
 801166e:	4770      	bx	lr

08011670 <__retarget_lock_release_recursive>:
 8011670:	4770      	bx	lr

08011672 <memcpy>:
 8011672:	440a      	add	r2, r1
 8011674:	4291      	cmp	r1, r2
 8011676:	f100 33ff 	add.w	r3, r0, #4294967295
 801167a:	d100      	bne.n	801167e <memcpy+0xc>
 801167c:	4770      	bx	lr
 801167e:	b510      	push	{r4, lr}
 8011680:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011684:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011688:	4291      	cmp	r1, r2
 801168a:	d1f9      	bne.n	8011680 <memcpy+0xe>
 801168c:	bd10      	pop	{r4, pc}
	...

08011690 <nanf>:
 8011690:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8011698 <nanf+0x8>
 8011694:	4770      	bx	lr
 8011696:	bf00      	nop
 8011698:	7fc00000 	.word	0x7fc00000

0801169c <quorem>:
 801169c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116a0:	6903      	ldr	r3, [r0, #16]
 80116a2:	690c      	ldr	r4, [r1, #16]
 80116a4:	42a3      	cmp	r3, r4
 80116a6:	4607      	mov	r7, r0
 80116a8:	db7e      	blt.n	80117a8 <quorem+0x10c>
 80116aa:	3c01      	subs	r4, #1
 80116ac:	f101 0814 	add.w	r8, r1, #20
 80116b0:	00a3      	lsls	r3, r4, #2
 80116b2:	f100 0514 	add.w	r5, r0, #20
 80116b6:	9300      	str	r3, [sp, #0]
 80116b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80116bc:	9301      	str	r3, [sp, #4]
 80116be:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80116c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80116c6:	3301      	adds	r3, #1
 80116c8:	429a      	cmp	r2, r3
 80116ca:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80116ce:	fbb2 f6f3 	udiv	r6, r2, r3
 80116d2:	d32e      	bcc.n	8011732 <quorem+0x96>
 80116d4:	f04f 0a00 	mov.w	sl, #0
 80116d8:	46c4      	mov	ip, r8
 80116da:	46ae      	mov	lr, r5
 80116dc:	46d3      	mov	fp, sl
 80116de:	f85c 3b04 	ldr.w	r3, [ip], #4
 80116e2:	b298      	uxth	r0, r3
 80116e4:	fb06 a000 	mla	r0, r6, r0, sl
 80116e8:	0c02      	lsrs	r2, r0, #16
 80116ea:	0c1b      	lsrs	r3, r3, #16
 80116ec:	fb06 2303 	mla	r3, r6, r3, r2
 80116f0:	f8de 2000 	ldr.w	r2, [lr]
 80116f4:	b280      	uxth	r0, r0
 80116f6:	b292      	uxth	r2, r2
 80116f8:	1a12      	subs	r2, r2, r0
 80116fa:	445a      	add	r2, fp
 80116fc:	f8de 0000 	ldr.w	r0, [lr]
 8011700:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011704:	b29b      	uxth	r3, r3
 8011706:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801170a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801170e:	b292      	uxth	r2, r2
 8011710:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8011714:	45e1      	cmp	r9, ip
 8011716:	f84e 2b04 	str.w	r2, [lr], #4
 801171a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801171e:	d2de      	bcs.n	80116de <quorem+0x42>
 8011720:	9b00      	ldr	r3, [sp, #0]
 8011722:	58eb      	ldr	r3, [r5, r3]
 8011724:	b92b      	cbnz	r3, 8011732 <quorem+0x96>
 8011726:	9b01      	ldr	r3, [sp, #4]
 8011728:	3b04      	subs	r3, #4
 801172a:	429d      	cmp	r5, r3
 801172c:	461a      	mov	r2, r3
 801172e:	d32f      	bcc.n	8011790 <quorem+0xf4>
 8011730:	613c      	str	r4, [r7, #16]
 8011732:	4638      	mov	r0, r7
 8011734:	f001 f8a0 	bl	8012878 <__mcmp>
 8011738:	2800      	cmp	r0, #0
 801173a:	db25      	blt.n	8011788 <quorem+0xec>
 801173c:	4629      	mov	r1, r5
 801173e:	2000      	movs	r0, #0
 8011740:	f858 2b04 	ldr.w	r2, [r8], #4
 8011744:	f8d1 c000 	ldr.w	ip, [r1]
 8011748:	fa1f fe82 	uxth.w	lr, r2
 801174c:	fa1f f38c 	uxth.w	r3, ip
 8011750:	eba3 030e 	sub.w	r3, r3, lr
 8011754:	4403      	add	r3, r0
 8011756:	0c12      	lsrs	r2, r2, #16
 8011758:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801175c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8011760:	b29b      	uxth	r3, r3
 8011762:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011766:	45c1      	cmp	r9, r8
 8011768:	f841 3b04 	str.w	r3, [r1], #4
 801176c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011770:	d2e6      	bcs.n	8011740 <quorem+0xa4>
 8011772:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011776:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801177a:	b922      	cbnz	r2, 8011786 <quorem+0xea>
 801177c:	3b04      	subs	r3, #4
 801177e:	429d      	cmp	r5, r3
 8011780:	461a      	mov	r2, r3
 8011782:	d30b      	bcc.n	801179c <quorem+0x100>
 8011784:	613c      	str	r4, [r7, #16]
 8011786:	3601      	adds	r6, #1
 8011788:	4630      	mov	r0, r6
 801178a:	b003      	add	sp, #12
 801178c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011790:	6812      	ldr	r2, [r2, #0]
 8011792:	3b04      	subs	r3, #4
 8011794:	2a00      	cmp	r2, #0
 8011796:	d1cb      	bne.n	8011730 <quorem+0x94>
 8011798:	3c01      	subs	r4, #1
 801179a:	e7c6      	b.n	801172a <quorem+0x8e>
 801179c:	6812      	ldr	r2, [r2, #0]
 801179e:	3b04      	subs	r3, #4
 80117a0:	2a00      	cmp	r2, #0
 80117a2:	d1ef      	bne.n	8011784 <quorem+0xe8>
 80117a4:	3c01      	subs	r4, #1
 80117a6:	e7ea      	b.n	801177e <quorem+0xe2>
 80117a8:	2000      	movs	r0, #0
 80117aa:	e7ee      	b.n	801178a <quorem+0xee>
 80117ac:	0000      	movs	r0, r0
	...

080117b0 <_dtoa_r>:
 80117b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117b4:	ed2d 8b02 	vpush	{d8}
 80117b8:	69c7      	ldr	r7, [r0, #28]
 80117ba:	b091      	sub	sp, #68	@ 0x44
 80117bc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80117c0:	ec55 4b10 	vmov	r4, r5, d0
 80117c4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80117c6:	9107      	str	r1, [sp, #28]
 80117c8:	4681      	mov	r9, r0
 80117ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80117cc:	930d      	str	r3, [sp, #52]	@ 0x34
 80117ce:	b97f      	cbnz	r7, 80117f0 <_dtoa_r+0x40>
 80117d0:	2010      	movs	r0, #16
 80117d2:	f7fe fce7 	bl	80101a4 <malloc>
 80117d6:	4602      	mov	r2, r0
 80117d8:	f8c9 001c 	str.w	r0, [r9, #28]
 80117dc:	b920      	cbnz	r0, 80117e8 <_dtoa_r+0x38>
 80117de:	4ba0      	ldr	r3, [pc, #640]	@ (8011a60 <_dtoa_r+0x2b0>)
 80117e0:	21ef      	movs	r1, #239	@ 0xef
 80117e2:	48a0      	ldr	r0, [pc, #640]	@ (8011a64 <_dtoa_r+0x2b4>)
 80117e4:	f7fe fcc0 	bl	8010168 <__assert_func>
 80117e8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80117ec:	6007      	str	r7, [r0, #0]
 80117ee:	60c7      	str	r7, [r0, #12]
 80117f0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80117f4:	6819      	ldr	r1, [r3, #0]
 80117f6:	b159      	cbz	r1, 8011810 <_dtoa_r+0x60>
 80117f8:	685a      	ldr	r2, [r3, #4]
 80117fa:	604a      	str	r2, [r1, #4]
 80117fc:	2301      	movs	r3, #1
 80117fe:	4093      	lsls	r3, r2
 8011800:	608b      	str	r3, [r1, #8]
 8011802:	4648      	mov	r0, r9
 8011804:	f000 fdb4 	bl	8012370 <_Bfree>
 8011808:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801180c:	2200      	movs	r2, #0
 801180e:	601a      	str	r2, [r3, #0]
 8011810:	1e2b      	subs	r3, r5, #0
 8011812:	bfbb      	ittet	lt
 8011814:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8011818:	9303      	strlt	r3, [sp, #12]
 801181a:	2300      	movge	r3, #0
 801181c:	2201      	movlt	r2, #1
 801181e:	bfac      	ite	ge
 8011820:	6033      	strge	r3, [r6, #0]
 8011822:	6032      	strlt	r2, [r6, #0]
 8011824:	4b90      	ldr	r3, [pc, #576]	@ (8011a68 <_dtoa_r+0x2b8>)
 8011826:	9e03      	ldr	r6, [sp, #12]
 8011828:	43b3      	bics	r3, r6
 801182a:	d110      	bne.n	801184e <_dtoa_r+0x9e>
 801182c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801182e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8011832:	6013      	str	r3, [r2, #0]
 8011834:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8011838:	4323      	orrs	r3, r4
 801183a:	f000 84de 	beq.w	80121fa <_dtoa_r+0xa4a>
 801183e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011840:	4f8a      	ldr	r7, [pc, #552]	@ (8011a6c <_dtoa_r+0x2bc>)
 8011842:	2b00      	cmp	r3, #0
 8011844:	f000 84e0 	beq.w	8012208 <_dtoa_r+0xa58>
 8011848:	1cfb      	adds	r3, r7, #3
 801184a:	f000 bcdb 	b.w	8012204 <_dtoa_r+0xa54>
 801184e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8011852:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801185a:	d10a      	bne.n	8011872 <_dtoa_r+0xc2>
 801185c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801185e:	2301      	movs	r3, #1
 8011860:	6013      	str	r3, [r2, #0]
 8011862:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011864:	b113      	cbz	r3, 801186c <_dtoa_r+0xbc>
 8011866:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8011868:	4b81      	ldr	r3, [pc, #516]	@ (8011a70 <_dtoa_r+0x2c0>)
 801186a:	6013      	str	r3, [r2, #0]
 801186c:	4f81      	ldr	r7, [pc, #516]	@ (8011a74 <_dtoa_r+0x2c4>)
 801186e:	f000 bccb 	b.w	8012208 <_dtoa_r+0xa58>
 8011872:	aa0e      	add	r2, sp, #56	@ 0x38
 8011874:	a90f      	add	r1, sp, #60	@ 0x3c
 8011876:	4648      	mov	r0, r9
 8011878:	eeb0 0b48 	vmov.f64	d0, d8
 801187c:	f001 f91c 	bl	8012ab8 <__d2b>
 8011880:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8011884:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011886:	9001      	str	r0, [sp, #4]
 8011888:	2b00      	cmp	r3, #0
 801188a:	d045      	beq.n	8011918 <_dtoa_r+0x168>
 801188c:	eeb0 7b48 	vmov.f64	d7, d8
 8011890:	ee18 1a90 	vmov	r1, s17
 8011894:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8011898:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 801189c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80118a0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80118a4:	2500      	movs	r5, #0
 80118a6:	ee07 1a90 	vmov	s15, r1
 80118aa:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80118ae:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8011a48 <_dtoa_r+0x298>
 80118b2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80118b6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8011a50 <_dtoa_r+0x2a0>
 80118ba:	eea7 6b05 	vfma.f64	d6, d7, d5
 80118be:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8011a58 <_dtoa_r+0x2a8>
 80118c2:	ee07 3a90 	vmov	s15, r3
 80118c6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80118ca:	eeb0 7b46 	vmov.f64	d7, d6
 80118ce:	eea4 7b05 	vfma.f64	d7, d4, d5
 80118d2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80118d6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80118da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118de:	ee16 8a90 	vmov	r8, s13
 80118e2:	d508      	bpl.n	80118f6 <_dtoa_r+0x146>
 80118e4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80118e8:	eeb4 6b47 	vcmp.f64	d6, d7
 80118ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118f0:	bf18      	it	ne
 80118f2:	f108 38ff 	addne.w	r8, r8, #4294967295
 80118f6:	f1b8 0f16 	cmp.w	r8, #22
 80118fa:	d82b      	bhi.n	8011954 <_dtoa_r+0x1a4>
 80118fc:	495e      	ldr	r1, [pc, #376]	@ (8011a78 <_dtoa_r+0x2c8>)
 80118fe:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8011902:	ed91 7b00 	vldr	d7, [r1]
 8011906:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801190a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801190e:	d501      	bpl.n	8011914 <_dtoa_r+0x164>
 8011910:	f108 38ff 	add.w	r8, r8, #4294967295
 8011914:	2100      	movs	r1, #0
 8011916:	e01e      	b.n	8011956 <_dtoa_r+0x1a6>
 8011918:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801191a:	4413      	add	r3, r2
 801191c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8011920:	2920      	cmp	r1, #32
 8011922:	bfc1      	itttt	gt
 8011924:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8011928:	408e      	lslgt	r6, r1
 801192a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 801192e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8011932:	bfd6      	itet	le
 8011934:	f1c1 0120 	rsble	r1, r1, #32
 8011938:	4331      	orrgt	r1, r6
 801193a:	fa04 f101 	lslle.w	r1, r4, r1
 801193e:	ee07 1a90 	vmov	s15, r1
 8011942:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011946:	3b01      	subs	r3, #1
 8011948:	ee17 1a90 	vmov	r1, s15
 801194c:	2501      	movs	r5, #1
 801194e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8011952:	e7a8      	b.n	80118a6 <_dtoa_r+0xf6>
 8011954:	2101      	movs	r1, #1
 8011956:	1ad2      	subs	r2, r2, r3
 8011958:	1e53      	subs	r3, r2, #1
 801195a:	9306      	str	r3, [sp, #24]
 801195c:	bf45      	ittet	mi
 801195e:	f1c2 0301 	rsbmi	r3, r2, #1
 8011962:	9305      	strmi	r3, [sp, #20]
 8011964:	2300      	movpl	r3, #0
 8011966:	2300      	movmi	r3, #0
 8011968:	bf4c      	ite	mi
 801196a:	9306      	strmi	r3, [sp, #24]
 801196c:	9305      	strpl	r3, [sp, #20]
 801196e:	f1b8 0f00 	cmp.w	r8, #0
 8011972:	910c      	str	r1, [sp, #48]	@ 0x30
 8011974:	db18      	blt.n	80119a8 <_dtoa_r+0x1f8>
 8011976:	9b06      	ldr	r3, [sp, #24]
 8011978:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801197c:	4443      	add	r3, r8
 801197e:	9306      	str	r3, [sp, #24]
 8011980:	2300      	movs	r3, #0
 8011982:	9a07      	ldr	r2, [sp, #28]
 8011984:	2a09      	cmp	r2, #9
 8011986:	d849      	bhi.n	8011a1c <_dtoa_r+0x26c>
 8011988:	2a05      	cmp	r2, #5
 801198a:	bfc4      	itt	gt
 801198c:	3a04      	subgt	r2, #4
 801198e:	9207      	strgt	r2, [sp, #28]
 8011990:	9a07      	ldr	r2, [sp, #28]
 8011992:	f1a2 0202 	sub.w	r2, r2, #2
 8011996:	bfcc      	ite	gt
 8011998:	2400      	movgt	r4, #0
 801199a:	2401      	movle	r4, #1
 801199c:	2a03      	cmp	r2, #3
 801199e:	d848      	bhi.n	8011a32 <_dtoa_r+0x282>
 80119a0:	e8df f002 	tbb	[pc, r2]
 80119a4:	3a2c2e0b 	.word	0x3a2c2e0b
 80119a8:	9b05      	ldr	r3, [sp, #20]
 80119aa:	2200      	movs	r2, #0
 80119ac:	eba3 0308 	sub.w	r3, r3, r8
 80119b0:	9305      	str	r3, [sp, #20]
 80119b2:	920a      	str	r2, [sp, #40]	@ 0x28
 80119b4:	f1c8 0300 	rsb	r3, r8, #0
 80119b8:	e7e3      	b.n	8011982 <_dtoa_r+0x1d2>
 80119ba:	2200      	movs	r2, #0
 80119bc:	9208      	str	r2, [sp, #32]
 80119be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80119c0:	2a00      	cmp	r2, #0
 80119c2:	dc39      	bgt.n	8011a38 <_dtoa_r+0x288>
 80119c4:	f04f 0b01 	mov.w	fp, #1
 80119c8:	46da      	mov	sl, fp
 80119ca:	465a      	mov	r2, fp
 80119cc:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80119d0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80119d4:	2100      	movs	r1, #0
 80119d6:	2004      	movs	r0, #4
 80119d8:	f100 0614 	add.w	r6, r0, #20
 80119dc:	4296      	cmp	r6, r2
 80119de:	d930      	bls.n	8011a42 <_dtoa_r+0x292>
 80119e0:	6079      	str	r1, [r7, #4]
 80119e2:	4648      	mov	r0, r9
 80119e4:	9304      	str	r3, [sp, #16]
 80119e6:	f000 fc83 	bl	80122f0 <_Balloc>
 80119ea:	9b04      	ldr	r3, [sp, #16]
 80119ec:	4607      	mov	r7, r0
 80119ee:	2800      	cmp	r0, #0
 80119f0:	d146      	bne.n	8011a80 <_dtoa_r+0x2d0>
 80119f2:	4b22      	ldr	r3, [pc, #136]	@ (8011a7c <_dtoa_r+0x2cc>)
 80119f4:	4602      	mov	r2, r0
 80119f6:	f240 11af 	movw	r1, #431	@ 0x1af
 80119fa:	e6f2      	b.n	80117e2 <_dtoa_r+0x32>
 80119fc:	2201      	movs	r2, #1
 80119fe:	e7dd      	b.n	80119bc <_dtoa_r+0x20c>
 8011a00:	2200      	movs	r2, #0
 8011a02:	9208      	str	r2, [sp, #32]
 8011a04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011a06:	eb08 0b02 	add.w	fp, r8, r2
 8011a0a:	f10b 0a01 	add.w	sl, fp, #1
 8011a0e:	4652      	mov	r2, sl
 8011a10:	2a01      	cmp	r2, #1
 8011a12:	bfb8      	it	lt
 8011a14:	2201      	movlt	r2, #1
 8011a16:	e7db      	b.n	80119d0 <_dtoa_r+0x220>
 8011a18:	2201      	movs	r2, #1
 8011a1a:	e7f2      	b.n	8011a02 <_dtoa_r+0x252>
 8011a1c:	2401      	movs	r4, #1
 8011a1e:	2200      	movs	r2, #0
 8011a20:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8011a24:	f04f 3bff 	mov.w	fp, #4294967295
 8011a28:	2100      	movs	r1, #0
 8011a2a:	46da      	mov	sl, fp
 8011a2c:	2212      	movs	r2, #18
 8011a2e:	9109      	str	r1, [sp, #36]	@ 0x24
 8011a30:	e7ce      	b.n	80119d0 <_dtoa_r+0x220>
 8011a32:	2201      	movs	r2, #1
 8011a34:	9208      	str	r2, [sp, #32]
 8011a36:	e7f5      	b.n	8011a24 <_dtoa_r+0x274>
 8011a38:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8011a3c:	46da      	mov	sl, fp
 8011a3e:	465a      	mov	r2, fp
 8011a40:	e7c6      	b.n	80119d0 <_dtoa_r+0x220>
 8011a42:	3101      	adds	r1, #1
 8011a44:	0040      	lsls	r0, r0, #1
 8011a46:	e7c7      	b.n	80119d8 <_dtoa_r+0x228>
 8011a48:	636f4361 	.word	0x636f4361
 8011a4c:	3fd287a7 	.word	0x3fd287a7
 8011a50:	8b60c8b3 	.word	0x8b60c8b3
 8011a54:	3fc68a28 	.word	0x3fc68a28
 8011a58:	509f79fb 	.word	0x509f79fb
 8011a5c:	3fd34413 	.word	0x3fd34413
 8011a60:	0801501a 	.word	0x0801501a
 8011a64:	08015031 	.word	0x08015031
 8011a68:	7ff00000 	.word	0x7ff00000
 8011a6c:	08015016 	.word	0x08015016
 8011a70:	08014fe5 	.word	0x08014fe5
 8011a74:	08014fe4 	.word	0x08014fe4
 8011a78:	08015128 	.word	0x08015128
 8011a7c:	08015089 	.word	0x08015089
 8011a80:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8011a84:	f1ba 0f0e 	cmp.w	sl, #14
 8011a88:	6010      	str	r0, [r2, #0]
 8011a8a:	d86f      	bhi.n	8011b6c <_dtoa_r+0x3bc>
 8011a8c:	2c00      	cmp	r4, #0
 8011a8e:	d06d      	beq.n	8011b6c <_dtoa_r+0x3bc>
 8011a90:	f1b8 0f00 	cmp.w	r8, #0
 8011a94:	f340 80c2 	ble.w	8011c1c <_dtoa_r+0x46c>
 8011a98:	4aca      	ldr	r2, [pc, #808]	@ (8011dc4 <_dtoa_r+0x614>)
 8011a9a:	f008 010f 	and.w	r1, r8, #15
 8011a9e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8011aa2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8011aa6:	ed92 7b00 	vldr	d7, [r2]
 8011aaa:	ea4f 1128 	mov.w	r1, r8, asr #4
 8011aae:	f000 80a9 	beq.w	8011c04 <_dtoa_r+0x454>
 8011ab2:	4ac5      	ldr	r2, [pc, #788]	@ (8011dc8 <_dtoa_r+0x618>)
 8011ab4:	ed92 6b08 	vldr	d6, [r2, #32]
 8011ab8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8011abc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8011ac0:	f001 010f 	and.w	r1, r1, #15
 8011ac4:	2203      	movs	r2, #3
 8011ac6:	48c0      	ldr	r0, [pc, #768]	@ (8011dc8 <_dtoa_r+0x618>)
 8011ac8:	2900      	cmp	r1, #0
 8011aca:	f040 809d 	bne.w	8011c08 <_dtoa_r+0x458>
 8011ace:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011ad2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8011ad6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011ada:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011adc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011ae0:	2900      	cmp	r1, #0
 8011ae2:	f000 80c1 	beq.w	8011c68 <_dtoa_r+0x4b8>
 8011ae6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8011aea:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011af2:	f140 80b9 	bpl.w	8011c68 <_dtoa_r+0x4b8>
 8011af6:	f1ba 0f00 	cmp.w	sl, #0
 8011afa:	f000 80b5 	beq.w	8011c68 <_dtoa_r+0x4b8>
 8011afe:	f1bb 0f00 	cmp.w	fp, #0
 8011b02:	dd31      	ble.n	8011b68 <_dtoa_r+0x3b8>
 8011b04:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8011b08:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011b0c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011b10:	f108 31ff 	add.w	r1, r8, #4294967295
 8011b14:	9104      	str	r1, [sp, #16]
 8011b16:	3201      	adds	r2, #1
 8011b18:	465c      	mov	r4, fp
 8011b1a:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011b1e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8011b22:	ee07 2a90 	vmov	s15, r2
 8011b26:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011b2a:	eea7 5b06 	vfma.f64	d5, d7, d6
 8011b2e:	ee15 2a90 	vmov	r2, s11
 8011b32:	ec51 0b15 	vmov	r0, r1, d5
 8011b36:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8011b3a:	2c00      	cmp	r4, #0
 8011b3c:	f040 8098 	bne.w	8011c70 <_dtoa_r+0x4c0>
 8011b40:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8011b44:	ee36 6b47 	vsub.f64	d6, d6, d7
 8011b48:	ec41 0b17 	vmov	d7, r0, r1
 8011b4c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b54:	f300 8261 	bgt.w	801201a <_dtoa_r+0x86a>
 8011b58:	eeb1 7b47 	vneg.f64	d7, d7
 8011b5c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b64:	f100 80f5 	bmi.w	8011d52 <_dtoa_r+0x5a2>
 8011b68:	ed8d 8b02 	vstr	d8, [sp, #8]
 8011b6c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011b6e:	2a00      	cmp	r2, #0
 8011b70:	f2c0 812c 	blt.w	8011dcc <_dtoa_r+0x61c>
 8011b74:	f1b8 0f0e 	cmp.w	r8, #14
 8011b78:	f300 8128 	bgt.w	8011dcc <_dtoa_r+0x61c>
 8011b7c:	4b91      	ldr	r3, [pc, #580]	@ (8011dc4 <_dtoa_r+0x614>)
 8011b7e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8011b82:	ed93 6b00 	vldr	d6, [r3]
 8011b86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	da03      	bge.n	8011b94 <_dtoa_r+0x3e4>
 8011b8c:	f1ba 0f00 	cmp.w	sl, #0
 8011b90:	f340 80d2 	ble.w	8011d38 <_dtoa_r+0x588>
 8011b94:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8011b98:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011b9c:	463e      	mov	r6, r7
 8011b9e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8011ba2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8011ba6:	ee15 3a10 	vmov	r3, s10
 8011baa:	3330      	adds	r3, #48	@ 0x30
 8011bac:	f806 3b01 	strb.w	r3, [r6], #1
 8011bb0:	1bf3      	subs	r3, r6, r7
 8011bb2:	459a      	cmp	sl, r3
 8011bb4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8011bb8:	eea3 7b46 	vfms.f64	d7, d3, d6
 8011bbc:	f040 80f8 	bne.w	8011db0 <_dtoa_r+0x600>
 8011bc0:	ee37 7b07 	vadd.f64	d7, d7, d7
 8011bc4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bcc:	f300 80dd 	bgt.w	8011d8a <_dtoa_r+0x5da>
 8011bd0:	eeb4 7b46 	vcmp.f64	d7, d6
 8011bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bd8:	d104      	bne.n	8011be4 <_dtoa_r+0x434>
 8011bda:	ee15 3a10 	vmov	r3, s10
 8011bde:	07db      	lsls	r3, r3, #31
 8011be0:	f100 80d3 	bmi.w	8011d8a <_dtoa_r+0x5da>
 8011be4:	9901      	ldr	r1, [sp, #4]
 8011be6:	4648      	mov	r0, r9
 8011be8:	f000 fbc2 	bl	8012370 <_Bfree>
 8011bec:	2300      	movs	r3, #0
 8011bee:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011bf0:	7033      	strb	r3, [r6, #0]
 8011bf2:	f108 0301 	add.w	r3, r8, #1
 8011bf6:	6013      	str	r3, [r2, #0]
 8011bf8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	f000 8304 	beq.w	8012208 <_dtoa_r+0xa58>
 8011c00:	601e      	str	r6, [r3, #0]
 8011c02:	e301      	b.n	8012208 <_dtoa_r+0xa58>
 8011c04:	2202      	movs	r2, #2
 8011c06:	e75e      	b.n	8011ac6 <_dtoa_r+0x316>
 8011c08:	07cc      	lsls	r4, r1, #31
 8011c0a:	d504      	bpl.n	8011c16 <_dtoa_r+0x466>
 8011c0c:	ed90 6b00 	vldr	d6, [r0]
 8011c10:	3201      	adds	r2, #1
 8011c12:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011c16:	1049      	asrs	r1, r1, #1
 8011c18:	3008      	adds	r0, #8
 8011c1a:	e755      	b.n	8011ac8 <_dtoa_r+0x318>
 8011c1c:	d022      	beq.n	8011c64 <_dtoa_r+0x4b4>
 8011c1e:	f1c8 0100 	rsb	r1, r8, #0
 8011c22:	4a68      	ldr	r2, [pc, #416]	@ (8011dc4 <_dtoa_r+0x614>)
 8011c24:	f001 000f 	and.w	r0, r1, #15
 8011c28:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8011c2c:	ed92 7b00 	vldr	d7, [r2]
 8011c30:	ee28 7b07 	vmul.f64	d7, d8, d7
 8011c34:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011c38:	4863      	ldr	r0, [pc, #396]	@ (8011dc8 <_dtoa_r+0x618>)
 8011c3a:	1109      	asrs	r1, r1, #4
 8011c3c:	2400      	movs	r4, #0
 8011c3e:	2202      	movs	r2, #2
 8011c40:	b929      	cbnz	r1, 8011c4e <_dtoa_r+0x49e>
 8011c42:	2c00      	cmp	r4, #0
 8011c44:	f43f af49 	beq.w	8011ada <_dtoa_r+0x32a>
 8011c48:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011c4c:	e745      	b.n	8011ada <_dtoa_r+0x32a>
 8011c4e:	07ce      	lsls	r6, r1, #31
 8011c50:	d505      	bpl.n	8011c5e <_dtoa_r+0x4ae>
 8011c52:	ed90 6b00 	vldr	d6, [r0]
 8011c56:	3201      	adds	r2, #1
 8011c58:	2401      	movs	r4, #1
 8011c5a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011c5e:	1049      	asrs	r1, r1, #1
 8011c60:	3008      	adds	r0, #8
 8011c62:	e7ed      	b.n	8011c40 <_dtoa_r+0x490>
 8011c64:	2202      	movs	r2, #2
 8011c66:	e738      	b.n	8011ada <_dtoa_r+0x32a>
 8011c68:	f8cd 8010 	str.w	r8, [sp, #16]
 8011c6c:	4654      	mov	r4, sl
 8011c6e:	e754      	b.n	8011b1a <_dtoa_r+0x36a>
 8011c70:	4a54      	ldr	r2, [pc, #336]	@ (8011dc4 <_dtoa_r+0x614>)
 8011c72:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8011c76:	ed12 4b02 	vldr	d4, [r2, #-8]
 8011c7a:	9a08      	ldr	r2, [sp, #32]
 8011c7c:	ec41 0b17 	vmov	d7, r0, r1
 8011c80:	443c      	add	r4, r7
 8011c82:	b34a      	cbz	r2, 8011cd8 <_dtoa_r+0x528>
 8011c84:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8011c88:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8011c8c:	463e      	mov	r6, r7
 8011c8e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8011c92:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8011c96:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011c9a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8011c9e:	ee14 2a90 	vmov	r2, s9
 8011ca2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8011ca6:	3230      	adds	r2, #48	@ 0x30
 8011ca8:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011cac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cb4:	f806 2b01 	strb.w	r2, [r6], #1
 8011cb8:	d438      	bmi.n	8011d2c <_dtoa_r+0x57c>
 8011cba:	ee32 5b46 	vsub.f64	d5, d2, d6
 8011cbe:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8011cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cc6:	d462      	bmi.n	8011d8e <_dtoa_r+0x5de>
 8011cc8:	42a6      	cmp	r6, r4
 8011cca:	f43f af4d 	beq.w	8011b68 <_dtoa_r+0x3b8>
 8011cce:	ee27 7b03 	vmul.f64	d7, d7, d3
 8011cd2:	ee26 6b03 	vmul.f64	d6, d6, d3
 8011cd6:	e7e0      	b.n	8011c9a <_dtoa_r+0x4ea>
 8011cd8:	4621      	mov	r1, r4
 8011cda:	463e      	mov	r6, r7
 8011cdc:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011ce0:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8011ce4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8011ce8:	ee14 2a90 	vmov	r2, s9
 8011cec:	3230      	adds	r2, #48	@ 0x30
 8011cee:	f806 2b01 	strb.w	r2, [r6], #1
 8011cf2:	42a6      	cmp	r6, r4
 8011cf4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8011cf8:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011cfc:	d119      	bne.n	8011d32 <_dtoa_r+0x582>
 8011cfe:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8011d02:	ee37 4b05 	vadd.f64	d4, d7, d5
 8011d06:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8011d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d0e:	dc3e      	bgt.n	8011d8e <_dtoa_r+0x5de>
 8011d10:	ee35 5b47 	vsub.f64	d5, d5, d7
 8011d14:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8011d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d1c:	f57f af24 	bpl.w	8011b68 <_dtoa_r+0x3b8>
 8011d20:	460e      	mov	r6, r1
 8011d22:	3901      	subs	r1, #1
 8011d24:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011d28:	2b30      	cmp	r3, #48	@ 0x30
 8011d2a:	d0f9      	beq.n	8011d20 <_dtoa_r+0x570>
 8011d2c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8011d30:	e758      	b.n	8011be4 <_dtoa_r+0x434>
 8011d32:	ee26 6b03 	vmul.f64	d6, d6, d3
 8011d36:	e7d5      	b.n	8011ce4 <_dtoa_r+0x534>
 8011d38:	d10b      	bne.n	8011d52 <_dtoa_r+0x5a2>
 8011d3a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8011d3e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8011d42:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011d46:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d4e:	f2c0 8161 	blt.w	8012014 <_dtoa_r+0x864>
 8011d52:	2400      	movs	r4, #0
 8011d54:	4625      	mov	r5, r4
 8011d56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011d58:	43db      	mvns	r3, r3
 8011d5a:	9304      	str	r3, [sp, #16]
 8011d5c:	463e      	mov	r6, r7
 8011d5e:	f04f 0800 	mov.w	r8, #0
 8011d62:	4621      	mov	r1, r4
 8011d64:	4648      	mov	r0, r9
 8011d66:	f000 fb03 	bl	8012370 <_Bfree>
 8011d6a:	2d00      	cmp	r5, #0
 8011d6c:	d0de      	beq.n	8011d2c <_dtoa_r+0x57c>
 8011d6e:	f1b8 0f00 	cmp.w	r8, #0
 8011d72:	d005      	beq.n	8011d80 <_dtoa_r+0x5d0>
 8011d74:	45a8      	cmp	r8, r5
 8011d76:	d003      	beq.n	8011d80 <_dtoa_r+0x5d0>
 8011d78:	4641      	mov	r1, r8
 8011d7a:	4648      	mov	r0, r9
 8011d7c:	f000 faf8 	bl	8012370 <_Bfree>
 8011d80:	4629      	mov	r1, r5
 8011d82:	4648      	mov	r0, r9
 8011d84:	f000 faf4 	bl	8012370 <_Bfree>
 8011d88:	e7d0      	b.n	8011d2c <_dtoa_r+0x57c>
 8011d8a:	f8cd 8010 	str.w	r8, [sp, #16]
 8011d8e:	4633      	mov	r3, r6
 8011d90:	461e      	mov	r6, r3
 8011d92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011d96:	2a39      	cmp	r2, #57	@ 0x39
 8011d98:	d106      	bne.n	8011da8 <_dtoa_r+0x5f8>
 8011d9a:	429f      	cmp	r7, r3
 8011d9c:	d1f8      	bne.n	8011d90 <_dtoa_r+0x5e0>
 8011d9e:	9a04      	ldr	r2, [sp, #16]
 8011da0:	3201      	adds	r2, #1
 8011da2:	9204      	str	r2, [sp, #16]
 8011da4:	2230      	movs	r2, #48	@ 0x30
 8011da6:	703a      	strb	r2, [r7, #0]
 8011da8:	781a      	ldrb	r2, [r3, #0]
 8011daa:	3201      	adds	r2, #1
 8011dac:	701a      	strb	r2, [r3, #0]
 8011dae:	e7bd      	b.n	8011d2c <_dtoa_r+0x57c>
 8011db0:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011db4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dbc:	f47f aeef 	bne.w	8011b9e <_dtoa_r+0x3ee>
 8011dc0:	e710      	b.n	8011be4 <_dtoa_r+0x434>
 8011dc2:	bf00      	nop
 8011dc4:	08015128 	.word	0x08015128
 8011dc8:	08015100 	.word	0x08015100
 8011dcc:	9908      	ldr	r1, [sp, #32]
 8011dce:	2900      	cmp	r1, #0
 8011dd0:	f000 80e3 	beq.w	8011f9a <_dtoa_r+0x7ea>
 8011dd4:	9907      	ldr	r1, [sp, #28]
 8011dd6:	2901      	cmp	r1, #1
 8011dd8:	f300 80c8 	bgt.w	8011f6c <_dtoa_r+0x7bc>
 8011ddc:	2d00      	cmp	r5, #0
 8011dde:	f000 80c1 	beq.w	8011f64 <_dtoa_r+0x7b4>
 8011de2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8011de6:	9e05      	ldr	r6, [sp, #20]
 8011de8:	461c      	mov	r4, r3
 8011dea:	9304      	str	r3, [sp, #16]
 8011dec:	9b05      	ldr	r3, [sp, #20]
 8011dee:	4413      	add	r3, r2
 8011df0:	9305      	str	r3, [sp, #20]
 8011df2:	9b06      	ldr	r3, [sp, #24]
 8011df4:	2101      	movs	r1, #1
 8011df6:	4413      	add	r3, r2
 8011df8:	4648      	mov	r0, r9
 8011dfa:	9306      	str	r3, [sp, #24]
 8011dfc:	f000 fbb6 	bl	801256c <__i2b>
 8011e00:	9b04      	ldr	r3, [sp, #16]
 8011e02:	4605      	mov	r5, r0
 8011e04:	b166      	cbz	r6, 8011e20 <_dtoa_r+0x670>
 8011e06:	9a06      	ldr	r2, [sp, #24]
 8011e08:	2a00      	cmp	r2, #0
 8011e0a:	dd09      	ble.n	8011e20 <_dtoa_r+0x670>
 8011e0c:	42b2      	cmp	r2, r6
 8011e0e:	9905      	ldr	r1, [sp, #20]
 8011e10:	bfa8      	it	ge
 8011e12:	4632      	movge	r2, r6
 8011e14:	1a89      	subs	r1, r1, r2
 8011e16:	9105      	str	r1, [sp, #20]
 8011e18:	9906      	ldr	r1, [sp, #24]
 8011e1a:	1ab6      	subs	r6, r6, r2
 8011e1c:	1a8a      	subs	r2, r1, r2
 8011e1e:	9206      	str	r2, [sp, #24]
 8011e20:	b1fb      	cbz	r3, 8011e62 <_dtoa_r+0x6b2>
 8011e22:	9a08      	ldr	r2, [sp, #32]
 8011e24:	2a00      	cmp	r2, #0
 8011e26:	f000 80bc 	beq.w	8011fa2 <_dtoa_r+0x7f2>
 8011e2a:	b19c      	cbz	r4, 8011e54 <_dtoa_r+0x6a4>
 8011e2c:	4629      	mov	r1, r5
 8011e2e:	4622      	mov	r2, r4
 8011e30:	4648      	mov	r0, r9
 8011e32:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011e34:	f000 fc5a 	bl	80126ec <__pow5mult>
 8011e38:	9a01      	ldr	r2, [sp, #4]
 8011e3a:	4601      	mov	r1, r0
 8011e3c:	4605      	mov	r5, r0
 8011e3e:	4648      	mov	r0, r9
 8011e40:	f000 fbaa 	bl	8012598 <__multiply>
 8011e44:	9901      	ldr	r1, [sp, #4]
 8011e46:	9004      	str	r0, [sp, #16]
 8011e48:	4648      	mov	r0, r9
 8011e4a:	f000 fa91 	bl	8012370 <_Bfree>
 8011e4e:	9a04      	ldr	r2, [sp, #16]
 8011e50:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011e52:	9201      	str	r2, [sp, #4]
 8011e54:	1b1a      	subs	r2, r3, r4
 8011e56:	d004      	beq.n	8011e62 <_dtoa_r+0x6b2>
 8011e58:	9901      	ldr	r1, [sp, #4]
 8011e5a:	4648      	mov	r0, r9
 8011e5c:	f000 fc46 	bl	80126ec <__pow5mult>
 8011e60:	9001      	str	r0, [sp, #4]
 8011e62:	2101      	movs	r1, #1
 8011e64:	4648      	mov	r0, r9
 8011e66:	f000 fb81 	bl	801256c <__i2b>
 8011e6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011e6c:	4604      	mov	r4, r0
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	f000 81d0 	beq.w	8012214 <_dtoa_r+0xa64>
 8011e74:	461a      	mov	r2, r3
 8011e76:	4601      	mov	r1, r0
 8011e78:	4648      	mov	r0, r9
 8011e7a:	f000 fc37 	bl	80126ec <__pow5mult>
 8011e7e:	9b07      	ldr	r3, [sp, #28]
 8011e80:	2b01      	cmp	r3, #1
 8011e82:	4604      	mov	r4, r0
 8011e84:	f300 8095 	bgt.w	8011fb2 <_dtoa_r+0x802>
 8011e88:	9b02      	ldr	r3, [sp, #8]
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	f040 808b 	bne.w	8011fa6 <_dtoa_r+0x7f6>
 8011e90:	9b03      	ldr	r3, [sp, #12]
 8011e92:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8011e96:	2a00      	cmp	r2, #0
 8011e98:	f040 8087 	bne.w	8011faa <_dtoa_r+0x7fa>
 8011e9c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8011ea0:	0d12      	lsrs	r2, r2, #20
 8011ea2:	0512      	lsls	r2, r2, #20
 8011ea4:	2a00      	cmp	r2, #0
 8011ea6:	f000 8082 	beq.w	8011fae <_dtoa_r+0x7fe>
 8011eaa:	9b05      	ldr	r3, [sp, #20]
 8011eac:	3301      	adds	r3, #1
 8011eae:	9305      	str	r3, [sp, #20]
 8011eb0:	9b06      	ldr	r3, [sp, #24]
 8011eb2:	3301      	adds	r3, #1
 8011eb4:	9306      	str	r3, [sp, #24]
 8011eb6:	2301      	movs	r3, #1
 8011eb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011eba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	f000 81af 	beq.w	8012220 <_dtoa_r+0xa70>
 8011ec2:	6922      	ldr	r2, [r4, #16]
 8011ec4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8011ec8:	6910      	ldr	r0, [r2, #16]
 8011eca:	f000 fb03 	bl	80124d4 <__hi0bits>
 8011ece:	f1c0 0020 	rsb	r0, r0, #32
 8011ed2:	9b06      	ldr	r3, [sp, #24]
 8011ed4:	4418      	add	r0, r3
 8011ed6:	f010 001f 	ands.w	r0, r0, #31
 8011eda:	d076      	beq.n	8011fca <_dtoa_r+0x81a>
 8011edc:	f1c0 0220 	rsb	r2, r0, #32
 8011ee0:	2a04      	cmp	r2, #4
 8011ee2:	dd69      	ble.n	8011fb8 <_dtoa_r+0x808>
 8011ee4:	9b05      	ldr	r3, [sp, #20]
 8011ee6:	f1c0 001c 	rsb	r0, r0, #28
 8011eea:	4403      	add	r3, r0
 8011eec:	9305      	str	r3, [sp, #20]
 8011eee:	9b06      	ldr	r3, [sp, #24]
 8011ef0:	4406      	add	r6, r0
 8011ef2:	4403      	add	r3, r0
 8011ef4:	9306      	str	r3, [sp, #24]
 8011ef6:	9b05      	ldr	r3, [sp, #20]
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	dd05      	ble.n	8011f08 <_dtoa_r+0x758>
 8011efc:	9901      	ldr	r1, [sp, #4]
 8011efe:	461a      	mov	r2, r3
 8011f00:	4648      	mov	r0, r9
 8011f02:	f000 fc4d 	bl	80127a0 <__lshift>
 8011f06:	9001      	str	r0, [sp, #4]
 8011f08:	9b06      	ldr	r3, [sp, #24]
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	dd05      	ble.n	8011f1a <_dtoa_r+0x76a>
 8011f0e:	4621      	mov	r1, r4
 8011f10:	461a      	mov	r2, r3
 8011f12:	4648      	mov	r0, r9
 8011f14:	f000 fc44 	bl	80127a0 <__lshift>
 8011f18:	4604      	mov	r4, r0
 8011f1a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d056      	beq.n	8011fce <_dtoa_r+0x81e>
 8011f20:	9801      	ldr	r0, [sp, #4]
 8011f22:	4621      	mov	r1, r4
 8011f24:	f000 fca8 	bl	8012878 <__mcmp>
 8011f28:	2800      	cmp	r0, #0
 8011f2a:	da50      	bge.n	8011fce <_dtoa_r+0x81e>
 8011f2c:	f108 33ff 	add.w	r3, r8, #4294967295
 8011f30:	9304      	str	r3, [sp, #16]
 8011f32:	9901      	ldr	r1, [sp, #4]
 8011f34:	2300      	movs	r3, #0
 8011f36:	220a      	movs	r2, #10
 8011f38:	4648      	mov	r0, r9
 8011f3a:	f000 fa3b 	bl	80123b4 <__multadd>
 8011f3e:	9b08      	ldr	r3, [sp, #32]
 8011f40:	9001      	str	r0, [sp, #4]
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	f000 816e 	beq.w	8012224 <_dtoa_r+0xa74>
 8011f48:	4629      	mov	r1, r5
 8011f4a:	2300      	movs	r3, #0
 8011f4c:	220a      	movs	r2, #10
 8011f4e:	4648      	mov	r0, r9
 8011f50:	f000 fa30 	bl	80123b4 <__multadd>
 8011f54:	f1bb 0f00 	cmp.w	fp, #0
 8011f58:	4605      	mov	r5, r0
 8011f5a:	dc64      	bgt.n	8012026 <_dtoa_r+0x876>
 8011f5c:	9b07      	ldr	r3, [sp, #28]
 8011f5e:	2b02      	cmp	r3, #2
 8011f60:	dc3e      	bgt.n	8011fe0 <_dtoa_r+0x830>
 8011f62:	e060      	b.n	8012026 <_dtoa_r+0x876>
 8011f64:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011f66:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8011f6a:	e73c      	b.n	8011de6 <_dtoa_r+0x636>
 8011f6c:	f10a 34ff 	add.w	r4, sl, #4294967295
 8011f70:	42a3      	cmp	r3, r4
 8011f72:	bfbf      	itttt	lt
 8011f74:	1ae2      	sublt	r2, r4, r3
 8011f76:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8011f78:	189b      	addlt	r3, r3, r2
 8011f7a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8011f7c:	bfae      	itee	ge
 8011f7e:	1b1c      	subge	r4, r3, r4
 8011f80:	4623      	movlt	r3, r4
 8011f82:	2400      	movlt	r4, #0
 8011f84:	f1ba 0f00 	cmp.w	sl, #0
 8011f88:	bfb5      	itete	lt
 8011f8a:	9a05      	ldrlt	r2, [sp, #20]
 8011f8c:	9e05      	ldrge	r6, [sp, #20]
 8011f8e:	eba2 060a 	sublt.w	r6, r2, sl
 8011f92:	4652      	movge	r2, sl
 8011f94:	bfb8      	it	lt
 8011f96:	2200      	movlt	r2, #0
 8011f98:	e727      	b.n	8011dea <_dtoa_r+0x63a>
 8011f9a:	9e05      	ldr	r6, [sp, #20]
 8011f9c:	9d08      	ldr	r5, [sp, #32]
 8011f9e:	461c      	mov	r4, r3
 8011fa0:	e730      	b.n	8011e04 <_dtoa_r+0x654>
 8011fa2:	461a      	mov	r2, r3
 8011fa4:	e758      	b.n	8011e58 <_dtoa_r+0x6a8>
 8011fa6:	2300      	movs	r3, #0
 8011fa8:	e786      	b.n	8011eb8 <_dtoa_r+0x708>
 8011faa:	9b02      	ldr	r3, [sp, #8]
 8011fac:	e784      	b.n	8011eb8 <_dtoa_r+0x708>
 8011fae:	920b      	str	r2, [sp, #44]	@ 0x2c
 8011fb0:	e783      	b.n	8011eba <_dtoa_r+0x70a>
 8011fb2:	2300      	movs	r3, #0
 8011fb4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011fb6:	e784      	b.n	8011ec2 <_dtoa_r+0x712>
 8011fb8:	d09d      	beq.n	8011ef6 <_dtoa_r+0x746>
 8011fba:	9b05      	ldr	r3, [sp, #20]
 8011fbc:	321c      	adds	r2, #28
 8011fbe:	4413      	add	r3, r2
 8011fc0:	9305      	str	r3, [sp, #20]
 8011fc2:	9b06      	ldr	r3, [sp, #24]
 8011fc4:	4416      	add	r6, r2
 8011fc6:	4413      	add	r3, r2
 8011fc8:	e794      	b.n	8011ef4 <_dtoa_r+0x744>
 8011fca:	4602      	mov	r2, r0
 8011fcc:	e7f5      	b.n	8011fba <_dtoa_r+0x80a>
 8011fce:	f1ba 0f00 	cmp.w	sl, #0
 8011fd2:	f8cd 8010 	str.w	r8, [sp, #16]
 8011fd6:	46d3      	mov	fp, sl
 8011fd8:	dc21      	bgt.n	801201e <_dtoa_r+0x86e>
 8011fda:	9b07      	ldr	r3, [sp, #28]
 8011fdc:	2b02      	cmp	r3, #2
 8011fde:	dd1e      	ble.n	801201e <_dtoa_r+0x86e>
 8011fe0:	f1bb 0f00 	cmp.w	fp, #0
 8011fe4:	f47f aeb7 	bne.w	8011d56 <_dtoa_r+0x5a6>
 8011fe8:	4621      	mov	r1, r4
 8011fea:	465b      	mov	r3, fp
 8011fec:	2205      	movs	r2, #5
 8011fee:	4648      	mov	r0, r9
 8011ff0:	f000 f9e0 	bl	80123b4 <__multadd>
 8011ff4:	4601      	mov	r1, r0
 8011ff6:	4604      	mov	r4, r0
 8011ff8:	9801      	ldr	r0, [sp, #4]
 8011ffa:	f000 fc3d 	bl	8012878 <__mcmp>
 8011ffe:	2800      	cmp	r0, #0
 8012000:	f77f aea9 	ble.w	8011d56 <_dtoa_r+0x5a6>
 8012004:	463e      	mov	r6, r7
 8012006:	2331      	movs	r3, #49	@ 0x31
 8012008:	f806 3b01 	strb.w	r3, [r6], #1
 801200c:	9b04      	ldr	r3, [sp, #16]
 801200e:	3301      	adds	r3, #1
 8012010:	9304      	str	r3, [sp, #16]
 8012012:	e6a4      	b.n	8011d5e <_dtoa_r+0x5ae>
 8012014:	f8cd 8010 	str.w	r8, [sp, #16]
 8012018:	4654      	mov	r4, sl
 801201a:	4625      	mov	r5, r4
 801201c:	e7f2      	b.n	8012004 <_dtoa_r+0x854>
 801201e:	9b08      	ldr	r3, [sp, #32]
 8012020:	2b00      	cmp	r3, #0
 8012022:	f000 8103 	beq.w	801222c <_dtoa_r+0xa7c>
 8012026:	2e00      	cmp	r6, #0
 8012028:	dd05      	ble.n	8012036 <_dtoa_r+0x886>
 801202a:	4629      	mov	r1, r5
 801202c:	4632      	mov	r2, r6
 801202e:	4648      	mov	r0, r9
 8012030:	f000 fbb6 	bl	80127a0 <__lshift>
 8012034:	4605      	mov	r5, r0
 8012036:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012038:	2b00      	cmp	r3, #0
 801203a:	d058      	beq.n	80120ee <_dtoa_r+0x93e>
 801203c:	6869      	ldr	r1, [r5, #4]
 801203e:	4648      	mov	r0, r9
 8012040:	f000 f956 	bl	80122f0 <_Balloc>
 8012044:	4606      	mov	r6, r0
 8012046:	b928      	cbnz	r0, 8012054 <_dtoa_r+0x8a4>
 8012048:	4b82      	ldr	r3, [pc, #520]	@ (8012254 <_dtoa_r+0xaa4>)
 801204a:	4602      	mov	r2, r0
 801204c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8012050:	f7ff bbc7 	b.w	80117e2 <_dtoa_r+0x32>
 8012054:	692a      	ldr	r2, [r5, #16]
 8012056:	3202      	adds	r2, #2
 8012058:	0092      	lsls	r2, r2, #2
 801205a:	f105 010c 	add.w	r1, r5, #12
 801205e:	300c      	adds	r0, #12
 8012060:	f7ff fb07 	bl	8011672 <memcpy>
 8012064:	2201      	movs	r2, #1
 8012066:	4631      	mov	r1, r6
 8012068:	4648      	mov	r0, r9
 801206a:	f000 fb99 	bl	80127a0 <__lshift>
 801206e:	1c7b      	adds	r3, r7, #1
 8012070:	9305      	str	r3, [sp, #20]
 8012072:	eb07 030b 	add.w	r3, r7, fp
 8012076:	9309      	str	r3, [sp, #36]	@ 0x24
 8012078:	9b02      	ldr	r3, [sp, #8]
 801207a:	f003 0301 	and.w	r3, r3, #1
 801207e:	46a8      	mov	r8, r5
 8012080:	9308      	str	r3, [sp, #32]
 8012082:	4605      	mov	r5, r0
 8012084:	9b05      	ldr	r3, [sp, #20]
 8012086:	9801      	ldr	r0, [sp, #4]
 8012088:	4621      	mov	r1, r4
 801208a:	f103 3bff 	add.w	fp, r3, #4294967295
 801208e:	f7ff fb05 	bl	801169c <quorem>
 8012092:	4641      	mov	r1, r8
 8012094:	9002      	str	r0, [sp, #8]
 8012096:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801209a:	9801      	ldr	r0, [sp, #4]
 801209c:	f000 fbec 	bl	8012878 <__mcmp>
 80120a0:	462a      	mov	r2, r5
 80120a2:	9006      	str	r0, [sp, #24]
 80120a4:	4621      	mov	r1, r4
 80120a6:	4648      	mov	r0, r9
 80120a8:	f000 fc02 	bl	80128b0 <__mdiff>
 80120ac:	68c2      	ldr	r2, [r0, #12]
 80120ae:	4606      	mov	r6, r0
 80120b0:	b9fa      	cbnz	r2, 80120f2 <_dtoa_r+0x942>
 80120b2:	4601      	mov	r1, r0
 80120b4:	9801      	ldr	r0, [sp, #4]
 80120b6:	f000 fbdf 	bl	8012878 <__mcmp>
 80120ba:	4602      	mov	r2, r0
 80120bc:	4631      	mov	r1, r6
 80120be:	4648      	mov	r0, r9
 80120c0:	920a      	str	r2, [sp, #40]	@ 0x28
 80120c2:	f000 f955 	bl	8012370 <_Bfree>
 80120c6:	9b07      	ldr	r3, [sp, #28]
 80120c8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80120ca:	9e05      	ldr	r6, [sp, #20]
 80120cc:	ea43 0102 	orr.w	r1, r3, r2
 80120d0:	9b08      	ldr	r3, [sp, #32]
 80120d2:	4319      	orrs	r1, r3
 80120d4:	d10f      	bne.n	80120f6 <_dtoa_r+0x946>
 80120d6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80120da:	d028      	beq.n	801212e <_dtoa_r+0x97e>
 80120dc:	9b06      	ldr	r3, [sp, #24]
 80120de:	2b00      	cmp	r3, #0
 80120e0:	dd02      	ble.n	80120e8 <_dtoa_r+0x938>
 80120e2:	9b02      	ldr	r3, [sp, #8]
 80120e4:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80120e8:	f88b a000 	strb.w	sl, [fp]
 80120ec:	e639      	b.n	8011d62 <_dtoa_r+0x5b2>
 80120ee:	4628      	mov	r0, r5
 80120f0:	e7bd      	b.n	801206e <_dtoa_r+0x8be>
 80120f2:	2201      	movs	r2, #1
 80120f4:	e7e2      	b.n	80120bc <_dtoa_r+0x90c>
 80120f6:	9b06      	ldr	r3, [sp, #24]
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	db04      	blt.n	8012106 <_dtoa_r+0x956>
 80120fc:	9907      	ldr	r1, [sp, #28]
 80120fe:	430b      	orrs	r3, r1
 8012100:	9908      	ldr	r1, [sp, #32]
 8012102:	430b      	orrs	r3, r1
 8012104:	d120      	bne.n	8012148 <_dtoa_r+0x998>
 8012106:	2a00      	cmp	r2, #0
 8012108:	ddee      	ble.n	80120e8 <_dtoa_r+0x938>
 801210a:	9901      	ldr	r1, [sp, #4]
 801210c:	2201      	movs	r2, #1
 801210e:	4648      	mov	r0, r9
 8012110:	f000 fb46 	bl	80127a0 <__lshift>
 8012114:	4621      	mov	r1, r4
 8012116:	9001      	str	r0, [sp, #4]
 8012118:	f000 fbae 	bl	8012878 <__mcmp>
 801211c:	2800      	cmp	r0, #0
 801211e:	dc03      	bgt.n	8012128 <_dtoa_r+0x978>
 8012120:	d1e2      	bne.n	80120e8 <_dtoa_r+0x938>
 8012122:	f01a 0f01 	tst.w	sl, #1
 8012126:	d0df      	beq.n	80120e8 <_dtoa_r+0x938>
 8012128:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801212c:	d1d9      	bne.n	80120e2 <_dtoa_r+0x932>
 801212e:	2339      	movs	r3, #57	@ 0x39
 8012130:	f88b 3000 	strb.w	r3, [fp]
 8012134:	4633      	mov	r3, r6
 8012136:	461e      	mov	r6, r3
 8012138:	3b01      	subs	r3, #1
 801213a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801213e:	2a39      	cmp	r2, #57	@ 0x39
 8012140:	d053      	beq.n	80121ea <_dtoa_r+0xa3a>
 8012142:	3201      	adds	r2, #1
 8012144:	701a      	strb	r2, [r3, #0]
 8012146:	e60c      	b.n	8011d62 <_dtoa_r+0x5b2>
 8012148:	2a00      	cmp	r2, #0
 801214a:	dd07      	ble.n	801215c <_dtoa_r+0x9ac>
 801214c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8012150:	d0ed      	beq.n	801212e <_dtoa_r+0x97e>
 8012152:	f10a 0301 	add.w	r3, sl, #1
 8012156:	f88b 3000 	strb.w	r3, [fp]
 801215a:	e602      	b.n	8011d62 <_dtoa_r+0x5b2>
 801215c:	9b05      	ldr	r3, [sp, #20]
 801215e:	9a05      	ldr	r2, [sp, #20]
 8012160:	f803 ac01 	strb.w	sl, [r3, #-1]
 8012164:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012166:	4293      	cmp	r3, r2
 8012168:	d029      	beq.n	80121be <_dtoa_r+0xa0e>
 801216a:	9901      	ldr	r1, [sp, #4]
 801216c:	2300      	movs	r3, #0
 801216e:	220a      	movs	r2, #10
 8012170:	4648      	mov	r0, r9
 8012172:	f000 f91f 	bl	80123b4 <__multadd>
 8012176:	45a8      	cmp	r8, r5
 8012178:	9001      	str	r0, [sp, #4]
 801217a:	f04f 0300 	mov.w	r3, #0
 801217e:	f04f 020a 	mov.w	r2, #10
 8012182:	4641      	mov	r1, r8
 8012184:	4648      	mov	r0, r9
 8012186:	d107      	bne.n	8012198 <_dtoa_r+0x9e8>
 8012188:	f000 f914 	bl	80123b4 <__multadd>
 801218c:	4680      	mov	r8, r0
 801218e:	4605      	mov	r5, r0
 8012190:	9b05      	ldr	r3, [sp, #20]
 8012192:	3301      	adds	r3, #1
 8012194:	9305      	str	r3, [sp, #20]
 8012196:	e775      	b.n	8012084 <_dtoa_r+0x8d4>
 8012198:	f000 f90c 	bl	80123b4 <__multadd>
 801219c:	4629      	mov	r1, r5
 801219e:	4680      	mov	r8, r0
 80121a0:	2300      	movs	r3, #0
 80121a2:	220a      	movs	r2, #10
 80121a4:	4648      	mov	r0, r9
 80121a6:	f000 f905 	bl	80123b4 <__multadd>
 80121aa:	4605      	mov	r5, r0
 80121ac:	e7f0      	b.n	8012190 <_dtoa_r+0x9e0>
 80121ae:	f1bb 0f00 	cmp.w	fp, #0
 80121b2:	bfcc      	ite	gt
 80121b4:	465e      	movgt	r6, fp
 80121b6:	2601      	movle	r6, #1
 80121b8:	443e      	add	r6, r7
 80121ba:	f04f 0800 	mov.w	r8, #0
 80121be:	9901      	ldr	r1, [sp, #4]
 80121c0:	2201      	movs	r2, #1
 80121c2:	4648      	mov	r0, r9
 80121c4:	f000 faec 	bl	80127a0 <__lshift>
 80121c8:	4621      	mov	r1, r4
 80121ca:	9001      	str	r0, [sp, #4]
 80121cc:	f000 fb54 	bl	8012878 <__mcmp>
 80121d0:	2800      	cmp	r0, #0
 80121d2:	dcaf      	bgt.n	8012134 <_dtoa_r+0x984>
 80121d4:	d102      	bne.n	80121dc <_dtoa_r+0xa2c>
 80121d6:	f01a 0f01 	tst.w	sl, #1
 80121da:	d1ab      	bne.n	8012134 <_dtoa_r+0x984>
 80121dc:	4633      	mov	r3, r6
 80121de:	461e      	mov	r6, r3
 80121e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80121e4:	2a30      	cmp	r2, #48	@ 0x30
 80121e6:	d0fa      	beq.n	80121de <_dtoa_r+0xa2e>
 80121e8:	e5bb      	b.n	8011d62 <_dtoa_r+0x5b2>
 80121ea:	429f      	cmp	r7, r3
 80121ec:	d1a3      	bne.n	8012136 <_dtoa_r+0x986>
 80121ee:	9b04      	ldr	r3, [sp, #16]
 80121f0:	3301      	adds	r3, #1
 80121f2:	9304      	str	r3, [sp, #16]
 80121f4:	2331      	movs	r3, #49	@ 0x31
 80121f6:	703b      	strb	r3, [r7, #0]
 80121f8:	e5b3      	b.n	8011d62 <_dtoa_r+0x5b2>
 80121fa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80121fc:	4f16      	ldr	r7, [pc, #88]	@ (8012258 <_dtoa_r+0xaa8>)
 80121fe:	b11b      	cbz	r3, 8012208 <_dtoa_r+0xa58>
 8012200:	f107 0308 	add.w	r3, r7, #8
 8012204:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8012206:	6013      	str	r3, [r2, #0]
 8012208:	4638      	mov	r0, r7
 801220a:	b011      	add	sp, #68	@ 0x44
 801220c:	ecbd 8b02 	vpop	{d8}
 8012210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012214:	9b07      	ldr	r3, [sp, #28]
 8012216:	2b01      	cmp	r3, #1
 8012218:	f77f ae36 	ble.w	8011e88 <_dtoa_r+0x6d8>
 801221c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801221e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012220:	2001      	movs	r0, #1
 8012222:	e656      	b.n	8011ed2 <_dtoa_r+0x722>
 8012224:	f1bb 0f00 	cmp.w	fp, #0
 8012228:	f77f aed7 	ble.w	8011fda <_dtoa_r+0x82a>
 801222c:	463e      	mov	r6, r7
 801222e:	9801      	ldr	r0, [sp, #4]
 8012230:	4621      	mov	r1, r4
 8012232:	f7ff fa33 	bl	801169c <quorem>
 8012236:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801223a:	f806 ab01 	strb.w	sl, [r6], #1
 801223e:	1bf2      	subs	r2, r6, r7
 8012240:	4593      	cmp	fp, r2
 8012242:	ddb4      	ble.n	80121ae <_dtoa_r+0x9fe>
 8012244:	9901      	ldr	r1, [sp, #4]
 8012246:	2300      	movs	r3, #0
 8012248:	220a      	movs	r2, #10
 801224a:	4648      	mov	r0, r9
 801224c:	f000 f8b2 	bl	80123b4 <__multadd>
 8012250:	9001      	str	r0, [sp, #4]
 8012252:	e7ec      	b.n	801222e <_dtoa_r+0xa7e>
 8012254:	08015089 	.word	0x08015089
 8012258:	0801500d 	.word	0x0801500d

0801225c <_free_r>:
 801225c:	b538      	push	{r3, r4, r5, lr}
 801225e:	4605      	mov	r5, r0
 8012260:	2900      	cmp	r1, #0
 8012262:	d041      	beq.n	80122e8 <_free_r+0x8c>
 8012264:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012268:	1f0c      	subs	r4, r1, #4
 801226a:	2b00      	cmp	r3, #0
 801226c:	bfb8      	it	lt
 801226e:	18e4      	addlt	r4, r4, r3
 8012270:	f7fe f84a 	bl	8010308 <__malloc_lock>
 8012274:	4a1d      	ldr	r2, [pc, #116]	@ (80122ec <_free_r+0x90>)
 8012276:	6813      	ldr	r3, [r2, #0]
 8012278:	b933      	cbnz	r3, 8012288 <_free_r+0x2c>
 801227a:	6063      	str	r3, [r4, #4]
 801227c:	6014      	str	r4, [r2, #0]
 801227e:	4628      	mov	r0, r5
 8012280:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012284:	f7fe b846 	b.w	8010314 <__malloc_unlock>
 8012288:	42a3      	cmp	r3, r4
 801228a:	d908      	bls.n	801229e <_free_r+0x42>
 801228c:	6820      	ldr	r0, [r4, #0]
 801228e:	1821      	adds	r1, r4, r0
 8012290:	428b      	cmp	r3, r1
 8012292:	bf01      	itttt	eq
 8012294:	6819      	ldreq	r1, [r3, #0]
 8012296:	685b      	ldreq	r3, [r3, #4]
 8012298:	1809      	addeq	r1, r1, r0
 801229a:	6021      	streq	r1, [r4, #0]
 801229c:	e7ed      	b.n	801227a <_free_r+0x1e>
 801229e:	461a      	mov	r2, r3
 80122a0:	685b      	ldr	r3, [r3, #4]
 80122a2:	b10b      	cbz	r3, 80122a8 <_free_r+0x4c>
 80122a4:	42a3      	cmp	r3, r4
 80122a6:	d9fa      	bls.n	801229e <_free_r+0x42>
 80122a8:	6811      	ldr	r1, [r2, #0]
 80122aa:	1850      	adds	r0, r2, r1
 80122ac:	42a0      	cmp	r0, r4
 80122ae:	d10b      	bne.n	80122c8 <_free_r+0x6c>
 80122b0:	6820      	ldr	r0, [r4, #0]
 80122b2:	4401      	add	r1, r0
 80122b4:	1850      	adds	r0, r2, r1
 80122b6:	4283      	cmp	r3, r0
 80122b8:	6011      	str	r1, [r2, #0]
 80122ba:	d1e0      	bne.n	801227e <_free_r+0x22>
 80122bc:	6818      	ldr	r0, [r3, #0]
 80122be:	685b      	ldr	r3, [r3, #4]
 80122c0:	6053      	str	r3, [r2, #4]
 80122c2:	4408      	add	r0, r1
 80122c4:	6010      	str	r0, [r2, #0]
 80122c6:	e7da      	b.n	801227e <_free_r+0x22>
 80122c8:	d902      	bls.n	80122d0 <_free_r+0x74>
 80122ca:	230c      	movs	r3, #12
 80122cc:	602b      	str	r3, [r5, #0]
 80122ce:	e7d6      	b.n	801227e <_free_r+0x22>
 80122d0:	6820      	ldr	r0, [r4, #0]
 80122d2:	1821      	adds	r1, r4, r0
 80122d4:	428b      	cmp	r3, r1
 80122d6:	bf04      	itt	eq
 80122d8:	6819      	ldreq	r1, [r3, #0]
 80122da:	685b      	ldreq	r3, [r3, #4]
 80122dc:	6063      	str	r3, [r4, #4]
 80122de:	bf04      	itt	eq
 80122e0:	1809      	addeq	r1, r1, r0
 80122e2:	6021      	streq	r1, [r4, #0]
 80122e4:	6054      	str	r4, [r2, #4]
 80122e6:	e7ca      	b.n	801227e <_free_r+0x22>
 80122e8:	bd38      	pop	{r3, r4, r5, pc}
 80122ea:	bf00      	nop
 80122ec:	24004e44 	.word	0x24004e44

080122f0 <_Balloc>:
 80122f0:	b570      	push	{r4, r5, r6, lr}
 80122f2:	69c6      	ldr	r6, [r0, #28]
 80122f4:	4604      	mov	r4, r0
 80122f6:	460d      	mov	r5, r1
 80122f8:	b976      	cbnz	r6, 8012318 <_Balloc+0x28>
 80122fa:	2010      	movs	r0, #16
 80122fc:	f7fd ff52 	bl	80101a4 <malloc>
 8012300:	4602      	mov	r2, r0
 8012302:	61e0      	str	r0, [r4, #28]
 8012304:	b920      	cbnz	r0, 8012310 <_Balloc+0x20>
 8012306:	4b18      	ldr	r3, [pc, #96]	@ (8012368 <_Balloc+0x78>)
 8012308:	4818      	ldr	r0, [pc, #96]	@ (801236c <_Balloc+0x7c>)
 801230a:	216b      	movs	r1, #107	@ 0x6b
 801230c:	f7fd ff2c 	bl	8010168 <__assert_func>
 8012310:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012314:	6006      	str	r6, [r0, #0]
 8012316:	60c6      	str	r6, [r0, #12]
 8012318:	69e6      	ldr	r6, [r4, #28]
 801231a:	68f3      	ldr	r3, [r6, #12]
 801231c:	b183      	cbz	r3, 8012340 <_Balloc+0x50>
 801231e:	69e3      	ldr	r3, [r4, #28]
 8012320:	68db      	ldr	r3, [r3, #12]
 8012322:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012326:	b9b8      	cbnz	r0, 8012358 <_Balloc+0x68>
 8012328:	2101      	movs	r1, #1
 801232a:	fa01 f605 	lsl.w	r6, r1, r5
 801232e:	1d72      	adds	r2, r6, #5
 8012330:	0092      	lsls	r2, r2, #2
 8012332:	4620      	mov	r0, r4
 8012334:	f001 fec0 	bl	80140b8 <_calloc_r>
 8012338:	b160      	cbz	r0, 8012354 <_Balloc+0x64>
 801233a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801233e:	e00e      	b.n	801235e <_Balloc+0x6e>
 8012340:	2221      	movs	r2, #33	@ 0x21
 8012342:	2104      	movs	r1, #4
 8012344:	4620      	mov	r0, r4
 8012346:	f001 feb7 	bl	80140b8 <_calloc_r>
 801234a:	69e3      	ldr	r3, [r4, #28]
 801234c:	60f0      	str	r0, [r6, #12]
 801234e:	68db      	ldr	r3, [r3, #12]
 8012350:	2b00      	cmp	r3, #0
 8012352:	d1e4      	bne.n	801231e <_Balloc+0x2e>
 8012354:	2000      	movs	r0, #0
 8012356:	bd70      	pop	{r4, r5, r6, pc}
 8012358:	6802      	ldr	r2, [r0, #0]
 801235a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801235e:	2300      	movs	r3, #0
 8012360:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012364:	e7f7      	b.n	8012356 <_Balloc+0x66>
 8012366:	bf00      	nop
 8012368:	0801501a 	.word	0x0801501a
 801236c:	0801509a 	.word	0x0801509a

08012370 <_Bfree>:
 8012370:	b570      	push	{r4, r5, r6, lr}
 8012372:	69c6      	ldr	r6, [r0, #28]
 8012374:	4605      	mov	r5, r0
 8012376:	460c      	mov	r4, r1
 8012378:	b976      	cbnz	r6, 8012398 <_Bfree+0x28>
 801237a:	2010      	movs	r0, #16
 801237c:	f7fd ff12 	bl	80101a4 <malloc>
 8012380:	4602      	mov	r2, r0
 8012382:	61e8      	str	r0, [r5, #28]
 8012384:	b920      	cbnz	r0, 8012390 <_Bfree+0x20>
 8012386:	4b09      	ldr	r3, [pc, #36]	@ (80123ac <_Bfree+0x3c>)
 8012388:	4809      	ldr	r0, [pc, #36]	@ (80123b0 <_Bfree+0x40>)
 801238a:	218f      	movs	r1, #143	@ 0x8f
 801238c:	f7fd feec 	bl	8010168 <__assert_func>
 8012390:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012394:	6006      	str	r6, [r0, #0]
 8012396:	60c6      	str	r6, [r0, #12]
 8012398:	b13c      	cbz	r4, 80123aa <_Bfree+0x3a>
 801239a:	69eb      	ldr	r3, [r5, #28]
 801239c:	6862      	ldr	r2, [r4, #4]
 801239e:	68db      	ldr	r3, [r3, #12]
 80123a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80123a4:	6021      	str	r1, [r4, #0]
 80123a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80123aa:	bd70      	pop	{r4, r5, r6, pc}
 80123ac:	0801501a 	.word	0x0801501a
 80123b0:	0801509a 	.word	0x0801509a

080123b4 <__multadd>:
 80123b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123b8:	690d      	ldr	r5, [r1, #16]
 80123ba:	4607      	mov	r7, r0
 80123bc:	460c      	mov	r4, r1
 80123be:	461e      	mov	r6, r3
 80123c0:	f101 0c14 	add.w	ip, r1, #20
 80123c4:	2000      	movs	r0, #0
 80123c6:	f8dc 3000 	ldr.w	r3, [ip]
 80123ca:	b299      	uxth	r1, r3
 80123cc:	fb02 6101 	mla	r1, r2, r1, r6
 80123d0:	0c1e      	lsrs	r6, r3, #16
 80123d2:	0c0b      	lsrs	r3, r1, #16
 80123d4:	fb02 3306 	mla	r3, r2, r6, r3
 80123d8:	b289      	uxth	r1, r1
 80123da:	3001      	adds	r0, #1
 80123dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80123e0:	4285      	cmp	r5, r0
 80123e2:	f84c 1b04 	str.w	r1, [ip], #4
 80123e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80123ea:	dcec      	bgt.n	80123c6 <__multadd+0x12>
 80123ec:	b30e      	cbz	r6, 8012432 <__multadd+0x7e>
 80123ee:	68a3      	ldr	r3, [r4, #8]
 80123f0:	42ab      	cmp	r3, r5
 80123f2:	dc19      	bgt.n	8012428 <__multadd+0x74>
 80123f4:	6861      	ldr	r1, [r4, #4]
 80123f6:	4638      	mov	r0, r7
 80123f8:	3101      	adds	r1, #1
 80123fa:	f7ff ff79 	bl	80122f0 <_Balloc>
 80123fe:	4680      	mov	r8, r0
 8012400:	b928      	cbnz	r0, 801240e <__multadd+0x5a>
 8012402:	4602      	mov	r2, r0
 8012404:	4b0c      	ldr	r3, [pc, #48]	@ (8012438 <__multadd+0x84>)
 8012406:	480d      	ldr	r0, [pc, #52]	@ (801243c <__multadd+0x88>)
 8012408:	21ba      	movs	r1, #186	@ 0xba
 801240a:	f7fd fead 	bl	8010168 <__assert_func>
 801240e:	6922      	ldr	r2, [r4, #16]
 8012410:	3202      	adds	r2, #2
 8012412:	f104 010c 	add.w	r1, r4, #12
 8012416:	0092      	lsls	r2, r2, #2
 8012418:	300c      	adds	r0, #12
 801241a:	f7ff f92a 	bl	8011672 <memcpy>
 801241e:	4621      	mov	r1, r4
 8012420:	4638      	mov	r0, r7
 8012422:	f7ff ffa5 	bl	8012370 <_Bfree>
 8012426:	4644      	mov	r4, r8
 8012428:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801242c:	3501      	adds	r5, #1
 801242e:	615e      	str	r6, [r3, #20]
 8012430:	6125      	str	r5, [r4, #16]
 8012432:	4620      	mov	r0, r4
 8012434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012438:	08015089 	.word	0x08015089
 801243c:	0801509a 	.word	0x0801509a

08012440 <__s2b>:
 8012440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012444:	460c      	mov	r4, r1
 8012446:	4615      	mov	r5, r2
 8012448:	461f      	mov	r7, r3
 801244a:	2209      	movs	r2, #9
 801244c:	3308      	adds	r3, #8
 801244e:	4606      	mov	r6, r0
 8012450:	fb93 f3f2 	sdiv	r3, r3, r2
 8012454:	2100      	movs	r1, #0
 8012456:	2201      	movs	r2, #1
 8012458:	429a      	cmp	r2, r3
 801245a:	db09      	blt.n	8012470 <__s2b+0x30>
 801245c:	4630      	mov	r0, r6
 801245e:	f7ff ff47 	bl	80122f0 <_Balloc>
 8012462:	b940      	cbnz	r0, 8012476 <__s2b+0x36>
 8012464:	4602      	mov	r2, r0
 8012466:	4b19      	ldr	r3, [pc, #100]	@ (80124cc <__s2b+0x8c>)
 8012468:	4819      	ldr	r0, [pc, #100]	@ (80124d0 <__s2b+0x90>)
 801246a:	21d3      	movs	r1, #211	@ 0xd3
 801246c:	f7fd fe7c 	bl	8010168 <__assert_func>
 8012470:	0052      	lsls	r2, r2, #1
 8012472:	3101      	adds	r1, #1
 8012474:	e7f0      	b.n	8012458 <__s2b+0x18>
 8012476:	9b08      	ldr	r3, [sp, #32]
 8012478:	6143      	str	r3, [r0, #20]
 801247a:	2d09      	cmp	r5, #9
 801247c:	f04f 0301 	mov.w	r3, #1
 8012480:	6103      	str	r3, [r0, #16]
 8012482:	dd16      	ble.n	80124b2 <__s2b+0x72>
 8012484:	f104 0909 	add.w	r9, r4, #9
 8012488:	46c8      	mov	r8, r9
 801248a:	442c      	add	r4, r5
 801248c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012490:	4601      	mov	r1, r0
 8012492:	3b30      	subs	r3, #48	@ 0x30
 8012494:	220a      	movs	r2, #10
 8012496:	4630      	mov	r0, r6
 8012498:	f7ff ff8c 	bl	80123b4 <__multadd>
 801249c:	45a0      	cmp	r8, r4
 801249e:	d1f5      	bne.n	801248c <__s2b+0x4c>
 80124a0:	f1a5 0408 	sub.w	r4, r5, #8
 80124a4:	444c      	add	r4, r9
 80124a6:	1b2d      	subs	r5, r5, r4
 80124a8:	1963      	adds	r3, r4, r5
 80124aa:	42bb      	cmp	r3, r7
 80124ac:	db04      	blt.n	80124b8 <__s2b+0x78>
 80124ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80124b2:	340a      	adds	r4, #10
 80124b4:	2509      	movs	r5, #9
 80124b6:	e7f6      	b.n	80124a6 <__s2b+0x66>
 80124b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80124bc:	4601      	mov	r1, r0
 80124be:	3b30      	subs	r3, #48	@ 0x30
 80124c0:	220a      	movs	r2, #10
 80124c2:	4630      	mov	r0, r6
 80124c4:	f7ff ff76 	bl	80123b4 <__multadd>
 80124c8:	e7ee      	b.n	80124a8 <__s2b+0x68>
 80124ca:	bf00      	nop
 80124cc:	08015089 	.word	0x08015089
 80124d0:	0801509a 	.word	0x0801509a

080124d4 <__hi0bits>:
 80124d4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80124d8:	4603      	mov	r3, r0
 80124da:	bf36      	itet	cc
 80124dc:	0403      	lslcc	r3, r0, #16
 80124de:	2000      	movcs	r0, #0
 80124e0:	2010      	movcc	r0, #16
 80124e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80124e6:	bf3c      	itt	cc
 80124e8:	021b      	lslcc	r3, r3, #8
 80124ea:	3008      	addcc	r0, #8
 80124ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80124f0:	bf3c      	itt	cc
 80124f2:	011b      	lslcc	r3, r3, #4
 80124f4:	3004      	addcc	r0, #4
 80124f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80124fa:	bf3c      	itt	cc
 80124fc:	009b      	lslcc	r3, r3, #2
 80124fe:	3002      	addcc	r0, #2
 8012500:	2b00      	cmp	r3, #0
 8012502:	db05      	blt.n	8012510 <__hi0bits+0x3c>
 8012504:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8012508:	f100 0001 	add.w	r0, r0, #1
 801250c:	bf08      	it	eq
 801250e:	2020      	moveq	r0, #32
 8012510:	4770      	bx	lr

08012512 <__lo0bits>:
 8012512:	6803      	ldr	r3, [r0, #0]
 8012514:	4602      	mov	r2, r0
 8012516:	f013 0007 	ands.w	r0, r3, #7
 801251a:	d00b      	beq.n	8012534 <__lo0bits+0x22>
 801251c:	07d9      	lsls	r1, r3, #31
 801251e:	d421      	bmi.n	8012564 <__lo0bits+0x52>
 8012520:	0798      	lsls	r0, r3, #30
 8012522:	bf49      	itett	mi
 8012524:	085b      	lsrmi	r3, r3, #1
 8012526:	089b      	lsrpl	r3, r3, #2
 8012528:	2001      	movmi	r0, #1
 801252a:	6013      	strmi	r3, [r2, #0]
 801252c:	bf5c      	itt	pl
 801252e:	6013      	strpl	r3, [r2, #0]
 8012530:	2002      	movpl	r0, #2
 8012532:	4770      	bx	lr
 8012534:	b299      	uxth	r1, r3
 8012536:	b909      	cbnz	r1, 801253c <__lo0bits+0x2a>
 8012538:	0c1b      	lsrs	r3, r3, #16
 801253a:	2010      	movs	r0, #16
 801253c:	b2d9      	uxtb	r1, r3
 801253e:	b909      	cbnz	r1, 8012544 <__lo0bits+0x32>
 8012540:	3008      	adds	r0, #8
 8012542:	0a1b      	lsrs	r3, r3, #8
 8012544:	0719      	lsls	r1, r3, #28
 8012546:	bf04      	itt	eq
 8012548:	091b      	lsreq	r3, r3, #4
 801254a:	3004      	addeq	r0, #4
 801254c:	0799      	lsls	r1, r3, #30
 801254e:	bf04      	itt	eq
 8012550:	089b      	lsreq	r3, r3, #2
 8012552:	3002      	addeq	r0, #2
 8012554:	07d9      	lsls	r1, r3, #31
 8012556:	d403      	bmi.n	8012560 <__lo0bits+0x4e>
 8012558:	085b      	lsrs	r3, r3, #1
 801255a:	f100 0001 	add.w	r0, r0, #1
 801255e:	d003      	beq.n	8012568 <__lo0bits+0x56>
 8012560:	6013      	str	r3, [r2, #0]
 8012562:	4770      	bx	lr
 8012564:	2000      	movs	r0, #0
 8012566:	4770      	bx	lr
 8012568:	2020      	movs	r0, #32
 801256a:	4770      	bx	lr

0801256c <__i2b>:
 801256c:	b510      	push	{r4, lr}
 801256e:	460c      	mov	r4, r1
 8012570:	2101      	movs	r1, #1
 8012572:	f7ff febd 	bl	80122f0 <_Balloc>
 8012576:	4602      	mov	r2, r0
 8012578:	b928      	cbnz	r0, 8012586 <__i2b+0x1a>
 801257a:	4b05      	ldr	r3, [pc, #20]	@ (8012590 <__i2b+0x24>)
 801257c:	4805      	ldr	r0, [pc, #20]	@ (8012594 <__i2b+0x28>)
 801257e:	f240 1145 	movw	r1, #325	@ 0x145
 8012582:	f7fd fdf1 	bl	8010168 <__assert_func>
 8012586:	2301      	movs	r3, #1
 8012588:	6144      	str	r4, [r0, #20]
 801258a:	6103      	str	r3, [r0, #16]
 801258c:	bd10      	pop	{r4, pc}
 801258e:	bf00      	nop
 8012590:	08015089 	.word	0x08015089
 8012594:	0801509a 	.word	0x0801509a

08012598 <__multiply>:
 8012598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801259c:	4614      	mov	r4, r2
 801259e:	690a      	ldr	r2, [r1, #16]
 80125a0:	6923      	ldr	r3, [r4, #16]
 80125a2:	429a      	cmp	r2, r3
 80125a4:	bfa8      	it	ge
 80125a6:	4623      	movge	r3, r4
 80125a8:	460f      	mov	r7, r1
 80125aa:	bfa4      	itt	ge
 80125ac:	460c      	movge	r4, r1
 80125ae:	461f      	movge	r7, r3
 80125b0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80125b4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80125b8:	68a3      	ldr	r3, [r4, #8]
 80125ba:	6861      	ldr	r1, [r4, #4]
 80125bc:	eb0a 0609 	add.w	r6, sl, r9
 80125c0:	42b3      	cmp	r3, r6
 80125c2:	b085      	sub	sp, #20
 80125c4:	bfb8      	it	lt
 80125c6:	3101      	addlt	r1, #1
 80125c8:	f7ff fe92 	bl	80122f0 <_Balloc>
 80125cc:	b930      	cbnz	r0, 80125dc <__multiply+0x44>
 80125ce:	4602      	mov	r2, r0
 80125d0:	4b44      	ldr	r3, [pc, #272]	@ (80126e4 <__multiply+0x14c>)
 80125d2:	4845      	ldr	r0, [pc, #276]	@ (80126e8 <__multiply+0x150>)
 80125d4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80125d8:	f7fd fdc6 	bl	8010168 <__assert_func>
 80125dc:	f100 0514 	add.w	r5, r0, #20
 80125e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80125e4:	462b      	mov	r3, r5
 80125e6:	2200      	movs	r2, #0
 80125e8:	4543      	cmp	r3, r8
 80125ea:	d321      	bcc.n	8012630 <__multiply+0x98>
 80125ec:	f107 0114 	add.w	r1, r7, #20
 80125f0:	f104 0214 	add.w	r2, r4, #20
 80125f4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80125f8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80125fc:	9302      	str	r3, [sp, #8]
 80125fe:	1b13      	subs	r3, r2, r4
 8012600:	3b15      	subs	r3, #21
 8012602:	f023 0303 	bic.w	r3, r3, #3
 8012606:	3304      	adds	r3, #4
 8012608:	f104 0715 	add.w	r7, r4, #21
 801260c:	42ba      	cmp	r2, r7
 801260e:	bf38      	it	cc
 8012610:	2304      	movcc	r3, #4
 8012612:	9301      	str	r3, [sp, #4]
 8012614:	9b02      	ldr	r3, [sp, #8]
 8012616:	9103      	str	r1, [sp, #12]
 8012618:	428b      	cmp	r3, r1
 801261a:	d80c      	bhi.n	8012636 <__multiply+0x9e>
 801261c:	2e00      	cmp	r6, #0
 801261e:	dd03      	ble.n	8012628 <__multiply+0x90>
 8012620:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012624:	2b00      	cmp	r3, #0
 8012626:	d05b      	beq.n	80126e0 <__multiply+0x148>
 8012628:	6106      	str	r6, [r0, #16]
 801262a:	b005      	add	sp, #20
 801262c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012630:	f843 2b04 	str.w	r2, [r3], #4
 8012634:	e7d8      	b.n	80125e8 <__multiply+0x50>
 8012636:	f8b1 a000 	ldrh.w	sl, [r1]
 801263a:	f1ba 0f00 	cmp.w	sl, #0
 801263e:	d024      	beq.n	801268a <__multiply+0xf2>
 8012640:	f104 0e14 	add.w	lr, r4, #20
 8012644:	46a9      	mov	r9, r5
 8012646:	f04f 0c00 	mov.w	ip, #0
 801264a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801264e:	f8d9 3000 	ldr.w	r3, [r9]
 8012652:	fa1f fb87 	uxth.w	fp, r7
 8012656:	b29b      	uxth	r3, r3
 8012658:	fb0a 330b 	mla	r3, sl, fp, r3
 801265c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8012660:	f8d9 7000 	ldr.w	r7, [r9]
 8012664:	4463      	add	r3, ip
 8012666:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801266a:	fb0a c70b 	mla	r7, sl, fp, ip
 801266e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8012672:	b29b      	uxth	r3, r3
 8012674:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012678:	4572      	cmp	r2, lr
 801267a:	f849 3b04 	str.w	r3, [r9], #4
 801267e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012682:	d8e2      	bhi.n	801264a <__multiply+0xb2>
 8012684:	9b01      	ldr	r3, [sp, #4]
 8012686:	f845 c003 	str.w	ip, [r5, r3]
 801268a:	9b03      	ldr	r3, [sp, #12]
 801268c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8012690:	3104      	adds	r1, #4
 8012692:	f1b9 0f00 	cmp.w	r9, #0
 8012696:	d021      	beq.n	80126dc <__multiply+0x144>
 8012698:	682b      	ldr	r3, [r5, #0]
 801269a:	f104 0c14 	add.w	ip, r4, #20
 801269e:	46ae      	mov	lr, r5
 80126a0:	f04f 0a00 	mov.w	sl, #0
 80126a4:	f8bc b000 	ldrh.w	fp, [ip]
 80126a8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80126ac:	fb09 770b 	mla	r7, r9, fp, r7
 80126b0:	4457      	add	r7, sl
 80126b2:	b29b      	uxth	r3, r3
 80126b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80126b8:	f84e 3b04 	str.w	r3, [lr], #4
 80126bc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80126c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80126c4:	f8be 3000 	ldrh.w	r3, [lr]
 80126c8:	fb09 330a 	mla	r3, r9, sl, r3
 80126cc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80126d0:	4562      	cmp	r2, ip
 80126d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80126d6:	d8e5      	bhi.n	80126a4 <__multiply+0x10c>
 80126d8:	9f01      	ldr	r7, [sp, #4]
 80126da:	51eb      	str	r3, [r5, r7]
 80126dc:	3504      	adds	r5, #4
 80126de:	e799      	b.n	8012614 <__multiply+0x7c>
 80126e0:	3e01      	subs	r6, #1
 80126e2:	e79b      	b.n	801261c <__multiply+0x84>
 80126e4:	08015089 	.word	0x08015089
 80126e8:	0801509a 	.word	0x0801509a

080126ec <__pow5mult>:
 80126ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80126f0:	4615      	mov	r5, r2
 80126f2:	f012 0203 	ands.w	r2, r2, #3
 80126f6:	4607      	mov	r7, r0
 80126f8:	460e      	mov	r6, r1
 80126fa:	d007      	beq.n	801270c <__pow5mult+0x20>
 80126fc:	4c25      	ldr	r4, [pc, #148]	@ (8012794 <__pow5mult+0xa8>)
 80126fe:	3a01      	subs	r2, #1
 8012700:	2300      	movs	r3, #0
 8012702:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012706:	f7ff fe55 	bl	80123b4 <__multadd>
 801270a:	4606      	mov	r6, r0
 801270c:	10ad      	asrs	r5, r5, #2
 801270e:	d03d      	beq.n	801278c <__pow5mult+0xa0>
 8012710:	69fc      	ldr	r4, [r7, #28]
 8012712:	b97c      	cbnz	r4, 8012734 <__pow5mult+0x48>
 8012714:	2010      	movs	r0, #16
 8012716:	f7fd fd45 	bl	80101a4 <malloc>
 801271a:	4602      	mov	r2, r0
 801271c:	61f8      	str	r0, [r7, #28]
 801271e:	b928      	cbnz	r0, 801272c <__pow5mult+0x40>
 8012720:	4b1d      	ldr	r3, [pc, #116]	@ (8012798 <__pow5mult+0xac>)
 8012722:	481e      	ldr	r0, [pc, #120]	@ (801279c <__pow5mult+0xb0>)
 8012724:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8012728:	f7fd fd1e 	bl	8010168 <__assert_func>
 801272c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012730:	6004      	str	r4, [r0, #0]
 8012732:	60c4      	str	r4, [r0, #12]
 8012734:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8012738:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801273c:	b94c      	cbnz	r4, 8012752 <__pow5mult+0x66>
 801273e:	f240 2171 	movw	r1, #625	@ 0x271
 8012742:	4638      	mov	r0, r7
 8012744:	f7ff ff12 	bl	801256c <__i2b>
 8012748:	2300      	movs	r3, #0
 801274a:	f8c8 0008 	str.w	r0, [r8, #8]
 801274e:	4604      	mov	r4, r0
 8012750:	6003      	str	r3, [r0, #0]
 8012752:	f04f 0900 	mov.w	r9, #0
 8012756:	07eb      	lsls	r3, r5, #31
 8012758:	d50a      	bpl.n	8012770 <__pow5mult+0x84>
 801275a:	4631      	mov	r1, r6
 801275c:	4622      	mov	r2, r4
 801275e:	4638      	mov	r0, r7
 8012760:	f7ff ff1a 	bl	8012598 <__multiply>
 8012764:	4631      	mov	r1, r6
 8012766:	4680      	mov	r8, r0
 8012768:	4638      	mov	r0, r7
 801276a:	f7ff fe01 	bl	8012370 <_Bfree>
 801276e:	4646      	mov	r6, r8
 8012770:	106d      	asrs	r5, r5, #1
 8012772:	d00b      	beq.n	801278c <__pow5mult+0xa0>
 8012774:	6820      	ldr	r0, [r4, #0]
 8012776:	b938      	cbnz	r0, 8012788 <__pow5mult+0x9c>
 8012778:	4622      	mov	r2, r4
 801277a:	4621      	mov	r1, r4
 801277c:	4638      	mov	r0, r7
 801277e:	f7ff ff0b 	bl	8012598 <__multiply>
 8012782:	6020      	str	r0, [r4, #0]
 8012784:	f8c0 9000 	str.w	r9, [r0]
 8012788:	4604      	mov	r4, r0
 801278a:	e7e4      	b.n	8012756 <__pow5mult+0x6a>
 801278c:	4630      	mov	r0, r6
 801278e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012792:	bf00      	nop
 8012794:	080150f4 	.word	0x080150f4
 8012798:	0801501a 	.word	0x0801501a
 801279c:	0801509a 	.word	0x0801509a

080127a0 <__lshift>:
 80127a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80127a4:	460c      	mov	r4, r1
 80127a6:	6849      	ldr	r1, [r1, #4]
 80127a8:	6923      	ldr	r3, [r4, #16]
 80127aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80127ae:	68a3      	ldr	r3, [r4, #8]
 80127b0:	4607      	mov	r7, r0
 80127b2:	4691      	mov	r9, r2
 80127b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80127b8:	f108 0601 	add.w	r6, r8, #1
 80127bc:	42b3      	cmp	r3, r6
 80127be:	db0b      	blt.n	80127d8 <__lshift+0x38>
 80127c0:	4638      	mov	r0, r7
 80127c2:	f7ff fd95 	bl	80122f0 <_Balloc>
 80127c6:	4605      	mov	r5, r0
 80127c8:	b948      	cbnz	r0, 80127de <__lshift+0x3e>
 80127ca:	4602      	mov	r2, r0
 80127cc:	4b28      	ldr	r3, [pc, #160]	@ (8012870 <__lshift+0xd0>)
 80127ce:	4829      	ldr	r0, [pc, #164]	@ (8012874 <__lshift+0xd4>)
 80127d0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80127d4:	f7fd fcc8 	bl	8010168 <__assert_func>
 80127d8:	3101      	adds	r1, #1
 80127da:	005b      	lsls	r3, r3, #1
 80127dc:	e7ee      	b.n	80127bc <__lshift+0x1c>
 80127de:	2300      	movs	r3, #0
 80127e0:	f100 0114 	add.w	r1, r0, #20
 80127e4:	f100 0210 	add.w	r2, r0, #16
 80127e8:	4618      	mov	r0, r3
 80127ea:	4553      	cmp	r3, sl
 80127ec:	db33      	blt.n	8012856 <__lshift+0xb6>
 80127ee:	6920      	ldr	r0, [r4, #16]
 80127f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80127f4:	f104 0314 	add.w	r3, r4, #20
 80127f8:	f019 091f 	ands.w	r9, r9, #31
 80127fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012800:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012804:	d02b      	beq.n	801285e <__lshift+0xbe>
 8012806:	f1c9 0e20 	rsb	lr, r9, #32
 801280a:	468a      	mov	sl, r1
 801280c:	2200      	movs	r2, #0
 801280e:	6818      	ldr	r0, [r3, #0]
 8012810:	fa00 f009 	lsl.w	r0, r0, r9
 8012814:	4310      	orrs	r0, r2
 8012816:	f84a 0b04 	str.w	r0, [sl], #4
 801281a:	f853 2b04 	ldr.w	r2, [r3], #4
 801281e:	459c      	cmp	ip, r3
 8012820:	fa22 f20e 	lsr.w	r2, r2, lr
 8012824:	d8f3      	bhi.n	801280e <__lshift+0x6e>
 8012826:	ebac 0304 	sub.w	r3, ip, r4
 801282a:	3b15      	subs	r3, #21
 801282c:	f023 0303 	bic.w	r3, r3, #3
 8012830:	3304      	adds	r3, #4
 8012832:	f104 0015 	add.w	r0, r4, #21
 8012836:	4584      	cmp	ip, r0
 8012838:	bf38      	it	cc
 801283a:	2304      	movcc	r3, #4
 801283c:	50ca      	str	r2, [r1, r3]
 801283e:	b10a      	cbz	r2, 8012844 <__lshift+0xa4>
 8012840:	f108 0602 	add.w	r6, r8, #2
 8012844:	3e01      	subs	r6, #1
 8012846:	4638      	mov	r0, r7
 8012848:	612e      	str	r6, [r5, #16]
 801284a:	4621      	mov	r1, r4
 801284c:	f7ff fd90 	bl	8012370 <_Bfree>
 8012850:	4628      	mov	r0, r5
 8012852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012856:	f842 0f04 	str.w	r0, [r2, #4]!
 801285a:	3301      	adds	r3, #1
 801285c:	e7c5      	b.n	80127ea <__lshift+0x4a>
 801285e:	3904      	subs	r1, #4
 8012860:	f853 2b04 	ldr.w	r2, [r3], #4
 8012864:	f841 2f04 	str.w	r2, [r1, #4]!
 8012868:	459c      	cmp	ip, r3
 801286a:	d8f9      	bhi.n	8012860 <__lshift+0xc0>
 801286c:	e7ea      	b.n	8012844 <__lshift+0xa4>
 801286e:	bf00      	nop
 8012870:	08015089 	.word	0x08015089
 8012874:	0801509a 	.word	0x0801509a

08012878 <__mcmp>:
 8012878:	690a      	ldr	r2, [r1, #16]
 801287a:	4603      	mov	r3, r0
 801287c:	6900      	ldr	r0, [r0, #16]
 801287e:	1a80      	subs	r0, r0, r2
 8012880:	b530      	push	{r4, r5, lr}
 8012882:	d10e      	bne.n	80128a2 <__mcmp+0x2a>
 8012884:	3314      	adds	r3, #20
 8012886:	3114      	adds	r1, #20
 8012888:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801288c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012890:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012894:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012898:	4295      	cmp	r5, r2
 801289a:	d003      	beq.n	80128a4 <__mcmp+0x2c>
 801289c:	d205      	bcs.n	80128aa <__mcmp+0x32>
 801289e:	f04f 30ff 	mov.w	r0, #4294967295
 80128a2:	bd30      	pop	{r4, r5, pc}
 80128a4:	42a3      	cmp	r3, r4
 80128a6:	d3f3      	bcc.n	8012890 <__mcmp+0x18>
 80128a8:	e7fb      	b.n	80128a2 <__mcmp+0x2a>
 80128aa:	2001      	movs	r0, #1
 80128ac:	e7f9      	b.n	80128a2 <__mcmp+0x2a>
	...

080128b0 <__mdiff>:
 80128b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128b4:	4689      	mov	r9, r1
 80128b6:	4606      	mov	r6, r0
 80128b8:	4611      	mov	r1, r2
 80128ba:	4648      	mov	r0, r9
 80128bc:	4614      	mov	r4, r2
 80128be:	f7ff ffdb 	bl	8012878 <__mcmp>
 80128c2:	1e05      	subs	r5, r0, #0
 80128c4:	d112      	bne.n	80128ec <__mdiff+0x3c>
 80128c6:	4629      	mov	r1, r5
 80128c8:	4630      	mov	r0, r6
 80128ca:	f7ff fd11 	bl	80122f0 <_Balloc>
 80128ce:	4602      	mov	r2, r0
 80128d0:	b928      	cbnz	r0, 80128de <__mdiff+0x2e>
 80128d2:	4b3f      	ldr	r3, [pc, #252]	@ (80129d0 <__mdiff+0x120>)
 80128d4:	f240 2137 	movw	r1, #567	@ 0x237
 80128d8:	483e      	ldr	r0, [pc, #248]	@ (80129d4 <__mdiff+0x124>)
 80128da:	f7fd fc45 	bl	8010168 <__assert_func>
 80128de:	2301      	movs	r3, #1
 80128e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80128e4:	4610      	mov	r0, r2
 80128e6:	b003      	add	sp, #12
 80128e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128ec:	bfbc      	itt	lt
 80128ee:	464b      	movlt	r3, r9
 80128f0:	46a1      	movlt	r9, r4
 80128f2:	4630      	mov	r0, r6
 80128f4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80128f8:	bfba      	itte	lt
 80128fa:	461c      	movlt	r4, r3
 80128fc:	2501      	movlt	r5, #1
 80128fe:	2500      	movge	r5, #0
 8012900:	f7ff fcf6 	bl	80122f0 <_Balloc>
 8012904:	4602      	mov	r2, r0
 8012906:	b918      	cbnz	r0, 8012910 <__mdiff+0x60>
 8012908:	4b31      	ldr	r3, [pc, #196]	@ (80129d0 <__mdiff+0x120>)
 801290a:	f240 2145 	movw	r1, #581	@ 0x245
 801290e:	e7e3      	b.n	80128d8 <__mdiff+0x28>
 8012910:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8012914:	6926      	ldr	r6, [r4, #16]
 8012916:	60c5      	str	r5, [r0, #12]
 8012918:	f109 0310 	add.w	r3, r9, #16
 801291c:	f109 0514 	add.w	r5, r9, #20
 8012920:	f104 0e14 	add.w	lr, r4, #20
 8012924:	f100 0b14 	add.w	fp, r0, #20
 8012928:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801292c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8012930:	9301      	str	r3, [sp, #4]
 8012932:	46d9      	mov	r9, fp
 8012934:	f04f 0c00 	mov.w	ip, #0
 8012938:	9b01      	ldr	r3, [sp, #4]
 801293a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801293e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8012942:	9301      	str	r3, [sp, #4]
 8012944:	fa1f f38a 	uxth.w	r3, sl
 8012948:	4619      	mov	r1, r3
 801294a:	b283      	uxth	r3, r0
 801294c:	1acb      	subs	r3, r1, r3
 801294e:	0c00      	lsrs	r0, r0, #16
 8012950:	4463      	add	r3, ip
 8012952:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8012956:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801295a:	b29b      	uxth	r3, r3
 801295c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012960:	4576      	cmp	r6, lr
 8012962:	f849 3b04 	str.w	r3, [r9], #4
 8012966:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801296a:	d8e5      	bhi.n	8012938 <__mdiff+0x88>
 801296c:	1b33      	subs	r3, r6, r4
 801296e:	3b15      	subs	r3, #21
 8012970:	f023 0303 	bic.w	r3, r3, #3
 8012974:	3415      	adds	r4, #21
 8012976:	3304      	adds	r3, #4
 8012978:	42a6      	cmp	r6, r4
 801297a:	bf38      	it	cc
 801297c:	2304      	movcc	r3, #4
 801297e:	441d      	add	r5, r3
 8012980:	445b      	add	r3, fp
 8012982:	461e      	mov	r6, r3
 8012984:	462c      	mov	r4, r5
 8012986:	4544      	cmp	r4, r8
 8012988:	d30e      	bcc.n	80129a8 <__mdiff+0xf8>
 801298a:	f108 0103 	add.w	r1, r8, #3
 801298e:	1b49      	subs	r1, r1, r5
 8012990:	f021 0103 	bic.w	r1, r1, #3
 8012994:	3d03      	subs	r5, #3
 8012996:	45a8      	cmp	r8, r5
 8012998:	bf38      	it	cc
 801299a:	2100      	movcc	r1, #0
 801299c:	440b      	add	r3, r1
 801299e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80129a2:	b191      	cbz	r1, 80129ca <__mdiff+0x11a>
 80129a4:	6117      	str	r7, [r2, #16]
 80129a6:	e79d      	b.n	80128e4 <__mdiff+0x34>
 80129a8:	f854 1b04 	ldr.w	r1, [r4], #4
 80129ac:	46e6      	mov	lr, ip
 80129ae:	0c08      	lsrs	r0, r1, #16
 80129b0:	fa1c fc81 	uxtah	ip, ip, r1
 80129b4:	4471      	add	r1, lr
 80129b6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80129ba:	b289      	uxth	r1, r1
 80129bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80129c0:	f846 1b04 	str.w	r1, [r6], #4
 80129c4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80129c8:	e7dd      	b.n	8012986 <__mdiff+0xd6>
 80129ca:	3f01      	subs	r7, #1
 80129cc:	e7e7      	b.n	801299e <__mdiff+0xee>
 80129ce:	bf00      	nop
 80129d0:	08015089 	.word	0x08015089
 80129d4:	0801509a 	.word	0x0801509a

080129d8 <__ulp>:
 80129d8:	b082      	sub	sp, #8
 80129da:	ed8d 0b00 	vstr	d0, [sp]
 80129de:	9a01      	ldr	r2, [sp, #4]
 80129e0:	4b0f      	ldr	r3, [pc, #60]	@ (8012a20 <__ulp+0x48>)
 80129e2:	4013      	ands	r3, r2
 80129e4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	dc08      	bgt.n	80129fe <__ulp+0x26>
 80129ec:	425b      	negs	r3, r3
 80129ee:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80129f2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80129f6:	da04      	bge.n	8012a02 <__ulp+0x2a>
 80129f8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80129fc:	4113      	asrs	r3, r2
 80129fe:	2200      	movs	r2, #0
 8012a00:	e008      	b.n	8012a14 <__ulp+0x3c>
 8012a02:	f1a2 0314 	sub.w	r3, r2, #20
 8012a06:	2b1e      	cmp	r3, #30
 8012a08:	bfda      	itte	le
 8012a0a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8012a0e:	40da      	lsrle	r2, r3
 8012a10:	2201      	movgt	r2, #1
 8012a12:	2300      	movs	r3, #0
 8012a14:	4619      	mov	r1, r3
 8012a16:	4610      	mov	r0, r2
 8012a18:	ec41 0b10 	vmov	d0, r0, r1
 8012a1c:	b002      	add	sp, #8
 8012a1e:	4770      	bx	lr
 8012a20:	7ff00000 	.word	0x7ff00000

08012a24 <__b2d>:
 8012a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a28:	6906      	ldr	r6, [r0, #16]
 8012a2a:	f100 0814 	add.w	r8, r0, #20
 8012a2e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8012a32:	1f37      	subs	r7, r6, #4
 8012a34:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012a38:	4610      	mov	r0, r2
 8012a3a:	f7ff fd4b 	bl	80124d4 <__hi0bits>
 8012a3e:	f1c0 0320 	rsb	r3, r0, #32
 8012a42:	280a      	cmp	r0, #10
 8012a44:	600b      	str	r3, [r1, #0]
 8012a46:	491b      	ldr	r1, [pc, #108]	@ (8012ab4 <__b2d+0x90>)
 8012a48:	dc15      	bgt.n	8012a76 <__b2d+0x52>
 8012a4a:	f1c0 0c0b 	rsb	ip, r0, #11
 8012a4e:	fa22 f30c 	lsr.w	r3, r2, ip
 8012a52:	45b8      	cmp	r8, r7
 8012a54:	ea43 0501 	orr.w	r5, r3, r1
 8012a58:	bf34      	ite	cc
 8012a5a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012a5e:	2300      	movcs	r3, #0
 8012a60:	3015      	adds	r0, #21
 8012a62:	fa02 f000 	lsl.w	r0, r2, r0
 8012a66:	fa23 f30c 	lsr.w	r3, r3, ip
 8012a6a:	4303      	orrs	r3, r0
 8012a6c:	461c      	mov	r4, r3
 8012a6e:	ec45 4b10 	vmov	d0, r4, r5
 8012a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a76:	45b8      	cmp	r8, r7
 8012a78:	bf3a      	itte	cc
 8012a7a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012a7e:	f1a6 0708 	subcc.w	r7, r6, #8
 8012a82:	2300      	movcs	r3, #0
 8012a84:	380b      	subs	r0, #11
 8012a86:	d012      	beq.n	8012aae <__b2d+0x8a>
 8012a88:	f1c0 0120 	rsb	r1, r0, #32
 8012a8c:	fa23 f401 	lsr.w	r4, r3, r1
 8012a90:	4082      	lsls	r2, r0
 8012a92:	4322      	orrs	r2, r4
 8012a94:	4547      	cmp	r7, r8
 8012a96:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8012a9a:	bf8c      	ite	hi
 8012a9c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8012aa0:	2200      	movls	r2, #0
 8012aa2:	4083      	lsls	r3, r0
 8012aa4:	40ca      	lsrs	r2, r1
 8012aa6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8012aaa:	4313      	orrs	r3, r2
 8012aac:	e7de      	b.n	8012a6c <__b2d+0x48>
 8012aae:	ea42 0501 	orr.w	r5, r2, r1
 8012ab2:	e7db      	b.n	8012a6c <__b2d+0x48>
 8012ab4:	3ff00000 	.word	0x3ff00000

08012ab8 <__d2b>:
 8012ab8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012abc:	460f      	mov	r7, r1
 8012abe:	2101      	movs	r1, #1
 8012ac0:	ec59 8b10 	vmov	r8, r9, d0
 8012ac4:	4616      	mov	r6, r2
 8012ac6:	f7ff fc13 	bl	80122f0 <_Balloc>
 8012aca:	4604      	mov	r4, r0
 8012acc:	b930      	cbnz	r0, 8012adc <__d2b+0x24>
 8012ace:	4602      	mov	r2, r0
 8012ad0:	4b23      	ldr	r3, [pc, #140]	@ (8012b60 <__d2b+0xa8>)
 8012ad2:	4824      	ldr	r0, [pc, #144]	@ (8012b64 <__d2b+0xac>)
 8012ad4:	f240 310f 	movw	r1, #783	@ 0x30f
 8012ad8:	f7fd fb46 	bl	8010168 <__assert_func>
 8012adc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012ae0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012ae4:	b10d      	cbz	r5, 8012aea <__d2b+0x32>
 8012ae6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012aea:	9301      	str	r3, [sp, #4]
 8012aec:	f1b8 0300 	subs.w	r3, r8, #0
 8012af0:	d023      	beq.n	8012b3a <__d2b+0x82>
 8012af2:	4668      	mov	r0, sp
 8012af4:	9300      	str	r3, [sp, #0]
 8012af6:	f7ff fd0c 	bl	8012512 <__lo0bits>
 8012afa:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012afe:	b1d0      	cbz	r0, 8012b36 <__d2b+0x7e>
 8012b00:	f1c0 0320 	rsb	r3, r0, #32
 8012b04:	fa02 f303 	lsl.w	r3, r2, r3
 8012b08:	430b      	orrs	r3, r1
 8012b0a:	40c2      	lsrs	r2, r0
 8012b0c:	6163      	str	r3, [r4, #20]
 8012b0e:	9201      	str	r2, [sp, #4]
 8012b10:	9b01      	ldr	r3, [sp, #4]
 8012b12:	61a3      	str	r3, [r4, #24]
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	bf0c      	ite	eq
 8012b18:	2201      	moveq	r2, #1
 8012b1a:	2202      	movne	r2, #2
 8012b1c:	6122      	str	r2, [r4, #16]
 8012b1e:	b1a5      	cbz	r5, 8012b4a <__d2b+0x92>
 8012b20:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8012b24:	4405      	add	r5, r0
 8012b26:	603d      	str	r5, [r7, #0]
 8012b28:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8012b2c:	6030      	str	r0, [r6, #0]
 8012b2e:	4620      	mov	r0, r4
 8012b30:	b003      	add	sp, #12
 8012b32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012b36:	6161      	str	r1, [r4, #20]
 8012b38:	e7ea      	b.n	8012b10 <__d2b+0x58>
 8012b3a:	a801      	add	r0, sp, #4
 8012b3c:	f7ff fce9 	bl	8012512 <__lo0bits>
 8012b40:	9b01      	ldr	r3, [sp, #4]
 8012b42:	6163      	str	r3, [r4, #20]
 8012b44:	3020      	adds	r0, #32
 8012b46:	2201      	movs	r2, #1
 8012b48:	e7e8      	b.n	8012b1c <__d2b+0x64>
 8012b4a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012b4e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8012b52:	6038      	str	r0, [r7, #0]
 8012b54:	6918      	ldr	r0, [r3, #16]
 8012b56:	f7ff fcbd 	bl	80124d4 <__hi0bits>
 8012b5a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012b5e:	e7e5      	b.n	8012b2c <__d2b+0x74>
 8012b60:	08015089 	.word	0x08015089
 8012b64:	0801509a 	.word	0x0801509a

08012b68 <__ratio>:
 8012b68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b6c:	4688      	mov	r8, r1
 8012b6e:	4669      	mov	r1, sp
 8012b70:	4681      	mov	r9, r0
 8012b72:	f7ff ff57 	bl	8012a24 <__b2d>
 8012b76:	a901      	add	r1, sp, #4
 8012b78:	4640      	mov	r0, r8
 8012b7a:	ec55 4b10 	vmov	r4, r5, d0
 8012b7e:	f7ff ff51 	bl	8012a24 <__b2d>
 8012b82:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8012b86:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8012b8a:	1ad2      	subs	r2, r2, r3
 8012b8c:	e9dd 3100 	ldrd	r3, r1, [sp]
 8012b90:	1a5b      	subs	r3, r3, r1
 8012b92:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8012b96:	ec57 6b10 	vmov	r6, r7, d0
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	bfd6      	itet	le
 8012b9e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012ba2:	462a      	movgt	r2, r5
 8012ba4:	463a      	movle	r2, r7
 8012ba6:	46ab      	mov	fp, r5
 8012ba8:	46a2      	mov	sl, r4
 8012baa:	bfce      	itee	gt
 8012bac:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8012bb0:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8012bb4:	ee00 3a90 	vmovle	s1, r3
 8012bb8:	ec4b ab17 	vmov	d7, sl, fp
 8012bbc:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8012bc0:	b003      	add	sp, #12
 8012bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012bc6 <__copybits>:
 8012bc6:	3901      	subs	r1, #1
 8012bc8:	b570      	push	{r4, r5, r6, lr}
 8012bca:	1149      	asrs	r1, r1, #5
 8012bcc:	6914      	ldr	r4, [r2, #16]
 8012bce:	3101      	adds	r1, #1
 8012bd0:	f102 0314 	add.w	r3, r2, #20
 8012bd4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012bd8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012bdc:	1f05      	subs	r5, r0, #4
 8012bde:	42a3      	cmp	r3, r4
 8012be0:	d30c      	bcc.n	8012bfc <__copybits+0x36>
 8012be2:	1aa3      	subs	r3, r4, r2
 8012be4:	3b11      	subs	r3, #17
 8012be6:	f023 0303 	bic.w	r3, r3, #3
 8012bea:	3211      	adds	r2, #17
 8012bec:	42a2      	cmp	r2, r4
 8012bee:	bf88      	it	hi
 8012bf0:	2300      	movhi	r3, #0
 8012bf2:	4418      	add	r0, r3
 8012bf4:	2300      	movs	r3, #0
 8012bf6:	4288      	cmp	r0, r1
 8012bf8:	d305      	bcc.n	8012c06 <__copybits+0x40>
 8012bfa:	bd70      	pop	{r4, r5, r6, pc}
 8012bfc:	f853 6b04 	ldr.w	r6, [r3], #4
 8012c00:	f845 6f04 	str.w	r6, [r5, #4]!
 8012c04:	e7eb      	b.n	8012bde <__copybits+0x18>
 8012c06:	f840 3b04 	str.w	r3, [r0], #4
 8012c0a:	e7f4      	b.n	8012bf6 <__copybits+0x30>

08012c0c <__any_on>:
 8012c0c:	f100 0214 	add.w	r2, r0, #20
 8012c10:	6900      	ldr	r0, [r0, #16]
 8012c12:	114b      	asrs	r3, r1, #5
 8012c14:	4298      	cmp	r0, r3
 8012c16:	b510      	push	{r4, lr}
 8012c18:	db11      	blt.n	8012c3e <__any_on+0x32>
 8012c1a:	dd0a      	ble.n	8012c32 <__any_on+0x26>
 8012c1c:	f011 011f 	ands.w	r1, r1, #31
 8012c20:	d007      	beq.n	8012c32 <__any_on+0x26>
 8012c22:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012c26:	fa24 f001 	lsr.w	r0, r4, r1
 8012c2a:	fa00 f101 	lsl.w	r1, r0, r1
 8012c2e:	428c      	cmp	r4, r1
 8012c30:	d10b      	bne.n	8012c4a <__any_on+0x3e>
 8012c32:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012c36:	4293      	cmp	r3, r2
 8012c38:	d803      	bhi.n	8012c42 <__any_on+0x36>
 8012c3a:	2000      	movs	r0, #0
 8012c3c:	bd10      	pop	{r4, pc}
 8012c3e:	4603      	mov	r3, r0
 8012c40:	e7f7      	b.n	8012c32 <__any_on+0x26>
 8012c42:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012c46:	2900      	cmp	r1, #0
 8012c48:	d0f5      	beq.n	8012c36 <__any_on+0x2a>
 8012c4a:	2001      	movs	r0, #1
 8012c4c:	e7f6      	b.n	8012c3c <__any_on+0x30>

08012c4e <sulp>:
 8012c4e:	b570      	push	{r4, r5, r6, lr}
 8012c50:	4604      	mov	r4, r0
 8012c52:	460d      	mov	r5, r1
 8012c54:	4616      	mov	r6, r2
 8012c56:	ec45 4b10 	vmov	d0, r4, r5
 8012c5a:	f7ff febd 	bl	80129d8 <__ulp>
 8012c5e:	b17e      	cbz	r6, 8012c80 <sulp+0x32>
 8012c60:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012c64:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	dd09      	ble.n	8012c80 <sulp+0x32>
 8012c6c:	051b      	lsls	r3, r3, #20
 8012c6e:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8012c72:	2000      	movs	r0, #0
 8012c74:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8012c78:	ec41 0b17 	vmov	d7, r0, r1
 8012c7c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012c80:	bd70      	pop	{r4, r5, r6, pc}
 8012c82:	0000      	movs	r0, r0
 8012c84:	0000      	movs	r0, r0
	...

08012c88 <_strtod_l>:
 8012c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c8c:	ed2d 8b0a 	vpush	{d8-d12}
 8012c90:	b097      	sub	sp, #92	@ 0x5c
 8012c92:	4688      	mov	r8, r1
 8012c94:	920e      	str	r2, [sp, #56]	@ 0x38
 8012c96:	2200      	movs	r2, #0
 8012c98:	9212      	str	r2, [sp, #72]	@ 0x48
 8012c9a:	9005      	str	r0, [sp, #20]
 8012c9c:	f04f 0a00 	mov.w	sl, #0
 8012ca0:	f04f 0b00 	mov.w	fp, #0
 8012ca4:	460a      	mov	r2, r1
 8012ca6:	9211      	str	r2, [sp, #68]	@ 0x44
 8012ca8:	7811      	ldrb	r1, [r2, #0]
 8012caa:	292b      	cmp	r1, #43	@ 0x2b
 8012cac:	d04c      	beq.n	8012d48 <_strtod_l+0xc0>
 8012cae:	d839      	bhi.n	8012d24 <_strtod_l+0x9c>
 8012cb0:	290d      	cmp	r1, #13
 8012cb2:	d833      	bhi.n	8012d1c <_strtod_l+0x94>
 8012cb4:	2908      	cmp	r1, #8
 8012cb6:	d833      	bhi.n	8012d20 <_strtod_l+0x98>
 8012cb8:	2900      	cmp	r1, #0
 8012cba:	d03c      	beq.n	8012d36 <_strtod_l+0xae>
 8012cbc:	2200      	movs	r2, #0
 8012cbe:	9208      	str	r2, [sp, #32]
 8012cc0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8012cc2:	782a      	ldrb	r2, [r5, #0]
 8012cc4:	2a30      	cmp	r2, #48	@ 0x30
 8012cc6:	f040 80b5 	bne.w	8012e34 <_strtod_l+0x1ac>
 8012cca:	786a      	ldrb	r2, [r5, #1]
 8012ccc:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8012cd0:	2a58      	cmp	r2, #88	@ 0x58
 8012cd2:	d170      	bne.n	8012db6 <_strtod_l+0x12e>
 8012cd4:	9302      	str	r3, [sp, #8]
 8012cd6:	9b08      	ldr	r3, [sp, #32]
 8012cd8:	9301      	str	r3, [sp, #4]
 8012cda:	ab12      	add	r3, sp, #72	@ 0x48
 8012cdc:	9300      	str	r3, [sp, #0]
 8012cde:	4a8b      	ldr	r2, [pc, #556]	@ (8012f0c <_strtod_l+0x284>)
 8012ce0:	9805      	ldr	r0, [sp, #20]
 8012ce2:	ab13      	add	r3, sp, #76	@ 0x4c
 8012ce4:	a911      	add	r1, sp, #68	@ 0x44
 8012ce6:	f001 fa63 	bl	80141b0 <__gethex>
 8012cea:	f010 060f 	ands.w	r6, r0, #15
 8012cee:	4604      	mov	r4, r0
 8012cf0:	d005      	beq.n	8012cfe <_strtod_l+0x76>
 8012cf2:	2e06      	cmp	r6, #6
 8012cf4:	d12a      	bne.n	8012d4c <_strtod_l+0xc4>
 8012cf6:	3501      	adds	r5, #1
 8012cf8:	2300      	movs	r3, #0
 8012cfa:	9511      	str	r5, [sp, #68]	@ 0x44
 8012cfc:	9308      	str	r3, [sp, #32]
 8012cfe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	f040 852f 	bne.w	8013764 <_strtod_l+0xadc>
 8012d06:	9b08      	ldr	r3, [sp, #32]
 8012d08:	ec4b ab10 	vmov	d0, sl, fp
 8012d0c:	b1cb      	cbz	r3, 8012d42 <_strtod_l+0xba>
 8012d0e:	eeb1 0b40 	vneg.f64	d0, d0
 8012d12:	b017      	add	sp, #92	@ 0x5c
 8012d14:	ecbd 8b0a 	vpop	{d8-d12}
 8012d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d1c:	2920      	cmp	r1, #32
 8012d1e:	d1cd      	bne.n	8012cbc <_strtod_l+0x34>
 8012d20:	3201      	adds	r2, #1
 8012d22:	e7c0      	b.n	8012ca6 <_strtod_l+0x1e>
 8012d24:	292d      	cmp	r1, #45	@ 0x2d
 8012d26:	d1c9      	bne.n	8012cbc <_strtod_l+0x34>
 8012d28:	2101      	movs	r1, #1
 8012d2a:	9108      	str	r1, [sp, #32]
 8012d2c:	1c51      	adds	r1, r2, #1
 8012d2e:	9111      	str	r1, [sp, #68]	@ 0x44
 8012d30:	7852      	ldrb	r2, [r2, #1]
 8012d32:	2a00      	cmp	r2, #0
 8012d34:	d1c4      	bne.n	8012cc0 <_strtod_l+0x38>
 8012d36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012d38:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	f040 850f 	bne.w	8013760 <_strtod_l+0xad8>
 8012d42:	ec4b ab10 	vmov	d0, sl, fp
 8012d46:	e7e4      	b.n	8012d12 <_strtod_l+0x8a>
 8012d48:	2100      	movs	r1, #0
 8012d4a:	e7ee      	b.n	8012d2a <_strtod_l+0xa2>
 8012d4c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8012d4e:	b13a      	cbz	r2, 8012d60 <_strtod_l+0xd8>
 8012d50:	2135      	movs	r1, #53	@ 0x35
 8012d52:	a814      	add	r0, sp, #80	@ 0x50
 8012d54:	f7ff ff37 	bl	8012bc6 <__copybits>
 8012d58:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8012d5a:	9805      	ldr	r0, [sp, #20]
 8012d5c:	f7ff fb08 	bl	8012370 <_Bfree>
 8012d60:	1e73      	subs	r3, r6, #1
 8012d62:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012d64:	2b04      	cmp	r3, #4
 8012d66:	d806      	bhi.n	8012d76 <_strtod_l+0xee>
 8012d68:	e8df f003 	tbb	[pc, r3]
 8012d6c:	201d0314 	.word	0x201d0314
 8012d70:	14          	.byte	0x14
 8012d71:	00          	.byte	0x00
 8012d72:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8012d76:	05e3      	lsls	r3, r4, #23
 8012d78:	bf48      	it	mi
 8012d7a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8012d7e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012d82:	0d1b      	lsrs	r3, r3, #20
 8012d84:	051b      	lsls	r3, r3, #20
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d1b9      	bne.n	8012cfe <_strtod_l+0x76>
 8012d8a:	f7fe fc45 	bl	8011618 <__errno>
 8012d8e:	2322      	movs	r3, #34	@ 0x22
 8012d90:	6003      	str	r3, [r0, #0]
 8012d92:	e7b4      	b.n	8012cfe <_strtod_l+0x76>
 8012d94:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8012d98:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8012d9c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8012da0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8012da4:	e7e7      	b.n	8012d76 <_strtod_l+0xee>
 8012da6:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 8012f14 <_strtod_l+0x28c>
 8012daa:	e7e4      	b.n	8012d76 <_strtod_l+0xee>
 8012dac:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8012db0:	f04f 3aff 	mov.w	sl, #4294967295
 8012db4:	e7df      	b.n	8012d76 <_strtod_l+0xee>
 8012db6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012db8:	1c5a      	adds	r2, r3, #1
 8012dba:	9211      	str	r2, [sp, #68]	@ 0x44
 8012dbc:	785b      	ldrb	r3, [r3, #1]
 8012dbe:	2b30      	cmp	r3, #48	@ 0x30
 8012dc0:	d0f9      	beq.n	8012db6 <_strtod_l+0x12e>
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d09b      	beq.n	8012cfe <_strtod_l+0x76>
 8012dc6:	2301      	movs	r3, #1
 8012dc8:	2600      	movs	r6, #0
 8012dca:	9307      	str	r3, [sp, #28]
 8012dcc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012dce:	930a      	str	r3, [sp, #40]	@ 0x28
 8012dd0:	46b1      	mov	r9, r6
 8012dd2:	4635      	mov	r5, r6
 8012dd4:	220a      	movs	r2, #10
 8012dd6:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8012dd8:	7804      	ldrb	r4, [r0, #0]
 8012dda:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8012dde:	b2d9      	uxtb	r1, r3
 8012de0:	2909      	cmp	r1, #9
 8012de2:	d929      	bls.n	8012e38 <_strtod_l+0x1b0>
 8012de4:	494a      	ldr	r1, [pc, #296]	@ (8012f10 <_strtod_l+0x288>)
 8012de6:	2201      	movs	r2, #1
 8012de8:	f001 f928 	bl	801403c <strncmp>
 8012dec:	b378      	cbz	r0, 8012e4e <_strtod_l+0x1c6>
 8012dee:	2000      	movs	r0, #0
 8012df0:	4622      	mov	r2, r4
 8012df2:	462b      	mov	r3, r5
 8012df4:	4607      	mov	r7, r0
 8012df6:	9006      	str	r0, [sp, #24]
 8012df8:	2a65      	cmp	r2, #101	@ 0x65
 8012dfa:	d001      	beq.n	8012e00 <_strtod_l+0x178>
 8012dfc:	2a45      	cmp	r2, #69	@ 0x45
 8012dfe:	d117      	bne.n	8012e30 <_strtod_l+0x1a8>
 8012e00:	b91b      	cbnz	r3, 8012e0a <_strtod_l+0x182>
 8012e02:	9b07      	ldr	r3, [sp, #28]
 8012e04:	4303      	orrs	r3, r0
 8012e06:	d096      	beq.n	8012d36 <_strtod_l+0xae>
 8012e08:	2300      	movs	r3, #0
 8012e0a:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8012e0e:	f108 0201 	add.w	r2, r8, #1
 8012e12:	9211      	str	r2, [sp, #68]	@ 0x44
 8012e14:	f898 2001 	ldrb.w	r2, [r8, #1]
 8012e18:	2a2b      	cmp	r2, #43	@ 0x2b
 8012e1a:	d06b      	beq.n	8012ef4 <_strtod_l+0x26c>
 8012e1c:	2a2d      	cmp	r2, #45	@ 0x2d
 8012e1e:	d071      	beq.n	8012f04 <_strtod_l+0x27c>
 8012e20:	f04f 0e00 	mov.w	lr, #0
 8012e24:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8012e28:	2c09      	cmp	r4, #9
 8012e2a:	d979      	bls.n	8012f20 <_strtod_l+0x298>
 8012e2c:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8012e30:	2400      	movs	r4, #0
 8012e32:	e094      	b.n	8012f5e <_strtod_l+0x2d6>
 8012e34:	2300      	movs	r3, #0
 8012e36:	e7c7      	b.n	8012dc8 <_strtod_l+0x140>
 8012e38:	2d08      	cmp	r5, #8
 8012e3a:	f100 0001 	add.w	r0, r0, #1
 8012e3e:	bfd4      	ite	le
 8012e40:	fb02 3909 	mlale	r9, r2, r9, r3
 8012e44:	fb02 3606 	mlagt	r6, r2, r6, r3
 8012e48:	3501      	adds	r5, #1
 8012e4a:	9011      	str	r0, [sp, #68]	@ 0x44
 8012e4c:	e7c3      	b.n	8012dd6 <_strtod_l+0x14e>
 8012e4e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012e50:	1c5a      	adds	r2, r3, #1
 8012e52:	9211      	str	r2, [sp, #68]	@ 0x44
 8012e54:	785a      	ldrb	r2, [r3, #1]
 8012e56:	b375      	cbz	r5, 8012eb6 <_strtod_l+0x22e>
 8012e58:	4607      	mov	r7, r0
 8012e5a:	462b      	mov	r3, r5
 8012e5c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8012e60:	2909      	cmp	r1, #9
 8012e62:	d913      	bls.n	8012e8c <_strtod_l+0x204>
 8012e64:	2101      	movs	r1, #1
 8012e66:	9106      	str	r1, [sp, #24]
 8012e68:	e7c6      	b.n	8012df8 <_strtod_l+0x170>
 8012e6a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012e6c:	1c5a      	adds	r2, r3, #1
 8012e6e:	9211      	str	r2, [sp, #68]	@ 0x44
 8012e70:	785a      	ldrb	r2, [r3, #1]
 8012e72:	3001      	adds	r0, #1
 8012e74:	2a30      	cmp	r2, #48	@ 0x30
 8012e76:	d0f8      	beq.n	8012e6a <_strtod_l+0x1e2>
 8012e78:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8012e7c:	2b08      	cmp	r3, #8
 8012e7e:	f200 8476 	bhi.w	801376e <_strtod_l+0xae6>
 8012e82:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012e84:	930a      	str	r3, [sp, #40]	@ 0x28
 8012e86:	4607      	mov	r7, r0
 8012e88:	2000      	movs	r0, #0
 8012e8a:	4603      	mov	r3, r0
 8012e8c:	3a30      	subs	r2, #48	@ 0x30
 8012e8e:	f100 0101 	add.w	r1, r0, #1
 8012e92:	d023      	beq.n	8012edc <_strtod_l+0x254>
 8012e94:	440f      	add	r7, r1
 8012e96:	eb00 0c03 	add.w	ip, r0, r3
 8012e9a:	4619      	mov	r1, r3
 8012e9c:	240a      	movs	r4, #10
 8012e9e:	4561      	cmp	r1, ip
 8012ea0:	d10b      	bne.n	8012eba <_strtod_l+0x232>
 8012ea2:	1c5c      	adds	r4, r3, #1
 8012ea4:	4403      	add	r3, r0
 8012ea6:	2b08      	cmp	r3, #8
 8012ea8:	4404      	add	r4, r0
 8012eaa:	dc11      	bgt.n	8012ed0 <_strtod_l+0x248>
 8012eac:	230a      	movs	r3, #10
 8012eae:	fb03 2909 	mla	r9, r3, r9, r2
 8012eb2:	2100      	movs	r1, #0
 8012eb4:	e013      	b.n	8012ede <_strtod_l+0x256>
 8012eb6:	4628      	mov	r0, r5
 8012eb8:	e7dc      	b.n	8012e74 <_strtod_l+0x1ec>
 8012eba:	2908      	cmp	r1, #8
 8012ebc:	f101 0101 	add.w	r1, r1, #1
 8012ec0:	dc02      	bgt.n	8012ec8 <_strtod_l+0x240>
 8012ec2:	fb04 f909 	mul.w	r9, r4, r9
 8012ec6:	e7ea      	b.n	8012e9e <_strtod_l+0x216>
 8012ec8:	2910      	cmp	r1, #16
 8012eca:	bfd8      	it	le
 8012ecc:	4366      	mulle	r6, r4
 8012ece:	e7e6      	b.n	8012e9e <_strtod_l+0x216>
 8012ed0:	2b0f      	cmp	r3, #15
 8012ed2:	dcee      	bgt.n	8012eb2 <_strtod_l+0x22a>
 8012ed4:	230a      	movs	r3, #10
 8012ed6:	fb03 2606 	mla	r6, r3, r6, r2
 8012eda:	e7ea      	b.n	8012eb2 <_strtod_l+0x22a>
 8012edc:	461c      	mov	r4, r3
 8012ede:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012ee0:	1c5a      	adds	r2, r3, #1
 8012ee2:	9211      	str	r2, [sp, #68]	@ 0x44
 8012ee4:	785a      	ldrb	r2, [r3, #1]
 8012ee6:	4608      	mov	r0, r1
 8012ee8:	4623      	mov	r3, r4
 8012eea:	e7b7      	b.n	8012e5c <_strtod_l+0x1d4>
 8012eec:	2301      	movs	r3, #1
 8012eee:	2700      	movs	r7, #0
 8012ef0:	9306      	str	r3, [sp, #24]
 8012ef2:	e786      	b.n	8012e02 <_strtod_l+0x17a>
 8012ef4:	f04f 0e00 	mov.w	lr, #0
 8012ef8:	f108 0202 	add.w	r2, r8, #2
 8012efc:	9211      	str	r2, [sp, #68]	@ 0x44
 8012efe:	f898 2002 	ldrb.w	r2, [r8, #2]
 8012f02:	e78f      	b.n	8012e24 <_strtod_l+0x19c>
 8012f04:	f04f 0e01 	mov.w	lr, #1
 8012f08:	e7f6      	b.n	8012ef8 <_strtod_l+0x270>
 8012f0a:	bf00      	nop
 8012f0c:	08015208 	.word	0x08015208
 8012f10:	080151f0 	.word	0x080151f0
 8012f14:	7ff00000 	.word	0x7ff00000
 8012f18:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8012f1a:	1c54      	adds	r4, r2, #1
 8012f1c:	9411      	str	r4, [sp, #68]	@ 0x44
 8012f1e:	7852      	ldrb	r2, [r2, #1]
 8012f20:	2a30      	cmp	r2, #48	@ 0x30
 8012f22:	d0f9      	beq.n	8012f18 <_strtod_l+0x290>
 8012f24:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8012f28:	2c08      	cmp	r4, #8
 8012f2a:	d881      	bhi.n	8012e30 <_strtod_l+0x1a8>
 8012f2c:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8012f30:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8012f32:	9209      	str	r2, [sp, #36]	@ 0x24
 8012f34:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8012f36:	1c51      	adds	r1, r2, #1
 8012f38:	9111      	str	r1, [sp, #68]	@ 0x44
 8012f3a:	7852      	ldrb	r2, [r2, #1]
 8012f3c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8012f40:	2c09      	cmp	r4, #9
 8012f42:	d938      	bls.n	8012fb6 <_strtod_l+0x32e>
 8012f44:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8012f46:	1b0c      	subs	r4, r1, r4
 8012f48:	2c08      	cmp	r4, #8
 8012f4a:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8012f4e:	dc02      	bgt.n	8012f56 <_strtod_l+0x2ce>
 8012f50:	4564      	cmp	r4, ip
 8012f52:	bfa8      	it	ge
 8012f54:	4664      	movge	r4, ip
 8012f56:	f1be 0f00 	cmp.w	lr, #0
 8012f5a:	d000      	beq.n	8012f5e <_strtod_l+0x2d6>
 8012f5c:	4264      	negs	r4, r4
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d14e      	bne.n	8013000 <_strtod_l+0x378>
 8012f62:	9b07      	ldr	r3, [sp, #28]
 8012f64:	4318      	orrs	r0, r3
 8012f66:	f47f aeca 	bne.w	8012cfe <_strtod_l+0x76>
 8012f6a:	9b06      	ldr	r3, [sp, #24]
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	f47f aee2 	bne.w	8012d36 <_strtod_l+0xae>
 8012f72:	2a69      	cmp	r2, #105	@ 0x69
 8012f74:	d027      	beq.n	8012fc6 <_strtod_l+0x33e>
 8012f76:	dc24      	bgt.n	8012fc2 <_strtod_l+0x33a>
 8012f78:	2a49      	cmp	r2, #73	@ 0x49
 8012f7a:	d024      	beq.n	8012fc6 <_strtod_l+0x33e>
 8012f7c:	2a4e      	cmp	r2, #78	@ 0x4e
 8012f7e:	f47f aeda 	bne.w	8012d36 <_strtod_l+0xae>
 8012f82:	4997      	ldr	r1, [pc, #604]	@ (80131e0 <_strtod_l+0x558>)
 8012f84:	a811      	add	r0, sp, #68	@ 0x44
 8012f86:	f001 fb35 	bl	80145f4 <__match>
 8012f8a:	2800      	cmp	r0, #0
 8012f8c:	f43f aed3 	beq.w	8012d36 <_strtod_l+0xae>
 8012f90:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012f92:	781b      	ldrb	r3, [r3, #0]
 8012f94:	2b28      	cmp	r3, #40	@ 0x28
 8012f96:	d12d      	bne.n	8012ff4 <_strtod_l+0x36c>
 8012f98:	4992      	ldr	r1, [pc, #584]	@ (80131e4 <_strtod_l+0x55c>)
 8012f9a:	aa14      	add	r2, sp, #80	@ 0x50
 8012f9c:	a811      	add	r0, sp, #68	@ 0x44
 8012f9e:	f001 fb3d 	bl	801461c <__hexnan>
 8012fa2:	2805      	cmp	r0, #5
 8012fa4:	d126      	bne.n	8012ff4 <_strtod_l+0x36c>
 8012fa6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8012fa8:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8012fac:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8012fb0:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8012fb4:	e6a3      	b.n	8012cfe <_strtod_l+0x76>
 8012fb6:	240a      	movs	r4, #10
 8012fb8:	fb04 2c0c 	mla	ip, r4, ip, r2
 8012fbc:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8012fc0:	e7b8      	b.n	8012f34 <_strtod_l+0x2ac>
 8012fc2:	2a6e      	cmp	r2, #110	@ 0x6e
 8012fc4:	e7db      	b.n	8012f7e <_strtod_l+0x2f6>
 8012fc6:	4988      	ldr	r1, [pc, #544]	@ (80131e8 <_strtod_l+0x560>)
 8012fc8:	a811      	add	r0, sp, #68	@ 0x44
 8012fca:	f001 fb13 	bl	80145f4 <__match>
 8012fce:	2800      	cmp	r0, #0
 8012fd0:	f43f aeb1 	beq.w	8012d36 <_strtod_l+0xae>
 8012fd4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012fd6:	4985      	ldr	r1, [pc, #532]	@ (80131ec <_strtod_l+0x564>)
 8012fd8:	3b01      	subs	r3, #1
 8012fda:	a811      	add	r0, sp, #68	@ 0x44
 8012fdc:	9311      	str	r3, [sp, #68]	@ 0x44
 8012fde:	f001 fb09 	bl	80145f4 <__match>
 8012fe2:	b910      	cbnz	r0, 8012fea <_strtod_l+0x362>
 8012fe4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012fe6:	3301      	adds	r3, #1
 8012fe8:	9311      	str	r3, [sp, #68]	@ 0x44
 8012fea:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8013200 <_strtod_l+0x578>
 8012fee:	f04f 0a00 	mov.w	sl, #0
 8012ff2:	e684      	b.n	8012cfe <_strtod_l+0x76>
 8012ff4:	487e      	ldr	r0, [pc, #504]	@ (80131f0 <_strtod_l+0x568>)
 8012ff6:	f001 f857 	bl	80140a8 <nan>
 8012ffa:	ec5b ab10 	vmov	sl, fp, d0
 8012ffe:	e67e      	b.n	8012cfe <_strtod_l+0x76>
 8013000:	ee07 9a90 	vmov	s15, r9
 8013004:	1be2      	subs	r2, r4, r7
 8013006:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801300a:	2d00      	cmp	r5, #0
 801300c:	bf08      	it	eq
 801300e:	461d      	moveq	r5, r3
 8013010:	2b10      	cmp	r3, #16
 8013012:	9209      	str	r2, [sp, #36]	@ 0x24
 8013014:	461a      	mov	r2, r3
 8013016:	bfa8      	it	ge
 8013018:	2210      	movge	r2, #16
 801301a:	2b09      	cmp	r3, #9
 801301c:	ec5b ab17 	vmov	sl, fp, d7
 8013020:	dc15      	bgt.n	801304e <_strtod_l+0x3c6>
 8013022:	1be1      	subs	r1, r4, r7
 8013024:	2900      	cmp	r1, #0
 8013026:	f43f ae6a 	beq.w	8012cfe <_strtod_l+0x76>
 801302a:	eba4 0107 	sub.w	r1, r4, r7
 801302e:	dd72      	ble.n	8013116 <_strtod_l+0x48e>
 8013030:	2916      	cmp	r1, #22
 8013032:	dc59      	bgt.n	80130e8 <_strtod_l+0x460>
 8013034:	4b6f      	ldr	r3, [pc, #444]	@ (80131f4 <_strtod_l+0x56c>)
 8013036:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013038:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801303c:	ed93 7b00 	vldr	d7, [r3]
 8013040:	ec4b ab16 	vmov	d6, sl, fp
 8013044:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013048:	ec5b ab17 	vmov	sl, fp, d7
 801304c:	e657      	b.n	8012cfe <_strtod_l+0x76>
 801304e:	4969      	ldr	r1, [pc, #420]	@ (80131f4 <_strtod_l+0x56c>)
 8013050:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8013054:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8013058:	ee06 6a90 	vmov	s13, r6
 801305c:	2b0f      	cmp	r3, #15
 801305e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8013062:	eea7 6b05 	vfma.f64	d6, d7, d5
 8013066:	ec5b ab16 	vmov	sl, fp, d6
 801306a:	ddda      	ble.n	8013022 <_strtod_l+0x39a>
 801306c:	1a9a      	subs	r2, r3, r2
 801306e:	1be1      	subs	r1, r4, r7
 8013070:	440a      	add	r2, r1
 8013072:	2a00      	cmp	r2, #0
 8013074:	f340 8094 	ble.w	80131a0 <_strtod_l+0x518>
 8013078:	f012 000f 	ands.w	r0, r2, #15
 801307c:	d00a      	beq.n	8013094 <_strtod_l+0x40c>
 801307e:	495d      	ldr	r1, [pc, #372]	@ (80131f4 <_strtod_l+0x56c>)
 8013080:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8013084:	ed91 7b00 	vldr	d7, [r1]
 8013088:	ec4b ab16 	vmov	d6, sl, fp
 801308c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013090:	ec5b ab17 	vmov	sl, fp, d7
 8013094:	f032 020f 	bics.w	r2, r2, #15
 8013098:	d073      	beq.n	8013182 <_strtod_l+0x4fa>
 801309a:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 801309e:	dd47      	ble.n	8013130 <_strtod_l+0x4a8>
 80130a0:	2400      	movs	r4, #0
 80130a2:	4625      	mov	r5, r4
 80130a4:	9407      	str	r4, [sp, #28]
 80130a6:	4626      	mov	r6, r4
 80130a8:	9a05      	ldr	r2, [sp, #20]
 80130aa:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8013200 <_strtod_l+0x578>
 80130ae:	2322      	movs	r3, #34	@ 0x22
 80130b0:	6013      	str	r3, [r2, #0]
 80130b2:	f04f 0a00 	mov.w	sl, #0
 80130b6:	9b07      	ldr	r3, [sp, #28]
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	f43f ae20 	beq.w	8012cfe <_strtod_l+0x76>
 80130be:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80130c0:	9805      	ldr	r0, [sp, #20]
 80130c2:	f7ff f955 	bl	8012370 <_Bfree>
 80130c6:	9805      	ldr	r0, [sp, #20]
 80130c8:	4631      	mov	r1, r6
 80130ca:	f7ff f951 	bl	8012370 <_Bfree>
 80130ce:	9805      	ldr	r0, [sp, #20]
 80130d0:	4629      	mov	r1, r5
 80130d2:	f7ff f94d 	bl	8012370 <_Bfree>
 80130d6:	9907      	ldr	r1, [sp, #28]
 80130d8:	9805      	ldr	r0, [sp, #20]
 80130da:	f7ff f949 	bl	8012370 <_Bfree>
 80130de:	9805      	ldr	r0, [sp, #20]
 80130e0:	4621      	mov	r1, r4
 80130e2:	f7ff f945 	bl	8012370 <_Bfree>
 80130e6:	e60a      	b.n	8012cfe <_strtod_l+0x76>
 80130e8:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 80130ec:	1be0      	subs	r0, r4, r7
 80130ee:	4281      	cmp	r1, r0
 80130f0:	dbbc      	blt.n	801306c <_strtod_l+0x3e4>
 80130f2:	4a40      	ldr	r2, [pc, #256]	@ (80131f4 <_strtod_l+0x56c>)
 80130f4:	f1c3 030f 	rsb	r3, r3, #15
 80130f8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80130fc:	ed91 7b00 	vldr	d7, [r1]
 8013100:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013102:	ec4b ab16 	vmov	d6, sl, fp
 8013106:	1acb      	subs	r3, r1, r3
 8013108:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801310c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013110:	ed92 6b00 	vldr	d6, [r2]
 8013114:	e796      	b.n	8013044 <_strtod_l+0x3bc>
 8013116:	3116      	adds	r1, #22
 8013118:	dba8      	blt.n	801306c <_strtod_l+0x3e4>
 801311a:	4b36      	ldr	r3, [pc, #216]	@ (80131f4 <_strtod_l+0x56c>)
 801311c:	1b3c      	subs	r4, r7, r4
 801311e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8013122:	ed94 7b00 	vldr	d7, [r4]
 8013126:	ec4b ab16 	vmov	d6, sl, fp
 801312a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801312e:	e78b      	b.n	8013048 <_strtod_l+0x3c0>
 8013130:	2000      	movs	r0, #0
 8013132:	ec4b ab17 	vmov	d7, sl, fp
 8013136:	4e30      	ldr	r6, [pc, #192]	@ (80131f8 <_strtod_l+0x570>)
 8013138:	1112      	asrs	r2, r2, #4
 801313a:	4601      	mov	r1, r0
 801313c:	2a01      	cmp	r2, #1
 801313e:	dc23      	bgt.n	8013188 <_strtod_l+0x500>
 8013140:	b108      	cbz	r0, 8013146 <_strtod_l+0x4be>
 8013142:	ec5b ab17 	vmov	sl, fp, d7
 8013146:	4a2c      	ldr	r2, [pc, #176]	@ (80131f8 <_strtod_l+0x570>)
 8013148:	482c      	ldr	r0, [pc, #176]	@ (80131fc <_strtod_l+0x574>)
 801314a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801314e:	ed92 7b00 	vldr	d7, [r2]
 8013152:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8013156:	ec4b ab16 	vmov	d6, sl, fp
 801315a:	4a29      	ldr	r2, [pc, #164]	@ (8013200 <_strtod_l+0x578>)
 801315c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013160:	ee17 1a90 	vmov	r1, s15
 8013164:	400a      	ands	r2, r1
 8013166:	4282      	cmp	r2, r0
 8013168:	ec5b ab17 	vmov	sl, fp, d7
 801316c:	d898      	bhi.n	80130a0 <_strtod_l+0x418>
 801316e:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8013172:	4282      	cmp	r2, r0
 8013174:	bf86      	itte	hi
 8013176:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8013204 <_strtod_l+0x57c>
 801317a:	f04f 3aff 	movhi.w	sl, #4294967295
 801317e:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8013182:	2200      	movs	r2, #0
 8013184:	9206      	str	r2, [sp, #24]
 8013186:	e076      	b.n	8013276 <_strtod_l+0x5ee>
 8013188:	f012 0f01 	tst.w	r2, #1
 801318c:	d004      	beq.n	8013198 <_strtod_l+0x510>
 801318e:	ed96 6b00 	vldr	d6, [r6]
 8013192:	2001      	movs	r0, #1
 8013194:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013198:	3101      	adds	r1, #1
 801319a:	1052      	asrs	r2, r2, #1
 801319c:	3608      	adds	r6, #8
 801319e:	e7cd      	b.n	801313c <_strtod_l+0x4b4>
 80131a0:	d0ef      	beq.n	8013182 <_strtod_l+0x4fa>
 80131a2:	4252      	negs	r2, r2
 80131a4:	f012 000f 	ands.w	r0, r2, #15
 80131a8:	d00a      	beq.n	80131c0 <_strtod_l+0x538>
 80131aa:	4912      	ldr	r1, [pc, #72]	@ (80131f4 <_strtod_l+0x56c>)
 80131ac:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80131b0:	ed91 7b00 	vldr	d7, [r1]
 80131b4:	ec4b ab16 	vmov	d6, sl, fp
 80131b8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80131bc:	ec5b ab17 	vmov	sl, fp, d7
 80131c0:	1112      	asrs	r2, r2, #4
 80131c2:	d0de      	beq.n	8013182 <_strtod_l+0x4fa>
 80131c4:	2a1f      	cmp	r2, #31
 80131c6:	dd1f      	ble.n	8013208 <_strtod_l+0x580>
 80131c8:	2400      	movs	r4, #0
 80131ca:	4625      	mov	r5, r4
 80131cc:	9407      	str	r4, [sp, #28]
 80131ce:	4626      	mov	r6, r4
 80131d0:	9a05      	ldr	r2, [sp, #20]
 80131d2:	2322      	movs	r3, #34	@ 0x22
 80131d4:	f04f 0a00 	mov.w	sl, #0
 80131d8:	f04f 0b00 	mov.w	fp, #0
 80131dc:	6013      	str	r3, [r2, #0]
 80131de:	e76a      	b.n	80130b6 <_strtod_l+0x42e>
 80131e0:	08014fe1 	.word	0x08014fe1
 80131e4:	080151f4 	.word	0x080151f4
 80131e8:	08014fd9 	.word	0x08014fd9
 80131ec:	08015010 	.word	0x08015010
 80131f0:	08014fd3 	.word	0x08014fd3
 80131f4:	08015128 	.word	0x08015128
 80131f8:	08015100 	.word	0x08015100
 80131fc:	7ca00000 	.word	0x7ca00000
 8013200:	7ff00000 	.word	0x7ff00000
 8013204:	7fefffff 	.word	0x7fefffff
 8013208:	f012 0110 	ands.w	r1, r2, #16
 801320c:	bf18      	it	ne
 801320e:	216a      	movne	r1, #106	@ 0x6a
 8013210:	9106      	str	r1, [sp, #24]
 8013212:	ec4b ab17 	vmov	d7, sl, fp
 8013216:	49b0      	ldr	r1, [pc, #704]	@ (80134d8 <_strtod_l+0x850>)
 8013218:	2000      	movs	r0, #0
 801321a:	07d6      	lsls	r6, r2, #31
 801321c:	d504      	bpl.n	8013228 <_strtod_l+0x5a0>
 801321e:	ed91 6b00 	vldr	d6, [r1]
 8013222:	2001      	movs	r0, #1
 8013224:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013228:	1052      	asrs	r2, r2, #1
 801322a:	f101 0108 	add.w	r1, r1, #8
 801322e:	d1f4      	bne.n	801321a <_strtod_l+0x592>
 8013230:	b108      	cbz	r0, 8013236 <_strtod_l+0x5ae>
 8013232:	ec5b ab17 	vmov	sl, fp, d7
 8013236:	9a06      	ldr	r2, [sp, #24]
 8013238:	b1b2      	cbz	r2, 8013268 <_strtod_l+0x5e0>
 801323a:	f3cb 510a 	ubfx	r1, fp, #20, #11
 801323e:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8013242:	2a00      	cmp	r2, #0
 8013244:	4658      	mov	r0, fp
 8013246:	dd0f      	ble.n	8013268 <_strtod_l+0x5e0>
 8013248:	2a1f      	cmp	r2, #31
 801324a:	dd55      	ble.n	80132f8 <_strtod_l+0x670>
 801324c:	2a34      	cmp	r2, #52	@ 0x34
 801324e:	bfde      	ittt	le
 8013250:	f04f 32ff 	movle.w	r2, #4294967295
 8013254:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8013258:	408a      	lslle	r2, r1
 801325a:	f04f 0a00 	mov.w	sl, #0
 801325e:	bfcc      	ite	gt
 8013260:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8013264:	ea02 0b00 	andle.w	fp, r2, r0
 8013268:	ec4b ab17 	vmov	d7, sl, fp
 801326c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013274:	d0a8      	beq.n	80131c8 <_strtod_l+0x540>
 8013276:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013278:	9805      	ldr	r0, [sp, #20]
 801327a:	f8cd 9000 	str.w	r9, [sp]
 801327e:	462a      	mov	r2, r5
 8013280:	f7ff f8de 	bl	8012440 <__s2b>
 8013284:	9007      	str	r0, [sp, #28]
 8013286:	2800      	cmp	r0, #0
 8013288:	f43f af0a 	beq.w	80130a0 <_strtod_l+0x418>
 801328c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801328e:	1b3f      	subs	r7, r7, r4
 8013290:	2b00      	cmp	r3, #0
 8013292:	bfb4      	ite	lt
 8013294:	463b      	movlt	r3, r7
 8013296:	2300      	movge	r3, #0
 8013298:	930a      	str	r3, [sp, #40]	@ 0x28
 801329a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801329c:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 80134c8 <_strtod_l+0x840>
 80132a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80132a4:	2400      	movs	r4, #0
 80132a6:	930d      	str	r3, [sp, #52]	@ 0x34
 80132a8:	4625      	mov	r5, r4
 80132aa:	9b07      	ldr	r3, [sp, #28]
 80132ac:	9805      	ldr	r0, [sp, #20]
 80132ae:	6859      	ldr	r1, [r3, #4]
 80132b0:	f7ff f81e 	bl	80122f0 <_Balloc>
 80132b4:	4606      	mov	r6, r0
 80132b6:	2800      	cmp	r0, #0
 80132b8:	f43f aef6 	beq.w	80130a8 <_strtod_l+0x420>
 80132bc:	9b07      	ldr	r3, [sp, #28]
 80132be:	691a      	ldr	r2, [r3, #16]
 80132c0:	ec4b ab19 	vmov	d9, sl, fp
 80132c4:	3202      	adds	r2, #2
 80132c6:	f103 010c 	add.w	r1, r3, #12
 80132ca:	0092      	lsls	r2, r2, #2
 80132cc:	300c      	adds	r0, #12
 80132ce:	f7fe f9d0 	bl	8011672 <memcpy>
 80132d2:	eeb0 0b49 	vmov.f64	d0, d9
 80132d6:	9805      	ldr	r0, [sp, #20]
 80132d8:	aa14      	add	r2, sp, #80	@ 0x50
 80132da:	a913      	add	r1, sp, #76	@ 0x4c
 80132dc:	f7ff fbec 	bl	8012ab8 <__d2b>
 80132e0:	9012      	str	r0, [sp, #72]	@ 0x48
 80132e2:	2800      	cmp	r0, #0
 80132e4:	f43f aee0 	beq.w	80130a8 <_strtod_l+0x420>
 80132e8:	9805      	ldr	r0, [sp, #20]
 80132ea:	2101      	movs	r1, #1
 80132ec:	f7ff f93e 	bl	801256c <__i2b>
 80132f0:	4605      	mov	r5, r0
 80132f2:	b940      	cbnz	r0, 8013306 <_strtod_l+0x67e>
 80132f4:	2500      	movs	r5, #0
 80132f6:	e6d7      	b.n	80130a8 <_strtod_l+0x420>
 80132f8:	f04f 31ff 	mov.w	r1, #4294967295
 80132fc:	fa01 f202 	lsl.w	r2, r1, r2
 8013300:	ea02 0a0a 	and.w	sl, r2, sl
 8013304:	e7b0      	b.n	8013268 <_strtod_l+0x5e0>
 8013306:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8013308:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801330a:	2f00      	cmp	r7, #0
 801330c:	bfab      	itete	ge
 801330e:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8013310:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8013312:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8013316:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 801331a:	bfac      	ite	ge
 801331c:	eb07 0903 	addge.w	r9, r7, r3
 8013320:	eba3 0807 	sublt.w	r8, r3, r7
 8013324:	9b06      	ldr	r3, [sp, #24]
 8013326:	1aff      	subs	r7, r7, r3
 8013328:	4417      	add	r7, r2
 801332a:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 801332e:	4a6b      	ldr	r2, [pc, #428]	@ (80134dc <_strtod_l+0x854>)
 8013330:	3f01      	subs	r7, #1
 8013332:	4297      	cmp	r7, r2
 8013334:	da51      	bge.n	80133da <_strtod_l+0x752>
 8013336:	1bd1      	subs	r1, r2, r7
 8013338:	291f      	cmp	r1, #31
 801333a:	eba3 0301 	sub.w	r3, r3, r1
 801333e:	f04f 0201 	mov.w	r2, #1
 8013342:	dc3e      	bgt.n	80133c2 <_strtod_l+0x73a>
 8013344:	408a      	lsls	r2, r1
 8013346:	920c      	str	r2, [sp, #48]	@ 0x30
 8013348:	2200      	movs	r2, #0
 801334a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801334c:	eb09 0703 	add.w	r7, r9, r3
 8013350:	4498      	add	r8, r3
 8013352:	9b06      	ldr	r3, [sp, #24]
 8013354:	45b9      	cmp	r9, r7
 8013356:	4498      	add	r8, r3
 8013358:	464b      	mov	r3, r9
 801335a:	bfa8      	it	ge
 801335c:	463b      	movge	r3, r7
 801335e:	4543      	cmp	r3, r8
 8013360:	bfa8      	it	ge
 8013362:	4643      	movge	r3, r8
 8013364:	2b00      	cmp	r3, #0
 8013366:	bfc2      	ittt	gt
 8013368:	1aff      	subgt	r7, r7, r3
 801336a:	eba8 0803 	subgt.w	r8, r8, r3
 801336e:	eba9 0903 	subgt.w	r9, r9, r3
 8013372:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013374:	2b00      	cmp	r3, #0
 8013376:	dd16      	ble.n	80133a6 <_strtod_l+0x71e>
 8013378:	4629      	mov	r1, r5
 801337a:	9805      	ldr	r0, [sp, #20]
 801337c:	461a      	mov	r2, r3
 801337e:	f7ff f9b5 	bl	80126ec <__pow5mult>
 8013382:	4605      	mov	r5, r0
 8013384:	2800      	cmp	r0, #0
 8013386:	d0b5      	beq.n	80132f4 <_strtod_l+0x66c>
 8013388:	4601      	mov	r1, r0
 801338a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801338c:	9805      	ldr	r0, [sp, #20]
 801338e:	f7ff f903 	bl	8012598 <__multiply>
 8013392:	900f      	str	r0, [sp, #60]	@ 0x3c
 8013394:	2800      	cmp	r0, #0
 8013396:	f43f ae87 	beq.w	80130a8 <_strtod_l+0x420>
 801339a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801339c:	9805      	ldr	r0, [sp, #20]
 801339e:	f7fe ffe7 	bl	8012370 <_Bfree>
 80133a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80133a4:	9312      	str	r3, [sp, #72]	@ 0x48
 80133a6:	2f00      	cmp	r7, #0
 80133a8:	dc1b      	bgt.n	80133e2 <_strtod_l+0x75a>
 80133aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	dd21      	ble.n	80133f4 <_strtod_l+0x76c>
 80133b0:	4631      	mov	r1, r6
 80133b2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80133b4:	9805      	ldr	r0, [sp, #20]
 80133b6:	f7ff f999 	bl	80126ec <__pow5mult>
 80133ba:	4606      	mov	r6, r0
 80133bc:	b9d0      	cbnz	r0, 80133f4 <_strtod_l+0x76c>
 80133be:	2600      	movs	r6, #0
 80133c0:	e672      	b.n	80130a8 <_strtod_l+0x420>
 80133c2:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 80133c6:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 80133ca:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 80133ce:	37e2      	adds	r7, #226	@ 0xe2
 80133d0:	fa02 f107 	lsl.w	r1, r2, r7
 80133d4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80133d6:	920c      	str	r2, [sp, #48]	@ 0x30
 80133d8:	e7b8      	b.n	801334c <_strtod_l+0x6c4>
 80133da:	2200      	movs	r2, #0
 80133dc:	920b      	str	r2, [sp, #44]	@ 0x2c
 80133de:	2201      	movs	r2, #1
 80133e0:	e7f9      	b.n	80133d6 <_strtod_l+0x74e>
 80133e2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80133e4:	9805      	ldr	r0, [sp, #20]
 80133e6:	463a      	mov	r2, r7
 80133e8:	f7ff f9da 	bl	80127a0 <__lshift>
 80133ec:	9012      	str	r0, [sp, #72]	@ 0x48
 80133ee:	2800      	cmp	r0, #0
 80133f0:	d1db      	bne.n	80133aa <_strtod_l+0x722>
 80133f2:	e659      	b.n	80130a8 <_strtod_l+0x420>
 80133f4:	f1b8 0f00 	cmp.w	r8, #0
 80133f8:	dd07      	ble.n	801340a <_strtod_l+0x782>
 80133fa:	4631      	mov	r1, r6
 80133fc:	9805      	ldr	r0, [sp, #20]
 80133fe:	4642      	mov	r2, r8
 8013400:	f7ff f9ce 	bl	80127a0 <__lshift>
 8013404:	4606      	mov	r6, r0
 8013406:	2800      	cmp	r0, #0
 8013408:	d0d9      	beq.n	80133be <_strtod_l+0x736>
 801340a:	f1b9 0f00 	cmp.w	r9, #0
 801340e:	dd08      	ble.n	8013422 <_strtod_l+0x79a>
 8013410:	4629      	mov	r1, r5
 8013412:	9805      	ldr	r0, [sp, #20]
 8013414:	464a      	mov	r2, r9
 8013416:	f7ff f9c3 	bl	80127a0 <__lshift>
 801341a:	4605      	mov	r5, r0
 801341c:	2800      	cmp	r0, #0
 801341e:	f43f ae43 	beq.w	80130a8 <_strtod_l+0x420>
 8013422:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013424:	9805      	ldr	r0, [sp, #20]
 8013426:	4632      	mov	r2, r6
 8013428:	f7ff fa42 	bl	80128b0 <__mdiff>
 801342c:	4604      	mov	r4, r0
 801342e:	2800      	cmp	r0, #0
 8013430:	f43f ae3a 	beq.w	80130a8 <_strtod_l+0x420>
 8013434:	2300      	movs	r3, #0
 8013436:	f8d0 800c 	ldr.w	r8, [r0, #12]
 801343a:	60c3      	str	r3, [r0, #12]
 801343c:	4629      	mov	r1, r5
 801343e:	f7ff fa1b 	bl	8012878 <__mcmp>
 8013442:	2800      	cmp	r0, #0
 8013444:	da4e      	bge.n	80134e4 <_strtod_l+0x85c>
 8013446:	ea58 080a 	orrs.w	r8, r8, sl
 801344a:	d174      	bne.n	8013536 <_strtod_l+0x8ae>
 801344c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013450:	2b00      	cmp	r3, #0
 8013452:	d170      	bne.n	8013536 <_strtod_l+0x8ae>
 8013454:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013458:	0d1b      	lsrs	r3, r3, #20
 801345a:	051b      	lsls	r3, r3, #20
 801345c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8013460:	d969      	bls.n	8013536 <_strtod_l+0x8ae>
 8013462:	6963      	ldr	r3, [r4, #20]
 8013464:	b913      	cbnz	r3, 801346c <_strtod_l+0x7e4>
 8013466:	6923      	ldr	r3, [r4, #16]
 8013468:	2b01      	cmp	r3, #1
 801346a:	dd64      	ble.n	8013536 <_strtod_l+0x8ae>
 801346c:	4621      	mov	r1, r4
 801346e:	2201      	movs	r2, #1
 8013470:	9805      	ldr	r0, [sp, #20]
 8013472:	f7ff f995 	bl	80127a0 <__lshift>
 8013476:	4629      	mov	r1, r5
 8013478:	4604      	mov	r4, r0
 801347a:	f7ff f9fd 	bl	8012878 <__mcmp>
 801347e:	2800      	cmp	r0, #0
 8013480:	dd59      	ble.n	8013536 <_strtod_l+0x8ae>
 8013482:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013486:	9a06      	ldr	r2, [sp, #24]
 8013488:	0d1b      	lsrs	r3, r3, #20
 801348a:	051b      	lsls	r3, r3, #20
 801348c:	2a00      	cmp	r2, #0
 801348e:	d070      	beq.n	8013572 <_strtod_l+0x8ea>
 8013490:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8013494:	d86d      	bhi.n	8013572 <_strtod_l+0x8ea>
 8013496:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801349a:	f67f ae99 	bls.w	80131d0 <_strtod_l+0x548>
 801349e:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 80134d0 <_strtod_l+0x848>
 80134a2:	ec4b ab16 	vmov	d6, sl, fp
 80134a6:	4b0e      	ldr	r3, [pc, #56]	@ (80134e0 <_strtod_l+0x858>)
 80134a8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80134ac:	ee17 2a90 	vmov	r2, s15
 80134b0:	4013      	ands	r3, r2
 80134b2:	ec5b ab17 	vmov	sl, fp, d7
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	f47f ae01 	bne.w	80130be <_strtod_l+0x436>
 80134bc:	9a05      	ldr	r2, [sp, #20]
 80134be:	2322      	movs	r3, #34	@ 0x22
 80134c0:	6013      	str	r3, [r2, #0]
 80134c2:	e5fc      	b.n	80130be <_strtod_l+0x436>
 80134c4:	f3af 8000 	nop.w
 80134c8:	ffc00000 	.word	0xffc00000
 80134cc:	41dfffff 	.word	0x41dfffff
 80134d0:	00000000 	.word	0x00000000
 80134d4:	39500000 	.word	0x39500000
 80134d8:	08015220 	.word	0x08015220
 80134dc:	fffffc02 	.word	0xfffffc02
 80134e0:	7ff00000 	.word	0x7ff00000
 80134e4:	46d9      	mov	r9, fp
 80134e6:	d15d      	bne.n	80135a4 <_strtod_l+0x91c>
 80134e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80134ec:	f1b8 0f00 	cmp.w	r8, #0
 80134f0:	d02a      	beq.n	8013548 <_strtod_l+0x8c0>
 80134f2:	4aab      	ldr	r2, [pc, #684]	@ (80137a0 <_strtod_l+0xb18>)
 80134f4:	4293      	cmp	r3, r2
 80134f6:	d12a      	bne.n	801354e <_strtod_l+0x8c6>
 80134f8:	9b06      	ldr	r3, [sp, #24]
 80134fa:	4652      	mov	r2, sl
 80134fc:	b1fb      	cbz	r3, 801353e <_strtod_l+0x8b6>
 80134fe:	4ba9      	ldr	r3, [pc, #676]	@ (80137a4 <_strtod_l+0xb1c>)
 8013500:	ea0b 0303 	and.w	r3, fp, r3
 8013504:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8013508:	f04f 31ff 	mov.w	r1, #4294967295
 801350c:	d81a      	bhi.n	8013544 <_strtod_l+0x8bc>
 801350e:	0d1b      	lsrs	r3, r3, #20
 8013510:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8013514:	fa01 f303 	lsl.w	r3, r1, r3
 8013518:	429a      	cmp	r2, r3
 801351a:	d118      	bne.n	801354e <_strtod_l+0x8c6>
 801351c:	4ba2      	ldr	r3, [pc, #648]	@ (80137a8 <_strtod_l+0xb20>)
 801351e:	4599      	cmp	r9, r3
 8013520:	d102      	bne.n	8013528 <_strtod_l+0x8a0>
 8013522:	3201      	adds	r2, #1
 8013524:	f43f adc0 	beq.w	80130a8 <_strtod_l+0x420>
 8013528:	4b9e      	ldr	r3, [pc, #632]	@ (80137a4 <_strtod_l+0xb1c>)
 801352a:	ea09 0303 	and.w	r3, r9, r3
 801352e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8013532:	f04f 0a00 	mov.w	sl, #0
 8013536:	9b06      	ldr	r3, [sp, #24]
 8013538:	2b00      	cmp	r3, #0
 801353a:	d1b0      	bne.n	801349e <_strtod_l+0x816>
 801353c:	e5bf      	b.n	80130be <_strtod_l+0x436>
 801353e:	f04f 33ff 	mov.w	r3, #4294967295
 8013542:	e7e9      	b.n	8013518 <_strtod_l+0x890>
 8013544:	460b      	mov	r3, r1
 8013546:	e7e7      	b.n	8013518 <_strtod_l+0x890>
 8013548:	ea53 030a 	orrs.w	r3, r3, sl
 801354c:	d099      	beq.n	8013482 <_strtod_l+0x7fa>
 801354e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013550:	b1c3      	cbz	r3, 8013584 <_strtod_l+0x8fc>
 8013552:	ea13 0f09 	tst.w	r3, r9
 8013556:	d0ee      	beq.n	8013536 <_strtod_l+0x8ae>
 8013558:	9a06      	ldr	r2, [sp, #24]
 801355a:	4650      	mov	r0, sl
 801355c:	4659      	mov	r1, fp
 801355e:	f1b8 0f00 	cmp.w	r8, #0
 8013562:	d013      	beq.n	801358c <_strtod_l+0x904>
 8013564:	f7ff fb73 	bl	8012c4e <sulp>
 8013568:	ee39 7b00 	vadd.f64	d7, d9, d0
 801356c:	ec5b ab17 	vmov	sl, fp, d7
 8013570:	e7e1      	b.n	8013536 <_strtod_l+0x8ae>
 8013572:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8013576:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801357a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801357e:	f04f 3aff 	mov.w	sl, #4294967295
 8013582:	e7d8      	b.n	8013536 <_strtod_l+0x8ae>
 8013584:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013586:	ea13 0f0a 	tst.w	r3, sl
 801358a:	e7e4      	b.n	8013556 <_strtod_l+0x8ce>
 801358c:	f7ff fb5f 	bl	8012c4e <sulp>
 8013590:	ee39 0b40 	vsub.f64	d0, d9, d0
 8013594:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8013598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801359c:	ec5b ab10 	vmov	sl, fp, d0
 80135a0:	d1c9      	bne.n	8013536 <_strtod_l+0x8ae>
 80135a2:	e615      	b.n	80131d0 <_strtod_l+0x548>
 80135a4:	4629      	mov	r1, r5
 80135a6:	4620      	mov	r0, r4
 80135a8:	f7ff fade 	bl	8012b68 <__ratio>
 80135ac:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 80135b0:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80135b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135b8:	d85d      	bhi.n	8013676 <_strtod_l+0x9ee>
 80135ba:	f1b8 0f00 	cmp.w	r8, #0
 80135be:	d164      	bne.n	801368a <_strtod_l+0xa02>
 80135c0:	f1ba 0f00 	cmp.w	sl, #0
 80135c4:	d14b      	bne.n	801365e <_strtod_l+0x9d6>
 80135c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80135ca:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d160      	bne.n	8013694 <_strtod_l+0xa0c>
 80135d2:	eeb4 0bc8 	vcmpe.f64	d0, d8
 80135d6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 80135da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135de:	d401      	bmi.n	80135e4 <_strtod_l+0x95c>
 80135e0:	ee20 8b08 	vmul.f64	d8, d0, d8
 80135e4:	eeb1 ab48 	vneg.f64	d10, d8
 80135e8:	486e      	ldr	r0, [pc, #440]	@ (80137a4 <_strtod_l+0xb1c>)
 80135ea:	4970      	ldr	r1, [pc, #448]	@ (80137ac <_strtod_l+0xb24>)
 80135ec:	ea09 0700 	and.w	r7, r9, r0
 80135f0:	428f      	cmp	r7, r1
 80135f2:	ec53 2b1a 	vmov	r2, r3, d10
 80135f6:	d17d      	bne.n	80136f4 <_strtod_l+0xa6c>
 80135f8:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 80135fc:	ec4b ab1c 	vmov	d12, sl, fp
 8013600:	eeb0 0b4c 	vmov.f64	d0, d12
 8013604:	f7ff f9e8 	bl	80129d8 <__ulp>
 8013608:	4866      	ldr	r0, [pc, #408]	@ (80137a4 <_strtod_l+0xb1c>)
 801360a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 801360e:	ee1c 3a90 	vmov	r3, s25
 8013612:	4a67      	ldr	r2, [pc, #412]	@ (80137b0 <_strtod_l+0xb28>)
 8013614:	ea03 0100 	and.w	r1, r3, r0
 8013618:	4291      	cmp	r1, r2
 801361a:	ec5b ab1c 	vmov	sl, fp, d12
 801361e:	d93c      	bls.n	801369a <_strtod_l+0xa12>
 8013620:	ee19 2a90 	vmov	r2, s19
 8013624:	4b60      	ldr	r3, [pc, #384]	@ (80137a8 <_strtod_l+0xb20>)
 8013626:	429a      	cmp	r2, r3
 8013628:	d104      	bne.n	8013634 <_strtod_l+0x9ac>
 801362a:	ee19 3a10 	vmov	r3, s18
 801362e:	3301      	adds	r3, #1
 8013630:	f43f ad3a 	beq.w	80130a8 <_strtod_l+0x420>
 8013634:	f8df b170 	ldr.w	fp, [pc, #368]	@ 80137a8 <_strtod_l+0xb20>
 8013638:	f04f 3aff 	mov.w	sl, #4294967295
 801363c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801363e:	9805      	ldr	r0, [sp, #20]
 8013640:	f7fe fe96 	bl	8012370 <_Bfree>
 8013644:	9805      	ldr	r0, [sp, #20]
 8013646:	4631      	mov	r1, r6
 8013648:	f7fe fe92 	bl	8012370 <_Bfree>
 801364c:	9805      	ldr	r0, [sp, #20]
 801364e:	4629      	mov	r1, r5
 8013650:	f7fe fe8e 	bl	8012370 <_Bfree>
 8013654:	9805      	ldr	r0, [sp, #20]
 8013656:	4621      	mov	r1, r4
 8013658:	f7fe fe8a 	bl	8012370 <_Bfree>
 801365c:	e625      	b.n	80132aa <_strtod_l+0x622>
 801365e:	f1ba 0f01 	cmp.w	sl, #1
 8013662:	d103      	bne.n	801366c <_strtod_l+0x9e4>
 8013664:	f1bb 0f00 	cmp.w	fp, #0
 8013668:	f43f adb2 	beq.w	80131d0 <_strtod_l+0x548>
 801366c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8013670:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8013674:	e7b8      	b.n	80135e8 <_strtod_l+0x960>
 8013676:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 801367a:	ee20 8b08 	vmul.f64	d8, d0, d8
 801367e:	f1b8 0f00 	cmp.w	r8, #0
 8013682:	d0af      	beq.n	80135e4 <_strtod_l+0x95c>
 8013684:	eeb0 ab48 	vmov.f64	d10, d8
 8013688:	e7ae      	b.n	80135e8 <_strtod_l+0x960>
 801368a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 801368e:	eeb0 8b4a 	vmov.f64	d8, d10
 8013692:	e7a9      	b.n	80135e8 <_strtod_l+0x960>
 8013694:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8013698:	e7a6      	b.n	80135e8 <_strtod_l+0x960>
 801369a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801369e:	9b06      	ldr	r3, [sp, #24]
 80136a0:	46d9      	mov	r9, fp
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d1ca      	bne.n	801363c <_strtod_l+0x9b4>
 80136a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80136aa:	0d1b      	lsrs	r3, r3, #20
 80136ac:	051b      	lsls	r3, r3, #20
 80136ae:	429f      	cmp	r7, r3
 80136b0:	d1c4      	bne.n	801363c <_strtod_l+0x9b4>
 80136b2:	ec51 0b18 	vmov	r0, r1, d8
 80136b6:	f7ed f847 	bl	8000748 <__aeabi_d2lz>
 80136ba:	f7ec ffff 	bl	80006bc <__aeabi_l2d>
 80136be:	f3cb 0913 	ubfx	r9, fp, #0, #20
 80136c2:	ec41 0b17 	vmov	d7, r0, r1
 80136c6:	ea49 090a 	orr.w	r9, r9, sl
 80136ca:	ea59 0908 	orrs.w	r9, r9, r8
 80136ce:	ee38 8b47 	vsub.f64	d8, d8, d7
 80136d2:	d03c      	beq.n	801374e <_strtod_l+0xac6>
 80136d4:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8013788 <_strtod_l+0xb00>
 80136d8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80136dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136e0:	f53f aced 	bmi.w	80130be <_strtod_l+0x436>
 80136e4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8013790 <_strtod_l+0xb08>
 80136e8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80136ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136f0:	dda4      	ble.n	801363c <_strtod_l+0x9b4>
 80136f2:	e4e4      	b.n	80130be <_strtod_l+0x436>
 80136f4:	9906      	ldr	r1, [sp, #24]
 80136f6:	b1e1      	cbz	r1, 8013732 <_strtod_l+0xaaa>
 80136f8:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 80136fc:	d819      	bhi.n	8013732 <_strtod_l+0xaaa>
 80136fe:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8013702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013706:	d811      	bhi.n	801372c <_strtod_l+0xaa4>
 8013708:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 801370c:	ee18 3a10 	vmov	r3, s16
 8013710:	2b01      	cmp	r3, #1
 8013712:	bf38      	it	cc
 8013714:	2301      	movcc	r3, #1
 8013716:	ee08 3a10 	vmov	s16, r3
 801371a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 801371e:	f1b8 0f00 	cmp.w	r8, #0
 8013722:	d111      	bne.n	8013748 <_strtod_l+0xac0>
 8013724:	eeb1 7b48 	vneg.f64	d7, d8
 8013728:	ec53 2b17 	vmov	r2, r3, d7
 801372c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8013730:	1bcb      	subs	r3, r1, r7
 8013732:	eeb0 0b49 	vmov.f64	d0, d9
 8013736:	ec43 2b1a 	vmov	d10, r2, r3
 801373a:	f7ff f94d 	bl	80129d8 <__ulp>
 801373e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8013742:	ec5b ab19 	vmov	sl, fp, d9
 8013746:	e7aa      	b.n	801369e <_strtod_l+0xa16>
 8013748:	eeb0 7b48 	vmov.f64	d7, d8
 801374c:	e7ec      	b.n	8013728 <_strtod_l+0xaa0>
 801374e:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8013798 <_strtod_l+0xb10>
 8013752:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8013756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801375a:	f57f af6f 	bpl.w	801363c <_strtod_l+0x9b4>
 801375e:	e4ae      	b.n	80130be <_strtod_l+0x436>
 8013760:	2300      	movs	r3, #0
 8013762:	9308      	str	r3, [sp, #32]
 8013764:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013766:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013768:	6013      	str	r3, [r2, #0]
 801376a:	f7ff bacc 	b.w	8012d06 <_strtod_l+0x7e>
 801376e:	2a65      	cmp	r2, #101	@ 0x65
 8013770:	f43f abbc 	beq.w	8012eec <_strtod_l+0x264>
 8013774:	2a45      	cmp	r2, #69	@ 0x45
 8013776:	f43f abb9 	beq.w	8012eec <_strtod_l+0x264>
 801377a:	2301      	movs	r3, #1
 801377c:	9306      	str	r3, [sp, #24]
 801377e:	f7ff bbf0 	b.w	8012f62 <_strtod_l+0x2da>
 8013782:	bf00      	nop
 8013784:	f3af 8000 	nop.w
 8013788:	94a03595 	.word	0x94a03595
 801378c:	3fdfffff 	.word	0x3fdfffff
 8013790:	35afe535 	.word	0x35afe535
 8013794:	3fe00000 	.word	0x3fe00000
 8013798:	94a03595 	.word	0x94a03595
 801379c:	3fcfffff 	.word	0x3fcfffff
 80137a0:	000fffff 	.word	0x000fffff
 80137a4:	7ff00000 	.word	0x7ff00000
 80137a8:	7fefffff 	.word	0x7fefffff
 80137ac:	7fe00000 	.word	0x7fe00000
 80137b0:	7c9fffff 	.word	0x7c9fffff

080137b4 <_strtod_r>:
 80137b4:	4b01      	ldr	r3, [pc, #4]	@ (80137bc <_strtod_r+0x8>)
 80137b6:	f7ff ba67 	b.w	8012c88 <_strtod_l>
 80137ba:	bf00      	nop
 80137bc:	24000070 	.word	0x24000070

080137c0 <_strtol_l.constprop.0>:
 80137c0:	2b24      	cmp	r3, #36	@ 0x24
 80137c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80137c6:	4686      	mov	lr, r0
 80137c8:	4690      	mov	r8, r2
 80137ca:	d801      	bhi.n	80137d0 <_strtol_l.constprop.0+0x10>
 80137cc:	2b01      	cmp	r3, #1
 80137ce:	d106      	bne.n	80137de <_strtol_l.constprop.0+0x1e>
 80137d0:	f7fd ff22 	bl	8011618 <__errno>
 80137d4:	2316      	movs	r3, #22
 80137d6:	6003      	str	r3, [r0, #0]
 80137d8:	2000      	movs	r0, #0
 80137da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80137de:	4834      	ldr	r0, [pc, #208]	@ (80138b0 <_strtol_l.constprop.0+0xf0>)
 80137e0:	460d      	mov	r5, r1
 80137e2:	462a      	mov	r2, r5
 80137e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80137e8:	5d06      	ldrb	r6, [r0, r4]
 80137ea:	f016 0608 	ands.w	r6, r6, #8
 80137ee:	d1f8      	bne.n	80137e2 <_strtol_l.constprop.0+0x22>
 80137f0:	2c2d      	cmp	r4, #45	@ 0x2d
 80137f2:	d12d      	bne.n	8013850 <_strtol_l.constprop.0+0x90>
 80137f4:	782c      	ldrb	r4, [r5, #0]
 80137f6:	2601      	movs	r6, #1
 80137f8:	1c95      	adds	r5, r2, #2
 80137fa:	f033 0210 	bics.w	r2, r3, #16
 80137fe:	d109      	bne.n	8013814 <_strtol_l.constprop.0+0x54>
 8013800:	2c30      	cmp	r4, #48	@ 0x30
 8013802:	d12a      	bne.n	801385a <_strtol_l.constprop.0+0x9a>
 8013804:	782a      	ldrb	r2, [r5, #0]
 8013806:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801380a:	2a58      	cmp	r2, #88	@ 0x58
 801380c:	d125      	bne.n	801385a <_strtol_l.constprop.0+0x9a>
 801380e:	786c      	ldrb	r4, [r5, #1]
 8013810:	2310      	movs	r3, #16
 8013812:	3502      	adds	r5, #2
 8013814:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8013818:	f10c 3cff 	add.w	ip, ip, #4294967295
 801381c:	2200      	movs	r2, #0
 801381e:	fbbc f9f3 	udiv	r9, ip, r3
 8013822:	4610      	mov	r0, r2
 8013824:	fb03 ca19 	mls	sl, r3, r9, ip
 8013828:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801382c:	2f09      	cmp	r7, #9
 801382e:	d81b      	bhi.n	8013868 <_strtol_l.constprop.0+0xa8>
 8013830:	463c      	mov	r4, r7
 8013832:	42a3      	cmp	r3, r4
 8013834:	dd27      	ble.n	8013886 <_strtol_l.constprop.0+0xc6>
 8013836:	1c57      	adds	r7, r2, #1
 8013838:	d007      	beq.n	801384a <_strtol_l.constprop.0+0x8a>
 801383a:	4581      	cmp	r9, r0
 801383c:	d320      	bcc.n	8013880 <_strtol_l.constprop.0+0xc0>
 801383e:	d101      	bne.n	8013844 <_strtol_l.constprop.0+0x84>
 8013840:	45a2      	cmp	sl, r4
 8013842:	db1d      	blt.n	8013880 <_strtol_l.constprop.0+0xc0>
 8013844:	fb00 4003 	mla	r0, r0, r3, r4
 8013848:	2201      	movs	r2, #1
 801384a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801384e:	e7eb      	b.n	8013828 <_strtol_l.constprop.0+0x68>
 8013850:	2c2b      	cmp	r4, #43	@ 0x2b
 8013852:	bf04      	itt	eq
 8013854:	782c      	ldrbeq	r4, [r5, #0]
 8013856:	1c95      	addeq	r5, r2, #2
 8013858:	e7cf      	b.n	80137fa <_strtol_l.constprop.0+0x3a>
 801385a:	2b00      	cmp	r3, #0
 801385c:	d1da      	bne.n	8013814 <_strtol_l.constprop.0+0x54>
 801385e:	2c30      	cmp	r4, #48	@ 0x30
 8013860:	bf0c      	ite	eq
 8013862:	2308      	moveq	r3, #8
 8013864:	230a      	movne	r3, #10
 8013866:	e7d5      	b.n	8013814 <_strtol_l.constprop.0+0x54>
 8013868:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801386c:	2f19      	cmp	r7, #25
 801386e:	d801      	bhi.n	8013874 <_strtol_l.constprop.0+0xb4>
 8013870:	3c37      	subs	r4, #55	@ 0x37
 8013872:	e7de      	b.n	8013832 <_strtol_l.constprop.0+0x72>
 8013874:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8013878:	2f19      	cmp	r7, #25
 801387a:	d804      	bhi.n	8013886 <_strtol_l.constprop.0+0xc6>
 801387c:	3c57      	subs	r4, #87	@ 0x57
 801387e:	e7d8      	b.n	8013832 <_strtol_l.constprop.0+0x72>
 8013880:	f04f 32ff 	mov.w	r2, #4294967295
 8013884:	e7e1      	b.n	801384a <_strtol_l.constprop.0+0x8a>
 8013886:	1c53      	adds	r3, r2, #1
 8013888:	d108      	bne.n	801389c <_strtol_l.constprop.0+0xdc>
 801388a:	2322      	movs	r3, #34	@ 0x22
 801388c:	f8ce 3000 	str.w	r3, [lr]
 8013890:	4660      	mov	r0, ip
 8013892:	f1b8 0f00 	cmp.w	r8, #0
 8013896:	d0a0      	beq.n	80137da <_strtol_l.constprop.0+0x1a>
 8013898:	1e69      	subs	r1, r5, #1
 801389a:	e006      	b.n	80138aa <_strtol_l.constprop.0+0xea>
 801389c:	b106      	cbz	r6, 80138a0 <_strtol_l.constprop.0+0xe0>
 801389e:	4240      	negs	r0, r0
 80138a0:	f1b8 0f00 	cmp.w	r8, #0
 80138a4:	d099      	beq.n	80137da <_strtol_l.constprop.0+0x1a>
 80138a6:	2a00      	cmp	r2, #0
 80138a8:	d1f6      	bne.n	8013898 <_strtol_l.constprop.0+0xd8>
 80138aa:	f8c8 1000 	str.w	r1, [r8]
 80138ae:	e794      	b.n	80137da <_strtol_l.constprop.0+0x1a>
 80138b0:	08015249 	.word	0x08015249

080138b4 <_strtol_r>:
 80138b4:	f7ff bf84 	b.w	80137c0 <_strtol_l.constprop.0>

080138b8 <__ssputs_r>:
 80138b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80138bc:	688e      	ldr	r6, [r1, #8]
 80138be:	461f      	mov	r7, r3
 80138c0:	42be      	cmp	r6, r7
 80138c2:	680b      	ldr	r3, [r1, #0]
 80138c4:	4682      	mov	sl, r0
 80138c6:	460c      	mov	r4, r1
 80138c8:	4690      	mov	r8, r2
 80138ca:	d82d      	bhi.n	8013928 <__ssputs_r+0x70>
 80138cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80138d0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80138d4:	d026      	beq.n	8013924 <__ssputs_r+0x6c>
 80138d6:	6965      	ldr	r5, [r4, #20]
 80138d8:	6909      	ldr	r1, [r1, #16]
 80138da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80138de:	eba3 0901 	sub.w	r9, r3, r1
 80138e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80138e6:	1c7b      	adds	r3, r7, #1
 80138e8:	444b      	add	r3, r9
 80138ea:	106d      	asrs	r5, r5, #1
 80138ec:	429d      	cmp	r5, r3
 80138ee:	bf38      	it	cc
 80138f0:	461d      	movcc	r5, r3
 80138f2:	0553      	lsls	r3, r2, #21
 80138f4:	d527      	bpl.n	8013946 <__ssputs_r+0x8e>
 80138f6:	4629      	mov	r1, r5
 80138f8:	f7fc fc86 	bl	8010208 <_malloc_r>
 80138fc:	4606      	mov	r6, r0
 80138fe:	b360      	cbz	r0, 801395a <__ssputs_r+0xa2>
 8013900:	6921      	ldr	r1, [r4, #16]
 8013902:	464a      	mov	r2, r9
 8013904:	f7fd feb5 	bl	8011672 <memcpy>
 8013908:	89a3      	ldrh	r3, [r4, #12]
 801390a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801390e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013912:	81a3      	strh	r3, [r4, #12]
 8013914:	6126      	str	r6, [r4, #16]
 8013916:	6165      	str	r5, [r4, #20]
 8013918:	444e      	add	r6, r9
 801391a:	eba5 0509 	sub.w	r5, r5, r9
 801391e:	6026      	str	r6, [r4, #0]
 8013920:	60a5      	str	r5, [r4, #8]
 8013922:	463e      	mov	r6, r7
 8013924:	42be      	cmp	r6, r7
 8013926:	d900      	bls.n	801392a <__ssputs_r+0x72>
 8013928:	463e      	mov	r6, r7
 801392a:	6820      	ldr	r0, [r4, #0]
 801392c:	4632      	mov	r2, r6
 801392e:	4641      	mov	r1, r8
 8013930:	f000 fb6a 	bl	8014008 <memmove>
 8013934:	68a3      	ldr	r3, [r4, #8]
 8013936:	1b9b      	subs	r3, r3, r6
 8013938:	60a3      	str	r3, [r4, #8]
 801393a:	6823      	ldr	r3, [r4, #0]
 801393c:	4433      	add	r3, r6
 801393e:	6023      	str	r3, [r4, #0]
 8013940:	2000      	movs	r0, #0
 8013942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013946:	462a      	mov	r2, r5
 8013948:	f000 ff15 	bl	8014776 <_realloc_r>
 801394c:	4606      	mov	r6, r0
 801394e:	2800      	cmp	r0, #0
 8013950:	d1e0      	bne.n	8013914 <__ssputs_r+0x5c>
 8013952:	6921      	ldr	r1, [r4, #16]
 8013954:	4650      	mov	r0, sl
 8013956:	f7fe fc81 	bl	801225c <_free_r>
 801395a:	230c      	movs	r3, #12
 801395c:	f8ca 3000 	str.w	r3, [sl]
 8013960:	89a3      	ldrh	r3, [r4, #12]
 8013962:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013966:	81a3      	strh	r3, [r4, #12]
 8013968:	f04f 30ff 	mov.w	r0, #4294967295
 801396c:	e7e9      	b.n	8013942 <__ssputs_r+0x8a>
	...

08013970 <_svfiprintf_r>:
 8013970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013974:	4698      	mov	r8, r3
 8013976:	898b      	ldrh	r3, [r1, #12]
 8013978:	061b      	lsls	r3, r3, #24
 801397a:	b09d      	sub	sp, #116	@ 0x74
 801397c:	4607      	mov	r7, r0
 801397e:	460d      	mov	r5, r1
 8013980:	4614      	mov	r4, r2
 8013982:	d510      	bpl.n	80139a6 <_svfiprintf_r+0x36>
 8013984:	690b      	ldr	r3, [r1, #16]
 8013986:	b973      	cbnz	r3, 80139a6 <_svfiprintf_r+0x36>
 8013988:	2140      	movs	r1, #64	@ 0x40
 801398a:	f7fc fc3d 	bl	8010208 <_malloc_r>
 801398e:	6028      	str	r0, [r5, #0]
 8013990:	6128      	str	r0, [r5, #16]
 8013992:	b930      	cbnz	r0, 80139a2 <_svfiprintf_r+0x32>
 8013994:	230c      	movs	r3, #12
 8013996:	603b      	str	r3, [r7, #0]
 8013998:	f04f 30ff 	mov.w	r0, #4294967295
 801399c:	b01d      	add	sp, #116	@ 0x74
 801399e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139a2:	2340      	movs	r3, #64	@ 0x40
 80139a4:	616b      	str	r3, [r5, #20]
 80139a6:	2300      	movs	r3, #0
 80139a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80139aa:	2320      	movs	r3, #32
 80139ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80139b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80139b4:	2330      	movs	r3, #48	@ 0x30
 80139b6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8013b54 <_svfiprintf_r+0x1e4>
 80139ba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80139be:	f04f 0901 	mov.w	r9, #1
 80139c2:	4623      	mov	r3, r4
 80139c4:	469a      	mov	sl, r3
 80139c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80139ca:	b10a      	cbz	r2, 80139d0 <_svfiprintf_r+0x60>
 80139cc:	2a25      	cmp	r2, #37	@ 0x25
 80139ce:	d1f9      	bne.n	80139c4 <_svfiprintf_r+0x54>
 80139d0:	ebba 0b04 	subs.w	fp, sl, r4
 80139d4:	d00b      	beq.n	80139ee <_svfiprintf_r+0x7e>
 80139d6:	465b      	mov	r3, fp
 80139d8:	4622      	mov	r2, r4
 80139da:	4629      	mov	r1, r5
 80139dc:	4638      	mov	r0, r7
 80139de:	f7ff ff6b 	bl	80138b8 <__ssputs_r>
 80139e2:	3001      	adds	r0, #1
 80139e4:	f000 80a7 	beq.w	8013b36 <_svfiprintf_r+0x1c6>
 80139e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80139ea:	445a      	add	r2, fp
 80139ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80139ee:	f89a 3000 	ldrb.w	r3, [sl]
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	f000 809f 	beq.w	8013b36 <_svfiprintf_r+0x1c6>
 80139f8:	2300      	movs	r3, #0
 80139fa:	f04f 32ff 	mov.w	r2, #4294967295
 80139fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013a02:	f10a 0a01 	add.w	sl, sl, #1
 8013a06:	9304      	str	r3, [sp, #16]
 8013a08:	9307      	str	r3, [sp, #28]
 8013a0a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013a0e:	931a      	str	r3, [sp, #104]	@ 0x68
 8013a10:	4654      	mov	r4, sl
 8013a12:	2205      	movs	r2, #5
 8013a14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013a18:	484e      	ldr	r0, [pc, #312]	@ (8013b54 <_svfiprintf_r+0x1e4>)
 8013a1a:	f7ec fc69 	bl	80002f0 <memchr>
 8013a1e:	9a04      	ldr	r2, [sp, #16]
 8013a20:	b9d8      	cbnz	r0, 8013a5a <_svfiprintf_r+0xea>
 8013a22:	06d0      	lsls	r0, r2, #27
 8013a24:	bf44      	itt	mi
 8013a26:	2320      	movmi	r3, #32
 8013a28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013a2c:	0711      	lsls	r1, r2, #28
 8013a2e:	bf44      	itt	mi
 8013a30:	232b      	movmi	r3, #43	@ 0x2b
 8013a32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013a36:	f89a 3000 	ldrb.w	r3, [sl]
 8013a3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8013a3c:	d015      	beq.n	8013a6a <_svfiprintf_r+0xfa>
 8013a3e:	9a07      	ldr	r2, [sp, #28]
 8013a40:	4654      	mov	r4, sl
 8013a42:	2000      	movs	r0, #0
 8013a44:	f04f 0c0a 	mov.w	ip, #10
 8013a48:	4621      	mov	r1, r4
 8013a4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013a4e:	3b30      	subs	r3, #48	@ 0x30
 8013a50:	2b09      	cmp	r3, #9
 8013a52:	d94b      	bls.n	8013aec <_svfiprintf_r+0x17c>
 8013a54:	b1b0      	cbz	r0, 8013a84 <_svfiprintf_r+0x114>
 8013a56:	9207      	str	r2, [sp, #28]
 8013a58:	e014      	b.n	8013a84 <_svfiprintf_r+0x114>
 8013a5a:	eba0 0308 	sub.w	r3, r0, r8
 8013a5e:	fa09 f303 	lsl.w	r3, r9, r3
 8013a62:	4313      	orrs	r3, r2
 8013a64:	9304      	str	r3, [sp, #16]
 8013a66:	46a2      	mov	sl, r4
 8013a68:	e7d2      	b.n	8013a10 <_svfiprintf_r+0xa0>
 8013a6a:	9b03      	ldr	r3, [sp, #12]
 8013a6c:	1d19      	adds	r1, r3, #4
 8013a6e:	681b      	ldr	r3, [r3, #0]
 8013a70:	9103      	str	r1, [sp, #12]
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	bfbb      	ittet	lt
 8013a76:	425b      	neglt	r3, r3
 8013a78:	f042 0202 	orrlt.w	r2, r2, #2
 8013a7c:	9307      	strge	r3, [sp, #28]
 8013a7e:	9307      	strlt	r3, [sp, #28]
 8013a80:	bfb8      	it	lt
 8013a82:	9204      	strlt	r2, [sp, #16]
 8013a84:	7823      	ldrb	r3, [r4, #0]
 8013a86:	2b2e      	cmp	r3, #46	@ 0x2e
 8013a88:	d10a      	bne.n	8013aa0 <_svfiprintf_r+0x130>
 8013a8a:	7863      	ldrb	r3, [r4, #1]
 8013a8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8013a8e:	d132      	bne.n	8013af6 <_svfiprintf_r+0x186>
 8013a90:	9b03      	ldr	r3, [sp, #12]
 8013a92:	1d1a      	adds	r2, r3, #4
 8013a94:	681b      	ldr	r3, [r3, #0]
 8013a96:	9203      	str	r2, [sp, #12]
 8013a98:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013a9c:	3402      	adds	r4, #2
 8013a9e:	9305      	str	r3, [sp, #20]
 8013aa0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8013b64 <_svfiprintf_r+0x1f4>
 8013aa4:	7821      	ldrb	r1, [r4, #0]
 8013aa6:	2203      	movs	r2, #3
 8013aa8:	4650      	mov	r0, sl
 8013aaa:	f7ec fc21 	bl	80002f0 <memchr>
 8013aae:	b138      	cbz	r0, 8013ac0 <_svfiprintf_r+0x150>
 8013ab0:	9b04      	ldr	r3, [sp, #16]
 8013ab2:	eba0 000a 	sub.w	r0, r0, sl
 8013ab6:	2240      	movs	r2, #64	@ 0x40
 8013ab8:	4082      	lsls	r2, r0
 8013aba:	4313      	orrs	r3, r2
 8013abc:	3401      	adds	r4, #1
 8013abe:	9304      	str	r3, [sp, #16]
 8013ac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013ac4:	4824      	ldr	r0, [pc, #144]	@ (8013b58 <_svfiprintf_r+0x1e8>)
 8013ac6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013aca:	2206      	movs	r2, #6
 8013acc:	f7ec fc10 	bl	80002f0 <memchr>
 8013ad0:	2800      	cmp	r0, #0
 8013ad2:	d036      	beq.n	8013b42 <_svfiprintf_r+0x1d2>
 8013ad4:	4b21      	ldr	r3, [pc, #132]	@ (8013b5c <_svfiprintf_r+0x1ec>)
 8013ad6:	bb1b      	cbnz	r3, 8013b20 <_svfiprintf_r+0x1b0>
 8013ad8:	9b03      	ldr	r3, [sp, #12]
 8013ada:	3307      	adds	r3, #7
 8013adc:	f023 0307 	bic.w	r3, r3, #7
 8013ae0:	3308      	adds	r3, #8
 8013ae2:	9303      	str	r3, [sp, #12]
 8013ae4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013ae6:	4433      	add	r3, r6
 8013ae8:	9309      	str	r3, [sp, #36]	@ 0x24
 8013aea:	e76a      	b.n	80139c2 <_svfiprintf_r+0x52>
 8013aec:	fb0c 3202 	mla	r2, ip, r2, r3
 8013af0:	460c      	mov	r4, r1
 8013af2:	2001      	movs	r0, #1
 8013af4:	e7a8      	b.n	8013a48 <_svfiprintf_r+0xd8>
 8013af6:	2300      	movs	r3, #0
 8013af8:	3401      	adds	r4, #1
 8013afa:	9305      	str	r3, [sp, #20]
 8013afc:	4619      	mov	r1, r3
 8013afe:	f04f 0c0a 	mov.w	ip, #10
 8013b02:	4620      	mov	r0, r4
 8013b04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013b08:	3a30      	subs	r2, #48	@ 0x30
 8013b0a:	2a09      	cmp	r2, #9
 8013b0c:	d903      	bls.n	8013b16 <_svfiprintf_r+0x1a6>
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d0c6      	beq.n	8013aa0 <_svfiprintf_r+0x130>
 8013b12:	9105      	str	r1, [sp, #20]
 8013b14:	e7c4      	b.n	8013aa0 <_svfiprintf_r+0x130>
 8013b16:	fb0c 2101 	mla	r1, ip, r1, r2
 8013b1a:	4604      	mov	r4, r0
 8013b1c:	2301      	movs	r3, #1
 8013b1e:	e7f0      	b.n	8013b02 <_svfiprintf_r+0x192>
 8013b20:	ab03      	add	r3, sp, #12
 8013b22:	9300      	str	r3, [sp, #0]
 8013b24:	462a      	mov	r2, r5
 8013b26:	4b0e      	ldr	r3, [pc, #56]	@ (8013b60 <_svfiprintf_r+0x1f0>)
 8013b28:	a904      	add	r1, sp, #16
 8013b2a:	4638      	mov	r0, r7
 8013b2c:	f7fc fc88 	bl	8010440 <_printf_float>
 8013b30:	1c42      	adds	r2, r0, #1
 8013b32:	4606      	mov	r6, r0
 8013b34:	d1d6      	bne.n	8013ae4 <_svfiprintf_r+0x174>
 8013b36:	89ab      	ldrh	r3, [r5, #12]
 8013b38:	065b      	lsls	r3, r3, #25
 8013b3a:	f53f af2d 	bmi.w	8013998 <_svfiprintf_r+0x28>
 8013b3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013b40:	e72c      	b.n	801399c <_svfiprintf_r+0x2c>
 8013b42:	ab03      	add	r3, sp, #12
 8013b44:	9300      	str	r3, [sp, #0]
 8013b46:	462a      	mov	r2, r5
 8013b48:	4b05      	ldr	r3, [pc, #20]	@ (8013b60 <_svfiprintf_r+0x1f0>)
 8013b4a:	a904      	add	r1, sp, #16
 8013b4c:	4638      	mov	r0, r7
 8013b4e:	f7fc feff 	bl	8010950 <_printf_i>
 8013b52:	e7ed      	b.n	8013b30 <_svfiprintf_r+0x1c0>
 8013b54:	08015349 	.word	0x08015349
 8013b58:	08015353 	.word	0x08015353
 8013b5c:	08010441 	.word	0x08010441
 8013b60:	080138b9 	.word	0x080138b9
 8013b64:	0801534f 	.word	0x0801534f

08013b68 <__sfputc_r>:
 8013b68:	6893      	ldr	r3, [r2, #8]
 8013b6a:	3b01      	subs	r3, #1
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	b410      	push	{r4}
 8013b70:	6093      	str	r3, [r2, #8]
 8013b72:	da08      	bge.n	8013b86 <__sfputc_r+0x1e>
 8013b74:	6994      	ldr	r4, [r2, #24]
 8013b76:	42a3      	cmp	r3, r4
 8013b78:	db01      	blt.n	8013b7e <__sfputc_r+0x16>
 8013b7a:	290a      	cmp	r1, #10
 8013b7c:	d103      	bne.n	8013b86 <__sfputc_r+0x1e>
 8013b7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013b82:	f7fd bbb8 	b.w	80112f6 <__swbuf_r>
 8013b86:	6813      	ldr	r3, [r2, #0]
 8013b88:	1c58      	adds	r0, r3, #1
 8013b8a:	6010      	str	r0, [r2, #0]
 8013b8c:	7019      	strb	r1, [r3, #0]
 8013b8e:	4608      	mov	r0, r1
 8013b90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013b94:	4770      	bx	lr

08013b96 <__sfputs_r>:
 8013b96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b98:	4606      	mov	r6, r0
 8013b9a:	460f      	mov	r7, r1
 8013b9c:	4614      	mov	r4, r2
 8013b9e:	18d5      	adds	r5, r2, r3
 8013ba0:	42ac      	cmp	r4, r5
 8013ba2:	d101      	bne.n	8013ba8 <__sfputs_r+0x12>
 8013ba4:	2000      	movs	r0, #0
 8013ba6:	e007      	b.n	8013bb8 <__sfputs_r+0x22>
 8013ba8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013bac:	463a      	mov	r2, r7
 8013bae:	4630      	mov	r0, r6
 8013bb0:	f7ff ffda 	bl	8013b68 <__sfputc_r>
 8013bb4:	1c43      	adds	r3, r0, #1
 8013bb6:	d1f3      	bne.n	8013ba0 <__sfputs_r+0xa>
 8013bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013bbc <_vfiprintf_r>:
 8013bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bc0:	460d      	mov	r5, r1
 8013bc2:	b09d      	sub	sp, #116	@ 0x74
 8013bc4:	4614      	mov	r4, r2
 8013bc6:	4698      	mov	r8, r3
 8013bc8:	4606      	mov	r6, r0
 8013bca:	b118      	cbz	r0, 8013bd4 <_vfiprintf_r+0x18>
 8013bcc:	6a03      	ldr	r3, [r0, #32]
 8013bce:	b90b      	cbnz	r3, 8013bd4 <_vfiprintf_r+0x18>
 8013bd0:	f7fd fa76 	bl	80110c0 <__sinit>
 8013bd4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013bd6:	07d9      	lsls	r1, r3, #31
 8013bd8:	d405      	bmi.n	8013be6 <_vfiprintf_r+0x2a>
 8013bda:	89ab      	ldrh	r3, [r5, #12]
 8013bdc:	059a      	lsls	r2, r3, #22
 8013bde:	d402      	bmi.n	8013be6 <_vfiprintf_r+0x2a>
 8013be0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013be2:	f7fd fd44 	bl	801166e <__retarget_lock_acquire_recursive>
 8013be6:	89ab      	ldrh	r3, [r5, #12]
 8013be8:	071b      	lsls	r3, r3, #28
 8013bea:	d501      	bpl.n	8013bf0 <_vfiprintf_r+0x34>
 8013bec:	692b      	ldr	r3, [r5, #16]
 8013bee:	b99b      	cbnz	r3, 8013c18 <_vfiprintf_r+0x5c>
 8013bf0:	4629      	mov	r1, r5
 8013bf2:	4630      	mov	r0, r6
 8013bf4:	f7fd fbbe 	bl	8011374 <__swsetup_r>
 8013bf8:	b170      	cbz	r0, 8013c18 <_vfiprintf_r+0x5c>
 8013bfa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013bfc:	07dc      	lsls	r4, r3, #31
 8013bfe:	d504      	bpl.n	8013c0a <_vfiprintf_r+0x4e>
 8013c00:	f04f 30ff 	mov.w	r0, #4294967295
 8013c04:	b01d      	add	sp, #116	@ 0x74
 8013c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c0a:	89ab      	ldrh	r3, [r5, #12]
 8013c0c:	0598      	lsls	r0, r3, #22
 8013c0e:	d4f7      	bmi.n	8013c00 <_vfiprintf_r+0x44>
 8013c10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013c12:	f7fd fd2d 	bl	8011670 <__retarget_lock_release_recursive>
 8013c16:	e7f3      	b.n	8013c00 <_vfiprintf_r+0x44>
 8013c18:	2300      	movs	r3, #0
 8013c1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8013c1c:	2320      	movs	r3, #32
 8013c1e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013c22:	f8cd 800c 	str.w	r8, [sp, #12]
 8013c26:	2330      	movs	r3, #48	@ 0x30
 8013c28:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013dd8 <_vfiprintf_r+0x21c>
 8013c2c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013c30:	f04f 0901 	mov.w	r9, #1
 8013c34:	4623      	mov	r3, r4
 8013c36:	469a      	mov	sl, r3
 8013c38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013c3c:	b10a      	cbz	r2, 8013c42 <_vfiprintf_r+0x86>
 8013c3e:	2a25      	cmp	r2, #37	@ 0x25
 8013c40:	d1f9      	bne.n	8013c36 <_vfiprintf_r+0x7a>
 8013c42:	ebba 0b04 	subs.w	fp, sl, r4
 8013c46:	d00b      	beq.n	8013c60 <_vfiprintf_r+0xa4>
 8013c48:	465b      	mov	r3, fp
 8013c4a:	4622      	mov	r2, r4
 8013c4c:	4629      	mov	r1, r5
 8013c4e:	4630      	mov	r0, r6
 8013c50:	f7ff ffa1 	bl	8013b96 <__sfputs_r>
 8013c54:	3001      	adds	r0, #1
 8013c56:	f000 80a7 	beq.w	8013da8 <_vfiprintf_r+0x1ec>
 8013c5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013c5c:	445a      	add	r2, fp
 8013c5e:	9209      	str	r2, [sp, #36]	@ 0x24
 8013c60:	f89a 3000 	ldrb.w	r3, [sl]
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	f000 809f 	beq.w	8013da8 <_vfiprintf_r+0x1ec>
 8013c6a:	2300      	movs	r3, #0
 8013c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8013c70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013c74:	f10a 0a01 	add.w	sl, sl, #1
 8013c78:	9304      	str	r3, [sp, #16]
 8013c7a:	9307      	str	r3, [sp, #28]
 8013c7c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013c80:	931a      	str	r3, [sp, #104]	@ 0x68
 8013c82:	4654      	mov	r4, sl
 8013c84:	2205      	movs	r2, #5
 8013c86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c8a:	4853      	ldr	r0, [pc, #332]	@ (8013dd8 <_vfiprintf_r+0x21c>)
 8013c8c:	f7ec fb30 	bl	80002f0 <memchr>
 8013c90:	9a04      	ldr	r2, [sp, #16]
 8013c92:	b9d8      	cbnz	r0, 8013ccc <_vfiprintf_r+0x110>
 8013c94:	06d1      	lsls	r1, r2, #27
 8013c96:	bf44      	itt	mi
 8013c98:	2320      	movmi	r3, #32
 8013c9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013c9e:	0713      	lsls	r3, r2, #28
 8013ca0:	bf44      	itt	mi
 8013ca2:	232b      	movmi	r3, #43	@ 0x2b
 8013ca4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013ca8:	f89a 3000 	ldrb.w	r3, [sl]
 8013cac:	2b2a      	cmp	r3, #42	@ 0x2a
 8013cae:	d015      	beq.n	8013cdc <_vfiprintf_r+0x120>
 8013cb0:	9a07      	ldr	r2, [sp, #28]
 8013cb2:	4654      	mov	r4, sl
 8013cb4:	2000      	movs	r0, #0
 8013cb6:	f04f 0c0a 	mov.w	ip, #10
 8013cba:	4621      	mov	r1, r4
 8013cbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013cc0:	3b30      	subs	r3, #48	@ 0x30
 8013cc2:	2b09      	cmp	r3, #9
 8013cc4:	d94b      	bls.n	8013d5e <_vfiprintf_r+0x1a2>
 8013cc6:	b1b0      	cbz	r0, 8013cf6 <_vfiprintf_r+0x13a>
 8013cc8:	9207      	str	r2, [sp, #28]
 8013cca:	e014      	b.n	8013cf6 <_vfiprintf_r+0x13a>
 8013ccc:	eba0 0308 	sub.w	r3, r0, r8
 8013cd0:	fa09 f303 	lsl.w	r3, r9, r3
 8013cd4:	4313      	orrs	r3, r2
 8013cd6:	9304      	str	r3, [sp, #16]
 8013cd8:	46a2      	mov	sl, r4
 8013cda:	e7d2      	b.n	8013c82 <_vfiprintf_r+0xc6>
 8013cdc:	9b03      	ldr	r3, [sp, #12]
 8013cde:	1d19      	adds	r1, r3, #4
 8013ce0:	681b      	ldr	r3, [r3, #0]
 8013ce2:	9103      	str	r1, [sp, #12]
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	bfbb      	ittet	lt
 8013ce8:	425b      	neglt	r3, r3
 8013cea:	f042 0202 	orrlt.w	r2, r2, #2
 8013cee:	9307      	strge	r3, [sp, #28]
 8013cf0:	9307      	strlt	r3, [sp, #28]
 8013cf2:	bfb8      	it	lt
 8013cf4:	9204      	strlt	r2, [sp, #16]
 8013cf6:	7823      	ldrb	r3, [r4, #0]
 8013cf8:	2b2e      	cmp	r3, #46	@ 0x2e
 8013cfa:	d10a      	bne.n	8013d12 <_vfiprintf_r+0x156>
 8013cfc:	7863      	ldrb	r3, [r4, #1]
 8013cfe:	2b2a      	cmp	r3, #42	@ 0x2a
 8013d00:	d132      	bne.n	8013d68 <_vfiprintf_r+0x1ac>
 8013d02:	9b03      	ldr	r3, [sp, #12]
 8013d04:	1d1a      	adds	r2, r3, #4
 8013d06:	681b      	ldr	r3, [r3, #0]
 8013d08:	9203      	str	r2, [sp, #12]
 8013d0a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013d0e:	3402      	adds	r4, #2
 8013d10:	9305      	str	r3, [sp, #20]
 8013d12:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013de8 <_vfiprintf_r+0x22c>
 8013d16:	7821      	ldrb	r1, [r4, #0]
 8013d18:	2203      	movs	r2, #3
 8013d1a:	4650      	mov	r0, sl
 8013d1c:	f7ec fae8 	bl	80002f0 <memchr>
 8013d20:	b138      	cbz	r0, 8013d32 <_vfiprintf_r+0x176>
 8013d22:	9b04      	ldr	r3, [sp, #16]
 8013d24:	eba0 000a 	sub.w	r0, r0, sl
 8013d28:	2240      	movs	r2, #64	@ 0x40
 8013d2a:	4082      	lsls	r2, r0
 8013d2c:	4313      	orrs	r3, r2
 8013d2e:	3401      	adds	r4, #1
 8013d30:	9304      	str	r3, [sp, #16]
 8013d32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013d36:	4829      	ldr	r0, [pc, #164]	@ (8013ddc <_vfiprintf_r+0x220>)
 8013d38:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013d3c:	2206      	movs	r2, #6
 8013d3e:	f7ec fad7 	bl	80002f0 <memchr>
 8013d42:	2800      	cmp	r0, #0
 8013d44:	d03f      	beq.n	8013dc6 <_vfiprintf_r+0x20a>
 8013d46:	4b26      	ldr	r3, [pc, #152]	@ (8013de0 <_vfiprintf_r+0x224>)
 8013d48:	bb1b      	cbnz	r3, 8013d92 <_vfiprintf_r+0x1d6>
 8013d4a:	9b03      	ldr	r3, [sp, #12]
 8013d4c:	3307      	adds	r3, #7
 8013d4e:	f023 0307 	bic.w	r3, r3, #7
 8013d52:	3308      	adds	r3, #8
 8013d54:	9303      	str	r3, [sp, #12]
 8013d56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013d58:	443b      	add	r3, r7
 8013d5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8013d5c:	e76a      	b.n	8013c34 <_vfiprintf_r+0x78>
 8013d5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8013d62:	460c      	mov	r4, r1
 8013d64:	2001      	movs	r0, #1
 8013d66:	e7a8      	b.n	8013cba <_vfiprintf_r+0xfe>
 8013d68:	2300      	movs	r3, #0
 8013d6a:	3401      	adds	r4, #1
 8013d6c:	9305      	str	r3, [sp, #20]
 8013d6e:	4619      	mov	r1, r3
 8013d70:	f04f 0c0a 	mov.w	ip, #10
 8013d74:	4620      	mov	r0, r4
 8013d76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013d7a:	3a30      	subs	r2, #48	@ 0x30
 8013d7c:	2a09      	cmp	r2, #9
 8013d7e:	d903      	bls.n	8013d88 <_vfiprintf_r+0x1cc>
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d0c6      	beq.n	8013d12 <_vfiprintf_r+0x156>
 8013d84:	9105      	str	r1, [sp, #20]
 8013d86:	e7c4      	b.n	8013d12 <_vfiprintf_r+0x156>
 8013d88:	fb0c 2101 	mla	r1, ip, r1, r2
 8013d8c:	4604      	mov	r4, r0
 8013d8e:	2301      	movs	r3, #1
 8013d90:	e7f0      	b.n	8013d74 <_vfiprintf_r+0x1b8>
 8013d92:	ab03      	add	r3, sp, #12
 8013d94:	9300      	str	r3, [sp, #0]
 8013d96:	462a      	mov	r2, r5
 8013d98:	4b12      	ldr	r3, [pc, #72]	@ (8013de4 <_vfiprintf_r+0x228>)
 8013d9a:	a904      	add	r1, sp, #16
 8013d9c:	4630      	mov	r0, r6
 8013d9e:	f7fc fb4f 	bl	8010440 <_printf_float>
 8013da2:	4607      	mov	r7, r0
 8013da4:	1c78      	adds	r0, r7, #1
 8013da6:	d1d6      	bne.n	8013d56 <_vfiprintf_r+0x19a>
 8013da8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013daa:	07d9      	lsls	r1, r3, #31
 8013dac:	d405      	bmi.n	8013dba <_vfiprintf_r+0x1fe>
 8013dae:	89ab      	ldrh	r3, [r5, #12]
 8013db0:	059a      	lsls	r2, r3, #22
 8013db2:	d402      	bmi.n	8013dba <_vfiprintf_r+0x1fe>
 8013db4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013db6:	f7fd fc5b 	bl	8011670 <__retarget_lock_release_recursive>
 8013dba:	89ab      	ldrh	r3, [r5, #12]
 8013dbc:	065b      	lsls	r3, r3, #25
 8013dbe:	f53f af1f 	bmi.w	8013c00 <_vfiprintf_r+0x44>
 8013dc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013dc4:	e71e      	b.n	8013c04 <_vfiprintf_r+0x48>
 8013dc6:	ab03      	add	r3, sp, #12
 8013dc8:	9300      	str	r3, [sp, #0]
 8013dca:	462a      	mov	r2, r5
 8013dcc:	4b05      	ldr	r3, [pc, #20]	@ (8013de4 <_vfiprintf_r+0x228>)
 8013dce:	a904      	add	r1, sp, #16
 8013dd0:	4630      	mov	r0, r6
 8013dd2:	f7fc fdbd 	bl	8010950 <_printf_i>
 8013dd6:	e7e4      	b.n	8013da2 <_vfiprintf_r+0x1e6>
 8013dd8:	08015349 	.word	0x08015349
 8013ddc:	08015353 	.word	0x08015353
 8013de0:	08010441 	.word	0x08010441
 8013de4:	08013b97 	.word	0x08013b97
 8013de8:	0801534f 	.word	0x0801534f

08013dec <__sflush_r>:
 8013dec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013df4:	0716      	lsls	r6, r2, #28
 8013df6:	4605      	mov	r5, r0
 8013df8:	460c      	mov	r4, r1
 8013dfa:	d454      	bmi.n	8013ea6 <__sflush_r+0xba>
 8013dfc:	684b      	ldr	r3, [r1, #4]
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	dc02      	bgt.n	8013e08 <__sflush_r+0x1c>
 8013e02:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	dd48      	ble.n	8013e9a <__sflush_r+0xae>
 8013e08:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013e0a:	2e00      	cmp	r6, #0
 8013e0c:	d045      	beq.n	8013e9a <__sflush_r+0xae>
 8013e0e:	2300      	movs	r3, #0
 8013e10:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013e14:	682f      	ldr	r7, [r5, #0]
 8013e16:	6a21      	ldr	r1, [r4, #32]
 8013e18:	602b      	str	r3, [r5, #0]
 8013e1a:	d030      	beq.n	8013e7e <__sflush_r+0x92>
 8013e1c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013e1e:	89a3      	ldrh	r3, [r4, #12]
 8013e20:	0759      	lsls	r1, r3, #29
 8013e22:	d505      	bpl.n	8013e30 <__sflush_r+0x44>
 8013e24:	6863      	ldr	r3, [r4, #4]
 8013e26:	1ad2      	subs	r2, r2, r3
 8013e28:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013e2a:	b10b      	cbz	r3, 8013e30 <__sflush_r+0x44>
 8013e2c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013e2e:	1ad2      	subs	r2, r2, r3
 8013e30:	2300      	movs	r3, #0
 8013e32:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013e34:	6a21      	ldr	r1, [r4, #32]
 8013e36:	4628      	mov	r0, r5
 8013e38:	47b0      	blx	r6
 8013e3a:	1c43      	adds	r3, r0, #1
 8013e3c:	89a3      	ldrh	r3, [r4, #12]
 8013e3e:	d106      	bne.n	8013e4e <__sflush_r+0x62>
 8013e40:	6829      	ldr	r1, [r5, #0]
 8013e42:	291d      	cmp	r1, #29
 8013e44:	d82b      	bhi.n	8013e9e <__sflush_r+0xb2>
 8013e46:	4a2a      	ldr	r2, [pc, #168]	@ (8013ef0 <__sflush_r+0x104>)
 8013e48:	410a      	asrs	r2, r1
 8013e4a:	07d6      	lsls	r6, r2, #31
 8013e4c:	d427      	bmi.n	8013e9e <__sflush_r+0xb2>
 8013e4e:	2200      	movs	r2, #0
 8013e50:	6062      	str	r2, [r4, #4]
 8013e52:	04d9      	lsls	r1, r3, #19
 8013e54:	6922      	ldr	r2, [r4, #16]
 8013e56:	6022      	str	r2, [r4, #0]
 8013e58:	d504      	bpl.n	8013e64 <__sflush_r+0x78>
 8013e5a:	1c42      	adds	r2, r0, #1
 8013e5c:	d101      	bne.n	8013e62 <__sflush_r+0x76>
 8013e5e:	682b      	ldr	r3, [r5, #0]
 8013e60:	b903      	cbnz	r3, 8013e64 <__sflush_r+0x78>
 8013e62:	6560      	str	r0, [r4, #84]	@ 0x54
 8013e64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013e66:	602f      	str	r7, [r5, #0]
 8013e68:	b1b9      	cbz	r1, 8013e9a <__sflush_r+0xae>
 8013e6a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013e6e:	4299      	cmp	r1, r3
 8013e70:	d002      	beq.n	8013e78 <__sflush_r+0x8c>
 8013e72:	4628      	mov	r0, r5
 8013e74:	f7fe f9f2 	bl	801225c <_free_r>
 8013e78:	2300      	movs	r3, #0
 8013e7a:	6363      	str	r3, [r4, #52]	@ 0x34
 8013e7c:	e00d      	b.n	8013e9a <__sflush_r+0xae>
 8013e7e:	2301      	movs	r3, #1
 8013e80:	4628      	mov	r0, r5
 8013e82:	47b0      	blx	r6
 8013e84:	4602      	mov	r2, r0
 8013e86:	1c50      	adds	r0, r2, #1
 8013e88:	d1c9      	bne.n	8013e1e <__sflush_r+0x32>
 8013e8a:	682b      	ldr	r3, [r5, #0]
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d0c6      	beq.n	8013e1e <__sflush_r+0x32>
 8013e90:	2b1d      	cmp	r3, #29
 8013e92:	d001      	beq.n	8013e98 <__sflush_r+0xac>
 8013e94:	2b16      	cmp	r3, #22
 8013e96:	d11e      	bne.n	8013ed6 <__sflush_r+0xea>
 8013e98:	602f      	str	r7, [r5, #0]
 8013e9a:	2000      	movs	r0, #0
 8013e9c:	e022      	b.n	8013ee4 <__sflush_r+0xf8>
 8013e9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013ea2:	b21b      	sxth	r3, r3
 8013ea4:	e01b      	b.n	8013ede <__sflush_r+0xf2>
 8013ea6:	690f      	ldr	r7, [r1, #16]
 8013ea8:	2f00      	cmp	r7, #0
 8013eaa:	d0f6      	beq.n	8013e9a <__sflush_r+0xae>
 8013eac:	0793      	lsls	r3, r2, #30
 8013eae:	680e      	ldr	r6, [r1, #0]
 8013eb0:	bf08      	it	eq
 8013eb2:	694b      	ldreq	r3, [r1, #20]
 8013eb4:	600f      	str	r7, [r1, #0]
 8013eb6:	bf18      	it	ne
 8013eb8:	2300      	movne	r3, #0
 8013eba:	eba6 0807 	sub.w	r8, r6, r7
 8013ebe:	608b      	str	r3, [r1, #8]
 8013ec0:	f1b8 0f00 	cmp.w	r8, #0
 8013ec4:	dde9      	ble.n	8013e9a <__sflush_r+0xae>
 8013ec6:	6a21      	ldr	r1, [r4, #32]
 8013ec8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013eca:	4643      	mov	r3, r8
 8013ecc:	463a      	mov	r2, r7
 8013ece:	4628      	mov	r0, r5
 8013ed0:	47b0      	blx	r6
 8013ed2:	2800      	cmp	r0, #0
 8013ed4:	dc08      	bgt.n	8013ee8 <__sflush_r+0xfc>
 8013ed6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013eda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013ede:	81a3      	strh	r3, [r4, #12]
 8013ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8013ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ee8:	4407      	add	r7, r0
 8013eea:	eba8 0800 	sub.w	r8, r8, r0
 8013eee:	e7e7      	b.n	8013ec0 <__sflush_r+0xd4>
 8013ef0:	dfbffffe 	.word	0xdfbffffe

08013ef4 <_fflush_r>:
 8013ef4:	b538      	push	{r3, r4, r5, lr}
 8013ef6:	690b      	ldr	r3, [r1, #16]
 8013ef8:	4605      	mov	r5, r0
 8013efa:	460c      	mov	r4, r1
 8013efc:	b913      	cbnz	r3, 8013f04 <_fflush_r+0x10>
 8013efe:	2500      	movs	r5, #0
 8013f00:	4628      	mov	r0, r5
 8013f02:	bd38      	pop	{r3, r4, r5, pc}
 8013f04:	b118      	cbz	r0, 8013f0e <_fflush_r+0x1a>
 8013f06:	6a03      	ldr	r3, [r0, #32]
 8013f08:	b90b      	cbnz	r3, 8013f0e <_fflush_r+0x1a>
 8013f0a:	f7fd f8d9 	bl	80110c0 <__sinit>
 8013f0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d0f3      	beq.n	8013efe <_fflush_r+0xa>
 8013f16:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013f18:	07d0      	lsls	r0, r2, #31
 8013f1a:	d404      	bmi.n	8013f26 <_fflush_r+0x32>
 8013f1c:	0599      	lsls	r1, r3, #22
 8013f1e:	d402      	bmi.n	8013f26 <_fflush_r+0x32>
 8013f20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013f22:	f7fd fba4 	bl	801166e <__retarget_lock_acquire_recursive>
 8013f26:	4628      	mov	r0, r5
 8013f28:	4621      	mov	r1, r4
 8013f2a:	f7ff ff5f 	bl	8013dec <__sflush_r>
 8013f2e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013f30:	07da      	lsls	r2, r3, #31
 8013f32:	4605      	mov	r5, r0
 8013f34:	d4e4      	bmi.n	8013f00 <_fflush_r+0xc>
 8013f36:	89a3      	ldrh	r3, [r4, #12]
 8013f38:	059b      	lsls	r3, r3, #22
 8013f3a:	d4e1      	bmi.n	8013f00 <_fflush_r+0xc>
 8013f3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013f3e:	f7fd fb97 	bl	8011670 <__retarget_lock_release_recursive>
 8013f42:	e7dd      	b.n	8013f00 <_fflush_r+0xc>

08013f44 <__swhatbuf_r>:
 8013f44:	b570      	push	{r4, r5, r6, lr}
 8013f46:	460c      	mov	r4, r1
 8013f48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013f4c:	2900      	cmp	r1, #0
 8013f4e:	b096      	sub	sp, #88	@ 0x58
 8013f50:	4615      	mov	r5, r2
 8013f52:	461e      	mov	r6, r3
 8013f54:	da0d      	bge.n	8013f72 <__swhatbuf_r+0x2e>
 8013f56:	89a3      	ldrh	r3, [r4, #12]
 8013f58:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013f5c:	f04f 0100 	mov.w	r1, #0
 8013f60:	bf14      	ite	ne
 8013f62:	2340      	movne	r3, #64	@ 0x40
 8013f64:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013f68:	2000      	movs	r0, #0
 8013f6a:	6031      	str	r1, [r6, #0]
 8013f6c:	602b      	str	r3, [r5, #0]
 8013f6e:	b016      	add	sp, #88	@ 0x58
 8013f70:	bd70      	pop	{r4, r5, r6, pc}
 8013f72:	466a      	mov	r2, sp
 8013f74:	f000 f874 	bl	8014060 <_fstat_r>
 8013f78:	2800      	cmp	r0, #0
 8013f7a:	dbec      	blt.n	8013f56 <__swhatbuf_r+0x12>
 8013f7c:	9901      	ldr	r1, [sp, #4]
 8013f7e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013f82:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013f86:	4259      	negs	r1, r3
 8013f88:	4159      	adcs	r1, r3
 8013f8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013f8e:	e7eb      	b.n	8013f68 <__swhatbuf_r+0x24>

08013f90 <__smakebuf_r>:
 8013f90:	898b      	ldrh	r3, [r1, #12]
 8013f92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013f94:	079d      	lsls	r5, r3, #30
 8013f96:	4606      	mov	r6, r0
 8013f98:	460c      	mov	r4, r1
 8013f9a:	d507      	bpl.n	8013fac <__smakebuf_r+0x1c>
 8013f9c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013fa0:	6023      	str	r3, [r4, #0]
 8013fa2:	6123      	str	r3, [r4, #16]
 8013fa4:	2301      	movs	r3, #1
 8013fa6:	6163      	str	r3, [r4, #20]
 8013fa8:	b003      	add	sp, #12
 8013faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013fac:	ab01      	add	r3, sp, #4
 8013fae:	466a      	mov	r2, sp
 8013fb0:	f7ff ffc8 	bl	8013f44 <__swhatbuf_r>
 8013fb4:	9f00      	ldr	r7, [sp, #0]
 8013fb6:	4605      	mov	r5, r0
 8013fb8:	4639      	mov	r1, r7
 8013fba:	4630      	mov	r0, r6
 8013fbc:	f7fc f924 	bl	8010208 <_malloc_r>
 8013fc0:	b948      	cbnz	r0, 8013fd6 <__smakebuf_r+0x46>
 8013fc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013fc6:	059a      	lsls	r2, r3, #22
 8013fc8:	d4ee      	bmi.n	8013fa8 <__smakebuf_r+0x18>
 8013fca:	f023 0303 	bic.w	r3, r3, #3
 8013fce:	f043 0302 	orr.w	r3, r3, #2
 8013fd2:	81a3      	strh	r3, [r4, #12]
 8013fd4:	e7e2      	b.n	8013f9c <__smakebuf_r+0xc>
 8013fd6:	89a3      	ldrh	r3, [r4, #12]
 8013fd8:	6020      	str	r0, [r4, #0]
 8013fda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013fde:	81a3      	strh	r3, [r4, #12]
 8013fe0:	9b01      	ldr	r3, [sp, #4]
 8013fe2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013fe6:	b15b      	cbz	r3, 8014000 <__smakebuf_r+0x70>
 8013fe8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013fec:	4630      	mov	r0, r6
 8013fee:	f000 f849 	bl	8014084 <_isatty_r>
 8013ff2:	b128      	cbz	r0, 8014000 <__smakebuf_r+0x70>
 8013ff4:	89a3      	ldrh	r3, [r4, #12]
 8013ff6:	f023 0303 	bic.w	r3, r3, #3
 8013ffa:	f043 0301 	orr.w	r3, r3, #1
 8013ffe:	81a3      	strh	r3, [r4, #12]
 8014000:	89a3      	ldrh	r3, [r4, #12]
 8014002:	431d      	orrs	r5, r3
 8014004:	81a5      	strh	r5, [r4, #12]
 8014006:	e7cf      	b.n	8013fa8 <__smakebuf_r+0x18>

08014008 <memmove>:
 8014008:	4288      	cmp	r0, r1
 801400a:	b510      	push	{r4, lr}
 801400c:	eb01 0402 	add.w	r4, r1, r2
 8014010:	d902      	bls.n	8014018 <memmove+0x10>
 8014012:	4284      	cmp	r4, r0
 8014014:	4623      	mov	r3, r4
 8014016:	d807      	bhi.n	8014028 <memmove+0x20>
 8014018:	1e43      	subs	r3, r0, #1
 801401a:	42a1      	cmp	r1, r4
 801401c:	d008      	beq.n	8014030 <memmove+0x28>
 801401e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014022:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014026:	e7f8      	b.n	801401a <memmove+0x12>
 8014028:	4402      	add	r2, r0
 801402a:	4601      	mov	r1, r0
 801402c:	428a      	cmp	r2, r1
 801402e:	d100      	bne.n	8014032 <memmove+0x2a>
 8014030:	bd10      	pop	{r4, pc}
 8014032:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014036:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801403a:	e7f7      	b.n	801402c <memmove+0x24>

0801403c <strncmp>:
 801403c:	b510      	push	{r4, lr}
 801403e:	b16a      	cbz	r2, 801405c <strncmp+0x20>
 8014040:	3901      	subs	r1, #1
 8014042:	1884      	adds	r4, r0, r2
 8014044:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014048:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801404c:	429a      	cmp	r2, r3
 801404e:	d103      	bne.n	8014058 <strncmp+0x1c>
 8014050:	42a0      	cmp	r0, r4
 8014052:	d001      	beq.n	8014058 <strncmp+0x1c>
 8014054:	2a00      	cmp	r2, #0
 8014056:	d1f5      	bne.n	8014044 <strncmp+0x8>
 8014058:	1ad0      	subs	r0, r2, r3
 801405a:	bd10      	pop	{r4, pc}
 801405c:	4610      	mov	r0, r2
 801405e:	e7fc      	b.n	801405a <strncmp+0x1e>

08014060 <_fstat_r>:
 8014060:	b538      	push	{r3, r4, r5, lr}
 8014062:	4d07      	ldr	r5, [pc, #28]	@ (8014080 <_fstat_r+0x20>)
 8014064:	2300      	movs	r3, #0
 8014066:	4604      	mov	r4, r0
 8014068:	4608      	mov	r0, r1
 801406a:	4611      	mov	r1, r2
 801406c:	602b      	str	r3, [r5, #0]
 801406e:	f7ee f911 	bl	8002294 <_fstat>
 8014072:	1c43      	adds	r3, r0, #1
 8014074:	d102      	bne.n	801407c <_fstat_r+0x1c>
 8014076:	682b      	ldr	r3, [r5, #0]
 8014078:	b103      	cbz	r3, 801407c <_fstat_r+0x1c>
 801407a:	6023      	str	r3, [r4, #0]
 801407c:	bd38      	pop	{r3, r4, r5, pc}
 801407e:	bf00      	nop
 8014080:	24004f84 	.word	0x24004f84

08014084 <_isatty_r>:
 8014084:	b538      	push	{r3, r4, r5, lr}
 8014086:	4d06      	ldr	r5, [pc, #24]	@ (80140a0 <_isatty_r+0x1c>)
 8014088:	2300      	movs	r3, #0
 801408a:	4604      	mov	r4, r0
 801408c:	4608      	mov	r0, r1
 801408e:	602b      	str	r3, [r5, #0]
 8014090:	f7ee f910 	bl	80022b4 <_isatty>
 8014094:	1c43      	adds	r3, r0, #1
 8014096:	d102      	bne.n	801409e <_isatty_r+0x1a>
 8014098:	682b      	ldr	r3, [r5, #0]
 801409a:	b103      	cbz	r3, 801409e <_isatty_r+0x1a>
 801409c:	6023      	str	r3, [r4, #0]
 801409e:	bd38      	pop	{r3, r4, r5, pc}
 80140a0:	24004f84 	.word	0x24004f84
 80140a4:	00000000 	.word	0x00000000

080140a8 <nan>:
 80140a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80140b0 <nan+0x8>
 80140ac:	4770      	bx	lr
 80140ae:	bf00      	nop
 80140b0:	00000000 	.word	0x00000000
 80140b4:	7ff80000 	.word	0x7ff80000

080140b8 <_calloc_r>:
 80140b8:	b570      	push	{r4, r5, r6, lr}
 80140ba:	fba1 5402 	umull	r5, r4, r1, r2
 80140be:	b93c      	cbnz	r4, 80140d0 <_calloc_r+0x18>
 80140c0:	4629      	mov	r1, r5
 80140c2:	f7fc f8a1 	bl	8010208 <_malloc_r>
 80140c6:	4606      	mov	r6, r0
 80140c8:	b928      	cbnz	r0, 80140d6 <_calloc_r+0x1e>
 80140ca:	2600      	movs	r6, #0
 80140cc:	4630      	mov	r0, r6
 80140ce:	bd70      	pop	{r4, r5, r6, pc}
 80140d0:	220c      	movs	r2, #12
 80140d2:	6002      	str	r2, [r0, #0]
 80140d4:	e7f9      	b.n	80140ca <_calloc_r+0x12>
 80140d6:	462a      	mov	r2, r5
 80140d8:	4621      	mov	r1, r4
 80140da:	f7fd f9a1 	bl	8011420 <memset>
 80140de:	e7f5      	b.n	80140cc <_calloc_r+0x14>

080140e0 <rshift>:
 80140e0:	6903      	ldr	r3, [r0, #16]
 80140e2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80140e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80140ea:	ea4f 1261 	mov.w	r2, r1, asr #5
 80140ee:	f100 0414 	add.w	r4, r0, #20
 80140f2:	dd45      	ble.n	8014180 <rshift+0xa0>
 80140f4:	f011 011f 	ands.w	r1, r1, #31
 80140f8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80140fc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8014100:	d10c      	bne.n	801411c <rshift+0x3c>
 8014102:	f100 0710 	add.w	r7, r0, #16
 8014106:	4629      	mov	r1, r5
 8014108:	42b1      	cmp	r1, r6
 801410a:	d334      	bcc.n	8014176 <rshift+0x96>
 801410c:	1a9b      	subs	r3, r3, r2
 801410e:	009b      	lsls	r3, r3, #2
 8014110:	1eea      	subs	r2, r5, #3
 8014112:	4296      	cmp	r6, r2
 8014114:	bf38      	it	cc
 8014116:	2300      	movcc	r3, #0
 8014118:	4423      	add	r3, r4
 801411a:	e015      	b.n	8014148 <rshift+0x68>
 801411c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8014120:	f1c1 0820 	rsb	r8, r1, #32
 8014124:	40cf      	lsrs	r7, r1
 8014126:	f105 0e04 	add.w	lr, r5, #4
 801412a:	46a1      	mov	r9, r4
 801412c:	4576      	cmp	r6, lr
 801412e:	46f4      	mov	ip, lr
 8014130:	d815      	bhi.n	801415e <rshift+0x7e>
 8014132:	1a9a      	subs	r2, r3, r2
 8014134:	0092      	lsls	r2, r2, #2
 8014136:	3a04      	subs	r2, #4
 8014138:	3501      	adds	r5, #1
 801413a:	42ae      	cmp	r6, r5
 801413c:	bf38      	it	cc
 801413e:	2200      	movcc	r2, #0
 8014140:	18a3      	adds	r3, r4, r2
 8014142:	50a7      	str	r7, [r4, r2]
 8014144:	b107      	cbz	r7, 8014148 <rshift+0x68>
 8014146:	3304      	adds	r3, #4
 8014148:	1b1a      	subs	r2, r3, r4
 801414a:	42a3      	cmp	r3, r4
 801414c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014150:	bf08      	it	eq
 8014152:	2300      	moveq	r3, #0
 8014154:	6102      	str	r2, [r0, #16]
 8014156:	bf08      	it	eq
 8014158:	6143      	streq	r3, [r0, #20]
 801415a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801415e:	f8dc c000 	ldr.w	ip, [ip]
 8014162:	fa0c fc08 	lsl.w	ip, ip, r8
 8014166:	ea4c 0707 	orr.w	r7, ip, r7
 801416a:	f849 7b04 	str.w	r7, [r9], #4
 801416e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014172:	40cf      	lsrs	r7, r1
 8014174:	e7da      	b.n	801412c <rshift+0x4c>
 8014176:	f851 cb04 	ldr.w	ip, [r1], #4
 801417a:	f847 cf04 	str.w	ip, [r7, #4]!
 801417e:	e7c3      	b.n	8014108 <rshift+0x28>
 8014180:	4623      	mov	r3, r4
 8014182:	e7e1      	b.n	8014148 <rshift+0x68>

08014184 <__hexdig_fun>:
 8014184:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8014188:	2b09      	cmp	r3, #9
 801418a:	d802      	bhi.n	8014192 <__hexdig_fun+0xe>
 801418c:	3820      	subs	r0, #32
 801418e:	b2c0      	uxtb	r0, r0
 8014190:	4770      	bx	lr
 8014192:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8014196:	2b05      	cmp	r3, #5
 8014198:	d801      	bhi.n	801419e <__hexdig_fun+0x1a>
 801419a:	3847      	subs	r0, #71	@ 0x47
 801419c:	e7f7      	b.n	801418e <__hexdig_fun+0xa>
 801419e:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80141a2:	2b05      	cmp	r3, #5
 80141a4:	d801      	bhi.n	80141aa <__hexdig_fun+0x26>
 80141a6:	3827      	subs	r0, #39	@ 0x27
 80141a8:	e7f1      	b.n	801418e <__hexdig_fun+0xa>
 80141aa:	2000      	movs	r0, #0
 80141ac:	4770      	bx	lr
	...

080141b0 <__gethex>:
 80141b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141b4:	b085      	sub	sp, #20
 80141b6:	468a      	mov	sl, r1
 80141b8:	9302      	str	r3, [sp, #8]
 80141ba:	680b      	ldr	r3, [r1, #0]
 80141bc:	9001      	str	r0, [sp, #4]
 80141be:	4690      	mov	r8, r2
 80141c0:	1c9c      	adds	r4, r3, #2
 80141c2:	46a1      	mov	r9, r4
 80141c4:	f814 0b01 	ldrb.w	r0, [r4], #1
 80141c8:	2830      	cmp	r0, #48	@ 0x30
 80141ca:	d0fa      	beq.n	80141c2 <__gethex+0x12>
 80141cc:	eba9 0303 	sub.w	r3, r9, r3
 80141d0:	f1a3 0b02 	sub.w	fp, r3, #2
 80141d4:	f7ff ffd6 	bl	8014184 <__hexdig_fun>
 80141d8:	4605      	mov	r5, r0
 80141da:	2800      	cmp	r0, #0
 80141dc:	d168      	bne.n	80142b0 <__gethex+0x100>
 80141de:	49a0      	ldr	r1, [pc, #640]	@ (8014460 <__gethex+0x2b0>)
 80141e0:	2201      	movs	r2, #1
 80141e2:	4648      	mov	r0, r9
 80141e4:	f7ff ff2a 	bl	801403c <strncmp>
 80141e8:	4607      	mov	r7, r0
 80141ea:	2800      	cmp	r0, #0
 80141ec:	d167      	bne.n	80142be <__gethex+0x10e>
 80141ee:	f899 0001 	ldrb.w	r0, [r9, #1]
 80141f2:	4626      	mov	r6, r4
 80141f4:	f7ff ffc6 	bl	8014184 <__hexdig_fun>
 80141f8:	2800      	cmp	r0, #0
 80141fa:	d062      	beq.n	80142c2 <__gethex+0x112>
 80141fc:	4623      	mov	r3, r4
 80141fe:	7818      	ldrb	r0, [r3, #0]
 8014200:	2830      	cmp	r0, #48	@ 0x30
 8014202:	4699      	mov	r9, r3
 8014204:	f103 0301 	add.w	r3, r3, #1
 8014208:	d0f9      	beq.n	80141fe <__gethex+0x4e>
 801420a:	f7ff ffbb 	bl	8014184 <__hexdig_fun>
 801420e:	fab0 f580 	clz	r5, r0
 8014212:	096d      	lsrs	r5, r5, #5
 8014214:	f04f 0b01 	mov.w	fp, #1
 8014218:	464a      	mov	r2, r9
 801421a:	4616      	mov	r6, r2
 801421c:	3201      	adds	r2, #1
 801421e:	7830      	ldrb	r0, [r6, #0]
 8014220:	f7ff ffb0 	bl	8014184 <__hexdig_fun>
 8014224:	2800      	cmp	r0, #0
 8014226:	d1f8      	bne.n	801421a <__gethex+0x6a>
 8014228:	498d      	ldr	r1, [pc, #564]	@ (8014460 <__gethex+0x2b0>)
 801422a:	2201      	movs	r2, #1
 801422c:	4630      	mov	r0, r6
 801422e:	f7ff ff05 	bl	801403c <strncmp>
 8014232:	2800      	cmp	r0, #0
 8014234:	d13f      	bne.n	80142b6 <__gethex+0x106>
 8014236:	b944      	cbnz	r4, 801424a <__gethex+0x9a>
 8014238:	1c74      	adds	r4, r6, #1
 801423a:	4622      	mov	r2, r4
 801423c:	4616      	mov	r6, r2
 801423e:	3201      	adds	r2, #1
 8014240:	7830      	ldrb	r0, [r6, #0]
 8014242:	f7ff ff9f 	bl	8014184 <__hexdig_fun>
 8014246:	2800      	cmp	r0, #0
 8014248:	d1f8      	bne.n	801423c <__gethex+0x8c>
 801424a:	1ba4      	subs	r4, r4, r6
 801424c:	00a7      	lsls	r7, r4, #2
 801424e:	7833      	ldrb	r3, [r6, #0]
 8014250:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8014254:	2b50      	cmp	r3, #80	@ 0x50
 8014256:	d13e      	bne.n	80142d6 <__gethex+0x126>
 8014258:	7873      	ldrb	r3, [r6, #1]
 801425a:	2b2b      	cmp	r3, #43	@ 0x2b
 801425c:	d033      	beq.n	80142c6 <__gethex+0x116>
 801425e:	2b2d      	cmp	r3, #45	@ 0x2d
 8014260:	d034      	beq.n	80142cc <__gethex+0x11c>
 8014262:	1c71      	adds	r1, r6, #1
 8014264:	2400      	movs	r4, #0
 8014266:	7808      	ldrb	r0, [r1, #0]
 8014268:	f7ff ff8c 	bl	8014184 <__hexdig_fun>
 801426c:	1e43      	subs	r3, r0, #1
 801426e:	b2db      	uxtb	r3, r3
 8014270:	2b18      	cmp	r3, #24
 8014272:	d830      	bhi.n	80142d6 <__gethex+0x126>
 8014274:	f1a0 0210 	sub.w	r2, r0, #16
 8014278:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801427c:	f7ff ff82 	bl	8014184 <__hexdig_fun>
 8014280:	f100 3cff 	add.w	ip, r0, #4294967295
 8014284:	fa5f fc8c 	uxtb.w	ip, ip
 8014288:	f1bc 0f18 	cmp.w	ip, #24
 801428c:	f04f 030a 	mov.w	r3, #10
 8014290:	d91e      	bls.n	80142d0 <__gethex+0x120>
 8014292:	b104      	cbz	r4, 8014296 <__gethex+0xe6>
 8014294:	4252      	negs	r2, r2
 8014296:	4417      	add	r7, r2
 8014298:	f8ca 1000 	str.w	r1, [sl]
 801429c:	b1ed      	cbz	r5, 80142da <__gethex+0x12a>
 801429e:	f1bb 0f00 	cmp.w	fp, #0
 80142a2:	bf0c      	ite	eq
 80142a4:	2506      	moveq	r5, #6
 80142a6:	2500      	movne	r5, #0
 80142a8:	4628      	mov	r0, r5
 80142aa:	b005      	add	sp, #20
 80142ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142b0:	2500      	movs	r5, #0
 80142b2:	462c      	mov	r4, r5
 80142b4:	e7b0      	b.n	8014218 <__gethex+0x68>
 80142b6:	2c00      	cmp	r4, #0
 80142b8:	d1c7      	bne.n	801424a <__gethex+0x9a>
 80142ba:	4627      	mov	r7, r4
 80142bc:	e7c7      	b.n	801424e <__gethex+0x9e>
 80142be:	464e      	mov	r6, r9
 80142c0:	462f      	mov	r7, r5
 80142c2:	2501      	movs	r5, #1
 80142c4:	e7c3      	b.n	801424e <__gethex+0x9e>
 80142c6:	2400      	movs	r4, #0
 80142c8:	1cb1      	adds	r1, r6, #2
 80142ca:	e7cc      	b.n	8014266 <__gethex+0xb6>
 80142cc:	2401      	movs	r4, #1
 80142ce:	e7fb      	b.n	80142c8 <__gethex+0x118>
 80142d0:	fb03 0002 	mla	r0, r3, r2, r0
 80142d4:	e7ce      	b.n	8014274 <__gethex+0xc4>
 80142d6:	4631      	mov	r1, r6
 80142d8:	e7de      	b.n	8014298 <__gethex+0xe8>
 80142da:	eba6 0309 	sub.w	r3, r6, r9
 80142de:	3b01      	subs	r3, #1
 80142e0:	4629      	mov	r1, r5
 80142e2:	2b07      	cmp	r3, #7
 80142e4:	dc0a      	bgt.n	80142fc <__gethex+0x14c>
 80142e6:	9801      	ldr	r0, [sp, #4]
 80142e8:	f7fe f802 	bl	80122f0 <_Balloc>
 80142ec:	4604      	mov	r4, r0
 80142ee:	b940      	cbnz	r0, 8014302 <__gethex+0x152>
 80142f0:	4b5c      	ldr	r3, [pc, #368]	@ (8014464 <__gethex+0x2b4>)
 80142f2:	4602      	mov	r2, r0
 80142f4:	21e4      	movs	r1, #228	@ 0xe4
 80142f6:	485c      	ldr	r0, [pc, #368]	@ (8014468 <__gethex+0x2b8>)
 80142f8:	f7fb ff36 	bl	8010168 <__assert_func>
 80142fc:	3101      	adds	r1, #1
 80142fe:	105b      	asrs	r3, r3, #1
 8014300:	e7ef      	b.n	80142e2 <__gethex+0x132>
 8014302:	f100 0a14 	add.w	sl, r0, #20
 8014306:	2300      	movs	r3, #0
 8014308:	4655      	mov	r5, sl
 801430a:	469b      	mov	fp, r3
 801430c:	45b1      	cmp	r9, r6
 801430e:	d337      	bcc.n	8014380 <__gethex+0x1d0>
 8014310:	f845 bb04 	str.w	fp, [r5], #4
 8014314:	eba5 050a 	sub.w	r5, r5, sl
 8014318:	10ad      	asrs	r5, r5, #2
 801431a:	6125      	str	r5, [r4, #16]
 801431c:	4658      	mov	r0, fp
 801431e:	f7fe f8d9 	bl	80124d4 <__hi0bits>
 8014322:	016d      	lsls	r5, r5, #5
 8014324:	f8d8 6000 	ldr.w	r6, [r8]
 8014328:	1a2d      	subs	r5, r5, r0
 801432a:	42b5      	cmp	r5, r6
 801432c:	dd54      	ble.n	80143d8 <__gethex+0x228>
 801432e:	1bad      	subs	r5, r5, r6
 8014330:	4629      	mov	r1, r5
 8014332:	4620      	mov	r0, r4
 8014334:	f7fe fc6a 	bl	8012c0c <__any_on>
 8014338:	4681      	mov	r9, r0
 801433a:	b178      	cbz	r0, 801435c <__gethex+0x1ac>
 801433c:	1e6b      	subs	r3, r5, #1
 801433e:	1159      	asrs	r1, r3, #5
 8014340:	f003 021f 	and.w	r2, r3, #31
 8014344:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8014348:	f04f 0901 	mov.w	r9, #1
 801434c:	fa09 f202 	lsl.w	r2, r9, r2
 8014350:	420a      	tst	r2, r1
 8014352:	d003      	beq.n	801435c <__gethex+0x1ac>
 8014354:	454b      	cmp	r3, r9
 8014356:	dc36      	bgt.n	80143c6 <__gethex+0x216>
 8014358:	f04f 0902 	mov.w	r9, #2
 801435c:	4629      	mov	r1, r5
 801435e:	4620      	mov	r0, r4
 8014360:	f7ff febe 	bl	80140e0 <rshift>
 8014364:	442f      	add	r7, r5
 8014366:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801436a:	42bb      	cmp	r3, r7
 801436c:	da42      	bge.n	80143f4 <__gethex+0x244>
 801436e:	9801      	ldr	r0, [sp, #4]
 8014370:	4621      	mov	r1, r4
 8014372:	f7fd fffd 	bl	8012370 <_Bfree>
 8014376:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014378:	2300      	movs	r3, #0
 801437a:	6013      	str	r3, [r2, #0]
 801437c:	25a3      	movs	r5, #163	@ 0xa3
 801437e:	e793      	b.n	80142a8 <__gethex+0xf8>
 8014380:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8014384:	2a2e      	cmp	r2, #46	@ 0x2e
 8014386:	d012      	beq.n	80143ae <__gethex+0x1fe>
 8014388:	2b20      	cmp	r3, #32
 801438a:	d104      	bne.n	8014396 <__gethex+0x1e6>
 801438c:	f845 bb04 	str.w	fp, [r5], #4
 8014390:	f04f 0b00 	mov.w	fp, #0
 8014394:	465b      	mov	r3, fp
 8014396:	7830      	ldrb	r0, [r6, #0]
 8014398:	9303      	str	r3, [sp, #12]
 801439a:	f7ff fef3 	bl	8014184 <__hexdig_fun>
 801439e:	9b03      	ldr	r3, [sp, #12]
 80143a0:	f000 000f 	and.w	r0, r0, #15
 80143a4:	4098      	lsls	r0, r3
 80143a6:	ea4b 0b00 	orr.w	fp, fp, r0
 80143aa:	3304      	adds	r3, #4
 80143ac:	e7ae      	b.n	801430c <__gethex+0x15c>
 80143ae:	45b1      	cmp	r9, r6
 80143b0:	d8ea      	bhi.n	8014388 <__gethex+0x1d8>
 80143b2:	492b      	ldr	r1, [pc, #172]	@ (8014460 <__gethex+0x2b0>)
 80143b4:	9303      	str	r3, [sp, #12]
 80143b6:	2201      	movs	r2, #1
 80143b8:	4630      	mov	r0, r6
 80143ba:	f7ff fe3f 	bl	801403c <strncmp>
 80143be:	9b03      	ldr	r3, [sp, #12]
 80143c0:	2800      	cmp	r0, #0
 80143c2:	d1e1      	bne.n	8014388 <__gethex+0x1d8>
 80143c4:	e7a2      	b.n	801430c <__gethex+0x15c>
 80143c6:	1ea9      	subs	r1, r5, #2
 80143c8:	4620      	mov	r0, r4
 80143ca:	f7fe fc1f 	bl	8012c0c <__any_on>
 80143ce:	2800      	cmp	r0, #0
 80143d0:	d0c2      	beq.n	8014358 <__gethex+0x1a8>
 80143d2:	f04f 0903 	mov.w	r9, #3
 80143d6:	e7c1      	b.n	801435c <__gethex+0x1ac>
 80143d8:	da09      	bge.n	80143ee <__gethex+0x23e>
 80143da:	1b75      	subs	r5, r6, r5
 80143dc:	4621      	mov	r1, r4
 80143de:	9801      	ldr	r0, [sp, #4]
 80143e0:	462a      	mov	r2, r5
 80143e2:	f7fe f9dd 	bl	80127a0 <__lshift>
 80143e6:	1b7f      	subs	r7, r7, r5
 80143e8:	4604      	mov	r4, r0
 80143ea:	f100 0a14 	add.w	sl, r0, #20
 80143ee:	f04f 0900 	mov.w	r9, #0
 80143f2:	e7b8      	b.n	8014366 <__gethex+0x1b6>
 80143f4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80143f8:	42bd      	cmp	r5, r7
 80143fa:	dd6f      	ble.n	80144dc <__gethex+0x32c>
 80143fc:	1bed      	subs	r5, r5, r7
 80143fe:	42ae      	cmp	r6, r5
 8014400:	dc34      	bgt.n	801446c <__gethex+0x2bc>
 8014402:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014406:	2b02      	cmp	r3, #2
 8014408:	d022      	beq.n	8014450 <__gethex+0x2a0>
 801440a:	2b03      	cmp	r3, #3
 801440c:	d024      	beq.n	8014458 <__gethex+0x2a8>
 801440e:	2b01      	cmp	r3, #1
 8014410:	d115      	bne.n	801443e <__gethex+0x28e>
 8014412:	42ae      	cmp	r6, r5
 8014414:	d113      	bne.n	801443e <__gethex+0x28e>
 8014416:	2e01      	cmp	r6, #1
 8014418:	d10b      	bne.n	8014432 <__gethex+0x282>
 801441a:	9a02      	ldr	r2, [sp, #8]
 801441c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014420:	6013      	str	r3, [r2, #0]
 8014422:	2301      	movs	r3, #1
 8014424:	6123      	str	r3, [r4, #16]
 8014426:	f8ca 3000 	str.w	r3, [sl]
 801442a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801442c:	2562      	movs	r5, #98	@ 0x62
 801442e:	601c      	str	r4, [r3, #0]
 8014430:	e73a      	b.n	80142a8 <__gethex+0xf8>
 8014432:	1e71      	subs	r1, r6, #1
 8014434:	4620      	mov	r0, r4
 8014436:	f7fe fbe9 	bl	8012c0c <__any_on>
 801443a:	2800      	cmp	r0, #0
 801443c:	d1ed      	bne.n	801441a <__gethex+0x26a>
 801443e:	9801      	ldr	r0, [sp, #4]
 8014440:	4621      	mov	r1, r4
 8014442:	f7fd ff95 	bl	8012370 <_Bfree>
 8014446:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014448:	2300      	movs	r3, #0
 801444a:	6013      	str	r3, [r2, #0]
 801444c:	2550      	movs	r5, #80	@ 0x50
 801444e:	e72b      	b.n	80142a8 <__gethex+0xf8>
 8014450:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014452:	2b00      	cmp	r3, #0
 8014454:	d1f3      	bne.n	801443e <__gethex+0x28e>
 8014456:	e7e0      	b.n	801441a <__gethex+0x26a>
 8014458:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801445a:	2b00      	cmp	r3, #0
 801445c:	d1dd      	bne.n	801441a <__gethex+0x26a>
 801445e:	e7ee      	b.n	801443e <__gethex+0x28e>
 8014460:	080151f0 	.word	0x080151f0
 8014464:	08015089 	.word	0x08015089
 8014468:	08015362 	.word	0x08015362
 801446c:	1e6f      	subs	r7, r5, #1
 801446e:	f1b9 0f00 	cmp.w	r9, #0
 8014472:	d130      	bne.n	80144d6 <__gethex+0x326>
 8014474:	b127      	cbz	r7, 8014480 <__gethex+0x2d0>
 8014476:	4639      	mov	r1, r7
 8014478:	4620      	mov	r0, r4
 801447a:	f7fe fbc7 	bl	8012c0c <__any_on>
 801447e:	4681      	mov	r9, r0
 8014480:	117a      	asrs	r2, r7, #5
 8014482:	2301      	movs	r3, #1
 8014484:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8014488:	f007 071f 	and.w	r7, r7, #31
 801448c:	40bb      	lsls	r3, r7
 801448e:	4213      	tst	r3, r2
 8014490:	4629      	mov	r1, r5
 8014492:	4620      	mov	r0, r4
 8014494:	bf18      	it	ne
 8014496:	f049 0902 	orrne.w	r9, r9, #2
 801449a:	f7ff fe21 	bl	80140e0 <rshift>
 801449e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80144a2:	1b76      	subs	r6, r6, r5
 80144a4:	2502      	movs	r5, #2
 80144a6:	f1b9 0f00 	cmp.w	r9, #0
 80144aa:	d047      	beq.n	801453c <__gethex+0x38c>
 80144ac:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80144b0:	2b02      	cmp	r3, #2
 80144b2:	d015      	beq.n	80144e0 <__gethex+0x330>
 80144b4:	2b03      	cmp	r3, #3
 80144b6:	d017      	beq.n	80144e8 <__gethex+0x338>
 80144b8:	2b01      	cmp	r3, #1
 80144ba:	d109      	bne.n	80144d0 <__gethex+0x320>
 80144bc:	f019 0f02 	tst.w	r9, #2
 80144c0:	d006      	beq.n	80144d0 <__gethex+0x320>
 80144c2:	f8da 3000 	ldr.w	r3, [sl]
 80144c6:	ea49 0903 	orr.w	r9, r9, r3
 80144ca:	f019 0f01 	tst.w	r9, #1
 80144ce:	d10e      	bne.n	80144ee <__gethex+0x33e>
 80144d0:	f045 0510 	orr.w	r5, r5, #16
 80144d4:	e032      	b.n	801453c <__gethex+0x38c>
 80144d6:	f04f 0901 	mov.w	r9, #1
 80144da:	e7d1      	b.n	8014480 <__gethex+0x2d0>
 80144dc:	2501      	movs	r5, #1
 80144de:	e7e2      	b.n	80144a6 <__gethex+0x2f6>
 80144e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80144e2:	f1c3 0301 	rsb	r3, r3, #1
 80144e6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80144e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d0f0      	beq.n	80144d0 <__gethex+0x320>
 80144ee:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80144f2:	f104 0314 	add.w	r3, r4, #20
 80144f6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80144fa:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80144fe:	f04f 0c00 	mov.w	ip, #0
 8014502:	4618      	mov	r0, r3
 8014504:	f853 2b04 	ldr.w	r2, [r3], #4
 8014508:	f1b2 3fff 	cmp.w	r2, #4294967295
 801450c:	d01b      	beq.n	8014546 <__gethex+0x396>
 801450e:	3201      	adds	r2, #1
 8014510:	6002      	str	r2, [r0, #0]
 8014512:	2d02      	cmp	r5, #2
 8014514:	f104 0314 	add.w	r3, r4, #20
 8014518:	d13c      	bne.n	8014594 <__gethex+0x3e4>
 801451a:	f8d8 2000 	ldr.w	r2, [r8]
 801451e:	3a01      	subs	r2, #1
 8014520:	42b2      	cmp	r2, r6
 8014522:	d109      	bne.n	8014538 <__gethex+0x388>
 8014524:	1171      	asrs	r1, r6, #5
 8014526:	2201      	movs	r2, #1
 8014528:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801452c:	f006 061f 	and.w	r6, r6, #31
 8014530:	fa02 f606 	lsl.w	r6, r2, r6
 8014534:	421e      	tst	r6, r3
 8014536:	d13a      	bne.n	80145ae <__gethex+0x3fe>
 8014538:	f045 0520 	orr.w	r5, r5, #32
 801453c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801453e:	601c      	str	r4, [r3, #0]
 8014540:	9b02      	ldr	r3, [sp, #8]
 8014542:	601f      	str	r7, [r3, #0]
 8014544:	e6b0      	b.n	80142a8 <__gethex+0xf8>
 8014546:	4299      	cmp	r1, r3
 8014548:	f843 cc04 	str.w	ip, [r3, #-4]
 801454c:	d8d9      	bhi.n	8014502 <__gethex+0x352>
 801454e:	68a3      	ldr	r3, [r4, #8]
 8014550:	459b      	cmp	fp, r3
 8014552:	db17      	blt.n	8014584 <__gethex+0x3d4>
 8014554:	6861      	ldr	r1, [r4, #4]
 8014556:	9801      	ldr	r0, [sp, #4]
 8014558:	3101      	adds	r1, #1
 801455a:	f7fd fec9 	bl	80122f0 <_Balloc>
 801455e:	4681      	mov	r9, r0
 8014560:	b918      	cbnz	r0, 801456a <__gethex+0x3ba>
 8014562:	4b1a      	ldr	r3, [pc, #104]	@ (80145cc <__gethex+0x41c>)
 8014564:	4602      	mov	r2, r0
 8014566:	2184      	movs	r1, #132	@ 0x84
 8014568:	e6c5      	b.n	80142f6 <__gethex+0x146>
 801456a:	6922      	ldr	r2, [r4, #16]
 801456c:	3202      	adds	r2, #2
 801456e:	f104 010c 	add.w	r1, r4, #12
 8014572:	0092      	lsls	r2, r2, #2
 8014574:	300c      	adds	r0, #12
 8014576:	f7fd f87c 	bl	8011672 <memcpy>
 801457a:	4621      	mov	r1, r4
 801457c:	9801      	ldr	r0, [sp, #4]
 801457e:	f7fd fef7 	bl	8012370 <_Bfree>
 8014582:	464c      	mov	r4, r9
 8014584:	6923      	ldr	r3, [r4, #16]
 8014586:	1c5a      	adds	r2, r3, #1
 8014588:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801458c:	6122      	str	r2, [r4, #16]
 801458e:	2201      	movs	r2, #1
 8014590:	615a      	str	r2, [r3, #20]
 8014592:	e7be      	b.n	8014512 <__gethex+0x362>
 8014594:	6922      	ldr	r2, [r4, #16]
 8014596:	455a      	cmp	r2, fp
 8014598:	dd0b      	ble.n	80145b2 <__gethex+0x402>
 801459a:	2101      	movs	r1, #1
 801459c:	4620      	mov	r0, r4
 801459e:	f7ff fd9f 	bl	80140e0 <rshift>
 80145a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80145a6:	3701      	adds	r7, #1
 80145a8:	42bb      	cmp	r3, r7
 80145aa:	f6ff aee0 	blt.w	801436e <__gethex+0x1be>
 80145ae:	2501      	movs	r5, #1
 80145b0:	e7c2      	b.n	8014538 <__gethex+0x388>
 80145b2:	f016 061f 	ands.w	r6, r6, #31
 80145b6:	d0fa      	beq.n	80145ae <__gethex+0x3fe>
 80145b8:	4453      	add	r3, sl
 80145ba:	f1c6 0620 	rsb	r6, r6, #32
 80145be:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80145c2:	f7fd ff87 	bl	80124d4 <__hi0bits>
 80145c6:	42b0      	cmp	r0, r6
 80145c8:	dbe7      	blt.n	801459a <__gethex+0x3ea>
 80145ca:	e7f0      	b.n	80145ae <__gethex+0x3fe>
 80145cc:	08015089 	.word	0x08015089

080145d0 <L_shift>:
 80145d0:	f1c2 0208 	rsb	r2, r2, #8
 80145d4:	0092      	lsls	r2, r2, #2
 80145d6:	b570      	push	{r4, r5, r6, lr}
 80145d8:	f1c2 0620 	rsb	r6, r2, #32
 80145dc:	6843      	ldr	r3, [r0, #4]
 80145de:	6804      	ldr	r4, [r0, #0]
 80145e0:	fa03 f506 	lsl.w	r5, r3, r6
 80145e4:	432c      	orrs	r4, r5
 80145e6:	40d3      	lsrs	r3, r2
 80145e8:	6004      	str	r4, [r0, #0]
 80145ea:	f840 3f04 	str.w	r3, [r0, #4]!
 80145ee:	4288      	cmp	r0, r1
 80145f0:	d3f4      	bcc.n	80145dc <L_shift+0xc>
 80145f2:	bd70      	pop	{r4, r5, r6, pc}

080145f4 <__match>:
 80145f4:	b530      	push	{r4, r5, lr}
 80145f6:	6803      	ldr	r3, [r0, #0]
 80145f8:	3301      	adds	r3, #1
 80145fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80145fe:	b914      	cbnz	r4, 8014606 <__match+0x12>
 8014600:	6003      	str	r3, [r0, #0]
 8014602:	2001      	movs	r0, #1
 8014604:	bd30      	pop	{r4, r5, pc}
 8014606:	f813 2b01 	ldrb.w	r2, [r3], #1
 801460a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801460e:	2d19      	cmp	r5, #25
 8014610:	bf98      	it	ls
 8014612:	3220      	addls	r2, #32
 8014614:	42a2      	cmp	r2, r4
 8014616:	d0f0      	beq.n	80145fa <__match+0x6>
 8014618:	2000      	movs	r0, #0
 801461a:	e7f3      	b.n	8014604 <__match+0x10>

0801461c <__hexnan>:
 801461c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014620:	680b      	ldr	r3, [r1, #0]
 8014622:	6801      	ldr	r1, [r0, #0]
 8014624:	115e      	asrs	r6, r3, #5
 8014626:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801462a:	f013 031f 	ands.w	r3, r3, #31
 801462e:	b087      	sub	sp, #28
 8014630:	bf18      	it	ne
 8014632:	3604      	addne	r6, #4
 8014634:	2500      	movs	r5, #0
 8014636:	1f37      	subs	r7, r6, #4
 8014638:	4682      	mov	sl, r0
 801463a:	4690      	mov	r8, r2
 801463c:	9301      	str	r3, [sp, #4]
 801463e:	f846 5c04 	str.w	r5, [r6, #-4]
 8014642:	46b9      	mov	r9, r7
 8014644:	463c      	mov	r4, r7
 8014646:	9502      	str	r5, [sp, #8]
 8014648:	46ab      	mov	fp, r5
 801464a:	784a      	ldrb	r2, [r1, #1]
 801464c:	1c4b      	adds	r3, r1, #1
 801464e:	9303      	str	r3, [sp, #12]
 8014650:	b342      	cbz	r2, 80146a4 <__hexnan+0x88>
 8014652:	4610      	mov	r0, r2
 8014654:	9105      	str	r1, [sp, #20]
 8014656:	9204      	str	r2, [sp, #16]
 8014658:	f7ff fd94 	bl	8014184 <__hexdig_fun>
 801465c:	2800      	cmp	r0, #0
 801465e:	d151      	bne.n	8014704 <__hexnan+0xe8>
 8014660:	9a04      	ldr	r2, [sp, #16]
 8014662:	9905      	ldr	r1, [sp, #20]
 8014664:	2a20      	cmp	r2, #32
 8014666:	d818      	bhi.n	801469a <__hexnan+0x7e>
 8014668:	9b02      	ldr	r3, [sp, #8]
 801466a:	459b      	cmp	fp, r3
 801466c:	dd13      	ble.n	8014696 <__hexnan+0x7a>
 801466e:	454c      	cmp	r4, r9
 8014670:	d206      	bcs.n	8014680 <__hexnan+0x64>
 8014672:	2d07      	cmp	r5, #7
 8014674:	dc04      	bgt.n	8014680 <__hexnan+0x64>
 8014676:	462a      	mov	r2, r5
 8014678:	4649      	mov	r1, r9
 801467a:	4620      	mov	r0, r4
 801467c:	f7ff ffa8 	bl	80145d0 <L_shift>
 8014680:	4544      	cmp	r4, r8
 8014682:	d952      	bls.n	801472a <__hexnan+0x10e>
 8014684:	2300      	movs	r3, #0
 8014686:	f1a4 0904 	sub.w	r9, r4, #4
 801468a:	f844 3c04 	str.w	r3, [r4, #-4]
 801468e:	f8cd b008 	str.w	fp, [sp, #8]
 8014692:	464c      	mov	r4, r9
 8014694:	461d      	mov	r5, r3
 8014696:	9903      	ldr	r1, [sp, #12]
 8014698:	e7d7      	b.n	801464a <__hexnan+0x2e>
 801469a:	2a29      	cmp	r2, #41	@ 0x29
 801469c:	d157      	bne.n	801474e <__hexnan+0x132>
 801469e:	3102      	adds	r1, #2
 80146a0:	f8ca 1000 	str.w	r1, [sl]
 80146a4:	f1bb 0f00 	cmp.w	fp, #0
 80146a8:	d051      	beq.n	801474e <__hexnan+0x132>
 80146aa:	454c      	cmp	r4, r9
 80146ac:	d206      	bcs.n	80146bc <__hexnan+0xa0>
 80146ae:	2d07      	cmp	r5, #7
 80146b0:	dc04      	bgt.n	80146bc <__hexnan+0xa0>
 80146b2:	462a      	mov	r2, r5
 80146b4:	4649      	mov	r1, r9
 80146b6:	4620      	mov	r0, r4
 80146b8:	f7ff ff8a 	bl	80145d0 <L_shift>
 80146bc:	4544      	cmp	r4, r8
 80146be:	d936      	bls.n	801472e <__hexnan+0x112>
 80146c0:	f1a8 0204 	sub.w	r2, r8, #4
 80146c4:	4623      	mov	r3, r4
 80146c6:	f853 1b04 	ldr.w	r1, [r3], #4
 80146ca:	f842 1f04 	str.w	r1, [r2, #4]!
 80146ce:	429f      	cmp	r7, r3
 80146d0:	d2f9      	bcs.n	80146c6 <__hexnan+0xaa>
 80146d2:	1b3b      	subs	r3, r7, r4
 80146d4:	f023 0303 	bic.w	r3, r3, #3
 80146d8:	3304      	adds	r3, #4
 80146da:	3401      	adds	r4, #1
 80146dc:	3e03      	subs	r6, #3
 80146de:	42b4      	cmp	r4, r6
 80146e0:	bf88      	it	hi
 80146e2:	2304      	movhi	r3, #4
 80146e4:	4443      	add	r3, r8
 80146e6:	2200      	movs	r2, #0
 80146e8:	f843 2b04 	str.w	r2, [r3], #4
 80146ec:	429f      	cmp	r7, r3
 80146ee:	d2fb      	bcs.n	80146e8 <__hexnan+0xcc>
 80146f0:	683b      	ldr	r3, [r7, #0]
 80146f2:	b91b      	cbnz	r3, 80146fc <__hexnan+0xe0>
 80146f4:	4547      	cmp	r7, r8
 80146f6:	d128      	bne.n	801474a <__hexnan+0x12e>
 80146f8:	2301      	movs	r3, #1
 80146fa:	603b      	str	r3, [r7, #0]
 80146fc:	2005      	movs	r0, #5
 80146fe:	b007      	add	sp, #28
 8014700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014704:	3501      	adds	r5, #1
 8014706:	2d08      	cmp	r5, #8
 8014708:	f10b 0b01 	add.w	fp, fp, #1
 801470c:	dd06      	ble.n	801471c <__hexnan+0x100>
 801470e:	4544      	cmp	r4, r8
 8014710:	d9c1      	bls.n	8014696 <__hexnan+0x7a>
 8014712:	2300      	movs	r3, #0
 8014714:	f844 3c04 	str.w	r3, [r4, #-4]
 8014718:	2501      	movs	r5, #1
 801471a:	3c04      	subs	r4, #4
 801471c:	6822      	ldr	r2, [r4, #0]
 801471e:	f000 000f 	and.w	r0, r0, #15
 8014722:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8014726:	6020      	str	r0, [r4, #0]
 8014728:	e7b5      	b.n	8014696 <__hexnan+0x7a>
 801472a:	2508      	movs	r5, #8
 801472c:	e7b3      	b.n	8014696 <__hexnan+0x7a>
 801472e:	9b01      	ldr	r3, [sp, #4]
 8014730:	2b00      	cmp	r3, #0
 8014732:	d0dd      	beq.n	80146f0 <__hexnan+0xd4>
 8014734:	f1c3 0320 	rsb	r3, r3, #32
 8014738:	f04f 32ff 	mov.w	r2, #4294967295
 801473c:	40da      	lsrs	r2, r3
 801473e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8014742:	4013      	ands	r3, r2
 8014744:	f846 3c04 	str.w	r3, [r6, #-4]
 8014748:	e7d2      	b.n	80146f0 <__hexnan+0xd4>
 801474a:	3f04      	subs	r7, #4
 801474c:	e7d0      	b.n	80146f0 <__hexnan+0xd4>
 801474e:	2004      	movs	r0, #4
 8014750:	e7d5      	b.n	80146fe <__hexnan+0xe2>

08014752 <__ascii_mbtowc>:
 8014752:	b082      	sub	sp, #8
 8014754:	b901      	cbnz	r1, 8014758 <__ascii_mbtowc+0x6>
 8014756:	a901      	add	r1, sp, #4
 8014758:	b142      	cbz	r2, 801476c <__ascii_mbtowc+0x1a>
 801475a:	b14b      	cbz	r3, 8014770 <__ascii_mbtowc+0x1e>
 801475c:	7813      	ldrb	r3, [r2, #0]
 801475e:	600b      	str	r3, [r1, #0]
 8014760:	7812      	ldrb	r2, [r2, #0]
 8014762:	1e10      	subs	r0, r2, #0
 8014764:	bf18      	it	ne
 8014766:	2001      	movne	r0, #1
 8014768:	b002      	add	sp, #8
 801476a:	4770      	bx	lr
 801476c:	4610      	mov	r0, r2
 801476e:	e7fb      	b.n	8014768 <__ascii_mbtowc+0x16>
 8014770:	f06f 0001 	mvn.w	r0, #1
 8014774:	e7f8      	b.n	8014768 <__ascii_mbtowc+0x16>

08014776 <_realloc_r>:
 8014776:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801477a:	4680      	mov	r8, r0
 801477c:	4615      	mov	r5, r2
 801477e:	460c      	mov	r4, r1
 8014780:	b921      	cbnz	r1, 801478c <_realloc_r+0x16>
 8014782:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014786:	4611      	mov	r1, r2
 8014788:	f7fb bd3e 	b.w	8010208 <_malloc_r>
 801478c:	b92a      	cbnz	r2, 801479a <_realloc_r+0x24>
 801478e:	f7fd fd65 	bl	801225c <_free_r>
 8014792:	2400      	movs	r4, #0
 8014794:	4620      	mov	r0, r4
 8014796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801479a:	f000 f827 	bl	80147ec <_malloc_usable_size_r>
 801479e:	4285      	cmp	r5, r0
 80147a0:	4606      	mov	r6, r0
 80147a2:	d802      	bhi.n	80147aa <_realloc_r+0x34>
 80147a4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80147a8:	d8f4      	bhi.n	8014794 <_realloc_r+0x1e>
 80147aa:	4629      	mov	r1, r5
 80147ac:	4640      	mov	r0, r8
 80147ae:	f7fb fd2b 	bl	8010208 <_malloc_r>
 80147b2:	4607      	mov	r7, r0
 80147b4:	2800      	cmp	r0, #0
 80147b6:	d0ec      	beq.n	8014792 <_realloc_r+0x1c>
 80147b8:	42b5      	cmp	r5, r6
 80147ba:	462a      	mov	r2, r5
 80147bc:	4621      	mov	r1, r4
 80147be:	bf28      	it	cs
 80147c0:	4632      	movcs	r2, r6
 80147c2:	f7fc ff56 	bl	8011672 <memcpy>
 80147c6:	4621      	mov	r1, r4
 80147c8:	4640      	mov	r0, r8
 80147ca:	f7fd fd47 	bl	801225c <_free_r>
 80147ce:	463c      	mov	r4, r7
 80147d0:	e7e0      	b.n	8014794 <_realloc_r+0x1e>

080147d2 <__ascii_wctomb>:
 80147d2:	4603      	mov	r3, r0
 80147d4:	4608      	mov	r0, r1
 80147d6:	b141      	cbz	r1, 80147ea <__ascii_wctomb+0x18>
 80147d8:	2aff      	cmp	r2, #255	@ 0xff
 80147da:	d904      	bls.n	80147e6 <__ascii_wctomb+0x14>
 80147dc:	228a      	movs	r2, #138	@ 0x8a
 80147de:	601a      	str	r2, [r3, #0]
 80147e0:	f04f 30ff 	mov.w	r0, #4294967295
 80147e4:	4770      	bx	lr
 80147e6:	700a      	strb	r2, [r1, #0]
 80147e8:	2001      	movs	r0, #1
 80147ea:	4770      	bx	lr

080147ec <_malloc_usable_size_r>:
 80147ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80147f0:	1f18      	subs	r0, r3, #4
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	bfbc      	itt	lt
 80147f6:	580b      	ldrlt	r3, [r1, r0]
 80147f8:	18c0      	addlt	r0, r0, r3
 80147fa:	4770      	bx	lr

080147fc <_init>:
 80147fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147fe:	bf00      	nop
 8014800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014802:	bc08      	pop	{r3}
 8014804:	469e      	mov	lr, r3
 8014806:	4770      	bx	lr

08014808 <_fini>:
 8014808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801480a:	bf00      	nop
 801480c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801480e:	bc08      	pop	{r3}
 8014810:	469e      	mov	lr, r3
 8014812:	4770      	bx	lr
