
Radio_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d91c  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e4  0800dbd0  0800dbd0  0000ebd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e0b4  0800e0b4  0000f0b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e0bc  0800e0bc  0000f0bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800e0c0  0800e0c0  0000f0c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001dc  24000000  0800e0c4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004ca0  240001dc  0800e2a0  000101dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24004e7c  0800e2a0  00010e7c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000101dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00029d00  00000000  00000000  0001020a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004dfc  00000000  00000000  00039f0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001cb0  00000000  00000000  0003ed08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001645  00000000  00000000  000409b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003685c  00000000  00000000  00041ffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000272ef  00000000  00000000  00078859  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00150bf8  00000000  00000000  0009fb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f0740  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008c8c  00000000  00000000  001f0784  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008b  00000000  00000000  001f9410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240001dc 	.word	0x240001dc
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800dbb4 	.word	0x0800dbb4

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240001e0 	.word	0x240001e0
 80002ec:	0800dbb4 	.word	0x0800dbb4

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <strlen>:
 8000390:	4603      	mov	r3, r0
 8000392:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000396:	2a00      	cmp	r2, #0
 8000398:	d1fb      	bne.n	8000392 <strlen+0x2>
 800039a:	1a18      	subs	r0, r3, r0
 800039c:	3801      	subs	r0, #1
 800039e:	4770      	bx	lr

080003a0 <__aeabi_drsub>:
 80003a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003a4:	e002      	b.n	80003ac <__adddf3>
 80003a6:	bf00      	nop

080003a8 <__aeabi_dsub>:
 80003a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003ac <__adddf3>:
 80003ac:	b530      	push	{r4, r5, lr}
 80003ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003b6:	ea94 0f05 	teq	r4, r5
 80003ba:	bf08      	it	eq
 80003bc:	ea90 0f02 	teqeq	r0, r2
 80003c0:	bf1f      	itttt	ne
 80003c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d2:	f000 80e2 	beq.w	800059a <__adddf3+0x1ee>
 80003d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003de:	bfb8      	it	lt
 80003e0:	426d      	neglt	r5, r5
 80003e2:	dd0c      	ble.n	80003fe <__adddf3+0x52>
 80003e4:	442c      	add	r4, r5
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	ea82 0000 	eor.w	r0, r2, r0
 80003f2:	ea83 0101 	eor.w	r1, r3, r1
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	2d36      	cmp	r5, #54	@ 0x36
 8000400:	bf88      	it	hi
 8000402:	bd30      	pophi	{r4, r5, pc}
 8000404:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000408:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800040c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000410:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000414:	d002      	beq.n	800041c <__adddf3+0x70>
 8000416:	4240      	negs	r0, r0
 8000418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800041c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000420:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000424:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x84>
 800042a:	4252      	negs	r2, r2
 800042c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000430:	ea94 0f05 	teq	r4, r5
 8000434:	f000 80a7 	beq.w	8000586 <__adddf3+0x1da>
 8000438:	f1a4 0401 	sub.w	r4, r4, #1
 800043c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000440:	db0d      	blt.n	800045e <__adddf3+0xb2>
 8000442:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000446:	fa22 f205 	lsr.w	r2, r2, r5
 800044a:	1880      	adds	r0, r0, r2
 800044c:	f141 0100 	adc.w	r1, r1, #0
 8000450:	fa03 f20e 	lsl.w	r2, r3, lr
 8000454:	1880      	adds	r0, r0, r2
 8000456:	fa43 f305 	asr.w	r3, r3, r5
 800045a:	4159      	adcs	r1, r3
 800045c:	e00e      	b.n	800047c <__adddf3+0xd0>
 800045e:	f1a5 0520 	sub.w	r5, r5, #32
 8000462:	f10e 0e20 	add.w	lr, lr, #32
 8000466:	2a01      	cmp	r2, #1
 8000468:	fa03 fc0e 	lsl.w	ip, r3, lr
 800046c:	bf28      	it	cs
 800046e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000472:	fa43 f305 	asr.w	r3, r3, r5
 8000476:	18c0      	adds	r0, r0, r3
 8000478:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000480:	d507      	bpl.n	8000492 <__adddf3+0xe6>
 8000482:	f04f 0e00 	mov.w	lr, #0
 8000486:	f1dc 0c00 	rsbs	ip, ip, #0
 800048a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800048e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000492:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000496:	d31b      	bcc.n	80004d0 <__adddf3+0x124>
 8000498:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800049c:	d30c      	bcc.n	80004b8 <__adddf3+0x10c>
 800049e:	0849      	lsrs	r1, r1, #1
 80004a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004a8:	f104 0401 	add.w	r4, r4, #1
 80004ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004b4:	f080 809a 	bcs.w	80005ec <__adddf3+0x240>
 80004b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004bc:	bf08      	it	eq
 80004be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c2:	f150 0000 	adcs.w	r0, r0, #0
 80004c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ca:	ea41 0105 	orr.w	r1, r1, r5
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d4:	4140      	adcs	r0, r0
 80004d6:	eb41 0101 	adc.w	r1, r1, r1
 80004da:	3c01      	subs	r4, #1
 80004dc:	bf28      	it	cs
 80004de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004e2:	d2e9      	bcs.n	80004b8 <__adddf3+0x10c>
 80004e4:	f091 0f00 	teq	r1, #0
 80004e8:	bf04      	itt	eq
 80004ea:	4601      	moveq	r1, r0
 80004ec:	2000      	moveq	r0, #0
 80004ee:	fab1 f381 	clz	r3, r1
 80004f2:	bf08      	it	eq
 80004f4:	3320      	addeq	r3, #32
 80004f6:	f1a3 030b 	sub.w	r3, r3, #11
 80004fa:	f1b3 0220 	subs.w	r2, r3, #32
 80004fe:	da0c      	bge.n	800051a <__adddf3+0x16e>
 8000500:	320c      	adds	r2, #12
 8000502:	dd08      	ble.n	8000516 <__adddf3+0x16a>
 8000504:	f102 0c14 	add.w	ip, r2, #20
 8000508:	f1c2 020c 	rsb	r2, r2, #12
 800050c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000510:	fa21 f102 	lsr.w	r1, r1, r2
 8000514:	e00c      	b.n	8000530 <__adddf3+0x184>
 8000516:	f102 0214 	add.w	r2, r2, #20
 800051a:	bfd8      	it	le
 800051c:	f1c2 0c20 	rsble	ip, r2, #32
 8000520:	fa01 f102 	lsl.w	r1, r1, r2
 8000524:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000528:	bfdc      	itt	le
 800052a:	ea41 010c 	orrle.w	r1, r1, ip
 800052e:	4090      	lslle	r0, r2
 8000530:	1ae4      	subs	r4, r4, r3
 8000532:	bfa2      	ittt	ge
 8000534:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000538:	4329      	orrge	r1, r5
 800053a:	bd30      	popge	{r4, r5, pc}
 800053c:	ea6f 0404 	mvn.w	r4, r4
 8000540:	3c1f      	subs	r4, #31
 8000542:	da1c      	bge.n	800057e <__adddf3+0x1d2>
 8000544:	340c      	adds	r4, #12
 8000546:	dc0e      	bgt.n	8000566 <__adddf3+0x1ba>
 8000548:	f104 0414 	add.w	r4, r4, #20
 800054c:	f1c4 0220 	rsb	r2, r4, #32
 8000550:	fa20 f004 	lsr.w	r0, r0, r4
 8000554:	fa01 f302 	lsl.w	r3, r1, r2
 8000558:	ea40 0003 	orr.w	r0, r0, r3
 800055c:	fa21 f304 	lsr.w	r3, r1, r4
 8000560:	ea45 0103 	orr.w	r1, r5, r3
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f1c4 040c 	rsb	r4, r4, #12
 800056a:	f1c4 0220 	rsb	r2, r4, #32
 800056e:	fa20 f002 	lsr.w	r0, r0, r2
 8000572:	fa01 f304 	lsl.w	r3, r1, r4
 8000576:	ea40 0003 	orr.w	r0, r0, r3
 800057a:	4629      	mov	r1, r5
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	fa21 f004 	lsr.w	r0, r1, r4
 8000582:	4629      	mov	r1, r5
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f094 0f00 	teq	r4, #0
 800058a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800058e:	bf06      	itte	eq
 8000590:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000594:	3401      	addeq	r4, #1
 8000596:	3d01      	subne	r5, #1
 8000598:	e74e      	b.n	8000438 <__adddf3+0x8c>
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf18      	it	ne
 80005a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a4:	d029      	beq.n	80005fa <__adddf3+0x24e>
 80005a6:	ea94 0f05 	teq	r4, r5
 80005aa:	bf08      	it	eq
 80005ac:	ea90 0f02 	teqeq	r0, r2
 80005b0:	d005      	beq.n	80005be <__adddf3+0x212>
 80005b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005b6:	bf04      	itt	eq
 80005b8:	4619      	moveq	r1, r3
 80005ba:	4610      	moveq	r0, r2
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	ea91 0f03 	teq	r1, r3
 80005c2:	bf1e      	ittt	ne
 80005c4:	2100      	movne	r1, #0
 80005c6:	2000      	movne	r0, #0
 80005c8:	bd30      	popne	{r4, r5, pc}
 80005ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ce:	d105      	bne.n	80005dc <__adddf3+0x230>
 80005d0:	0040      	lsls	r0, r0, #1
 80005d2:	4149      	adcs	r1, r1
 80005d4:	bf28      	it	cs
 80005d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd30      	pop	{r4, r5, pc}
 80005dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005e0:	bf3c      	itt	cc
 80005e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005e6:	bd30      	popcc	{r4, r5, pc}
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005fe:	bf1a      	itte	ne
 8000600:	4619      	movne	r1, r3
 8000602:	4610      	movne	r0, r2
 8000604:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000608:	bf1c      	itt	ne
 800060a:	460b      	movne	r3, r1
 800060c:	4602      	movne	r2, r0
 800060e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000612:	bf06      	itte	eq
 8000614:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000618:	ea91 0f03 	teqeq	r1, r3
 800061c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop

08000624 <__aeabi_ui2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f04f 0500 	mov.w	r5, #0
 800063c:	f04f 0100 	mov.w	r1, #0
 8000640:	e750      	b.n	80004e4 <__adddf3+0x138>
 8000642:	bf00      	nop

08000644 <__aeabi_i2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800065c:	bf48      	it	mi
 800065e:	4240      	negmi	r0, r0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e73e      	b.n	80004e4 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_f2d>:
 8000668:	0042      	lsls	r2, r0, #1
 800066a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800066e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000672:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000676:	bf1f      	itttt	ne
 8000678:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800067c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000680:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000684:	4770      	bxne	lr
 8000686:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800068a:	bf08      	it	eq
 800068c:	4770      	bxeq	lr
 800068e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000692:	bf04      	itt	eq
 8000694:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000698:	4770      	bxeq	lr
 800069a:	b530      	push	{r4, r5, lr}
 800069c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	e71c      	b.n	80004e4 <__adddf3+0x138>
 80006aa:	bf00      	nop

080006ac <__aeabi_ul2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	e00a      	b.n	80006d2 <__aeabi_l2d+0x16>

080006bc <__aeabi_l2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ca:	d502      	bpl.n	80006d2 <__aeabi_l2d+0x16>
 80006cc:	4240      	negs	r0, r0
 80006ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006de:	f43f aed8 	beq.w	8000492 <__adddf3+0xe6>
 80006e2:	f04f 0203 	mov.w	r2, #3
 80006e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ea:	bf18      	it	ne
 80006ec:	3203      	addne	r2, #3
 80006ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f2:	bf18      	it	ne
 80006f4:	3203      	addne	r2, #3
 80006f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fa:	f1c2 0320 	rsb	r3, r2, #32
 80006fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 fe03 	lsl.w	lr, r1, r3
 800070a:	ea40 000e 	orr.w	r0, r0, lr
 800070e:	fa21 f102 	lsr.w	r1, r1, r2
 8000712:	4414      	add	r4, r2
 8000714:	e6bd      	b.n	8000492 <__adddf3+0xe6>
 8000716:	bf00      	nop

08000718 <__aeabi_uldivmod>:
 8000718:	b953      	cbnz	r3, 8000730 <__aeabi_uldivmod+0x18>
 800071a:	b94a      	cbnz	r2, 8000730 <__aeabi_uldivmod+0x18>
 800071c:	2900      	cmp	r1, #0
 800071e:	bf08      	it	eq
 8000720:	2800      	cmpeq	r0, #0
 8000722:	bf1c      	itt	ne
 8000724:	f04f 31ff 	movne.w	r1, #4294967295
 8000728:	f04f 30ff 	movne.w	r0, #4294967295
 800072c:	f000 b9a2 	b.w	8000a74 <__aeabi_idiv0>
 8000730:	f1ad 0c08 	sub.w	ip, sp, #8
 8000734:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000738:	f000 f83e 	bl	80007b8 <__udivmoddi4>
 800073c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000740:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000744:	b004      	add	sp, #16
 8000746:	4770      	bx	lr

08000748 <__aeabi_d2lz>:
 8000748:	b508      	push	{r3, lr}
 800074a:	4602      	mov	r2, r0
 800074c:	460b      	mov	r3, r1
 800074e:	ec43 2b17 	vmov	d7, r2, r3
 8000752:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800075a:	d403      	bmi.n	8000764 <__aeabi_d2lz+0x1c>
 800075c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000760:	f000 b80a 	b.w	8000778 <__aeabi_d2ulz>
 8000764:	eeb1 7b47 	vneg.f64	d7, d7
 8000768:	ec51 0b17 	vmov	r0, r1, d7
 800076c:	f000 f804 	bl	8000778 <__aeabi_d2ulz>
 8000770:	4240      	negs	r0, r0
 8000772:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000776:	bd08      	pop	{r3, pc}

08000778 <__aeabi_d2ulz>:
 8000778:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007a8 <__aeabi_d2ulz+0x30>
 800077c:	ec41 0b17 	vmov	d7, r0, r1
 8000780:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007b0 <__aeabi_d2ulz+0x38>
 8000784:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000788:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800078c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000790:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000794:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000798:	ee16 1a10 	vmov	r1, s12
 800079c:	ee17 0a90 	vmov	r0, s15
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	f3af 8000 	nop.w
 80007a8:	00000000 	.word	0x00000000
 80007ac:	3df00000 	.word	0x3df00000
 80007b0:	00000000 	.word	0x00000000
 80007b4:	41f00000 	.word	0x41f00000

080007b8 <__udivmoddi4>:
 80007b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007bc:	9d08      	ldr	r5, [sp, #32]
 80007be:	460c      	mov	r4, r1
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d14e      	bne.n	8000862 <__udivmoddi4+0xaa>
 80007c4:	4694      	mov	ip, r2
 80007c6:	458c      	cmp	ip, r1
 80007c8:	4686      	mov	lr, r0
 80007ca:	fab2 f282 	clz	r2, r2
 80007ce:	d962      	bls.n	8000896 <__udivmoddi4+0xde>
 80007d0:	b14a      	cbz	r2, 80007e6 <__udivmoddi4+0x2e>
 80007d2:	f1c2 0320 	rsb	r3, r2, #32
 80007d6:	4091      	lsls	r1, r2
 80007d8:	fa20 f303 	lsr.w	r3, r0, r3
 80007dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007e0:	4319      	orrs	r1, r3
 80007e2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007e6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007ea:	fa1f f68c 	uxth.w	r6, ip
 80007ee:	fbb1 f4f7 	udiv	r4, r1, r7
 80007f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007f6:	fb07 1114 	mls	r1, r7, r4, r1
 80007fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007fe:	fb04 f106 	mul.w	r1, r4, r6
 8000802:	4299      	cmp	r1, r3
 8000804:	d90a      	bls.n	800081c <__udivmoddi4+0x64>
 8000806:	eb1c 0303 	adds.w	r3, ip, r3
 800080a:	f104 30ff 	add.w	r0, r4, #4294967295
 800080e:	f080 8112 	bcs.w	8000a36 <__udivmoddi4+0x27e>
 8000812:	4299      	cmp	r1, r3
 8000814:	f240 810f 	bls.w	8000a36 <__udivmoddi4+0x27e>
 8000818:	3c02      	subs	r4, #2
 800081a:	4463      	add	r3, ip
 800081c:	1a59      	subs	r1, r3, r1
 800081e:	fa1f f38e 	uxth.w	r3, lr
 8000822:	fbb1 f0f7 	udiv	r0, r1, r7
 8000826:	fb07 1110 	mls	r1, r7, r0, r1
 800082a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800082e:	fb00 f606 	mul.w	r6, r0, r6
 8000832:	429e      	cmp	r6, r3
 8000834:	d90a      	bls.n	800084c <__udivmoddi4+0x94>
 8000836:	eb1c 0303 	adds.w	r3, ip, r3
 800083a:	f100 31ff 	add.w	r1, r0, #4294967295
 800083e:	f080 80fc 	bcs.w	8000a3a <__udivmoddi4+0x282>
 8000842:	429e      	cmp	r6, r3
 8000844:	f240 80f9 	bls.w	8000a3a <__udivmoddi4+0x282>
 8000848:	4463      	add	r3, ip
 800084a:	3802      	subs	r0, #2
 800084c:	1b9b      	subs	r3, r3, r6
 800084e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000852:	2100      	movs	r1, #0
 8000854:	b11d      	cbz	r5, 800085e <__udivmoddi4+0xa6>
 8000856:	40d3      	lsrs	r3, r2
 8000858:	2200      	movs	r2, #0
 800085a:	e9c5 3200 	strd	r3, r2, [r5]
 800085e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000862:	428b      	cmp	r3, r1
 8000864:	d905      	bls.n	8000872 <__udivmoddi4+0xba>
 8000866:	b10d      	cbz	r5, 800086c <__udivmoddi4+0xb4>
 8000868:	e9c5 0100 	strd	r0, r1, [r5]
 800086c:	2100      	movs	r1, #0
 800086e:	4608      	mov	r0, r1
 8000870:	e7f5      	b.n	800085e <__udivmoddi4+0xa6>
 8000872:	fab3 f183 	clz	r1, r3
 8000876:	2900      	cmp	r1, #0
 8000878:	d146      	bne.n	8000908 <__udivmoddi4+0x150>
 800087a:	42a3      	cmp	r3, r4
 800087c:	d302      	bcc.n	8000884 <__udivmoddi4+0xcc>
 800087e:	4290      	cmp	r0, r2
 8000880:	f0c0 80f0 	bcc.w	8000a64 <__udivmoddi4+0x2ac>
 8000884:	1a86      	subs	r6, r0, r2
 8000886:	eb64 0303 	sbc.w	r3, r4, r3
 800088a:	2001      	movs	r0, #1
 800088c:	2d00      	cmp	r5, #0
 800088e:	d0e6      	beq.n	800085e <__udivmoddi4+0xa6>
 8000890:	e9c5 6300 	strd	r6, r3, [r5]
 8000894:	e7e3      	b.n	800085e <__udivmoddi4+0xa6>
 8000896:	2a00      	cmp	r2, #0
 8000898:	f040 8090 	bne.w	80009bc <__udivmoddi4+0x204>
 800089c:	eba1 040c 	sub.w	r4, r1, ip
 80008a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008a4:	fa1f f78c 	uxth.w	r7, ip
 80008a8:	2101      	movs	r1, #1
 80008aa:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008b2:	fb08 4416 	mls	r4, r8, r6, r4
 80008b6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008ba:	fb07 f006 	mul.w	r0, r7, r6
 80008be:	4298      	cmp	r0, r3
 80008c0:	d908      	bls.n	80008d4 <__udivmoddi4+0x11c>
 80008c2:	eb1c 0303 	adds.w	r3, ip, r3
 80008c6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ca:	d202      	bcs.n	80008d2 <__udivmoddi4+0x11a>
 80008cc:	4298      	cmp	r0, r3
 80008ce:	f200 80cd 	bhi.w	8000a6c <__udivmoddi4+0x2b4>
 80008d2:	4626      	mov	r6, r4
 80008d4:	1a1c      	subs	r4, r3, r0
 80008d6:	fa1f f38e 	uxth.w	r3, lr
 80008da:	fbb4 f0f8 	udiv	r0, r4, r8
 80008de:	fb08 4410 	mls	r4, r8, r0, r4
 80008e2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008e6:	fb00 f707 	mul.w	r7, r0, r7
 80008ea:	429f      	cmp	r7, r3
 80008ec:	d908      	bls.n	8000900 <__udivmoddi4+0x148>
 80008ee:	eb1c 0303 	adds.w	r3, ip, r3
 80008f2:	f100 34ff 	add.w	r4, r0, #4294967295
 80008f6:	d202      	bcs.n	80008fe <__udivmoddi4+0x146>
 80008f8:	429f      	cmp	r7, r3
 80008fa:	f200 80b0 	bhi.w	8000a5e <__udivmoddi4+0x2a6>
 80008fe:	4620      	mov	r0, r4
 8000900:	1bdb      	subs	r3, r3, r7
 8000902:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000906:	e7a5      	b.n	8000854 <__udivmoddi4+0x9c>
 8000908:	f1c1 0620 	rsb	r6, r1, #32
 800090c:	408b      	lsls	r3, r1
 800090e:	fa22 f706 	lsr.w	r7, r2, r6
 8000912:	431f      	orrs	r7, r3
 8000914:	fa20 fc06 	lsr.w	ip, r0, r6
 8000918:	fa04 f301 	lsl.w	r3, r4, r1
 800091c:	ea43 030c 	orr.w	r3, r3, ip
 8000920:	40f4      	lsrs	r4, r6
 8000922:	fa00 f801 	lsl.w	r8, r0, r1
 8000926:	0c38      	lsrs	r0, r7, #16
 8000928:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800092c:	fbb4 fef0 	udiv	lr, r4, r0
 8000930:	fa1f fc87 	uxth.w	ip, r7
 8000934:	fb00 441e 	mls	r4, r0, lr, r4
 8000938:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800093c:	fb0e f90c 	mul.w	r9, lr, ip
 8000940:	45a1      	cmp	r9, r4
 8000942:	fa02 f201 	lsl.w	r2, r2, r1
 8000946:	d90a      	bls.n	800095e <__udivmoddi4+0x1a6>
 8000948:	193c      	adds	r4, r7, r4
 800094a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800094e:	f080 8084 	bcs.w	8000a5a <__udivmoddi4+0x2a2>
 8000952:	45a1      	cmp	r9, r4
 8000954:	f240 8081 	bls.w	8000a5a <__udivmoddi4+0x2a2>
 8000958:	f1ae 0e02 	sub.w	lr, lr, #2
 800095c:	443c      	add	r4, r7
 800095e:	eba4 0409 	sub.w	r4, r4, r9
 8000962:	fa1f f983 	uxth.w	r9, r3
 8000966:	fbb4 f3f0 	udiv	r3, r4, r0
 800096a:	fb00 4413 	mls	r4, r0, r3, r4
 800096e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000972:	fb03 fc0c 	mul.w	ip, r3, ip
 8000976:	45a4      	cmp	ip, r4
 8000978:	d907      	bls.n	800098a <__udivmoddi4+0x1d2>
 800097a:	193c      	adds	r4, r7, r4
 800097c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000980:	d267      	bcs.n	8000a52 <__udivmoddi4+0x29a>
 8000982:	45a4      	cmp	ip, r4
 8000984:	d965      	bls.n	8000a52 <__udivmoddi4+0x29a>
 8000986:	3b02      	subs	r3, #2
 8000988:	443c      	add	r4, r7
 800098a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800098e:	fba0 9302 	umull	r9, r3, r0, r2
 8000992:	eba4 040c 	sub.w	r4, r4, ip
 8000996:	429c      	cmp	r4, r3
 8000998:	46ce      	mov	lr, r9
 800099a:	469c      	mov	ip, r3
 800099c:	d351      	bcc.n	8000a42 <__udivmoddi4+0x28a>
 800099e:	d04e      	beq.n	8000a3e <__udivmoddi4+0x286>
 80009a0:	b155      	cbz	r5, 80009b8 <__udivmoddi4+0x200>
 80009a2:	ebb8 030e 	subs.w	r3, r8, lr
 80009a6:	eb64 040c 	sbc.w	r4, r4, ip
 80009aa:	fa04 f606 	lsl.w	r6, r4, r6
 80009ae:	40cb      	lsrs	r3, r1
 80009b0:	431e      	orrs	r6, r3
 80009b2:	40cc      	lsrs	r4, r1
 80009b4:	e9c5 6400 	strd	r6, r4, [r5]
 80009b8:	2100      	movs	r1, #0
 80009ba:	e750      	b.n	800085e <__udivmoddi4+0xa6>
 80009bc:	f1c2 0320 	rsb	r3, r2, #32
 80009c0:	fa20 f103 	lsr.w	r1, r0, r3
 80009c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009c8:	fa24 f303 	lsr.w	r3, r4, r3
 80009cc:	4094      	lsls	r4, r2
 80009ce:	430c      	orrs	r4, r1
 80009d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009d4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009d8:	fa1f f78c 	uxth.w	r7, ip
 80009dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009e0:	fb08 3110 	mls	r1, r8, r0, r3
 80009e4:	0c23      	lsrs	r3, r4, #16
 80009e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009ea:	fb00 f107 	mul.w	r1, r0, r7
 80009ee:	4299      	cmp	r1, r3
 80009f0:	d908      	bls.n	8000a04 <__udivmoddi4+0x24c>
 80009f2:	eb1c 0303 	adds.w	r3, ip, r3
 80009f6:	f100 36ff 	add.w	r6, r0, #4294967295
 80009fa:	d22c      	bcs.n	8000a56 <__udivmoddi4+0x29e>
 80009fc:	4299      	cmp	r1, r3
 80009fe:	d92a      	bls.n	8000a56 <__udivmoddi4+0x29e>
 8000a00:	3802      	subs	r0, #2
 8000a02:	4463      	add	r3, ip
 8000a04:	1a5b      	subs	r3, r3, r1
 8000a06:	b2a4      	uxth	r4, r4
 8000a08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a14:	fb01 f307 	mul.w	r3, r1, r7
 8000a18:	42a3      	cmp	r3, r4
 8000a1a:	d908      	bls.n	8000a2e <__udivmoddi4+0x276>
 8000a1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a24:	d213      	bcs.n	8000a4e <__udivmoddi4+0x296>
 8000a26:	42a3      	cmp	r3, r4
 8000a28:	d911      	bls.n	8000a4e <__udivmoddi4+0x296>
 8000a2a:	3902      	subs	r1, #2
 8000a2c:	4464      	add	r4, ip
 8000a2e:	1ae4      	subs	r4, r4, r3
 8000a30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a34:	e739      	b.n	80008aa <__udivmoddi4+0xf2>
 8000a36:	4604      	mov	r4, r0
 8000a38:	e6f0      	b.n	800081c <__udivmoddi4+0x64>
 8000a3a:	4608      	mov	r0, r1
 8000a3c:	e706      	b.n	800084c <__udivmoddi4+0x94>
 8000a3e:	45c8      	cmp	r8, r9
 8000a40:	d2ae      	bcs.n	80009a0 <__udivmoddi4+0x1e8>
 8000a42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a4a:	3801      	subs	r0, #1
 8000a4c:	e7a8      	b.n	80009a0 <__udivmoddi4+0x1e8>
 8000a4e:	4631      	mov	r1, r6
 8000a50:	e7ed      	b.n	8000a2e <__udivmoddi4+0x276>
 8000a52:	4603      	mov	r3, r0
 8000a54:	e799      	b.n	800098a <__udivmoddi4+0x1d2>
 8000a56:	4630      	mov	r0, r6
 8000a58:	e7d4      	b.n	8000a04 <__udivmoddi4+0x24c>
 8000a5a:	46d6      	mov	lr, sl
 8000a5c:	e77f      	b.n	800095e <__udivmoddi4+0x1a6>
 8000a5e:	4463      	add	r3, ip
 8000a60:	3802      	subs	r0, #2
 8000a62:	e74d      	b.n	8000900 <__udivmoddi4+0x148>
 8000a64:	4606      	mov	r6, r0
 8000a66:	4623      	mov	r3, r4
 8000a68:	4608      	mov	r0, r1
 8000a6a:	e70f      	b.n	800088c <__udivmoddi4+0xd4>
 8000a6c:	3e02      	subs	r6, #2
 8000a6e:	4463      	add	r3, ip
 8000a70:	e730      	b.n	80008d4 <__udivmoddi4+0x11c>
 8000a72:	bf00      	nop

08000a74 <__aeabi_idiv0>:
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <PreSleepProcessing>:

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8000a80:	bf00      	nop
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8000a94:	bf00      	nop
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr

08000aa0 <_Z16MX_FREERTOS_Initv>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000aa4:	4a04      	ldr	r2, [pc, #16]	@ (8000ab8 <_Z16MX_FREERTOS_Initv+0x18>)
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	4804      	ldr	r0, [pc, #16]	@ (8000abc <_Z16MX_FREERTOS_Initv+0x1c>)
 8000aaa:	f005 fd41 	bl	8006530 <osThreadNew>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	4a03      	ldr	r2, [pc, #12]	@ (8000ac0 <_Z16MX_FREERTOS_Initv+0x20>)
 8000ab2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	0800dc2c 	.word	0x0800dc2c
 8000abc:	08000ac5 	.word	0x08000ac5
 8000ac0:	240001f8 	.word	0x240001f8

08000ac4 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000acc:	2001      	movs	r0, #1
 8000ace:	f005 fdc1 	bl	8006654 <osDelay>
 8000ad2:	e7fb      	b.n	8000acc <_Z16StartDefaultTaskPv+0x8>

08000ad4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b088      	sub	sp, #32
 8000ad8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ada:	f107 030c 	add.w	r3, r7, #12
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
 8000ae8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aea:	4b1b      	ldr	r3, [pc, #108]	@ (8000b58 <MX_GPIO_Init+0x84>)
 8000aec:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000af0:	4a19      	ldr	r2, [pc, #100]	@ (8000b58 <MX_GPIO_Init+0x84>)
 8000af2:	f043 0302 	orr.w	r3, r3, #2
 8000af6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000afa:	4b17      	ldr	r3, [pc, #92]	@ (8000b58 <MX_GPIO_Init+0x84>)
 8000afc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b00:	f003 0302 	and.w	r3, r3, #2
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b08:	4b13      	ldr	r3, [pc, #76]	@ (8000b58 <MX_GPIO_Init+0x84>)
 8000b0a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b0e:	4a12      	ldr	r2, [pc, #72]	@ (8000b58 <MX_GPIO_Init+0x84>)
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000b18:	4b0f      	ldr	r3, [pc, #60]	@ (8000b58 <MX_GPIO_Init+0x84>)
 8000b1a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = esp32i2cInterruptReqest_Pin;
 8000b26:	2320      	movs	r3, #32
 8000b28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000b2a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000b2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(esp32i2cInterruptReqest_GPIO_Port, &GPIO_InitStruct);
 8000b34:	f107 030c 	add.w	r3, r7, #12
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4808      	ldr	r0, [pc, #32]	@ (8000b5c <MX_GPIO_Init+0x88>)
 8000b3c:	f000 fdfe 	bl	800173c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000b40:	2200      	movs	r2, #0
 8000b42:	2105      	movs	r1, #5
 8000b44:	2017      	movs	r0, #23
 8000b46:	f000 fdd1 	bl	80016ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b4a:	2017      	movs	r0, #23
 8000b4c:	f000 fde8 	bl	8001720 <HAL_NVIC_EnableIRQ>

}
 8000b50:	bf00      	nop
 8000b52:	3720      	adds	r7, #32
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	58024400 	.word	0x58024400
 8000b5c:	58020400 	.word	0x58020400

08000b60 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b64:	4b1b      	ldr	r3, [pc, #108]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b66:	4a1c      	ldr	r2, [pc, #112]	@ (8000bd8 <MX_I2C1_Init+0x78>)
 8000b68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B0CCFF;
 8000b6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b6c:	4a1b      	ldr	r2, [pc, #108]	@ (8000bdc <MX_I2C1_Init+0x7c>)
 8000b6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b70:	4b18      	ldr	r3, [pc, #96]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b76:	4b17      	ldr	r3, [pc, #92]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b7c:	4b15      	ldr	r3, [pc, #84]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b82:	4b14      	ldr	r3, [pc, #80]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b88:	4b12      	ldr	r3, [pc, #72]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b8e:	4b11      	ldr	r3, [pc, #68]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8000b94:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b96:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000b9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b9c:	480d      	ldr	r0, [pc, #52]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b9e:	f000 ffaf 	bl	8001b00 <HAL_I2C_Init>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ba8:	f000 f930 	bl	8000e0c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bac:	2100      	movs	r1, #0
 8000bae:	4809      	ldr	r0, [pc, #36]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000bb0:	f001 f842 	bl	8001c38 <HAL_I2CEx_ConfigAnalogFilter>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000bba:	f000 f927 	bl	8000e0c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4804      	ldr	r0, [pc, #16]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000bc2:	f001 f884 	bl	8001cce <HAL_I2CEx_ConfigDigitalFilter>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000bcc:	f000 f91e 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	240001fc 	.word	0x240001fc
 8000bd8:	40005400 	.word	0x40005400
 8000bdc:	20b0ccff 	.word	0x20b0ccff

08000be0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b0ba      	sub	sp, #232	@ 0xe8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bf8:	f107 0310 	add.w	r3, r7, #16
 8000bfc:	22c0      	movs	r2, #192	@ 0xc0
 8000bfe:	2100      	movs	r1, #0
 8000c00:	4618      	mov	r0, r3
 8000c02:	f009 fde9 	bl	800a7d8 <memset>
  if(i2cHandle->Instance==I2C1)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a27      	ldr	r2, [pc, #156]	@ (8000ca8 <HAL_I2C_MspInit+0xc8>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d146      	bne.n	8000c9e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c10:	f04f 0208 	mov.w	r2, #8
 8000c14:	f04f 0300 	mov.w	r3, #0
 8000c18:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c22:	f107 0310 	add.w	r3, r7, #16
 8000c26:	4618      	mov	r0, r3
 8000c28:	f002 f8d8 	bl	8002ddc <HAL_RCCEx_PeriphCLKConfig>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000c32:	f000 f8eb 	bl	8000e0c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c36:	4b1d      	ldr	r3, [pc, #116]	@ (8000cac <HAL_I2C_MspInit+0xcc>)
 8000c38:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c3c:	4a1b      	ldr	r2, [pc, #108]	@ (8000cac <HAL_I2C_MspInit+0xcc>)
 8000c3e:	f043 0302 	orr.w	r3, r3, #2
 8000c42:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c46:	4b19      	ldr	r3, [pc, #100]	@ (8000cac <HAL_I2C_MspInit+0xcc>)
 8000c48:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c4c:	f003 0302 	and.w	r3, r3, #2
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c54:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c58:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c5c:	2312      	movs	r3, #18
 8000c5e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c6e:	2304      	movs	r3, #4
 8000c70:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c74:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000c78:	4619      	mov	r1, r3
 8000c7a:	480d      	ldr	r0, [pc, #52]	@ (8000cb0 <HAL_I2C_MspInit+0xd0>)
 8000c7c:	f000 fd5e 	bl	800173c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c80:	4b0a      	ldr	r3, [pc, #40]	@ (8000cac <HAL_I2C_MspInit+0xcc>)
 8000c82:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000c86:	4a09      	ldr	r2, [pc, #36]	@ (8000cac <HAL_I2C_MspInit+0xcc>)
 8000c88:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c8c:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000c90:	4b06      	ldr	r3, [pc, #24]	@ (8000cac <HAL_I2C_MspInit+0xcc>)
 8000c92:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000c96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c9e:	bf00      	nop
 8000ca0:	37e8      	adds	r7, #232	@ 0xe8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40005400 	.word	0x40005400
 8000cac:	58024400 	.word	0x58024400
 8000cb0:	58020400 	.word	0x58020400

08000cb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cb8:	f000 fc04 	bl	80014c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cbc:	f000 f810 	bl	8000ce0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cc0:	f7ff ff08 	bl	8000ad4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000cc4:	f000 fb1e 	bl	8001304 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000cc8:	f7ff ff4a 	bl	8000b60 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  //printf("Radio main firmware version: %.2f\r\n", FW_VERSION);
  initTaskFunctions();
 8000ccc:	f000 fabc 	bl	8001248 <_Z17initTaskFunctionsv>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000cd0:	f005 fbe4 	bl	800649c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000cd4:	f7ff fee4 	bl	8000aa0 <_Z16MX_FREERTOS_Initv>

  /* Start scheduler */
  osKernelStart();
 8000cd8:	f005 fc04 	bl	80064e4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cdc:	bf00      	nop
 8000cde:	e7fd      	b.n	8000cdc <main+0x28>

08000ce0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b09c      	sub	sp, #112	@ 0x70
 8000ce4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ce6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cea:	224c      	movs	r2, #76	@ 0x4c
 8000cec:	2100      	movs	r1, #0
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f009 fd72 	bl	800a7d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	2220      	movs	r2, #32
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f009 fd6c 	bl	800a7d8 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000d00:	4b37      	ldr	r3, [pc, #220]	@ (8000de0 <_Z18SystemClock_Configv+0x100>)
 8000d02:	f04f 32ff 	mov.w	r2, #4294967295
 8000d06:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d0a:	2002      	movs	r0, #2
 8000d0c:	f001 f82c 	bl	8001d68 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000d10:	2300      	movs	r3, #0
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	4b33      	ldr	r3, [pc, #204]	@ (8000de4 <_Z18SystemClock_Configv+0x104>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	4a32      	ldr	r2, [pc, #200]	@ (8000de4 <_Z18SystemClock_Configv+0x104>)
 8000d1a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d1e:	6193      	str	r3, [r2, #24]
 8000d20:	4b30      	ldr	r3, [pc, #192]	@ (8000de4 <_Z18SystemClock_Configv+0x104>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d28:	603b      	str	r3, [r7, #0]
 8000d2a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d2c:	bf00      	nop
 8000d2e:	4b2d      	ldr	r3, [pc, #180]	@ (8000de4 <_Z18SystemClock_Configv+0x104>)
 8000d30:	699b      	ldr	r3, [r3, #24]
 8000d32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d3a:	bf14      	ite	ne
 8000d3c:	2301      	movne	r3, #1
 8000d3e:	2300      	moveq	r3, #0
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d1f3      	bne.n	8000d2e <_Z18SystemClock_Configv+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d46:	2302      	movs	r3, #2
 8000d48:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000d4e:	2340      	movs	r3, #64	@ 0x40
 8000d50:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d52:	2302      	movs	r3, #2
 8000d54:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d56:	2300      	movs	r3, #0
 8000d58:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d5a:	2304      	movs	r3, #4
 8000d5c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8000d5e:	2323      	movs	r3, #35	@ 0x23
 8000d60:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d62:	2302      	movs	r3, #2
 8000d64:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d66:	2302      	movs	r3, #2
 8000d68:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d6e:	230c      	movs	r3, #12
 8000d70:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d72:	2300      	movs	r3, #0
 8000d74:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f001 f82c 	bl	8001ddc <HAL_RCC_OscConfig>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	bf14      	ite	ne
 8000d8a:	2301      	movne	r3, #1
 8000d8c:	2300      	moveq	r3, #0
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <_Z18SystemClock_Configv+0xb8>
  {
    Error_Handler();
 8000d94:	f000 f83a 	bl	8000e0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d98:	233f      	movs	r3, #63	@ 0x3f
 8000d9a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000da0:	2300      	movs	r3, #0
 8000da2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000da4:	2300      	movs	r3, #0
 8000da6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000da8:	2340      	movs	r3, #64	@ 0x40
 8000daa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000dac:	2340      	movs	r3, #64	@ 0x40
 8000dae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000db0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000db4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000db6:	2340      	movs	r3, #64	@ 0x40
 8000db8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	2106      	movs	r1, #6
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f001 fc3e 	bl	8002640 <HAL_RCC_ClockConfig>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	bf14      	ite	ne
 8000dca:	2301      	movne	r3, #1
 8000dcc:	2300      	moveq	r3, #0
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <_Z18SystemClock_Configv+0xf8>
  {
    Error_Handler();
 8000dd4:	f000 f81a 	bl	8000e0c <Error_Handler>
  }
}
 8000dd8:	bf00      	nop
 8000dda:	3770      	adds	r7, #112	@ 0x70
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	58024400 	.word	0x58024400
 8000de4:	58024800 	.word	0x58024800

08000de8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a04      	ldr	r2, [pc, #16]	@ (8000e08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d101      	bne.n	8000dfe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000dfa:	f000 fb9f 	bl	800153c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40010000 	.word	0x40010000

08000e0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e10:	b672      	cpsid	i
}
 8000e12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <Error_Handler+0x8>

08000e18 <__io_putchar>:

#include <printfRedirect.h>


//printf to uart redirection
void __io_putchar(uint8_t ch) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, &ch, 1, 0xffff);
 8000e22:	1df9      	adds	r1, r7, #7
 8000e24:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e28:	2201      	movs	r2, #1
 8000e2a:	4803      	ldr	r0, [pc, #12]	@ (8000e38 <__io_putchar+0x20>)
 8000e2c:	f004 f8d4 	bl	8004fd8 <HAL_UART_Transmit>
}
 8000e30:	bf00      	nop
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	240002a4 	.word	0x240002a4

08000e3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e42:	4b0c      	ldr	r3, [pc, #48]	@ (8000e74 <HAL_MspInit+0x38>)
 8000e44:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000e48:	4a0a      	ldr	r2, [pc, #40]	@ (8000e74 <HAL_MspInit+0x38>)
 8000e4a:	f043 0302 	orr.w	r3, r3, #2
 8000e4e:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000e52:	4b08      	ldr	r3, [pc, #32]	@ (8000e74 <HAL_MspInit+0x38>)
 8000e54:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000e58:	f003 0302 	and.w	r3, r3, #2
 8000e5c:	607b      	str	r3, [r7, #4]
 8000e5e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e60:	2200      	movs	r2, #0
 8000e62:	210f      	movs	r1, #15
 8000e64:	f06f 0001 	mvn.w	r0, #1
 8000e68:	f000 fc40 	bl	80016ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e6c:	bf00      	nop
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	58024400 	.word	0x58024400

08000e78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08e      	sub	sp, #56	@ 0x38
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2b0f      	cmp	r3, #15
 8000e84:	d844      	bhi.n	8000f10 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8000e86:	2200      	movs	r2, #0
 8000e88:	6879      	ldr	r1, [r7, #4]
 8000e8a:	2019      	movs	r0, #25
 8000e8c:	f000 fc2e 	bl	80016ec <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000e90:	2019      	movs	r0, #25
 8000e92:	f000 fc45 	bl	8001720 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000e96:	4a24      	ldr	r2, [pc, #144]	@ (8000f28 <HAL_InitTick+0xb0>)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e9c:	4b23      	ldr	r3, [pc, #140]	@ (8000f2c <HAL_InitTick+0xb4>)
 8000e9e:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000ea2:	4a22      	ldr	r2, [pc, #136]	@ (8000f2c <HAL_InitTick+0xb4>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8000eac:	4b1f      	ldr	r3, [pc, #124]	@ (8000f2c <HAL_InitTick+0xb4>)
 8000eae:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	60bb      	str	r3, [r7, #8]
 8000eb8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000eba:	f107 020c 	add.w	r2, r7, #12
 8000ebe:	f107 0310 	add.w	r3, r7, #16
 8000ec2:	4611      	mov	r1, r2
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f001 ff47 	bl	8002d58 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000eca:	f001 ff2f 	bl	8002d2c <HAL_RCC_GetPCLK2Freq>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ed4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ed6:	4a16      	ldr	r2, [pc, #88]	@ (8000f30 <HAL_InitTick+0xb8>)
 8000ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8000edc:	0c9b      	lsrs	r3, r3, #18
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ee2:	4b14      	ldr	r3, [pc, #80]	@ (8000f34 <HAL_InitTick+0xbc>)
 8000ee4:	4a14      	ldr	r2, [pc, #80]	@ (8000f38 <HAL_InitTick+0xc0>)
 8000ee6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000ee8:	4b12      	ldr	r3, [pc, #72]	@ (8000f34 <HAL_InitTick+0xbc>)
 8000eea:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000eee:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ef0:	4a10      	ldr	r2, [pc, #64]	@ (8000f34 <HAL_InitTick+0xbc>)
 8000ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ef4:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ef6:	4b0f      	ldr	r3, [pc, #60]	@ (8000f34 <HAL_InitTick+0xbc>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000efc:	4b0d      	ldr	r3, [pc, #52]	@ (8000f34 <HAL_InitTick+0xbc>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000f02:	480c      	ldr	r0, [pc, #48]	@ (8000f34 <HAL_InitTick+0xbc>)
 8000f04:	f003 fd4a 	bl	800499c <HAL_TIM_Base_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d107      	bne.n	8000f1e <HAL_InitTick+0xa6>
 8000f0e:	e001      	b.n	8000f14 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8000f10:	2301      	movs	r3, #1
 8000f12:	e005      	b.n	8000f20 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000f14:	4807      	ldr	r0, [pc, #28]	@ (8000f34 <HAL_InitTick+0xbc>)
 8000f16:	f003 fda3 	bl	8004a60 <HAL_TIM_Base_Start_IT>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	e000      	b.n	8000f20 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3738      	adds	r7, #56	@ 0x38
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	24000008 	.word	0x24000008
 8000f2c:	58024400 	.word	0x58024400
 8000f30:	431bde83 	.word	0x431bde83
 8000f34:	24000250 	.word	0x24000250
 8000f38:	40010000 	.word	0x40010000

08000f3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f40:	bf00      	nop
 8000f42:	e7fd      	b.n	8000f40 <NMI_Handler+0x4>

08000f44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f48:	bf00      	nop
 8000f4a:	e7fd      	b.n	8000f48 <HardFault_Handler+0x4>

08000f4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f50:	bf00      	nop
 8000f52:	e7fd      	b.n	8000f50 <MemManage_Handler+0x4>

08000f54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <BusFault_Handler+0x4>

08000f5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <UsageFault_Handler+0x4>

08000f64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(esp32i2cInterruptReqest_Pin);
 8000f76:	2020      	movs	r0, #32
 8000f78:	f000 fda8 	bl	8001acc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f84:	4802      	ldr	r0, [pc, #8]	@ (8000f90 <TIM1_UP_IRQHandler+0x10>)
 8000f86:	f003 fde3 	bl	8004b50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	24000250 	.word	0x24000250

08000f94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return 1;
 8000f98:	2301      	movs	r3, #1
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <_kill>:

int _kill(int pid, int sig)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000fae:	f009 fd0f 	bl	800a9d0 <__errno>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2216      	movs	r2, #22
 8000fb6:	601a      	str	r2, [r3, #0]
  return -1;
 8000fb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <_exit>:

void _exit (int status)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f7ff ffe7 	bl	8000fa4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000fd6:	bf00      	nop
 8000fd8:	e7fd      	b.n	8000fd6 <_exit+0x12>

08000fda <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b086      	sub	sp, #24
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	60f8      	str	r0, [r7, #12]
 8000fe2:	60b9      	str	r1, [r7, #8]
 8000fe4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
 8000fea:	e00a      	b.n	8001002 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fec:	f3af 8000 	nop.w
 8000ff0:	4601      	mov	r1, r0
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	1c5a      	adds	r2, r3, #1
 8000ff6:	60ba      	str	r2, [r7, #8]
 8000ff8:	b2ca      	uxtb	r2, r1
 8000ffa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	3301      	adds	r3, #1
 8001000:	617b      	str	r3, [r7, #20]
 8001002:	697a      	ldr	r2, [r7, #20]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	429a      	cmp	r2, r3
 8001008:	dbf0      	blt.n	8000fec <_read+0x12>
  }

  return len;
 800100a:	687b      	ldr	r3, [r7, #4]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3718      	adds	r7, #24
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]
 8001024:	e009      	b.n	800103a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	1c5a      	adds	r2, r3, #1
 800102a:	60ba      	str	r2, [r7, #8]
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff fef2 	bl	8000e18 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	3301      	adds	r3, #1
 8001038:	617b      	str	r3, [r7, #20]
 800103a:	697a      	ldr	r2, [r7, #20]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	429a      	cmp	r2, r3
 8001040:	dbf1      	blt.n	8001026 <_write+0x12>
  }
  return len;
 8001042:	687b      	ldr	r3, [r7, #4]
}
 8001044:	4618      	mov	r0, r3
 8001046:	3718      	adds	r7, #24
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <_close>:

int _close(int file)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001054:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001058:	4618      	mov	r0, r3
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001074:	605a      	str	r2, [r3, #4]
  return 0;
 8001076:	2300      	movs	r3, #0
}
 8001078:	4618      	mov	r0, r3
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <_isatty>:

int _isatty(int file)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800108c:	2301      	movs	r3, #1
}
 800108e:	4618      	mov	r0, r3
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800109a:	b480      	push	{r7}
 800109c:	b085      	sub	sp, #20
 800109e:	af00      	add	r7, sp, #0
 80010a0:	60f8      	str	r0, [r7, #12]
 80010a2:	60b9      	str	r1, [r7, #8]
 80010a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010a6:	2300      	movs	r3, #0
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010bc:	4a14      	ldr	r2, [pc, #80]	@ (8001110 <_sbrk+0x5c>)
 80010be:	4b15      	ldr	r3, [pc, #84]	@ (8001114 <_sbrk+0x60>)
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010c8:	4b13      	ldr	r3, [pc, #76]	@ (8001118 <_sbrk+0x64>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d102      	bne.n	80010d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010d0:	4b11      	ldr	r3, [pc, #68]	@ (8001118 <_sbrk+0x64>)
 80010d2:	4a12      	ldr	r2, [pc, #72]	@ (800111c <_sbrk+0x68>)
 80010d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010d6:	4b10      	ldr	r3, [pc, #64]	@ (8001118 <_sbrk+0x64>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4413      	add	r3, r2
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d207      	bcs.n	80010f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010e4:	f009 fc74 	bl	800a9d0 <__errno>
 80010e8:	4603      	mov	r3, r0
 80010ea:	220c      	movs	r2, #12
 80010ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ee:	f04f 33ff 	mov.w	r3, #4294967295
 80010f2:	e009      	b.n	8001108 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010f4:	4b08      	ldr	r3, [pc, #32]	@ (8001118 <_sbrk+0x64>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010fa:	4b07      	ldr	r3, [pc, #28]	@ (8001118 <_sbrk+0x64>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4413      	add	r3, r2
 8001102:	4a05      	ldr	r2, [pc, #20]	@ (8001118 <_sbrk+0x64>)
 8001104:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001106:	68fb      	ldr	r3, [r7, #12]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3718      	adds	r7, #24
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	24100000 	.word	0x24100000
 8001114:	00000400 	.word	0x00000400
 8001118:	2400029c 	.word	0x2400029c
 800111c:	24004e80 	.word	0x24004e80

08001120 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001124:	4b32      	ldr	r3, [pc, #200]	@ (80011f0 <SystemInit+0xd0>)
 8001126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800112a:	4a31      	ldr	r2, [pc, #196]	@ (80011f0 <SystemInit+0xd0>)
 800112c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001130:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001134:	4b2f      	ldr	r3, [pc, #188]	@ (80011f4 <SystemInit+0xd4>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 030f 	and.w	r3, r3, #15
 800113c:	2b02      	cmp	r3, #2
 800113e:	d807      	bhi.n	8001150 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001140:	4b2c      	ldr	r3, [pc, #176]	@ (80011f4 <SystemInit+0xd4>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f023 030f 	bic.w	r3, r3, #15
 8001148:	4a2a      	ldr	r2, [pc, #168]	@ (80011f4 <SystemInit+0xd4>)
 800114a:	f043 0303 	orr.w	r3, r3, #3
 800114e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001150:	4b29      	ldr	r3, [pc, #164]	@ (80011f8 <SystemInit+0xd8>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a28      	ldr	r2, [pc, #160]	@ (80011f8 <SystemInit+0xd8>)
 8001156:	f043 0301 	orr.w	r3, r3, #1
 800115a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800115c:	4b26      	ldr	r3, [pc, #152]	@ (80011f8 <SystemInit+0xd8>)
 800115e:	2200      	movs	r2, #0
 8001160:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001162:	4b25      	ldr	r3, [pc, #148]	@ (80011f8 <SystemInit+0xd8>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	4924      	ldr	r1, [pc, #144]	@ (80011f8 <SystemInit+0xd8>)
 8001168:	4b24      	ldr	r3, [pc, #144]	@ (80011fc <SystemInit+0xdc>)
 800116a:	4013      	ands	r3, r2
 800116c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800116e:	4b21      	ldr	r3, [pc, #132]	@ (80011f4 <SystemInit+0xd4>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 030c 	and.w	r3, r3, #12
 8001176:	2b00      	cmp	r3, #0
 8001178:	d007      	beq.n	800118a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800117a:	4b1e      	ldr	r3, [pc, #120]	@ (80011f4 <SystemInit+0xd4>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f023 030f 	bic.w	r3, r3, #15
 8001182:	4a1c      	ldr	r2, [pc, #112]	@ (80011f4 <SystemInit+0xd4>)
 8001184:	f043 0303 	orr.w	r3, r3, #3
 8001188:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800118a:	4b1b      	ldr	r3, [pc, #108]	@ (80011f8 <SystemInit+0xd8>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001190:	4b19      	ldr	r3, [pc, #100]	@ (80011f8 <SystemInit+0xd8>)
 8001192:	2200      	movs	r2, #0
 8001194:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001196:	4b18      	ldr	r3, [pc, #96]	@ (80011f8 <SystemInit+0xd8>)
 8001198:	2200      	movs	r2, #0
 800119a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800119c:	4b16      	ldr	r3, [pc, #88]	@ (80011f8 <SystemInit+0xd8>)
 800119e:	4a18      	ldr	r2, [pc, #96]	@ (8001200 <SystemInit+0xe0>)
 80011a0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80011a2:	4b15      	ldr	r3, [pc, #84]	@ (80011f8 <SystemInit+0xd8>)
 80011a4:	4a17      	ldr	r2, [pc, #92]	@ (8001204 <SystemInit+0xe4>)
 80011a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80011a8:	4b13      	ldr	r3, [pc, #76]	@ (80011f8 <SystemInit+0xd8>)
 80011aa:	4a17      	ldr	r2, [pc, #92]	@ (8001208 <SystemInit+0xe8>)
 80011ac:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80011ae:	4b12      	ldr	r3, [pc, #72]	@ (80011f8 <SystemInit+0xd8>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80011b4:	4b10      	ldr	r3, [pc, #64]	@ (80011f8 <SystemInit+0xd8>)
 80011b6:	4a14      	ldr	r2, [pc, #80]	@ (8001208 <SystemInit+0xe8>)
 80011b8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80011ba:	4b0f      	ldr	r3, [pc, #60]	@ (80011f8 <SystemInit+0xd8>)
 80011bc:	2200      	movs	r2, #0
 80011be:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80011c0:	4b0d      	ldr	r3, [pc, #52]	@ (80011f8 <SystemInit+0xd8>)
 80011c2:	4a11      	ldr	r2, [pc, #68]	@ (8001208 <SystemInit+0xe8>)
 80011c4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80011c6:	4b0c      	ldr	r3, [pc, #48]	@ (80011f8 <SystemInit+0xd8>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011cc:	4b0a      	ldr	r3, [pc, #40]	@ (80011f8 <SystemInit+0xd8>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a09      	ldr	r2, [pc, #36]	@ (80011f8 <SystemInit+0xd8>)
 80011d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011d6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011d8:	4b07      	ldr	r3, [pc, #28]	@ (80011f8 <SystemInit+0xd8>)
 80011da:	2200      	movs	r2, #0
 80011dc:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80011de:	4b0b      	ldr	r3, [pc, #44]	@ (800120c <SystemInit+0xec>)
 80011e0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80011e4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80011e6:	bf00      	nop
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	e000ed00 	.word	0xe000ed00
 80011f4:	52002000 	.word	0x52002000
 80011f8:	58024400 	.word	0x58024400
 80011fc:	eaf6ed7f 	.word	0xeaf6ed7f
 8001200:	02020200 	.word	0x02020200
 8001204:	01ff0000 	.word	0x01ff0000
 8001208:	01010280 	.word	0x01010280
 800120c:	52004000 	.word	0x52004000

08001210 <_Z29esp32IntrrruptRequestCallbackPv>:
#include "queue.h"
#include "task.h"

TaskHandle_t taskHandle_esp32IntrrruptRequest = NULL;

void esp32IntrrruptRequestCallback(void *pNothing){
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]

	//uint32_t taskNotifierVal;
	while(1){
		if(pdPASS == xTaskNotifyWait(0x0, 0xffff, NULL, portMAX_DELAY))
 8001218:	f04f 33ff 	mov.w	r3, #4294967295
 800121c:	2200      	movs	r2, #0
 800121e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001222:	2000      	movs	r0, #0
 8001224:	f006 ffb2 	bl	800818c <xTaskNotifyWait>
 8001228:	4603      	mov	r3, r0
 800122a:	2b01      	cmp	r3, #1
 800122c:	bf0c      	ite	eq
 800122e:	2301      	moveq	r3, #1
 8001230:	2300      	movne	r3, #0
 8001232:	b2db      	uxtb	r3, r3
 8001234:	2b00      	cmp	r3, #0
 8001236:	d0ef      	beq.n	8001218 <_Z29esp32IntrrruptRequestCallbackPv+0x8>
		{
			printf("task\r\n");
 8001238:	4801      	ldr	r0, [pc, #4]	@ (8001240 <_Z29esp32IntrrruptRequestCallbackPv+0x30>)
 800123a:	f009 f9cd 	bl	800a5d8 <puts>
		if(pdPASS == xTaskNotifyWait(0x0, 0xffff, NULL, portMAX_DELAY))
 800123e:	e7eb      	b.n	8001218 <_Z29esp32IntrrruptRequestCallbackPv+0x8>
 8001240:	0800dbdc 	.word	0x0800dbdc
 8001244:	00000000 	.word	0x00000000

08001248 <_Z17initTaskFunctionsv>:
}




void initTaskFunctions(void){
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af02      	add	r7, sp, #8
	printf("Radio main firmware version: %.2f\r\n", FW_VERSION);
 800124e:	a318      	add	r3, pc, #96	@ (adr r3, 80012b0 <_Z17initTaskFunctionsv+0x68>)
 8001250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001254:	4812      	ldr	r0, [pc, #72]	@ (80012a0 <_Z17initTaskFunctionsv+0x58>)
 8001256:	f009 f957 	bl	800a508 <iprintf>

	//tworzy task callback na przerwanie od ESP32 informującę, że ESP32 ma jakieś dane do wysłania
	configASSERT(xTaskCreate(esp32IntrrruptRequestCallback, "esp32IntReq", 3*128, NULL, tskIDLE_PRIORITY, &taskHandle_esp32IntrrruptRequest));
 800125a:	4b12      	ldr	r3, [pc, #72]	@ (80012a4 <_Z17initTaskFunctionsv+0x5c>)
 800125c:	9301      	str	r3, [sp, #4]
 800125e:	2300      	movs	r3, #0
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	2300      	movs	r3, #0
 8001264:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001268:	490f      	ldr	r1, [pc, #60]	@ (80012a8 <_Z17initTaskFunctionsv+0x60>)
 800126a:	4810      	ldr	r0, [pc, #64]	@ (80012ac <_Z17initTaskFunctionsv+0x64>)
 800126c:	f006 f850 	bl	8007310 <xTaskCreate>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	bf0c      	ite	eq
 8001276:	2301      	moveq	r3, #1
 8001278:	2300      	movne	r3, #0
 800127a:	b2db      	uxtb	r3, r3
 800127c:	2b00      	cmp	r3, #0
 800127e:	d00b      	beq.n	8001298 <_Z17initTaskFunctionsv+0x50>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001284:	f383 8811 	msr	BASEPRI, r3
 8001288:	f3bf 8f6f 	isb	sy
 800128c:	f3bf 8f4f 	dsb	sy
 8001290:	607b      	str	r3, [r7, #4]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001292:	bf00      	nop
 8001294:	bf00      	nop
 8001296:	e7fd      	b.n	8001294 <_Z17initTaskFunctionsv+0x4c>
}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	0800dbe4 	.word	0x0800dbe4
 80012a4:	240002a0 	.word	0x240002a0
 80012a8:	0800dc08 	.word	0x0800dc08
 80012ac:	08001211 	.word	0x08001211
 80012b0:	9999999a 	.word	0x9999999a
 80012b4:	3fb99999 	.word	0x3fb99999

080012b8 <HAL_GPIO_EXTI_Callback>:


#define I2C_SLAVE_TRANSMIT_REQUEST_STARTED		GPIO_PIN_RESET
#define I2C_SLAVE_TRANSMIT_REQUEST_STOPPED		GPIO_PIN_SET
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	80fb      	strh	r3, [r7, #6]
  //static bool esp32i2cRequestState;
	GPIO_PinState state = 	HAL_GPIO_ReadPin(esp32i2cInterruptReqest_GPIO_Port, esp32i2cInterruptReqest_Pin);
 80012c2:	2120      	movs	r1, #32
 80012c4:	480d      	ldr	r0, [pc, #52]	@ (80012fc <HAL_GPIO_EXTI_Callback+0x44>)
 80012c6:	f000 fbe9 	bl	8001a9c <HAL_GPIO_ReadPin>
 80012ca:	4603      	mov	r3, r0
 80012cc:	73fb      	strb	r3, [r7, #15]

	if (state == I2C_SLAVE_TRANSMIT_REQUEST_STARTED){
 80012ce:	7bfb      	ldrb	r3, [r7, #15]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d10a      	bne.n	80012ea <HAL_GPIO_EXTI_Callback+0x32>
  		BaseType_t passArg = pdTRUE;
 80012d4:	2301      	movs	r3, #1
 80012d6:	60bb      	str	r3, [r7, #8]
  		vTaskNotifyGiveFromISR(taskHandle_esp32IntrrruptRequest, &passArg); //informuje task, że przyszło powiadaomienie z ESP32 i powinien odczytać dane z esp32 po slave
 80012d8:	4b09      	ldr	r3, [pc, #36]	@ (8001300 <HAL_GPIO_EXTI_Callback+0x48>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f107 0208 	add.w	r2, r7, #8
 80012e0:	4611      	mov	r1, r2
 80012e2:	4618      	mov	r0, r3
 80012e4:	f006 ffb2 	bl	800824c <vTaskNotifyGiveFromISR>
  }*/

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80012e8:	e003      	b.n	80012f2 <HAL_GPIO_EXTI_Callback+0x3a>
	else if (state == I2C_SLAVE_TRANSMIT_REQUEST_STOPPED) {
 80012ea:	7bfb      	ldrb	r3, [r7, #15]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d100      	bne.n	80012f2 <HAL_GPIO_EXTI_Callback+0x3a>
		  asm("nop");		//z esp32 przyszła informacja o zakończeniu obsługi komunikacji z esp32 po i2c.
 80012f0:	bf00      	nop
}
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	58020400 	.word	0x58020400
 8001300:	240002a0 	.word	0x240002a0

08001304 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001308:	4b22      	ldr	r3, [pc, #136]	@ (8001394 <MX_USART1_UART_Init+0x90>)
 800130a:	4a23      	ldr	r2, [pc, #140]	@ (8001398 <MX_USART1_UART_Init+0x94>)
 800130c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800130e:	4b21      	ldr	r3, [pc, #132]	@ (8001394 <MX_USART1_UART_Init+0x90>)
 8001310:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001314:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001316:	4b1f      	ldr	r3, [pc, #124]	@ (8001394 <MX_USART1_UART_Init+0x90>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800131c:	4b1d      	ldr	r3, [pc, #116]	@ (8001394 <MX_USART1_UART_Init+0x90>)
 800131e:	2200      	movs	r2, #0
 8001320:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001322:	4b1c      	ldr	r3, [pc, #112]	@ (8001394 <MX_USART1_UART_Init+0x90>)
 8001324:	2200      	movs	r2, #0
 8001326:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001328:	4b1a      	ldr	r3, [pc, #104]	@ (8001394 <MX_USART1_UART_Init+0x90>)
 800132a:	220c      	movs	r2, #12
 800132c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800132e:	4b19      	ldr	r3, [pc, #100]	@ (8001394 <MX_USART1_UART_Init+0x90>)
 8001330:	2200      	movs	r2, #0
 8001332:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001334:	4b17      	ldr	r3, [pc, #92]	@ (8001394 <MX_USART1_UART_Init+0x90>)
 8001336:	2200      	movs	r2, #0
 8001338:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800133a:	4b16      	ldr	r3, [pc, #88]	@ (8001394 <MX_USART1_UART_Init+0x90>)
 800133c:	2200      	movs	r2, #0
 800133e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001340:	4b14      	ldr	r3, [pc, #80]	@ (8001394 <MX_USART1_UART_Init+0x90>)
 8001342:	2200      	movs	r2, #0
 8001344:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001346:	4b13      	ldr	r3, [pc, #76]	@ (8001394 <MX_USART1_UART_Init+0x90>)
 8001348:	2200      	movs	r2, #0
 800134a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800134c:	4811      	ldr	r0, [pc, #68]	@ (8001394 <MX_USART1_UART_Init+0x90>)
 800134e:	f003 fdf3 	bl	8004f38 <HAL_UART_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001358:	f7ff fd58 	bl	8000e0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800135c:	2100      	movs	r1, #0
 800135e:	480d      	ldr	r0, [pc, #52]	@ (8001394 <MX_USART1_UART_Init+0x90>)
 8001360:	f004 ff8d 	bl	800627e <HAL_UARTEx_SetTxFifoThreshold>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800136a:	f7ff fd4f 	bl	8000e0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800136e:	2100      	movs	r1, #0
 8001370:	4808      	ldr	r0, [pc, #32]	@ (8001394 <MX_USART1_UART_Init+0x90>)
 8001372:	f004 ffc2 	bl	80062fa <HAL_UARTEx_SetRxFifoThreshold>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800137c:	f7ff fd46 	bl	8000e0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001380:	4804      	ldr	r0, [pc, #16]	@ (8001394 <MX_USART1_UART_Init+0x90>)
 8001382:	f004 ff43 	bl	800620c <HAL_UARTEx_DisableFifoMode>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800138c:	f7ff fd3e 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}
 8001394:	240002a4 	.word	0x240002a4
 8001398:	40011000 	.word	0x40011000

0800139c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b0ba      	sub	sp, #232	@ 0xe8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013b4:	f107 0310 	add.w	r3, r7, #16
 80013b8:	22c0      	movs	r2, #192	@ 0xc0
 80013ba:	2100      	movs	r1, #0
 80013bc:	4618      	mov	r0, r3
 80013be:	f009 fa0b 	bl	800a7d8 <memset>
  if(uartHandle->Instance==USART1)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a27      	ldr	r2, [pc, #156]	@ (8001464 <HAL_UART_MspInit+0xc8>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d146      	bne.n	800145a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80013cc:	f04f 0201 	mov.w	r2, #1
 80013d0:	f04f 0300 	mov.w	r3, #0
 80013d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80013d8:	2300      	movs	r3, #0
 80013da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013de:	f107 0310 	add.w	r3, r7, #16
 80013e2:	4618      	mov	r0, r3
 80013e4:	f001 fcfa 	bl	8002ddc <HAL_RCCEx_PeriphCLKConfig>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80013ee:	f7ff fd0d 	bl	8000e0c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001468 <HAL_UART_MspInit+0xcc>)
 80013f4:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80013f8:	4a1b      	ldr	r2, [pc, #108]	@ (8001468 <HAL_UART_MspInit+0xcc>)
 80013fa:	f043 0310 	orr.w	r3, r3, #16
 80013fe:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8001402:	4b19      	ldr	r3, [pc, #100]	@ (8001468 <HAL_UART_MspInit+0xcc>)
 8001404:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001408:	f003 0310 	and.w	r3, r3, #16
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001410:	4b15      	ldr	r3, [pc, #84]	@ (8001468 <HAL_UART_MspInit+0xcc>)
 8001412:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001416:	4a14      	ldr	r2, [pc, #80]	@ (8001468 <HAL_UART_MspInit+0xcc>)
 8001418:	f043 0302 	orr.w	r3, r3, #2
 800141c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001420:	4b11      	ldr	r3, [pc, #68]	@ (8001468 <HAL_UART_MspInit+0xcc>)
 8001422:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	60bb      	str	r3, [r7, #8]
 800142c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = dbg_UART_TX_Pin|dbg_UART_RX_Pin;
 800142e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001432:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001436:	2302      	movs	r3, #2
 8001438:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001442:	2300      	movs	r3, #0
 8001444:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001448:	2304      	movs	r3, #4
 800144a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800144e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001452:	4619      	mov	r1, r3
 8001454:	4805      	ldr	r0, [pc, #20]	@ (800146c <HAL_UART_MspInit+0xd0>)
 8001456:	f000 f971 	bl	800173c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800145a:	bf00      	nop
 800145c:	37e8      	adds	r7, #232	@ 0xe8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40011000 	.word	0x40011000
 8001468:	58024400 	.word	0x58024400
 800146c:	58020400 	.word	0x58020400

08001470 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001470:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001474:	f7ff fe54 	bl	8001120 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001478:	480c      	ldr	r0, [pc, #48]	@ (80014ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800147a:	490d      	ldr	r1, [pc, #52]	@ (80014b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800147c:	4a0d      	ldr	r2, [pc, #52]	@ (80014b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800147e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001480:	e002      	b.n	8001488 <LoopCopyDataInit>

08001482 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001482:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001484:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001486:	3304      	adds	r3, #4

08001488 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001488:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800148a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800148c:	d3f9      	bcc.n	8001482 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800148e:	4a0a      	ldr	r2, [pc, #40]	@ (80014b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001490:	4c0a      	ldr	r4, [pc, #40]	@ (80014bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001492:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001494:	e001      	b.n	800149a <LoopFillZerobss>

08001496 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001496:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001498:	3204      	adds	r2, #4

0800149a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800149a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800149c:	d3fb      	bcc.n	8001496 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800149e:	f009 fa9d 	bl	800a9dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014a2:	f7ff fc07 	bl	8000cb4 <main>
  bx  lr
 80014a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014a8:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80014ac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80014b0:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 80014b4:	0800e0c4 	.word	0x0800e0c4
  ldr r2, =_sbss
 80014b8:	240001dc 	.word	0x240001dc
  ldr r4, =_ebss
 80014bc:	24004e7c 	.word	0x24004e7c

080014c0 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014c0:	e7fe      	b.n	80014c0 <ADC_IRQHandler>
	...

080014c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014ca:	2003      	movs	r0, #3
 80014cc:	f000 f903 	bl	80016d6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80014d0:	f001 fa6c 	bl	80029ac <HAL_RCC_GetSysClockFreq>
 80014d4:	4602      	mov	r2, r0
 80014d6:	4b15      	ldr	r3, [pc, #84]	@ (800152c <HAL_Init+0x68>)
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	0a1b      	lsrs	r3, r3, #8
 80014dc:	f003 030f 	and.w	r3, r3, #15
 80014e0:	4913      	ldr	r1, [pc, #76]	@ (8001530 <HAL_Init+0x6c>)
 80014e2:	5ccb      	ldrb	r3, [r1, r3]
 80014e4:	f003 031f 	and.w	r3, r3, #31
 80014e8:	fa22 f303 	lsr.w	r3, r2, r3
 80014ec:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80014ee:	4b0f      	ldr	r3, [pc, #60]	@ (800152c <HAL_Init+0x68>)
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	f003 030f 	and.w	r3, r3, #15
 80014f6:	4a0e      	ldr	r2, [pc, #56]	@ (8001530 <HAL_Init+0x6c>)
 80014f8:	5cd3      	ldrb	r3, [r2, r3]
 80014fa:	f003 031f 	and.w	r3, r3, #31
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	fa22 f303 	lsr.w	r3, r2, r3
 8001504:	4a0b      	ldr	r2, [pc, #44]	@ (8001534 <HAL_Init+0x70>)
 8001506:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001508:	4a0b      	ldr	r2, [pc, #44]	@ (8001538 <HAL_Init+0x74>)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800150e:	200f      	movs	r0, #15
 8001510:	f7ff fcb2 	bl	8000e78 <HAL_InitTick>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e002      	b.n	8001524 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800151e:	f7ff fc8d 	bl	8000e3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001522:	2300      	movs	r3, #0
}
 8001524:	4618      	mov	r0, r3
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	58024400 	.word	0x58024400
 8001530:	0800dc50 	.word	0x0800dc50
 8001534:	24000004 	.word	0x24000004
 8001538:	24000000 	.word	0x24000000

0800153c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001540:	4b06      	ldr	r3, [pc, #24]	@ (800155c <HAL_IncTick+0x20>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	461a      	mov	r2, r3
 8001546:	4b06      	ldr	r3, [pc, #24]	@ (8001560 <HAL_IncTick+0x24>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4413      	add	r3, r2
 800154c:	4a04      	ldr	r2, [pc, #16]	@ (8001560 <HAL_IncTick+0x24>)
 800154e:	6013      	str	r3, [r2, #0]
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	2400000c 	.word	0x2400000c
 8001560:	24000338 	.word	0x24000338

08001564 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  return uwTick;
 8001568:	4b03      	ldr	r3, [pc, #12]	@ (8001578 <HAL_GetTick+0x14>)
 800156a:	681b      	ldr	r3, [r3, #0]
}
 800156c:	4618      	mov	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	24000338 	.word	0x24000338

0800157c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800158c:	4b0b      	ldr	r3, [pc, #44]	@ (80015bc <__NVIC_SetPriorityGrouping+0x40>)
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001592:	68ba      	ldr	r2, [r7, #8]
 8001594:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001598:	4013      	ands	r3, r2
 800159a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015a4:	4b06      	ldr	r3, [pc, #24]	@ (80015c0 <__NVIC_SetPriorityGrouping+0x44>)
 80015a6:	4313      	orrs	r3, r2
 80015a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015aa:	4a04      	ldr	r2, [pc, #16]	@ (80015bc <__NVIC_SetPriorityGrouping+0x40>)
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	60d3      	str	r3, [r2, #12]
}
 80015b0:	bf00      	nop
 80015b2:	3714      	adds	r7, #20
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	e000ed00 	.word	0xe000ed00
 80015c0:	05fa0000 	.word	0x05fa0000

080015c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015c8:	4b04      	ldr	r3, [pc, #16]	@ (80015dc <__NVIC_GetPriorityGrouping+0x18>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	0a1b      	lsrs	r3, r3, #8
 80015ce:	f003 0307 	and.w	r3, r3, #7
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	db0b      	blt.n	800160a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015f2:	88fb      	ldrh	r3, [r7, #6]
 80015f4:	f003 021f 	and.w	r2, r3, #31
 80015f8:	4907      	ldr	r1, [pc, #28]	@ (8001618 <__NVIC_EnableIRQ+0x38>)
 80015fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015fe:	095b      	lsrs	r3, r3, #5
 8001600:	2001      	movs	r0, #1
 8001602:	fa00 f202 	lsl.w	r2, r0, r2
 8001606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	e000e100 	.word	0xe000e100

0800161c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	6039      	str	r1, [r7, #0]
 8001626:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001628:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800162c:	2b00      	cmp	r3, #0
 800162e:	db0a      	blt.n	8001646 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	b2da      	uxtb	r2, r3
 8001634:	490c      	ldr	r1, [pc, #48]	@ (8001668 <__NVIC_SetPriority+0x4c>)
 8001636:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800163a:	0112      	lsls	r2, r2, #4
 800163c:	b2d2      	uxtb	r2, r2
 800163e:	440b      	add	r3, r1
 8001640:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001644:	e00a      	b.n	800165c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	b2da      	uxtb	r2, r3
 800164a:	4908      	ldr	r1, [pc, #32]	@ (800166c <__NVIC_SetPriority+0x50>)
 800164c:	88fb      	ldrh	r3, [r7, #6]
 800164e:	f003 030f 	and.w	r3, r3, #15
 8001652:	3b04      	subs	r3, #4
 8001654:	0112      	lsls	r2, r2, #4
 8001656:	b2d2      	uxtb	r2, r2
 8001658:	440b      	add	r3, r1
 800165a:	761a      	strb	r2, [r3, #24]
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	e000e100 	.word	0xe000e100
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001670:	b480      	push	{r7}
 8001672:	b089      	sub	sp, #36	@ 0x24
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	f1c3 0307 	rsb	r3, r3, #7
 800168a:	2b04      	cmp	r3, #4
 800168c:	bf28      	it	cs
 800168e:	2304      	movcs	r3, #4
 8001690:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	3304      	adds	r3, #4
 8001696:	2b06      	cmp	r3, #6
 8001698:	d902      	bls.n	80016a0 <NVIC_EncodePriority+0x30>
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	3b03      	subs	r3, #3
 800169e:	e000      	b.n	80016a2 <NVIC_EncodePriority+0x32>
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a4:	f04f 32ff 	mov.w	r2, #4294967295
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43da      	mvns	r2, r3
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	401a      	ands	r2, r3
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016b8:	f04f 31ff 	mov.w	r1, #4294967295
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	fa01 f303 	lsl.w	r3, r1, r3
 80016c2:	43d9      	mvns	r1, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c8:	4313      	orrs	r3, r2
         );
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3724      	adds	r7, #36	@ 0x24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b082      	sub	sp, #8
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f7ff ff4c 	bl	800157c <__NVIC_SetPriorityGrouping>
}
 80016e4:	bf00      	nop
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
 80016f8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016fa:	f7ff ff63 	bl	80015c4 <__NVIC_GetPriorityGrouping>
 80016fe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	68b9      	ldr	r1, [r7, #8]
 8001704:	6978      	ldr	r0, [r7, #20]
 8001706:	f7ff ffb3 	bl	8001670 <NVIC_EncodePriority>
 800170a:	4602      	mov	r2, r0
 800170c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001710:	4611      	mov	r1, r2
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff ff82 	bl	800161c <__NVIC_SetPriority>
}
 8001718:	bf00      	nop
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800172a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff ff56 	bl	80015e0 <__NVIC_EnableIRQ>
}
 8001734:	bf00      	nop
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800173c:	b480      	push	{r7}
 800173e:	b089      	sub	sp, #36	@ 0x24
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001746:	2300      	movs	r3, #0
 8001748:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800174a:	4b89      	ldr	r3, [pc, #548]	@ (8001970 <HAL_GPIO_Init+0x234>)
 800174c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800174e:	e194      	b.n	8001a7a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	2101      	movs	r1, #1
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	fa01 f303 	lsl.w	r3, r1, r3
 800175c:	4013      	ands	r3, r2
 800175e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	2b00      	cmp	r3, #0
 8001764:	f000 8186 	beq.w	8001a74 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f003 0303 	and.w	r3, r3, #3
 8001770:	2b01      	cmp	r3, #1
 8001772:	d005      	beq.n	8001780 <HAL_GPIO_Init+0x44>
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f003 0303 	and.w	r3, r3, #3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d130      	bne.n	80017e2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	2203      	movs	r2, #3
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	43db      	mvns	r3, r3
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	4013      	ands	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	68da      	ldr	r2, [r3, #12]
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017b6:	2201      	movs	r2, #1
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	43db      	mvns	r3, r3
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	4013      	ands	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	091b      	lsrs	r3, r3, #4
 80017cc:	f003 0201 	and.w	r2, r3, #1
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	4313      	orrs	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f003 0303 	and.w	r3, r3, #3
 80017ea:	2b03      	cmp	r3, #3
 80017ec:	d017      	beq.n	800181e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	2203      	movs	r2, #3
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	43db      	mvns	r3, r3
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	4013      	ands	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	689a      	ldr	r2, [r3, #8]
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	4313      	orrs	r3, r2
 8001816:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f003 0303 	and.w	r3, r3, #3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d123      	bne.n	8001872 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	08da      	lsrs	r2, r3, #3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	3208      	adds	r2, #8
 8001832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001836:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	220f      	movs	r2, #15
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	43db      	mvns	r3, r3
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	4013      	ands	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	691a      	ldr	r2, [r3, #16]
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	f003 0307 	and.w	r3, r3, #7
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	4313      	orrs	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	08da      	lsrs	r2, r3, #3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3208      	adds	r2, #8
 800186c:	69b9      	ldr	r1, [r7, #24]
 800186e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	2203      	movs	r2, #3
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43db      	mvns	r3, r3
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	4013      	ands	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f003 0203 	and.w	r2, r3, #3
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	4313      	orrs	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f000 80e0 	beq.w	8001a74 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b4:	4b2f      	ldr	r3, [pc, #188]	@ (8001974 <HAL_GPIO_Init+0x238>)
 80018b6:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80018ba:	4a2e      	ldr	r2, [pc, #184]	@ (8001974 <HAL_GPIO_Init+0x238>)
 80018bc:	f043 0302 	orr.w	r3, r3, #2
 80018c0:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80018c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001974 <HAL_GPIO_Init+0x238>)
 80018c6:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018d2:	4a29      	ldr	r2, [pc, #164]	@ (8001978 <HAL_GPIO_Init+0x23c>)
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	089b      	lsrs	r3, r3, #2
 80018d8:	3302      	adds	r3, #2
 80018da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	f003 0303 	and.w	r3, r3, #3
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	220f      	movs	r2, #15
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	43db      	mvns	r3, r3
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	4013      	ands	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a20      	ldr	r2, [pc, #128]	@ (800197c <HAL_GPIO_Init+0x240>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d052      	beq.n	80019a4 <HAL_GPIO_Init+0x268>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a1f      	ldr	r2, [pc, #124]	@ (8001980 <HAL_GPIO_Init+0x244>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d031      	beq.n	800196a <HAL_GPIO_Init+0x22e>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a1e      	ldr	r2, [pc, #120]	@ (8001984 <HAL_GPIO_Init+0x248>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d02b      	beq.n	8001966 <HAL_GPIO_Init+0x22a>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a1d      	ldr	r2, [pc, #116]	@ (8001988 <HAL_GPIO_Init+0x24c>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d025      	beq.n	8001962 <HAL_GPIO_Init+0x226>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a1c      	ldr	r2, [pc, #112]	@ (800198c <HAL_GPIO_Init+0x250>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d01f      	beq.n	800195e <HAL_GPIO_Init+0x222>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a1b      	ldr	r2, [pc, #108]	@ (8001990 <HAL_GPIO_Init+0x254>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d019      	beq.n	800195a <HAL_GPIO_Init+0x21e>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a1a      	ldr	r2, [pc, #104]	@ (8001994 <HAL_GPIO_Init+0x258>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d013      	beq.n	8001956 <HAL_GPIO_Init+0x21a>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a19      	ldr	r2, [pc, #100]	@ (8001998 <HAL_GPIO_Init+0x25c>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d00d      	beq.n	8001952 <HAL_GPIO_Init+0x216>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a18      	ldr	r2, [pc, #96]	@ (800199c <HAL_GPIO_Init+0x260>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d007      	beq.n	800194e <HAL_GPIO_Init+0x212>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a17      	ldr	r2, [pc, #92]	@ (80019a0 <HAL_GPIO_Init+0x264>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d101      	bne.n	800194a <HAL_GPIO_Init+0x20e>
 8001946:	2309      	movs	r3, #9
 8001948:	e02d      	b.n	80019a6 <HAL_GPIO_Init+0x26a>
 800194a:	230a      	movs	r3, #10
 800194c:	e02b      	b.n	80019a6 <HAL_GPIO_Init+0x26a>
 800194e:	2308      	movs	r3, #8
 8001950:	e029      	b.n	80019a6 <HAL_GPIO_Init+0x26a>
 8001952:	2307      	movs	r3, #7
 8001954:	e027      	b.n	80019a6 <HAL_GPIO_Init+0x26a>
 8001956:	2306      	movs	r3, #6
 8001958:	e025      	b.n	80019a6 <HAL_GPIO_Init+0x26a>
 800195a:	2305      	movs	r3, #5
 800195c:	e023      	b.n	80019a6 <HAL_GPIO_Init+0x26a>
 800195e:	2304      	movs	r3, #4
 8001960:	e021      	b.n	80019a6 <HAL_GPIO_Init+0x26a>
 8001962:	2303      	movs	r3, #3
 8001964:	e01f      	b.n	80019a6 <HAL_GPIO_Init+0x26a>
 8001966:	2302      	movs	r3, #2
 8001968:	e01d      	b.n	80019a6 <HAL_GPIO_Init+0x26a>
 800196a:	2301      	movs	r3, #1
 800196c:	e01b      	b.n	80019a6 <HAL_GPIO_Init+0x26a>
 800196e:	bf00      	nop
 8001970:	58000080 	.word	0x58000080
 8001974:	58024400 	.word	0x58024400
 8001978:	58000400 	.word	0x58000400
 800197c:	58020000 	.word	0x58020000
 8001980:	58020400 	.word	0x58020400
 8001984:	58020800 	.word	0x58020800
 8001988:	58020c00 	.word	0x58020c00
 800198c:	58021000 	.word	0x58021000
 8001990:	58021400 	.word	0x58021400
 8001994:	58021800 	.word	0x58021800
 8001998:	58021c00 	.word	0x58021c00
 800199c:	58022000 	.word	0x58022000
 80019a0:	58022400 	.word	0x58022400
 80019a4:	2300      	movs	r3, #0
 80019a6:	69fa      	ldr	r2, [r7, #28]
 80019a8:	f002 0203 	and.w	r2, r2, #3
 80019ac:	0092      	lsls	r2, r2, #2
 80019ae:	4093      	lsls	r3, r2
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019b6:	4938      	ldr	r1, [pc, #224]	@ (8001a98 <HAL_GPIO_Init+0x35c>)
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	089b      	lsrs	r3, r3, #2
 80019bc:	3302      	adds	r3, #2
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	43db      	mvns	r3, r3
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	4013      	ands	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80019ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80019f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	43db      	mvns	r3, r3
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	4013      	ands	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d003      	beq.n	8001a18 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001a18:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d003      	beq.n	8001a44 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	43db      	mvns	r3, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4013      	ands	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	3301      	adds	r3, #1
 8001a78:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	fa22 f303 	lsr.w	r3, r2, r3
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f47f ae63 	bne.w	8001750 <HAL_GPIO_Init+0x14>
  }
}
 8001a8a:	bf00      	nop
 8001a8c:	bf00      	nop
 8001a8e:	3724      	adds	r7, #36	@ 0x24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	58000400 	.word	0x58000400

08001a9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	691a      	ldr	r2, [r3, #16]
 8001aac:	887b      	ldrh	r3, [r7, #2]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d002      	beq.n	8001aba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	73fb      	strb	r3, [r7, #15]
 8001ab8:	e001      	b.n	8001abe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001aba:	2300      	movs	r3, #0
 8001abc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3714      	adds	r7, #20
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8001ad6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ada:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001ade:	88fb      	ldrh	r3, [r7, #6]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d008      	beq.n	8001af8 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ae6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001aea:	88fb      	ldrh	r3, [r7, #6]
 8001aec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001af0:	88fb      	ldrh	r3, [r7, #6]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff fbe0 	bl	80012b8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8001af8:	bf00      	nop
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e08b      	b.n	8001c2a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d106      	bne.n	8001b2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f7ff f85a 	bl	8000be0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2224      	movs	r2, #36	@ 0x24
 8001b30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f022 0201 	bic.w	r2, r2, #1
 8001b42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685a      	ldr	r2, [r3, #4]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b50:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b60:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d107      	bne.n	8001b7a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689a      	ldr	r2, [r3, #8]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	e006      	b.n	8001b88 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	689a      	ldr	r2, [r3, #8]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001b86:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d108      	bne.n	8001ba2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	685a      	ldr	r2, [r3, #4]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001b9e:	605a      	str	r2, [r3, #4]
 8001ba0:	e007      	b.n	8001bb2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001bb0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	6859      	ldr	r1, [r3, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	4b1d      	ldr	r3, [pc, #116]	@ (8001c34 <HAL_I2C_Init+0x134>)
 8001bbe:	430b      	orrs	r3, r1
 8001bc0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68da      	ldr	r2, [r3, #12]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001bd0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	691a      	ldr	r2, [r3, #16]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	430a      	orrs	r2, r1
 8001bea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	69d9      	ldr	r1, [r3, #28]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a1a      	ldr	r2, [r3, #32]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f042 0201 	orr.w	r2, r2, #1
 8001c0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2220      	movs	r2, #32
 8001c16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	02008000 	.word	0x02008000

08001c38 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b20      	cmp	r3, #32
 8001c4c:	d138      	bne.n	8001cc0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d101      	bne.n	8001c5c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001c58:	2302      	movs	r3, #2
 8001c5a:	e032      	b.n	8001cc2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2224      	movs	r2, #36	@ 0x24
 8001c68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f022 0201 	bic.w	r2, r2, #1
 8001c7a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001c8a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6819      	ldr	r1, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f042 0201 	orr.w	r2, r2, #1
 8001caa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2220      	movs	r2, #32
 8001cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	e000      	b.n	8001cc2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001cc0:	2302      	movs	r3, #2
  }
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b085      	sub	sp, #20
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
 8001cd6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	2b20      	cmp	r3, #32
 8001ce2:	d139      	bne.n	8001d58 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d101      	bne.n	8001cf2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001cee:	2302      	movs	r3, #2
 8001cf0:	e033      	b.n	8001d5a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2224      	movs	r2, #36	@ 0x24
 8001cfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f022 0201 	bic.w	r2, r2, #1
 8001d10:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001d20:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	021b      	lsls	r3, r3, #8
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f042 0201 	orr.w	r2, r2, #1
 8001d42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2220      	movs	r2, #32
 8001d48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001d54:	2300      	movs	r3, #0
 8001d56:	e000      	b.n	8001d5a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001d58:	2302      	movs	r3, #2
  }
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3714      	adds	r7, #20
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
	...

08001d68 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001d70:	4b19      	ldr	r3, [pc, #100]	@ (8001dd8 <HAL_PWREx_ConfigSupply+0x70>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	f003 0304 	and.w	r3, r3, #4
 8001d78:	2b04      	cmp	r3, #4
 8001d7a:	d00a      	beq.n	8001d92 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001d7c:	4b16      	ldr	r3, [pc, #88]	@ (8001dd8 <HAL_PWREx_ConfigSupply+0x70>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	f003 0307 	and.w	r3, r3, #7
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d001      	beq.n	8001d8e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e01f      	b.n	8001dce <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	e01d      	b.n	8001dce <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001d92:	4b11      	ldr	r3, [pc, #68]	@ (8001dd8 <HAL_PWREx_ConfigSupply+0x70>)
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	f023 0207 	bic.w	r2, r3, #7
 8001d9a:	490f      	ldr	r1, [pc, #60]	@ (8001dd8 <HAL_PWREx_ConfigSupply+0x70>)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001da2:	f7ff fbdf 	bl	8001564 <HAL_GetTick>
 8001da6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001da8:	e009      	b.n	8001dbe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001daa:	f7ff fbdb 	bl	8001564 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001db8:	d901      	bls.n	8001dbe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e007      	b.n	8001dce <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001dbe:	4b06      	ldr	r3, [pc, #24]	@ (8001dd8 <HAL_PWREx_ConfigSupply+0x70>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001dc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001dca:	d1ee      	bne.n	8001daa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	58024800 	.word	0x58024800

08001ddc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08c      	sub	sp, #48	@ 0x30
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d102      	bne.n	8001df0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	f000 bc1f 	b.w	800262e <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f000 80b3 	beq.w	8001f64 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dfe:	4b95      	ldr	r3, [pc, #596]	@ (8002054 <HAL_RCC_OscConfig+0x278>)
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001e08:	4b92      	ldr	r3, [pc, #584]	@ (8002054 <HAL_RCC_OscConfig+0x278>)
 8001e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e10:	2b10      	cmp	r3, #16
 8001e12:	d007      	beq.n	8001e24 <HAL_RCC_OscConfig+0x48>
 8001e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e16:	2b18      	cmp	r3, #24
 8001e18:	d112      	bne.n	8001e40 <HAL_RCC_OscConfig+0x64>
 8001e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e1c:	f003 0303 	and.w	r3, r3, #3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d10d      	bne.n	8001e40 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e24:	4b8b      	ldr	r3, [pc, #556]	@ (8002054 <HAL_RCC_OscConfig+0x278>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	f000 8098 	beq.w	8001f62 <HAL_RCC_OscConfig+0x186>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f040 8093 	bne.w	8001f62 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e3f6      	b.n	800262e <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e48:	d106      	bne.n	8001e58 <HAL_RCC_OscConfig+0x7c>
 8001e4a:	4b82      	ldr	r3, [pc, #520]	@ (8002054 <HAL_RCC_OscConfig+0x278>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a81      	ldr	r2, [pc, #516]	@ (8002054 <HAL_RCC_OscConfig+0x278>)
 8001e50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e54:	6013      	str	r3, [r2, #0]
 8001e56:	e058      	b.n	8001f0a <HAL_RCC_OscConfig+0x12e>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d112      	bne.n	8001e86 <HAL_RCC_OscConfig+0xaa>
 8001e60:	4b7c      	ldr	r3, [pc, #496]	@ (8002054 <HAL_RCC_OscConfig+0x278>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a7b      	ldr	r2, [pc, #492]	@ (8002054 <HAL_RCC_OscConfig+0x278>)
 8001e66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e6a:	6013      	str	r3, [r2, #0]
 8001e6c:	4b79      	ldr	r3, [pc, #484]	@ (8002054 <HAL_RCC_OscConfig+0x278>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a78      	ldr	r2, [pc, #480]	@ (8002054 <HAL_RCC_OscConfig+0x278>)
 8001e72:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001e76:	6013      	str	r3, [r2, #0]
 8001e78:	4b76      	ldr	r3, [pc, #472]	@ (8002054 <HAL_RCC_OscConfig+0x278>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a75      	ldr	r2, [pc, #468]	@ (8002054 <HAL_RCC_OscConfig+0x278>)
 8001e7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e82:	6013      	str	r3, [r2, #0]
 8001e84:	e041      	b.n	8001f0a <HAL_RCC_OscConfig+0x12e>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e8e:	d112      	bne.n	8001eb6 <HAL_RCC_OscConfig+0xda>
 8001e90:	4b70      	ldr	r3, [pc, #448]	@ (8002054 <HAL_RCC_OscConfig+0x278>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a6f      	ldr	r2, [pc, #444]	@ (8002054 <HAL_RCC_OscConfig+0x278>)
 8001e96:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e9a:	6013      	str	r3, [r2, #0]
 8001e9c:	4b6d      	ldr	r3, [pc, #436]	@ (8002054 <HAL_RCC_OscConfig+0x278>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a6c      	ldr	r2, [pc, #432]	@ (8002054 <HAL_RCC_OscConfig+0x278>)
 8001ea2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001ea6:	6013      	str	r3, [r2, #0]
 8001ea8:	4b6a      	ldr	r3, [pc, #424]	@ (8002054 <HAL_RCC_OscConfig+0x278>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a69      	ldr	r2, [pc, #420]	@ (8002054 <HAL_RCC_OscConfig+0x278>)
 8001eae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eb2:	6013      	str	r3, [r2, #0]
 8001eb4:	e029      	b.n	8001f0a <HAL_RCC_OscConfig+0x12e>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8001ebe:	d112      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x10a>
 8001ec0:	4b64      	ldr	r3, [pc, #400]	@ (8002054 <HAL_RCC_OscConfig+0x278>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a63      	ldr	r2, [pc, #396]	@ (8002054 <HAL_RCC_OscConfig+0x278>)
 8001ec6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001eca:	6013      	str	r3, [r2, #0]
 8001ecc:	4b61      	ldr	r3, [pc, #388]	@ (8002054 <HAL_RCC_OscConfig+0x278>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a60      	ldr	r2, [pc, #384]	@ (8002054 <HAL_RCC_OscConfig+0x278>)
 8001ed2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001ed6:	6013      	str	r3, [r2, #0]
 8001ed8:	4b5e      	ldr	r3, [pc, #376]	@ (8002054 <HAL_RCC_OscConfig+0x278>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a5d      	ldr	r2, [pc, #372]	@ (8002054 <HAL_RCC_OscConfig+0x278>)
 8001ede:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ee2:	6013      	str	r3, [r2, #0]
 8001ee4:	e011      	b.n	8001f0a <HAL_RCC_OscConfig+0x12e>
 8001ee6:	4b5b      	ldr	r3, [pc, #364]	@ (8002054 <HAL_RCC_OscConfig+0x278>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a5a      	ldr	r2, [pc, #360]	@ (8002054 <HAL_RCC_OscConfig+0x278>)
 8001eec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ef0:	6013      	str	r3, [r2, #0]
 8001ef2:	4b58      	ldr	r3, [pc, #352]	@ (8002054 <HAL_RCC_OscConfig+0x278>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a57      	ldr	r2, [pc, #348]	@ (8002054 <HAL_RCC_OscConfig+0x278>)
 8001ef8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001efc:	6013      	str	r3, [r2, #0]
 8001efe:	4b55      	ldr	r3, [pc, #340]	@ (8002054 <HAL_RCC_OscConfig+0x278>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a54      	ldr	r2, [pc, #336]	@ (8002054 <HAL_RCC_OscConfig+0x278>)
 8001f04:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001f08:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d013      	beq.n	8001f3a <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f12:	f7ff fb27 	bl	8001564 <HAL_GetTick>
 8001f16:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f18:	e008      	b.n	8001f2c <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f1a:	f7ff fb23 	bl	8001564 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b64      	cmp	r3, #100	@ 0x64
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e380      	b.n	800262e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f2c:	4b49      	ldr	r3, [pc, #292]	@ (8002054 <HAL_RCC_OscConfig+0x278>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d0f0      	beq.n	8001f1a <HAL_RCC_OscConfig+0x13e>
 8001f38:	e014      	b.n	8001f64 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3a:	f7ff fb13 	bl	8001564 <HAL_GetTick>
 8001f3e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f40:	e008      	b.n	8001f54 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f42:	f7ff fb0f 	bl	8001564 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b64      	cmp	r3, #100	@ 0x64
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e36c      	b.n	800262e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f54:	4b3f      	ldr	r3, [pc, #252]	@ (8002054 <HAL_RCC_OscConfig+0x278>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d1f0      	bne.n	8001f42 <HAL_RCC_OscConfig+0x166>
 8001f60:	e000      	b.n	8001f64 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f62:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	f000 808c 	beq.w	800208a <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f72:	4b38      	ldr	r3, [pc, #224]	@ (8002054 <HAL_RCC_OscConfig+0x278>)
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f7a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001f7c:	4b35      	ldr	r3, [pc, #212]	@ (8002054 <HAL_RCC_OscConfig+0x278>)
 8001f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f80:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001f82:	6a3b      	ldr	r3, [r7, #32]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d007      	beq.n	8001f98 <HAL_RCC_OscConfig+0x1bc>
 8001f88:	6a3b      	ldr	r3, [r7, #32]
 8001f8a:	2b18      	cmp	r3, #24
 8001f8c:	d137      	bne.n	8001ffe <HAL_RCC_OscConfig+0x222>
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	f003 0303 	and.w	r3, r3, #3
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d132      	bne.n	8001ffe <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f98:	4b2e      	ldr	r3, [pc, #184]	@ (8002054 <HAL_RCC_OscConfig+0x278>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0304 	and.w	r3, r3, #4
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d005      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x1d4>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d101      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e33e      	b.n	800262e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001fb0:	4b28      	ldr	r3, [pc, #160]	@ (8002054 <HAL_RCC_OscConfig+0x278>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f023 0219 	bic.w	r2, r3, #25
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	4925      	ldr	r1, [pc, #148]	@ (8002054 <HAL_RCC_OscConfig+0x278>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc2:	f7ff facf 	bl	8001564 <HAL_GetTick>
 8001fc6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fc8:	e008      	b.n	8001fdc <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fca:	f7ff facb 	bl	8001564 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e328      	b.n	800262e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fdc:	4b1d      	ldr	r3, [pc, #116]	@ (8002054 <HAL_RCC_OscConfig+0x278>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0f0      	beq.n	8001fca <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe8:	4b1a      	ldr	r3, [pc, #104]	@ (8002054 <HAL_RCC_OscConfig+0x278>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	061b      	lsls	r3, r3, #24
 8001ff6:	4917      	ldr	r1, [pc, #92]	@ (8002054 <HAL_RCC_OscConfig+0x278>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ffc:	e045      	b.n	800208a <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d028      	beq.n	8002058 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002006:	4b13      	ldr	r3, [pc, #76]	@ (8002054 <HAL_RCC_OscConfig+0x278>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f023 0219 	bic.w	r2, r3, #25
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	4910      	ldr	r1, [pc, #64]	@ (8002054 <HAL_RCC_OscConfig+0x278>)
 8002014:	4313      	orrs	r3, r2
 8002016:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002018:	f7ff faa4 	bl	8001564 <HAL_GetTick>
 800201c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002020:	f7ff faa0 	bl	8001564 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e2fd      	b.n	800262e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002032:	4b08      	ldr	r3, [pc, #32]	@ (8002054 <HAL_RCC_OscConfig+0x278>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0304 	and.w	r3, r3, #4
 800203a:	2b00      	cmp	r3, #0
 800203c:	d0f0      	beq.n	8002020 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800203e:	4b05      	ldr	r3, [pc, #20]	@ (8002054 <HAL_RCC_OscConfig+0x278>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	061b      	lsls	r3, r3, #24
 800204c:	4901      	ldr	r1, [pc, #4]	@ (8002054 <HAL_RCC_OscConfig+0x278>)
 800204e:	4313      	orrs	r3, r2
 8002050:	604b      	str	r3, [r1, #4]
 8002052:	e01a      	b.n	800208a <HAL_RCC_OscConfig+0x2ae>
 8002054:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002058:	4b97      	ldr	r3, [pc, #604]	@ (80022b8 <HAL_RCC_OscConfig+0x4dc>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a96      	ldr	r2, [pc, #600]	@ (80022b8 <HAL_RCC_OscConfig+0x4dc>)
 800205e:	f023 0301 	bic.w	r3, r3, #1
 8002062:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002064:	f7ff fa7e 	bl	8001564 <HAL_GetTick>
 8002068:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800206c:	f7ff fa7a 	bl	8001564 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e2d7      	b.n	800262e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800207e:	4b8e      	ldr	r3, [pc, #568]	@ (80022b8 <HAL_RCC_OscConfig+0x4dc>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0304 	and.w	r3, r3, #4
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1f0      	bne.n	800206c <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0310 	and.w	r3, r3, #16
 8002092:	2b00      	cmp	r3, #0
 8002094:	d06a      	beq.n	800216c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002096:	4b88      	ldr	r3, [pc, #544]	@ (80022b8 <HAL_RCC_OscConfig+0x4dc>)
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800209e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80020a0:	4b85      	ldr	r3, [pc, #532]	@ (80022b8 <HAL_RCC_OscConfig+0x4dc>)
 80020a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020a4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	2b08      	cmp	r3, #8
 80020aa:	d007      	beq.n	80020bc <HAL_RCC_OscConfig+0x2e0>
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	2b18      	cmp	r3, #24
 80020b0:	d11b      	bne.n	80020ea <HAL_RCC_OscConfig+0x30e>
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	f003 0303 	and.w	r3, r3, #3
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d116      	bne.n	80020ea <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80020bc:	4b7e      	ldr	r3, [pc, #504]	@ (80022b8 <HAL_RCC_OscConfig+0x4dc>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d005      	beq.n	80020d4 <HAL_RCC_OscConfig+0x2f8>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	69db      	ldr	r3, [r3, #28]
 80020cc:	2b80      	cmp	r3, #128	@ 0x80
 80020ce:	d001      	beq.n	80020d4 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e2ac      	b.n	800262e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80020d4:	4b78      	ldr	r3, [pc, #480]	@ (80022b8 <HAL_RCC_OscConfig+0x4dc>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a1b      	ldr	r3, [r3, #32]
 80020e0:	061b      	lsls	r3, r3, #24
 80020e2:	4975      	ldr	r1, [pc, #468]	@ (80022b8 <HAL_RCC_OscConfig+0x4dc>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80020e8:	e040      	b.n	800216c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d023      	beq.n	800213a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80020f2:	4b71      	ldr	r3, [pc, #452]	@ (80022b8 <HAL_RCC_OscConfig+0x4dc>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a70      	ldr	r2, [pc, #448]	@ (80022b8 <HAL_RCC_OscConfig+0x4dc>)
 80020f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fe:	f7ff fa31 	bl	8001564 <HAL_GetTick>
 8002102:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002104:	e008      	b.n	8002118 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002106:	f7ff fa2d 	bl	8001564 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e28a      	b.n	800262e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002118:	4b67      	ldr	r3, [pc, #412]	@ (80022b8 <HAL_RCC_OscConfig+0x4dc>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002120:	2b00      	cmp	r3, #0
 8002122:	d0f0      	beq.n	8002106 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002124:	4b64      	ldr	r3, [pc, #400]	@ (80022b8 <HAL_RCC_OscConfig+0x4dc>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a1b      	ldr	r3, [r3, #32]
 8002130:	061b      	lsls	r3, r3, #24
 8002132:	4961      	ldr	r1, [pc, #388]	@ (80022b8 <HAL_RCC_OscConfig+0x4dc>)
 8002134:	4313      	orrs	r3, r2
 8002136:	60cb      	str	r3, [r1, #12]
 8002138:	e018      	b.n	800216c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800213a:	4b5f      	ldr	r3, [pc, #380]	@ (80022b8 <HAL_RCC_OscConfig+0x4dc>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a5e      	ldr	r2, [pc, #376]	@ (80022b8 <HAL_RCC_OscConfig+0x4dc>)
 8002140:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002144:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002146:	f7ff fa0d 	bl	8001564 <HAL_GetTick>
 800214a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800214c:	e008      	b.n	8002160 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800214e:	f7ff fa09 	bl	8001564 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e266      	b.n	800262e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002160:	4b55      	ldr	r3, [pc, #340]	@ (80022b8 <HAL_RCC_OscConfig+0x4dc>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002168:	2b00      	cmp	r3, #0
 800216a:	d1f0      	bne.n	800214e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0308 	and.w	r3, r3, #8
 8002174:	2b00      	cmp	r3, #0
 8002176:	d036      	beq.n	80021e6 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	695b      	ldr	r3, [r3, #20]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d019      	beq.n	80021b4 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002180:	4b4d      	ldr	r3, [pc, #308]	@ (80022b8 <HAL_RCC_OscConfig+0x4dc>)
 8002182:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002184:	4a4c      	ldr	r2, [pc, #304]	@ (80022b8 <HAL_RCC_OscConfig+0x4dc>)
 8002186:	f043 0301 	orr.w	r3, r3, #1
 800218a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800218c:	f7ff f9ea 	bl	8001564 <HAL_GetTick>
 8002190:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002194:	f7ff f9e6 	bl	8001564 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e243      	b.n	800262e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80021a6:	4b44      	ldr	r3, [pc, #272]	@ (80022b8 <HAL_RCC_OscConfig+0x4dc>)
 80021a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d0f0      	beq.n	8002194 <HAL_RCC_OscConfig+0x3b8>
 80021b2:	e018      	b.n	80021e6 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021b4:	4b40      	ldr	r3, [pc, #256]	@ (80022b8 <HAL_RCC_OscConfig+0x4dc>)
 80021b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021b8:	4a3f      	ldr	r2, [pc, #252]	@ (80022b8 <HAL_RCC_OscConfig+0x4dc>)
 80021ba:	f023 0301 	bic.w	r3, r3, #1
 80021be:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c0:	f7ff f9d0 	bl	8001564 <HAL_GetTick>
 80021c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021c8:	f7ff f9cc 	bl	8001564 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e229      	b.n	800262e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80021da:	4b37      	ldr	r3, [pc, #220]	@ (80022b8 <HAL_RCC_OscConfig+0x4dc>)
 80021dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1f0      	bne.n	80021c8 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0320 	and.w	r3, r3, #32
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d036      	beq.n	8002260 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d019      	beq.n	800222e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80021fa:	4b2f      	ldr	r3, [pc, #188]	@ (80022b8 <HAL_RCC_OscConfig+0x4dc>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a2e      	ldr	r2, [pc, #184]	@ (80022b8 <HAL_RCC_OscConfig+0x4dc>)
 8002200:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002204:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002206:	f7ff f9ad 	bl	8001564 <HAL_GetTick>
 800220a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800220c:	e008      	b.n	8002220 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800220e:	f7ff f9a9 	bl	8001564 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e206      	b.n	800262e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002220:	4b25      	ldr	r3, [pc, #148]	@ (80022b8 <HAL_RCC_OscConfig+0x4dc>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d0f0      	beq.n	800220e <HAL_RCC_OscConfig+0x432>
 800222c:	e018      	b.n	8002260 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800222e:	4b22      	ldr	r3, [pc, #136]	@ (80022b8 <HAL_RCC_OscConfig+0x4dc>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a21      	ldr	r2, [pc, #132]	@ (80022b8 <HAL_RCC_OscConfig+0x4dc>)
 8002234:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002238:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800223a:	f7ff f993 	bl	8001564 <HAL_GetTick>
 800223e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002242:	f7ff f98f 	bl	8001564 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e1ec      	b.n	800262e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002254:	4b18      	ldr	r3, [pc, #96]	@ (80022b8 <HAL_RCC_OscConfig+0x4dc>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1f0      	bne.n	8002242 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	2b00      	cmp	r3, #0
 800226a:	f000 80af 	beq.w	80023cc <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800226e:	4b13      	ldr	r3, [pc, #76]	@ (80022bc <HAL_RCC_OscConfig+0x4e0>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a12      	ldr	r2, [pc, #72]	@ (80022bc <HAL_RCC_OscConfig+0x4e0>)
 8002274:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002278:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800227a:	f7ff f973 	bl	8001564 <HAL_GetTick>
 800227e:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002280:	e008      	b.n	8002294 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002282:	f7ff f96f 	bl	8001564 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b64      	cmp	r3, #100	@ 0x64
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e1cc      	b.n	800262e <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002294:	4b09      	ldr	r3, [pc, #36]	@ (80022bc <HAL_RCC_OscConfig+0x4e0>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800229c:	2b00      	cmp	r3, #0
 800229e:	d0f0      	beq.n	8002282 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d10b      	bne.n	80022c0 <HAL_RCC_OscConfig+0x4e4>
 80022a8:	4b03      	ldr	r3, [pc, #12]	@ (80022b8 <HAL_RCC_OscConfig+0x4dc>)
 80022aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022ac:	4a02      	ldr	r2, [pc, #8]	@ (80022b8 <HAL_RCC_OscConfig+0x4dc>)
 80022ae:	f043 0301 	orr.w	r3, r3, #1
 80022b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80022b4:	e05b      	b.n	800236e <HAL_RCC_OscConfig+0x592>
 80022b6:	bf00      	nop
 80022b8:	58024400 	.word	0x58024400
 80022bc:	58024800 	.word	0x58024800
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d112      	bne.n	80022ee <HAL_RCC_OscConfig+0x512>
 80022c8:	4b9d      	ldr	r3, [pc, #628]	@ (8002540 <HAL_RCC_OscConfig+0x764>)
 80022ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022cc:	4a9c      	ldr	r2, [pc, #624]	@ (8002540 <HAL_RCC_OscConfig+0x764>)
 80022ce:	f023 0301 	bic.w	r3, r3, #1
 80022d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80022d4:	4b9a      	ldr	r3, [pc, #616]	@ (8002540 <HAL_RCC_OscConfig+0x764>)
 80022d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022d8:	4a99      	ldr	r2, [pc, #612]	@ (8002540 <HAL_RCC_OscConfig+0x764>)
 80022da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80022de:	6713      	str	r3, [r2, #112]	@ 0x70
 80022e0:	4b97      	ldr	r3, [pc, #604]	@ (8002540 <HAL_RCC_OscConfig+0x764>)
 80022e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022e4:	4a96      	ldr	r2, [pc, #600]	@ (8002540 <HAL_RCC_OscConfig+0x764>)
 80022e6:	f023 0304 	bic.w	r3, r3, #4
 80022ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80022ec:	e03f      	b.n	800236e <HAL_RCC_OscConfig+0x592>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	2b05      	cmp	r3, #5
 80022f4:	d112      	bne.n	800231c <HAL_RCC_OscConfig+0x540>
 80022f6:	4b92      	ldr	r3, [pc, #584]	@ (8002540 <HAL_RCC_OscConfig+0x764>)
 80022f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022fa:	4a91      	ldr	r2, [pc, #580]	@ (8002540 <HAL_RCC_OscConfig+0x764>)
 80022fc:	f043 0304 	orr.w	r3, r3, #4
 8002300:	6713      	str	r3, [r2, #112]	@ 0x70
 8002302:	4b8f      	ldr	r3, [pc, #572]	@ (8002540 <HAL_RCC_OscConfig+0x764>)
 8002304:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002306:	4a8e      	ldr	r2, [pc, #568]	@ (8002540 <HAL_RCC_OscConfig+0x764>)
 8002308:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800230c:	6713      	str	r3, [r2, #112]	@ 0x70
 800230e:	4b8c      	ldr	r3, [pc, #560]	@ (8002540 <HAL_RCC_OscConfig+0x764>)
 8002310:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002312:	4a8b      	ldr	r2, [pc, #556]	@ (8002540 <HAL_RCC_OscConfig+0x764>)
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	6713      	str	r3, [r2, #112]	@ 0x70
 800231a:	e028      	b.n	800236e <HAL_RCC_OscConfig+0x592>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	2b85      	cmp	r3, #133	@ 0x85
 8002322:	d112      	bne.n	800234a <HAL_RCC_OscConfig+0x56e>
 8002324:	4b86      	ldr	r3, [pc, #536]	@ (8002540 <HAL_RCC_OscConfig+0x764>)
 8002326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002328:	4a85      	ldr	r2, [pc, #532]	@ (8002540 <HAL_RCC_OscConfig+0x764>)
 800232a:	f043 0304 	orr.w	r3, r3, #4
 800232e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002330:	4b83      	ldr	r3, [pc, #524]	@ (8002540 <HAL_RCC_OscConfig+0x764>)
 8002332:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002334:	4a82      	ldr	r2, [pc, #520]	@ (8002540 <HAL_RCC_OscConfig+0x764>)
 8002336:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800233a:	6713      	str	r3, [r2, #112]	@ 0x70
 800233c:	4b80      	ldr	r3, [pc, #512]	@ (8002540 <HAL_RCC_OscConfig+0x764>)
 800233e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002340:	4a7f      	ldr	r2, [pc, #508]	@ (8002540 <HAL_RCC_OscConfig+0x764>)
 8002342:	f043 0301 	orr.w	r3, r3, #1
 8002346:	6713      	str	r3, [r2, #112]	@ 0x70
 8002348:	e011      	b.n	800236e <HAL_RCC_OscConfig+0x592>
 800234a:	4b7d      	ldr	r3, [pc, #500]	@ (8002540 <HAL_RCC_OscConfig+0x764>)
 800234c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800234e:	4a7c      	ldr	r2, [pc, #496]	@ (8002540 <HAL_RCC_OscConfig+0x764>)
 8002350:	f023 0301 	bic.w	r3, r3, #1
 8002354:	6713      	str	r3, [r2, #112]	@ 0x70
 8002356:	4b7a      	ldr	r3, [pc, #488]	@ (8002540 <HAL_RCC_OscConfig+0x764>)
 8002358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800235a:	4a79      	ldr	r2, [pc, #484]	@ (8002540 <HAL_RCC_OscConfig+0x764>)
 800235c:	f023 0304 	bic.w	r3, r3, #4
 8002360:	6713      	str	r3, [r2, #112]	@ 0x70
 8002362:	4b77      	ldr	r3, [pc, #476]	@ (8002540 <HAL_RCC_OscConfig+0x764>)
 8002364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002366:	4a76      	ldr	r2, [pc, #472]	@ (8002540 <HAL_RCC_OscConfig+0x764>)
 8002368:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800236c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d015      	beq.n	80023a2 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002376:	f7ff f8f5 	bl	8001564 <HAL_GetTick>
 800237a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800237c:	e00a      	b.n	8002394 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800237e:	f7ff f8f1 	bl	8001564 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	f241 3288 	movw	r2, #5000	@ 0x1388
 800238c:	4293      	cmp	r3, r2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e14c      	b.n	800262e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002394:	4b6a      	ldr	r3, [pc, #424]	@ (8002540 <HAL_RCC_OscConfig+0x764>)
 8002396:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0ee      	beq.n	800237e <HAL_RCC_OscConfig+0x5a2>
 80023a0:	e014      	b.n	80023cc <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a2:	f7ff f8df 	bl	8001564 <HAL_GetTick>
 80023a6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80023a8:	e00a      	b.n	80023c0 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023aa:	f7ff f8db 	bl	8001564 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e136      	b.n	800262e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80023c0:	4b5f      	ldr	r3, [pc, #380]	@ (8002540 <HAL_RCC_OscConfig+0x764>)
 80023c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1ee      	bne.n	80023aa <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	f000 812b 	beq.w	800262c <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80023d6:	4b5a      	ldr	r3, [pc, #360]	@ (8002540 <HAL_RCC_OscConfig+0x764>)
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80023de:	2b18      	cmp	r3, #24
 80023e0:	f000 80bb 	beq.w	800255a <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	f040 8095 	bne.w	8002518 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ee:	4b54      	ldr	r3, [pc, #336]	@ (8002540 <HAL_RCC_OscConfig+0x764>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a53      	ldr	r2, [pc, #332]	@ (8002540 <HAL_RCC_OscConfig+0x764>)
 80023f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fa:	f7ff f8b3 	bl	8001564 <HAL_GetTick>
 80023fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002400:	e008      	b.n	8002414 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002402:	f7ff f8af 	bl	8001564 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d901      	bls.n	8002414 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e10c      	b.n	800262e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002414:	4b4a      	ldr	r3, [pc, #296]	@ (8002540 <HAL_RCC_OscConfig+0x764>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1f0      	bne.n	8002402 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002420:	4b47      	ldr	r3, [pc, #284]	@ (8002540 <HAL_RCC_OscConfig+0x764>)
 8002422:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002424:	4b47      	ldr	r3, [pc, #284]	@ (8002544 <HAL_RCC_OscConfig+0x768>)
 8002426:	4013      	ands	r3, r2
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002430:	0112      	lsls	r2, r2, #4
 8002432:	430a      	orrs	r2, r1
 8002434:	4942      	ldr	r1, [pc, #264]	@ (8002540 <HAL_RCC_OscConfig+0x764>)
 8002436:	4313      	orrs	r3, r2
 8002438:	628b      	str	r3, [r1, #40]	@ 0x28
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800243e:	3b01      	subs	r3, #1
 8002440:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002448:	3b01      	subs	r3, #1
 800244a:	025b      	lsls	r3, r3, #9
 800244c:	b29b      	uxth	r3, r3
 800244e:	431a      	orrs	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002454:	3b01      	subs	r3, #1
 8002456:	041b      	lsls	r3, r3, #16
 8002458:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800245c:	431a      	orrs	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002462:	3b01      	subs	r3, #1
 8002464:	061b      	lsls	r3, r3, #24
 8002466:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800246a:	4935      	ldr	r1, [pc, #212]	@ (8002540 <HAL_RCC_OscConfig+0x764>)
 800246c:	4313      	orrs	r3, r2
 800246e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002470:	4b33      	ldr	r3, [pc, #204]	@ (8002540 <HAL_RCC_OscConfig+0x764>)
 8002472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002474:	4a32      	ldr	r2, [pc, #200]	@ (8002540 <HAL_RCC_OscConfig+0x764>)
 8002476:	f023 0301 	bic.w	r3, r3, #1
 800247a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800247c:	4b30      	ldr	r3, [pc, #192]	@ (8002540 <HAL_RCC_OscConfig+0x764>)
 800247e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002480:	4b31      	ldr	r3, [pc, #196]	@ (8002548 <HAL_RCC_OscConfig+0x76c>)
 8002482:	4013      	ands	r3, r2
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002488:	00d2      	lsls	r2, r2, #3
 800248a:	492d      	ldr	r1, [pc, #180]	@ (8002540 <HAL_RCC_OscConfig+0x764>)
 800248c:	4313      	orrs	r3, r2
 800248e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002490:	4b2b      	ldr	r3, [pc, #172]	@ (8002540 <HAL_RCC_OscConfig+0x764>)
 8002492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002494:	f023 020c 	bic.w	r2, r3, #12
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249c:	4928      	ldr	r1, [pc, #160]	@ (8002540 <HAL_RCC_OscConfig+0x764>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80024a2:	4b27      	ldr	r3, [pc, #156]	@ (8002540 <HAL_RCC_OscConfig+0x764>)
 80024a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a6:	f023 0202 	bic.w	r2, r3, #2
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ae:	4924      	ldr	r1, [pc, #144]	@ (8002540 <HAL_RCC_OscConfig+0x764>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80024b4:	4b22      	ldr	r3, [pc, #136]	@ (8002540 <HAL_RCC_OscConfig+0x764>)
 80024b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024b8:	4a21      	ldr	r2, [pc, #132]	@ (8002540 <HAL_RCC_OscConfig+0x764>)
 80024ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002540 <HAL_RCC_OscConfig+0x764>)
 80024c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024c4:	4a1e      	ldr	r2, [pc, #120]	@ (8002540 <HAL_RCC_OscConfig+0x764>)
 80024c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80024cc:	4b1c      	ldr	r3, [pc, #112]	@ (8002540 <HAL_RCC_OscConfig+0x764>)
 80024ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024d0:	4a1b      	ldr	r2, [pc, #108]	@ (8002540 <HAL_RCC_OscConfig+0x764>)
 80024d2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80024d8:	4b19      	ldr	r3, [pc, #100]	@ (8002540 <HAL_RCC_OscConfig+0x764>)
 80024da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024dc:	4a18      	ldr	r2, [pc, #96]	@ (8002540 <HAL_RCC_OscConfig+0x764>)
 80024de:	f043 0301 	orr.w	r3, r3, #1
 80024e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024e4:	4b16      	ldr	r3, [pc, #88]	@ (8002540 <HAL_RCC_OscConfig+0x764>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a15      	ldr	r2, [pc, #84]	@ (8002540 <HAL_RCC_OscConfig+0x764>)
 80024ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f0:	f7ff f838 	bl	8001564 <HAL_GetTick>
 80024f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f8:	f7ff f834 	bl	8001564 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e091      	b.n	800262e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800250a:	4b0d      	ldr	r3, [pc, #52]	@ (8002540 <HAL_RCC_OscConfig+0x764>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d0f0      	beq.n	80024f8 <HAL_RCC_OscConfig+0x71c>
 8002516:	e089      	b.n	800262c <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002518:	4b09      	ldr	r3, [pc, #36]	@ (8002540 <HAL_RCC_OscConfig+0x764>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a08      	ldr	r2, [pc, #32]	@ (8002540 <HAL_RCC_OscConfig+0x764>)
 800251e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002522:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002524:	f7ff f81e 	bl	8001564 <HAL_GetTick>
 8002528:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800252a:	e00f      	b.n	800254c <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800252c:	f7ff f81a 	bl	8001564 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d908      	bls.n	800254c <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e077      	b.n	800262e <HAL_RCC_OscConfig+0x852>
 800253e:	bf00      	nop
 8002540:	58024400 	.word	0x58024400
 8002544:	fffffc0c 	.word	0xfffffc0c
 8002548:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800254c:	4b3a      	ldr	r3, [pc, #232]	@ (8002638 <HAL_RCC_OscConfig+0x85c>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1e9      	bne.n	800252c <HAL_RCC_OscConfig+0x750>
 8002558:	e068      	b.n	800262c <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800255a:	4b37      	ldr	r3, [pc, #220]	@ (8002638 <HAL_RCC_OscConfig+0x85c>)
 800255c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800255e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002560:	4b35      	ldr	r3, [pc, #212]	@ (8002638 <HAL_RCC_OscConfig+0x85c>)
 8002562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002564:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256a:	2b01      	cmp	r3, #1
 800256c:	d031      	beq.n	80025d2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	f003 0203 	and.w	r2, r3, #3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002578:	429a      	cmp	r2, r3
 800257a:	d12a      	bne.n	80025d2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	091b      	lsrs	r3, r3, #4
 8002580:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002588:	429a      	cmp	r2, r3
 800258a:	d122      	bne.n	80025d2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002596:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002598:	429a      	cmp	r2, r3
 800259a:	d11a      	bne.n	80025d2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	0a5b      	lsrs	r3, r3, #9
 80025a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025a8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d111      	bne.n	80025d2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	0c1b      	lsrs	r3, r3, #16
 80025b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ba:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80025bc:	429a      	cmp	r2, r3
 80025be:	d108      	bne.n	80025d2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	0e1b      	lsrs	r3, r3, #24
 80025c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025cc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d001      	beq.n	80025d6 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e02b      	b.n	800262e <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80025d6:	4b18      	ldr	r3, [pc, #96]	@ (8002638 <HAL_RCC_OscConfig+0x85c>)
 80025d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025da:	08db      	lsrs	r3, r3, #3
 80025dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80025e0:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d01f      	beq.n	800262c <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80025ec:	4b12      	ldr	r3, [pc, #72]	@ (8002638 <HAL_RCC_OscConfig+0x85c>)
 80025ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025f0:	4a11      	ldr	r2, [pc, #68]	@ (8002638 <HAL_RCC_OscConfig+0x85c>)
 80025f2:	f023 0301 	bic.w	r3, r3, #1
 80025f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025f8:	f7fe ffb4 	bl	8001564 <HAL_GetTick>
 80025fc:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80025fe:	bf00      	nop
 8002600:	f7fe ffb0 	bl	8001564 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002608:	4293      	cmp	r3, r2
 800260a:	d0f9      	beq.n	8002600 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800260c:	4b0a      	ldr	r3, [pc, #40]	@ (8002638 <HAL_RCC_OscConfig+0x85c>)
 800260e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002610:	4b0a      	ldr	r3, [pc, #40]	@ (800263c <HAL_RCC_OscConfig+0x860>)
 8002612:	4013      	ands	r3, r2
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002618:	00d2      	lsls	r2, r2, #3
 800261a:	4907      	ldr	r1, [pc, #28]	@ (8002638 <HAL_RCC_OscConfig+0x85c>)
 800261c:	4313      	orrs	r3, r2
 800261e:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002620:	4b05      	ldr	r3, [pc, #20]	@ (8002638 <HAL_RCC_OscConfig+0x85c>)
 8002622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002624:	4a04      	ldr	r2, [pc, #16]	@ (8002638 <HAL_RCC_OscConfig+0x85c>)
 8002626:	f043 0301 	orr.w	r3, r3, #1
 800262a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3730      	adds	r7, #48	@ 0x30
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	58024400 	.word	0x58024400
 800263c:	ffff0007 	.word	0xffff0007

08002640 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e19c      	b.n	800298e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002654:	4b8a      	ldr	r3, [pc, #552]	@ (8002880 <HAL_RCC_ClockConfig+0x240>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 030f 	and.w	r3, r3, #15
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	429a      	cmp	r2, r3
 8002660:	d910      	bls.n	8002684 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002662:	4b87      	ldr	r3, [pc, #540]	@ (8002880 <HAL_RCC_ClockConfig+0x240>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f023 020f 	bic.w	r2, r3, #15
 800266a:	4985      	ldr	r1, [pc, #532]	@ (8002880 <HAL_RCC_ClockConfig+0x240>)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	4313      	orrs	r3, r2
 8002670:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002672:	4b83      	ldr	r3, [pc, #524]	@ (8002880 <HAL_RCC_ClockConfig+0x240>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 030f 	and.w	r3, r3, #15
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	429a      	cmp	r2, r3
 800267e:	d001      	beq.n	8002684 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e184      	b.n	800298e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0304 	and.w	r3, r3, #4
 800268c:	2b00      	cmp	r3, #0
 800268e:	d010      	beq.n	80026b2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	691a      	ldr	r2, [r3, #16]
 8002694:	4b7b      	ldr	r3, [pc, #492]	@ (8002884 <HAL_RCC_ClockConfig+0x244>)
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800269c:	429a      	cmp	r2, r3
 800269e:	d908      	bls.n	80026b2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80026a0:	4b78      	ldr	r3, [pc, #480]	@ (8002884 <HAL_RCC_ClockConfig+0x244>)
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	4975      	ldr	r1, [pc, #468]	@ (8002884 <HAL_RCC_ClockConfig+0x244>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0308 	and.w	r3, r3, #8
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d010      	beq.n	80026e0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	695a      	ldr	r2, [r3, #20]
 80026c2:	4b70      	ldr	r3, [pc, #448]	@ (8002884 <HAL_RCC_ClockConfig+0x244>)
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d908      	bls.n	80026e0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80026ce:	4b6d      	ldr	r3, [pc, #436]	@ (8002884 <HAL_RCC_ClockConfig+0x244>)
 80026d0:	69db      	ldr	r3, [r3, #28]
 80026d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	496a      	ldr	r1, [pc, #424]	@ (8002884 <HAL_RCC_ClockConfig+0x244>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0310 	and.w	r3, r3, #16
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d010      	beq.n	800270e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	699a      	ldr	r2, [r3, #24]
 80026f0:	4b64      	ldr	r3, [pc, #400]	@ (8002884 <HAL_RCC_ClockConfig+0x244>)
 80026f2:	69db      	ldr	r3, [r3, #28]
 80026f4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d908      	bls.n	800270e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80026fc:	4b61      	ldr	r3, [pc, #388]	@ (8002884 <HAL_RCC_ClockConfig+0x244>)
 80026fe:	69db      	ldr	r3, [r3, #28]
 8002700:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	495e      	ldr	r1, [pc, #376]	@ (8002884 <HAL_RCC_ClockConfig+0x244>)
 800270a:	4313      	orrs	r3, r2
 800270c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0320 	and.w	r3, r3, #32
 8002716:	2b00      	cmp	r3, #0
 8002718:	d010      	beq.n	800273c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69da      	ldr	r2, [r3, #28]
 800271e:	4b59      	ldr	r3, [pc, #356]	@ (8002884 <HAL_RCC_ClockConfig+0x244>)
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002726:	429a      	cmp	r2, r3
 8002728:	d908      	bls.n	800273c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800272a:	4b56      	ldr	r3, [pc, #344]	@ (8002884 <HAL_RCC_ClockConfig+0x244>)
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	4953      	ldr	r1, [pc, #332]	@ (8002884 <HAL_RCC_ClockConfig+0x244>)
 8002738:	4313      	orrs	r3, r2
 800273a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d010      	beq.n	800276a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68da      	ldr	r2, [r3, #12]
 800274c:	4b4d      	ldr	r3, [pc, #308]	@ (8002884 <HAL_RCC_ClockConfig+0x244>)
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	f003 030f 	and.w	r3, r3, #15
 8002754:	429a      	cmp	r2, r3
 8002756:	d908      	bls.n	800276a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002758:	4b4a      	ldr	r3, [pc, #296]	@ (8002884 <HAL_RCC_ClockConfig+0x244>)
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	f023 020f 	bic.w	r2, r3, #15
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	4947      	ldr	r1, [pc, #284]	@ (8002884 <HAL_RCC_ClockConfig+0x244>)
 8002766:	4313      	orrs	r3, r2
 8002768:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b00      	cmp	r3, #0
 8002774:	d055      	beq.n	8002822 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002776:	4b43      	ldr	r3, [pc, #268]	@ (8002884 <HAL_RCC_ClockConfig+0x244>)
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	4940      	ldr	r1, [pc, #256]	@ (8002884 <HAL_RCC_ClockConfig+0x244>)
 8002784:	4313      	orrs	r3, r2
 8002786:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	2b02      	cmp	r3, #2
 800278e:	d107      	bne.n	80027a0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002790:	4b3c      	ldr	r3, [pc, #240]	@ (8002884 <HAL_RCC_ClockConfig+0x244>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d121      	bne.n	80027e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e0f6      	b.n	800298e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	2b03      	cmp	r3, #3
 80027a6:	d107      	bne.n	80027b8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80027a8:	4b36      	ldr	r3, [pc, #216]	@ (8002884 <HAL_RCC_ClockConfig+0x244>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d115      	bne.n	80027e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e0ea      	b.n	800298e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d107      	bne.n	80027d0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80027c0:	4b30      	ldr	r3, [pc, #192]	@ (8002884 <HAL_RCC_ClockConfig+0x244>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d109      	bne.n	80027e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e0de      	b.n	800298e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027d0:	4b2c      	ldr	r3, [pc, #176]	@ (8002884 <HAL_RCC_ClockConfig+0x244>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0304 	and.w	r3, r3, #4
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d101      	bne.n	80027e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e0d6      	b.n	800298e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027e0:	4b28      	ldr	r3, [pc, #160]	@ (8002884 <HAL_RCC_ClockConfig+0x244>)
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	f023 0207 	bic.w	r2, r3, #7
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	4925      	ldr	r1, [pc, #148]	@ (8002884 <HAL_RCC_ClockConfig+0x244>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027f2:	f7fe feb7 	bl	8001564 <HAL_GetTick>
 80027f6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027f8:	e00a      	b.n	8002810 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027fa:	f7fe feb3 	bl	8001564 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002808:	4293      	cmp	r3, r2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e0be      	b.n	800298e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002810:	4b1c      	ldr	r3, [pc, #112]	@ (8002884 <HAL_RCC_ClockConfig+0x244>)
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	00db      	lsls	r3, r3, #3
 800281e:	429a      	cmp	r2, r3
 8002820:	d1eb      	bne.n	80027fa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d010      	beq.n	8002850 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	68da      	ldr	r2, [r3, #12]
 8002832:	4b14      	ldr	r3, [pc, #80]	@ (8002884 <HAL_RCC_ClockConfig+0x244>)
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	f003 030f 	and.w	r3, r3, #15
 800283a:	429a      	cmp	r2, r3
 800283c:	d208      	bcs.n	8002850 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800283e:	4b11      	ldr	r3, [pc, #68]	@ (8002884 <HAL_RCC_ClockConfig+0x244>)
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	f023 020f 	bic.w	r2, r3, #15
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	490e      	ldr	r1, [pc, #56]	@ (8002884 <HAL_RCC_ClockConfig+0x244>)
 800284c:	4313      	orrs	r3, r2
 800284e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002850:	4b0b      	ldr	r3, [pc, #44]	@ (8002880 <HAL_RCC_ClockConfig+0x240>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 030f 	and.w	r3, r3, #15
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	429a      	cmp	r2, r3
 800285c:	d214      	bcs.n	8002888 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800285e:	4b08      	ldr	r3, [pc, #32]	@ (8002880 <HAL_RCC_ClockConfig+0x240>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f023 020f 	bic.w	r2, r3, #15
 8002866:	4906      	ldr	r1, [pc, #24]	@ (8002880 <HAL_RCC_ClockConfig+0x240>)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	4313      	orrs	r3, r2
 800286c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800286e:	4b04      	ldr	r3, [pc, #16]	@ (8002880 <HAL_RCC_ClockConfig+0x240>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 030f 	and.w	r3, r3, #15
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	429a      	cmp	r2, r3
 800287a:	d005      	beq.n	8002888 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e086      	b.n	800298e <HAL_RCC_ClockConfig+0x34e>
 8002880:	52002000 	.word	0x52002000
 8002884:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0304 	and.w	r3, r3, #4
 8002890:	2b00      	cmp	r3, #0
 8002892:	d010      	beq.n	80028b6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	691a      	ldr	r2, [r3, #16]
 8002898:	4b3f      	ldr	r3, [pc, #252]	@ (8002998 <HAL_RCC_ClockConfig+0x358>)
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d208      	bcs.n	80028b6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80028a4:	4b3c      	ldr	r3, [pc, #240]	@ (8002998 <HAL_RCC_ClockConfig+0x358>)
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	4939      	ldr	r1, [pc, #228]	@ (8002998 <HAL_RCC_ClockConfig+0x358>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0308 	and.w	r3, r3, #8
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d010      	beq.n	80028e4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	695a      	ldr	r2, [r3, #20]
 80028c6:	4b34      	ldr	r3, [pc, #208]	@ (8002998 <HAL_RCC_ClockConfig+0x358>)
 80028c8:	69db      	ldr	r3, [r3, #28]
 80028ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d208      	bcs.n	80028e4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80028d2:	4b31      	ldr	r3, [pc, #196]	@ (8002998 <HAL_RCC_ClockConfig+0x358>)
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	492e      	ldr	r1, [pc, #184]	@ (8002998 <HAL_RCC_ClockConfig+0x358>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0310 	and.w	r3, r3, #16
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d010      	beq.n	8002912 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	699a      	ldr	r2, [r3, #24]
 80028f4:	4b28      	ldr	r3, [pc, #160]	@ (8002998 <HAL_RCC_ClockConfig+0x358>)
 80028f6:	69db      	ldr	r3, [r3, #28]
 80028f8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d208      	bcs.n	8002912 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002900:	4b25      	ldr	r3, [pc, #148]	@ (8002998 <HAL_RCC_ClockConfig+0x358>)
 8002902:	69db      	ldr	r3, [r3, #28]
 8002904:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	4922      	ldr	r1, [pc, #136]	@ (8002998 <HAL_RCC_ClockConfig+0x358>)
 800290e:	4313      	orrs	r3, r2
 8002910:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0320 	and.w	r3, r3, #32
 800291a:	2b00      	cmp	r3, #0
 800291c:	d010      	beq.n	8002940 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	69da      	ldr	r2, [r3, #28]
 8002922:	4b1d      	ldr	r3, [pc, #116]	@ (8002998 <HAL_RCC_ClockConfig+0x358>)
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800292a:	429a      	cmp	r2, r3
 800292c:	d208      	bcs.n	8002940 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800292e:	4b1a      	ldr	r3, [pc, #104]	@ (8002998 <HAL_RCC_ClockConfig+0x358>)
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	4917      	ldr	r1, [pc, #92]	@ (8002998 <HAL_RCC_ClockConfig+0x358>)
 800293c:	4313      	orrs	r3, r2
 800293e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002940:	f000 f834 	bl	80029ac <HAL_RCC_GetSysClockFreq>
 8002944:	4602      	mov	r2, r0
 8002946:	4b14      	ldr	r3, [pc, #80]	@ (8002998 <HAL_RCC_ClockConfig+0x358>)
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	0a1b      	lsrs	r3, r3, #8
 800294c:	f003 030f 	and.w	r3, r3, #15
 8002950:	4912      	ldr	r1, [pc, #72]	@ (800299c <HAL_RCC_ClockConfig+0x35c>)
 8002952:	5ccb      	ldrb	r3, [r1, r3]
 8002954:	f003 031f 	and.w	r3, r3, #31
 8002958:	fa22 f303 	lsr.w	r3, r2, r3
 800295c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800295e:	4b0e      	ldr	r3, [pc, #56]	@ (8002998 <HAL_RCC_ClockConfig+0x358>)
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	4a0d      	ldr	r2, [pc, #52]	@ (800299c <HAL_RCC_ClockConfig+0x35c>)
 8002968:	5cd3      	ldrb	r3, [r2, r3]
 800296a:	f003 031f 	and.w	r3, r3, #31
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	fa22 f303 	lsr.w	r3, r2, r3
 8002974:	4a0a      	ldr	r2, [pc, #40]	@ (80029a0 <HAL_RCC_ClockConfig+0x360>)
 8002976:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002978:	4a0a      	ldr	r2, [pc, #40]	@ (80029a4 <HAL_RCC_ClockConfig+0x364>)
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800297e:	4b0a      	ldr	r3, [pc, #40]	@ (80029a8 <HAL_RCC_ClockConfig+0x368>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4618      	mov	r0, r3
 8002984:	f7fe fa78 	bl	8000e78 <HAL_InitTick>
 8002988:	4603      	mov	r3, r0
 800298a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800298c:	7bfb      	ldrb	r3, [r7, #15]
}
 800298e:	4618      	mov	r0, r3
 8002990:	3718      	adds	r7, #24
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	58024400 	.word	0x58024400
 800299c:	0800dc50 	.word	0x0800dc50
 80029a0:	24000004 	.word	0x24000004
 80029a4:	24000000 	.word	0x24000000
 80029a8:	24000008 	.word	0x24000008

080029ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b089      	sub	sp, #36	@ 0x24
 80029b0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029b2:	4bb3      	ldr	r3, [pc, #716]	@ (8002c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80029ba:	2b18      	cmp	r3, #24
 80029bc:	f200 8155 	bhi.w	8002c6a <HAL_RCC_GetSysClockFreq+0x2be>
 80029c0:	a201      	add	r2, pc, #4	@ (adr r2, 80029c8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80029c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c6:	bf00      	nop
 80029c8:	08002a2d 	.word	0x08002a2d
 80029cc:	08002c6b 	.word	0x08002c6b
 80029d0:	08002c6b 	.word	0x08002c6b
 80029d4:	08002c6b 	.word	0x08002c6b
 80029d8:	08002c6b 	.word	0x08002c6b
 80029dc:	08002c6b 	.word	0x08002c6b
 80029e0:	08002c6b 	.word	0x08002c6b
 80029e4:	08002c6b 	.word	0x08002c6b
 80029e8:	08002a53 	.word	0x08002a53
 80029ec:	08002c6b 	.word	0x08002c6b
 80029f0:	08002c6b 	.word	0x08002c6b
 80029f4:	08002c6b 	.word	0x08002c6b
 80029f8:	08002c6b 	.word	0x08002c6b
 80029fc:	08002c6b 	.word	0x08002c6b
 8002a00:	08002c6b 	.word	0x08002c6b
 8002a04:	08002c6b 	.word	0x08002c6b
 8002a08:	08002a59 	.word	0x08002a59
 8002a0c:	08002c6b 	.word	0x08002c6b
 8002a10:	08002c6b 	.word	0x08002c6b
 8002a14:	08002c6b 	.word	0x08002c6b
 8002a18:	08002c6b 	.word	0x08002c6b
 8002a1c:	08002c6b 	.word	0x08002c6b
 8002a20:	08002c6b 	.word	0x08002c6b
 8002a24:	08002c6b 	.word	0x08002c6b
 8002a28:	08002a5f 	.word	0x08002a5f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a2c:	4b94      	ldr	r3, [pc, #592]	@ (8002c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0320 	and.w	r3, r3, #32
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d009      	beq.n	8002a4c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002a38:	4b91      	ldr	r3, [pc, #580]	@ (8002c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	08db      	lsrs	r3, r3, #3
 8002a3e:	f003 0303 	and.w	r3, r3, #3
 8002a42:	4a90      	ldr	r2, [pc, #576]	@ (8002c84 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a44:	fa22 f303 	lsr.w	r3, r2, r3
 8002a48:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002a4a:	e111      	b.n	8002c70 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002a4c:	4b8d      	ldr	r3, [pc, #564]	@ (8002c84 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a4e:	61bb      	str	r3, [r7, #24]
      break;
 8002a50:	e10e      	b.n	8002c70 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002a52:	4b8d      	ldr	r3, [pc, #564]	@ (8002c88 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002a54:	61bb      	str	r3, [r7, #24]
      break;
 8002a56:	e10b      	b.n	8002c70 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002a58:	4b8c      	ldr	r3, [pc, #560]	@ (8002c8c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002a5a:	61bb      	str	r3, [r7, #24]
      break;
 8002a5c:	e108      	b.n	8002c70 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002a5e:	4b88      	ldr	r3, [pc, #544]	@ (8002c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a62:	f003 0303 	and.w	r3, r3, #3
 8002a66:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002a68:	4b85      	ldr	r3, [pc, #532]	@ (8002c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a6c:	091b      	lsrs	r3, r3, #4
 8002a6e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a72:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002a74:	4b82      	ldr	r3, [pc, #520]	@ (8002c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002a7e:	4b80      	ldr	r3, [pc, #512]	@ (8002c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a82:	08db      	lsrs	r3, r3, #3
 8002a84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	fb02 f303 	mul.w	r3, r2, r3
 8002a8e:	ee07 3a90 	vmov	s15, r3
 8002a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a96:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f000 80e1 	beq.w	8002c64 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	f000 8083 	beq.w	8002bb0 <HAL_RCC_GetSysClockFreq+0x204>
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	f200 80a1 	bhi.w	8002bf4 <HAL_RCC_GetSysClockFreq+0x248>
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d003      	beq.n	8002ac0 <HAL_RCC_GetSysClockFreq+0x114>
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d056      	beq.n	8002b6c <HAL_RCC_GetSysClockFreq+0x1c0>
 8002abe:	e099      	b.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ac0:	4b6f      	ldr	r3, [pc, #444]	@ (8002c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0320 	and.w	r3, r3, #32
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d02d      	beq.n	8002b28 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002acc:	4b6c      	ldr	r3, [pc, #432]	@ (8002c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	08db      	lsrs	r3, r3, #3
 8002ad2:	f003 0303 	and.w	r3, r3, #3
 8002ad6:	4a6b      	ldr	r2, [pc, #428]	@ (8002c84 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8002adc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	ee07 3a90 	vmov	s15, r3
 8002ae4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	ee07 3a90 	vmov	s15, r3
 8002aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002af6:	4b62      	ldr	r3, [pc, #392]	@ (8002c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002afe:	ee07 3a90 	vmov	s15, r3
 8002b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b06:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b0a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002c90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b22:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002b26:	e087      	b.n	8002c38 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	ee07 3a90 	vmov	s15, r3
 8002b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b32:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002c94 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b3a:	4b51      	ldr	r3, [pc, #324]	@ (8002c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b42:	ee07 3a90 	vmov	s15, r3
 8002b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b4e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002c90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b66:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b6a:	e065      	b.n	8002c38 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	ee07 3a90 	vmov	s15, r3
 8002b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b76:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002c98 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002b7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b7e:	4b40      	ldr	r3, [pc, #256]	@ (8002c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b86:	ee07 3a90 	vmov	s15, r3
 8002b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b92:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002c90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002baa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002bae:	e043      	b.n	8002c38 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	ee07 3a90 	vmov	s15, r3
 8002bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bba:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002c9c <HAL_RCC_GetSysClockFreq+0x2f0>
 8002bbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bc2:	4b2f      	ldr	r3, [pc, #188]	@ (8002c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bca:	ee07 3a90 	vmov	s15, r3
 8002bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002bd6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002c90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002bda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002bde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002be2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002bf2:	e021      	b.n	8002c38 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	ee07 3a90 	vmov	s15, r3
 8002bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bfe:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002c98 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002c02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c06:	4b1e      	ldr	r3, [pc, #120]	@ (8002c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c0e:	ee07 3a90 	vmov	s15, r3
 8002c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c16:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c1a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002c90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c32:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002c36:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002c38:	4b11      	ldr	r3, [pc, #68]	@ (8002c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3c:	0a5b      	lsrs	r3, r3, #9
 8002c3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c42:	3301      	adds	r3, #1
 8002c44:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	ee07 3a90 	vmov	s15, r3
 8002c4c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c50:	edd7 6a07 	vldr	s13, [r7, #28]
 8002c54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c5c:	ee17 3a90 	vmov	r3, s15
 8002c60:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002c62:	e005      	b.n	8002c70 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002c64:	2300      	movs	r3, #0
 8002c66:	61bb      	str	r3, [r7, #24]
      break;
 8002c68:	e002      	b.n	8002c70 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002c6a:	4b07      	ldr	r3, [pc, #28]	@ (8002c88 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002c6c:	61bb      	str	r3, [r7, #24]
      break;
 8002c6e:	bf00      	nop
  }

  return sysclockfreq;
 8002c70:	69bb      	ldr	r3, [r7, #24]
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3724      	adds	r7, #36	@ 0x24
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	58024400 	.word	0x58024400
 8002c84:	03d09000 	.word	0x03d09000
 8002c88:	003d0900 	.word	0x003d0900
 8002c8c:	016e3600 	.word	0x016e3600
 8002c90:	46000000 	.word	0x46000000
 8002c94:	4c742400 	.word	0x4c742400
 8002c98:	4a742400 	.word	0x4a742400
 8002c9c:	4bb71b00 	.word	0x4bb71b00

08002ca0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8002ca6:	f7ff fe81 	bl	80029ac <HAL_RCC_GetSysClockFreq>
 8002caa:	4602      	mov	r2, r0
 8002cac:	4b10      	ldr	r3, [pc, #64]	@ (8002cf0 <HAL_RCC_GetHCLKFreq+0x50>)
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	0a1b      	lsrs	r3, r3, #8
 8002cb2:	f003 030f 	and.w	r3, r3, #15
 8002cb6:	490f      	ldr	r1, [pc, #60]	@ (8002cf4 <HAL_RCC_GetHCLKFreq+0x54>)
 8002cb8:	5ccb      	ldrb	r3, [r1, r3]
 8002cba:	f003 031f 	and.w	r3, r3, #31
 8002cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8002cc2:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002cc4:	4b0a      	ldr	r3, [pc, #40]	@ (8002cf0 <HAL_RCC_GetHCLKFreq+0x50>)
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	f003 030f 	and.w	r3, r3, #15
 8002ccc:	4a09      	ldr	r2, [pc, #36]	@ (8002cf4 <HAL_RCC_GetHCLKFreq+0x54>)
 8002cce:	5cd3      	ldrb	r3, [r2, r3]
 8002cd0:	f003 031f 	and.w	r3, r3, #31
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cda:	4a07      	ldr	r2, [pc, #28]	@ (8002cf8 <HAL_RCC_GetHCLKFreq+0x58>)
 8002cdc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002cde:	4a07      	ldr	r2, [pc, #28]	@ (8002cfc <HAL_RCC_GetHCLKFreq+0x5c>)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002ce4:	4b04      	ldr	r3, [pc, #16]	@ (8002cf8 <HAL_RCC_GetHCLKFreq+0x58>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	58024400 	.word	0x58024400
 8002cf4:	0800dc50 	.word	0x0800dc50
 8002cf8:	24000004 	.word	0x24000004
 8002cfc:	24000000 	.word	0x24000000

08002d00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8002d04:	f7ff ffcc 	bl	8002ca0 <HAL_RCC_GetHCLKFreq>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	4b06      	ldr	r3, [pc, #24]	@ (8002d24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	091b      	lsrs	r3, r3, #4
 8002d10:	f003 0307 	and.w	r3, r3, #7
 8002d14:	4904      	ldr	r1, [pc, #16]	@ (8002d28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d16:	5ccb      	ldrb	r3, [r1, r3]
 8002d18:	f003 031f 	and.w	r3, r3, #31
 8002d1c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	58024400 	.word	0x58024400
 8002d28:	0800dc50 	.word	0x0800dc50

08002d2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8002d30:	f7ff ffb6 	bl	8002ca0 <HAL_RCC_GetHCLKFreq>
 8002d34:	4602      	mov	r2, r0
 8002d36:	4b06      	ldr	r3, [pc, #24]	@ (8002d50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	0a1b      	lsrs	r3, r3, #8
 8002d3c:	f003 0307 	and.w	r3, r3, #7
 8002d40:	4904      	ldr	r1, [pc, #16]	@ (8002d54 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d42:	5ccb      	ldrb	r3, [r1, r3]
 8002d44:	f003 031f 	and.w	r3, r3, #31
 8002d48:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	58024400 	.word	0x58024400
 8002d54:	0800dc50 	.word	0x0800dc50

08002d58 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	223f      	movs	r2, #63	@ 0x3f
 8002d66:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d68:	4b1a      	ldr	r3, [pc, #104]	@ (8002dd4 <HAL_RCC_GetClockConfig+0x7c>)
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	f003 0207 	and.w	r2, r3, #7
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 8002d74:	4b17      	ldr	r3, [pc, #92]	@ (8002dd4 <HAL_RCC_GetClockConfig+0x7c>)
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 8002d80:	4b14      	ldr	r3, [pc, #80]	@ (8002dd4 <HAL_RCC_GetClockConfig+0x7c>)
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	f003 020f 	and.w	r2, r3, #15
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 8002d8c:	4b11      	ldr	r3, [pc, #68]	@ (8002dd4 <HAL_RCC_GetClockConfig+0x7c>)
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 8002d98:	4b0e      	ldr	r3, [pc, #56]	@ (8002dd4 <HAL_RCC_GetClockConfig+0x7c>)
 8002d9a:	69db      	ldr	r3, [r3, #28]
 8002d9c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 8002da4:	4b0b      	ldr	r3, [pc, #44]	@ (8002dd4 <HAL_RCC_GetClockConfig+0x7c>)
 8002da6:	69db      	ldr	r3, [r3, #28]
 8002da8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 8002db0:	4b08      	ldr	r3, [pc, #32]	@ (8002dd4 <HAL_RCC_GetClockConfig+0x7c>)
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002dbc:	4b06      	ldr	r3, [pc, #24]	@ (8002dd8 <HAL_RCC_GetClockConfig+0x80>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 020f 	and.w	r2, r3, #15
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	601a      	str	r2, [r3, #0]
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr
 8002dd4:	58024400 	.word	0x58024400
 8002dd8:	52002000 	.word	0x52002000

08002ddc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ddc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002de0:	b0c8      	sub	sp, #288	@ 0x120
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002de8:	2300      	movs	r3, #0
 8002dea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002dee:	2300      	movs	r3, #0
 8002df0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002df4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dfc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002e00:	2500      	movs	r5, #0
 8002e02:	ea54 0305 	orrs.w	r3, r4, r5
 8002e06:	d049      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002e08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002e0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e0e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002e12:	d02f      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002e14:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002e18:	d828      	bhi.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002e1a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e1e:	d01a      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002e20:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e24:	d822      	bhi.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d003      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002e2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e2e:	d007      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002e30:	e01c      	b.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e32:	4ba7      	ldr	r3, [pc, #668]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e36:	4aa6      	ldr	r2, [pc, #664]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002e3e:	e01a      	b.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002e40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002e44:	3308      	adds	r3, #8
 8002e46:	2102      	movs	r1, #2
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f001 fc43 	bl	80046d4 <RCCEx_PLL2_Config>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002e54:	e00f      	b.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002e56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002e5a:	3328      	adds	r3, #40	@ 0x28
 8002e5c:	2102      	movs	r1, #2
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f001 fcea 	bl	8004838 <RCCEx_PLL3_Config>
 8002e64:	4603      	mov	r3, r0
 8002e66:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002e6a:	e004      	b.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8002e72:	e000      	b.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002e74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e76:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10a      	bne.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002e7e:	4b94      	ldr	r3, [pc, #592]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e82:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002e86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002e8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e8c:	4a90      	ldr	r2, [pc, #576]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e8e:	430b      	orrs	r3, r1
 8002e90:	6513      	str	r3, [r2, #80]	@ 0x50
 8002e92:	e003      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e94:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002e98:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002e9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002ea8:	f04f 0900 	mov.w	r9, #0
 8002eac:	ea58 0309 	orrs.w	r3, r8, r9
 8002eb0:	d047      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002eb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002eb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eb8:	2b04      	cmp	r3, #4
 8002eba:	d82a      	bhi.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002ebc:	a201      	add	r2, pc, #4	@ (adr r2, 8002ec4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec2:	bf00      	nop
 8002ec4:	08002ed9 	.word	0x08002ed9
 8002ec8:	08002ee7 	.word	0x08002ee7
 8002ecc:	08002efd 	.word	0x08002efd
 8002ed0:	08002f1b 	.word	0x08002f1b
 8002ed4:	08002f1b 	.word	0x08002f1b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ed8:	4b7d      	ldr	r3, [pc, #500]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002edc:	4a7c      	ldr	r2, [pc, #496]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ede:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ee2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ee4:	e01a      	b.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ee6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002eea:	3308      	adds	r3, #8
 8002eec:	2100      	movs	r1, #0
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f001 fbf0 	bl	80046d4 <RCCEx_PLL2_Config>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002efa:	e00f      	b.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002efc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002f00:	3328      	adds	r3, #40	@ 0x28
 8002f02:	2100      	movs	r1, #0
 8002f04:	4618      	mov	r0, r3
 8002f06:	f001 fc97 	bl	8004838 <RCCEx_PLL3_Config>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f10:	e004      	b.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8002f18:	e000      	b.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002f1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f1c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10a      	bne.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f24:	4b6a      	ldr	r3, [pc, #424]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f28:	f023 0107 	bic.w	r1, r3, #7
 8002f2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f32:	4a67      	ldr	r2, [pc, #412]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f34:	430b      	orrs	r3, r1
 8002f36:	6513      	str	r3, [r2, #80]	@ 0x50
 8002f38:	e003      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f3a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002f3e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8002f42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f4a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002f4e:	f04f 0b00 	mov.w	fp, #0
 8002f52:	ea5a 030b 	orrs.w	r3, sl, fp
 8002f56:	d054      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8002f58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002f5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f5e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002f62:	d036      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8002f64:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002f68:	d82f      	bhi.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002f6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f6e:	d032      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002f70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f74:	d829      	bhi.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002f76:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f78:	d02f      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8002f7a:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f7c:	d825      	bhi.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002f7e:	2b80      	cmp	r3, #128	@ 0x80
 8002f80:	d018      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8002f82:	2b80      	cmp	r3, #128	@ 0x80
 8002f84:	d821      	bhi.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d002      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8002f8a:	2b40      	cmp	r3, #64	@ 0x40
 8002f8c:	d007      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8002f8e:	e01c      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f90:	4b4f      	ldr	r3, [pc, #316]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f94:	4a4e      	ldr	r2, [pc, #312]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002f9c:	e01e      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002fa2:	3308      	adds	r3, #8
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f001 fb94 	bl	80046d4 <RCCEx_PLL2_Config>
 8002fac:	4603      	mov	r3, r0
 8002fae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002fb2:	e013      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002fb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002fb8:	3328      	adds	r3, #40	@ 0x28
 8002fba:	2100      	movs	r1, #0
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f001 fc3b 	bl	8004838 <RCCEx_PLL3_Config>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002fc8:	e008      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8002fd0:	e004      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002fd2:	bf00      	nop
 8002fd4:	e002      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002fd6:	bf00      	nop
 8002fd8:	e000      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002fda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fdc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10a      	bne.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8002fe4:	4b3a      	ldr	r3, [pc, #232]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002fe6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fe8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002fec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002ff0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ff2:	4a37      	ldr	r2, [pc, #220]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ff4:	430b      	orrs	r3, r1
 8002ff6:	6513      	str	r3, [r2, #80]	@ 0x50
 8002ff8:	e003      	b.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ffa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002ffe:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8003002:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800300a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800300e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003012:	2300      	movs	r3, #0
 8003014:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003018:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800301c:	460b      	mov	r3, r1
 800301e:	4313      	orrs	r3, r2
 8003020:	d05c      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8003022:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003026:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003028:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800302c:	d03b      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800302e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003032:	d834      	bhi.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003034:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003038:	d037      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800303a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800303e:	d82e      	bhi.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003040:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003044:	d033      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003046:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800304a:	d828      	bhi.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800304c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003050:	d01a      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8003052:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003056:	d822      	bhi.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003058:	2b00      	cmp	r3, #0
 800305a:	d003      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x288>
 800305c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003060:	d007      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003062:	e01c      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003064:	4b1a      	ldr	r3, [pc, #104]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003068:	4a19      	ldr	r2, [pc, #100]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800306a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800306e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003070:	e01e      	b.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003072:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003076:	3308      	adds	r3, #8
 8003078:	2100      	movs	r1, #0
 800307a:	4618      	mov	r0, r3
 800307c:	f001 fb2a 	bl	80046d4 <RCCEx_PLL2_Config>
 8003080:	4603      	mov	r3, r0
 8003082:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003086:	e013      	b.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003088:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800308c:	3328      	adds	r3, #40	@ 0x28
 800308e:	2100      	movs	r1, #0
 8003090:	4618      	mov	r0, r3
 8003092:	f001 fbd1 	bl	8004838 <RCCEx_PLL3_Config>
 8003096:	4603      	mov	r3, r0
 8003098:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800309c:	e008      	b.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80030a4:	e004      	b.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80030a6:	bf00      	nop
 80030a8:	e002      	b.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80030aa:	bf00      	nop
 80030ac:	e000      	b.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80030ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d10d      	bne.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80030b8:	4b05      	ldr	r3, [pc, #20]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80030ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030bc:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80030c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80030c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030c6:	4a02      	ldr	r2, [pc, #8]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80030c8:	430b      	orrs	r3, r1
 80030ca:	6513      	str	r3, [r2, #80]	@ 0x50
 80030cc:	e006      	b.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x300>
 80030ce:	bf00      	nop
 80030d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030d4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80030d8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80030dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80030e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80030e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80030ec:	2300      	movs	r3, #0
 80030ee:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80030f2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80030f6:	460b      	mov	r3, r1
 80030f8:	4313      	orrs	r3, r2
 80030fa:	d03a      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80030fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003102:	2b30      	cmp	r3, #48	@ 0x30
 8003104:	d01f      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8003106:	2b30      	cmp	r3, #48	@ 0x30
 8003108:	d819      	bhi.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x362>
 800310a:	2b20      	cmp	r3, #32
 800310c:	d00c      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800310e:	2b20      	cmp	r3, #32
 8003110:	d815      	bhi.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003112:	2b00      	cmp	r3, #0
 8003114:	d019      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003116:	2b10      	cmp	r3, #16
 8003118:	d111      	bne.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800311a:	4bae      	ldr	r3, [pc, #696]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800311c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800311e:	4aad      	ldr	r2, [pc, #692]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003120:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003124:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003126:	e011      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003128:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800312c:	3308      	adds	r3, #8
 800312e:	2102      	movs	r1, #2
 8003130:	4618      	mov	r0, r3
 8003132:	f001 facf 	bl	80046d4 <RCCEx_PLL2_Config>
 8003136:	4603      	mov	r3, r0
 8003138:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800313c:	e006      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003144:	e002      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003146:	bf00      	nop
 8003148:	e000      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800314a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800314c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003150:	2b00      	cmp	r3, #0
 8003152:	d10a      	bne.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003154:	4b9f      	ldr	r3, [pc, #636]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003156:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003158:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800315c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003162:	4a9c      	ldr	r2, [pc, #624]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003164:	430b      	orrs	r3, r1
 8003166:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003168:	e003      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800316a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800316e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003172:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800317a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800317e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003182:	2300      	movs	r3, #0
 8003184:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003188:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800318c:	460b      	mov	r3, r1
 800318e:	4313      	orrs	r3, r2
 8003190:	d051      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003192:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003196:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003198:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800319c:	d035      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800319e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80031a2:	d82e      	bhi.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80031a4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80031a8:	d031      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x432>
 80031aa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80031ae:	d828      	bhi.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80031b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031b4:	d01a      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x410>
 80031b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031ba:	d822      	bhi.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d003      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80031c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031c4:	d007      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80031c6:	e01c      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031c8:	4b82      	ldr	r3, [pc, #520]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80031ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031cc:	4a81      	ldr	r2, [pc, #516]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80031ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80031d4:	e01c      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80031d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031da:	3308      	adds	r3, #8
 80031dc:	2100      	movs	r1, #0
 80031de:	4618      	mov	r0, r3
 80031e0:	f001 fa78 	bl	80046d4 <RCCEx_PLL2_Config>
 80031e4:	4603      	mov	r3, r0
 80031e6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80031ea:	e011      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80031ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031f0:	3328      	adds	r3, #40	@ 0x28
 80031f2:	2100      	movs	r1, #0
 80031f4:	4618      	mov	r0, r3
 80031f6:	f001 fb1f 	bl	8004838 <RCCEx_PLL3_Config>
 80031fa:	4603      	mov	r3, r0
 80031fc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003200:	e006      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003208:	e002      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800320a:	bf00      	nop
 800320c:	e000      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800320e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003210:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003214:	2b00      	cmp	r3, #0
 8003216:	d10a      	bne.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003218:	4b6e      	ldr	r3, [pc, #440]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800321a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800321c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003220:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003224:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003226:	4a6b      	ldr	r2, [pc, #428]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003228:	430b      	orrs	r3, r1
 800322a:	6513      	str	r3, [r2, #80]	@ 0x50
 800322c:	e003      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800322e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003232:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003236:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800323a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800323e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003242:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003246:	2300      	movs	r3, #0
 8003248:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800324c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003250:	460b      	mov	r3, r1
 8003252:	4313      	orrs	r3, r2
 8003254:	d053      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003256:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800325a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800325c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003260:	d033      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003262:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003266:	d82c      	bhi.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003268:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800326c:	d02f      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800326e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003272:	d826      	bhi.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003274:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003278:	d02b      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800327a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800327e:	d820      	bhi.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003280:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003284:	d012      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003286:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800328a:	d81a      	bhi.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800328c:	2b00      	cmp	r3, #0
 800328e:	d022      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8003290:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003294:	d115      	bne.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003296:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800329a:	3308      	adds	r3, #8
 800329c:	2101      	movs	r1, #1
 800329e:	4618      	mov	r0, r3
 80032a0:	f001 fa18 	bl	80046d4 <RCCEx_PLL2_Config>
 80032a4:	4603      	mov	r3, r0
 80032a6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80032aa:	e015      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80032ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80032b0:	3328      	adds	r3, #40	@ 0x28
 80032b2:	2101      	movs	r1, #1
 80032b4:	4618      	mov	r0, r3
 80032b6:	f001 fabf 	bl	8004838 <RCCEx_PLL3_Config>
 80032ba:	4603      	mov	r3, r0
 80032bc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80032c0:	e00a      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80032c8:	e006      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80032ca:	bf00      	nop
 80032cc:	e004      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80032ce:	bf00      	nop
 80032d0:	e002      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80032d2:	bf00      	nop
 80032d4:	e000      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80032d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d10a      	bne.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80032e0:	4b3c      	ldr	r3, [pc, #240]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80032e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032e4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80032e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80032ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032ee:	4a39      	ldr	r2, [pc, #228]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80032f0:	430b      	orrs	r3, r1
 80032f2:	6513      	str	r3, [r2, #80]	@ 0x50
 80032f4:	e003      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032f6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80032fa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80032fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003306:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800330a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800330e:	2300      	movs	r3, #0
 8003310:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003314:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003318:	460b      	mov	r3, r1
 800331a:	4313      	orrs	r3, r2
 800331c:	d060      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800331e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003322:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003326:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800332a:	d039      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800332c:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8003330:	d832      	bhi.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003332:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003336:	d035      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003338:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800333c:	d82c      	bhi.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800333e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003342:	d031      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003344:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003348:	d826      	bhi.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800334a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800334e:	d02d      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003350:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003354:	d820      	bhi.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003356:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800335a:	d012      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800335c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003360:	d81a      	bhi.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003362:	2b00      	cmp	r3, #0
 8003364:	d024      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003366:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800336a:	d115      	bne.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800336c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003370:	3308      	adds	r3, #8
 8003372:	2101      	movs	r1, #1
 8003374:	4618      	mov	r0, r3
 8003376:	f001 f9ad 	bl	80046d4 <RCCEx_PLL2_Config>
 800337a:	4603      	mov	r3, r0
 800337c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003380:	e017      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003382:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003386:	3328      	adds	r3, #40	@ 0x28
 8003388:	2101      	movs	r1, #1
 800338a:	4618      	mov	r0, r3
 800338c:	f001 fa54 	bl	8004838 <RCCEx_PLL3_Config>
 8003390:	4603      	mov	r3, r0
 8003392:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003396:	e00c      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800339e:	e008      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80033a0:	bf00      	nop
 80033a2:	e006      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80033a4:	bf00      	nop
 80033a6:	e004      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80033a8:	bf00      	nop
 80033aa:	e002      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80033ac:	bf00      	nop
 80033ae:	e000      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80033b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033b2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10e      	bne.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80033ba:	4b06      	ldr	r3, [pc, #24]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80033bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033be:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80033c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80033c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80033ca:	4a02      	ldr	r2, [pc, #8]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80033cc:	430b      	orrs	r3, r1
 80033ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80033d0:	e006      	b.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80033d2:	bf00      	nop
 80033d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80033dc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80033e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80033e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80033ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80033f0:	2300      	movs	r3, #0
 80033f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80033f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80033fa:	460b      	mov	r3, r1
 80033fc:	4313      	orrs	r3, r2
 80033fe:	d037      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003400:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003404:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003406:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800340a:	d00e      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800340c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003410:	d816      	bhi.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003412:	2b00      	cmp	r3, #0
 8003414:	d018      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003416:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800341a:	d111      	bne.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800341c:	4bc4      	ldr	r3, [pc, #784]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800341e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003420:	4ac3      	ldr	r2, [pc, #780]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003422:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003426:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003428:	e00f      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800342a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800342e:	3308      	adds	r3, #8
 8003430:	2101      	movs	r1, #1
 8003432:	4618      	mov	r0, r3
 8003434:	f001 f94e 	bl	80046d4 <RCCEx_PLL2_Config>
 8003438:	4603      	mov	r3, r0
 800343a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800343e:	e004      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003446:	e000      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003448:	bf00      	nop
    }

    if (ret == HAL_OK)
 800344a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10a      	bne.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003452:	4bb7      	ldr	r3, [pc, #732]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003454:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003456:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800345a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800345e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003460:	4ab3      	ldr	r2, [pc, #716]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003462:	430b      	orrs	r3, r1
 8003464:	6513      	str	r3, [r2, #80]	@ 0x50
 8003466:	e003      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003468:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800346c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003470:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003478:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800347c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003480:	2300      	movs	r3, #0
 8003482:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003486:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800348a:	460b      	mov	r3, r1
 800348c:	4313      	orrs	r3, r2
 800348e:	d039      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003490:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003494:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003496:	2b03      	cmp	r3, #3
 8003498:	d81c      	bhi.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800349a:	a201      	add	r2, pc, #4	@ (adr r2, 80034a0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800349c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a0:	080034dd 	.word	0x080034dd
 80034a4:	080034b1 	.word	0x080034b1
 80034a8:	080034bf 	.word	0x080034bf
 80034ac:	080034dd 	.word	0x080034dd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034b0:	4b9f      	ldr	r3, [pc, #636]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80034b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b4:	4a9e      	ldr	r2, [pc, #632]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80034b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80034bc:	e00f      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80034be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034c2:	3308      	adds	r3, #8
 80034c4:	2102      	movs	r1, #2
 80034c6:	4618      	mov	r0, r3
 80034c8:	f001 f904 	bl	80046d4 <RCCEx_PLL2_Config>
 80034cc:	4603      	mov	r3, r0
 80034ce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80034d2:	e004      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80034da:	e000      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80034dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034de:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10a      	bne.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80034e6:	4b92      	ldr	r3, [pc, #584]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80034e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ea:	f023 0103 	bic.w	r1, r3, #3
 80034ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034f4:	4a8e      	ldr	r2, [pc, #568]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80034f6:	430b      	orrs	r3, r1
 80034f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034fa:	e003      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034fc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003500:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003504:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800350c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003510:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003514:	2300      	movs	r3, #0
 8003516:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800351a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800351e:	460b      	mov	r3, r1
 8003520:	4313      	orrs	r3, r2
 8003522:	f000 8099 	beq.w	8003658 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003526:	4b83      	ldr	r3, [pc, #524]	@ (8003734 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a82      	ldr	r2, [pc, #520]	@ (8003734 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800352c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003530:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003532:	f7fe f817 	bl	8001564 <HAL_GetTick>
 8003536:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800353a:	e00b      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800353c:	f7fe f812 	bl	8001564 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b64      	cmp	r3, #100	@ 0x64
 800354a:	d903      	bls.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003552:	e005      	b.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003554:	4b77      	ldr	r3, [pc, #476]	@ (8003734 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0ed      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003560:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003564:	2b00      	cmp	r3, #0
 8003566:	d173      	bne.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003568:	4b71      	ldr	r3, [pc, #452]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800356a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800356c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003570:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003574:	4053      	eors	r3, r2
 8003576:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800357a:	2b00      	cmp	r3, #0
 800357c:	d015      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800357e:	4b6c      	ldr	r3, [pc, #432]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003582:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003586:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800358a:	4b69      	ldr	r3, [pc, #420]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800358c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800358e:	4a68      	ldr	r2, [pc, #416]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003590:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003594:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003596:	4b66      	ldr	r3, [pc, #408]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003598:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800359a:	4a65      	ldr	r2, [pc, #404]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800359c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035a0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80035a2:	4a63      	ldr	r2, [pc, #396]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035a8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80035aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80035b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035b6:	d118      	bne.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b8:	f7fd ffd4 	bl	8001564 <HAL_GetTick>
 80035bc:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035c0:	e00d      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035c2:	f7fd ffcf 	bl	8001564 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80035cc:	1ad2      	subs	r2, r2, r3
 80035ce:	f241 3388 	movw	r3, #5000	@ 0x1388
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d903      	bls.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 80035dc:	e005      	b.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035de:	4b54      	ldr	r3, [pc, #336]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d0eb      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80035ea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d129      	bne.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80035fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003602:	d10e      	bne.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003604:	4b4a      	ldr	r3, [pc, #296]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003606:	691b      	ldr	r3, [r3, #16]
 8003608:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800360c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003610:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003614:	091a      	lsrs	r2, r3, #4
 8003616:	4b48      	ldr	r3, [pc, #288]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003618:	4013      	ands	r3, r2
 800361a:	4a45      	ldr	r2, [pc, #276]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800361c:	430b      	orrs	r3, r1
 800361e:	6113      	str	r3, [r2, #16]
 8003620:	e005      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003622:	4b43      	ldr	r3, [pc, #268]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	4a42      	ldr	r2, [pc, #264]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003628:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800362c:	6113      	str	r3, [r2, #16]
 800362e:	4b40      	ldr	r3, [pc, #256]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003630:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003632:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003636:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800363a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800363e:	4a3c      	ldr	r2, [pc, #240]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003640:	430b      	orrs	r3, r1
 8003642:	6713      	str	r3, [r2, #112]	@ 0x70
 8003644:	e008      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003646:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800364a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800364e:	e003      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003650:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003654:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003658:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800365c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003660:	f002 0301 	and.w	r3, r2, #1
 8003664:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003668:	2300      	movs	r3, #0
 800366a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800366e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003672:	460b      	mov	r3, r1
 8003674:	4313      	orrs	r3, r2
 8003676:	f000 8090 	beq.w	800379a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800367a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800367e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003682:	2b28      	cmp	r3, #40	@ 0x28
 8003684:	d870      	bhi.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003686:	a201      	add	r2, pc, #4	@ (adr r2, 800368c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800368c:	08003771 	.word	0x08003771
 8003690:	08003769 	.word	0x08003769
 8003694:	08003769 	.word	0x08003769
 8003698:	08003769 	.word	0x08003769
 800369c:	08003769 	.word	0x08003769
 80036a0:	08003769 	.word	0x08003769
 80036a4:	08003769 	.word	0x08003769
 80036a8:	08003769 	.word	0x08003769
 80036ac:	0800373d 	.word	0x0800373d
 80036b0:	08003769 	.word	0x08003769
 80036b4:	08003769 	.word	0x08003769
 80036b8:	08003769 	.word	0x08003769
 80036bc:	08003769 	.word	0x08003769
 80036c0:	08003769 	.word	0x08003769
 80036c4:	08003769 	.word	0x08003769
 80036c8:	08003769 	.word	0x08003769
 80036cc:	08003753 	.word	0x08003753
 80036d0:	08003769 	.word	0x08003769
 80036d4:	08003769 	.word	0x08003769
 80036d8:	08003769 	.word	0x08003769
 80036dc:	08003769 	.word	0x08003769
 80036e0:	08003769 	.word	0x08003769
 80036e4:	08003769 	.word	0x08003769
 80036e8:	08003769 	.word	0x08003769
 80036ec:	08003771 	.word	0x08003771
 80036f0:	08003769 	.word	0x08003769
 80036f4:	08003769 	.word	0x08003769
 80036f8:	08003769 	.word	0x08003769
 80036fc:	08003769 	.word	0x08003769
 8003700:	08003769 	.word	0x08003769
 8003704:	08003769 	.word	0x08003769
 8003708:	08003769 	.word	0x08003769
 800370c:	08003771 	.word	0x08003771
 8003710:	08003769 	.word	0x08003769
 8003714:	08003769 	.word	0x08003769
 8003718:	08003769 	.word	0x08003769
 800371c:	08003769 	.word	0x08003769
 8003720:	08003769 	.word	0x08003769
 8003724:	08003769 	.word	0x08003769
 8003728:	08003769 	.word	0x08003769
 800372c:	08003771 	.word	0x08003771
 8003730:	58024400 	.word	0x58024400
 8003734:	58024800 	.word	0x58024800
 8003738:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800373c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003740:	3308      	adds	r3, #8
 8003742:	2101      	movs	r1, #1
 8003744:	4618      	mov	r0, r3
 8003746:	f000 ffc5 	bl	80046d4 <RCCEx_PLL2_Config>
 800374a:	4603      	mov	r3, r0
 800374c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003750:	e00f      	b.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003752:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003756:	3328      	adds	r3, #40	@ 0x28
 8003758:	2101      	movs	r1, #1
 800375a:	4618      	mov	r0, r3
 800375c:	f001 f86c 	bl	8004838 <RCCEx_PLL3_Config>
 8003760:	4603      	mov	r3, r0
 8003762:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003766:	e004      	b.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800376e:	e000      	b.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003770:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003772:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003776:	2b00      	cmp	r3, #0
 8003778:	d10b      	bne.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800377a:	4bc0      	ldr	r3, [pc, #768]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800377c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800377e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003782:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003786:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800378a:	4abc      	ldr	r2, [pc, #752]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800378c:	430b      	orrs	r3, r1
 800378e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003790:	e003      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003792:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003796:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800379a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800379e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a2:	f002 0302 	and.w	r3, r2, #2
 80037a6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80037aa:	2300      	movs	r3, #0
 80037ac:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80037b0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80037b4:	460b      	mov	r3, r1
 80037b6:	4313      	orrs	r3, r2
 80037b8:	d043      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80037ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037c2:	2b05      	cmp	r3, #5
 80037c4:	d824      	bhi.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80037c6:	a201      	add	r2, pc, #4	@ (adr r2, 80037cc <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80037c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037cc:	08003819 	.word	0x08003819
 80037d0:	080037e5 	.word	0x080037e5
 80037d4:	080037fb 	.word	0x080037fb
 80037d8:	08003819 	.word	0x08003819
 80037dc:	08003819 	.word	0x08003819
 80037e0:	08003819 	.word	0x08003819
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80037e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037e8:	3308      	adds	r3, #8
 80037ea:	2101      	movs	r1, #1
 80037ec:	4618      	mov	r0, r3
 80037ee:	f000 ff71 	bl	80046d4 <RCCEx_PLL2_Config>
 80037f2:	4603      	mov	r3, r0
 80037f4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80037f8:	e00f      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80037fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037fe:	3328      	adds	r3, #40	@ 0x28
 8003800:	2101      	movs	r1, #1
 8003802:	4618      	mov	r0, r3
 8003804:	f001 f818 	bl	8004838 <RCCEx_PLL3_Config>
 8003808:	4603      	mov	r3, r0
 800380a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800380e:	e004      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003816:	e000      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8003818:	bf00      	nop
    }

    if (ret == HAL_OK)
 800381a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10b      	bne.n	800383a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003822:	4b96      	ldr	r3, [pc, #600]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003826:	f023 0107 	bic.w	r1, r3, #7
 800382a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800382e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003832:	4a92      	ldr	r2, [pc, #584]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003834:	430b      	orrs	r3, r1
 8003836:	6553      	str	r3, [r2, #84]	@ 0x54
 8003838:	e003      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800383a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800383e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003842:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800384a:	f002 0304 	and.w	r3, r2, #4
 800384e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003852:	2300      	movs	r3, #0
 8003854:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003858:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800385c:	460b      	mov	r3, r1
 800385e:	4313      	orrs	r3, r2
 8003860:	d043      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003862:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003866:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800386a:	2b05      	cmp	r3, #5
 800386c:	d824      	bhi.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800386e:	a201      	add	r2, pc, #4	@ (adr r2, 8003874 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8003870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003874:	080038c1 	.word	0x080038c1
 8003878:	0800388d 	.word	0x0800388d
 800387c:	080038a3 	.word	0x080038a3
 8003880:	080038c1 	.word	0x080038c1
 8003884:	080038c1 	.word	0x080038c1
 8003888:	080038c1 	.word	0x080038c1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800388c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003890:	3308      	adds	r3, #8
 8003892:	2101      	movs	r1, #1
 8003894:	4618      	mov	r0, r3
 8003896:	f000 ff1d 	bl	80046d4 <RCCEx_PLL2_Config>
 800389a:	4603      	mov	r3, r0
 800389c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80038a0:	e00f      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80038a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038a6:	3328      	adds	r3, #40	@ 0x28
 80038a8:	2101      	movs	r1, #1
 80038aa:	4618      	mov	r0, r3
 80038ac:	f000 ffc4 	bl	8004838 <RCCEx_PLL3_Config>
 80038b0:	4603      	mov	r3, r0
 80038b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80038b6:	e004      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80038be:	e000      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80038c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038c2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10b      	bne.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80038ca:	4b6c      	ldr	r3, [pc, #432]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80038cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ce:	f023 0107 	bic.w	r1, r3, #7
 80038d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80038da:	4a68      	ldr	r2, [pc, #416]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80038dc:	430b      	orrs	r3, r1
 80038de:	6593      	str	r3, [r2, #88]	@ 0x58
 80038e0:	e003      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038e2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80038e6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80038ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f2:	f002 0320 	and.w	r3, r2, #32
 80038f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80038fa:	2300      	movs	r3, #0
 80038fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003900:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003904:	460b      	mov	r3, r1
 8003906:	4313      	orrs	r3, r2
 8003908:	d055      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800390a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800390e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003912:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003916:	d033      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003918:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800391c:	d82c      	bhi.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800391e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003922:	d02f      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003924:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003928:	d826      	bhi.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800392a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800392e:	d02b      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003930:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003934:	d820      	bhi.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003936:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800393a:	d012      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800393c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003940:	d81a      	bhi.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003942:	2b00      	cmp	r3, #0
 8003944:	d022      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8003946:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800394a:	d115      	bne.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800394c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003950:	3308      	adds	r3, #8
 8003952:	2100      	movs	r1, #0
 8003954:	4618      	mov	r0, r3
 8003956:	f000 febd 	bl	80046d4 <RCCEx_PLL2_Config>
 800395a:	4603      	mov	r3, r0
 800395c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003960:	e015      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003962:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003966:	3328      	adds	r3, #40	@ 0x28
 8003968:	2102      	movs	r1, #2
 800396a:	4618      	mov	r0, r3
 800396c:	f000 ff64 	bl	8004838 <RCCEx_PLL3_Config>
 8003970:	4603      	mov	r3, r0
 8003972:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003976:	e00a      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800397e:	e006      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003980:	bf00      	nop
 8003982:	e004      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003984:	bf00      	nop
 8003986:	e002      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003988:	bf00      	nop
 800398a:	e000      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800398c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800398e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10b      	bne.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003996:	4b39      	ldr	r3, [pc, #228]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800399a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800399e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80039a6:	4a35      	ldr	r2, [pc, #212]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80039a8:	430b      	orrs	r3, r1
 80039aa:	6553      	str	r3, [r2, #84]	@ 0x54
 80039ac:	e003      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80039b2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80039b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039be:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80039c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80039c6:	2300      	movs	r3, #0
 80039c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80039cc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80039d0:	460b      	mov	r3, r1
 80039d2:	4313      	orrs	r3, r2
 80039d4:	d058      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80039d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80039de:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80039e2:	d033      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80039e4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80039e8:	d82c      	bhi.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80039ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039ee:	d02f      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80039f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039f4:	d826      	bhi.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80039f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80039fa:	d02b      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80039fc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003a00:	d820      	bhi.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003a02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a06:	d012      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8003a08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a0c:	d81a      	bhi.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d022      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8003a12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a16:	d115      	bne.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a1c:	3308      	adds	r3, #8
 8003a1e:	2100      	movs	r1, #0
 8003a20:	4618      	mov	r0, r3
 8003a22:	f000 fe57 	bl	80046d4 <RCCEx_PLL2_Config>
 8003a26:	4603      	mov	r3, r0
 8003a28:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003a2c:	e015      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a32:	3328      	adds	r3, #40	@ 0x28
 8003a34:	2102      	movs	r1, #2
 8003a36:	4618      	mov	r0, r3
 8003a38:	f000 fefe 	bl	8004838 <RCCEx_PLL3_Config>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003a42:	e00a      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003a4a:	e006      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003a4c:	bf00      	nop
 8003a4e:	e004      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003a50:	bf00      	nop
 8003a52:	e002      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003a54:	bf00      	nop
 8003a56:	e000      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003a58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a5a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10e      	bne.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a62:	4b06      	ldr	r3, [pc, #24]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003a64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a66:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003a6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a6e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003a72:	4a02      	ldr	r2, [pc, #8]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003a74:	430b      	orrs	r3, r1
 8003a76:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a78:	e006      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8003a7a:	bf00      	nop
 8003a7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a80:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003a84:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003a88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a90:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003a94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003a98:	2300      	movs	r3, #0
 8003a9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003a9e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	d055      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003aa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003aac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003ab0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003ab4:	d033      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003ab6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003aba:	d82c      	bhi.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003abc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ac0:	d02f      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003ac2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ac6:	d826      	bhi.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003ac8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003acc:	d02b      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003ace:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003ad2:	d820      	bhi.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003ad4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ad8:	d012      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8003ada:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ade:	d81a      	bhi.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d022      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8003ae4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ae8:	d115      	bne.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003aea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003aee:	3308      	adds	r3, #8
 8003af0:	2100      	movs	r1, #0
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 fdee 	bl	80046d4 <RCCEx_PLL2_Config>
 8003af8:	4603      	mov	r3, r0
 8003afa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003afe:	e015      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b04:	3328      	adds	r3, #40	@ 0x28
 8003b06:	2102      	movs	r1, #2
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f000 fe95 	bl	8004838 <RCCEx_PLL3_Config>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003b14:	e00a      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003b1c:	e006      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003b1e:	bf00      	nop
 8003b20:	e004      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003b22:	bf00      	nop
 8003b24:	e002      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003b26:	bf00      	nop
 8003b28:	e000      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003b2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b2c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d10b      	bne.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003b34:	4ba1      	ldr	r3, [pc, #644]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b38:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003b3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b40:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003b44:	4a9d      	ldr	r2, [pc, #628]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003b46:	430b      	orrs	r3, r1
 8003b48:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b4a:	e003      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b4c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003b50:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003b54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b5c:	f002 0308 	and.w	r3, r2, #8
 8003b60:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003b64:	2300      	movs	r3, #0
 8003b66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003b6a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003b6e:	460b      	mov	r3, r1
 8003b70:	4313      	orrs	r3, r2
 8003b72:	d01e      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003b74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b80:	d10c      	bne.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003b82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b86:	3328      	adds	r3, #40	@ 0x28
 8003b88:	2102      	movs	r1, #2
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f000 fe54 	bl	8004838 <RCCEx_PLL3_Config>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d002      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003b9c:	4b87      	ldr	r3, [pc, #540]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003b9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ba0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003ba4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003bac:	4a83      	ldr	r2, [pc, #524]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003bae:	430b      	orrs	r3, r1
 8003bb0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003bb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bba:	f002 0310 	and.w	r3, r2, #16
 8003bbe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003bc8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003bcc:	460b      	mov	r3, r1
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	d01e      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003bd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003bd6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003bda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bde:	d10c      	bne.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003be0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003be4:	3328      	adds	r3, #40	@ 0x28
 8003be6:	2102      	movs	r1, #2
 8003be8:	4618      	mov	r0, r3
 8003bea:	f000 fe25 	bl	8004838 <RCCEx_PLL3_Config>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d002      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003bfa:	4b70      	ldr	r3, [pc, #448]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bfe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003c02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003c0a:	4a6c      	ldr	r2, [pc, #432]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003c0c:	430b      	orrs	r3, r1
 8003c0e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c18:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003c1c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003c20:	2300      	movs	r3, #0
 8003c22:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003c26:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	d03e      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003c30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c34:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003c38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c3c:	d022      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8003c3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c42:	d81b      	bhi.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d003      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8003c48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c4c:	d00b      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8003c4e:	e015      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c54:	3308      	adds	r3, #8
 8003c56:	2100      	movs	r1, #0
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f000 fd3b 	bl	80046d4 <RCCEx_PLL2_Config>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003c64:	e00f      	b.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c6a:	3328      	adds	r3, #40	@ 0x28
 8003c6c:	2102      	movs	r1, #2
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f000 fde2 	bl	8004838 <RCCEx_PLL3_Config>
 8003c74:	4603      	mov	r3, r0
 8003c76:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003c7a:	e004      	b.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003c82:	e000      	b.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8003c84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c86:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10b      	bne.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c8e:	4b4b      	ldr	r3, [pc, #300]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c92:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003c96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c9a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003c9e:	4a47      	ldr	r2, [pc, #284]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003ca0:	430b      	orrs	r3, r1
 8003ca2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ca4:	e003      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ca6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003caa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003cae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003cba:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003cc0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	d03b      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003cca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cd2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003cd6:	d01f      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8003cd8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003cdc:	d818      	bhi.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003cde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ce2:	d003      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8003ce4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ce8:	d007      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8003cea:	e011      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cec:	4b33      	ldr	r3, [pc, #204]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf0:	4a32      	ldr	r2, [pc, #200]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003cf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cf6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003cf8:	e00f      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003cfe:	3328      	adds	r3, #40	@ 0x28
 8003d00:	2101      	movs	r1, #1
 8003d02:	4618      	mov	r0, r3
 8003d04:	f000 fd98 	bl	8004838 <RCCEx_PLL3_Config>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8003d0e:	e004      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003d16:	e000      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8003d18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d1a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10b      	bne.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d22:	4b26      	ldr	r3, [pc, #152]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d26:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003d2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d32:	4a22      	ldr	r2, [pc, #136]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003d34:	430b      	orrs	r3, r1
 8003d36:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d38:	e003      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d3a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003d3e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003d42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d4a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003d4e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003d50:	2300      	movs	r3, #0
 8003d52:	677b      	str	r3, [r7, #116]	@ 0x74
 8003d54:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003d58:	460b      	mov	r3, r1
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	d034      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003d5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d003      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8003d68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d6c:	d007      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8003d6e:	e011      	b.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d70:	4b12      	ldr	r3, [pc, #72]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d74:	4a11      	ldr	r2, [pc, #68]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003d76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003d7c:	e00e      	b.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d82:	3308      	adds	r3, #8
 8003d84:	2102      	movs	r1, #2
 8003d86:	4618      	mov	r0, r3
 8003d88:	f000 fca4 	bl	80046d4 <RCCEx_PLL2_Config>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003d92:	e003      	b.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003d9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d9c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d10d      	bne.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003da4:	4b05      	ldr	r3, [pc, #20]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003da6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003da8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003dac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003db0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003db2:	4a02      	ldr	r2, [pc, #8]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003db4:	430b      	orrs	r3, r1
 8003db6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003db8:	e006      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8003dba:	bf00      	nop
 8003dbc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dc0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003dc4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003dc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003dd4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003dda:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003dde:	460b      	mov	r3, r1
 8003de0:	4313      	orrs	r3, r2
 8003de2:	d00c      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003de4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003de8:	3328      	adds	r3, #40	@ 0x28
 8003dea:	2102      	movs	r1, #2
 8003dec:	4618      	mov	r0, r3
 8003dee:	f000 fd23 	bl	8004838 <RCCEx_PLL3_Config>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d002      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003dfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e06:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003e0a:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003e10:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003e14:	460b      	mov	r3, r1
 8003e16:	4313      	orrs	r3, r2
 8003e18:	d038      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003e1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e26:	d018      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8003e28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e2c:	d811      	bhi.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8003e2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e32:	d014      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8003e34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e38:	d80b      	bhi.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d011      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8003e3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e42:	d106      	bne.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e44:	4bc3      	ldr	r3, [pc, #780]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e48:	4ac2      	ldr	r2, [pc, #776]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003e4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003e50:	e008      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003e58:	e004      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003e5a:	bf00      	nop
 8003e5c:	e002      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003e5e:	bf00      	nop
 8003e60:	e000      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003e62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e64:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d10b      	bne.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e6c:	4bb9      	ldr	r3, [pc, #740]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003e6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e70:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003e74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e7c:	4ab5      	ldr	r2, [pc, #724]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003e7e:	430b      	orrs	r3, r1
 8003e80:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e82:	e003      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e84:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003e88:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e94:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003e98:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e9e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	d009      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ea8:	4baa      	ldr	r3, [pc, #680]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003eaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eac:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003eb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003eb4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003eb6:	4aa7      	ldr	r2, [pc, #668]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003eb8:	430b      	orrs	r3, r1
 8003eba:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ebc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003ec8:	653b      	str	r3, [r7, #80]	@ 0x50
 8003eca:	2300      	movs	r3, #0
 8003ecc:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ece:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	d009      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ed8:	4b9e      	ldr	r3, [pc, #632]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003eda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003edc:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003ee0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ee6:	4a9b      	ldr	r2, [pc, #620]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003ee8:	430b      	orrs	r3, r1
 8003eea:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003eec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003ef8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003efa:	2300      	movs	r3, #0
 8003efc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003efe:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003f02:	460b      	mov	r3, r1
 8003f04:	4313      	orrs	r3, r2
 8003f06:	d009      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8003f08:	4b92      	ldr	r3, [pc, #584]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003f0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f0c:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8003f10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f16:	4a8f      	ldr	r2, [pc, #572]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003f18:	430b      	orrs	r3, r1
 8003f1a:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003f1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f24:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003f28:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f2e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003f32:	460b      	mov	r3, r1
 8003f34:	4313      	orrs	r3, r2
 8003f36:	d00e      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f38:	4b86      	ldr	r3, [pc, #536]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	4a85      	ldr	r2, [pc, #532]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003f3e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003f42:	6113      	str	r3, [r2, #16]
 8003f44:	4b83      	ldr	r3, [pc, #524]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003f46:	6919      	ldr	r1, [r3, #16]
 8003f48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f4c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003f50:	4a80      	ldr	r2, [pc, #512]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003f52:	430b      	orrs	r3, r1
 8003f54:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003f56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f5e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003f62:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f64:	2300      	movs	r3, #0
 8003f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f68:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	d009      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003f72:	4b78      	ldr	r3, [pc, #480]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f76:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003f7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f80:	4a74      	ldr	r2, [pc, #464]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003f82:	430b      	orrs	r3, r1
 8003f84:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003f92:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f94:	2300      	movs	r3, #0
 8003f96:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f98:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	d00a      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003fa2:	4b6c      	ldr	r3, [pc, #432]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003fa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fa6:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003faa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fb2:	4a68      	ldr	r2, [pc, #416]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003fb4:	430b      	orrs	r3, r1
 8003fb6:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003fb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc0:	2100      	movs	r1, #0
 8003fc2:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003fc4:	f003 0301 	and.w	r3, r3, #1
 8003fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fca:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003fce:	460b      	mov	r3, r1
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	d011      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fd8:	3308      	adds	r3, #8
 8003fda:	2100      	movs	r1, #0
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f000 fb79 	bl	80046d4 <RCCEx_PLL2_Config>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8003fe8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d003      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003ff4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003ff8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004000:	2100      	movs	r1, #0
 8004002:	6239      	str	r1, [r7, #32]
 8004004:	f003 0302 	and.w	r3, r3, #2
 8004008:	627b      	str	r3, [r7, #36]	@ 0x24
 800400a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800400e:	460b      	mov	r3, r1
 8004010:	4313      	orrs	r3, r2
 8004012:	d011      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004014:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004018:	3308      	adds	r3, #8
 800401a:	2101      	movs	r1, #1
 800401c:	4618      	mov	r0, r3
 800401e:	f000 fb59 	bl	80046d4 <RCCEx_PLL2_Config>
 8004022:	4603      	mov	r3, r0
 8004024:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004028:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800402c:	2b00      	cmp	r3, #0
 800402e:	d003      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004030:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004034:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004038:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800403c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004040:	2100      	movs	r1, #0
 8004042:	61b9      	str	r1, [r7, #24]
 8004044:	f003 0304 	and.w	r3, r3, #4
 8004048:	61fb      	str	r3, [r7, #28]
 800404a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800404e:	460b      	mov	r3, r1
 8004050:	4313      	orrs	r3, r2
 8004052:	d011      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004054:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004058:	3308      	adds	r3, #8
 800405a:	2102      	movs	r1, #2
 800405c:	4618      	mov	r0, r3
 800405e:	f000 fb39 	bl	80046d4 <RCCEx_PLL2_Config>
 8004062:	4603      	mov	r3, r0
 8004064:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004068:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800406c:	2b00      	cmp	r3, #0
 800406e:	d003      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004070:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004074:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004078:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800407c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004080:	2100      	movs	r1, #0
 8004082:	6139      	str	r1, [r7, #16]
 8004084:	f003 0308 	and.w	r3, r3, #8
 8004088:	617b      	str	r3, [r7, #20]
 800408a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800408e:	460b      	mov	r3, r1
 8004090:	4313      	orrs	r3, r2
 8004092:	d011      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004094:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004098:	3328      	adds	r3, #40	@ 0x28
 800409a:	2100      	movs	r1, #0
 800409c:	4618      	mov	r0, r3
 800409e:	f000 fbcb 	bl	8004838 <RCCEx_PLL3_Config>
 80040a2:	4603      	mov	r3, r0
 80040a4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 80040a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d003      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80040b4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80040b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c0:	2100      	movs	r1, #0
 80040c2:	60b9      	str	r1, [r7, #8]
 80040c4:	f003 0310 	and.w	r3, r3, #16
 80040c8:	60fb      	str	r3, [r7, #12]
 80040ca:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80040ce:	460b      	mov	r3, r1
 80040d0:	4313      	orrs	r3, r2
 80040d2:	d011      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040d8:	3328      	adds	r3, #40	@ 0x28
 80040da:	2101      	movs	r1, #1
 80040dc:	4618      	mov	r0, r3
 80040de:	f000 fbab 	bl	8004838 <RCCEx_PLL3_Config>
 80040e2:	4603      	mov	r3, r0
 80040e4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80040e8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d003      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80040f4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80040f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004100:	2100      	movs	r1, #0
 8004102:	6039      	str	r1, [r7, #0]
 8004104:	f003 0320 	and.w	r3, r3, #32
 8004108:	607b      	str	r3, [r7, #4]
 800410a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800410e:	460b      	mov	r3, r1
 8004110:	4313      	orrs	r3, r2
 8004112:	d011      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004114:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004118:	3328      	adds	r3, #40	@ 0x28
 800411a:	2102      	movs	r1, #2
 800411c:	4618      	mov	r0, r3
 800411e:	f000 fb8b 	bl	8004838 <RCCEx_PLL3_Config>
 8004122:	4603      	mov	r3, r0
 8004124:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004128:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800412c:	2b00      	cmp	r3, #0
 800412e:	d003      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004130:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004134:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8004138:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800413c:	2b00      	cmp	r3, #0
 800413e:	d101      	bne.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8004140:	2300      	movs	r3, #0
 8004142:	e000      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
}
 8004146:	4618      	mov	r0, r3
 8004148:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800414c:	46bd      	mov	sp, r7
 800414e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004152:	bf00      	nop
 8004154:	58024400 	.word	0x58024400

08004158 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800415c:	f7fe fda0 	bl	8002ca0 <HAL_RCC_GetHCLKFreq>
 8004160:	4602      	mov	r2, r0
 8004162:	4b06      	ldr	r3, [pc, #24]	@ (800417c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	091b      	lsrs	r3, r3, #4
 8004168:	f003 0307 	and.w	r3, r3, #7
 800416c:	4904      	ldr	r1, [pc, #16]	@ (8004180 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800416e:	5ccb      	ldrb	r3, [r1, r3]
 8004170:	f003 031f 	and.w	r3, r3, #31
 8004174:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004178:	4618      	mov	r0, r3
 800417a:	bd80      	pop	{r7, pc}
 800417c:	58024400 	.word	0x58024400
 8004180:	0800dc50 	.word	0x0800dc50

08004184 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004184:	b480      	push	{r7}
 8004186:	b089      	sub	sp, #36	@ 0x24
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800418c:	4ba1      	ldr	r3, [pc, #644]	@ (8004414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800418e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004190:	f003 0303 	and.w	r3, r3, #3
 8004194:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004196:	4b9f      	ldr	r3, [pc, #636]	@ (8004414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800419a:	0b1b      	lsrs	r3, r3, #12
 800419c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041a0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80041a2:	4b9c      	ldr	r3, [pc, #624]	@ (8004414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041a6:	091b      	lsrs	r3, r3, #4
 80041a8:	f003 0301 	and.w	r3, r3, #1
 80041ac:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80041ae:	4b99      	ldr	r3, [pc, #612]	@ (8004414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041b2:	08db      	lsrs	r3, r3, #3
 80041b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	fb02 f303 	mul.w	r3, r2, r3
 80041be:	ee07 3a90 	vmov	s15, r3
 80041c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f000 8111 	beq.w	80043f4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	f000 8083 	beq.w	80042e0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	2b02      	cmp	r3, #2
 80041de:	f200 80a1 	bhi.w	8004324 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d003      	beq.n	80041f0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d056      	beq.n	800429c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80041ee:	e099      	b.n	8004324 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80041f0:	4b88      	ldr	r3, [pc, #544]	@ (8004414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0320 	and.w	r3, r3, #32
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d02d      	beq.n	8004258 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80041fc:	4b85      	ldr	r3, [pc, #532]	@ (8004414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	08db      	lsrs	r3, r3, #3
 8004202:	f003 0303 	and.w	r3, r3, #3
 8004206:	4a84      	ldr	r2, [pc, #528]	@ (8004418 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004208:	fa22 f303 	lsr.w	r3, r2, r3
 800420c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	ee07 3a90 	vmov	s15, r3
 8004214:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	ee07 3a90 	vmov	s15, r3
 800421e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004226:	4b7b      	ldr	r3, [pc, #492]	@ (8004414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800422a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800422e:	ee07 3a90 	vmov	s15, r3
 8004232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004236:	ed97 6a03 	vldr	s12, [r7, #12]
 800423a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800441c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800423e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004242:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004246:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800424a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800424e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004252:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004256:	e087      	b.n	8004368 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	ee07 3a90 	vmov	s15, r3
 800425e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004262:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004420 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004266:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800426a:	4b6a      	ldr	r3, [pc, #424]	@ (8004414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800426c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800426e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004272:	ee07 3a90 	vmov	s15, r3
 8004276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800427a:	ed97 6a03 	vldr	s12, [r7, #12]
 800427e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800441c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004282:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004286:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800428a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800428e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004296:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800429a:	e065      	b.n	8004368 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	ee07 3a90 	vmov	s15, r3
 80042a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042a6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004424 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80042aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042ae:	4b59      	ldr	r3, [pc, #356]	@ (8004414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042b6:	ee07 3a90 	vmov	s15, r3
 80042ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042be:	ed97 6a03 	vldr	s12, [r7, #12]
 80042c2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800441c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80042c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042de:	e043      	b.n	8004368 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	ee07 3a90 	vmov	s15, r3
 80042e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ea:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004428 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80042ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042f2:	4b48      	ldr	r3, [pc, #288]	@ (8004414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042fa:	ee07 3a90 	vmov	s15, r3
 80042fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004302:	ed97 6a03 	vldr	s12, [r7, #12]
 8004306:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800441c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800430a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800430e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004312:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004316:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800431a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800431e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004322:	e021      	b.n	8004368 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	ee07 3a90 	vmov	s15, r3
 800432a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800432e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004424 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004336:	4b37      	ldr	r3, [pc, #220]	@ (8004414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800433a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800433e:	ee07 3a90 	vmov	s15, r3
 8004342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004346:	ed97 6a03 	vldr	s12, [r7, #12]
 800434a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800441c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800434e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004356:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800435a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800435e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004362:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004366:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004368:	4b2a      	ldr	r3, [pc, #168]	@ (8004414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800436a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800436c:	0a5b      	lsrs	r3, r3, #9
 800436e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004372:	ee07 3a90 	vmov	s15, r3
 8004376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800437a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800437e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004382:	edd7 6a07 	vldr	s13, [r7, #28]
 8004386:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800438a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800438e:	ee17 2a90 	vmov	r2, s15
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004396:	4b1f      	ldr	r3, [pc, #124]	@ (8004414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800439a:	0c1b      	lsrs	r3, r3, #16
 800439c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043a0:	ee07 3a90 	vmov	s15, r3
 80043a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80043ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80043b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80043b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043bc:	ee17 2a90 	vmov	r2, s15
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80043c4:	4b13      	ldr	r3, [pc, #76]	@ (8004414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043c8:	0e1b      	lsrs	r3, r3, #24
 80043ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043ce:	ee07 3a90 	vmov	s15, r3
 80043d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80043da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80043de:	edd7 6a07 	vldr	s13, [r7, #28]
 80043e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043ea:	ee17 2a90 	vmov	r2, s15
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80043f2:	e008      	b.n	8004406 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	609a      	str	r2, [r3, #8]
}
 8004406:	bf00      	nop
 8004408:	3724      	adds	r7, #36	@ 0x24
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	58024400 	.word	0x58024400
 8004418:	03d09000 	.word	0x03d09000
 800441c:	46000000 	.word	0x46000000
 8004420:	4c742400 	.word	0x4c742400
 8004424:	4a742400 	.word	0x4a742400
 8004428:	4bb71b00 	.word	0x4bb71b00

0800442c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800442c:	b480      	push	{r7}
 800442e:	b089      	sub	sp, #36	@ 0x24
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004434:	4ba1      	ldr	r3, [pc, #644]	@ (80046bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004438:	f003 0303 	and.w	r3, r3, #3
 800443c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800443e:	4b9f      	ldr	r3, [pc, #636]	@ (80046bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004442:	0d1b      	lsrs	r3, r3, #20
 8004444:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004448:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800444a:	4b9c      	ldr	r3, [pc, #624]	@ (80046bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800444c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800444e:	0a1b      	lsrs	r3, r3, #8
 8004450:	f003 0301 	and.w	r3, r3, #1
 8004454:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004456:	4b99      	ldr	r3, [pc, #612]	@ (80046bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800445a:	08db      	lsrs	r3, r3, #3
 800445c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004460:	693a      	ldr	r2, [r7, #16]
 8004462:	fb02 f303 	mul.w	r3, r2, r3
 8004466:	ee07 3a90 	vmov	s15, r3
 800446a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800446e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	2b00      	cmp	r3, #0
 8004476:	f000 8111 	beq.w	800469c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	2b02      	cmp	r3, #2
 800447e:	f000 8083 	beq.w	8004588 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	2b02      	cmp	r3, #2
 8004486:	f200 80a1 	bhi.w	80045cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d003      	beq.n	8004498 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d056      	beq.n	8004544 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004496:	e099      	b.n	80045cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004498:	4b88      	ldr	r3, [pc, #544]	@ (80046bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0320 	and.w	r3, r3, #32
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d02d      	beq.n	8004500 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80044a4:	4b85      	ldr	r3, [pc, #532]	@ (80046bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	08db      	lsrs	r3, r3, #3
 80044aa:	f003 0303 	and.w	r3, r3, #3
 80044ae:	4a84      	ldr	r2, [pc, #528]	@ (80046c0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80044b0:	fa22 f303 	lsr.w	r3, r2, r3
 80044b4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	ee07 3a90 	vmov	s15, r3
 80044bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	ee07 3a90 	vmov	s15, r3
 80044c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044ce:	4b7b      	ldr	r3, [pc, #492]	@ (80046bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044d6:	ee07 3a90 	vmov	s15, r3
 80044da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044de:	ed97 6a03 	vldr	s12, [r7, #12]
 80044e2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80046c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80044e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80044f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80044fe:	e087      	b.n	8004610 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	ee07 3a90 	vmov	s15, r3
 8004506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800450a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80046c8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800450e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004512:	4b6a      	ldr	r3, [pc, #424]	@ (80046bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800451a:	ee07 3a90 	vmov	s15, r3
 800451e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004522:	ed97 6a03 	vldr	s12, [r7, #12]
 8004526:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80046c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800452a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800452e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004532:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800453a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800453e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004542:	e065      	b.n	8004610 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	ee07 3a90 	vmov	s15, r3
 800454a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800454e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80046cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004556:	4b59      	ldr	r3, [pc, #356]	@ (80046bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800455a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800455e:	ee07 3a90 	vmov	s15, r3
 8004562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004566:	ed97 6a03 	vldr	s12, [r7, #12]
 800456a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80046c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800456e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004576:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800457a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800457e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004582:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004586:	e043      	b.n	8004610 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	ee07 3a90 	vmov	s15, r3
 800458e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004592:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80046d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800459a:	4b48      	ldr	r3, [pc, #288]	@ (80046bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800459c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045a2:	ee07 3a90 	vmov	s15, r3
 80045a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80045ae:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80046c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80045b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045ca:	e021      	b.n	8004610 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	ee07 3a90 	vmov	s15, r3
 80045d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045d6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80046cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80045da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045de:	4b37      	ldr	r3, [pc, #220]	@ (80046bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045e6:	ee07 3a90 	vmov	s15, r3
 80045ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80045f2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80046c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80045f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800460a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800460e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004610:	4b2a      	ldr	r3, [pc, #168]	@ (80046bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004614:	0a5b      	lsrs	r3, r3, #9
 8004616:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800461a:	ee07 3a90 	vmov	s15, r3
 800461e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004622:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004626:	ee37 7a87 	vadd.f32	s14, s15, s14
 800462a:	edd7 6a07 	vldr	s13, [r7, #28]
 800462e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004632:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004636:	ee17 2a90 	vmov	r2, s15
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800463e:	4b1f      	ldr	r3, [pc, #124]	@ (80046bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004642:	0c1b      	lsrs	r3, r3, #16
 8004644:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004648:	ee07 3a90 	vmov	s15, r3
 800464c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004650:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004654:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004658:	edd7 6a07 	vldr	s13, [r7, #28]
 800465c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004660:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004664:	ee17 2a90 	vmov	r2, s15
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800466c:	4b13      	ldr	r3, [pc, #76]	@ (80046bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800466e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004670:	0e1b      	lsrs	r3, r3, #24
 8004672:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004676:	ee07 3a90 	vmov	s15, r3
 800467a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800467e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004682:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004686:	edd7 6a07 	vldr	s13, [r7, #28]
 800468a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800468e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004692:	ee17 2a90 	vmov	r2, s15
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800469a:	e008      	b.n	80046ae <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	609a      	str	r2, [r3, #8]
}
 80046ae:	bf00      	nop
 80046b0:	3724      	adds	r7, #36	@ 0x24
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	58024400 	.word	0x58024400
 80046c0:	03d09000 	.word	0x03d09000
 80046c4:	46000000 	.word	0x46000000
 80046c8:	4c742400 	.word	0x4c742400
 80046cc:	4a742400 	.word	0x4a742400
 80046d0:	4bb71b00 	.word	0x4bb71b00

080046d4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046de:	2300      	movs	r3, #0
 80046e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80046e2:	4b53      	ldr	r3, [pc, #332]	@ (8004830 <RCCEx_PLL2_Config+0x15c>)
 80046e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046e6:	f003 0303 	and.w	r3, r3, #3
 80046ea:	2b03      	cmp	r3, #3
 80046ec:	d101      	bne.n	80046f2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e099      	b.n	8004826 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80046f2:	4b4f      	ldr	r3, [pc, #316]	@ (8004830 <RCCEx_PLL2_Config+0x15c>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a4e      	ldr	r2, [pc, #312]	@ (8004830 <RCCEx_PLL2_Config+0x15c>)
 80046f8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80046fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046fe:	f7fc ff31 	bl	8001564 <HAL_GetTick>
 8004702:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004704:	e008      	b.n	8004718 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004706:	f7fc ff2d 	bl	8001564 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	2b02      	cmp	r3, #2
 8004712:	d901      	bls.n	8004718 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e086      	b.n	8004826 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004718:	4b45      	ldr	r3, [pc, #276]	@ (8004830 <RCCEx_PLL2_Config+0x15c>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d1f0      	bne.n	8004706 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004724:	4b42      	ldr	r3, [pc, #264]	@ (8004830 <RCCEx_PLL2_Config+0x15c>)
 8004726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004728:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	031b      	lsls	r3, r3, #12
 8004732:	493f      	ldr	r1, [pc, #252]	@ (8004830 <RCCEx_PLL2_Config+0x15c>)
 8004734:	4313      	orrs	r3, r2
 8004736:	628b      	str	r3, [r1, #40]	@ 0x28
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	3b01      	subs	r3, #1
 800473e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	3b01      	subs	r3, #1
 8004748:	025b      	lsls	r3, r3, #9
 800474a:	b29b      	uxth	r3, r3
 800474c:	431a      	orrs	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	3b01      	subs	r3, #1
 8004754:	041b      	lsls	r3, r3, #16
 8004756:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800475a:	431a      	orrs	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	3b01      	subs	r3, #1
 8004762:	061b      	lsls	r3, r3, #24
 8004764:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004768:	4931      	ldr	r1, [pc, #196]	@ (8004830 <RCCEx_PLL2_Config+0x15c>)
 800476a:	4313      	orrs	r3, r2
 800476c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800476e:	4b30      	ldr	r3, [pc, #192]	@ (8004830 <RCCEx_PLL2_Config+0x15c>)
 8004770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004772:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	492d      	ldr	r1, [pc, #180]	@ (8004830 <RCCEx_PLL2_Config+0x15c>)
 800477c:	4313      	orrs	r3, r2
 800477e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004780:	4b2b      	ldr	r3, [pc, #172]	@ (8004830 <RCCEx_PLL2_Config+0x15c>)
 8004782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004784:	f023 0220 	bic.w	r2, r3, #32
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	4928      	ldr	r1, [pc, #160]	@ (8004830 <RCCEx_PLL2_Config+0x15c>)
 800478e:	4313      	orrs	r3, r2
 8004790:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004792:	4b27      	ldr	r3, [pc, #156]	@ (8004830 <RCCEx_PLL2_Config+0x15c>)
 8004794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004796:	4a26      	ldr	r2, [pc, #152]	@ (8004830 <RCCEx_PLL2_Config+0x15c>)
 8004798:	f023 0310 	bic.w	r3, r3, #16
 800479c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800479e:	4b24      	ldr	r3, [pc, #144]	@ (8004830 <RCCEx_PLL2_Config+0x15c>)
 80047a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80047a2:	4b24      	ldr	r3, [pc, #144]	@ (8004834 <RCCEx_PLL2_Config+0x160>)
 80047a4:	4013      	ands	r3, r2
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	69d2      	ldr	r2, [r2, #28]
 80047aa:	00d2      	lsls	r2, r2, #3
 80047ac:	4920      	ldr	r1, [pc, #128]	@ (8004830 <RCCEx_PLL2_Config+0x15c>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80047b2:	4b1f      	ldr	r3, [pc, #124]	@ (8004830 <RCCEx_PLL2_Config+0x15c>)
 80047b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047b6:	4a1e      	ldr	r2, [pc, #120]	@ (8004830 <RCCEx_PLL2_Config+0x15c>)
 80047b8:	f043 0310 	orr.w	r3, r3, #16
 80047bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d106      	bne.n	80047d2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80047c4:	4b1a      	ldr	r3, [pc, #104]	@ (8004830 <RCCEx_PLL2_Config+0x15c>)
 80047c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c8:	4a19      	ldr	r2, [pc, #100]	@ (8004830 <RCCEx_PLL2_Config+0x15c>)
 80047ca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80047ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80047d0:	e00f      	b.n	80047f2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d106      	bne.n	80047e6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80047d8:	4b15      	ldr	r3, [pc, #84]	@ (8004830 <RCCEx_PLL2_Config+0x15c>)
 80047da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047dc:	4a14      	ldr	r2, [pc, #80]	@ (8004830 <RCCEx_PLL2_Config+0x15c>)
 80047de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80047e4:	e005      	b.n	80047f2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80047e6:	4b12      	ldr	r3, [pc, #72]	@ (8004830 <RCCEx_PLL2_Config+0x15c>)
 80047e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ea:	4a11      	ldr	r2, [pc, #68]	@ (8004830 <RCCEx_PLL2_Config+0x15c>)
 80047ec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80047f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80047f2:	4b0f      	ldr	r3, [pc, #60]	@ (8004830 <RCCEx_PLL2_Config+0x15c>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a0e      	ldr	r2, [pc, #56]	@ (8004830 <RCCEx_PLL2_Config+0x15c>)
 80047f8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80047fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047fe:	f7fc feb1 	bl	8001564 <HAL_GetTick>
 8004802:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004804:	e008      	b.n	8004818 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004806:	f7fc fead 	bl	8001564 <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	2b02      	cmp	r3, #2
 8004812:	d901      	bls.n	8004818 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	e006      	b.n	8004826 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004818:	4b05      	ldr	r3, [pc, #20]	@ (8004830 <RCCEx_PLL2_Config+0x15c>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d0f0      	beq.n	8004806 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004824:	7bfb      	ldrb	r3, [r7, #15]
}
 8004826:	4618      	mov	r0, r3
 8004828:	3710      	adds	r7, #16
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	58024400 	.word	0x58024400
 8004834:	ffff0007 	.word	0xffff0007

08004838 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004842:	2300      	movs	r3, #0
 8004844:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004846:	4b53      	ldr	r3, [pc, #332]	@ (8004994 <RCCEx_PLL3_Config+0x15c>)
 8004848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800484a:	f003 0303 	and.w	r3, r3, #3
 800484e:	2b03      	cmp	r3, #3
 8004850:	d101      	bne.n	8004856 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e099      	b.n	800498a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004856:	4b4f      	ldr	r3, [pc, #316]	@ (8004994 <RCCEx_PLL3_Config+0x15c>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a4e      	ldr	r2, [pc, #312]	@ (8004994 <RCCEx_PLL3_Config+0x15c>)
 800485c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004860:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004862:	f7fc fe7f 	bl	8001564 <HAL_GetTick>
 8004866:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004868:	e008      	b.n	800487c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800486a:	f7fc fe7b 	bl	8001564 <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	2b02      	cmp	r3, #2
 8004876:	d901      	bls.n	800487c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e086      	b.n	800498a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800487c:	4b45      	ldr	r3, [pc, #276]	@ (8004994 <RCCEx_PLL3_Config+0x15c>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d1f0      	bne.n	800486a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004888:	4b42      	ldr	r3, [pc, #264]	@ (8004994 <RCCEx_PLL3_Config+0x15c>)
 800488a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800488c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	051b      	lsls	r3, r3, #20
 8004896:	493f      	ldr	r1, [pc, #252]	@ (8004994 <RCCEx_PLL3_Config+0x15c>)
 8004898:	4313      	orrs	r3, r2
 800489a:	628b      	str	r3, [r1, #40]	@ 0x28
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	3b01      	subs	r3, #1
 80048a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	3b01      	subs	r3, #1
 80048ac:	025b      	lsls	r3, r3, #9
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	431a      	orrs	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	3b01      	subs	r3, #1
 80048b8:	041b      	lsls	r3, r3, #16
 80048ba:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80048be:	431a      	orrs	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	3b01      	subs	r3, #1
 80048c6:	061b      	lsls	r3, r3, #24
 80048c8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80048cc:	4931      	ldr	r1, [pc, #196]	@ (8004994 <RCCEx_PLL3_Config+0x15c>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80048d2:	4b30      	ldr	r3, [pc, #192]	@ (8004994 <RCCEx_PLL3_Config+0x15c>)
 80048d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048d6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	492d      	ldr	r1, [pc, #180]	@ (8004994 <RCCEx_PLL3_Config+0x15c>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80048e4:	4b2b      	ldr	r3, [pc, #172]	@ (8004994 <RCCEx_PLL3_Config+0x15c>)
 80048e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	4928      	ldr	r1, [pc, #160]	@ (8004994 <RCCEx_PLL3_Config+0x15c>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80048f6:	4b27      	ldr	r3, [pc, #156]	@ (8004994 <RCCEx_PLL3_Config+0x15c>)
 80048f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048fa:	4a26      	ldr	r2, [pc, #152]	@ (8004994 <RCCEx_PLL3_Config+0x15c>)
 80048fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004900:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004902:	4b24      	ldr	r3, [pc, #144]	@ (8004994 <RCCEx_PLL3_Config+0x15c>)
 8004904:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004906:	4b24      	ldr	r3, [pc, #144]	@ (8004998 <RCCEx_PLL3_Config+0x160>)
 8004908:	4013      	ands	r3, r2
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	69d2      	ldr	r2, [r2, #28]
 800490e:	00d2      	lsls	r2, r2, #3
 8004910:	4920      	ldr	r1, [pc, #128]	@ (8004994 <RCCEx_PLL3_Config+0x15c>)
 8004912:	4313      	orrs	r3, r2
 8004914:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004916:	4b1f      	ldr	r3, [pc, #124]	@ (8004994 <RCCEx_PLL3_Config+0x15c>)
 8004918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800491a:	4a1e      	ldr	r2, [pc, #120]	@ (8004994 <RCCEx_PLL3_Config+0x15c>)
 800491c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004920:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d106      	bne.n	8004936 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004928:	4b1a      	ldr	r3, [pc, #104]	@ (8004994 <RCCEx_PLL3_Config+0x15c>)
 800492a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800492c:	4a19      	ldr	r2, [pc, #100]	@ (8004994 <RCCEx_PLL3_Config+0x15c>)
 800492e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004932:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004934:	e00f      	b.n	8004956 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d106      	bne.n	800494a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800493c:	4b15      	ldr	r3, [pc, #84]	@ (8004994 <RCCEx_PLL3_Config+0x15c>)
 800493e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004940:	4a14      	ldr	r2, [pc, #80]	@ (8004994 <RCCEx_PLL3_Config+0x15c>)
 8004942:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004946:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004948:	e005      	b.n	8004956 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800494a:	4b12      	ldr	r3, [pc, #72]	@ (8004994 <RCCEx_PLL3_Config+0x15c>)
 800494c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800494e:	4a11      	ldr	r2, [pc, #68]	@ (8004994 <RCCEx_PLL3_Config+0x15c>)
 8004950:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004954:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004956:	4b0f      	ldr	r3, [pc, #60]	@ (8004994 <RCCEx_PLL3_Config+0x15c>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a0e      	ldr	r2, [pc, #56]	@ (8004994 <RCCEx_PLL3_Config+0x15c>)
 800495c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004960:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004962:	f7fc fdff 	bl	8001564 <HAL_GetTick>
 8004966:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004968:	e008      	b.n	800497c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800496a:	f7fc fdfb 	bl	8001564 <HAL_GetTick>
 800496e:	4602      	mov	r2, r0
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	2b02      	cmp	r3, #2
 8004976:	d901      	bls.n	800497c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	e006      	b.n	800498a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800497c:	4b05      	ldr	r3, [pc, #20]	@ (8004994 <RCCEx_PLL3_Config+0x15c>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d0f0      	beq.n	800496a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004988:	7bfb      	ldrb	r3, [r7, #15]
}
 800498a:	4618      	mov	r0, r3
 800498c:	3710      	adds	r7, #16
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	58024400 	.word	0x58024400
 8004998:	ffff0007 	.word	0xffff0007

0800499c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d101      	bne.n	80049ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e049      	b.n	8004a42 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d106      	bne.n	80049c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 f841 	bl	8004a4a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2202      	movs	r2, #2
 80049cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	3304      	adds	r3, #4
 80049d8:	4619      	mov	r1, r3
 80049da:	4610      	mov	r0, r2
 80049dc:	f000 f9e8 	bl	8004db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3708      	adds	r7, #8
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}

08004a4a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	b083      	sub	sp, #12
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004a52:	bf00      	nop
 8004a54:	370c      	adds	r7, #12
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
	...

08004a60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d001      	beq.n	8004a78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e054      	b.n	8004b22 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2202      	movs	r2, #2
 8004a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68da      	ldr	r2, [r3, #12]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f042 0201 	orr.w	r2, r2, #1
 8004a8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a26      	ldr	r2, [pc, #152]	@ (8004b30 <HAL_TIM_Base_Start_IT+0xd0>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d022      	beq.n	8004ae0 <HAL_TIM_Base_Start_IT+0x80>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aa2:	d01d      	beq.n	8004ae0 <HAL_TIM_Base_Start_IT+0x80>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a22      	ldr	r2, [pc, #136]	@ (8004b34 <HAL_TIM_Base_Start_IT+0xd4>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d018      	beq.n	8004ae0 <HAL_TIM_Base_Start_IT+0x80>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a21      	ldr	r2, [pc, #132]	@ (8004b38 <HAL_TIM_Base_Start_IT+0xd8>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d013      	beq.n	8004ae0 <HAL_TIM_Base_Start_IT+0x80>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a1f      	ldr	r2, [pc, #124]	@ (8004b3c <HAL_TIM_Base_Start_IT+0xdc>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d00e      	beq.n	8004ae0 <HAL_TIM_Base_Start_IT+0x80>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a1e      	ldr	r2, [pc, #120]	@ (8004b40 <HAL_TIM_Base_Start_IT+0xe0>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d009      	beq.n	8004ae0 <HAL_TIM_Base_Start_IT+0x80>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a1c      	ldr	r2, [pc, #112]	@ (8004b44 <HAL_TIM_Base_Start_IT+0xe4>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d004      	beq.n	8004ae0 <HAL_TIM_Base_Start_IT+0x80>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a1b      	ldr	r2, [pc, #108]	@ (8004b48 <HAL_TIM_Base_Start_IT+0xe8>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d115      	bne.n	8004b0c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	689a      	ldr	r2, [r3, #8]
 8004ae6:	4b19      	ldr	r3, [pc, #100]	@ (8004b4c <HAL_TIM_Base_Start_IT+0xec>)
 8004ae8:	4013      	ands	r3, r2
 8004aea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2b06      	cmp	r3, #6
 8004af0:	d015      	beq.n	8004b1e <HAL_TIM_Base_Start_IT+0xbe>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004af8:	d011      	beq.n	8004b1e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f042 0201 	orr.w	r2, r2, #1
 8004b08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b0a:	e008      	b.n	8004b1e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f042 0201 	orr.w	r2, r2, #1
 8004b1a:	601a      	str	r2, [r3, #0]
 8004b1c:	e000      	b.n	8004b20 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b1e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3714      	adds	r7, #20
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	40010000 	.word	0x40010000
 8004b34:	40000400 	.word	0x40000400
 8004b38:	40000800 	.word	0x40000800
 8004b3c:	40000c00 	.word	0x40000c00
 8004b40:	40010400 	.word	0x40010400
 8004b44:	40001800 	.word	0x40001800
 8004b48:	40014000 	.word	0x40014000
 8004b4c:	00010007 	.word	0x00010007

08004b50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	f003 0302 	and.w	r3, r3, #2
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d020      	beq.n	8004bb4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f003 0302 	and.w	r3, r3, #2
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d01b      	beq.n	8004bb4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f06f 0202 	mvn.w	r2, #2
 8004b84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	f003 0303 	and.w	r3, r3, #3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d003      	beq.n	8004ba2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 f8e9 	bl	8004d72 <HAL_TIM_IC_CaptureCallback>
 8004ba0:	e005      	b.n	8004bae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 f8db 	bl	8004d5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f000 f8ec 	bl	8004d86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	f003 0304 	and.w	r3, r3, #4
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d020      	beq.n	8004c00 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f003 0304 	and.w	r3, r3, #4
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d01b      	beq.n	8004c00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f06f 0204 	mvn.w	r2, #4
 8004bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2202      	movs	r2, #2
 8004bd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d003      	beq.n	8004bee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 f8c3 	bl	8004d72 <HAL_TIM_IC_CaptureCallback>
 8004bec:	e005      	b.n	8004bfa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f8b5 	bl	8004d5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 f8c6 	bl	8004d86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	f003 0308 	and.w	r3, r3, #8
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d020      	beq.n	8004c4c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f003 0308 	and.w	r3, r3, #8
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d01b      	beq.n	8004c4c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f06f 0208 	mvn.w	r2, #8
 8004c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2204      	movs	r2, #4
 8004c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	69db      	ldr	r3, [r3, #28]
 8004c2a:	f003 0303 	and.w	r3, r3, #3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d003      	beq.n	8004c3a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 f89d 	bl	8004d72 <HAL_TIM_IC_CaptureCallback>
 8004c38:	e005      	b.n	8004c46 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 f88f 	bl	8004d5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 f8a0 	bl	8004d86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	f003 0310 	and.w	r3, r3, #16
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d020      	beq.n	8004c98 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f003 0310 	and.w	r3, r3, #16
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d01b      	beq.n	8004c98 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f06f 0210 	mvn.w	r2, #16
 8004c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2208      	movs	r2, #8
 8004c6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	69db      	ldr	r3, [r3, #28]
 8004c76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d003      	beq.n	8004c86 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 f877 	bl	8004d72 <HAL_TIM_IC_CaptureCallback>
 8004c84:	e005      	b.n	8004c92 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f869 	bl	8004d5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f000 f87a 	bl	8004d86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00c      	beq.n	8004cbc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f003 0301 	and.w	r3, r3, #1
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d007      	beq.n	8004cbc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f06f 0201 	mvn.w	r2, #1
 8004cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f7fc f896 	bl	8000de8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d104      	bne.n	8004cd0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00c      	beq.n	8004cea <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d007      	beq.n	8004cea <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004ce2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 f913 	bl	8004f10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d00c      	beq.n	8004d0e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d007      	beq.n	8004d0e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004d06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 f90b 	bl	8004f24 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d00c      	beq.n	8004d32 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d007      	beq.n	8004d32 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004d2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 f834 	bl	8004d9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	f003 0320 	and.w	r3, r3, #32
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00c      	beq.n	8004d56 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f003 0320 	and.w	r3, r3, #32
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d007      	beq.n	8004d56 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f06f 0220 	mvn.w	r2, #32
 8004d4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 f8d3 	bl	8004efc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d56:	bf00      	nop
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d5e:	b480      	push	{r7}
 8004d60:	b083      	sub	sp, #12
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d66:	bf00      	nop
 8004d68:	370c      	adds	r7, #12
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr

08004d72 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d72:	b480      	push	{r7}
 8004d74:	b083      	sub	sp, #12
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d7a:	bf00      	nop
 8004d7c:	370c      	adds	r7, #12
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr

08004d86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d86:	b480      	push	{r7}
 8004d88:	b083      	sub	sp, #12
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d8e:	bf00      	nop
 8004d90:	370c      	adds	r7, #12
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr

08004d9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b083      	sub	sp, #12
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004da2:	bf00      	nop
 8004da4:	370c      	adds	r7, #12
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
	...

08004db0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a46      	ldr	r2, [pc, #280]	@ (8004edc <TIM_Base_SetConfig+0x12c>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d013      	beq.n	8004df0 <TIM_Base_SetConfig+0x40>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dce:	d00f      	beq.n	8004df0 <TIM_Base_SetConfig+0x40>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a43      	ldr	r2, [pc, #268]	@ (8004ee0 <TIM_Base_SetConfig+0x130>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d00b      	beq.n	8004df0 <TIM_Base_SetConfig+0x40>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a42      	ldr	r2, [pc, #264]	@ (8004ee4 <TIM_Base_SetConfig+0x134>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d007      	beq.n	8004df0 <TIM_Base_SetConfig+0x40>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a41      	ldr	r2, [pc, #260]	@ (8004ee8 <TIM_Base_SetConfig+0x138>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d003      	beq.n	8004df0 <TIM_Base_SetConfig+0x40>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a40      	ldr	r2, [pc, #256]	@ (8004eec <TIM_Base_SetConfig+0x13c>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d108      	bne.n	8004e02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004df6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	68fa      	ldr	r2, [r7, #12]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a35      	ldr	r2, [pc, #212]	@ (8004edc <TIM_Base_SetConfig+0x12c>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d01f      	beq.n	8004e4a <TIM_Base_SetConfig+0x9a>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e10:	d01b      	beq.n	8004e4a <TIM_Base_SetConfig+0x9a>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a32      	ldr	r2, [pc, #200]	@ (8004ee0 <TIM_Base_SetConfig+0x130>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d017      	beq.n	8004e4a <TIM_Base_SetConfig+0x9a>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a31      	ldr	r2, [pc, #196]	@ (8004ee4 <TIM_Base_SetConfig+0x134>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d013      	beq.n	8004e4a <TIM_Base_SetConfig+0x9a>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a30      	ldr	r2, [pc, #192]	@ (8004ee8 <TIM_Base_SetConfig+0x138>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d00f      	beq.n	8004e4a <TIM_Base_SetConfig+0x9a>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a2f      	ldr	r2, [pc, #188]	@ (8004eec <TIM_Base_SetConfig+0x13c>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d00b      	beq.n	8004e4a <TIM_Base_SetConfig+0x9a>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a2e      	ldr	r2, [pc, #184]	@ (8004ef0 <TIM_Base_SetConfig+0x140>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d007      	beq.n	8004e4a <TIM_Base_SetConfig+0x9a>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a2d      	ldr	r2, [pc, #180]	@ (8004ef4 <TIM_Base_SetConfig+0x144>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d003      	beq.n	8004e4a <TIM_Base_SetConfig+0x9a>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a2c      	ldr	r2, [pc, #176]	@ (8004ef8 <TIM_Base_SetConfig+0x148>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d108      	bne.n	8004e5c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	689a      	ldr	r2, [r3, #8]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a16      	ldr	r2, [pc, #88]	@ (8004edc <TIM_Base_SetConfig+0x12c>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d00f      	beq.n	8004ea8 <TIM_Base_SetConfig+0xf8>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a18      	ldr	r2, [pc, #96]	@ (8004eec <TIM_Base_SetConfig+0x13c>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d00b      	beq.n	8004ea8 <TIM_Base_SetConfig+0xf8>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a17      	ldr	r2, [pc, #92]	@ (8004ef0 <TIM_Base_SetConfig+0x140>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d007      	beq.n	8004ea8 <TIM_Base_SetConfig+0xf8>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a16      	ldr	r2, [pc, #88]	@ (8004ef4 <TIM_Base_SetConfig+0x144>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d003      	beq.n	8004ea8 <TIM_Base_SetConfig+0xf8>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a15      	ldr	r2, [pc, #84]	@ (8004ef8 <TIM_Base_SetConfig+0x148>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d103      	bne.n	8004eb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	691a      	ldr	r2, [r3, #16]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d105      	bne.n	8004ece <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	f023 0201 	bic.w	r2, r3, #1
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	611a      	str	r2, [r3, #16]
  }
}
 8004ece:	bf00      	nop
 8004ed0:	3714      	adds	r7, #20
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	40010000 	.word	0x40010000
 8004ee0:	40000400 	.word	0x40000400
 8004ee4:	40000800 	.word	0x40000800
 8004ee8:	40000c00 	.word	0x40000c00
 8004eec:	40010400 	.word	0x40010400
 8004ef0:	40014000 	.word	0x40014000
 8004ef4:	40014400 	.word	0x40014400
 8004ef8:	40014800 	.word	0x40014800

08004efc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f04:	bf00      	nop
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f18:	bf00      	nop
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d101      	bne.n	8004f4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e042      	b.n	8004fd0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d106      	bne.n	8004f62 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f7fc fa1d 	bl	800139c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2224      	movs	r2, #36	@ 0x24
 8004f66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f022 0201 	bic.w	r2, r2, #1
 8004f78:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d002      	beq.n	8004f88 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 ff22 	bl	8005dcc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 f8b3 	bl	80050f4 <UART_SetConfig>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d101      	bne.n	8004f98 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e01b      	b.n	8004fd0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	685a      	ldr	r2, [r3, #4]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004fa6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	689a      	ldr	r2, [r3, #8]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004fb6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f042 0201 	orr.w	r2, r2, #1
 8004fc6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 ffa1 	bl	8005f10 <UART_CheckIdleState>
 8004fce:	4603      	mov	r3, r0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3708      	adds	r7, #8
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b08a      	sub	sp, #40	@ 0x28
 8004fdc:	af02      	add	r7, sp, #8
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	603b      	str	r3, [r7, #0]
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fee:	2b20      	cmp	r3, #32
 8004ff0:	d17b      	bne.n	80050ea <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d002      	beq.n	8004ffe <HAL_UART_Transmit+0x26>
 8004ff8:	88fb      	ldrh	r3, [r7, #6]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d101      	bne.n	8005002 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e074      	b.n	80050ec <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2200      	movs	r2, #0
 8005006:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2221      	movs	r2, #33	@ 0x21
 800500e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005012:	f7fc faa7 	bl	8001564 <HAL_GetTick>
 8005016:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	88fa      	ldrh	r2, [r7, #6]
 800501c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	88fa      	ldrh	r2, [r7, #6]
 8005024:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005030:	d108      	bne.n	8005044 <HAL_UART_Transmit+0x6c>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d104      	bne.n	8005044 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800503a:	2300      	movs	r3, #0
 800503c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	61bb      	str	r3, [r7, #24]
 8005042:	e003      	b.n	800504c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005048:	2300      	movs	r3, #0
 800504a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800504c:	e030      	b.n	80050b0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	9300      	str	r3, [sp, #0]
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	2200      	movs	r2, #0
 8005056:	2180      	movs	r1, #128	@ 0x80
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	f001 f803 	bl	8006064 <UART_WaitOnFlagUntilTimeout>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d005      	beq.n	8005070 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2220      	movs	r2, #32
 8005068:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e03d      	b.n	80050ec <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d10b      	bne.n	800508e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	881b      	ldrh	r3, [r3, #0]
 800507a:	461a      	mov	r2, r3
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005084:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	3302      	adds	r3, #2
 800508a:	61bb      	str	r3, [r7, #24]
 800508c:	e007      	b.n	800509e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	781a      	ldrb	r2, [r3, #0]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	3301      	adds	r3, #1
 800509c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	3b01      	subs	r3, #1
 80050a8:	b29a      	uxth	r2, r3
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d1c8      	bne.n	800504e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	9300      	str	r3, [sp, #0]
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	2200      	movs	r2, #0
 80050c4:	2140      	movs	r1, #64	@ 0x40
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	f000 ffcc 	bl	8006064 <UART_WaitOnFlagUntilTimeout>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d005      	beq.n	80050de <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2220      	movs	r2, #32
 80050d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e006      	b.n	80050ec <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2220      	movs	r2, #32
 80050e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80050e6:	2300      	movs	r3, #0
 80050e8:	e000      	b.n	80050ec <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80050ea:	2302      	movs	r3, #2
  }
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3720      	adds	r7, #32
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050f8:	b092      	sub	sp, #72	@ 0x48
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80050fe:	2300      	movs	r3, #0
 8005100:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	689a      	ldr	r2, [r3, #8]
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	431a      	orrs	r2, r3
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	431a      	orrs	r2, r3
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	69db      	ldr	r3, [r3, #28]
 8005118:	4313      	orrs	r3, r2
 800511a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	4bbe      	ldr	r3, [pc, #760]	@ (800541c <UART_SetConfig+0x328>)
 8005124:	4013      	ands	r3, r2
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	6812      	ldr	r2, [r2, #0]
 800512a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800512c:	430b      	orrs	r3, r1
 800512e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	68da      	ldr	r2, [r3, #12]
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	430a      	orrs	r2, r1
 8005144:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4ab3      	ldr	r2, [pc, #716]	@ (8005420 <UART_SetConfig+0x32c>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d004      	beq.n	8005160 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	6a1b      	ldr	r3, [r3, #32]
 800515a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800515c:	4313      	orrs	r3, r2
 800515e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	689a      	ldr	r2, [r3, #8]
 8005166:	4baf      	ldr	r3, [pc, #700]	@ (8005424 <UART_SetConfig+0x330>)
 8005168:	4013      	ands	r3, r2
 800516a:	697a      	ldr	r2, [r7, #20]
 800516c:	6812      	ldr	r2, [r2, #0]
 800516e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005170:	430b      	orrs	r3, r1
 8005172:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800517a:	f023 010f 	bic.w	r1, r3, #15
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	430a      	orrs	r2, r1
 8005188:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4aa6      	ldr	r2, [pc, #664]	@ (8005428 <UART_SetConfig+0x334>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d177      	bne.n	8005284 <UART_SetConfig+0x190>
 8005194:	4ba5      	ldr	r3, [pc, #660]	@ (800542c <UART_SetConfig+0x338>)
 8005196:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005198:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800519c:	2b28      	cmp	r3, #40	@ 0x28
 800519e:	d86d      	bhi.n	800527c <UART_SetConfig+0x188>
 80051a0:	a201      	add	r2, pc, #4	@ (adr r2, 80051a8 <UART_SetConfig+0xb4>)
 80051a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a6:	bf00      	nop
 80051a8:	0800524d 	.word	0x0800524d
 80051ac:	0800527d 	.word	0x0800527d
 80051b0:	0800527d 	.word	0x0800527d
 80051b4:	0800527d 	.word	0x0800527d
 80051b8:	0800527d 	.word	0x0800527d
 80051bc:	0800527d 	.word	0x0800527d
 80051c0:	0800527d 	.word	0x0800527d
 80051c4:	0800527d 	.word	0x0800527d
 80051c8:	08005255 	.word	0x08005255
 80051cc:	0800527d 	.word	0x0800527d
 80051d0:	0800527d 	.word	0x0800527d
 80051d4:	0800527d 	.word	0x0800527d
 80051d8:	0800527d 	.word	0x0800527d
 80051dc:	0800527d 	.word	0x0800527d
 80051e0:	0800527d 	.word	0x0800527d
 80051e4:	0800527d 	.word	0x0800527d
 80051e8:	0800525d 	.word	0x0800525d
 80051ec:	0800527d 	.word	0x0800527d
 80051f0:	0800527d 	.word	0x0800527d
 80051f4:	0800527d 	.word	0x0800527d
 80051f8:	0800527d 	.word	0x0800527d
 80051fc:	0800527d 	.word	0x0800527d
 8005200:	0800527d 	.word	0x0800527d
 8005204:	0800527d 	.word	0x0800527d
 8005208:	08005265 	.word	0x08005265
 800520c:	0800527d 	.word	0x0800527d
 8005210:	0800527d 	.word	0x0800527d
 8005214:	0800527d 	.word	0x0800527d
 8005218:	0800527d 	.word	0x0800527d
 800521c:	0800527d 	.word	0x0800527d
 8005220:	0800527d 	.word	0x0800527d
 8005224:	0800527d 	.word	0x0800527d
 8005228:	0800526d 	.word	0x0800526d
 800522c:	0800527d 	.word	0x0800527d
 8005230:	0800527d 	.word	0x0800527d
 8005234:	0800527d 	.word	0x0800527d
 8005238:	0800527d 	.word	0x0800527d
 800523c:	0800527d 	.word	0x0800527d
 8005240:	0800527d 	.word	0x0800527d
 8005244:	0800527d 	.word	0x0800527d
 8005248:	08005275 	.word	0x08005275
 800524c:	2301      	movs	r3, #1
 800524e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005252:	e326      	b.n	80058a2 <UART_SetConfig+0x7ae>
 8005254:	2304      	movs	r3, #4
 8005256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800525a:	e322      	b.n	80058a2 <UART_SetConfig+0x7ae>
 800525c:	2308      	movs	r3, #8
 800525e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005262:	e31e      	b.n	80058a2 <UART_SetConfig+0x7ae>
 8005264:	2310      	movs	r3, #16
 8005266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800526a:	e31a      	b.n	80058a2 <UART_SetConfig+0x7ae>
 800526c:	2320      	movs	r3, #32
 800526e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005272:	e316      	b.n	80058a2 <UART_SetConfig+0x7ae>
 8005274:	2340      	movs	r3, #64	@ 0x40
 8005276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800527a:	e312      	b.n	80058a2 <UART_SetConfig+0x7ae>
 800527c:	2380      	movs	r3, #128	@ 0x80
 800527e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005282:	e30e      	b.n	80058a2 <UART_SetConfig+0x7ae>
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a69      	ldr	r2, [pc, #420]	@ (8005430 <UART_SetConfig+0x33c>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d130      	bne.n	80052f0 <UART_SetConfig+0x1fc>
 800528e:	4b67      	ldr	r3, [pc, #412]	@ (800542c <UART_SetConfig+0x338>)
 8005290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005292:	f003 0307 	and.w	r3, r3, #7
 8005296:	2b05      	cmp	r3, #5
 8005298:	d826      	bhi.n	80052e8 <UART_SetConfig+0x1f4>
 800529a:	a201      	add	r2, pc, #4	@ (adr r2, 80052a0 <UART_SetConfig+0x1ac>)
 800529c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a0:	080052b9 	.word	0x080052b9
 80052a4:	080052c1 	.word	0x080052c1
 80052a8:	080052c9 	.word	0x080052c9
 80052ac:	080052d1 	.word	0x080052d1
 80052b0:	080052d9 	.word	0x080052d9
 80052b4:	080052e1 	.word	0x080052e1
 80052b8:	2300      	movs	r3, #0
 80052ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052be:	e2f0      	b.n	80058a2 <UART_SetConfig+0x7ae>
 80052c0:	2304      	movs	r3, #4
 80052c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052c6:	e2ec      	b.n	80058a2 <UART_SetConfig+0x7ae>
 80052c8:	2308      	movs	r3, #8
 80052ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052ce:	e2e8      	b.n	80058a2 <UART_SetConfig+0x7ae>
 80052d0:	2310      	movs	r3, #16
 80052d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052d6:	e2e4      	b.n	80058a2 <UART_SetConfig+0x7ae>
 80052d8:	2320      	movs	r3, #32
 80052da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052de:	e2e0      	b.n	80058a2 <UART_SetConfig+0x7ae>
 80052e0:	2340      	movs	r3, #64	@ 0x40
 80052e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052e6:	e2dc      	b.n	80058a2 <UART_SetConfig+0x7ae>
 80052e8:	2380      	movs	r3, #128	@ 0x80
 80052ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052ee:	e2d8      	b.n	80058a2 <UART_SetConfig+0x7ae>
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a4f      	ldr	r2, [pc, #316]	@ (8005434 <UART_SetConfig+0x340>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d130      	bne.n	800535c <UART_SetConfig+0x268>
 80052fa:	4b4c      	ldr	r3, [pc, #304]	@ (800542c <UART_SetConfig+0x338>)
 80052fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052fe:	f003 0307 	and.w	r3, r3, #7
 8005302:	2b05      	cmp	r3, #5
 8005304:	d826      	bhi.n	8005354 <UART_SetConfig+0x260>
 8005306:	a201      	add	r2, pc, #4	@ (adr r2, 800530c <UART_SetConfig+0x218>)
 8005308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800530c:	08005325 	.word	0x08005325
 8005310:	0800532d 	.word	0x0800532d
 8005314:	08005335 	.word	0x08005335
 8005318:	0800533d 	.word	0x0800533d
 800531c:	08005345 	.word	0x08005345
 8005320:	0800534d 	.word	0x0800534d
 8005324:	2300      	movs	r3, #0
 8005326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800532a:	e2ba      	b.n	80058a2 <UART_SetConfig+0x7ae>
 800532c:	2304      	movs	r3, #4
 800532e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005332:	e2b6      	b.n	80058a2 <UART_SetConfig+0x7ae>
 8005334:	2308      	movs	r3, #8
 8005336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800533a:	e2b2      	b.n	80058a2 <UART_SetConfig+0x7ae>
 800533c:	2310      	movs	r3, #16
 800533e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005342:	e2ae      	b.n	80058a2 <UART_SetConfig+0x7ae>
 8005344:	2320      	movs	r3, #32
 8005346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800534a:	e2aa      	b.n	80058a2 <UART_SetConfig+0x7ae>
 800534c:	2340      	movs	r3, #64	@ 0x40
 800534e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005352:	e2a6      	b.n	80058a2 <UART_SetConfig+0x7ae>
 8005354:	2380      	movs	r3, #128	@ 0x80
 8005356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800535a:	e2a2      	b.n	80058a2 <UART_SetConfig+0x7ae>
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a35      	ldr	r2, [pc, #212]	@ (8005438 <UART_SetConfig+0x344>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d130      	bne.n	80053c8 <UART_SetConfig+0x2d4>
 8005366:	4b31      	ldr	r3, [pc, #196]	@ (800542c <UART_SetConfig+0x338>)
 8005368:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800536a:	f003 0307 	and.w	r3, r3, #7
 800536e:	2b05      	cmp	r3, #5
 8005370:	d826      	bhi.n	80053c0 <UART_SetConfig+0x2cc>
 8005372:	a201      	add	r2, pc, #4	@ (adr r2, 8005378 <UART_SetConfig+0x284>)
 8005374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005378:	08005391 	.word	0x08005391
 800537c:	08005399 	.word	0x08005399
 8005380:	080053a1 	.word	0x080053a1
 8005384:	080053a9 	.word	0x080053a9
 8005388:	080053b1 	.word	0x080053b1
 800538c:	080053b9 	.word	0x080053b9
 8005390:	2300      	movs	r3, #0
 8005392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005396:	e284      	b.n	80058a2 <UART_SetConfig+0x7ae>
 8005398:	2304      	movs	r3, #4
 800539a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800539e:	e280      	b.n	80058a2 <UART_SetConfig+0x7ae>
 80053a0:	2308      	movs	r3, #8
 80053a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053a6:	e27c      	b.n	80058a2 <UART_SetConfig+0x7ae>
 80053a8:	2310      	movs	r3, #16
 80053aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ae:	e278      	b.n	80058a2 <UART_SetConfig+0x7ae>
 80053b0:	2320      	movs	r3, #32
 80053b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053b6:	e274      	b.n	80058a2 <UART_SetConfig+0x7ae>
 80053b8:	2340      	movs	r3, #64	@ 0x40
 80053ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053be:	e270      	b.n	80058a2 <UART_SetConfig+0x7ae>
 80053c0:	2380      	movs	r3, #128	@ 0x80
 80053c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053c6:	e26c      	b.n	80058a2 <UART_SetConfig+0x7ae>
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a1b      	ldr	r2, [pc, #108]	@ (800543c <UART_SetConfig+0x348>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d142      	bne.n	8005458 <UART_SetConfig+0x364>
 80053d2:	4b16      	ldr	r3, [pc, #88]	@ (800542c <UART_SetConfig+0x338>)
 80053d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053d6:	f003 0307 	and.w	r3, r3, #7
 80053da:	2b05      	cmp	r3, #5
 80053dc:	d838      	bhi.n	8005450 <UART_SetConfig+0x35c>
 80053de:	a201      	add	r2, pc, #4	@ (adr r2, 80053e4 <UART_SetConfig+0x2f0>)
 80053e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e4:	080053fd 	.word	0x080053fd
 80053e8:	08005405 	.word	0x08005405
 80053ec:	0800540d 	.word	0x0800540d
 80053f0:	08005415 	.word	0x08005415
 80053f4:	08005441 	.word	0x08005441
 80053f8:	08005449 	.word	0x08005449
 80053fc:	2300      	movs	r3, #0
 80053fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005402:	e24e      	b.n	80058a2 <UART_SetConfig+0x7ae>
 8005404:	2304      	movs	r3, #4
 8005406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800540a:	e24a      	b.n	80058a2 <UART_SetConfig+0x7ae>
 800540c:	2308      	movs	r3, #8
 800540e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005412:	e246      	b.n	80058a2 <UART_SetConfig+0x7ae>
 8005414:	2310      	movs	r3, #16
 8005416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800541a:	e242      	b.n	80058a2 <UART_SetConfig+0x7ae>
 800541c:	cfff69f3 	.word	0xcfff69f3
 8005420:	58000c00 	.word	0x58000c00
 8005424:	11fff4ff 	.word	0x11fff4ff
 8005428:	40011000 	.word	0x40011000
 800542c:	58024400 	.word	0x58024400
 8005430:	40004400 	.word	0x40004400
 8005434:	40004800 	.word	0x40004800
 8005438:	40004c00 	.word	0x40004c00
 800543c:	40005000 	.word	0x40005000
 8005440:	2320      	movs	r3, #32
 8005442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005446:	e22c      	b.n	80058a2 <UART_SetConfig+0x7ae>
 8005448:	2340      	movs	r3, #64	@ 0x40
 800544a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800544e:	e228      	b.n	80058a2 <UART_SetConfig+0x7ae>
 8005450:	2380      	movs	r3, #128	@ 0x80
 8005452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005456:	e224      	b.n	80058a2 <UART_SetConfig+0x7ae>
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4ab1      	ldr	r2, [pc, #708]	@ (8005724 <UART_SetConfig+0x630>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d176      	bne.n	8005550 <UART_SetConfig+0x45c>
 8005462:	4bb1      	ldr	r3, [pc, #708]	@ (8005728 <UART_SetConfig+0x634>)
 8005464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005466:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800546a:	2b28      	cmp	r3, #40	@ 0x28
 800546c:	d86c      	bhi.n	8005548 <UART_SetConfig+0x454>
 800546e:	a201      	add	r2, pc, #4	@ (adr r2, 8005474 <UART_SetConfig+0x380>)
 8005470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005474:	08005519 	.word	0x08005519
 8005478:	08005549 	.word	0x08005549
 800547c:	08005549 	.word	0x08005549
 8005480:	08005549 	.word	0x08005549
 8005484:	08005549 	.word	0x08005549
 8005488:	08005549 	.word	0x08005549
 800548c:	08005549 	.word	0x08005549
 8005490:	08005549 	.word	0x08005549
 8005494:	08005521 	.word	0x08005521
 8005498:	08005549 	.word	0x08005549
 800549c:	08005549 	.word	0x08005549
 80054a0:	08005549 	.word	0x08005549
 80054a4:	08005549 	.word	0x08005549
 80054a8:	08005549 	.word	0x08005549
 80054ac:	08005549 	.word	0x08005549
 80054b0:	08005549 	.word	0x08005549
 80054b4:	08005529 	.word	0x08005529
 80054b8:	08005549 	.word	0x08005549
 80054bc:	08005549 	.word	0x08005549
 80054c0:	08005549 	.word	0x08005549
 80054c4:	08005549 	.word	0x08005549
 80054c8:	08005549 	.word	0x08005549
 80054cc:	08005549 	.word	0x08005549
 80054d0:	08005549 	.word	0x08005549
 80054d4:	08005531 	.word	0x08005531
 80054d8:	08005549 	.word	0x08005549
 80054dc:	08005549 	.word	0x08005549
 80054e0:	08005549 	.word	0x08005549
 80054e4:	08005549 	.word	0x08005549
 80054e8:	08005549 	.word	0x08005549
 80054ec:	08005549 	.word	0x08005549
 80054f0:	08005549 	.word	0x08005549
 80054f4:	08005539 	.word	0x08005539
 80054f8:	08005549 	.word	0x08005549
 80054fc:	08005549 	.word	0x08005549
 8005500:	08005549 	.word	0x08005549
 8005504:	08005549 	.word	0x08005549
 8005508:	08005549 	.word	0x08005549
 800550c:	08005549 	.word	0x08005549
 8005510:	08005549 	.word	0x08005549
 8005514:	08005541 	.word	0x08005541
 8005518:	2301      	movs	r3, #1
 800551a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800551e:	e1c0      	b.n	80058a2 <UART_SetConfig+0x7ae>
 8005520:	2304      	movs	r3, #4
 8005522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005526:	e1bc      	b.n	80058a2 <UART_SetConfig+0x7ae>
 8005528:	2308      	movs	r3, #8
 800552a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800552e:	e1b8      	b.n	80058a2 <UART_SetConfig+0x7ae>
 8005530:	2310      	movs	r3, #16
 8005532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005536:	e1b4      	b.n	80058a2 <UART_SetConfig+0x7ae>
 8005538:	2320      	movs	r3, #32
 800553a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800553e:	e1b0      	b.n	80058a2 <UART_SetConfig+0x7ae>
 8005540:	2340      	movs	r3, #64	@ 0x40
 8005542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005546:	e1ac      	b.n	80058a2 <UART_SetConfig+0x7ae>
 8005548:	2380      	movs	r3, #128	@ 0x80
 800554a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800554e:	e1a8      	b.n	80058a2 <UART_SetConfig+0x7ae>
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a75      	ldr	r2, [pc, #468]	@ (800572c <UART_SetConfig+0x638>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d130      	bne.n	80055bc <UART_SetConfig+0x4c8>
 800555a:	4b73      	ldr	r3, [pc, #460]	@ (8005728 <UART_SetConfig+0x634>)
 800555c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800555e:	f003 0307 	and.w	r3, r3, #7
 8005562:	2b05      	cmp	r3, #5
 8005564:	d826      	bhi.n	80055b4 <UART_SetConfig+0x4c0>
 8005566:	a201      	add	r2, pc, #4	@ (adr r2, 800556c <UART_SetConfig+0x478>)
 8005568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800556c:	08005585 	.word	0x08005585
 8005570:	0800558d 	.word	0x0800558d
 8005574:	08005595 	.word	0x08005595
 8005578:	0800559d 	.word	0x0800559d
 800557c:	080055a5 	.word	0x080055a5
 8005580:	080055ad 	.word	0x080055ad
 8005584:	2300      	movs	r3, #0
 8005586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800558a:	e18a      	b.n	80058a2 <UART_SetConfig+0x7ae>
 800558c:	2304      	movs	r3, #4
 800558e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005592:	e186      	b.n	80058a2 <UART_SetConfig+0x7ae>
 8005594:	2308      	movs	r3, #8
 8005596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800559a:	e182      	b.n	80058a2 <UART_SetConfig+0x7ae>
 800559c:	2310      	movs	r3, #16
 800559e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055a2:	e17e      	b.n	80058a2 <UART_SetConfig+0x7ae>
 80055a4:	2320      	movs	r3, #32
 80055a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055aa:	e17a      	b.n	80058a2 <UART_SetConfig+0x7ae>
 80055ac:	2340      	movs	r3, #64	@ 0x40
 80055ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055b2:	e176      	b.n	80058a2 <UART_SetConfig+0x7ae>
 80055b4:	2380      	movs	r3, #128	@ 0x80
 80055b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055ba:	e172      	b.n	80058a2 <UART_SetConfig+0x7ae>
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a5b      	ldr	r2, [pc, #364]	@ (8005730 <UART_SetConfig+0x63c>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d130      	bne.n	8005628 <UART_SetConfig+0x534>
 80055c6:	4b58      	ldr	r3, [pc, #352]	@ (8005728 <UART_SetConfig+0x634>)
 80055c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055ca:	f003 0307 	and.w	r3, r3, #7
 80055ce:	2b05      	cmp	r3, #5
 80055d0:	d826      	bhi.n	8005620 <UART_SetConfig+0x52c>
 80055d2:	a201      	add	r2, pc, #4	@ (adr r2, 80055d8 <UART_SetConfig+0x4e4>)
 80055d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d8:	080055f1 	.word	0x080055f1
 80055dc:	080055f9 	.word	0x080055f9
 80055e0:	08005601 	.word	0x08005601
 80055e4:	08005609 	.word	0x08005609
 80055e8:	08005611 	.word	0x08005611
 80055ec:	08005619 	.word	0x08005619
 80055f0:	2300      	movs	r3, #0
 80055f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055f6:	e154      	b.n	80058a2 <UART_SetConfig+0x7ae>
 80055f8:	2304      	movs	r3, #4
 80055fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055fe:	e150      	b.n	80058a2 <UART_SetConfig+0x7ae>
 8005600:	2308      	movs	r3, #8
 8005602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005606:	e14c      	b.n	80058a2 <UART_SetConfig+0x7ae>
 8005608:	2310      	movs	r3, #16
 800560a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800560e:	e148      	b.n	80058a2 <UART_SetConfig+0x7ae>
 8005610:	2320      	movs	r3, #32
 8005612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005616:	e144      	b.n	80058a2 <UART_SetConfig+0x7ae>
 8005618:	2340      	movs	r3, #64	@ 0x40
 800561a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800561e:	e140      	b.n	80058a2 <UART_SetConfig+0x7ae>
 8005620:	2380      	movs	r3, #128	@ 0x80
 8005622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005626:	e13c      	b.n	80058a2 <UART_SetConfig+0x7ae>
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a41      	ldr	r2, [pc, #260]	@ (8005734 <UART_SetConfig+0x640>)
 800562e:	4293      	cmp	r3, r2
 8005630:	f040 8082 	bne.w	8005738 <UART_SetConfig+0x644>
 8005634:	4b3c      	ldr	r3, [pc, #240]	@ (8005728 <UART_SetConfig+0x634>)
 8005636:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005638:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800563c:	2b28      	cmp	r3, #40	@ 0x28
 800563e:	d86d      	bhi.n	800571c <UART_SetConfig+0x628>
 8005640:	a201      	add	r2, pc, #4	@ (adr r2, 8005648 <UART_SetConfig+0x554>)
 8005642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005646:	bf00      	nop
 8005648:	080056ed 	.word	0x080056ed
 800564c:	0800571d 	.word	0x0800571d
 8005650:	0800571d 	.word	0x0800571d
 8005654:	0800571d 	.word	0x0800571d
 8005658:	0800571d 	.word	0x0800571d
 800565c:	0800571d 	.word	0x0800571d
 8005660:	0800571d 	.word	0x0800571d
 8005664:	0800571d 	.word	0x0800571d
 8005668:	080056f5 	.word	0x080056f5
 800566c:	0800571d 	.word	0x0800571d
 8005670:	0800571d 	.word	0x0800571d
 8005674:	0800571d 	.word	0x0800571d
 8005678:	0800571d 	.word	0x0800571d
 800567c:	0800571d 	.word	0x0800571d
 8005680:	0800571d 	.word	0x0800571d
 8005684:	0800571d 	.word	0x0800571d
 8005688:	080056fd 	.word	0x080056fd
 800568c:	0800571d 	.word	0x0800571d
 8005690:	0800571d 	.word	0x0800571d
 8005694:	0800571d 	.word	0x0800571d
 8005698:	0800571d 	.word	0x0800571d
 800569c:	0800571d 	.word	0x0800571d
 80056a0:	0800571d 	.word	0x0800571d
 80056a4:	0800571d 	.word	0x0800571d
 80056a8:	08005705 	.word	0x08005705
 80056ac:	0800571d 	.word	0x0800571d
 80056b0:	0800571d 	.word	0x0800571d
 80056b4:	0800571d 	.word	0x0800571d
 80056b8:	0800571d 	.word	0x0800571d
 80056bc:	0800571d 	.word	0x0800571d
 80056c0:	0800571d 	.word	0x0800571d
 80056c4:	0800571d 	.word	0x0800571d
 80056c8:	0800570d 	.word	0x0800570d
 80056cc:	0800571d 	.word	0x0800571d
 80056d0:	0800571d 	.word	0x0800571d
 80056d4:	0800571d 	.word	0x0800571d
 80056d8:	0800571d 	.word	0x0800571d
 80056dc:	0800571d 	.word	0x0800571d
 80056e0:	0800571d 	.word	0x0800571d
 80056e4:	0800571d 	.word	0x0800571d
 80056e8:	08005715 	.word	0x08005715
 80056ec:	2301      	movs	r3, #1
 80056ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056f2:	e0d6      	b.n	80058a2 <UART_SetConfig+0x7ae>
 80056f4:	2304      	movs	r3, #4
 80056f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056fa:	e0d2      	b.n	80058a2 <UART_SetConfig+0x7ae>
 80056fc:	2308      	movs	r3, #8
 80056fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005702:	e0ce      	b.n	80058a2 <UART_SetConfig+0x7ae>
 8005704:	2310      	movs	r3, #16
 8005706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800570a:	e0ca      	b.n	80058a2 <UART_SetConfig+0x7ae>
 800570c:	2320      	movs	r3, #32
 800570e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005712:	e0c6      	b.n	80058a2 <UART_SetConfig+0x7ae>
 8005714:	2340      	movs	r3, #64	@ 0x40
 8005716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800571a:	e0c2      	b.n	80058a2 <UART_SetConfig+0x7ae>
 800571c:	2380      	movs	r3, #128	@ 0x80
 800571e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005722:	e0be      	b.n	80058a2 <UART_SetConfig+0x7ae>
 8005724:	40011400 	.word	0x40011400
 8005728:	58024400 	.word	0x58024400
 800572c:	40007800 	.word	0x40007800
 8005730:	40007c00 	.word	0x40007c00
 8005734:	40011800 	.word	0x40011800
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4aad      	ldr	r2, [pc, #692]	@ (80059f4 <UART_SetConfig+0x900>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d176      	bne.n	8005830 <UART_SetConfig+0x73c>
 8005742:	4bad      	ldr	r3, [pc, #692]	@ (80059f8 <UART_SetConfig+0x904>)
 8005744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005746:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800574a:	2b28      	cmp	r3, #40	@ 0x28
 800574c:	d86c      	bhi.n	8005828 <UART_SetConfig+0x734>
 800574e:	a201      	add	r2, pc, #4	@ (adr r2, 8005754 <UART_SetConfig+0x660>)
 8005750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005754:	080057f9 	.word	0x080057f9
 8005758:	08005829 	.word	0x08005829
 800575c:	08005829 	.word	0x08005829
 8005760:	08005829 	.word	0x08005829
 8005764:	08005829 	.word	0x08005829
 8005768:	08005829 	.word	0x08005829
 800576c:	08005829 	.word	0x08005829
 8005770:	08005829 	.word	0x08005829
 8005774:	08005801 	.word	0x08005801
 8005778:	08005829 	.word	0x08005829
 800577c:	08005829 	.word	0x08005829
 8005780:	08005829 	.word	0x08005829
 8005784:	08005829 	.word	0x08005829
 8005788:	08005829 	.word	0x08005829
 800578c:	08005829 	.word	0x08005829
 8005790:	08005829 	.word	0x08005829
 8005794:	08005809 	.word	0x08005809
 8005798:	08005829 	.word	0x08005829
 800579c:	08005829 	.word	0x08005829
 80057a0:	08005829 	.word	0x08005829
 80057a4:	08005829 	.word	0x08005829
 80057a8:	08005829 	.word	0x08005829
 80057ac:	08005829 	.word	0x08005829
 80057b0:	08005829 	.word	0x08005829
 80057b4:	08005811 	.word	0x08005811
 80057b8:	08005829 	.word	0x08005829
 80057bc:	08005829 	.word	0x08005829
 80057c0:	08005829 	.word	0x08005829
 80057c4:	08005829 	.word	0x08005829
 80057c8:	08005829 	.word	0x08005829
 80057cc:	08005829 	.word	0x08005829
 80057d0:	08005829 	.word	0x08005829
 80057d4:	08005819 	.word	0x08005819
 80057d8:	08005829 	.word	0x08005829
 80057dc:	08005829 	.word	0x08005829
 80057e0:	08005829 	.word	0x08005829
 80057e4:	08005829 	.word	0x08005829
 80057e8:	08005829 	.word	0x08005829
 80057ec:	08005829 	.word	0x08005829
 80057f0:	08005829 	.word	0x08005829
 80057f4:	08005821 	.word	0x08005821
 80057f8:	2301      	movs	r3, #1
 80057fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057fe:	e050      	b.n	80058a2 <UART_SetConfig+0x7ae>
 8005800:	2304      	movs	r3, #4
 8005802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005806:	e04c      	b.n	80058a2 <UART_SetConfig+0x7ae>
 8005808:	2308      	movs	r3, #8
 800580a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800580e:	e048      	b.n	80058a2 <UART_SetConfig+0x7ae>
 8005810:	2310      	movs	r3, #16
 8005812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005816:	e044      	b.n	80058a2 <UART_SetConfig+0x7ae>
 8005818:	2320      	movs	r3, #32
 800581a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800581e:	e040      	b.n	80058a2 <UART_SetConfig+0x7ae>
 8005820:	2340      	movs	r3, #64	@ 0x40
 8005822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005826:	e03c      	b.n	80058a2 <UART_SetConfig+0x7ae>
 8005828:	2380      	movs	r3, #128	@ 0x80
 800582a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800582e:	e038      	b.n	80058a2 <UART_SetConfig+0x7ae>
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a71      	ldr	r2, [pc, #452]	@ (80059fc <UART_SetConfig+0x908>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d130      	bne.n	800589c <UART_SetConfig+0x7a8>
 800583a:	4b6f      	ldr	r3, [pc, #444]	@ (80059f8 <UART_SetConfig+0x904>)
 800583c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800583e:	f003 0307 	and.w	r3, r3, #7
 8005842:	2b05      	cmp	r3, #5
 8005844:	d826      	bhi.n	8005894 <UART_SetConfig+0x7a0>
 8005846:	a201      	add	r2, pc, #4	@ (adr r2, 800584c <UART_SetConfig+0x758>)
 8005848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800584c:	08005865 	.word	0x08005865
 8005850:	0800586d 	.word	0x0800586d
 8005854:	08005875 	.word	0x08005875
 8005858:	0800587d 	.word	0x0800587d
 800585c:	08005885 	.word	0x08005885
 8005860:	0800588d 	.word	0x0800588d
 8005864:	2302      	movs	r3, #2
 8005866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800586a:	e01a      	b.n	80058a2 <UART_SetConfig+0x7ae>
 800586c:	2304      	movs	r3, #4
 800586e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005872:	e016      	b.n	80058a2 <UART_SetConfig+0x7ae>
 8005874:	2308      	movs	r3, #8
 8005876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800587a:	e012      	b.n	80058a2 <UART_SetConfig+0x7ae>
 800587c:	2310      	movs	r3, #16
 800587e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005882:	e00e      	b.n	80058a2 <UART_SetConfig+0x7ae>
 8005884:	2320      	movs	r3, #32
 8005886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800588a:	e00a      	b.n	80058a2 <UART_SetConfig+0x7ae>
 800588c:	2340      	movs	r3, #64	@ 0x40
 800588e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005892:	e006      	b.n	80058a2 <UART_SetConfig+0x7ae>
 8005894:	2380      	movs	r3, #128	@ 0x80
 8005896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800589a:	e002      	b.n	80058a2 <UART_SetConfig+0x7ae>
 800589c:	2380      	movs	r3, #128	@ 0x80
 800589e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a55      	ldr	r2, [pc, #340]	@ (80059fc <UART_SetConfig+0x908>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	f040 80f8 	bne.w	8005a9e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80058ae:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80058b2:	2b20      	cmp	r3, #32
 80058b4:	dc46      	bgt.n	8005944 <UART_SetConfig+0x850>
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	db75      	blt.n	80059a6 <UART_SetConfig+0x8b2>
 80058ba:	3b02      	subs	r3, #2
 80058bc:	2b1e      	cmp	r3, #30
 80058be:	d872      	bhi.n	80059a6 <UART_SetConfig+0x8b2>
 80058c0:	a201      	add	r2, pc, #4	@ (adr r2, 80058c8 <UART_SetConfig+0x7d4>)
 80058c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c6:	bf00      	nop
 80058c8:	0800594b 	.word	0x0800594b
 80058cc:	080059a7 	.word	0x080059a7
 80058d0:	08005953 	.word	0x08005953
 80058d4:	080059a7 	.word	0x080059a7
 80058d8:	080059a7 	.word	0x080059a7
 80058dc:	080059a7 	.word	0x080059a7
 80058e0:	08005963 	.word	0x08005963
 80058e4:	080059a7 	.word	0x080059a7
 80058e8:	080059a7 	.word	0x080059a7
 80058ec:	080059a7 	.word	0x080059a7
 80058f0:	080059a7 	.word	0x080059a7
 80058f4:	080059a7 	.word	0x080059a7
 80058f8:	080059a7 	.word	0x080059a7
 80058fc:	080059a7 	.word	0x080059a7
 8005900:	08005973 	.word	0x08005973
 8005904:	080059a7 	.word	0x080059a7
 8005908:	080059a7 	.word	0x080059a7
 800590c:	080059a7 	.word	0x080059a7
 8005910:	080059a7 	.word	0x080059a7
 8005914:	080059a7 	.word	0x080059a7
 8005918:	080059a7 	.word	0x080059a7
 800591c:	080059a7 	.word	0x080059a7
 8005920:	080059a7 	.word	0x080059a7
 8005924:	080059a7 	.word	0x080059a7
 8005928:	080059a7 	.word	0x080059a7
 800592c:	080059a7 	.word	0x080059a7
 8005930:	080059a7 	.word	0x080059a7
 8005934:	080059a7 	.word	0x080059a7
 8005938:	080059a7 	.word	0x080059a7
 800593c:	080059a7 	.word	0x080059a7
 8005940:	08005999 	.word	0x08005999
 8005944:	2b40      	cmp	r3, #64	@ 0x40
 8005946:	d02a      	beq.n	800599e <UART_SetConfig+0x8aa>
 8005948:	e02d      	b.n	80059a6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800594a:	f7fe fc05 	bl	8004158 <HAL_RCCEx_GetD3PCLK1Freq>
 800594e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005950:	e02f      	b.n	80059b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005952:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005956:	4618      	mov	r0, r3
 8005958:	f7fe fc14 	bl	8004184 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800595c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800595e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005960:	e027      	b.n	80059b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005962:	f107 0318 	add.w	r3, r7, #24
 8005966:	4618      	mov	r0, r3
 8005968:	f7fe fd60 	bl	800442c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005970:	e01f      	b.n	80059b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005972:	4b21      	ldr	r3, [pc, #132]	@ (80059f8 <UART_SetConfig+0x904>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 0320 	and.w	r3, r3, #32
 800597a:	2b00      	cmp	r3, #0
 800597c:	d009      	beq.n	8005992 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800597e:	4b1e      	ldr	r3, [pc, #120]	@ (80059f8 <UART_SetConfig+0x904>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	08db      	lsrs	r3, r3, #3
 8005984:	f003 0303 	and.w	r3, r3, #3
 8005988:	4a1d      	ldr	r2, [pc, #116]	@ (8005a00 <UART_SetConfig+0x90c>)
 800598a:	fa22 f303 	lsr.w	r3, r2, r3
 800598e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005990:	e00f      	b.n	80059b2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005992:	4b1b      	ldr	r3, [pc, #108]	@ (8005a00 <UART_SetConfig+0x90c>)
 8005994:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005996:	e00c      	b.n	80059b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005998:	4b1a      	ldr	r3, [pc, #104]	@ (8005a04 <UART_SetConfig+0x910>)
 800599a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800599c:	e009      	b.n	80059b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800599e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059a4:	e005      	b.n	80059b2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80059a6:	2300      	movs	r3, #0
 80059a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80059b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80059b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f000 81ee 	beq.w	8005d96 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059be:	4a12      	ldr	r2, [pc, #72]	@ (8005a08 <UART_SetConfig+0x914>)
 80059c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059c4:	461a      	mov	r2, r3
 80059c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80059cc:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	685a      	ldr	r2, [r3, #4]
 80059d2:	4613      	mov	r3, r2
 80059d4:	005b      	lsls	r3, r3, #1
 80059d6:	4413      	add	r3, r2
 80059d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059da:	429a      	cmp	r2, r3
 80059dc:	d305      	bcc.n	80059ea <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d910      	bls.n	8005a0c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80059f0:	e1d1      	b.n	8005d96 <UART_SetConfig+0xca2>
 80059f2:	bf00      	nop
 80059f4:	40011c00 	.word	0x40011c00
 80059f8:	58024400 	.word	0x58024400
 80059fc:	58000c00 	.word	0x58000c00
 8005a00:	03d09000 	.word	0x03d09000
 8005a04:	003d0900 	.word	0x003d0900
 8005a08:	0800dc60 	.word	0x0800dc60
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a0e:	2200      	movs	r2, #0
 8005a10:	60bb      	str	r3, [r7, #8]
 8005a12:	60fa      	str	r2, [r7, #12]
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a18:	4ac0      	ldr	r2, [pc, #768]	@ (8005d1c <UART_SetConfig+0xc28>)
 8005a1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	2200      	movs	r2, #0
 8005a22:	603b      	str	r3, [r7, #0]
 8005a24:	607a      	str	r2, [r7, #4]
 8005a26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a2a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005a2e:	f7fa fe73 	bl	8000718 <__aeabi_uldivmod>
 8005a32:	4602      	mov	r2, r0
 8005a34:	460b      	mov	r3, r1
 8005a36:	4610      	mov	r0, r2
 8005a38:	4619      	mov	r1, r3
 8005a3a:	f04f 0200 	mov.w	r2, #0
 8005a3e:	f04f 0300 	mov.w	r3, #0
 8005a42:	020b      	lsls	r3, r1, #8
 8005a44:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005a48:	0202      	lsls	r2, r0, #8
 8005a4a:	6979      	ldr	r1, [r7, #20]
 8005a4c:	6849      	ldr	r1, [r1, #4]
 8005a4e:	0849      	lsrs	r1, r1, #1
 8005a50:	2000      	movs	r0, #0
 8005a52:	460c      	mov	r4, r1
 8005a54:	4605      	mov	r5, r0
 8005a56:	eb12 0804 	adds.w	r8, r2, r4
 8005a5a:	eb43 0905 	adc.w	r9, r3, r5
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	469a      	mov	sl, r3
 8005a66:	4693      	mov	fp, r2
 8005a68:	4652      	mov	r2, sl
 8005a6a:	465b      	mov	r3, fp
 8005a6c:	4640      	mov	r0, r8
 8005a6e:	4649      	mov	r1, r9
 8005a70:	f7fa fe52 	bl	8000718 <__aeabi_uldivmod>
 8005a74:	4602      	mov	r2, r0
 8005a76:	460b      	mov	r3, r1
 8005a78:	4613      	mov	r3, r2
 8005a7a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a7e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a82:	d308      	bcc.n	8005a96 <UART_SetConfig+0x9a2>
 8005a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a8a:	d204      	bcs.n	8005a96 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005a92:	60da      	str	r2, [r3, #12]
 8005a94:	e17f      	b.n	8005d96 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005a9c:	e17b      	b.n	8005d96 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	69db      	ldr	r3, [r3, #28]
 8005aa2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005aa6:	f040 80bd 	bne.w	8005c24 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8005aaa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005aae:	2b20      	cmp	r3, #32
 8005ab0:	dc48      	bgt.n	8005b44 <UART_SetConfig+0xa50>
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	db7b      	blt.n	8005bae <UART_SetConfig+0xaba>
 8005ab6:	2b20      	cmp	r3, #32
 8005ab8:	d879      	bhi.n	8005bae <UART_SetConfig+0xaba>
 8005aba:	a201      	add	r2, pc, #4	@ (adr r2, 8005ac0 <UART_SetConfig+0x9cc>)
 8005abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac0:	08005b4b 	.word	0x08005b4b
 8005ac4:	08005b53 	.word	0x08005b53
 8005ac8:	08005baf 	.word	0x08005baf
 8005acc:	08005baf 	.word	0x08005baf
 8005ad0:	08005b5b 	.word	0x08005b5b
 8005ad4:	08005baf 	.word	0x08005baf
 8005ad8:	08005baf 	.word	0x08005baf
 8005adc:	08005baf 	.word	0x08005baf
 8005ae0:	08005b6b 	.word	0x08005b6b
 8005ae4:	08005baf 	.word	0x08005baf
 8005ae8:	08005baf 	.word	0x08005baf
 8005aec:	08005baf 	.word	0x08005baf
 8005af0:	08005baf 	.word	0x08005baf
 8005af4:	08005baf 	.word	0x08005baf
 8005af8:	08005baf 	.word	0x08005baf
 8005afc:	08005baf 	.word	0x08005baf
 8005b00:	08005b7b 	.word	0x08005b7b
 8005b04:	08005baf 	.word	0x08005baf
 8005b08:	08005baf 	.word	0x08005baf
 8005b0c:	08005baf 	.word	0x08005baf
 8005b10:	08005baf 	.word	0x08005baf
 8005b14:	08005baf 	.word	0x08005baf
 8005b18:	08005baf 	.word	0x08005baf
 8005b1c:	08005baf 	.word	0x08005baf
 8005b20:	08005baf 	.word	0x08005baf
 8005b24:	08005baf 	.word	0x08005baf
 8005b28:	08005baf 	.word	0x08005baf
 8005b2c:	08005baf 	.word	0x08005baf
 8005b30:	08005baf 	.word	0x08005baf
 8005b34:	08005baf 	.word	0x08005baf
 8005b38:	08005baf 	.word	0x08005baf
 8005b3c:	08005baf 	.word	0x08005baf
 8005b40:	08005ba1 	.word	0x08005ba1
 8005b44:	2b40      	cmp	r3, #64	@ 0x40
 8005b46:	d02e      	beq.n	8005ba6 <UART_SetConfig+0xab2>
 8005b48:	e031      	b.n	8005bae <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b4a:	f7fd f8d9 	bl	8002d00 <HAL_RCC_GetPCLK1Freq>
 8005b4e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005b50:	e033      	b.n	8005bba <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b52:	f7fd f8eb 	bl	8002d2c <HAL_RCC_GetPCLK2Freq>
 8005b56:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005b58:	e02f      	b.n	8005bba <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f7fe fb10 	bl	8004184 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b68:	e027      	b.n	8005bba <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b6a:	f107 0318 	add.w	r3, r7, #24
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f7fe fc5c 	bl	800442c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b78:	e01f      	b.n	8005bba <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b7a:	4b69      	ldr	r3, [pc, #420]	@ (8005d20 <UART_SetConfig+0xc2c>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 0320 	and.w	r3, r3, #32
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d009      	beq.n	8005b9a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005b86:	4b66      	ldr	r3, [pc, #408]	@ (8005d20 <UART_SetConfig+0xc2c>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	08db      	lsrs	r3, r3, #3
 8005b8c:	f003 0303 	and.w	r3, r3, #3
 8005b90:	4a64      	ldr	r2, [pc, #400]	@ (8005d24 <UART_SetConfig+0xc30>)
 8005b92:	fa22 f303 	lsr.w	r3, r2, r3
 8005b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005b98:	e00f      	b.n	8005bba <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8005b9a:	4b62      	ldr	r3, [pc, #392]	@ (8005d24 <UART_SetConfig+0xc30>)
 8005b9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b9e:	e00c      	b.n	8005bba <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005ba0:	4b61      	ldr	r3, [pc, #388]	@ (8005d28 <UART_SetConfig+0xc34>)
 8005ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ba4:	e009      	b.n	8005bba <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ba6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bac:	e005      	b.n	8005bba <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005bb8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005bba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f000 80ea 	beq.w	8005d96 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bc6:	4a55      	ldr	r2, [pc, #340]	@ (8005d1c <UART_SetConfig+0xc28>)
 8005bc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bcc:	461a      	mov	r2, r3
 8005bce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bd4:	005a      	lsls	r2, r3, #1
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	085b      	lsrs	r3, r3, #1
 8005bdc:	441a      	add	r2, r3
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005be6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bea:	2b0f      	cmp	r3, #15
 8005bec:	d916      	bls.n	8005c1c <UART_SetConfig+0xb28>
 8005bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bf4:	d212      	bcs.n	8005c1c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	f023 030f 	bic.w	r3, r3, #15
 8005bfe:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c02:	085b      	lsrs	r3, r3, #1
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	f003 0307 	and.w	r3, r3, #7
 8005c0a:	b29a      	uxth	r2, r3
 8005c0c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005c18:	60da      	str	r2, [r3, #12]
 8005c1a:	e0bc      	b.n	8005d96 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005c22:	e0b8      	b.n	8005d96 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c24:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005c28:	2b20      	cmp	r3, #32
 8005c2a:	dc4b      	bgt.n	8005cc4 <UART_SetConfig+0xbd0>
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	f2c0 8087 	blt.w	8005d40 <UART_SetConfig+0xc4c>
 8005c32:	2b20      	cmp	r3, #32
 8005c34:	f200 8084 	bhi.w	8005d40 <UART_SetConfig+0xc4c>
 8005c38:	a201      	add	r2, pc, #4	@ (adr r2, 8005c40 <UART_SetConfig+0xb4c>)
 8005c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c3e:	bf00      	nop
 8005c40:	08005ccb 	.word	0x08005ccb
 8005c44:	08005cd3 	.word	0x08005cd3
 8005c48:	08005d41 	.word	0x08005d41
 8005c4c:	08005d41 	.word	0x08005d41
 8005c50:	08005cdb 	.word	0x08005cdb
 8005c54:	08005d41 	.word	0x08005d41
 8005c58:	08005d41 	.word	0x08005d41
 8005c5c:	08005d41 	.word	0x08005d41
 8005c60:	08005ceb 	.word	0x08005ceb
 8005c64:	08005d41 	.word	0x08005d41
 8005c68:	08005d41 	.word	0x08005d41
 8005c6c:	08005d41 	.word	0x08005d41
 8005c70:	08005d41 	.word	0x08005d41
 8005c74:	08005d41 	.word	0x08005d41
 8005c78:	08005d41 	.word	0x08005d41
 8005c7c:	08005d41 	.word	0x08005d41
 8005c80:	08005cfb 	.word	0x08005cfb
 8005c84:	08005d41 	.word	0x08005d41
 8005c88:	08005d41 	.word	0x08005d41
 8005c8c:	08005d41 	.word	0x08005d41
 8005c90:	08005d41 	.word	0x08005d41
 8005c94:	08005d41 	.word	0x08005d41
 8005c98:	08005d41 	.word	0x08005d41
 8005c9c:	08005d41 	.word	0x08005d41
 8005ca0:	08005d41 	.word	0x08005d41
 8005ca4:	08005d41 	.word	0x08005d41
 8005ca8:	08005d41 	.word	0x08005d41
 8005cac:	08005d41 	.word	0x08005d41
 8005cb0:	08005d41 	.word	0x08005d41
 8005cb4:	08005d41 	.word	0x08005d41
 8005cb8:	08005d41 	.word	0x08005d41
 8005cbc:	08005d41 	.word	0x08005d41
 8005cc0:	08005d33 	.word	0x08005d33
 8005cc4:	2b40      	cmp	r3, #64	@ 0x40
 8005cc6:	d037      	beq.n	8005d38 <UART_SetConfig+0xc44>
 8005cc8:	e03a      	b.n	8005d40 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cca:	f7fd f819 	bl	8002d00 <HAL_RCC_GetPCLK1Freq>
 8005cce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005cd0:	e03c      	b.n	8005d4c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cd2:	f7fd f82b 	bl	8002d2c <HAL_RCC_GetPCLK2Freq>
 8005cd6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005cd8:	e038      	b.n	8005d4c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005cda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7fe fa50 	bl	8004184 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ce8:	e030      	b.n	8005d4c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005cea:	f107 0318 	add.w	r3, r7, #24
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7fe fb9c 	bl	800442c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cf8:	e028      	b.n	8005d4c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cfa:	4b09      	ldr	r3, [pc, #36]	@ (8005d20 <UART_SetConfig+0xc2c>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0320 	and.w	r3, r3, #32
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d012      	beq.n	8005d2c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005d06:	4b06      	ldr	r3, [pc, #24]	@ (8005d20 <UART_SetConfig+0xc2c>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	08db      	lsrs	r3, r3, #3
 8005d0c:	f003 0303 	and.w	r3, r3, #3
 8005d10:	4a04      	ldr	r2, [pc, #16]	@ (8005d24 <UART_SetConfig+0xc30>)
 8005d12:	fa22 f303 	lsr.w	r3, r2, r3
 8005d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005d18:	e018      	b.n	8005d4c <UART_SetConfig+0xc58>
 8005d1a:	bf00      	nop
 8005d1c:	0800dc60 	.word	0x0800dc60
 8005d20:	58024400 	.word	0x58024400
 8005d24:	03d09000 	.word	0x03d09000
 8005d28:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8005d2c:	4b24      	ldr	r3, [pc, #144]	@ (8005dc0 <UART_SetConfig+0xccc>)
 8005d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d30:	e00c      	b.n	8005d4c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005d32:	4b24      	ldr	r3, [pc, #144]	@ (8005dc4 <UART_SetConfig+0xcd0>)
 8005d34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d36:	e009      	b.n	8005d4c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d38:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d3e:	e005      	b.n	8005d4c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8005d40:	2300      	movs	r3, #0
 8005d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005d4a:	bf00      	nop
    }

    if (pclk != 0U)
 8005d4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d021      	beq.n	8005d96 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d56:	4a1c      	ldr	r2, [pc, #112]	@ (8005dc8 <UART_SetConfig+0xcd4>)
 8005d58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d60:	fbb3 f2f2 	udiv	r2, r3, r2
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	085b      	lsrs	r3, r3, #1
 8005d6a:	441a      	add	r2, r3
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d74:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d78:	2b0f      	cmp	r3, #15
 8005d7a:	d909      	bls.n	8005d90 <UART_SetConfig+0xc9c>
 8005d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d82:	d205      	bcs.n	8005d90 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d86:	b29a      	uxth	r2, r3
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	60da      	str	r2, [r3, #12]
 8005d8e:	e002      	b.n	8005d96 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	2201      	movs	r2, #1
 8005da2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	2200      	movs	r2, #0
 8005daa:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	2200      	movs	r2, #0
 8005db0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005db2:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3748      	adds	r7, #72	@ 0x48
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005dc0:	03d09000 	.word	0x03d09000
 8005dc4:	003d0900 	.word	0x003d0900
 8005dc8:	0800dc60 	.word	0x0800dc60

08005dcc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dd8:	f003 0308 	and.w	r3, r3, #8
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d00a      	beq.n	8005df6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	430a      	orrs	r2, r1
 8005df4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dfa:	f003 0301 	and.w	r3, r3, #1
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00a      	beq.n	8005e18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	430a      	orrs	r2, r1
 8005e16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e1c:	f003 0302 	and.w	r3, r3, #2
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00a      	beq.n	8005e3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	430a      	orrs	r2, r1
 8005e38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e3e:	f003 0304 	and.w	r3, r3, #4
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00a      	beq.n	8005e5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	430a      	orrs	r2, r1
 8005e5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e60:	f003 0310 	and.w	r3, r3, #16
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d00a      	beq.n	8005e7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	430a      	orrs	r2, r1
 8005e7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e82:	f003 0320 	and.w	r3, r3, #32
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00a      	beq.n	8005ea0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	430a      	orrs	r2, r1
 8005e9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ea4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d01a      	beq.n	8005ee2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	430a      	orrs	r2, r1
 8005ec0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ec6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005eca:	d10a      	bne.n	8005ee2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	430a      	orrs	r2, r1
 8005ee0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ee6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d00a      	beq.n	8005f04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	430a      	orrs	r2, r1
 8005f02:	605a      	str	r2, [r3, #4]
  }
}
 8005f04:	bf00      	nop
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b098      	sub	sp, #96	@ 0x60
 8005f14:	af02      	add	r7, sp, #8
 8005f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f20:	f7fb fb20 	bl	8001564 <HAL_GetTick>
 8005f24:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 0308 	and.w	r3, r3, #8
 8005f30:	2b08      	cmp	r3, #8
 8005f32:	d12f      	bne.n	8005f94 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f34:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005f38:	9300      	str	r3, [sp, #0]
 8005f3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 f88e 	bl	8006064 <UART_WaitOnFlagUntilTimeout>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d022      	beq.n	8005f94 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f56:	e853 3f00 	ldrex	r3, [r3]
 8005f5a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005f5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f62:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	461a      	mov	r2, r3
 8005f6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f6e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f70:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005f72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f74:	e841 2300 	strex	r3, r2, [r1]
 8005f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005f7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d1e6      	bne.n	8005f4e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2220      	movs	r2, #32
 8005f84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f90:	2303      	movs	r3, #3
 8005f92:	e063      	b.n	800605c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0304 	and.w	r3, r3, #4
 8005f9e:	2b04      	cmp	r3, #4
 8005fa0:	d149      	bne.n	8006036 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fa2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005fa6:	9300      	str	r3, [sp, #0]
 8005fa8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005faa:	2200      	movs	r2, #0
 8005fac:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 f857 	bl	8006064 <UART_WaitOnFlagUntilTimeout>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d03c      	beq.n	8006036 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc4:	e853 3f00 	ldrex	r3, [r3]
 8005fc8:	623b      	str	r3, [r7, #32]
   return(result);
 8005fca:	6a3b      	ldr	r3, [r7, #32]
 8005fcc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005fd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fda:	633b      	str	r3, [r7, #48]	@ 0x30
 8005fdc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005fe0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fe2:	e841 2300 	strex	r3, r2, [r1]
 8005fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d1e6      	bne.n	8005fbc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	3308      	adds	r3, #8
 8005ff4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	e853 3f00 	ldrex	r3, [r3]
 8005ffc:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f023 0301 	bic.w	r3, r3, #1
 8006004:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	3308      	adds	r3, #8
 800600c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800600e:	61fa      	str	r2, [r7, #28]
 8006010:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006012:	69b9      	ldr	r1, [r7, #24]
 8006014:	69fa      	ldr	r2, [r7, #28]
 8006016:	e841 2300 	strex	r3, r2, [r1]
 800601a:	617b      	str	r3, [r7, #20]
   return(result);
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d1e5      	bne.n	8005fee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2220      	movs	r2, #32
 8006026:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	e012      	b.n	800605c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2220      	movs	r2, #32
 800603a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2220      	movs	r2, #32
 8006042:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800605a:	2300      	movs	r3, #0
}
 800605c:	4618      	mov	r0, r3
 800605e:	3758      	adds	r7, #88	@ 0x58
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	603b      	str	r3, [r7, #0]
 8006070:	4613      	mov	r3, r2
 8006072:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006074:	e04f      	b.n	8006116 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800607c:	d04b      	beq.n	8006116 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800607e:	f7fb fa71 	bl	8001564 <HAL_GetTick>
 8006082:	4602      	mov	r2, r0
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	1ad3      	subs	r3, r2, r3
 8006088:	69ba      	ldr	r2, [r7, #24]
 800608a:	429a      	cmp	r2, r3
 800608c:	d302      	bcc.n	8006094 <UART_WaitOnFlagUntilTimeout+0x30>
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d101      	bne.n	8006098 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006094:	2303      	movs	r3, #3
 8006096:	e04e      	b.n	8006136 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f003 0304 	and.w	r3, r3, #4
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d037      	beq.n	8006116 <UART_WaitOnFlagUntilTimeout+0xb2>
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	2b80      	cmp	r3, #128	@ 0x80
 80060aa:	d034      	beq.n	8006116 <UART_WaitOnFlagUntilTimeout+0xb2>
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	2b40      	cmp	r3, #64	@ 0x40
 80060b0:	d031      	beq.n	8006116 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	69db      	ldr	r3, [r3, #28]
 80060b8:	f003 0308 	and.w	r3, r3, #8
 80060bc:	2b08      	cmp	r3, #8
 80060be:	d110      	bne.n	80060e2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2208      	movs	r2, #8
 80060c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f000 f839 	bl	8006140 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2208      	movs	r2, #8
 80060d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e029      	b.n	8006136 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	69db      	ldr	r3, [r3, #28]
 80060e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80060ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80060f0:	d111      	bne.n	8006116 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80060fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80060fc:	68f8      	ldr	r0, [r7, #12]
 80060fe:	f000 f81f 	bl	8006140 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2220      	movs	r2, #32
 8006106:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2200      	movs	r2, #0
 800610e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	e00f      	b.n	8006136 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	69da      	ldr	r2, [r3, #28]
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	4013      	ands	r3, r2
 8006120:	68ba      	ldr	r2, [r7, #8]
 8006122:	429a      	cmp	r2, r3
 8006124:	bf0c      	ite	eq
 8006126:	2301      	moveq	r3, #1
 8006128:	2300      	movne	r3, #0
 800612a:	b2db      	uxtb	r3, r3
 800612c:	461a      	mov	r2, r3
 800612e:	79fb      	ldrb	r3, [r7, #7]
 8006130:	429a      	cmp	r2, r3
 8006132:	d0a0      	beq.n	8006076 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
	...

08006140 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006140:	b480      	push	{r7}
 8006142:	b095      	sub	sp, #84	@ 0x54
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006150:	e853 3f00 	ldrex	r3, [r3]
 8006154:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006158:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800615c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	461a      	mov	r2, r3
 8006164:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006166:	643b      	str	r3, [r7, #64]	@ 0x40
 8006168:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800616c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800616e:	e841 2300 	strex	r3, r2, [r1]
 8006172:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006176:	2b00      	cmp	r3, #0
 8006178:	d1e6      	bne.n	8006148 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	3308      	adds	r3, #8
 8006180:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006182:	6a3b      	ldr	r3, [r7, #32]
 8006184:	e853 3f00 	ldrex	r3, [r3]
 8006188:	61fb      	str	r3, [r7, #28]
   return(result);
 800618a:	69fa      	ldr	r2, [r7, #28]
 800618c:	4b1e      	ldr	r3, [pc, #120]	@ (8006208 <UART_EndRxTransfer+0xc8>)
 800618e:	4013      	ands	r3, r2
 8006190:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	3308      	adds	r3, #8
 8006198:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800619a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800619c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800619e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80061a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061a2:	e841 2300 	strex	r3, r2, [r1]
 80061a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80061a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d1e5      	bne.n	800617a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d118      	bne.n	80061e8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	e853 3f00 	ldrex	r3, [r3]
 80061c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	f023 0310 	bic.w	r3, r3, #16
 80061ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	461a      	mov	r2, r3
 80061d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061d4:	61bb      	str	r3, [r7, #24]
 80061d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d8:	6979      	ldr	r1, [r7, #20]
 80061da:	69ba      	ldr	r2, [r7, #24]
 80061dc:	e841 2300 	strex	r3, r2, [r1]
 80061e0:	613b      	str	r3, [r7, #16]
   return(result);
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d1e6      	bne.n	80061b6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2220      	movs	r2, #32
 80061ec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80061fc:	bf00      	nop
 80061fe:	3754      	adds	r7, #84	@ 0x54
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr
 8006208:	effffffe 	.word	0xeffffffe

0800620c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800620c:	b480      	push	{r7}
 800620e:	b085      	sub	sp, #20
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800621a:	2b01      	cmp	r3, #1
 800621c:	d101      	bne.n	8006222 <HAL_UARTEx_DisableFifoMode+0x16>
 800621e:	2302      	movs	r3, #2
 8006220:	e027      	b.n	8006272 <HAL_UARTEx_DisableFifoMode+0x66>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2201      	movs	r2, #1
 8006226:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2224      	movs	r2, #36	@ 0x24
 800622e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f022 0201 	bic.w	r2, r2, #1
 8006248:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006250:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2220      	movs	r2, #32
 8006264:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3714      	adds	r7, #20
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr

0800627e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800627e:	b580      	push	{r7, lr}
 8006280:	b084      	sub	sp, #16
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
 8006286:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800628e:	2b01      	cmp	r3, #1
 8006290:	d101      	bne.n	8006296 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006292:	2302      	movs	r3, #2
 8006294:	e02d      	b.n	80062f2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2201      	movs	r2, #1
 800629a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2224      	movs	r2, #36	@ 0x24
 80062a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f022 0201 	bic.w	r2, r2, #1
 80062bc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	683a      	ldr	r2, [r7, #0]
 80062ce:	430a      	orrs	r2, r1
 80062d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 f850 	bl	8006378 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2220      	movs	r2, #32
 80062e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3710      	adds	r7, #16
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}

080062fa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80062fa:	b580      	push	{r7, lr}
 80062fc:	b084      	sub	sp, #16
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
 8006302:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800630a:	2b01      	cmp	r3, #1
 800630c:	d101      	bne.n	8006312 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800630e:	2302      	movs	r3, #2
 8006310:	e02d      	b.n	800636e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2201      	movs	r2, #1
 8006316:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2224      	movs	r2, #36	@ 0x24
 800631e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f022 0201 	bic.w	r2, r2, #1
 8006338:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	683a      	ldr	r2, [r7, #0]
 800634a:	430a      	orrs	r2, r1
 800634c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 f812 	bl	8006378 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	68fa      	ldr	r2, [r7, #12]
 800635a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2220      	movs	r2, #32
 8006360:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
	...

08006378 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006378:	b480      	push	{r7}
 800637a:	b085      	sub	sp, #20
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006384:	2b00      	cmp	r3, #0
 8006386:	d108      	bne.n	800639a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006398:	e031      	b.n	80063fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800639a:	2310      	movs	r3, #16
 800639c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800639e:	2310      	movs	r3, #16
 80063a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	0e5b      	lsrs	r3, r3, #25
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	f003 0307 	and.w	r3, r3, #7
 80063b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	0f5b      	lsrs	r3, r3, #29
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	f003 0307 	and.w	r3, r3, #7
 80063c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063c2:	7bbb      	ldrb	r3, [r7, #14]
 80063c4:	7b3a      	ldrb	r2, [r7, #12]
 80063c6:	4911      	ldr	r1, [pc, #68]	@ (800640c <UARTEx_SetNbDataToProcess+0x94>)
 80063c8:	5c8a      	ldrb	r2, [r1, r2]
 80063ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80063ce:	7b3a      	ldrb	r2, [r7, #12]
 80063d0:	490f      	ldr	r1, [pc, #60]	@ (8006410 <UARTEx_SetNbDataToProcess+0x98>)
 80063d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80063d8:	b29a      	uxth	r2, r3
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80063e0:	7bfb      	ldrb	r3, [r7, #15]
 80063e2:	7b7a      	ldrb	r2, [r7, #13]
 80063e4:	4909      	ldr	r1, [pc, #36]	@ (800640c <UARTEx_SetNbDataToProcess+0x94>)
 80063e6:	5c8a      	ldrb	r2, [r1, r2]
 80063e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80063ec:	7b7a      	ldrb	r2, [r7, #13]
 80063ee:	4908      	ldr	r1, [pc, #32]	@ (8006410 <UARTEx_SetNbDataToProcess+0x98>)
 80063f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80063f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80063f6:	b29a      	uxth	r2, r3
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80063fe:	bf00      	nop
 8006400:	3714      	adds	r7, #20
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr
 800640a:	bf00      	nop
 800640c:	0800dc78 	.word	0x0800dc78
 8006410:	0800dc80 	.word	0x0800dc80

08006414 <__NVIC_SetPriority>:
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	4603      	mov	r3, r0
 800641c:	6039      	str	r1, [r7, #0]
 800641e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006420:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006424:	2b00      	cmp	r3, #0
 8006426:	db0a      	blt.n	800643e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	b2da      	uxtb	r2, r3
 800642c:	490c      	ldr	r1, [pc, #48]	@ (8006460 <__NVIC_SetPriority+0x4c>)
 800642e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006432:	0112      	lsls	r2, r2, #4
 8006434:	b2d2      	uxtb	r2, r2
 8006436:	440b      	add	r3, r1
 8006438:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800643c:	e00a      	b.n	8006454 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	b2da      	uxtb	r2, r3
 8006442:	4908      	ldr	r1, [pc, #32]	@ (8006464 <__NVIC_SetPriority+0x50>)
 8006444:	88fb      	ldrh	r3, [r7, #6]
 8006446:	f003 030f 	and.w	r3, r3, #15
 800644a:	3b04      	subs	r3, #4
 800644c:	0112      	lsls	r2, r2, #4
 800644e:	b2d2      	uxtb	r2, r2
 8006450:	440b      	add	r3, r1
 8006452:	761a      	strb	r2, [r3, #24]
}
 8006454:	bf00      	nop
 8006456:	370c      	adds	r7, #12
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr
 8006460:	e000e100 	.word	0xe000e100
 8006464:	e000ed00 	.word	0xe000ed00

08006468 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006468:	b580      	push	{r7, lr}
 800646a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800646c:	4b05      	ldr	r3, [pc, #20]	@ (8006484 <SysTick_Handler+0x1c>)
 800646e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006470:	f001 fdfe 	bl	8008070 <xTaskGetSchedulerState>
 8006474:	4603      	mov	r3, r0
 8006476:	2b01      	cmp	r3, #1
 8006478:	d001      	beq.n	800647e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800647a:	f002 fced 	bl	8008e58 <xPortSysTickHandler>
  }
}
 800647e:	bf00      	nop
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	e000e010 	.word	0xe000e010

08006488 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006488:	b580      	push	{r7, lr}
 800648a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800648c:	2100      	movs	r1, #0
 800648e:	f06f 0004 	mvn.w	r0, #4
 8006492:	f7ff ffbf 	bl	8006414 <__NVIC_SetPriority>
#endif
}
 8006496:	bf00      	nop
 8006498:	bd80      	pop	{r7, pc}
	...

0800649c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064a2:	f3ef 8305 	mrs	r3, IPSR
 80064a6:	603b      	str	r3, [r7, #0]
  return(result);
 80064a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d003      	beq.n	80064b6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80064ae:	f06f 0305 	mvn.w	r3, #5
 80064b2:	607b      	str	r3, [r7, #4]
 80064b4:	e00c      	b.n	80064d0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80064b6:	4b0a      	ldr	r3, [pc, #40]	@ (80064e0 <osKernelInitialize+0x44>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d105      	bne.n	80064ca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80064be:	4b08      	ldr	r3, [pc, #32]	@ (80064e0 <osKernelInitialize+0x44>)
 80064c0:	2201      	movs	r2, #1
 80064c2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80064c4:	2300      	movs	r3, #0
 80064c6:	607b      	str	r3, [r7, #4]
 80064c8:	e002      	b.n	80064d0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80064ca:	f04f 33ff 	mov.w	r3, #4294967295
 80064ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80064d0:	687b      	ldr	r3, [r7, #4]
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	370c      	adds	r7, #12
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr
 80064de:	bf00      	nop
 80064e0:	2400033c 	.word	0x2400033c

080064e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b082      	sub	sp, #8
 80064e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064ea:	f3ef 8305 	mrs	r3, IPSR
 80064ee:	603b      	str	r3, [r7, #0]
  return(result);
 80064f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d003      	beq.n	80064fe <osKernelStart+0x1a>
    stat = osErrorISR;
 80064f6:	f06f 0305 	mvn.w	r3, #5
 80064fa:	607b      	str	r3, [r7, #4]
 80064fc:	e010      	b.n	8006520 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80064fe:	4b0b      	ldr	r3, [pc, #44]	@ (800652c <osKernelStart+0x48>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	2b01      	cmp	r3, #1
 8006504:	d109      	bne.n	800651a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006506:	f7ff ffbf 	bl	8006488 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800650a:	4b08      	ldr	r3, [pc, #32]	@ (800652c <osKernelStart+0x48>)
 800650c:	2202      	movs	r2, #2
 800650e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006510:	f001 f892 	bl	8007638 <vTaskStartScheduler>
      stat = osOK;
 8006514:	2300      	movs	r3, #0
 8006516:	607b      	str	r3, [r7, #4]
 8006518:	e002      	b.n	8006520 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800651a:	f04f 33ff 	mov.w	r3, #4294967295
 800651e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006520:	687b      	ldr	r3, [r7, #4]
}
 8006522:	4618      	mov	r0, r3
 8006524:	3708      	adds	r7, #8
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	2400033c 	.word	0x2400033c

08006530 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006530:	b580      	push	{r7, lr}
 8006532:	b08e      	sub	sp, #56	@ 0x38
 8006534:	af04      	add	r7, sp, #16
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	60b9      	str	r1, [r7, #8]
 800653a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800653c:	2300      	movs	r3, #0
 800653e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006540:	f3ef 8305 	mrs	r3, IPSR
 8006544:	617b      	str	r3, [r7, #20]
  return(result);
 8006546:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006548:	2b00      	cmp	r3, #0
 800654a:	d17e      	bne.n	800664a <osThreadNew+0x11a>
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d07b      	beq.n	800664a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006552:	2380      	movs	r3, #128	@ 0x80
 8006554:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006556:	2318      	movs	r3, #24
 8006558:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800655a:	2300      	movs	r3, #0
 800655c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800655e:	f04f 33ff 	mov.w	r3, #4294967295
 8006562:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d045      	beq.n	80065f6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d002      	beq.n	8006578 <osThreadNew+0x48>
        name = attr->name;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	699b      	ldr	r3, [r3, #24]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d002      	beq.n	8006586 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	699b      	ldr	r3, [r3, #24]
 8006584:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d008      	beq.n	800659e <osThreadNew+0x6e>
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	2b38      	cmp	r3, #56	@ 0x38
 8006590:	d805      	bhi.n	800659e <osThreadNew+0x6e>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	f003 0301 	and.w	r3, r3, #1
 800659a:	2b00      	cmp	r3, #0
 800659c:	d001      	beq.n	80065a2 <osThreadNew+0x72>
        return (NULL);
 800659e:	2300      	movs	r3, #0
 80065a0:	e054      	b.n	800664c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	695b      	ldr	r3, [r3, #20]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d003      	beq.n	80065b2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	695b      	ldr	r3, [r3, #20]
 80065ae:	089b      	lsrs	r3, r3, #2
 80065b0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d00e      	beq.n	80065d8 <osThreadNew+0xa8>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	2ba7      	cmp	r3, #167	@ 0xa7
 80065c0:	d90a      	bls.n	80065d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d006      	beq.n	80065d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	695b      	ldr	r3, [r3, #20]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d002      	beq.n	80065d8 <osThreadNew+0xa8>
        mem = 1;
 80065d2:	2301      	movs	r3, #1
 80065d4:	61bb      	str	r3, [r7, #24]
 80065d6:	e010      	b.n	80065fa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d10c      	bne.n	80065fa <osThreadNew+0xca>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d108      	bne.n	80065fa <osThreadNew+0xca>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d104      	bne.n	80065fa <osThreadNew+0xca>
          mem = 0;
 80065f0:	2300      	movs	r3, #0
 80065f2:	61bb      	str	r3, [r7, #24]
 80065f4:	e001      	b.n	80065fa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80065f6:	2300      	movs	r3, #0
 80065f8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d110      	bne.n	8006622 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006608:	9202      	str	r2, [sp, #8]
 800660a:	9301      	str	r3, [sp, #4]
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	9300      	str	r3, [sp, #0]
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	6a3a      	ldr	r2, [r7, #32]
 8006614:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006616:	68f8      	ldr	r0, [r7, #12]
 8006618:	f000 fe1a 	bl	8007250 <xTaskCreateStatic>
 800661c:	4603      	mov	r3, r0
 800661e:	613b      	str	r3, [r7, #16]
 8006620:	e013      	b.n	800664a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d110      	bne.n	800664a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006628:	6a3b      	ldr	r3, [r7, #32]
 800662a:	b29a      	uxth	r2, r3
 800662c:	f107 0310 	add.w	r3, r7, #16
 8006630:	9301      	str	r3, [sp, #4]
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	9300      	str	r3, [sp, #0]
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800663a:	68f8      	ldr	r0, [r7, #12]
 800663c:	f000 fe68 	bl	8007310 <xTaskCreate>
 8006640:	4603      	mov	r3, r0
 8006642:	2b01      	cmp	r3, #1
 8006644:	d001      	beq.n	800664a <osThreadNew+0x11a>
            hTask = NULL;
 8006646:	2300      	movs	r3, #0
 8006648:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800664a:	693b      	ldr	r3, [r7, #16]
}
 800664c:	4618      	mov	r0, r3
 800664e:	3728      	adds	r7, #40	@ 0x28
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800665c:	f3ef 8305 	mrs	r3, IPSR
 8006660:	60bb      	str	r3, [r7, #8]
  return(result);
 8006662:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006664:	2b00      	cmp	r3, #0
 8006666:	d003      	beq.n	8006670 <osDelay+0x1c>
    stat = osErrorISR;
 8006668:	f06f 0305 	mvn.w	r3, #5
 800666c:	60fb      	str	r3, [r7, #12]
 800666e:	e007      	b.n	8006680 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006670:	2300      	movs	r3, #0
 8006672:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d002      	beq.n	8006680 <osDelay+0x2c>
      vTaskDelay(ticks);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 ffa6 	bl	80075cc <vTaskDelay>
    }
  }

  return (stat);
 8006680:	68fb      	ldr	r3, [r7, #12]
}
 8006682:	4618      	mov	r0, r3
 8006684:	3710      	adds	r7, #16
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
	...

0800668c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800668c:	b480      	push	{r7}
 800668e:	b085      	sub	sp, #20
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	4a07      	ldr	r2, [pc, #28]	@ (80066b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800669c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	4a06      	ldr	r2, [pc, #24]	@ (80066bc <vApplicationGetIdleTaskMemory+0x30>)
 80066a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2280      	movs	r2, #128	@ 0x80
 80066a8:	601a      	str	r2, [r3, #0]
}
 80066aa:	bf00      	nop
 80066ac:	3714      	adds	r7, #20
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr
 80066b6:	bf00      	nop
 80066b8:	24000340 	.word	0x24000340
 80066bc:	240003e8 	.word	0x240003e8

080066c0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80066c0:	b480      	push	{r7}
 80066c2:	b085      	sub	sp, #20
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	4a07      	ldr	r2, [pc, #28]	@ (80066ec <vApplicationGetTimerTaskMemory+0x2c>)
 80066d0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	4a06      	ldr	r2, [pc, #24]	@ (80066f0 <vApplicationGetTimerTaskMemory+0x30>)
 80066d6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80066de:	601a      	str	r2, [r3, #0]
}
 80066e0:	bf00      	nop
 80066e2:	3714      	adds	r7, #20
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr
 80066ec:	240005e8 	.word	0x240005e8
 80066f0:	24000690 	.word	0x24000690

080066f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f103 0208 	add.w	r2, r3, #8
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f04f 32ff 	mov.w	r2, #4294967295
 800670c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f103 0208 	add.w	r2, r3, #8
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f103 0208 	add.w	r2, r3, #8
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006728:	bf00      	nop
 800672a:	370c      	adds	r7, #12
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006742:	bf00      	nop
 8006744:	370c      	adds	r7, #12
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr

0800674e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800674e:	b480      	push	{r7}
 8006750:	b085      	sub	sp, #20
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
 8006756:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	689a      	ldr	r2, [r3, #8]
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	683a      	ldr	r2, [r7, #0]
 8006772:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	683a      	ldr	r2, [r7, #0]
 8006778:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	1c5a      	adds	r2, r3, #1
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	601a      	str	r2, [r3, #0]
}
 800678a:	bf00      	nop
 800678c:	3714      	adds	r7, #20
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr

08006796 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006796:	b480      	push	{r7}
 8006798:	b085      	sub	sp, #20
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
 800679e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ac:	d103      	bne.n	80067b6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	60fb      	str	r3, [r7, #12]
 80067b4:	e00c      	b.n	80067d0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	3308      	adds	r3, #8
 80067ba:	60fb      	str	r3, [r7, #12]
 80067bc:	e002      	b.n	80067c4 <vListInsert+0x2e>
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	60fb      	str	r3, [r7, #12]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68ba      	ldr	r2, [r7, #8]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d2f6      	bcs.n	80067be <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	685a      	ldr	r2, [r3, #4]
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	683a      	ldr	r2, [r7, #0]
 80067de:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	68fa      	ldr	r2, [r7, #12]
 80067e4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	683a      	ldr	r2, [r7, #0]
 80067ea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	1c5a      	adds	r2, r3, #1
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	601a      	str	r2, [r3, #0]
}
 80067fc:	bf00      	nop
 80067fe:	3714      	adds	r7, #20
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006808:	b480      	push	{r7}
 800680a:	b085      	sub	sp, #20
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	6892      	ldr	r2, [r2, #8]
 800681e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	6852      	ldr	r2, [r2, #4]
 8006828:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	429a      	cmp	r2, r3
 8006832:	d103      	bne.n	800683c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	689a      	ldr	r2, [r3, #8]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	1e5a      	subs	r2, r3, #1
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
}
 8006850:	4618      	mov	r0, r3
 8006852:	3714      	adds	r7, #20
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d10b      	bne.n	8006888 <xQueueGenericReset+0x2c>
	__asm volatile
 8006870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006874:	f383 8811 	msr	BASEPRI, r3
 8006878:	f3bf 8f6f 	isb	sy
 800687c:	f3bf 8f4f 	dsb	sy
 8006880:	60bb      	str	r3, [r7, #8]
}
 8006882:	bf00      	nop
 8006884:	bf00      	nop
 8006886:	e7fd      	b.n	8006884 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006888:	f002 fa56 	bl	8008d38 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006894:	68f9      	ldr	r1, [r7, #12]
 8006896:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006898:	fb01 f303 	mul.w	r3, r1, r3
 800689c:	441a      	add	r2, r3
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2200      	movs	r2, #0
 80068a6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068b8:	3b01      	subs	r3, #1
 80068ba:	68f9      	ldr	r1, [r7, #12]
 80068bc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80068be:	fb01 f303 	mul.w	r3, r1, r3
 80068c2:	441a      	add	r2, r3
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	22ff      	movs	r2, #255	@ 0xff
 80068cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	22ff      	movs	r2, #255	@ 0xff
 80068d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d114      	bne.n	8006908 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d01a      	beq.n	800691c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	3310      	adds	r3, #16
 80068ea:	4618      	mov	r0, r3
 80068ec:	f001 f9a2 	bl	8007c34 <xTaskRemoveFromEventList>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d012      	beq.n	800691c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80068f6:	4b0d      	ldr	r3, [pc, #52]	@ (800692c <xQueueGenericReset+0xd0>)
 80068f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068fc:	601a      	str	r2, [r3, #0]
 80068fe:	f3bf 8f4f 	dsb	sy
 8006902:	f3bf 8f6f 	isb	sy
 8006906:	e009      	b.n	800691c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	3310      	adds	r3, #16
 800690c:	4618      	mov	r0, r3
 800690e:	f7ff fef1 	bl	80066f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	3324      	adds	r3, #36	@ 0x24
 8006916:	4618      	mov	r0, r3
 8006918:	f7ff feec 	bl	80066f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800691c:	f002 fa3e 	bl	8008d9c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006920:	2301      	movs	r3, #1
}
 8006922:	4618      	mov	r0, r3
 8006924:	3710      	adds	r7, #16
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	e000ed04 	.word	0xe000ed04

08006930 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006930:	b580      	push	{r7, lr}
 8006932:	b08e      	sub	sp, #56	@ 0x38
 8006934:	af02      	add	r7, sp, #8
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	60b9      	str	r1, [r7, #8]
 800693a:	607a      	str	r2, [r7, #4]
 800693c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d10b      	bne.n	800695c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006948:	f383 8811 	msr	BASEPRI, r3
 800694c:	f3bf 8f6f 	isb	sy
 8006950:	f3bf 8f4f 	dsb	sy
 8006954:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006956:	bf00      	nop
 8006958:	bf00      	nop
 800695a:	e7fd      	b.n	8006958 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d10b      	bne.n	800697a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006966:	f383 8811 	msr	BASEPRI, r3
 800696a:	f3bf 8f6f 	isb	sy
 800696e:	f3bf 8f4f 	dsb	sy
 8006972:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006974:	bf00      	nop
 8006976:	bf00      	nop
 8006978:	e7fd      	b.n	8006976 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d002      	beq.n	8006986 <xQueueGenericCreateStatic+0x56>
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d001      	beq.n	800698a <xQueueGenericCreateStatic+0x5a>
 8006986:	2301      	movs	r3, #1
 8006988:	e000      	b.n	800698c <xQueueGenericCreateStatic+0x5c>
 800698a:	2300      	movs	r3, #0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d10b      	bne.n	80069a8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006994:	f383 8811 	msr	BASEPRI, r3
 8006998:	f3bf 8f6f 	isb	sy
 800699c:	f3bf 8f4f 	dsb	sy
 80069a0:	623b      	str	r3, [r7, #32]
}
 80069a2:	bf00      	nop
 80069a4:	bf00      	nop
 80069a6:	e7fd      	b.n	80069a4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d102      	bne.n	80069b4 <xQueueGenericCreateStatic+0x84>
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d101      	bne.n	80069b8 <xQueueGenericCreateStatic+0x88>
 80069b4:	2301      	movs	r3, #1
 80069b6:	e000      	b.n	80069ba <xQueueGenericCreateStatic+0x8a>
 80069b8:	2300      	movs	r3, #0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d10b      	bne.n	80069d6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80069be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c2:	f383 8811 	msr	BASEPRI, r3
 80069c6:	f3bf 8f6f 	isb	sy
 80069ca:	f3bf 8f4f 	dsb	sy
 80069ce:	61fb      	str	r3, [r7, #28]
}
 80069d0:	bf00      	nop
 80069d2:	bf00      	nop
 80069d4:	e7fd      	b.n	80069d2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80069d6:	2350      	movs	r3, #80	@ 0x50
 80069d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	2b50      	cmp	r3, #80	@ 0x50
 80069de:	d00b      	beq.n	80069f8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80069e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069e4:	f383 8811 	msr	BASEPRI, r3
 80069e8:	f3bf 8f6f 	isb	sy
 80069ec:	f3bf 8f4f 	dsb	sy
 80069f0:	61bb      	str	r3, [r7, #24]
}
 80069f2:	bf00      	nop
 80069f4:	bf00      	nop
 80069f6:	e7fd      	b.n	80069f4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80069f8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80069fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d00d      	beq.n	8006a20 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a06:	2201      	movs	r2, #1
 8006a08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a0c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a12:	9300      	str	r3, [sp, #0]
 8006a14:	4613      	mov	r3, r2
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	68b9      	ldr	r1, [r7, #8]
 8006a1a:	68f8      	ldr	r0, [r7, #12]
 8006a1c:	f000 f805 	bl	8006a2a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3730      	adds	r7, #48	@ 0x30
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b084      	sub	sp, #16
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	60f8      	str	r0, [r7, #12]
 8006a32:	60b9      	str	r1, [r7, #8]
 8006a34:	607a      	str	r2, [r7, #4]
 8006a36:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d103      	bne.n	8006a46 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	69ba      	ldr	r2, [r7, #24]
 8006a42:	601a      	str	r2, [r3, #0]
 8006a44:	e002      	b.n	8006a4c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006a4c:	69bb      	ldr	r3, [r7, #24]
 8006a4e:	68fa      	ldr	r2, [r7, #12]
 8006a50:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006a52:	69bb      	ldr	r3, [r7, #24]
 8006a54:	68ba      	ldr	r2, [r7, #8]
 8006a56:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006a58:	2101      	movs	r1, #1
 8006a5a:	69b8      	ldr	r0, [r7, #24]
 8006a5c:	f7ff fefe 	bl	800685c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	78fa      	ldrb	r2, [r7, #3]
 8006a64:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006a68:	bf00      	nop
 8006a6a:	3710      	adds	r7, #16
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b08e      	sub	sp, #56	@ 0x38
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	607a      	str	r2, [r7, #4]
 8006a7c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d10b      	bne.n	8006aa4 <xQueueGenericSend+0x34>
	__asm volatile
 8006a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a90:	f383 8811 	msr	BASEPRI, r3
 8006a94:	f3bf 8f6f 	isb	sy
 8006a98:	f3bf 8f4f 	dsb	sy
 8006a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006a9e:	bf00      	nop
 8006aa0:	bf00      	nop
 8006aa2:	e7fd      	b.n	8006aa0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d103      	bne.n	8006ab2 <xQueueGenericSend+0x42>
 8006aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d101      	bne.n	8006ab6 <xQueueGenericSend+0x46>
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e000      	b.n	8006ab8 <xQueueGenericSend+0x48>
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d10b      	bne.n	8006ad4 <xQueueGenericSend+0x64>
	__asm volatile
 8006abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ac0:	f383 8811 	msr	BASEPRI, r3
 8006ac4:	f3bf 8f6f 	isb	sy
 8006ac8:	f3bf 8f4f 	dsb	sy
 8006acc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006ace:	bf00      	nop
 8006ad0:	bf00      	nop
 8006ad2:	e7fd      	b.n	8006ad0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	d103      	bne.n	8006ae2 <xQueueGenericSend+0x72>
 8006ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006adc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d101      	bne.n	8006ae6 <xQueueGenericSend+0x76>
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e000      	b.n	8006ae8 <xQueueGenericSend+0x78>
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d10b      	bne.n	8006b04 <xQueueGenericSend+0x94>
	__asm volatile
 8006aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006af0:	f383 8811 	msr	BASEPRI, r3
 8006af4:	f3bf 8f6f 	isb	sy
 8006af8:	f3bf 8f4f 	dsb	sy
 8006afc:	623b      	str	r3, [r7, #32]
}
 8006afe:	bf00      	nop
 8006b00:	bf00      	nop
 8006b02:	e7fd      	b.n	8006b00 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b04:	f001 fab4 	bl	8008070 <xTaskGetSchedulerState>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d102      	bne.n	8006b14 <xQueueGenericSend+0xa4>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d101      	bne.n	8006b18 <xQueueGenericSend+0xa8>
 8006b14:	2301      	movs	r3, #1
 8006b16:	e000      	b.n	8006b1a <xQueueGenericSend+0xaa>
 8006b18:	2300      	movs	r3, #0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d10b      	bne.n	8006b36 <xQueueGenericSend+0xc6>
	__asm volatile
 8006b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b22:	f383 8811 	msr	BASEPRI, r3
 8006b26:	f3bf 8f6f 	isb	sy
 8006b2a:	f3bf 8f4f 	dsb	sy
 8006b2e:	61fb      	str	r3, [r7, #28]
}
 8006b30:	bf00      	nop
 8006b32:	bf00      	nop
 8006b34:	e7fd      	b.n	8006b32 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b36:	f002 f8ff 	bl	8008d38 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d302      	bcc.n	8006b4c <xQueueGenericSend+0xdc>
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	2b02      	cmp	r3, #2
 8006b4a:	d129      	bne.n	8006ba0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b4c:	683a      	ldr	r2, [r7, #0]
 8006b4e:	68b9      	ldr	r1, [r7, #8]
 8006b50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006b52:	f000 fa0f 	bl	8006f74 <prvCopyDataToQueue>
 8006b56:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d010      	beq.n	8006b82 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b62:	3324      	adds	r3, #36	@ 0x24
 8006b64:	4618      	mov	r0, r3
 8006b66:	f001 f865 	bl	8007c34 <xTaskRemoveFromEventList>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d013      	beq.n	8006b98 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006b70:	4b3f      	ldr	r3, [pc, #252]	@ (8006c70 <xQueueGenericSend+0x200>)
 8006b72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b76:	601a      	str	r2, [r3, #0]
 8006b78:	f3bf 8f4f 	dsb	sy
 8006b7c:	f3bf 8f6f 	isb	sy
 8006b80:	e00a      	b.n	8006b98 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d007      	beq.n	8006b98 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006b88:	4b39      	ldr	r3, [pc, #228]	@ (8006c70 <xQueueGenericSend+0x200>)
 8006b8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b8e:	601a      	str	r2, [r3, #0]
 8006b90:	f3bf 8f4f 	dsb	sy
 8006b94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006b98:	f002 f900 	bl	8008d9c <vPortExitCritical>
				return pdPASS;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e063      	b.n	8006c68 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d103      	bne.n	8006bae <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006ba6:	f002 f8f9 	bl	8008d9c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006baa:	2300      	movs	r3, #0
 8006bac:	e05c      	b.n	8006c68 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006bae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d106      	bne.n	8006bc2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006bb4:	f107 0314 	add.w	r3, r7, #20
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f001 f8a1 	bl	8007d00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006bc2:	f002 f8eb 	bl	8008d9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006bc6:	f000 fda7 	bl	8007718 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006bca:	f002 f8b5 	bl	8008d38 <vPortEnterCritical>
 8006bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006bd4:	b25b      	sxtb	r3, r3
 8006bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bda:	d103      	bne.n	8006be4 <xQueueGenericSend+0x174>
 8006bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bde:	2200      	movs	r2, #0
 8006be0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006bea:	b25b      	sxtb	r3, r3
 8006bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bf0:	d103      	bne.n	8006bfa <xQueueGenericSend+0x18a>
 8006bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006bfa:	f002 f8cf 	bl	8008d9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006bfe:	1d3a      	adds	r2, r7, #4
 8006c00:	f107 0314 	add.w	r3, r7, #20
 8006c04:	4611      	mov	r1, r2
 8006c06:	4618      	mov	r0, r3
 8006c08:	f001 f890 	bl	8007d2c <xTaskCheckForTimeOut>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d124      	bne.n	8006c5c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006c12:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c14:	f000 faa6 	bl	8007164 <prvIsQueueFull>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d018      	beq.n	8006c50 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c20:	3310      	adds	r3, #16
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	4611      	mov	r1, r2
 8006c26:	4618      	mov	r0, r3
 8006c28:	f000 ffb2 	bl	8007b90 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006c2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c2e:	f000 fa31 	bl	8007094 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006c32:	f000 fdb7 	bl	80077a4 <xTaskResumeAll>
 8006c36:	4603      	mov	r3, r0
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	f47f af7c 	bne.w	8006b36 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8006c70 <xQueueGenericSend+0x200>)
 8006c40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c44:	601a      	str	r2, [r3, #0]
 8006c46:	f3bf 8f4f 	dsb	sy
 8006c4a:	f3bf 8f6f 	isb	sy
 8006c4e:	e772      	b.n	8006b36 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006c50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c52:	f000 fa1f 	bl	8007094 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c56:	f000 fda5 	bl	80077a4 <xTaskResumeAll>
 8006c5a:	e76c      	b.n	8006b36 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006c5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c5e:	f000 fa19 	bl	8007094 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c62:	f000 fd9f 	bl	80077a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006c66:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3738      	adds	r7, #56	@ 0x38
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}
 8006c70:	e000ed04 	.word	0xe000ed04

08006c74 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b090      	sub	sp, #64	@ 0x40
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	607a      	str	r2, [r7, #4]
 8006c80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d10b      	bne.n	8006ca4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c90:	f383 8811 	msr	BASEPRI, r3
 8006c94:	f3bf 8f6f 	isb	sy
 8006c98:	f3bf 8f4f 	dsb	sy
 8006c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006c9e:	bf00      	nop
 8006ca0:	bf00      	nop
 8006ca2:	e7fd      	b.n	8006ca0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d103      	bne.n	8006cb2 <xQueueGenericSendFromISR+0x3e>
 8006caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d101      	bne.n	8006cb6 <xQueueGenericSendFromISR+0x42>
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e000      	b.n	8006cb8 <xQueueGenericSendFromISR+0x44>
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d10b      	bne.n	8006cd4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cc0:	f383 8811 	msr	BASEPRI, r3
 8006cc4:	f3bf 8f6f 	isb	sy
 8006cc8:	f3bf 8f4f 	dsb	sy
 8006ccc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006cce:	bf00      	nop
 8006cd0:	bf00      	nop
 8006cd2:	e7fd      	b.n	8006cd0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	d103      	bne.n	8006ce2 <xQueueGenericSendFromISR+0x6e>
 8006cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d101      	bne.n	8006ce6 <xQueueGenericSendFromISR+0x72>
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e000      	b.n	8006ce8 <xQueueGenericSendFromISR+0x74>
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d10b      	bne.n	8006d04 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cf0:	f383 8811 	msr	BASEPRI, r3
 8006cf4:	f3bf 8f6f 	isb	sy
 8006cf8:	f3bf 8f4f 	dsb	sy
 8006cfc:	623b      	str	r3, [r7, #32]
}
 8006cfe:	bf00      	nop
 8006d00:	bf00      	nop
 8006d02:	e7fd      	b.n	8006d00 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d04:	f002 f9dc 	bl	80090c0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006d08:	f3ef 8211 	mrs	r2, BASEPRI
 8006d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d10:	f383 8811 	msr	BASEPRI, r3
 8006d14:	f3bf 8f6f 	isb	sy
 8006d18:	f3bf 8f4f 	dsb	sy
 8006d1c:	61fa      	str	r2, [r7, #28]
 8006d1e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006d20:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006d22:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d302      	bcc.n	8006d36 <xQueueGenericSendFromISR+0xc2>
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	d12f      	bne.n	8006d96 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d38:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006d3c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d46:	683a      	ldr	r2, [r7, #0]
 8006d48:	68b9      	ldr	r1, [r7, #8]
 8006d4a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006d4c:	f000 f912 	bl	8006f74 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006d50:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d58:	d112      	bne.n	8006d80 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d016      	beq.n	8006d90 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d64:	3324      	adds	r3, #36	@ 0x24
 8006d66:	4618      	mov	r0, r3
 8006d68:	f000 ff64 	bl	8007c34 <xTaskRemoveFromEventList>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d00e      	beq.n	8006d90 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d00b      	beq.n	8006d90 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	601a      	str	r2, [r3, #0]
 8006d7e:	e007      	b.n	8006d90 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006d80:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006d84:	3301      	adds	r3, #1
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	b25a      	sxtb	r2, r3
 8006d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006d90:	2301      	movs	r3, #1
 8006d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006d94:	e001      	b.n	8006d9a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006d96:	2300      	movs	r3, #0
 8006d98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d9c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006da4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006da6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3740      	adds	r7, #64	@ 0x40
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b08c      	sub	sp, #48	@ 0x30
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d10b      	bne.n	8006de2 <xQueueReceive+0x32>
	__asm volatile
 8006dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dce:	f383 8811 	msr	BASEPRI, r3
 8006dd2:	f3bf 8f6f 	isb	sy
 8006dd6:	f3bf 8f4f 	dsb	sy
 8006dda:	623b      	str	r3, [r7, #32]
}
 8006ddc:	bf00      	nop
 8006dde:	bf00      	nop
 8006de0:	e7fd      	b.n	8006dde <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d103      	bne.n	8006df0 <xQueueReceive+0x40>
 8006de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d101      	bne.n	8006df4 <xQueueReceive+0x44>
 8006df0:	2301      	movs	r3, #1
 8006df2:	e000      	b.n	8006df6 <xQueueReceive+0x46>
 8006df4:	2300      	movs	r3, #0
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d10b      	bne.n	8006e12 <xQueueReceive+0x62>
	__asm volatile
 8006dfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dfe:	f383 8811 	msr	BASEPRI, r3
 8006e02:	f3bf 8f6f 	isb	sy
 8006e06:	f3bf 8f4f 	dsb	sy
 8006e0a:	61fb      	str	r3, [r7, #28]
}
 8006e0c:	bf00      	nop
 8006e0e:	bf00      	nop
 8006e10:	e7fd      	b.n	8006e0e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e12:	f001 f92d 	bl	8008070 <xTaskGetSchedulerState>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d102      	bne.n	8006e22 <xQueueReceive+0x72>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d101      	bne.n	8006e26 <xQueueReceive+0x76>
 8006e22:	2301      	movs	r3, #1
 8006e24:	e000      	b.n	8006e28 <xQueueReceive+0x78>
 8006e26:	2300      	movs	r3, #0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d10b      	bne.n	8006e44 <xQueueReceive+0x94>
	__asm volatile
 8006e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e30:	f383 8811 	msr	BASEPRI, r3
 8006e34:	f3bf 8f6f 	isb	sy
 8006e38:	f3bf 8f4f 	dsb	sy
 8006e3c:	61bb      	str	r3, [r7, #24]
}
 8006e3e:	bf00      	nop
 8006e40:	bf00      	nop
 8006e42:	e7fd      	b.n	8006e40 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e44:	f001 ff78 	bl	8008d38 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e4c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d01f      	beq.n	8006e94 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006e54:	68b9      	ldr	r1, [r7, #8]
 8006e56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e58:	f000 f8f6 	bl	8007048 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e5e:	1e5a      	subs	r2, r3, #1
 8006e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e62:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e66:	691b      	ldr	r3, [r3, #16]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d00f      	beq.n	8006e8c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e6e:	3310      	adds	r3, #16
 8006e70:	4618      	mov	r0, r3
 8006e72:	f000 fedf 	bl	8007c34 <xTaskRemoveFromEventList>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d007      	beq.n	8006e8c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006e7c:	4b3c      	ldr	r3, [pc, #240]	@ (8006f70 <xQueueReceive+0x1c0>)
 8006e7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e82:	601a      	str	r2, [r3, #0]
 8006e84:	f3bf 8f4f 	dsb	sy
 8006e88:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006e8c:	f001 ff86 	bl	8008d9c <vPortExitCritical>
				return pdPASS;
 8006e90:	2301      	movs	r3, #1
 8006e92:	e069      	b.n	8006f68 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d103      	bne.n	8006ea2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006e9a:	f001 ff7f 	bl	8008d9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	e062      	b.n	8006f68 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d106      	bne.n	8006eb6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ea8:	f107 0310 	add.w	r3, r7, #16
 8006eac:	4618      	mov	r0, r3
 8006eae:	f000 ff27 	bl	8007d00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006eb6:	f001 ff71 	bl	8008d9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006eba:	f000 fc2d 	bl	8007718 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ebe:	f001 ff3b 	bl	8008d38 <vPortEnterCritical>
 8006ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ec4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ec8:	b25b      	sxtb	r3, r3
 8006eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ece:	d103      	bne.n	8006ed8 <xQueueReceive+0x128>
 8006ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eda:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ede:	b25b      	sxtb	r3, r3
 8006ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ee4:	d103      	bne.n	8006eee <xQueueReceive+0x13e>
 8006ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006eee:	f001 ff55 	bl	8008d9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ef2:	1d3a      	adds	r2, r7, #4
 8006ef4:	f107 0310 	add.w	r3, r7, #16
 8006ef8:	4611      	mov	r1, r2
 8006efa:	4618      	mov	r0, r3
 8006efc:	f000 ff16 	bl	8007d2c <xTaskCheckForTimeOut>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d123      	bne.n	8006f4e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f08:	f000 f916 	bl	8007138 <prvIsQueueEmpty>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d017      	beq.n	8006f42 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f14:	3324      	adds	r3, #36	@ 0x24
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	4611      	mov	r1, r2
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f000 fe38 	bl	8007b90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006f20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f22:	f000 f8b7 	bl	8007094 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006f26:	f000 fc3d 	bl	80077a4 <xTaskResumeAll>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d189      	bne.n	8006e44 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006f30:	4b0f      	ldr	r3, [pc, #60]	@ (8006f70 <xQueueReceive+0x1c0>)
 8006f32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f36:	601a      	str	r2, [r3, #0]
 8006f38:	f3bf 8f4f 	dsb	sy
 8006f3c:	f3bf 8f6f 	isb	sy
 8006f40:	e780      	b.n	8006e44 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006f42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f44:	f000 f8a6 	bl	8007094 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f48:	f000 fc2c 	bl	80077a4 <xTaskResumeAll>
 8006f4c:	e77a      	b.n	8006e44 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006f4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f50:	f000 f8a0 	bl	8007094 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f54:	f000 fc26 	bl	80077a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f5a:	f000 f8ed 	bl	8007138 <prvIsQueueEmpty>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	f43f af6f 	beq.w	8006e44 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006f66:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3730      	adds	r7, #48	@ 0x30
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	e000ed04 	.word	0xe000ed04

08006f74 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b086      	sub	sp, #24
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006f80:	2300      	movs	r3, #0
 8006f82:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f88:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d10d      	bne.n	8006fae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d14d      	bne.n	8007036 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f001 f884 	bl	80080ac <xTaskPriorityDisinherit>
 8006fa4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	609a      	str	r2, [r3, #8]
 8006fac:	e043      	b.n	8007036 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d119      	bne.n	8006fe8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6858      	ldr	r0, [r3, #4]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	68b9      	ldr	r1, [r7, #8]
 8006fc0:	f003 fd33 	bl	800aa2a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	685a      	ldr	r2, [r3, #4]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fcc:	441a      	add	r2, r3
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	685a      	ldr	r2, [r3, #4]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d32b      	bcc.n	8007036 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	605a      	str	r2, [r3, #4]
 8006fe6:	e026      	b.n	8007036 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	68d8      	ldr	r0, [r3, #12]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	68b9      	ldr	r1, [r7, #8]
 8006ff4:	f003 fd19 	bl	800aa2a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	68da      	ldr	r2, [r3, #12]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007000:	425b      	negs	r3, r3
 8007002:	441a      	add	r2, r3
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	68da      	ldr	r2, [r3, #12]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	429a      	cmp	r2, r3
 8007012:	d207      	bcs.n	8007024 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	689a      	ldr	r2, [r3, #8]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800701c:	425b      	negs	r3, r3
 800701e:	441a      	add	r2, r3
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2b02      	cmp	r3, #2
 8007028:	d105      	bne.n	8007036 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d002      	beq.n	8007036 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	3b01      	subs	r3, #1
 8007034:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	1c5a      	adds	r2, r3, #1
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800703e:	697b      	ldr	r3, [r7, #20]
}
 8007040:	4618      	mov	r0, r3
 8007042:	3718      	adds	r7, #24
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007056:	2b00      	cmp	r3, #0
 8007058:	d018      	beq.n	800708c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	68da      	ldr	r2, [r3, #12]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007062:	441a      	add	r2, r3
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	68da      	ldr	r2, [r3, #12]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	429a      	cmp	r2, r3
 8007072:	d303      	bcc.n	800707c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	68d9      	ldr	r1, [r3, #12]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007084:	461a      	mov	r2, r3
 8007086:	6838      	ldr	r0, [r7, #0]
 8007088:	f003 fccf 	bl	800aa2a <memcpy>
	}
}
 800708c:	bf00      	nop
 800708e:	3708      	adds	r7, #8
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800709c:	f001 fe4c 	bl	8008d38 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80070a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80070a8:	e011      	b.n	80070ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d012      	beq.n	80070d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	3324      	adds	r3, #36	@ 0x24
 80070b6:	4618      	mov	r0, r3
 80070b8:	f000 fdbc 	bl	8007c34 <xTaskRemoveFromEventList>
 80070bc:	4603      	mov	r3, r0
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d001      	beq.n	80070c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80070c2:	f000 fe97 	bl	8007df4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80070c6:	7bfb      	ldrb	r3, [r7, #15]
 80070c8:	3b01      	subs	r3, #1
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80070ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	dce9      	bgt.n	80070aa <prvUnlockQueue+0x16>
 80070d6:	e000      	b.n	80070da <prvUnlockQueue+0x46>
					break;
 80070d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	22ff      	movs	r2, #255	@ 0xff
 80070de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80070e2:	f001 fe5b 	bl	8008d9c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80070e6:	f001 fe27 	bl	8008d38 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80070f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80070f2:	e011      	b.n	8007118 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	691b      	ldr	r3, [r3, #16]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d012      	beq.n	8007122 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	3310      	adds	r3, #16
 8007100:	4618      	mov	r0, r3
 8007102:	f000 fd97 	bl	8007c34 <xTaskRemoveFromEventList>
 8007106:	4603      	mov	r3, r0
 8007108:	2b00      	cmp	r3, #0
 800710a:	d001      	beq.n	8007110 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800710c:	f000 fe72 	bl	8007df4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007110:	7bbb      	ldrb	r3, [r7, #14]
 8007112:	3b01      	subs	r3, #1
 8007114:	b2db      	uxtb	r3, r3
 8007116:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007118:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800711c:	2b00      	cmp	r3, #0
 800711e:	dce9      	bgt.n	80070f4 <prvUnlockQueue+0x60>
 8007120:	e000      	b.n	8007124 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007122:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	22ff      	movs	r2, #255	@ 0xff
 8007128:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800712c:	f001 fe36 	bl	8008d9c <vPortExitCritical>
}
 8007130:	bf00      	nop
 8007132:	3710      	adds	r7, #16
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b084      	sub	sp, #16
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007140:	f001 fdfa 	bl	8008d38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007148:	2b00      	cmp	r3, #0
 800714a:	d102      	bne.n	8007152 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800714c:	2301      	movs	r3, #1
 800714e:	60fb      	str	r3, [r7, #12]
 8007150:	e001      	b.n	8007156 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007152:	2300      	movs	r3, #0
 8007154:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007156:	f001 fe21 	bl	8008d9c <vPortExitCritical>

	return xReturn;
 800715a:	68fb      	ldr	r3, [r7, #12]
}
 800715c:	4618      	mov	r0, r3
 800715e:	3710      	adds	r7, #16
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b084      	sub	sp, #16
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800716c:	f001 fde4 	bl	8008d38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007178:	429a      	cmp	r2, r3
 800717a:	d102      	bne.n	8007182 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800717c:	2301      	movs	r3, #1
 800717e:	60fb      	str	r3, [r7, #12]
 8007180:	e001      	b.n	8007186 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007182:	2300      	movs	r3, #0
 8007184:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007186:	f001 fe09 	bl	8008d9c <vPortExitCritical>

	return xReturn;
 800718a:	68fb      	ldr	r3, [r7, #12]
}
 800718c:	4618      	mov	r0, r3
 800718e:	3710      	adds	r7, #16
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007194:	b480      	push	{r7}
 8007196:	b085      	sub	sp, #20
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800719e:	2300      	movs	r3, #0
 80071a0:	60fb      	str	r3, [r7, #12]
 80071a2:	e014      	b.n	80071ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80071a4:	4a0f      	ldr	r2, [pc, #60]	@ (80071e4 <vQueueAddToRegistry+0x50>)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d10b      	bne.n	80071c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80071b0:	490c      	ldr	r1, [pc, #48]	@ (80071e4 <vQueueAddToRegistry+0x50>)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	683a      	ldr	r2, [r7, #0]
 80071b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80071ba:	4a0a      	ldr	r2, [pc, #40]	@ (80071e4 <vQueueAddToRegistry+0x50>)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	00db      	lsls	r3, r3, #3
 80071c0:	4413      	add	r3, r2
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80071c6:	e006      	b.n	80071d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	3301      	adds	r3, #1
 80071cc:	60fb      	str	r3, [r7, #12]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2b07      	cmp	r3, #7
 80071d2:	d9e7      	bls.n	80071a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80071d4:	bf00      	nop
 80071d6:	bf00      	nop
 80071d8:	3714      	adds	r7, #20
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr
 80071e2:	bf00      	nop
 80071e4:	24000a90 	.word	0x24000a90

080071e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b086      	sub	sp, #24
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	60f8      	str	r0, [r7, #12]
 80071f0:	60b9      	str	r1, [r7, #8]
 80071f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80071f8:	f001 fd9e 	bl	8008d38 <vPortEnterCritical>
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007202:	b25b      	sxtb	r3, r3
 8007204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007208:	d103      	bne.n	8007212 <vQueueWaitForMessageRestricted+0x2a>
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	2200      	movs	r2, #0
 800720e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007218:	b25b      	sxtb	r3, r3
 800721a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800721e:	d103      	bne.n	8007228 <vQueueWaitForMessageRestricted+0x40>
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	2200      	movs	r2, #0
 8007224:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007228:	f001 fdb8 	bl	8008d9c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007230:	2b00      	cmp	r3, #0
 8007232:	d106      	bne.n	8007242 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	3324      	adds	r3, #36	@ 0x24
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	68b9      	ldr	r1, [r7, #8]
 800723c:	4618      	mov	r0, r3
 800723e:	f000 fccd 	bl	8007bdc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007242:	6978      	ldr	r0, [r7, #20]
 8007244:	f7ff ff26 	bl	8007094 <prvUnlockQueue>
	}
 8007248:	bf00      	nop
 800724a:	3718      	adds	r7, #24
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007250:	b580      	push	{r7, lr}
 8007252:	b08e      	sub	sp, #56	@ 0x38
 8007254:	af04      	add	r7, sp, #16
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	60b9      	str	r1, [r7, #8]
 800725a:	607a      	str	r2, [r7, #4]
 800725c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800725e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007260:	2b00      	cmp	r3, #0
 8007262:	d10b      	bne.n	800727c <xTaskCreateStatic+0x2c>
	__asm volatile
 8007264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007268:	f383 8811 	msr	BASEPRI, r3
 800726c:	f3bf 8f6f 	isb	sy
 8007270:	f3bf 8f4f 	dsb	sy
 8007274:	623b      	str	r3, [r7, #32]
}
 8007276:	bf00      	nop
 8007278:	bf00      	nop
 800727a:	e7fd      	b.n	8007278 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800727c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800727e:	2b00      	cmp	r3, #0
 8007280:	d10b      	bne.n	800729a <xTaskCreateStatic+0x4a>
	__asm volatile
 8007282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007286:	f383 8811 	msr	BASEPRI, r3
 800728a:	f3bf 8f6f 	isb	sy
 800728e:	f3bf 8f4f 	dsb	sy
 8007292:	61fb      	str	r3, [r7, #28]
}
 8007294:	bf00      	nop
 8007296:	bf00      	nop
 8007298:	e7fd      	b.n	8007296 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800729a:	23a8      	movs	r3, #168	@ 0xa8
 800729c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	2ba8      	cmp	r3, #168	@ 0xa8
 80072a2:	d00b      	beq.n	80072bc <xTaskCreateStatic+0x6c>
	__asm volatile
 80072a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072a8:	f383 8811 	msr	BASEPRI, r3
 80072ac:	f3bf 8f6f 	isb	sy
 80072b0:	f3bf 8f4f 	dsb	sy
 80072b4:	61bb      	str	r3, [r7, #24]
}
 80072b6:	bf00      	nop
 80072b8:	bf00      	nop
 80072ba:	e7fd      	b.n	80072b8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80072bc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80072be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d01e      	beq.n	8007302 <xTaskCreateStatic+0xb2>
 80072c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d01b      	beq.n	8007302 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80072ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072cc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80072ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80072d2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80072d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d6:	2202      	movs	r2, #2
 80072d8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80072dc:	2300      	movs	r3, #0
 80072de:	9303      	str	r3, [sp, #12]
 80072e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e2:	9302      	str	r3, [sp, #8]
 80072e4:	f107 0314 	add.w	r3, r7, #20
 80072e8:	9301      	str	r3, [sp, #4]
 80072ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ec:	9300      	str	r3, [sp, #0]
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	68b9      	ldr	r1, [r7, #8]
 80072f4:	68f8      	ldr	r0, [r7, #12]
 80072f6:	f000 f851 	bl	800739c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80072fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80072fc:	f000 f8f6 	bl	80074ec <prvAddNewTaskToReadyList>
 8007300:	e001      	b.n	8007306 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007302:	2300      	movs	r3, #0
 8007304:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007306:	697b      	ldr	r3, [r7, #20]
	}
 8007308:	4618      	mov	r0, r3
 800730a:	3728      	adds	r7, #40	@ 0x28
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007310:	b580      	push	{r7, lr}
 8007312:	b08c      	sub	sp, #48	@ 0x30
 8007314:	af04      	add	r7, sp, #16
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	603b      	str	r3, [r7, #0]
 800731c:	4613      	mov	r3, r2
 800731e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007320:	88fb      	ldrh	r3, [r7, #6]
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	4618      	mov	r0, r3
 8007326:	f001 ff0d 	bl	8009144 <pvPortMalloc>
 800732a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d00e      	beq.n	8007350 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007332:	20a8      	movs	r0, #168	@ 0xa8
 8007334:	f001 ff06 	bl	8009144 <pvPortMalloc>
 8007338:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d003      	beq.n	8007348 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007340:	69fb      	ldr	r3, [r7, #28]
 8007342:	697a      	ldr	r2, [r7, #20]
 8007344:	631a      	str	r2, [r3, #48]	@ 0x30
 8007346:	e005      	b.n	8007354 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007348:	6978      	ldr	r0, [r7, #20]
 800734a:	f001 ffc9 	bl	80092e0 <vPortFree>
 800734e:	e001      	b.n	8007354 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007350:	2300      	movs	r3, #0
 8007352:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007354:	69fb      	ldr	r3, [r7, #28]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d017      	beq.n	800738a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800735a:	69fb      	ldr	r3, [r7, #28]
 800735c:	2200      	movs	r2, #0
 800735e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007362:	88fa      	ldrh	r2, [r7, #6]
 8007364:	2300      	movs	r3, #0
 8007366:	9303      	str	r3, [sp, #12]
 8007368:	69fb      	ldr	r3, [r7, #28]
 800736a:	9302      	str	r3, [sp, #8]
 800736c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800736e:	9301      	str	r3, [sp, #4]
 8007370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007372:	9300      	str	r3, [sp, #0]
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	68b9      	ldr	r1, [r7, #8]
 8007378:	68f8      	ldr	r0, [r7, #12]
 800737a:	f000 f80f 	bl	800739c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800737e:	69f8      	ldr	r0, [r7, #28]
 8007380:	f000 f8b4 	bl	80074ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007384:	2301      	movs	r3, #1
 8007386:	61bb      	str	r3, [r7, #24]
 8007388:	e002      	b.n	8007390 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800738a:	f04f 33ff 	mov.w	r3, #4294967295
 800738e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007390:	69bb      	ldr	r3, [r7, #24]
	}
 8007392:	4618      	mov	r0, r3
 8007394:	3720      	adds	r7, #32
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
	...

0800739c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b088      	sub	sp, #32
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	60f8      	str	r0, [r7, #12]
 80073a4:	60b9      	str	r1, [r7, #8]
 80073a6:	607a      	str	r2, [r7, #4]
 80073a8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80073aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ac:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	009b      	lsls	r3, r3, #2
 80073b2:	461a      	mov	r2, r3
 80073b4:	21a5      	movs	r1, #165	@ 0xa5
 80073b6:	f003 fa0f 	bl	800a7d8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80073ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80073be:	6879      	ldr	r1, [r7, #4]
 80073c0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80073c4:	440b      	add	r3, r1
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	4413      	add	r3, r2
 80073ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80073cc:	69bb      	ldr	r3, [r7, #24]
 80073ce:	f023 0307 	bic.w	r3, r3, #7
 80073d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	f003 0307 	and.w	r3, r3, #7
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d00b      	beq.n	80073f6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80073de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073e2:	f383 8811 	msr	BASEPRI, r3
 80073e6:	f3bf 8f6f 	isb	sy
 80073ea:	f3bf 8f4f 	dsb	sy
 80073ee:	617b      	str	r3, [r7, #20]
}
 80073f0:	bf00      	nop
 80073f2:	bf00      	nop
 80073f4:	e7fd      	b.n	80073f2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d01f      	beq.n	800743c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80073fc:	2300      	movs	r3, #0
 80073fe:	61fb      	str	r3, [r7, #28]
 8007400:	e012      	b.n	8007428 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007402:	68ba      	ldr	r2, [r7, #8]
 8007404:	69fb      	ldr	r3, [r7, #28]
 8007406:	4413      	add	r3, r2
 8007408:	7819      	ldrb	r1, [r3, #0]
 800740a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800740c:	69fb      	ldr	r3, [r7, #28]
 800740e:	4413      	add	r3, r2
 8007410:	3334      	adds	r3, #52	@ 0x34
 8007412:	460a      	mov	r2, r1
 8007414:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007416:	68ba      	ldr	r2, [r7, #8]
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	4413      	add	r3, r2
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d006      	beq.n	8007430 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007422:	69fb      	ldr	r3, [r7, #28]
 8007424:	3301      	adds	r3, #1
 8007426:	61fb      	str	r3, [r7, #28]
 8007428:	69fb      	ldr	r3, [r7, #28]
 800742a:	2b0f      	cmp	r3, #15
 800742c:	d9e9      	bls.n	8007402 <prvInitialiseNewTask+0x66>
 800742e:	e000      	b.n	8007432 <prvInitialiseNewTask+0x96>
			{
				break;
 8007430:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007434:	2200      	movs	r2, #0
 8007436:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800743a:	e003      	b.n	8007444 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800743c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800743e:	2200      	movs	r2, #0
 8007440:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007446:	2b37      	cmp	r3, #55	@ 0x37
 8007448:	d901      	bls.n	800744e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800744a:	2337      	movs	r3, #55	@ 0x37
 800744c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800744e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007450:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007452:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007456:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007458:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800745a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800745c:	2200      	movs	r2, #0
 800745e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007462:	3304      	adds	r3, #4
 8007464:	4618      	mov	r0, r3
 8007466:	f7ff f965 	bl	8006734 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800746a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800746c:	3318      	adds	r3, #24
 800746e:	4618      	mov	r0, r3
 8007470:	f7ff f960 	bl	8006734 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007476:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007478:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800747a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800747c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007482:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007486:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007488:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800748a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800748c:	2200      	movs	r2, #0
 800748e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007494:	2200      	movs	r2, #0
 8007496:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800749a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800749c:	3354      	adds	r3, #84	@ 0x54
 800749e:	224c      	movs	r2, #76	@ 0x4c
 80074a0:	2100      	movs	r1, #0
 80074a2:	4618      	mov	r0, r3
 80074a4:	f003 f998 	bl	800a7d8 <memset>
 80074a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074aa:	4a0d      	ldr	r2, [pc, #52]	@ (80074e0 <prvInitialiseNewTask+0x144>)
 80074ac:	659a      	str	r2, [r3, #88]	@ 0x58
 80074ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074b0:	4a0c      	ldr	r2, [pc, #48]	@ (80074e4 <prvInitialiseNewTask+0x148>)
 80074b2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80074b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074b6:	4a0c      	ldr	r2, [pc, #48]	@ (80074e8 <prvInitialiseNewTask+0x14c>)
 80074b8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80074ba:	683a      	ldr	r2, [r7, #0]
 80074bc:	68f9      	ldr	r1, [r7, #12]
 80074be:	69b8      	ldr	r0, [r7, #24]
 80074c0:	f001 fb08 	bl	8008ad4 <pxPortInitialiseStack>
 80074c4:	4602      	mov	r2, r0
 80074c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074c8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80074ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d002      	beq.n	80074d6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80074d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074d6:	bf00      	nop
 80074d8:	3720      	adds	r7, #32
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	24004d38 	.word	0x24004d38
 80074e4:	24004da0 	.word	0x24004da0
 80074e8:	24004e08 	.word	0x24004e08

080074ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b082      	sub	sp, #8
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80074f4:	f001 fc20 	bl	8008d38 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80074f8:	4b2d      	ldr	r3, [pc, #180]	@ (80075b0 <prvAddNewTaskToReadyList+0xc4>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	3301      	adds	r3, #1
 80074fe:	4a2c      	ldr	r2, [pc, #176]	@ (80075b0 <prvAddNewTaskToReadyList+0xc4>)
 8007500:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007502:	4b2c      	ldr	r3, [pc, #176]	@ (80075b4 <prvAddNewTaskToReadyList+0xc8>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d109      	bne.n	800751e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800750a:	4a2a      	ldr	r2, [pc, #168]	@ (80075b4 <prvAddNewTaskToReadyList+0xc8>)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007510:	4b27      	ldr	r3, [pc, #156]	@ (80075b0 <prvAddNewTaskToReadyList+0xc4>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	2b01      	cmp	r3, #1
 8007516:	d110      	bne.n	800753a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007518:	f000 fce6 	bl	8007ee8 <prvInitialiseTaskLists>
 800751c:	e00d      	b.n	800753a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800751e:	4b26      	ldr	r3, [pc, #152]	@ (80075b8 <prvAddNewTaskToReadyList+0xcc>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d109      	bne.n	800753a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007526:	4b23      	ldr	r3, [pc, #140]	@ (80075b4 <prvAddNewTaskToReadyList+0xc8>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007530:	429a      	cmp	r2, r3
 8007532:	d802      	bhi.n	800753a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007534:	4a1f      	ldr	r2, [pc, #124]	@ (80075b4 <prvAddNewTaskToReadyList+0xc8>)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800753a:	4b20      	ldr	r3, [pc, #128]	@ (80075bc <prvAddNewTaskToReadyList+0xd0>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	3301      	adds	r3, #1
 8007540:	4a1e      	ldr	r2, [pc, #120]	@ (80075bc <prvAddNewTaskToReadyList+0xd0>)
 8007542:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007544:	4b1d      	ldr	r3, [pc, #116]	@ (80075bc <prvAddNewTaskToReadyList+0xd0>)
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007550:	4b1b      	ldr	r3, [pc, #108]	@ (80075c0 <prvAddNewTaskToReadyList+0xd4>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	429a      	cmp	r2, r3
 8007556:	d903      	bls.n	8007560 <prvAddNewTaskToReadyList+0x74>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800755c:	4a18      	ldr	r2, [pc, #96]	@ (80075c0 <prvAddNewTaskToReadyList+0xd4>)
 800755e:	6013      	str	r3, [r2, #0]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007564:	4613      	mov	r3, r2
 8007566:	009b      	lsls	r3, r3, #2
 8007568:	4413      	add	r3, r2
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	4a15      	ldr	r2, [pc, #84]	@ (80075c4 <prvAddNewTaskToReadyList+0xd8>)
 800756e:	441a      	add	r2, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	3304      	adds	r3, #4
 8007574:	4619      	mov	r1, r3
 8007576:	4610      	mov	r0, r2
 8007578:	f7ff f8e9 	bl	800674e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800757c:	f001 fc0e 	bl	8008d9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007580:	4b0d      	ldr	r3, [pc, #52]	@ (80075b8 <prvAddNewTaskToReadyList+0xcc>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d00e      	beq.n	80075a6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007588:	4b0a      	ldr	r3, [pc, #40]	@ (80075b4 <prvAddNewTaskToReadyList+0xc8>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007592:	429a      	cmp	r2, r3
 8007594:	d207      	bcs.n	80075a6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007596:	4b0c      	ldr	r3, [pc, #48]	@ (80075c8 <prvAddNewTaskToReadyList+0xdc>)
 8007598:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800759c:	601a      	str	r2, [r3, #0]
 800759e:	f3bf 8f4f 	dsb	sy
 80075a2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075a6:	bf00      	nop
 80075a8:	3708      	adds	r7, #8
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	24000fa4 	.word	0x24000fa4
 80075b4:	24000ad0 	.word	0x24000ad0
 80075b8:	24000fb0 	.word	0x24000fb0
 80075bc:	24000fc0 	.word	0x24000fc0
 80075c0:	24000fac 	.word	0x24000fac
 80075c4:	24000ad4 	.word	0x24000ad4
 80075c8:	e000ed04 	.word	0xe000ed04

080075cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80075d4:	2300      	movs	r3, #0
 80075d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d018      	beq.n	8007610 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80075de:	4b14      	ldr	r3, [pc, #80]	@ (8007630 <vTaskDelay+0x64>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d00b      	beq.n	80075fe <vTaskDelay+0x32>
	__asm volatile
 80075e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ea:	f383 8811 	msr	BASEPRI, r3
 80075ee:	f3bf 8f6f 	isb	sy
 80075f2:	f3bf 8f4f 	dsb	sy
 80075f6:	60bb      	str	r3, [r7, #8]
}
 80075f8:	bf00      	nop
 80075fa:	bf00      	nop
 80075fc:	e7fd      	b.n	80075fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80075fe:	f000 f88b 	bl	8007718 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007602:	2100      	movs	r1, #0
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 feb7 	bl	8008378 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800760a:	f000 f8cb 	bl	80077a4 <xTaskResumeAll>
 800760e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d107      	bne.n	8007626 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007616:	4b07      	ldr	r3, [pc, #28]	@ (8007634 <vTaskDelay+0x68>)
 8007618:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800761c:	601a      	str	r2, [r3, #0]
 800761e:	f3bf 8f4f 	dsb	sy
 8007622:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007626:	bf00      	nop
 8007628:	3710      	adds	r7, #16
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
 800762e:	bf00      	nop
 8007630:	24000fcc 	.word	0x24000fcc
 8007634:	e000ed04 	.word	0xe000ed04

08007638 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b08a      	sub	sp, #40	@ 0x28
 800763c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800763e:	2300      	movs	r3, #0
 8007640:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007642:	2300      	movs	r3, #0
 8007644:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007646:	463a      	mov	r2, r7
 8007648:	1d39      	adds	r1, r7, #4
 800764a:	f107 0308 	add.w	r3, r7, #8
 800764e:	4618      	mov	r0, r3
 8007650:	f7ff f81c 	bl	800668c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007654:	6839      	ldr	r1, [r7, #0]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	68ba      	ldr	r2, [r7, #8]
 800765a:	9202      	str	r2, [sp, #8]
 800765c:	9301      	str	r3, [sp, #4]
 800765e:	2300      	movs	r3, #0
 8007660:	9300      	str	r3, [sp, #0]
 8007662:	2300      	movs	r3, #0
 8007664:	460a      	mov	r2, r1
 8007666:	4924      	ldr	r1, [pc, #144]	@ (80076f8 <vTaskStartScheduler+0xc0>)
 8007668:	4824      	ldr	r0, [pc, #144]	@ (80076fc <vTaskStartScheduler+0xc4>)
 800766a:	f7ff fdf1 	bl	8007250 <xTaskCreateStatic>
 800766e:	4603      	mov	r3, r0
 8007670:	4a23      	ldr	r2, [pc, #140]	@ (8007700 <vTaskStartScheduler+0xc8>)
 8007672:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007674:	4b22      	ldr	r3, [pc, #136]	@ (8007700 <vTaskStartScheduler+0xc8>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d002      	beq.n	8007682 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800767c:	2301      	movs	r3, #1
 800767e:	617b      	str	r3, [r7, #20]
 8007680:	e001      	b.n	8007686 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007682:	2300      	movs	r3, #0
 8007684:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	2b01      	cmp	r3, #1
 800768a:	d102      	bne.n	8007692 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800768c:	f000 fec8 	bl	8008420 <xTimerCreateTimerTask>
 8007690:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	2b01      	cmp	r3, #1
 8007696:	d11b      	bne.n	80076d0 <vTaskStartScheduler+0x98>
	__asm volatile
 8007698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800769c:	f383 8811 	msr	BASEPRI, r3
 80076a0:	f3bf 8f6f 	isb	sy
 80076a4:	f3bf 8f4f 	dsb	sy
 80076a8:	613b      	str	r3, [r7, #16]
}
 80076aa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80076ac:	4b15      	ldr	r3, [pc, #84]	@ (8007704 <vTaskStartScheduler+0xcc>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	3354      	adds	r3, #84	@ 0x54
 80076b2:	4a15      	ldr	r2, [pc, #84]	@ (8007708 <vTaskStartScheduler+0xd0>)
 80076b4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80076b6:	4b15      	ldr	r3, [pc, #84]	@ (800770c <vTaskStartScheduler+0xd4>)
 80076b8:	f04f 32ff 	mov.w	r2, #4294967295
 80076bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80076be:	4b14      	ldr	r3, [pc, #80]	@ (8007710 <vTaskStartScheduler+0xd8>)
 80076c0:	2201      	movs	r2, #1
 80076c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80076c4:	4b13      	ldr	r3, [pc, #76]	@ (8007714 <vTaskStartScheduler+0xdc>)
 80076c6:	2200      	movs	r2, #0
 80076c8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80076ca:	f001 fa91 	bl	8008bf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80076ce:	e00f      	b.n	80076f0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076d6:	d10b      	bne.n	80076f0 <vTaskStartScheduler+0xb8>
	__asm volatile
 80076d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076dc:	f383 8811 	msr	BASEPRI, r3
 80076e0:	f3bf 8f6f 	isb	sy
 80076e4:	f3bf 8f4f 	dsb	sy
 80076e8:	60fb      	str	r3, [r7, #12]
}
 80076ea:	bf00      	nop
 80076ec:	bf00      	nop
 80076ee:	e7fd      	b.n	80076ec <vTaskStartScheduler+0xb4>
}
 80076f0:	bf00      	nop
 80076f2:	3718      	adds	r7, #24
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	0800dc14 	.word	0x0800dc14
 80076fc:	08007e0d 	.word	0x08007e0d
 8007700:	24000fc8 	.word	0x24000fc8
 8007704:	24000ad0 	.word	0x24000ad0
 8007708:	24000020 	.word	0x24000020
 800770c:	24000fc4 	.word	0x24000fc4
 8007710:	24000fb0 	.word	0x24000fb0
 8007714:	24000fa8 	.word	0x24000fa8

08007718 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007718:	b480      	push	{r7}
 800771a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800771c:	4b04      	ldr	r3, [pc, #16]	@ (8007730 <vTaskSuspendAll+0x18>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	3301      	adds	r3, #1
 8007722:	4a03      	ldr	r2, [pc, #12]	@ (8007730 <vTaskSuspendAll+0x18>)
 8007724:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007726:	bf00      	nop
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr
 8007730:	24000fcc 	.word	0x24000fcc

08007734 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800773a:	2300      	movs	r3, #0
 800773c:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800773e:	4b14      	ldr	r3, [pc, #80]	@ (8007790 <prvGetExpectedIdleTime+0x5c>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d001      	beq.n	800774a <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 8007746:	2301      	movs	r3, #1
 8007748:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800774a:	4b12      	ldr	r3, [pc, #72]	@ (8007794 <prvGetExpectedIdleTime+0x60>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007750:	2b00      	cmp	r3, #0
 8007752:	d002      	beq.n	800775a <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 8007754:	2300      	movs	r3, #0
 8007756:	607b      	str	r3, [r7, #4]
 8007758:	e012      	b.n	8007780 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800775a:	4b0f      	ldr	r3, [pc, #60]	@ (8007798 <prvGetExpectedIdleTime+0x64>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	2b01      	cmp	r3, #1
 8007760:	d902      	bls.n	8007768 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 8007762:	2300      	movs	r3, #0
 8007764:	607b      	str	r3, [r7, #4]
 8007766:	e00b      	b.n	8007780 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d002      	beq.n	8007774 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800776e:	2300      	movs	r3, #0
 8007770:	607b      	str	r3, [r7, #4]
 8007772:	e005      	b.n	8007780 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 8007774:	4b09      	ldr	r3, [pc, #36]	@ (800779c <prvGetExpectedIdleTime+0x68>)
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	4b09      	ldr	r3, [pc, #36]	@ (80077a0 <prvGetExpectedIdleTime+0x6c>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	1ad3      	subs	r3, r2, r3
 800777e:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 8007780:	687b      	ldr	r3, [r7, #4]
	}
 8007782:	4618      	mov	r0, r3
 8007784:	370c      	adds	r7, #12
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr
 800778e:	bf00      	nop
 8007790:	24000fac 	.word	0x24000fac
 8007794:	24000ad0 	.word	0x24000ad0
 8007798:	24000ad4 	.word	0x24000ad4
 800779c:	24000fc4 	.word	0x24000fc4
 80077a0:	24000fa8 	.word	0x24000fa8

080077a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80077aa:	2300      	movs	r3, #0
 80077ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80077ae:	2300      	movs	r3, #0
 80077b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80077b2:	4b42      	ldr	r3, [pc, #264]	@ (80078bc <xTaskResumeAll+0x118>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d10b      	bne.n	80077d2 <xTaskResumeAll+0x2e>
	__asm volatile
 80077ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077be:	f383 8811 	msr	BASEPRI, r3
 80077c2:	f3bf 8f6f 	isb	sy
 80077c6:	f3bf 8f4f 	dsb	sy
 80077ca:	603b      	str	r3, [r7, #0]
}
 80077cc:	bf00      	nop
 80077ce:	bf00      	nop
 80077d0:	e7fd      	b.n	80077ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80077d2:	f001 fab1 	bl	8008d38 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80077d6:	4b39      	ldr	r3, [pc, #228]	@ (80078bc <xTaskResumeAll+0x118>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	3b01      	subs	r3, #1
 80077dc:	4a37      	ldr	r2, [pc, #220]	@ (80078bc <xTaskResumeAll+0x118>)
 80077de:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077e0:	4b36      	ldr	r3, [pc, #216]	@ (80078bc <xTaskResumeAll+0x118>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d162      	bne.n	80078ae <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80077e8:	4b35      	ldr	r3, [pc, #212]	@ (80078c0 <xTaskResumeAll+0x11c>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d05e      	beq.n	80078ae <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80077f0:	e02f      	b.n	8007852 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077f2:	4b34      	ldr	r3, [pc, #208]	@ (80078c4 <xTaskResumeAll+0x120>)
 80077f4:	68db      	ldr	r3, [r3, #12]
 80077f6:	68db      	ldr	r3, [r3, #12]
 80077f8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	3318      	adds	r3, #24
 80077fe:	4618      	mov	r0, r3
 8007800:	f7ff f802 	bl	8006808 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	3304      	adds	r3, #4
 8007808:	4618      	mov	r0, r3
 800780a:	f7fe fffd 	bl	8006808 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007812:	4b2d      	ldr	r3, [pc, #180]	@ (80078c8 <xTaskResumeAll+0x124>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	429a      	cmp	r2, r3
 8007818:	d903      	bls.n	8007822 <xTaskResumeAll+0x7e>
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800781e:	4a2a      	ldr	r2, [pc, #168]	@ (80078c8 <xTaskResumeAll+0x124>)
 8007820:	6013      	str	r3, [r2, #0]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007826:	4613      	mov	r3, r2
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	4413      	add	r3, r2
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	4a27      	ldr	r2, [pc, #156]	@ (80078cc <xTaskResumeAll+0x128>)
 8007830:	441a      	add	r2, r3
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	3304      	adds	r3, #4
 8007836:	4619      	mov	r1, r3
 8007838:	4610      	mov	r0, r2
 800783a:	f7fe ff88 	bl	800674e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007842:	4b23      	ldr	r3, [pc, #140]	@ (80078d0 <xTaskResumeAll+0x12c>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007848:	429a      	cmp	r2, r3
 800784a:	d302      	bcc.n	8007852 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800784c:	4b21      	ldr	r3, [pc, #132]	@ (80078d4 <xTaskResumeAll+0x130>)
 800784e:	2201      	movs	r2, #1
 8007850:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007852:	4b1c      	ldr	r3, [pc, #112]	@ (80078c4 <xTaskResumeAll+0x120>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d1cb      	bne.n	80077f2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d001      	beq.n	8007864 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007860:	f000 fbe6 	bl	8008030 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007864:	4b1c      	ldr	r3, [pc, #112]	@ (80078d8 <xTaskResumeAll+0x134>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d010      	beq.n	8007892 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007870:	f000 f86e 	bl	8007950 <xTaskIncrementTick>
 8007874:	4603      	mov	r3, r0
 8007876:	2b00      	cmp	r3, #0
 8007878:	d002      	beq.n	8007880 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800787a:	4b16      	ldr	r3, [pc, #88]	@ (80078d4 <xTaskResumeAll+0x130>)
 800787c:	2201      	movs	r2, #1
 800787e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	3b01      	subs	r3, #1
 8007884:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d1f1      	bne.n	8007870 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800788c:	4b12      	ldr	r3, [pc, #72]	@ (80078d8 <xTaskResumeAll+0x134>)
 800788e:	2200      	movs	r2, #0
 8007890:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007892:	4b10      	ldr	r3, [pc, #64]	@ (80078d4 <xTaskResumeAll+0x130>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d009      	beq.n	80078ae <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800789a:	2301      	movs	r3, #1
 800789c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800789e:	4b0f      	ldr	r3, [pc, #60]	@ (80078dc <xTaskResumeAll+0x138>)
 80078a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078a4:	601a      	str	r2, [r3, #0]
 80078a6:	f3bf 8f4f 	dsb	sy
 80078aa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80078ae:	f001 fa75 	bl	8008d9c <vPortExitCritical>

	return xAlreadyYielded;
 80078b2:	68bb      	ldr	r3, [r7, #8]
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3710      	adds	r7, #16
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}
 80078bc:	24000fcc 	.word	0x24000fcc
 80078c0:	24000fa4 	.word	0x24000fa4
 80078c4:	24000f64 	.word	0x24000f64
 80078c8:	24000fac 	.word	0x24000fac
 80078cc:	24000ad4 	.word	0x24000ad4
 80078d0:	24000ad0 	.word	0x24000ad0
 80078d4:	24000fb8 	.word	0x24000fb8
 80078d8:	24000fb4 	.word	0x24000fb4
 80078dc:	e000ed04 	.word	0xe000ed04

080078e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80078e0:	b480      	push	{r7}
 80078e2:	b083      	sub	sp, #12
 80078e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80078e6:	4b05      	ldr	r3, [pc, #20]	@ (80078fc <xTaskGetTickCount+0x1c>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80078ec:	687b      	ldr	r3, [r7, #4]
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	370c      	adds	r7, #12
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr
 80078fa:	bf00      	nop
 80078fc:	24000fa8 	.word	0x24000fa8

08007900 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 8007900:	b480      	push	{r7}
 8007902:	b085      	sub	sp, #20
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 8007908:	4b0f      	ldr	r3, [pc, #60]	@ (8007948 <vTaskStepTick+0x48>)
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	441a      	add	r2, r3
 8007910:	4b0e      	ldr	r3, [pc, #56]	@ (800794c <vTaskStepTick+0x4c>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	429a      	cmp	r2, r3
 8007916:	d90b      	bls.n	8007930 <vTaskStepTick+0x30>
	__asm volatile
 8007918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800791c:	f383 8811 	msr	BASEPRI, r3
 8007920:	f3bf 8f6f 	isb	sy
 8007924:	f3bf 8f4f 	dsb	sy
 8007928:	60fb      	str	r3, [r7, #12]
}
 800792a:	bf00      	nop
 800792c:	bf00      	nop
 800792e:	e7fd      	b.n	800792c <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 8007930:	4b05      	ldr	r3, [pc, #20]	@ (8007948 <vTaskStepTick+0x48>)
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	4413      	add	r3, r2
 8007938:	4a03      	ldr	r2, [pc, #12]	@ (8007948 <vTaskStepTick+0x48>)
 800793a:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 800793c:	bf00      	nop
 800793e:	3714      	adds	r7, #20
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr
 8007948:	24000fa8 	.word	0x24000fa8
 800794c:	24000fc4 	.word	0x24000fc4

08007950 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b086      	sub	sp, #24
 8007954:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007956:	2300      	movs	r3, #0
 8007958:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800795a:	4b4f      	ldr	r3, [pc, #316]	@ (8007a98 <xTaskIncrementTick+0x148>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	2b00      	cmp	r3, #0
 8007960:	f040 8090 	bne.w	8007a84 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007964:	4b4d      	ldr	r3, [pc, #308]	@ (8007a9c <xTaskIncrementTick+0x14c>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	3301      	adds	r3, #1
 800796a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800796c:	4a4b      	ldr	r2, [pc, #300]	@ (8007a9c <xTaskIncrementTick+0x14c>)
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d121      	bne.n	80079bc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007978:	4b49      	ldr	r3, [pc, #292]	@ (8007aa0 <xTaskIncrementTick+0x150>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d00b      	beq.n	800799a <xTaskIncrementTick+0x4a>
	__asm volatile
 8007982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007986:	f383 8811 	msr	BASEPRI, r3
 800798a:	f3bf 8f6f 	isb	sy
 800798e:	f3bf 8f4f 	dsb	sy
 8007992:	603b      	str	r3, [r7, #0]
}
 8007994:	bf00      	nop
 8007996:	bf00      	nop
 8007998:	e7fd      	b.n	8007996 <xTaskIncrementTick+0x46>
 800799a:	4b41      	ldr	r3, [pc, #260]	@ (8007aa0 <xTaskIncrementTick+0x150>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	60fb      	str	r3, [r7, #12]
 80079a0:	4b40      	ldr	r3, [pc, #256]	@ (8007aa4 <xTaskIncrementTick+0x154>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a3e      	ldr	r2, [pc, #248]	@ (8007aa0 <xTaskIncrementTick+0x150>)
 80079a6:	6013      	str	r3, [r2, #0]
 80079a8:	4a3e      	ldr	r2, [pc, #248]	@ (8007aa4 <xTaskIncrementTick+0x154>)
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	6013      	str	r3, [r2, #0]
 80079ae:	4b3e      	ldr	r3, [pc, #248]	@ (8007aa8 <xTaskIncrementTick+0x158>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	3301      	adds	r3, #1
 80079b4:	4a3c      	ldr	r2, [pc, #240]	@ (8007aa8 <xTaskIncrementTick+0x158>)
 80079b6:	6013      	str	r3, [r2, #0]
 80079b8:	f000 fb3a 	bl	8008030 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80079bc:	4b3b      	ldr	r3, [pc, #236]	@ (8007aac <xTaskIncrementTick+0x15c>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	693a      	ldr	r2, [r7, #16]
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d349      	bcc.n	8007a5a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079c6:	4b36      	ldr	r3, [pc, #216]	@ (8007aa0 <xTaskIncrementTick+0x150>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d104      	bne.n	80079da <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079d0:	4b36      	ldr	r3, [pc, #216]	@ (8007aac <xTaskIncrementTick+0x15c>)
 80079d2:	f04f 32ff 	mov.w	r2, #4294967295
 80079d6:	601a      	str	r2, [r3, #0]
					break;
 80079d8:	e03f      	b.n	8007a5a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079da:	4b31      	ldr	r3, [pc, #196]	@ (8007aa0 <xTaskIncrementTick+0x150>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	68db      	ldr	r3, [r3, #12]
 80079e2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80079ea:	693a      	ldr	r2, [r7, #16]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d203      	bcs.n	80079fa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80079f2:	4a2e      	ldr	r2, [pc, #184]	@ (8007aac <xTaskIncrementTick+0x15c>)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80079f8:	e02f      	b.n	8007a5a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	3304      	adds	r3, #4
 80079fe:	4618      	mov	r0, r3
 8007a00:	f7fe ff02 	bl	8006808 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d004      	beq.n	8007a16 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	3318      	adds	r3, #24
 8007a10:	4618      	mov	r0, r3
 8007a12:	f7fe fef9 	bl	8006808 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a1a:	4b25      	ldr	r3, [pc, #148]	@ (8007ab0 <xTaskIncrementTick+0x160>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d903      	bls.n	8007a2a <xTaskIncrementTick+0xda>
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a26:	4a22      	ldr	r2, [pc, #136]	@ (8007ab0 <xTaskIncrementTick+0x160>)
 8007a28:	6013      	str	r3, [r2, #0]
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a2e:	4613      	mov	r3, r2
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	4413      	add	r3, r2
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	4a1f      	ldr	r2, [pc, #124]	@ (8007ab4 <xTaskIncrementTick+0x164>)
 8007a38:	441a      	add	r2, r3
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	3304      	adds	r3, #4
 8007a3e:	4619      	mov	r1, r3
 8007a40:	4610      	mov	r0, r2
 8007a42:	f7fe fe84 	bl	800674e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a4a:	4b1b      	ldr	r3, [pc, #108]	@ (8007ab8 <xTaskIncrementTick+0x168>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d3b8      	bcc.n	80079c6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007a54:	2301      	movs	r3, #1
 8007a56:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a58:	e7b5      	b.n	80079c6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007a5a:	4b17      	ldr	r3, [pc, #92]	@ (8007ab8 <xTaskIncrementTick+0x168>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a60:	4914      	ldr	r1, [pc, #80]	@ (8007ab4 <xTaskIncrementTick+0x164>)
 8007a62:	4613      	mov	r3, r2
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	4413      	add	r3, r2
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	440b      	add	r3, r1
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d901      	bls.n	8007a76 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007a72:	2301      	movs	r3, #1
 8007a74:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007a76:	4b11      	ldr	r3, [pc, #68]	@ (8007abc <xTaskIncrementTick+0x16c>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d007      	beq.n	8007a8e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	617b      	str	r3, [r7, #20]
 8007a82:	e004      	b.n	8007a8e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007a84:	4b0e      	ldr	r3, [pc, #56]	@ (8007ac0 <xTaskIncrementTick+0x170>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	3301      	adds	r3, #1
 8007a8a:	4a0d      	ldr	r2, [pc, #52]	@ (8007ac0 <xTaskIncrementTick+0x170>)
 8007a8c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007a8e:	697b      	ldr	r3, [r7, #20]
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3718      	adds	r7, #24
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}
 8007a98:	24000fcc 	.word	0x24000fcc
 8007a9c:	24000fa8 	.word	0x24000fa8
 8007aa0:	24000f5c 	.word	0x24000f5c
 8007aa4:	24000f60 	.word	0x24000f60
 8007aa8:	24000fbc 	.word	0x24000fbc
 8007aac:	24000fc4 	.word	0x24000fc4
 8007ab0:	24000fac 	.word	0x24000fac
 8007ab4:	24000ad4 	.word	0x24000ad4
 8007ab8:	24000ad0 	.word	0x24000ad0
 8007abc:	24000fb8 	.word	0x24000fb8
 8007ac0:	24000fb4 	.word	0x24000fb4

08007ac4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b085      	sub	sp, #20
 8007ac8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007aca:	4b2b      	ldr	r3, [pc, #172]	@ (8007b78 <vTaskSwitchContext+0xb4>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d003      	beq.n	8007ada <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007ad2:	4b2a      	ldr	r3, [pc, #168]	@ (8007b7c <vTaskSwitchContext+0xb8>)
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007ad8:	e047      	b.n	8007b6a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8007ada:	4b28      	ldr	r3, [pc, #160]	@ (8007b7c <vTaskSwitchContext+0xb8>)
 8007adc:	2200      	movs	r2, #0
 8007ade:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ae0:	4b27      	ldr	r3, [pc, #156]	@ (8007b80 <vTaskSwitchContext+0xbc>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	60fb      	str	r3, [r7, #12]
 8007ae6:	e011      	b.n	8007b0c <vTaskSwitchContext+0x48>
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d10b      	bne.n	8007b06 <vTaskSwitchContext+0x42>
	__asm volatile
 8007aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007af2:	f383 8811 	msr	BASEPRI, r3
 8007af6:	f3bf 8f6f 	isb	sy
 8007afa:	f3bf 8f4f 	dsb	sy
 8007afe:	607b      	str	r3, [r7, #4]
}
 8007b00:	bf00      	nop
 8007b02:	bf00      	nop
 8007b04:	e7fd      	b.n	8007b02 <vTaskSwitchContext+0x3e>
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	3b01      	subs	r3, #1
 8007b0a:	60fb      	str	r3, [r7, #12]
 8007b0c:	491d      	ldr	r1, [pc, #116]	@ (8007b84 <vTaskSwitchContext+0xc0>)
 8007b0e:	68fa      	ldr	r2, [r7, #12]
 8007b10:	4613      	mov	r3, r2
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	4413      	add	r3, r2
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	440b      	add	r3, r1
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d0e3      	beq.n	8007ae8 <vTaskSwitchContext+0x24>
 8007b20:	68fa      	ldr	r2, [r7, #12]
 8007b22:	4613      	mov	r3, r2
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	4413      	add	r3, r2
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	4a16      	ldr	r2, [pc, #88]	@ (8007b84 <vTaskSwitchContext+0xc0>)
 8007b2c:	4413      	add	r3, r2
 8007b2e:	60bb      	str	r3, [r7, #8]
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	685a      	ldr	r2, [r3, #4]
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	605a      	str	r2, [r3, #4]
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	685a      	ldr	r2, [r3, #4]
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	3308      	adds	r3, #8
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d104      	bne.n	8007b50 <vTaskSwitchContext+0x8c>
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	685a      	ldr	r2, [r3, #4]
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	605a      	str	r2, [r3, #4]
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	68db      	ldr	r3, [r3, #12]
 8007b56:	4a0c      	ldr	r2, [pc, #48]	@ (8007b88 <vTaskSwitchContext+0xc4>)
 8007b58:	6013      	str	r3, [r2, #0]
 8007b5a:	4a09      	ldr	r2, [pc, #36]	@ (8007b80 <vTaskSwitchContext+0xbc>)
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007b60:	4b09      	ldr	r3, [pc, #36]	@ (8007b88 <vTaskSwitchContext+0xc4>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	3354      	adds	r3, #84	@ 0x54
 8007b66:	4a09      	ldr	r2, [pc, #36]	@ (8007b8c <vTaskSwitchContext+0xc8>)
 8007b68:	6013      	str	r3, [r2, #0]
}
 8007b6a:	bf00      	nop
 8007b6c:	3714      	adds	r7, #20
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr
 8007b76:	bf00      	nop
 8007b78:	24000fcc 	.word	0x24000fcc
 8007b7c:	24000fb8 	.word	0x24000fb8
 8007b80:	24000fac 	.word	0x24000fac
 8007b84:	24000ad4 	.word	0x24000ad4
 8007b88:	24000ad0 	.word	0x24000ad0
 8007b8c:	24000020 	.word	0x24000020

08007b90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b084      	sub	sp, #16
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d10b      	bne.n	8007bb8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ba4:	f383 8811 	msr	BASEPRI, r3
 8007ba8:	f3bf 8f6f 	isb	sy
 8007bac:	f3bf 8f4f 	dsb	sy
 8007bb0:	60fb      	str	r3, [r7, #12]
}
 8007bb2:	bf00      	nop
 8007bb4:	bf00      	nop
 8007bb6:	e7fd      	b.n	8007bb4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007bb8:	4b07      	ldr	r3, [pc, #28]	@ (8007bd8 <vTaskPlaceOnEventList+0x48>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	3318      	adds	r3, #24
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f7fe fde8 	bl	8006796 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007bc6:	2101      	movs	r1, #1
 8007bc8:	6838      	ldr	r0, [r7, #0]
 8007bca:	f000 fbd5 	bl	8008378 <prvAddCurrentTaskToDelayedList>
}
 8007bce:	bf00      	nop
 8007bd0:	3710      	adds	r7, #16
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	24000ad0 	.word	0x24000ad0

08007bdc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b086      	sub	sp, #24
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	60f8      	str	r0, [r7, #12]
 8007be4:	60b9      	str	r1, [r7, #8]
 8007be6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d10b      	bne.n	8007c06 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bf2:	f383 8811 	msr	BASEPRI, r3
 8007bf6:	f3bf 8f6f 	isb	sy
 8007bfa:	f3bf 8f4f 	dsb	sy
 8007bfe:	617b      	str	r3, [r7, #20]
}
 8007c00:	bf00      	nop
 8007c02:	bf00      	nop
 8007c04:	e7fd      	b.n	8007c02 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c06:	4b0a      	ldr	r3, [pc, #40]	@ (8007c30 <vTaskPlaceOnEventListRestricted+0x54>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	3318      	adds	r3, #24
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	68f8      	ldr	r0, [r7, #12]
 8007c10:	f7fe fd9d 	bl	800674e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d002      	beq.n	8007c20 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8007c1e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007c20:	6879      	ldr	r1, [r7, #4]
 8007c22:	68b8      	ldr	r0, [r7, #8]
 8007c24:	f000 fba8 	bl	8008378 <prvAddCurrentTaskToDelayedList>
	}
 8007c28:	bf00      	nop
 8007c2a:	3718      	adds	r7, #24
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}
 8007c30:	24000ad0 	.word	0x24000ad0

08007c34 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b086      	sub	sp, #24
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	68db      	ldr	r3, [r3, #12]
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d10b      	bne.n	8007c62 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007c4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c4e:	f383 8811 	msr	BASEPRI, r3
 8007c52:	f3bf 8f6f 	isb	sy
 8007c56:	f3bf 8f4f 	dsb	sy
 8007c5a:	60fb      	str	r3, [r7, #12]
}
 8007c5c:	bf00      	nop
 8007c5e:	bf00      	nop
 8007c60:	e7fd      	b.n	8007c5e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	3318      	adds	r3, #24
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7fe fdce 	bl	8006808 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c6c:	4b1e      	ldr	r3, [pc, #120]	@ (8007ce8 <xTaskRemoveFromEventList+0xb4>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d11f      	bne.n	8007cb4 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	3304      	adds	r3, #4
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f7fe fdc5 	bl	8006808 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c82:	4b1a      	ldr	r3, [pc, #104]	@ (8007cec <xTaskRemoveFromEventList+0xb8>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d903      	bls.n	8007c92 <xTaskRemoveFromEventList+0x5e>
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c8e:	4a17      	ldr	r2, [pc, #92]	@ (8007cec <xTaskRemoveFromEventList+0xb8>)
 8007c90:	6013      	str	r3, [r2, #0]
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c96:	4613      	mov	r3, r2
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	4413      	add	r3, r2
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	4a14      	ldr	r2, [pc, #80]	@ (8007cf0 <xTaskRemoveFromEventList+0xbc>)
 8007ca0:	441a      	add	r2, r3
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	3304      	adds	r3, #4
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	4610      	mov	r0, r2
 8007caa:	f7fe fd50 	bl	800674e <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 8007cae:	f000 f9bf 	bl	8008030 <prvResetNextTaskUnblockTime>
 8007cb2:	e005      	b.n	8007cc0 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	3318      	adds	r3, #24
 8007cb8:	4619      	mov	r1, r3
 8007cba:	480e      	ldr	r0, [pc, #56]	@ (8007cf4 <xTaskRemoveFromEventList+0xc0>)
 8007cbc:	f7fe fd47 	bl	800674e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8007cf8 <xTaskRemoveFromEventList+0xc4>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d905      	bls.n	8007cda <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8007cfc <xTaskRemoveFromEventList+0xc8>)
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	601a      	str	r2, [r3, #0]
 8007cd8:	e001      	b.n	8007cde <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007cde:	697b      	ldr	r3, [r7, #20]
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3718      	adds	r7, #24
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	24000fcc 	.word	0x24000fcc
 8007cec:	24000fac 	.word	0x24000fac
 8007cf0:	24000ad4 	.word	0x24000ad4
 8007cf4:	24000f64 	.word	0x24000f64
 8007cf8:	24000ad0 	.word	0x24000ad0
 8007cfc:	24000fb8 	.word	0x24000fb8

08007d00 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007d00:	b480      	push	{r7}
 8007d02:	b083      	sub	sp, #12
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007d08:	4b06      	ldr	r3, [pc, #24]	@ (8007d24 <vTaskInternalSetTimeOutState+0x24>)
 8007d0a:	681a      	ldr	r2, [r3, #0]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007d10:	4b05      	ldr	r3, [pc, #20]	@ (8007d28 <vTaskInternalSetTimeOutState+0x28>)
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	605a      	str	r2, [r3, #4]
}
 8007d18:	bf00      	nop
 8007d1a:	370c      	adds	r7, #12
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr
 8007d24:	24000fbc 	.word	0x24000fbc
 8007d28:	24000fa8 	.word	0x24000fa8

08007d2c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b088      	sub	sp, #32
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d10b      	bne.n	8007d54 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d40:	f383 8811 	msr	BASEPRI, r3
 8007d44:	f3bf 8f6f 	isb	sy
 8007d48:	f3bf 8f4f 	dsb	sy
 8007d4c:	613b      	str	r3, [r7, #16]
}
 8007d4e:	bf00      	nop
 8007d50:	bf00      	nop
 8007d52:	e7fd      	b.n	8007d50 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d10b      	bne.n	8007d72 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d5e:	f383 8811 	msr	BASEPRI, r3
 8007d62:	f3bf 8f6f 	isb	sy
 8007d66:	f3bf 8f4f 	dsb	sy
 8007d6a:	60fb      	str	r3, [r7, #12]
}
 8007d6c:	bf00      	nop
 8007d6e:	bf00      	nop
 8007d70:	e7fd      	b.n	8007d6e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007d72:	f000 ffe1 	bl	8008d38 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007d76:	4b1d      	ldr	r3, [pc, #116]	@ (8007dec <xTaskCheckForTimeOut+0xc0>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	69ba      	ldr	r2, [r7, #24]
 8007d82:	1ad3      	subs	r3, r2, r3
 8007d84:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d8e:	d102      	bne.n	8007d96 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007d90:	2300      	movs	r3, #0
 8007d92:	61fb      	str	r3, [r7, #28]
 8007d94:	e023      	b.n	8007dde <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	4b15      	ldr	r3, [pc, #84]	@ (8007df0 <xTaskCheckForTimeOut+0xc4>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d007      	beq.n	8007db2 <xTaskCheckForTimeOut+0x86>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	69ba      	ldr	r2, [r7, #24]
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d302      	bcc.n	8007db2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007dac:	2301      	movs	r3, #1
 8007dae:	61fb      	str	r3, [r7, #28]
 8007db0:	e015      	b.n	8007dde <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	697a      	ldr	r2, [r7, #20]
 8007db8:	429a      	cmp	r2, r3
 8007dba:	d20b      	bcs.n	8007dd4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	1ad2      	subs	r2, r2, r3
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f7ff ff99 	bl	8007d00 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	61fb      	str	r3, [r7, #28]
 8007dd2:	e004      	b.n	8007dde <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007dde:	f000 ffdd 	bl	8008d9c <vPortExitCritical>

	return xReturn;
 8007de2:	69fb      	ldr	r3, [r7, #28]
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3720      	adds	r7, #32
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	24000fa8 	.word	0x24000fa8
 8007df0:	24000fbc 	.word	0x24000fbc

08007df4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007df4:	b480      	push	{r7}
 8007df6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007df8:	4b03      	ldr	r3, [pc, #12]	@ (8007e08 <vTaskMissedYield+0x14>)
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	601a      	str	r2, [r3, #0]
}
 8007dfe:	bf00      	nop
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr
 8007e08:	24000fb8 	.word	0x24000fb8

08007e0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b084      	sub	sp, #16
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007e14:	f000 f8a8 	bl	8007f68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007e18:	4b18      	ldr	r3, [pc, #96]	@ (8007e7c <prvIdleTask+0x70>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d907      	bls.n	8007e30 <prvIdleTask+0x24>
			{
				taskYIELD();
 8007e20:	4b17      	ldr	r3, [pc, #92]	@ (8007e80 <prvIdleTask+0x74>)
 8007e22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e26:	601a      	str	r2, [r3, #0]
 8007e28:	f3bf 8f4f 	dsb	sy
 8007e2c:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 8007e30:	f7ff fc80 	bl	8007734 <prvGetExpectedIdleTime>
 8007e34:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d9eb      	bls.n	8007e14 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 8007e3c:	f7ff fc6c 	bl	8007718 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8007e40:	4b10      	ldr	r3, [pc, #64]	@ (8007e84 <prvIdleTask+0x78>)
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	4b10      	ldr	r3, [pc, #64]	@ (8007e88 <prvIdleTask+0x7c>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d20b      	bcs.n	8007e64 <prvIdleTask+0x58>
	__asm volatile
 8007e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e50:	f383 8811 	msr	BASEPRI, r3
 8007e54:	f3bf 8f6f 	isb	sy
 8007e58:	f3bf 8f4f 	dsb	sy
 8007e5c:	60bb      	str	r3, [r7, #8]
}
 8007e5e:	bf00      	nop
 8007e60:	bf00      	nop
 8007e62:	e7fd      	b.n	8007e60 <prvIdleTask+0x54>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 8007e64:	f7ff fc66 	bl	8007734 <prvGetExpectedIdleTime>
 8007e68:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d902      	bls.n	8007e76 <prvIdleTask+0x6a>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8007e70:	68f8      	ldr	r0, [r7, #12]
 8007e72:	f001 f813 	bl	8008e9c <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 8007e76:	f7ff fc95 	bl	80077a4 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 8007e7a:	e7cb      	b.n	8007e14 <prvIdleTask+0x8>
 8007e7c:	24000ad4 	.word	0x24000ad4
 8007e80:	e000ed04 	.word	0xe000ed04
 8007e84:	24000fc4 	.word	0x24000fc4
 8007e88:	24000fa8 	.word	0x24000fa8

08007e8c <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 8007e92:	2301      	movs	r3, #1
 8007e94:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 8007e96:	2301      	movs	r3, #1
 8007e98:	71fb      	strb	r3, [r7, #7]

		/* This function must be called from a critical section. */

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 8007e9a:	4b0f      	ldr	r3, [pc, #60]	@ (8007ed8 <eTaskConfirmSleepModeStatus+0x4c>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d002      	beq.n	8007ea8 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	71fb      	strb	r3, [r7, #7]
 8007ea6:	e010      	b.n	8007eca <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 8007ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8007edc <eTaskConfirmSleepModeStatus+0x50>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d002      	beq.n	8007eb6 <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	71fb      	strb	r3, [r7, #7]
 8007eb4:	e009      	b.n	8007eca <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 8007eb6:	4b0a      	ldr	r3, [pc, #40]	@ (8007ee0 <eTaskConfirmSleepModeStatus+0x54>)
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	4b0a      	ldr	r3, [pc, #40]	@ (8007ee4 <eTaskConfirmSleepModeStatus+0x58>)
 8007ebc:	6819      	ldr	r1, [r3, #0]
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	1acb      	subs	r3, r1, r3
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d101      	bne.n	8007eca <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 8007ec6:	2302      	movs	r3, #2
 8007ec8:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 8007eca:	79fb      	ldrb	r3, [r7, #7]
	}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	370c      	adds	r7, #12
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr
 8007ed8:	24000f64 	.word	0x24000f64
 8007edc:	24000fb8 	.word	0x24000fb8
 8007ee0:	24000f90 	.word	0x24000f90
 8007ee4:	24000fa4 	.word	0x24000fa4

08007ee8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b082      	sub	sp, #8
 8007eec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007eee:	2300      	movs	r3, #0
 8007ef0:	607b      	str	r3, [r7, #4]
 8007ef2:	e00c      	b.n	8007f0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	4613      	mov	r3, r2
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	4413      	add	r3, r2
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	4a12      	ldr	r2, [pc, #72]	@ (8007f48 <prvInitialiseTaskLists+0x60>)
 8007f00:	4413      	add	r3, r2
 8007f02:	4618      	mov	r0, r3
 8007f04:	f7fe fbf6 	bl	80066f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	607b      	str	r3, [r7, #4]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2b37      	cmp	r3, #55	@ 0x37
 8007f12:	d9ef      	bls.n	8007ef4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007f14:	480d      	ldr	r0, [pc, #52]	@ (8007f4c <prvInitialiseTaskLists+0x64>)
 8007f16:	f7fe fbed 	bl	80066f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007f1a:	480d      	ldr	r0, [pc, #52]	@ (8007f50 <prvInitialiseTaskLists+0x68>)
 8007f1c:	f7fe fbea 	bl	80066f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007f20:	480c      	ldr	r0, [pc, #48]	@ (8007f54 <prvInitialiseTaskLists+0x6c>)
 8007f22:	f7fe fbe7 	bl	80066f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007f26:	480c      	ldr	r0, [pc, #48]	@ (8007f58 <prvInitialiseTaskLists+0x70>)
 8007f28:	f7fe fbe4 	bl	80066f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007f2c:	480b      	ldr	r0, [pc, #44]	@ (8007f5c <prvInitialiseTaskLists+0x74>)
 8007f2e:	f7fe fbe1 	bl	80066f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007f32:	4b0b      	ldr	r3, [pc, #44]	@ (8007f60 <prvInitialiseTaskLists+0x78>)
 8007f34:	4a05      	ldr	r2, [pc, #20]	@ (8007f4c <prvInitialiseTaskLists+0x64>)
 8007f36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007f38:	4b0a      	ldr	r3, [pc, #40]	@ (8007f64 <prvInitialiseTaskLists+0x7c>)
 8007f3a:	4a05      	ldr	r2, [pc, #20]	@ (8007f50 <prvInitialiseTaskLists+0x68>)
 8007f3c:	601a      	str	r2, [r3, #0]
}
 8007f3e:	bf00      	nop
 8007f40:	3708      	adds	r7, #8
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	bf00      	nop
 8007f48:	24000ad4 	.word	0x24000ad4
 8007f4c:	24000f34 	.word	0x24000f34
 8007f50:	24000f48 	.word	0x24000f48
 8007f54:	24000f64 	.word	0x24000f64
 8007f58:	24000f78 	.word	0x24000f78
 8007f5c:	24000f90 	.word	0x24000f90
 8007f60:	24000f5c 	.word	0x24000f5c
 8007f64:	24000f60 	.word	0x24000f60

08007f68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b082      	sub	sp, #8
 8007f6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f6e:	e019      	b.n	8007fa4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007f70:	f000 fee2 	bl	8008d38 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f74:	4b10      	ldr	r3, [pc, #64]	@ (8007fb8 <prvCheckTasksWaitingTermination+0x50>)
 8007f76:	68db      	ldr	r3, [r3, #12]
 8007f78:	68db      	ldr	r3, [r3, #12]
 8007f7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	3304      	adds	r3, #4
 8007f80:	4618      	mov	r0, r3
 8007f82:	f7fe fc41 	bl	8006808 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007f86:	4b0d      	ldr	r3, [pc, #52]	@ (8007fbc <prvCheckTasksWaitingTermination+0x54>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	3b01      	subs	r3, #1
 8007f8c:	4a0b      	ldr	r2, [pc, #44]	@ (8007fbc <prvCheckTasksWaitingTermination+0x54>)
 8007f8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007f90:	4b0b      	ldr	r3, [pc, #44]	@ (8007fc0 <prvCheckTasksWaitingTermination+0x58>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	3b01      	subs	r3, #1
 8007f96:	4a0a      	ldr	r2, [pc, #40]	@ (8007fc0 <prvCheckTasksWaitingTermination+0x58>)
 8007f98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007f9a:	f000 feff 	bl	8008d9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 f810 	bl	8007fc4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007fa4:	4b06      	ldr	r3, [pc, #24]	@ (8007fc0 <prvCheckTasksWaitingTermination+0x58>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d1e1      	bne.n	8007f70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007fac:	bf00      	nop
 8007fae:	bf00      	nop
 8007fb0:	3708      	adds	r7, #8
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	24000f78 	.word	0x24000f78
 8007fbc:	24000fa4 	.word	0x24000fa4
 8007fc0:	24000f8c 	.word	0x24000f8c

08007fc4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	3354      	adds	r3, #84	@ 0x54
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f002 fc4d 	bl	800a870 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d108      	bne.n	8007ff2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f001 f97b 	bl	80092e0 <vPortFree>
				vPortFree( pxTCB );
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f001 f978 	bl	80092e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007ff0:	e019      	b.n	8008026 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d103      	bne.n	8008004 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f001 f96f 	bl	80092e0 <vPortFree>
	}
 8008002:	e010      	b.n	8008026 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800800a:	2b02      	cmp	r3, #2
 800800c:	d00b      	beq.n	8008026 <prvDeleteTCB+0x62>
	__asm volatile
 800800e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008012:	f383 8811 	msr	BASEPRI, r3
 8008016:	f3bf 8f6f 	isb	sy
 800801a:	f3bf 8f4f 	dsb	sy
 800801e:	60fb      	str	r3, [r7, #12]
}
 8008020:	bf00      	nop
 8008022:	bf00      	nop
 8008024:	e7fd      	b.n	8008022 <prvDeleteTCB+0x5e>
	}
 8008026:	bf00      	nop
 8008028:	3710      	adds	r7, #16
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}
	...

08008030 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008036:	4b0c      	ldr	r3, [pc, #48]	@ (8008068 <prvResetNextTaskUnblockTime+0x38>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d104      	bne.n	800804a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008040:	4b0a      	ldr	r3, [pc, #40]	@ (800806c <prvResetNextTaskUnblockTime+0x3c>)
 8008042:	f04f 32ff 	mov.w	r2, #4294967295
 8008046:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008048:	e008      	b.n	800805c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800804a:	4b07      	ldr	r3, [pc, #28]	@ (8008068 <prvResetNextTaskUnblockTime+0x38>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	68db      	ldr	r3, [r3, #12]
 8008050:	68db      	ldr	r3, [r3, #12]
 8008052:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	4a04      	ldr	r2, [pc, #16]	@ (800806c <prvResetNextTaskUnblockTime+0x3c>)
 800805a:	6013      	str	r3, [r2, #0]
}
 800805c:	bf00      	nop
 800805e:	370c      	adds	r7, #12
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr
 8008068:	24000f5c 	.word	0x24000f5c
 800806c:	24000fc4 	.word	0x24000fc4

08008070 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008076:	4b0b      	ldr	r3, [pc, #44]	@ (80080a4 <xTaskGetSchedulerState+0x34>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d102      	bne.n	8008084 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800807e:	2301      	movs	r3, #1
 8008080:	607b      	str	r3, [r7, #4]
 8008082:	e008      	b.n	8008096 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008084:	4b08      	ldr	r3, [pc, #32]	@ (80080a8 <xTaskGetSchedulerState+0x38>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d102      	bne.n	8008092 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800808c:	2302      	movs	r3, #2
 800808e:	607b      	str	r3, [r7, #4]
 8008090:	e001      	b.n	8008096 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008092:	2300      	movs	r3, #0
 8008094:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008096:	687b      	ldr	r3, [r7, #4]
	}
 8008098:	4618      	mov	r0, r3
 800809a:	370c      	adds	r7, #12
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr
 80080a4:	24000fb0 	.word	0x24000fb0
 80080a8:	24000fcc 	.word	0x24000fcc

080080ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b086      	sub	sp, #24
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80080b8:	2300      	movs	r3, #0
 80080ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d058      	beq.n	8008174 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80080c2:	4b2f      	ldr	r3, [pc, #188]	@ (8008180 <xTaskPriorityDisinherit+0xd4>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	693a      	ldr	r2, [r7, #16]
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d00b      	beq.n	80080e4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80080cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080d0:	f383 8811 	msr	BASEPRI, r3
 80080d4:	f3bf 8f6f 	isb	sy
 80080d8:	f3bf 8f4f 	dsb	sy
 80080dc:	60fb      	str	r3, [r7, #12]
}
 80080de:	bf00      	nop
 80080e0:	bf00      	nop
 80080e2:	e7fd      	b.n	80080e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d10b      	bne.n	8008104 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80080ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080f0:	f383 8811 	msr	BASEPRI, r3
 80080f4:	f3bf 8f6f 	isb	sy
 80080f8:	f3bf 8f4f 	dsb	sy
 80080fc:	60bb      	str	r3, [r7, #8]
}
 80080fe:	bf00      	nop
 8008100:	bf00      	nop
 8008102:	e7fd      	b.n	8008100 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008108:	1e5a      	subs	r2, r3, #1
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008116:	429a      	cmp	r2, r3
 8008118:	d02c      	beq.n	8008174 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800811e:	2b00      	cmp	r3, #0
 8008120:	d128      	bne.n	8008174 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	3304      	adds	r3, #4
 8008126:	4618      	mov	r0, r3
 8008128:	f7fe fb6e 	bl	8006808 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008138:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008144:	4b0f      	ldr	r3, [pc, #60]	@ (8008184 <xTaskPriorityDisinherit+0xd8>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	429a      	cmp	r2, r3
 800814a:	d903      	bls.n	8008154 <xTaskPriorityDisinherit+0xa8>
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008150:	4a0c      	ldr	r2, [pc, #48]	@ (8008184 <xTaskPriorityDisinherit+0xd8>)
 8008152:	6013      	str	r3, [r2, #0]
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008158:	4613      	mov	r3, r2
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	4413      	add	r3, r2
 800815e:	009b      	lsls	r3, r3, #2
 8008160:	4a09      	ldr	r2, [pc, #36]	@ (8008188 <xTaskPriorityDisinherit+0xdc>)
 8008162:	441a      	add	r2, r3
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	3304      	adds	r3, #4
 8008168:	4619      	mov	r1, r3
 800816a:	4610      	mov	r0, r2
 800816c:	f7fe faef 	bl	800674e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008170:	2301      	movs	r3, #1
 8008172:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008174:	697b      	ldr	r3, [r7, #20]
	}
 8008176:	4618      	mov	r0, r3
 8008178:	3718      	adds	r7, #24
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	24000ad0 	.word	0x24000ad0
 8008184:	24000fac 	.word	0x24000fac
 8008188:	24000ad4 	.word	0x24000ad4

0800818c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800818c:	b580      	push	{r7, lr}
 800818e:	b086      	sub	sp, #24
 8008190:	af00      	add	r7, sp, #0
 8008192:	60f8      	str	r0, [r7, #12]
 8008194:	60b9      	str	r1, [r7, #8]
 8008196:	607a      	str	r2, [r7, #4]
 8008198:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800819a:	f000 fdcd 	bl	8008d38 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800819e:	4b29      	ldr	r3, [pc, #164]	@ (8008244 <xTaskNotifyWait+0xb8>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	2b02      	cmp	r3, #2
 80081aa:	d01c      	beq.n	80081e6 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80081ac:	4b25      	ldr	r3, [pc, #148]	@ (8008244 <xTaskNotifyWait+0xb8>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 80081b4:	68fa      	ldr	r2, [r7, #12]
 80081b6:	43d2      	mvns	r2, r2
 80081b8:	400a      	ands	r2, r1
 80081ba:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80081be:	4b21      	ldr	r3, [pc, #132]	@ (8008244 <xTaskNotifyWait+0xb8>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d00b      	beq.n	80081e6 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80081ce:	2101      	movs	r1, #1
 80081d0:	6838      	ldr	r0, [r7, #0]
 80081d2:	f000 f8d1 	bl	8008378 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80081d6:	4b1c      	ldr	r3, [pc, #112]	@ (8008248 <xTaskNotifyWait+0xbc>)
 80081d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081dc:	601a      	str	r2, [r3, #0]
 80081de:	f3bf 8f4f 	dsb	sy
 80081e2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80081e6:	f000 fdd9 	bl	8008d9c <vPortExitCritical>

		taskENTER_CRITICAL();
 80081ea:	f000 fda5 	bl	8008d38 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d005      	beq.n	8008200 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80081f4:	4b13      	ldr	r3, [pc, #76]	@ (8008244 <xTaskNotifyWait+0xb8>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8008200:	4b10      	ldr	r3, [pc, #64]	@ (8008244 <xTaskNotifyWait+0xb8>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8008208:	b2db      	uxtb	r3, r3
 800820a:	2b02      	cmp	r3, #2
 800820c:	d002      	beq.n	8008214 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800820e:	2300      	movs	r3, #0
 8008210:	617b      	str	r3, [r7, #20]
 8008212:	e00a      	b.n	800822a <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8008214:	4b0b      	ldr	r3, [pc, #44]	@ (8008244 <xTaskNotifyWait+0xb8>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800821c:	68ba      	ldr	r2, [r7, #8]
 800821e:	43d2      	mvns	r2, r2
 8008220:	400a      	ands	r2, r1
 8008222:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 8008226:	2301      	movs	r3, #1
 8008228:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800822a:	4b06      	ldr	r3, [pc, #24]	@ (8008244 <xTaskNotifyWait+0xb8>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	2200      	movs	r2, #0
 8008230:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8008234:	f000 fdb2 	bl	8008d9c <vPortExitCritical>

		return xReturn;
 8008238:	697b      	ldr	r3, [r7, #20]
	}
 800823a:	4618      	mov	r0, r3
 800823c:	3718      	adds	r7, #24
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
 8008242:	bf00      	nop
 8008244:	24000ad0 	.word	0x24000ad0
 8008248:	e000ed04 	.word	0xe000ed04

0800824c <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800824c:	b580      	push	{r7, lr}
 800824e:	b08a      	sub	sp, #40	@ 0x28
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d10b      	bne.n	8008274 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 800825c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008260:	f383 8811 	msr	BASEPRI, r3
 8008264:	f3bf 8f6f 	isb	sy
 8008268:	f3bf 8f4f 	dsb	sy
 800826c:	61bb      	str	r3, [r7, #24]
}
 800826e:	bf00      	nop
 8008270:	bf00      	nop
 8008272:	e7fd      	b.n	8008270 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008274:	f000 ff24 	bl	80090c0 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 800827c:	f3ef 8211 	mrs	r2, BASEPRI
 8008280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008284:	f383 8811 	msr	BASEPRI, r3
 8008288:	f3bf 8f6f 	isb	sy
 800828c:	f3bf 8f4f 	dsb	sy
 8008290:	617a      	str	r2, [r7, #20]
 8008292:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008294:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008296:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800829a:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800829e:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80082a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082a2:	2202      	movs	r2, #2
 80082a4:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 80082a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80082ae:	1c5a      	adds	r2, r3, #1
 80082b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082b2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80082b6:	7ffb      	ldrb	r3, [r7, #31]
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d147      	bne.n	800834c <vTaskNotifyGiveFromISR+0x100>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80082bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d00b      	beq.n	80082dc <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 80082c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082c8:	f383 8811 	msr	BASEPRI, r3
 80082cc:	f3bf 8f6f 	isb	sy
 80082d0:	f3bf 8f4f 	dsb	sy
 80082d4:	60fb      	str	r3, [r7, #12]
}
 80082d6:	bf00      	nop
 80082d8:	bf00      	nop
 80082da:	e7fd      	b.n	80082d8 <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082dc:	4b20      	ldr	r3, [pc, #128]	@ (8008360 <vTaskNotifyGiveFromISR+0x114>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d11d      	bne.n	8008320 <vTaskNotifyGiveFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e6:	3304      	adds	r3, #4
 80082e8:	4618      	mov	r0, r3
 80082ea:	f7fe fa8d 	bl	8006808 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80082ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082f2:	4b1c      	ldr	r3, [pc, #112]	@ (8008364 <vTaskNotifyGiveFromISR+0x118>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d903      	bls.n	8008302 <vTaskNotifyGiveFromISR+0xb6>
 80082fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082fe:	4a19      	ldr	r2, [pc, #100]	@ (8008364 <vTaskNotifyGiveFromISR+0x118>)
 8008300:	6013      	str	r3, [r2, #0]
 8008302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008304:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008306:	4613      	mov	r3, r2
 8008308:	009b      	lsls	r3, r3, #2
 800830a:	4413      	add	r3, r2
 800830c:	009b      	lsls	r3, r3, #2
 800830e:	4a16      	ldr	r2, [pc, #88]	@ (8008368 <vTaskNotifyGiveFromISR+0x11c>)
 8008310:	441a      	add	r2, r3
 8008312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008314:	3304      	adds	r3, #4
 8008316:	4619      	mov	r1, r3
 8008318:	4610      	mov	r0, r2
 800831a:	f7fe fa18 	bl	800674e <vListInsertEnd>
 800831e:	e005      	b.n	800832c <vTaskNotifyGiveFromISR+0xe0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8008320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008322:	3318      	adds	r3, #24
 8008324:	4619      	mov	r1, r3
 8008326:	4811      	ldr	r0, [pc, #68]	@ (800836c <vTaskNotifyGiveFromISR+0x120>)
 8008328:	f7fe fa11 	bl	800674e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800832c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800832e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008330:	4b0f      	ldr	r3, [pc, #60]	@ (8008370 <vTaskNotifyGiveFromISR+0x124>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008336:	429a      	cmp	r2, r3
 8008338:	d908      	bls.n	800834c <vTaskNotifyGiveFromISR+0x100>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d002      	beq.n	8008346 <vTaskNotifyGiveFromISR+0xfa>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	2201      	movs	r2, #1
 8008344:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8008346:	4b0b      	ldr	r3, [pc, #44]	@ (8008374 <vTaskNotifyGiveFromISR+0x128>)
 8008348:	2201      	movs	r2, #1
 800834a:	601a      	str	r2, [r3, #0]
 800834c:	6a3b      	ldr	r3, [r7, #32]
 800834e:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	f383 8811 	msr	BASEPRI, r3
}
 8008356:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8008358:	bf00      	nop
 800835a:	3728      	adds	r7, #40	@ 0x28
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}
 8008360:	24000fcc 	.word	0x24000fcc
 8008364:	24000fac 	.word	0x24000fac
 8008368:	24000ad4 	.word	0x24000ad4
 800836c:	24000f64 	.word	0x24000f64
 8008370:	24000ad0 	.word	0x24000ad0
 8008374:	24000fb8 	.word	0x24000fb8

08008378 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b084      	sub	sp, #16
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008382:	4b21      	ldr	r3, [pc, #132]	@ (8008408 <prvAddCurrentTaskToDelayedList+0x90>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008388:	4b20      	ldr	r3, [pc, #128]	@ (800840c <prvAddCurrentTaskToDelayedList+0x94>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	3304      	adds	r3, #4
 800838e:	4618      	mov	r0, r3
 8008390:	f7fe fa3a 	bl	8006808 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800839a:	d10a      	bne.n	80083b2 <prvAddCurrentTaskToDelayedList+0x3a>
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d007      	beq.n	80083b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083a2:	4b1a      	ldr	r3, [pc, #104]	@ (800840c <prvAddCurrentTaskToDelayedList+0x94>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	3304      	adds	r3, #4
 80083a8:	4619      	mov	r1, r3
 80083aa:	4819      	ldr	r0, [pc, #100]	@ (8008410 <prvAddCurrentTaskToDelayedList+0x98>)
 80083ac:	f7fe f9cf 	bl	800674e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80083b0:	e026      	b.n	8008400 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80083b2:	68fa      	ldr	r2, [r7, #12]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	4413      	add	r3, r2
 80083b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80083ba:	4b14      	ldr	r3, [pc, #80]	@ (800840c <prvAddCurrentTaskToDelayedList+0x94>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	68ba      	ldr	r2, [r7, #8]
 80083c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80083c2:	68ba      	ldr	r2, [r7, #8]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d209      	bcs.n	80083de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083ca:	4b12      	ldr	r3, [pc, #72]	@ (8008414 <prvAddCurrentTaskToDelayedList+0x9c>)
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	4b0f      	ldr	r3, [pc, #60]	@ (800840c <prvAddCurrentTaskToDelayedList+0x94>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	3304      	adds	r3, #4
 80083d4:	4619      	mov	r1, r3
 80083d6:	4610      	mov	r0, r2
 80083d8:	f7fe f9dd 	bl	8006796 <vListInsert>
}
 80083dc:	e010      	b.n	8008400 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083de:	4b0e      	ldr	r3, [pc, #56]	@ (8008418 <prvAddCurrentTaskToDelayedList+0xa0>)
 80083e0:	681a      	ldr	r2, [r3, #0]
 80083e2:	4b0a      	ldr	r3, [pc, #40]	@ (800840c <prvAddCurrentTaskToDelayedList+0x94>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	3304      	adds	r3, #4
 80083e8:	4619      	mov	r1, r3
 80083ea:	4610      	mov	r0, r2
 80083ec:	f7fe f9d3 	bl	8006796 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80083f0:	4b0a      	ldr	r3, [pc, #40]	@ (800841c <prvAddCurrentTaskToDelayedList+0xa4>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	68ba      	ldr	r2, [r7, #8]
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d202      	bcs.n	8008400 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80083fa:	4a08      	ldr	r2, [pc, #32]	@ (800841c <prvAddCurrentTaskToDelayedList+0xa4>)
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	6013      	str	r3, [r2, #0]
}
 8008400:	bf00      	nop
 8008402:	3710      	adds	r7, #16
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}
 8008408:	24000fa8 	.word	0x24000fa8
 800840c:	24000ad0 	.word	0x24000ad0
 8008410:	24000f90 	.word	0x24000f90
 8008414:	24000f60 	.word	0x24000f60
 8008418:	24000f5c 	.word	0x24000f5c
 800841c:	24000fc4 	.word	0x24000fc4

08008420 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b08a      	sub	sp, #40	@ 0x28
 8008424:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008426:	2300      	movs	r3, #0
 8008428:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800842a:	f000 fb13 	bl	8008a54 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800842e:	4b1d      	ldr	r3, [pc, #116]	@ (80084a4 <xTimerCreateTimerTask+0x84>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d021      	beq.n	800847a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008436:	2300      	movs	r3, #0
 8008438:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800843a:	2300      	movs	r3, #0
 800843c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800843e:	1d3a      	adds	r2, r7, #4
 8008440:	f107 0108 	add.w	r1, r7, #8
 8008444:	f107 030c 	add.w	r3, r7, #12
 8008448:	4618      	mov	r0, r3
 800844a:	f7fe f939 	bl	80066c0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800844e:	6879      	ldr	r1, [r7, #4]
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	68fa      	ldr	r2, [r7, #12]
 8008454:	9202      	str	r2, [sp, #8]
 8008456:	9301      	str	r3, [sp, #4]
 8008458:	2302      	movs	r3, #2
 800845a:	9300      	str	r3, [sp, #0]
 800845c:	2300      	movs	r3, #0
 800845e:	460a      	mov	r2, r1
 8008460:	4911      	ldr	r1, [pc, #68]	@ (80084a8 <xTimerCreateTimerTask+0x88>)
 8008462:	4812      	ldr	r0, [pc, #72]	@ (80084ac <xTimerCreateTimerTask+0x8c>)
 8008464:	f7fe fef4 	bl	8007250 <xTaskCreateStatic>
 8008468:	4603      	mov	r3, r0
 800846a:	4a11      	ldr	r2, [pc, #68]	@ (80084b0 <xTimerCreateTimerTask+0x90>)
 800846c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800846e:	4b10      	ldr	r3, [pc, #64]	@ (80084b0 <xTimerCreateTimerTask+0x90>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d001      	beq.n	800847a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008476:	2301      	movs	r3, #1
 8008478:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d10b      	bne.n	8008498 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008484:	f383 8811 	msr	BASEPRI, r3
 8008488:	f3bf 8f6f 	isb	sy
 800848c:	f3bf 8f4f 	dsb	sy
 8008490:	613b      	str	r3, [r7, #16]
}
 8008492:	bf00      	nop
 8008494:	bf00      	nop
 8008496:	e7fd      	b.n	8008494 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008498:	697b      	ldr	r3, [r7, #20]
}
 800849a:	4618      	mov	r0, r3
 800849c:	3718      	adds	r7, #24
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	bf00      	nop
 80084a4:	24001000 	.word	0x24001000
 80084a8:	0800dc1c 	.word	0x0800dc1c
 80084ac:	080085ed 	.word	0x080085ed
 80084b0:	24001004 	.word	0x24001004

080084b4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b08a      	sub	sp, #40	@ 0x28
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	607a      	str	r2, [r7, #4]
 80084c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80084c2:	2300      	movs	r3, #0
 80084c4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d10b      	bne.n	80084e4 <xTimerGenericCommand+0x30>
	__asm volatile
 80084cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084d0:	f383 8811 	msr	BASEPRI, r3
 80084d4:	f3bf 8f6f 	isb	sy
 80084d8:	f3bf 8f4f 	dsb	sy
 80084dc:	623b      	str	r3, [r7, #32]
}
 80084de:	bf00      	nop
 80084e0:	bf00      	nop
 80084e2:	e7fd      	b.n	80084e0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80084e4:	4b19      	ldr	r3, [pc, #100]	@ (800854c <xTimerGenericCommand+0x98>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d02a      	beq.n	8008542 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	2b05      	cmp	r3, #5
 80084fc:	dc18      	bgt.n	8008530 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80084fe:	f7ff fdb7 	bl	8008070 <xTaskGetSchedulerState>
 8008502:	4603      	mov	r3, r0
 8008504:	2b02      	cmp	r3, #2
 8008506:	d109      	bne.n	800851c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008508:	4b10      	ldr	r3, [pc, #64]	@ (800854c <xTimerGenericCommand+0x98>)
 800850a:	6818      	ldr	r0, [r3, #0]
 800850c:	f107 0110 	add.w	r1, r7, #16
 8008510:	2300      	movs	r3, #0
 8008512:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008514:	f7fe faac 	bl	8006a70 <xQueueGenericSend>
 8008518:	6278      	str	r0, [r7, #36]	@ 0x24
 800851a:	e012      	b.n	8008542 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800851c:	4b0b      	ldr	r3, [pc, #44]	@ (800854c <xTimerGenericCommand+0x98>)
 800851e:	6818      	ldr	r0, [r3, #0]
 8008520:	f107 0110 	add.w	r1, r7, #16
 8008524:	2300      	movs	r3, #0
 8008526:	2200      	movs	r2, #0
 8008528:	f7fe faa2 	bl	8006a70 <xQueueGenericSend>
 800852c:	6278      	str	r0, [r7, #36]	@ 0x24
 800852e:	e008      	b.n	8008542 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008530:	4b06      	ldr	r3, [pc, #24]	@ (800854c <xTimerGenericCommand+0x98>)
 8008532:	6818      	ldr	r0, [r3, #0]
 8008534:	f107 0110 	add.w	r1, r7, #16
 8008538:	2300      	movs	r3, #0
 800853a:	683a      	ldr	r2, [r7, #0]
 800853c:	f7fe fb9a 	bl	8006c74 <xQueueGenericSendFromISR>
 8008540:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008544:	4618      	mov	r0, r3
 8008546:	3728      	adds	r7, #40	@ 0x28
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}
 800854c:	24001000 	.word	0x24001000

08008550 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b088      	sub	sp, #32
 8008554:	af02      	add	r7, sp, #8
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800855a:	4b23      	ldr	r3, [pc, #140]	@ (80085e8 <prvProcessExpiredTimer+0x98>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	68db      	ldr	r3, [r3, #12]
 8008560:	68db      	ldr	r3, [r3, #12]
 8008562:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	3304      	adds	r3, #4
 8008568:	4618      	mov	r0, r3
 800856a:	f7fe f94d 	bl	8006808 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008574:	f003 0304 	and.w	r3, r3, #4
 8008578:	2b00      	cmp	r3, #0
 800857a:	d023      	beq.n	80085c4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	699a      	ldr	r2, [r3, #24]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	18d1      	adds	r1, r2, r3
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	683a      	ldr	r2, [r7, #0]
 8008588:	6978      	ldr	r0, [r7, #20]
 800858a:	f000 f8d5 	bl	8008738 <prvInsertTimerInActiveList>
 800858e:	4603      	mov	r3, r0
 8008590:	2b00      	cmp	r3, #0
 8008592:	d020      	beq.n	80085d6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008594:	2300      	movs	r3, #0
 8008596:	9300      	str	r3, [sp, #0]
 8008598:	2300      	movs	r3, #0
 800859a:	687a      	ldr	r2, [r7, #4]
 800859c:	2100      	movs	r1, #0
 800859e:	6978      	ldr	r0, [r7, #20]
 80085a0:	f7ff ff88 	bl	80084b4 <xTimerGenericCommand>
 80085a4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d114      	bne.n	80085d6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80085ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085b0:	f383 8811 	msr	BASEPRI, r3
 80085b4:	f3bf 8f6f 	isb	sy
 80085b8:	f3bf 8f4f 	dsb	sy
 80085bc:	60fb      	str	r3, [r7, #12]
}
 80085be:	bf00      	nop
 80085c0:	bf00      	nop
 80085c2:	e7fd      	b.n	80085c0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80085ca:	f023 0301 	bic.w	r3, r3, #1
 80085ce:	b2da      	uxtb	r2, r3
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	6a1b      	ldr	r3, [r3, #32]
 80085da:	6978      	ldr	r0, [r7, #20]
 80085dc:	4798      	blx	r3
}
 80085de:	bf00      	nop
 80085e0:	3718      	adds	r7, #24
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
 80085e6:	bf00      	nop
 80085e8:	24000ff8 	.word	0x24000ff8

080085ec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b084      	sub	sp, #16
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80085f4:	f107 0308 	add.w	r3, r7, #8
 80085f8:	4618      	mov	r0, r3
 80085fa:	f000 f859 	bl	80086b0 <prvGetNextExpireTime>
 80085fe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	4619      	mov	r1, r3
 8008604:	68f8      	ldr	r0, [r7, #12]
 8008606:	f000 f805 	bl	8008614 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800860a:	f000 f8d7 	bl	80087bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800860e:	bf00      	nop
 8008610:	e7f0      	b.n	80085f4 <prvTimerTask+0x8>
	...

08008614 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b084      	sub	sp, #16
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800861e:	f7ff f87b 	bl	8007718 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008622:	f107 0308 	add.w	r3, r7, #8
 8008626:	4618      	mov	r0, r3
 8008628:	f000 f866 	bl	80086f8 <prvSampleTimeNow>
 800862c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d130      	bne.n	8008696 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d10a      	bne.n	8008650 <prvProcessTimerOrBlockTask+0x3c>
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	429a      	cmp	r2, r3
 8008640:	d806      	bhi.n	8008650 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008642:	f7ff f8af 	bl	80077a4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008646:	68f9      	ldr	r1, [r7, #12]
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f7ff ff81 	bl	8008550 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800864e:	e024      	b.n	800869a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d008      	beq.n	8008668 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008656:	4b13      	ldr	r3, [pc, #76]	@ (80086a4 <prvProcessTimerOrBlockTask+0x90>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d101      	bne.n	8008664 <prvProcessTimerOrBlockTask+0x50>
 8008660:	2301      	movs	r3, #1
 8008662:	e000      	b.n	8008666 <prvProcessTimerOrBlockTask+0x52>
 8008664:	2300      	movs	r3, #0
 8008666:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008668:	4b0f      	ldr	r3, [pc, #60]	@ (80086a8 <prvProcessTimerOrBlockTask+0x94>)
 800866a:	6818      	ldr	r0, [r3, #0]
 800866c:	687a      	ldr	r2, [r7, #4]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	1ad3      	subs	r3, r2, r3
 8008672:	683a      	ldr	r2, [r7, #0]
 8008674:	4619      	mov	r1, r3
 8008676:	f7fe fdb7 	bl	80071e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800867a:	f7ff f893 	bl	80077a4 <xTaskResumeAll>
 800867e:	4603      	mov	r3, r0
 8008680:	2b00      	cmp	r3, #0
 8008682:	d10a      	bne.n	800869a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008684:	4b09      	ldr	r3, [pc, #36]	@ (80086ac <prvProcessTimerOrBlockTask+0x98>)
 8008686:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800868a:	601a      	str	r2, [r3, #0]
 800868c:	f3bf 8f4f 	dsb	sy
 8008690:	f3bf 8f6f 	isb	sy
}
 8008694:	e001      	b.n	800869a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008696:	f7ff f885 	bl	80077a4 <xTaskResumeAll>
}
 800869a:	bf00      	nop
 800869c:	3710      	adds	r7, #16
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
 80086a2:	bf00      	nop
 80086a4:	24000ffc 	.word	0x24000ffc
 80086a8:	24001000 	.word	0x24001000
 80086ac:	e000ed04 	.word	0xe000ed04

080086b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80086b0:	b480      	push	{r7}
 80086b2:	b085      	sub	sp, #20
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80086b8:	4b0e      	ldr	r3, [pc, #56]	@ (80086f4 <prvGetNextExpireTime+0x44>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d101      	bne.n	80086c6 <prvGetNextExpireTime+0x16>
 80086c2:	2201      	movs	r2, #1
 80086c4:	e000      	b.n	80086c8 <prvGetNextExpireTime+0x18>
 80086c6:	2200      	movs	r2, #0
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d105      	bne.n	80086e0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80086d4:	4b07      	ldr	r3, [pc, #28]	@ (80086f4 <prvGetNextExpireTime+0x44>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	68db      	ldr	r3, [r3, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	60fb      	str	r3, [r7, #12]
 80086de:	e001      	b.n	80086e4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80086e0:	2300      	movs	r3, #0
 80086e2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80086e4:	68fb      	ldr	r3, [r7, #12]
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3714      	adds	r7, #20
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr
 80086f2:	bf00      	nop
 80086f4:	24000ff8 	.word	0x24000ff8

080086f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008700:	f7ff f8ee 	bl	80078e0 <xTaskGetTickCount>
 8008704:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008706:	4b0b      	ldr	r3, [pc, #44]	@ (8008734 <prvSampleTimeNow+0x3c>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	68fa      	ldr	r2, [r7, #12]
 800870c:	429a      	cmp	r2, r3
 800870e:	d205      	bcs.n	800871c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008710:	f000 f93a 	bl	8008988 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2201      	movs	r2, #1
 8008718:	601a      	str	r2, [r3, #0]
 800871a:	e002      	b.n	8008722 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2200      	movs	r2, #0
 8008720:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008722:	4a04      	ldr	r2, [pc, #16]	@ (8008734 <prvSampleTimeNow+0x3c>)
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008728:	68fb      	ldr	r3, [r7, #12]
}
 800872a:	4618      	mov	r0, r3
 800872c:	3710      	adds	r7, #16
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
 8008732:	bf00      	nop
 8008734:	24001008 	.word	0x24001008

08008738 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b086      	sub	sp, #24
 800873c:	af00      	add	r7, sp, #0
 800873e:	60f8      	str	r0, [r7, #12]
 8008740:	60b9      	str	r1, [r7, #8]
 8008742:	607a      	str	r2, [r7, #4]
 8008744:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008746:	2300      	movs	r3, #0
 8008748:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	68ba      	ldr	r2, [r7, #8]
 800874e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	68fa      	ldr	r2, [r7, #12]
 8008754:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008756:	68ba      	ldr	r2, [r7, #8]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	429a      	cmp	r2, r3
 800875c:	d812      	bhi.n	8008784 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	1ad2      	subs	r2, r2, r3
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	699b      	ldr	r3, [r3, #24]
 8008768:	429a      	cmp	r2, r3
 800876a:	d302      	bcc.n	8008772 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800876c:	2301      	movs	r3, #1
 800876e:	617b      	str	r3, [r7, #20]
 8008770:	e01b      	b.n	80087aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008772:	4b10      	ldr	r3, [pc, #64]	@ (80087b4 <prvInsertTimerInActiveList+0x7c>)
 8008774:	681a      	ldr	r2, [r3, #0]
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	3304      	adds	r3, #4
 800877a:	4619      	mov	r1, r3
 800877c:	4610      	mov	r0, r2
 800877e:	f7fe f80a 	bl	8006796 <vListInsert>
 8008782:	e012      	b.n	80087aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	429a      	cmp	r2, r3
 800878a:	d206      	bcs.n	800879a <prvInsertTimerInActiveList+0x62>
 800878c:	68ba      	ldr	r2, [r7, #8]
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	429a      	cmp	r2, r3
 8008792:	d302      	bcc.n	800879a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008794:	2301      	movs	r3, #1
 8008796:	617b      	str	r3, [r7, #20]
 8008798:	e007      	b.n	80087aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800879a:	4b07      	ldr	r3, [pc, #28]	@ (80087b8 <prvInsertTimerInActiveList+0x80>)
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	3304      	adds	r3, #4
 80087a2:	4619      	mov	r1, r3
 80087a4:	4610      	mov	r0, r2
 80087a6:	f7fd fff6 	bl	8006796 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80087aa:	697b      	ldr	r3, [r7, #20]
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3718      	adds	r7, #24
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}
 80087b4:	24000ffc 	.word	0x24000ffc
 80087b8:	24000ff8 	.word	0x24000ff8

080087bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b08e      	sub	sp, #56	@ 0x38
 80087c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80087c2:	e0ce      	b.n	8008962 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	da19      	bge.n	80087fe <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80087ca:	1d3b      	adds	r3, r7, #4
 80087cc:	3304      	adds	r3, #4
 80087ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80087d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d10b      	bne.n	80087ee <prvProcessReceivedCommands+0x32>
	__asm volatile
 80087d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087da:	f383 8811 	msr	BASEPRI, r3
 80087de:	f3bf 8f6f 	isb	sy
 80087e2:	f3bf 8f4f 	dsb	sy
 80087e6:	61fb      	str	r3, [r7, #28]
}
 80087e8:	bf00      	nop
 80087ea:	bf00      	nop
 80087ec:	e7fd      	b.n	80087ea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80087ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80087f4:	6850      	ldr	r0, [r2, #4]
 80087f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80087f8:	6892      	ldr	r2, [r2, #8]
 80087fa:	4611      	mov	r1, r2
 80087fc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2b00      	cmp	r3, #0
 8008802:	f2c0 80ae 	blt.w	8008962 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800880a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800880c:	695b      	ldr	r3, [r3, #20]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d004      	beq.n	800881c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008814:	3304      	adds	r3, #4
 8008816:	4618      	mov	r0, r3
 8008818:	f7fd fff6 	bl	8006808 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800881c:	463b      	mov	r3, r7
 800881e:	4618      	mov	r0, r3
 8008820:	f7ff ff6a 	bl	80086f8 <prvSampleTimeNow>
 8008824:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2b09      	cmp	r3, #9
 800882a:	f200 8097 	bhi.w	800895c <prvProcessReceivedCommands+0x1a0>
 800882e:	a201      	add	r2, pc, #4	@ (adr r2, 8008834 <prvProcessReceivedCommands+0x78>)
 8008830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008834:	0800885d 	.word	0x0800885d
 8008838:	0800885d 	.word	0x0800885d
 800883c:	0800885d 	.word	0x0800885d
 8008840:	080088d3 	.word	0x080088d3
 8008844:	080088e7 	.word	0x080088e7
 8008848:	08008933 	.word	0x08008933
 800884c:	0800885d 	.word	0x0800885d
 8008850:	0800885d 	.word	0x0800885d
 8008854:	080088d3 	.word	0x080088d3
 8008858:	080088e7 	.word	0x080088e7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800885c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800885e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008862:	f043 0301 	orr.w	r3, r3, #1
 8008866:	b2da      	uxtb	r2, r3
 8008868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800886a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800886e:	68ba      	ldr	r2, [r7, #8]
 8008870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008872:	699b      	ldr	r3, [r3, #24]
 8008874:	18d1      	adds	r1, r2, r3
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800887a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800887c:	f7ff ff5c 	bl	8008738 <prvInsertTimerInActiveList>
 8008880:	4603      	mov	r3, r0
 8008882:	2b00      	cmp	r3, #0
 8008884:	d06c      	beq.n	8008960 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008888:	6a1b      	ldr	r3, [r3, #32]
 800888a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800888c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800888e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008890:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008894:	f003 0304 	and.w	r3, r3, #4
 8008898:	2b00      	cmp	r3, #0
 800889a:	d061      	beq.n	8008960 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800889c:	68ba      	ldr	r2, [r7, #8]
 800889e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088a0:	699b      	ldr	r3, [r3, #24]
 80088a2:	441a      	add	r2, r3
 80088a4:	2300      	movs	r3, #0
 80088a6:	9300      	str	r3, [sp, #0]
 80088a8:	2300      	movs	r3, #0
 80088aa:	2100      	movs	r1, #0
 80088ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088ae:	f7ff fe01 	bl	80084b4 <xTimerGenericCommand>
 80088b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80088b4:	6a3b      	ldr	r3, [r7, #32]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d152      	bne.n	8008960 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80088ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088be:	f383 8811 	msr	BASEPRI, r3
 80088c2:	f3bf 8f6f 	isb	sy
 80088c6:	f3bf 8f4f 	dsb	sy
 80088ca:	61bb      	str	r3, [r7, #24]
}
 80088cc:	bf00      	nop
 80088ce:	bf00      	nop
 80088d0:	e7fd      	b.n	80088ce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80088d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80088d8:	f023 0301 	bic.w	r3, r3, #1
 80088dc:	b2da      	uxtb	r2, r3
 80088de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088e0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80088e4:	e03d      	b.n	8008962 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80088e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80088ec:	f043 0301 	orr.w	r3, r3, #1
 80088f0:	b2da      	uxtb	r2, r3
 80088f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088f4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80088f8:	68ba      	ldr	r2, [r7, #8]
 80088fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088fc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80088fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008900:	699b      	ldr	r3, [r3, #24]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d10b      	bne.n	800891e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800890a:	f383 8811 	msr	BASEPRI, r3
 800890e:	f3bf 8f6f 	isb	sy
 8008912:	f3bf 8f4f 	dsb	sy
 8008916:	617b      	str	r3, [r7, #20]
}
 8008918:	bf00      	nop
 800891a:	bf00      	nop
 800891c:	e7fd      	b.n	800891a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800891e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008920:	699a      	ldr	r2, [r3, #24]
 8008922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008924:	18d1      	adds	r1, r2, r3
 8008926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008928:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800892a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800892c:	f7ff ff04 	bl	8008738 <prvInsertTimerInActiveList>
					break;
 8008930:	e017      	b.n	8008962 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008934:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008938:	f003 0302 	and.w	r3, r3, #2
 800893c:	2b00      	cmp	r3, #0
 800893e:	d103      	bne.n	8008948 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008940:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008942:	f000 fccd 	bl	80092e0 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008946:	e00c      	b.n	8008962 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800894a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800894e:	f023 0301 	bic.w	r3, r3, #1
 8008952:	b2da      	uxtb	r2, r3
 8008954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008956:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800895a:	e002      	b.n	8008962 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800895c:	bf00      	nop
 800895e:	e000      	b.n	8008962 <prvProcessReceivedCommands+0x1a6>
					break;
 8008960:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008962:	4b08      	ldr	r3, [pc, #32]	@ (8008984 <prvProcessReceivedCommands+0x1c8>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	1d39      	adds	r1, r7, #4
 8008968:	2200      	movs	r2, #0
 800896a:	4618      	mov	r0, r3
 800896c:	f7fe fa20 	bl	8006db0 <xQueueReceive>
 8008970:	4603      	mov	r3, r0
 8008972:	2b00      	cmp	r3, #0
 8008974:	f47f af26 	bne.w	80087c4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008978:	bf00      	nop
 800897a:	bf00      	nop
 800897c:	3730      	adds	r7, #48	@ 0x30
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
 8008982:	bf00      	nop
 8008984:	24001000 	.word	0x24001000

08008988 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b088      	sub	sp, #32
 800898c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800898e:	e049      	b.n	8008a24 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008990:	4b2e      	ldr	r3, [pc, #184]	@ (8008a4c <prvSwitchTimerLists+0xc4>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	68db      	ldr	r3, [r3, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800899a:	4b2c      	ldr	r3, [pc, #176]	@ (8008a4c <prvSwitchTimerLists+0xc4>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	68db      	ldr	r3, [r3, #12]
 80089a0:	68db      	ldr	r3, [r3, #12]
 80089a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	3304      	adds	r3, #4
 80089a8:	4618      	mov	r0, r3
 80089aa:	f7fd ff2d 	bl	8006808 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	6a1b      	ldr	r3, [r3, #32]
 80089b2:	68f8      	ldr	r0, [r7, #12]
 80089b4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80089bc:	f003 0304 	and.w	r3, r3, #4
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d02f      	beq.n	8008a24 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	699b      	ldr	r3, [r3, #24]
 80089c8:	693a      	ldr	r2, [r7, #16]
 80089ca:	4413      	add	r3, r2
 80089cc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80089ce:	68ba      	ldr	r2, [r7, #8]
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	429a      	cmp	r2, r3
 80089d4:	d90e      	bls.n	80089f4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	68ba      	ldr	r2, [r7, #8]
 80089da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	68fa      	ldr	r2, [r7, #12]
 80089e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80089e2:	4b1a      	ldr	r3, [pc, #104]	@ (8008a4c <prvSwitchTimerLists+0xc4>)
 80089e4:	681a      	ldr	r2, [r3, #0]
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	3304      	adds	r3, #4
 80089ea:	4619      	mov	r1, r3
 80089ec:	4610      	mov	r0, r2
 80089ee:	f7fd fed2 	bl	8006796 <vListInsert>
 80089f2:	e017      	b.n	8008a24 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80089f4:	2300      	movs	r3, #0
 80089f6:	9300      	str	r3, [sp, #0]
 80089f8:	2300      	movs	r3, #0
 80089fa:	693a      	ldr	r2, [r7, #16]
 80089fc:	2100      	movs	r1, #0
 80089fe:	68f8      	ldr	r0, [r7, #12]
 8008a00:	f7ff fd58 	bl	80084b4 <xTimerGenericCommand>
 8008a04:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d10b      	bne.n	8008a24 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a10:	f383 8811 	msr	BASEPRI, r3
 8008a14:	f3bf 8f6f 	isb	sy
 8008a18:	f3bf 8f4f 	dsb	sy
 8008a1c:	603b      	str	r3, [r7, #0]
}
 8008a1e:	bf00      	nop
 8008a20:	bf00      	nop
 8008a22:	e7fd      	b.n	8008a20 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008a24:	4b09      	ldr	r3, [pc, #36]	@ (8008a4c <prvSwitchTimerLists+0xc4>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d1b0      	bne.n	8008990 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008a2e:	4b07      	ldr	r3, [pc, #28]	@ (8008a4c <prvSwitchTimerLists+0xc4>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008a34:	4b06      	ldr	r3, [pc, #24]	@ (8008a50 <prvSwitchTimerLists+0xc8>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	4a04      	ldr	r2, [pc, #16]	@ (8008a4c <prvSwitchTimerLists+0xc4>)
 8008a3a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008a3c:	4a04      	ldr	r2, [pc, #16]	@ (8008a50 <prvSwitchTimerLists+0xc8>)
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	6013      	str	r3, [r2, #0]
}
 8008a42:	bf00      	nop
 8008a44:	3718      	adds	r7, #24
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}
 8008a4a:	bf00      	nop
 8008a4c:	24000ff8 	.word	0x24000ff8
 8008a50:	24000ffc 	.word	0x24000ffc

08008a54 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b082      	sub	sp, #8
 8008a58:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008a5a:	f000 f96d 	bl	8008d38 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008a5e:	4b15      	ldr	r3, [pc, #84]	@ (8008ab4 <prvCheckForValidListAndQueue+0x60>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d120      	bne.n	8008aa8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008a66:	4814      	ldr	r0, [pc, #80]	@ (8008ab8 <prvCheckForValidListAndQueue+0x64>)
 8008a68:	f7fd fe44 	bl	80066f4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008a6c:	4813      	ldr	r0, [pc, #76]	@ (8008abc <prvCheckForValidListAndQueue+0x68>)
 8008a6e:	f7fd fe41 	bl	80066f4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008a72:	4b13      	ldr	r3, [pc, #76]	@ (8008ac0 <prvCheckForValidListAndQueue+0x6c>)
 8008a74:	4a10      	ldr	r2, [pc, #64]	@ (8008ab8 <prvCheckForValidListAndQueue+0x64>)
 8008a76:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008a78:	4b12      	ldr	r3, [pc, #72]	@ (8008ac4 <prvCheckForValidListAndQueue+0x70>)
 8008a7a:	4a10      	ldr	r2, [pc, #64]	@ (8008abc <prvCheckForValidListAndQueue+0x68>)
 8008a7c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008a7e:	2300      	movs	r3, #0
 8008a80:	9300      	str	r3, [sp, #0]
 8008a82:	4b11      	ldr	r3, [pc, #68]	@ (8008ac8 <prvCheckForValidListAndQueue+0x74>)
 8008a84:	4a11      	ldr	r2, [pc, #68]	@ (8008acc <prvCheckForValidListAndQueue+0x78>)
 8008a86:	2110      	movs	r1, #16
 8008a88:	200a      	movs	r0, #10
 8008a8a:	f7fd ff51 	bl	8006930 <xQueueGenericCreateStatic>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	4a08      	ldr	r2, [pc, #32]	@ (8008ab4 <prvCheckForValidListAndQueue+0x60>)
 8008a92:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008a94:	4b07      	ldr	r3, [pc, #28]	@ (8008ab4 <prvCheckForValidListAndQueue+0x60>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d005      	beq.n	8008aa8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008a9c:	4b05      	ldr	r3, [pc, #20]	@ (8008ab4 <prvCheckForValidListAndQueue+0x60>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	490b      	ldr	r1, [pc, #44]	@ (8008ad0 <prvCheckForValidListAndQueue+0x7c>)
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f7fe fb76 	bl	8007194 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008aa8:	f000 f978 	bl	8008d9c <vPortExitCritical>
}
 8008aac:	bf00      	nop
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	bf00      	nop
 8008ab4:	24001000 	.word	0x24001000
 8008ab8:	24000fd0 	.word	0x24000fd0
 8008abc:	24000fe4 	.word	0x24000fe4
 8008ac0:	24000ff8 	.word	0x24000ff8
 8008ac4:	24000ffc 	.word	0x24000ffc
 8008ac8:	240010ac 	.word	0x240010ac
 8008acc:	2400100c 	.word	0x2400100c
 8008ad0:	0800dc24 	.word	0x0800dc24

08008ad4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b085      	sub	sp, #20
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	60f8      	str	r0, [r7, #12]
 8008adc:	60b9      	str	r1, [r7, #8]
 8008ade:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	3b04      	subs	r3, #4
 8008ae4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008aec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	3b04      	subs	r3, #4
 8008af2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	f023 0201 	bic.w	r2, r3, #1
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	3b04      	subs	r3, #4
 8008b02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008b04:	4a0c      	ldr	r2, [pc, #48]	@ (8008b38 <pxPortInitialiseStack+0x64>)
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	3b14      	subs	r3, #20
 8008b0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008b10:	687a      	ldr	r2, [r7, #4]
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	3b04      	subs	r3, #4
 8008b1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	f06f 0202 	mvn.w	r2, #2
 8008b22:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	3b20      	subs	r3, #32
 8008b28:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3714      	adds	r7, #20
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr
 8008b38:	08008b3d 	.word	0x08008b3d

08008b3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b085      	sub	sp, #20
 8008b40:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008b42:	2300      	movs	r3, #0
 8008b44:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008b46:	4b13      	ldr	r3, [pc, #76]	@ (8008b94 <prvTaskExitError+0x58>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b4e:	d00b      	beq.n	8008b68 <prvTaskExitError+0x2c>
	__asm volatile
 8008b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b54:	f383 8811 	msr	BASEPRI, r3
 8008b58:	f3bf 8f6f 	isb	sy
 8008b5c:	f3bf 8f4f 	dsb	sy
 8008b60:	60fb      	str	r3, [r7, #12]
}
 8008b62:	bf00      	nop
 8008b64:	bf00      	nop
 8008b66:	e7fd      	b.n	8008b64 <prvTaskExitError+0x28>
	__asm volatile
 8008b68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b6c:	f383 8811 	msr	BASEPRI, r3
 8008b70:	f3bf 8f6f 	isb	sy
 8008b74:	f3bf 8f4f 	dsb	sy
 8008b78:	60bb      	str	r3, [r7, #8]
}
 8008b7a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008b7c:	bf00      	nop
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d0fc      	beq.n	8008b7e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008b84:	bf00      	nop
 8008b86:	bf00      	nop
 8008b88:	3714      	adds	r7, #20
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr
 8008b92:	bf00      	nop
 8008b94:	24000010 	.word	0x24000010
	...

08008ba0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008ba0:	4b07      	ldr	r3, [pc, #28]	@ (8008bc0 <pxCurrentTCBConst2>)
 8008ba2:	6819      	ldr	r1, [r3, #0]
 8008ba4:	6808      	ldr	r0, [r1, #0]
 8008ba6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008baa:	f380 8809 	msr	PSP, r0
 8008bae:	f3bf 8f6f 	isb	sy
 8008bb2:	f04f 0000 	mov.w	r0, #0
 8008bb6:	f380 8811 	msr	BASEPRI, r0
 8008bba:	4770      	bx	lr
 8008bbc:	f3af 8000 	nop.w

08008bc0 <pxCurrentTCBConst2>:
 8008bc0:	24000ad0 	.word	0x24000ad0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008bc4:	bf00      	nop
 8008bc6:	bf00      	nop

08008bc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008bc8:	4808      	ldr	r0, [pc, #32]	@ (8008bec <prvPortStartFirstTask+0x24>)
 8008bca:	6800      	ldr	r0, [r0, #0]
 8008bcc:	6800      	ldr	r0, [r0, #0]
 8008bce:	f380 8808 	msr	MSP, r0
 8008bd2:	f04f 0000 	mov.w	r0, #0
 8008bd6:	f380 8814 	msr	CONTROL, r0
 8008bda:	b662      	cpsie	i
 8008bdc:	b661      	cpsie	f
 8008bde:	f3bf 8f4f 	dsb	sy
 8008be2:	f3bf 8f6f 	isb	sy
 8008be6:	df00      	svc	0
 8008be8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008bea:	bf00      	nop
 8008bec:	e000ed08 	.word	0xe000ed08

08008bf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b086      	sub	sp, #24
 8008bf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008bf6:	4b47      	ldr	r3, [pc, #284]	@ (8008d14 <xPortStartScheduler+0x124>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4a47      	ldr	r2, [pc, #284]	@ (8008d18 <xPortStartScheduler+0x128>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d10b      	bne.n	8008c18 <xPortStartScheduler+0x28>
	__asm volatile
 8008c00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c04:	f383 8811 	msr	BASEPRI, r3
 8008c08:	f3bf 8f6f 	isb	sy
 8008c0c:	f3bf 8f4f 	dsb	sy
 8008c10:	613b      	str	r3, [r7, #16]
}
 8008c12:	bf00      	nop
 8008c14:	bf00      	nop
 8008c16:	e7fd      	b.n	8008c14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008c18:	4b3e      	ldr	r3, [pc, #248]	@ (8008d14 <xPortStartScheduler+0x124>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4a3f      	ldr	r2, [pc, #252]	@ (8008d1c <xPortStartScheduler+0x12c>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d10b      	bne.n	8008c3a <xPortStartScheduler+0x4a>
	__asm volatile
 8008c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c26:	f383 8811 	msr	BASEPRI, r3
 8008c2a:	f3bf 8f6f 	isb	sy
 8008c2e:	f3bf 8f4f 	dsb	sy
 8008c32:	60fb      	str	r3, [r7, #12]
}
 8008c34:	bf00      	nop
 8008c36:	bf00      	nop
 8008c38:	e7fd      	b.n	8008c36 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008c3a:	4b39      	ldr	r3, [pc, #228]	@ (8008d20 <xPortStartScheduler+0x130>)
 8008c3c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	781b      	ldrb	r3, [r3, #0]
 8008c42:	b2db      	uxtb	r3, r3
 8008c44:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	22ff      	movs	r2, #255	@ 0xff
 8008c4a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	781b      	ldrb	r3, [r3, #0]
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008c54:	78fb      	ldrb	r3, [r7, #3]
 8008c56:	b2db      	uxtb	r3, r3
 8008c58:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008c5c:	b2da      	uxtb	r2, r3
 8008c5e:	4b31      	ldr	r3, [pc, #196]	@ (8008d24 <xPortStartScheduler+0x134>)
 8008c60:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008c62:	4b31      	ldr	r3, [pc, #196]	@ (8008d28 <xPortStartScheduler+0x138>)
 8008c64:	2207      	movs	r2, #7
 8008c66:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c68:	e009      	b.n	8008c7e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008c6a:	4b2f      	ldr	r3, [pc, #188]	@ (8008d28 <xPortStartScheduler+0x138>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	3b01      	subs	r3, #1
 8008c70:	4a2d      	ldr	r2, [pc, #180]	@ (8008d28 <xPortStartScheduler+0x138>)
 8008c72:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008c74:	78fb      	ldrb	r3, [r7, #3]
 8008c76:	b2db      	uxtb	r3, r3
 8008c78:	005b      	lsls	r3, r3, #1
 8008c7a:	b2db      	uxtb	r3, r3
 8008c7c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c7e:	78fb      	ldrb	r3, [r7, #3]
 8008c80:	b2db      	uxtb	r3, r3
 8008c82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c86:	2b80      	cmp	r3, #128	@ 0x80
 8008c88:	d0ef      	beq.n	8008c6a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008c8a:	4b27      	ldr	r3, [pc, #156]	@ (8008d28 <xPortStartScheduler+0x138>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f1c3 0307 	rsb	r3, r3, #7
 8008c92:	2b04      	cmp	r3, #4
 8008c94:	d00b      	beq.n	8008cae <xPortStartScheduler+0xbe>
	__asm volatile
 8008c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c9a:	f383 8811 	msr	BASEPRI, r3
 8008c9e:	f3bf 8f6f 	isb	sy
 8008ca2:	f3bf 8f4f 	dsb	sy
 8008ca6:	60bb      	str	r3, [r7, #8]
}
 8008ca8:	bf00      	nop
 8008caa:	bf00      	nop
 8008cac:	e7fd      	b.n	8008caa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008cae:	4b1e      	ldr	r3, [pc, #120]	@ (8008d28 <xPortStartScheduler+0x138>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	021b      	lsls	r3, r3, #8
 8008cb4:	4a1c      	ldr	r2, [pc, #112]	@ (8008d28 <xPortStartScheduler+0x138>)
 8008cb6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008cb8:	4b1b      	ldr	r3, [pc, #108]	@ (8008d28 <xPortStartScheduler+0x138>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008cc0:	4a19      	ldr	r2, [pc, #100]	@ (8008d28 <xPortStartScheduler+0x138>)
 8008cc2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	b2da      	uxtb	r2, r3
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008ccc:	4b17      	ldr	r3, [pc, #92]	@ (8008d2c <xPortStartScheduler+0x13c>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a16      	ldr	r2, [pc, #88]	@ (8008d2c <xPortStartScheduler+0x13c>)
 8008cd2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008cd6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008cd8:	4b14      	ldr	r3, [pc, #80]	@ (8008d2c <xPortStartScheduler+0x13c>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a13      	ldr	r2, [pc, #76]	@ (8008d2c <xPortStartScheduler+0x13c>)
 8008cde:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008ce2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008ce4:	f000 f9a6 	bl	8009034 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008ce8:	4b11      	ldr	r3, [pc, #68]	@ (8008d30 <xPortStartScheduler+0x140>)
 8008cea:	2200      	movs	r2, #0
 8008cec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008cee:	f000 f9dd 	bl	80090ac <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008cf2:	4b10      	ldr	r3, [pc, #64]	@ (8008d34 <xPortStartScheduler+0x144>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4a0f      	ldr	r2, [pc, #60]	@ (8008d34 <xPortStartScheduler+0x144>)
 8008cf8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008cfc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008cfe:	f7ff ff63 	bl	8008bc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008d02:	f7fe fedf 	bl	8007ac4 <vTaskSwitchContext>
	prvTaskExitError();
 8008d06:	f7ff ff19 	bl	8008b3c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008d0a:	2300      	movs	r3, #0
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3718      	adds	r7, #24
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}
 8008d14:	e000ed00 	.word	0xe000ed00
 8008d18:	410fc271 	.word	0x410fc271
 8008d1c:	410fc270 	.word	0x410fc270
 8008d20:	e000e400 	.word	0xe000e400
 8008d24:	24001108 	.word	0x24001108
 8008d28:	2400110c 	.word	0x2400110c
 8008d2c:	e000ed20 	.word	0xe000ed20
 8008d30:	24000010 	.word	0x24000010
 8008d34:	e000ef34 	.word	0xe000ef34

08008d38 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b083      	sub	sp, #12
 8008d3c:	af00      	add	r7, sp, #0
	__asm volatile
 8008d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d42:	f383 8811 	msr	BASEPRI, r3
 8008d46:	f3bf 8f6f 	isb	sy
 8008d4a:	f3bf 8f4f 	dsb	sy
 8008d4e:	607b      	str	r3, [r7, #4]
}
 8008d50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008d52:	4b10      	ldr	r3, [pc, #64]	@ (8008d94 <vPortEnterCritical+0x5c>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	3301      	adds	r3, #1
 8008d58:	4a0e      	ldr	r2, [pc, #56]	@ (8008d94 <vPortEnterCritical+0x5c>)
 8008d5a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8008d94 <vPortEnterCritical+0x5c>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d110      	bne.n	8008d86 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008d64:	4b0c      	ldr	r3, [pc, #48]	@ (8008d98 <vPortEnterCritical+0x60>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	b2db      	uxtb	r3, r3
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d00b      	beq.n	8008d86 <vPortEnterCritical+0x4e>
	__asm volatile
 8008d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d72:	f383 8811 	msr	BASEPRI, r3
 8008d76:	f3bf 8f6f 	isb	sy
 8008d7a:	f3bf 8f4f 	dsb	sy
 8008d7e:	603b      	str	r3, [r7, #0]
}
 8008d80:	bf00      	nop
 8008d82:	bf00      	nop
 8008d84:	e7fd      	b.n	8008d82 <vPortEnterCritical+0x4a>
	}
}
 8008d86:	bf00      	nop
 8008d88:	370c      	adds	r7, #12
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d90:	4770      	bx	lr
 8008d92:	bf00      	nop
 8008d94:	24000010 	.word	0x24000010
 8008d98:	e000ed04 	.word	0xe000ed04

08008d9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b083      	sub	sp, #12
 8008da0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008da2:	4b12      	ldr	r3, [pc, #72]	@ (8008dec <vPortExitCritical+0x50>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d10b      	bne.n	8008dc2 <vPortExitCritical+0x26>
	__asm volatile
 8008daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dae:	f383 8811 	msr	BASEPRI, r3
 8008db2:	f3bf 8f6f 	isb	sy
 8008db6:	f3bf 8f4f 	dsb	sy
 8008dba:	607b      	str	r3, [r7, #4]
}
 8008dbc:	bf00      	nop
 8008dbe:	bf00      	nop
 8008dc0:	e7fd      	b.n	8008dbe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8008dec <vPortExitCritical+0x50>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	3b01      	subs	r3, #1
 8008dc8:	4a08      	ldr	r2, [pc, #32]	@ (8008dec <vPortExitCritical+0x50>)
 8008dca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008dcc:	4b07      	ldr	r3, [pc, #28]	@ (8008dec <vPortExitCritical+0x50>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d105      	bne.n	8008de0 <vPortExitCritical+0x44>
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	f383 8811 	msr	BASEPRI, r3
}
 8008dde:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008de0:	bf00      	nop
 8008de2:	370c      	adds	r7, #12
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr
 8008dec:	24000010 	.word	0x24000010

08008df0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008df0:	f3ef 8009 	mrs	r0, PSP
 8008df4:	f3bf 8f6f 	isb	sy
 8008df8:	4b15      	ldr	r3, [pc, #84]	@ (8008e50 <pxCurrentTCBConst>)
 8008dfa:	681a      	ldr	r2, [r3, #0]
 8008dfc:	f01e 0f10 	tst.w	lr, #16
 8008e00:	bf08      	it	eq
 8008e02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008e06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e0a:	6010      	str	r0, [r2, #0]
 8008e0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008e10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008e14:	f380 8811 	msr	BASEPRI, r0
 8008e18:	f3bf 8f4f 	dsb	sy
 8008e1c:	f3bf 8f6f 	isb	sy
 8008e20:	f7fe fe50 	bl	8007ac4 <vTaskSwitchContext>
 8008e24:	f04f 0000 	mov.w	r0, #0
 8008e28:	f380 8811 	msr	BASEPRI, r0
 8008e2c:	bc09      	pop	{r0, r3}
 8008e2e:	6819      	ldr	r1, [r3, #0]
 8008e30:	6808      	ldr	r0, [r1, #0]
 8008e32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e36:	f01e 0f10 	tst.w	lr, #16
 8008e3a:	bf08      	it	eq
 8008e3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008e40:	f380 8809 	msr	PSP, r0
 8008e44:	f3bf 8f6f 	isb	sy
 8008e48:	4770      	bx	lr
 8008e4a:	bf00      	nop
 8008e4c:	f3af 8000 	nop.w

08008e50 <pxCurrentTCBConst>:
 8008e50:	24000ad0 	.word	0x24000ad0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008e54:	bf00      	nop
 8008e56:	bf00      	nop

08008e58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b082      	sub	sp, #8
 8008e5c:	af00      	add	r7, sp, #0
	__asm volatile
 8008e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e62:	f383 8811 	msr	BASEPRI, r3
 8008e66:	f3bf 8f6f 	isb	sy
 8008e6a:	f3bf 8f4f 	dsb	sy
 8008e6e:	607b      	str	r3, [r7, #4]
}
 8008e70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008e72:	f7fe fd6d 	bl	8007950 <xTaskIncrementTick>
 8008e76:	4603      	mov	r3, r0
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d003      	beq.n	8008e84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008e7c:	4b06      	ldr	r3, [pc, #24]	@ (8008e98 <xPortSysTickHandler+0x40>)
 8008e7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e82:	601a      	str	r2, [r3, #0]
 8008e84:	2300      	movs	r3, #0
 8008e86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	f383 8811 	msr	BASEPRI, r3
}
 8008e8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008e90:	bf00      	nop
 8008e92:	3708      	adds	r7, #8
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}
 8008e98:	e000ed04 	.word	0xe000ed04

08008e9c <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b088      	sub	sp, #32
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 8008ea4:	4b5d      	ldr	r3, [pc, #372]	@ (800901c <vPortSuppressTicksAndSleep+0x180>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d902      	bls.n	8008eb4 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 8008eae:	4b5b      	ldr	r3, [pc, #364]	@ (800901c <vPortSuppressTicksAndSleep+0x180>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 8008eb4:	4b5a      	ldr	r3, [pc, #360]	@ (8009020 <vPortSuppressTicksAndSleep+0x184>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	4a59      	ldr	r2, [pc, #356]	@ (8009020 <vPortSuppressTicksAndSleep+0x184>)
 8008eba:	f023 0301 	bic.w	r3, r3, #1
 8008ebe:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 8008ec0:	4b58      	ldr	r3, [pc, #352]	@ (8009024 <vPortSuppressTicksAndSleep+0x188>)
 8008ec2:	681a      	ldr	r2, [r3, #0]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	3b01      	subs	r3, #1
 8008ec8:	4957      	ldr	r1, [pc, #348]	@ (8009028 <vPortSuppressTicksAndSleep+0x18c>)
 8008eca:	6809      	ldr	r1, [r1, #0]
 8008ecc:	fb01 f303 	mul.w	r3, r1, r3
 8008ed0:	4413      	add	r3, r2
 8008ed2:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 8008ed4:	4b55      	ldr	r3, [pc, #340]	@ (800902c <vPortSuppressTicksAndSleep+0x190>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	69fa      	ldr	r2, [r7, #28]
 8008eda:	429a      	cmp	r2, r3
 8008edc:	d904      	bls.n	8008ee8 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 8008ede:	4b53      	ldr	r3, [pc, #332]	@ (800902c <vPortSuppressTicksAndSleep+0x190>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	69fa      	ldr	r2, [r7, #28]
 8008ee4:	1ad3      	subs	r3, r2, r3
 8008ee6:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 8008ee8:	b672      	cpsid	i
		__asm volatile( "dsb" );
 8008eea:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 8008eee:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 8008ef2:	f7fe ffcb 	bl	8007e8c <eTaskConfirmSleepModeStatus>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d110      	bne.n	8008f1e <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 8008efc:	4b49      	ldr	r3, [pc, #292]	@ (8009024 <vPortSuppressTicksAndSleep+0x188>)
 8008efe:	4a4c      	ldr	r2, [pc, #304]	@ (8009030 <vPortSuppressTicksAndSleep+0x194>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8008f04:	4b46      	ldr	r3, [pc, #280]	@ (8009020 <vPortSuppressTicksAndSleep+0x184>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4a45      	ldr	r2, [pc, #276]	@ (8009020 <vPortSuppressTicksAndSleep+0x184>)
 8008f0a:	f043 0301 	orr.w	r3, r3, #1
 8008f0e:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8008f10:	4b45      	ldr	r3, [pc, #276]	@ (8009028 <vPortSuppressTicksAndSleep+0x18c>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4a46      	ldr	r2, [pc, #280]	@ (8009030 <vPortSuppressTicksAndSleep+0x194>)
 8008f16:	3b01      	subs	r3, #1
 8008f18:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 8008f1a:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrupts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 8008f1c:	e079      	b.n	8009012 <vPortSuppressTicksAndSleep+0x176>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 8008f1e:	4a44      	ldr	r2, [pc, #272]	@ (8009030 <vPortSuppressTicksAndSleep+0x194>)
 8008f20:	69fb      	ldr	r3, [r7, #28]
 8008f22:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008f24:	4b3f      	ldr	r3, [pc, #252]	@ (8009024 <vPortSuppressTicksAndSleep+0x188>)
 8008f26:	2200      	movs	r2, #0
 8008f28:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8008f2a:	4b3d      	ldr	r3, [pc, #244]	@ (8009020 <vPortSuppressTicksAndSleep+0x184>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a3c      	ldr	r2, [pc, #240]	@ (8009020 <vPortSuppressTicksAndSleep+0x184>)
 8008f30:	f043 0301 	orr.w	r3, r3, #1
 8008f34:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	613b      	str	r3, [r7, #16]
			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	613b      	str	r3, [r7, #16]
 8008f3e:	6938      	ldr	r0, [r7, #16]
 8008f40:	f7f7 fd9a 	bl	8000a78 <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d004      	beq.n	8008f54 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 8008f4a:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 8008f4e:	bf30      	wfi
				__asm volatile( "isb" );
 8008f50:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f7f7 fd99 	bl	8000a8c <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 8008f5a:	b662      	cpsie	i
			__asm volatile( "dsb" );
 8008f5c:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 8008f60:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 8008f64:	b672      	cpsid	i
			__asm volatile( "dsb" );
 8008f66:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 8008f6a:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 8008f6e:	4b2c      	ldr	r3, [pc, #176]	@ (8009020 <vPortSuppressTicksAndSleep+0x184>)
 8008f70:	2206      	movs	r2, #6
 8008f72:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 8008f74:	4b2a      	ldr	r3, [pc, #168]	@ (8009020 <vPortSuppressTicksAndSleep+0x184>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d01d      	beq.n	8008fbc <vPortSuppressTicksAndSleep+0x120>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 8008f80:	4b29      	ldr	r3, [pc, #164]	@ (8009028 <vPortSuppressTicksAndSleep+0x18c>)
 8008f82:	681a      	ldr	r2, [r3, #0]
 8008f84:	4b27      	ldr	r3, [pc, #156]	@ (8009024 <vPortSuppressTicksAndSleep+0x188>)
 8008f86:	6819      	ldr	r1, [r3, #0]
 8008f88:	69fb      	ldr	r3, [r7, #28]
 8008f8a:	1acb      	subs	r3, r1, r3
 8008f8c:	4413      	add	r3, r2
 8008f8e:	3b01      	subs	r3, #1
 8008f90:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 8008f92:	4b26      	ldr	r3, [pc, #152]	@ (800902c <vPortSuppressTicksAndSleep+0x190>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	697a      	ldr	r2, [r7, #20]
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d304      	bcc.n	8008fa6 <vPortSuppressTicksAndSleep+0x10a>
 8008f9c:	4b22      	ldr	r3, [pc, #136]	@ (8009028 <vPortSuppressTicksAndSleep+0x18c>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	697a      	ldr	r2, [r7, #20]
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	d903      	bls.n	8008fae <vPortSuppressTicksAndSleep+0x112>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 8008fa6:	4b20      	ldr	r3, [pc, #128]	@ (8009028 <vPortSuppressTicksAndSleep+0x18c>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	3b01      	subs	r3, #1
 8008fac:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 8008fae:	4a20      	ldr	r2, [pc, #128]	@ (8009030 <vPortSuppressTicksAndSleep+0x194>)
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	3b01      	subs	r3, #1
 8008fb8:	61bb      	str	r3, [r7, #24]
 8008fba:	e018      	b.n	8008fee <vPortSuppressTicksAndSleep+0x152>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 8008fbc:	4b1a      	ldr	r3, [pc, #104]	@ (8009028 <vPortSuppressTicksAndSleep+0x18c>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	fb03 f202 	mul.w	r2, r3, r2
 8008fc6:	4b17      	ldr	r3, [pc, #92]	@ (8009024 <vPortSuppressTicksAndSleep+0x188>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	1ad3      	subs	r3, r2, r3
 8008fcc:	60fb      	str	r3, [r7, #12]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 8008fce:	4b16      	ldr	r3, [pc, #88]	@ (8009028 <vPortSuppressTicksAndSleep+0x18c>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	68fa      	ldr	r2, [r7, #12]
 8008fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fd8:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 8008fda:	69bb      	ldr	r3, [r7, #24]
 8008fdc:	3301      	adds	r3, #1
 8008fde:	4a12      	ldr	r2, [pc, #72]	@ (8009028 <vPortSuppressTicksAndSleep+0x18c>)
 8008fe0:	6812      	ldr	r2, [r2, #0]
 8008fe2:	fb03 f202 	mul.w	r2, r3, r2
 8008fe6:	4912      	ldr	r1, [pc, #72]	@ (8009030 <vPortSuppressTicksAndSleep+0x194>)
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	1ad3      	subs	r3, r2, r3
 8008fec:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008fee:	4b0d      	ldr	r3, [pc, #52]	@ (8009024 <vPortSuppressTicksAndSleep+0x188>)
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8008ff4:	4b0a      	ldr	r3, [pc, #40]	@ (8009020 <vPortSuppressTicksAndSleep+0x184>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4a09      	ldr	r2, [pc, #36]	@ (8009020 <vPortSuppressTicksAndSleep+0x184>)
 8008ffa:	f043 0301 	orr.w	r3, r3, #1
 8008ffe:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 8009000:	69b8      	ldr	r0, [r7, #24]
 8009002:	f7fe fc7d 	bl	8007900 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8009006:	4b08      	ldr	r3, [pc, #32]	@ (8009028 <vPortSuppressTicksAndSleep+0x18c>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a09      	ldr	r2, [pc, #36]	@ (8009030 <vPortSuppressTicksAndSleep+0x194>)
 800900c:	3b01      	subs	r3, #1
 800900e:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 8009010:	b662      	cpsie	i
	}
 8009012:	bf00      	nop
 8009014:	3720      	adds	r7, #32
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
 800901a:	bf00      	nop
 800901c:	24001100 	.word	0x24001100
 8009020:	e000e010 	.word	0xe000e010
 8009024:	e000e018 	.word	0xe000e018
 8009028:	240010fc 	.word	0x240010fc
 800902c:	24001104 	.word	0x24001104
 8009030:	e000e014 	.word	0xe000e014

08009034 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009034:	b480      	push	{r7}
 8009036:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 8009038:	4b14      	ldr	r3, [pc, #80]	@ (800908c <vPortSetupTimerInterrupt+0x58>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a14      	ldr	r2, [pc, #80]	@ (8009090 <vPortSetupTimerInterrupt+0x5c>)
 800903e:	fba2 2303 	umull	r2, r3, r2, r3
 8009042:	099b      	lsrs	r3, r3, #6
 8009044:	4a13      	ldr	r2, [pc, #76]	@ (8009094 <vPortSetupTimerInterrupt+0x60>)
 8009046:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 8009048:	4b12      	ldr	r3, [pc, #72]	@ (8009094 <vPortSetupTimerInterrupt+0x60>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8009050:	fbb2 f3f3 	udiv	r3, r2, r3
 8009054:	4a10      	ldr	r2, [pc, #64]	@ (8009098 <vPortSetupTimerInterrupt+0x64>)
 8009056:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 8009058:	4b10      	ldr	r3, [pc, #64]	@ (800909c <vPortSetupTimerInterrupt+0x68>)
 800905a:	222d      	movs	r2, #45	@ 0x2d
 800905c:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800905e:	4b10      	ldr	r3, [pc, #64]	@ (80090a0 <vPortSetupTimerInterrupt+0x6c>)
 8009060:	2200      	movs	r2, #0
 8009062:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009064:	4b0f      	ldr	r3, [pc, #60]	@ (80090a4 <vPortSetupTimerInterrupt+0x70>)
 8009066:	2200      	movs	r2, #0
 8009068:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800906a:	4b08      	ldr	r3, [pc, #32]	@ (800908c <vPortSetupTimerInterrupt+0x58>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4a08      	ldr	r2, [pc, #32]	@ (8009090 <vPortSetupTimerInterrupt+0x5c>)
 8009070:	fba2 2303 	umull	r2, r3, r2, r3
 8009074:	099b      	lsrs	r3, r3, #6
 8009076:	4a0c      	ldr	r2, [pc, #48]	@ (80090a8 <vPortSetupTimerInterrupt+0x74>)
 8009078:	3b01      	subs	r3, #1
 800907a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800907c:	4b08      	ldr	r3, [pc, #32]	@ (80090a0 <vPortSetupTimerInterrupt+0x6c>)
 800907e:	2207      	movs	r2, #7
 8009080:	601a      	str	r2, [r3, #0]
}
 8009082:	bf00      	nop
 8009084:	46bd      	mov	sp, r7
 8009086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908a:	4770      	bx	lr
 800908c:	24000000 	.word	0x24000000
 8009090:	10624dd3 	.word	0x10624dd3
 8009094:	240010fc 	.word	0x240010fc
 8009098:	24001100 	.word	0x24001100
 800909c:	24001104 	.word	0x24001104
 80090a0:	e000e010 	.word	0xe000e010
 80090a4:	e000e018 	.word	0xe000e018
 80090a8:	e000e014 	.word	0xe000e014

080090ac <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80090ac:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80090bc <vPortEnableVFP+0x10>
 80090b0:	6801      	ldr	r1, [r0, #0]
 80090b2:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80090b6:	6001      	str	r1, [r0, #0]
 80090b8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80090ba:	bf00      	nop
 80090bc:	e000ed88 	.word	0xe000ed88

080090c0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80090c0:	b480      	push	{r7}
 80090c2:	b085      	sub	sp, #20
 80090c4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80090c6:	f3ef 8305 	mrs	r3, IPSR
 80090ca:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2b0f      	cmp	r3, #15
 80090d0:	d915      	bls.n	80090fe <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80090d2:	4a18      	ldr	r2, [pc, #96]	@ (8009134 <vPortValidateInterruptPriority+0x74>)
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	4413      	add	r3, r2
 80090d8:	781b      	ldrb	r3, [r3, #0]
 80090da:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80090dc:	4b16      	ldr	r3, [pc, #88]	@ (8009138 <vPortValidateInterruptPriority+0x78>)
 80090de:	781b      	ldrb	r3, [r3, #0]
 80090e0:	7afa      	ldrb	r2, [r7, #11]
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d20b      	bcs.n	80090fe <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80090e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090ea:	f383 8811 	msr	BASEPRI, r3
 80090ee:	f3bf 8f6f 	isb	sy
 80090f2:	f3bf 8f4f 	dsb	sy
 80090f6:	607b      	str	r3, [r7, #4]
}
 80090f8:	bf00      	nop
 80090fa:	bf00      	nop
 80090fc:	e7fd      	b.n	80090fa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80090fe:	4b0f      	ldr	r3, [pc, #60]	@ (800913c <vPortValidateInterruptPriority+0x7c>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009106:	4b0e      	ldr	r3, [pc, #56]	@ (8009140 <vPortValidateInterruptPriority+0x80>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	429a      	cmp	r2, r3
 800910c:	d90b      	bls.n	8009126 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800910e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009112:	f383 8811 	msr	BASEPRI, r3
 8009116:	f3bf 8f6f 	isb	sy
 800911a:	f3bf 8f4f 	dsb	sy
 800911e:	603b      	str	r3, [r7, #0]
}
 8009120:	bf00      	nop
 8009122:	bf00      	nop
 8009124:	e7fd      	b.n	8009122 <vPortValidateInterruptPriority+0x62>
	}
 8009126:	bf00      	nop
 8009128:	3714      	adds	r7, #20
 800912a:	46bd      	mov	sp, r7
 800912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009130:	4770      	bx	lr
 8009132:	bf00      	nop
 8009134:	e000e3f0 	.word	0xe000e3f0
 8009138:	24001108 	.word	0x24001108
 800913c:	e000ed0c 	.word	0xe000ed0c
 8009140:	2400110c 	.word	0x2400110c

08009144 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b08a      	sub	sp, #40	@ 0x28
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800914c:	2300      	movs	r3, #0
 800914e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009150:	f7fe fae2 	bl	8007718 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009154:	4b5c      	ldr	r3, [pc, #368]	@ (80092c8 <pvPortMalloc+0x184>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d101      	bne.n	8009160 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800915c:	f000 f924 	bl	80093a8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009160:	4b5a      	ldr	r3, [pc, #360]	@ (80092cc <pvPortMalloc+0x188>)
 8009162:	681a      	ldr	r2, [r3, #0]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	4013      	ands	r3, r2
 8009168:	2b00      	cmp	r3, #0
 800916a:	f040 8095 	bne.w	8009298 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d01e      	beq.n	80091b2 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009174:	2208      	movs	r2, #8
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	4413      	add	r3, r2
 800917a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f003 0307 	and.w	r3, r3, #7
 8009182:	2b00      	cmp	r3, #0
 8009184:	d015      	beq.n	80091b2 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f023 0307 	bic.w	r3, r3, #7
 800918c:	3308      	adds	r3, #8
 800918e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f003 0307 	and.w	r3, r3, #7
 8009196:	2b00      	cmp	r3, #0
 8009198:	d00b      	beq.n	80091b2 <pvPortMalloc+0x6e>
	__asm volatile
 800919a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800919e:	f383 8811 	msr	BASEPRI, r3
 80091a2:	f3bf 8f6f 	isb	sy
 80091a6:	f3bf 8f4f 	dsb	sy
 80091aa:	617b      	str	r3, [r7, #20]
}
 80091ac:	bf00      	nop
 80091ae:	bf00      	nop
 80091b0:	e7fd      	b.n	80091ae <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d06f      	beq.n	8009298 <pvPortMalloc+0x154>
 80091b8:	4b45      	ldr	r3, [pc, #276]	@ (80092d0 <pvPortMalloc+0x18c>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	687a      	ldr	r2, [r7, #4]
 80091be:	429a      	cmp	r2, r3
 80091c0:	d86a      	bhi.n	8009298 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80091c2:	4b44      	ldr	r3, [pc, #272]	@ (80092d4 <pvPortMalloc+0x190>)
 80091c4:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80091c6:	4b43      	ldr	r3, [pc, #268]	@ (80092d4 <pvPortMalloc+0x190>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80091cc:	e004      	b.n	80091d8 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80091ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091d0:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80091d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80091d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	687a      	ldr	r2, [r7, #4]
 80091de:	429a      	cmp	r2, r3
 80091e0:	d903      	bls.n	80091ea <pvPortMalloc+0xa6>
 80091e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d1f1      	bne.n	80091ce <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80091ea:	4b37      	ldr	r3, [pc, #220]	@ (80092c8 <pvPortMalloc+0x184>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091f0:	429a      	cmp	r2, r3
 80091f2:	d051      	beq.n	8009298 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80091f4:	6a3b      	ldr	r3, [r7, #32]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	2208      	movs	r2, #8
 80091fa:	4413      	add	r3, r2
 80091fc:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80091fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009200:	681a      	ldr	r2, [r3, #0]
 8009202:	6a3b      	ldr	r3, [r7, #32]
 8009204:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009208:	685a      	ldr	r2, [r3, #4]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	1ad2      	subs	r2, r2, r3
 800920e:	2308      	movs	r3, #8
 8009210:	005b      	lsls	r3, r3, #1
 8009212:	429a      	cmp	r2, r3
 8009214:	d920      	bls.n	8009258 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009216:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	4413      	add	r3, r2
 800921c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800921e:	69bb      	ldr	r3, [r7, #24]
 8009220:	f003 0307 	and.w	r3, r3, #7
 8009224:	2b00      	cmp	r3, #0
 8009226:	d00b      	beq.n	8009240 <pvPortMalloc+0xfc>
	__asm volatile
 8009228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800922c:	f383 8811 	msr	BASEPRI, r3
 8009230:	f3bf 8f6f 	isb	sy
 8009234:	f3bf 8f4f 	dsb	sy
 8009238:	613b      	str	r3, [r7, #16]
}
 800923a:	bf00      	nop
 800923c:	bf00      	nop
 800923e:	e7fd      	b.n	800923c <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009242:	685a      	ldr	r2, [r3, #4]
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	1ad2      	subs	r2, r2, r3
 8009248:	69bb      	ldr	r3, [r7, #24]
 800924a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800924c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800924e:	687a      	ldr	r2, [r7, #4]
 8009250:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009252:	69b8      	ldr	r0, [r7, #24]
 8009254:	f000 f90a 	bl	800946c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009258:	4b1d      	ldr	r3, [pc, #116]	@ (80092d0 <pvPortMalloc+0x18c>)
 800925a:	681a      	ldr	r2, [r3, #0]
 800925c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	1ad3      	subs	r3, r2, r3
 8009262:	4a1b      	ldr	r2, [pc, #108]	@ (80092d0 <pvPortMalloc+0x18c>)
 8009264:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009266:	4b1a      	ldr	r3, [pc, #104]	@ (80092d0 <pvPortMalloc+0x18c>)
 8009268:	681a      	ldr	r2, [r3, #0]
 800926a:	4b1b      	ldr	r3, [pc, #108]	@ (80092d8 <pvPortMalloc+0x194>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	429a      	cmp	r2, r3
 8009270:	d203      	bcs.n	800927a <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009272:	4b17      	ldr	r3, [pc, #92]	@ (80092d0 <pvPortMalloc+0x18c>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4a18      	ldr	r2, [pc, #96]	@ (80092d8 <pvPortMalloc+0x194>)
 8009278:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800927a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800927c:	685a      	ldr	r2, [r3, #4]
 800927e:	4b13      	ldr	r3, [pc, #76]	@ (80092cc <pvPortMalloc+0x188>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	431a      	orrs	r2, r3
 8009284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009286:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800928a:	2200      	movs	r2, #0
 800928c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800928e:	4b13      	ldr	r3, [pc, #76]	@ (80092dc <pvPortMalloc+0x198>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	3301      	adds	r3, #1
 8009294:	4a11      	ldr	r2, [pc, #68]	@ (80092dc <pvPortMalloc+0x198>)
 8009296:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009298:	f7fe fa84 	bl	80077a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800929c:	69fb      	ldr	r3, [r7, #28]
 800929e:	f003 0307 	and.w	r3, r3, #7
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d00b      	beq.n	80092be <pvPortMalloc+0x17a>
	__asm volatile
 80092a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092aa:	f383 8811 	msr	BASEPRI, r3
 80092ae:	f3bf 8f6f 	isb	sy
 80092b2:	f3bf 8f4f 	dsb	sy
 80092b6:	60fb      	str	r3, [r7, #12]
}
 80092b8:	bf00      	nop
 80092ba:	bf00      	nop
 80092bc:	e7fd      	b.n	80092ba <pvPortMalloc+0x176>
	return pvReturn;
 80092be:	69fb      	ldr	r3, [r7, #28]
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3728      	adds	r7, #40	@ 0x28
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}
 80092c8:	24004d18 	.word	0x24004d18
 80092cc:	24004d2c 	.word	0x24004d2c
 80092d0:	24004d1c 	.word	0x24004d1c
 80092d4:	24004d10 	.word	0x24004d10
 80092d8:	24004d20 	.word	0x24004d20
 80092dc:	24004d24 	.word	0x24004d24

080092e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b086      	sub	sp, #24
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d04f      	beq.n	8009392 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80092f2:	2308      	movs	r3, #8
 80092f4:	425b      	negs	r3, r3
 80092f6:	697a      	ldr	r2, [r7, #20]
 80092f8:	4413      	add	r3, r2
 80092fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	685a      	ldr	r2, [r3, #4]
 8009304:	4b25      	ldr	r3, [pc, #148]	@ (800939c <vPortFree+0xbc>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	4013      	ands	r3, r2
 800930a:	2b00      	cmp	r3, #0
 800930c:	d10b      	bne.n	8009326 <vPortFree+0x46>
	__asm volatile
 800930e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009312:	f383 8811 	msr	BASEPRI, r3
 8009316:	f3bf 8f6f 	isb	sy
 800931a:	f3bf 8f4f 	dsb	sy
 800931e:	60fb      	str	r3, [r7, #12]
}
 8009320:	bf00      	nop
 8009322:	bf00      	nop
 8009324:	e7fd      	b.n	8009322 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d00b      	beq.n	8009346 <vPortFree+0x66>
	__asm volatile
 800932e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009332:	f383 8811 	msr	BASEPRI, r3
 8009336:	f3bf 8f6f 	isb	sy
 800933a:	f3bf 8f4f 	dsb	sy
 800933e:	60bb      	str	r3, [r7, #8]
}
 8009340:	bf00      	nop
 8009342:	bf00      	nop
 8009344:	e7fd      	b.n	8009342 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	685a      	ldr	r2, [r3, #4]
 800934a:	4b14      	ldr	r3, [pc, #80]	@ (800939c <vPortFree+0xbc>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4013      	ands	r3, r2
 8009350:	2b00      	cmp	r3, #0
 8009352:	d01e      	beq.n	8009392 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d11a      	bne.n	8009392 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	685a      	ldr	r2, [r3, #4]
 8009360:	4b0e      	ldr	r3, [pc, #56]	@ (800939c <vPortFree+0xbc>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	43db      	mvns	r3, r3
 8009366:	401a      	ands	r2, r3
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800936c:	f7fe f9d4 	bl	8007718 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	685a      	ldr	r2, [r3, #4]
 8009374:	4b0a      	ldr	r3, [pc, #40]	@ (80093a0 <vPortFree+0xc0>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	4413      	add	r3, r2
 800937a:	4a09      	ldr	r2, [pc, #36]	@ (80093a0 <vPortFree+0xc0>)
 800937c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800937e:	6938      	ldr	r0, [r7, #16]
 8009380:	f000 f874 	bl	800946c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009384:	4b07      	ldr	r3, [pc, #28]	@ (80093a4 <vPortFree+0xc4>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	3301      	adds	r3, #1
 800938a:	4a06      	ldr	r2, [pc, #24]	@ (80093a4 <vPortFree+0xc4>)
 800938c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800938e:	f7fe fa09 	bl	80077a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009392:	bf00      	nop
 8009394:	3718      	adds	r7, #24
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}
 800939a:	bf00      	nop
 800939c:	24004d2c 	.word	0x24004d2c
 80093a0:	24004d1c 	.word	0x24004d1c
 80093a4:	24004d28 	.word	0x24004d28

080093a8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80093a8:	b480      	push	{r7}
 80093aa:	b085      	sub	sp, #20
 80093ac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80093ae:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80093b2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80093b4:	4b27      	ldr	r3, [pc, #156]	@ (8009454 <prvHeapInit+0xac>)
 80093b6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f003 0307 	and.w	r3, r3, #7
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d00c      	beq.n	80093dc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	3307      	adds	r3, #7
 80093c6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	f023 0307 	bic.w	r3, r3, #7
 80093ce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80093d0:	68ba      	ldr	r2, [r7, #8]
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	1ad3      	subs	r3, r2, r3
 80093d6:	4a1f      	ldr	r2, [pc, #124]	@ (8009454 <prvHeapInit+0xac>)
 80093d8:	4413      	add	r3, r2
 80093da:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80093e0:	4a1d      	ldr	r2, [pc, #116]	@ (8009458 <prvHeapInit+0xb0>)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80093e6:	4b1c      	ldr	r3, [pc, #112]	@ (8009458 <prvHeapInit+0xb0>)
 80093e8:	2200      	movs	r2, #0
 80093ea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	68ba      	ldr	r2, [r7, #8]
 80093f0:	4413      	add	r3, r2
 80093f2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80093f4:	2208      	movs	r2, #8
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	1a9b      	subs	r3, r3, r2
 80093fa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f023 0307 	bic.w	r3, r3, #7
 8009402:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	4a15      	ldr	r2, [pc, #84]	@ (800945c <prvHeapInit+0xb4>)
 8009408:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800940a:	4b14      	ldr	r3, [pc, #80]	@ (800945c <prvHeapInit+0xb4>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	2200      	movs	r2, #0
 8009410:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009412:	4b12      	ldr	r3, [pc, #72]	@ (800945c <prvHeapInit+0xb4>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	2200      	movs	r2, #0
 8009418:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	68fa      	ldr	r2, [r7, #12]
 8009422:	1ad2      	subs	r2, r2, r3
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009428:	4b0c      	ldr	r3, [pc, #48]	@ (800945c <prvHeapInit+0xb4>)
 800942a:	681a      	ldr	r2, [r3, #0]
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	4a0a      	ldr	r2, [pc, #40]	@ (8009460 <prvHeapInit+0xb8>)
 8009436:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	685b      	ldr	r3, [r3, #4]
 800943c:	4a09      	ldr	r2, [pc, #36]	@ (8009464 <prvHeapInit+0xbc>)
 800943e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009440:	4b09      	ldr	r3, [pc, #36]	@ (8009468 <prvHeapInit+0xc0>)
 8009442:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009446:	601a      	str	r2, [r3, #0]
}
 8009448:	bf00      	nop
 800944a:	3714      	adds	r7, #20
 800944c:	46bd      	mov	sp, r7
 800944e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009452:	4770      	bx	lr
 8009454:	24001110 	.word	0x24001110
 8009458:	24004d10 	.word	0x24004d10
 800945c:	24004d18 	.word	0x24004d18
 8009460:	24004d20 	.word	0x24004d20
 8009464:	24004d1c 	.word	0x24004d1c
 8009468:	24004d2c 	.word	0x24004d2c

0800946c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800946c:	b480      	push	{r7}
 800946e:	b085      	sub	sp, #20
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009474:	4b28      	ldr	r3, [pc, #160]	@ (8009518 <prvInsertBlockIntoFreeList+0xac>)
 8009476:	60fb      	str	r3, [r7, #12]
 8009478:	e002      	b.n	8009480 <prvInsertBlockIntoFreeList+0x14>
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	60fb      	str	r3, [r7, #12]
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	687a      	ldr	r2, [r7, #4]
 8009486:	429a      	cmp	r2, r3
 8009488:	d8f7      	bhi.n	800947a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	685b      	ldr	r3, [r3, #4]
 8009492:	68ba      	ldr	r2, [r7, #8]
 8009494:	4413      	add	r3, r2
 8009496:	687a      	ldr	r2, [r7, #4]
 8009498:	429a      	cmp	r2, r3
 800949a:	d108      	bne.n	80094ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	685a      	ldr	r2, [r3, #4]
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	685b      	ldr	r3, [r3, #4]
 80094a4:	441a      	add	r2, r3
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	685b      	ldr	r3, [r3, #4]
 80094b6:	68ba      	ldr	r2, [r7, #8]
 80094b8:	441a      	add	r2, r3
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	429a      	cmp	r2, r3
 80094c0:	d118      	bne.n	80094f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681a      	ldr	r2, [r3, #0]
 80094c6:	4b15      	ldr	r3, [pc, #84]	@ (800951c <prvInsertBlockIntoFreeList+0xb0>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	429a      	cmp	r2, r3
 80094cc:	d00d      	beq.n	80094ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	685a      	ldr	r2, [r3, #4]
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	685b      	ldr	r3, [r3, #4]
 80094d8:	441a      	add	r2, r3
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	681a      	ldr	r2, [r3, #0]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	601a      	str	r2, [r3, #0]
 80094e8:	e008      	b.n	80094fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80094ea:	4b0c      	ldr	r3, [pc, #48]	@ (800951c <prvInsertBlockIntoFreeList+0xb0>)
 80094ec:	681a      	ldr	r2, [r3, #0]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	601a      	str	r2, [r3, #0]
 80094f2:	e003      	b.n	80094fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681a      	ldr	r2, [r3, #0]
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80094fc:	68fa      	ldr	r2, [r7, #12]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	429a      	cmp	r2, r3
 8009502:	d002      	beq.n	800950a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	687a      	ldr	r2, [r7, #4]
 8009508:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800950a:	bf00      	nop
 800950c:	3714      	adds	r7, #20
 800950e:	46bd      	mov	sp, r7
 8009510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009514:	4770      	bx	lr
 8009516:	bf00      	nop
 8009518:	24004d10 	.word	0x24004d10
 800951c:	24004d18 	.word	0x24004d18

08009520 <abort>:
 8009520:	b508      	push	{r3, lr}
 8009522:	2006      	movs	r0, #6
 8009524:	f001 f988 	bl	800a838 <raise>
 8009528:	2001      	movs	r0, #1
 800952a:	f7f7 fd4b 	bl	8000fc4 <_exit>
	...

08009530 <__assert_func>:
 8009530:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009532:	4614      	mov	r4, r2
 8009534:	461a      	mov	r2, r3
 8009536:	4b09      	ldr	r3, [pc, #36]	@ (800955c <__assert_func+0x2c>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4605      	mov	r5, r0
 800953c:	68d8      	ldr	r0, [r3, #12]
 800953e:	b954      	cbnz	r4, 8009556 <__assert_func+0x26>
 8009540:	4b07      	ldr	r3, [pc, #28]	@ (8009560 <__assert_func+0x30>)
 8009542:	461c      	mov	r4, r3
 8009544:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009548:	9100      	str	r1, [sp, #0]
 800954a:	462b      	mov	r3, r5
 800954c:	4905      	ldr	r1, [pc, #20]	@ (8009564 <__assert_func+0x34>)
 800954e:	f000 ffab 	bl	800a4a8 <fiprintf>
 8009552:	f7ff ffe5 	bl	8009520 <abort>
 8009556:	4b04      	ldr	r3, [pc, #16]	@ (8009568 <__assert_func+0x38>)
 8009558:	e7f4      	b.n	8009544 <__assert_func+0x14>
 800955a:	bf00      	nop
 800955c:	24000020 	.word	0x24000020
 8009560:	0800dcc3 	.word	0x0800dcc3
 8009564:	0800dc95 	.word	0x0800dc95
 8009568:	0800dc88 	.word	0x0800dc88

0800956c <malloc>:
 800956c:	4b02      	ldr	r3, [pc, #8]	@ (8009578 <malloc+0xc>)
 800956e:	4601      	mov	r1, r0
 8009570:	6818      	ldr	r0, [r3, #0]
 8009572:	f000 b825 	b.w	80095c0 <_malloc_r>
 8009576:	bf00      	nop
 8009578:	24000020 	.word	0x24000020

0800957c <sbrk_aligned>:
 800957c:	b570      	push	{r4, r5, r6, lr}
 800957e:	4e0f      	ldr	r6, [pc, #60]	@ (80095bc <sbrk_aligned+0x40>)
 8009580:	460c      	mov	r4, r1
 8009582:	6831      	ldr	r1, [r6, #0]
 8009584:	4605      	mov	r5, r0
 8009586:	b911      	cbnz	r1, 800958e <sbrk_aligned+0x12>
 8009588:	f001 fa00 	bl	800a98c <_sbrk_r>
 800958c:	6030      	str	r0, [r6, #0]
 800958e:	4621      	mov	r1, r4
 8009590:	4628      	mov	r0, r5
 8009592:	f001 f9fb 	bl	800a98c <_sbrk_r>
 8009596:	1c43      	adds	r3, r0, #1
 8009598:	d103      	bne.n	80095a2 <sbrk_aligned+0x26>
 800959a:	f04f 34ff 	mov.w	r4, #4294967295
 800959e:	4620      	mov	r0, r4
 80095a0:	bd70      	pop	{r4, r5, r6, pc}
 80095a2:	1cc4      	adds	r4, r0, #3
 80095a4:	f024 0403 	bic.w	r4, r4, #3
 80095a8:	42a0      	cmp	r0, r4
 80095aa:	d0f8      	beq.n	800959e <sbrk_aligned+0x22>
 80095ac:	1a21      	subs	r1, r4, r0
 80095ae:	4628      	mov	r0, r5
 80095b0:	f001 f9ec 	bl	800a98c <_sbrk_r>
 80095b4:	3001      	adds	r0, #1
 80095b6:	d1f2      	bne.n	800959e <sbrk_aligned+0x22>
 80095b8:	e7ef      	b.n	800959a <sbrk_aligned+0x1e>
 80095ba:	bf00      	nop
 80095bc:	24004d30 	.word	0x24004d30

080095c0 <_malloc_r>:
 80095c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095c4:	1ccd      	adds	r5, r1, #3
 80095c6:	f025 0503 	bic.w	r5, r5, #3
 80095ca:	3508      	adds	r5, #8
 80095cc:	2d0c      	cmp	r5, #12
 80095ce:	bf38      	it	cc
 80095d0:	250c      	movcc	r5, #12
 80095d2:	2d00      	cmp	r5, #0
 80095d4:	4606      	mov	r6, r0
 80095d6:	db01      	blt.n	80095dc <_malloc_r+0x1c>
 80095d8:	42a9      	cmp	r1, r5
 80095da:	d904      	bls.n	80095e6 <_malloc_r+0x26>
 80095dc:	230c      	movs	r3, #12
 80095de:	6033      	str	r3, [r6, #0]
 80095e0:	2000      	movs	r0, #0
 80095e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80096bc <_malloc_r+0xfc>
 80095ea:	f000 f869 	bl	80096c0 <__malloc_lock>
 80095ee:	f8d8 3000 	ldr.w	r3, [r8]
 80095f2:	461c      	mov	r4, r3
 80095f4:	bb44      	cbnz	r4, 8009648 <_malloc_r+0x88>
 80095f6:	4629      	mov	r1, r5
 80095f8:	4630      	mov	r0, r6
 80095fa:	f7ff ffbf 	bl	800957c <sbrk_aligned>
 80095fe:	1c43      	adds	r3, r0, #1
 8009600:	4604      	mov	r4, r0
 8009602:	d158      	bne.n	80096b6 <_malloc_r+0xf6>
 8009604:	f8d8 4000 	ldr.w	r4, [r8]
 8009608:	4627      	mov	r7, r4
 800960a:	2f00      	cmp	r7, #0
 800960c:	d143      	bne.n	8009696 <_malloc_r+0xd6>
 800960e:	2c00      	cmp	r4, #0
 8009610:	d04b      	beq.n	80096aa <_malloc_r+0xea>
 8009612:	6823      	ldr	r3, [r4, #0]
 8009614:	4639      	mov	r1, r7
 8009616:	4630      	mov	r0, r6
 8009618:	eb04 0903 	add.w	r9, r4, r3
 800961c:	f001 f9b6 	bl	800a98c <_sbrk_r>
 8009620:	4581      	cmp	r9, r0
 8009622:	d142      	bne.n	80096aa <_malloc_r+0xea>
 8009624:	6821      	ldr	r1, [r4, #0]
 8009626:	1a6d      	subs	r5, r5, r1
 8009628:	4629      	mov	r1, r5
 800962a:	4630      	mov	r0, r6
 800962c:	f7ff ffa6 	bl	800957c <sbrk_aligned>
 8009630:	3001      	adds	r0, #1
 8009632:	d03a      	beq.n	80096aa <_malloc_r+0xea>
 8009634:	6823      	ldr	r3, [r4, #0]
 8009636:	442b      	add	r3, r5
 8009638:	6023      	str	r3, [r4, #0]
 800963a:	f8d8 3000 	ldr.w	r3, [r8]
 800963e:	685a      	ldr	r2, [r3, #4]
 8009640:	bb62      	cbnz	r2, 800969c <_malloc_r+0xdc>
 8009642:	f8c8 7000 	str.w	r7, [r8]
 8009646:	e00f      	b.n	8009668 <_malloc_r+0xa8>
 8009648:	6822      	ldr	r2, [r4, #0]
 800964a:	1b52      	subs	r2, r2, r5
 800964c:	d420      	bmi.n	8009690 <_malloc_r+0xd0>
 800964e:	2a0b      	cmp	r2, #11
 8009650:	d917      	bls.n	8009682 <_malloc_r+0xc2>
 8009652:	1961      	adds	r1, r4, r5
 8009654:	42a3      	cmp	r3, r4
 8009656:	6025      	str	r5, [r4, #0]
 8009658:	bf18      	it	ne
 800965a:	6059      	strne	r1, [r3, #4]
 800965c:	6863      	ldr	r3, [r4, #4]
 800965e:	bf08      	it	eq
 8009660:	f8c8 1000 	streq.w	r1, [r8]
 8009664:	5162      	str	r2, [r4, r5]
 8009666:	604b      	str	r3, [r1, #4]
 8009668:	4630      	mov	r0, r6
 800966a:	f000 f82f 	bl	80096cc <__malloc_unlock>
 800966e:	f104 000b 	add.w	r0, r4, #11
 8009672:	1d23      	adds	r3, r4, #4
 8009674:	f020 0007 	bic.w	r0, r0, #7
 8009678:	1ac2      	subs	r2, r0, r3
 800967a:	bf1c      	itt	ne
 800967c:	1a1b      	subne	r3, r3, r0
 800967e:	50a3      	strne	r3, [r4, r2]
 8009680:	e7af      	b.n	80095e2 <_malloc_r+0x22>
 8009682:	6862      	ldr	r2, [r4, #4]
 8009684:	42a3      	cmp	r3, r4
 8009686:	bf0c      	ite	eq
 8009688:	f8c8 2000 	streq.w	r2, [r8]
 800968c:	605a      	strne	r2, [r3, #4]
 800968e:	e7eb      	b.n	8009668 <_malloc_r+0xa8>
 8009690:	4623      	mov	r3, r4
 8009692:	6864      	ldr	r4, [r4, #4]
 8009694:	e7ae      	b.n	80095f4 <_malloc_r+0x34>
 8009696:	463c      	mov	r4, r7
 8009698:	687f      	ldr	r7, [r7, #4]
 800969a:	e7b6      	b.n	800960a <_malloc_r+0x4a>
 800969c:	461a      	mov	r2, r3
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	42a3      	cmp	r3, r4
 80096a2:	d1fb      	bne.n	800969c <_malloc_r+0xdc>
 80096a4:	2300      	movs	r3, #0
 80096a6:	6053      	str	r3, [r2, #4]
 80096a8:	e7de      	b.n	8009668 <_malloc_r+0xa8>
 80096aa:	230c      	movs	r3, #12
 80096ac:	6033      	str	r3, [r6, #0]
 80096ae:	4630      	mov	r0, r6
 80096b0:	f000 f80c 	bl	80096cc <__malloc_unlock>
 80096b4:	e794      	b.n	80095e0 <_malloc_r+0x20>
 80096b6:	6005      	str	r5, [r0, #0]
 80096b8:	e7d6      	b.n	8009668 <_malloc_r+0xa8>
 80096ba:	bf00      	nop
 80096bc:	24004d34 	.word	0x24004d34

080096c0 <__malloc_lock>:
 80096c0:	4801      	ldr	r0, [pc, #4]	@ (80096c8 <__malloc_lock+0x8>)
 80096c2:	f001 b9b0 	b.w	800aa26 <__retarget_lock_acquire_recursive>
 80096c6:	bf00      	nop
 80096c8:	24004e78 	.word	0x24004e78

080096cc <__malloc_unlock>:
 80096cc:	4801      	ldr	r0, [pc, #4]	@ (80096d4 <__malloc_unlock+0x8>)
 80096ce:	f001 b9ab 	b.w	800aa28 <__retarget_lock_release_recursive>
 80096d2:	bf00      	nop
 80096d4:	24004e78 	.word	0x24004e78

080096d8 <__cvt>:
 80096d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096da:	ed2d 8b02 	vpush	{d8}
 80096de:	eeb0 8b40 	vmov.f64	d8, d0
 80096e2:	b085      	sub	sp, #20
 80096e4:	4617      	mov	r7, r2
 80096e6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80096e8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80096ea:	ee18 2a90 	vmov	r2, s17
 80096ee:	f025 0520 	bic.w	r5, r5, #32
 80096f2:	2a00      	cmp	r2, #0
 80096f4:	bfb6      	itet	lt
 80096f6:	222d      	movlt	r2, #45	@ 0x2d
 80096f8:	2200      	movge	r2, #0
 80096fa:	eeb1 8b40 	vneglt.f64	d8, d0
 80096fe:	2d46      	cmp	r5, #70	@ 0x46
 8009700:	460c      	mov	r4, r1
 8009702:	701a      	strb	r2, [r3, #0]
 8009704:	d004      	beq.n	8009710 <__cvt+0x38>
 8009706:	2d45      	cmp	r5, #69	@ 0x45
 8009708:	d100      	bne.n	800970c <__cvt+0x34>
 800970a:	3401      	adds	r4, #1
 800970c:	2102      	movs	r1, #2
 800970e:	e000      	b.n	8009712 <__cvt+0x3a>
 8009710:	2103      	movs	r1, #3
 8009712:	ab03      	add	r3, sp, #12
 8009714:	9301      	str	r3, [sp, #4]
 8009716:	ab02      	add	r3, sp, #8
 8009718:	9300      	str	r3, [sp, #0]
 800971a:	4622      	mov	r2, r4
 800971c:	4633      	mov	r3, r6
 800971e:	eeb0 0b48 	vmov.f64	d0, d8
 8009722:	f001 fa21 	bl	800ab68 <_dtoa_r>
 8009726:	2d47      	cmp	r5, #71	@ 0x47
 8009728:	d114      	bne.n	8009754 <__cvt+0x7c>
 800972a:	07fb      	lsls	r3, r7, #31
 800972c:	d50a      	bpl.n	8009744 <__cvt+0x6c>
 800972e:	1902      	adds	r2, r0, r4
 8009730:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009738:	bf08      	it	eq
 800973a:	9203      	streq	r2, [sp, #12]
 800973c:	2130      	movs	r1, #48	@ 0x30
 800973e:	9b03      	ldr	r3, [sp, #12]
 8009740:	4293      	cmp	r3, r2
 8009742:	d319      	bcc.n	8009778 <__cvt+0xa0>
 8009744:	9b03      	ldr	r3, [sp, #12]
 8009746:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009748:	1a1b      	subs	r3, r3, r0
 800974a:	6013      	str	r3, [r2, #0]
 800974c:	b005      	add	sp, #20
 800974e:	ecbd 8b02 	vpop	{d8}
 8009752:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009754:	2d46      	cmp	r5, #70	@ 0x46
 8009756:	eb00 0204 	add.w	r2, r0, r4
 800975a:	d1e9      	bne.n	8009730 <__cvt+0x58>
 800975c:	7803      	ldrb	r3, [r0, #0]
 800975e:	2b30      	cmp	r3, #48	@ 0x30
 8009760:	d107      	bne.n	8009772 <__cvt+0x9a>
 8009762:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800976a:	bf1c      	itt	ne
 800976c:	f1c4 0401 	rsbne	r4, r4, #1
 8009770:	6034      	strne	r4, [r6, #0]
 8009772:	6833      	ldr	r3, [r6, #0]
 8009774:	441a      	add	r2, r3
 8009776:	e7db      	b.n	8009730 <__cvt+0x58>
 8009778:	1c5c      	adds	r4, r3, #1
 800977a:	9403      	str	r4, [sp, #12]
 800977c:	7019      	strb	r1, [r3, #0]
 800977e:	e7de      	b.n	800973e <__cvt+0x66>

08009780 <__exponent>:
 8009780:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009782:	2900      	cmp	r1, #0
 8009784:	bfba      	itte	lt
 8009786:	4249      	neglt	r1, r1
 8009788:	232d      	movlt	r3, #45	@ 0x2d
 800978a:	232b      	movge	r3, #43	@ 0x2b
 800978c:	2909      	cmp	r1, #9
 800978e:	7002      	strb	r2, [r0, #0]
 8009790:	7043      	strb	r3, [r0, #1]
 8009792:	dd29      	ble.n	80097e8 <__exponent+0x68>
 8009794:	f10d 0307 	add.w	r3, sp, #7
 8009798:	461d      	mov	r5, r3
 800979a:	270a      	movs	r7, #10
 800979c:	461a      	mov	r2, r3
 800979e:	fbb1 f6f7 	udiv	r6, r1, r7
 80097a2:	fb07 1416 	mls	r4, r7, r6, r1
 80097a6:	3430      	adds	r4, #48	@ 0x30
 80097a8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80097ac:	460c      	mov	r4, r1
 80097ae:	2c63      	cmp	r4, #99	@ 0x63
 80097b0:	f103 33ff 	add.w	r3, r3, #4294967295
 80097b4:	4631      	mov	r1, r6
 80097b6:	dcf1      	bgt.n	800979c <__exponent+0x1c>
 80097b8:	3130      	adds	r1, #48	@ 0x30
 80097ba:	1e94      	subs	r4, r2, #2
 80097bc:	f803 1c01 	strb.w	r1, [r3, #-1]
 80097c0:	1c41      	adds	r1, r0, #1
 80097c2:	4623      	mov	r3, r4
 80097c4:	42ab      	cmp	r3, r5
 80097c6:	d30a      	bcc.n	80097de <__exponent+0x5e>
 80097c8:	f10d 0309 	add.w	r3, sp, #9
 80097cc:	1a9b      	subs	r3, r3, r2
 80097ce:	42ac      	cmp	r4, r5
 80097d0:	bf88      	it	hi
 80097d2:	2300      	movhi	r3, #0
 80097d4:	3302      	adds	r3, #2
 80097d6:	4403      	add	r3, r0
 80097d8:	1a18      	subs	r0, r3, r0
 80097da:	b003      	add	sp, #12
 80097dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097de:	f813 6b01 	ldrb.w	r6, [r3], #1
 80097e2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80097e6:	e7ed      	b.n	80097c4 <__exponent+0x44>
 80097e8:	2330      	movs	r3, #48	@ 0x30
 80097ea:	3130      	adds	r1, #48	@ 0x30
 80097ec:	7083      	strb	r3, [r0, #2]
 80097ee:	70c1      	strb	r1, [r0, #3]
 80097f0:	1d03      	adds	r3, r0, #4
 80097f2:	e7f1      	b.n	80097d8 <__exponent+0x58>
 80097f4:	0000      	movs	r0, r0
	...

080097f8 <_printf_float>:
 80097f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097fc:	b08d      	sub	sp, #52	@ 0x34
 80097fe:	460c      	mov	r4, r1
 8009800:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009804:	4616      	mov	r6, r2
 8009806:	461f      	mov	r7, r3
 8009808:	4605      	mov	r5, r0
 800980a:	f001 f81d 	bl	800a848 <_localeconv_r>
 800980e:	f8d0 b000 	ldr.w	fp, [r0]
 8009812:	4658      	mov	r0, fp
 8009814:	f7f6 fdbc 	bl	8000390 <strlen>
 8009818:	2300      	movs	r3, #0
 800981a:	930a      	str	r3, [sp, #40]	@ 0x28
 800981c:	f8d8 3000 	ldr.w	r3, [r8]
 8009820:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009824:	6822      	ldr	r2, [r4, #0]
 8009826:	9005      	str	r0, [sp, #20]
 8009828:	3307      	adds	r3, #7
 800982a:	f023 0307 	bic.w	r3, r3, #7
 800982e:	f103 0108 	add.w	r1, r3, #8
 8009832:	f8c8 1000 	str.w	r1, [r8]
 8009836:	ed93 0b00 	vldr	d0, [r3]
 800983a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8009a98 <_printf_float+0x2a0>
 800983e:	eeb0 7bc0 	vabs.f64	d7, d0
 8009842:	eeb4 7b46 	vcmp.f64	d7, d6
 8009846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800984a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800984e:	dd24      	ble.n	800989a <_printf_float+0xa2>
 8009850:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009858:	d502      	bpl.n	8009860 <_printf_float+0x68>
 800985a:	232d      	movs	r3, #45	@ 0x2d
 800985c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009860:	498f      	ldr	r1, [pc, #572]	@ (8009aa0 <_printf_float+0x2a8>)
 8009862:	4b90      	ldr	r3, [pc, #576]	@ (8009aa4 <_printf_float+0x2ac>)
 8009864:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8009868:	bf94      	ite	ls
 800986a:	4688      	movls	r8, r1
 800986c:	4698      	movhi	r8, r3
 800986e:	f022 0204 	bic.w	r2, r2, #4
 8009872:	2303      	movs	r3, #3
 8009874:	6123      	str	r3, [r4, #16]
 8009876:	6022      	str	r2, [r4, #0]
 8009878:	f04f 0a00 	mov.w	sl, #0
 800987c:	9700      	str	r7, [sp, #0]
 800987e:	4633      	mov	r3, r6
 8009880:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009882:	4621      	mov	r1, r4
 8009884:	4628      	mov	r0, r5
 8009886:	f000 f9d1 	bl	8009c2c <_printf_common>
 800988a:	3001      	adds	r0, #1
 800988c:	f040 8089 	bne.w	80099a2 <_printf_float+0x1aa>
 8009890:	f04f 30ff 	mov.w	r0, #4294967295
 8009894:	b00d      	add	sp, #52	@ 0x34
 8009896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800989a:	eeb4 0b40 	vcmp.f64	d0, d0
 800989e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098a2:	d709      	bvc.n	80098b8 <_printf_float+0xc0>
 80098a4:	ee10 3a90 	vmov	r3, s1
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	bfbc      	itt	lt
 80098ac:	232d      	movlt	r3, #45	@ 0x2d
 80098ae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80098b2:	497d      	ldr	r1, [pc, #500]	@ (8009aa8 <_printf_float+0x2b0>)
 80098b4:	4b7d      	ldr	r3, [pc, #500]	@ (8009aac <_printf_float+0x2b4>)
 80098b6:	e7d5      	b.n	8009864 <_printf_float+0x6c>
 80098b8:	6863      	ldr	r3, [r4, #4]
 80098ba:	1c59      	adds	r1, r3, #1
 80098bc:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80098c0:	d139      	bne.n	8009936 <_printf_float+0x13e>
 80098c2:	2306      	movs	r3, #6
 80098c4:	6063      	str	r3, [r4, #4]
 80098c6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80098ca:	2300      	movs	r3, #0
 80098cc:	6022      	str	r2, [r4, #0]
 80098ce:	9303      	str	r3, [sp, #12]
 80098d0:	ab0a      	add	r3, sp, #40	@ 0x28
 80098d2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80098d6:	ab09      	add	r3, sp, #36	@ 0x24
 80098d8:	9300      	str	r3, [sp, #0]
 80098da:	6861      	ldr	r1, [r4, #4]
 80098dc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80098e0:	4628      	mov	r0, r5
 80098e2:	f7ff fef9 	bl	80096d8 <__cvt>
 80098e6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80098ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80098ec:	4680      	mov	r8, r0
 80098ee:	d129      	bne.n	8009944 <_printf_float+0x14c>
 80098f0:	1cc8      	adds	r0, r1, #3
 80098f2:	db02      	blt.n	80098fa <_printf_float+0x102>
 80098f4:	6863      	ldr	r3, [r4, #4]
 80098f6:	4299      	cmp	r1, r3
 80098f8:	dd41      	ble.n	800997e <_printf_float+0x186>
 80098fa:	f1a9 0902 	sub.w	r9, r9, #2
 80098fe:	fa5f f989 	uxtb.w	r9, r9
 8009902:	3901      	subs	r1, #1
 8009904:	464a      	mov	r2, r9
 8009906:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800990a:	9109      	str	r1, [sp, #36]	@ 0x24
 800990c:	f7ff ff38 	bl	8009780 <__exponent>
 8009910:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009912:	1813      	adds	r3, r2, r0
 8009914:	2a01      	cmp	r2, #1
 8009916:	4682      	mov	sl, r0
 8009918:	6123      	str	r3, [r4, #16]
 800991a:	dc02      	bgt.n	8009922 <_printf_float+0x12a>
 800991c:	6822      	ldr	r2, [r4, #0]
 800991e:	07d2      	lsls	r2, r2, #31
 8009920:	d501      	bpl.n	8009926 <_printf_float+0x12e>
 8009922:	3301      	adds	r3, #1
 8009924:	6123      	str	r3, [r4, #16]
 8009926:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800992a:	2b00      	cmp	r3, #0
 800992c:	d0a6      	beq.n	800987c <_printf_float+0x84>
 800992e:	232d      	movs	r3, #45	@ 0x2d
 8009930:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009934:	e7a2      	b.n	800987c <_printf_float+0x84>
 8009936:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800993a:	d1c4      	bne.n	80098c6 <_printf_float+0xce>
 800993c:	2b00      	cmp	r3, #0
 800993e:	d1c2      	bne.n	80098c6 <_printf_float+0xce>
 8009940:	2301      	movs	r3, #1
 8009942:	e7bf      	b.n	80098c4 <_printf_float+0xcc>
 8009944:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8009948:	d9db      	bls.n	8009902 <_printf_float+0x10a>
 800994a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800994e:	d118      	bne.n	8009982 <_printf_float+0x18a>
 8009950:	2900      	cmp	r1, #0
 8009952:	6863      	ldr	r3, [r4, #4]
 8009954:	dd0b      	ble.n	800996e <_printf_float+0x176>
 8009956:	6121      	str	r1, [r4, #16]
 8009958:	b913      	cbnz	r3, 8009960 <_printf_float+0x168>
 800995a:	6822      	ldr	r2, [r4, #0]
 800995c:	07d0      	lsls	r0, r2, #31
 800995e:	d502      	bpl.n	8009966 <_printf_float+0x16e>
 8009960:	3301      	adds	r3, #1
 8009962:	440b      	add	r3, r1
 8009964:	6123      	str	r3, [r4, #16]
 8009966:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009968:	f04f 0a00 	mov.w	sl, #0
 800996c:	e7db      	b.n	8009926 <_printf_float+0x12e>
 800996e:	b913      	cbnz	r3, 8009976 <_printf_float+0x17e>
 8009970:	6822      	ldr	r2, [r4, #0]
 8009972:	07d2      	lsls	r2, r2, #31
 8009974:	d501      	bpl.n	800997a <_printf_float+0x182>
 8009976:	3302      	adds	r3, #2
 8009978:	e7f4      	b.n	8009964 <_printf_float+0x16c>
 800997a:	2301      	movs	r3, #1
 800997c:	e7f2      	b.n	8009964 <_printf_float+0x16c>
 800997e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8009982:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009984:	4299      	cmp	r1, r3
 8009986:	db05      	blt.n	8009994 <_printf_float+0x19c>
 8009988:	6823      	ldr	r3, [r4, #0]
 800998a:	6121      	str	r1, [r4, #16]
 800998c:	07d8      	lsls	r0, r3, #31
 800998e:	d5ea      	bpl.n	8009966 <_printf_float+0x16e>
 8009990:	1c4b      	adds	r3, r1, #1
 8009992:	e7e7      	b.n	8009964 <_printf_float+0x16c>
 8009994:	2900      	cmp	r1, #0
 8009996:	bfd4      	ite	le
 8009998:	f1c1 0202 	rsble	r2, r1, #2
 800999c:	2201      	movgt	r2, #1
 800999e:	4413      	add	r3, r2
 80099a0:	e7e0      	b.n	8009964 <_printf_float+0x16c>
 80099a2:	6823      	ldr	r3, [r4, #0]
 80099a4:	055a      	lsls	r2, r3, #21
 80099a6:	d407      	bmi.n	80099b8 <_printf_float+0x1c0>
 80099a8:	6923      	ldr	r3, [r4, #16]
 80099aa:	4642      	mov	r2, r8
 80099ac:	4631      	mov	r1, r6
 80099ae:	4628      	mov	r0, r5
 80099b0:	47b8      	blx	r7
 80099b2:	3001      	adds	r0, #1
 80099b4:	d12a      	bne.n	8009a0c <_printf_float+0x214>
 80099b6:	e76b      	b.n	8009890 <_printf_float+0x98>
 80099b8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80099bc:	f240 80e0 	bls.w	8009b80 <_printf_float+0x388>
 80099c0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80099c4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80099c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099cc:	d133      	bne.n	8009a36 <_printf_float+0x23e>
 80099ce:	4a38      	ldr	r2, [pc, #224]	@ (8009ab0 <_printf_float+0x2b8>)
 80099d0:	2301      	movs	r3, #1
 80099d2:	4631      	mov	r1, r6
 80099d4:	4628      	mov	r0, r5
 80099d6:	47b8      	blx	r7
 80099d8:	3001      	adds	r0, #1
 80099da:	f43f af59 	beq.w	8009890 <_printf_float+0x98>
 80099de:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80099e2:	4543      	cmp	r3, r8
 80099e4:	db02      	blt.n	80099ec <_printf_float+0x1f4>
 80099e6:	6823      	ldr	r3, [r4, #0]
 80099e8:	07d8      	lsls	r0, r3, #31
 80099ea:	d50f      	bpl.n	8009a0c <_printf_float+0x214>
 80099ec:	9b05      	ldr	r3, [sp, #20]
 80099ee:	465a      	mov	r2, fp
 80099f0:	4631      	mov	r1, r6
 80099f2:	4628      	mov	r0, r5
 80099f4:	47b8      	blx	r7
 80099f6:	3001      	adds	r0, #1
 80099f8:	f43f af4a 	beq.w	8009890 <_printf_float+0x98>
 80099fc:	f04f 0900 	mov.w	r9, #0
 8009a00:	f108 38ff 	add.w	r8, r8, #4294967295
 8009a04:	f104 0a1a 	add.w	sl, r4, #26
 8009a08:	45c8      	cmp	r8, r9
 8009a0a:	dc09      	bgt.n	8009a20 <_printf_float+0x228>
 8009a0c:	6823      	ldr	r3, [r4, #0]
 8009a0e:	079b      	lsls	r3, r3, #30
 8009a10:	f100 8107 	bmi.w	8009c22 <_printf_float+0x42a>
 8009a14:	68e0      	ldr	r0, [r4, #12]
 8009a16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a18:	4298      	cmp	r0, r3
 8009a1a:	bfb8      	it	lt
 8009a1c:	4618      	movlt	r0, r3
 8009a1e:	e739      	b.n	8009894 <_printf_float+0x9c>
 8009a20:	2301      	movs	r3, #1
 8009a22:	4652      	mov	r2, sl
 8009a24:	4631      	mov	r1, r6
 8009a26:	4628      	mov	r0, r5
 8009a28:	47b8      	blx	r7
 8009a2a:	3001      	adds	r0, #1
 8009a2c:	f43f af30 	beq.w	8009890 <_printf_float+0x98>
 8009a30:	f109 0901 	add.w	r9, r9, #1
 8009a34:	e7e8      	b.n	8009a08 <_printf_float+0x210>
 8009a36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	dc3b      	bgt.n	8009ab4 <_printf_float+0x2bc>
 8009a3c:	4a1c      	ldr	r2, [pc, #112]	@ (8009ab0 <_printf_float+0x2b8>)
 8009a3e:	2301      	movs	r3, #1
 8009a40:	4631      	mov	r1, r6
 8009a42:	4628      	mov	r0, r5
 8009a44:	47b8      	blx	r7
 8009a46:	3001      	adds	r0, #1
 8009a48:	f43f af22 	beq.w	8009890 <_printf_float+0x98>
 8009a4c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009a50:	ea59 0303 	orrs.w	r3, r9, r3
 8009a54:	d102      	bne.n	8009a5c <_printf_float+0x264>
 8009a56:	6823      	ldr	r3, [r4, #0]
 8009a58:	07d9      	lsls	r1, r3, #31
 8009a5a:	d5d7      	bpl.n	8009a0c <_printf_float+0x214>
 8009a5c:	9b05      	ldr	r3, [sp, #20]
 8009a5e:	465a      	mov	r2, fp
 8009a60:	4631      	mov	r1, r6
 8009a62:	4628      	mov	r0, r5
 8009a64:	47b8      	blx	r7
 8009a66:	3001      	adds	r0, #1
 8009a68:	f43f af12 	beq.w	8009890 <_printf_float+0x98>
 8009a6c:	f04f 0a00 	mov.w	sl, #0
 8009a70:	f104 0b1a 	add.w	fp, r4, #26
 8009a74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a76:	425b      	negs	r3, r3
 8009a78:	4553      	cmp	r3, sl
 8009a7a:	dc01      	bgt.n	8009a80 <_printf_float+0x288>
 8009a7c:	464b      	mov	r3, r9
 8009a7e:	e794      	b.n	80099aa <_printf_float+0x1b2>
 8009a80:	2301      	movs	r3, #1
 8009a82:	465a      	mov	r2, fp
 8009a84:	4631      	mov	r1, r6
 8009a86:	4628      	mov	r0, r5
 8009a88:	47b8      	blx	r7
 8009a8a:	3001      	adds	r0, #1
 8009a8c:	f43f af00 	beq.w	8009890 <_printf_float+0x98>
 8009a90:	f10a 0a01 	add.w	sl, sl, #1
 8009a94:	e7ee      	b.n	8009a74 <_printf_float+0x27c>
 8009a96:	bf00      	nop
 8009a98:	ffffffff 	.word	0xffffffff
 8009a9c:	7fefffff 	.word	0x7fefffff
 8009aa0:	0800dcc4 	.word	0x0800dcc4
 8009aa4:	0800dcc8 	.word	0x0800dcc8
 8009aa8:	0800dccc 	.word	0x0800dccc
 8009aac:	0800dcd0 	.word	0x0800dcd0
 8009ab0:	0800dcd4 	.word	0x0800dcd4
 8009ab4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009ab6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009aba:	4553      	cmp	r3, sl
 8009abc:	bfa8      	it	ge
 8009abe:	4653      	movge	r3, sl
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	4699      	mov	r9, r3
 8009ac4:	dc37      	bgt.n	8009b36 <_printf_float+0x33e>
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	9307      	str	r3, [sp, #28]
 8009aca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ace:	f104 021a 	add.w	r2, r4, #26
 8009ad2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009ad4:	9907      	ldr	r1, [sp, #28]
 8009ad6:	9306      	str	r3, [sp, #24]
 8009ad8:	eba3 0309 	sub.w	r3, r3, r9
 8009adc:	428b      	cmp	r3, r1
 8009ade:	dc31      	bgt.n	8009b44 <_printf_float+0x34c>
 8009ae0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ae2:	459a      	cmp	sl, r3
 8009ae4:	dc3b      	bgt.n	8009b5e <_printf_float+0x366>
 8009ae6:	6823      	ldr	r3, [r4, #0]
 8009ae8:	07da      	lsls	r2, r3, #31
 8009aea:	d438      	bmi.n	8009b5e <_printf_float+0x366>
 8009aec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009aee:	ebaa 0903 	sub.w	r9, sl, r3
 8009af2:	9b06      	ldr	r3, [sp, #24]
 8009af4:	ebaa 0303 	sub.w	r3, sl, r3
 8009af8:	4599      	cmp	r9, r3
 8009afa:	bfa8      	it	ge
 8009afc:	4699      	movge	r9, r3
 8009afe:	f1b9 0f00 	cmp.w	r9, #0
 8009b02:	dc34      	bgt.n	8009b6e <_printf_float+0x376>
 8009b04:	f04f 0800 	mov.w	r8, #0
 8009b08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009b0c:	f104 0b1a 	add.w	fp, r4, #26
 8009b10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b12:	ebaa 0303 	sub.w	r3, sl, r3
 8009b16:	eba3 0309 	sub.w	r3, r3, r9
 8009b1a:	4543      	cmp	r3, r8
 8009b1c:	f77f af76 	ble.w	8009a0c <_printf_float+0x214>
 8009b20:	2301      	movs	r3, #1
 8009b22:	465a      	mov	r2, fp
 8009b24:	4631      	mov	r1, r6
 8009b26:	4628      	mov	r0, r5
 8009b28:	47b8      	blx	r7
 8009b2a:	3001      	adds	r0, #1
 8009b2c:	f43f aeb0 	beq.w	8009890 <_printf_float+0x98>
 8009b30:	f108 0801 	add.w	r8, r8, #1
 8009b34:	e7ec      	b.n	8009b10 <_printf_float+0x318>
 8009b36:	4642      	mov	r2, r8
 8009b38:	4631      	mov	r1, r6
 8009b3a:	4628      	mov	r0, r5
 8009b3c:	47b8      	blx	r7
 8009b3e:	3001      	adds	r0, #1
 8009b40:	d1c1      	bne.n	8009ac6 <_printf_float+0x2ce>
 8009b42:	e6a5      	b.n	8009890 <_printf_float+0x98>
 8009b44:	2301      	movs	r3, #1
 8009b46:	4631      	mov	r1, r6
 8009b48:	4628      	mov	r0, r5
 8009b4a:	9206      	str	r2, [sp, #24]
 8009b4c:	47b8      	blx	r7
 8009b4e:	3001      	adds	r0, #1
 8009b50:	f43f ae9e 	beq.w	8009890 <_printf_float+0x98>
 8009b54:	9b07      	ldr	r3, [sp, #28]
 8009b56:	9a06      	ldr	r2, [sp, #24]
 8009b58:	3301      	adds	r3, #1
 8009b5a:	9307      	str	r3, [sp, #28]
 8009b5c:	e7b9      	b.n	8009ad2 <_printf_float+0x2da>
 8009b5e:	9b05      	ldr	r3, [sp, #20]
 8009b60:	465a      	mov	r2, fp
 8009b62:	4631      	mov	r1, r6
 8009b64:	4628      	mov	r0, r5
 8009b66:	47b8      	blx	r7
 8009b68:	3001      	adds	r0, #1
 8009b6a:	d1bf      	bne.n	8009aec <_printf_float+0x2f4>
 8009b6c:	e690      	b.n	8009890 <_printf_float+0x98>
 8009b6e:	9a06      	ldr	r2, [sp, #24]
 8009b70:	464b      	mov	r3, r9
 8009b72:	4442      	add	r2, r8
 8009b74:	4631      	mov	r1, r6
 8009b76:	4628      	mov	r0, r5
 8009b78:	47b8      	blx	r7
 8009b7a:	3001      	adds	r0, #1
 8009b7c:	d1c2      	bne.n	8009b04 <_printf_float+0x30c>
 8009b7e:	e687      	b.n	8009890 <_printf_float+0x98>
 8009b80:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8009b84:	f1b9 0f01 	cmp.w	r9, #1
 8009b88:	dc01      	bgt.n	8009b8e <_printf_float+0x396>
 8009b8a:	07db      	lsls	r3, r3, #31
 8009b8c:	d536      	bpl.n	8009bfc <_printf_float+0x404>
 8009b8e:	2301      	movs	r3, #1
 8009b90:	4642      	mov	r2, r8
 8009b92:	4631      	mov	r1, r6
 8009b94:	4628      	mov	r0, r5
 8009b96:	47b8      	blx	r7
 8009b98:	3001      	adds	r0, #1
 8009b9a:	f43f ae79 	beq.w	8009890 <_printf_float+0x98>
 8009b9e:	9b05      	ldr	r3, [sp, #20]
 8009ba0:	465a      	mov	r2, fp
 8009ba2:	4631      	mov	r1, r6
 8009ba4:	4628      	mov	r0, r5
 8009ba6:	47b8      	blx	r7
 8009ba8:	3001      	adds	r0, #1
 8009baa:	f43f ae71 	beq.w	8009890 <_printf_float+0x98>
 8009bae:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8009bb2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bba:	f109 39ff 	add.w	r9, r9, #4294967295
 8009bbe:	d018      	beq.n	8009bf2 <_printf_float+0x3fa>
 8009bc0:	464b      	mov	r3, r9
 8009bc2:	f108 0201 	add.w	r2, r8, #1
 8009bc6:	4631      	mov	r1, r6
 8009bc8:	4628      	mov	r0, r5
 8009bca:	47b8      	blx	r7
 8009bcc:	3001      	adds	r0, #1
 8009bce:	d10c      	bne.n	8009bea <_printf_float+0x3f2>
 8009bd0:	e65e      	b.n	8009890 <_printf_float+0x98>
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	465a      	mov	r2, fp
 8009bd6:	4631      	mov	r1, r6
 8009bd8:	4628      	mov	r0, r5
 8009bda:	47b8      	blx	r7
 8009bdc:	3001      	adds	r0, #1
 8009bde:	f43f ae57 	beq.w	8009890 <_printf_float+0x98>
 8009be2:	f108 0801 	add.w	r8, r8, #1
 8009be6:	45c8      	cmp	r8, r9
 8009be8:	dbf3      	blt.n	8009bd2 <_printf_float+0x3da>
 8009bea:	4653      	mov	r3, sl
 8009bec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009bf0:	e6dc      	b.n	80099ac <_printf_float+0x1b4>
 8009bf2:	f04f 0800 	mov.w	r8, #0
 8009bf6:	f104 0b1a 	add.w	fp, r4, #26
 8009bfa:	e7f4      	b.n	8009be6 <_printf_float+0x3ee>
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	4642      	mov	r2, r8
 8009c00:	e7e1      	b.n	8009bc6 <_printf_float+0x3ce>
 8009c02:	2301      	movs	r3, #1
 8009c04:	464a      	mov	r2, r9
 8009c06:	4631      	mov	r1, r6
 8009c08:	4628      	mov	r0, r5
 8009c0a:	47b8      	blx	r7
 8009c0c:	3001      	adds	r0, #1
 8009c0e:	f43f ae3f 	beq.w	8009890 <_printf_float+0x98>
 8009c12:	f108 0801 	add.w	r8, r8, #1
 8009c16:	68e3      	ldr	r3, [r4, #12]
 8009c18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009c1a:	1a5b      	subs	r3, r3, r1
 8009c1c:	4543      	cmp	r3, r8
 8009c1e:	dcf0      	bgt.n	8009c02 <_printf_float+0x40a>
 8009c20:	e6f8      	b.n	8009a14 <_printf_float+0x21c>
 8009c22:	f04f 0800 	mov.w	r8, #0
 8009c26:	f104 0919 	add.w	r9, r4, #25
 8009c2a:	e7f4      	b.n	8009c16 <_printf_float+0x41e>

08009c2c <_printf_common>:
 8009c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c30:	4616      	mov	r6, r2
 8009c32:	4698      	mov	r8, r3
 8009c34:	688a      	ldr	r2, [r1, #8]
 8009c36:	690b      	ldr	r3, [r1, #16]
 8009c38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	bfb8      	it	lt
 8009c40:	4613      	movlt	r3, r2
 8009c42:	6033      	str	r3, [r6, #0]
 8009c44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009c48:	4607      	mov	r7, r0
 8009c4a:	460c      	mov	r4, r1
 8009c4c:	b10a      	cbz	r2, 8009c52 <_printf_common+0x26>
 8009c4e:	3301      	adds	r3, #1
 8009c50:	6033      	str	r3, [r6, #0]
 8009c52:	6823      	ldr	r3, [r4, #0]
 8009c54:	0699      	lsls	r1, r3, #26
 8009c56:	bf42      	ittt	mi
 8009c58:	6833      	ldrmi	r3, [r6, #0]
 8009c5a:	3302      	addmi	r3, #2
 8009c5c:	6033      	strmi	r3, [r6, #0]
 8009c5e:	6825      	ldr	r5, [r4, #0]
 8009c60:	f015 0506 	ands.w	r5, r5, #6
 8009c64:	d106      	bne.n	8009c74 <_printf_common+0x48>
 8009c66:	f104 0a19 	add.w	sl, r4, #25
 8009c6a:	68e3      	ldr	r3, [r4, #12]
 8009c6c:	6832      	ldr	r2, [r6, #0]
 8009c6e:	1a9b      	subs	r3, r3, r2
 8009c70:	42ab      	cmp	r3, r5
 8009c72:	dc26      	bgt.n	8009cc2 <_printf_common+0x96>
 8009c74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009c78:	6822      	ldr	r2, [r4, #0]
 8009c7a:	3b00      	subs	r3, #0
 8009c7c:	bf18      	it	ne
 8009c7e:	2301      	movne	r3, #1
 8009c80:	0692      	lsls	r2, r2, #26
 8009c82:	d42b      	bmi.n	8009cdc <_printf_common+0xb0>
 8009c84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009c88:	4641      	mov	r1, r8
 8009c8a:	4638      	mov	r0, r7
 8009c8c:	47c8      	blx	r9
 8009c8e:	3001      	adds	r0, #1
 8009c90:	d01e      	beq.n	8009cd0 <_printf_common+0xa4>
 8009c92:	6823      	ldr	r3, [r4, #0]
 8009c94:	6922      	ldr	r2, [r4, #16]
 8009c96:	f003 0306 	and.w	r3, r3, #6
 8009c9a:	2b04      	cmp	r3, #4
 8009c9c:	bf02      	ittt	eq
 8009c9e:	68e5      	ldreq	r5, [r4, #12]
 8009ca0:	6833      	ldreq	r3, [r6, #0]
 8009ca2:	1aed      	subeq	r5, r5, r3
 8009ca4:	68a3      	ldr	r3, [r4, #8]
 8009ca6:	bf0c      	ite	eq
 8009ca8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009cac:	2500      	movne	r5, #0
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	bfc4      	itt	gt
 8009cb2:	1a9b      	subgt	r3, r3, r2
 8009cb4:	18ed      	addgt	r5, r5, r3
 8009cb6:	2600      	movs	r6, #0
 8009cb8:	341a      	adds	r4, #26
 8009cba:	42b5      	cmp	r5, r6
 8009cbc:	d11a      	bne.n	8009cf4 <_printf_common+0xc8>
 8009cbe:	2000      	movs	r0, #0
 8009cc0:	e008      	b.n	8009cd4 <_printf_common+0xa8>
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	4652      	mov	r2, sl
 8009cc6:	4641      	mov	r1, r8
 8009cc8:	4638      	mov	r0, r7
 8009cca:	47c8      	blx	r9
 8009ccc:	3001      	adds	r0, #1
 8009cce:	d103      	bne.n	8009cd8 <_printf_common+0xac>
 8009cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8009cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cd8:	3501      	adds	r5, #1
 8009cda:	e7c6      	b.n	8009c6a <_printf_common+0x3e>
 8009cdc:	18e1      	adds	r1, r4, r3
 8009cde:	1c5a      	adds	r2, r3, #1
 8009ce0:	2030      	movs	r0, #48	@ 0x30
 8009ce2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009ce6:	4422      	add	r2, r4
 8009ce8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009cec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009cf0:	3302      	adds	r3, #2
 8009cf2:	e7c7      	b.n	8009c84 <_printf_common+0x58>
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	4622      	mov	r2, r4
 8009cf8:	4641      	mov	r1, r8
 8009cfa:	4638      	mov	r0, r7
 8009cfc:	47c8      	blx	r9
 8009cfe:	3001      	adds	r0, #1
 8009d00:	d0e6      	beq.n	8009cd0 <_printf_common+0xa4>
 8009d02:	3601      	adds	r6, #1
 8009d04:	e7d9      	b.n	8009cba <_printf_common+0x8e>
	...

08009d08 <_printf_i>:
 8009d08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d0c:	7e0f      	ldrb	r7, [r1, #24]
 8009d0e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009d10:	2f78      	cmp	r7, #120	@ 0x78
 8009d12:	4691      	mov	r9, r2
 8009d14:	4680      	mov	r8, r0
 8009d16:	460c      	mov	r4, r1
 8009d18:	469a      	mov	sl, r3
 8009d1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009d1e:	d807      	bhi.n	8009d30 <_printf_i+0x28>
 8009d20:	2f62      	cmp	r7, #98	@ 0x62
 8009d22:	d80a      	bhi.n	8009d3a <_printf_i+0x32>
 8009d24:	2f00      	cmp	r7, #0
 8009d26:	f000 80d2 	beq.w	8009ece <_printf_i+0x1c6>
 8009d2a:	2f58      	cmp	r7, #88	@ 0x58
 8009d2c:	f000 80b9 	beq.w	8009ea2 <_printf_i+0x19a>
 8009d30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009d34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009d38:	e03a      	b.n	8009db0 <_printf_i+0xa8>
 8009d3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009d3e:	2b15      	cmp	r3, #21
 8009d40:	d8f6      	bhi.n	8009d30 <_printf_i+0x28>
 8009d42:	a101      	add	r1, pc, #4	@ (adr r1, 8009d48 <_printf_i+0x40>)
 8009d44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009d48:	08009da1 	.word	0x08009da1
 8009d4c:	08009db5 	.word	0x08009db5
 8009d50:	08009d31 	.word	0x08009d31
 8009d54:	08009d31 	.word	0x08009d31
 8009d58:	08009d31 	.word	0x08009d31
 8009d5c:	08009d31 	.word	0x08009d31
 8009d60:	08009db5 	.word	0x08009db5
 8009d64:	08009d31 	.word	0x08009d31
 8009d68:	08009d31 	.word	0x08009d31
 8009d6c:	08009d31 	.word	0x08009d31
 8009d70:	08009d31 	.word	0x08009d31
 8009d74:	08009eb5 	.word	0x08009eb5
 8009d78:	08009ddf 	.word	0x08009ddf
 8009d7c:	08009e6f 	.word	0x08009e6f
 8009d80:	08009d31 	.word	0x08009d31
 8009d84:	08009d31 	.word	0x08009d31
 8009d88:	08009ed7 	.word	0x08009ed7
 8009d8c:	08009d31 	.word	0x08009d31
 8009d90:	08009ddf 	.word	0x08009ddf
 8009d94:	08009d31 	.word	0x08009d31
 8009d98:	08009d31 	.word	0x08009d31
 8009d9c:	08009e77 	.word	0x08009e77
 8009da0:	6833      	ldr	r3, [r6, #0]
 8009da2:	1d1a      	adds	r2, r3, #4
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	6032      	str	r2, [r6, #0]
 8009da8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009dac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009db0:	2301      	movs	r3, #1
 8009db2:	e09d      	b.n	8009ef0 <_printf_i+0x1e8>
 8009db4:	6833      	ldr	r3, [r6, #0]
 8009db6:	6820      	ldr	r0, [r4, #0]
 8009db8:	1d19      	adds	r1, r3, #4
 8009dba:	6031      	str	r1, [r6, #0]
 8009dbc:	0606      	lsls	r6, r0, #24
 8009dbe:	d501      	bpl.n	8009dc4 <_printf_i+0xbc>
 8009dc0:	681d      	ldr	r5, [r3, #0]
 8009dc2:	e003      	b.n	8009dcc <_printf_i+0xc4>
 8009dc4:	0645      	lsls	r5, r0, #25
 8009dc6:	d5fb      	bpl.n	8009dc0 <_printf_i+0xb8>
 8009dc8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009dcc:	2d00      	cmp	r5, #0
 8009dce:	da03      	bge.n	8009dd8 <_printf_i+0xd0>
 8009dd0:	232d      	movs	r3, #45	@ 0x2d
 8009dd2:	426d      	negs	r5, r5
 8009dd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009dd8:	4859      	ldr	r0, [pc, #356]	@ (8009f40 <_printf_i+0x238>)
 8009dda:	230a      	movs	r3, #10
 8009ddc:	e011      	b.n	8009e02 <_printf_i+0xfa>
 8009dde:	6821      	ldr	r1, [r4, #0]
 8009de0:	6833      	ldr	r3, [r6, #0]
 8009de2:	0608      	lsls	r0, r1, #24
 8009de4:	f853 5b04 	ldr.w	r5, [r3], #4
 8009de8:	d402      	bmi.n	8009df0 <_printf_i+0xe8>
 8009dea:	0649      	lsls	r1, r1, #25
 8009dec:	bf48      	it	mi
 8009dee:	b2ad      	uxthmi	r5, r5
 8009df0:	2f6f      	cmp	r7, #111	@ 0x6f
 8009df2:	4853      	ldr	r0, [pc, #332]	@ (8009f40 <_printf_i+0x238>)
 8009df4:	6033      	str	r3, [r6, #0]
 8009df6:	bf14      	ite	ne
 8009df8:	230a      	movne	r3, #10
 8009dfa:	2308      	moveq	r3, #8
 8009dfc:	2100      	movs	r1, #0
 8009dfe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009e02:	6866      	ldr	r6, [r4, #4]
 8009e04:	60a6      	str	r6, [r4, #8]
 8009e06:	2e00      	cmp	r6, #0
 8009e08:	bfa2      	ittt	ge
 8009e0a:	6821      	ldrge	r1, [r4, #0]
 8009e0c:	f021 0104 	bicge.w	r1, r1, #4
 8009e10:	6021      	strge	r1, [r4, #0]
 8009e12:	b90d      	cbnz	r5, 8009e18 <_printf_i+0x110>
 8009e14:	2e00      	cmp	r6, #0
 8009e16:	d04b      	beq.n	8009eb0 <_printf_i+0x1a8>
 8009e18:	4616      	mov	r6, r2
 8009e1a:	fbb5 f1f3 	udiv	r1, r5, r3
 8009e1e:	fb03 5711 	mls	r7, r3, r1, r5
 8009e22:	5dc7      	ldrb	r7, [r0, r7]
 8009e24:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009e28:	462f      	mov	r7, r5
 8009e2a:	42bb      	cmp	r3, r7
 8009e2c:	460d      	mov	r5, r1
 8009e2e:	d9f4      	bls.n	8009e1a <_printf_i+0x112>
 8009e30:	2b08      	cmp	r3, #8
 8009e32:	d10b      	bne.n	8009e4c <_printf_i+0x144>
 8009e34:	6823      	ldr	r3, [r4, #0]
 8009e36:	07df      	lsls	r7, r3, #31
 8009e38:	d508      	bpl.n	8009e4c <_printf_i+0x144>
 8009e3a:	6923      	ldr	r3, [r4, #16]
 8009e3c:	6861      	ldr	r1, [r4, #4]
 8009e3e:	4299      	cmp	r1, r3
 8009e40:	bfde      	ittt	le
 8009e42:	2330      	movle	r3, #48	@ 0x30
 8009e44:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009e48:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009e4c:	1b92      	subs	r2, r2, r6
 8009e4e:	6122      	str	r2, [r4, #16]
 8009e50:	f8cd a000 	str.w	sl, [sp]
 8009e54:	464b      	mov	r3, r9
 8009e56:	aa03      	add	r2, sp, #12
 8009e58:	4621      	mov	r1, r4
 8009e5a:	4640      	mov	r0, r8
 8009e5c:	f7ff fee6 	bl	8009c2c <_printf_common>
 8009e60:	3001      	adds	r0, #1
 8009e62:	d14a      	bne.n	8009efa <_printf_i+0x1f2>
 8009e64:	f04f 30ff 	mov.w	r0, #4294967295
 8009e68:	b004      	add	sp, #16
 8009e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e6e:	6823      	ldr	r3, [r4, #0]
 8009e70:	f043 0320 	orr.w	r3, r3, #32
 8009e74:	6023      	str	r3, [r4, #0]
 8009e76:	4833      	ldr	r0, [pc, #204]	@ (8009f44 <_printf_i+0x23c>)
 8009e78:	2778      	movs	r7, #120	@ 0x78
 8009e7a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009e7e:	6823      	ldr	r3, [r4, #0]
 8009e80:	6831      	ldr	r1, [r6, #0]
 8009e82:	061f      	lsls	r7, r3, #24
 8009e84:	f851 5b04 	ldr.w	r5, [r1], #4
 8009e88:	d402      	bmi.n	8009e90 <_printf_i+0x188>
 8009e8a:	065f      	lsls	r7, r3, #25
 8009e8c:	bf48      	it	mi
 8009e8e:	b2ad      	uxthmi	r5, r5
 8009e90:	6031      	str	r1, [r6, #0]
 8009e92:	07d9      	lsls	r1, r3, #31
 8009e94:	bf44      	itt	mi
 8009e96:	f043 0320 	orrmi.w	r3, r3, #32
 8009e9a:	6023      	strmi	r3, [r4, #0]
 8009e9c:	b11d      	cbz	r5, 8009ea6 <_printf_i+0x19e>
 8009e9e:	2310      	movs	r3, #16
 8009ea0:	e7ac      	b.n	8009dfc <_printf_i+0xf4>
 8009ea2:	4827      	ldr	r0, [pc, #156]	@ (8009f40 <_printf_i+0x238>)
 8009ea4:	e7e9      	b.n	8009e7a <_printf_i+0x172>
 8009ea6:	6823      	ldr	r3, [r4, #0]
 8009ea8:	f023 0320 	bic.w	r3, r3, #32
 8009eac:	6023      	str	r3, [r4, #0]
 8009eae:	e7f6      	b.n	8009e9e <_printf_i+0x196>
 8009eb0:	4616      	mov	r6, r2
 8009eb2:	e7bd      	b.n	8009e30 <_printf_i+0x128>
 8009eb4:	6833      	ldr	r3, [r6, #0]
 8009eb6:	6825      	ldr	r5, [r4, #0]
 8009eb8:	6961      	ldr	r1, [r4, #20]
 8009eba:	1d18      	adds	r0, r3, #4
 8009ebc:	6030      	str	r0, [r6, #0]
 8009ebe:	062e      	lsls	r6, r5, #24
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	d501      	bpl.n	8009ec8 <_printf_i+0x1c0>
 8009ec4:	6019      	str	r1, [r3, #0]
 8009ec6:	e002      	b.n	8009ece <_printf_i+0x1c6>
 8009ec8:	0668      	lsls	r0, r5, #25
 8009eca:	d5fb      	bpl.n	8009ec4 <_printf_i+0x1bc>
 8009ecc:	8019      	strh	r1, [r3, #0]
 8009ece:	2300      	movs	r3, #0
 8009ed0:	6123      	str	r3, [r4, #16]
 8009ed2:	4616      	mov	r6, r2
 8009ed4:	e7bc      	b.n	8009e50 <_printf_i+0x148>
 8009ed6:	6833      	ldr	r3, [r6, #0]
 8009ed8:	1d1a      	adds	r2, r3, #4
 8009eda:	6032      	str	r2, [r6, #0]
 8009edc:	681e      	ldr	r6, [r3, #0]
 8009ede:	6862      	ldr	r2, [r4, #4]
 8009ee0:	2100      	movs	r1, #0
 8009ee2:	4630      	mov	r0, r6
 8009ee4:	f7f6 fa04 	bl	80002f0 <memchr>
 8009ee8:	b108      	cbz	r0, 8009eee <_printf_i+0x1e6>
 8009eea:	1b80      	subs	r0, r0, r6
 8009eec:	6060      	str	r0, [r4, #4]
 8009eee:	6863      	ldr	r3, [r4, #4]
 8009ef0:	6123      	str	r3, [r4, #16]
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ef8:	e7aa      	b.n	8009e50 <_printf_i+0x148>
 8009efa:	6923      	ldr	r3, [r4, #16]
 8009efc:	4632      	mov	r2, r6
 8009efe:	4649      	mov	r1, r9
 8009f00:	4640      	mov	r0, r8
 8009f02:	47d0      	blx	sl
 8009f04:	3001      	adds	r0, #1
 8009f06:	d0ad      	beq.n	8009e64 <_printf_i+0x15c>
 8009f08:	6823      	ldr	r3, [r4, #0]
 8009f0a:	079b      	lsls	r3, r3, #30
 8009f0c:	d413      	bmi.n	8009f36 <_printf_i+0x22e>
 8009f0e:	68e0      	ldr	r0, [r4, #12]
 8009f10:	9b03      	ldr	r3, [sp, #12]
 8009f12:	4298      	cmp	r0, r3
 8009f14:	bfb8      	it	lt
 8009f16:	4618      	movlt	r0, r3
 8009f18:	e7a6      	b.n	8009e68 <_printf_i+0x160>
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	4632      	mov	r2, r6
 8009f1e:	4649      	mov	r1, r9
 8009f20:	4640      	mov	r0, r8
 8009f22:	47d0      	blx	sl
 8009f24:	3001      	adds	r0, #1
 8009f26:	d09d      	beq.n	8009e64 <_printf_i+0x15c>
 8009f28:	3501      	adds	r5, #1
 8009f2a:	68e3      	ldr	r3, [r4, #12]
 8009f2c:	9903      	ldr	r1, [sp, #12]
 8009f2e:	1a5b      	subs	r3, r3, r1
 8009f30:	42ab      	cmp	r3, r5
 8009f32:	dcf2      	bgt.n	8009f1a <_printf_i+0x212>
 8009f34:	e7eb      	b.n	8009f0e <_printf_i+0x206>
 8009f36:	2500      	movs	r5, #0
 8009f38:	f104 0619 	add.w	r6, r4, #25
 8009f3c:	e7f5      	b.n	8009f2a <_printf_i+0x222>
 8009f3e:	bf00      	nop
 8009f40:	0800dcd6 	.word	0x0800dcd6
 8009f44:	0800dce7 	.word	0x0800dce7

08009f48 <_scanf_float>:
 8009f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f4c:	b087      	sub	sp, #28
 8009f4e:	4617      	mov	r7, r2
 8009f50:	9303      	str	r3, [sp, #12]
 8009f52:	688b      	ldr	r3, [r1, #8]
 8009f54:	1e5a      	subs	r2, r3, #1
 8009f56:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009f5a:	bf81      	itttt	hi
 8009f5c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009f60:	eb03 0b05 	addhi.w	fp, r3, r5
 8009f64:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009f68:	608b      	strhi	r3, [r1, #8]
 8009f6a:	680b      	ldr	r3, [r1, #0]
 8009f6c:	460a      	mov	r2, r1
 8009f6e:	f04f 0500 	mov.w	r5, #0
 8009f72:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8009f76:	f842 3b1c 	str.w	r3, [r2], #28
 8009f7a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009f7e:	4680      	mov	r8, r0
 8009f80:	460c      	mov	r4, r1
 8009f82:	bf98      	it	ls
 8009f84:	f04f 0b00 	movls.w	fp, #0
 8009f88:	9201      	str	r2, [sp, #4]
 8009f8a:	4616      	mov	r6, r2
 8009f8c:	46aa      	mov	sl, r5
 8009f8e:	46a9      	mov	r9, r5
 8009f90:	9502      	str	r5, [sp, #8]
 8009f92:	68a2      	ldr	r2, [r4, #8]
 8009f94:	b152      	cbz	r2, 8009fac <_scanf_float+0x64>
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	781b      	ldrb	r3, [r3, #0]
 8009f9a:	2b4e      	cmp	r3, #78	@ 0x4e
 8009f9c:	d864      	bhi.n	800a068 <_scanf_float+0x120>
 8009f9e:	2b40      	cmp	r3, #64	@ 0x40
 8009fa0:	d83c      	bhi.n	800a01c <_scanf_float+0xd4>
 8009fa2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009fa6:	b2c8      	uxtb	r0, r1
 8009fa8:	280e      	cmp	r0, #14
 8009faa:	d93a      	bls.n	800a022 <_scanf_float+0xda>
 8009fac:	f1b9 0f00 	cmp.w	r9, #0
 8009fb0:	d003      	beq.n	8009fba <_scanf_float+0x72>
 8009fb2:	6823      	ldr	r3, [r4, #0]
 8009fb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009fb8:	6023      	str	r3, [r4, #0]
 8009fba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009fbe:	f1ba 0f01 	cmp.w	sl, #1
 8009fc2:	f200 8117 	bhi.w	800a1f4 <_scanf_float+0x2ac>
 8009fc6:	9b01      	ldr	r3, [sp, #4]
 8009fc8:	429e      	cmp	r6, r3
 8009fca:	f200 8108 	bhi.w	800a1de <_scanf_float+0x296>
 8009fce:	2001      	movs	r0, #1
 8009fd0:	b007      	add	sp, #28
 8009fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fd6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009fda:	2a0d      	cmp	r2, #13
 8009fdc:	d8e6      	bhi.n	8009fac <_scanf_float+0x64>
 8009fde:	a101      	add	r1, pc, #4	@ (adr r1, 8009fe4 <_scanf_float+0x9c>)
 8009fe0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009fe4:	0800a12b 	.word	0x0800a12b
 8009fe8:	08009fad 	.word	0x08009fad
 8009fec:	08009fad 	.word	0x08009fad
 8009ff0:	08009fad 	.word	0x08009fad
 8009ff4:	0800a18b 	.word	0x0800a18b
 8009ff8:	0800a163 	.word	0x0800a163
 8009ffc:	08009fad 	.word	0x08009fad
 800a000:	08009fad 	.word	0x08009fad
 800a004:	0800a139 	.word	0x0800a139
 800a008:	08009fad 	.word	0x08009fad
 800a00c:	08009fad 	.word	0x08009fad
 800a010:	08009fad 	.word	0x08009fad
 800a014:	08009fad 	.word	0x08009fad
 800a018:	0800a0f1 	.word	0x0800a0f1
 800a01c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a020:	e7db      	b.n	8009fda <_scanf_float+0x92>
 800a022:	290e      	cmp	r1, #14
 800a024:	d8c2      	bhi.n	8009fac <_scanf_float+0x64>
 800a026:	a001      	add	r0, pc, #4	@ (adr r0, 800a02c <_scanf_float+0xe4>)
 800a028:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a02c:	0800a0e1 	.word	0x0800a0e1
 800a030:	08009fad 	.word	0x08009fad
 800a034:	0800a0e1 	.word	0x0800a0e1
 800a038:	0800a177 	.word	0x0800a177
 800a03c:	08009fad 	.word	0x08009fad
 800a040:	0800a089 	.word	0x0800a089
 800a044:	0800a0c7 	.word	0x0800a0c7
 800a048:	0800a0c7 	.word	0x0800a0c7
 800a04c:	0800a0c7 	.word	0x0800a0c7
 800a050:	0800a0c7 	.word	0x0800a0c7
 800a054:	0800a0c7 	.word	0x0800a0c7
 800a058:	0800a0c7 	.word	0x0800a0c7
 800a05c:	0800a0c7 	.word	0x0800a0c7
 800a060:	0800a0c7 	.word	0x0800a0c7
 800a064:	0800a0c7 	.word	0x0800a0c7
 800a068:	2b6e      	cmp	r3, #110	@ 0x6e
 800a06a:	d809      	bhi.n	800a080 <_scanf_float+0x138>
 800a06c:	2b60      	cmp	r3, #96	@ 0x60
 800a06e:	d8b2      	bhi.n	8009fd6 <_scanf_float+0x8e>
 800a070:	2b54      	cmp	r3, #84	@ 0x54
 800a072:	d07b      	beq.n	800a16c <_scanf_float+0x224>
 800a074:	2b59      	cmp	r3, #89	@ 0x59
 800a076:	d199      	bne.n	8009fac <_scanf_float+0x64>
 800a078:	2d07      	cmp	r5, #7
 800a07a:	d197      	bne.n	8009fac <_scanf_float+0x64>
 800a07c:	2508      	movs	r5, #8
 800a07e:	e02c      	b.n	800a0da <_scanf_float+0x192>
 800a080:	2b74      	cmp	r3, #116	@ 0x74
 800a082:	d073      	beq.n	800a16c <_scanf_float+0x224>
 800a084:	2b79      	cmp	r3, #121	@ 0x79
 800a086:	e7f6      	b.n	800a076 <_scanf_float+0x12e>
 800a088:	6821      	ldr	r1, [r4, #0]
 800a08a:	05c8      	lsls	r0, r1, #23
 800a08c:	d51b      	bpl.n	800a0c6 <_scanf_float+0x17e>
 800a08e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a092:	6021      	str	r1, [r4, #0]
 800a094:	f109 0901 	add.w	r9, r9, #1
 800a098:	f1bb 0f00 	cmp.w	fp, #0
 800a09c:	d003      	beq.n	800a0a6 <_scanf_float+0x15e>
 800a09e:	3201      	adds	r2, #1
 800a0a0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a0a4:	60a2      	str	r2, [r4, #8]
 800a0a6:	68a3      	ldr	r3, [r4, #8]
 800a0a8:	3b01      	subs	r3, #1
 800a0aa:	60a3      	str	r3, [r4, #8]
 800a0ac:	6923      	ldr	r3, [r4, #16]
 800a0ae:	3301      	adds	r3, #1
 800a0b0:	6123      	str	r3, [r4, #16]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	3b01      	subs	r3, #1
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	607b      	str	r3, [r7, #4]
 800a0ba:	f340 8087 	ble.w	800a1cc <_scanf_float+0x284>
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	603b      	str	r3, [r7, #0]
 800a0c4:	e765      	b.n	8009f92 <_scanf_float+0x4a>
 800a0c6:	eb1a 0105 	adds.w	r1, sl, r5
 800a0ca:	f47f af6f 	bne.w	8009fac <_scanf_float+0x64>
 800a0ce:	6822      	ldr	r2, [r4, #0]
 800a0d0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a0d4:	6022      	str	r2, [r4, #0]
 800a0d6:	460d      	mov	r5, r1
 800a0d8:	468a      	mov	sl, r1
 800a0da:	f806 3b01 	strb.w	r3, [r6], #1
 800a0de:	e7e2      	b.n	800a0a6 <_scanf_float+0x15e>
 800a0e0:	6822      	ldr	r2, [r4, #0]
 800a0e2:	0610      	lsls	r0, r2, #24
 800a0e4:	f57f af62 	bpl.w	8009fac <_scanf_float+0x64>
 800a0e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a0ec:	6022      	str	r2, [r4, #0]
 800a0ee:	e7f4      	b.n	800a0da <_scanf_float+0x192>
 800a0f0:	f1ba 0f00 	cmp.w	sl, #0
 800a0f4:	d10e      	bne.n	800a114 <_scanf_float+0x1cc>
 800a0f6:	f1b9 0f00 	cmp.w	r9, #0
 800a0fa:	d10e      	bne.n	800a11a <_scanf_float+0x1d2>
 800a0fc:	6822      	ldr	r2, [r4, #0]
 800a0fe:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a102:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a106:	d108      	bne.n	800a11a <_scanf_float+0x1d2>
 800a108:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a10c:	6022      	str	r2, [r4, #0]
 800a10e:	f04f 0a01 	mov.w	sl, #1
 800a112:	e7e2      	b.n	800a0da <_scanf_float+0x192>
 800a114:	f1ba 0f02 	cmp.w	sl, #2
 800a118:	d055      	beq.n	800a1c6 <_scanf_float+0x27e>
 800a11a:	2d01      	cmp	r5, #1
 800a11c:	d002      	beq.n	800a124 <_scanf_float+0x1dc>
 800a11e:	2d04      	cmp	r5, #4
 800a120:	f47f af44 	bne.w	8009fac <_scanf_float+0x64>
 800a124:	3501      	adds	r5, #1
 800a126:	b2ed      	uxtb	r5, r5
 800a128:	e7d7      	b.n	800a0da <_scanf_float+0x192>
 800a12a:	f1ba 0f01 	cmp.w	sl, #1
 800a12e:	f47f af3d 	bne.w	8009fac <_scanf_float+0x64>
 800a132:	f04f 0a02 	mov.w	sl, #2
 800a136:	e7d0      	b.n	800a0da <_scanf_float+0x192>
 800a138:	b97d      	cbnz	r5, 800a15a <_scanf_float+0x212>
 800a13a:	f1b9 0f00 	cmp.w	r9, #0
 800a13e:	f47f af38 	bne.w	8009fb2 <_scanf_float+0x6a>
 800a142:	6822      	ldr	r2, [r4, #0]
 800a144:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a148:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a14c:	f040 8101 	bne.w	800a352 <_scanf_float+0x40a>
 800a150:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a154:	6022      	str	r2, [r4, #0]
 800a156:	2501      	movs	r5, #1
 800a158:	e7bf      	b.n	800a0da <_scanf_float+0x192>
 800a15a:	2d03      	cmp	r5, #3
 800a15c:	d0e2      	beq.n	800a124 <_scanf_float+0x1dc>
 800a15e:	2d05      	cmp	r5, #5
 800a160:	e7de      	b.n	800a120 <_scanf_float+0x1d8>
 800a162:	2d02      	cmp	r5, #2
 800a164:	f47f af22 	bne.w	8009fac <_scanf_float+0x64>
 800a168:	2503      	movs	r5, #3
 800a16a:	e7b6      	b.n	800a0da <_scanf_float+0x192>
 800a16c:	2d06      	cmp	r5, #6
 800a16e:	f47f af1d 	bne.w	8009fac <_scanf_float+0x64>
 800a172:	2507      	movs	r5, #7
 800a174:	e7b1      	b.n	800a0da <_scanf_float+0x192>
 800a176:	6822      	ldr	r2, [r4, #0]
 800a178:	0591      	lsls	r1, r2, #22
 800a17a:	f57f af17 	bpl.w	8009fac <_scanf_float+0x64>
 800a17e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a182:	6022      	str	r2, [r4, #0]
 800a184:	f8cd 9008 	str.w	r9, [sp, #8]
 800a188:	e7a7      	b.n	800a0da <_scanf_float+0x192>
 800a18a:	6822      	ldr	r2, [r4, #0]
 800a18c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a190:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a194:	d006      	beq.n	800a1a4 <_scanf_float+0x25c>
 800a196:	0550      	lsls	r0, r2, #21
 800a198:	f57f af08 	bpl.w	8009fac <_scanf_float+0x64>
 800a19c:	f1b9 0f00 	cmp.w	r9, #0
 800a1a0:	f000 80d7 	beq.w	800a352 <_scanf_float+0x40a>
 800a1a4:	0591      	lsls	r1, r2, #22
 800a1a6:	bf58      	it	pl
 800a1a8:	9902      	ldrpl	r1, [sp, #8]
 800a1aa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a1ae:	bf58      	it	pl
 800a1b0:	eba9 0101 	subpl.w	r1, r9, r1
 800a1b4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a1b8:	bf58      	it	pl
 800a1ba:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a1be:	6022      	str	r2, [r4, #0]
 800a1c0:	f04f 0900 	mov.w	r9, #0
 800a1c4:	e789      	b.n	800a0da <_scanf_float+0x192>
 800a1c6:	f04f 0a03 	mov.w	sl, #3
 800a1ca:	e786      	b.n	800a0da <_scanf_float+0x192>
 800a1cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a1d0:	4639      	mov	r1, r7
 800a1d2:	4640      	mov	r0, r8
 800a1d4:	4798      	blx	r3
 800a1d6:	2800      	cmp	r0, #0
 800a1d8:	f43f aedb 	beq.w	8009f92 <_scanf_float+0x4a>
 800a1dc:	e6e6      	b.n	8009fac <_scanf_float+0x64>
 800a1de:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a1e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a1e6:	463a      	mov	r2, r7
 800a1e8:	4640      	mov	r0, r8
 800a1ea:	4798      	blx	r3
 800a1ec:	6923      	ldr	r3, [r4, #16]
 800a1ee:	3b01      	subs	r3, #1
 800a1f0:	6123      	str	r3, [r4, #16]
 800a1f2:	e6e8      	b.n	8009fc6 <_scanf_float+0x7e>
 800a1f4:	1e6b      	subs	r3, r5, #1
 800a1f6:	2b06      	cmp	r3, #6
 800a1f8:	d824      	bhi.n	800a244 <_scanf_float+0x2fc>
 800a1fa:	2d02      	cmp	r5, #2
 800a1fc:	d836      	bhi.n	800a26c <_scanf_float+0x324>
 800a1fe:	9b01      	ldr	r3, [sp, #4]
 800a200:	429e      	cmp	r6, r3
 800a202:	f67f aee4 	bls.w	8009fce <_scanf_float+0x86>
 800a206:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a20a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a20e:	463a      	mov	r2, r7
 800a210:	4640      	mov	r0, r8
 800a212:	4798      	blx	r3
 800a214:	6923      	ldr	r3, [r4, #16]
 800a216:	3b01      	subs	r3, #1
 800a218:	6123      	str	r3, [r4, #16]
 800a21a:	e7f0      	b.n	800a1fe <_scanf_float+0x2b6>
 800a21c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a220:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a224:	463a      	mov	r2, r7
 800a226:	4640      	mov	r0, r8
 800a228:	4798      	blx	r3
 800a22a:	6923      	ldr	r3, [r4, #16]
 800a22c:	3b01      	subs	r3, #1
 800a22e:	6123      	str	r3, [r4, #16]
 800a230:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a234:	fa5f fa8a 	uxtb.w	sl, sl
 800a238:	f1ba 0f02 	cmp.w	sl, #2
 800a23c:	d1ee      	bne.n	800a21c <_scanf_float+0x2d4>
 800a23e:	3d03      	subs	r5, #3
 800a240:	b2ed      	uxtb	r5, r5
 800a242:	1b76      	subs	r6, r6, r5
 800a244:	6823      	ldr	r3, [r4, #0]
 800a246:	05da      	lsls	r2, r3, #23
 800a248:	d530      	bpl.n	800a2ac <_scanf_float+0x364>
 800a24a:	055b      	lsls	r3, r3, #21
 800a24c:	d511      	bpl.n	800a272 <_scanf_float+0x32a>
 800a24e:	9b01      	ldr	r3, [sp, #4]
 800a250:	429e      	cmp	r6, r3
 800a252:	f67f aebc 	bls.w	8009fce <_scanf_float+0x86>
 800a256:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a25a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a25e:	463a      	mov	r2, r7
 800a260:	4640      	mov	r0, r8
 800a262:	4798      	blx	r3
 800a264:	6923      	ldr	r3, [r4, #16]
 800a266:	3b01      	subs	r3, #1
 800a268:	6123      	str	r3, [r4, #16]
 800a26a:	e7f0      	b.n	800a24e <_scanf_float+0x306>
 800a26c:	46aa      	mov	sl, r5
 800a26e:	46b3      	mov	fp, r6
 800a270:	e7de      	b.n	800a230 <_scanf_float+0x2e8>
 800a272:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a276:	6923      	ldr	r3, [r4, #16]
 800a278:	2965      	cmp	r1, #101	@ 0x65
 800a27a:	f103 33ff 	add.w	r3, r3, #4294967295
 800a27e:	f106 35ff 	add.w	r5, r6, #4294967295
 800a282:	6123      	str	r3, [r4, #16]
 800a284:	d00c      	beq.n	800a2a0 <_scanf_float+0x358>
 800a286:	2945      	cmp	r1, #69	@ 0x45
 800a288:	d00a      	beq.n	800a2a0 <_scanf_float+0x358>
 800a28a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a28e:	463a      	mov	r2, r7
 800a290:	4640      	mov	r0, r8
 800a292:	4798      	blx	r3
 800a294:	6923      	ldr	r3, [r4, #16]
 800a296:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a29a:	3b01      	subs	r3, #1
 800a29c:	1eb5      	subs	r5, r6, #2
 800a29e:	6123      	str	r3, [r4, #16]
 800a2a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a2a4:	463a      	mov	r2, r7
 800a2a6:	4640      	mov	r0, r8
 800a2a8:	4798      	blx	r3
 800a2aa:	462e      	mov	r6, r5
 800a2ac:	6822      	ldr	r2, [r4, #0]
 800a2ae:	f012 0210 	ands.w	r2, r2, #16
 800a2b2:	d001      	beq.n	800a2b8 <_scanf_float+0x370>
 800a2b4:	2000      	movs	r0, #0
 800a2b6:	e68b      	b.n	8009fd0 <_scanf_float+0x88>
 800a2b8:	7032      	strb	r2, [r6, #0]
 800a2ba:	6823      	ldr	r3, [r4, #0]
 800a2bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a2c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a2c4:	d11a      	bne.n	800a2fc <_scanf_float+0x3b4>
 800a2c6:	9b02      	ldr	r3, [sp, #8]
 800a2c8:	454b      	cmp	r3, r9
 800a2ca:	eba3 0209 	sub.w	r2, r3, r9
 800a2ce:	d121      	bne.n	800a314 <_scanf_float+0x3cc>
 800a2d0:	9901      	ldr	r1, [sp, #4]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	4640      	mov	r0, r8
 800a2d6:	f002 fc49 	bl	800cb6c <_strtod_r>
 800a2da:	9b03      	ldr	r3, [sp, #12]
 800a2dc:	6821      	ldr	r1, [r4, #0]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f011 0f02 	tst.w	r1, #2
 800a2e4:	f103 0204 	add.w	r2, r3, #4
 800a2e8:	d01f      	beq.n	800a32a <_scanf_float+0x3e2>
 800a2ea:	9903      	ldr	r1, [sp, #12]
 800a2ec:	600a      	str	r2, [r1, #0]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	ed83 0b00 	vstr	d0, [r3]
 800a2f4:	68e3      	ldr	r3, [r4, #12]
 800a2f6:	3301      	adds	r3, #1
 800a2f8:	60e3      	str	r3, [r4, #12]
 800a2fa:	e7db      	b.n	800a2b4 <_scanf_float+0x36c>
 800a2fc:	9b04      	ldr	r3, [sp, #16]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d0e6      	beq.n	800a2d0 <_scanf_float+0x388>
 800a302:	9905      	ldr	r1, [sp, #20]
 800a304:	230a      	movs	r3, #10
 800a306:	3101      	adds	r1, #1
 800a308:	4640      	mov	r0, r8
 800a30a:	f002 fcaf 	bl	800cc6c <_strtol_r>
 800a30e:	9b04      	ldr	r3, [sp, #16]
 800a310:	9e05      	ldr	r6, [sp, #20]
 800a312:	1ac2      	subs	r2, r0, r3
 800a314:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a318:	429e      	cmp	r6, r3
 800a31a:	bf28      	it	cs
 800a31c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a320:	490d      	ldr	r1, [pc, #52]	@ (800a358 <_scanf_float+0x410>)
 800a322:	4630      	mov	r0, r6
 800a324:	f000 f960 	bl	800a5e8 <siprintf>
 800a328:	e7d2      	b.n	800a2d0 <_scanf_float+0x388>
 800a32a:	f011 0f04 	tst.w	r1, #4
 800a32e:	9903      	ldr	r1, [sp, #12]
 800a330:	600a      	str	r2, [r1, #0]
 800a332:	d1dc      	bne.n	800a2ee <_scanf_float+0x3a6>
 800a334:	eeb4 0b40 	vcmp.f64	d0, d0
 800a338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a33c:	681d      	ldr	r5, [r3, #0]
 800a33e:	d705      	bvc.n	800a34c <_scanf_float+0x404>
 800a340:	4806      	ldr	r0, [pc, #24]	@ (800a35c <_scanf_float+0x414>)
 800a342:	f000 fb81 	bl	800aa48 <nanf>
 800a346:	ed85 0a00 	vstr	s0, [r5]
 800a34a:	e7d3      	b.n	800a2f4 <_scanf_float+0x3ac>
 800a34c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800a350:	e7f9      	b.n	800a346 <_scanf_float+0x3fe>
 800a352:	f04f 0900 	mov.w	r9, #0
 800a356:	e630      	b.n	8009fba <_scanf_float+0x72>
 800a358:	0800dcf8 	.word	0x0800dcf8
 800a35c:	0800dcc3 	.word	0x0800dcc3

0800a360 <std>:
 800a360:	2300      	movs	r3, #0
 800a362:	b510      	push	{r4, lr}
 800a364:	4604      	mov	r4, r0
 800a366:	e9c0 3300 	strd	r3, r3, [r0]
 800a36a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a36e:	6083      	str	r3, [r0, #8]
 800a370:	8181      	strh	r1, [r0, #12]
 800a372:	6643      	str	r3, [r0, #100]	@ 0x64
 800a374:	81c2      	strh	r2, [r0, #14]
 800a376:	6183      	str	r3, [r0, #24]
 800a378:	4619      	mov	r1, r3
 800a37a:	2208      	movs	r2, #8
 800a37c:	305c      	adds	r0, #92	@ 0x5c
 800a37e:	f000 fa2b 	bl	800a7d8 <memset>
 800a382:	4b0d      	ldr	r3, [pc, #52]	@ (800a3b8 <std+0x58>)
 800a384:	6263      	str	r3, [r4, #36]	@ 0x24
 800a386:	4b0d      	ldr	r3, [pc, #52]	@ (800a3bc <std+0x5c>)
 800a388:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a38a:	4b0d      	ldr	r3, [pc, #52]	@ (800a3c0 <std+0x60>)
 800a38c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a38e:	4b0d      	ldr	r3, [pc, #52]	@ (800a3c4 <std+0x64>)
 800a390:	6323      	str	r3, [r4, #48]	@ 0x30
 800a392:	4b0d      	ldr	r3, [pc, #52]	@ (800a3c8 <std+0x68>)
 800a394:	6224      	str	r4, [r4, #32]
 800a396:	429c      	cmp	r4, r3
 800a398:	d006      	beq.n	800a3a8 <std+0x48>
 800a39a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a39e:	4294      	cmp	r4, r2
 800a3a0:	d002      	beq.n	800a3a8 <std+0x48>
 800a3a2:	33d0      	adds	r3, #208	@ 0xd0
 800a3a4:	429c      	cmp	r4, r3
 800a3a6:	d105      	bne.n	800a3b4 <std+0x54>
 800a3a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a3ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3b0:	f000 bb38 	b.w	800aa24 <__retarget_lock_init_recursive>
 800a3b4:	bd10      	pop	{r4, pc}
 800a3b6:	bf00      	nop
 800a3b8:	0800a629 	.word	0x0800a629
 800a3bc:	0800a64b 	.word	0x0800a64b
 800a3c0:	0800a683 	.word	0x0800a683
 800a3c4:	0800a6a7 	.word	0x0800a6a7
 800a3c8:	24004d38 	.word	0x24004d38

0800a3cc <stdio_exit_handler>:
 800a3cc:	4a02      	ldr	r2, [pc, #8]	@ (800a3d8 <stdio_exit_handler+0xc>)
 800a3ce:	4903      	ldr	r1, [pc, #12]	@ (800a3dc <stdio_exit_handler+0x10>)
 800a3d0:	4803      	ldr	r0, [pc, #12]	@ (800a3e0 <stdio_exit_handler+0x14>)
 800a3d2:	f000 b87b 	b.w	800a4cc <_fwalk_sglue>
 800a3d6:	bf00      	nop
 800a3d8:	24000014 	.word	0x24000014
 800a3dc:	0800d2ad 	.word	0x0800d2ad
 800a3e0:	24000024 	.word	0x24000024

0800a3e4 <cleanup_stdio>:
 800a3e4:	6841      	ldr	r1, [r0, #4]
 800a3e6:	4b0c      	ldr	r3, [pc, #48]	@ (800a418 <cleanup_stdio+0x34>)
 800a3e8:	4299      	cmp	r1, r3
 800a3ea:	b510      	push	{r4, lr}
 800a3ec:	4604      	mov	r4, r0
 800a3ee:	d001      	beq.n	800a3f4 <cleanup_stdio+0x10>
 800a3f0:	f002 ff5c 	bl	800d2ac <_fflush_r>
 800a3f4:	68a1      	ldr	r1, [r4, #8]
 800a3f6:	4b09      	ldr	r3, [pc, #36]	@ (800a41c <cleanup_stdio+0x38>)
 800a3f8:	4299      	cmp	r1, r3
 800a3fa:	d002      	beq.n	800a402 <cleanup_stdio+0x1e>
 800a3fc:	4620      	mov	r0, r4
 800a3fe:	f002 ff55 	bl	800d2ac <_fflush_r>
 800a402:	68e1      	ldr	r1, [r4, #12]
 800a404:	4b06      	ldr	r3, [pc, #24]	@ (800a420 <cleanup_stdio+0x3c>)
 800a406:	4299      	cmp	r1, r3
 800a408:	d004      	beq.n	800a414 <cleanup_stdio+0x30>
 800a40a:	4620      	mov	r0, r4
 800a40c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a410:	f002 bf4c 	b.w	800d2ac <_fflush_r>
 800a414:	bd10      	pop	{r4, pc}
 800a416:	bf00      	nop
 800a418:	24004d38 	.word	0x24004d38
 800a41c:	24004da0 	.word	0x24004da0
 800a420:	24004e08 	.word	0x24004e08

0800a424 <global_stdio_init.part.0>:
 800a424:	b510      	push	{r4, lr}
 800a426:	4b0b      	ldr	r3, [pc, #44]	@ (800a454 <global_stdio_init.part.0+0x30>)
 800a428:	4c0b      	ldr	r4, [pc, #44]	@ (800a458 <global_stdio_init.part.0+0x34>)
 800a42a:	4a0c      	ldr	r2, [pc, #48]	@ (800a45c <global_stdio_init.part.0+0x38>)
 800a42c:	601a      	str	r2, [r3, #0]
 800a42e:	4620      	mov	r0, r4
 800a430:	2200      	movs	r2, #0
 800a432:	2104      	movs	r1, #4
 800a434:	f7ff ff94 	bl	800a360 <std>
 800a438:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a43c:	2201      	movs	r2, #1
 800a43e:	2109      	movs	r1, #9
 800a440:	f7ff ff8e 	bl	800a360 <std>
 800a444:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a448:	2202      	movs	r2, #2
 800a44a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a44e:	2112      	movs	r1, #18
 800a450:	f7ff bf86 	b.w	800a360 <std>
 800a454:	24004e70 	.word	0x24004e70
 800a458:	24004d38 	.word	0x24004d38
 800a45c:	0800a3cd 	.word	0x0800a3cd

0800a460 <__sfp_lock_acquire>:
 800a460:	4801      	ldr	r0, [pc, #4]	@ (800a468 <__sfp_lock_acquire+0x8>)
 800a462:	f000 bae0 	b.w	800aa26 <__retarget_lock_acquire_recursive>
 800a466:	bf00      	nop
 800a468:	24004e79 	.word	0x24004e79

0800a46c <__sfp_lock_release>:
 800a46c:	4801      	ldr	r0, [pc, #4]	@ (800a474 <__sfp_lock_release+0x8>)
 800a46e:	f000 badb 	b.w	800aa28 <__retarget_lock_release_recursive>
 800a472:	bf00      	nop
 800a474:	24004e79 	.word	0x24004e79

0800a478 <__sinit>:
 800a478:	b510      	push	{r4, lr}
 800a47a:	4604      	mov	r4, r0
 800a47c:	f7ff fff0 	bl	800a460 <__sfp_lock_acquire>
 800a480:	6a23      	ldr	r3, [r4, #32]
 800a482:	b11b      	cbz	r3, 800a48c <__sinit+0x14>
 800a484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a488:	f7ff bff0 	b.w	800a46c <__sfp_lock_release>
 800a48c:	4b04      	ldr	r3, [pc, #16]	@ (800a4a0 <__sinit+0x28>)
 800a48e:	6223      	str	r3, [r4, #32]
 800a490:	4b04      	ldr	r3, [pc, #16]	@ (800a4a4 <__sinit+0x2c>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d1f5      	bne.n	800a484 <__sinit+0xc>
 800a498:	f7ff ffc4 	bl	800a424 <global_stdio_init.part.0>
 800a49c:	e7f2      	b.n	800a484 <__sinit+0xc>
 800a49e:	bf00      	nop
 800a4a0:	0800a3e5 	.word	0x0800a3e5
 800a4a4:	24004e70 	.word	0x24004e70

0800a4a8 <fiprintf>:
 800a4a8:	b40e      	push	{r1, r2, r3}
 800a4aa:	b503      	push	{r0, r1, lr}
 800a4ac:	4601      	mov	r1, r0
 800a4ae:	ab03      	add	r3, sp, #12
 800a4b0:	4805      	ldr	r0, [pc, #20]	@ (800a4c8 <fiprintf+0x20>)
 800a4b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4b6:	6800      	ldr	r0, [r0, #0]
 800a4b8:	9301      	str	r3, [sp, #4]
 800a4ba:	f002 fd5b 	bl	800cf74 <_vfiprintf_r>
 800a4be:	b002      	add	sp, #8
 800a4c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4c4:	b003      	add	sp, #12
 800a4c6:	4770      	bx	lr
 800a4c8:	24000020 	.word	0x24000020

0800a4cc <_fwalk_sglue>:
 800a4cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4d0:	4607      	mov	r7, r0
 800a4d2:	4688      	mov	r8, r1
 800a4d4:	4614      	mov	r4, r2
 800a4d6:	2600      	movs	r6, #0
 800a4d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a4dc:	f1b9 0901 	subs.w	r9, r9, #1
 800a4e0:	d505      	bpl.n	800a4ee <_fwalk_sglue+0x22>
 800a4e2:	6824      	ldr	r4, [r4, #0]
 800a4e4:	2c00      	cmp	r4, #0
 800a4e6:	d1f7      	bne.n	800a4d8 <_fwalk_sglue+0xc>
 800a4e8:	4630      	mov	r0, r6
 800a4ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4ee:	89ab      	ldrh	r3, [r5, #12]
 800a4f0:	2b01      	cmp	r3, #1
 800a4f2:	d907      	bls.n	800a504 <_fwalk_sglue+0x38>
 800a4f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a4f8:	3301      	adds	r3, #1
 800a4fa:	d003      	beq.n	800a504 <_fwalk_sglue+0x38>
 800a4fc:	4629      	mov	r1, r5
 800a4fe:	4638      	mov	r0, r7
 800a500:	47c0      	blx	r8
 800a502:	4306      	orrs	r6, r0
 800a504:	3568      	adds	r5, #104	@ 0x68
 800a506:	e7e9      	b.n	800a4dc <_fwalk_sglue+0x10>

0800a508 <iprintf>:
 800a508:	b40f      	push	{r0, r1, r2, r3}
 800a50a:	b507      	push	{r0, r1, r2, lr}
 800a50c:	4906      	ldr	r1, [pc, #24]	@ (800a528 <iprintf+0x20>)
 800a50e:	ab04      	add	r3, sp, #16
 800a510:	6808      	ldr	r0, [r1, #0]
 800a512:	f853 2b04 	ldr.w	r2, [r3], #4
 800a516:	6881      	ldr	r1, [r0, #8]
 800a518:	9301      	str	r3, [sp, #4]
 800a51a:	f002 fd2b 	bl	800cf74 <_vfiprintf_r>
 800a51e:	b003      	add	sp, #12
 800a520:	f85d eb04 	ldr.w	lr, [sp], #4
 800a524:	b004      	add	sp, #16
 800a526:	4770      	bx	lr
 800a528:	24000020 	.word	0x24000020

0800a52c <_puts_r>:
 800a52c:	6a03      	ldr	r3, [r0, #32]
 800a52e:	b570      	push	{r4, r5, r6, lr}
 800a530:	6884      	ldr	r4, [r0, #8]
 800a532:	4605      	mov	r5, r0
 800a534:	460e      	mov	r6, r1
 800a536:	b90b      	cbnz	r3, 800a53c <_puts_r+0x10>
 800a538:	f7ff ff9e 	bl	800a478 <__sinit>
 800a53c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a53e:	07db      	lsls	r3, r3, #31
 800a540:	d405      	bmi.n	800a54e <_puts_r+0x22>
 800a542:	89a3      	ldrh	r3, [r4, #12]
 800a544:	0598      	lsls	r0, r3, #22
 800a546:	d402      	bmi.n	800a54e <_puts_r+0x22>
 800a548:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a54a:	f000 fa6c 	bl	800aa26 <__retarget_lock_acquire_recursive>
 800a54e:	89a3      	ldrh	r3, [r4, #12]
 800a550:	0719      	lsls	r1, r3, #28
 800a552:	d502      	bpl.n	800a55a <_puts_r+0x2e>
 800a554:	6923      	ldr	r3, [r4, #16]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d135      	bne.n	800a5c6 <_puts_r+0x9a>
 800a55a:	4621      	mov	r1, r4
 800a55c:	4628      	mov	r0, r5
 800a55e:	f000 f8e5 	bl	800a72c <__swsetup_r>
 800a562:	b380      	cbz	r0, 800a5c6 <_puts_r+0x9a>
 800a564:	f04f 35ff 	mov.w	r5, #4294967295
 800a568:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a56a:	07da      	lsls	r2, r3, #31
 800a56c:	d405      	bmi.n	800a57a <_puts_r+0x4e>
 800a56e:	89a3      	ldrh	r3, [r4, #12]
 800a570:	059b      	lsls	r3, r3, #22
 800a572:	d402      	bmi.n	800a57a <_puts_r+0x4e>
 800a574:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a576:	f000 fa57 	bl	800aa28 <__retarget_lock_release_recursive>
 800a57a:	4628      	mov	r0, r5
 800a57c:	bd70      	pop	{r4, r5, r6, pc}
 800a57e:	2b00      	cmp	r3, #0
 800a580:	da04      	bge.n	800a58c <_puts_r+0x60>
 800a582:	69a2      	ldr	r2, [r4, #24]
 800a584:	429a      	cmp	r2, r3
 800a586:	dc17      	bgt.n	800a5b8 <_puts_r+0x8c>
 800a588:	290a      	cmp	r1, #10
 800a58a:	d015      	beq.n	800a5b8 <_puts_r+0x8c>
 800a58c:	6823      	ldr	r3, [r4, #0]
 800a58e:	1c5a      	adds	r2, r3, #1
 800a590:	6022      	str	r2, [r4, #0]
 800a592:	7019      	strb	r1, [r3, #0]
 800a594:	68a3      	ldr	r3, [r4, #8]
 800a596:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a59a:	3b01      	subs	r3, #1
 800a59c:	60a3      	str	r3, [r4, #8]
 800a59e:	2900      	cmp	r1, #0
 800a5a0:	d1ed      	bne.n	800a57e <_puts_r+0x52>
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	da11      	bge.n	800a5ca <_puts_r+0x9e>
 800a5a6:	4622      	mov	r2, r4
 800a5a8:	210a      	movs	r1, #10
 800a5aa:	4628      	mov	r0, r5
 800a5ac:	f000 f87f 	bl	800a6ae <__swbuf_r>
 800a5b0:	3001      	adds	r0, #1
 800a5b2:	d0d7      	beq.n	800a564 <_puts_r+0x38>
 800a5b4:	250a      	movs	r5, #10
 800a5b6:	e7d7      	b.n	800a568 <_puts_r+0x3c>
 800a5b8:	4622      	mov	r2, r4
 800a5ba:	4628      	mov	r0, r5
 800a5bc:	f000 f877 	bl	800a6ae <__swbuf_r>
 800a5c0:	3001      	adds	r0, #1
 800a5c2:	d1e7      	bne.n	800a594 <_puts_r+0x68>
 800a5c4:	e7ce      	b.n	800a564 <_puts_r+0x38>
 800a5c6:	3e01      	subs	r6, #1
 800a5c8:	e7e4      	b.n	800a594 <_puts_r+0x68>
 800a5ca:	6823      	ldr	r3, [r4, #0]
 800a5cc:	1c5a      	adds	r2, r3, #1
 800a5ce:	6022      	str	r2, [r4, #0]
 800a5d0:	220a      	movs	r2, #10
 800a5d2:	701a      	strb	r2, [r3, #0]
 800a5d4:	e7ee      	b.n	800a5b4 <_puts_r+0x88>
	...

0800a5d8 <puts>:
 800a5d8:	4b02      	ldr	r3, [pc, #8]	@ (800a5e4 <puts+0xc>)
 800a5da:	4601      	mov	r1, r0
 800a5dc:	6818      	ldr	r0, [r3, #0]
 800a5de:	f7ff bfa5 	b.w	800a52c <_puts_r>
 800a5e2:	bf00      	nop
 800a5e4:	24000020 	.word	0x24000020

0800a5e8 <siprintf>:
 800a5e8:	b40e      	push	{r1, r2, r3}
 800a5ea:	b500      	push	{lr}
 800a5ec:	b09c      	sub	sp, #112	@ 0x70
 800a5ee:	ab1d      	add	r3, sp, #116	@ 0x74
 800a5f0:	9002      	str	r0, [sp, #8]
 800a5f2:	9006      	str	r0, [sp, #24]
 800a5f4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a5f8:	4809      	ldr	r0, [pc, #36]	@ (800a620 <siprintf+0x38>)
 800a5fa:	9107      	str	r1, [sp, #28]
 800a5fc:	9104      	str	r1, [sp, #16]
 800a5fe:	4909      	ldr	r1, [pc, #36]	@ (800a624 <siprintf+0x3c>)
 800a600:	f853 2b04 	ldr.w	r2, [r3], #4
 800a604:	9105      	str	r1, [sp, #20]
 800a606:	6800      	ldr	r0, [r0, #0]
 800a608:	9301      	str	r3, [sp, #4]
 800a60a:	a902      	add	r1, sp, #8
 800a60c:	f002 fb8c 	bl	800cd28 <_svfiprintf_r>
 800a610:	9b02      	ldr	r3, [sp, #8]
 800a612:	2200      	movs	r2, #0
 800a614:	701a      	strb	r2, [r3, #0]
 800a616:	b01c      	add	sp, #112	@ 0x70
 800a618:	f85d eb04 	ldr.w	lr, [sp], #4
 800a61c:	b003      	add	sp, #12
 800a61e:	4770      	bx	lr
 800a620:	24000020 	.word	0x24000020
 800a624:	ffff0208 	.word	0xffff0208

0800a628 <__sread>:
 800a628:	b510      	push	{r4, lr}
 800a62a:	460c      	mov	r4, r1
 800a62c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a630:	f000 f986 	bl	800a940 <_read_r>
 800a634:	2800      	cmp	r0, #0
 800a636:	bfab      	itete	ge
 800a638:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a63a:	89a3      	ldrhlt	r3, [r4, #12]
 800a63c:	181b      	addge	r3, r3, r0
 800a63e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a642:	bfac      	ite	ge
 800a644:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a646:	81a3      	strhlt	r3, [r4, #12]
 800a648:	bd10      	pop	{r4, pc}

0800a64a <__swrite>:
 800a64a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a64e:	461f      	mov	r7, r3
 800a650:	898b      	ldrh	r3, [r1, #12]
 800a652:	05db      	lsls	r3, r3, #23
 800a654:	4605      	mov	r5, r0
 800a656:	460c      	mov	r4, r1
 800a658:	4616      	mov	r6, r2
 800a65a:	d505      	bpl.n	800a668 <__swrite+0x1e>
 800a65c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a660:	2302      	movs	r3, #2
 800a662:	2200      	movs	r2, #0
 800a664:	f000 f95a 	bl	800a91c <_lseek_r>
 800a668:	89a3      	ldrh	r3, [r4, #12]
 800a66a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a66e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a672:	81a3      	strh	r3, [r4, #12]
 800a674:	4632      	mov	r2, r6
 800a676:	463b      	mov	r3, r7
 800a678:	4628      	mov	r0, r5
 800a67a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a67e:	f000 b995 	b.w	800a9ac <_write_r>

0800a682 <__sseek>:
 800a682:	b510      	push	{r4, lr}
 800a684:	460c      	mov	r4, r1
 800a686:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a68a:	f000 f947 	bl	800a91c <_lseek_r>
 800a68e:	1c43      	adds	r3, r0, #1
 800a690:	89a3      	ldrh	r3, [r4, #12]
 800a692:	bf15      	itete	ne
 800a694:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a696:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a69a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a69e:	81a3      	strheq	r3, [r4, #12]
 800a6a0:	bf18      	it	ne
 800a6a2:	81a3      	strhne	r3, [r4, #12]
 800a6a4:	bd10      	pop	{r4, pc}

0800a6a6 <__sclose>:
 800a6a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6aa:	f000 b8d1 	b.w	800a850 <_close_r>

0800a6ae <__swbuf_r>:
 800a6ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6b0:	460e      	mov	r6, r1
 800a6b2:	4614      	mov	r4, r2
 800a6b4:	4605      	mov	r5, r0
 800a6b6:	b118      	cbz	r0, 800a6c0 <__swbuf_r+0x12>
 800a6b8:	6a03      	ldr	r3, [r0, #32]
 800a6ba:	b90b      	cbnz	r3, 800a6c0 <__swbuf_r+0x12>
 800a6bc:	f7ff fedc 	bl	800a478 <__sinit>
 800a6c0:	69a3      	ldr	r3, [r4, #24]
 800a6c2:	60a3      	str	r3, [r4, #8]
 800a6c4:	89a3      	ldrh	r3, [r4, #12]
 800a6c6:	071a      	lsls	r2, r3, #28
 800a6c8:	d501      	bpl.n	800a6ce <__swbuf_r+0x20>
 800a6ca:	6923      	ldr	r3, [r4, #16]
 800a6cc:	b943      	cbnz	r3, 800a6e0 <__swbuf_r+0x32>
 800a6ce:	4621      	mov	r1, r4
 800a6d0:	4628      	mov	r0, r5
 800a6d2:	f000 f82b 	bl	800a72c <__swsetup_r>
 800a6d6:	b118      	cbz	r0, 800a6e0 <__swbuf_r+0x32>
 800a6d8:	f04f 37ff 	mov.w	r7, #4294967295
 800a6dc:	4638      	mov	r0, r7
 800a6de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6e0:	6823      	ldr	r3, [r4, #0]
 800a6e2:	6922      	ldr	r2, [r4, #16]
 800a6e4:	1a98      	subs	r0, r3, r2
 800a6e6:	6963      	ldr	r3, [r4, #20]
 800a6e8:	b2f6      	uxtb	r6, r6
 800a6ea:	4283      	cmp	r3, r0
 800a6ec:	4637      	mov	r7, r6
 800a6ee:	dc05      	bgt.n	800a6fc <__swbuf_r+0x4e>
 800a6f0:	4621      	mov	r1, r4
 800a6f2:	4628      	mov	r0, r5
 800a6f4:	f002 fdda 	bl	800d2ac <_fflush_r>
 800a6f8:	2800      	cmp	r0, #0
 800a6fa:	d1ed      	bne.n	800a6d8 <__swbuf_r+0x2a>
 800a6fc:	68a3      	ldr	r3, [r4, #8]
 800a6fe:	3b01      	subs	r3, #1
 800a700:	60a3      	str	r3, [r4, #8]
 800a702:	6823      	ldr	r3, [r4, #0]
 800a704:	1c5a      	adds	r2, r3, #1
 800a706:	6022      	str	r2, [r4, #0]
 800a708:	701e      	strb	r6, [r3, #0]
 800a70a:	6962      	ldr	r2, [r4, #20]
 800a70c:	1c43      	adds	r3, r0, #1
 800a70e:	429a      	cmp	r2, r3
 800a710:	d004      	beq.n	800a71c <__swbuf_r+0x6e>
 800a712:	89a3      	ldrh	r3, [r4, #12]
 800a714:	07db      	lsls	r3, r3, #31
 800a716:	d5e1      	bpl.n	800a6dc <__swbuf_r+0x2e>
 800a718:	2e0a      	cmp	r6, #10
 800a71a:	d1df      	bne.n	800a6dc <__swbuf_r+0x2e>
 800a71c:	4621      	mov	r1, r4
 800a71e:	4628      	mov	r0, r5
 800a720:	f002 fdc4 	bl	800d2ac <_fflush_r>
 800a724:	2800      	cmp	r0, #0
 800a726:	d0d9      	beq.n	800a6dc <__swbuf_r+0x2e>
 800a728:	e7d6      	b.n	800a6d8 <__swbuf_r+0x2a>
	...

0800a72c <__swsetup_r>:
 800a72c:	b538      	push	{r3, r4, r5, lr}
 800a72e:	4b29      	ldr	r3, [pc, #164]	@ (800a7d4 <__swsetup_r+0xa8>)
 800a730:	4605      	mov	r5, r0
 800a732:	6818      	ldr	r0, [r3, #0]
 800a734:	460c      	mov	r4, r1
 800a736:	b118      	cbz	r0, 800a740 <__swsetup_r+0x14>
 800a738:	6a03      	ldr	r3, [r0, #32]
 800a73a:	b90b      	cbnz	r3, 800a740 <__swsetup_r+0x14>
 800a73c:	f7ff fe9c 	bl	800a478 <__sinit>
 800a740:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a744:	0719      	lsls	r1, r3, #28
 800a746:	d422      	bmi.n	800a78e <__swsetup_r+0x62>
 800a748:	06da      	lsls	r2, r3, #27
 800a74a:	d407      	bmi.n	800a75c <__swsetup_r+0x30>
 800a74c:	2209      	movs	r2, #9
 800a74e:	602a      	str	r2, [r5, #0]
 800a750:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a754:	81a3      	strh	r3, [r4, #12]
 800a756:	f04f 30ff 	mov.w	r0, #4294967295
 800a75a:	e033      	b.n	800a7c4 <__swsetup_r+0x98>
 800a75c:	0758      	lsls	r0, r3, #29
 800a75e:	d512      	bpl.n	800a786 <__swsetup_r+0x5a>
 800a760:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a762:	b141      	cbz	r1, 800a776 <__swsetup_r+0x4a>
 800a764:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a768:	4299      	cmp	r1, r3
 800a76a:	d002      	beq.n	800a772 <__swsetup_r+0x46>
 800a76c:	4628      	mov	r0, r5
 800a76e:	f000 ff51 	bl	800b614 <_free_r>
 800a772:	2300      	movs	r3, #0
 800a774:	6363      	str	r3, [r4, #52]	@ 0x34
 800a776:	89a3      	ldrh	r3, [r4, #12]
 800a778:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a77c:	81a3      	strh	r3, [r4, #12]
 800a77e:	2300      	movs	r3, #0
 800a780:	6063      	str	r3, [r4, #4]
 800a782:	6923      	ldr	r3, [r4, #16]
 800a784:	6023      	str	r3, [r4, #0]
 800a786:	89a3      	ldrh	r3, [r4, #12]
 800a788:	f043 0308 	orr.w	r3, r3, #8
 800a78c:	81a3      	strh	r3, [r4, #12]
 800a78e:	6923      	ldr	r3, [r4, #16]
 800a790:	b94b      	cbnz	r3, 800a7a6 <__swsetup_r+0x7a>
 800a792:	89a3      	ldrh	r3, [r4, #12]
 800a794:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a798:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a79c:	d003      	beq.n	800a7a6 <__swsetup_r+0x7a>
 800a79e:	4621      	mov	r1, r4
 800a7a0:	4628      	mov	r0, r5
 800a7a2:	f002 fdd1 	bl	800d348 <__smakebuf_r>
 800a7a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7aa:	f013 0201 	ands.w	r2, r3, #1
 800a7ae:	d00a      	beq.n	800a7c6 <__swsetup_r+0x9a>
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	60a2      	str	r2, [r4, #8]
 800a7b4:	6962      	ldr	r2, [r4, #20]
 800a7b6:	4252      	negs	r2, r2
 800a7b8:	61a2      	str	r2, [r4, #24]
 800a7ba:	6922      	ldr	r2, [r4, #16]
 800a7bc:	b942      	cbnz	r2, 800a7d0 <__swsetup_r+0xa4>
 800a7be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a7c2:	d1c5      	bne.n	800a750 <__swsetup_r+0x24>
 800a7c4:	bd38      	pop	{r3, r4, r5, pc}
 800a7c6:	0799      	lsls	r1, r3, #30
 800a7c8:	bf58      	it	pl
 800a7ca:	6962      	ldrpl	r2, [r4, #20]
 800a7cc:	60a2      	str	r2, [r4, #8]
 800a7ce:	e7f4      	b.n	800a7ba <__swsetup_r+0x8e>
 800a7d0:	2000      	movs	r0, #0
 800a7d2:	e7f7      	b.n	800a7c4 <__swsetup_r+0x98>
 800a7d4:	24000020 	.word	0x24000020

0800a7d8 <memset>:
 800a7d8:	4402      	add	r2, r0
 800a7da:	4603      	mov	r3, r0
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d100      	bne.n	800a7e2 <memset+0xa>
 800a7e0:	4770      	bx	lr
 800a7e2:	f803 1b01 	strb.w	r1, [r3], #1
 800a7e6:	e7f9      	b.n	800a7dc <memset+0x4>

0800a7e8 <_raise_r>:
 800a7e8:	291f      	cmp	r1, #31
 800a7ea:	b538      	push	{r3, r4, r5, lr}
 800a7ec:	4605      	mov	r5, r0
 800a7ee:	460c      	mov	r4, r1
 800a7f0:	d904      	bls.n	800a7fc <_raise_r+0x14>
 800a7f2:	2316      	movs	r3, #22
 800a7f4:	6003      	str	r3, [r0, #0]
 800a7f6:	f04f 30ff 	mov.w	r0, #4294967295
 800a7fa:	bd38      	pop	{r3, r4, r5, pc}
 800a7fc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a7fe:	b112      	cbz	r2, 800a806 <_raise_r+0x1e>
 800a800:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a804:	b94b      	cbnz	r3, 800a81a <_raise_r+0x32>
 800a806:	4628      	mov	r0, r5
 800a808:	f000 f8be 	bl	800a988 <_getpid_r>
 800a80c:	4622      	mov	r2, r4
 800a80e:	4601      	mov	r1, r0
 800a810:	4628      	mov	r0, r5
 800a812:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a816:	f000 b8a5 	b.w	800a964 <_kill_r>
 800a81a:	2b01      	cmp	r3, #1
 800a81c:	d00a      	beq.n	800a834 <_raise_r+0x4c>
 800a81e:	1c59      	adds	r1, r3, #1
 800a820:	d103      	bne.n	800a82a <_raise_r+0x42>
 800a822:	2316      	movs	r3, #22
 800a824:	6003      	str	r3, [r0, #0]
 800a826:	2001      	movs	r0, #1
 800a828:	e7e7      	b.n	800a7fa <_raise_r+0x12>
 800a82a:	2100      	movs	r1, #0
 800a82c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a830:	4620      	mov	r0, r4
 800a832:	4798      	blx	r3
 800a834:	2000      	movs	r0, #0
 800a836:	e7e0      	b.n	800a7fa <_raise_r+0x12>

0800a838 <raise>:
 800a838:	4b02      	ldr	r3, [pc, #8]	@ (800a844 <raise+0xc>)
 800a83a:	4601      	mov	r1, r0
 800a83c:	6818      	ldr	r0, [r3, #0]
 800a83e:	f7ff bfd3 	b.w	800a7e8 <_raise_r>
 800a842:	bf00      	nop
 800a844:	24000020 	.word	0x24000020

0800a848 <_localeconv_r>:
 800a848:	4800      	ldr	r0, [pc, #0]	@ (800a84c <_localeconv_r+0x4>)
 800a84a:	4770      	bx	lr
 800a84c:	24000160 	.word	0x24000160

0800a850 <_close_r>:
 800a850:	b538      	push	{r3, r4, r5, lr}
 800a852:	4d06      	ldr	r5, [pc, #24]	@ (800a86c <_close_r+0x1c>)
 800a854:	2300      	movs	r3, #0
 800a856:	4604      	mov	r4, r0
 800a858:	4608      	mov	r0, r1
 800a85a:	602b      	str	r3, [r5, #0]
 800a85c:	f7f6 fbf6 	bl	800104c <_close>
 800a860:	1c43      	adds	r3, r0, #1
 800a862:	d102      	bne.n	800a86a <_close_r+0x1a>
 800a864:	682b      	ldr	r3, [r5, #0]
 800a866:	b103      	cbz	r3, 800a86a <_close_r+0x1a>
 800a868:	6023      	str	r3, [r4, #0]
 800a86a:	bd38      	pop	{r3, r4, r5, pc}
 800a86c:	24004e74 	.word	0x24004e74

0800a870 <_reclaim_reent>:
 800a870:	4b29      	ldr	r3, [pc, #164]	@ (800a918 <_reclaim_reent+0xa8>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	4283      	cmp	r3, r0
 800a876:	b570      	push	{r4, r5, r6, lr}
 800a878:	4604      	mov	r4, r0
 800a87a:	d04b      	beq.n	800a914 <_reclaim_reent+0xa4>
 800a87c:	69c3      	ldr	r3, [r0, #28]
 800a87e:	b1ab      	cbz	r3, 800a8ac <_reclaim_reent+0x3c>
 800a880:	68db      	ldr	r3, [r3, #12]
 800a882:	b16b      	cbz	r3, 800a8a0 <_reclaim_reent+0x30>
 800a884:	2500      	movs	r5, #0
 800a886:	69e3      	ldr	r3, [r4, #28]
 800a888:	68db      	ldr	r3, [r3, #12]
 800a88a:	5959      	ldr	r1, [r3, r5]
 800a88c:	2900      	cmp	r1, #0
 800a88e:	d13b      	bne.n	800a908 <_reclaim_reent+0x98>
 800a890:	3504      	adds	r5, #4
 800a892:	2d80      	cmp	r5, #128	@ 0x80
 800a894:	d1f7      	bne.n	800a886 <_reclaim_reent+0x16>
 800a896:	69e3      	ldr	r3, [r4, #28]
 800a898:	4620      	mov	r0, r4
 800a89a:	68d9      	ldr	r1, [r3, #12]
 800a89c:	f000 feba 	bl	800b614 <_free_r>
 800a8a0:	69e3      	ldr	r3, [r4, #28]
 800a8a2:	6819      	ldr	r1, [r3, #0]
 800a8a4:	b111      	cbz	r1, 800a8ac <_reclaim_reent+0x3c>
 800a8a6:	4620      	mov	r0, r4
 800a8a8:	f000 feb4 	bl	800b614 <_free_r>
 800a8ac:	6961      	ldr	r1, [r4, #20]
 800a8ae:	b111      	cbz	r1, 800a8b6 <_reclaim_reent+0x46>
 800a8b0:	4620      	mov	r0, r4
 800a8b2:	f000 feaf 	bl	800b614 <_free_r>
 800a8b6:	69e1      	ldr	r1, [r4, #28]
 800a8b8:	b111      	cbz	r1, 800a8c0 <_reclaim_reent+0x50>
 800a8ba:	4620      	mov	r0, r4
 800a8bc:	f000 feaa 	bl	800b614 <_free_r>
 800a8c0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a8c2:	b111      	cbz	r1, 800a8ca <_reclaim_reent+0x5a>
 800a8c4:	4620      	mov	r0, r4
 800a8c6:	f000 fea5 	bl	800b614 <_free_r>
 800a8ca:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a8cc:	b111      	cbz	r1, 800a8d4 <_reclaim_reent+0x64>
 800a8ce:	4620      	mov	r0, r4
 800a8d0:	f000 fea0 	bl	800b614 <_free_r>
 800a8d4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800a8d6:	b111      	cbz	r1, 800a8de <_reclaim_reent+0x6e>
 800a8d8:	4620      	mov	r0, r4
 800a8da:	f000 fe9b 	bl	800b614 <_free_r>
 800a8de:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a8e0:	b111      	cbz	r1, 800a8e8 <_reclaim_reent+0x78>
 800a8e2:	4620      	mov	r0, r4
 800a8e4:	f000 fe96 	bl	800b614 <_free_r>
 800a8e8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a8ea:	b111      	cbz	r1, 800a8f2 <_reclaim_reent+0x82>
 800a8ec:	4620      	mov	r0, r4
 800a8ee:	f000 fe91 	bl	800b614 <_free_r>
 800a8f2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a8f4:	b111      	cbz	r1, 800a8fc <_reclaim_reent+0x8c>
 800a8f6:	4620      	mov	r0, r4
 800a8f8:	f000 fe8c 	bl	800b614 <_free_r>
 800a8fc:	6a23      	ldr	r3, [r4, #32]
 800a8fe:	b14b      	cbz	r3, 800a914 <_reclaim_reent+0xa4>
 800a900:	4620      	mov	r0, r4
 800a902:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a906:	4718      	bx	r3
 800a908:	680e      	ldr	r6, [r1, #0]
 800a90a:	4620      	mov	r0, r4
 800a90c:	f000 fe82 	bl	800b614 <_free_r>
 800a910:	4631      	mov	r1, r6
 800a912:	e7bb      	b.n	800a88c <_reclaim_reent+0x1c>
 800a914:	bd70      	pop	{r4, r5, r6, pc}
 800a916:	bf00      	nop
 800a918:	24000020 	.word	0x24000020

0800a91c <_lseek_r>:
 800a91c:	b538      	push	{r3, r4, r5, lr}
 800a91e:	4d07      	ldr	r5, [pc, #28]	@ (800a93c <_lseek_r+0x20>)
 800a920:	4604      	mov	r4, r0
 800a922:	4608      	mov	r0, r1
 800a924:	4611      	mov	r1, r2
 800a926:	2200      	movs	r2, #0
 800a928:	602a      	str	r2, [r5, #0]
 800a92a:	461a      	mov	r2, r3
 800a92c:	f7f6 fbb5 	bl	800109a <_lseek>
 800a930:	1c43      	adds	r3, r0, #1
 800a932:	d102      	bne.n	800a93a <_lseek_r+0x1e>
 800a934:	682b      	ldr	r3, [r5, #0]
 800a936:	b103      	cbz	r3, 800a93a <_lseek_r+0x1e>
 800a938:	6023      	str	r3, [r4, #0]
 800a93a:	bd38      	pop	{r3, r4, r5, pc}
 800a93c:	24004e74 	.word	0x24004e74

0800a940 <_read_r>:
 800a940:	b538      	push	{r3, r4, r5, lr}
 800a942:	4d07      	ldr	r5, [pc, #28]	@ (800a960 <_read_r+0x20>)
 800a944:	4604      	mov	r4, r0
 800a946:	4608      	mov	r0, r1
 800a948:	4611      	mov	r1, r2
 800a94a:	2200      	movs	r2, #0
 800a94c:	602a      	str	r2, [r5, #0]
 800a94e:	461a      	mov	r2, r3
 800a950:	f7f6 fb43 	bl	8000fda <_read>
 800a954:	1c43      	adds	r3, r0, #1
 800a956:	d102      	bne.n	800a95e <_read_r+0x1e>
 800a958:	682b      	ldr	r3, [r5, #0]
 800a95a:	b103      	cbz	r3, 800a95e <_read_r+0x1e>
 800a95c:	6023      	str	r3, [r4, #0]
 800a95e:	bd38      	pop	{r3, r4, r5, pc}
 800a960:	24004e74 	.word	0x24004e74

0800a964 <_kill_r>:
 800a964:	b538      	push	{r3, r4, r5, lr}
 800a966:	4d07      	ldr	r5, [pc, #28]	@ (800a984 <_kill_r+0x20>)
 800a968:	2300      	movs	r3, #0
 800a96a:	4604      	mov	r4, r0
 800a96c:	4608      	mov	r0, r1
 800a96e:	4611      	mov	r1, r2
 800a970:	602b      	str	r3, [r5, #0]
 800a972:	f7f6 fb17 	bl	8000fa4 <_kill>
 800a976:	1c43      	adds	r3, r0, #1
 800a978:	d102      	bne.n	800a980 <_kill_r+0x1c>
 800a97a:	682b      	ldr	r3, [r5, #0]
 800a97c:	b103      	cbz	r3, 800a980 <_kill_r+0x1c>
 800a97e:	6023      	str	r3, [r4, #0]
 800a980:	bd38      	pop	{r3, r4, r5, pc}
 800a982:	bf00      	nop
 800a984:	24004e74 	.word	0x24004e74

0800a988 <_getpid_r>:
 800a988:	f7f6 bb04 	b.w	8000f94 <_getpid>

0800a98c <_sbrk_r>:
 800a98c:	b538      	push	{r3, r4, r5, lr}
 800a98e:	4d06      	ldr	r5, [pc, #24]	@ (800a9a8 <_sbrk_r+0x1c>)
 800a990:	2300      	movs	r3, #0
 800a992:	4604      	mov	r4, r0
 800a994:	4608      	mov	r0, r1
 800a996:	602b      	str	r3, [r5, #0]
 800a998:	f7f6 fb8c 	bl	80010b4 <_sbrk>
 800a99c:	1c43      	adds	r3, r0, #1
 800a99e:	d102      	bne.n	800a9a6 <_sbrk_r+0x1a>
 800a9a0:	682b      	ldr	r3, [r5, #0]
 800a9a2:	b103      	cbz	r3, 800a9a6 <_sbrk_r+0x1a>
 800a9a4:	6023      	str	r3, [r4, #0]
 800a9a6:	bd38      	pop	{r3, r4, r5, pc}
 800a9a8:	24004e74 	.word	0x24004e74

0800a9ac <_write_r>:
 800a9ac:	b538      	push	{r3, r4, r5, lr}
 800a9ae:	4d07      	ldr	r5, [pc, #28]	@ (800a9cc <_write_r+0x20>)
 800a9b0:	4604      	mov	r4, r0
 800a9b2:	4608      	mov	r0, r1
 800a9b4:	4611      	mov	r1, r2
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	602a      	str	r2, [r5, #0]
 800a9ba:	461a      	mov	r2, r3
 800a9bc:	f7f6 fb2a 	bl	8001014 <_write>
 800a9c0:	1c43      	adds	r3, r0, #1
 800a9c2:	d102      	bne.n	800a9ca <_write_r+0x1e>
 800a9c4:	682b      	ldr	r3, [r5, #0]
 800a9c6:	b103      	cbz	r3, 800a9ca <_write_r+0x1e>
 800a9c8:	6023      	str	r3, [r4, #0]
 800a9ca:	bd38      	pop	{r3, r4, r5, pc}
 800a9cc:	24004e74 	.word	0x24004e74

0800a9d0 <__errno>:
 800a9d0:	4b01      	ldr	r3, [pc, #4]	@ (800a9d8 <__errno+0x8>)
 800a9d2:	6818      	ldr	r0, [r3, #0]
 800a9d4:	4770      	bx	lr
 800a9d6:	bf00      	nop
 800a9d8:	24000020 	.word	0x24000020

0800a9dc <__libc_init_array>:
 800a9dc:	b570      	push	{r4, r5, r6, lr}
 800a9de:	4d0d      	ldr	r5, [pc, #52]	@ (800aa14 <__libc_init_array+0x38>)
 800a9e0:	4c0d      	ldr	r4, [pc, #52]	@ (800aa18 <__libc_init_array+0x3c>)
 800a9e2:	1b64      	subs	r4, r4, r5
 800a9e4:	10a4      	asrs	r4, r4, #2
 800a9e6:	2600      	movs	r6, #0
 800a9e8:	42a6      	cmp	r6, r4
 800a9ea:	d109      	bne.n	800aa00 <__libc_init_array+0x24>
 800a9ec:	4d0b      	ldr	r5, [pc, #44]	@ (800aa1c <__libc_init_array+0x40>)
 800a9ee:	4c0c      	ldr	r4, [pc, #48]	@ (800aa20 <__libc_init_array+0x44>)
 800a9f0:	f003 f8e0 	bl	800dbb4 <_init>
 800a9f4:	1b64      	subs	r4, r4, r5
 800a9f6:	10a4      	asrs	r4, r4, #2
 800a9f8:	2600      	movs	r6, #0
 800a9fa:	42a6      	cmp	r6, r4
 800a9fc:	d105      	bne.n	800aa0a <__libc_init_array+0x2e>
 800a9fe:	bd70      	pop	{r4, r5, r6, pc}
 800aa00:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa04:	4798      	blx	r3
 800aa06:	3601      	adds	r6, #1
 800aa08:	e7ee      	b.n	800a9e8 <__libc_init_array+0xc>
 800aa0a:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa0e:	4798      	blx	r3
 800aa10:	3601      	adds	r6, #1
 800aa12:	e7f2      	b.n	800a9fa <__libc_init_array+0x1e>
 800aa14:	0800e0bc 	.word	0x0800e0bc
 800aa18:	0800e0bc 	.word	0x0800e0bc
 800aa1c:	0800e0bc 	.word	0x0800e0bc
 800aa20:	0800e0c0 	.word	0x0800e0c0

0800aa24 <__retarget_lock_init_recursive>:
 800aa24:	4770      	bx	lr

0800aa26 <__retarget_lock_acquire_recursive>:
 800aa26:	4770      	bx	lr

0800aa28 <__retarget_lock_release_recursive>:
 800aa28:	4770      	bx	lr

0800aa2a <memcpy>:
 800aa2a:	440a      	add	r2, r1
 800aa2c:	4291      	cmp	r1, r2
 800aa2e:	f100 33ff 	add.w	r3, r0, #4294967295
 800aa32:	d100      	bne.n	800aa36 <memcpy+0xc>
 800aa34:	4770      	bx	lr
 800aa36:	b510      	push	{r4, lr}
 800aa38:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa40:	4291      	cmp	r1, r2
 800aa42:	d1f9      	bne.n	800aa38 <memcpy+0xe>
 800aa44:	bd10      	pop	{r4, pc}
	...

0800aa48 <nanf>:
 800aa48:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800aa50 <nanf+0x8>
 800aa4c:	4770      	bx	lr
 800aa4e:	bf00      	nop
 800aa50:	7fc00000 	.word	0x7fc00000

0800aa54 <quorem>:
 800aa54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa58:	6903      	ldr	r3, [r0, #16]
 800aa5a:	690c      	ldr	r4, [r1, #16]
 800aa5c:	42a3      	cmp	r3, r4
 800aa5e:	4607      	mov	r7, r0
 800aa60:	db7e      	blt.n	800ab60 <quorem+0x10c>
 800aa62:	3c01      	subs	r4, #1
 800aa64:	f101 0814 	add.w	r8, r1, #20
 800aa68:	00a3      	lsls	r3, r4, #2
 800aa6a:	f100 0514 	add.w	r5, r0, #20
 800aa6e:	9300      	str	r3, [sp, #0]
 800aa70:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aa74:	9301      	str	r3, [sp, #4]
 800aa76:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aa7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aa7e:	3301      	adds	r3, #1
 800aa80:	429a      	cmp	r2, r3
 800aa82:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aa86:	fbb2 f6f3 	udiv	r6, r2, r3
 800aa8a:	d32e      	bcc.n	800aaea <quorem+0x96>
 800aa8c:	f04f 0a00 	mov.w	sl, #0
 800aa90:	46c4      	mov	ip, r8
 800aa92:	46ae      	mov	lr, r5
 800aa94:	46d3      	mov	fp, sl
 800aa96:	f85c 3b04 	ldr.w	r3, [ip], #4
 800aa9a:	b298      	uxth	r0, r3
 800aa9c:	fb06 a000 	mla	r0, r6, r0, sl
 800aaa0:	0c02      	lsrs	r2, r0, #16
 800aaa2:	0c1b      	lsrs	r3, r3, #16
 800aaa4:	fb06 2303 	mla	r3, r6, r3, r2
 800aaa8:	f8de 2000 	ldr.w	r2, [lr]
 800aaac:	b280      	uxth	r0, r0
 800aaae:	b292      	uxth	r2, r2
 800aab0:	1a12      	subs	r2, r2, r0
 800aab2:	445a      	add	r2, fp
 800aab4:	f8de 0000 	ldr.w	r0, [lr]
 800aab8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aabc:	b29b      	uxth	r3, r3
 800aabe:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800aac2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800aac6:	b292      	uxth	r2, r2
 800aac8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800aacc:	45e1      	cmp	r9, ip
 800aace:	f84e 2b04 	str.w	r2, [lr], #4
 800aad2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800aad6:	d2de      	bcs.n	800aa96 <quorem+0x42>
 800aad8:	9b00      	ldr	r3, [sp, #0]
 800aada:	58eb      	ldr	r3, [r5, r3]
 800aadc:	b92b      	cbnz	r3, 800aaea <quorem+0x96>
 800aade:	9b01      	ldr	r3, [sp, #4]
 800aae0:	3b04      	subs	r3, #4
 800aae2:	429d      	cmp	r5, r3
 800aae4:	461a      	mov	r2, r3
 800aae6:	d32f      	bcc.n	800ab48 <quorem+0xf4>
 800aae8:	613c      	str	r4, [r7, #16]
 800aaea:	4638      	mov	r0, r7
 800aaec:	f001 f8a0 	bl	800bc30 <__mcmp>
 800aaf0:	2800      	cmp	r0, #0
 800aaf2:	db25      	blt.n	800ab40 <quorem+0xec>
 800aaf4:	4629      	mov	r1, r5
 800aaf6:	2000      	movs	r0, #0
 800aaf8:	f858 2b04 	ldr.w	r2, [r8], #4
 800aafc:	f8d1 c000 	ldr.w	ip, [r1]
 800ab00:	fa1f fe82 	uxth.w	lr, r2
 800ab04:	fa1f f38c 	uxth.w	r3, ip
 800ab08:	eba3 030e 	sub.w	r3, r3, lr
 800ab0c:	4403      	add	r3, r0
 800ab0e:	0c12      	lsrs	r2, r2, #16
 800ab10:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ab14:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ab18:	b29b      	uxth	r3, r3
 800ab1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ab1e:	45c1      	cmp	r9, r8
 800ab20:	f841 3b04 	str.w	r3, [r1], #4
 800ab24:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ab28:	d2e6      	bcs.n	800aaf8 <quorem+0xa4>
 800ab2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ab2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ab32:	b922      	cbnz	r2, 800ab3e <quorem+0xea>
 800ab34:	3b04      	subs	r3, #4
 800ab36:	429d      	cmp	r5, r3
 800ab38:	461a      	mov	r2, r3
 800ab3a:	d30b      	bcc.n	800ab54 <quorem+0x100>
 800ab3c:	613c      	str	r4, [r7, #16]
 800ab3e:	3601      	adds	r6, #1
 800ab40:	4630      	mov	r0, r6
 800ab42:	b003      	add	sp, #12
 800ab44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab48:	6812      	ldr	r2, [r2, #0]
 800ab4a:	3b04      	subs	r3, #4
 800ab4c:	2a00      	cmp	r2, #0
 800ab4e:	d1cb      	bne.n	800aae8 <quorem+0x94>
 800ab50:	3c01      	subs	r4, #1
 800ab52:	e7c6      	b.n	800aae2 <quorem+0x8e>
 800ab54:	6812      	ldr	r2, [r2, #0]
 800ab56:	3b04      	subs	r3, #4
 800ab58:	2a00      	cmp	r2, #0
 800ab5a:	d1ef      	bne.n	800ab3c <quorem+0xe8>
 800ab5c:	3c01      	subs	r4, #1
 800ab5e:	e7ea      	b.n	800ab36 <quorem+0xe2>
 800ab60:	2000      	movs	r0, #0
 800ab62:	e7ee      	b.n	800ab42 <quorem+0xee>
 800ab64:	0000      	movs	r0, r0
	...

0800ab68 <_dtoa_r>:
 800ab68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab6c:	ed2d 8b02 	vpush	{d8}
 800ab70:	69c7      	ldr	r7, [r0, #28]
 800ab72:	b091      	sub	sp, #68	@ 0x44
 800ab74:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ab78:	ec55 4b10 	vmov	r4, r5, d0
 800ab7c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800ab7e:	9107      	str	r1, [sp, #28]
 800ab80:	4681      	mov	r9, r0
 800ab82:	9209      	str	r2, [sp, #36]	@ 0x24
 800ab84:	930d      	str	r3, [sp, #52]	@ 0x34
 800ab86:	b97f      	cbnz	r7, 800aba8 <_dtoa_r+0x40>
 800ab88:	2010      	movs	r0, #16
 800ab8a:	f7fe fcef 	bl	800956c <malloc>
 800ab8e:	4602      	mov	r2, r0
 800ab90:	f8c9 001c 	str.w	r0, [r9, #28]
 800ab94:	b920      	cbnz	r0, 800aba0 <_dtoa_r+0x38>
 800ab96:	4ba0      	ldr	r3, [pc, #640]	@ (800ae18 <_dtoa_r+0x2b0>)
 800ab98:	21ef      	movs	r1, #239	@ 0xef
 800ab9a:	48a0      	ldr	r0, [pc, #640]	@ (800ae1c <_dtoa_r+0x2b4>)
 800ab9c:	f7fe fcc8 	bl	8009530 <__assert_func>
 800aba0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800aba4:	6007      	str	r7, [r0, #0]
 800aba6:	60c7      	str	r7, [r0, #12]
 800aba8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800abac:	6819      	ldr	r1, [r3, #0]
 800abae:	b159      	cbz	r1, 800abc8 <_dtoa_r+0x60>
 800abb0:	685a      	ldr	r2, [r3, #4]
 800abb2:	604a      	str	r2, [r1, #4]
 800abb4:	2301      	movs	r3, #1
 800abb6:	4093      	lsls	r3, r2
 800abb8:	608b      	str	r3, [r1, #8]
 800abba:	4648      	mov	r0, r9
 800abbc:	f000 fdb4 	bl	800b728 <_Bfree>
 800abc0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800abc4:	2200      	movs	r2, #0
 800abc6:	601a      	str	r2, [r3, #0]
 800abc8:	1e2b      	subs	r3, r5, #0
 800abca:	bfbb      	ittet	lt
 800abcc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800abd0:	9303      	strlt	r3, [sp, #12]
 800abd2:	2300      	movge	r3, #0
 800abd4:	2201      	movlt	r2, #1
 800abd6:	bfac      	ite	ge
 800abd8:	6033      	strge	r3, [r6, #0]
 800abda:	6032      	strlt	r2, [r6, #0]
 800abdc:	4b90      	ldr	r3, [pc, #576]	@ (800ae20 <_dtoa_r+0x2b8>)
 800abde:	9e03      	ldr	r6, [sp, #12]
 800abe0:	43b3      	bics	r3, r6
 800abe2:	d110      	bne.n	800ac06 <_dtoa_r+0x9e>
 800abe4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800abe6:	f242 730f 	movw	r3, #9999	@ 0x270f
 800abea:	6013      	str	r3, [r2, #0]
 800abec:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800abf0:	4323      	orrs	r3, r4
 800abf2:	f000 84de 	beq.w	800b5b2 <_dtoa_r+0xa4a>
 800abf6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800abf8:	4f8a      	ldr	r7, [pc, #552]	@ (800ae24 <_dtoa_r+0x2bc>)
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	f000 84e0 	beq.w	800b5c0 <_dtoa_r+0xa58>
 800ac00:	1cfb      	adds	r3, r7, #3
 800ac02:	f000 bcdb 	b.w	800b5bc <_dtoa_r+0xa54>
 800ac06:	ed9d 8b02 	vldr	d8, [sp, #8]
 800ac0a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ac0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac12:	d10a      	bne.n	800ac2a <_dtoa_r+0xc2>
 800ac14:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ac16:	2301      	movs	r3, #1
 800ac18:	6013      	str	r3, [r2, #0]
 800ac1a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ac1c:	b113      	cbz	r3, 800ac24 <_dtoa_r+0xbc>
 800ac1e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800ac20:	4b81      	ldr	r3, [pc, #516]	@ (800ae28 <_dtoa_r+0x2c0>)
 800ac22:	6013      	str	r3, [r2, #0]
 800ac24:	4f81      	ldr	r7, [pc, #516]	@ (800ae2c <_dtoa_r+0x2c4>)
 800ac26:	f000 bccb 	b.w	800b5c0 <_dtoa_r+0xa58>
 800ac2a:	aa0e      	add	r2, sp, #56	@ 0x38
 800ac2c:	a90f      	add	r1, sp, #60	@ 0x3c
 800ac2e:	4648      	mov	r0, r9
 800ac30:	eeb0 0b48 	vmov.f64	d0, d8
 800ac34:	f001 f91c 	bl	800be70 <__d2b>
 800ac38:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800ac3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ac3e:	9001      	str	r0, [sp, #4]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d045      	beq.n	800acd0 <_dtoa_r+0x168>
 800ac44:	eeb0 7b48 	vmov.f64	d7, d8
 800ac48:	ee18 1a90 	vmov	r1, s17
 800ac4c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800ac50:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800ac54:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800ac58:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800ac5c:	2500      	movs	r5, #0
 800ac5e:	ee07 1a90 	vmov	s15, r1
 800ac62:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800ac66:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800ae00 <_dtoa_r+0x298>
 800ac6a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ac6e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800ae08 <_dtoa_r+0x2a0>
 800ac72:	eea7 6b05 	vfma.f64	d6, d7, d5
 800ac76:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800ae10 <_dtoa_r+0x2a8>
 800ac7a:	ee07 3a90 	vmov	s15, r3
 800ac7e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800ac82:	eeb0 7b46 	vmov.f64	d7, d6
 800ac86:	eea4 7b05 	vfma.f64	d7, d4, d5
 800ac8a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800ac8e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800ac92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac96:	ee16 8a90 	vmov	r8, s13
 800ac9a:	d508      	bpl.n	800acae <_dtoa_r+0x146>
 800ac9c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800aca0:	eeb4 6b47 	vcmp.f64	d6, d7
 800aca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aca8:	bf18      	it	ne
 800acaa:	f108 38ff 	addne.w	r8, r8, #4294967295
 800acae:	f1b8 0f16 	cmp.w	r8, #22
 800acb2:	d82b      	bhi.n	800ad0c <_dtoa_r+0x1a4>
 800acb4:	495e      	ldr	r1, [pc, #376]	@ (800ae30 <_dtoa_r+0x2c8>)
 800acb6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800acba:	ed91 7b00 	vldr	d7, [r1]
 800acbe:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800acc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acc6:	d501      	bpl.n	800accc <_dtoa_r+0x164>
 800acc8:	f108 38ff 	add.w	r8, r8, #4294967295
 800accc:	2100      	movs	r1, #0
 800acce:	e01e      	b.n	800ad0e <_dtoa_r+0x1a6>
 800acd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800acd2:	4413      	add	r3, r2
 800acd4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800acd8:	2920      	cmp	r1, #32
 800acda:	bfc1      	itttt	gt
 800acdc:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800ace0:	408e      	lslgt	r6, r1
 800ace2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800ace6:	fa24 f101 	lsrgt.w	r1, r4, r1
 800acea:	bfd6      	itet	le
 800acec:	f1c1 0120 	rsble	r1, r1, #32
 800acf0:	4331      	orrgt	r1, r6
 800acf2:	fa04 f101 	lslle.w	r1, r4, r1
 800acf6:	ee07 1a90 	vmov	s15, r1
 800acfa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800acfe:	3b01      	subs	r3, #1
 800ad00:	ee17 1a90 	vmov	r1, s15
 800ad04:	2501      	movs	r5, #1
 800ad06:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800ad0a:	e7a8      	b.n	800ac5e <_dtoa_r+0xf6>
 800ad0c:	2101      	movs	r1, #1
 800ad0e:	1ad2      	subs	r2, r2, r3
 800ad10:	1e53      	subs	r3, r2, #1
 800ad12:	9306      	str	r3, [sp, #24]
 800ad14:	bf45      	ittet	mi
 800ad16:	f1c2 0301 	rsbmi	r3, r2, #1
 800ad1a:	9305      	strmi	r3, [sp, #20]
 800ad1c:	2300      	movpl	r3, #0
 800ad1e:	2300      	movmi	r3, #0
 800ad20:	bf4c      	ite	mi
 800ad22:	9306      	strmi	r3, [sp, #24]
 800ad24:	9305      	strpl	r3, [sp, #20]
 800ad26:	f1b8 0f00 	cmp.w	r8, #0
 800ad2a:	910c      	str	r1, [sp, #48]	@ 0x30
 800ad2c:	db18      	blt.n	800ad60 <_dtoa_r+0x1f8>
 800ad2e:	9b06      	ldr	r3, [sp, #24]
 800ad30:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800ad34:	4443      	add	r3, r8
 800ad36:	9306      	str	r3, [sp, #24]
 800ad38:	2300      	movs	r3, #0
 800ad3a:	9a07      	ldr	r2, [sp, #28]
 800ad3c:	2a09      	cmp	r2, #9
 800ad3e:	d849      	bhi.n	800add4 <_dtoa_r+0x26c>
 800ad40:	2a05      	cmp	r2, #5
 800ad42:	bfc4      	itt	gt
 800ad44:	3a04      	subgt	r2, #4
 800ad46:	9207      	strgt	r2, [sp, #28]
 800ad48:	9a07      	ldr	r2, [sp, #28]
 800ad4a:	f1a2 0202 	sub.w	r2, r2, #2
 800ad4e:	bfcc      	ite	gt
 800ad50:	2400      	movgt	r4, #0
 800ad52:	2401      	movle	r4, #1
 800ad54:	2a03      	cmp	r2, #3
 800ad56:	d848      	bhi.n	800adea <_dtoa_r+0x282>
 800ad58:	e8df f002 	tbb	[pc, r2]
 800ad5c:	3a2c2e0b 	.word	0x3a2c2e0b
 800ad60:	9b05      	ldr	r3, [sp, #20]
 800ad62:	2200      	movs	r2, #0
 800ad64:	eba3 0308 	sub.w	r3, r3, r8
 800ad68:	9305      	str	r3, [sp, #20]
 800ad6a:	920a      	str	r2, [sp, #40]	@ 0x28
 800ad6c:	f1c8 0300 	rsb	r3, r8, #0
 800ad70:	e7e3      	b.n	800ad3a <_dtoa_r+0x1d2>
 800ad72:	2200      	movs	r2, #0
 800ad74:	9208      	str	r2, [sp, #32]
 800ad76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad78:	2a00      	cmp	r2, #0
 800ad7a:	dc39      	bgt.n	800adf0 <_dtoa_r+0x288>
 800ad7c:	f04f 0b01 	mov.w	fp, #1
 800ad80:	46da      	mov	sl, fp
 800ad82:	465a      	mov	r2, fp
 800ad84:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800ad88:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800ad8c:	2100      	movs	r1, #0
 800ad8e:	2004      	movs	r0, #4
 800ad90:	f100 0614 	add.w	r6, r0, #20
 800ad94:	4296      	cmp	r6, r2
 800ad96:	d930      	bls.n	800adfa <_dtoa_r+0x292>
 800ad98:	6079      	str	r1, [r7, #4]
 800ad9a:	4648      	mov	r0, r9
 800ad9c:	9304      	str	r3, [sp, #16]
 800ad9e:	f000 fc83 	bl	800b6a8 <_Balloc>
 800ada2:	9b04      	ldr	r3, [sp, #16]
 800ada4:	4607      	mov	r7, r0
 800ada6:	2800      	cmp	r0, #0
 800ada8:	d146      	bne.n	800ae38 <_dtoa_r+0x2d0>
 800adaa:	4b22      	ldr	r3, [pc, #136]	@ (800ae34 <_dtoa_r+0x2cc>)
 800adac:	4602      	mov	r2, r0
 800adae:	f240 11af 	movw	r1, #431	@ 0x1af
 800adb2:	e6f2      	b.n	800ab9a <_dtoa_r+0x32>
 800adb4:	2201      	movs	r2, #1
 800adb6:	e7dd      	b.n	800ad74 <_dtoa_r+0x20c>
 800adb8:	2200      	movs	r2, #0
 800adba:	9208      	str	r2, [sp, #32]
 800adbc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800adbe:	eb08 0b02 	add.w	fp, r8, r2
 800adc2:	f10b 0a01 	add.w	sl, fp, #1
 800adc6:	4652      	mov	r2, sl
 800adc8:	2a01      	cmp	r2, #1
 800adca:	bfb8      	it	lt
 800adcc:	2201      	movlt	r2, #1
 800adce:	e7db      	b.n	800ad88 <_dtoa_r+0x220>
 800add0:	2201      	movs	r2, #1
 800add2:	e7f2      	b.n	800adba <_dtoa_r+0x252>
 800add4:	2401      	movs	r4, #1
 800add6:	2200      	movs	r2, #0
 800add8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800addc:	f04f 3bff 	mov.w	fp, #4294967295
 800ade0:	2100      	movs	r1, #0
 800ade2:	46da      	mov	sl, fp
 800ade4:	2212      	movs	r2, #18
 800ade6:	9109      	str	r1, [sp, #36]	@ 0x24
 800ade8:	e7ce      	b.n	800ad88 <_dtoa_r+0x220>
 800adea:	2201      	movs	r2, #1
 800adec:	9208      	str	r2, [sp, #32]
 800adee:	e7f5      	b.n	800addc <_dtoa_r+0x274>
 800adf0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800adf4:	46da      	mov	sl, fp
 800adf6:	465a      	mov	r2, fp
 800adf8:	e7c6      	b.n	800ad88 <_dtoa_r+0x220>
 800adfa:	3101      	adds	r1, #1
 800adfc:	0040      	lsls	r0, r0, #1
 800adfe:	e7c7      	b.n	800ad90 <_dtoa_r+0x228>
 800ae00:	636f4361 	.word	0x636f4361
 800ae04:	3fd287a7 	.word	0x3fd287a7
 800ae08:	8b60c8b3 	.word	0x8b60c8b3
 800ae0c:	3fc68a28 	.word	0x3fc68a28
 800ae10:	509f79fb 	.word	0x509f79fb
 800ae14:	3fd34413 	.word	0x3fd34413
 800ae18:	0800dd0a 	.word	0x0800dd0a
 800ae1c:	0800dd21 	.word	0x0800dd21
 800ae20:	7ff00000 	.word	0x7ff00000
 800ae24:	0800dd06 	.word	0x0800dd06
 800ae28:	0800dcd5 	.word	0x0800dcd5
 800ae2c:	0800dcd4 	.word	0x0800dcd4
 800ae30:	0800de18 	.word	0x0800de18
 800ae34:	0800dd79 	.word	0x0800dd79
 800ae38:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800ae3c:	f1ba 0f0e 	cmp.w	sl, #14
 800ae40:	6010      	str	r0, [r2, #0]
 800ae42:	d86f      	bhi.n	800af24 <_dtoa_r+0x3bc>
 800ae44:	2c00      	cmp	r4, #0
 800ae46:	d06d      	beq.n	800af24 <_dtoa_r+0x3bc>
 800ae48:	f1b8 0f00 	cmp.w	r8, #0
 800ae4c:	f340 80c2 	ble.w	800afd4 <_dtoa_r+0x46c>
 800ae50:	4aca      	ldr	r2, [pc, #808]	@ (800b17c <_dtoa_r+0x614>)
 800ae52:	f008 010f 	and.w	r1, r8, #15
 800ae56:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800ae5a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800ae5e:	ed92 7b00 	vldr	d7, [r2]
 800ae62:	ea4f 1128 	mov.w	r1, r8, asr #4
 800ae66:	f000 80a9 	beq.w	800afbc <_dtoa_r+0x454>
 800ae6a:	4ac5      	ldr	r2, [pc, #788]	@ (800b180 <_dtoa_r+0x618>)
 800ae6c:	ed92 6b08 	vldr	d6, [r2, #32]
 800ae70:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800ae74:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ae78:	f001 010f 	and.w	r1, r1, #15
 800ae7c:	2203      	movs	r2, #3
 800ae7e:	48c0      	ldr	r0, [pc, #768]	@ (800b180 <_dtoa_r+0x618>)
 800ae80:	2900      	cmp	r1, #0
 800ae82:	f040 809d 	bne.w	800afc0 <_dtoa_r+0x458>
 800ae86:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ae8a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ae8e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ae92:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ae94:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ae98:	2900      	cmp	r1, #0
 800ae9a:	f000 80c1 	beq.w	800b020 <_dtoa_r+0x4b8>
 800ae9e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800aea2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800aea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aeaa:	f140 80b9 	bpl.w	800b020 <_dtoa_r+0x4b8>
 800aeae:	f1ba 0f00 	cmp.w	sl, #0
 800aeb2:	f000 80b5 	beq.w	800b020 <_dtoa_r+0x4b8>
 800aeb6:	f1bb 0f00 	cmp.w	fp, #0
 800aeba:	dd31      	ble.n	800af20 <_dtoa_r+0x3b8>
 800aebc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800aec0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800aec4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800aec8:	f108 31ff 	add.w	r1, r8, #4294967295
 800aecc:	9104      	str	r1, [sp, #16]
 800aece:	3201      	adds	r2, #1
 800aed0:	465c      	mov	r4, fp
 800aed2:	ed9d 6b02 	vldr	d6, [sp, #8]
 800aed6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800aeda:	ee07 2a90 	vmov	s15, r2
 800aede:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800aee2:	eea7 5b06 	vfma.f64	d5, d7, d6
 800aee6:	ee15 2a90 	vmov	r2, s11
 800aeea:	ec51 0b15 	vmov	r0, r1, d5
 800aeee:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800aef2:	2c00      	cmp	r4, #0
 800aef4:	f040 8098 	bne.w	800b028 <_dtoa_r+0x4c0>
 800aef8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800aefc:	ee36 6b47 	vsub.f64	d6, d6, d7
 800af00:	ec41 0b17 	vmov	d7, r0, r1
 800af04:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800af08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af0c:	f300 8261 	bgt.w	800b3d2 <_dtoa_r+0x86a>
 800af10:	eeb1 7b47 	vneg.f64	d7, d7
 800af14:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800af18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af1c:	f100 80f5 	bmi.w	800b10a <_dtoa_r+0x5a2>
 800af20:	ed8d 8b02 	vstr	d8, [sp, #8]
 800af24:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800af26:	2a00      	cmp	r2, #0
 800af28:	f2c0 812c 	blt.w	800b184 <_dtoa_r+0x61c>
 800af2c:	f1b8 0f0e 	cmp.w	r8, #14
 800af30:	f300 8128 	bgt.w	800b184 <_dtoa_r+0x61c>
 800af34:	4b91      	ldr	r3, [pc, #580]	@ (800b17c <_dtoa_r+0x614>)
 800af36:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800af3a:	ed93 6b00 	vldr	d6, [r3]
 800af3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af40:	2b00      	cmp	r3, #0
 800af42:	da03      	bge.n	800af4c <_dtoa_r+0x3e4>
 800af44:	f1ba 0f00 	cmp.w	sl, #0
 800af48:	f340 80d2 	ble.w	800b0f0 <_dtoa_r+0x588>
 800af4c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800af50:	ed9d 7b02 	vldr	d7, [sp, #8]
 800af54:	463e      	mov	r6, r7
 800af56:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800af5a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800af5e:	ee15 3a10 	vmov	r3, s10
 800af62:	3330      	adds	r3, #48	@ 0x30
 800af64:	f806 3b01 	strb.w	r3, [r6], #1
 800af68:	1bf3      	subs	r3, r6, r7
 800af6a:	459a      	cmp	sl, r3
 800af6c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800af70:	eea3 7b46 	vfms.f64	d7, d3, d6
 800af74:	f040 80f8 	bne.w	800b168 <_dtoa_r+0x600>
 800af78:	ee37 7b07 	vadd.f64	d7, d7, d7
 800af7c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800af80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af84:	f300 80dd 	bgt.w	800b142 <_dtoa_r+0x5da>
 800af88:	eeb4 7b46 	vcmp.f64	d7, d6
 800af8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af90:	d104      	bne.n	800af9c <_dtoa_r+0x434>
 800af92:	ee15 3a10 	vmov	r3, s10
 800af96:	07db      	lsls	r3, r3, #31
 800af98:	f100 80d3 	bmi.w	800b142 <_dtoa_r+0x5da>
 800af9c:	9901      	ldr	r1, [sp, #4]
 800af9e:	4648      	mov	r0, r9
 800afa0:	f000 fbc2 	bl	800b728 <_Bfree>
 800afa4:	2300      	movs	r3, #0
 800afa6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800afa8:	7033      	strb	r3, [r6, #0]
 800afaa:	f108 0301 	add.w	r3, r8, #1
 800afae:	6013      	str	r3, [r2, #0]
 800afb0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	f000 8304 	beq.w	800b5c0 <_dtoa_r+0xa58>
 800afb8:	601e      	str	r6, [r3, #0]
 800afba:	e301      	b.n	800b5c0 <_dtoa_r+0xa58>
 800afbc:	2202      	movs	r2, #2
 800afbe:	e75e      	b.n	800ae7e <_dtoa_r+0x316>
 800afc0:	07cc      	lsls	r4, r1, #31
 800afc2:	d504      	bpl.n	800afce <_dtoa_r+0x466>
 800afc4:	ed90 6b00 	vldr	d6, [r0]
 800afc8:	3201      	adds	r2, #1
 800afca:	ee27 7b06 	vmul.f64	d7, d7, d6
 800afce:	1049      	asrs	r1, r1, #1
 800afd0:	3008      	adds	r0, #8
 800afd2:	e755      	b.n	800ae80 <_dtoa_r+0x318>
 800afd4:	d022      	beq.n	800b01c <_dtoa_r+0x4b4>
 800afd6:	f1c8 0100 	rsb	r1, r8, #0
 800afda:	4a68      	ldr	r2, [pc, #416]	@ (800b17c <_dtoa_r+0x614>)
 800afdc:	f001 000f 	and.w	r0, r1, #15
 800afe0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800afe4:	ed92 7b00 	vldr	d7, [r2]
 800afe8:	ee28 7b07 	vmul.f64	d7, d8, d7
 800afec:	ed8d 7b02 	vstr	d7, [sp, #8]
 800aff0:	4863      	ldr	r0, [pc, #396]	@ (800b180 <_dtoa_r+0x618>)
 800aff2:	1109      	asrs	r1, r1, #4
 800aff4:	2400      	movs	r4, #0
 800aff6:	2202      	movs	r2, #2
 800aff8:	b929      	cbnz	r1, 800b006 <_dtoa_r+0x49e>
 800affa:	2c00      	cmp	r4, #0
 800affc:	f43f af49 	beq.w	800ae92 <_dtoa_r+0x32a>
 800b000:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b004:	e745      	b.n	800ae92 <_dtoa_r+0x32a>
 800b006:	07ce      	lsls	r6, r1, #31
 800b008:	d505      	bpl.n	800b016 <_dtoa_r+0x4ae>
 800b00a:	ed90 6b00 	vldr	d6, [r0]
 800b00e:	3201      	adds	r2, #1
 800b010:	2401      	movs	r4, #1
 800b012:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b016:	1049      	asrs	r1, r1, #1
 800b018:	3008      	adds	r0, #8
 800b01a:	e7ed      	b.n	800aff8 <_dtoa_r+0x490>
 800b01c:	2202      	movs	r2, #2
 800b01e:	e738      	b.n	800ae92 <_dtoa_r+0x32a>
 800b020:	f8cd 8010 	str.w	r8, [sp, #16]
 800b024:	4654      	mov	r4, sl
 800b026:	e754      	b.n	800aed2 <_dtoa_r+0x36a>
 800b028:	4a54      	ldr	r2, [pc, #336]	@ (800b17c <_dtoa_r+0x614>)
 800b02a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800b02e:	ed12 4b02 	vldr	d4, [r2, #-8]
 800b032:	9a08      	ldr	r2, [sp, #32]
 800b034:	ec41 0b17 	vmov	d7, r0, r1
 800b038:	443c      	add	r4, r7
 800b03a:	b34a      	cbz	r2, 800b090 <_dtoa_r+0x528>
 800b03c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800b040:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800b044:	463e      	mov	r6, r7
 800b046:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800b04a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800b04e:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b052:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b056:	ee14 2a90 	vmov	r2, s9
 800b05a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b05e:	3230      	adds	r2, #48	@ 0x30
 800b060:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b064:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b06c:	f806 2b01 	strb.w	r2, [r6], #1
 800b070:	d438      	bmi.n	800b0e4 <_dtoa_r+0x57c>
 800b072:	ee32 5b46 	vsub.f64	d5, d2, d6
 800b076:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800b07a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b07e:	d462      	bmi.n	800b146 <_dtoa_r+0x5de>
 800b080:	42a6      	cmp	r6, r4
 800b082:	f43f af4d 	beq.w	800af20 <_dtoa_r+0x3b8>
 800b086:	ee27 7b03 	vmul.f64	d7, d7, d3
 800b08a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b08e:	e7e0      	b.n	800b052 <_dtoa_r+0x4ea>
 800b090:	4621      	mov	r1, r4
 800b092:	463e      	mov	r6, r7
 800b094:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b098:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800b09c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b0a0:	ee14 2a90 	vmov	r2, s9
 800b0a4:	3230      	adds	r2, #48	@ 0x30
 800b0a6:	f806 2b01 	strb.w	r2, [r6], #1
 800b0aa:	42a6      	cmp	r6, r4
 800b0ac:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b0b0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b0b4:	d119      	bne.n	800b0ea <_dtoa_r+0x582>
 800b0b6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800b0ba:	ee37 4b05 	vadd.f64	d4, d7, d5
 800b0be:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800b0c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0c6:	dc3e      	bgt.n	800b146 <_dtoa_r+0x5de>
 800b0c8:	ee35 5b47 	vsub.f64	d5, d5, d7
 800b0cc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800b0d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0d4:	f57f af24 	bpl.w	800af20 <_dtoa_r+0x3b8>
 800b0d8:	460e      	mov	r6, r1
 800b0da:	3901      	subs	r1, #1
 800b0dc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b0e0:	2b30      	cmp	r3, #48	@ 0x30
 800b0e2:	d0f9      	beq.n	800b0d8 <_dtoa_r+0x570>
 800b0e4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b0e8:	e758      	b.n	800af9c <_dtoa_r+0x434>
 800b0ea:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b0ee:	e7d5      	b.n	800b09c <_dtoa_r+0x534>
 800b0f0:	d10b      	bne.n	800b10a <_dtoa_r+0x5a2>
 800b0f2:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800b0f6:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b0fa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b0fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b106:	f2c0 8161 	blt.w	800b3cc <_dtoa_r+0x864>
 800b10a:	2400      	movs	r4, #0
 800b10c:	4625      	mov	r5, r4
 800b10e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b110:	43db      	mvns	r3, r3
 800b112:	9304      	str	r3, [sp, #16]
 800b114:	463e      	mov	r6, r7
 800b116:	f04f 0800 	mov.w	r8, #0
 800b11a:	4621      	mov	r1, r4
 800b11c:	4648      	mov	r0, r9
 800b11e:	f000 fb03 	bl	800b728 <_Bfree>
 800b122:	2d00      	cmp	r5, #0
 800b124:	d0de      	beq.n	800b0e4 <_dtoa_r+0x57c>
 800b126:	f1b8 0f00 	cmp.w	r8, #0
 800b12a:	d005      	beq.n	800b138 <_dtoa_r+0x5d0>
 800b12c:	45a8      	cmp	r8, r5
 800b12e:	d003      	beq.n	800b138 <_dtoa_r+0x5d0>
 800b130:	4641      	mov	r1, r8
 800b132:	4648      	mov	r0, r9
 800b134:	f000 faf8 	bl	800b728 <_Bfree>
 800b138:	4629      	mov	r1, r5
 800b13a:	4648      	mov	r0, r9
 800b13c:	f000 faf4 	bl	800b728 <_Bfree>
 800b140:	e7d0      	b.n	800b0e4 <_dtoa_r+0x57c>
 800b142:	f8cd 8010 	str.w	r8, [sp, #16]
 800b146:	4633      	mov	r3, r6
 800b148:	461e      	mov	r6, r3
 800b14a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b14e:	2a39      	cmp	r2, #57	@ 0x39
 800b150:	d106      	bne.n	800b160 <_dtoa_r+0x5f8>
 800b152:	429f      	cmp	r7, r3
 800b154:	d1f8      	bne.n	800b148 <_dtoa_r+0x5e0>
 800b156:	9a04      	ldr	r2, [sp, #16]
 800b158:	3201      	adds	r2, #1
 800b15a:	9204      	str	r2, [sp, #16]
 800b15c:	2230      	movs	r2, #48	@ 0x30
 800b15e:	703a      	strb	r2, [r7, #0]
 800b160:	781a      	ldrb	r2, [r3, #0]
 800b162:	3201      	adds	r2, #1
 800b164:	701a      	strb	r2, [r3, #0]
 800b166:	e7bd      	b.n	800b0e4 <_dtoa_r+0x57c>
 800b168:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b16c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b174:	f47f aeef 	bne.w	800af56 <_dtoa_r+0x3ee>
 800b178:	e710      	b.n	800af9c <_dtoa_r+0x434>
 800b17a:	bf00      	nop
 800b17c:	0800de18 	.word	0x0800de18
 800b180:	0800ddf0 	.word	0x0800ddf0
 800b184:	9908      	ldr	r1, [sp, #32]
 800b186:	2900      	cmp	r1, #0
 800b188:	f000 80e3 	beq.w	800b352 <_dtoa_r+0x7ea>
 800b18c:	9907      	ldr	r1, [sp, #28]
 800b18e:	2901      	cmp	r1, #1
 800b190:	f300 80c8 	bgt.w	800b324 <_dtoa_r+0x7bc>
 800b194:	2d00      	cmp	r5, #0
 800b196:	f000 80c1 	beq.w	800b31c <_dtoa_r+0x7b4>
 800b19a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b19e:	9e05      	ldr	r6, [sp, #20]
 800b1a0:	461c      	mov	r4, r3
 800b1a2:	9304      	str	r3, [sp, #16]
 800b1a4:	9b05      	ldr	r3, [sp, #20]
 800b1a6:	4413      	add	r3, r2
 800b1a8:	9305      	str	r3, [sp, #20]
 800b1aa:	9b06      	ldr	r3, [sp, #24]
 800b1ac:	2101      	movs	r1, #1
 800b1ae:	4413      	add	r3, r2
 800b1b0:	4648      	mov	r0, r9
 800b1b2:	9306      	str	r3, [sp, #24]
 800b1b4:	f000 fbb6 	bl	800b924 <__i2b>
 800b1b8:	9b04      	ldr	r3, [sp, #16]
 800b1ba:	4605      	mov	r5, r0
 800b1bc:	b166      	cbz	r6, 800b1d8 <_dtoa_r+0x670>
 800b1be:	9a06      	ldr	r2, [sp, #24]
 800b1c0:	2a00      	cmp	r2, #0
 800b1c2:	dd09      	ble.n	800b1d8 <_dtoa_r+0x670>
 800b1c4:	42b2      	cmp	r2, r6
 800b1c6:	9905      	ldr	r1, [sp, #20]
 800b1c8:	bfa8      	it	ge
 800b1ca:	4632      	movge	r2, r6
 800b1cc:	1a89      	subs	r1, r1, r2
 800b1ce:	9105      	str	r1, [sp, #20]
 800b1d0:	9906      	ldr	r1, [sp, #24]
 800b1d2:	1ab6      	subs	r6, r6, r2
 800b1d4:	1a8a      	subs	r2, r1, r2
 800b1d6:	9206      	str	r2, [sp, #24]
 800b1d8:	b1fb      	cbz	r3, 800b21a <_dtoa_r+0x6b2>
 800b1da:	9a08      	ldr	r2, [sp, #32]
 800b1dc:	2a00      	cmp	r2, #0
 800b1de:	f000 80bc 	beq.w	800b35a <_dtoa_r+0x7f2>
 800b1e2:	b19c      	cbz	r4, 800b20c <_dtoa_r+0x6a4>
 800b1e4:	4629      	mov	r1, r5
 800b1e6:	4622      	mov	r2, r4
 800b1e8:	4648      	mov	r0, r9
 800b1ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b1ec:	f000 fc5a 	bl	800baa4 <__pow5mult>
 800b1f0:	9a01      	ldr	r2, [sp, #4]
 800b1f2:	4601      	mov	r1, r0
 800b1f4:	4605      	mov	r5, r0
 800b1f6:	4648      	mov	r0, r9
 800b1f8:	f000 fbaa 	bl	800b950 <__multiply>
 800b1fc:	9901      	ldr	r1, [sp, #4]
 800b1fe:	9004      	str	r0, [sp, #16]
 800b200:	4648      	mov	r0, r9
 800b202:	f000 fa91 	bl	800b728 <_Bfree>
 800b206:	9a04      	ldr	r2, [sp, #16]
 800b208:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b20a:	9201      	str	r2, [sp, #4]
 800b20c:	1b1a      	subs	r2, r3, r4
 800b20e:	d004      	beq.n	800b21a <_dtoa_r+0x6b2>
 800b210:	9901      	ldr	r1, [sp, #4]
 800b212:	4648      	mov	r0, r9
 800b214:	f000 fc46 	bl	800baa4 <__pow5mult>
 800b218:	9001      	str	r0, [sp, #4]
 800b21a:	2101      	movs	r1, #1
 800b21c:	4648      	mov	r0, r9
 800b21e:	f000 fb81 	bl	800b924 <__i2b>
 800b222:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b224:	4604      	mov	r4, r0
 800b226:	2b00      	cmp	r3, #0
 800b228:	f000 81d0 	beq.w	800b5cc <_dtoa_r+0xa64>
 800b22c:	461a      	mov	r2, r3
 800b22e:	4601      	mov	r1, r0
 800b230:	4648      	mov	r0, r9
 800b232:	f000 fc37 	bl	800baa4 <__pow5mult>
 800b236:	9b07      	ldr	r3, [sp, #28]
 800b238:	2b01      	cmp	r3, #1
 800b23a:	4604      	mov	r4, r0
 800b23c:	f300 8095 	bgt.w	800b36a <_dtoa_r+0x802>
 800b240:	9b02      	ldr	r3, [sp, #8]
 800b242:	2b00      	cmp	r3, #0
 800b244:	f040 808b 	bne.w	800b35e <_dtoa_r+0x7f6>
 800b248:	9b03      	ldr	r3, [sp, #12]
 800b24a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800b24e:	2a00      	cmp	r2, #0
 800b250:	f040 8087 	bne.w	800b362 <_dtoa_r+0x7fa>
 800b254:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b258:	0d12      	lsrs	r2, r2, #20
 800b25a:	0512      	lsls	r2, r2, #20
 800b25c:	2a00      	cmp	r2, #0
 800b25e:	f000 8082 	beq.w	800b366 <_dtoa_r+0x7fe>
 800b262:	9b05      	ldr	r3, [sp, #20]
 800b264:	3301      	adds	r3, #1
 800b266:	9305      	str	r3, [sp, #20]
 800b268:	9b06      	ldr	r3, [sp, #24]
 800b26a:	3301      	adds	r3, #1
 800b26c:	9306      	str	r3, [sp, #24]
 800b26e:	2301      	movs	r3, #1
 800b270:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b272:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b274:	2b00      	cmp	r3, #0
 800b276:	f000 81af 	beq.w	800b5d8 <_dtoa_r+0xa70>
 800b27a:	6922      	ldr	r2, [r4, #16]
 800b27c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b280:	6910      	ldr	r0, [r2, #16]
 800b282:	f000 fb03 	bl	800b88c <__hi0bits>
 800b286:	f1c0 0020 	rsb	r0, r0, #32
 800b28a:	9b06      	ldr	r3, [sp, #24]
 800b28c:	4418      	add	r0, r3
 800b28e:	f010 001f 	ands.w	r0, r0, #31
 800b292:	d076      	beq.n	800b382 <_dtoa_r+0x81a>
 800b294:	f1c0 0220 	rsb	r2, r0, #32
 800b298:	2a04      	cmp	r2, #4
 800b29a:	dd69      	ble.n	800b370 <_dtoa_r+0x808>
 800b29c:	9b05      	ldr	r3, [sp, #20]
 800b29e:	f1c0 001c 	rsb	r0, r0, #28
 800b2a2:	4403      	add	r3, r0
 800b2a4:	9305      	str	r3, [sp, #20]
 800b2a6:	9b06      	ldr	r3, [sp, #24]
 800b2a8:	4406      	add	r6, r0
 800b2aa:	4403      	add	r3, r0
 800b2ac:	9306      	str	r3, [sp, #24]
 800b2ae:	9b05      	ldr	r3, [sp, #20]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	dd05      	ble.n	800b2c0 <_dtoa_r+0x758>
 800b2b4:	9901      	ldr	r1, [sp, #4]
 800b2b6:	461a      	mov	r2, r3
 800b2b8:	4648      	mov	r0, r9
 800b2ba:	f000 fc4d 	bl	800bb58 <__lshift>
 800b2be:	9001      	str	r0, [sp, #4]
 800b2c0:	9b06      	ldr	r3, [sp, #24]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	dd05      	ble.n	800b2d2 <_dtoa_r+0x76a>
 800b2c6:	4621      	mov	r1, r4
 800b2c8:	461a      	mov	r2, r3
 800b2ca:	4648      	mov	r0, r9
 800b2cc:	f000 fc44 	bl	800bb58 <__lshift>
 800b2d0:	4604      	mov	r4, r0
 800b2d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d056      	beq.n	800b386 <_dtoa_r+0x81e>
 800b2d8:	9801      	ldr	r0, [sp, #4]
 800b2da:	4621      	mov	r1, r4
 800b2dc:	f000 fca8 	bl	800bc30 <__mcmp>
 800b2e0:	2800      	cmp	r0, #0
 800b2e2:	da50      	bge.n	800b386 <_dtoa_r+0x81e>
 800b2e4:	f108 33ff 	add.w	r3, r8, #4294967295
 800b2e8:	9304      	str	r3, [sp, #16]
 800b2ea:	9901      	ldr	r1, [sp, #4]
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	220a      	movs	r2, #10
 800b2f0:	4648      	mov	r0, r9
 800b2f2:	f000 fa3b 	bl	800b76c <__multadd>
 800b2f6:	9b08      	ldr	r3, [sp, #32]
 800b2f8:	9001      	str	r0, [sp, #4]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	f000 816e 	beq.w	800b5dc <_dtoa_r+0xa74>
 800b300:	4629      	mov	r1, r5
 800b302:	2300      	movs	r3, #0
 800b304:	220a      	movs	r2, #10
 800b306:	4648      	mov	r0, r9
 800b308:	f000 fa30 	bl	800b76c <__multadd>
 800b30c:	f1bb 0f00 	cmp.w	fp, #0
 800b310:	4605      	mov	r5, r0
 800b312:	dc64      	bgt.n	800b3de <_dtoa_r+0x876>
 800b314:	9b07      	ldr	r3, [sp, #28]
 800b316:	2b02      	cmp	r3, #2
 800b318:	dc3e      	bgt.n	800b398 <_dtoa_r+0x830>
 800b31a:	e060      	b.n	800b3de <_dtoa_r+0x876>
 800b31c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b31e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b322:	e73c      	b.n	800b19e <_dtoa_r+0x636>
 800b324:	f10a 34ff 	add.w	r4, sl, #4294967295
 800b328:	42a3      	cmp	r3, r4
 800b32a:	bfbf      	itttt	lt
 800b32c:	1ae2      	sublt	r2, r4, r3
 800b32e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b330:	189b      	addlt	r3, r3, r2
 800b332:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800b334:	bfae      	itee	ge
 800b336:	1b1c      	subge	r4, r3, r4
 800b338:	4623      	movlt	r3, r4
 800b33a:	2400      	movlt	r4, #0
 800b33c:	f1ba 0f00 	cmp.w	sl, #0
 800b340:	bfb5      	itete	lt
 800b342:	9a05      	ldrlt	r2, [sp, #20]
 800b344:	9e05      	ldrge	r6, [sp, #20]
 800b346:	eba2 060a 	sublt.w	r6, r2, sl
 800b34a:	4652      	movge	r2, sl
 800b34c:	bfb8      	it	lt
 800b34e:	2200      	movlt	r2, #0
 800b350:	e727      	b.n	800b1a2 <_dtoa_r+0x63a>
 800b352:	9e05      	ldr	r6, [sp, #20]
 800b354:	9d08      	ldr	r5, [sp, #32]
 800b356:	461c      	mov	r4, r3
 800b358:	e730      	b.n	800b1bc <_dtoa_r+0x654>
 800b35a:	461a      	mov	r2, r3
 800b35c:	e758      	b.n	800b210 <_dtoa_r+0x6a8>
 800b35e:	2300      	movs	r3, #0
 800b360:	e786      	b.n	800b270 <_dtoa_r+0x708>
 800b362:	9b02      	ldr	r3, [sp, #8]
 800b364:	e784      	b.n	800b270 <_dtoa_r+0x708>
 800b366:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b368:	e783      	b.n	800b272 <_dtoa_r+0x70a>
 800b36a:	2300      	movs	r3, #0
 800b36c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b36e:	e784      	b.n	800b27a <_dtoa_r+0x712>
 800b370:	d09d      	beq.n	800b2ae <_dtoa_r+0x746>
 800b372:	9b05      	ldr	r3, [sp, #20]
 800b374:	321c      	adds	r2, #28
 800b376:	4413      	add	r3, r2
 800b378:	9305      	str	r3, [sp, #20]
 800b37a:	9b06      	ldr	r3, [sp, #24]
 800b37c:	4416      	add	r6, r2
 800b37e:	4413      	add	r3, r2
 800b380:	e794      	b.n	800b2ac <_dtoa_r+0x744>
 800b382:	4602      	mov	r2, r0
 800b384:	e7f5      	b.n	800b372 <_dtoa_r+0x80a>
 800b386:	f1ba 0f00 	cmp.w	sl, #0
 800b38a:	f8cd 8010 	str.w	r8, [sp, #16]
 800b38e:	46d3      	mov	fp, sl
 800b390:	dc21      	bgt.n	800b3d6 <_dtoa_r+0x86e>
 800b392:	9b07      	ldr	r3, [sp, #28]
 800b394:	2b02      	cmp	r3, #2
 800b396:	dd1e      	ble.n	800b3d6 <_dtoa_r+0x86e>
 800b398:	f1bb 0f00 	cmp.w	fp, #0
 800b39c:	f47f aeb7 	bne.w	800b10e <_dtoa_r+0x5a6>
 800b3a0:	4621      	mov	r1, r4
 800b3a2:	465b      	mov	r3, fp
 800b3a4:	2205      	movs	r2, #5
 800b3a6:	4648      	mov	r0, r9
 800b3a8:	f000 f9e0 	bl	800b76c <__multadd>
 800b3ac:	4601      	mov	r1, r0
 800b3ae:	4604      	mov	r4, r0
 800b3b0:	9801      	ldr	r0, [sp, #4]
 800b3b2:	f000 fc3d 	bl	800bc30 <__mcmp>
 800b3b6:	2800      	cmp	r0, #0
 800b3b8:	f77f aea9 	ble.w	800b10e <_dtoa_r+0x5a6>
 800b3bc:	463e      	mov	r6, r7
 800b3be:	2331      	movs	r3, #49	@ 0x31
 800b3c0:	f806 3b01 	strb.w	r3, [r6], #1
 800b3c4:	9b04      	ldr	r3, [sp, #16]
 800b3c6:	3301      	adds	r3, #1
 800b3c8:	9304      	str	r3, [sp, #16]
 800b3ca:	e6a4      	b.n	800b116 <_dtoa_r+0x5ae>
 800b3cc:	f8cd 8010 	str.w	r8, [sp, #16]
 800b3d0:	4654      	mov	r4, sl
 800b3d2:	4625      	mov	r5, r4
 800b3d4:	e7f2      	b.n	800b3bc <_dtoa_r+0x854>
 800b3d6:	9b08      	ldr	r3, [sp, #32]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	f000 8103 	beq.w	800b5e4 <_dtoa_r+0xa7c>
 800b3de:	2e00      	cmp	r6, #0
 800b3e0:	dd05      	ble.n	800b3ee <_dtoa_r+0x886>
 800b3e2:	4629      	mov	r1, r5
 800b3e4:	4632      	mov	r2, r6
 800b3e6:	4648      	mov	r0, r9
 800b3e8:	f000 fbb6 	bl	800bb58 <__lshift>
 800b3ec:	4605      	mov	r5, r0
 800b3ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d058      	beq.n	800b4a6 <_dtoa_r+0x93e>
 800b3f4:	6869      	ldr	r1, [r5, #4]
 800b3f6:	4648      	mov	r0, r9
 800b3f8:	f000 f956 	bl	800b6a8 <_Balloc>
 800b3fc:	4606      	mov	r6, r0
 800b3fe:	b928      	cbnz	r0, 800b40c <_dtoa_r+0x8a4>
 800b400:	4b82      	ldr	r3, [pc, #520]	@ (800b60c <_dtoa_r+0xaa4>)
 800b402:	4602      	mov	r2, r0
 800b404:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b408:	f7ff bbc7 	b.w	800ab9a <_dtoa_r+0x32>
 800b40c:	692a      	ldr	r2, [r5, #16]
 800b40e:	3202      	adds	r2, #2
 800b410:	0092      	lsls	r2, r2, #2
 800b412:	f105 010c 	add.w	r1, r5, #12
 800b416:	300c      	adds	r0, #12
 800b418:	f7ff fb07 	bl	800aa2a <memcpy>
 800b41c:	2201      	movs	r2, #1
 800b41e:	4631      	mov	r1, r6
 800b420:	4648      	mov	r0, r9
 800b422:	f000 fb99 	bl	800bb58 <__lshift>
 800b426:	1c7b      	adds	r3, r7, #1
 800b428:	9305      	str	r3, [sp, #20]
 800b42a:	eb07 030b 	add.w	r3, r7, fp
 800b42e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b430:	9b02      	ldr	r3, [sp, #8]
 800b432:	f003 0301 	and.w	r3, r3, #1
 800b436:	46a8      	mov	r8, r5
 800b438:	9308      	str	r3, [sp, #32]
 800b43a:	4605      	mov	r5, r0
 800b43c:	9b05      	ldr	r3, [sp, #20]
 800b43e:	9801      	ldr	r0, [sp, #4]
 800b440:	4621      	mov	r1, r4
 800b442:	f103 3bff 	add.w	fp, r3, #4294967295
 800b446:	f7ff fb05 	bl	800aa54 <quorem>
 800b44a:	4641      	mov	r1, r8
 800b44c:	9002      	str	r0, [sp, #8]
 800b44e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800b452:	9801      	ldr	r0, [sp, #4]
 800b454:	f000 fbec 	bl	800bc30 <__mcmp>
 800b458:	462a      	mov	r2, r5
 800b45a:	9006      	str	r0, [sp, #24]
 800b45c:	4621      	mov	r1, r4
 800b45e:	4648      	mov	r0, r9
 800b460:	f000 fc02 	bl	800bc68 <__mdiff>
 800b464:	68c2      	ldr	r2, [r0, #12]
 800b466:	4606      	mov	r6, r0
 800b468:	b9fa      	cbnz	r2, 800b4aa <_dtoa_r+0x942>
 800b46a:	4601      	mov	r1, r0
 800b46c:	9801      	ldr	r0, [sp, #4]
 800b46e:	f000 fbdf 	bl	800bc30 <__mcmp>
 800b472:	4602      	mov	r2, r0
 800b474:	4631      	mov	r1, r6
 800b476:	4648      	mov	r0, r9
 800b478:	920a      	str	r2, [sp, #40]	@ 0x28
 800b47a:	f000 f955 	bl	800b728 <_Bfree>
 800b47e:	9b07      	ldr	r3, [sp, #28]
 800b480:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b482:	9e05      	ldr	r6, [sp, #20]
 800b484:	ea43 0102 	orr.w	r1, r3, r2
 800b488:	9b08      	ldr	r3, [sp, #32]
 800b48a:	4319      	orrs	r1, r3
 800b48c:	d10f      	bne.n	800b4ae <_dtoa_r+0x946>
 800b48e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b492:	d028      	beq.n	800b4e6 <_dtoa_r+0x97e>
 800b494:	9b06      	ldr	r3, [sp, #24]
 800b496:	2b00      	cmp	r3, #0
 800b498:	dd02      	ble.n	800b4a0 <_dtoa_r+0x938>
 800b49a:	9b02      	ldr	r3, [sp, #8]
 800b49c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800b4a0:	f88b a000 	strb.w	sl, [fp]
 800b4a4:	e639      	b.n	800b11a <_dtoa_r+0x5b2>
 800b4a6:	4628      	mov	r0, r5
 800b4a8:	e7bd      	b.n	800b426 <_dtoa_r+0x8be>
 800b4aa:	2201      	movs	r2, #1
 800b4ac:	e7e2      	b.n	800b474 <_dtoa_r+0x90c>
 800b4ae:	9b06      	ldr	r3, [sp, #24]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	db04      	blt.n	800b4be <_dtoa_r+0x956>
 800b4b4:	9907      	ldr	r1, [sp, #28]
 800b4b6:	430b      	orrs	r3, r1
 800b4b8:	9908      	ldr	r1, [sp, #32]
 800b4ba:	430b      	orrs	r3, r1
 800b4bc:	d120      	bne.n	800b500 <_dtoa_r+0x998>
 800b4be:	2a00      	cmp	r2, #0
 800b4c0:	ddee      	ble.n	800b4a0 <_dtoa_r+0x938>
 800b4c2:	9901      	ldr	r1, [sp, #4]
 800b4c4:	2201      	movs	r2, #1
 800b4c6:	4648      	mov	r0, r9
 800b4c8:	f000 fb46 	bl	800bb58 <__lshift>
 800b4cc:	4621      	mov	r1, r4
 800b4ce:	9001      	str	r0, [sp, #4]
 800b4d0:	f000 fbae 	bl	800bc30 <__mcmp>
 800b4d4:	2800      	cmp	r0, #0
 800b4d6:	dc03      	bgt.n	800b4e0 <_dtoa_r+0x978>
 800b4d8:	d1e2      	bne.n	800b4a0 <_dtoa_r+0x938>
 800b4da:	f01a 0f01 	tst.w	sl, #1
 800b4de:	d0df      	beq.n	800b4a0 <_dtoa_r+0x938>
 800b4e0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b4e4:	d1d9      	bne.n	800b49a <_dtoa_r+0x932>
 800b4e6:	2339      	movs	r3, #57	@ 0x39
 800b4e8:	f88b 3000 	strb.w	r3, [fp]
 800b4ec:	4633      	mov	r3, r6
 800b4ee:	461e      	mov	r6, r3
 800b4f0:	3b01      	subs	r3, #1
 800b4f2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b4f6:	2a39      	cmp	r2, #57	@ 0x39
 800b4f8:	d053      	beq.n	800b5a2 <_dtoa_r+0xa3a>
 800b4fa:	3201      	adds	r2, #1
 800b4fc:	701a      	strb	r2, [r3, #0]
 800b4fe:	e60c      	b.n	800b11a <_dtoa_r+0x5b2>
 800b500:	2a00      	cmp	r2, #0
 800b502:	dd07      	ble.n	800b514 <_dtoa_r+0x9ac>
 800b504:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b508:	d0ed      	beq.n	800b4e6 <_dtoa_r+0x97e>
 800b50a:	f10a 0301 	add.w	r3, sl, #1
 800b50e:	f88b 3000 	strb.w	r3, [fp]
 800b512:	e602      	b.n	800b11a <_dtoa_r+0x5b2>
 800b514:	9b05      	ldr	r3, [sp, #20]
 800b516:	9a05      	ldr	r2, [sp, #20]
 800b518:	f803 ac01 	strb.w	sl, [r3, #-1]
 800b51c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b51e:	4293      	cmp	r3, r2
 800b520:	d029      	beq.n	800b576 <_dtoa_r+0xa0e>
 800b522:	9901      	ldr	r1, [sp, #4]
 800b524:	2300      	movs	r3, #0
 800b526:	220a      	movs	r2, #10
 800b528:	4648      	mov	r0, r9
 800b52a:	f000 f91f 	bl	800b76c <__multadd>
 800b52e:	45a8      	cmp	r8, r5
 800b530:	9001      	str	r0, [sp, #4]
 800b532:	f04f 0300 	mov.w	r3, #0
 800b536:	f04f 020a 	mov.w	r2, #10
 800b53a:	4641      	mov	r1, r8
 800b53c:	4648      	mov	r0, r9
 800b53e:	d107      	bne.n	800b550 <_dtoa_r+0x9e8>
 800b540:	f000 f914 	bl	800b76c <__multadd>
 800b544:	4680      	mov	r8, r0
 800b546:	4605      	mov	r5, r0
 800b548:	9b05      	ldr	r3, [sp, #20]
 800b54a:	3301      	adds	r3, #1
 800b54c:	9305      	str	r3, [sp, #20]
 800b54e:	e775      	b.n	800b43c <_dtoa_r+0x8d4>
 800b550:	f000 f90c 	bl	800b76c <__multadd>
 800b554:	4629      	mov	r1, r5
 800b556:	4680      	mov	r8, r0
 800b558:	2300      	movs	r3, #0
 800b55a:	220a      	movs	r2, #10
 800b55c:	4648      	mov	r0, r9
 800b55e:	f000 f905 	bl	800b76c <__multadd>
 800b562:	4605      	mov	r5, r0
 800b564:	e7f0      	b.n	800b548 <_dtoa_r+0x9e0>
 800b566:	f1bb 0f00 	cmp.w	fp, #0
 800b56a:	bfcc      	ite	gt
 800b56c:	465e      	movgt	r6, fp
 800b56e:	2601      	movle	r6, #1
 800b570:	443e      	add	r6, r7
 800b572:	f04f 0800 	mov.w	r8, #0
 800b576:	9901      	ldr	r1, [sp, #4]
 800b578:	2201      	movs	r2, #1
 800b57a:	4648      	mov	r0, r9
 800b57c:	f000 faec 	bl	800bb58 <__lshift>
 800b580:	4621      	mov	r1, r4
 800b582:	9001      	str	r0, [sp, #4]
 800b584:	f000 fb54 	bl	800bc30 <__mcmp>
 800b588:	2800      	cmp	r0, #0
 800b58a:	dcaf      	bgt.n	800b4ec <_dtoa_r+0x984>
 800b58c:	d102      	bne.n	800b594 <_dtoa_r+0xa2c>
 800b58e:	f01a 0f01 	tst.w	sl, #1
 800b592:	d1ab      	bne.n	800b4ec <_dtoa_r+0x984>
 800b594:	4633      	mov	r3, r6
 800b596:	461e      	mov	r6, r3
 800b598:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b59c:	2a30      	cmp	r2, #48	@ 0x30
 800b59e:	d0fa      	beq.n	800b596 <_dtoa_r+0xa2e>
 800b5a0:	e5bb      	b.n	800b11a <_dtoa_r+0x5b2>
 800b5a2:	429f      	cmp	r7, r3
 800b5a4:	d1a3      	bne.n	800b4ee <_dtoa_r+0x986>
 800b5a6:	9b04      	ldr	r3, [sp, #16]
 800b5a8:	3301      	adds	r3, #1
 800b5aa:	9304      	str	r3, [sp, #16]
 800b5ac:	2331      	movs	r3, #49	@ 0x31
 800b5ae:	703b      	strb	r3, [r7, #0]
 800b5b0:	e5b3      	b.n	800b11a <_dtoa_r+0x5b2>
 800b5b2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b5b4:	4f16      	ldr	r7, [pc, #88]	@ (800b610 <_dtoa_r+0xaa8>)
 800b5b6:	b11b      	cbz	r3, 800b5c0 <_dtoa_r+0xa58>
 800b5b8:	f107 0308 	add.w	r3, r7, #8
 800b5bc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800b5be:	6013      	str	r3, [r2, #0]
 800b5c0:	4638      	mov	r0, r7
 800b5c2:	b011      	add	sp, #68	@ 0x44
 800b5c4:	ecbd 8b02 	vpop	{d8}
 800b5c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5cc:	9b07      	ldr	r3, [sp, #28]
 800b5ce:	2b01      	cmp	r3, #1
 800b5d0:	f77f ae36 	ble.w	800b240 <_dtoa_r+0x6d8>
 800b5d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b5d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b5d8:	2001      	movs	r0, #1
 800b5da:	e656      	b.n	800b28a <_dtoa_r+0x722>
 800b5dc:	f1bb 0f00 	cmp.w	fp, #0
 800b5e0:	f77f aed7 	ble.w	800b392 <_dtoa_r+0x82a>
 800b5e4:	463e      	mov	r6, r7
 800b5e6:	9801      	ldr	r0, [sp, #4]
 800b5e8:	4621      	mov	r1, r4
 800b5ea:	f7ff fa33 	bl	800aa54 <quorem>
 800b5ee:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800b5f2:	f806 ab01 	strb.w	sl, [r6], #1
 800b5f6:	1bf2      	subs	r2, r6, r7
 800b5f8:	4593      	cmp	fp, r2
 800b5fa:	ddb4      	ble.n	800b566 <_dtoa_r+0x9fe>
 800b5fc:	9901      	ldr	r1, [sp, #4]
 800b5fe:	2300      	movs	r3, #0
 800b600:	220a      	movs	r2, #10
 800b602:	4648      	mov	r0, r9
 800b604:	f000 f8b2 	bl	800b76c <__multadd>
 800b608:	9001      	str	r0, [sp, #4]
 800b60a:	e7ec      	b.n	800b5e6 <_dtoa_r+0xa7e>
 800b60c:	0800dd79 	.word	0x0800dd79
 800b610:	0800dcfd 	.word	0x0800dcfd

0800b614 <_free_r>:
 800b614:	b538      	push	{r3, r4, r5, lr}
 800b616:	4605      	mov	r5, r0
 800b618:	2900      	cmp	r1, #0
 800b61a:	d041      	beq.n	800b6a0 <_free_r+0x8c>
 800b61c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b620:	1f0c      	subs	r4, r1, #4
 800b622:	2b00      	cmp	r3, #0
 800b624:	bfb8      	it	lt
 800b626:	18e4      	addlt	r4, r4, r3
 800b628:	f7fe f84a 	bl	80096c0 <__malloc_lock>
 800b62c:	4a1d      	ldr	r2, [pc, #116]	@ (800b6a4 <_free_r+0x90>)
 800b62e:	6813      	ldr	r3, [r2, #0]
 800b630:	b933      	cbnz	r3, 800b640 <_free_r+0x2c>
 800b632:	6063      	str	r3, [r4, #4]
 800b634:	6014      	str	r4, [r2, #0]
 800b636:	4628      	mov	r0, r5
 800b638:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b63c:	f7fe b846 	b.w	80096cc <__malloc_unlock>
 800b640:	42a3      	cmp	r3, r4
 800b642:	d908      	bls.n	800b656 <_free_r+0x42>
 800b644:	6820      	ldr	r0, [r4, #0]
 800b646:	1821      	adds	r1, r4, r0
 800b648:	428b      	cmp	r3, r1
 800b64a:	bf01      	itttt	eq
 800b64c:	6819      	ldreq	r1, [r3, #0]
 800b64e:	685b      	ldreq	r3, [r3, #4]
 800b650:	1809      	addeq	r1, r1, r0
 800b652:	6021      	streq	r1, [r4, #0]
 800b654:	e7ed      	b.n	800b632 <_free_r+0x1e>
 800b656:	461a      	mov	r2, r3
 800b658:	685b      	ldr	r3, [r3, #4]
 800b65a:	b10b      	cbz	r3, 800b660 <_free_r+0x4c>
 800b65c:	42a3      	cmp	r3, r4
 800b65e:	d9fa      	bls.n	800b656 <_free_r+0x42>
 800b660:	6811      	ldr	r1, [r2, #0]
 800b662:	1850      	adds	r0, r2, r1
 800b664:	42a0      	cmp	r0, r4
 800b666:	d10b      	bne.n	800b680 <_free_r+0x6c>
 800b668:	6820      	ldr	r0, [r4, #0]
 800b66a:	4401      	add	r1, r0
 800b66c:	1850      	adds	r0, r2, r1
 800b66e:	4283      	cmp	r3, r0
 800b670:	6011      	str	r1, [r2, #0]
 800b672:	d1e0      	bne.n	800b636 <_free_r+0x22>
 800b674:	6818      	ldr	r0, [r3, #0]
 800b676:	685b      	ldr	r3, [r3, #4]
 800b678:	6053      	str	r3, [r2, #4]
 800b67a:	4408      	add	r0, r1
 800b67c:	6010      	str	r0, [r2, #0]
 800b67e:	e7da      	b.n	800b636 <_free_r+0x22>
 800b680:	d902      	bls.n	800b688 <_free_r+0x74>
 800b682:	230c      	movs	r3, #12
 800b684:	602b      	str	r3, [r5, #0]
 800b686:	e7d6      	b.n	800b636 <_free_r+0x22>
 800b688:	6820      	ldr	r0, [r4, #0]
 800b68a:	1821      	adds	r1, r4, r0
 800b68c:	428b      	cmp	r3, r1
 800b68e:	bf04      	itt	eq
 800b690:	6819      	ldreq	r1, [r3, #0]
 800b692:	685b      	ldreq	r3, [r3, #4]
 800b694:	6063      	str	r3, [r4, #4]
 800b696:	bf04      	itt	eq
 800b698:	1809      	addeq	r1, r1, r0
 800b69a:	6021      	streq	r1, [r4, #0]
 800b69c:	6054      	str	r4, [r2, #4]
 800b69e:	e7ca      	b.n	800b636 <_free_r+0x22>
 800b6a0:	bd38      	pop	{r3, r4, r5, pc}
 800b6a2:	bf00      	nop
 800b6a4:	24004d34 	.word	0x24004d34

0800b6a8 <_Balloc>:
 800b6a8:	b570      	push	{r4, r5, r6, lr}
 800b6aa:	69c6      	ldr	r6, [r0, #28]
 800b6ac:	4604      	mov	r4, r0
 800b6ae:	460d      	mov	r5, r1
 800b6b0:	b976      	cbnz	r6, 800b6d0 <_Balloc+0x28>
 800b6b2:	2010      	movs	r0, #16
 800b6b4:	f7fd ff5a 	bl	800956c <malloc>
 800b6b8:	4602      	mov	r2, r0
 800b6ba:	61e0      	str	r0, [r4, #28]
 800b6bc:	b920      	cbnz	r0, 800b6c8 <_Balloc+0x20>
 800b6be:	4b18      	ldr	r3, [pc, #96]	@ (800b720 <_Balloc+0x78>)
 800b6c0:	4818      	ldr	r0, [pc, #96]	@ (800b724 <_Balloc+0x7c>)
 800b6c2:	216b      	movs	r1, #107	@ 0x6b
 800b6c4:	f7fd ff34 	bl	8009530 <__assert_func>
 800b6c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b6cc:	6006      	str	r6, [r0, #0]
 800b6ce:	60c6      	str	r6, [r0, #12]
 800b6d0:	69e6      	ldr	r6, [r4, #28]
 800b6d2:	68f3      	ldr	r3, [r6, #12]
 800b6d4:	b183      	cbz	r3, 800b6f8 <_Balloc+0x50>
 800b6d6:	69e3      	ldr	r3, [r4, #28]
 800b6d8:	68db      	ldr	r3, [r3, #12]
 800b6da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b6de:	b9b8      	cbnz	r0, 800b710 <_Balloc+0x68>
 800b6e0:	2101      	movs	r1, #1
 800b6e2:	fa01 f605 	lsl.w	r6, r1, r5
 800b6e6:	1d72      	adds	r2, r6, #5
 800b6e8:	0092      	lsls	r2, r2, #2
 800b6ea:	4620      	mov	r0, r4
 800b6ec:	f001 fec0 	bl	800d470 <_calloc_r>
 800b6f0:	b160      	cbz	r0, 800b70c <_Balloc+0x64>
 800b6f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b6f6:	e00e      	b.n	800b716 <_Balloc+0x6e>
 800b6f8:	2221      	movs	r2, #33	@ 0x21
 800b6fa:	2104      	movs	r1, #4
 800b6fc:	4620      	mov	r0, r4
 800b6fe:	f001 feb7 	bl	800d470 <_calloc_r>
 800b702:	69e3      	ldr	r3, [r4, #28]
 800b704:	60f0      	str	r0, [r6, #12]
 800b706:	68db      	ldr	r3, [r3, #12]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d1e4      	bne.n	800b6d6 <_Balloc+0x2e>
 800b70c:	2000      	movs	r0, #0
 800b70e:	bd70      	pop	{r4, r5, r6, pc}
 800b710:	6802      	ldr	r2, [r0, #0]
 800b712:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b716:	2300      	movs	r3, #0
 800b718:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b71c:	e7f7      	b.n	800b70e <_Balloc+0x66>
 800b71e:	bf00      	nop
 800b720:	0800dd0a 	.word	0x0800dd0a
 800b724:	0800dd8a 	.word	0x0800dd8a

0800b728 <_Bfree>:
 800b728:	b570      	push	{r4, r5, r6, lr}
 800b72a:	69c6      	ldr	r6, [r0, #28]
 800b72c:	4605      	mov	r5, r0
 800b72e:	460c      	mov	r4, r1
 800b730:	b976      	cbnz	r6, 800b750 <_Bfree+0x28>
 800b732:	2010      	movs	r0, #16
 800b734:	f7fd ff1a 	bl	800956c <malloc>
 800b738:	4602      	mov	r2, r0
 800b73a:	61e8      	str	r0, [r5, #28]
 800b73c:	b920      	cbnz	r0, 800b748 <_Bfree+0x20>
 800b73e:	4b09      	ldr	r3, [pc, #36]	@ (800b764 <_Bfree+0x3c>)
 800b740:	4809      	ldr	r0, [pc, #36]	@ (800b768 <_Bfree+0x40>)
 800b742:	218f      	movs	r1, #143	@ 0x8f
 800b744:	f7fd fef4 	bl	8009530 <__assert_func>
 800b748:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b74c:	6006      	str	r6, [r0, #0]
 800b74e:	60c6      	str	r6, [r0, #12]
 800b750:	b13c      	cbz	r4, 800b762 <_Bfree+0x3a>
 800b752:	69eb      	ldr	r3, [r5, #28]
 800b754:	6862      	ldr	r2, [r4, #4]
 800b756:	68db      	ldr	r3, [r3, #12]
 800b758:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b75c:	6021      	str	r1, [r4, #0]
 800b75e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b762:	bd70      	pop	{r4, r5, r6, pc}
 800b764:	0800dd0a 	.word	0x0800dd0a
 800b768:	0800dd8a 	.word	0x0800dd8a

0800b76c <__multadd>:
 800b76c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b770:	690d      	ldr	r5, [r1, #16]
 800b772:	4607      	mov	r7, r0
 800b774:	460c      	mov	r4, r1
 800b776:	461e      	mov	r6, r3
 800b778:	f101 0c14 	add.w	ip, r1, #20
 800b77c:	2000      	movs	r0, #0
 800b77e:	f8dc 3000 	ldr.w	r3, [ip]
 800b782:	b299      	uxth	r1, r3
 800b784:	fb02 6101 	mla	r1, r2, r1, r6
 800b788:	0c1e      	lsrs	r6, r3, #16
 800b78a:	0c0b      	lsrs	r3, r1, #16
 800b78c:	fb02 3306 	mla	r3, r2, r6, r3
 800b790:	b289      	uxth	r1, r1
 800b792:	3001      	adds	r0, #1
 800b794:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b798:	4285      	cmp	r5, r0
 800b79a:	f84c 1b04 	str.w	r1, [ip], #4
 800b79e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b7a2:	dcec      	bgt.n	800b77e <__multadd+0x12>
 800b7a4:	b30e      	cbz	r6, 800b7ea <__multadd+0x7e>
 800b7a6:	68a3      	ldr	r3, [r4, #8]
 800b7a8:	42ab      	cmp	r3, r5
 800b7aa:	dc19      	bgt.n	800b7e0 <__multadd+0x74>
 800b7ac:	6861      	ldr	r1, [r4, #4]
 800b7ae:	4638      	mov	r0, r7
 800b7b0:	3101      	adds	r1, #1
 800b7b2:	f7ff ff79 	bl	800b6a8 <_Balloc>
 800b7b6:	4680      	mov	r8, r0
 800b7b8:	b928      	cbnz	r0, 800b7c6 <__multadd+0x5a>
 800b7ba:	4602      	mov	r2, r0
 800b7bc:	4b0c      	ldr	r3, [pc, #48]	@ (800b7f0 <__multadd+0x84>)
 800b7be:	480d      	ldr	r0, [pc, #52]	@ (800b7f4 <__multadd+0x88>)
 800b7c0:	21ba      	movs	r1, #186	@ 0xba
 800b7c2:	f7fd feb5 	bl	8009530 <__assert_func>
 800b7c6:	6922      	ldr	r2, [r4, #16]
 800b7c8:	3202      	adds	r2, #2
 800b7ca:	f104 010c 	add.w	r1, r4, #12
 800b7ce:	0092      	lsls	r2, r2, #2
 800b7d0:	300c      	adds	r0, #12
 800b7d2:	f7ff f92a 	bl	800aa2a <memcpy>
 800b7d6:	4621      	mov	r1, r4
 800b7d8:	4638      	mov	r0, r7
 800b7da:	f7ff ffa5 	bl	800b728 <_Bfree>
 800b7de:	4644      	mov	r4, r8
 800b7e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b7e4:	3501      	adds	r5, #1
 800b7e6:	615e      	str	r6, [r3, #20]
 800b7e8:	6125      	str	r5, [r4, #16]
 800b7ea:	4620      	mov	r0, r4
 800b7ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7f0:	0800dd79 	.word	0x0800dd79
 800b7f4:	0800dd8a 	.word	0x0800dd8a

0800b7f8 <__s2b>:
 800b7f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7fc:	460c      	mov	r4, r1
 800b7fe:	4615      	mov	r5, r2
 800b800:	461f      	mov	r7, r3
 800b802:	2209      	movs	r2, #9
 800b804:	3308      	adds	r3, #8
 800b806:	4606      	mov	r6, r0
 800b808:	fb93 f3f2 	sdiv	r3, r3, r2
 800b80c:	2100      	movs	r1, #0
 800b80e:	2201      	movs	r2, #1
 800b810:	429a      	cmp	r2, r3
 800b812:	db09      	blt.n	800b828 <__s2b+0x30>
 800b814:	4630      	mov	r0, r6
 800b816:	f7ff ff47 	bl	800b6a8 <_Balloc>
 800b81a:	b940      	cbnz	r0, 800b82e <__s2b+0x36>
 800b81c:	4602      	mov	r2, r0
 800b81e:	4b19      	ldr	r3, [pc, #100]	@ (800b884 <__s2b+0x8c>)
 800b820:	4819      	ldr	r0, [pc, #100]	@ (800b888 <__s2b+0x90>)
 800b822:	21d3      	movs	r1, #211	@ 0xd3
 800b824:	f7fd fe84 	bl	8009530 <__assert_func>
 800b828:	0052      	lsls	r2, r2, #1
 800b82a:	3101      	adds	r1, #1
 800b82c:	e7f0      	b.n	800b810 <__s2b+0x18>
 800b82e:	9b08      	ldr	r3, [sp, #32]
 800b830:	6143      	str	r3, [r0, #20]
 800b832:	2d09      	cmp	r5, #9
 800b834:	f04f 0301 	mov.w	r3, #1
 800b838:	6103      	str	r3, [r0, #16]
 800b83a:	dd16      	ble.n	800b86a <__s2b+0x72>
 800b83c:	f104 0909 	add.w	r9, r4, #9
 800b840:	46c8      	mov	r8, r9
 800b842:	442c      	add	r4, r5
 800b844:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b848:	4601      	mov	r1, r0
 800b84a:	3b30      	subs	r3, #48	@ 0x30
 800b84c:	220a      	movs	r2, #10
 800b84e:	4630      	mov	r0, r6
 800b850:	f7ff ff8c 	bl	800b76c <__multadd>
 800b854:	45a0      	cmp	r8, r4
 800b856:	d1f5      	bne.n	800b844 <__s2b+0x4c>
 800b858:	f1a5 0408 	sub.w	r4, r5, #8
 800b85c:	444c      	add	r4, r9
 800b85e:	1b2d      	subs	r5, r5, r4
 800b860:	1963      	adds	r3, r4, r5
 800b862:	42bb      	cmp	r3, r7
 800b864:	db04      	blt.n	800b870 <__s2b+0x78>
 800b866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b86a:	340a      	adds	r4, #10
 800b86c:	2509      	movs	r5, #9
 800b86e:	e7f6      	b.n	800b85e <__s2b+0x66>
 800b870:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b874:	4601      	mov	r1, r0
 800b876:	3b30      	subs	r3, #48	@ 0x30
 800b878:	220a      	movs	r2, #10
 800b87a:	4630      	mov	r0, r6
 800b87c:	f7ff ff76 	bl	800b76c <__multadd>
 800b880:	e7ee      	b.n	800b860 <__s2b+0x68>
 800b882:	bf00      	nop
 800b884:	0800dd79 	.word	0x0800dd79
 800b888:	0800dd8a 	.word	0x0800dd8a

0800b88c <__hi0bits>:
 800b88c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b890:	4603      	mov	r3, r0
 800b892:	bf36      	itet	cc
 800b894:	0403      	lslcc	r3, r0, #16
 800b896:	2000      	movcs	r0, #0
 800b898:	2010      	movcc	r0, #16
 800b89a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b89e:	bf3c      	itt	cc
 800b8a0:	021b      	lslcc	r3, r3, #8
 800b8a2:	3008      	addcc	r0, #8
 800b8a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b8a8:	bf3c      	itt	cc
 800b8aa:	011b      	lslcc	r3, r3, #4
 800b8ac:	3004      	addcc	r0, #4
 800b8ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b8b2:	bf3c      	itt	cc
 800b8b4:	009b      	lslcc	r3, r3, #2
 800b8b6:	3002      	addcc	r0, #2
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	db05      	blt.n	800b8c8 <__hi0bits+0x3c>
 800b8bc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b8c0:	f100 0001 	add.w	r0, r0, #1
 800b8c4:	bf08      	it	eq
 800b8c6:	2020      	moveq	r0, #32
 800b8c8:	4770      	bx	lr

0800b8ca <__lo0bits>:
 800b8ca:	6803      	ldr	r3, [r0, #0]
 800b8cc:	4602      	mov	r2, r0
 800b8ce:	f013 0007 	ands.w	r0, r3, #7
 800b8d2:	d00b      	beq.n	800b8ec <__lo0bits+0x22>
 800b8d4:	07d9      	lsls	r1, r3, #31
 800b8d6:	d421      	bmi.n	800b91c <__lo0bits+0x52>
 800b8d8:	0798      	lsls	r0, r3, #30
 800b8da:	bf49      	itett	mi
 800b8dc:	085b      	lsrmi	r3, r3, #1
 800b8de:	089b      	lsrpl	r3, r3, #2
 800b8e0:	2001      	movmi	r0, #1
 800b8e2:	6013      	strmi	r3, [r2, #0]
 800b8e4:	bf5c      	itt	pl
 800b8e6:	6013      	strpl	r3, [r2, #0]
 800b8e8:	2002      	movpl	r0, #2
 800b8ea:	4770      	bx	lr
 800b8ec:	b299      	uxth	r1, r3
 800b8ee:	b909      	cbnz	r1, 800b8f4 <__lo0bits+0x2a>
 800b8f0:	0c1b      	lsrs	r3, r3, #16
 800b8f2:	2010      	movs	r0, #16
 800b8f4:	b2d9      	uxtb	r1, r3
 800b8f6:	b909      	cbnz	r1, 800b8fc <__lo0bits+0x32>
 800b8f8:	3008      	adds	r0, #8
 800b8fa:	0a1b      	lsrs	r3, r3, #8
 800b8fc:	0719      	lsls	r1, r3, #28
 800b8fe:	bf04      	itt	eq
 800b900:	091b      	lsreq	r3, r3, #4
 800b902:	3004      	addeq	r0, #4
 800b904:	0799      	lsls	r1, r3, #30
 800b906:	bf04      	itt	eq
 800b908:	089b      	lsreq	r3, r3, #2
 800b90a:	3002      	addeq	r0, #2
 800b90c:	07d9      	lsls	r1, r3, #31
 800b90e:	d403      	bmi.n	800b918 <__lo0bits+0x4e>
 800b910:	085b      	lsrs	r3, r3, #1
 800b912:	f100 0001 	add.w	r0, r0, #1
 800b916:	d003      	beq.n	800b920 <__lo0bits+0x56>
 800b918:	6013      	str	r3, [r2, #0]
 800b91a:	4770      	bx	lr
 800b91c:	2000      	movs	r0, #0
 800b91e:	4770      	bx	lr
 800b920:	2020      	movs	r0, #32
 800b922:	4770      	bx	lr

0800b924 <__i2b>:
 800b924:	b510      	push	{r4, lr}
 800b926:	460c      	mov	r4, r1
 800b928:	2101      	movs	r1, #1
 800b92a:	f7ff febd 	bl	800b6a8 <_Balloc>
 800b92e:	4602      	mov	r2, r0
 800b930:	b928      	cbnz	r0, 800b93e <__i2b+0x1a>
 800b932:	4b05      	ldr	r3, [pc, #20]	@ (800b948 <__i2b+0x24>)
 800b934:	4805      	ldr	r0, [pc, #20]	@ (800b94c <__i2b+0x28>)
 800b936:	f240 1145 	movw	r1, #325	@ 0x145
 800b93a:	f7fd fdf9 	bl	8009530 <__assert_func>
 800b93e:	2301      	movs	r3, #1
 800b940:	6144      	str	r4, [r0, #20]
 800b942:	6103      	str	r3, [r0, #16]
 800b944:	bd10      	pop	{r4, pc}
 800b946:	bf00      	nop
 800b948:	0800dd79 	.word	0x0800dd79
 800b94c:	0800dd8a 	.word	0x0800dd8a

0800b950 <__multiply>:
 800b950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b954:	4614      	mov	r4, r2
 800b956:	690a      	ldr	r2, [r1, #16]
 800b958:	6923      	ldr	r3, [r4, #16]
 800b95a:	429a      	cmp	r2, r3
 800b95c:	bfa8      	it	ge
 800b95e:	4623      	movge	r3, r4
 800b960:	460f      	mov	r7, r1
 800b962:	bfa4      	itt	ge
 800b964:	460c      	movge	r4, r1
 800b966:	461f      	movge	r7, r3
 800b968:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b96c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b970:	68a3      	ldr	r3, [r4, #8]
 800b972:	6861      	ldr	r1, [r4, #4]
 800b974:	eb0a 0609 	add.w	r6, sl, r9
 800b978:	42b3      	cmp	r3, r6
 800b97a:	b085      	sub	sp, #20
 800b97c:	bfb8      	it	lt
 800b97e:	3101      	addlt	r1, #1
 800b980:	f7ff fe92 	bl	800b6a8 <_Balloc>
 800b984:	b930      	cbnz	r0, 800b994 <__multiply+0x44>
 800b986:	4602      	mov	r2, r0
 800b988:	4b44      	ldr	r3, [pc, #272]	@ (800ba9c <__multiply+0x14c>)
 800b98a:	4845      	ldr	r0, [pc, #276]	@ (800baa0 <__multiply+0x150>)
 800b98c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b990:	f7fd fdce 	bl	8009530 <__assert_func>
 800b994:	f100 0514 	add.w	r5, r0, #20
 800b998:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b99c:	462b      	mov	r3, r5
 800b99e:	2200      	movs	r2, #0
 800b9a0:	4543      	cmp	r3, r8
 800b9a2:	d321      	bcc.n	800b9e8 <__multiply+0x98>
 800b9a4:	f107 0114 	add.w	r1, r7, #20
 800b9a8:	f104 0214 	add.w	r2, r4, #20
 800b9ac:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b9b0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b9b4:	9302      	str	r3, [sp, #8]
 800b9b6:	1b13      	subs	r3, r2, r4
 800b9b8:	3b15      	subs	r3, #21
 800b9ba:	f023 0303 	bic.w	r3, r3, #3
 800b9be:	3304      	adds	r3, #4
 800b9c0:	f104 0715 	add.w	r7, r4, #21
 800b9c4:	42ba      	cmp	r2, r7
 800b9c6:	bf38      	it	cc
 800b9c8:	2304      	movcc	r3, #4
 800b9ca:	9301      	str	r3, [sp, #4]
 800b9cc:	9b02      	ldr	r3, [sp, #8]
 800b9ce:	9103      	str	r1, [sp, #12]
 800b9d0:	428b      	cmp	r3, r1
 800b9d2:	d80c      	bhi.n	800b9ee <__multiply+0x9e>
 800b9d4:	2e00      	cmp	r6, #0
 800b9d6:	dd03      	ble.n	800b9e0 <__multiply+0x90>
 800b9d8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d05b      	beq.n	800ba98 <__multiply+0x148>
 800b9e0:	6106      	str	r6, [r0, #16]
 800b9e2:	b005      	add	sp, #20
 800b9e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9e8:	f843 2b04 	str.w	r2, [r3], #4
 800b9ec:	e7d8      	b.n	800b9a0 <__multiply+0x50>
 800b9ee:	f8b1 a000 	ldrh.w	sl, [r1]
 800b9f2:	f1ba 0f00 	cmp.w	sl, #0
 800b9f6:	d024      	beq.n	800ba42 <__multiply+0xf2>
 800b9f8:	f104 0e14 	add.w	lr, r4, #20
 800b9fc:	46a9      	mov	r9, r5
 800b9fe:	f04f 0c00 	mov.w	ip, #0
 800ba02:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ba06:	f8d9 3000 	ldr.w	r3, [r9]
 800ba0a:	fa1f fb87 	uxth.w	fp, r7
 800ba0e:	b29b      	uxth	r3, r3
 800ba10:	fb0a 330b 	mla	r3, sl, fp, r3
 800ba14:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ba18:	f8d9 7000 	ldr.w	r7, [r9]
 800ba1c:	4463      	add	r3, ip
 800ba1e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ba22:	fb0a c70b 	mla	r7, sl, fp, ip
 800ba26:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ba2a:	b29b      	uxth	r3, r3
 800ba2c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ba30:	4572      	cmp	r2, lr
 800ba32:	f849 3b04 	str.w	r3, [r9], #4
 800ba36:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ba3a:	d8e2      	bhi.n	800ba02 <__multiply+0xb2>
 800ba3c:	9b01      	ldr	r3, [sp, #4]
 800ba3e:	f845 c003 	str.w	ip, [r5, r3]
 800ba42:	9b03      	ldr	r3, [sp, #12]
 800ba44:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ba48:	3104      	adds	r1, #4
 800ba4a:	f1b9 0f00 	cmp.w	r9, #0
 800ba4e:	d021      	beq.n	800ba94 <__multiply+0x144>
 800ba50:	682b      	ldr	r3, [r5, #0]
 800ba52:	f104 0c14 	add.w	ip, r4, #20
 800ba56:	46ae      	mov	lr, r5
 800ba58:	f04f 0a00 	mov.w	sl, #0
 800ba5c:	f8bc b000 	ldrh.w	fp, [ip]
 800ba60:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ba64:	fb09 770b 	mla	r7, r9, fp, r7
 800ba68:	4457      	add	r7, sl
 800ba6a:	b29b      	uxth	r3, r3
 800ba6c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ba70:	f84e 3b04 	str.w	r3, [lr], #4
 800ba74:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ba78:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ba7c:	f8be 3000 	ldrh.w	r3, [lr]
 800ba80:	fb09 330a 	mla	r3, r9, sl, r3
 800ba84:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ba88:	4562      	cmp	r2, ip
 800ba8a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ba8e:	d8e5      	bhi.n	800ba5c <__multiply+0x10c>
 800ba90:	9f01      	ldr	r7, [sp, #4]
 800ba92:	51eb      	str	r3, [r5, r7]
 800ba94:	3504      	adds	r5, #4
 800ba96:	e799      	b.n	800b9cc <__multiply+0x7c>
 800ba98:	3e01      	subs	r6, #1
 800ba9a:	e79b      	b.n	800b9d4 <__multiply+0x84>
 800ba9c:	0800dd79 	.word	0x0800dd79
 800baa0:	0800dd8a 	.word	0x0800dd8a

0800baa4 <__pow5mult>:
 800baa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800baa8:	4615      	mov	r5, r2
 800baaa:	f012 0203 	ands.w	r2, r2, #3
 800baae:	4607      	mov	r7, r0
 800bab0:	460e      	mov	r6, r1
 800bab2:	d007      	beq.n	800bac4 <__pow5mult+0x20>
 800bab4:	4c25      	ldr	r4, [pc, #148]	@ (800bb4c <__pow5mult+0xa8>)
 800bab6:	3a01      	subs	r2, #1
 800bab8:	2300      	movs	r3, #0
 800baba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800babe:	f7ff fe55 	bl	800b76c <__multadd>
 800bac2:	4606      	mov	r6, r0
 800bac4:	10ad      	asrs	r5, r5, #2
 800bac6:	d03d      	beq.n	800bb44 <__pow5mult+0xa0>
 800bac8:	69fc      	ldr	r4, [r7, #28]
 800baca:	b97c      	cbnz	r4, 800baec <__pow5mult+0x48>
 800bacc:	2010      	movs	r0, #16
 800bace:	f7fd fd4d 	bl	800956c <malloc>
 800bad2:	4602      	mov	r2, r0
 800bad4:	61f8      	str	r0, [r7, #28]
 800bad6:	b928      	cbnz	r0, 800bae4 <__pow5mult+0x40>
 800bad8:	4b1d      	ldr	r3, [pc, #116]	@ (800bb50 <__pow5mult+0xac>)
 800bada:	481e      	ldr	r0, [pc, #120]	@ (800bb54 <__pow5mult+0xb0>)
 800badc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bae0:	f7fd fd26 	bl	8009530 <__assert_func>
 800bae4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bae8:	6004      	str	r4, [r0, #0]
 800baea:	60c4      	str	r4, [r0, #12]
 800baec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800baf0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800baf4:	b94c      	cbnz	r4, 800bb0a <__pow5mult+0x66>
 800baf6:	f240 2171 	movw	r1, #625	@ 0x271
 800bafa:	4638      	mov	r0, r7
 800bafc:	f7ff ff12 	bl	800b924 <__i2b>
 800bb00:	2300      	movs	r3, #0
 800bb02:	f8c8 0008 	str.w	r0, [r8, #8]
 800bb06:	4604      	mov	r4, r0
 800bb08:	6003      	str	r3, [r0, #0]
 800bb0a:	f04f 0900 	mov.w	r9, #0
 800bb0e:	07eb      	lsls	r3, r5, #31
 800bb10:	d50a      	bpl.n	800bb28 <__pow5mult+0x84>
 800bb12:	4631      	mov	r1, r6
 800bb14:	4622      	mov	r2, r4
 800bb16:	4638      	mov	r0, r7
 800bb18:	f7ff ff1a 	bl	800b950 <__multiply>
 800bb1c:	4631      	mov	r1, r6
 800bb1e:	4680      	mov	r8, r0
 800bb20:	4638      	mov	r0, r7
 800bb22:	f7ff fe01 	bl	800b728 <_Bfree>
 800bb26:	4646      	mov	r6, r8
 800bb28:	106d      	asrs	r5, r5, #1
 800bb2a:	d00b      	beq.n	800bb44 <__pow5mult+0xa0>
 800bb2c:	6820      	ldr	r0, [r4, #0]
 800bb2e:	b938      	cbnz	r0, 800bb40 <__pow5mult+0x9c>
 800bb30:	4622      	mov	r2, r4
 800bb32:	4621      	mov	r1, r4
 800bb34:	4638      	mov	r0, r7
 800bb36:	f7ff ff0b 	bl	800b950 <__multiply>
 800bb3a:	6020      	str	r0, [r4, #0]
 800bb3c:	f8c0 9000 	str.w	r9, [r0]
 800bb40:	4604      	mov	r4, r0
 800bb42:	e7e4      	b.n	800bb0e <__pow5mult+0x6a>
 800bb44:	4630      	mov	r0, r6
 800bb46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb4a:	bf00      	nop
 800bb4c:	0800dde4 	.word	0x0800dde4
 800bb50:	0800dd0a 	.word	0x0800dd0a
 800bb54:	0800dd8a 	.word	0x0800dd8a

0800bb58 <__lshift>:
 800bb58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb5c:	460c      	mov	r4, r1
 800bb5e:	6849      	ldr	r1, [r1, #4]
 800bb60:	6923      	ldr	r3, [r4, #16]
 800bb62:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bb66:	68a3      	ldr	r3, [r4, #8]
 800bb68:	4607      	mov	r7, r0
 800bb6a:	4691      	mov	r9, r2
 800bb6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bb70:	f108 0601 	add.w	r6, r8, #1
 800bb74:	42b3      	cmp	r3, r6
 800bb76:	db0b      	blt.n	800bb90 <__lshift+0x38>
 800bb78:	4638      	mov	r0, r7
 800bb7a:	f7ff fd95 	bl	800b6a8 <_Balloc>
 800bb7e:	4605      	mov	r5, r0
 800bb80:	b948      	cbnz	r0, 800bb96 <__lshift+0x3e>
 800bb82:	4602      	mov	r2, r0
 800bb84:	4b28      	ldr	r3, [pc, #160]	@ (800bc28 <__lshift+0xd0>)
 800bb86:	4829      	ldr	r0, [pc, #164]	@ (800bc2c <__lshift+0xd4>)
 800bb88:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bb8c:	f7fd fcd0 	bl	8009530 <__assert_func>
 800bb90:	3101      	adds	r1, #1
 800bb92:	005b      	lsls	r3, r3, #1
 800bb94:	e7ee      	b.n	800bb74 <__lshift+0x1c>
 800bb96:	2300      	movs	r3, #0
 800bb98:	f100 0114 	add.w	r1, r0, #20
 800bb9c:	f100 0210 	add.w	r2, r0, #16
 800bba0:	4618      	mov	r0, r3
 800bba2:	4553      	cmp	r3, sl
 800bba4:	db33      	blt.n	800bc0e <__lshift+0xb6>
 800bba6:	6920      	ldr	r0, [r4, #16]
 800bba8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bbac:	f104 0314 	add.w	r3, r4, #20
 800bbb0:	f019 091f 	ands.w	r9, r9, #31
 800bbb4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bbb8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bbbc:	d02b      	beq.n	800bc16 <__lshift+0xbe>
 800bbbe:	f1c9 0e20 	rsb	lr, r9, #32
 800bbc2:	468a      	mov	sl, r1
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	6818      	ldr	r0, [r3, #0]
 800bbc8:	fa00 f009 	lsl.w	r0, r0, r9
 800bbcc:	4310      	orrs	r0, r2
 800bbce:	f84a 0b04 	str.w	r0, [sl], #4
 800bbd2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbd6:	459c      	cmp	ip, r3
 800bbd8:	fa22 f20e 	lsr.w	r2, r2, lr
 800bbdc:	d8f3      	bhi.n	800bbc6 <__lshift+0x6e>
 800bbde:	ebac 0304 	sub.w	r3, ip, r4
 800bbe2:	3b15      	subs	r3, #21
 800bbe4:	f023 0303 	bic.w	r3, r3, #3
 800bbe8:	3304      	adds	r3, #4
 800bbea:	f104 0015 	add.w	r0, r4, #21
 800bbee:	4584      	cmp	ip, r0
 800bbf0:	bf38      	it	cc
 800bbf2:	2304      	movcc	r3, #4
 800bbf4:	50ca      	str	r2, [r1, r3]
 800bbf6:	b10a      	cbz	r2, 800bbfc <__lshift+0xa4>
 800bbf8:	f108 0602 	add.w	r6, r8, #2
 800bbfc:	3e01      	subs	r6, #1
 800bbfe:	4638      	mov	r0, r7
 800bc00:	612e      	str	r6, [r5, #16]
 800bc02:	4621      	mov	r1, r4
 800bc04:	f7ff fd90 	bl	800b728 <_Bfree>
 800bc08:	4628      	mov	r0, r5
 800bc0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc0e:	f842 0f04 	str.w	r0, [r2, #4]!
 800bc12:	3301      	adds	r3, #1
 800bc14:	e7c5      	b.n	800bba2 <__lshift+0x4a>
 800bc16:	3904      	subs	r1, #4
 800bc18:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc1c:	f841 2f04 	str.w	r2, [r1, #4]!
 800bc20:	459c      	cmp	ip, r3
 800bc22:	d8f9      	bhi.n	800bc18 <__lshift+0xc0>
 800bc24:	e7ea      	b.n	800bbfc <__lshift+0xa4>
 800bc26:	bf00      	nop
 800bc28:	0800dd79 	.word	0x0800dd79
 800bc2c:	0800dd8a 	.word	0x0800dd8a

0800bc30 <__mcmp>:
 800bc30:	690a      	ldr	r2, [r1, #16]
 800bc32:	4603      	mov	r3, r0
 800bc34:	6900      	ldr	r0, [r0, #16]
 800bc36:	1a80      	subs	r0, r0, r2
 800bc38:	b530      	push	{r4, r5, lr}
 800bc3a:	d10e      	bne.n	800bc5a <__mcmp+0x2a>
 800bc3c:	3314      	adds	r3, #20
 800bc3e:	3114      	adds	r1, #20
 800bc40:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bc44:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bc48:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bc4c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bc50:	4295      	cmp	r5, r2
 800bc52:	d003      	beq.n	800bc5c <__mcmp+0x2c>
 800bc54:	d205      	bcs.n	800bc62 <__mcmp+0x32>
 800bc56:	f04f 30ff 	mov.w	r0, #4294967295
 800bc5a:	bd30      	pop	{r4, r5, pc}
 800bc5c:	42a3      	cmp	r3, r4
 800bc5e:	d3f3      	bcc.n	800bc48 <__mcmp+0x18>
 800bc60:	e7fb      	b.n	800bc5a <__mcmp+0x2a>
 800bc62:	2001      	movs	r0, #1
 800bc64:	e7f9      	b.n	800bc5a <__mcmp+0x2a>
	...

0800bc68 <__mdiff>:
 800bc68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc6c:	4689      	mov	r9, r1
 800bc6e:	4606      	mov	r6, r0
 800bc70:	4611      	mov	r1, r2
 800bc72:	4648      	mov	r0, r9
 800bc74:	4614      	mov	r4, r2
 800bc76:	f7ff ffdb 	bl	800bc30 <__mcmp>
 800bc7a:	1e05      	subs	r5, r0, #0
 800bc7c:	d112      	bne.n	800bca4 <__mdiff+0x3c>
 800bc7e:	4629      	mov	r1, r5
 800bc80:	4630      	mov	r0, r6
 800bc82:	f7ff fd11 	bl	800b6a8 <_Balloc>
 800bc86:	4602      	mov	r2, r0
 800bc88:	b928      	cbnz	r0, 800bc96 <__mdiff+0x2e>
 800bc8a:	4b3f      	ldr	r3, [pc, #252]	@ (800bd88 <__mdiff+0x120>)
 800bc8c:	f240 2137 	movw	r1, #567	@ 0x237
 800bc90:	483e      	ldr	r0, [pc, #248]	@ (800bd8c <__mdiff+0x124>)
 800bc92:	f7fd fc4d 	bl	8009530 <__assert_func>
 800bc96:	2301      	movs	r3, #1
 800bc98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bc9c:	4610      	mov	r0, r2
 800bc9e:	b003      	add	sp, #12
 800bca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bca4:	bfbc      	itt	lt
 800bca6:	464b      	movlt	r3, r9
 800bca8:	46a1      	movlt	r9, r4
 800bcaa:	4630      	mov	r0, r6
 800bcac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bcb0:	bfba      	itte	lt
 800bcb2:	461c      	movlt	r4, r3
 800bcb4:	2501      	movlt	r5, #1
 800bcb6:	2500      	movge	r5, #0
 800bcb8:	f7ff fcf6 	bl	800b6a8 <_Balloc>
 800bcbc:	4602      	mov	r2, r0
 800bcbe:	b918      	cbnz	r0, 800bcc8 <__mdiff+0x60>
 800bcc0:	4b31      	ldr	r3, [pc, #196]	@ (800bd88 <__mdiff+0x120>)
 800bcc2:	f240 2145 	movw	r1, #581	@ 0x245
 800bcc6:	e7e3      	b.n	800bc90 <__mdiff+0x28>
 800bcc8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bccc:	6926      	ldr	r6, [r4, #16]
 800bcce:	60c5      	str	r5, [r0, #12]
 800bcd0:	f109 0310 	add.w	r3, r9, #16
 800bcd4:	f109 0514 	add.w	r5, r9, #20
 800bcd8:	f104 0e14 	add.w	lr, r4, #20
 800bcdc:	f100 0b14 	add.w	fp, r0, #20
 800bce0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bce4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bce8:	9301      	str	r3, [sp, #4]
 800bcea:	46d9      	mov	r9, fp
 800bcec:	f04f 0c00 	mov.w	ip, #0
 800bcf0:	9b01      	ldr	r3, [sp, #4]
 800bcf2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bcf6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bcfa:	9301      	str	r3, [sp, #4]
 800bcfc:	fa1f f38a 	uxth.w	r3, sl
 800bd00:	4619      	mov	r1, r3
 800bd02:	b283      	uxth	r3, r0
 800bd04:	1acb      	subs	r3, r1, r3
 800bd06:	0c00      	lsrs	r0, r0, #16
 800bd08:	4463      	add	r3, ip
 800bd0a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bd0e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bd12:	b29b      	uxth	r3, r3
 800bd14:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bd18:	4576      	cmp	r6, lr
 800bd1a:	f849 3b04 	str.w	r3, [r9], #4
 800bd1e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bd22:	d8e5      	bhi.n	800bcf0 <__mdiff+0x88>
 800bd24:	1b33      	subs	r3, r6, r4
 800bd26:	3b15      	subs	r3, #21
 800bd28:	f023 0303 	bic.w	r3, r3, #3
 800bd2c:	3415      	adds	r4, #21
 800bd2e:	3304      	adds	r3, #4
 800bd30:	42a6      	cmp	r6, r4
 800bd32:	bf38      	it	cc
 800bd34:	2304      	movcc	r3, #4
 800bd36:	441d      	add	r5, r3
 800bd38:	445b      	add	r3, fp
 800bd3a:	461e      	mov	r6, r3
 800bd3c:	462c      	mov	r4, r5
 800bd3e:	4544      	cmp	r4, r8
 800bd40:	d30e      	bcc.n	800bd60 <__mdiff+0xf8>
 800bd42:	f108 0103 	add.w	r1, r8, #3
 800bd46:	1b49      	subs	r1, r1, r5
 800bd48:	f021 0103 	bic.w	r1, r1, #3
 800bd4c:	3d03      	subs	r5, #3
 800bd4e:	45a8      	cmp	r8, r5
 800bd50:	bf38      	it	cc
 800bd52:	2100      	movcc	r1, #0
 800bd54:	440b      	add	r3, r1
 800bd56:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bd5a:	b191      	cbz	r1, 800bd82 <__mdiff+0x11a>
 800bd5c:	6117      	str	r7, [r2, #16]
 800bd5e:	e79d      	b.n	800bc9c <__mdiff+0x34>
 800bd60:	f854 1b04 	ldr.w	r1, [r4], #4
 800bd64:	46e6      	mov	lr, ip
 800bd66:	0c08      	lsrs	r0, r1, #16
 800bd68:	fa1c fc81 	uxtah	ip, ip, r1
 800bd6c:	4471      	add	r1, lr
 800bd6e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bd72:	b289      	uxth	r1, r1
 800bd74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bd78:	f846 1b04 	str.w	r1, [r6], #4
 800bd7c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bd80:	e7dd      	b.n	800bd3e <__mdiff+0xd6>
 800bd82:	3f01      	subs	r7, #1
 800bd84:	e7e7      	b.n	800bd56 <__mdiff+0xee>
 800bd86:	bf00      	nop
 800bd88:	0800dd79 	.word	0x0800dd79
 800bd8c:	0800dd8a 	.word	0x0800dd8a

0800bd90 <__ulp>:
 800bd90:	b082      	sub	sp, #8
 800bd92:	ed8d 0b00 	vstr	d0, [sp]
 800bd96:	9a01      	ldr	r2, [sp, #4]
 800bd98:	4b0f      	ldr	r3, [pc, #60]	@ (800bdd8 <__ulp+0x48>)
 800bd9a:	4013      	ands	r3, r2
 800bd9c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	dc08      	bgt.n	800bdb6 <__ulp+0x26>
 800bda4:	425b      	negs	r3, r3
 800bda6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800bdaa:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bdae:	da04      	bge.n	800bdba <__ulp+0x2a>
 800bdb0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800bdb4:	4113      	asrs	r3, r2
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	e008      	b.n	800bdcc <__ulp+0x3c>
 800bdba:	f1a2 0314 	sub.w	r3, r2, #20
 800bdbe:	2b1e      	cmp	r3, #30
 800bdc0:	bfda      	itte	le
 800bdc2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800bdc6:	40da      	lsrle	r2, r3
 800bdc8:	2201      	movgt	r2, #1
 800bdca:	2300      	movs	r3, #0
 800bdcc:	4619      	mov	r1, r3
 800bdce:	4610      	mov	r0, r2
 800bdd0:	ec41 0b10 	vmov	d0, r0, r1
 800bdd4:	b002      	add	sp, #8
 800bdd6:	4770      	bx	lr
 800bdd8:	7ff00000 	.word	0x7ff00000

0800bddc <__b2d>:
 800bddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bde0:	6906      	ldr	r6, [r0, #16]
 800bde2:	f100 0814 	add.w	r8, r0, #20
 800bde6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800bdea:	1f37      	subs	r7, r6, #4
 800bdec:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bdf0:	4610      	mov	r0, r2
 800bdf2:	f7ff fd4b 	bl	800b88c <__hi0bits>
 800bdf6:	f1c0 0320 	rsb	r3, r0, #32
 800bdfa:	280a      	cmp	r0, #10
 800bdfc:	600b      	str	r3, [r1, #0]
 800bdfe:	491b      	ldr	r1, [pc, #108]	@ (800be6c <__b2d+0x90>)
 800be00:	dc15      	bgt.n	800be2e <__b2d+0x52>
 800be02:	f1c0 0c0b 	rsb	ip, r0, #11
 800be06:	fa22 f30c 	lsr.w	r3, r2, ip
 800be0a:	45b8      	cmp	r8, r7
 800be0c:	ea43 0501 	orr.w	r5, r3, r1
 800be10:	bf34      	ite	cc
 800be12:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800be16:	2300      	movcs	r3, #0
 800be18:	3015      	adds	r0, #21
 800be1a:	fa02 f000 	lsl.w	r0, r2, r0
 800be1e:	fa23 f30c 	lsr.w	r3, r3, ip
 800be22:	4303      	orrs	r3, r0
 800be24:	461c      	mov	r4, r3
 800be26:	ec45 4b10 	vmov	d0, r4, r5
 800be2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be2e:	45b8      	cmp	r8, r7
 800be30:	bf3a      	itte	cc
 800be32:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800be36:	f1a6 0708 	subcc.w	r7, r6, #8
 800be3a:	2300      	movcs	r3, #0
 800be3c:	380b      	subs	r0, #11
 800be3e:	d012      	beq.n	800be66 <__b2d+0x8a>
 800be40:	f1c0 0120 	rsb	r1, r0, #32
 800be44:	fa23 f401 	lsr.w	r4, r3, r1
 800be48:	4082      	lsls	r2, r0
 800be4a:	4322      	orrs	r2, r4
 800be4c:	4547      	cmp	r7, r8
 800be4e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800be52:	bf8c      	ite	hi
 800be54:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800be58:	2200      	movls	r2, #0
 800be5a:	4083      	lsls	r3, r0
 800be5c:	40ca      	lsrs	r2, r1
 800be5e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800be62:	4313      	orrs	r3, r2
 800be64:	e7de      	b.n	800be24 <__b2d+0x48>
 800be66:	ea42 0501 	orr.w	r5, r2, r1
 800be6a:	e7db      	b.n	800be24 <__b2d+0x48>
 800be6c:	3ff00000 	.word	0x3ff00000

0800be70 <__d2b>:
 800be70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800be74:	460f      	mov	r7, r1
 800be76:	2101      	movs	r1, #1
 800be78:	ec59 8b10 	vmov	r8, r9, d0
 800be7c:	4616      	mov	r6, r2
 800be7e:	f7ff fc13 	bl	800b6a8 <_Balloc>
 800be82:	4604      	mov	r4, r0
 800be84:	b930      	cbnz	r0, 800be94 <__d2b+0x24>
 800be86:	4602      	mov	r2, r0
 800be88:	4b23      	ldr	r3, [pc, #140]	@ (800bf18 <__d2b+0xa8>)
 800be8a:	4824      	ldr	r0, [pc, #144]	@ (800bf1c <__d2b+0xac>)
 800be8c:	f240 310f 	movw	r1, #783	@ 0x30f
 800be90:	f7fd fb4e 	bl	8009530 <__assert_func>
 800be94:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800be98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800be9c:	b10d      	cbz	r5, 800bea2 <__d2b+0x32>
 800be9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bea2:	9301      	str	r3, [sp, #4]
 800bea4:	f1b8 0300 	subs.w	r3, r8, #0
 800bea8:	d023      	beq.n	800bef2 <__d2b+0x82>
 800beaa:	4668      	mov	r0, sp
 800beac:	9300      	str	r3, [sp, #0]
 800beae:	f7ff fd0c 	bl	800b8ca <__lo0bits>
 800beb2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800beb6:	b1d0      	cbz	r0, 800beee <__d2b+0x7e>
 800beb8:	f1c0 0320 	rsb	r3, r0, #32
 800bebc:	fa02 f303 	lsl.w	r3, r2, r3
 800bec0:	430b      	orrs	r3, r1
 800bec2:	40c2      	lsrs	r2, r0
 800bec4:	6163      	str	r3, [r4, #20]
 800bec6:	9201      	str	r2, [sp, #4]
 800bec8:	9b01      	ldr	r3, [sp, #4]
 800beca:	61a3      	str	r3, [r4, #24]
 800becc:	2b00      	cmp	r3, #0
 800bece:	bf0c      	ite	eq
 800bed0:	2201      	moveq	r2, #1
 800bed2:	2202      	movne	r2, #2
 800bed4:	6122      	str	r2, [r4, #16]
 800bed6:	b1a5      	cbz	r5, 800bf02 <__d2b+0x92>
 800bed8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bedc:	4405      	add	r5, r0
 800bede:	603d      	str	r5, [r7, #0]
 800bee0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bee4:	6030      	str	r0, [r6, #0]
 800bee6:	4620      	mov	r0, r4
 800bee8:	b003      	add	sp, #12
 800beea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800beee:	6161      	str	r1, [r4, #20]
 800bef0:	e7ea      	b.n	800bec8 <__d2b+0x58>
 800bef2:	a801      	add	r0, sp, #4
 800bef4:	f7ff fce9 	bl	800b8ca <__lo0bits>
 800bef8:	9b01      	ldr	r3, [sp, #4]
 800befa:	6163      	str	r3, [r4, #20]
 800befc:	3020      	adds	r0, #32
 800befe:	2201      	movs	r2, #1
 800bf00:	e7e8      	b.n	800bed4 <__d2b+0x64>
 800bf02:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bf06:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bf0a:	6038      	str	r0, [r7, #0]
 800bf0c:	6918      	ldr	r0, [r3, #16]
 800bf0e:	f7ff fcbd 	bl	800b88c <__hi0bits>
 800bf12:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bf16:	e7e5      	b.n	800bee4 <__d2b+0x74>
 800bf18:	0800dd79 	.word	0x0800dd79
 800bf1c:	0800dd8a 	.word	0x0800dd8a

0800bf20 <__ratio>:
 800bf20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf24:	4688      	mov	r8, r1
 800bf26:	4669      	mov	r1, sp
 800bf28:	4681      	mov	r9, r0
 800bf2a:	f7ff ff57 	bl	800bddc <__b2d>
 800bf2e:	a901      	add	r1, sp, #4
 800bf30:	4640      	mov	r0, r8
 800bf32:	ec55 4b10 	vmov	r4, r5, d0
 800bf36:	f7ff ff51 	bl	800bddc <__b2d>
 800bf3a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800bf3e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800bf42:	1ad2      	subs	r2, r2, r3
 800bf44:	e9dd 3100 	ldrd	r3, r1, [sp]
 800bf48:	1a5b      	subs	r3, r3, r1
 800bf4a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800bf4e:	ec57 6b10 	vmov	r6, r7, d0
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	bfd6      	itet	le
 800bf56:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bf5a:	462a      	movgt	r2, r5
 800bf5c:	463a      	movle	r2, r7
 800bf5e:	46ab      	mov	fp, r5
 800bf60:	46a2      	mov	sl, r4
 800bf62:	bfce      	itee	gt
 800bf64:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800bf68:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800bf6c:	ee00 3a90 	vmovle	s1, r3
 800bf70:	ec4b ab17 	vmov	d7, sl, fp
 800bf74:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800bf78:	b003      	add	sp, #12
 800bf7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bf7e <__copybits>:
 800bf7e:	3901      	subs	r1, #1
 800bf80:	b570      	push	{r4, r5, r6, lr}
 800bf82:	1149      	asrs	r1, r1, #5
 800bf84:	6914      	ldr	r4, [r2, #16]
 800bf86:	3101      	adds	r1, #1
 800bf88:	f102 0314 	add.w	r3, r2, #20
 800bf8c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bf90:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bf94:	1f05      	subs	r5, r0, #4
 800bf96:	42a3      	cmp	r3, r4
 800bf98:	d30c      	bcc.n	800bfb4 <__copybits+0x36>
 800bf9a:	1aa3      	subs	r3, r4, r2
 800bf9c:	3b11      	subs	r3, #17
 800bf9e:	f023 0303 	bic.w	r3, r3, #3
 800bfa2:	3211      	adds	r2, #17
 800bfa4:	42a2      	cmp	r2, r4
 800bfa6:	bf88      	it	hi
 800bfa8:	2300      	movhi	r3, #0
 800bfaa:	4418      	add	r0, r3
 800bfac:	2300      	movs	r3, #0
 800bfae:	4288      	cmp	r0, r1
 800bfb0:	d305      	bcc.n	800bfbe <__copybits+0x40>
 800bfb2:	bd70      	pop	{r4, r5, r6, pc}
 800bfb4:	f853 6b04 	ldr.w	r6, [r3], #4
 800bfb8:	f845 6f04 	str.w	r6, [r5, #4]!
 800bfbc:	e7eb      	b.n	800bf96 <__copybits+0x18>
 800bfbe:	f840 3b04 	str.w	r3, [r0], #4
 800bfc2:	e7f4      	b.n	800bfae <__copybits+0x30>

0800bfc4 <__any_on>:
 800bfc4:	f100 0214 	add.w	r2, r0, #20
 800bfc8:	6900      	ldr	r0, [r0, #16]
 800bfca:	114b      	asrs	r3, r1, #5
 800bfcc:	4298      	cmp	r0, r3
 800bfce:	b510      	push	{r4, lr}
 800bfd0:	db11      	blt.n	800bff6 <__any_on+0x32>
 800bfd2:	dd0a      	ble.n	800bfea <__any_on+0x26>
 800bfd4:	f011 011f 	ands.w	r1, r1, #31
 800bfd8:	d007      	beq.n	800bfea <__any_on+0x26>
 800bfda:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bfde:	fa24 f001 	lsr.w	r0, r4, r1
 800bfe2:	fa00 f101 	lsl.w	r1, r0, r1
 800bfe6:	428c      	cmp	r4, r1
 800bfe8:	d10b      	bne.n	800c002 <__any_on+0x3e>
 800bfea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bfee:	4293      	cmp	r3, r2
 800bff0:	d803      	bhi.n	800bffa <__any_on+0x36>
 800bff2:	2000      	movs	r0, #0
 800bff4:	bd10      	pop	{r4, pc}
 800bff6:	4603      	mov	r3, r0
 800bff8:	e7f7      	b.n	800bfea <__any_on+0x26>
 800bffa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bffe:	2900      	cmp	r1, #0
 800c000:	d0f5      	beq.n	800bfee <__any_on+0x2a>
 800c002:	2001      	movs	r0, #1
 800c004:	e7f6      	b.n	800bff4 <__any_on+0x30>

0800c006 <sulp>:
 800c006:	b570      	push	{r4, r5, r6, lr}
 800c008:	4604      	mov	r4, r0
 800c00a:	460d      	mov	r5, r1
 800c00c:	4616      	mov	r6, r2
 800c00e:	ec45 4b10 	vmov	d0, r4, r5
 800c012:	f7ff febd 	bl	800bd90 <__ulp>
 800c016:	b17e      	cbz	r6, 800c038 <sulp+0x32>
 800c018:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c01c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c020:	2b00      	cmp	r3, #0
 800c022:	dd09      	ble.n	800c038 <sulp+0x32>
 800c024:	051b      	lsls	r3, r3, #20
 800c026:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800c02a:	2000      	movs	r0, #0
 800c02c:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800c030:	ec41 0b17 	vmov	d7, r0, r1
 800c034:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c038:	bd70      	pop	{r4, r5, r6, pc}
 800c03a:	0000      	movs	r0, r0
 800c03c:	0000      	movs	r0, r0
	...

0800c040 <_strtod_l>:
 800c040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c044:	ed2d 8b0a 	vpush	{d8-d12}
 800c048:	b097      	sub	sp, #92	@ 0x5c
 800c04a:	4688      	mov	r8, r1
 800c04c:	920e      	str	r2, [sp, #56]	@ 0x38
 800c04e:	2200      	movs	r2, #0
 800c050:	9212      	str	r2, [sp, #72]	@ 0x48
 800c052:	9005      	str	r0, [sp, #20]
 800c054:	f04f 0a00 	mov.w	sl, #0
 800c058:	f04f 0b00 	mov.w	fp, #0
 800c05c:	460a      	mov	r2, r1
 800c05e:	9211      	str	r2, [sp, #68]	@ 0x44
 800c060:	7811      	ldrb	r1, [r2, #0]
 800c062:	292b      	cmp	r1, #43	@ 0x2b
 800c064:	d04c      	beq.n	800c100 <_strtod_l+0xc0>
 800c066:	d839      	bhi.n	800c0dc <_strtod_l+0x9c>
 800c068:	290d      	cmp	r1, #13
 800c06a:	d833      	bhi.n	800c0d4 <_strtod_l+0x94>
 800c06c:	2908      	cmp	r1, #8
 800c06e:	d833      	bhi.n	800c0d8 <_strtod_l+0x98>
 800c070:	2900      	cmp	r1, #0
 800c072:	d03c      	beq.n	800c0ee <_strtod_l+0xae>
 800c074:	2200      	movs	r2, #0
 800c076:	9208      	str	r2, [sp, #32]
 800c078:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800c07a:	782a      	ldrb	r2, [r5, #0]
 800c07c:	2a30      	cmp	r2, #48	@ 0x30
 800c07e:	f040 80b5 	bne.w	800c1ec <_strtod_l+0x1ac>
 800c082:	786a      	ldrb	r2, [r5, #1]
 800c084:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c088:	2a58      	cmp	r2, #88	@ 0x58
 800c08a:	d170      	bne.n	800c16e <_strtod_l+0x12e>
 800c08c:	9302      	str	r3, [sp, #8]
 800c08e:	9b08      	ldr	r3, [sp, #32]
 800c090:	9301      	str	r3, [sp, #4]
 800c092:	ab12      	add	r3, sp, #72	@ 0x48
 800c094:	9300      	str	r3, [sp, #0]
 800c096:	4a8b      	ldr	r2, [pc, #556]	@ (800c2c4 <_strtod_l+0x284>)
 800c098:	9805      	ldr	r0, [sp, #20]
 800c09a:	ab13      	add	r3, sp, #76	@ 0x4c
 800c09c:	a911      	add	r1, sp, #68	@ 0x44
 800c09e:	f001 fa63 	bl	800d568 <__gethex>
 800c0a2:	f010 060f 	ands.w	r6, r0, #15
 800c0a6:	4604      	mov	r4, r0
 800c0a8:	d005      	beq.n	800c0b6 <_strtod_l+0x76>
 800c0aa:	2e06      	cmp	r6, #6
 800c0ac:	d12a      	bne.n	800c104 <_strtod_l+0xc4>
 800c0ae:	3501      	adds	r5, #1
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	9511      	str	r5, [sp, #68]	@ 0x44
 800c0b4:	9308      	str	r3, [sp, #32]
 800c0b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	f040 852f 	bne.w	800cb1c <_strtod_l+0xadc>
 800c0be:	9b08      	ldr	r3, [sp, #32]
 800c0c0:	ec4b ab10 	vmov	d0, sl, fp
 800c0c4:	b1cb      	cbz	r3, 800c0fa <_strtod_l+0xba>
 800c0c6:	eeb1 0b40 	vneg.f64	d0, d0
 800c0ca:	b017      	add	sp, #92	@ 0x5c
 800c0cc:	ecbd 8b0a 	vpop	{d8-d12}
 800c0d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0d4:	2920      	cmp	r1, #32
 800c0d6:	d1cd      	bne.n	800c074 <_strtod_l+0x34>
 800c0d8:	3201      	adds	r2, #1
 800c0da:	e7c0      	b.n	800c05e <_strtod_l+0x1e>
 800c0dc:	292d      	cmp	r1, #45	@ 0x2d
 800c0de:	d1c9      	bne.n	800c074 <_strtod_l+0x34>
 800c0e0:	2101      	movs	r1, #1
 800c0e2:	9108      	str	r1, [sp, #32]
 800c0e4:	1c51      	adds	r1, r2, #1
 800c0e6:	9111      	str	r1, [sp, #68]	@ 0x44
 800c0e8:	7852      	ldrb	r2, [r2, #1]
 800c0ea:	2a00      	cmp	r2, #0
 800c0ec:	d1c4      	bne.n	800c078 <_strtod_l+0x38>
 800c0ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c0f0:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	f040 850f 	bne.w	800cb18 <_strtod_l+0xad8>
 800c0fa:	ec4b ab10 	vmov	d0, sl, fp
 800c0fe:	e7e4      	b.n	800c0ca <_strtod_l+0x8a>
 800c100:	2100      	movs	r1, #0
 800c102:	e7ee      	b.n	800c0e2 <_strtod_l+0xa2>
 800c104:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c106:	b13a      	cbz	r2, 800c118 <_strtod_l+0xd8>
 800c108:	2135      	movs	r1, #53	@ 0x35
 800c10a:	a814      	add	r0, sp, #80	@ 0x50
 800c10c:	f7ff ff37 	bl	800bf7e <__copybits>
 800c110:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c112:	9805      	ldr	r0, [sp, #20]
 800c114:	f7ff fb08 	bl	800b728 <_Bfree>
 800c118:	1e73      	subs	r3, r6, #1
 800c11a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c11c:	2b04      	cmp	r3, #4
 800c11e:	d806      	bhi.n	800c12e <_strtod_l+0xee>
 800c120:	e8df f003 	tbb	[pc, r3]
 800c124:	201d0314 	.word	0x201d0314
 800c128:	14          	.byte	0x14
 800c129:	00          	.byte	0x00
 800c12a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800c12e:	05e3      	lsls	r3, r4, #23
 800c130:	bf48      	it	mi
 800c132:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c136:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c13a:	0d1b      	lsrs	r3, r3, #20
 800c13c:	051b      	lsls	r3, r3, #20
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d1b9      	bne.n	800c0b6 <_strtod_l+0x76>
 800c142:	f7fe fc45 	bl	800a9d0 <__errno>
 800c146:	2322      	movs	r3, #34	@ 0x22
 800c148:	6003      	str	r3, [r0, #0]
 800c14a:	e7b4      	b.n	800c0b6 <_strtod_l+0x76>
 800c14c:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800c150:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c154:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c158:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c15c:	e7e7      	b.n	800c12e <_strtod_l+0xee>
 800c15e:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800c2cc <_strtod_l+0x28c>
 800c162:	e7e4      	b.n	800c12e <_strtod_l+0xee>
 800c164:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c168:	f04f 3aff 	mov.w	sl, #4294967295
 800c16c:	e7df      	b.n	800c12e <_strtod_l+0xee>
 800c16e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c170:	1c5a      	adds	r2, r3, #1
 800c172:	9211      	str	r2, [sp, #68]	@ 0x44
 800c174:	785b      	ldrb	r3, [r3, #1]
 800c176:	2b30      	cmp	r3, #48	@ 0x30
 800c178:	d0f9      	beq.n	800c16e <_strtod_l+0x12e>
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d09b      	beq.n	800c0b6 <_strtod_l+0x76>
 800c17e:	2301      	movs	r3, #1
 800c180:	2600      	movs	r6, #0
 800c182:	9307      	str	r3, [sp, #28]
 800c184:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c186:	930a      	str	r3, [sp, #40]	@ 0x28
 800c188:	46b1      	mov	r9, r6
 800c18a:	4635      	mov	r5, r6
 800c18c:	220a      	movs	r2, #10
 800c18e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800c190:	7804      	ldrb	r4, [r0, #0]
 800c192:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800c196:	b2d9      	uxtb	r1, r3
 800c198:	2909      	cmp	r1, #9
 800c19a:	d929      	bls.n	800c1f0 <_strtod_l+0x1b0>
 800c19c:	494a      	ldr	r1, [pc, #296]	@ (800c2c8 <_strtod_l+0x288>)
 800c19e:	2201      	movs	r2, #1
 800c1a0:	f001 f928 	bl	800d3f4 <strncmp>
 800c1a4:	b378      	cbz	r0, 800c206 <_strtod_l+0x1c6>
 800c1a6:	2000      	movs	r0, #0
 800c1a8:	4622      	mov	r2, r4
 800c1aa:	462b      	mov	r3, r5
 800c1ac:	4607      	mov	r7, r0
 800c1ae:	9006      	str	r0, [sp, #24]
 800c1b0:	2a65      	cmp	r2, #101	@ 0x65
 800c1b2:	d001      	beq.n	800c1b8 <_strtod_l+0x178>
 800c1b4:	2a45      	cmp	r2, #69	@ 0x45
 800c1b6:	d117      	bne.n	800c1e8 <_strtod_l+0x1a8>
 800c1b8:	b91b      	cbnz	r3, 800c1c2 <_strtod_l+0x182>
 800c1ba:	9b07      	ldr	r3, [sp, #28]
 800c1bc:	4303      	orrs	r3, r0
 800c1be:	d096      	beq.n	800c0ee <_strtod_l+0xae>
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800c1c6:	f108 0201 	add.w	r2, r8, #1
 800c1ca:	9211      	str	r2, [sp, #68]	@ 0x44
 800c1cc:	f898 2001 	ldrb.w	r2, [r8, #1]
 800c1d0:	2a2b      	cmp	r2, #43	@ 0x2b
 800c1d2:	d06b      	beq.n	800c2ac <_strtod_l+0x26c>
 800c1d4:	2a2d      	cmp	r2, #45	@ 0x2d
 800c1d6:	d071      	beq.n	800c2bc <_strtod_l+0x27c>
 800c1d8:	f04f 0e00 	mov.w	lr, #0
 800c1dc:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800c1e0:	2c09      	cmp	r4, #9
 800c1e2:	d979      	bls.n	800c2d8 <_strtod_l+0x298>
 800c1e4:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800c1e8:	2400      	movs	r4, #0
 800c1ea:	e094      	b.n	800c316 <_strtod_l+0x2d6>
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	e7c7      	b.n	800c180 <_strtod_l+0x140>
 800c1f0:	2d08      	cmp	r5, #8
 800c1f2:	f100 0001 	add.w	r0, r0, #1
 800c1f6:	bfd4      	ite	le
 800c1f8:	fb02 3909 	mlale	r9, r2, r9, r3
 800c1fc:	fb02 3606 	mlagt	r6, r2, r6, r3
 800c200:	3501      	adds	r5, #1
 800c202:	9011      	str	r0, [sp, #68]	@ 0x44
 800c204:	e7c3      	b.n	800c18e <_strtod_l+0x14e>
 800c206:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c208:	1c5a      	adds	r2, r3, #1
 800c20a:	9211      	str	r2, [sp, #68]	@ 0x44
 800c20c:	785a      	ldrb	r2, [r3, #1]
 800c20e:	b375      	cbz	r5, 800c26e <_strtod_l+0x22e>
 800c210:	4607      	mov	r7, r0
 800c212:	462b      	mov	r3, r5
 800c214:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c218:	2909      	cmp	r1, #9
 800c21a:	d913      	bls.n	800c244 <_strtod_l+0x204>
 800c21c:	2101      	movs	r1, #1
 800c21e:	9106      	str	r1, [sp, #24]
 800c220:	e7c6      	b.n	800c1b0 <_strtod_l+0x170>
 800c222:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c224:	1c5a      	adds	r2, r3, #1
 800c226:	9211      	str	r2, [sp, #68]	@ 0x44
 800c228:	785a      	ldrb	r2, [r3, #1]
 800c22a:	3001      	adds	r0, #1
 800c22c:	2a30      	cmp	r2, #48	@ 0x30
 800c22e:	d0f8      	beq.n	800c222 <_strtod_l+0x1e2>
 800c230:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c234:	2b08      	cmp	r3, #8
 800c236:	f200 8476 	bhi.w	800cb26 <_strtod_l+0xae6>
 800c23a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c23c:	930a      	str	r3, [sp, #40]	@ 0x28
 800c23e:	4607      	mov	r7, r0
 800c240:	2000      	movs	r0, #0
 800c242:	4603      	mov	r3, r0
 800c244:	3a30      	subs	r2, #48	@ 0x30
 800c246:	f100 0101 	add.w	r1, r0, #1
 800c24a:	d023      	beq.n	800c294 <_strtod_l+0x254>
 800c24c:	440f      	add	r7, r1
 800c24e:	eb00 0c03 	add.w	ip, r0, r3
 800c252:	4619      	mov	r1, r3
 800c254:	240a      	movs	r4, #10
 800c256:	4561      	cmp	r1, ip
 800c258:	d10b      	bne.n	800c272 <_strtod_l+0x232>
 800c25a:	1c5c      	adds	r4, r3, #1
 800c25c:	4403      	add	r3, r0
 800c25e:	2b08      	cmp	r3, #8
 800c260:	4404      	add	r4, r0
 800c262:	dc11      	bgt.n	800c288 <_strtod_l+0x248>
 800c264:	230a      	movs	r3, #10
 800c266:	fb03 2909 	mla	r9, r3, r9, r2
 800c26a:	2100      	movs	r1, #0
 800c26c:	e013      	b.n	800c296 <_strtod_l+0x256>
 800c26e:	4628      	mov	r0, r5
 800c270:	e7dc      	b.n	800c22c <_strtod_l+0x1ec>
 800c272:	2908      	cmp	r1, #8
 800c274:	f101 0101 	add.w	r1, r1, #1
 800c278:	dc02      	bgt.n	800c280 <_strtod_l+0x240>
 800c27a:	fb04 f909 	mul.w	r9, r4, r9
 800c27e:	e7ea      	b.n	800c256 <_strtod_l+0x216>
 800c280:	2910      	cmp	r1, #16
 800c282:	bfd8      	it	le
 800c284:	4366      	mulle	r6, r4
 800c286:	e7e6      	b.n	800c256 <_strtod_l+0x216>
 800c288:	2b0f      	cmp	r3, #15
 800c28a:	dcee      	bgt.n	800c26a <_strtod_l+0x22a>
 800c28c:	230a      	movs	r3, #10
 800c28e:	fb03 2606 	mla	r6, r3, r6, r2
 800c292:	e7ea      	b.n	800c26a <_strtod_l+0x22a>
 800c294:	461c      	mov	r4, r3
 800c296:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c298:	1c5a      	adds	r2, r3, #1
 800c29a:	9211      	str	r2, [sp, #68]	@ 0x44
 800c29c:	785a      	ldrb	r2, [r3, #1]
 800c29e:	4608      	mov	r0, r1
 800c2a0:	4623      	mov	r3, r4
 800c2a2:	e7b7      	b.n	800c214 <_strtod_l+0x1d4>
 800c2a4:	2301      	movs	r3, #1
 800c2a6:	2700      	movs	r7, #0
 800c2a8:	9306      	str	r3, [sp, #24]
 800c2aa:	e786      	b.n	800c1ba <_strtod_l+0x17a>
 800c2ac:	f04f 0e00 	mov.w	lr, #0
 800c2b0:	f108 0202 	add.w	r2, r8, #2
 800c2b4:	9211      	str	r2, [sp, #68]	@ 0x44
 800c2b6:	f898 2002 	ldrb.w	r2, [r8, #2]
 800c2ba:	e78f      	b.n	800c1dc <_strtod_l+0x19c>
 800c2bc:	f04f 0e01 	mov.w	lr, #1
 800c2c0:	e7f6      	b.n	800c2b0 <_strtod_l+0x270>
 800c2c2:	bf00      	nop
 800c2c4:	0800def8 	.word	0x0800def8
 800c2c8:	0800dee0 	.word	0x0800dee0
 800c2cc:	7ff00000 	.word	0x7ff00000
 800c2d0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c2d2:	1c54      	adds	r4, r2, #1
 800c2d4:	9411      	str	r4, [sp, #68]	@ 0x44
 800c2d6:	7852      	ldrb	r2, [r2, #1]
 800c2d8:	2a30      	cmp	r2, #48	@ 0x30
 800c2da:	d0f9      	beq.n	800c2d0 <_strtod_l+0x290>
 800c2dc:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800c2e0:	2c08      	cmp	r4, #8
 800c2e2:	d881      	bhi.n	800c1e8 <_strtod_l+0x1a8>
 800c2e4:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800c2e8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c2ea:	9209      	str	r2, [sp, #36]	@ 0x24
 800c2ec:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c2ee:	1c51      	adds	r1, r2, #1
 800c2f0:	9111      	str	r1, [sp, #68]	@ 0x44
 800c2f2:	7852      	ldrb	r2, [r2, #1]
 800c2f4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800c2f8:	2c09      	cmp	r4, #9
 800c2fa:	d938      	bls.n	800c36e <_strtod_l+0x32e>
 800c2fc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800c2fe:	1b0c      	subs	r4, r1, r4
 800c300:	2c08      	cmp	r4, #8
 800c302:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800c306:	dc02      	bgt.n	800c30e <_strtod_l+0x2ce>
 800c308:	4564      	cmp	r4, ip
 800c30a:	bfa8      	it	ge
 800c30c:	4664      	movge	r4, ip
 800c30e:	f1be 0f00 	cmp.w	lr, #0
 800c312:	d000      	beq.n	800c316 <_strtod_l+0x2d6>
 800c314:	4264      	negs	r4, r4
 800c316:	2b00      	cmp	r3, #0
 800c318:	d14e      	bne.n	800c3b8 <_strtod_l+0x378>
 800c31a:	9b07      	ldr	r3, [sp, #28]
 800c31c:	4318      	orrs	r0, r3
 800c31e:	f47f aeca 	bne.w	800c0b6 <_strtod_l+0x76>
 800c322:	9b06      	ldr	r3, [sp, #24]
 800c324:	2b00      	cmp	r3, #0
 800c326:	f47f aee2 	bne.w	800c0ee <_strtod_l+0xae>
 800c32a:	2a69      	cmp	r2, #105	@ 0x69
 800c32c:	d027      	beq.n	800c37e <_strtod_l+0x33e>
 800c32e:	dc24      	bgt.n	800c37a <_strtod_l+0x33a>
 800c330:	2a49      	cmp	r2, #73	@ 0x49
 800c332:	d024      	beq.n	800c37e <_strtod_l+0x33e>
 800c334:	2a4e      	cmp	r2, #78	@ 0x4e
 800c336:	f47f aeda 	bne.w	800c0ee <_strtod_l+0xae>
 800c33a:	4997      	ldr	r1, [pc, #604]	@ (800c598 <_strtod_l+0x558>)
 800c33c:	a811      	add	r0, sp, #68	@ 0x44
 800c33e:	f001 fb35 	bl	800d9ac <__match>
 800c342:	2800      	cmp	r0, #0
 800c344:	f43f aed3 	beq.w	800c0ee <_strtod_l+0xae>
 800c348:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c34a:	781b      	ldrb	r3, [r3, #0]
 800c34c:	2b28      	cmp	r3, #40	@ 0x28
 800c34e:	d12d      	bne.n	800c3ac <_strtod_l+0x36c>
 800c350:	4992      	ldr	r1, [pc, #584]	@ (800c59c <_strtod_l+0x55c>)
 800c352:	aa14      	add	r2, sp, #80	@ 0x50
 800c354:	a811      	add	r0, sp, #68	@ 0x44
 800c356:	f001 fb3d 	bl	800d9d4 <__hexnan>
 800c35a:	2805      	cmp	r0, #5
 800c35c:	d126      	bne.n	800c3ac <_strtod_l+0x36c>
 800c35e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c360:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800c364:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c368:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c36c:	e6a3      	b.n	800c0b6 <_strtod_l+0x76>
 800c36e:	240a      	movs	r4, #10
 800c370:	fb04 2c0c 	mla	ip, r4, ip, r2
 800c374:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800c378:	e7b8      	b.n	800c2ec <_strtod_l+0x2ac>
 800c37a:	2a6e      	cmp	r2, #110	@ 0x6e
 800c37c:	e7db      	b.n	800c336 <_strtod_l+0x2f6>
 800c37e:	4988      	ldr	r1, [pc, #544]	@ (800c5a0 <_strtod_l+0x560>)
 800c380:	a811      	add	r0, sp, #68	@ 0x44
 800c382:	f001 fb13 	bl	800d9ac <__match>
 800c386:	2800      	cmp	r0, #0
 800c388:	f43f aeb1 	beq.w	800c0ee <_strtod_l+0xae>
 800c38c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c38e:	4985      	ldr	r1, [pc, #532]	@ (800c5a4 <_strtod_l+0x564>)
 800c390:	3b01      	subs	r3, #1
 800c392:	a811      	add	r0, sp, #68	@ 0x44
 800c394:	9311      	str	r3, [sp, #68]	@ 0x44
 800c396:	f001 fb09 	bl	800d9ac <__match>
 800c39a:	b910      	cbnz	r0, 800c3a2 <_strtod_l+0x362>
 800c39c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c39e:	3301      	adds	r3, #1
 800c3a0:	9311      	str	r3, [sp, #68]	@ 0x44
 800c3a2:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800c5b8 <_strtod_l+0x578>
 800c3a6:	f04f 0a00 	mov.w	sl, #0
 800c3aa:	e684      	b.n	800c0b6 <_strtod_l+0x76>
 800c3ac:	487e      	ldr	r0, [pc, #504]	@ (800c5a8 <_strtod_l+0x568>)
 800c3ae:	f001 f857 	bl	800d460 <nan>
 800c3b2:	ec5b ab10 	vmov	sl, fp, d0
 800c3b6:	e67e      	b.n	800c0b6 <_strtod_l+0x76>
 800c3b8:	ee07 9a90 	vmov	s15, r9
 800c3bc:	1be2      	subs	r2, r4, r7
 800c3be:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c3c2:	2d00      	cmp	r5, #0
 800c3c4:	bf08      	it	eq
 800c3c6:	461d      	moveq	r5, r3
 800c3c8:	2b10      	cmp	r3, #16
 800c3ca:	9209      	str	r2, [sp, #36]	@ 0x24
 800c3cc:	461a      	mov	r2, r3
 800c3ce:	bfa8      	it	ge
 800c3d0:	2210      	movge	r2, #16
 800c3d2:	2b09      	cmp	r3, #9
 800c3d4:	ec5b ab17 	vmov	sl, fp, d7
 800c3d8:	dc15      	bgt.n	800c406 <_strtod_l+0x3c6>
 800c3da:	1be1      	subs	r1, r4, r7
 800c3dc:	2900      	cmp	r1, #0
 800c3de:	f43f ae6a 	beq.w	800c0b6 <_strtod_l+0x76>
 800c3e2:	eba4 0107 	sub.w	r1, r4, r7
 800c3e6:	dd72      	ble.n	800c4ce <_strtod_l+0x48e>
 800c3e8:	2916      	cmp	r1, #22
 800c3ea:	dc59      	bgt.n	800c4a0 <_strtod_l+0x460>
 800c3ec:	4b6f      	ldr	r3, [pc, #444]	@ (800c5ac <_strtod_l+0x56c>)
 800c3ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c3f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c3f4:	ed93 7b00 	vldr	d7, [r3]
 800c3f8:	ec4b ab16 	vmov	d6, sl, fp
 800c3fc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c400:	ec5b ab17 	vmov	sl, fp, d7
 800c404:	e657      	b.n	800c0b6 <_strtod_l+0x76>
 800c406:	4969      	ldr	r1, [pc, #420]	@ (800c5ac <_strtod_l+0x56c>)
 800c408:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800c40c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800c410:	ee06 6a90 	vmov	s13, r6
 800c414:	2b0f      	cmp	r3, #15
 800c416:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800c41a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c41e:	ec5b ab16 	vmov	sl, fp, d6
 800c422:	ddda      	ble.n	800c3da <_strtod_l+0x39a>
 800c424:	1a9a      	subs	r2, r3, r2
 800c426:	1be1      	subs	r1, r4, r7
 800c428:	440a      	add	r2, r1
 800c42a:	2a00      	cmp	r2, #0
 800c42c:	f340 8094 	ble.w	800c558 <_strtod_l+0x518>
 800c430:	f012 000f 	ands.w	r0, r2, #15
 800c434:	d00a      	beq.n	800c44c <_strtod_l+0x40c>
 800c436:	495d      	ldr	r1, [pc, #372]	@ (800c5ac <_strtod_l+0x56c>)
 800c438:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c43c:	ed91 7b00 	vldr	d7, [r1]
 800c440:	ec4b ab16 	vmov	d6, sl, fp
 800c444:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c448:	ec5b ab17 	vmov	sl, fp, d7
 800c44c:	f032 020f 	bics.w	r2, r2, #15
 800c450:	d073      	beq.n	800c53a <_strtod_l+0x4fa>
 800c452:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800c456:	dd47      	ble.n	800c4e8 <_strtod_l+0x4a8>
 800c458:	2400      	movs	r4, #0
 800c45a:	4625      	mov	r5, r4
 800c45c:	9407      	str	r4, [sp, #28]
 800c45e:	4626      	mov	r6, r4
 800c460:	9a05      	ldr	r2, [sp, #20]
 800c462:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800c5b8 <_strtod_l+0x578>
 800c466:	2322      	movs	r3, #34	@ 0x22
 800c468:	6013      	str	r3, [r2, #0]
 800c46a:	f04f 0a00 	mov.w	sl, #0
 800c46e:	9b07      	ldr	r3, [sp, #28]
 800c470:	2b00      	cmp	r3, #0
 800c472:	f43f ae20 	beq.w	800c0b6 <_strtod_l+0x76>
 800c476:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c478:	9805      	ldr	r0, [sp, #20]
 800c47a:	f7ff f955 	bl	800b728 <_Bfree>
 800c47e:	9805      	ldr	r0, [sp, #20]
 800c480:	4631      	mov	r1, r6
 800c482:	f7ff f951 	bl	800b728 <_Bfree>
 800c486:	9805      	ldr	r0, [sp, #20]
 800c488:	4629      	mov	r1, r5
 800c48a:	f7ff f94d 	bl	800b728 <_Bfree>
 800c48e:	9907      	ldr	r1, [sp, #28]
 800c490:	9805      	ldr	r0, [sp, #20]
 800c492:	f7ff f949 	bl	800b728 <_Bfree>
 800c496:	9805      	ldr	r0, [sp, #20]
 800c498:	4621      	mov	r1, r4
 800c49a:	f7ff f945 	bl	800b728 <_Bfree>
 800c49e:	e60a      	b.n	800c0b6 <_strtod_l+0x76>
 800c4a0:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800c4a4:	1be0      	subs	r0, r4, r7
 800c4a6:	4281      	cmp	r1, r0
 800c4a8:	dbbc      	blt.n	800c424 <_strtod_l+0x3e4>
 800c4aa:	4a40      	ldr	r2, [pc, #256]	@ (800c5ac <_strtod_l+0x56c>)
 800c4ac:	f1c3 030f 	rsb	r3, r3, #15
 800c4b0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800c4b4:	ed91 7b00 	vldr	d7, [r1]
 800c4b8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c4ba:	ec4b ab16 	vmov	d6, sl, fp
 800c4be:	1acb      	subs	r3, r1, r3
 800c4c0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c4c4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c4c8:	ed92 6b00 	vldr	d6, [r2]
 800c4cc:	e796      	b.n	800c3fc <_strtod_l+0x3bc>
 800c4ce:	3116      	adds	r1, #22
 800c4d0:	dba8      	blt.n	800c424 <_strtod_l+0x3e4>
 800c4d2:	4b36      	ldr	r3, [pc, #216]	@ (800c5ac <_strtod_l+0x56c>)
 800c4d4:	1b3c      	subs	r4, r7, r4
 800c4d6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800c4da:	ed94 7b00 	vldr	d7, [r4]
 800c4de:	ec4b ab16 	vmov	d6, sl, fp
 800c4e2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c4e6:	e78b      	b.n	800c400 <_strtod_l+0x3c0>
 800c4e8:	2000      	movs	r0, #0
 800c4ea:	ec4b ab17 	vmov	d7, sl, fp
 800c4ee:	4e30      	ldr	r6, [pc, #192]	@ (800c5b0 <_strtod_l+0x570>)
 800c4f0:	1112      	asrs	r2, r2, #4
 800c4f2:	4601      	mov	r1, r0
 800c4f4:	2a01      	cmp	r2, #1
 800c4f6:	dc23      	bgt.n	800c540 <_strtod_l+0x500>
 800c4f8:	b108      	cbz	r0, 800c4fe <_strtod_l+0x4be>
 800c4fa:	ec5b ab17 	vmov	sl, fp, d7
 800c4fe:	4a2c      	ldr	r2, [pc, #176]	@ (800c5b0 <_strtod_l+0x570>)
 800c500:	482c      	ldr	r0, [pc, #176]	@ (800c5b4 <_strtod_l+0x574>)
 800c502:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800c506:	ed92 7b00 	vldr	d7, [r2]
 800c50a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c50e:	ec4b ab16 	vmov	d6, sl, fp
 800c512:	4a29      	ldr	r2, [pc, #164]	@ (800c5b8 <_strtod_l+0x578>)
 800c514:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c518:	ee17 1a90 	vmov	r1, s15
 800c51c:	400a      	ands	r2, r1
 800c51e:	4282      	cmp	r2, r0
 800c520:	ec5b ab17 	vmov	sl, fp, d7
 800c524:	d898      	bhi.n	800c458 <_strtod_l+0x418>
 800c526:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800c52a:	4282      	cmp	r2, r0
 800c52c:	bf86      	itte	hi
 800c52e:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800c5bc <_strtod_l+0x57c>
 800c532:	f04f 3aff 	movhi.w	sl, #4294967295
 800c536:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800c53a:	2200      	movs	r2, #0
 800c53c:	9206      	str	r2, [sp, #24]
 800c53e:	e076      	b.n	800c62e <_strtod_l+0x5ee>
 800c540:	f012 0f01 	tst.w	r2, #1
 800c544:	d004      	beq.n	800c550 <_strtod_l+0x510>
 800c546:	ed96 6b00 	vldr	d6, [r6]
 800c54a:	2001      	movs	r0, #1
 800c54c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c550:	3101      	adds	r1, #1
 800c552:	1052      	asrs	r2, r2, #1
 800c554:	3608      	adds	r6, #8
 800c556:	e7cd      	b.n	800c4f4 <_strtod_l+0x4b4>
 800c558:	d0ef      	beq.n	800c53a <_strtod_l+0x4fa>
 800c55a:	4252      	negs	r2, r2
 800c55c:	f012 000f 	ands.w	r0, r2, #15
 800c560:	d00a      	beq.n	800c578 <_strtod_l+0x538>
 800c562:	4912      	ldr	r1, [pc, #72]	@ (800c5ac <_strtod_l+0x56c>)
 800c564:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c568:	ed91 7b00 	vldr	d7, [r1]
 800c56c:	ec4b ab16 	vmov	d6, sl, fp
 800c570:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c574:	ec5b ab17 	vmov	sl, fp, d7
 800c578:	1112      	asrs	r2, r2, #4
 800c57a:	d0de      	beq.n	800c53a <_strtod_l+0x4fa>
 800c57c:	2a1f      	cmp	r2, #31
 800c57e:	dd1f      	ble.n	800c5c0 <_strtod_l+0x580>
 800c580:	2400      	movs	r4, #0
 800c582:	4625      	mov	r5, r4
 800c584:	9407      	str	r4, [sp, #28]
 800c586:	4626      	mov	r6, r4
 800c588:	9a05      	ldr	r2, [sp, #20]
 800c58a:	2322      	movs	r3, #34	@ 0x22
 800c58c:	f04f 0a00 	mov.w	sl, #0
 800c590:	f04f 0b00 	mov.w	fp, #0
 800c594:	6013      	str	r3, [r2, #0]
 800c596:	e76a      	b.n	800c46e <_strtod_l+0x42e>
 800c598:	0800dcd1 	.word	0x0800dcd1
 800c59c:	0800dee4 	.word	0x0800dee4
 800c5a0:	0800dcc9 	.word	0x0800dcc9
 800c5a4:	0800dd00 	.word	0x0800dd00
 800c5a8:	0800dcc3 	.word	0x0800dcc3
 800c5ac:	0800de18 	.word	0x0800de18
 800c5b0:	0800ddf0 	.word	0x0800ddf0
 800c5b4:	7ca00000 	.word	0x7ca00000
 800c5b8:	7ff00000 	.word	0x7ff00000
 800c5bc:	7fefffff 	.word	0x7fefffff
 800c5c0:	f012 0110 	ands.w	r1, r2, #16
 800c5c4:	bf18      	it	ne
 800c5c6:	216a      	movne	r1, #106	@ 0x6a
 800c5c8:	9106      	str	r1, [sp, #24]
 800c5ca:	ec4b ab17 	vmov	d7, sl, fp
 800c5ce:	49b0      	ldr	r1, [pc, #704]	@ (800c890 <_strtod_l+0x850>)
 800c5d0:	2000      	movs	r0, #0
 800c5d2:	07d6      	lsls	r6, r2, #31
 800c5d4:	d504      	bpl.n	800c5e0 <_strtod_l+0x5a0>
 800c5d6:	ed91 6b00 	vldr	d6, [r1]
 800c5da:	2001      	movs	r0, #1
 800c5dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c5e0:	1052      	asrs	r2, r2, #1
 800c5e2:	f101 0108 	add.w	r1, r1, #8
 800c5e6:	d1f4      	bne.n	800c5d2 <_strtod_l+0x592>
 800c5e8:	b108      	cbz	r0, 800c5ee <_strtod_l+0x5ae>
 800c5ea:	ec5b ab17 	vmov	sl, fp, d7
 800c5ee:	9a06      	ldr	r2, [sp, #24]
 800c5f0:	b1b2      	cbz	r2, 800c620 <_strtod_l+0x5e0>
 800c5f2:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800c5f6:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800c5fa:	2a00      	cmp	r2, #0
 800c5fc:	4658      	mov	r0, fp
 800c5fe:	dd0f      	ble.n	800c620 <_strtod_l+0x5e0>
 800c600:	2a1f      	cmp	r2, #31
 800c602:	dd55      	ble.n	800c6b0 <_strtod_l+0x670>
 800c604:	2a34      	cmp	r2, #52	@ 0x34
 800c606:	bfde      	ittt	le
 800c608:	f04f 32ff 	movle.w	r2, #4294967295
 800c60c:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800c610:	408a      	lslle	r2, r1
 800c612:	f04f 0a00 	mov.w	sl, #0
 800c616:	bfcc      	ite	gt
 800c618:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c61c:	ea02 0b00 	andle.w	fp, r2, r0
 800c620:	ec4b ab17 	vmov	d7, sl, fp
 800c624:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c62c:	d0a8      	beq.n	800c580 <_strtod_l+0x540>
 800c62e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c630:	9805      	ldr	r0, [sp, #20]
 800c632:	f8cd 9000 	str.w	r9, [sp]
 800c636:	462a      	mov	r2, r5
 800c638:	f7ff f8de 	bl	800b7f8 <__s2b>
 800c63c:	9007      	str	r0, [sp, #28]
 800c63e:	2800      	cmp	r0, #0
 800c640:	f43f af0a 	beq.w	800c458 <_strtod_l+0x418>
 800c644:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c646:	1b3f      	subs	r7, r7, r4
 800c648:	2b00      	cmp	r3, #0
 800c64a:	bfb4      	ite	lt
 800c64c:	463b      	movlt	r3, r7
 800c64e:	2300      	movge	r3, #0
 800c650:	930a      	str	r3, [sp, #40]	@ 0x28
 800c652:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c654:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800c880 <_strtod_l+0x840>
 800c658:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c65c:	2400      	movs	r4, #0
 800c65e:	930d      	str	r3, [sp, #52]	@ 0x34
 800c660:	4625      	mov	r5, r4
 800c662:	9b07      	ldr	r3, [sp, #28]
 800c664:	9805      	ldr	r0, [sp, #20]
 800c666:	6859      	ldr	r1, [r3, #4]
 800c668:	f7ff f81e 	bl	800b6a8 <_Balloc>
 800c66c:	4606      	mov	r6, r0
 800c66e:	2800      	cmp	r0, #0
 800c670:	f43f aef6 	beq.w	800c460 <_strtod_l+0x420>
 800c674:	9b07      	ldr	r3, [sp, #28]
 800c676:	691a      	ldr	r2, [r3, #16]
 800c678:	ec4b ab19 	vmov	d9, sl, fp
 800c67c:	3202      	adds	r2, #2
 800c67e:	f103 010c 	add.w	r1, r3, #12
 800c682:	0092      	lsls	r2, r2, #2
 800c684:	300c      	adds	r0, #12
 800c686:	f7fe f9d0 	bl	800aa2a <memcpy>
 800c68a:	eeb0 0b49 	vmov.f64	d0, d9
 800c68e:	9805      	ldr	r0, [sp, #20]
 800c690:	aa14      	add	r2, sp, #80	@ 0x50
 800c692:	a913      	add	r1, sp, #76	@ 0x4c
 800c694:	f7ff fbec 	bl	800be70 <__d2b>
 800c698:	9012      	str	r0, [sp, #72]	@ 0x48
 800c69a:	2800      	cmp	r0, #0
 800c69c:	f43f aee0 	beq.w	800c460 <_strtod_l+0x420>
 800c6a0:	9805      	ldr	r0, [sp, #20]
 800c6a2:	2101      	movs	r1, #1
 800c6a4:	f7ff f93e 	bl	800b924 <__i2b>
 800c6a8:	4605      	mov	r5, r0
 800c6aa:	b940      	cbnz	r0, 800c6be <_strtod_l+0x67e>
 800c6ac:	2500      	movs	r5, #0
 800c6ae:	e6d7      	b.n	800c460 <_strtod_l+0x420>
 800c6b0:	f04f 31ff 	mov.w	r1, #4294967295
 800c6b4:	fa01 f202 	lsl.w	r2, r1, r2
 800c6b8:	ea02 0a0a 	and.w	sl, r2, sl
 800c6bc:	e7b0      	b.n	800c620 <_strtod_l+0x5e0>
 800c6be:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800c6c0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c6c2:	2f00      	cmp	r7, #0
 800c6c4:	bfab      	itete	ge
 800c6c6:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800c6c8:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800c6ca:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800c6ce:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800c6d2:	bfac      	ite	ge
 800c6d4:	eb07 0903 	addge.w	r9, r7, r3
 800c6d8:	eba3 0807 	sublt.w	r8, r3, r7
 800c6dc:	9b06      	ldr	r3, [sp, #24]
 800c6de:	1aff      	subs	r7, r7, r3
 800c6e0:	4417      	add	r7, r2
 800c6e2:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800c6e6:	4a6b      	ldr	r2, [pc, #428]	@ (800c894 <_strtod_l+0x854>)
 800c6e8:	3f01      	subs	r7, #1
 800c6ea:	4297      	cmp	r7, r2
 800c6ec:	da51      	bge.n	800c792 <_strtod_l+0x752>
 800c6ee:	1bd1      	subs	r1, r2, r7
 800c6f0:	291f      	cmp	r1, #31
 800c6f2:	eba3 0301 	sub.w	r3, r3, r1
 800c6f6:	f04f 0201 	mov.w	r2, #1
 800c6fa:	dc3e      	bgt.n	800c77a <_strtod_l+0x73a>
 800c6fc:	408a      	lsls	r2, r1
 800c6fe:	920c      	str	r2, [sp, #48]	@ 0x30
 800c700:	2200      	movs	r2, #0
 800c702:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c704:	eb09 0703 	add.w	r7, r9, r3
 800c708:	4498      	add	r8, r3
 800c70a:	9b06      	ldr	r3, [sp, #24]
 800c70c:	45b9      	cmp	r9, r7
 800c70e:	4498      	add	r8, r3
 800c710:	464b      	mov	r3, r9
 800c712:	bfa8      	it	ge
 800c714:	463b      	movge	r3, r7
 800c716:	4543      	cmp	r3, r8
 800c718:	bfa8      	it	ge
 800c71a:	4643      	movge	r3, r8
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	bfc2      	ittt	gt
 800c720:	1aff      	subgt	r7, r7, r3
 800c722:	eba8 0803 	subgt.w	r8, r8, r3
 800c726:	eba9 0903 	subgt.w	r9, r9, r3
 800c72a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	dd16      	ble.n	800c75e <_strtod_l+0x71e>
 800c730:	4629      	mov	r1, r5
 800c732:	9805      	ldr	r0, [sp, #20]
 800c734:	461a      	mov	r2, r3
 800c736:	f7ff f9b5 	bl	800baa4 <__pow5mult>
 800c73a:	4605      	mov	r5, r0
 800c73c:	2800      	cmp	r0, #0
 800c73e:	d0b5      	beq.n	800c6ac <_strtod_l+0x66c>
 800c740:	4601      	mov	r1, r0
 800c742:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c744:	9805      	ldr	r0, [sp, #20]
 800c746:	f7ff f903 	bl	800b950 <__multiply>
 800c74a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800c74c:	2800      	cmp	r0, #0
 800c74e:	f43f ae87 	beq.w	800c460 <_strtod_l+0x420>
 800c752:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c754:	9805      	ldr	r0, [sp, #20]
 800c756:	f7fe ffe7 	bl	800b728 <_Bfree>
 800c75a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c75c:	9312      	str	r3, [sp, #72]	@ 0x48
 800c75e:	2f00      	cmp	r7, #0
 800c760:	dc1b      	bgt.n	800c79a <_strtod_l+0x75a>
 800c762:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c764:	2b00      	cmp	r3, #0
 800c766:	dd21      	ble.n	800c7ac <_strtod_l+0x76c>
 800c768:	4631      	mov	r1, r6
 800c76a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c76c:	9805      	ldr	r0, [sp, #20]
 800c76e:	f7ff f999 	bl	800baa4 <__pow5mult>
 800c772:	4606      	mov	r6, r0
 800c774:	b9d0      	cbnz	r0, 800c7ac <_strtod_l+0x76c>
 800c776:	2600      	movs	r6, #0
 800c778:	e672      	b.n	800c460 <_strtod_l+0x420>
 800c77a:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800c77e:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800c782:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800c786:	37e2      	adds	r7, #226	@ 0xe2
 800c788:	fa02 f107 	lsl.w	r1, r2, r7
 800c78c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c78e:	920c      	str	r2, [sp, #48]	@ 0x30
 800c790:	e7b8      	b.n	800c704 <_strtod_l+0x6c4>
 800c792:	2200      	movs	r2, #0
 800c794:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c796:	2201      	movs	r2, #1
 800c798:	e7f9      	b.n	800c78e <_strtod_l+0x74e>
 800c79a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c79c:	9805      	ldr	r0, [sp, #20]
 800c79e:	463a      	mov	r2, r7
 800c7a0:	f7ff f9da 	bl	800bb58 <__lshift>
 800c7a4:	9012      	str	r0, [sp, #72]	@ 0x48
 800c7a6:	2800      	cmp	r0, #0
 800c7a8:	d1db      	bne.n	800c762 <_strtod_l+0x722>
 800c7aa:	e659      	b.n	800c460 <_strtod_l+0x420>
 800c7ac:	f1b8 0f00 	cmp.w	r8, #0
 800c7b0:	dd07      	ble.n	800c7c2 <_strtod_l+0x782>
 800c7b2:	4631      	mov	r1, r6
 800c7b4:	9805      	ldr	r0, [sp, #20]
 800c7b6:	4642      	mov	r2, r8
 800c7b8:	f7ff f9ce 	bl	800bb58 <__lshift>
 800c7bc:	4606      	mov	r6, r0
 800c7be:	2800      	cmp	r0, #0
 800c7c0:	d0d9      	beq.n	800c776 <_strtod_l+0x736>
 800c7c2:	f1b9 0f00 	cmp.w	r9, #0
 800c7c6:	dd08      	ble.n	800c7da <_strtod_l+0x79a>
 800c7c8:	4629      	mov	r1, r5
 800c7ca:	9805      	ldr	r0, [sp, #20]
 800c7cc:	464a      	mov	r2, r9
 800c7ce:	f7ff f9c3 	bl	800bb58 <__lshift>
 800c7d2:	4605      	mov	r5, r0
 800c7d4:	2800      	cmp	r0, #0
 800c7d6:	f43f ae43 	beq.w	800c460 <_strtod_l+0x420>
 800c7da:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c7dc:	9805      	ldr	r0, [sp, #20]
 800c7de:	4632      	mov	r2, r6
 800c7e0:	f7ff fa42 	bl	800bc68 <__mdiff>
 800c7e4:	4604      	mov	r4, r0
 800c7e6:	2800      	cmp	r0, #0
 800c7e8:	f43f ae3a 	beq.w	800c460 <_strtod_l+0x420>
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800c7f2:	60c3      	str	r3, [r0, #12]
 800c7f4:	4629      	mov	r1, r5
 800c7f6:	f7ff fa1b 	bl	800bc30 <__mcmp>
 800c7fa:	2800      	cmp	r0, #0
 800c7fc:	da4e      	bge.n	800c89c <_strtod_l+0x85c>
 800c7fe:	ea58 080a 	orrs.w	r8, r8, sl
 800c802:	d174      	bne.n	800c8ee <_strtod_l+0x8ae>
 800c804:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d170      	bne.n	800c8ee <_strtod_l+0x8ae>
 800c80c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c810:	0d1b      	lsrs	r3, r3, #20
 800c812:	051b      	lsls	r3, r3, #20
 800c814:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c818:	d969      	bls.n	800c8ee <_strtod_l+0x8ae>
 800c81a:	6963      	ldr	r3, [r4, #20]
 800c81c:	b913      	cbnz	r3, 800c824 <_strtod_l+0x7e4>
 800c81e:	6923      	ldr	r3, [r4, #16]
 800c820:	2b01      	cmp	r3, #1
 800c822:	dd64      	ble.n	800c8ee <_strtod_l+0x8ae>
 800c824:	4621      	mov	r1, r4
 800c826:	2201      	movs	r2, #1
 800c828:	9805      	ldr	r0, [sp, #20]
 800c82a:	f7ff f995 	bl	800bb58 <__lshift>
 800c82e:	4629      	mov	r1, r5
 800c830:	4604      	mov	r4, r0
 800c832:	f7ff f9fd 	bl	800bc30 <__mcmp>
 800c836:	2800      	cmp	r0, #0
 800c838:	dd59      	ble.n	800c8ee <_strtod_l+0x8ae>
 800c83a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c83e:	9a06      	ldr	r2, [sp, #24]
 800c840:	0d1b      	lsrs	r3, r3, #20
 800c842:	051b      	lsls	r3, r3, #20
 800c844:	2a00      	cmp	r2, #0
 800c846:	d070      	beq.n	800c92a <_strtod_l+0x8ea>
 800c848:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c84c:	d86d      	bhi.n	800c92a <_strtod_l+0x8ea>
 800c84e:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c852:	f67f ae99 	bls.w	800c588 <_strtod_l+0x548>
 800c856:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800c888 <_strtod_l+0x848>
 800c85a:	ec4b ab16 	vmov	d6, sl, fp
 800c85e:	4b0e      	ldr	r3, [pc, #56]	@ (800c898 <_strtod_l+0x858>)
 800c860:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c864:	ee17 2a90 	vmov	r2, s15
 800c868:	4013      	ands	r3, r2
 800c86a:	ec5b ab17 	vmov	sl, fp, d7
 800c86e:	2b00      	cmp	r3, #0
 800c870:	f47f ae01 	bne.w	800c476 <_strtod_l+0x436>
 800c874:	9a05      	ldr	r2, [sp, #20]
 800c876:	2322      	movs	r3, #34	@ 0x22
 800c878:	6013      	str	r3, [r2, #0]
 800c87a:	e5fc      	b.n	800c476 <_strtod_l+0x436>
 800c87c:	f3af 8000 	nop.w
 800c880:	ffc00000 	.word	0xffc00000
 800c884:	41dfffff 	.word	0x41dfffff
 800c888:	00000000 	.word	0x00000000
 800c88c:	39500000 	.word	0x39500000
 800c890:	0800df10 	.word	0x0800df10
 800c894:	fffffc02 	.word	0xfffffc02
 800c898:	7ff00000 	.word	0x7ff00000
 800c89c:	46d9      	mov	r9, fp
 800c89e:	d15d      	bne.n	800c95c <_strtod_l+0x91c>
 800c8a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c8a4:	f1b8 0f00 	cmp.w	r8, #0
 800c8a8:	d02a      	beq.n	800c900 <_strtod_l+0x8c0>
 800c8aa:	4aab      	ldr	r2, [pc, #684]	@ (800cb58 <_strtod_l+0xb18>)
 800c8ac:	4293      	cmp	r3, r2
 800c8ae:	d12a      	bne.n	800c906 <_strtod_l+0x8c6>
 800c8b0:	9b06      	ldr	r3, [sp, #24]
 800c8b2:	4652      	mov	r2, sl
 800c8b4:	b1fb      	cbz	r3, 800c8f6 <_strtod_l+0x8b6>
 800c8b6:	4ba9      	ldr	r3, [pc, #676]	@ (800cb5c <_strtod_l+0xb1c>)
 800c8b8:	ea0b 0303 	and.w	r3, fp, r3
 800c8bc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c8c0:	f04f 31ff 	mov.w	r1, #4294967295
 800c8c4:	d81a      	bhi.n	800c8fc <_strtod_l+0x8bc>
 800c8c6:	0d1b      	lsrs	r3, r3, #20
 800c8c8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c8cc:	fa01 f303 	lsl.w	r3, r1, r3
 800c8d0:	429a      	cmp	r2, r3
 800c8d2:	d118      	bne.n	800c906 <_strtod_l+0x8c6>
 800c8d4:	4ba2      	ldr	r3, [pc, #648]	@ (800cb60 <_strtod_l+0xb20>)
 800c8d6:	4599      	cmp	r9, r3
 800c8d8:	d102      	bne.n	800c8e0 <_strtod_l+0x8a0>
 800c8da:	3201      	adds	r2, #1
 800c8dc:	f43f adc0 	beq.w	800c460 <_strtod_l+0x420>
 800c8e0:	4b9e      	ldr	r3, [pc, #632]	@ (800cb5c <_strtod_l+0xb1c>)
 800c8e2:	ea09 0303 	and.w	r3, r9, r3
 800c8e6:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800c8ea:	f04f 0a00 	mov.w	sl, #0
 800c8ee:	9b06      	ldr	r3, [sp, #24]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d1b0      	bne.n	800c856 <_strtod_l+0x816>
 800c8f4:	e5bf      	b.n	800c476 <_strtod_l+0x436>
 800c8f6:	f04f 33ff 	mov.w	r3, #4294967295
 800c8fa:	e7e9      	b.n	800c8d0 <_strtod_l+0x890>
 800c8fc:	460b      	mov	r3, r1
 800c8fe:	e7e7      	b.n	800c8d0 <_strtod_l+0x890>
 800c900:	ea53 030a 	orrs.w	r3, r3, sl
 800c904:	d099      	beq.n	800c83a <_strtod_l+0x7fa>
 800c906:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c908:	b1c3      	cbz	r3, 800c93c <_strtod_l+0x8fc>
 800c90a:	ea13 0f09 	tst.w	r3, r9
 800c90e:	d0ee      	beq.n	800c8ee <_strtod_l+0x8ae>
 800c910:	9a06      	ldr	r2, [sp, #24]
 800c912:	4650      	mov	r0, sl
 800c914:	4659      	mov	r1, fp
 800c916:	f1b8 0f00 	cmp.w	r8, #0
 800c91a:	d013      	beq.n	800c944 <_strtod_l+0x904>
 800c91c:	f7ff fb73 	bl	800c006 <sulp>
 800c920:	ee39 7b00 	vadd.f64	d7, d9, d0
 800c924:	ec5b ab17 	vmov	sl, fp, d7
 800c928:	e7e1      	b.n	800c8ee <_strtod_l+0x8ae>
 800c92a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c92e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c932:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c936:	f04f 3aff 	mov.w	sl, #4294967295
 800c93a:	e7d8      	b.n	800c8ee <_strtod_l+0x8ae>
 800c93c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c93e:	ea13 0f0a 	tst.w	r3, sl
 800c942:	e7e4      	b.n	800c90e <_strtod_l+0x8ce>
 800c944:	f7ff fb5f 	bl	800c006 <sulp>
 800c948:	ee39 0b40 	vsub.f64	d0, d9, d0
 800c94c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800c950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c954:	ec5b ab10 	vmov	sl, fp, d0
 800c958:	d1c9      	bne.n	800c8ee <_strtod_l+0x8ae>
 800c95a:	e615      	b.n	800c588 <_strtod_l+0x548>
 800c95c:	4629      	mov	r1, r5
 800c95e:	4620      	mov	r0, r4
 800c960:	f7ff fade 	bl	800bf20 <__ratio>
 800c964:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800c968:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800c96c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c970:	d85d      	bhi.n	800ca2e <_strtod_l+0x9ee>
 800c972:	f1b8 0f00 	cmp.w	r8, #0
 800c976:	d164      	bne.n	800ca42 <_strtod_l+0xa02>
 800c978:	f1ba 0f00 	cmp.w	sl, #0
 800c97c:	d14b      	bne.n	800ca16 <_strtod_l+0x9d6>
 800c97e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c982:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800c986:	2b00      	cmp	r3, #0
 800c988:	d160      	bne.n	800ca4c <_strtod_l+0xa0c>
 800c98a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800c98e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800c992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c996:	d401      	bmi.n	800c99c <_strtod_l+0x95c>
 800c998:	ee20 8b08 	vmul.f64	d8, d0, d8
 800c99c:	eeb1 ab48 	vneg.f64	d10, d8
 800c9a0:	486e      	ldr	r0, [pc, #440]	@ (800cb5c <_strtod_l+0xb1c>)
 800c9a2:	4970      	ldr	r1, [pc, #448]	@ (800cb64 <_strtod_l+0xb24>)
 800c9a4:	ea09 0700 	and.w	r7, r9, r0
 800c9a8:	428f      	cmp	r7, r1
 800c9aa:	ec53 2b1a 	vmov	r2, r3, d10
 800c9ae:	d17d      	bne.n	800caac <_strtod_l+0xa6c>
 800c9b0:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800c9b4:	ec4b ab1c 	vmov	d12, sl, fp
 800c9b8:	eeb0 0b4c 	vmov.f64	d0, d12
 800c9bc:	f7ff f9e8 	bl	800bd90 <__ulp>
 800c9c0:	4866      	ldr	r0, [pc, #408]	@ (800cb5c <_strtod_l+0xb1c>)
 800c9c2:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800c9c6:	ee1c 3a90 	vmov	r3, s25
 800c9ca:	4a67      	ldr	r2, [pc, #412]	@ (800cb68 <_strtod_l+0xb28>)
 800c9cc:	ea03 0100 	and.w	r1, r3, r0
 800c9d0:	4291      	cmp	r1, r2
 800c9d2:	ec5b ab1c 	vmov	sl, fp, d12
 800c9d6:	d93c      	bls.n	800ca52 <_strtod_l+0xa12>
 800c9d8:	ee19 2a90 	vmov	r2, s19
 800c9dc:	4b60      	ldr	r3, [pc, #384]	@ (800cb60 <_strtod_l+0xb20>)
 800c9de:	429a      	cmp	r2, r3
 800c9e0:	d104      	bne.n	800c9ec <_strtod_l+0x9ac>
 800c9e2:	ee19 3a10 	vmov	r3, s18
 800c9e6:	3301      	adds	r3, #1
 800c9e8:	f43f ad3a 	beq.w	800c460 <_strtod_l+0x420>
 800c9ec:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800cb60 <_strtod_l+0xb20>
 800c9f0:	f04f 3aff 	mov.w	sl, #4294967295
 800c9f4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c9f6:	9805      	ldr	r0, [sp, #20]
 800c9f8:	f7fe fe96 	bl	800b728 <_Bfree>
 800c9fc:	9805      	ldr	r0, [sp, #20]
 800c9fe:	4631      	mov	r1, r6
 800ca00:	f7fe fe92 	bl	800b728 <_Bfree>
 800ca04:	9805      	ldr	r0, [sp, #20]
 800ca06:	4629      	mov	r1, r5
 800ca08:	f7fe fe8e 	bl	800b728 <_Bfree>
 800ca0c:	9805      	ldr	r0, [sp, #20]
 800ca0e:	4621      	mov	r1, r4
 800ca10:	f7fe fe8a 	bl	800b728 <_Bfree>
 800ca14:	e625      	b.n	800c662 <_strtod_l+0x622>
 800ca16:	f1ba 0f01 	cmp.w	sl, #1
 800ca1a:	d103      	bne.n	800ca24 <_strtod_l+0x9e4>
 800ca1c:	f1bb 0f00 	cmp.w	fp, #0
 800ca20:	f43f adb2 	beq.w	800c588 <_strtod_l+0x548>
 800ca24:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800ca28:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800ca2c:	e7b8      	b.n	800c9a0 <_strtod_l+0x960>
 800ca2e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800ca32:	ee20 8b08 	vmul.f64	d8, d0, d8
 800ca36:	f1b8 0f00 	cmp.w	r8, #0
 800ca3a:	d0af      	beq.n	800c99c <_strtod_l+0x95c>
 800ca3c:	eeb0 ab48 	vmov.f64	d10, d8
 800ca40:	e7ae      	b.n	800c9a0 <_strtod_l+0x960>
 800ca42:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800ca46:	eeb0 8b4a 	vmov.f64	d8, d10
 800ca4a:	e7a9      	b.n	800c9a0 <_strtod_l+0x960>
 800ca4c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800ca50:	e7a6      	b.n	800c9a0 <_strtod_l+0x960>
 800ca52:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ca56:	9b06      	ldr	r3, [sp, #24]
 800ca58:	46d9      	mov	r9, fp
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d1ca      	bne.n	800c9f4 <_strtod_l+0x9b4>
 800ca5e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ca62:	0d1b      	lsrs	r3, r3, #20
 800ca64:	051b      	lsls	r3, r3, #20
 800ca66:	429f      	cmp	r7, r3
 800ca68:	d1c4      	bne.n	800c9f4 <_strtod_l+0x9b4>
 800ca6a:	ec51 0b18 	vmov	r0, r1, d8
 800ca6e:	f7f3 fe6b 	bl	8000748 <__aeabi_d2lz>
 800ca72:	f7f3 fe23 	bl	80006bc <__aeabi_l2d>
 800ca76:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800ca7a:	ec41 0b17 	vmov	d7, r0, r1
 800ca7e:	ea49 090a 	orr.w	r9, r9, sl
 800ca82:	ea59 0908 	orrs.w	r9, r9, r8
 800ca86:	ee38 8b47 	vsub.f64	d8, d8, d7
 800ca8a:	d03c      	beq.n	800cb06 <_strtod_l+0xac6>
 800ca8c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800cb40 <_strtod_l+0xb00>
 800ca90:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ca94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca98:	f53f aced 	bmi.w	800c476 <_strtod_l+0x436>
 800ca9c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800cb48 <_strtod_l+0xb08>
 800caa0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800caa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caa8:	dda4      	ble.n	800c9f4 <_strtod_l+0x9b4>
 800caaa:	e4e4      	b.n	800c476 <_strtod_l+0x436>
 800caac:	9906      	ldr	r1, [sp, #24]
 800caae:	b1e1      	cbz	r1, 800caea <_strtod_l+0xaaa>
 800cab0:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800cab4:	d819      	bhi.n	800caea <_strtod_l+0xaaa>
 800cab6:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800caba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cabe:	d811      	bhi.n	800cae4 <_strtod_l+0xaa4>
 800cac0:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800cac4:	ee18 3a10 	vmov	r3, s16
 800cac8:	2b01      	cmp	r3, #1
 800caca:	bf38      	it	cc
 800cacc:	2301      	movcc	r3, #1
 800cace:	ee08 3a10 	vmov	s16, r3
 800cad2:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800cad6:	f1b8 0f00 	cmp.w	r8, #0
 800cada:	d111      	bne.n	800cb00 <_strtod_l+0xac0>
 800cadc:	eeb1 7b48 	vneg.f64	d7, d8
 800cae0:	ec53 2b17 	vmov	r2, r3, d7
 800cae4:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800cae8:	1bcb      	subs	r3, r1, r7
 800caea:	eeb0 0b49 	vmov.f64	d0, d9
 800caee:	ec43 2b1a 	vmov	d10, r2, r3
 800caf2:	f7ff f94d 	bl	800bd90 <__ulp>
 800caf6:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800cafa:	ec5b ab19 	vmov	sl, fp, d9
 800cafe:	e7aa      	b.n	800ca56 <_strtod_l+0xa16>
 800cb00:	eeb0 7b48 	vmov.f64	d7, d8
 800cb04:	e7ec      	b.n	800cae0 <_strtod_l+0xaa0>
 800cb06:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800cb50 <_strtod_l+0xb10>
 800cb0a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800cb0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb12:	f57f af6f 	bpl.w	800c9f4 <_strtod_l+0x9b4>
 800cb16:	e4ae      	b.n	800c476 <_strtod_l+0x436>
 800cb18:	2300      	movs	r3, #0
 800cb1a:	9308      	str	r3, [sp, #32]
 800cb1c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cb1e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cb20:	6013      	str	r3, [r2, #0]
 800cb22:	f7ff bacc 	b.w	800c0be <_strtod_l+0x7e>
 800cb26:	2a65      	cmp	r2, #101	@ 0x65
 800cb28:	f43f abbc 	beq.w	800c2a4 <_strtod_l+0x264>
 800cb2c:	2a45      	cmp	r2, #69	@ 0x45
 800cb2e:	f43f abb9 	beq.w	800c2a4 <_strtod_l+0x264>
 800cb32:	2301      	movs	r3, #1
 800cb34:	9306      	str	r3, [sp, #24]
 800cb36:	f7ff bbf0 	b.w	800c31a <_strtod_l+0x2da>
 800cb3a:	bf00      	nop
 800cb3c:	f3af 8000 	nop.w
 800cb40:	94a03595 	.word	0x94a03595
 800cb44:	3fdfffff 	.word	0x3fdfffff
 800cb48:	35afe535 	.word	0x35afe535
 800cb4c:	3fe00000 	.word	0x3fe00000
 800cb50:	94a03595 	.word	0x94a03595
 800cb54:	3fcfffff 	.word	0x3fcfffff
 800cb58:	000fffff 	.word	0x000fffff
 800cb5c:	7ff00000 	.word	0x7ff00000
 800cb60:	7fefffff 	.word	0x7fefffff
 800cb64:	7fe00000 	.word	0x7fe00000
 800cb68:	7c9fffff 	.word	0x7c9fffff

0800cb6c <_strtod_r>:
 800cb6c:	4b01      	ldr	r3, [pc, #4]	@ (800cb74 <_strtod_r+0x8>)
 800cb6e:	f7ff ba67 	b.w	800c040 <_strtod_l>
 800cb72:	bf00      	nop
 800cb74:	24000070 	.word	0x24000070

0800cb78 <_strtol_l.constprop.0>:
 800cb78:	2b24      	cmp	r3, #36	@ 0x24
 800cb7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb7e:	4686      	mov	lr, r0
 800cb80:	4690      	mov	r8, r2
 800cb82:	d801      	bhi.n	800cb88 <_strtol_l.constprop.0+0x10>
 800cb84:	2b01      	cmp	r3, #1
 800cb86:	d106      	bne.n	800cb96 <_strtol_l.constprop.0+0x1e>
 800cb88:	f7fd ff22 	bl	800a9d0 <__errno>
 800cb8c:	2316      	movs	r3, #22
 800cb8e:	6003      	str	r3, [r0, #0]
 800cb90:	2000      	movs	r0, #0
 800cb92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb96:	4834      	ldr	r0, [pc, #208]	@ (800cc68 <_strtol_l.constprop.0+0xf0>)
 800cb98:	460d      	mov	r5, r1
 800cb9a:	462a      	mov	r2, r5
 800cb9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cba0:	5d06      	ldrb	r6, [r0, r4]
 800cba2:	f016 0608 	ands.w	r6, r6, #8
 800cba6:	d1f8      	bne.n	800cb9a <_strtol_l.constprop.0+0x22>
 800cba8:	2c2d      	cmp	r4, #45	@ 0x2d
 800cbaa:	d12d      	bne.n	800cc08 <_strtol_l.constprop.0+0x90>
 800cbac:	782c      	ldrb	r4, [r5, #0]
 800cbae:	2601      	movs	r6, #1
 800cbb0:	1c95      	adds	r5, r2, #2
 800cbb2:	f033 0210 	bics.w	r2, r3, #16
 800cbb6:	d109      	bne.n	800cbcc <_strtol_l.constprop.0+0x54>
 800cbb8:	2c30      	cmp	r4, #48	@ 0x30
 800cbba:	d12a      	bne.n	800cc12 <_strtol_l.constprop.0+0x9a>
 800cbbc:	782a      	ldrb	r2, [r5, #0]
 800cbbe:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800cbc2:	2a58      	cmp	r2, #88	@ 0x58
 800cbc4:	d125      	bne.n	800cc12 <_strtol_l.constprop.0+0x9a>
 800cbc6:	786c      	ldrb	r4, [r5, #1]
 800cbc8:	2310      	movs	r3, #16
 800cbca:	3502      	adds	r5, #2
 800cbcc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800cbd0:	f10c 3cff 	add.w	ip, ip, #4294967295
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	fbbc f9f3 	udiv	r9, ip, r3
 800cbda:	4610      	mov	r0, r2
 800cbdc:	fb03 ca19 	mls	sl, r3, r9, ip
 800cbe0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800cbe4:	2f09      	cmp	r7, #9
 800cbe6:	d81b      	bhi.n	800cc20 <_strtol_l.constprop.0+0xa8>
 800cbe8:	463c      	mov	r4, r7
 800cbea:	42a3      	cmp	r3, r4
 800cbec:	dd27      	ble.n	800cc3e <_strtol_l.constprop.0+0xc6>
 800cbee:	1c57      	adds	r7, r2, #1
 800cbf0:	d007      	beq.n	800cc02 <_strtol_l.constprop.0+0x8a>
 800cbf2:	4581      	cmp	r9, r0
 800cbf4:	d320      	bcc.n	800cc38 <_strtol_l.constprop.0+0xc0>
 800cbf6:	d101      	bne.n	800cbfc <_strtol_l.constprop.0+0x84>
 800cbf8:	45a2      	cmp	sl, r4
 800cbfa:	db1d      	blt.n	800cc38 <_strtol_l.constprop.0+0xc0>
 800cbfc:	fb00 4003 	mla	r0, r0, r3, r4
 800cc00:	2201      	movs	r2, #1
 800cc02:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cc06:	e7eb      	b.n	800cbe0 <_strtol_l.constprop.0+0x68>
 800cc08:	2c2b      	cmp	r4, #43	@ 0x2b
 800cc0a:	bf04      	itt	eq
 800cc0c:	782c      	ldrbeq	r4, [r5, #0]
 800cc0e:	1c95      	addeq	r5, r2, #2
 800cc10:	e7cf      	b.n	800cbb2 <_strtol_l.constprop.0+0x3a>
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d1da      	bne.n	800cbcc <_strtol_l.constprop.0+0x54>
 800cc16:	2c30      	cmp	r4, #48	@ 0x30
 800cc18:	bf0c      	ite	eq
 800cc1a:	2308      	moveq	r3, #8
 800cc1c:	230a      	movne	r3, #10
 800cc1e:	e7d5      	b.n	800cbcc <_strtol_l.constprop.0+0x54>
 800cc20:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800cc24:	2f19      	cmp	r7, #25
 800cc26:	d801      	bhi.n	800cc2c <_strtol_l.constprop.0+0xb4>
 800cc28:	3c37      	subs	r4, #55	@ 0x37
 800cc2a:	e7de      	b.n	800cbea <_strtol_l.constprop.0+0x72>
 800cc2c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800cc30:	2f19      	cmp	r7, #25
 800cc32:	d804      	bhi.n	800cc3e <_strtol_l.constprop.0+0xc6>
 800cc34:	3c57      	subs	r4, #87	@ 0x57
 800cc36:	e7d8      	b.n	800cbea <_strtol_l.constprop.0+0x72>
 800cc38:	f04f 32ff 	mov.w	r2, #4294967295
 800cc3c:	e7e1      	b.n	800cc02 <_strtol_l.constprop.0+0x8a>
 800cc3e:	1c53      	adds	r3, r2, #1
 800cc40:	d108      	bne.n	800cc54 <_strtol_l.constprop.0+0xdc>
 800cc42:	2322      	movs	r3, #34	@ 0x22
 800cc44:	f8ce 3000 	str.w	r3, [lr]
 800cc48:	4660      	mov	r0, ip
 800cc4a:	f1b8 0f00 	cmp.w	r8, #0
 800cc4e:	d0a0      	beq.n	800cb92 <_strtol_l.constprop.0+0x1a>
 800cc50:	1e69      	subs	r1, r5, #1
 800cc52:	e006      	b.n	800cc62 <_strtol_l.constprop.0+0xea>
 800cc54:	b106      	cbz	r6, 800cc58 <_strtol_l.constprop.0+0xe0>
 800cc56:	4240      	negs	r0, r0
 800cc58:	f1b8 0f00 	cmp.w	r8, #0
 800cc5c:	d099      	beq.n	800cb92 <_strtol_l.constprop.0+0x1a>
 800cc5e:	2a00      	cmp	r2, #0
 800cc60:	d1f6      	bne.n	800cc50 <_strtol_l.constprop.0+0xd8>
 800cc62:	f8c8 1000 	str.w	r1, [r8]
 800cc66:	e794      	b.n	800cb92 <_strtol_l.constprop.0+0x1a>
 800cc68:	0800df39 	.word	0x0800df39

0800cc6c <_strtol_r>:
 800cc6c:	f7ff bf84 	b.w	800cb78 <_strtol_l.constprop.0>

0800cc70 <__ssputs_r>:
 800cc70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc74:	688e      	ldr	r6, [r1, #8]
 800cc76:	461f      	mov	r7, r3
 800cc78:	42be      	cmp	r6, r7
 800cc7a:	680b      	ldr	r3, [r1, #0]
 800cc7c:	4682      	mov	sl, r0
 800cc7e:	460c      	mov	r4, r1
 800cc80:	4690      	mov	r8, r2
 800cc82:	d82d      	bhi.n	800cce0 <__ssputs_r+0x70>
 800cc84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cc88:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cc8c:	d026      	beq.n	800ccdc <__ssputs_r+0x6c>
 800cc8e:	6965      	ldr	r5, [r4, #20]
 800cc90:	6909      	ldr	r1, [r1, #16]
 800cc92:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cc96:	eba3 0901 	sub.w	r9, r3, r1
 800cc9a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cc9e:	1c7b      	adds	r3, r7, #1
 800cca0:	444b      	add	r3, r9
 800cca2:	106d      	asrs	r5, r5, #1
 800cca4:	429d      	cmp	r5, r3
 800cca6:	bf38      	it	cc
 800cca8:	461d      	movcc	r5, r3
 800ccaa:	0553      	lsls	r3, r2, #21
 800ccac:	d527      	bpl.n	800ccfe <__ssputs_r+0x8e>
 800ccae:	4629      	mov	r1, r5
 800ccb0:	f7fc fc86 	bl	80095c0 <_malloc_r>
 800ccb4:	4606      	mov	r6, r0
 800ccb6:	b360      	cbz	r0, 800cd12 <__ssputs_r+0xa2>
 800ccb8:	6921      	ldr	r1, [r4, #16]
 800ccba:	464a      	mov	r2, r9
 800ccbc:	f7fd feb5 	bl	800aa2a <memcpy>
 800ccc0:	89a3      	ldrh	r3, [r4, #12]
 800ccc2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ccc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ccca:	81a3      	strh	r3, [r4, #12]
 800cccc:	6126      	str	r6, [r4, #16]
 800ccce:	6165      	str	r5, [r4, #20]
 800ccd0:	444e      	add	r6, r9
 800ccd2:	eba5 0509 	sub.w	r5, r5, r9
 800ccd6:	6026      	str	r6, [r4, #0]
 800ccd8:	60a5      	str	r5, [r4, #8]
 800ccda:	463e      	mov	r6, r7
 800ccdc:	42be      	cmp	r6, r7
 800ccde:	d900      	bls.n	800cce2 <__ssputs_r+0x72>
 800cce0:	463e      	mov	r6, r7
 800cce2:	6820      	ldr	r0, [r4, #0]
 800cce4:	4632      	mov	r2, r6
 800cce6:	4641      	mov	r1, r8
 800cce8:	f000 fb6a 	bl	800d3c0 <memmove>
 800ccec:	68a3      	ldr	r3, [r4, #8]
 800ccee:	1b9b      	subs	r3, r3, r6
 800ccf0:	60a3      	str	r3, [r4, #8]
 800ccf2:	6823      	ldr	r3, [r4, #0]
 800ccf4:	4433      	add	r3, r6
 800ccf6:	6023      	str	r3, [r4, #0]
 800ccf8:	2000      	movs	r0, #0
 800ccfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccfe:	462a      	mov	r2, r5
 800cd00:	f000 ff15 	bl	800db2e <_realloc_r>
 800cd04:	4606      	mov	r6, r0
 800cd06:	2800      	cmp	r0, #0
 800cd08:	d1e0      	bne.n	800cccc <__ssputs_r+0x5c>
 800cd0a:	6921      	ldr	r1, [r4, #16]
 800cd0c:	4650      	mov	r0, sl
 800cd0e:	f7fe fc81 	bl	800b614 <_free_r>
 800cd12:	230c      	movs	r3, #12
 800cd14:	f8ca 3000 	str.w	r3, [sl]
 800cd18:	89a3      	ldrh	r3, [r4, #12]
 800cd1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd1e:	81a3      	strh	r3, [r4, #12]
 800cd20:	f04f 30ff 	mov.w	r0, #4294967295
 800cd24:	e7e9      	b.n	800ccfa <__ssputs_r+0x8a>
	...

0800cd28 <_svfiprintf_r>:
 800cd28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd2c:	4698      	mov	r8, r3
 800cd2e:	898b      	ldrh	r3, [r1, #12]
 800cd30:	061b      	lsls	r3, r3, #24
 800cd32:	b09d      	sub	sp, #116	@ 0x74
 800cd34:	4607      	mov	r7, r0
 800cd36:	460d      	mov	r5, r1
 800cd38:	4614      	mov	r4, r2
 800cd3a:	d510      	bpl.n	800cd5e <_svfiprintf_r+0x36>
 800cd3c:	690b      	ldr	r3, [r1, #16]
 800cd3e:	b973      	cbnz	r3, 800cd5e <_svfiprintf_r+0x36>
 800cd40:	2140      	movs	r1, #64	@ 0x40
 800cd42:	f7fc fc3d 	bl	80095c0 <_malloc_r>
 800cd46:	6028      	str	r0, [r5, #0]
 800cd48:	6128      	str	r0, [r5, #16]
 800cd4a:	b930      	cbnz	r0, 800cd5a <_svfiprintf_r+0x32>
 800cd4c:	230c      	movs	r3, #12
 800cd4e:	603b      	str	r3, [r7, #0]
 800cd50:	f04f 30ff 	mov.w	r0, #4294967295
 800cd54:	b01d      	add	sp, #116	@ 0x74
 800cd56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd5a:	2340      	movs	r3, #64	@ 0x40
 800cd5c:	616b      	str	r3, [r5, #20]
 800cd5e:	2300      	movs	r3, #0
 800cd60:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd62:	2320      	movs	r3, #32
 800cd64:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cd68:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd6c:	2330      	movs	r3, #48	@ 0x30
 800cd6e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cf0c <_svfiprintf_r+0x1e4>
 800cd72:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cd76:	f04f 0901 	mov.w	r9, #1
 800cd7a:	4623      	mov	r3, r4
 800cd7c:	469a      	mov	sl, r3
 800cd7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd82:	b10a      	cbz	r2, 800cd88 <_svfiprintf_r+0x60>
 800cd84:	2a25      	cmp	r2, #37	@ 0x25
 800cd86:	d1f9      	bne.n	800cd7c <_svfiprintf_r+0x54>
 800cd88:	ebba 0b04 	subs.w	fp, sl, r4
 800cd8c:	d00b      	beq.n	800cda6 <_svfiprintf_r+0x7e>
 800cd8e:	465b      	mov	r3, fp
 800cd90:	4622      	mov	r2, r4
 800cd92:	4629      	mov	r1, r5
 800cd94:	4638      	mov	r0, r7
 800cd96:	f7ff ff6b 	bl	800cc70 <__ssputs_r>
 800cd9a:	3001      	adds	r0, #1
 800cd9c:	f000 80a7 	beq.w	800ceee <_svfiprintf_r+0x1c6>
 800cda0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cda2:	445a      	add	r2, fp
 800cda4:	9209      	str	r2, [sp, #36]	@ 0x24
 800cda6:	f89a 3000 	ldrb.w	r3, [sl]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	f000 809f 	beq.w	800ceee <_svfiprintf_r+0x1c6>
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	f04f 32ff 	mov.w	r2, #4294967295
 800cdb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cdba:	f10a 0a01 	add.w	sl, sl, #1
 800cdbe:	9304      	str	r3, [sp, #16]
 800cdc0:	9307      	str	r3, [sp, #28]
 800cdc2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cdc6:	931a      	str	r3, [sp, #104]	@ 0x68
 800cdc8:	4654      	mov	r4, sl
 800cdca:	2205      	movs	r2, #5
 800cdcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdd0:	484e      	ldr	r0, [pc, #312]	@ (800cf0c <_svfiprintf_r+0x1e4>)
 800cdd2:	f7f3 fa8d 	bl	80002f0 <memchr>
 800cdd6:	9a04      	ldr	r2, [sp, #16]
 800cdd8:	b9d8      	cbnz	r0, 800ce12 <_svfiprintf_r+0xea>
 800cdda:	06d0      	lsls	r0, r2, #27
 800cddc:	bf44      	itt	mi
 800cdde:	2320      	movmi	r3, #32
 800cde0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cde4:	0711      	lsls	r1, r2, #28
 800cde6:	bf44      	itt	mi
 800cde8:	232b      	movmi	r3, #43	@ 0x2b
 800cdea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cdee:	f89a 3000 	ldrb.w	r3, [sl]
 800cdf2:	2b2a      	cmp	r3, #42	@ 0x2a
 800cdf4:	d015      	beq.n	800ce22 <_svfiprintf_r+0xfa>
 800cdf6:	9a07      	ldr	r2, [sp, #28]
 800cdf8:	4654      	mov	r4, sl
 800cdfa:	2000      	movs	r0, #0
 800cdfc:	f04f 0c0a 	mov.w	ip, #10
 800ce00:	4621      	mov	r1, r4
 800ce02:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce06:	3b30      	subs	r3, #48	@ 0x30
 800ce08:	2b09      	cmp	r3, #9
 800ce0a:	d94b      	bls.n	800cea4 <_svfiprintf_r+0x17c>
 800ce0c:	b1b0      	cbz	r0, 800ce3c <_svfiprintf_r+0x114>
 800ce0e:	9207      	str	r2, [sp, #28]
 800ce10:	e014      	b.n	800ce3c <_svfiprintf_r+0x114>
 800ce12:	eba0 0308 	sub.w	r3, r0, r8
 800ce16:	fa09 f303 	lsl.w	r3, r9, r3
 800ce1a:	4313      	orrs	r3, r2
 800ce1c:	9304      	str	r3, [sp, #16]
 800ce1e:	46a2      	mov	sl, r4
 800ce20:	e7d2      	b.n	800cdc8 <_svfiprintf_r+0xa0>
 800ce22:	9b03      	ldr	r3, [sp, #12]
 800ce24:	1d19      	adds	r1, r3, #4
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	9103      	str	r1, [sp, #12]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	bfbb      	ittet	lt
 800ce2e:	425b      	neglt	r3, r3
 800ce30:	f042 0202 	orrlt.w	r2, r2, #2
 800ce34:	9307      	strge	r3, [sp, #28]
 800ce36:	9307      	strlt	r3, [sp, #28]
 800ce38:	bfb8      	it	lt
 800ce3a:	9204      	strlt	r2, [sp, #16]
 800ce3c:	7823      	ldrb	r3, [r4, #0]
 800ce3e:	2b2e      	cmp	r3, #46	@ 0x2e
 800ce40:	d10a      	bne.n	800ce58 <_svfiprintf_r+0x130>
 800ce42:	7863      	ldrb	r3, [r4, #1]
 800ce44:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce46:	d132      	bne.n	800ceae <_svfiprintf_r+0x186>
 800ce48:	9b03      	ldr	r3, [sp, #12]
 800ce4a:	1d1a      	adds	r2, r3, #4
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	9203      	str	r2, [sp, #12]
 800ce50:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ce54:	3402      	adds	r4, #2
 800ce56:	9305      	str	r3, [sp, #20]
 800ce58:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cf1c <_svfiprintf_r+0x1f4>
 800ce5c:	7821      	ldrb	r1, [r4, #0]
 800ce5e:	2203      	movs	r2, #3
 800ce60:	4650      	mov	r0, sl
 800ce62:	f7f3 fa45 	bl	80002f0 <memchr>
 800ce66:	b138      	cbz	r0, 800ce78 <_svfiprintf_r+0x150>
 800ce68:	9b04      	ldr	r3, [sp, #16]
 800ce6a:	eba0 000a 	sub.w	r0, r0, sl
 800ce6e:	2240      	movs	r2, #64	@ 0x40
 800ce70:	4082      	lsls	r2, r0
 800ce72:	4313      	orrs	r3, r2
 800ce74:	3401      	adds	r4, #1
 800ce76:	9304      	str	r3, [sp, #16]
 800ce78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce7c:	4824      	ldr	r0, [pc, #144]	@ (800cf10 <_svfiprintf_r+0x1e8>)
 800ce7e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ce82:	2206      	movs	r2, #6
 800ce84:	f7f3 fa34 	bl	80002f0 <memchr>
 800ce88:	2800      	cmp	r0, #0
 800ce8a:	d036      	beq.n	800cefa <_svfiprintf_r+0x1d2>
 800ce8c:	4b21      	ldr	r3, [pc, #132]	@ (800cf14 <_svfiprintf_r+0x1ec>)
 800ce8e:	bb1b      	cbnz	r3, 800ced8 <_svfiprintf_r+0x1b0>
 800ce90:	9b03      	ldr	r3, [sp, #12]
 800ce92:	3307      	adds	r3, #7
 800ce94:	f023 0307 	bic.w	r3, r3, #7
 800ce98:	3308      	adds	r3, #8
 800ce9a:	9303      	str	r3, [sp, #12]
 800ce9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce9e:	4433      	add	r3, r6
 800cea0:	9309      	str	r3, [sp, #36]	@ 0x24
 800cea2:	e76a      	b.n	800cd7a <_svfiprintf_r+0x52>
 800cea4:	fb0c 3202 	mla	r2, ip, r2, r3
 800cea8:	460c      	mov	r4, r1
 800ceaa:	2001      	movs	r0, #1
 800ceac:	e7a8      	b.n	800ce00 <_svfiprintf_r+0xd8>
 800ceae:	2300      	movs	r3, #0
 800ceb0:	3401      	adds	r4, #1
 800ceb2:	9305      	str	r3, [sp, #20]
 800ceb4:	4619      	mov	r1, r3
 800ceb6:	f04f 0c0a 	mov.w	ip, #10
 800ceba:	4620      	mov	r0, r4
 800cebc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cec0:	3a30      	subs	r2, #48	@ 0x30
 800cec2:	2a09      	cmp	r2, #9
 800cec4:	d903      	bls.n	800cece <_svfiprintf_r+0x1a6>
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d0c6      	beq.n	800ce58 <_svfiprintf_r+0x130>
 800ceca:	9105      	str	r1, [sp, #20]
 800cecc:	e7c4      	b.n	800ce58 <_svfiprintf_r+0x130>
 800cece:	fb0c 2101 	mla	r1, ip, r1, r2
 800ced2:	4604      	mov	r4, r0
 800ced4:	2301      	movs	r3, #1
 800ced6:	e7f0      	b.n	800ceba <_svfiprintf_r+0x192>
 800ced8:	ab03      	add	r3, sp, #12
 800ceda:	9300      	str	r3, [sp, #0]
 800cedc:	462a      	mov	r2, r5
 800cede:	4b0e      	ldr	r3, [pc, #56]	@ (800cf18 <_svfiprintf_r+0x1f0>)
 800cee0:	a904      	add	r1, sp, #16
 800cee2:	4638      	mov	r0, r7
 800cee4:	f7fc fc88 	bl	80097f8 <_printf_float>
 800cee8:	1c42      	adds	r2, r0, #1
 800ceea:	4606      	mov	r6, r0
 800ceec:	d1d6      	bne.n	800ce9c <_svfiprintf_r+0x174>
 800ceee:	89ab      	ldrh	r3, [r5, #12]
 800cef0:	065b      	lsls	r3, r3, #25
 800cef2:	f53f af2d 	bmi.w	800cd50 <_svfiprintf_r+0x28>
 800cef6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cef8:	e72c      	b.n	800cd54 <_svfiprintf_r+0x2c>
 800cefa:	ab03      	add	r3, sp, #12
 800cefc:	9300      	str	r3, [sp, #0]
 800cefe:	462a      	mov	r2, r5
 800cf00:	4b05      	ldr	r3, [pc, #20]	@ (800cf18 <_svfiprintf_r+0x1f0>)
 800cf02:	a904      	add	r1, sp, #16
 800cf04:	4638      	mov	r0, r7
 800cf06:	f7fc feff 	bl	8009d08 <_printf_i>
 800cf0a:	e7ed      	b.n	800cee8 <_svfiprintf_r+0x1c0>
 800cf0c:	0800e039 	.word	0x0800e039
 800cf10:	0800e043 	.word	0x0800e043
 800cf14:	080097f9 	.word	0x080097f9
 800cf18:	0800cc71 	.word	0x0800cc71
 800cf1c:	0800e03f 	.word	0x0800e03f

0800cf20 <__sfputc_r>:
 800cf20:	6893      	ldr	r3, [r2, #8]
 800cf22:	3b01      	subs	r3, #1
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	b410      	push	{r4}
 800cf28:	6093      	str	r3, [r2, #8]
 800cf2a:	da08      	bge.n	800cf3e <__sfputc_r+0x1e>
 800cf2c:	6994      	ldr	r4, [r2, #24]
 800cf2e:	42a3      	cmp	r3, r4
 800cf30:	db01      	blt.n	800cf36 <__sfputc_r+0x16>
 800cf32:	290a      	cmp	r1, #10
 800cf34:	d103      	bne.n	800cf3e <__sfputc_r+0x1e>
 800cf36:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf3a:	f7fd bbb8 	b.w	800a6ae <__swbuf_r>
 800cf3e:	6813      	ldr	r3, [r2, #0]
 800cf40:	1c58      	adds	r0, r3, #1
 800cf42:	6010      	str	r0, [r2, #0]
 800cf44:	7019      	strb	r1, [r3, #0]
 800cf46:	4608      	mov	r0, r1
 800cf48:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf4c:	4770      	bx	lr

0800cf4e <__sfputs_r>:
 800cf4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf50:	4606      	mov	r6, r0
 800cf52:	460f      	mov	r7, r1
 800cf54:	4614      	mov	r4, r2
 800cf56:	18d5      	adds	r5, r2, r3
 800cf58:	42ac      	cmp	r4, r5
 800cf5a:	d101      	bne.n	800cf60 <__sfputs_r+0x12>
 800cf5c:	2000      	movs	r0, #0
 800cf5e:	e007      	b.n	800cf70 <__sfputs_r+0x22>
 800cf60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf64:	463a      	mov	r2, r7
 800cf66:	4630      	mov	r0, r6
 800cf68:	f7ff ffda 	bl	800cf20 <__sfputc_r>
 800cf6c:	1c43      	adds	r3, r0, #1
 800cf6e:	d1f3      	bne.n	800cf58 <__sfputs_r+0xa>
 800cf70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cf74 <_vfiprintf_r>:
 800cf74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf78:	460d      	mov	r5, r1
 800cf7a:	b09d      	sub	sp, #116	@ 0x74
 800cf7c:	4614      	mov	r4, r2
 800cf7e:	4698      	mov	r8, r3
 800cf80:	4606      	mov	r6, r0
 800cf82:	b118      	cbz	r0, 800cf8c <_vfiprintf_r+0x18>
 800cf84:	6a03      	ldr	r3, [r0, #32]
 800cf86:	b90b      	cbnz	r3, 800cf8c <_vfiprintf_r+0x18>
 800cf88:	f7fd fa76 	bl	800a478 <__sinit>
 800cf8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cf8e:	07d9      	lsls	r1, r3, #31
 800cf90:	d405      	bmi.n	800cf9e <_vfiprintf_r+0x2a>
 800cf92:	89ab      	ldrh	r3, [r5, #12]
 800cf94:	059a      	lsls	r2, r3, #22
 800cf96:	d402      	bmi.n	800cf9e <_vfiprintf_r+0x2a>
 800cf98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cf9a:	f7fd fd44 	bl	800aa26 <__retarget_lock_acquire_recursive>
 800cf9e:	89ab      	ldrh	r3, [r5, #12]
 800cfa0:	071b      	lsls	r3, r3, #28
 800cfa2:	d501      	bpl.n	800cfa8 <_vfiprintf_r+0x34>
 800cfa4:	692b      	ldr	r3, [r5, #16]
 800cfa6:	b99b      	cbnz	r3, 800cfd0 <_vfiprintf_r+0x5c>
 800cfa8:	4629      	mov	r1, r5
 800cfaa:	4630      	mov	r0, r6
 800cfac:	f7fd fbbe 	bl	800a72c <__swsetup_r>
 800cfb0:	b170      	cbz	r0, 800cfd0 <_vfiprintf_r+0x5c>
 800cfb2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cfb4:	07dc      	lsls	r4, r3, #31
 800cfb6:	d504      	bpl.n	800cfc2 <_vfiprintf_r+0x4e>
 800cfb8:	f04f 30ff 	mov.w	r0, #4294967295
 800cfbc:	b01d      	add	sp, #116	@ 0x74
 800cfbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfc2:	89ab      	ldrh	r3, [r5, #12]
 800cfc4:	0598      	lsls	r0, r3, #22
 800cfc6:	d4f7      	bmi.n	800cfb8 <_vfiprintf_r+0x44>
 800cfc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cfca:	f7fd fd2d 	bl	800aa28 <__retarget_lock_release_recursive>
 800cfce:	e7f3      	b.n	800cfb8 <_vfiprintf_r+0x44>
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	9309      	str	r3, [sp, #36]	@ 0x24
 800cfd4:	2320      	movs	r3, #32
 800cfd6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cfda:	f8cd 800c 	str.w	r8, [sp, #12]
 800cfde:	2330      	movs	r3, #48	@ 0x30
 800cfe0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d190 <_vfiprintf_r+0x21c>
 800cfe4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cfe8:	f04f 0901 	mov.w	r9, #1
 800cfec:	4623      	mov	r3, r4
 800cfee:	469a      	mov	sl, r3
 800cff0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cff4:	b10a      	cbz	r2, 800cffa <_vfiprintf_r+0x86>
 800cff6:	2a25      	cmp	r2, #37	@ 0x25
 800cff8:	d1f9      	bne.n	800cfee <_vfiprintf_r+0x7a>
 800cffa:	ebba 0b04 	subs.w	fp, sl, r4
 800cffe:	d00b      	beq.n	800d018 <_vfiprintf_r+0xa4>
 800d000:	465b      	mov	r3, fp
 800d002:	4622      	mov	r2, r4
 800d004:	4629      	mov	r1, r5
 800d006:	4630      	mov	r0, r6
 800d008:	f7ff ffa1 	bl	800cf4e <__sfputs_r>
 800d00c:	3001      	adds	r0, #1
 800d00e:	f000 80a7 	beq.w	800d160 <_vfiprintf_r+0x1ec>
 800d012:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d014:	445a      	add	r2, fp
 800d016:	9209      	str	r2, [sp, #36]	@ 0x24
 800d018:	f89a 3000 	ldrb.w	r3, [sl]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	f000 809f 	beq.w	800d160 <_vfiprintf_r+0x1ec>
 800d022:	2300      	movs	r3, #0
 800d024:	f04f 32ff 	mov.w	r2, #4294967295
 800d028:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d02c:	f10a 0a01 	add.w	sl, sl, #1
 800d030:	9304      	str	r3, [sp, #16]
 800d032:	9307      	str	r3, [sp, #28]
 800d034:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d038:	931a      	str	r3, [sp, #104]	@ 0x68
 800d03a:	4654      	mov	r4, sl
 800d03c:	2205      	movs	r2, #5
 800d03e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d042:	4853      	ldr	r0, [pc, #332]	@ (800d190 <_vfiprintf_r+0x21c>)
 800d044:	f7f3 f954 	bl	80002f0 <memchr>
 800d048:	9a04      	ldr	r2, [sp, #16]
 800d04a:	b9d8      	cbnz	r0, 800d084 <_vfiprintf_r+0x110>
 800d04c:	06d1      	lsls	r1, r2, #27
 800d04e:	bf44      	itt	mi
 800d050:	2320      	movmi	r3, #32
 800d052:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d056:	0713      	lsls	r3, r2, #28
 800d058:	bf44      	itt	mi
 800d05a:	232b      	movmi	r3, #43	@ 0x2b
 800d05c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d060:	f89a 3000 	ldrb.w	r3, [sl]
 800d064:	2b2a      	cmp	r3, #42	@ 0x2a
 800d066:	d015      	beq.n	800d094 <_vfiprintf_r+0x120>
 800d068:	9a07      	ldr	r2, [sp, #28]
 800d06a:	4654      	mov	r4, sl
 800d06c:	2000      	movs	r0, #0
 800d06e:	f04f 0c0a 	mov.w	ip, #10
 800d072:	4621      	mov	r1, r4
 800d074:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d078:	3b30      	subs	r3, #48	@ 0x30
 800d07a:	2b09      	cmp	r3, #9
 800d07c:	d94b      	bls.n	800d116 <_vfiprintf_r+0x1a2>
 800d07e:	b1b0      	cbz	r0, 800d0ae <_vfiprintf_r+0x13a>
 800d080:	9207      	str	r2, [sp, #28]
 800d082:	e014      	b.n	800d0ae <_vfiprintf_r+0x13a>
 800d084:	eba0 0308 	sub.w	r3, r0, r8
 800d088:	fa09 f303 	lsl.w	r3, r9, r3
 800d08c:	4313      	orrs	r3, r2
 800d08e:	9304      	str	r3, [sp, #16]
 800d090:	46a2      	mov	sl, r4
 800d092:	e7d2      	b.n	800d03a <_vfiprintf_r+0xc6>
 800d094:	9b03      	ldr	r3, [sp, #12]
 800d096:	1d19      	adds	r1, r3, #4
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	9103      	str	r1, [sp, #12]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	bfbb      	ittet	lt
 800d0a0:	425b      	neglt	r3, r3
 800d0a2:	f042 0202 	orrlt.w	r2, r2, #2
 800d0a6:	9307      	strge	r3, [sp, #28]
 800d0a8:	9307      	strlt	r3, [sp, #28]
 800d0aa:	bfb8      	it	lt
 800d0ac:	9204      	strlt	r2, [sp, #16]
 800d0ae:	7823      	ldrb	r3, [r4, #0]
 800d0b0:	2b2e      	cmp	r3, #46	@ 0x2e
 800d0b2:	d10a      	bne.n	800d0ca <_vfiprintf_r+0x156>
 800d0b4:	7863      	ldrb	r3, [r4, #1]
 800d0b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800d0b8:	d132      	bne.n	800d120 <_vfiprintf_r+0x1ac>
 800d0ba:	9b03      	ldr	r3, [sp, #12]
 800d0bc:	1d1a      	adds	r2, r3, #4
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	9203      	str	r2, [sp, #12]
 800d0c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d0c6:	3402      	adds	r4, #2
 800d0c8:	9305      	str	r3, [sp, #20]
 800d0ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d1a0 <_vfiprintf_r+0x22c>
 800d0ce:	7821      	ldrb	r1, [r4, #0]
 800d0d0:	2203      	movs	r2, #3
 800d0d2:	4650      	mov	r0, sl
 800d0d4:	f7f3 f90c 	bl	80002f0 <memchr>
 800d0d8:	b138      	cbz	r0, 800d0ea <_vfiprintf_r+0x176>
 800d0da:	9b04      	ldr	r3, [sp, #16]
 800d0dc:	eba0 000a 	sub.w	r0, r0, sl
 800d0e0:	2240      	movs	r2, #64	@ 0x40
 800d0e2:	4082      	lsls	r2, r0
 800d0e4:	4313      	orrs	r3, r2
 800d0e6:	3401      	adds	r4, #1
 800d0e8:	9304      	str	r3, [sp, #16]
 800d0ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0ee:	4829      	ldr	r0, [pc, #164]	@ (800d194 <_vfiprintf_r+0x220>)
 800d0f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d0f4:	2206      	movs	r2, #6
 800d0f6:	f7f3 f8fb 	bl	80002f0 <memchr>
 800d0fa:	2800      	cmp	r0, #0
 800d0fc:	d03f      	beq.n	800d17e <_vfiprintf_r+0x20a>
 800d0fe:	4b26      	ldr	r3, [pc, #152]	@ (800d198 <_vfiprintf_r+0x224>)
 800d100:	bb1b      	cbnz	r3, 800d14a <_vfiprintf_r+0x1d6>
 800d102:	9b03      	ldr	r3, [sp, #12]
 800d104:	3307      	adds	r3, #7
 800d106:	f023 0307 	bic.w	r3, r3, #7
 800d10a:	3308      	adds	r3, #8
 800d10c:	9303      	str	r3, [sp, #12]
 800d10e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d110:	443b      	add	r3, r7
 800d112:	9309      	str	r3, [sp, #36]	@ 0x24
 800d114:	e76a      	b.n	800cfec <_vfiprintf_r+0x78>
 800d116:	fb0c 3202 	mla	r2, ip, r2, r3
 800d11a:	460c      	mov	r4, r1
 800d11c:	2001      	movs	r0, #1
 800d11e:	e7a8      	b.n	800d072 <_vfiprintf_r+0xfe>
 800d120:	2300      	movs	r3, #0
 800d122:	3401      	adds	r4, #1
 800d124:	9305      	str	r3, [sp, #20]
 800d126:	4619      	mov	r1, r3
 800d128:	f04f 0c0a 	mov.w	ip, #10
 800d12c:	4620      	mov	r0, r4
 800d12e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d132:	3a30      	subs	r2, #48	@ 0x30
 800d134:	2a09      	cmp	r2, #9
 800d136:	d903      	bls.n	800d140 <_vfiprintf_r+0x1cc>
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d0c6      	beq.n	800d0ca <_vfiprintf_r+0x156>
 800d13c:	9105      	str	r1, [sp, #20]
 800d13e:	e7c4      	b.n	800d0ca <_vfiprintf_r+0x156>
 800d140:	fb0c 2101 	mla	r1, ip, r1, r2
 800d144:	4604      	mov	r4, r0
 800d146:	2301      	movs	r3, #1
 800d148:	e7f0      	b.n	800d12c <_vfiprintf_r+0x1b8>
 800d14a:	ab03      	add	r3, sp, #12
 800d14c:	9300      	str	r3, [sp, #0]
 800d14e:	462a      	mov	r2, r5
 800d150:	4b12      	ldr	r3, [pc, #72]	@ (800d19c <_vfiprintf_r+0x228>)
 800d152:	a904      	add	r1, sp, #16
 800d154:	4630      	mov	r0, r6
 800d156:	f7fc fb4f 	bl	80097f8 <_printf_float>
 800d15a:	4607      	mov	r7, r0
 800d15c:	1c78      	adds	r0, r7, #1
 800d15e:	d1d6      	bne.n	800d10e <_vfiprintf_r+0x19a>
 800d160:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d162:	07d9      	lsls	r1, r3, #31
 800d164:	d405      	bmi.n	800d172 <_vfiprintf_r+0x1fe>
 800d166:	89ab      	ldrh	r3, [r5, #12]
 800d168:	059a      	lsls	r2, r3, #22
 800d16a:	d402      	bmi.n	800d172 <_vfiprintf_r+0x1fe>
 800d16c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d16e:	f7fd fc5b 	bl	800aa28 <__retarget_lock_release_recursive>
 800d172:	89ab      	ldrh	r3, [r5, #12]
 800d174:	065b      	lsls	r3, r3, #25
 800d176:	f53f af1f 	bmi.w	800cfb8 <_vfiprintf_r+0x44>
 800d17a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d17c:	e71e      	b.n	800cfbc <_vfiprintf_r+0x48>
 800d17e:	ab03      	add	r3, sp, #12
 800d180:	9300      	str	r3, [sp, #0]
 800d182:	462a      	mov	r2, r5
 800d184:	4b05      	ldr	r3, [pc, #20]	@ (800d19c <_vfiprintf_r+0x228>)
 800d186:	a904      	add	r1, sp, #16
 800d188:	4630      	mov	r0, r6
 800d18a:	f7fc fdbd 	bl	8009d08 <_printf_i>
 800d18e:	e7e4      	b.n	800d15a <_vfiprintf_r+0x1e6>
 800d190:	0800e039 	.word	0x0800e039
 800d194:	0800e043 	.word	0x0800e043
 800d198:	080097f9 	.word	0x080097f9
 800d19c:	0800cf4f 	.word	0x0800cf4f
 800d1a0:	0800e03f 	.word	0x0800e03f

0800d1a4 <__sflush_r>:
 800d1a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d1a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1ac:	0716      	lsls	r6, r2, #28
 800d1ae:	4605      	mov	r5, r0
 800d1b0:	460c      	mov	r4, r1
 800d1b2:	d454      	bmi.n	800d25e <__sflush_r+0xba>
 800d1b4:	684b      	ldr	r3, [r1, #4]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	dc02      	bgt.n	800d1c0 <__sflush_r+0x1c>
 800d1ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	dd48      	ble.n	800d252 <__sflush_r+0xae>
 800d1c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d1c2:	2e00      	cmp	r6, #0
 800d1c4:	d045      	beq.n	800d252 <__sflush_r+0xae>
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d1cc:	682f      	ldr	r7, [r5, #0]
 800d1ce:	6a21      	ldr	r1, [r4, #32]
 800d1d0:	602b      	str	r3, [r5, #0]
 800d1d2:	d030      	beq.n	800d236 <__sflush_r+0x92>
 800d1d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d1d6:	89a3      	ldrh	r3, [r4, #12]
 800d1d8:	0759      	lsls	r1, r3, #29
 800d1da:	d505      	bpl.n	800d1e8 <__sflush_r+0x44>
 800d1dc:	6863      	ldr	r3, [r4, #4]
 800d1de:	1ad2      	subs	r2, r2, r3
 800d1e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d1e2:	b10b      	cbz	r3, 800d1e8 <__sflush_r+0x44>
 800d1e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d1e6:	1ad2      	subs	r2, r2, r3
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d1ec:	6a21      	ldr	r1, [r4, #32]
 800d1ee:	4628      	mov	r0, r5
 800d1f0:	47b0      	blx	r6
 800d1f2:	1c43      	adds	r3, r0, #1
 800d1f4:	89a3      	ldrh	r3, [r4, #12]
 800d1f6:	d106      	bne.n	800d206 <__sflush_r+0x62>
 800d1f8:	6829      	ldr	r1, [r5, #0]
 800d1fa:	291d      	cmp	r1, #29
 800d1fc:	d82b      	bhi.n	800d256 <__sflush_r+0xb2>
 800d1fe:	4a2a      	ldr	r2, [pc, #168]	@ (800d2a8 <__sflush_r+0x104>)
 800d200:	410a      	asrs	r2, r1
 800d202:	07d6      	lsls	r6, r2, #31
 800d204:	d427      	bmi.n	800d256 <__sflush_r+0xb2>
 800d206:	2200      	movs	r2, #0
 800d208:	6062      	str	r2, [r4, #4]
 800d20a:	04d9      	lsls	r1, r3, #19
 800d20c:	6922      	ldr	r2, [r4, #16]
 800d20e:	6022      	str	r2, [r4, #0]
 800d210:	d504      	bpl.n	800d21c <__sflush_r+0x78>
 800d212:	1c42      	adds	r2, r0, #1
 800d214:	d101      	bne.n	800d21a <__sflush_r+0x76>
 800d216:	682b      	ldr	r3, [r5, #0]
 800d218:	b903      	cbnz	r3, 800d21c <__sflush_r+0x78>
 800d21a:	6560      	str	r0, [r4, #84]	@ 0x54
 800d21c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d21e:	602f      	str	r7, [r5, #0]
 800d220:	b1b9      	cbz	r1, 800d252 <__sflush_r+0xae>
 800d222:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d226:	4299      	cmp	r1, r3
 800d228:	d002      	beq.n	800d230 <__sflush_r+0x8c>
 800d22a:	4628      	mov	r0, r5
 800d22c:	f7fe f9f2 	bl	800b614 <_free_r>
 800d230:	2300      	movs	r3, #0
 800d232:	6363      	str	r3, [r4, #52]	@ 0x34
 800d234:	e00d      	b.n	800d252 <__sflush_r+0xae>
 800d236:	2301      	movs	r3, #1
 800d238:	4628      	mov	r0, r5
 800d23a:	47b0      	blx	r6
 800d23c:	4602      	mov	r2, r0
 800d23e:	1c50      	adds	r0, r2, #1
 800d240:	d1c9      	bne.n	800d1d6 <__sflush_r+0x32>
 800d242:	682b      	ldr	r3, [r5, #0]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d0c6      	beq.n	800d1d6 <__sflush_r+0x32>
 800d248:	2b1d      	cmp	r3, #29
 800d24a:	d001      	beq.n	800d250 <__sflush_r+0xac>
 800d24c:	2b16      	cmp	r3, #22
 800d24e:	d11e      	bne.n	800d28e <__sflush_r+0xea>
 800d250:	602f      	str	r7, [r5, #0]
 800d252:	2000      	movs	r0, #0
 800d254:	e022      	b.n	800d29c <__sflush_r+0xf8>
 800d256:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d25a:	b21b      	sxth	r3, r3
 800d25c:	e01b      	b.n	800d296 <__sflush_r+0xf2>
 800d25e:	690f      	ldr	r7, [r1, #16]
 800d260:	2f00      	cmp	r7, #0
 800d262:	d0f6      	beq.n	800d252 <__sflush_r+0xae>
 800d264:	0793      	lsls	r3, r2, #30
 800d266:	680e      	ldr	r6, [r1, #0]
 800d268:	bf08      	it	eq
 800d26a:	694b      	ldreq	r3, [r1, #20]
 800d26c:	600f      	str	r7, [r1, #0]
 800d26e:	bf18      	it	ne
 800d270:	2300      	movne	r3, #0
 800d272:	eba6 0807 	sub.w	r8, r6, r7
 800d276:	608b      	str	r3, [r1, #8]
 800d278:	f1b8 0f00 	cmp.w	r8, #0
 800d27c:	dde9      	ble.n	800d252 <__sflush_r+0xae>
 800d27e:	6a21      	ldr	r1, [r4, #32]
 800d280:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d282:	4643      	mov	r3, r8
 800d284:	463a      	mov	r2, r7
 800d286:	4628      	mov	r0, r5
 800d288:	47b0      	blx	r6
 800d28a:	2800      	cmp	r0, #0
 800d28c:	dc08      	bgt.n	800d2a0 <__sflush_r+0xfc>
 800d28e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d292:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d296:	81a3      	strh	r3, [r4, #12]
 800d298:	f04f 30ff 	mov.w	r0, #4294967295
 800d29c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2a0:	4407      	add	r7, r0
 800d2a2:	eba8 0800 	sub.w	r8, r8, r0
 800d2a6:	e7e7      	b.n	800d278 <__sflush_r+0xd4>
 800d2a8:	dfbffffe 	.word	0xdfbffffe

0800d2ac <_fflush_r>:
 800d2ac:	b538      	push	{r3, r4, r5, lr}
 800d2ae:	690b      	ldr	r3, [r1, #16]
 800d2b0:	4605      	mov	r5, r0
 800d2b2:	460c      	mov	r4, r1
 800d2b4:	b913      	cbnz	r3, 800d2bc <_fflush_r+0x10>
 800d2b6:	2500      	movs	r5, #0
 800d2b8:	4628      	mov	r0, r5
 800d2ba:	bd38      	pop	{r3, r4, r5, pc}
 800d2bc:	b118      	cbz	r0, 800d2c6 <_fflush_r+0x1a>
 800d2be:	6a03      	ldr	r3, [r0, #32]
 800d2c0:	b90b      	cbnz	r3, 800d2c6 <_fflush_r+0x1a>
 800d2c2:	f7fd f8d9 	bl	800a478 <__sinit>
 800d2c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d0f3      	beq.n	800d2b6 <_fflush_r+0xa>
 800d2ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d2d0:	07d0      	lsls	r0, r2, #31
 800d2d2:	d404      	bmi.n	800d2de <_fflush_r+0x32>
 800d2d4:	0599      	lsls	r1, r3, #22
 800d2d6:	d402      	bmi.n	800d2de <_fflush_r+0x32>
 800d2d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d2da:	f7fd fba4 	bl	800aa26 <__retarget_lock_acquire_recursive>
 800d2de:	4628      	mov	r0, r5
 800d2e0:	4621      	mov	r1, r4
 800d2e2:	f7ff ff5f 	bl	800d1a4 <__sflush_r>
 800d2e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d2e8:	07da      	lsls	r2, r3, #31
 800d2ea:	4605      	mov	r5, r0
 800d2ec:	d4e4      	bmi.n	800d2b8 <_fflush_r+0xc>
 800d2ee:	89a3      	ldrh	r3, [r4, #12]
 800d2f0:	059b      	lsls	r3, r3, #22
 800d2f2:	d4e1      	bmi.n	800d2b8 <_fflush_r+0xc>
 800d2f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d2f6:	f7fd fb97 	bl	800aa28 <__retarget_lock_release_recursive>
 800d2fa:	e7dd      	b.n	800d2b8 <_fflush_r+0xc>

0800d2fc <__swhatbuf_r>:
 800d2fc:	b570      	push	{r4, r5, r6, lr}
 800d2fe:	460c      	mov	r4, r1
 800d300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d304:	2900      	cmp	r1, #0
 800d306:	b096      	sub	sp, #88	@ 0x58
 800d308:	4615      	mov	r5, r2
 800d30a:	461e      	mov	r6, r3
 800d30c:	da0d      	bge.n	800d32a <__swhatbuf_r+0x2e>
 800d30e:	89a3      	ldrh	r3, [r4, #12]
 800d310:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d314:	f04f 0100 	mov.w	r1, #0
 800d318:	bf14      	ite	ne
 800d31a:	2340      	movne	r3, #64	@ 0x40
 800d31c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d320:	2000      	movs	r0, #0
 800d322:	6031      	str	r1, [r6, #0]
 800d324:	602b      	str	r3, [r5, #0]
 800d326:	b016      	add	sp, #88	@ 0x58
 800d328:	bd70      	pop	{r4, r5, r6, pc}
 800d32a:	466a      	mov	r2, sp
 800d32c:	f000 f874 	bl	800d418 <_fstat_r>
 800d330:	2800      	cmp	r0, #0
 800d332:	dbec      	blt.n	800d30e <__swhatbuf_r+0x12>
 800d334:	9901      	ldr	r1, [sp, #4]
 800d336:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d33a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d33e:	4259      	negs	r1, r3
 800d340:	4159      	adcs	r1, r3
 800d342:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d346:	e7eb      	b.n	800d320 <__swhatbuf_r+0x24>

0800d348 <__smakebuf_r>:
 800d348:	898b      	ldrh	r3, [r1, #12]
 800d34a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d34c:	079d      	lsls	r5, r3, #30
 800d34e:	4606      	mov	r6, r0
 800d350:	460c      	mov	r4, r1
 800d352:	d507      	bpl.n	800d364 <__smakebuf_r+0x1c>
 800d354:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d358:	6023      	str	r3, [r4, #0]
 800d35a:	6123      	str	r3, [r4, #16]
 800d35c:	2301      	movs	r3, #1
 800d35e:	6163      	str	r3, [r4, #20]
 800d360:	b003      	add	sp, #12
 800d362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d364:	ab01      	add	r3, sp, #4
 800d366:	466a      	mov	r2, sp
 800d368:	f7ff ffc8 	bl	800d2fc <__swhatbuf_r>
 800d36c:	9f00      	ldr	r7, [sp, #0]
 800d36e:	4605      	mov	r5, r0
 800d370:	4639      	mov	r1, r7
 800d372:	4630      	mov	r0, r6
 800d374:	f7fc f924 	bl	80095c0 <_malloc_r>
 800d378:	b948      	cbnz	r0, 800d38e <__smakebuf_r+0x46>
 800d37a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d37e:	059a      	lsls	r2, r3, #22
 800d380:	d4ee      	bmi.n	800d360 <__smakebuf_r+0x18>
 800d382:	f023 0303 	bic.w	r3, r3, #3
 800d386:	f043 0302 	orr.w	r3, r3, #2
 800d38a:	81a3      	strh	r3, [r4, #12]
 800d38c:	e7e2      	b.n	800d354 <__smakebuf_r+0xc>
 800d38e:	89a3      	ldrh	r3, [r4, #12]
 800d390:	6020      	str	r0, [r4, #0]
 800d392:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d396:	81a3      	strh	r3, [r4, #12]
 800d398:	9b01      	ldr	r3, [sp, #4]
 800d39a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d39e:	b15b      	cbz	r3, 800d3b8 <__smakebuf_r+0x70>
 800d3a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d3a4:	4630      	mov	r0, r6
 800d3a6:	f000 f849 	bl	800d43c <_isatty_r>
 800d3aa:	b128      	cbz	r0, 800d3b8 <__smakebuf_r+0x70>
 800d3ac:	89a3      	ldrh	r3, [r4, #12]
 800d3ae:	f023 0303 	bic.w	r3, r3, #3
 800d3b2:	f043 0301 	orr.w	r3, r3, #1
 800d3b6:	81a3      	strh	r3, [r4, #12]
 800d3b8:	89a3      	ldrh	r3, [r4, #12]
 800d3ba:	431d      	orrs	r5, r3
 800d3bc:	81a5      	strh	r5, [r4, #12]
 800d3be:	e7cf      	b.n	800d360 <__smakebuf_r+0x18>

0800d3c0 <memmove>:
 800d3c0:	4288      	cmp	r0, r1
 800d3c2:	b510      	push	{r4, lr}
 800d3c4:	eb01 0402 	add.w	r4, r1, r2
 800d3c8:	d902      	bls.n	800d3d0 <memmove+0x10>
 800d3ca:	4284      	cmp	r4, r0
 800d3cc:	4623      	mov	r3, r4
 800d3ce:	d807      	bhi.n	800d3e0 <memmove+0x20>
 800d3d0:	1e43      	subs	r3, r0, #1
 800d3d2:	42a1      	cmp	r1, r4
 800d3d4:	d008      	beq.n	800d3e8 <memmove+0x28>
 800d3d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d3da:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d3de:	e7f8      	b.n	800d3d2 <memmove+0x12>
 800d3e0:	4402      	add	r2, r0
 800d3e2:	4601      	mov	r1, r0
 800d3e4:	428a      	cmp	r2, r1
 800d3e6:	d100      	bne.n	800d3ea <memmove+0x2a>
 800d3e8:	bd10      	pop	{r4, pc}
 800d3ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d3ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d3f2:	e7f7      	b.n	800d3e4 <memmove+0x24>

0800d3f4 <strncmp>:
 800d3f4:	b510      	push	{r4, lr}
 800d3f6:	b16a      	cbz	r2, 800d414 <strncmp+0x20>
 800d3f8:	3901      	subs	r1, #1
 800d3fa:	1884      	adds	r4, r0, r2
 800d3fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d400:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d404:	429a      	cmp	r2, r3
 800d406:	d103      	bne.n	800d410 <strncmp+0x1c>
 800d408:	42a0      	cmp	r0, r4
 800d40a:	d001      	beq.n	800d410 <strncmp+0x1c>
 800d40c:	2a00      	cmp	r2, #0
 800d40e:	d1f5      	bne.n	800d3fc <strncmp+0x8>
 800d410:	1ad0      	subs	r0, r2, r3
 800d412:	bd10      	pop	{r4, pc}
 800d414:	4610      	mov	r0, r2
 800d416:	e7fc      	b.n	800d412 <strncmp+0x1e>

0800d418 <_fstat_r>:
 800d418:	b538      	push	{r3, r4, r5, lr}
 800d41a:	4d07      	ldr	r5, [pc, #28]	@ (800d438 <_fstat_r+0x20>)
 800d41c:	2300      	movs	r3, #0
 800d41e:	4604      	mov	r4, r0
 800d420:	4608      	mov	r0, r1
 800d422:	4611      	mov	r1, r2
 800d424:	602b      	str	r3, [r5, #0]
 800d426:	f7f3 fe1d 	bl	8001064 <_fstat>
 800d42a:	1c43      	adds	r3, r0, #1
 800d42c:	d102      	bne.n	800d434 <_fstat_r+0x1c>
 800d42e:	682b      	ldr	r3, [r5, #0]
 800d430:	b103      	cbz	r3, 800d434 <_fstat_r+0x1c>
 800d432:	6023      	str	r3, [r4, #0]
 800d434:	bd38      	pop	{r3, r4, r5, pc}
 800d436:	bf00      	nop
 800d438:	24004e74 	.word	0x24004e74

0800d43c <_isatty_r>:
 800d43c:	b538      	push	{r3, r4, r5, lr}
 800d43e:	4d06      	ldr	r5, [pc, #24]	@ (800d458 <_isatty_r+0x1c>)
 800d440:	2300      	movs	r3, #0
 800d442:	4604      	mov	r4, r0
 800d444:	4608      	mov	r0, r1
 800d446:	602b      	str	r3, [r5, #0]
 800d448:	f7f3 fe1c 	bl	8001084 <_isatty>
 800d44c:	1c43      	adds	r3, r0, #1
 800d44e:	d102      	bne.n	800d456 <_isatty_r+0x1a>
 800d450:	682b      	ldr	r3, [r5, #0]
 800d452:	b103      	cbz	r3, 800d456 <_isatty_r+0x1a>
 800d454:	6023      	str	r3, [r4, #0]
 800d456:	bd38      	pop	{r3, r4, r5, pc}
 800d458:	24004e74 	.word	0x24004e74
 800d45c:	00000000 	.word	0x00000000

0800d460 <nan>:
 800d460:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d468 <nan+0x8>
 800d464:	4770      	bx	lr
 800d466:	bf00      	nop
 800d468:	00000000 	.word	0x00000000
 800d46c:	7ff80000 	.word	0x7ff80000

0800d470 <_calloc_r>:
 800d470:	b570      	push	{r4, r5, r6, lr}
 800d472:	fba1 5402 	umull	r5, r4, r1, r2
 800d476:	b93c      	cbnz	r4, 800d488 <_calloc_r+0x18>
 800d478:	4629      	mov	r1, r5
 800d47a:	f7fc f8a1 	bl	80095c0 <_malloc_r>
 800d47e:	4606      	mov	r6, r0
 800d480:	b928      	cbnz	r0, 800d48e <_calloc_r+0x1e>
 800d482:	2600      	movs	r6, #0
 800d484:	4630      	mov	r0, r6
 800d486:	bd70      	pop	{r4, r5, r6, pc}
 800d488:	220c      	movs	r2, #12
 800d48a:	6002      	str	r2, [r0, #0]
 800d48c:	e7f9      	b.n	800d482 <_calloc_r+0x12>
 800d48e:	462a      	mov	r2, r5
 800d490:	4621      	mov	r1, r4
 800d492:	f7fd f9a1 	bl	800a7d8 <memset>
 800d496:	e7f5      	b.n	800d484 <_calloc_r+0x14>

0800d498 <rshift>:
 800d498:	6903      	ldr	r3, [r0, #16]
 800d49a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d49e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d4a2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d4a6:	f100 0414 	add.w	r4, r0, #20
 800d4aa:	dd45      	ble.n	800d538 <rshift+0xa0>
 800d4ac:	f011 011f 	ands.w	r1, r1, #31
 800d4b0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d4b4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d4b8:	d10c      	bne.n	800d4d4 <rshift+0x3c>
 800d4ba:	f100 0710 	add.w	r7, r0, #16
 800d4be:	4629      	mov	r1, r5
 800d4c0:	42b1      	cmp	r1, r6
 800d4c2:	d334      	bcc.n	800d52e <rshift+0x96>
 800d4c4:	1a9b      	subs	r3, r3, r2
 800d4c6:	009b      	lsls	r3, r3, #2
 800d4c8:	1eea      	subs	r2, r5, #3
 800d4ca:	4296      	cmp	r6, r2
 800d4cc:	bf38      	it	cc
 800d4ce:	2300      	movcc	r3, #0
 800d4d0:	4423      	add	r3, r4
 800d4d2:	e015      	b.n	800d500 <rshift+0x68>
 800d4d4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d4d8:	f1c1 0820 	rsb	r8, r1, #32
 800d4dc:	40cf      	lsrs	r7, r1
 800d4de:	f105 0e04 	add.w	lr, r5, #4
 800d4e2:	46a1      	mov	r9, r4
 800d4e4:	4576      	cmp	r6, lr
 800d4e6:	46f4      	mov	ip, lr
 800d4e8:	d815      	bhi.n	800d516 <rshift+0x7e>
 800d4ea:	1a9a      	subs	r2, r3, r2
 800d4ec:	0092      	lsls	r2, r2, #2
 800d4ee:	3a04      	subs	r2, #4
 800d4f0:	3501      	adds	r5, #1
 800d4f2:	42ae      	cmp	r6, r5
 800d4f4:	bf38      	it	cc
 800d4f6:	2200      	movcc	r2, #0
 800d4f8:	18a3      	adds	r3, r4, r2
 800d4fa:	50a7      	str	r7, [r4, r2]
 800d4fc:	b107      	cbz	r7, 800d500 <rshift+0x68>
 800d4fe:	3304      	adds	r3, #4
 800d500:	1b1a      	subs	r2, r3, r4
 800d502:	42a3      	cmp	r3, r4
 800d504:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d508:	bf08      	it	eq
 800d50a:	2300      	moveq	r3, #0
 800d50c:	6102      	str	r2, [r0, #16]
 800d50e:	bf08      	it	eq
 800d510:	6143      	streq	r3, [r0, #20]
 800d512:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d516:	f8dc c000 	ldr.w	ip, [ip]
 800d51a:	fa0c fc08 	lsl.w	ip, ip, r8
 800d51e:	ea4c 0707 	orr.w	r7, ip, r7
 800d522:	f849 7b04 	str.w	r7, [r9], #4
 800d526:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d52a:	40cf      	lsrs	r7, r1
 800d52c:	e7da      	b.n	800d4e4 <rshift+0x4c>
 800d52e:	f851 cb04 	ldr.w	ip, [r1], #4
 800d532:	f847 cf04 	str.w	ip, [r7, #4]!
 800d536:	e7c3      	b.n	800d4c0 <rshift+0x28>
 800d538:	4623      	mov	r3, r4
 800d53a:	e7e1      	b.n	800d500 <rshift+0x68>

0800d53c <__hexdig_fun>:
 800d53c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d540:	2b09      	cmp	r3, #9
 800d542:	d802      	bhi.n	800d54a <__hexdig_fun+0xe>
 800d544:	3820      	subs	r0, #32
 800d546:	b2c0      	uxtb	r0, r0
 800d548:	4770      	bx	lr
 800d54a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d54e:	2b05      	cmp	r3, #5
 800d550:	d801      	bhi.n	800d556 <__hexdig_fun+0x1a>
 800d552:	3847      	subs	r0, #71	@ 0x47
 800d554:	e7f7      	b.n	800d546 <__hexdig_fun+0xa>
 800d556:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d55a:	2b05      	cmp	r3, #5
 800d55c:	d801      	bhi.n	800d562 <__hexdig_fun+0x26>
 800d55e:	3827      	subs	r0, #39	@ 0x27
 800d560:	e7f1      	b.n	800d546 <__hexdig_fun+0xa>
 800d562:	2000      	movs	r0, #0
 800d564:	4770      	bx	lr
	...

0800d568 <__gethex>:
 800d568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d56c:	b085      	sub	sp, #20
 800d56e:	468a      	mov	sl, r1
 800d570:	9302      	str	r3, [sp, #8]
 800d572:	680b      	ldr	r3, [r1, #0]
 800d574:	9001      	str	r0, [sp, #4]
 800d576:	4690      	mov	r8, r2
 800d578:	1c9c      	adds	r4, r3, #2
 800d57a:	46a1      	mov	r9, r4
 800d57c:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d580:	2830      	cmp	r0, #48	@ 0x30
 800d582:	d0fa      	beq.n	800d57a <__gethex+0x12>
 800d584:	eba9 0303 	sub.w	r3, r9, r3
 800d588:	f1a3 0b02 	sub.w	fp, r3, #2
 800d58c:	f7ff ffd6 	bl	800d53c <__hexdig_fun>
 800d590:	4605      	mov	r5, r0
 800d592:	2800      	cmp	r0, #0
 800d594:	d168      	bne.n	800d668 <__gethex+0x100>
 800d596:	49a0      	ldr	r1, [pc, #640]	@ (800d818 <__gethex+0x2b0>)
 800d598:	2201      	movs	r2, #1
 800d59a:	4648      	mov	r0, r9
 800d59c:	f7ff ff2a 	bl	800d3f4 <strncmp>
 800d5a0:	4607      	mov	r7, r0
 800d5a2:	2800      	cmp	r0, #0
 800d5a4:	d167      	bne.n	800d676 <__gethex+0x10e>
 800d5a6:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d5aa:	4626      	mov	r6, r4
 800d5ac:	f7ff ffc6 	bl	800d53c <__hexdig_fun>
 800d5b0:	2800      	cmp	r0, #0
 800d5b2:	d062      	beq.n	800d67a <__gethex+0x112>
 800d5b4:	4623      	mov	r3, r4
 800d5b6:	7818      	ldrb	r0, [r3, #0]
 800d5b8:	2830      	cmp	r0, #48	@ 0x30
 800d5ba:	4699      	mov	r9, r3
 800d5bc:	f103 0301 	add.w	r3, r3, #1
 800d5c0:	d0f9      	beq.n	800d5b6 <__gethex+0x4e>
 800d5c2:	f7ff ffbb 	bl	800d53c <__hexdig_fun>
 800d5c6:	fab0 f580 	clz	r5, r0
 800d5ca:	096d      	lsrs	r5, r5, #5
 800d5cc:	f04f 0b01 	mov.w	fp, #1
 800d5d0:	464a      	mov	r2, r9
 800d5d2:	4616      	mov	r6, r2
 800d5d4:	3201      	adds	r2, #1
 800d5d6:	7830      	ldrb	r0, [r6, #0]
 800d5d8:	f7ff ffb0 	bl	800d53c <__hexdig_fun>
 800d5dc:	2800      	cmp	r0, #0
 800d5de:	d1f8      	bne.n	800d5d2 <__gethex+0x6a>
 800d5e0:	498d      	ldr	r1, [pc, #564]	@ (800d818 <__gethex+0x2b0>)
 800d5e2:	2201      	movs	r2, #1
 800d5e4:	4630      	mov	r0, r6
 800d5e6:	f7ff ff05 	bl	800d3f4 <strncmp>
 800d5ea:	2800      	cmp	r0, #0
 800d5ec:	d13f      	bne.n	800d66e <__gethex+0x106>
 800d5ee:	b944      	cbnz	r4, 800d602 <__gethex+0x9a>
 800d5f0:	1c74      	adds	r4, r6, #1
 800d5f2:	4622      	mov	r2, r4
 800d5f4:	4616      	mov	r6, r2
 800d5f6:	3201      	adds	r2, #1
 800d5f8:	7830      	ldrb	r0, [r6, #0]
 800d5fa:	f7ff ff9f 	bl	800d53c <__hexdig_fun>
 800d5fe:	2800      	cmp	r0, #0
 800d600:	d1f8      	bne.n	800d5f4 <__gethex+0x8c>
 800d602:	1ba4      	subs	r4, r4, r6
 800d604:	00a7      	lsls	r7, r4, #2
 800d606:	7833      	ldrb	r3, [r6, #0]
 800d608:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d60c:	2b50      	cmp	r3, #80	@ 0x50
 800d60e:	d13e      	bne.n	800d68e <__gethex+0x126>
 800d610:	7873      	ldrb	r3, [r6, #1]
 800d612:	2b2b      	cmp	r3, #43	@ 0x2b
 800d614:	d033      	beq.n	800d67e <__gethex+0x116>
 800d616:	2b2d      	cmp	r3, #45	@ 0x2d
 800d618:	d034      	beq.n	800d684 <__gethex+0x11c>
 800d61a:	1c71      	adds	r1, r6, #1
 800d61c:	2400      	movs	r4, #0
 800d61e:	7808      	ldrb	r0, [r1, #0]
 800d620:	f7ff ff8c 	bl	800d53c <__hexdig_fun>
 800d624:	1e43      	subs	r3, r0, #1
 800d626:	b2db      	uxtb	r3, r3
 800d628:	2b18      	cmp	r3, #24
 800d62a:	d830      	bhi.n	800d68e <__gethex+0x126>
 800d62c:	f1a0 0210 	sub.w	r2, r0, #16
 800d630:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d634:	f7ff ff82 	bl	800d53c <__hexdig_fun>
 800d638:	f100 3cff 	add.w	ip, r0, #4294967295
 800d63c:	fa5f fc8c 	uxtb.w	ip, ip
 800d640:	f1bc 0f18 	cmp.w	ip, #24
 800d644:	f04f 030a 	mov.w	r3, #10
 800d648:	d91e      	bls.n	800d688 <__gethex+0x120>
 800d64a:	b104      	cbz	r4, 800d64e <__gethex+0xe6>
 800d64c:	4252      	negs	r2, r2
 800d64e:	4417      	add	r7, r2
 800d650:	f8ca 1000 	str.w	r1, [sl]
 800d654:	b1ed      	cbz	r5, 800d692 <__gethex+0x12a>
 800d656:	f1bb 0f00 	cmp.w	fp, #0
 800d65a:	bf0c      	ite	eq
 800d65c:	2506      	moveq	r5, #6
 800d65e:	2500      	movne	r5, #0
 800d660:	4628      	mov	r0, r5
 800d662:	b005      	add	sp, #20
 800d664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d668:	2500      	movs	r5, #0
 800d66a:	462c      	mov	r4, r5
 800d66c:	e7b0      	b.n	800d5d0 <__gethex+0x68>
 800d66e:	2c00      	cmp	r4, #0
 800d670:	d1c7      	bne.n	800d602 <__gethex+0x9a>
 800d672:	4627      	mov	r7, r4
 800d674:	e7c7      	b.n	800d606 <__gethex+0x9e>
 800d676:	464e      	mov	r6, r9
 800d678:	462f      	mov	r7, r5
 800d67a:	2501      	movs	r5, #1
 800d67c:	e7c3      	b.n	800d606 <__gethex+0x9e>
 800d67e:	2400      	movs	r4, #0
 800d680:	1cb1      	adds	r1, r6, #2
 800d682:	e7cc      	b.n	800d61e <__gethex+0xb6>
 800d684:	2401      	movs	r4, #1
 800d686:	e7fb      	b.n	800d680 <__gethex+0x118>
 800d688:	fb03 0002 	mla	r0, r3, r2, r0
 800d68c:	e7ce      	b.n	800d62c <__gethex+0xc4>
 800d68e:	4631      	mov	r1, r6
 800d690:	e7de      	b.n	800d650 <__gethex+0xe8>
 800d692:	eba6 0309 	sub.w	r3, r6, r9
 800d696:	3b01      	subs	r3, #1
 800d698:	4629      	mov	r1, r5
 800d69a:	2b07      	cmp	r3, #7
 800d69c:	dc0a      	bgt.n	800d6b4 <__gethex+0x14c>
 800d69e:	9801      	ldr	r0, [sp, #4]
 800d6a0:	f7fe f802 	bl	800b6a8 <_Balloc>
 800d6a4:	4604      	mov	r4, r0
 800d6a6:	b940      	cbnz	r0, 800d6ba <__gethex+0x152>
 800d6a8:	4b5c      	ldr	r3, [pc, #368]	@ (800d81c <__gethex+0x2b4>)
 800d6aa:	4602      	mov	r2, r0
 800d6ac:	21e4      	movs	r1, #228	@ 0xe4
 800d6ae:	485c      	ldr	r0, [pc, #368]	@ (800d820 <__gethex+0x2b8>)
 800d6b0:	f7fb ff3e 	bl	8009530 <__assert_func>
 800d6b4:	3101      	adds	r1, #1
 800d6b6:	105b      	asrs	r3, r3, #1
 800d6b8:	e7ef      	b.n	800d69a <__gethex+0x132>
 800d6ba:	f100 0a14 	add.w	sl, r0, #20
 800d6be:	2300      	movs	r3, #0
 800d6c0:	4655      	mov	r5, sl
 800d6c2:	469b      	mov	fp, r3
 800d6c4:	45b1      	cmp	r9, r6
 800d6c6:	d337      	bcc.n	800d738 <__gethex+0x1d0>
 800d6c8:	f845 bb04 	str.w	fp, [r5], #4
 800d6cc:	eba5 050a 	sub.w	r5, r5, sl
 800d6d0:	10ad      	asrs	r5, r5, #2
 800d6d2:	6125      	str	r5, [r4, #16]
 800d6d4:	4658      	mov	r0, fp
 800d6d6:	f7fe f8d9 	bl	800b88c <__hi0bits>
 800d6da:	016d      	lsls	r5, r5, #5
 800d6dc:	f8d8 6000 	ldr.w	r6, [r8]
 800d6e0:	1a2d      	subs	r5, r5, r0
 800d6e2:	42b5      	cmp	r5, r6
 800d6e4:	dd54      	ble.n	800d790 <__gethex+0x228>
 800d6e6:	1bad      	subs	r5, r5, r6
 800d6e8:	4629      	mov	r1, r5
 800d6ea:	4620      	mov	r0, r4
 800d6ec:	f7fe fc6a 	bl	800bfc4 <__any_on>
 800d6f0:	4681      	mov	r9, r0
 800d6f2:	b178      	cbz	r0, 800d714 <__gethex+0x1ac>
 800d6f4:	1e6b      	subs	r3, r5, #1
 800d6f6:	1159      	asrs	r1, r3, #5
 800d6f8:	f003 021f 	and.w	r2, r3, #31
 800d6fc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d700:	f04f 0901 	mov.w	r9, #1
 800d704:	fa09 f202 	lsl.w	r2, r9, r2
 800d708:	420a      	tst	r2, r1
 800d70a:	d003      	beq.n	800d714 <__gethex+0x1ac>
 800d70c:	454b      	cmp	r3, r9
 800d70e:	dc36      	bgt.n	800d77e <__gethex+0x216>
 800d710:	f04f 0902 	mov.w	r9, #2
 800d714:	4629      	mov	r1, r5
 800d716:	4620      	mov	r0, r4
 800d718:	f7ff febe 	bl	800d498 <rshift>
 800d71c:	442f      	add	r7, r5
 800d71e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d722:	42bb      	cmp	r3, r7
 800d724:	da42      	bge.n	800d7ac <__gethex+0x244>
 800d726:	9801      	ldr	r0, [sp, #4]
 800d728:	4621      	mov	r1, r4
 800d72a:	f7fd fffd 	bl	800b728 <_Bfree>
 800d72e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d730:	2300      	movs	r3, #0
 800d732:	6013      	str	r3, [r2, #0]
 800d734:	25a3      	movs	r5, #163	@ 0xa3
 800d736:	e793      	b.n	800d660 <__gethex+0xf8>
 800d738:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d73c:	2a2e      	cmp	r2, #46	@ 0x2e
 800d73e:	d012      	beq.n	800d766 <__gethex+0x1fe>
 800d740:	2b20      	cmp	r3, #32
 800d742:	d104      	bne.n	800d74e <__gethex+0x1e6>
 800d744:	f845 bb04 	str.w	fp, [r5], #4
 800d748:	f04f 0b00 	mov.w	fp, #0
 800d74c:	465b      	mov	r3, fp
 800d74e:	7830      	ldrb	r0, [r6, #0]
 800d750:	9303      	str	r3, [sp, #12]
 800d752:	f7ff fef3 	bl	800d53c <__hexdig_fun>
 800d756:	9b03      	ldr	r3, [sp, #12]
 800d758:	f000 000f 	and.w	r0, r0, #15
 800d75c:	4098      	lsls	r0, r3
 800d75e:	ea4b 0b00 	orr.w	fp, fp, r0
 800d762:	3304      	adds	r3, #4
 800d764:	e7ae      	b.n	800d6c4 <__gethex+0x15c>
 800d766:	45b1      	cmp	r9, r6
 800d768:	d8ea      	bhi.n	800d740 <__gethex+0x1d8>
 800d76a:	492b      	ldr	r1, [pc, #172]	@ (800d818 <__gethex+0x2b0>)
 800d76c:	9303      	str	r3, [sp, #12]
 800d76e:	2201      	movs	r2, #1
 800d770:	4630      	mov	r0, r6
 800d772:	f7ff fe3f 	bl	800d3f4 <strncmp>
 800d776:	9b03      	ldr	r3, [sp, #12]
 800d778:	2800      	cmp	r0, #0
 800d77a:	d1e1      	bne.n	800d740 <__gethex+0x1d8>
 800d77c:	e7a2      	b.n	800d6c4 <__gethex+0x15c>
 800d77e:	1ea9      	subs	r1, r5, #2
 800d780:	4620      	mov	r0, r4
 800d782:	f7fe fc1f 	bl	800bfc4 <__any_on>
 800d786:	2800      	cmp	r0, #0
 800d788:	d0c2      	beq.n	800d710 <__gethex+0x1a8>
 800d78a:	f04f 0903 	mov.w	r9, #3
 800d78e:	e7c1      	b.n	800d714 <__gethex+0x1ac>
 800d790:	da09      	bge.n	800d7a6 <__gethex+0x23e>
 800d792:	1b75      	subs	r5, r6, r5
 800d794:	4621      	mov	r1, r4
 800d796:	9801      	ldr	r0, [sp, #4]
 800d798:	462a      	mov	r2, r5
 800d79a:	f7fe f9dd 	bl	800bb58 <__lshift>
 800d79e:	1b7f      	subs	r7, r7, r5
 800d7a0:	4604      	mov	r4, r0
 800d7a2:	f100 0a14 	add.w	sl, r0, #20
 800d7a6:	f04f 0900 	mov.w	r9, #0
 800d7aa:	e7b8      	b.n	800d71e <__gethex+0x1b6>
 800d7ac:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d7b0:	42bd      	cmp	r5, r7
 800d7b2:	dd6f      	ble.n	800d894 <__gethex+0x32c>
 800d7b4:	1bed      	subs	r5, r5, r7
 800d7b6:	42ae      	cmp	r6, r5
 800d7b8:	dc34      	bgt.n	800d824 <__gethex+0x2bc>
 800d7ba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d7be:	2b02      	cmp	r3, #2
 800d7c0:	d022      	beq.n	800d808 <__gethex+0x2a0>
 800d7c2:	2b03      	cmp	r3, #3
 800d7c4:	d024      	beq.n	800d810 <__gethex+0x2a8>
 800d7c6:	2b01      	cmp	r3, #1
 800d7c8:	d115      	bne.n	800d7f6 <__gethex+0x28e>
 800d7ca:	42ae      	cmp	r6, r5
 800d7cc:	d113      	bne.n	800d7f6 <__gethex+0x28e>
 800d7ce:	2e01      	cmp	r6, #1
 800d7d0:	d10b      	bne.n	800d7ea <__gethex+0x282>
 800d7d2:	9a02      	ldr	r2, [sp, #8]
 800d7d4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d7d8:	6013      	str	r3, [r2, #0]
 800d7da:	2301      	movs	r3, #1
 800d7dc:	6123      	str	r3, [r4, #16]
 800d7de:	f8ca 3000 	str.w	r3, [sl]
 800d7e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d7e4:	2562      	movs	r5, #98	@ 0x62
 800d7e6:	601c      	str	r4, [r3, #0]
 800d7e8:	e73a      	b.n	800d660 <__gethex+0xf8>
 800d7ea:	1e71      	subs	r1, r6, #1
 800d7ec:	4620      	mov	r0, r4
 800d7ee:	f7fe fbe9 	bl	800bfc4 <__any_on>
 800d7f2:	2800      	cmp	r0, #0
 800d7f4:	d1ed      	bne.n	800d7d2 <__gethex+0x26a>
 800d7f6:	9801      	ldr	r0, [sp, #4]
 800d7f8:	4621      	mov	r1, r4
 800d7fa:	f7fd ff95 	bl	800b728 <_Bfree>
 800d7fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d800:	2300      	movs	r3, #0
 800d802:	6013      	str	r3, [r2, #0]
 800d804:	2550      	movs	r5, #80	@ 0x50
 800d806:	e72b      	b.n	800d660 <__gethex+0xf8>
 800d808:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d1f3      	bne.n	800d7f6 <__gethex+0x28e>
 800d80e:	e7e0      	b.n	800d7d2 <__gethex+0x26a>
 800d810:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d812:	2b00      	cmp	r3, #0
 800d814:	d1dd      	bne.n	800d7d2 <__gethex+0x26a>
 800d816:	e7ee      	b.n	800d7f6 <__gethex+0x28e>
 800d818:	0800dee0 	.word	0x0800dee0
 800d81c:	0800dd79 	.word	0x0800dd79
 800d820:	0800e052 	.word	0x0800e052
 800d824:	1e6f      	subs	r7, r5, #1
 800d826:	f1b9 0f00 	cmp.w	r9, #0
 800d82a:	d130      	bne.n	800d88e <__gethex+0x326>
 800d82c:	b127      	cbz	r7, 800d838 <__gethex+0x2d0>
 800d82e:	4639      	mov	r1, r7
 800d830:	4620      	mov	r0, r4
 800d832:	f7fe fbc7 	bl	800bfc4 <__any_on>
 800d836:	4681      	mov	r9, r0
 800d838:	117a      	asrs	r2, r7, #5
 800d83a:	2301      	movs	r3, #1
 800d83c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d840:	f007 071f 	and.w	r7, r7, #31
 800d844:	40bb      	lsls	r3, r7
 800d846:	4213      	tst	r3, r2
 800d848:	4629      	mov	r1, r5
 800d84a:	4620      	mov	r0, r4
 800d84c:	bf18      	it	ne
 800d84e:	f049 0902 	orrne.w	r9, r9, #2
 800d852:	f7ff fe21 	bl	800d498 <rshift>
 800d856:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d85a:	1b76      	subs	r6, r6, r5
 800d85c:	2502      	movs	r5, #2
 800d85e:	f1b9 0f00 	cmp.w	r9, #0
 800d862:	d047      	beq.n	800d8f4 <__gethex+0x38c>
 800d864:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d868:	2b02      	cmp	r3, #2
 800d86a:	d015      	beq.n	800d898 <__gethex+0x330>
 800d86c:	2b03      	cmp	r3, #3
 800d86e:	d017      	beq.n	800d8a0 <__gethex+0x338>
 800d870:	2b01      	cmp	r3, #1
 800d872:	d109      	bne.n	800d888 <__gethex+0x320>
 800d874:	f019 0f02 	tst.w	r9, #2
 800d878:	d006      	beq.n	800d888 <__gethex+0x320>
 800d87a:	f8da 3000 	ldr.w	r3, [sl]
 800d87e:	ea49 0903 	orr.w	r9, r9, r3
 800d882:	f019 0f01 	tst.w	r9, #1
 800d886:	d10e      	bne.n	800d8a6 <__gethex+0x33e>
 800d888:	f045 0510 	orr.w	r5, r5, #16
 800d88c:	e032      	b.n	800d8f4 <__gethex+0x38c>
 800d88e:	f04f 0901 	mov.w	r9, #1
 800d892:	e7d1      	b.n	800d838 <__gethex+0x2d0>
 800d894:	2501      	movs	r5, #1
 800d896:	e7e2      	b.n	800d85e <__gethex+0x2f6>
 800d898:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d89a:	f1c3 0301 	rsb	r3, r3, #1
 800d89e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d8a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d0f0      	beq.n	800d888 <__gethex+0x320>
 800d8a6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d8aa:	f104 0314 	add.w	r3, r4, #20
 800d8ae:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d8b2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d8b6:	f04f 0c00 	mov.w	ip, #0
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8c0:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d8c4:	d01b      	beq.n	800d8fe <__gethex+0x396>
 800d8c6:	3201      	adds	r2, #1
 800d8c8:	6002      	str	r2, [r0, #0]
 800d8ca:	2d02      	cmp	r5, #2
 800d8cc:	f104 0314 	add.w	r3, r4, #20
 800d8d0:	d13c      	bne.n	800d94c <__gethex+0x3e4>
 800d8d2:	f8d8 2000 	ldr.w	r2, [r8]
 800d8d6:	3a01      	subs	r2, #1
 800d8d8:	42b2      	cmp	r2, r6
 800d8da:	d109      	bne.n	800d8f0 <__gethex+0x388>
 800d8dc:	1171      	asrs	r1, r6, #5
 800d8de:	2201      	movs	r2, #1
 800d8e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d8e4:	f006 061f 	and.w	r6, r6, #31
 800d8e8:	fa02 f606 	lsl.w	r6, r2, r6
 800d8ec:	421e      	tst	r6, r3
 800d8ee:	d13a      	bne.n	800d966 <__gethex+0x3fe>
 800d8f0:	f045 0520 	orr.w	r5, r5, #32
 800d8f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d8f6:	601c      	str	r4, [r3, #0]
 800d8f8:	9b02      	ldr	r3, [sp, #8]
 800d8fa:	601f      	str	r7, [r3, #0]
 800d8fc:	e6b0      	b.n	800d660 <__gethex+0xf8>
 800d8fe:	4299      	cmp	r1, r3
 800d900:	f843 cc04 	str.w	ip, [r3, #-4]
 800d904:	d8d9      	bhi.n	800d8ba <__gethex+0x352>
 800d906:	68a3      	ldr	r3, [r4, #8]
 800d908:	459b      	cmp	fp, r3
 800d90a:	db17      	blt.n	800d93c <__gethex+0x3d4>
 800d90c:	6861      	ldr	r1, [r4, #4]
 800d90e:	9801      	ldr	r0, [sp, #4]
 800d910:	3101      	adds	r1, #1
 800d912:	f7fd fec9 	bl	800b6a8 <_Balloc>
 800d916:	4681      	mov	r9, r0
 800d918:	b918      	cbnz	r0, 800d922 <__gethex+0x3ba>
 800d91a:	4b1a      	ldr	r3, [pc, #104]	@ (800d984 <__gethex+0x41c>)
 800d91c:	4602      	mov	r2, r0
 800d91e:	2184      	movs	r1, #132	@ 0x84
 800d920:	e6c5      	b.n	800d6ae <__gethex+0x146>
 800d922:	6922      	ldr	r2, [r4, #16]
 800d924:	3202      	adds	r2, #2
 800d926:	f104 010c 	add.w	r1, r4, #12
 800d92a:	0092      	lsls	r2, r2, #2
 800d92c:	300c      	adds	r0, #12
 800d92e:	f7fd f87c 	bl	800aa2a <memcpy>
 800d932:	4621      	mov	r1, r4
 800d934:	9801      	ldr	r0, [sp, #4]
 800d936:	f7fd fef7 	bl	800b728 <_Bfree>
 800d93a:	464c      	mov	r4, r9
 800d93c:	6923      	ldr	r3, [r4, #16]
 800d93e:	1c5a      	adds	r2, r3, #1
 800d940:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d944:	6122      	str	r2, [r4, #16]
 800d946:	2201      	movs	r2, #1
 800d948:	615a      	str	r2, [r3, #20]
 800d94a:	e7be      	b.n	800d8ca <__gethex+0x362>
 800d94c:	6922      	ldr	r2, [r4, #16]
 800d94e:	455a      	cmp	r2, fp
 800d950:	dd0b      	ble.n	800d96a <__gethex+0x402>
 800d952:	2101      	movs	r1, #1
 800d954:	4620      	mov	r0, r4
 800d956:	f7ff fd9f 	bl	800d498 <rshift>
 800d95a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d95e:	3701      	adds	r7, #1
 800d960:	42bb      	cmp	r3, r7
 800d962:	f6ff aee0 	blt.w	800d726 <__gethex+0x1be>
 800d966:	2501      	movs	r5, #1
 800d968:	e7c2      	b.n	800d8f0 <__gethex+0x388>
 800d96a:	f016 061f 	ands.w	r6, r6, #31
 800d96e:	d0fa      	beq.n	800d966 <__gethex+0x3fe>
 800d970:	4453      	add	r3, sl
 800d972:	f1c6 0620 	rsb	r6, r6, #32
 800d976:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d97a:	f7fd ff87 	bl	800b88c <__hi0bits>
 800d97e:	42b0      	cmp	r0, r6
 800d980:	dbe7      	blt.n	800d952 <__gethex+0x3ea>
 800d982:	e7f0      	b.n	800d966 <__gethex+0x3fe>
 800d984:	0800dd79 	.word	0x0800dd79

0800d988 <L_shift>:
 800d988:	f1c2 0208 	rsb	r2, r2, #8
 800d98c:	0092      	lsls	r2, r2, #2
 800d98e:	b570      	push	{r4, r5, r6, lr}
 800d990:	f1c2 0620 	rsb	r6, r2, #32
 800d994:	6843      	ldr	r3, [r0, #4]
 800d996:	6804      	ldr	r4, [r0, #0]
 800d998:	fa03 f506 	lsl.w	r5, r3, r6
 800d99c:	432c      	orrs	r4, r5
 800d99e:	40d3      	lsrs	r3, r2
 800d9a0:	6004      	str	r4, [r0, #0]
 800d9a2:	f840 3f04 	str.w	r3, [r0, #4]!
 800d9a6:	4288      	cmp	r0, r1
 800d9a8:	d3f4      	bcc.n	800d994 <L_shift+0xc>
 800d9aa:	bd70      	pop	{r4, r5, r6, pc}

0800d9ac <__match>:
 800d9ac:	b530      	push	{r4, r5, lr}
 800d9ae:	6803      	ldr	r3, [r0, #0]
 800d9b0:	3301      	adds	r3, #1
 800d9b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d9b6:	b914      	cbnz	r4, 800d9be <__match+0x12>
 800d9b8:	6003      	str	r3, [r0, #0]
 800d9ba:	2001      	movs	r0, #1
 800d9bc:	bd30      	pop	{r4, r5, pc}
 800d9be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d9c2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d9c6:	2d19      	cmp	r5, #25
 800d9c8:	bf98      	it	ls
 800d9ca:	3220      	addls	r2, #32
 800d9cc:	42a2      	cmp	r2, r4
 800d9ce:	d0f0      	beq.n	800d9b2 <__match+0x6>
 800d9d0:	2000      	movs	r0, #0
 800d9d2:	e7f3      	b.n	800d9bc <__match+0x10>

0800d9d4 <__hexnan>:
 800d9d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9d8:	680b      	ldr	r3, [r1, #0]
 800d9da:	6801      	ldr	r1, [r0, #0]
 800d9dc:	115e      	asrs	r6, r3, #5
 800d9de:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d9e2:	f013 031f 	ands.w	r3, r3, #31
 800d9e6:	b087      	sub	sp, #28
 800d9e8:	bf18      	it	ne
 800d9ea:	3604      	addne	r6, #4
 800d9ec:	2500      	movs	r5, #0
 800d9ee:	1f37      	subs	r7, r6, #4
 800d9f0:	4682      	mov	sl, r0
 800d9f2:	4690      	mov	r8, r2
 800d9f4:	9301      	str	r3, [sp, #4]
 800d9f6:	f846 5c04 	str.w	r5, [r6, #-4]
 800d9fa:	46b9      	mov	r9, r7
 800d9fc:	463c      	mov	r4, r7
 800d9fe:	9502      	str	r5, [sp, #8]
 800da00:	46ab      	mov	fp, r5
 800da02:	784a      	ldrb	r2, [r1, #1]
 800da04:	1c4b      	adds	r3, r1, #1
 800da06:	9303      	str	r3, [sp, #12]
 800da08:	b342      	cbz	r2, 800da5c <__hexnan+0x88>
 800da0a:	4610      	mov	r0, r2
 800da0c:	9105      	str	r1, [sp, #20]
 800da0e:	9204      	str	r2, [sp, #16]
 800da10:	f7ff fd94 	bl	800d53c <__hexdig_fun>
 800da14:	2800      	cmp	r0, #0
 800da16:	d151      	bne.n	800dabc <__hexnan+0xe8>
 800da18:	9a04      	ldr	r2, [sp, #16]
 800da1a:	9905      	ldr	r1, [sp, #20]
 800da1c:	2a20      	cmp	r2, #32
 800da1e:	d818      	bhi.n	800da52 <__hexnan+0x7e>
 800da20:	9b02      	ldr	r3, [sp, #8]
 800da22:	459b      	cmp	fp, r3
 800da24:	dd13      	ble.n	800da4e <__hexnan+0x7a>
 800da26:	454c      	cmp	r4, r9
 800da28:	d206      	bcs.n	800da38 <__hexnan+0x64>
 800da2a:	2d07      	cmp	r5, #7
 800da2c:	dc04      	bgt.n	800da38 <__hexnan+0x64>
 800da2e:	462a      	mov	r2, r5
 800da30:	4649      	mov	r1, r9
 800da32:	4620      	mov	r0, r4
 800da34:	f7ff ffa8 	bl	800d988 <L_shift>
 800da38:	4544      	cmp	r4, r8
 800da3a:	d952      	bls.n	800dae2 <__hexnan+0x10e>
 800da3c:	2300      	movs	r3, #0
 800da3e:	f1a4 0904 	sub.w	r9, r4, #4
 800da42:	f844 3c04 	str.w	r3, [r4, #-4]
 800da46:	f8cd b008 	str.w	fp, [sp, #8]
 800da4a:	464c      	mov	r4, r9
 800da4c:	461d      	mov	r5, r3
 800da4e:	9903      	ldr	r1, [sp, #12]
 800da50:	e7d7      	b.n	800da02 <__hexnan+0x2e>
 800da52:	2a29      	cmp	r2, #41	@ 0x29
 800da54:	d157      	bne.n	800db06 <__hexnan+0x132>
 800da56:	3102      	adds	r1, #2
 800da58:	f8ca 1000 	str.w	r1, [sl]
 800da5c:	f1bb 0f00 	cmp.w	fp, #0
 800da60:	d051      	beq.n	800db06 <__hexnan+0x132>
 800da62:	454c      	cmp	r4, r9
 800da64:	d206      	bcs.n	800da74 <__hexnan+0xa0>
 800da66:	2d07      	cmp	r5, #7
 800da68:	dc04      	bgt.n	800da74 <__hexnan+0xa0>
 800da6a:	462a      	mov	r2, r5
 800da6c:	4649      	mov	r1, r9
 800da6e:	4620      	mov	r0, r4
 800da70:	f7ff ff8a 	bl	800d988 <L_shift>
 800da74:	4544      	cmp	r4, r8
 800da76:	d936      	bls.n	800dae6 <__hexnan+0x112>
 800da78:	f1a8 0204 	sub.w	r2, r8, #4
 800da7c:	4623      	mov	r3, r4
 800da7e:	f853 1b04 	ldr.w	r1, [r3], #4
 800da82:	f842 1f04 	str.w	r1, [r2, #4]!
 800da86:	429f      	cmp	r7, r3
 800da88:	d2f9      	bcs.n	800da7e <__hexnan+0xaa>
 800da8a:	1b3b      	subs	r3, r7, r4
 800da8c:	f023 0303 	bic.w	r3, r3, #3
 800da90:	3304      	adds	r3, #4
 800da92:	3401      	adds	r4, #1
 800da94:	3e03      	subs	r6, #3
 800da96:	42b4      	cmp	r4, r6
 800da98:	bf88      	it	hi
 800da9a:	2304      	movhi	r3, #4
 800da9c:	4443      	add	r3, r8
 800da9e:	2200      	movs	r2, #0
 800daa0:	f843 2b04 	str.w	r2, [r3], #4
 800daa4:	429f      	cmp	r7, r3
 800daa6:	d2fb      	bcs.n	800daa0 <__hexnan+0xcc>
 800daa8:	683b      	ldr	r3, [r7, #0]
 800daaa:	b91b      	cbnz	r3, 800dab4 <__hexnan+0xe0>
 800daac:	4547      	cmp	r7, r8
 800daae:	d128      	bne.n	800db02 <__hexnan+0x12e>
 800dab0:	2301      	movs	r3, #1
 800dab2:	603b      	str	r3, [r7, #0]
 800dab4:	2005      	movs	r0, #5
 800dab6:	b007      	add	sp, #28
 800dab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dabc:	3501      	adds	r5, #1
 800dabe:	2d08      	cmp	r5, #8
 800dac0:	f10b 0b01 	add.w	fp, fp, #1
 800dac4:	dd06      	ble.n	800dad4 <__hexnan+0x100>
 800dac6:	4544      	cmp	r4, r8
 800dac8:	d9c1      	bls.n	800da4e <__hexnan+0x7a>
 800daca:	2300      	movs	r3, #0
 800dacc:	f844 3c04 	str.w	r3, [r4, #-4]
 800dad0:	2501      	movs	r5, #1
 800dad2:	3c04      	subs	r4, #4
 800dad4:	6822      	ldr	r2, [r4, #0]
 800dad6:	f000 000f 	and.w	r0, r0, #15
 800dada:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800dade:	6020      	str	r0, [r4, #0]
 800dae0:	e7b5      	b.n	800da4e <__hexnan+0x7a>
 800dae2:	2508      	movs	r5, #8
 800dae4:	e7b3      	b.n	800da4e <__hexnan+0x7a>
 800dae6:	9b01      	ldr	r3, [sp, #4]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d0dd      	beq.n	800daa8 <__hexnan+0xd4>
 800daec:	f1c3 0320 	rsb	r3, r3, #32
 800daf0:	f04f 32ff 	mov.w	r2, #4294967295
 800daf4:	40da      	lsrs	r2, r3
 800daf6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800dafa:	4013      	ands	r3, r2
 800dafc:	f846 3c04 	str.w	r3, [r6, #-4]
 800db00:	e7d2      	b.n	800daa8 <__hexnan+0xd4>
 800db02:	3f04      	subs	r7, #4
 800db04:	e7d0      	b.n	800daa8 <__hexnan+0xd4>
 800db06:	2004      	movs	r0, #4
 800db08:	e7d5      	b.n	800dab6 <__hexnan+0xe2>

0800db0a <__ascii_mbtowc>:
 800db0a:	b082      	sub	sp, #8
 800db0c:	b901      	cbnz	r1, 800db10 <__ascii_mbtowc+0x6>
 800db0e:	a901      	add	r1, sp, #4
 800db10:	b142      	cbz	r2, 800db24 <__ascii_mbtowc+0x1a>
 800db12:	b14b      	cbz	r3, 800db28 <__ascii_mbtowc+0x1e>
 800db14:	7813      	ldrb	r3, [r2, #0]
 800db16:	600b      	str	r3, [r1, #0]
 800db18:	7812      	ldrb	r2, [r2, #0]
 800db1a:	1e10      	subs	r0, r2, #0
 800db1c:	bf18      	it	ne
 800db1e:	2001      	movne	r0, #1
 800db20:	b002      	add	sp, #8
 800db22:	4770      	bx	lr
 800db24:	4610      	mov	r0, r2
 800db26:	e7fb      	b.n	800db20 <__ascii_mbtowc+0x16>
 800db28:	f06f 0001 	mvn.w	r0, #1
 800db2c:	e7f8      	b.n	800db20 <__ascii_mbtowc+0x16>

0800db2e <_realloc_r>:
 800db2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db32:	4680      	mov	r8, r0
 800db34:	4615      	mov	r5, r2
 800db36:	460c      	mov	r4, r1
 800db38:	b921      	cbnz	r1, 800db44 <_realloc_r+0x16>
 800db3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db3e:	4611      	mov	r1, r2
 800db40:	f7fb bd3e 	b.w	80095c0 <_malloc_r>
 800db44:	b92a      	cbnz	r2, 800db52 <_realloc_r+0x24>
 800db46:	f7fd fd65 	bl	800b614 <_free_r>
 800db4a:	2400      	movs	r4, #0
 800db4c:	4620      	mov	r0, r4
 800db4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db52:	f000 f827 	bl	800dba4 <_malloc_usable_size_r>
 800db56:	4285      	cmp	r5, r0
 800db58:	4606      	mov	r6, r0
 800db5a:	d802      	bhi.n	800db62 <_realloc_r+0x34>
 800db5c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800db60:	d8f4      	bhi.n	800db4c <_realloc_r+0x1e>
 800db62:	4629      	mov	r1, r5
 800db64:	4640      	mov	r0, r8
 800db66:	f7fb fd2b 	bl	80095c0 <_malloc_r>
 800db6a:	4607      	mov	r7, r0
 800db6c:	2800      	cmp	r0, #0
 800db6e:	d0ec      	beq.n	800db4a <_realloc_r+0x1c>
 800db70:	42b5      	cmp	r5, r6
 800db72:	462a      	mov	r2, r5
 800db74:	4621      	mov	r1, r4
 800db76:	bf28      	it	cs
 800db78:	4632      	movcs	r2, r6
 800db7a:	f7fc ff56 	bl	800aa2a <memcpy>
 800db7e:	4621      	mov	r1, r4
 800db80:	4640      	mov	r0, r8
 800db82:	f7fd fd47 	bl	800b614 <_free_r>
 800db86:	463c      	mov	r4, r7
 800db88:	e7e0      	b.n	800db4c <_realloc_r+0x1e>

0800db8a <__ascii_wctomb>:
 800db8a:	4603      	mov	r3, r0
 800db8c:	4608      	mov	r0, r1
 800db8e:	b141      	cbz	r1, 800dba2 <__ascii_wctomb+0x18>
 800db90:	2aff      	cmp	r2, #255	@ 0xff
 800db92:	d904      	bls.n	800db9e <__ascii_wctomb+0x14>
 800db94:	228a      	movs	r2, #138	@ 0x8a
 800db96:	601a      	str	r2, [r3, #0]
 800db98:	f04f 30ff 	mov.w	r0, #4294967295
 800db9c:	4770      	bx	lr
 800db9e:	700a      	strb	r2, [r1, #0]
 800dba0:	2001      	movs	r0, #1
 800dba2:	4770      	bx	lr

0800dba4 <_malloc_usable_size_r>:
 800dba4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dba8:	1f18      	subs	r0, r3, #4
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	bfbc      	itt	lt
 800dbae:	580b      	ldrlt	r3, [r1, r0]
 800dbb0:	18c0      	addlt	r0, r0, r3
 800dbb2:	4770      	bx	lr

0800dbb4 <_init>:
 800dbb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbb6:	bf00      	nop
 800dbb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbba:	bc08      	pop	{r3}
 800dbbc:	469e      	mov	lr, r3
 800dbbe:	4770      	bx	lr

0800dbc0 <_fini>:
 800dbc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbc2:	bf00      	nop
 800dbc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbc6:	bc08      	pop	{r3}
 800dbc8:	469e      	mov	lr, r3
 800dbca:	4770      	bx	lr
